From m.dejonge at tudelft.nl  Fri Apr  1 09:12:53 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 01 Apr 2011 07:12:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22467 -
	sglr-recovery/completion-rules
Message-ID: <20110401071253.D76EF108C00E@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Apr  1 07:12:53 2011
New Revision: 22467
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22467&sc=1

Log:
Share project "completion-rules" into "https://svn.strategoxt.org/repos/StrategoXT/sglr-recovery"

Added:
   sglr-recovery/completion-rules/

From m.dejonge at tudelft.nl  Fri Apr  1 09:13:46 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 01 Apr 2011 07:13:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22468 -
	sglr-recovery/completion-rules
Message-ID: <20110401071346.47D73108C022@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Apr  1 07:13:45 2011
New Revision: 22468
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22468&sc=1

Log:
stratego code for generating recover rules for code completion

Added:
   sglr-recovery/completion-rules/generate-completion-rules.str

Added: sglr-recovery/completion-rules/generate-completion-rules.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/completion-rules/generate-completion-rules.str	Fri Apr  1 07:13:45 2011	(r22468)
@@ -0,0 +1,323 @@
+module generate-completion-rules
+
+imports
+  include/SDF
+  libstratego-gpp
+
+rules //pretty-printed rules
+
+/*generate rules inclusive DUMMY productions*/
+generate-completion-rules-pp=      	  
+	generate-completion-rules;
+	pp-sdf-productions
+
+/*generate rules that preserve AST structure*/
+generate-wellformed-completion-rules-pp=      	  
+	generate-completion-rules(wellformed);
+	pp-sdf-productions
+
+/*generate rules exclusive completions by inserting literals at the end
+ * (which are (in most cases) already covered by INSERT recover rules)
+ */
+generate-sort-completion-rules-pp=      	  
+	generate-completion-rules(sort-inserting);
+	pp-sdf-productions
+
+/*generate rules that preserve AST structure and insert a sort*/
+generate-wellformed-sort-completion-rules-pp=      	  
+	generate-completion-rules(wellformed; sort-inserting);
+	pp-sdf-productions
+
+pp-sdf-productions=
+      	  map(try(pp-sdf))
+      	; separate-by(|"\n") 
+      	; concat-strings
+
+pp-sdf =
+    ast2abox(|[<import-term(include/SDF.pp.af)>,
+               <import-term(include/SDF.generated.pp.af)>]);
+    box2text-string(|250)
+
+rules //main strategy
+
+sort-inserting=
+	where(has-custom-ast-attr)
+
+wellformed=
+	where(
+		not(
+			oncetd(?appl(unquoted("ast"), [fun(quoted(ast-string))]));
+			<is-substring(dummy-string)> ast-string
+		)
+	)
+
+generate-completion-rules(prod-filter)= //TODO: save, unsave, no-lit-only
+	generate-completion-rules;
+	filter(prod-filter) //only
+		
+
+/**
+ * creates recover rules based on prefixes of the lhs
+ * - all prefixes that end on a sort term
+ * - closing-braces literals in (removed) suffix are made optional 
+ * because they may be inserted automatically by the editor
+ */	
+generate-completion-rules=
+	?ast;
+	<collect-default-dummies> ast;
+	prods:=<get-cf-productions> ast;
+	recover-prods:=<
+		map(create-completion-productions); 
+		flatten-list
+	> prods;
+	<remove-superfluous-prods> (recover-prods, prods)
+
+rules //filter duplications
+
+/**
+ * Removes duplicate and unuseful productions
+ * arg (recover-prods, prods)	
+ */
+remove-superfluous-prods =
+	diff(eq-completion-prod); 
+	filter-duplicates; 
+	filter(not(eq-lhs-rhs))
+
+filter-duplicates=
+	qsort(not(least-harmful-prod));  //least harmful are kept
+	mk-set(eq-completion-prod); //remove overlaps
+	reverse //starts with productions that are least harmful to the ast
+
+mk-set(eq)=
+	foldr(![], union(eq), ![<id>])
+
+least-harmful-prod=
+	?(prod(_, _, attr-1), prod(_, _, attr-2));
+	(where(oncetd(?appl(unquoted("cons"),_)))<+
+	where(
+		<oncetd(?appl(unquoted("ast"), [fun(quoted(ast-string-1))]))> attr-1;
+		<oncetd(?appl(unquoted("ast"), [fun(quoted(ast-string-2))]))> attr-2;
+		<is-substring(dummy-string)> ast-string-2 //TODO: count dummies?
+	))
+
+
+
+eq-lhs-rhs=
+	where(
+		?prod([lhs], rhs, _);
+		<equal>(lhs, rhs)
+	)
+
+eq-completion-prod=
+	where(
+		?(prod(lhs-1, rhs, _), prod(lhs-2, rhs, _));
+		<equal>(
+			<reverse; drop-while(?opt(lit(_)))> lhs-1,
+			<reverse; drop-while(?opt(lit(_)))> lhs-2
+		)    		
+	)
+
+
+rules //prod -> [completion-recover-productions]
+
+//prod -> [completion-recover-productions]
+create-completion-productions:
+	prod at prod(lhs, rhs, attr) -> derived-completion-rules
+	where
+		(
+			<?attrs(_)> attr;
+			lhs-completions:=<try(expand-lhs); init> [lhs]; 
+			derived-completion-rules:=<map(make-completion-production(|prod))> lhs-completions
+		)<+
+		derived-completion-rules:=[]
+		
+		
+//lhs -> [lhs-compl-1, lhs-compl-2, ...lhs]
+expand-lhs: 
+	[h|t] -> <try(expand-lhs)>[h-broken,h|t]
+	where 
+		h-broken:=<at-suffix-rev(create-completion-suffix)> h 
+		
+create-completion-suffix:
+	[h|tail] -> [h|completion-tail]
+	where
+		<oncetd(?sort(_))> h;
+		completion-tail:=< //tail should contain a required subterm 
+			where(
+				fetch(
+					not(
+						?opt(_) <+
+						?iter-star(_) <+
+						?iter-star-sep(_, _)
+					)<+
+					is-closing-bracket
+				)
+			); 
+			filter(is-closing-bracket; to-opt-lit)  //sorts are removed, closing literals are made optional
+		> tail
+
+/**
+ * Closing brackets in removed suffix are made optional 
+ * (to allow completion in case they are automatically added by the IDE)
+ */
+is-closing-bracket=
+	where(
+		?lit(l); 
+		<un-double-quote; (?")" <+ ?">" <+ ?"]" <+ ?"}" <+ ?"end" <+ "]|" <+ "}|")> l
+	)
+
+to-opt-lit:
+	lit(_) -> opt(<id>)
+
+to-opt-lit=
+	?opt(lit(_))
+
+// cutted lhs -> prod (recover)
+make-completion-production(|prod):
+	lhs-completion -> prod(lhs-completion, rhs, attr-completion)
+	where
+		<?prod(lhs, rhs, attr)> prod; 
+		lhs-completion-sorts:=<filter(oncetd(?sort(_)))> lhs-completion;
+		lhs-completion-sort-count:=<length> lhs-completion-sorts; //number of remaining lhs sorts
+		lhs-sorts:=<filter(oncetd(?sort(_)))> lhs;
+		dummy-sorts:=<eliminate-prefix(|lhs-completion-sorts)> lhs-sorts; //removed sorts
+		if <not(?[])> dummy-sorts then
+			dummy-terms:=<map(get-dummy-node <+ dummy-string)> dummy-sorts; 
+			cons-name:=<get-cons-name> attr; 
+			ast-string:=<make-ast-string>(cons-name, lhs-completion-sort-count, dummy-terms); 
+			attr-completion:= <oncetd(replace-cons-with-ast(|ast-string)); add-recover-attr> attr
+		else
+			attr-completion:= <add-recover-attr> attr
+		end
+		
+get-cons-name=
+	oncetd(
+		?default(appl(unquoted("cons"), [fun(quoted(<un-double-quote; ?cons-name>))]))
+	);
+	!cons-name
+
+make-ast-string:
+	(cons-name, nr-of-args, dummy-args) -> $["[cons-name]([args])"]
+	where
+		lhs-args:=<dec; upto; map(inc; !$[<[<id>]>])> nr-of-args;
+		args:=<conc; map(try(un-double-quote)); separate-by(|","); concat-strings>(lhs-args, dummy-args)
+		
+replace-cons-with-ast(|ast-string):
+	default(appl(unquoted("cons"), [fun(quoted(_))])) -> default(appl(unquoted("ast"), [fun(quoted(ast-string))]))
+
+add-recover-attr:
+	 attrs(lst) -> attrs([term(default(fun(unquoted("recover"))))|lst])
+
+
+eliminate-prefix(|prefix):
+	[h|tail] -> lst-suffix
+	where
+		<?[h|pt]> prefix;
+		lst-suffix:=<eliminate-prefix(|pt)> tail
+
+eliminate-prefix(|prefix)=
+	is-list;
+	where(<?[]> prefix)
+		
+rules
+
+/**
+ * Fills Lookup table that maps sort terms to ast nodes.
+ * iter-star(-sep) -> [], opt(x) -> None(), 
+ * for injections the ast-node for the lhs is taken for the rhs.
+ */
+collect-default-dummies=
+	get-cf-productions; 
+	repeat(some(put-dummy-node <+ put-dummy-node-injection))
+	//REMARK: full recursion leads to artificial dummies
+	//TODO (?): Derive dummy nodes in case rhs is unique and lhs terms are known? 
+	//TODO: other heuristics?
+
+get-cf-productions =
+	collect-all(?context-free-syntax(<id>));
+	flatten-list
+	
+put-dummy-node=
+	?prod(lhs, rhs, attrs);
+	<?[<is-sort-term>] <+ map(has-default-node <+ is-non-alphanum-literal)> lhs; //only include "empty" values, like: ";" -> Stm {cons(EmptyStm)}
+	<not(get-dummy-node)> rhs;
+	dummy-args:=<filter(is-sort-term); map(get-dummy-node)> lhs;
+	node-name:=<get-cons-name> attrs;
+	ast-string:=<make-ast-string> (node-name, 0, dummy-args); 
+	rules(GetDummyNode: rhs -> ast-string)
+
+put-dummy-node-injection=
+	?prod(lhs, rhs, attrs); 
+	<not(get-dummy-node)> rhs;
+	<not(has-ast-attr)> attrs; // is injection
+	[trm]:=<filter(is-sort-term); map(get-dummy-node)> lhs; 
+	ast-string:= trm; 
+	rules(GetDummyNode: rhs -> ast-string) 
+
+has-default-node=
+	?iter-star(_)<+
+	?iter-star-sep(_, _) <+
+	?opt(_) <+
+	?iter(<has-default-node>) <+
+	?iter-sep(<has-default-node>, _) <+
+	(?alt(x, y); where(<has-default-node>x <+ <has-default-node>y))	
+
+is-non-alphanum-literal=
+	?lit(<not(un-double-quote; string-as-chars(map(is-alphanum)))>)
+
+
+has-ast-attr=
+	where(
+		oncetd(
+			?default(appl(unquoted("ast"),_))<+
+			?default(appl(unquoted("cons"),_))
+		)
+	)
+
+has-custom-ast-attr=
+	where(
+		oncetd(
+			?default(appl(unquoted("ast"),_))
+		)
+	)
+
+is-sort-term =
+	where(
+		oncetd(?sort(_))
+	)
+
+get-dummy-node=
+	GetDummyNode
+
+get-dummy-node:
+	iter-star(_) -> "[]"
+	where
+		is-sort-term
+
+get-dummy-node:
+	iter-star-sep(_, _) -> "[]"	
+	where
+		is-sort-term
+
+get-dummy-node:
+	opt(_) -> "None()"
+	where
+		is-sort-term
+
+get-dummy-node:
+	alt(a, b) -> <<get-dummy-node> a <+ <get-dummy-node> b >
+
+get-dummy-node:
+	iter(srt) -> <map(try(un-double-quote)); concat-strings>  ["[", <get-dummy-node> srt, "]"]
+
+get-dummy-node:
+	iter-sep(srt, _) -> <map(try(un-double-quote)); concat-strings> ["[", <get-dummy-node> srt, "]"]
+	
+dummy-string=
+	!"DUMMY()"
+
+
+//TODO: completion attribute?
+//TODO: completions only in cursor region?
+//TODO: interaction WATER, INSERT, COMPLETION
+

From m.dejonge at tudelft.nl  Fri Apr  1 09:21:47 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 01 Apr 2011 07:21:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22469 -
	sglr-recovery/trunk/errorgen
Message-ID: <20110401072147.109167F8008@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Apr  1 07:21:46 2011
New Revision: 22469
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22469&sc=1

Log:
Share project "errorgen" into "https://svn.strategoxt.org/repos/StrategoXT/sglr-recovery"

Added:
   sglr-recovery/trunk/errorgen/

From m.dejonge at tudelft.nl  Fri Apr  1 09:22:48 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 01 Apr 2011 07:22:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22470 -
	sglr-recovery/trunk/errorgen
Message-ID: <20110401072248.221A8108C024@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Apr  1 07:22:47 2011
New Revision: 22470
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22470&sc=1

Log:
stratego code for automatic generation of syntax errors

Added:
   sglr-recovery/trunk/errorgen/combined.str
   sglr-recovery/trunk/errorgen/create-testset.str
   sglr-recovery/trunk/errorgen/custom-literal-symbols.str
   sglr-recovery/trunk/errorgen/errors-literal-symbols.str
   sglr-recovery/trunk/errorgen/incomplete-constructs.str

Added: sglr-recovery/trunk/errorgen/combined.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/errorgen/combined.str	Fri Apr  1 07:22:47 2011	(r22470)
@@ -0,0 +1,63 @@
+module errorgen/combined
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  errorgen/errors-literal-symbols
+  errorgen/incomplete-constructs
+  
+strategies
+
+create-source-combined-errors(|constructor-name, nr-of-lex-errors):
+	ast -> text
+	where
+		text:=<
+			create-source-incomplete-construct-with-broken-child(|constructor-name);
+			create-source-combined-lexical-errors-from-text(|nr-of-lex-errors)
+		> ast
+			
+create-source-combined-lexical-errors(|nr-of-errors):
+	ast -> text
+	where
+		text:=<origin-text; create-source-combined-lexical-errors-from-text(|nr-of-errors,0)> ast
+		
+create-source-combined-lexical-errors-from-text(|nr-of-errors)
+	= create-source-combined-lexical-errors-from-text(|nr-of-errors, 0)
+
+create-source-combined-lexical-errors-from-text(|nr-of-errors, sbreak):
+	text -> malformed-text
+	where
+		<gt>(nr-of-errors, 0);
+		if  
+			<eq> (sbreak,0); 
+			err-text:= <random-removal> text
+		then
+			malformed-text:=<create-source-combined-lexical-errors-from-text(|<dec> nr-of-errors, 1)> err-text			
+		else if  
+			<eq> (sbreak,1); 
+			err-text:= <random-replace> text
+		then
+			malformed-text:=<create-source-combined-lexical-errors-from-text(|<dec> nr-of-errors, 0)> err-text
+		else
+			fail
+			//malformed-text:=<create-source-combined-lexical-errors-from-text(|<dec> nr-of-errors, 0)> text
+		end	
+		end
+
+create-source-combined-lexical-errors-from-text(|nr-of-errors, sbreak)=
+	where(<leq>(nr-of-errors,0))
+
+
+random-removal:
+	text -> malformed-text
+	where
+		index-r:=<next-random-abs-max(|<list-removed-non-comment-symbols; length>)>;
+		removal:=<list-removed-non-comment-symbols; index(|index-r)>; //debug(!"removal");
+		malformed-text:= <create-source-missing-lexical-from-text(|removal)> text
+
+random-replace:
+	text -> malformed-text
+	where
+		index-r:=<next-random-abs-max(|<list-replaced-non-comment-symbols; length>)>;
+		lextup:=<list-replaced-non-comment-symbols; index(|index-r)>; //debug(!"replacing");
+		malformed-text:= <create-source-replaced-lexical-from-text(|lextup)> text

Added: sglr-recovery/trunk/errorgen/create-testset.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/errorgen/create-testset.str	Fri Apr  1 07:22:47 2011	(r22470)
@@ -0,0 +1,191 @@
+//TODO: 
+//1. error lexical tokens at the text level (split string at random n)
+//2. modular so that errors can be combined
+//3. better designed generate strategies
+
+//Fail: incomplete can not be combined with lexicals 
+  
+module errorgen/create-testset
+
+imports
+  libstratego-lib
+  errorgen/incomplete-constructs
+  lib/editor-common.generated
+  lib-reconstruction/text-to-text 
+  errorgen/errors-literal-symbols
+  errorgen/combined
+  errorgen/custom-literal-symbols
+  
+strategies 
+
+generate-automatic-tescases(|path)=
+	?ast; 
+	<generate-testcases-missing-lexical(|path, <list-removed-symbols>)> ast;
+	<generate-testcases-missing-lexical(|path, <list-frequent>)> ast;
+	<generate-testcases-replaced-lexical(|path, <list-replaced-symbols>)> ast;
+	<generate-testcases-superfluous-lexical(|path, <list-superfluous-symbols>)> ast;
+	<generate-testcases-incomplete-constructs-auto(|path, <list-with-constructs-restricted>)> ast
+
+
+generate-tescases(|path)=
+	?ast; 
+	<generate-testcases-incomplete-constructs(|path, <list-with-constructs-complete(|1)>)> ast;
+	<generate-testcases-incomplete-constructs-broken-child(|path, <list-with-constructs-complete(|2)>)> ast;
+	//<set-random-seed> 12345;
+	<generate-testcases-combined(|path, 2, <list-with-constructs-complete(|3)>)> ast;
+	<generate-testcases-broken-constructs(|path, <list-with-constructs-complete(|4)>)> ast;
+	/*
+	<generate-tescases-missing-misc(|path)> ast;
+	<generate-tescases-misplaced-constructs(|path)> ast;
+	*/
+	//<set-random-seed> 23456;
+	<generate-testcases-missing-lexical(|path, <list-removed-symbols>)> ast;
+	//<set-random-seed> 34567;
+	<generate-testcases-missing-lexical(|path, <list-frequent>)> ast;
+	//<set-random-seed> 45678;
+	<generate-testcases-replaced-lexical(|path, <list-replaced-symbols>)> ast;
+	//<set-random-seed> 56789;
+	<generate-testcases-superfluous-lexical(|path, <list-superfluous-symbols>)> ast
+
+generate-testcases-combined(|path, lex-err-count, lst-constructs)=
+	?ast;
+	if<?[h|tail]> lst-constructs then
+		if
+			(fname, txt):=<generate-single-testcase(create-source-combined-errors(|h, lex-err-count) |path, "test-cases", "combined", <concat-strings> ["combined: ", <inc; int-to-string> lex-err-count])> ast
+		then
+			<save>(<string-replace(|"test-cases", "intended-recoveries")>fname, txt)
+		end;
+		<generate-testcases-combined(|path, lex-err-count, tail)> ast
+	end
+
+generate-testcases-broken-constructs (|path, lst-constructs)=
+	?ast;
+	if<?[h|tail]> lst-constructs then 
+		if
+			(fname, txt):=<generate-single-testcase(create-source-broken-context(|h) |path, "test-cases", "broken-context", <concat-strings> ["broken-context: ", h])> ast;
+			<is-unknown-recovery-broken-context(|h)> ast
+		then
+			<save>(<string-replace(|"test-cases", "intended-recoveries")>fname, txt)
+		end;
+		<generate-testcases-broken-constructs(|path, tail)> ast
+	end
+
+generate-testcases-incomplete-constructs-broken-child(|path, lst-constructs)=
+	?ast;
+	if<?[h|tail]> lst-constructs then
+		if
+			(fname, txt):=<generate-single-testcase(create-source-incomplete-construct-with-broken-child(|h) |path, "test-cases", "incomplete", <concat-strings> ["incomplete: ", h])> ast;
+			<is-unknown-recovery-incomplete-with-broken-child(|h)> ast
+		then
+			<save>(<string-replace(|"test-cases", "intended-recoveries")>fname, txt)
+		end;
+		<generate-testcases-incomplete-constructs-broken-child(|path, tail)> ast
+	end
+
+
+generate-testcases-incomplete-constructs(|path, lst-constructs)=
+	generate-testcases-incomplete-constructs(|path, lst-constructs, 1);
+	generate-testcases-incomplete-constructs(|path, lst-constructs, 2);
+	generate-testcases-incomplete-constructs(|path, lst-constructs, 3)
+
+generate-testcases-incomplete-constructs(|path, lst-constructs, n)=
+	?ast;
+	if<?[h|tail]> lst-constructs then
+		if
+			(fname, txt):=<generate-single-testcase(create-source-incomplete-construct(|h, n) |path, "test-cases", "incomplete", <concat-strings> ["incomplete: ", h, "[", <int-to-string> n,"]"])> ast;
+			<is-unknown-recovery-incomplete-construct(|h, n)> ast 
+		then
+			<save>(<string-replace(|"test-cases", "intended-recoveries")>fname, txt)
+		end;
+		<generate-testcases-incomplete-constructs(|path, tail, n)> ast
+	end
+
+generate-testcases-incomplete-constructs-auto(|path, lst-constructs)=
+	generate-testcases-incomplete-constructs-auto(|path, lst-constructs, 1);
+	generate-testcases-incomplete-constructs-auto(|path, lst-constructs, 2);
+	generate-testcases-incomplete-constructs-auto(|path, lst-constructs, 3)
+
+generate-testcases-incomplete-constructs-auto(|path, lst-constructs, n)= 
+	?ast;
+	if<?[h|tail]> lst-constructs then		
+		<generate-single-testcase(create-source-automated-incomplete-construct(|h, n) |path, "test-cases", "auto_incomplete", <concat-strings> ["incomplete: ", h, "[", <int-to-string> n,"]"])> ast;
+		<generate-testcases-incomplete-constructs-auto(|path, tail, n)> ast
+	end
+/*
+generate-tescases-misplaced-constructs(|path) =
+	?ast;
+	<generate-single-testcase(create-source-misplaced(misplaced-classbody-decl)|path, "test-cases", "misplaced", "misplaced-classbody-decl")> ast;
+	<generate-single-testcase(create-source-misplaced(misplaced-annotation)|path, "test-cases", "misplaced", "misplaced-annotation")> ast;
+	<generate-single-testcase(create-source-misplaced(misplaced-super)|path, "test-cases", "misplaced", "misplaced-super")> ast;
+	<generate-single-testcase(create-source-misplaced(misplaced-stm-block)|path, "test-cases", "misplaced", "misplaced-stm-block")> ast;
+	<generate-single-testcase(create-source-misplaced(misplaced-dynamic-rule)|path, "test-cases", "misplaced", "misplaced-dyn-rule")> ast;
+	<generate-single-testcase(create-source-misplaced(misplaced-dynamic-strategy)|path, "test-cases", "misplaced", "misplaced-strategy")> ast;
+	<generate-single-testcase(create-source-misplaced(misplaced-catch)|path, "test-cases", "misplaced", "misplaced-catch")> ast
+*/
+
+generate-testcases-superfluous-lexical(|path, superfluous)=
+	?ast;
+	if<?[h|tail]> superfluous then
+		<generate-single-testcase(create-source-superfluous-lexical(|h) |path, "test-cases", "superfluous", <conc-strings> ("superfluous: ", h))> ast;
+		<generate-testcases-superfluous-lexical(|path, tail)> ast
+	end
+
+generate-testcases-replaced-lexical(|path, replaced)=
+	?ast;
+	if<?[h|tail]> replaced then
+		<generate-single-testcase(create-source-replaced-lexical(|h) |path, "test-cases", "incorrect", <concat-strings> ["incorrect: ", <Fst> h, " -> ", <Snd> h])> ast;
+		<generate-testcases-replaced-lexical(|path, tail)> ast
+	end
+
+generate-testcases-missing-lexical(|path, removals)=
+	?ast;
+	if<?[h|tail]> removals then
+		<generate-single-testcase(create-source-missing-lexical(|h) |path, "test-cases", "missing", <conc-strings> ("missing: ", h))> ast;
+		<generate-testcases-missing-lexical(|path, tail)> ast
+	end
+/*
+generate-tescases-missing-misc(|path) =
+	?ast;
+	<generate-single-testcase(create-source-misplaced(missing-id)|path, "test-cases", "missing", "missing-id")> ast
+*/
+
+generate-single-testcase(err-source-from-ast|path, dirname, category-name, description)=
+	?ast;
+	fname:=<get-file-path(|path, dirname, category-name)>;
+	if //debug(!"if: ");
+		txt:=<err-source-from-ast> ast 
+	then
+		<save>(fname, txt);
+		<register-testcase>(fname, description);
+		!(fname, txt)
+	else //debug(!"else: ");
+		<register-failed-testcase>(fname, description);
+		!0
+	end
+
+get-file-path(|path, dirname, category-name)=
+	name:=<newname> "";
+	ext:=<conc-strings>(category-name, ".", name, ".org");
+	errfile:=<concat-strings; guarantee-extension(|ext)>[dirname, "/",<base-filename> path]
+
+register-testcase=
+	?(file-name, description);
+	rules(
+		FileDescription :+ file -> (file-name, description)
+	)
+
+register-failed-testcase=
+	?(file-name, description);
+	rules(
+		FileDescriptionFailed :+ file -> (file-name, <conc-strings>(description, " FAILED! "))
+	)
+
+
+save=
+ 	?(pathname, text);
+ 	testfile := <fopen <+ debug(!"Could not open file: "); fail> (pathname, "w");
+    <fputs> (text, testfile);
+    <fclose> testfile;
+    <refresh-workspace-file> pathname
+
+

Added: sglr-recovery/trunk/errorgen/custom-literal-symbols.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/errorgen/custom-literal-symbols.str	Fri Apr  1 07:22:47 2011	(r22470)
@@ -0,0 +1,31 @@
+module errorgen/custom-literal-symbols
+
+imports
+  
+strategies
+
+list-frequent =
+		![">", "|>", "}","=", ")", ";"]
+
+list-removed-symbols = 
+	<conc>(<list-removed-non-comment-symbols>, <list-removed-comment-symbols>)
+
+list-removed-non-comment-symbols =
+	!["WHERE", "$", ";", ",", "|", "|>", "<|", "<", ">", "{", "}", "[", "]", "\"", "\"", "void", "="]
+
+list-removed-comment-symbols=
+	!["/*", "*/", "*", "//"]
+
+list-replaced-symbols = 
+	<conc>(<list-replaced-non-comment-symbols>, <list-replaced-comment-symbols>)
+
+list-replaced-non-comment-symbols=
+	![("<|", "|<"), ("|>", ">|"), ("|<", "<"), (">|", ">"), (",", "."), (".", ","),("/","\\")]
+
+list-replaced-comment-symbols=
+	![("//", "\\\\"), ("/*", "*/"), ("/*", "\\*"), ("*/", "/*")]
+	
+list-superfluous-symbols= 
+	  ![";", ",", "}","{", ")", "(", ">", "<", ">|", "="]
+
+

Added: sglr-recovery/trunk/errorgen/errors-literal-symbols.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/errorgen/errors-literal-symbols.str	Fri Apr  1 07:22:47 2011	(r22470)
@@ -0,0 +1,59 @@
+module errorgen/errors-literal-symbols
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  errorgen/custom-literal-symbols
+  
+strategies
+
+create-source-superfluous-lexical(|old)=
+	create-source-replaced-lexical(|(old, <concat-strings>[old, " ", old]))
+
+create-source-superfluous-lexical-from-text(|old)=
+	create-source-replaced-lexical-from-text(|(old, <concat-strings>[old, " ", old]))
+
+create-source-missing-lexical(|old)=
+	create-source-replaced-lexical(|(old, " "))
+
+create-source-missing-lexical-from-text(|old)=
+	create-source-replaced-lexical-from-text(|(old, " "))
+
+create-source-replaced-lexical(|oldnew):
+	ast -> text
+	where
+		text:=<origin-text; create-source-replaced-lexical-from-text(|oldnew)> ast
+
+create-source-replaced-lexical-from-text(|oldnew):
+	text -> malformed-text
+	where
+		<?(old,new)> := oldnew;
+		n:=<next-random-abs-max(|<strlen> text)>;
+		malformed-text:= <string-as-chars(
+			(prefix, suffix):=<split-at(|n)>;
+			if
+				new-suffix:=<replace-chars(|<explode-string> old, <explode-string> new)> suffix
+			then
+				<conc>(prefix, new-suffix)
+			else
+				new-prefix:=<replace-chars(|<explode-string> old, <explode-string> new)> prefix;
+				<conc>(new-prefix, suffix)
+			end
+		)> text
+
+next-random-abs-max(|max-value)=
+	<mod>(<next-random; abs>, max-value)
+
+replace-chars(|old, new): chars -> newchars
+	where
+		if <eq>(<common-prefix>(chars, old), old) then
+			newchars:=<conc>(new, <drop(<length> old)> chars)
+		else
+			if
+				<?[h|tail]> chars
+			then
+				newchars:=[h|<replace-chars(|old, new)> tail]
+			else
+				fail
+			end
+		end
\ No newline at end of file

Added: sglr-recovery/trunk/errorgen/incomplete-constructs.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/errorgen/incomplete-constructs.str	Fri Apr  1 07:22:47 2011	(r22470)
@@ -0,0 +1,173 @@
+module errorgen/incomplete-constructs
+
+imports
+  libstratego-lib
+  lib/editor-common.generated  
+  lib-reconstruction/text-to-text
+  
+strategies //strategies for corrupted trees
+
+create-source-automated-incomplete-construct(|constructor-name, n)=
+	where(not(is-unknown-recovery-incomplete-construct(|constructor-name, n)));
+	create-source-incomplete-construct(|constructor-name, n)
+	
+create-source-incomplete-construct(|constructor-name, n):
+	ast -> <transform-to-text(oncetd( 
+		where(<eq>(<get-constructor>, constructor-name));
+		?node;
+		r:=<incomplete-construct(|n)> node;
+		brokencontext:=<broken-context-at-first-child<+!""> node;
+		not(<eq>(r, brokencontext));
+		!r
+	))> ast
+	
+create-source-broken-context(|constructor-name):
+	ast -> <transform-to-text(oncebu(where(<eq>(<get-constructor>, constructor-name)); broken-context-at-first-child))> ast
+
+create-source-incomplete-construct-with-broken-child(|constructor-name):
+	ast -> <transform-to-text(oncetd(where(<eq>(<get-constructor>, constructor-name)); incomplete-construct-with-broken-child))> ast
+
+
+is-unknown-recovery-incomplete-construct(|constructor-name, n)=
+	oncebu(where(<eq>(<get-constructor>, constructor-name)); ?node; incomplete-construct(|n); ?brokentext);
+	<requires-userdefined-recovery(|brokentext)> node
+
+is-unknown-recovery-broken-context(|constructor-name)=
+	oncebu(where(<eq>(<get-constructor>, constructor-name)); ?node; broken-context-at-first-child; ?brokentext);
+	<requires-userdefined-recovery(|brokentext)> node
+
+is-unknown-recovery-incomplete-with-broken-child(|constructor-name)=
+	oncebu(where(<eq>(<get-constructor>, constructor-name)); ?node; incomplete-construct-with-broken-child; ?brokentext);
+	<requires-userdefined-recovery(|brokentext)> node
+
+strategies //strategies for collecting constructs
+	
+list-with-constructs-complete(|nth) =	
+	collect-all(
+		where(not(is-string <+ is-list <+ is-int)); get-constructor
+	);
+	make-set;
+	nmap(keep-mod|nth);
+	filter(not(?""))
+
+keep-mod(|i): a -> ""
+where
+	not(<eq>(<mod>(i,4),0))
+
+keep-mod(|i): a -> a
+where
+	<eq>(<mod>(i,4),0)
+
+
+list-with-constructs-restricted =	
+	collect-all(is-list); //<+(is-strategy-combinator; get-arguments) 
+	flatten-list; 
+	map(get-constructor); 
+	make-set
+/*
+is-strategy-combinator=
+	?LChoice(_, _);
+	?Seq(_, _);
+	?RChoice(_, _) 
+*/
+
+strategies // for breaking the constructs
+
+incomplete-construct(|n)=
+	?node;
+	<lt>(n,<get-node-tokens; length> node); //do not remove complete construct
+	<node-as-tokens(remove-suffix(|n))> node
+
+incomplete-construct-with-broken-child=
+	?node; 
+	first-child:=<get-arguments; ?[h|tail]; !h> node; 
+	text-first-child:=<origin-text> first-child; 
+	broken-text-first-child:= <origin-tokens; init; concat-strings> first-child; 
+	tokens:=<get-node-tokens> node; 
+	<conc> (<take-until(?text-first-child)>, [broken-text-first-child]); 
+	concat-strings;  
+	trim-chars(?'\t'<+ ?' '<+?'\n')
+
+broken-context-at-first-child =
+	?node; 
+	first-child:=<get-arguments; ?[h|tail]; !h> node; 
+	text-first-child:=<origin-text> first-child; 
+	tokens:=<get-node-tokens> node; 
+	<conc> (<take-until(?text-first-child)>, [text-first-child]); 
+	concat-strings;  
+	trim-chars(?'\t'<+ ?' '<+?'\n')
+
+strategies //helpers
+/*	
+requires-userdefined-recovery(|brokentext)=
+	child-texts:=<get-arguments; map(origin-text)>; 
+	<not(map(contains-fragment(|brokentext)))> child-texts 
+*/
+
+requires-userdefined-recovery(|brokentext)=
+	leaves:=<collect(is-string <+ is-int)>; 
+	<not(chech-substring-occurrences(|leaves))> brokentext 
+
+chech-substring-occurrences(|subs)=
+	?text;
+	if 
+		<?[h|tail]> subs 
+	then 
+		<is-substring(!h)> text; 
+		<split-after; Snd; chech-substring-occurrences(|tail)>(text, h)
+	end
+
+contains-fragment(|text)=
+	?substring;
+	<is-substring(!substring)> text
+
+remove-suffix(|n):
+	tokens -> prefix-tokens
+	where
+		if <eq>(n,0) then
+			prefix-tokens:=tokens
+		else 
+			(prefix, last):=<split-init-last> tokens;
+			if <is-whitespace-string> last then
+				prefix-tokens:=<remove-suffix(|n)> prefix
+			else
+				prefix-tokens:=<remove-suffix(|<dec> n)> prefix
+			end
+		end
+
+is-whitespace-string=
+	explode-string; 
+	map(is-whitespace<+?'\n')
+
+node-as-tokens(manipulate):
+	node -> manipulated-node-text
+	where
+		manipulated-node-text:=
+			<get-node-tokens;
+			manipulate; 
+			concat-strings; 
+			trim-chars(?'\t'<+ ?' '<+?'\n')> node
+
+get-node-tokens=
+	?node;
+	origin-tokens;
+	merge-tokens-of-child-nodes(|<get-arguments; map(origin-tokens)> node)
+
+merge-tokens-of-child-nodes(|set-of-child-fragments):
+	lst -> <merge-child-tokens(|h); merge-tokens-of-child-nodes(|tail)> lst
+	where
+		<?[h|tail]> set-of-child-fragments 
+
+merge-tokens-of-child-nodes(|set-of-child-fragments):
+	lst -> lst
+	where
+		<?[]> set-of-child-fragments
+
+merge-child-tokens(|child-tokens):
+	lst -> mlst
+	where 
+		mlst:=<at-suffix(?child-tokens; ![<concat-strings>])> lst <+
+		mlst:= <split-init-last; ?(prefix, last); <conc>(<merge-child-tokens(|child-tokens)> prefix, [last])> lst<+
+		mlst:=lst
+
+origin-tokens= prim("SSL_EXT_origin_tokens", <id>)
\ No newline at end of file

From tobivollebregt at gmail.com  Fri Apr  1 22:25:02 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 01 Apr 2011 20:25:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22471 - in
	spoofax-imp/trunk: org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/s...
Message-ID: <20110401202502.A701A7F800F@mx1.tudelft.nl>

Author: tvo
Date: Fri Apr  1 20:25:02 2011
New Revision: 22471
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22471&sc=1

Log:
Add support for cursor position in completion templates (use `(cursor)')

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf	Fri Apr  1 07:22:47 2011	(r22470)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf	Fri Apr  1 20:25:02 2011	(r22471)
@@ -9,7 +9,7 @@
     CompletionPart CompletionAnno
 
   syntax
-  
+
     "completions" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Completions")}
 
     "completions" -> <ReservedName-CF>
@@ -23,22 +23,22 @@
     "identifier" "lexical" ":" PropertyValue -> SemanticRule {cons("IdentifierLexical")}
 
     "completion" "keyword" ":" PropertyValue CompletionAnno -> SemanticRule {cons("CompletionKeyword")}
-    
+
     "completion" "template" ":" CompletionPart CompletionPart* CompletionAnno -> SemanticRule {cons("CompletionTemplate")}
-    
+
     %% Deprecated: conflicts with content completion
     "completion" "template" ":" Id CompletionPart+ CompletionAnno -> SemanticRule {cons("CompletionTemplate"), avoid, deprecated("Add quotes to the starting literal")}
-    
+
     "completion" "template" ":" Sort "=" CompletionPart CompletionPart* CompletionAnno -> SemanticRule {cons("CompletionTemplateWithSort")}
-    
+
     %% Used as content completion triggers
     "completion" "template" ":" PropertyValue CompletionPart* CompletionAnno -> SemanticRule {cons("CompletionTemplate"), recover, avoid}
     "completion" "template" ":" Sort "=" PropertyValue CompletionPart* CompletionAnno -> SemanticRule {cons("CompletionTemplateWithSort"), recover, avoid}
 
     "completion" "trigger" ":" PropertyValue CompletionAnno -> SemanticRule {cons("CompletionTrigger")}
-  
+
   context-free syntax
-  
+
     "completions" -> StrategoCall {reject}
     "completion"  -> StrategoCall {reject}
     "identifier"  -> StrategoCall {reject}
@@ -46,9 +46,10 @@
     "builder"     -> StrategoCall {reject}
     "occurrence"  -> StrategoCall {reject}
     ReservedName  -> StrategoCall {reject}
-    
+
     String      -> CompletionPart
     Placeholder -> CompletionPart {cons("Placeholder")}
+    "(cursor)"  -> CompletionPart {cons("Cursor")}
 
                  -> CompletionAnno {cons("None")}
     "(disabled)" -> CompletionAnno {cons("Disable")}
@@ -62,7 +63,7 @@
     "identifier" -> PropertyValue {reject}
 
   lexical syntax
-    
+
     "<" PlaceholderChar* ">" -> Placeholder
     ~[\>\n]                  -> PlaceholderChar
-    
+

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	Fri Apr  1 07:22:47 2011	(r22470)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	Fri Apr  1 20:25:02 2011	(r22471)
@@ -120,13 +120,11 @@
 	private static Completion parseContentProposalTemplate(IStrategoAppl template, int index, String sort) {
 		ITermFactory factory = Environment.getTermFactory();
 		IStrategoTerm prefixTerm = termAt(template, index + 0);
-		boolean noPrefix = "Placeholder".equals(cons(prefixTerm));
+		boolean noPrefix = !"String".equals(cons(prefixTerm));
 		String prefix = noPrefix ? "" : termContents(prefixTerm);
 		IStrategoList completionParts = termAt(template, index + 1);
 		IStrategoTerm anno = termAt(template, index + 2);
 		completionParts = factory.makeListCons(prefixTerm, completionParts);
-		if (noPrefix)
-			completionParts = factory.makeListCons(factory.makeString(""), completionParts);
 		return Completion.makeTemplate(prefix, sort, completionParts, "Blank".equals(cons(anno)));
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java	Fri Apr  1 07:22:47 2011	(r22470)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java	Fri Apr  1 20:25:02 2011	(r22471)
@@ -107,7 +107,11 @@
 				String contents = placeholder.stringValue();
 				contents = contents.substring(1, contents.length() - 1); // strip < >
 				result.append(contents);
-			} else {
+			}
+			else if ("Cursor".equals(cons(part))) {
+				// do nothing
+			}
+			else {
 				result.append(termContents(part));
 			}
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Fri Apr  1 07:22:47 2011	(r22470)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Fri Apr  1 20:25:02 2011	(r22471)
@@ -75,6 +75,9 @@
 		for (IStrategoList cons = proposalParts; !cons.isEmpty(); cons = cons.tail()) {
 			IStrategoTerm partTerm = cons.head();
 			String part = proposalPartToString(document, partTerm);
+			if ("Cursor".equals(cons(partTerm))) {
+				return new Point(offset + i, 0);
+			}
 			i += part.length();
 		}
 		return new Point(offset + i, 0);
@@ -96,7 +99,11 @@
 				String contents = placeholder.stringValue();
 				contents = contents.substring(1, contents.length() - 1); // strip < >
 				return AutoEditStrategy.formatInsertedText(contents, lineStart);
-			} else {
+			}
+			else if ("Cursor".equals(cons(part))) {
+				return "";
+			}
+			else {
 				return AutoEditStrategy.formatInsertedText(termContents(part), lineStart);
 			}
 		} catch (BadLocationException e) {
@@ -105,7 +112,13 @@
 		}
 	}
 
-	private LinkedModeModel buildLinkedModeModel(IDocument document, int offset, IStrategoList proposalParts) throws BadLocationException {
+	private static class LinkedModeModelAndExitPos {
+		public LinkedModeModel model;
+		public int exitPos;
+	}
+
+	private LinkedModeModelAndExitPos buildLinkedModeModel(IDocument document, int offset, IStrategoList proposalParts) throws BadLocationException {
+		LinkedModeModelAndExitPos result = new LinkedModeModelAndExitPos();
 		HashMap<String, LinkedPositionGroup> groups = new HashMap<String, LinkedPositionGroup>();
 		int i = 0;
 		for (IStrategoList cons = proposalParts; !cons.isEmpty(); cons = cons.tail()) {
@@ -119,27 +132,34 @@
 					group = new LinkedPositionGroup();
 					groups.put(part, group);
 				}
-				group.addPosition(new LinkedPosition(document, offset + i, part.length(), 0));
+				group.addPosition(new LinkedPosition(document, offset + i, part.length(), group.isEmpty() ? 0 : LinkedPositionGroup.NO_STOP));
+			}
+			else if ("Cursor".equals(cons(partTerm))) {
+				result.exitPos = offset + i;
 			}
 			i += part.length();
 		}
+		if (result.exitPos == 0) {
+			result.exitPos = offset + i;
+		}
 		if (!groups.isEmpty()) {
 			LinkedModeModel model = new LinkedModeModel();
 			for (LinkedPositionGroup group : groups.values()) {
 				model.addGroup(group);
 			}
-			return model;
+			result.model = model;
 		}
-		return null;
+		return result;
 	}
 
-	private void goToLinkedMode(ITextViewer viewer, int offset, IDocument doc, int exitPos, IStrategoList proposalParts) throws BadLocationException {
-		final LinkedModeModel model = buildLinkedModeModel(doc, offset, proposalParts);
+	private void goToLinkedMode(ITextViewer viewer, int offset, IDocument doc, IStrategoList proposalParts) throws BadLocationException {
+		final LinkedModeModelAndExitPos result = buildLinkedModeModel(doc, offset, proposalParts);
+		final LinkedModeModel model = result.model;
 		if (model != null) {
 			model.forceInstall();
 
 			final LinkedModeUI ui = new EditorLinkedModeUI(model, viewer);
-			ui.setExitPosition(viewer, exitPos, 0, Integer.MAX_VALUE);
+			ui.setExitPosition(viewer, result.exitPos, 0, Integer.MAX_VALUE);
 
 			final Job job = new UIJob("going into linked mode") {
 				@Override
@@ -166,8 +186,7 @@
 			document.replace(range.getOffset(), range.getLength(), newText.substring(prefix.length()));
 
 			if (newTextParts != null) {
-				Point selection = proposalPartsToSelection(document, newTextParts, range.getOffset() - prefix.length());
-				goToLinkedMode(viewer, range.getOffset() - prefix.length(), document, selection.x, newTextParts);
+				goToLinkedMode(viewer, range.getOffset() - prefix.length(), document, newTextParts);
 			}
 
 		} catch (BadLocationException e) {

From tobivollebregt at gmail.com  Fri Apr  1 22:25:17 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 01 Apr 2011 20:25:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22472 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110401202517.877BD108C00B@mx3.tudelft.nl>

Author: tvo
Date: Fri Apr  1 20:25:17 2011
New Revision: 22472
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22472&sc=1

Log:
Migrated from Region to Position as the latter can be linked to a document
so it automagically gets moved around when text is inserted/removed.

Also got rid of IMP SourceProposal as it can't work with Position and
needed a bunch of other tweaks for Spoofax too...

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Fri Apr  1 20:25:02 2011	(r22471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Fri Apr  1 20:25:17 2011	(r22472)
@@ -10,17 +10,19 @@
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
-import org.eclipse.imp.editor.SourceProposal;
 import org.eclipse.jface.text.BadLocationException;
 import org.eclipse.jface.text.IDocument;
 import org.eclipse.jface.text.ITextViewer;
-import org.eclipse.jface.text.Region;
+import org.eclipse.jface.text.Position;
+import org.eclipse.jface.text.contentassist.ICompletionProposal;
 import org.eclipse.jface.text.contentassist.ICompletionProposalExtension6;
+import org.eclipse.jface.text.contentassist.IContextInformation;
 import org.eclipse.jface.text.link.LinkedModeModel;
 import org.eclipse.jface.text.link.LinkedModeUI;
 import org.eclipse.jface.text.link.LinkedPosition;
 import org.eclipse.jface.text.link.LinkedPositionGroup;
 import org.eclipse.jface.viewers.StyledString;
+import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.graphics.Point;
 import org.eclipse.ui.progress.UIJob;
 import org.eclipse.ui.texteditor.link.EditorLinkedModeUI;
@@ -35,36 +37,46 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  * @author Tobi Vollebregt
  */
-public class ContentProposal extends SourceProposal implements ICompletionProposalExtension6 {
+public class ContentProposal implements ICompletionProposal, ICompletionProposalExtension6 {
 
 	private static volatile boolean justApplied;
 
 	private final ContentProposer proposer;
 
-	private final IStrategoList newTextParts;
-
 	private final Completion completion;
 
+	private final String prefix;
+
 	private final ITextViewer viewer;
 
-	public ContentProposal(ContentProposer proposer, Completion completion, String prefix, Region region, ITextViewer viewer) {
-		super(completion.getName(), completion.getPrefix(), prefix, region, null);
+	private Position position;
+
+	// Must be settable to get rid of constructor circular dependency with ProposalPosition
+	public void setPosition(Position position) {
+		this.position = position;
+	}
+
+	public ContentProposal(ContentProposer proposer, Completion completion, String prefix, Position position, ITextViewer viewer) {
 		this.proposer = proposer;
-		this.newTextParts = completion.getNewTextParts();
 		this.completion = completion;
+		this.prefix = prefix;
 		this.viewer = viewer;
+		this.position = position;
+	}
+
+	public ContentProposal(ContentProposer proposer, Completion completion, String prefix, ITextViewer viewer) {
+		this(proposer, completion, prefix, null, viewer);
 	}
 
-	@Override
 	public Point getSelection(IDocument document) {
+		final IStrategoList newTextParts = completion.getNewTextParts();
 		if (newTextParts == null) {
-			return super.getSelection(document);
+			return new Point(position.getOffset() + position.getLength() - prefix.length(), 0);
 		} else {
-			return proposalPartsToSelection(document, newTextParts, getRange().getOffset() - getPrefix().length());
+			return proposalPartsToSelection(document, newTextParts, position.getOffset() - prefix.length());
 		}
 	}
 
-	@Override
 	public String getAdditionalProposalInfo() {
 		// TODO: support newlines and tabs in proposal descriptions?
 		return completion.getDescription();
@@ -93,7 +105,7 @@
 
 	private String proposalPartToString(IDocument document, IStrategoTerm part) {
 		try {
-			String lineStart = AutoEditStrategy.getLineBeforeOffset(document, getRange().getOffset());
+			String lineStart = AutoEditStrategy.getLineBeforeOffset(document, position.getOffset());
 			if ("Placeholder".equals(cons(part))) {
 				IStrategoString placeholder = termAt(part, 0);
 				String contents = placeholder.stringValue();
@@ -173,20 +185,18 @@
 		}
 	}
 
-	@Override
 	public void apply(IDocument document) {
 		try {
-			final Region range = getRange();
+			final IStrategoList newTextParts = completion.getNewTextParts();
 			final String newText = newTextParts == null
-					? getNewText()
+					? completion.getPrefix()
 					: proposalPartsToString(document, newTextParts);
-			final String prefix = getPrefix();
 			justApplied = true;
-			assert document.get(range.getOffset() - prefix.length(), prefix.length()).equals(prefix);
-			document.replace(range.getOffset(), range.getLength(), newText.substring(prefix.length()));
+			assert document.get(position.getOffset() - prefix.length(), prefix.length()).equals(prefix);
+			document.replace(position.getOffset(), position.getLength(), newText.substring(prefix.length()));
 
 			if (newTextParts != null) {
-				goToLinkedMode(viewer, range.getOffset() - prefix.length(), document, newTextParts);
+				goToLinkedMode(viewer, position.getOffset() - prefix.length(), document, newTextParts);
 			}
 
 		} catch (BadLocationException e) {
@@ -201,13 +211,19 @@
 		return result;
 	}
 
-	@Override
-	public String getNewText() {
-		assert newTextParts == null : "Don't use me if newTextParts != null";
-		return super.getNewText();
+	public String getDisplayString() {
+		return completion.getName();
 	}
 
 	public StyledString getStyledDisplayString() {
 		return completion.getStyledName();
 	}
+
+	public Image getImage() {
+		return null;
+	}
+
+	public IContextInformation getContextInformation() {
+		return null;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Fri Apr  1 20:25:02 2011	(r22471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Fri Apr  1 20:25:17 2011	(r22472)
@@ -23,7 +23,7 @@
 import org.eclipse.imp.parser.IParseController;
 import org.eclipse.imp.services.IContentProposer;
 import org.eclipse.jface.text.ITextViewer;
-import org.eclipse.jface.text.Region;
+import org.eclipse.jface.text.Position;
 import org.eclipse.jface.text.contentassist.ICompletionProposal;
 import org.eclipse.swt.graphics.Point;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -283,10 +283,10 @@
 
 		final ArrayList<ICompletionProposal> results = new ArrayList<ICompletionProposal>();
 		final Point selection = viewer.getSelectedRange();
-		final Region offsetRegion = new Region(selection.x, selection.y);
+		final Position offsetPosition = new Position(selection.x, selection.y);
 		boolean backTrackResultsOnly = false;
 
-		assert offset == offsetRegion.getOffset();
+		assert offset == offsetPosition.getOffset();
 
 		for (Completion proposal : completions) {
 			String proposalPrefix = proposal.getPrefix();
@@ -295,7 +295,7 @@
 			if (!backTrackResultsOnly && proposalPrefix.regionMatches(IGNORE_TEMPLATE_PREFIX_CASE, 0, prefix, 0, prefix.length())) {
 				if (!proposal.isBlankLineRequired() || isBlankBeforeOffset(document, offset - prefix.length()))
 					if (prefix.length() > 0 || identifierLexical.matcher(proposalPrefix).lookingAt() || proposalPrefix.length() == 0)
-						results.add(new ContentProposal(this, proposal, prefix, offsetRegion, viewer));
+						results.add(new ContentProposal(this, proposal, prefix, offsetPosition, viewer));
 			} /*else*/ {
 				Matcher matcher = identifierLexical.matcher(proposalPrefix);
 				if (matcher.find() && (matcher.start() > 0 || matcher.end() < proposalPrefix.length())) {
@@ -310,7 +310,7 @@
 							String bigPrefix = proposalPrefix.substring(0, matcher.start() + prefix.length());
 							if (!backTrackResultsOnly) results.clear();
 							backTrackResultsOnly = true;
-							results.add(new ContentProposal(this, proposal, bigPrefix, offsetRegion, viewer));
+							results.add(new ContentProposal(this, proposal, bigPrefix, offsetPosition, viewer));
 							break;
 						}
 					} while (matcher.find(matcher.end()));

From tobivollebregt at gmail.com  Fri Apr  1 22:25:26 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 01 Apr 2011 20:25:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22473 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110401202526.23580CC184@mx4.tudelft.nl>

Author: tvo
Date: Fri Apr  1 20:25:25 2011
New Revision: 22473
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22473&sc=1

Log:
Fixes for when completion is triggered while a selection is present

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Fri Apr  1 20:25:17 2011	(r22472)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Fri Apr  1 20:25:25 2011	(r22473)
@@ -67,12 +67,14 @@
 
 	public ICompletionProposal[] getContentProposals(IParseController controller, int offset, ITextViewer viewer) {
 		String document = viewer.getDocument().get();
+		Point selectedRange = viewer.getSelectedRange();
+		Position selection = new Position(selectedRange.x, selectedRange.y);
 
 		if (!identifierLexical.matcher(COMPLETION_TOKEN).matches())
 			return createErrorProposal("No proposals available - completion lexical must allow letters and numbers", offset);
 
 		boolean avoidReparse = completionFunction == null && templates.size() == 0;
-		IStrategoTerm ast = parser.parse(controller, offset, document, avoidReparse);
+		IStrategoTerm ast = parser.parse(controller, selection, document, avoidReparse);
 		int prefixLength = parser.getCompletionPrefix() == null ? 0 : parser.getCompletionPrefix().length();
 		Set<String> sorts = new AstSortInspector(ast).getSortsAtOffset(offset - prefixLength, offset);
 		if (parser.getCompletionNode() == null)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Fri Apr  1 20:25:17 2011	(r22472)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Fri Apr  1 20:25:25 2011	(r22473)
@@ -14,6 +14,7 @@
 import java.util.regex.Pattern;
 
 import org.eclipse.imp.parser.IParseController;
+import org.eclipse.jface.text.Position;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -56,7 +57,7 @@
 
 	private String lastDocument;
 
-	private int lastOffset;
+	private Position lastSelection;
 
 	private IStrategoTerm completionNode;
 
@@ -82,16 +83,18 @@
 		return lastCompletionAst == null && lastParserAst == null && completionNode == null;
 	}
 
-	public IStrategoTerm parse(IParseController icontroller, int offset, String document, boolean avoidReparse) {
+	public IStrategoTerm parse(IParseController icontroller, Position selection, String document, boolean avoidReparse) {
+		final int offset = selection.getOffset();
+
 		lastCompletionNode = completionNode;
 		lastCompletionPrefix = completionPrefix;
 		completionNode = null;
 
 		SGLRParseController controller = this.parser = getParser(icontroller);
-		IStrategoTerm ast = tryReusePreviousAst(offset, document);
+		IStrategoTerm ast = tryReusePreviousAst(selection, document);
 		if (ast != null) return ast;
 
-		String documentWithToken = document.substring(0, offset) + COMPLETION_TOKEN + document.substring(offset);
+		String documentWithToken = document.substring(0, offset) + COMPLETION_TOKEN + document.substring(offset + selection.getLength());
 		ast = parse(controller, offset, documentWithToken, avoidReparse);
 		if (ast == null) return null;
 
@@ -137,29 +140,38 @@
 	/**
 	 * Reuse the previous AST if the user just added or deleted a single character.
 	 */
-	private IStrategoTerm tryReusePreviousAst(int offset, String document) {
+	private IStrategoTerm tryReusePreviousAst(Position selection, String document) {
+		final int offset = selection.getOffset();
 		if (offset != 0 && lastCompletionNode != null) {
-			if (lastDocument.length() == document.length() - 1 && lastOffset == offset - 1) {
-				// Reuse document, ignoring latest typed character
-				String newCharacter = document.substring(offset - 1, offset);
-				String previousDocument = lastDocument.substring(0, offset - 1) + newCharacter + lastDocument.substring(offset - 1);
-				if (documentsSufficientlyEqual(document, previousDocument, offset)) {
-					return reusePreviousAst(offset, document, lastCompletionPrefix + newCharacter);
-				}
-			} else if (lastCompletionPrefix.length() > 0
-					&& lastDocument.length() == document.length() + 1 && lastOffset == offset + 1) {
-				// Reuse document, ignoring previously typed character
-				String oldCharacter = lastDocument.substring(offset, offset + 1);
-				String currentDocument = document.substring(0, offset) + oldCharacter + document.substring(offset);
-				if (documentsSufficientlyEqual(currentDocument, lastDocument, offset + 1)) {
-					return reusePreviousAst(offset, document, lastCompletionPrefix.substring(0, lastCompletionPrefix.length() - 1));
+			final int lastOffset = lastSelection.getOffset();
+			if (lastSelection.getLength() == 0 && selection.getLength() == 0) {
+				// No selection present.
+				if (lastDocument.length() == document.length() - 1 && lastOffset == offset - 1) {
+					// Reuse document, ignoring latest typed character
+					String newCharacter = document.substring(offset - 1, offset);
+					String previousDocument = lastDocument.substring(0, offset - 1) + newCharacter + lastDocument.substring(offset - 1);
+					if (documentsSufficientlyEqual(document, previousDocument, offset)) {
+						return reusePreviousAst(selection, document, lastCompletionPrefix + newCharacter);
+					}
+				} else if (lastCompletionPrefix.length() > 0
+						&& lastDocument.length() == document.length() + 1 && lastOffset == offset + 1) {
+					// Reuse document, ignoring previously typed character
+					String oldCharacter = lastDocument.substring(offset, offset + 1);
+					String currentDocument = document.substring(0, offset) + oldCharacter + document.substring(offset);
+					if (documentsSufficientlyEqual(currentDocument, lastDocument, offset + 1)) {
+						return reusePreviousAst(selection, document, lastCompletionPrefix.substring(0, lastCompletionPrefix.length() - 1));
+					}
+				} else if (lastDocument.equals(document) && offset == lastOffset) {
+					return reusePreviousAst(selection, document, lastCompletionPrefix);
 				}
-			} else if (lastDocument.equals(document) && offset == lastOffset) {
-				return reusePreviousAst(offset, document, lastCompletionPrefix);
+			}
+			else {
+				// Selection present.
+				// Probably not worth bothering with reuse here.
 			}
 		}
 		lastDocument = document;
-		lastOffset = offset;
+		lastSelection = selection;
 		return null;
 	}
 
@@ -191,29 +203,15 @@
 		return null;
 	}
 
-	private IStrategoTerm reusePreviousAst(int offset, String document, String prefix) {
+	private IStrategoTerm reusePreviousAst(Position selection, String document, String prefix) {
 		completionPrefix = prefix;
 		lastDocument = document;
-		lastOffset = offset;
-		String prefixInAst = sanitizePrefix(completionPrefix);
-		if (prefixInAst == null)
-			return null;
+		lastSelection = selection;
 		completionNode = lastCompletionNode;
-		putCompletionNode(completionNode, prefixInAst, false);
+		putCompletionNode(completionNode, prefix, false);
 		return lastCompletionAst;
 	}
 
-	private String sanitizePrefix(String prefix) {
-		Matcher matcher = identifierLexical.matcher(prefix);
-		if (prefix.length() == 0) {
-			return "";
-		} else if (matcher.lookingAt()) {
-			return prefix.substring(0, matcher.end());
-		} else {
-			return null;
-		}
-	}
-
 	private IStrategoTerm forceUseOldAst(SGLRParseController parser, int offset, String document) {
 		if (parser.getCurrentAst() != lastParserAst) { // parser has a more recent AST
 			lastParserAst = parser.getCurrentAst();

From tobivollebregt at gmail.com  Fri Apr  1 22:25:34 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 01 Apr 2011 20:25:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22474 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110401202534.3B92E2B8002@mx2.tudelft.nl>

Author: tvo
Date: Fri Apr  1 20:25:33 2011
New Revision: 22474
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22474&sc=1

Log:
Move merging of identical proposals back to ContentProposal
(templates identical apart from sort were considered equal)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java	Fri Apr  1 20:25:25 2011	(r22473)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java	Fri Apr  1 20:25:33 2011	(r22474)
@@ -118,19 +118,4 @@
 		return AutoEditStrategy.formatInsertedText(result.toString(), "");
 	}
 
-	@Override
-	public boolean equals(Object obj) {
-		if (obj == this) return true;
-		if (!(obj instanceof Completion)) return false;
-		final Completion that = (Completion) obj;
-		return this.getName().equals(that.getName())
-			&& ((this.getNewTextParts() == null && that.getNewTextParts() == null)
-					|| (this.getNewTextParts() != null && this.getNewTextParts().equals(that.getNewTextParts())));
-	}
-
-	@Override
-	public int hashCode() {
-		return this.getName().hashCode();
-	}
-
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Fri Apr  1 20:25:25 2011	(r22473)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Fri Apr  1 20:25:33 2011	(r22474)
@@ -226,4 +226,23 @@
 	public IContextInformation getContextInformation() {
 		return null;
 	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (obj == this) return true;
+		if (!(obj instanceof ContentProposal)) return false;
+		final ContentProposal that = (ContentProposal) obj;
+		return equals(this.getDisplayString(), that.getDisplayString())
+			&& equals(this.completion.getNewTextParts(), that.completion.getNewTextParts());
+	}
+
+	// TODO: move to some utility class/library
+	private static final boolean equals(Object a, Object b) {
+		return (a == null && b == null) || (a != null && a.equals(b));
+	}
+
+	@Override
+	public int hashCode() {
+		return this.getDisplayString().hashCode();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Fri Apr  1 20:25:25 2011	(r22473)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Fri Apr  1 20:25:33 2011	(r22474)
@@ -9,7 +9,6 @@
 import static org.strategoxt.imp.runtime.stratego.SourceAttachment.getResource;
 
 import java.io.IOException;
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
 import java.util.HashSet;
@@ -269,7 +268,7 @@
 		return results;
 	}
 
-	private static ICompletionProposal[] toSortedArray(ArrayList<ICompletionProposal> results) {
+	private static ICompletionProposal[] toSortedArray(Set<ICompletionProposal> results) {
 		ICompletionProposal[] resultArray = results.toArray(new ICompletionProposal[results.size()]);
 
 		Arrays.sort(resultArray, new Comparator<ICompletionProposal>() {
@@ -283,7 +282,7 @@
 	private ICompletionProposal[] filterCompletions(Set<Completion> completions, String document, String prefix,
 			int offset, Set<String> sorts, ITextViewer viewer) {
 
-		final ArrayList<ICompletionProposal> results = new ArrayList<ICompletionProposal>();
+		final Set<ICompletionProposal> results = new HashSet<ICompletionProposal>();
 		final Point selection = viewer.getSelectedRange();
 		final Position offsetPosition = new Position(selection.x, selection.y);
 		boolean backTrackResultsOnly = false;

From L.C.L.Kats at tudelft.nl  Sat Apr  2 14:20:28 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 02 Apr 2011 12:20:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22475 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.testing/trans
Message-ID: <20110402122028.891E02B8004@mx2.tudelft.nl>

Author: LennartKats
Date: Sat Apr  2 12:20:26 2011
New Revision: 22475
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22475&sc=1

Log:
Added (semantic) content completion support for language under test in testing language. Easy stuff.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Fri Apr  1 20:25:33 2011	(r22474)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Sat Apr  2 12:20:26 2011	(r22475)
@@ -16,6 +16,7 @@
 import org.eclipse.imp.parser.IParseController;
 import org.eclipse.jface.text.Position;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.shared.SGLRException;
@@ -234,15 +235,22 @@
 	private IStrategoTerm identifyCompletionNode(final IStrategoTerm ast, final int offset, final String document, final String completionToken) {
 		class Visitor extends TermVisitor {
 			IStrategoTerm result = ast;
-			public void preVisit(IStrategoTerm node) {
-				if (isTermString(node)) {
-					String value = ((IStrategoString) node).stringValue();
+			public void preVisit(IStrategoTerm term) {
+				if (isTermString(term)) {
+					String value = ((IStrategoString) term).stringValue();
 					if (value.indexOf(completionToken) > -1) {
-						putCompletionNode(node, readPrefix(offset, document), false);
+						putCompletionNode(term, readPrefix(offset, document), false);
 						result = getRoot(completionNode);
 					}
 				}
 			}
+			
+			@Override
+			public void postVisit(IStrategoTerm term) {
+				// Visit annotations; testing language puts ast nodes in there
+				if (!term.getAnnotations().isEmpty())
+					visit(term.getAnnotations());
+			}
 		}
 		Visitor visitor = new Visitor();
 		visitor.visit(ast);

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Fri Apr  1 20:25:33 2011	(r22474)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Sat Apr  2 12:20:26 2011	(r22475)
@@ -108,6 +108,15 @@
     (Language(t), _, _, _, _) -> [<spt-get-default-language>]
 
   editor-complete = debug; fail
+  
+  editor-complete:
+    (construct, position, ast, path, project-path) -> proposals
+    where
+      ?input-tuple;
+      not(<origin-line> ast => 1);
+      resolvers := <spt-get-content-proposers>;
+      results   := <map(execute-service(|input-tuple))> resolvers;
+      proposals := <getfirst(?Some(<id>))> results
 
 strategies
   

From L.C.L.Kats at tudelft.nl  Mon Apr  4 09:46:04 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 04 Apr 2011 07:46:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22476 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies
Message-ID: <20110404074604.D62D5CC0CE@mx4.tudelft.nl>

Author: LennartKats
Date: Mon Apr  4 07:46:04 2011
New Revision: 22476
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22476&sc=1

Log:
Changed observer initialization, may fix Spoofax/354

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_clear_dynamic_rules_0_1.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/ObserverCache.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_evaluate_1_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Sat Apr  2 12:20:26 2011	(r22475)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Mon Apr  4 07:46:04 2011	(r22476)
@@ -23,6 +23,7 @@
 import java.util.concurrent.locks.ReentrantLock;
 
 import org.eclipse.core.resources.IMarker;
+import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.NullProgressMonitor;
@@ -604,9 +605,16 @@
 		return null;
 	}
 	
-	public void configureRuntime(IResource resource) {
+	private void configureRuntime(IResource resource) {
 		assert getLock().isHeldByCurrentThread();
 		
+		String projectPath = getInputBuilder().tryGetProjectPath(resource);
+		IProject project = resource.getProject();
+		
+		configureRuntime(project, projectPath);
+	}
+
+	public void configureRuntime(IProject project, String projectPath) {
 		try {
 			ITermFactory factory = runtime.getFactory();
 			IStrategoTuple programName = factory.makeTuple(
@@ -619,9 +627,9 @@
 		
 		try {
 			EditorIOAgent io = (EditorIOAgent) runtime.getIOAgent();
-			io.setWorkingDir(getInputBuilder().tryGetProjectPath(resource));
-			io.setProjectPath(getInputBuilder().tryGetProjectPath(resource));
-			io.setProject(resource.getProject());
+			io.setWorkingDir(projectPath);
+			io.setProjectPath(projectPath);
+			io.setProject(project);
 			io.setDescriptor(descriptor);
 		} catch (IOException e) {
 			Environment.logException("Could not set Stratego working directory", e);

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/ObserverCache.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/ObserverCache.java	Sat Apr  2 12:20:26 2011	(r22475)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/ObserverCache.java	Mon Apr  4 07:46:04 2011	(r22476)
@@ -11,7 +11,6 @@
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
-import org.strategoxt.lang.Context;
 
 /** 
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -20,6 +19,8 @@
 	
 	private static final ObserverCache instance = new ObserverCache();
 	
+	// We need to maintain a reference here to each observer as long as the descriptor lives,
+	// as there may not be another reference betweens calls to this class.
 	private static final Map<Descriptor, StrategoObserver> asyncCache =
 		new WeakHashMap<Descriptor, StrategoObserver>();
 
@@ -29,10 +30,10 @@
 		return instance;
 	}
 
-	public StrategoObserver getObserver(Context context, String languageName) throws BadDescriptorException {
+	public StrategoObserver getObserver(String languageName, String projectPath) throws BadDescriptorException {
 		Descriptor descriptor = getDescriptor(languageName);
 		
-		return getObserver(context, descriptor);
+		return getObserver(descriptor, projectPath);
 	}
 
 	public Descriptor getDescriptor(String languageName) throws BadDescriptorException {
@@ -43,19 +44,24 @@
 		return descriptor;
 	}
 
-	private synchronized StrategoObserver getObserver(Context context, Descriptor descriptor) throws BadDescriptorException {
+	private synchronized StrategoObserver getObserver(Descriptor descriptor, String projectPath) throws BadDescriptorException {
 		StrategoObserver result = asyncCache.get(descriptor);
 
 		if (result == null)
 			result = descriptor.createService(StrategoObserver.class, null);
 		
-		IOAgent ioAgent = context.getIOAgent();
-		if (ioAgent instanceof EditorIOAgent) {
-			// Make the console visible to users
-			((EditorIOAgent) ioAgent).getDescriptor().setDynamicallyLoaded(true);
+		result.getLock().lock();
+		try {
+			IOAgent ioAgent = result.getRuntime().getIOAgent();
+			if (ioAgent instanceof EditorIOAgent) { 
+				// Make the console visible to users
+				((EditorIOAgent) ioAgent).getDescriptor().setDynamicallyLoaded(true);
+			}
+			result.configureRuntime(null, projectPath);
 			asyncCache.put(descriptor, result);
+		} finally {
+			result.getLock().unlock();
 		}
-		result.getRuntime().setIOAgent(ioAgent);
 		return result;
 	}
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_clear_dynamic_rules_0_1.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_clear_dynamic_rules_0_1.java	Mon Apr  4 07:46:04 2011	(r22476)
@@ -0,0 +1,49 @@
+package org.strategoxt.imp.testing.strategies;
+/*
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.services.StrategoObserver;
+import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Clear all dynamic rules in the stratego instance belonging to a language plugin.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ *
+public class plugin_clear_dynamic_rules_0_1 extends Strategy {
+
+	public static plugin_clear_dynamic_rules_0_1 instance = new plugin_clear_dynamic_rules_0_1();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm languageName) {
+		ITermFactory factory = context.getFactory();
+		StrategoObserver observer = null;
+		try {
+			String dir = ((EditorIOAgent) context.getIOAgent()).getProjectPath();
+			observer = ObserverCache.getInstance().getObserver(asJavaString(languageName), dir);
+			observer.getLock().lock();
+			SSLLibrary.instance(observer.getRuntime().getContext()).getDynamicRuleTable().clear();
+			SSLLibrary.instance(observer.getRuntime().getContext()).getTableTable().clear();
+			return current;
+		} catch (BadDescriptorException e) {
+			Environment.logException("Problem loading descriptor for testing", e);
+			return factory.makeAppl(factory.makeConstructor("Error", 1),
+					factory.makeString("Problem loading descriptor for testing: " + e.getLocalizedMessage()));
+		} catch (RuntimeException e) {
+			Environment.logException("Problem executing strategy for testing: " + getClass().getSimpleName(), e);
+			return factory.makeAppl(factory.makeConstructor("Error", 1),
+					factory.makeString(e.getClass().getName() + ": " + e.getLocalizedMessage() + " (see error log)"));
+		} finally {
+			if (observer != null) observer.getLock().unlock();
+		}
+	}
+
+}
+*/
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_evaluate_1_2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_evaluate_1_2.java	Sat Apr  2 12:20:26 2011	(r22475)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_evaluate_1_2.java	Mon Apr  4 07:46:04 2011	(r22476)
@@ -10,6 +10,7 @@
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
+import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
@@ -30,7 +31,8 @@
 	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy printTrace, IStrategoTerm languageName, IStrategoTerm strategy) {
 		ITermFactory factory = context.getFactory();
 		try {
-			StrategoObserver observer = ObserverCache.getInstance().getObserver(context, asJavaString(languageName));
+			String dir = ((EditorIOAgent) context.getIOAgent()).getProjectPath();
+			StrategoObserver observer = ObserverCache.getInstance().getObserver(asJavaString(languageName), dir);
 			observer.getRuntime().setCurrent(current);
 			if (observer.getRuntime().evaluate((IStrategoAppl) strategy, true)) {
 				current = observer.getRuntime().current();

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java	Sat Apr  2 12:20:26 2011	(r22475)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java	Mon Apr  4 07:46:04 2011	(r22476)
@@ -12,6 +12,7 @@
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
+import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.MissingStrategyException;
 import org.strategoxt.lang.Strategy;
@@ -33,7 +34,8 @@
 	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm languageName, IStrategoTerm strategy) {
 		ITermFactory factory = context.getFactory();
 		try {
-			StrategoObserver observer = ObserverCache.getInstance().getObserver(context, asJavaString(languageName));
+			String dir = ((EditorIOAgent) context.getIOAgent()).getProjectPath();
+			StrategoObserver observer = ObserverCache.getInstance().getObserver(asJavaString(languageName), dir);
 			observer.getRuntime().setCurrent(current);
 			if (isTermAppl(strategy) && ((IStrategoAppl) strategy).getName().equals("Strategy"))
 				strategy = termAt(strategy, 0);

From L.C.L.Kats at tudelft.nl  Mon Apr  4 10:44:21 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 04 Apr 2011 08:44:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22477 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.testing/editor
	org.strategoxt.imp.testing/editor/java/o...
Message-ID: <20110404084421.913D8CC0C4@mx4.tudelft.nl>

Author: LennartKats
Date: Mon Apr  4 08:44:21 2011
New Revision: 22477
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22477&sc=1

Log:
fixed some potential exceptions

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/ObserverCache.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Mon Apr  4 07:46:04 2011	(r22476)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Mon Apr  4 08:44:21 2011	(r22477)
@@ -616,7 +616,7 @@
 
 	public void configureRuntime(IProject project, String projectPath) {
 		try {
-			ITermFactory factory = runtime.getFactory();
+			ITermFactory factory = getRuntime().getFactory();
 			IStrategoTuple programName = factory.makeTuple(
 					factory.makeString("program"),
 					factory.makeString(descriptor.getLanguage().getName()));

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Syntax.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Syntax.esv	Mon Apr  4 07:46:04 2011	(r22476)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Syntax.esv	Mon Apr  4 08:44:21 2011	(r22477)
@@ -1,9 +1,25 @@
 module Spoofax-Testing-Syntax
 
-imports Spoofax-Testing-Syntax.generated
+// imports Spoofax-Testing-Syntax.generated
 
 language
-                                                                   
-  // This file can be used for custom syntax rules.                
-  //                                                               
-  // See the imported file for a brief introduction and examples.  
\ No newline at end of file
+
+  // Comment constructs:                   
+  line comment                           : "//"
+  block comment                          : "/*" * "*/"
+                                           
+  // Fences (used for matching,            
+  // inserting, indenting brackets):       
+  fences                                 : [ ]
+                                           [[ ]]
+                                           [[[ ]]]
+                                           { }
+                                           ( )
+                                           
+  // Automatic indent hints                
+  // (indent after these tokens):          
+  indent after                           : "="
+                                           ":"
+                                           
+  // Regular expression for identifiers:   
+  identifier lexical                     : "[A-Za-z0-9_]+"
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/ObserverCache.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/ObserverCache.java	Mon Apr  4 07:46:04 2011	(r22476)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/ObserverCache.java	Mon Apr  4 08:44:21 2011	(r22477)
@@ -5,12 +5,10 @@
 
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.language.LanguageRegistry;
-import org.spoofax.interpreter.library.IOAgent;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
-import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 
 /** 
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -41,6 +39,7 @@
 		if (language == null) throw new BadDescriptorException("No language known with the name " + languageName);
 		Descriptor descriptor = Environment.getDescriptor(language);
 		if (descriptor == null) throw new BadDescriptorException("No language known with the name " + languageName);
+		descriptor.setDynamicallyLoaded(true); // make console visible
 		return descriptor;
 	}
 
@@ -52,13 +51,10 @@
 		
 		result.getLock().lock();
 		try {
-			IOAgent ioAgent = result.getRuntime().getIOAgent();
-			if (ioAgent instanceof EditorIOAgent) { 
-				// Make the console visible to users
-				((EditorIOAgent) ioAgent).getDescriptor().setDynamicallyLoaded(true);
-			}
 			result.configureRuntime(null, projectPath);
 			asyncCache.put(descriptor, result);
+		} catch (NoSuchMethodError e) {
+			Environment.logException("Oops, old Spoofax version installed, cannot properly initialize runtime!", e);
 		} finally {
 			result.getLock().unlock();
 		}

From L.C.L.Kats at tudelft.nl  Mon Apr  4 10:50:29 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 04 Apr 2011 08:50:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22478 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing: editor trans
Message-ID: <20110404085029.0E5FA108C03A@mx3.tudelft.nl>

Author: LennartKats
Date: Mon Apr  4 08:50:28 2011
New Revision: 22478
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22478&sc=1

Log:
test now fails with unspecified ambiguity

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Builders.esv	Mon Apr  4 08:44:21 2011	(r22477)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Builders.esv	Mon Apr  4 08:50:28 2011	(r22478)
@@ -16,7 +16,7 @@
                                                                                                                                
   observer : editor-analyze                                                                                   
                                                                                                                                
-  builder  : "Show abstract syntax (for selection)"          = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder  : "Show abstract syntax (for selection)"          = generate-aterm (openeditor) (realtime) (source) // (meta) 
   builder  : "Generate missing output file with current AST" = generate-ast-file (cursor)              
   builder  : "Run testsuites" = test-runner
                                                                                                                                

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Mon Apr  4 08:44:21 2011	(r22477)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Mon Apr  4 08:50:28 2011	(r22478)
@@ -14,6 +14,7 @@
 signature constructors
   error : Term * Term -> Term
   localized : Term * Term -> Term
+  amb : List(Term) -> Term
   
 rules
   check-note = fail
@@ -106,6 +107,11 @@
       not(!ast => error(_, _))
 
   check-expectation(|ast, selections, messages) :
+    <not(?pattern(_))> -> $[Syntax is ambiguous: [<write-to-string> ast]]
+    where
+      <oncetd(?amb(_))> ast
+
+  check-expectation(|ast, selections, messages) :
     pattern(p) -> $[Does not match pattern: [<write-to-string> ast]]
     where
       exploded := <explode-aterm> ast
@@ -233,4 +239,4 @@
     ; not(<aterm-eq> (result'', <aterm-appl0-to-fun> p))
     
   aterm-appl0-to-fun =
-  	topdown(try(\appl(s, []) -> fun(s)\))
+    topdown(try(\appl(s, []) -> fun(s)\))

From R.B.Vermaas at tudelft.nl  Mon Apr  4 11:04:18 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 04 Apr 2011 09:04:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22479 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model
Message-ID: <20110404090418.91822108C091@mx3.tudelft.nl>

Author: rob
Date: Mon Apr  4 09:04:18 2011
New Revision: 22479
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22479&sc=1

Log:
oops

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestRun.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestcaseRun.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestsuiteRun.java

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestRun.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestRun.java	Mon Apr  4 09:04:18 2011	(r22479)
@@ -0,0 +1,33 @@
+package org.strategoxt.imp.testing.model;
+
+import java.util.Collection;
+import java.util.HashMap;
+
+import org.eclipse.core.resources.IResource;
+
+public class TestRun {
+	private HashMap<String, TestsuiteRun> testsuites = new HashMap<String, TestsuiteRun>();
+
+	public TestsuiteRun addTestsuite(String testsuite) {
+		TestsuiteRun ts = new TestsuiteRun(this, testsuite);
+		testsuites.put(testsuite, ts) ;
+		return ts;
+	}
+	
+	public TestsuiteRun getTestsuite(String testsuite) {
+		return testsuites.get(testsuite);
+	}
+	
+	public Collection<TestsuiteRun> getTestSuites() {
+		return testsuites.values();
+	}
+
+	public int getNrTests() {
+		int res = 0;
+		for(TestsuiteRun tr : getTestSuites()) {
+			res += tr.getNrTests();
+		}
+		return res;
+	}
+	
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestcaseRun.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestcaseRun.java	Mon Apr  4 09:04:18 2011	(r22479)
@@ -0,0 +1,54 @@
+package org.strategoxt.imp.testing.model;
+
+public class TestcaseRun {
+	private String description;
+	private int offset;
+	private TestsuiteRun testsuite;
+	private boolean finished = false;
+	private boolean succeeded = false;
+	private long start = 0, end = 0 ;
+	
+	public TestcaseRun(String description, TestsuiteRun testsuite, int offset) {
+		this.description = description;
+		this.offset = offset;
+		this.testsuite = testsuite;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public TestsuiteRun getParent() {
+		return testsuite;
+	}
+	
+	public long getDuration() {
+		if(start == 0 || end == 0 ) {
+			return -1;
+		} else {
+			return end - start;
+		}
+	}
+	
+	public int getOffset() {
+		return offset;
+	}
+	
+	public boolean isFinished() {
+		return finished;
+	}
+	
+	public boolean hasSucceeded() {
+		return succeeded;
+	}
+	
+	public void start() {
+		start = System.currentTimeMillis();
+	}
+	
+	public void finished(boolean succeeded) {
+		end = System.currentTimeMillis();
+		this.finished = true;
+		this.succeeded = succeeded;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestsuiteRun.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestsuiteRun.java	Mon Apr  4 09:04:18 2011	(r22479)
@@ -0,0 +1,44 @@
+package org.strategoxt.imp.testing.model;
+
+import java.util.Collection;
+import java.util.HashMap;
+
+import org.strategoxt.imp.testing.SpoofaxTestingParseController;
+
+public class TestsuiteRun {
+	private String resource;
+	private TestRun testrun;
+	private HashMap<String,TestcaseRun> testcases = new HashMap<String, TestcaseRun>();
+	
+	public TestsuiteRun(TestRun testrun, String resource) {
+		this.testrun = testrun;
+		this.resource = resource;
+	}
+
+	public String getName() {
+		return resource;
+	}
+	
+	public Collection<TestcaseRun> getTestcases() {
+		return testcases.values();
+	}
+	
+	public TestcaseRun getTestcase(String testcase) {
+		return testcases.get(testcase);
+	}
+	
+	public TestRun getParent() {
+		return testrun;
+	}
+	
+	public TestcaseRun addTestCase(String description, int line) {
+		TestcaseRun tcr = new TestcaseRun(description, this, line);
+		testcases.put(description, tcr) ;
+		return tcr;		
+	}
+	
+	public int getNrTests() {
+		return getTestcases().size();
+	}
+	
+}

From L.C.L.Kats at tudelft.nl  Mon Apr  4 19:17:46 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 04 Apr 2011 17:17:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22480 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing
Message-ID: <20110404171746.EC0AFCC082@mx4.tudelft.nl>

Author: LennartKats
Date: Mon Apr  4 17:17:46 2011
New Revision: 22480
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22480&sc=1

Log:
Fixed a subtle bug that would break content completion in syntax-incorrect test fragments

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Mon Apr  4 09:04:18 2011	(r22479)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Mon Apr  4 17:17:46 2011	(r22480)
@@ -93,7 +93,7 @@
 						retokenizer.copyTokensFromFragment(fragmentHead, fragmentTail, parsed,
 								getLeftToken(fragmentHead).getStartOffset(), getRightToken(fragmentTail).getEndOffset());
 						if (!testedParser.isLastSyntaxCorrect())
-							parsed = factory.makeAppl(ERROR_1, parsed);
+							parsed = nonParentFactory.makeAppl(ERROR_1, parsed);
 						ImploderAttachment implodement = ImploderAttachment.get(term);
 						IStrategoList selected = selections.fetch(parsed);
 						term = factory.annotateTerm(term, nonParentFactory.makeListCons(parsed, selected));

From L.C.L.Kats at tudelft.nl  Mon Apr  4 23:38:54 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 04 Apr 2011 21:38:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22481 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.stratego.core/META-INF
	org.strategoxt.imp.debug.ui/META-INF
Message-ID: <20110404213854.9A49C2B800D@mx2.tudelft.nl>

Author: LennartKats
Date: Mon Apr  4 21:38:54 2011
New Revision: 22481
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22481&sc=1

Log:
Removed Import-Package declarations (should specify "required plugins" instead)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Mon Apr  4 17:17:46 2011	(r22480)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Mon Apr  4 21:38:54 2011	(r22481)
@@ -43,4 +43,3 @@
  org.strategoxt.imp.debug.stratego.transformer
 Bundle-Activator: org.strategoxt.debug.core.Activator
 Bundle-ActivationPolicy: lazy
-Import-Package: com.ibm.icu.text;version="4.2.1.1"

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF	Mon Apr  4 17:17:46 2011	(r22480)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF	Mon Apr  4 21:38:54 2011	(r22481)
@@ -12,10 +12,10 @@
  org.eclipse.imp.runtime,
  org.strategoxt.imp.debug.core,
  org.eclipse.jdt.ui;bundle-version="3.5.0",
- org.eclipse.jdt.core;bundle-version="3.5.0"
+ org.eclipse.jdt.core;bundle-version="3.5.0",
+ org.eclipse.jface.text
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
-Import-Package: org.eclipse.jface.text
 Bundle-Vendor: Spoofax.org
 Export-Package: org.strategoxt.imp.debug.ui;
   uses:="org.eclipse.ui,

From m.dejonge at tudelft.nl  Tue Apr  5 11:42:33 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 05 Apr 2011 09:42:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22482 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <20110405094233.AF892CC09A@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Apr  5 09:42:33 2011
New Revision: 22482
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22482&sc=1

Log:


Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/LanguageDescriptionPrimitive.java   (contents, props changed)
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSublistTermPrimitive.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Mon Apr  4 21:38:54 2011	(r22481)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Tue Apr  5 09:42:33 2011	(r22482)
@@ -42,6 +42,7 @@
 		add(new OriginSeparatorWithLayoutPrimitive());
 		add(new SaveAllResourcesPrimitive());
 		add(new MessageDialogPrimitive());
+		add(new LanguageDescriptionPrimitive());
 	}
 
 	public String getOperatorRegistryName() {

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/LanguageDescriptionPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/LanguageDescriptionPrimitive.java	Tue Apr  5 09:42:33 2011	(r22482)
@@ -0,0 +1,58 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.io.FileNotFoundException;
+import java.util.ArrayList;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.imp.language.Language;
+import org.eclipse.imp.language.LanguageRegistry;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.Environment;
+
+/**
+ * Returns the language description for the current file
+ * 
+ * @author Maartje de Jonge
+ */
+public class LanguageDescriptionPrimitive extends AbstractPrimitive {
+
+	public LanguageDescriptionPrimitive() {
+		super("SSL_EXT_languagedescription", 0, 1);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		if (!isTermString(tvars[0])) return false;
+		try {
+			IFile file = EditorIOAgent.getFile(env, asJavaString(tvars[0]));
+			Language language = LanguageRegistry.findLanguage(file.getFullPath(), null);
+			ArrayList<IStrategoTerm> extensions = new ArrayList<IStrategoTerm>();
+			for (String ext : language.getFilenameExtensions()) {
+				extensions.add(env.getFactory().makeString(ext));
+			}
+			IStrategoList langExt = env.getFactory().makeList(extensions);
+			IStrategoString langName = env.getFactory().makeString(language.getName());
+			env.setCurrent(
+				env.getFactory().makeTuple(
+					langName,
+					langExt
+				)
+			);
+		} catch (FileNotFoundException e) {
+			return false;
+		}
+		return true;
+	}
+	
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSublistTermPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSublistTermPrimitive.java	Mon Apr  4 21:38:54 2011	(r22481)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSublistTermPrimitive.java	Tue Apr  5 09:42:33 2011	(r22482)
@@ -45,6 +45,8 @@
 		}
 		IStrategoTerm firstChildNode= tryGetOrigin(list.getSubterm(0));
 		IStrategoTerm commonParentList=getParent(firstChildNode);
+		if(commonParentList == null)
+			return false;
 		List<IStrategoTerm> childNodes= Arrays.asList(commonParentList.getAllSubterms());
 		if(!(isTermList(commonParentList)))
 			return false;

From R.B.Vermaas at tudelft.nl  Tue Apr  5 15:04:12 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 05 Apr 2011 13:04:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22483 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing:
	editor/java/org/strategoxt/imp/testing/model
	editor/java/org/strategoxt/imp/testing/strategies
	editor/java/org/str...
Message-ID: <20110405130412.E0ABFCC112@mx4.tudelft.nl>

Author: rob
Date: Tue Apr  5 13:04:12 2011
New Revision: 22483
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22483&sc=1

Log:
use module name in test runner if available

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_2.java
      - copied, changed from r22481, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_0.java
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_0.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestRun.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestsuiteRun.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunLabelProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestRun.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestRun.java	Tue Apr  5 09:42:33 2011	(r22482)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestRun.java	Tue Apr  5 13:04:12 2011	(r22483)
@@ -3,14 +3,12 @@
 import java.util.Collection;
 import java.util.HashMap;
 
-import org.eclipse.core.resources.IResource;
-
 public class TestRun {
 	private HashMap<String, TestsuiteRun> testsuites = new HashMap<String, TestsuiteRun>();
 
-	public TestsuiteRun addTestsuite(String testsuite) {
-		TestsuiteRun ts = new TestsuiteRun(this, testsuite);
-		testsuites.put(testsuite, ts) ;
+	public TestsuiteRun addTestsuite(String testsuite, String filename) {
+		TestsuiteRun ts = new TestsuiteRun(this, testsuite, filename);
+		testsuites.put(filename, ts) ;
 		return ts;
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestsuiteRun.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestsuiteRun.java	Tue Apr  5 09:42:33 2011	(r22482)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/model/TestsuiteRun.java	Tue Apr  5 13:04:12 2011	(r22483)
@@ -6,18 +6,24 @@
 import org.strategoxt.imp.testing.SpoofaxTestingParseController;
 
 public class TestsuiteRun {
+	private String name;
 	private String resource;
 	private TestRun testrun;
 	private HashMap<String,TestcaseRun> testcases = new HashMap<String, TestcaseRun>();
 	
-	public TestsuiteRun(TestRun testrun, String resource) {
+	public TestsuiteRun(TestRun testrun, String name, String resource) {
 		this.testrun = testrun;
 		this.resource = resource;
+		this.name = name;
 	}
 
-	public String getName() {
+	public String getFilename() {
 		return resource;
 	}
+
+	public String getName() {
+		return name;
+	}
 	
 	public Collection<TestcaseRun> getTestcases() {
 		return testcases.values();
@@ -40,5 +46,14 @@
 	public int getNrTests() {
 		return getTestcases().size();
 	}
-	
+
+	public int getNrFailedTests() {
+		int res = 0;
+		for(TestcaseRun tcr : getTestcases()) {
+			if(tcr.isFinished() && !tcr.hasSucceeded())
+				res++;
+		}
+		return res;
+	}
+
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java	Tue Apr  5 09:42:33 2011	(r22482)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java	Tue Apr  5 13:04:12 2011	(r22483)
@@ -18,7 +18,7 @@
         		   get_service_input_term_0_1.instance,
         		   open_editor_0_0.instance,
         		   testview_init_0_0.instance,
-        		   testview_add_testsuite_0_0.instance,
+        		   testview_add_testsuite_0_2.instance,
         		   testview_add_testcase_0_3.instance,
         		   testview_start_testcase_0_2.instance,
         		   testview_finish_testcase_0_3.instance,

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_2.java (from r22481, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_0.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_0.java	Mon Apr  4 21:38:54 2011	(r22481, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_2.java	Tue Apr  5 13:04:12 2011	(r22483)
@@ -12,15 +12,16 @@
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
-public class testview_add_testsuite_0_0 extends Strategy {
+public class testview_add_testsuite_0_2 extends Strategy {
 
-	public static testview_add_testsuite_0_0 instance = new testview_add_testsuite_0_0();
+	public static testview_add_testsuite_0_2 instance = new testview_add_testsuite_0_2();
 	
 	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-		if (!isTermString(current)) return null;
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm arg0, IStrategoTerm arg1) {
+		if (!isTermString(arg0) || !isTermString(arg1)) return null;
 
-		final String name = ((IStrategoString)current).stringValue();
+		final String name = ((IStrategoString)arg0).stringValue();
+		final String filename = ((IStrategoString)arg1).stringValue();
 		
 		Display.getDefault().syncExec(new Runnable() {
             public void run() {
@@ -28,8 +29,8 @@
 					IViewPart a = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
 					// Using reflection, because if I use a cast, I get a ClassCastException 
 					// cannot cast type <x> to <x>. Probably because of some different classloader issue.
-					Method m = a.getClass().getMethod("addTestsuite", new Class[] {String.class}) ;
-					m.invoke(a, name);
+					Method m = a.getClass().getMethod("addTestsuite", new Class[] {String.class, String.class}) ;
+					m.invoke(a, name, filename);
 			  	} catch(Exception e) {
 			  		e.printStackTrace();
 			  	}  

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunLabelProvider.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunLabelProvider.java	Tue Apr  5 09:42:33 2011	(r22482)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunLabelProvider.java	Tue Apr  5 13:04:12 2011	(r22483)
@@ -23,7 +23,8 @@
 	public String getText(Object element) {
 		if(element instanceof TestsuiteRun) {
 			TestsuiteRun tsr = (TestsuiteRun)element;
-			return tsr.getName();
+			int failed = tsr.getNrFailedTests();
+			return failed == 0 ? tsr.getName() : String.format("%s (%d failed)", tsr.getName(), failed);
 		} else if(element instanceof TestcaseRun) {
 			TestcaseRun tcr = (TestcaseRun)element;
 			String lbl = tcr.getDescription();
@@ -43,6 +44,8 @@
 			TestcaseRun tcr = (TestcaseRun)element;
 			if(tcr.isFinished() && !tcr.hasSucceeded())
 				return new Color(Display.getCurrent(), 159, 63, 63);
+			if(tcr.isFinished() && tcr.hasSucceeded())
+				return new Color(Display.getCurrent(), 10, 100, 10);
 		}
 		return null;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java	Tue Apr  5 09:42:33 2011	(r22482)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java	Tue Apr  5 13:04:12 2011	(r22483)
@@ -22,6 +22,7 @@
 import org.eclipse.swt.widgets.TreeColumn;
 import org.eclipse.ui.forms.widgets.FormToolkit;
 import org.eclipse.ui.part.ViewPart;
+import org.omg.CORBA.Environment;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.testing.model.TestRun;
@@ -102,10 +103,10 @@
 				
 				if (selectObject instanceof TestcaseRun) {
 					TestcaseRun tcr = (TestcaseRun) selectObject ;
-					file = tcr.getParent().getName();
+					file = tcr.getParent().getFilename();
 					offset = tcr.getOffset();
 				} else if(selectObject instanceof TestsuiteRun) {
-					file = ((TestsuiteRun)selectObject).getName();
+					file = ((TestsuiteRun)selectObject).getFilename();
 				}
 
 				if(file != null) {
@@ -186,8 +187,8 @@
     	treeViewer.expandAll();
     }
     
-    public void addTestsuite(String name) {
-    	testrun.addTestsuite(name);
+    public void addTestsuite(String name, String filename) {    	
+    	testrun.addTestsuite(name, filename);
     	refresh();
     }
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Tue Apr  5 09:42:33 2011	(r22482)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Tue Apr  5 13:04:12 2011	(r22483)
@@ -14,7 +14,8 @@
 
 strategies
   find(s) =
-  	abspath => base
+  	abspath 
+  ; string-replace(|"/./", "/") => base
   ; readdir
   ; filter(
       !$[[base]/[<id>]]
@@ -29,7 +30,7 @@
   test-runner =
     testview-init 
   ; find-all-testsuites-in-project 
-  ; map(testview-add-testsuite)
+  ; map(testview-add-testsuite(|<get-testsuite-name-from-file>,<id>))
   ; map(try(run-testsuite))
   ; !None()
   
@@ -42,19 +43,29 @@
     
   run-testsuite :
     file -> (ast, [])
-    where
-      ast  := <read-text-file; parse-spt-string> file
+    where 
+      ast  := <parse-spt-file> file 
     ; testcases := <collect-all(testview-add-testcase(|file, <test-to-description>,<origin-offset>))>ast
     ; <map(run-testcase(|file))>testcases
+  
+  parse-spt-file = 
+    read-text-file; parse-spt-string
+      
+  get-testsuite-name :
+    testsuite(hds, _) -> name
+    where name := <fetch-elem(?Name(<id>))>hds
+  
+  get-testsuite-name-from-file =
+    parse-spt-file ; get-testsuite-name <+ id
     
-  run-testcase(|file) = 
+  run-testcase(|testsuite) = 
     ?tst
   ; test-to-description => name
-  ; testview-start-testcase(|file, name)
+  ; testview-start-testcase(|testsuite, name)
   ; if errors := <check-warning>tst ; not((id,[])) then
-      testview-finish-testcase(|file, name, False())
+      testview-finish-testcase(|testsuite, name, False())
     else
-      testview-finish-testcase(|file, name, True()) 
+      testview-finish-testcase(|testsuite, name, True()) 
     end
     
   test-to-description = 
@@ -63,7 +74,7 @@
   + ?TestEmpty(_, description(<id>))
 
   external testview-init(|)
-  external testview-add-testsuite(|)
+  external testview-add-testsuite(|testsuite, filename)
   external testview-add-testcase(|testsuite, description, linenr)
   external testview-start-testcase(|testsuite, description)
   external testview-finish-testcase(|testsuite, description, result)

From m.dejonge at tudelft.nl  Tue Apr  5 17:13:47 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 05 Apr 2011 15:13:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22484 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego: editor
	lib-refactoring trans
Message-ID: <20110405151347.236722B801D@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Apr  5 15:13:46 2011
New Revision: 22484
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22484&sc=1

Log:
rename refactoring support for stratego

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/fetch.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/files.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/language-description.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/rename-generic.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/user-interaction.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Tue Apr  5 13:04:12 2011	(r22483)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Tue Apr  5 15:13:46 2011	(r22484)
@@ -12,9 +12,18 @@
 
   observer : editor-analyze
 
+  builder     : "Rename (builder)" = 
+  	rename-builder (source)(meta)
+  
+  refactoring Id: "Rename (refactoring)" = 
+  	rename-refactoring (source)
+
+  builder : "Show analysed AST" =
+    generate-analysed-aterm (realtime) (meta) (openeditor) (source)
+
   builder : "Show desugared AST (selection)" =
     generate-desugared-aterm (realtime) (meta) (openeditor) (source)
 
   builder : "Show AST (selection)" =
-    generate-aterm (realtime) (meta) (openeditor) (source) 
+    generate-aterm (realtime) (meta)(openeditor) (source) 
  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/fetch.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/fetch.str	Tue Apr  5 15:13:46 2011	(r22484)
@@ -0,0 +1,56 @@
+module lib-refactoring/fetch
+
+imports
+  lib/editor-common.generated
+  
+rules //strategies for fetching subterms in an ast
+  
+  fetch-annotated-term(|selected):
+  	analysed-ast -> selected-ref
+  	where
+      selected-ref := <
+      	fetch-by-origin(
+      		has-annos; 
+      		strip-annos; 
+      		equal(|selected)|selected)
+      > analysed-ast
+  
+  fetch-by-origin(|original-term) =
+    fetch-by-origin(not(fail)|original-term)
+ 
+  fetch-by-origin(is-term|original-term):
+    ast -> selected'
+    where
+      selected' := <collect-one(
+        where(is-term);
+        where(origin-equal(|original-term)) 
+      )> ast
+ 
+  fetch-up-with-position(match|ast) =
+    fetch-up-with-position(match, fail|ast)
+ 
+  fetch-up-with-position(match, stop|ast):
+    (term, position) -> (term', position')
+    where
+      <not(match)> term;
+      <not(stop)> term;
+      parent-tuple := (<parent-at-position(|term)> ast, <init> position);
+      (term', position') := <fetch-up-with-position(match, stop|ast)> parent-tuple
+
+  fetch-up-with-position(match, stop|ast) =
+    where(
+      ?(term, position);
+      <match> term
+    )
+     
+  fetch-down(match) =
+    !(<id>, []);
+    fetch-down-with-position(match);
+    Fst
+  
+  fetch-down-with-position(match) =
+    ?(term, position); 
+    if <not(match)> term then
+      <get-arguments; ?[e]> term; 
+      <fetch-down-with-position(match)> (e, <conc>(position,[0]))
+    end
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/files.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/files.str	Tue Apr  5 15:13:46 2011	(r22484)
@@ -0,0 +1,47 @@
+module lib-refactoring/files
+
+imports
+  lib-refactoring/user-interaction
+  
+rules //strategies for collecting files
+
+  get-source-asts(parse|extensions, source-dirs) =
+    get-source-asts(parse, check-extension(|extensions), elem-of(|source-dirs))
+
+  get-source-asts(parse, is-source-file, is-source-dir) =
+  	save-all-resources;
+    get-source-files(is-source-file, is-source-dir);
+    (asts, parse-failures) := <partition(parse)>;
+    <report-parse-failures> parse-failures;
+    !asts
+    
+  get-source-files(|extensions, source-dirs) =
+    get-source-files(check-extension(|extensions), elem-of(|source-dirs))
+  
+  get-source-files(is-source-file, is-source-dir) =
+    ?dir-path; 
+    if <is-source-dir; isdir> dir-path then
+      readdir; 
+      map(!$[[dir-path]/[<id>]]);  
+      map(
+        where(is-source-file)  <+ 
+        (get-source-files(is-source-file, is-source-dir))
+      ); 
+      flatten-list 
+    else
+      ![]
+    end
+	
+  save-all-resources = prim("SSL_EXT_saveresources", "")
+  
+  check-extension(|ext) =
+  	has-extension(|ext)
+
+  check-extension(|extensions) = 
+  	where(
+  	  ext := <get-extension>; 
+  	  <fetch(equal(|ext))> extensions 
+  	)
+  	
+  elem-of(|source-dirs) =
+  	!(<id>, source-dirs); elem
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/language-description.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/language-description.str	Tue Apr  5 15:13:46 2011	(r22484)
@@ -0,0 +1,12 @@
+module lib-refactoring/language-description
+
+rules //offers access to language properties 
+	
+get-language-description :
+	fpath -> <prim("SSL_EXT_languagedescription", fpath)>
+
+get-language-name:
+	fpath -> <get-language-description; Fst>
+
+get-language-extensions:
+	fpath -> <get-language-description; Snd>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/rename-generic.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/rename-generic.str	Tue Apr  5 15:13:46 2011	(r22484)
@@ -0,0 +1,167 @@
+module lib-refactoring/rename-generic
+
+imports
+  lib-refactoring/user-interaction
+  
+	
+rules //Strategies that can be implemented in the language specific part
+
+  // _ -> String
+  dialog-newname-custom = fail
+
+  //(ref-name, new-name, asts) -> (errors, warnings)
+  check-preconditions-rename = fail
+
+  		
+rules //workflow
+  
+  /**
+   * Handles rename refactoring workflow.
+   * Input: string annotated with unique reference name, asts annotated with unique names, language name
+   * REMARK: save all resources before collecting ASTs and applying the refactoring 
+   * - Checks if selected term is indeed a reference or declaration name
+   * - Checks if input name is a an identifier (matches ID pattern while excluding keywords)
+   * - Checks if the semantic errors before and after the transformation are the same
+   * - Checks if the name bindings are preserved
+   * @type (String, List(T), String) -> List((T, T'))
+   * @param String -> ERROR checks whether the reference can be renamed (for example: exclude lib declarations)
+   * @param List(T) -> List(T) strategy that annotates all names with a unique reference name. 
+   * REMARK: old analysis result stored in name tables should be cleared
+   * @param List(T) -> List(ERROR), with ERROR either a string or a tuple (term, String)   
+   */
+  apply-rename-refactoring(constraint-error-refname, re-analyse, collect-sem-errors) =
+  	?(ref-name, analyzed-asts, language-name);
+    where(<report-invalid-refname(constraint-error-refname)> ref-name);
+    apply-rename-refactoring(re-analyse, collect-sem-errors)
+
+  /**
+   * Handles rename refactoring workflow.
+   * Input: string annotated with unique reference name, asts annotated with unique names, language name
+   * REMARK: save all resources before collecting ASTs and applying the refactoring 
+   * - Checks if selected term is indeed a reference or declaration name
+   * - Checks if input name is a an identifier (matches ID pattern while excluding keywords)
+   * - Checks if the semantic errors before and after the transformation are the same
+   * - Checks if the name bindings are preserved
+   * @type (String, List(T), String) -> List((T, T'))
+   * @param List(T) -> List(T) strategy that annotates all names with a unique reference name. 
+   * REMARK: old analysis result stored in name tables should be cleared
+   * @param List(T) -> List(ERROR), with ERROR either a string or a tuple (term, String)   
+   */
+  apply-rename-refactoring(re-analyse, collect-sem-errors):
+    (ref-name, analyzed-asts, language-name) -> changed-asts
+    where
+      <report-invalid-selection> ref-name;
+      new-name     := <get-user-input(|language-name)>;
+      <report-precondition-issues> (ref-name, new-name, analyzed-asts);
+      renamed-asts := <apply-renaming(|ref-name, new-name)> analyzed-asts;
+      <report-semantic-issues(re-analyse, collect-sem-errors|ref-name, new-name)> (analyzed-asts, renamed-asts);
+      changed-asts := <get-changed-asts> (analyzed-asts, renamed-asts)
+  
+  get-changed-asts:
+    (asts-before, asts-after) -> changed-asts
+    where
+      changed-asts := <zip; filter(not(equal))> (
+      	<topdown(try(strip-annos))> asts-before, 
+      	<topdown(try(strip-annos))> asts-after
+      )
+
+  get-user-input(|language-name) =
+  	dialog-newname-custom <+
+    dialog-newname(|language-name)	
+    
+  report-invalid-selection = 
+    if not(is-string; has-annos) then 
+      message-invalid-selection
+    end
+    
+  report-invalid-refname(constraint-error-refname) =
+  	if err := <constraint-error-refname> then
+  	  <is-list <+ ![<id>]> err;
+      report-errors
+    end
+
+  report-precondition-issues =
+    if (errors, warnings) := <check-preconditions-rename> then
+      <report-errors-warnings> ("The following problems are found: ", errors, warnings)
+    end
+
+  report-semantic-issues(analyse, collect-sem-errors|ref-name, new-name) =
+    check-semantics(analyse, collect-sem-errors|ref-name, new-name);
+    (
+    	report-semantic-problems <+
+    	(try(dr-scope-all-end);dr-scope-all-start; fail) //do not store analysis results in name tables after rollback
+    )
+    
+  check-semantics(analyse, collect-sem-errors|ref-name, new-name) :
+    (analyzed-asts, asts-after) -> (var-capture-warnings, <make-set> introduced-errors, <make-set> solved-errors)
+    where    	
+      errors-before        := <get-sem-errors(collect-sem-errors)> analyzed-asts; //debug(!"errors before: ");
+      analyzed-asts-after  := <analyse> asts-after;
+      errors-after         := <get-sem-errors(collect-sem-errors)> analyzed-asts-after; //debug(!"errors after: ");
+      (introduced-errors, solved-errors) := <check-consistency-changes> (errors-before, errors-after); 
+      var-capture-warnings := <check-var-captures(|ref-name, new-name)> (analyzed-asts, analyzed-asts-after)
+    	   	
+    	
+rules // transformation: renaming
+    
+  apply-renaming (|ref-name, new-name) =
+    topdown(try(?ref-name; !new-name)); 
+    topdown(try(strip-annos))
+    
+    
+rules // consistency preservation
+  
+  check-consistency-changes:
+    (errors-before, errors-after) -> (introduced-errors, solved-errors)
+    where 
+      introduced-errors := <diff> (errors-after, errors-before); 
+      solved-errors     := <diff> (errors-before, errors-after) 
+  
+  get-sem-errors(collect-sem-errors) =
+  	(
+  		collect-sem-errors <+ 
+  		map(collect-sem-errors); 
+  		flatten-list
+  	); topdown(strip-annos)
+  	  
+rules // behaviour preservation: invariant check for variabele capture
+
+  check-var-captures(|ref-name, new-name):
+    (analyzed-asts, analyzed-asts-after) -> errors
+    where
+      old-name := <strip-annos> ref-name; 
+      errors   := <
+        get-var-captures(|old-name, new-name);
+        map(!(<id>, <!$[Variabele captures detected for '[<strip-annos>]']>))
+      > (analyzed-asts, analyzed-asts-after)
+  
+  get-var-captures(|old-name, new-name):
+    (analyzed-asts, analyzed-asts-after) -> var-captures
+    where 
+      paired-asts     := <zip> (analyzed-asts, analyzed-asts-after); //external definitions of transformed asts should not be obtained from cache
+      reference-pairs := <map(get-paired-references(|old-name, new-name)); flatten-list> paired-asts;
+      var-captures    := <check-invariant; map(Fst)> reference-pairs
+    
+  //compares the references of analysed ast before- and after- rename transformation     
+  get-paired-references(|old-name, new-name):
+    (ast-before, ast-after) -> ref-pairs
+    where
+      invariant_before := <get-listed-refnames(|old-name, new-name)> ast-before; //debug(!"invariant before: ");
+      invariant_after  := <get-listed-refnames(|old-name, new-name)> ast-after; //debug(!"invariant after: ");
+      ref-pairs     := <zip> (invariant_before, invariant_after)
+          
+  get-listed-refnames(|old-name, new-name) =
+    collect-om(
+      where(
+      	strip-annos;
+      	(equal(|old-name) <+ equal(|new-name))
+      ),
+      conc
+    )
+    
+  //The pattern of declarations and variabele accesses should be the same before and after
+  check-invariant = 
+    ?[(x,y)|tail];
+    filter(not(?(x,y)));
+    (errors, remaining) := <partition(?(_,y) <+ ?(x,_))>;
+    <conc>(errors, <check-invariant <+ ?[]> remaining)
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/user-interaction.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/user-interaction.str	Tue Apr  5 15:13:46 2011	(r22484)
@@ -0,0 +1,124 @@
+module lib-refactoring/user-interaction
+
+imports
+  editor-common.generated
+    
+rules //dialog primitives
+
+  /**
+   * Opens an input dialog for a single string value
+   * @type (String, String, String) -> String
+   */
+  newname-dialog:
+    (language, title, label, default-value) -> <prim("SSL_EXT_newnamedialog", language, title, label, default-value)>
+
+  newname-dialog:
+    (title, label, default-value) -> <newname-dialog> ("", title, label, default-value)  
+
+  /**
+   * Opens a message dialog, type can be ERROR, WARNING, INFO or NONE 
+   * ERROR, INFO and NONE only have an OK button and always succeed
+   * WARNING has an OK button and a CANCEL button and succeeds if OK is pressed 
+   * @type (String, String, String) -> _
+   */
+  message-dialog:
+    (title, label, mtype) -> <prim("SSL_EXT_openmessagedialog", title, label, mtype)>
+
+  message-dialog:
+    (title, label) -> (title, label, "NONE")
+    
+
+rules //dialogs used in refactoring workflow
+
+  dialog-newname(|language) =
+    <newname-dialog> (language, "rename", "new name: ", "")
+
+  message-unexpected-failure =
+    <message-errors> "Refactoring fails unexpectedly, no changes are made"
+      
+  message-invalid-selection =
+    <message-errors> "Refactoring is not applicable to the selected fragment"
+  
+  message-invalid-input =
+    <message-errors> "Refactoring is not applicable with this input"
+
+  message-canceled-by-user =
+    <message-errors> "Refactoring is canceled by the user"
+
+rules //helper rules 
+	
+  message-errors =
+    !("errors", <id>, "ERROR");
+    message-dialog;
+    fail
+
+  message-warnings =
+    !("warnings", <id>, "WARNING");
+    message-dialog
+  
+  report-semantic-problems =
+    ?(behavioural-changes, consistency-errors-introduced, consistency-errors-solved);
+    if <concat; not(?[])> [behavioural-changes, consistency-errors-introduced, consistency-errors-solved] then
+      header      := "Applying this refactoring may change the behaviour of the program, continue?";
+      behavioural := <?[] <+ !["\nBehavioural changes: "|<map(make-error-string)> ]> behavioural-changes;
+      consistency := <?[] <+ !["\nConsistency errors: "|<map(make-error-string)> ]> consistency-errors-introduced;
+      cons-solved := <?[] <+ !["\nConsistency errors solved: "|<map(make-error-string)>]> consistency-errors-solved;
+      messages    := <filter(not(?[])); concat> [behavioural, consistency, cons-solved];
+      <mk-message-from-list; message-warnings> (header, messages)
+    end
+    
+  report-parse-failures =
+  	?unparsed-files;
+    <report-warnings> (
+      "The files listed below could not be parsed due to syntax errors.\nClick 'OK' to continue or 'Cancel' to stop the operation.", 
+      <map(<conc-strings>("  - ", <id>))> unparsed-files
+    )
+
+  report-errors-warnings =
+    ?(header, errors, warnings);
+    if <not(?[])> errors then
+      <report-errors> (header, <conc> (errors, warnings))
+    else
+      <report-warnings> (header, warnings)
+    end
+  
+  report-errors =
+    ?(header, errors);
+    if <not(?[])> errors then
+      <mk-message-from-list; message-errors> (header, <map(make-error-string)> errors)
+    end
+  
+  report-errors =
+  	not(?(_, _));
+  	<report-errors> ("", <id>)
+  
+  report-warnings =
+    ?(header, warnings);
+    if <not(?[])> warnings then
+      <mk-message-from-list; message-warnings> (header, <map(make-error-string)> warnings)
+    end
+
+  report-warnings =
+  	not(?(_, _));
+  	<report-warnings> ("", <id>)
+
+  make-error-string =
+    is-string
+  
+  make-error-string :
+    (term, message) -> error-string
+    where debug(!"1: ");
+      if (txt, line, column):= <origin-source-info> then  //TODO: filename
+        error-string := $[ ([line],[column]): [message]] 
+      else 
+        error-string := message
+      end 
+  
+  origin-source-info =
+    !(<origin-text>, <origin-line>, <origin-column>)  //TODO: filename
+  
+  mk-message-from-list:
+  	(header, strings) -> <separate-by(|"\n"); concat-strings> [header|strings]
+
+  mk-message-from-list:
+  	strings -> <separate-by(|"\n"); concat-strings> strings

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str	Tue Apr  5 15:13:46 2011	(r22484)
@@ -0,0 +1,100 @@
+module rename
+
+imports
+  analysis
+  libstrc
+  desugar
+  sourcedir
+  lib/editor-common.generated
+  lib-refactoring/rename-generic
+  lib-refactoring/files
+  lib-refactoring/fetch 
+  lib-refactoring/language-description
+
+
+rules //rename refactoring, builder
+  
+  rename-builder:
+  (selected, position, ast, path, project-path) -> (filename, resulting-asts)
+  where
+  	resulting-asts := <rename-refactoring; map(Snd)>;
+    filename := <guarantee-extension(|"aterm")> path  
+
+  rename-refactoring:
+    (selected, position, ast, path, project-path) -> ast-change-tuples
+    where
+      asts := <analyse-names> [ast|<collect-other-asts(|path)>];
+      ref-name := <Hd; fetch-annotated-term(|<fetch-down(is-string)> selected)> asts;
+      ast-change-tuples := <apply-rename-refactoring(
+      	constraint-error-external-def,
+      	re-analyse-names, 
+      	collect-sem-errors
+      )> (ref-name, asts, <get-language-name> path)
+    
+    
+rules //check for semantic errors
+ 		
+  collect-sem-errors = 
+    where (errors :=<collect-all(global-constraint-error + constraint-error, conc)>);
+    where (warnings :=<collect-all(constraint-warning, conc)>);
+    <conc>(errors, warnings);
+    flatten-list
+
+  constraint-error-external-def :
+  	x{c} -> (x, $[External definitions can not be renamed])
+  	where
+  	  <Declaration> c => ExtSDef(_, _, _) <+
+  	  <Declaration> c => ExtOpDecl(_, _)
+ 	
+rules //collecting ASTs
+
+  /**
+   * Collects all ASTs from trans directory (except the excluded file)
+   */
+  collect-other-asts(|excluded-file) =
+    !$[[<project-path>]/trans];
+    get-source-asts(
+      parse-file, 
+      has-extension(|"str"); not(equal(|$[[<project-path>]/[excluded-file]])), 
+      not(fail)
+    )
+
+rules //name analysis
+  
+  re-analyse-names =
+    editor-init;
+    topdown(strip-annos);
+    topdown(try(resugar-Let)); //TODO: better solution?
+    analyse-names
+  
+  resugar-Let:
+  	Rec(x, y) -> Let(x,y)
+  	where 
+  	  origin-term; 
+  	  ?Let(_, _)
+  	
+  
+  analyse-names:
+    asts -> asts'
+    where
+       rules(
+          CurrentFile := "" //TODO: primitive for file path?
+          ProjectDir  := <project-path>
+       );
+       try(get-source-base-dir);
+       <declare-globals> Import("libstratego-lib");
+       asts' := <
+         map(basic-desugar-top);
+         map(alltd(where(not(?Import(_) <+ ?ImportWildcard(_))); declare-globals)); //use asts in list instead of file system
+         map(
+           alltd(
+           	 is-not-imported(|asts);
+             declare-globals //TODO: Imports should be handled as external definitions (otherwise extname -> extname' leads to unnoticed behaviour change)
+           );
+           declare-bodies-top
+         )
+       > asts
+
+  is-not-imported(|asts) =
+    where(?Import(mod) <+ ?ImportWildcard(mod)); 
+    where(not(<fetch(?Module(mod, _))> asts)) //Do not overwrite with old information (from files)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	Tue Apr  5 13:04:12 2011	(r22483)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	Tue Apr  5 15:13:46 2011	(r22484)
@@ -8,6 +8,7 @@
   analysis
   desugar
   lib/editor-common.generated
+  rename
 
 strategies
 

From srabbelier at gmail.com  Tue Apr  5 18:04:13 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Tue, 05 Apr 2011 16:04:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22485 -
	spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services
Message-ID: <20110405160413.A6ACACC0E9@mx4.tudelft.nl>

Author: SverreRabbelier
Date: Tue Apr  5 16:04:13 2011
New Revision: 22485
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22485&sc=1

Log:
Added error handling from ParseErrorHandler

Modified:
   spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java

Modified: spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java
==============================================================================
--- spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java	Tue Apr  5 15:13:46 2011	(r22484)
+++ spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java	Tue Apr  5 16:04:13 2011	(r22485)
@@ -1,15 +1,22 @@
 package org.spoofax.jssglr.client.services;
 
+import java.util.ArrayList;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
+import static org.spoofax.jsglr.client.imploder.AbstractTokenizer.findLeftMostTokenOnSameLine;
+import static org.spoofax.jsglr.client.imploder.AbstractTokenizer.findRightMostTokenOnSameLine;
+
 import org.spoofax.interpreter.terms.ISimpleTerm;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.InvalidParseTableException;
 import org.spoofax.jsglr.client.ParseException;
 import org.spoofax.jsglr.client.ParseTable;
+import org.spoofax.jsglr.client.RegionRecovery;
 import org.spoofax.jsglr.client.SGLR;
+import org.spoofax.jsglr.client.imploder.Token;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.ITokenizer;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
@@ -39,6 +46,11 @@
 		{ "RuleDec", "SDec",
 		  "MethodDec", "ClassBodyDec", "ClassMemberDec", "ConstrDec", "FieldDec" };
 
+	private static final int LARGE_REGION_SIZE = 8;
+
+	private static final String LARGE_REGION_START =
+		"Region could not be parsed because of subsequent syntax error(s) indicated below";
+
 	private final ITermFactory af;
 	private ParseTable parseTable;
 	private TreeBuilder treeBuilder;
@@ -111,6 +123,90 @@
 		return parser;
 	}-*/;
 
+	private int findRightMostWithSameError(IToken token, String prefix) {
+		String expectedError = token.getError();
+		ITokenizer tokenizer = token.getTokenizer();
+		int i = token.getIndex();
+		for (int max = tokenizer.getTokenCount(); i + 1 < max; i++) {
+			String error = tokenizer.getTokenAt(i + 1).getError();
+			if (error != expectedError
+					&& (error == null || prefix == null || !error.startsWith(prefix)))
+				break;
+		}
+		return i;
+	}
+
+	private void reportErrorNearOffset(JsArray<JavaScriptObject> jserrors, ITokenizer tokenizer, int offset, String message) {
+		IToken errorToken = tokenizer.getErrorTokenOrAdjunct(offset);
+		reportErrorAtTokens(jserrors, errorToken, errorToken, message);
+	}
+
+	private void reportErrorAtTokens(JsArray<JavaScriptObject> jserrors, final IToken left, final IToken right, String message) {
+		if (left.getStartOffset() > right.getEndOffset()) {
+			reportErrorNearOffset(jserrors, left.getTokenizer(), left.getStartOffset(), message);
+		} else {
+			jserrors.push(createWarningToken(left.getLine() - 1, left.getColumn(), message, false));
+		}
+	}
+
+	private void reportWarningAtTokens(JsArray<JavaScriptObject> jserrors, final IToken left, final IToken right, final String message) {
+		jserrors.push(createWarningToken(left.getLine() - 1, left.getColumn(), message, true));
+	}
+
+	private static List<BadTokenException> getCollectedErrorsInRegion(SGLR parser, IToken left, IToken right, boolean alsoOutside) {
+		List<BadTokenException> results = new ArrayList<BadTokenException>();
+		int line = left.getLine();
+		int endLine = right.getLine() + (alsoOutside ? RegionRecovery.NR_OF_LINES_TILL_SUCCESS : 0);
+		for (BadTokenException e : parser.getCollectedErrors()) {
+			if (e.getLineNumber() >= line && e.getLineNumber() <= endLine)
+				results.add(e);
+		}
+		return results;
+	}
+
+	private static IToken findNextNonEmptyToken(IToken token) {
+		ITokenizer tokenizer = token.getTokenizer();
+		IToken result = null;
+		for (int i = token.getIndex(), max = tokenizer.getTokenCount(); i < max; i++) {
+			result = tokenizer.getTokenAt(i);
+			if (result.getLength() != 0 && !Token.isWhiteSpace(result)) break;
+		}
+		return result;
+	}
+
+	private void reportBadToken(JsArray<JavaScriptObject> jserrors, ITokenizer tokenizer, BadTokenException exception) {
+		String message;
+		if (exception.isEOFToken() || tokenizer.getTokenCount() <= 1) {
+			message = exception.getShortMessage();
+		} else {
+			IToken token = tokenizer.getTokenAtOffset(exception.getOffset());
+			token = findNextNonEmptyToken(token);
+			message = ITokenizer.ERROR_WATER_PREFIX + ": " + token.toString().trim();
+		}
+		reportErrorNearOffset(jserrors, tokenizer, exception.getOffset(), message);
+	}
+
+
+	private void reportSkippedRegion(JsArray<JavaScriptObject> jserrors, SGLR parser, IToken left, IToken right) {
+		// Find a parse failure(s) in the given token range
+		int line = left.getLine();
+		int reportedLine = -1;
+		for (BadTokenException e : getCollectedErrorsInRegion(parser, left, right, true)) {
+			reportBadToken(jserrors, left.getTokenizer(), e);
+			if (reportedLine == -1)
+				reportedLine = e.getLineNumber();
+		}
+
+		if (reportedLine == -1) {
+			// Report entire region
+			reportErrorAtTokens(jserrors, left, right, ITokenizer.ERROR_SKIPPED_REGION);
+		} else if (reportedLine - line >= LARGE_REGION_SIZE) {
+			// Warn at start of region
+			reportErrorAtTokens(jserrors, findLeftMostTokenOnSameLine(left),
+					findRightMostTokenOnSameLine(left), LARGE_REGION_START);
+		}
+	}
+
 	@SuppressWarnings("unchecked")
 	public JavaScriptObject parseAndTokenize(int lines, String text) {
 		final JsArray<JavaScriptObject>[] attrs = new JsArray[lines];
@@ -118,26 +214,65 @@
 			attrs[i] = (JsArray<JavaScriptObject>) JavaScriptObject.createArray();
 		}
 		final ISimpleTerm o = parse(text);
+		JsArray<JavaScriptObject> jserrors = (JsArray<JavaScriptObject>) JavaScriptObject.createArray();
 		if(o == null) {
-			return makeJsArray(attrs);
+			return makeParseResult(makeJsArray(attrs), jserrors);
 		}
 		final IToken t = ImploderAttachment.get(o).getLeftToken();
 		if(t == null) {
-			return makeJsArray(attrs);
+			return makeParseResult(makeJsArray(attrs), jserrors);
 		}
 		final ITokenizer tok = t.getTokenizer();
+
 		for(int i = 0; i < tok.getTokenCount(); i++) {
 			final IToken x = tok.getTokenAt(i);
+			int line = x.getLine() - 1;
 			//debugToken(x);
 
 			final int start = x.getColumn();
 			final int end = x.getEndOffset() - x.getStartOffset() + start + 1;
 			final String tokentype = convertTokenType(x.getKind());
-			attrs[x.getLine()-1].push(createBespinToken(x.toString(), tokentype, start, end, x.getLine()));
+			attrs[line].push(createBespinToken(x.toString(), tokentype, start, end, x.getLine()));
+		}
+
+		// https://svn.strategoxt.org/repos/StrategoXT/spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
+		for(int i = 0; i < tok.getTokenCount(); i++) {
+			final IToken x = tok.getTokenAt(i);
+			final String error = x.getError();
+			if (error != null) {
+				if (error == ITokenizer.ERROR_SKIPPED_REGION) {
+					i = findRightMostWithSameError(x, null);
+					reportSkippedRegion(jserrors, sglr, x, tok.getTokenAt(i));
+				} else if (error.startsWith(ITokenizer.ERROR_WARNING_PREFIX)) {
+					i = findRightMostWithSameError(x, null);
+					reportWarningAtTokens(jserrors, x, tok.getTokenAt(i), error);
+				} else if (error.startsWith(ITokenizer.ERROR_WATER_PREFIX)) {
+					i = findRightMostWithSameError(x, ITokenizer.ERROR_WATER_PREFIX);
+					reportErrorAtTokens(jserrors, x, tok.getTokenAt(i), error);
+				} else {
+					i = findRightMostWithSameError(x, null);
+					// UNDONE: won't work for multi-token errors (as seen in SugarJ)
+					reportErrorAtTokens(jserrors, x, tok.getTokenAt(i), error);
+				}
+			}
 		}
-		return makeJsArray(attrs);
+
+		return makeParseResult(makeJsArray(attrs), jserrors);
 	}
 
+	public native static void debug(String message) /*-{
+		$self.sender.emit("log", message);
+	}-*/;
+
+	public native static JavaScriptObject createWarningToken(int row, int column, String text, boolean isWarning) /*-{
+		return {
+			row: row,
+			column: column,
+			text: text,
+			type: isWarning ? "warning" : "error"
+		};
+	}-*/;
+
 	public native static JavaScriptObject createBespinToken(String value, String tokentype, int startColumn, int endColumn, int lineNumber) /*-{
 		return {
 	            type: tokentype,
@@ -156,6 +291,14 @@
 		return r;
 	}
 
+	private native static JavaScriptObject makeParseResult(
+			JsArray<JavaScriptObject> tokens, JsArray<JavaScriptObject> errors) /*-{
+		return {
+			tokens: tokens,
+			errors: errors
+		};
+	}-*/;
+
 	private void debugToken(final IToken x) {
 		System.out.println("line  = " + x.getLine());
 		System.out.println("start = " + x.getColumn());

From seba at informatik.uni-marburg.de  Tue Apr  5 18:14:06 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 05 Apr 2011 16:14:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22486 - in
	sugarj/branches/SugarJ-editor-services:
	case-studies/javaclosure case-studies/javaclosure/concrete
	compiler/org/sugarj/driver
Message-ID: <20110405161406.96B6F7F800D@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Tue Apr  5 16:14:06 2011
New Revision: 22486
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22486&sc=1

Log:
updated case study

Added:
   sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Sugar.sugj
      - copied, changed from r22483, sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Transformation.sugj
Deleted:
   sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Transformation.sugj
Modified:
   sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Test.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Test.sugj
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java

Modified: sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Test.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Test.sugj	Tue Apr  5 16:04:13 2011	(r22485)
+++ sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Test.sugj	Tue Apr  5 16:14:06 2011	(r22486)
@@ -3,7 +3,6 @@
 import java.util.List;
 import java.util.ArrayList;
 
-import javaclosure.Closure;
 import javaclosure.Syntax;
 import javaclosure.Transformation;
 

Copied and modified: sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Sugar.sugj (from r22483, sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Transformation.sugj)
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Transformation.sugj	Tue Apr  5 13:04:12 2011	(r22483, copy source)
+++ sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Sugar.sugj	Tue Apr  5 16:14:06 2011	(r22486)
@@ -2,7 +2,7 @@
 
 import concretesyntax.ConcreteJava;
 
-import javaclosure.Syntax;
+import javaclosure.Closure;
 import javaclosure.ToRefType;
 
 import org.sugarj.languages.Java;
@@ -10,6 +10,34 @@
 /*
  * see http://javac.info/closures-v06a.html
  */
+public sugar Syntax {
+  context-free syntax
+    "#" JavaType "(" JavaType ")" -> JavaType {cons("ClosureType")}
+    "#" JavaType "(" JavaFormalParam ")" JavaBlock -> JavaExpr {cons("Closure")}
+  
+  %% The remaining priorities follow by transitivity.
+  context-free priorities
+      {right:
+      JavaLHS "="    JavaExpr -> JavaExpr
+      JavaLHS "*="   JavaExpr -> JavaExpr
+      JavaLHS "/="   JavaExpr -> JavaExpr
+      JavaLHS "%="   JavaExpr -> JavaExpr
+      JavaLHS "+="   JavaExpr -> JavaExpr
+      JavaLHS "-="   JavaExpr -> JavaExpr
+      JavaLHS "<<="  JavaExpr -> JavaExpr
+      JavaLHS ">>="  JavaExpr -> JavaExpr
+      JavaLHS ">>>=" JavaExpr -> JavaExpr
+      JavaLHS "&="   JavaExpr -> JavaExpr
+      JavaLHS "^="   JavaExpr -> JavaExpr
+      JavaLHS "|="   JavaExpr -> JavaExpr
+    }
+    > "#" JavaType "(" JavaFormalParam ")" JavaExpr -> JavaExpr
+}
+
+  
+/*
+ * see http://javac.info/closures-v06a.html
+ */
 public sugar Transformation {
   desugarings
     desugar-closure-type

Modified: sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Test.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Test.sugj	Tue Apr  5 16:04:13 2011	(r22485)
+++ sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Test.sugj	Tue Apr  5 16:14:06 2011	(r22486)
@@ -3,8 +3,7 @@
 import java.util.List;
 import java.util.ArrayList;
 
-import javaclosure.Syntax;
-
+import javaclosure.concrete.Syntax;
 import javaclosure.concrete.Transformation;
 
 public class Test<T>{

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Tue Apr  5 16:04:13 2011	(r22485)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Tue Apr  5 16:14:06 2011	(r22486)
@@ -808,19 +808,6 @@
         if (CommandExecution.FULL_COMMAND_LINE)
           log.log("Wrote SDF file to '" + new File(sdfExtension).getAbsolutePath() + "'.");
         
-        String currentGrammarName =
-          FileCommands.hashFileName("sugarj", currentGrammarModule + fullExtName);
-
-        currentGrammarSDF =
-            Environment.tmpDir + sep + currentGrammarName + ".sdf";
-
-        driverResult.generateFile(currentGrammarSDF, 
-            "module " + currentGrammarName + "\n"
-            + "imports " + currentGrammarModule + "\n" 
-            + "        " + fullExtName);
-        currentGrammarModule = currentGrammarName;
-
-
         String strExtensionTerm = 
             "Module(" + "\"" + fullExtName+ "\"" + ", " 
                       + strExtract + ")" + "\n";
@@ -842,18 +829,33 @@
         
         if (CommandExecution.FULL_COMMAND_LINE)
           log.log("Wrote Stratego file to '" + new File(strExtension).getAbsolutePath() + "'.");
-        
+      }
+
+      if (FileCommands.exists(sdfExtension)) {
+        String currentGrammarName =
+          FileCommands.hashFileName("sugarj", currentGrammarModule + fullExtName);
+        currentGrammarSDF =
+          Environment.tmpDir + sep + currentGrammarName + ".sdf";
+        driverResult.generateFile(currentGrammarSDF, 
+            "module " + currentGrammarName + "\n"
+            + "imports " + currentGrammarModule + "\n" 
+            + "        " + fullExtName);
+        currentGrammarModule = currentGrammarName;
+        driverResult.addFileDependency(sdfExtension);
+      }
+
+      if (FileCommands.exists(strExtension)) {
         String currentTransName =
           FileCommands.hashFileName("sugarj", currentTransModule + fullExtName);
-
         currentTransSTR = Environment.tmpDir + sep + currentTransName + ".str";
-
         driverResult.generateFile(currentTransSTR,
             "module " + currentTransName + "\n" 
             + "imports " + currentTransModule + "\n"
             + "        " + fullExtName);
         currentTransModule = currentTransName;
+        driverResult.addFileDependency(strExtension);
       }
+
     } finally {
       log.endTask();
     }

From fehrenbach at informatik.uni-marburg.de  Wed Apr  6 12:12:58 2011
From: fehrenbach at informatik.uni-marburg.de (Stefan Fehrenbach)
Date: Wed, 06 Apr 2011 10:12:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22487 -
	sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver
Message-ID: <20110406101258.9DBE4CC194@mx4.tudelft.nl>

Author: StefanFehrenbach
Date: Wed Apr  6 10:12:58 2011
New Revision: 22487
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22487&sc=1

Log:
fix cygwin path issues, remove unnecessary calls to toCygwinPath

Modified:
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java	Tue Apr  5 16:14:06 2011	(r22486)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java	Wed Apr  6 10:12:58 2011	(r22487)
@@ -56,14 +56,14 @@
      */
     List<String> cmd = new ArrayList<String>(Arrays.asList(new String[] {
 //      PACK_SDF,
-      "-i", toCygwinPath(sdf),
-      "-o", toCygwinPath(def),
-      "-Idef", toCygwinPath(StdLib.sugarjDef.getPath()),
-      "-Idef", toCygwinPath(StdLib.javaDef.getPath()),
-      "-Idef", toCygwinPath(StdLib.sdfDef.getPath()),
-      "-Idef", toCygwinPath(StdLib.strategoDef.getPath()),
-      "-Idef", toCygwinPath(StdLib.editorServiceDef.getPath()),
-      "-I", toCygwinPath(StdLib.stdLibDir.getPath()),
+      "-i", sdf,
+      "-o", def,
+      "-Idef", StdLib.sugarjDef.getPath(),
+      "-Idef", StdLib.javaDef.getPath(),
+      "-Idef", StdLib.sdfDef.getPath(),
+      "-Idef", StdLib.strategoDef.getPath(),
+      "-Idef", StdLib.editorServiceDef.getPath(),
+      "-I", StdLib.stdLibDir.getPath(),
     }));
     
     for (String path : Environment.includePath) 

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java	Tue Apr  5 16:14:06 2011	(r22486)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java	Wed Apr  6 10:12:58 2011	(r22487)
@@ -63,7 +63,7 @@
         "-i", toWindowsPath(str),
         "-o", toWindowsPath(java),
         "-m", main,
-        "-I", toCygwinPath(StdLib.stdLibDir.getPath()),
+        "-I", StdLib.stdLibDir.getPath(),
         "-p", "sugarj",
         "--library",
         "-O", "0"

From fehrenbach at informatik.uni-marburg.de  Wed Apr  6 15:47:29 2011
From: fehrenbach at informatik.uni-marburg.de (Stefan Fehrenbach)
Date: Wed, 06 Apr 2011 13:47:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22488 - in
	sugarj/branches/SugarJ-editor-services/compiler: . META-INF
Message-ID: <20110406134729.1A7BFCC1DB@mx4.tudelft.nl>

Author: StefanFehrenbach
Date: Wed Apr  6 13:47:28 2011
New Revision: 22488
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22488&sc=1

Log:
commons-cli added to MANIFEST.MF and build.properties to prevent ClassNotFoundException

Modified:
   sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF
   sugarj/branches/SugarJ-editor-services/compiler/build.properties

Modified: sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF	Wed Apr  6 10:12:58 2011	(r22487)
+++ sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF	Wed Apr  6 13:47:28 2011	(r22488)
@@ -20,4 +20,5 @@
  org.sugarj.driver.caching,
  org.sugarj.driver.transformations
 Bundle-ClassPath: make_permissive.jar,
- .
+ .,
+ commons-cli-1.2.jar

Modified: sugarj/branches/SugarJ-editor-services/compiler/build.properties
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/build.properties	Wed Apr  6 10:12:58 2011	(r22487)
+++ sugarj/branches/SugarJ-editor-services/compiler/build.properties	Wed Apr  6 13:47:28 2011	(r22488)
@@ -2,4 +2,5 @@
 output.. = bin/
 bin.includes = META-INF/,\
                .,\
-               make_permissive.jar
+               make_permissive.jar,\
+               commons-cli-1.2.jar

From seba at informatik.uni-marburg.de  Thu Apr  7 12:10:01 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Thu, 07 Apr 2011 10:10:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22489 - in
	sugarj/branches/SugarJ-editor-services/case-studies/xml: . schema
Message-ID: <20110407101001.2B7D9108C027@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Thu Apr  7 10:10:00 2011
New Revision: 22489
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22489&sc=1

Log:
changed syntax of XML embeddings

Modified:
   sugarj/branches/SugarJ-editor-services/case-studies/xml/AsSax.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlEditor.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlJavaSyntax.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaJavaSyntax.sugj

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/AsSax.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/AsSax.sugj	Wed Apr  6 13:47:28 2011	(r22488)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/AsSax.sugj	Thu Apr  7 10:10:00 2011	(r22489)
@@ -72,9 +72,11 @@
 	  content-to-stm(|java_x) :
 	    TextFromMetaExpr(java_e) ->
 	    java_bstm |[
-	      java_x.characters({|
-	        String java_y = java_e; | java_y.toCharArray()
-	      |}, 0, java_y.length());
+	      {|
+          String java_y = java_e;
+         |
+	        java_x.characters( java_y.toCharArray(), 0, java_y.length())
+	      |};
 	    ]|
 	      where new => java_y
 	

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.sugj	Wed Apr  6 13:47:28 2011	(r22488)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.sugj	Thu Apr  7 10:10:00 2011	(r22489)
@@ -6,6 +6,7 @@
 import xml.AsSax;
 import xml.Test;
 import xml.XmlJavaSyntax;
+import xml.XmlEditor;
 
 public class BookTest extends xml.Test {
   public static void main(String[] args) throws SAXException {
@@ -13,9 +14,8 @@
      
     String title = "Sweetness and Power: The Place of Sugar in Modern History";
     
-    ch.write document
-      <book title="{title}" >
-        <author name="Sidney W. Mintz" />
-      </book>;
+    ch.<book title="{title}" >
+         <author name="Sidney W. Mintz" />
+       </book>;
   }
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj	Wed Apr  6 13:47:28 2011	(r22488)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj	Thu Apr  7 10:10:00 2011	(r22489)
@@ -6,16 +6,11 @@
 import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
 import org.xml.sax.helpers.DefaultHandler;
-   
+
 import xml.AsSax;
-import xml.XmlSyntax;
 import xml.XmlJavaSyntax;
-
 import xml.XmlEditor;
-
-import editor.util.Strategies;
-import editor.ASTBuilder;
-
+ 
 /*
  * code for printing based on http://www.informit.com/articles/article.aspx?p=26351&seqNum=5
  */
@@ -23,34 +18,33 @@
   public static void main(String[] args) throws SAXException {
     ContentHandler ch = new Test();
     
-    ch.write document
-      <xsd:schema
-		    targetNamespace="http://www.w3.org/2001/XMLSchema"
-		    blockDefault="#all"
-		    elementFormDefault="qualified"
-		    version="1.0">   
-		    <{http://www.w3.org/2001/XMLSchema}simpleType name="derivationSet">
-		      <annotation>
-		      
-		        <documentation>
-		          A utility type, not for public use
-		        </documentation> 
-		        <documentation>
-		          #all or (possibly empty) subset of {extension, restriction}
-		        </documentation>
-		      </annotation>
-		      <union>
-		        <simpleType>
-		          <restriction base="token">
-		            <enumeration value="#all"/>
-		          </restriction>
-		        </simpleType>
-		        <simpleType>
-		          <list itemType="reducedDerivationControl"/>
-		        </simpleType>
-		      </union>
-		    </{http://www.w3.org/2001/XMLSchema}simpleType>  
-		  </xsd:schema>;
+    ch.<xsd:schema
+		     targetNamespace="http://www.w3.org/2001/XMLSchema"
+		     blockDefault="#all"
+		     elementFormDefault="qualified"
+		     version="1.0">   
+		     <{http://www.w3.org/2001/XMLSchema}simpleType name="derivationSet">
+		       <annotation>
+		       
+		         <documentation>
+		           A utility type, not for public use
+		         </documentation> 
+		         <documentation>
+		           #all or (possibly empty) subset of {extension, restriction}
+		         </documentation>
+ 		      </annotation>
+	 	      <union>
+		         <simpleType>
+		           <restriction base="token">
+		             <enumeration value="#all"/>
+		           </restriction>
+		         </simpleType>
+		         <simpleType>
+		           <list itemType="reducedDerivationControl"/>
+ 		        </simpleType>
+	 	      </union>
+		     </{http://www.w3.org/2001/XMLSchema}simpleType>  
+		   </xsd:schema>;
   }
   	
 	private int indentation = 0;

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlEditor.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlEditor.sugj	Wed Apr  6 13:47:28 2011	(r22488)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlEditor.sugj	Thu Apr  7 10:10:00 2011	(r22489)
@@ -10,8 +10,8 @@
     environment ElemName : blue
     environment AttrName : darkorange
     environment AttValue : darkred
-    environment CharData : default
-    environment CharDataSection : default
+    environment CharData : black
+    environment CharDataSection : black
     
     xmlParenthesis = 0 0 200 bold
 

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlJavaSyntax.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlJavaSyntax.sugj	Wed Apr  6 13:47:28 2011	(r22488)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlJavaSyntax.sugj	Thu Apr  7 10:10:00 2011	(r22489)
@@ -16,58 +16,16 @@
   context-free syntax
     ObjectStm -> JavaStm {cons("ToMetaStm")}
 
-    JavaId "." "write" Content ";" -> ObjectStm {cons("WriteDoc")}
-    JavaId "." "write" Document ";" -> ObjectStm {cons("WriteDoc"), avoid}
-    JavaId "." "write" "document" Document ";" -> ObjectStm {cons("WriteDoc")}
-
-  signature constructors
-    WriteDoc : JavaId * Content -> ObjectStm
-    WriteDoc : JavaId * Document -> ObjectStm
+    JavaId "." Document ";" -> ObjectStm {cons("WriteDoc")}
 
   context-free syntax
     "<{" JavaStm  "}/>" -> Content {cons("FromMetaStm")}
     
   syntax
     "{" <LAYOUT?-CF> <JavaExpr-CF> <LAYOUT?-CF> "}" -> FooDoubleQuotedText {cons("FromMetaExpr")}
-  
-
-  lexical syntax
-    [\ \t\12\13\n] -> LAYOUT {prefer}
-
-  signature
-	  constructors
-	    ToMetaExpr   : Expr -> Expr
-	    ToMetaStmListExpr  : Expr -> Expr
-	    ToMetaExprListExpr : Expr -> Expr
-	    ToMetaStm    : a -> Expr     
-	    WriteDoc     : Id * Content -> ContentStm
-	    FromMetaExpr : Expr -> a 
-	    FromMetaStmListExpr : Expr -> a 
-	
-	    TextFromMetaExpr : Expr -> a 
-	
-	    ToMetaListExpr : Expr -> Expr
-	
-	    meta-var     : String -> a
-	    meta-listvar : String -> a
-	
-	strategies
-	
-	  is-anti-quotation =
-	      ?FromMetaExpr(_)
-	    + ?TextFromMetaExpr(_)
-	    + ?meta-var(_)
-	    + ?meta-listvar(_)
-	
-	  is-quotation =
-	      ?ToMetaStm(_)
-	    + ?ToMetaExpr(_)
-	
-	strategies
-	
-	  all-quotation(s) =
-	      ToMetaStm(WriteDoc(id, s))
-	   <+ ToMetaStm(s)
-
+    "{" <LAYOUT?-CF> <JavaExpr-CF> <LAYOUT?-CF> "::" <LAYOUT?-CF> "cdata" <LAYOUT?-CF> "}" -> <Content-CF> {cons("TextFromMetaExpr")}
+    
+  signature constructors
+    TextFromMetaExpr : a -> a
 
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj	Wed Apr  6 13:47:28 2011	(r22488)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj	Thu Apr  7 10:10:00 2011	(r22489)
@@ -19,8 +19,7 @@
     constraint-error :
       XMLSchemaDoc(Document(pre, root, post)) -> err
       where
-        <xml-validate> root => err;
-        <not(?[])> err
+        <xml-validate> root => err
     
 
   // comment out for bootstrapping
@@ -33,8 +32,7 @@
     constraint-error :
       ValWriteDoc(ch,Document(pre, root, post)) -> err
       where
-        <xml-validate> root => err;
-        <not(?[])> err
+        <xml-validate> root => err
 
     constraint-error :
       ValWriteDoc(ch,Document(pre, root, post)) -> (root, "no schema for this namespace found")

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj	Wed Apr  6 13:47:28 2011	(r22488)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj	Thu Apr  7 10:10:00 2011	(r22489)
@@ -16,10 +16,10 @@
   public static void main(String[] args) throws SAXException {
     ContentHandler ch = new BookSchemaTest();
     
-    ch.write valid document
-      <{lib}book title="Sweetness and Power: The Place of Sugar in Modern History">
-        <{lib}author name="Sidney W. Mintz">
-        </{lib}author>
-      </{lib}book>;
+    @Validate
+    ch.<{lib}book title="Sweetness and Power: The Place of Sugar in Modern History">
+         <{lib}author name="Sidney W. Mintz">
+         </{lib}author>
+       </{lib}book>;
   }
 } 
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaJavaSyntax.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaJavaSyntax.sugj	Wed Apr  6 13:47:28 2011	(r22488)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaJavaSyntax.sugj	Thu Apr  7 10:10:00 2011	(r22489)
@@ -7,7 +7,7 @@
 public sugar XmlSchemaJavaSyntax {
   
   context-free syntax
-    JavaId "." "write" "valid" "document" Document ";" -> ObjectStm {cons("ValWriteDoc")}
+    "@Validate" JavaId "."  Document ";" -> ObjectStm {cons("ValWriteDoc")}
   
   desugarings
     \ ValWriteDoc(ch,doc) -> WriteDoc(ch,doc) \

From r.t.lindeman at student.tudelft.nl  Thu Apr  7 16:21:13 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Thu, 07 Apr 2011 14:21:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22490 -
	strategoxt-java-backend/trunk/java/runtime/org/strategoxt
Message-ID: <20110407142113.A15442B801A@mx2.tudelft.nl>

Author: RickyLindeman
Date: Thu Apr  7 14:21:13 2011
New Revision: 22490
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22490&sc=1

Log:
Changed some "private static" methods to "protected static" in the HybridInterpreter so a subclass of HybridInterpreter can reuse them.

Modified:
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	Thu Apr  7 10:10:00 2011	(r22489)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	Thu Apr  7 14:21:13 2011	(r22490)
@@ -63,7 +63,7 @@
  */
 public class HybridInterpreter extends Interpreter implements IAsyncCancellable {
 	
-	private static final String USAGE = "Uses: run [FILE.ctree | FILE.jar]... MAINCLASS [ARGUMENT]...\n" +
+	protected static final String USAGE = "Uses: run [FILE.ctree | FILE.jar]... MAINCLASS [ARGUMENT]...\n" +
 	                                    "      run                    PACKAGE.MAINCLASS [ARGUMENT]...";
 
 	private final HybridCompiledContext compiledContext;
@@ -152,7 +152,7 @@
 		return reusable;
 	}
 
-	private static void warnUnqualifiedInvoke(HybridInterpreter interpreter, String main) {
+	protected static void warnUnqualifiedInvoke(HybridInterpreter interpreter, String main) {
 		interpreter.init();
 		SDefT invoked = interpreter.lookupUncifiedSVar(main);
 		if (invoked != null) {
@@ -161,7 +161,7 @@
 		}
 	}
 
-	private static int mainLoadAll(HybridInterpreter interpreter, String... args) {
+	protected static int mainLoadAll(HybridInterpreter interpreter, String... args) {
 		int i = 0;
 		while (i < args.length) {
 			try {

From r.t.lindeman at student.tudelft.nl  Thu Apr  7 16:51:36 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Thu, 07 Apr 2011 14:51:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22491 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching...
Message-ID: <20110407145136.A1FC0CC0DE@mx4.tudelft.nl>

Author: RickyLindeman
Date: Thu Apr  7 14:51:36 2011
New Revision: 22491
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22491&sc=1

Log:
Fixed: Plugin did not shutdown jobs when the plugin is stopped
Fixed: Character offset converter fix (used to highlight the current statement)
Fixed: Change input term before invoke the top strategy

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EmptyExtractor.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/IEventInfoExtractorFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/InterpreterLoadedHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/HybridInterpreterDebugRuntime.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugElement.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandlerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventInfoStringExtractor.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyVarHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/ValueExtractor.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/OffsetTable.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.custom.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofax.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestHybridInterpreterLauncher.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/Activator.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/Activator.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/Activator.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -1,7 +1,11 @@
 package org.strategoxt.imp.debug.core;
 
 import org.eclipse.core.runtime.Plugin;
+import org.eclipse.debug.core.DebugPlugin;
+import org.eclipse.debug.core.ILaunchManager;
+import org.eclipse.debug.core.model.IDebugTarget;
 import org.osgi.framework.BundleContext;
+import org.strategoxt.imp.debug.core.str.model.StrategoDebugTarget;
 
 /**
  * The activator class controls the plug-in life cycle
@@ -29,13 +33,35 @@
 		plugin = this;
 	}
 
-	/*
+	/**
+	 * The plugin is shutting down, stop all jobs in each StrategoDebugTarget.
+	 * 
+	 * Method is inspired by JDIDebugPlugin.stop(BundleContext context)
+	 * org.strategoxt.imp.debug.core.str.model.StrategoDebugTarget$EventDispatchJob.
+	 * 
+	 * 
 	 * (non-Javadoc)
 	 * @see org.eclipse.core.runtime.Plugin#stop(org.osgi.framework.BundleContext)
 	 */
 	public void stop(BundleContext context) throws Exception {
-		plugin = null;
-		super.stop(context);
+		// TODO: Shutdown jobs from org.strategoxt.imp.debug.core.str.model.StrategoDebugTarget$EventDispatchJob
+		try {
+			// find all StrategoDebugTarget
+			ILaunchManager launchManager= DebugPlugin.getDefault().getLaunchManager();
+			IDebugTarget[] targets= launchManager.getDebugTargets();
+			for (int i= 0 ; i < targets.length; i++) {
+				IDebugTarget target= targets[i];
+				if (target instanceof StrategoDebugTarget) {
+					((StrategoDebugTarget)target).shutdown();
+				}
+			}
+			
+		} finally
+		{
+			// always stop
+			plugin = null;
+			super.stop(context);
+		}
 	}
 
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -6,13 +6,16 @@
 import java.util.List;
 
 import org.eclipse.core.runtime.CoreException;
+import org.eclipse.debug.core.ILaunch;
 import org.eclipse.debug.core.ILaunchConfiguration;
 import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
+import org.eclipse.debug.core.ILaunchListener;
 import org.eclipse.debug.core.ILaunchManager;
 import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.IncompatibleJarException;
@@ -27,10 +30,13 @@
  * This DebuggableHybridInterpreter extends the HybridInterpreter so that it can provide debugging support.
  * It will execute the stratego code in a separate JVM.
  * 
+ * DebuggableHybridInterpreter does not extend HybridInterpreterDebugRuntime, because we have full control over the HybridInterpreter here.
+ * 
+ * Use the HybridInterpreterDebugRuntime when it should be controllable from another JVM.
  * @author rlindeman
  *
  */
-public class DebuggableHybridInterpreter extends HybridInterpreter {
+public class DebuggableHybridInterpreter extends HybridInterpreter implements ILaunchListener {
 
 	/**
 	 * If true calling invoke will launch a debug session.
@@ -44,6 +50,7 @@
 		super(termFactory);
 	}
 
+	public static int counter = 0;
 	
 	/**
 	 * Creates an interpreter that bases its definition scope on an existing instance.
@@ -151,13 +158,23 @@
 		// set metadata directory
 		configWC.setAttribute(IStrategoConstants.ATTR_METADATA_DIRECTORY, (String) null);
 
+		// set current term
+		IStrategoTerm term = this.current();
+		if (term != null)
+		{
+			configWC.setAttribute(IStrategoConstants.ATTR_CURRENT_TERM, term.toString());
+		}
+		
 		// and launch
 		try {
 			ILaunchConfiguration config = configWC.doSave();
 			// TODO: only launch if we have breakpoints
 			// Use the Descriptor
 			// We also need EditorIOAgent
-			config.launch(ILaunchManager.DEBUG_MODE, null);
+			//config.launch(ILaunchManager.DEBUG_MODE, null);
+			config.launch(ILaunchManager.DEBUG_MODE, null, false, true);
+			//boolean build,
+            //boolean register
 		} catch (CoreException e) {
 			// TODO Auto-generated catch block
 			e.printStackTrace();
@@ -181,4 +198,21 @@
 	public void setDebugLaunchEnabled(boolean isDebugLaunchEnabled) {
 		this.isDebugLaunchEnabled = isDebugLaunchEnabled;
 	}
+
+	// ILaunchListener interface
+	public void launchRemoved(ILaunch launch) {
+		// TODO Auto-generated method stub
+		System.out.println("removed");
+	}
+	
+	public void launchAdded(ILaunch launch) {
+		// TODO Auto-generated method stub
+		
+	}
+	
+	public void launchChanged(ILaunch launch) {
+		// TODO Auto-generated method stub
+		
+	}
+
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.debug.core.str.launching;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
@@ -90,7 +91,7 @@
 		String invokeStrategy = name; // this strategy will be executed
 		String invokeStrategyArguments = name; // the arguments for the strategy
 		
-		String mainClass = "org.strategoxt.HybridInterpreter";
+		String mainClass = "org.strategoxt.imp.debug.stratego.runtime.strategies.HybridInterpreterDebugRuntime";
 
 		String[] jarArray = FileUtil.convertIPathToStringArray(jarPaths); // + invokeStrategy + " " + invokeStrategyArguments;
 		String[] args = new String[] { invokeStrategy, invokeStrategyArguments };
@@ -108,21 +109,6 @@
 		ls.metadataDirectory = metadataDirectory;
 		
 		launchVM(monitor, launch, ls);
-		//String cp = "" + jar + ":" + javaJar; // + ":" + utilsDir+"/strategoxt.jar";
-		//String classpath = cp;
-		
-		/*
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.create(new Path("workingdirectory"), "projectname");
-		IPath libDir = FileUtil.getLibDirectory(); // contains the rtree
-		debugSessionSettings.setJarLibraryDirectory(libDir);
-		DebugSessionManager dsm = new DebugSessionManager();
-
-		IPath tableDirectory = null;
-		dsm.initVM(mainArgs, classpaths, tableDirectory, "LAUNCH");
-		dsm.setupEventListeners();
-		dsm.redirectOutput();
-		dsm.runVM();
-		*/
 	}
 	
 	class LaunchSettings {
@@ -171,6 +157,11 @@
 		// using attach, run before the StrategoDebugTarget is initialized
 		// using listen, run after the StrategoDebugTarget is initialized
 		System.out.println("RUN");
+		boolean showCommandLine = true;
+		if (showCommandLine)
+		{
+			debugCommandLine(defaultInstall, vmRunnerConfiguration);
+		}
 		vmRunner.run(vmRunnerConfiguration, launch, monitor);
 		monitor.worked(1);
 	}
@@ -195,4 +186,50 @@
 			System.out.println(result);
 		}
 	}
+	
+	/**
+	 * Prints the commandline that can be used to launch the JVM.
+	 * @param defaultInstall
+	 * @param vmRunnerConfiguration
+	 */
+	private void debugCommandLine(IVMInstall defaultInstall, VMRunnerConfiguration vmRunnerConfiguration)
+	{
+		String line = "";
+		// java location
+		try {
+			line += defaultInstall.getInstallLocation().getCanonicalPath() + "/bin/java";
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		// java VM arguments
+		for(String s : vmRunnerConfiguration.getVMArguments())
+		{
+			line += " " + s;
+			
+		}
+		// classpath
+		line += " -Xss8m -Xms256m -Xmx1024m -XX:MaxPermSize=256m -server -Dvisualvm.display.name=FooBar -classpath ";
+		boolean isFirst = true;
+		for(String c : vmRunnerConfiguration.getClassPath())
+		{
+			if (!isFirst)
+			{
+;				line += ":";
+			} else
+			{
+				isFirst = false;
+			}
+			line += c;
+			
+		}
+		// main class
+		line += " " + vmRunnerConfiguration.getClassToLaunch();
+		// arguments
+		for(String a : vmRunnerConfiguration.getProgramArguments())
+		{
+			line += " " + a;
+		}
+		System.out.println(line);
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -39,7 +39,15 @@
 
 	public static final String ATTR_STRATEGO_CLASSPATH = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_CLASSPATH";
 	
+	/**
+	 * Points to metadata directory, contains offsettable
+	 */
 	public static final String ATTR_METADATA_DIRECTORY = ID_STRATEGO_DEBUG_MODEL + ".ATTR_METADATA_DIRECTORY";
 	
 	public static final String ATTR_PROJECT_DIRECTORY = ID_STRATEGO_DEBUG_MODEL + ".ATTR_PROJECT_DIRECTORY";
+	
+	/**
+	 * The current term will be replaced by this value, it will be parsed as an IStrategoTerm.
+	 */
+	public static final String ATTR_CURRENT_TERM = ID_STRATEGO_DEBUG_MODEL + ".ATTR_CURRENT_TERM";
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -152,6 +152,7 @@
 		ls.classpath = classPath;
 		ls.programArguments = programArgsArray;
 		ls.mode = mode;
+		ls.metadataDirectory = debugSessionSettings.getStrategoDirectory().toOSString();
 		
 		launchVM(monitor, ls, launch);
 
@@ -183,7 +184,7 @@
 		
 		if (ls.mode.equals(ILaunchManager.DEBUG_MODE)) {
 			monitor.subTask("Attaching to the Stratego VM");
-			StrategoDebugTarget target = new StrategoDebugTarget(launch, port, null);
+			StrategoDebugTarget target = new StrategoDebugTarget(launch, port, ls.metadataDirectory);
 			//(launch,p,requestPort,eventPort );
 			launch.addDebugTarget(target);
 			monitor.worked(1);
@@ -206,6 +207,8 @@
 		public String[] programArguments;
 		
 		public String mode;
+		
+		public String metadataDirectory;
 	}
 	
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugElement.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugElement.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugElement.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -63,6 +63,12 @@
 		return super.getAdapter(adapter);
 	}
 	
+	/**
+	 * Throws a new DebugException, subclasses should use this when they want to throw exceptions.
+	 * @param message
+	 * @param e
+	 * @throws DebugException
+	 */
 	protected void abort(String message, Throwable e) throws DebugException {
 		// was DebugExamplesPlugin.getDefault().getDescriptor().getUniqueIdentifier(),
 		// deprecated: getDescriptor().getUniqueIdentifier()

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -78,6 +78,8 @@
 	 */
 	class EventDispatchJob extends Job implements VMMonitor {
 		
+		private boolean fShutdown = false;
+		
 		public EventDispatchJob() {
 			super("Stratego Event Dispatch");
 			setSystem(true);
@@ -151,6 +153,21 @@
 			}
 		}
 		
+		/**
+		 * Shutdown this event dispatcher - i.e. causes this Job to
+		 * The thread associated with this runnable
+		 * will exit.
+		 */
+		public void shutdown() {
+		    fShutdown= true;
+		    // remove the event dispatcher VMMonitor reference from the DebugSessionManager to stop receiving events.
+		}
+		
+		protected boolean isShutdown()
+		{
+			return this.fShutdown;
+		}
+		
 	}
 	
 	
@@ -163,7 +180,7 @@
 		
 		// handle events fired by the VM
 		fEventDispatch = new EventDispatchJob();
-		fEventDispatch.schedule();
+		//fEventDispatch.schedule();
 		
 		//VirtualMachine vm = this.setupAttacher(port); // when suspended at this line the debug target has time to setup the socket
 		// TODO: Use SocketListen (wait for VM to connect) instead of SocketAttach (connect to existing VM)
@@ -190,6 +207,12 @@
 			manager.init(new Path(metadataDirectory));
 		}
 		
+		String term = launch.getLaunchConfiguration().getAttribute(IStrategoConstants.ATTR_CURRENT_TERM, (String) null);
+		if (term != null)
+		{
+			manager.changeCurrentTerm(term);
+		}
+		
 		DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(this);
 		// we have to know when we get removed, so that we can shut off the debugger
 		// Used by PyDev debugger
@@ -217,7 +240,9 @@
     public void launchRemoved(ILaunch launch) {
         // shut down the remote debugger when parent launch
         if (launch == this.fLaunch) {
-            DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);;
+        	// TODO: cancel jobs?
+        	System.out.println("Launch removed");
+            DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);
         }
     }
 	
@@ -700,4 +725,69 @@
 		throw new DebugException(new Status(IStatus.ERROR, Activator.getDefault().getBundle().getSymbolicName(), 
 				DebugPlugin.INTERNAL_ERROR, message, e));
 	}
+
+	/**
+	 * The stratego debug plugin is shutting down.
+	 * 
+	 * Shutdown the event dispatcher and do local cleanup.
+	 * 
+	 * Inspired by JDIDebugTarget.shutdown()
+	 */
+	public void shutdown() {
+		//EventDispatcher dispatcher = ((StrategoDebugTarget)getDebugTarget()).getEventDispatcher();
+		if (this.fEventDispatch != null) {
+			this.fEventDispatch.shutdown();
+		}
+		// TODO: terminate or disconnect
+		/*
+		try {
+		    if (supportsTerminate()) {
+		        terminate();
+		    } else if (supportsDisconnect()) {
+		        disconnect();
+		    }
+		} catch (DebugException e) {
+		    //JDIDebugPlugin.log(e);
+		}
+		*/
+		cleanup();
+	}
+
+	/** 
+	 * Cleans up the internal state of this debug
+	 * target as a result of a session ending with a
+	 * VM (as a result of a disconnect or termination of
+	 * the VM).
+	 * <p>
+	 * All threads are removed from this target.
+	 * This target is removed as a breakpoint listener,
+	 * and all breakpoints are removed from this target.
+	 * </p>
+	 */
+	protected void cleanup() {
+		/*
+		// TODO: implement
+	    removeAllThreads();
+	    DebugPlugin plugin = DebugPlugin.getDefault();
+	    plugin.getBreakpointManager().removeBreakpointListener(this);
+	    plugin.getLaunchManager().removeLaunchListener(this);
+	    plugin.getBreakpointManager().removeBreakpointManagerListener(this);
+	    plugin.removeDebugEventListener(this);
+	    removeAllBreakpoints();
+	    fOutOfSynchTypes.clear();
+	    if (fEngines != null) {
+	        Iterator   engines = fEngines.values().iterator();
+	        while (engines.hasNext()) {
+	            IAstEvaluationEngine engine = (IAstEvaluationEngine)engines.next();
+	            engine.dispose();
+	        }
+	        fEngines.clear();
+	    }
+	    fVirtualMachine= null;
+	    setThreadStartHandler(null);
+	    setEventDispatcher(null);
+	    setStepFilters(new String  [0]);
+	    */
+	}
+
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -52,9 +52,7 @@
 	// any changes to the VM are reported to this monitor
 	// e.g. thread suspended
 	private VMMonitor vmMonitor = null;
-	
-	//private DebugSessionSettings debugSessionSettings = null;
-	
+
 	/**
 	 * Create a new DebugSessionManager.
 	 * 
@@ -142,9 +140,9 @@
 		vm.setDebugTraceMode(debugTraceMode);
 		this.eventThread = new EventThread(vm, excludes, eventSpecManager, vmMonitor);
 		this.eventThread.setEventRequests(watchFields); // install the debug events
-		this.eventThread.start();
+		this.eventThread.start(); // only start when it is connected
 	}
-	
+
 	public void redirectOutput() {
 		Process process = vm.process();
 		if (process != null)
@@ -257,14 +255,23 @@
 	
 	/**
 	 * Replaces the current term with the given term.
+	 * The program should be suspended at a stratego event or the JVM is not started.
+	 * 
+	 * If the JVM is not started and the HybridIntepreter is used the current term is changed to the given term before the strategy is invoked.
 	 * @param term
 	 */
 	public void changeCurrentTerm(String term)
 	{
-		// only possible when suspended
-		ThreadEventHandler handler = eventThread.getMainThreadHandler();
-		handler.setCurrentTerm(term);
-		// do not resume automagically!
+		if (this.eventThread != null)
+		{
+			// only possible when suspended
+			ThreadEventHandler handler = eventThread.getMainThreadHandler();
+			handler.setCurrentTerm(term);
+			// do not resume automagically!
+		} else {
+			// or when not initialized
+			this.eventSpecManager.setInputTerm(term);
+		}
 	}
 
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -41,6 +41,7 @@
 import org.strategoxt.debug.core.eventspec.EventSpecManager;
 import org.strategoxt.debug.core.model.StrategoState;
 import org.strategoxt.debug.core.util.DebugEventRequestInstaller;
+import org.strategoxt.imp.debug.stratego.runtime.strategies.HybridInterpreterDebugRuntime;
 import org.strategoxt.imp.debug.stratego.runtime.strategies.java_r_enter_0_4;
 import org.strategoxt.imp.debug.stratego.runtime.strategies.java_r_exit_0_4;
 import org.strategoxt.imp.debug.stratego.runtime.strategies.java_s_enter_0_4;
@@ -99,7 +100,7 @@
 	// e.g. current linenumber
 	private StrategoState strategoState = null;
 	
-	EventThread(VirtualMachine vm, String[] excludes, EventSpecManager eventSpecManager, VMMonitor vmMonitor) {
+	public EventThread(VirtualMachine vm, String[] excludes, EventSpecManager eventSpecManager, VMMonitor vmMonitor) {
 		super("event-handler");
 		if (vm != null)
 		{
@@ -287,7 +288,7 @@
 
 	// Forward event for thread specific processing
 	private boolean methodExitEvent(MethodExitEvent event) {
-		getThreadEventHandler(event.thread()).methodExitEvent(event);
+		getThreadEventHandler(event.thread()).methodExitEvent(event, eventSpecManager);
 		return false; // resume thread
 	}
 
@@ -320,6 +321,7 @@
 		String name = event.referenceType().name();
 		//System.out.println(name);
 		// if the name matches on of the predefined strategies implemented in java (e.g.: s-enter, s-step) we should add a breakpoint
+		System.out.println("Load " + name);
 		if (java_s_enter_0_4.getFullClassName().equals(name))
 		{
             if (event.referenceType() instanceof ClassType) {
@@ -362,6 +364,15 @@
             	int l = java_r_exit_0_4.breakpointLinenumber;
             	DebugEventRequestInstaller.createBreakpointEntryRequest(mgr, clazz, l, EventHandler.R_EXIT);
 			}
+		} else if (HybridInterpreterDebugRuntime.class.getName().equals(name))
+		{
+			if (event.referenceType() instanceof ClassType) {
+				System.out.println();
+				ClassType clazz = (ClassType) event.referenceType();
+				//int l = 136; // inside the main method. interpreter is a local variable
+				int l = 32; //HybridInterpreterDebugRuntime.BEFORE_INVOKE; // inside the invoke method, "this" is an interpreter
+				DebugEventRequestInstaller.createBreakpointEntryRequest(mgr, clazz, l, EventHandler.INTERPRETER_LOADED);
+			}
 		}
 		
 		// TODO: if watchFields is true
@@ -386,30 +397,31 @@
 		if (trace != null) { // only want threads we care about
 			trace.exceptionEvent(event); // Forward event
 		}
-		/*
+		
 		try {
 			int count = event.thread().frameCount();
 			if (count > 0)
 			{
 				com.sun.jdi.StackFrame sf = event.thread().frame(0);
+				@SuppressWarnings("rawtypes")
 				java.util.List visVars = sf.visibleVariables();
 				if (visVars != null && visVars.size() > 0)
 				{
-					LocalVariable lv = (LocalVariable) visVars.get(0);
+					com.sun.jdi.LocalVariable lv = (com.sun.jdi.LocalVariable) visVars.get(0);
 					com.sun.jdi.Value val = sf.getValue(lv);
 					System.out.println("VAL: " + val);
 				}
 				//java.util.List list = event.thread().frames();
 				//System.out.println("exception");
 			}
-		} catch (IncompatibleThreadStateException e) {
+		} catch (com.sun.jdi.IncompatibleThreadStateException e) {
 			// TODO Auto-generated catch block
 			e.printStackTrace();
-		} catch (AbsentInformationException e) {
+		} catch (com.sun.jdi.AbsentInformationException e) {
 			// TODO Auto-generated catch block
 			//e.printStackTrace();
 		}
-		*/
+		
 		return false; // resume thread
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -12,6 +12,7 @@
 import org.strategoxt.debug.core.control.events.EventHandlerFactory;
 import org.strategoxt.debug.core.control.events.EventInfoStringExtractor;
 import org.strategoxt.debug.core.control.events.IEventInfoExtractor;
+import org.strategoxt.debug.core.control.events.IEventInfoExtractorFactory;
 import org.strategoxt.debug.core.control.events.RuleExitHandler;
 import org.strategoxt.debug.core.control.events.StrategyExitHandler;
 import org.strategoxt.debug.core.eventspec.EventSpecManager;
@@ -106,9 +107,10 @@
 		long start = System.nanoTime(); // profile internal
 		boolean suspendThread = false;
 		String eventType = (String) event.request().getProperty("event-type");
-		this.extractor = new EventInfoStringExtractor(event);
+
+		this.extractor = IEventInfoExtractorFactory.createExtractor(event);
 		long extractorEnd = System.nanoTime();
-		EventHandler h = EventHandlerFactory.createEventHandler(extractor, eventType);
+		EventHandler h = EventHandlerFactory.createEventHandler(eventType, extractor, eventSpecManager);
 		if (h.isEnter())
 		{
 			// current stack frame should be pushed, this is done in processDebugEvent
@@ -119,7 +121,7 @@
 		long processStart = System.nanoTime();
 		h.processDebugEvent(this.strategoState);
 		long processEnd = System.nanoTime();
-		suspendThread = h.shouldSuspend(this.strategoState, eventSpecManager);
+		suspendThread = h.shouldSuspend(this.strategoState);
 		// if the thread will be suspended, update the Dynamic Rules. But first get it from the vm while it is suspended
 		long suspendCheckEnd = System.nanoTime();
 		if (suspendThread)
@@ -293,8 +295,8 @@
 		}
 		
 		EventHandler h = null;
-		IEventInfoExtractor extractor = new EventInfoStringExtractor(event);
-		h = EventHandlerFactory.createEventHandler(extractor, eventType);
+		IEventInfoExtractor extractor = IEventInfoExtractorFactory.createExtractor(event);
+		h = EventHandlerFactory.createEventHandler(eventType, extractor, eventSpecManager);
 		
 		if (h != null)
 		{
@@ -306,7 +308,7 @@
 			try {
 				h.processDebugEvent(this.strategoState);
 				
-				suspendThread = h.shouldSuspend(this.strategoState, eventSpecManager);
+				suspendThread = h.shouldSuspend(this.strategoState);
 				// if the thread will be suspended, update the Dynamic Rules. But first get it from the vm while it is suspended
 
 
@@ -344,7 +346,7 @@
 		return suspendThread;
 	}
 
-	void methodExitEvent(MethodExitEvent event) {
+	void methodExitEvent(MethodExitEvent event, EventSpecManager eventSpecManager) {
 		String eventType = (String) event.request().getProperty("event-type");
 		//System.out.println(eventType);
 		
@@ -359,14 +361,14 @@
 		}
 		
 		EventHandler h = null;
-		IEventInfoExtractor extractor = new EventInfoStringExtractor(event);
+		IEventInfoExtractor extractor = IEventInfoExtractorFactory.createExtractor(event);
 		if (EventHandler.R_ENTER.equals(eventType))
 		{
 			//h = new RuleEnterHandler(event);
 		}
 		else if (EventHandler.R_EXIT.equals(eventType))
 		{
-			h = new RuleExitHandler(extractor);
+			h = new RuleExitHandler(extractor, eventSpecManager);
 			this.exitStrategoStackFrame(h);
 		}
 		else if (EventHandler.S_ENTER.equals(eventType))
@@ -375,7 +377,7 @@
 		}
 		else if (EventHandler.S_EXIT.equals(eventType))
 		{
-			h = new StrategyExitHandler(extractor);
+			h = new StrategyExitHandler(extractor, eventSpecManager);
 			this.exitStrategoStackFrame(h);
 		}
 	}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EmptyExtractor.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EmptyExtractor.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -0,0 +1,72 @@
+package org.strategoxt.debug.core.control.events;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.debug.core.model.LocationInfo;
+
+import com.sun.jdi.IncompatibleThreadStateException;
+import com.sun.jdi.StackFrame;
+import com.sun.jdi.ThreadReference;
+import com.sun.jdi.event.BreakpointEvent;
+
+public class EmptyExtractor  implements IEventInfoExtractor {
+
+	private BreakpointEvent event = null;
+	
+	public EmptyExtractor(BreakpointEvent event) {
+		this.event = event;
+	}
+
+	public String getFilename() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public String getName() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public IStrategoTerm getGiven() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public LocationInfo getLocationInfo() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public String getVarname() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	private StackFrame stackFrame = null;
+	
+	public StackFrame getStackFrame() {
+		if (this.stackFrame == null)
+		{
+			if (this.event != null)
+			{
+				ThreadReference thread = event.thread();
+				
+				StackFrame fr = null;
+				try {
+					fr = thread.frame(0); // get current frame
+				} catch (IncompatibleThreadStateException e) {
+					e.printStackTrace(); // thread should be suspended
+				} catch (IndexOutOfBoundsException e) {
+					e.printStackTrace(); // invalid index
+				}
+				this.stackFrame = fr;
+			}
+		}
+		return this.stackFrame;
+	}
+
+	public void updateContents() {
+		// TODO Auto-generated method stub
+		
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -19,14 +19,26 @@
 	public static String R_EXIT = "r_exit";
 	public static String S_STEP = "s_step";
 	public static String S_VAR = "s_var";
-
 	
+	/**
+	 * Name of the event that occurs just before the strategy is invoked from the HybridInterpreter.
+	 * When suspended at this breakpoint, we can change the current term, before the main strategy is called.
+	 */
+	public static String INTERPRETER_LOADED = "interpreter_loaded";
+
+	private EventSpecManager eventSpecManager = null;
 	
 	private IEventInfoExtractor extractor = null;
 	
-	public EventHandler(IEventInfoExtractor extractor)
+	public EventHandler(IEventInfoExtractor extractor, EventSpecManager eventSpecManager)
 	{
 		this.extractor = extractor;
+		this.eventSpecManager = eventSpecManager;
+	}
+	
+	protected EventSpecManager getEventSpecManager()
+	{
+		return this.eventSpecManager;
 	}
 	
 	public IEventInfoExtractor getIEventInfoExtractor() {
@@ -80,7 +92,7 @@
 	 * </ul>
 	 * @return
 	 */
-	public boolean shouldSuspend(StrategoState currentState, EventSpecManager eventSpecManager){
+	public boolean shouldSuspend(StrategoState currentState){
 		String markName = "SS_" + this.getEventType();
 		EventProfiler.instance.startMark(markName);
 		
@@ -140,7 +152,7 @@
 							|| this.getEventType().equals(EventHandler.S_STEP)))
 			{
 				// what if the current stackframe level is smaller that the stepFrameLevel? We must have missed an r-exit/s-exit
-				// stop at the first s-step, s-exit, s-enter, r-exit, r-enter (s-var is ingnored)
+				// stop at the first s-step, s-exit, s-enter, r-exit, r-enter (s-var is ignored)
 				log("Missed step over curLevel="+currentState.getCurrentFrameLevel() + " stepOverInLevel="+eventSpecManager.getStepFrameLevel());
 				shouldSuspend = true;
 				eventSpecManager.resetStep(currentState); // reset step

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandlerFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandlerFactory.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandlerFactory.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -1,33 +1,39 @@
 package org.strategoxt.debug.core.control.events;
 
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
+
 public class EventHandlerFactory {
 	
-	public static EventHandler createEventHandler(IEventInfoExtractor extractor, String eventType)
+	public static EventHandler createEventHandler(String eventType, IEventInfoExtractor extractor, EventSpecManager eventSpecManager)
 	{
 		EventHandler h = null;
 		if (EventHandler.R_ENTER.equals(eventType))
 		{
-			h = new RuleEnterHandler(extractor);
+			h = new RuleEnterHandler(extractor, eventSpecManager);
 		}
 		else if (EventHandler.R_EXIT.equals(eventType))
 		{
-			h = new RuleExitHandler(extractor);
+			h = new RuleExitHandler(extractor, eventSpecManager);
 		}
 		else if (EventHandler.S_ENTER.equals(eventType))
 		{
-			h = new StrategyEnterHandler(extractor);
+			h = new StrategyEnterHandler(extractor, eventSpecManager);
 		}
 		else if (EventHandler.S_EXIT.equals(eventType))
 		{
-			h = new StrategyExitHandler(extractor);
+			h = new StrategyExitHandler(extractor, eventSpecManager);
 		}
 		else if (EventHandler.S_STEP.equals(eventType))
 		{
-			h = new StrategyStepHandler(extractor);
+			h = new StrategyStepHandler(extractor, eventSpecManager);
 		}
 		else if (EventHandler.S_VAR.equals(eventType))
 		{
-			h = new StrategyVarHandler(extractor);
+			h = new StrategyVarHandler(extractor, eventSpecManager);
+		}
+		else if (EventHandler.INTERPRETER_LOADED.equals(eventType))
+		{
+			h = new InterpreterLoadedHandler(extractor, eventSpecManager);
 		}
 		return h;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventInfoStringExtractor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventInfoStringExtractor.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventInfoStringExtractor.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -57,19 +57,19 @@
 	protected MethodExitEvent exit_event = null;
 	protected BreakpointEvent breakpoint_event = null;
 	
-	public EventInfoStringExtractor(MethodEntryEvent event)
+	protected EventInfoStringExtractor(MethodEntryEvent event)
 	{
 		this.entry_event = event;
 		this.init();
 	}
 	
-	public EventInfoStringExtractor(MethodExitEvent event)
+	protected EventInfoStringExtractor(MethodExitEvent event)
 	{
 		this.exit_event = event;
 		this.init();
 	}
 	
-	public EventInfoStringExtractor(BreakpointEvent event)
+	protected EventInfoStringExtractor(BreakpointEvent event)
 	{
 		this.breakpoint_event = event;
 		this.init();
@@ -220,7 +220,7 @@
 	 */
 	private Value getEventInfoStringValue()
 	{
-		if (this.eventInfoStringValue == null)
+		if (this.eventInfoStringValue == null && this.thisObject != null)
 		{
 			//Field eventInfoField = this.thisObject.referenceType().fieldByName(DebugCallStrategy.EVENTINFO);
 			
@@ -237,7 +237,7 @@
 	
 	private Field getEventInfoField()
 	{
-		if (eventInfoField == null)
+		if (eventInfoField == null && this.thisObject != null)
 		{
 			eventInfoField = this.thisObject.referenceType().fieldByName(DebugCallStrategy.EVENTINFO);
 		}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/IEventInfoExtractorFactory.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/IEventInfoExtractorFactory.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -0,0 +1,28 @@
+package org.strategoxt.debug.core.control.events;
+
+import com.sun.jdi.event.BreakpointEvent;
+import com.sun.jdi.event.MethodEntryEvent;
+import com.sun.jdi.event.MethodExitEvent;
+
+public class IEventInfoExtractorFactory {
+
+	public static IEventInfoExtractor createExtractor(BreakpointEvent event) {
+		String name = event.location().method().declaringType().name();
+		if (org.strategoxt.imp.debug.stratego.runtime.strategies.HybridInterpreterDebugRuntime.class.getName().equals(name))
+		{
+			// the breakpoint in the HybridInterpreter does not have any StrategoState info, it is hit before the program is executed
+			return new EmptyExtractor(event);
+		} else {
+			return new EventInfoStringExtractor(event);
+		}
+	}
+	
+	public static IEventInfoExtractor createExtractor(MethodEntryEvent event) {
+		return new EventInfoStringExtractor(event);
+	}
+	
+	public static IEventInfoExtractor createExtractor(MethodExitEvent event) {
+		return new EventInfoStringExtractor(event);
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/InterpreterLoadedHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/InterpreterLoadedHandler.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -0,0 +1,96 @@
+package org.strategoxt.debug.core.control.events;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.eclipse.jdi.TimeoutException;
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
+import org.strategoxt.debug.core.model.StrategoState;
+import org.strategoxt.imp.debug.stratego.runtime.strategies.HybridInterpreterDebugRuntime;
+
+import com.sun.jdi.ClassNotLoadedException;
+import com.sun.jdi.IncompatibleThreadStateException;
+import com.sun.jdi.InvalidTypeException;
+import com.sun.jdi.InvocationException;
+import com.sun.jdi.Method;
+import com.sun.jdi.ObjectReference;
+import com.sun.jdi.ThreadReference;
+import com.sun.jdi.Value;
+
+public class InterpreterLoadedHandler extends EventHandler {
+
+	public InterpreterLoadedHandler(IEventInfoExtractor extractor, EventSpecManager eventSpecManager) {
+		super(extractor, eventSpecManager);
+	}
+
+	@Override
+	protected BreakPoint createBreakPoint(StrategoState currentState) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public String getEventType() {
+		return EventHandler.INTERPRETER_LOADED;
+	}
+
+	@Override
+	public boolean isEnter() {
+		return false;
+	}
+
+	@Override
+	public boolean isExit() {
+		return false;
+	}
+	
+	@Override
+	public void processDebugEvent(StrategoState strategoState) {
+		//super.processDebugEvent(strategoState);
+		// TODO: we may want to change the current term before calling the strategy
+		if (this.getEventSpecManager().getInputTerm() != null)
+		{
+			// change the input term
+			ObjectReference ref = this.getStackFrame().thisObject(); // get the stackframe
+			// check if it is an HybridInterpreter
+			if (ref != null)
+			{
+				// HybridInterpreter.public boolean invoke(String name)
+				@SuppressWarnings("unchecked")
+				List<Method> methods = ref.referenceType().methodsByName(HybridInterpreterDebugRuntime.SET_CURRENT_TERM);
+				Method method = null;
+				// should be only one method!
+				method = methods.get(0);
+				// invoke takes a String as argument
+				List<Value> arguments = new ArrayList<Value>();
+				Value arg = this.getStackFrame().thread().virtualMachine().mirrorOf(this.getEventSpecManager().getInputTerm());
+				arguments.add(arg);
+				
+				Value output = null; // TODO: output will be true when the set current term was successful
+				try {
+					output = this.getStackFrame().thisObject().invokeMethod(this.getStackFrame().thread(), method, arguments, ThreadReference.INVOKE_SINGLE_THREADED);
+				} catch (InvalidTypeException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				} catch (ClassNotLoadedException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				} catch (IncompatibleThreadStateException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				} catch (InvocationException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				} catch (TimeoutException e) {
+					// TODO: what happened in the debuggee?
+					// something took too long....
+					e.printStackTrace();
+				}
+				System.out.println("SET_CURRENT_TERM succes? " + output);
+			}
+			// call setCurrent() method
+		}
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -2,6 +2,7 @@
 
 import org.strategoxt.debug.core.control.EventProfiler;
 import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
 import org.strategoxt.debug.core.eventspec.RuleEnterBreakPoint;
 import org.strategoxt.debug.core.model.LocationInfo;
 import org.strategoxt.debug.core.model.StrategoStackFrame;
@@ -9,8 +10,8 @@
 
 public class RuleEnterHandler extends EventHandler {
 
-	public RuleEnterHandler(IEventInfoExtractor extractor) {
-		super(extractor);
+	public RuleEnterHandler(IEventInfoExtractor extractor, EventSpecManager eventSpecManager) {
+		super(extractor, eventSpecManager);
 	}
 	
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -2,14 +2,15 @@
 
 import org.strategoxt.debug.core.control.EventProfiler;
 import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
 import org.strategoxt.debug.core.eventspec.RuleExitBreakPoint;
 import org.strategoxt.debug.core.model.LocationInfo;
 import org.strategoxt.debug.core.model.StrategoState;
 
 public class RuleExitHandler extends EventHandler {
 
-	public RuleExitHandler(IEventInfoExtractor extractor) {
-		super(extractor);
+	public RuleExitHandler(IEventInfoExtractor extractor, EventSpecManager eventSpecManager) {
+		super(extractor, eventSpecManager);
 	}
 
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -2,6 +2,7 @@
 
 import org.strategoxt.debug.core.control.EventProfiler;
 import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
 import org.strategoxt.debug.core.eventspec.StrategyEnterBreakPoint;
 import org.strategoxt.debug.core.model.LocationInfo;
 import org.strategoxt.debug.core.model.StrategoStackFrame;
@@ -9,9 +10,9 @@
 
 public class StrategyEnterHandler extends EventHandler {
 
-	public StrategyEnterHandler(IEventInfoExtractor extractor)
+	public StrategyEnterHandler(IEventInfoExtractor extractor, EventSpecManager eventSpecManager)
 	{
-		super(extractor);
+		super(extractor, eventSpecManager);
 	}
 	
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -2,14 +2,15 @@
 
 import org.strategoxt.debug.core.control.EventProfiler;
 import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
 import org.strategoxt.debug.core.eventspec.StrategyExitBreakPoint;
 import org.strategoxt.debug.core.model.LocationInfo;
 import org.strategoxt.debug.core.model.StrategoState;
 
 public class StrategyExitHandler extends EventHandler {
 
-	public StrategyExitHandler(IEventInfoExtractor extractor) {
-		super(extractor);
+	public StrategyExitHandler(IEventInfoExtractor extractor, EventSpecManager eventSpecManager) {
+		super(extractor, eventSpecManager);
 	}
 
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -2,14 +2,15 @@
 
 import org.strategoxt.debug.core.control.EventProfiler;
 import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
 import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;
 import org.strategoxt.debug.core.model.LocationInfo;
 import org.strategoxt.debug.core.model.StrategoState;
 
 public class StrategyStepHandler extends EventHandler {
 
-	public StrategyStepHandler(IEventInfoExtractor extractor) {
-		super(extractor);
+	public StrategyStepHandler(IEventInfoExtractor extractor, EventSpecManager eventSpecManager) {
+		super(extractor, eventSpecManager);
 	}
 
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyVarHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyVarHandler.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyVarHandler.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -2,12 +2,13 @@
 
 import org.strategoxt.debug.core.control.EventProfiler;
 import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
 import org.strategoxt.debug.core.model.StrategoState;
 
 public class StrategyVarHandler extends EventHandler {
 
-	public StrategyVarHandler(IEventInfoExtractor extractor) {
-		super(extractor);
+	public StrategyVarHandler(IEventInfoExtractor extractor, EventSpecManager eventSpecManager) {
+		super(extractor, eventSpecManager);
 	}
 	
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/ValueExtractor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/ValueExtractor.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/ValueExtractor.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -82,19 +82,19 @@
 	protected StrategoTermBuilder builder = new StrategoTermBuilder();
 	
 	
-	public ValueExtractor(MethodEntryEvent event)
+	protected ValueExtractor(MethodEntryEvent event)
 	{
 		this.entry_event = event;
 		this.initLocalVariables();
 	}
 	
-	public ValueExtractor(MethodExitEvent event)
+	protected ValueExtractor(MethodExitEvent event)
 	{
 		this.exit_event = event;
 		this.initLocalVariables();
 	}
 	
-	public ValueExtractor(BreakpointEvent event)
+	protected ValueExtractor(BreakpointEvent event)
 	{
 		this.breakpoint_event = event;
 		this.initLocalVariables();

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -12,6 +12,12 @@
 import org.strategoxt.debug.core.util.table.OffsetTable;
 import org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util.LineLengthTable;
 
+/**
+ * Tracks all breakpoints, stepping, linelength table. Actions that should occur.
+ * 
+ * @author rlindeman
+ *
+ */
 public class EventSpecManager {
 
 	/**
@@ -236,7 +242,7 @@
 	private OffsetTable offsetTable = null;
 	
 	public OffsetTable getOffsetTable(){
-		if (this.offsetTable == null)
+		if (this.offsetTable == null && getLineLengthTable() != null)
 		{
 			this.offsetTable = new OffsetTable(getLineLengthTable());
 		}
@@ -247,4 +253,21 @@
 		System.out.println(message);
 	}
 
+	/**
+	 * If set, this term should be the current term before calling the invoke of the HybridInterpreter.
+	 */
+	private String inputTerm = null;
+	
+	/**
+	 * This will be the current term that will be used as input for the strategy
+	 * @param term
+	 */
+	public void setInputTerm(String term) {
+		this.inputTerm = term;
+	}
+	
+	public String getInputTerm() {
+		return inputTerm;
+	}
+
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -490,6 +490,10 @@
 		//String classPath = debugSessionSettings.getDebugCompileClasspath();
 
 		List<IPath> classpaths = new ArrayList<IPath>();
+		classpaths.addAll(debugSessionSettings.getRuntimeJars());
+		classpaths.add(debugSessionSettings.getStrategoxtJar());
+		classpaths.add(debugSessionSettings.getJavaDirectory());
+		
 		if (debugSessionSettings.getJavaCompileExtraClasspath() != null)
 		{
 			for(IPath c : debugSessionSettings.getJavaCompileExtraClasspath())

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -43,6 +43,8 @@
 	
 	public static final boolean useExceptionRequests = true;
 	
+	public static final boolean changeCurrentTermInHybridInterpreter = true;
+	
 	public static void installDebugEventRequests(VirtualMachine vm, boolean watchFields, String[] excludes)
 	{
 		EventRequestManager mgr = vm.eventRequestManager();
@@ -61,7 +63,9 @@
 		if (useExceptionRequests)
 		{
 			//createExceptionRequest(ReferenceType refType, boolean notifyCaught, boolean notifyUncaught)
-			ExceptionRequest excReq = mgr.createExceptionRequest(null, true, true); // suspend so we can step 
+			boolean notifyCaught = false;
+			boolean notifyUncaught = true;
+			ExceptionRequest excReq = mgr.createExceptionRequest(null, notifyCaught, notifyUncaught); // suspend so we can step 
 			excReq.setSuspendPolicy(EventRequest.SUSPEND_ALL);
 			excReq.enable();
 		}
@@ -111,7 +115,7 @@
 			cpr.setSuspendPolicy(EventRequest.SUSPEND_ALL);
 			cpr.enable();
 		}
-		
+
 		/*
 		// exception request
 		ReferenceType refType = null; // report all exceptions

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -46,6 +46,10 @@
 	 */
 	public String buildString(Value value)
 	{
+		if (value == null)
+		{
+			return "";
+		}
 		// value should be a string
 		String s = value.toString();
 		// strip surrounding quotes

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/OffsetTable.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/OffsetTable.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/OffsetTable.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -19,8 +19,15 @@
 	 * @return
 	 */
 	public int getLineOffset(String filename, int i) {
-		// TODO Auto-generated method stub
+		if (t == null)
+		{
+			return -1;
+		}
 		FileLineLengthTable ft = t.getFileLineLengthTable(filename);
+		if (ft == null)
+		{
+			return -1;
+		}
 		int lineOffset = ft.getLineOffset(i);
 		return lineOffset;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Thu Apr  7 14:51:36 2011	(r22491)
@@ -3,6 +3,7 @@
 Bundle-Name: org.strategoxt.imp.debug.stratego.runtime
 Bundle-SymbolicName: org.strategoxt.imp.debug.stratego.runtime;singleton:=true
 Bundle-Version: 0.1.0.qualifier
+Bundle-ClassPath: .
 Bundle-Activator: org.strategoxt.imp.debug.stratego.runtime.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
 Require-Bundle: org.eclipse.core.runtime,

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.custom.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.custom.xml	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.custom.xml	Thu Apr  7 14:51:36 2011	(r22491)
@@ -4,7 +4,7 @@
 
 	<target name="spoofaximp.default" depends="spoofaximp.default.ctree" />
     <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-    <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+    <target name="spoofaximp.default.jar" depends="utils-files,check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
 
 	<!-- Initialization -->
 	<!--<available file="${build}/org/strategoxt/imp/debug/stratego/runtime/strategies/Main.class" property="java.jar.enabled"/>-->

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/HybridInterpreterDebugRuntime.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/HybridInterpreterDebugRuntime.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -0,0 +1,100 @@
+package org.strategoxt.imp.debug.stratego.runtime.strategies;
+
+import org.spoofax.interpreter.core.InterpreterErrorExit;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.InterpreterExit;
+import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.ParseError;
+import org.spoofax.terms.StringTermReader;
+import org.strategoxt.HybridInterpreter;
+
+/**
+ * Extends the HybridInterpreter in the org.strategoxt.strj plugin.
+ * 
+ * This class contains several overrides so we can place breakpoints at the appropriate methods without breaking the debugger
+ * when the structure of the HybridInterpreter changes.
+ * 
+ * If the HybridInterpreterDebugRuntime is used in another debuggee JVM we can use the static properties to determine the location of the breakpoints.
+ * 
+ * @author rlindeman
+ *
+ */
+public class HybridInterpreterDebugRuntime extends HybridInterpreter {
+	
+	public static int BEFORE_INVOKE = 32;
+	public static int AFTER_INVOKE = 33;
+	
+	@Override
+	public boolean invoke(String name) throws InterpreterErrorExit,
+			InterpreterExit, UndefinedStrategyException, InterpreterException {
+		boolean succeeded = super.invoke(name);
+		return succeeded;
+	}
+	
+	public static String SET_CURRENT_TERM = "setCurrentTerm";
+
+	/**
+	 * Sets the current Term to the given String-representation of an
+	 * IStrategoTerm.
+	 * 
+	 * The term will be parsed as an IStrategoTerm and then set as current term.
+	 * 
+	 * The method returns true if the action was successful, else it returns
+	 * false.
+	 * 
+	 * @param term
+	 * @return Returns true if setting the current term was successful, else
+	 *         returns false.
+	 */
+	public boolean setCurrentTerm(String term) {
+		System.out.println("hi setCurrent begin");
+		StringTermReader termReader = new StringTermReader(this.getFactory());
+		try {
+			IStrategoTerm strategoTerm = termReader.parseFromString(term);
+			if (strategoTerm != null) {
+				super.setCurrent(strategoTerm);
+				return true;
+			}
+		} catch (ParseError e) {
+
+		}
+		return false;
+	}
+
+	public static void main(String... args) {
+		System.out.println("Main");
+		if (args == null || args.length < 1) {
+			System.out.println(USAGE);
+			System.exit(127);
+		}
+		HybridInterpreter interpreter = new HybridInterpreterDebugRuntime();
+		int i = mainLoadAll(interpreter, args);
+		boolean nothingLoaded = i == 0;
+		
+		String main = args[i++];
+
+		if (nothingLoaded)
+			warnUnqualifiedInvoke(interpreter, main);
+		
+		IStrategoString[] mainArgs = new IStrategoString[args.length - i + 1];
+		mainArgs[0] = interpreter.getFactory().makeString(main);
+		
+		for (int j = 1; j < mainArgs.length; i++, j++) {
+			mainArgs[j] = interpreter.getFactory().makeString(args[i]);
+		}
+		interpreter.setCurrent(interpreter.getFactory().makeList(mainArgs));
+		try {
+			interpreter.invoke(main);
+		} catch (InterpreterExit e) {
+			System.exit(e.getValue());
+		} catch (UndefinedStrategyException e) {
+			System.err.println(e.getMessage());
+			System.exit(125);
+		} catch (InterpreterException e) {
+			e.printStackTrace();
+			System.exit(124);
+		}
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofax.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofax.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofax.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -1,7 +1,5 @@
 package org.strategoxt.debug.core.control;
 
-import static org.junit.Assert.*;
-
 import org.eclipse.core.runtime.Path;
 import org.junit.Test;
 import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestHybridInterpreterLauncher.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestHybridInterpreterLauncher.java	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestHybridInterpreterLauncher.java	Thu Apr  7 14:51:36 2011	(r22491)
@@ -3,7 +3,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.StrategoFileManager;
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IWorkspace;
@@ -97,7 +96,8 @@
 	@Test
 	public void testLaunch() throws Exception {
 		// /stratego-resources/src-str/test/localvar/localvar.str
-		IFile strFile = getFile("src-str/test/localvar/localvar.str");
+		//IFile strFile = getFile("src-str/test/localvar/localvar.str");
+		
 		/*
 		// create breakpoint
 		StrategoLineBreakpoint lineBreakpoint = new StrategoLineBreakpoint(strFile, 48); // 1-based linenumber
@@ -123,7 +123,7 @@
 		// IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS
 		//String strategoXTJar = StrategoFileManager.getStrategoXTJar();
 		List<IPath> paths = ClasspathHandler.getClasspathEntries();
-		List list = new ArrayList();
+		List<String> list = new ArrayList<String>();
 		for(IPath p : paths)
 		{
 			list.add(p.toOSString());

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Thu Apr  7 14:21:13 2011	(r22490)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Thu Apr  7 14:51:36 2011	(r22491)
@@ -3,6 +3,7 @@
 Bundle-Name: org.strategoxt.imp.debug.stratego.transformer
 Bundle-SymbolicName: org.strategoxt.imp.debug.stratego.transformer;singleton:=true
 Bundle-Version: 0.1.0.qualifier
+Bundle-ClassPath: .
 Bundle-Activator: org.strategoxt.imp.debug.stratego.transformer.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
 Require-Bundle: org.eclipse.core.runtime,

From seba at informatik.uni-marburg.de  Mon Apr 11 12:43:38 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 11 Apr 2011 10:43:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22492 -
	sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor
Message-ID: <20110411104338.0615F7F8007@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Mon Apr 11 10:43:37 2011
New Revision: 22492
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22492&sc=1

Log:
regenerated

Modified:
   sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParseControllerGenerated.java

Modified: sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParseControllerGenerated.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParseControllerGenerated.java	Thu Apr  7 14:51:36 2011	(r22491)
+++ sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParseControllerGenerated.java	Mon Apr 11 10:43:37 2011	(r22492)
@@ -32,12 +32,13 @@
       createDescriptor();
     return descriptor;
   }
-  
-  protected static synchronized void setDescriptor(Descriptor descriptor) {
+
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
     SugarJParseControllerGenerated.descriptor = descriptor;
   }
 
-  private static void createDescriptor()
+  protected static void createDescriptor()
   { 
     try
     { 

From seba at informatik.uni-marburg.de  Mon Apr 11 12:44:14 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 11 Apr 2011 10:44:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22493 - in
	sugarj/branches/SugarJ-editor-services/compiler: META-INF
	org/sugarj/driver
Message-ID: <20110411104414.3980DCC086@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Mon Apr 11 10:44:13 2011
New Revision: 22493
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22493&sc=1

Log:
removed version dependencies and a typo

Modified:
   sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java

Modified: sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF	Mon Apr 11 10:43:37 2011	(r22492)
+++ sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF	Mon Apr 11 10:44:13 2011	(r22493)
@@ -6,13 +6,13 @@
 Bundle-Activator: org.sugarj.driver.Activator
 Require-Bundle: org.eclipse.ui,
  org.eclipse.core.runtime,
- org.spoofax.jsglr;bundle-version="0.3.0",
- org.sugarj.stdlib;bundle-version="1.0.0",
- org.strategoxt.imp.runtime;bundle-version="0.1.1",
- org.spoofax.terms;bundle-version="1.0.0",
- org.eclipse.jdt.core;bundle-version="3.5.2",
- org.strategoxt.strj;bundle-version="0.17.92",
- org.strategoxt.imp.nativebundle;bundle-version="0.1.1"
+ org.spoofax.jsglr,
+ org.sugarj.stdlib,
+ org.spoofax.terms,
+ org.eclipse.jdt.core,
+ org.strategoxt.strj,
+ org.strategoxt.imp.runtime,
+ org.strategoxt.imp.nativebundle
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: JavaSE-1.6
 Export-Package: org.sugarj, 

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Mon Apr 11 10:43:37 2011	(r22492)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Mon Apr 11 10:44:13 2011	(r22493)
@@ -1189,7 +1189,7 @@
 
     options.addOption(
         null,
-        "no-checing",
+        "no-checking",
         false,
         "Do not check resulting SDF and Stratego files.");
     

From seba at informatik.uni-marburg.de  Mon Apr 11 12:44:28 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 11 Apr 2011 10:44:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22494 -
	sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/transformations
Message-ID: <20110411104428.049DCCC086@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Mon Apr 11 10:44:27 2011
New Revision: 22494
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22494&sc=1

Log:
bugfix

Modified:
   sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/transformations/GenerateSignatures.str

Modified: sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/transformations/GenerateSignatures.str
==============================================================================
--- sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/transformations/GenerateSignatures.str	Mon Apr 11 10:44:13 2011	(r22493)
+++ sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/transformations/GenerateSignatures.str	Mon Apr 11 10:44:27 2011	(r22494)
@@ -2,6 +2,9 @@
 
 imports org/sugarj/languages/Sdf2
         org/sugarj/languages/Stratego
+        org/sugarj/languages/SugarJ
+        org/sugarj/init/InitTrans
+
 
 
 strategies
@@ -127,13 +130,13 @@
     alt(_, _) -> "alt"
 
   get-symbol-name :
-    cf(sym) -> name
+    cf(sym) -> <concat-strings> ["cf-", name]
     where <get-symbol-name> sym => name
 
   get-symbol-name :
-    lex(sym) -> name
+    lex(sym) -> <concat-strings> ["lex-", name]
     where <get-symbol-name> sym => name
 
   get-symbol-name :
-    varsym(sym) -> name
+    varsym(sym) -> <concat-strings> ["var-", name]
     where <get-symbol-name> sym => name
\ No newline at end of file

From seba at informatik.uni-marburg.de  Mon Apr 11 12:46:20 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 11 Apr 2011 10:46:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22495 - in
	sugarj/branches/SugarJ-editor-services/case-studies: foo pair
	pair/concrete xml
Message-ID: <20110411104620.DBD5E2B8005@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Mon Apr 11 10:46:20 2011
New Revision: 22495
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22495&sc=1

Log:
few fixes and extensions of case studies

Modified:
   sugarj/branches/SugarJ-editor-services/case-studies/foo/FooSugar.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/pair/Pair.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/pair/Sugar.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Desugar.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Syntax.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Test.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj

Modified: sugarj/branches/SugarJ-editor-services/case-studies/foo/FooSugar.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/foo/FooSugar.sugj	Mon Apr 11 10:44:27 2011	(r22494)
+++ sugarj/branches/SugarJ-editor-services/case-studies/foo/FooSugar.sugj	Mon Apr 11 10:46:20 2011	(r22495)
@@ -28,7 +28,10 @@
     
   rules
     constraint-error : 
-      Foo -> (<id>, "don't use nil, stupid")
+      Foo -> [(<id>, "don't use nil, stupid")]
+    
+    constraint-error :
+      Null -> [(<id>, "don't use null"), (<id>, "really don't use null")]
   
   
   // foo declarations

Modified: sugarj/branches/SugarJ-editor-services/case-studies/pair/Pair.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/pair/Pair.sugj	Mon Apr 11 10:44:27 2011	(r22494)
+++ sugarj/branches/SugarJ-editor-services/case-studies/pair/Pair.sugj	Mon Apr 11 10:46:20 2011	(r22495)
@@ -9,6 +9,10 @@
     this.b = b;
   }
   
+  public static <A, B> Pair<A, B> create(A a, B b) {
+    return new Pair(a, b);
+  }
+  
   public String toString() {
     return "(" + a.toString() + ", " + b.toString() + ")";
   }

Modified: sugarj/branches/SugarJ-editor-services/case-studies/pair/Sugar.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/pair/Sugar.sugj	Mon Apr 11 10:44:27 2011	(r22494)
+++ sugarj/branches/SugarJ-editor-services/case-studies/pair/Sugar.sugj	Mon Apr 11 10:46:20 2011	(r22495)
@@ -1,43 +1,21 @@
 package pair;
 
 import org.sugarj.languages.Java;
+import concretesyntax.ConcreteJava;
 
 public sugar Sugar {
   context-free syntax
-    "(" JavaExpr "," JavaExpr ")" -> 
-      JavaExpr {cons("Pair")}
-
-    "(" JavaType "," JavaType ")" -> 
-      JavaType {cons("PairType")}
-  
-  signature constructors
-    Pair     : JavaExpr * JavaExpr -> JavaExpr
-    PairType : JavaType * JavaType -> JavaType
+    "(" JavaType "," JavaType ")" -> JavaType {cons("PType")}
+    "(" JavaExpr "," JavaExpr ")" -> JavaExpr {cons("PExpr")}
   
   desugarings
-    pair2expr
-    pair2type
+    desugar-pair-type
+    desugar-pair-expr
 
   rules
-    pair2expr : 
-      Pair(e1, e2) 
-      ->
-      NewInstance(
-        None(),
-        ClassOrInterfaceType(
-          TypeName(
-            PackageOrTypeName(Id("pair")),
-            Id("Pair")),
-          None()),
-        [e1, e2], 
-        None())
+    desugar-pair-type :
+      PType(t1, t2) -> |[ pair.Pair<~t1, ~t2> ]| 
 
-    pair2type :
-      PairType(t1, t2)
-      ->
-      ClassOrInterfaceType(
-      	TypeName(
-          PackageOrTypeName(Id("pair")),
-          Id("Pair")),
-        Some(TypeArgs([t1, t2]))) 
+    desugar-pair-expr : 
+      PExpr(e1, e2) -> |[ new pair.Pair.create(~e1, ~e2) ]|
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Desugar.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Desugar.sugj	Mon Apr 11 10:44:27 2011	(r22494)
+++ sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Desugar.sugj	Mon Apr 11 10:46:20 2011	(r22495)
@@ -11,12 +11,12 @@
 
   rules
     pair2expr : 
-      java |[ (java_e1, java_e2) ]| 
+      |[ (~expr:e1, ~expr:e2) ]| 
       ->
-      java |[ new pair.Pair(java_e1, java_e2) ]|
+      |[ pair.Pair.create(~e1, ~e2) ]|
 
     pair2type :
-      java |[ (java_t1, java_t2) ]|
+      |[ (~type:t1, ~type:t2) ]|
       ->
-      java |[ pair.Pair<java_t1, java_t2> ]| 
+      |[ pair.Pair<~t1, ~t2> ]| 
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Syntax.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Syntax.sugj	Mon Apr 11 10:44:27 2011	(r22494)
+++ sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Syntax.sugj	Mon Apr 11 10:46:20 2011	(r22495)
@@ -5,12 +5,8 @@
 public sugar Syntax {
   context-free syntax
     "(" JavaExpr "," JavaExpr ")" -> 
-      JavaExpr {cons("Pair")}
+      JavaExpr {cons("PExpr")}
 
     "(" JavaType "," JavaType ")" -> 
-      JavaType {cons("PairType")}
-  
-  signature constructors
-    Pair     : JavaExpr * JavaExpr -> JavaExpr
-    PairType : JavaType * JavaType -> JavaType 
+      JavaType {cons("PType")}
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Test.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Test.sugj	Mon Apr 11 10:44:27 2011	(r22494)
+++ sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Test.sugj	Mon Apr 11 10:46:20 2011	(r22495)
@@ -1,9 +1,12 @@
 package pair.concrete;
 
 import pair.concrete.Syntax;
-
 import pair.concrete.Desugar;
 
 public class Test {
-  private (String, Integer) p = ("12", 34);
+  private static (String, Integer) p = ("12", 34);
+  
+  public static void main(String[] args) {
+    System.out.println(p);
+  } 
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj	Mon Apr 11 10:44:27 2011	(r22494)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj	Mon Apr 11 10:46:20 2011	(r22495)
@@ -10,7 +10,7 @@
 import xml.AsSax;
 import xml.XmlJavaSyntax;
 import xml.XmlEditor;
- 
+
 /*
  * code for printing based on http://www.informit.com/articles/article.aspx?p=26351&seqNum=5
  */

From seba at informatik.uni-marburg.de  Mon Apr 11 12:59:20 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 11 Apr 2011 10:59:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22496 - in sugarj:
	tags/20110411-trunk-before-editor-services trunk
Message-ID: <20110411105920.9E03A108C002@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Mon Apr 11 10:59:20 2011
New Revision: 22496
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22496&sc=1

Log:
back-upped old trunk

Added:
   sugarj/tags/20110411-trunk-before-editor-services/   (props changed)
      - copied from r22491, sugarj/trunk/
Deleted:
   sugarj/trunk/

From seba at informatik.uni-marburg.de  Mon Apr 11 13:03:05 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 11 Apr 2011 11:03:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22497 - in
	sugarj/branches/SugarJ-editor-services: . case-studies
	compiler editor editor/.settings editor/META-INF
Message-ID: <20110411110305.1476ACC06B@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Mon Apr 11 11:03:04 2011
New Revision: 22497
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22497&sc=1

Log:
last touch before merging

Deleted:
   sugarj/branches/SugarJ-editor-services/sugarjc.sh
Modified:
   sugarj/branches/SugarJ-editor-services/case-studies/.classpath
   sugarj/branches/SugarJ-editor-services/compiler/.classpath
   sugarj/branches/SugarJ-editor-services/editor/.settings/org.eclipse.jdt.core.prefs
   sugarj/branches/SugarJ-editor-services/editor/META-INF/MANIFEST.MF
   sugarj/branches/SugarJ-editor-services/editor/build.generated.xml

Modified: sugarj/branches/SugarJ-editor-services/case-studies/.classpath
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/.classpath	Mon Apr 11 10:59:20 2011	(r22496)
+++ sugarj/branches/SugarJ-editor-services/case-studies/.classpath	Mon Apr 11 11:03:04 2011	(r22497)
@@ -2,5 +2,5 @@
 <classpath>
 	<classpathentry kind="src" path=""/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
-	<classpathentry kind="output" path=""/>
+	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: sugarj/branches/SugarJ-editor-services/compiler/.classpath
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/.classpath	Mon Apr 11 10:59:20 2011	(r22496)
+++ sugarj/branches/SugarJ-editor-services/compiler/.classpath	Mon Apr 11 11:03:04 2011	(r22497)
@@ -3,7 +3,7 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="src" path=""/>
-	<classpathentry kind="lib" path="commons-cli-1.2.jar"/>
-	<classpathentry kind="lib" path="make_permissive.jar"/>
+	<classpathentry exported="true" kind="lib" path="make_permissive.jar"/>
+	<classpathentry exported="true" kind="lib" path="commons-cli-1.2.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: sugarj/branches/SugarJ-editor-services/editor/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- sugarj/branches/SugarJ-editor-services/editor/.settings/org.eclipse.jdt.core.prefs	Mon Apr 11 10:59:20 2011	(r22496)
+++ sugarj/branches/SugarJ-editor-services/editor/.settings/org.eclipse.jdt.core.prefs	Mon Apr 11 11:03:04 2011	(r22497)
@@ -1,4 +1,4 @@
-#Wed Feb 23 11:35:26 CET 2011
+#Tue Apr 05 16:27:44 CEST 2011
 eclipse.preferences.version=1
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
@@ -6,261 +6,3 @@
 org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
 org.eclipse.jdt.core.compiler.source=1.6
-org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_assignment=0
-org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
-org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=80
-org.eclipse.jdt.core.formatter.alignment_for_enum_constants=0
-org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
-org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=16
-org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
-org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
-org.eclipse.jdt.core.formatter.blank_lines_after_package=1
-org.eclipse.jdt.core.formatter.blank_lines_before_field=0
-org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=0
-org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
-org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
-org.eclipse.jdt.core.formatter.blank_lines_before_method=1
-org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=1
-org.eclipse.jdt.core.formatter.blank_lines_before_package=0
-org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
-org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
-org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
-org.eclipse.jdt.core.formatter.comment.format_block_comments=true
-org.eclipse.jdt.core.formatter.comment.format_header=false
-org.eclipse.jdt.core.formatter.comment.format_html=true
-org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
-org.eclipse.jdt.core.formatter.comment.format_line_comments=true
-org.eclipse.jdt.core.formatter.comment.format_source_code=true
-org.eclipse.jdt.core.formatter.comment.indent_parameter_description=true
-org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
-org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
-org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=insert
-org.eclipse.jdt.core.formatter.comment.line_length=80
-org.eclipse.jdt.core.formatter.compact_else_if=true
-org.eclipse.jdt.core.formatter.continuation_indentation=2
-org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
-org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
-org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
-org.eclipse.jdt.core.formatter.indent_empty_lines=false
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=false
-org.eclipse.jdt.core.formatter.indentation.size=2
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_member=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
-org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.join_lines_in_comments=true
-org.eclipse.jdt.core.formatter.join_wrapped_lines=true
-org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
-org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
-org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
-org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
-org.eclipse.jdt.core.formatter.lineSplit=80
-org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
-org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=false
-org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
-org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=1
-org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
-org.eclipse.jdt.core.formatter.tabulation.char=space
-org.eclipse.jdt.core.formatter.tabulation.size=2
-org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
-org.eclipse.jdt.core.formatter.wrap_before_binary_operator=true

Modified: sugarj/branches/SugarJ-editor-services/editor/META-INF/MANIFEST.MF
==============================================================================
--- sugarj/branches/SugarJ-editor-services/editor/META-INF/MANIFEST.MF	Mon Apr 11 10:59:20 2011	(r22496)
+++ sugarj/branches/SugarJ-editor-services/editor/META-INF/MANIFEST.MF	Mon Apr 11 11:03:04 2011	(r22497)
@@ -4,7 +4,16 @@
 Bundle-SymbolicName: org.sugarj.editor;singleton:=true
 Bundle-Version: 1.0.0.qualifier
 Bundle-Activator: org.sugarj.editor.Activator
-Export-Package: org.sugarj.editor; uses:="org.eclipse.imp.preferences,  org.eclipse.imp.parser,  org.eclipse.imp.runtime,  org.strategoxt.imp.runtime.services,  org.spoofax.interpreter.terms,  org.strategoxt.imp.runtime.parser,  org.osgi.framework,  org.strategoxt.imp.runtime.dynamicloading"
+Export-Package: org.sugarj.editor;
+  uses:="org.eclipse.imp.preferences,
+   org.eclipse.imp.parser,
+   org.eclipse.imp.runtime,
+   org.strategoxt.imp.runtime.services,
+   org.spoofax.interpreter.terms,
+   org.strategoxt.imp.runtime.parser,
+   org.osgi.framework,
+   org.strategoxt.imp.runtime.dynamicloading",
+ org.sugarj.editor.strategies
 Require-Bundle: org.eclipse.core.runtime,
  org.eclipse.core.resources,
  org.eclipse.imp.runtime,
@@ -19,7 +28,7 @@
  org.sugarj.compiler,
  org.sugarj.stdlib,
  org.eclipse.ant.core,
- org.eclipse.jdt.core;bundle-version="3.5.2"
+ org.eclipse.jdt.core
 Bundle-RequiredExecutionEnvironment: JavaSE-1.6
 Import-Package: org.osgi.framework;version="1.3.0"
 Bundle-ActivationPolicy: lazy

Modified: sugarj/branches/SugarJ-editor-services/editor/build.generated.xml
==============================================================================
--- sugarj/branches/SugarJ-editor-services/editor/build.generated.xml	Mon Apr 11 10:59:20 2011	(r22496)
+++ sugarj/branches/SugarJ-editor-services/editor/build.generated.xml	Mon Apr 11 11:03:04 2011	(r22497)
@@ -25,6 +25,9 @@
         <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
             <isset property="eclipse.running"/>
         </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
         </condition>
@@ -309,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -331,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         

From seba at informatik.uni-marburg.de  Mon Apr 11 13:07:19 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 11 Apr 2011 11:07:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22498 - in sugarj:
	branches/SugarJ-editor-services trunk trunk/case-studies
	trunk/case-studies/foo trunk/case-studies/pair
	trunk/case-studies/pair/concrete trunk/case-stud...
Message-ID: <20110411110719.A4535108C012@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Mon Apr 11 11:07:19 2011
New Revision: 22498
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22498&sc=1

Log:
merged editor service branch into trunk

Added:
   sugarj/trunk/   (props changed)
      - copied from r22491, sugarj/branches/SugarJ-editor-services/
Replaced:
   sugarj/trunk/case-studies/.classpath
      - copied unchanged from r22497, sugarj/branches/SugarJ-editor-services/case-studies/.classpath
   sugarj/trunk/case-studies/foo/FooSugar.sugj
      - copied unchanged from r22495, sugarj/branches/SugarJ-editor-services/case-studies/foo/FooSugar.sugj
   sugarj/trunk/case-studies/pair/Pair.sugj
      - copied unchanged from r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/Pair.sugj
   sugarj/trunk/case-studies/pair/Sugar.sugj
      - copied unchanged from r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/Sugar.sugj
   sugarj/trunk/case-studies/pair/concrete/Desugar.sugj
      - copied unchanged from r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Desugar.sugj
   sugarj/trunk/case-studies/pair/concrete/Syntax.sugj
      - copied unchanged from r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Syntax.sugj
   sugarj/trunk/case-studies/pair/concrete/Test.sugj
      - copied unchanged from r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Test.sugj
   sugarj/trunk/case-studies/xml/Test.sugj
      - copied unchanged from r22495, sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj
   sugarj/trunk/compiler/.classpath
      - copied unchanged from r22497, sugarj/branches/SugarJ-editor-services/compiler/.classpath
   sugarj/trunk/compiler/META-INF/MANIFEST.MF
      - copied unchanged from r22493, sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
      - copied unchanged from r22493, sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/editor/.settings/org.eclipse.jdt.core.prefs
      - copied unchanged from r22497, sugarj/branches/SugarJ-editor-services/editor/.settings/org.eclipse.jdt.core.prefs
   sugarj/trunk/editor/META-INF/MANIFEST.MF
      - copied unchanged from r22497, sugarj/branches/SugarJ-editor-services/editor/META-INF/MANIFEST.MF
   sugarj/trunk/editor/build.generated.xml
      - copied unchanged from r22497, sugarj/branches/SugarJ-editor-services/editor/build.generated.xml
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParseControllerGenerated.java
      - copied unchanged from r22492, sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParseControllerGenerated.java
   sugarj/trunk/stdlib/org/sugarj/transformations/GenerateSignatures.str
      - copied unchanged from r22494, sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/transformations/GenerateSignatures.str
Deleted:
   sugarj/branches/SugarJ-editor-services/
   sugarj/trunk/sugarjc.sh
Modified:
   sugarj/trunk/case-studies/   (props changed)
   sugarj/trunk/compiler/   (props changed)
   sugarj/trunk/stdlib/org/sugarj/languages/   (props changed)
   sugarj/trunk/stdlib/org/sugarj/stdlib/   (props changed)

Copied: sugarj/trunk/case-studies/.classpath (from r22497, sugarj/branches/SugarJ-editor-services/case-studies/.classpath)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/.classpath	Mon Apr 11 11:07:19 2011	(r22498, copy of r22497, sugarj/branches/SugarJ-editor-services/case-studies/.classpath)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path=""/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Copied: sugarj/trunk/case-studies/foo/FooSugar.sugj (from r22495, sugarj/branches/SugarJ-editor-services/case-studies/foo/FooSugar.sugj)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/foo/FooSugar.sugj	Mon Apr 11 11:07:19 2011	(r22498, copy of r22495, sugarj/branches/SugarJ-editor-services/case-studies/foo/FooSugar.sugj)
@@ -0,0 +1,57 @@
+package foo;
+
+import org.sugarj.languages.Java;
+   
+/**
+ * SugarJ extension that saves one character
+ * by introducing a new 'nil' keyword in place
+ * of the old four-letter 'null' keyword.
+ */
+public sugar FooSugar {
+  context-free syntax
+    "nil" -> JavaLiteral {cons("Foo"), prefer}
+    FooTypeId -> JavaTypeName {cons("TypeName"), prefer}
+    FooTypeName -> FooTypeId {cons("MyId")}
+    
+  lexical syntax
+    "TYPE" -> FooTypeName
+    "TYPE" -> JavaId {reject}
+    
+  
+  signature constructors
+    Foo : Literal
+    MyId : String -> FooTypeId
+  
+  desugarings
+    \ Foo -> Null \
+    \ MyId(s) -> Id("String") \
+    
+  rules
+    constraint-error : 
+      Foo -> [(<id>, "don't use nil, stupid")]
+    
+    constraint-error :
+      Null -> [(<id>, "don't use null"), (<id>, "really don't use null")]
+  
+  
+  // foo declarations
+  context-free syntax
+    AnnoOrSugarMod* "foo" JavaId "{" "}" -> SugarDec {cons("FooDec")}
+  
+  signature constructors
+    FooDec : List(AnnoOrSugarMod) * JavaId -> SugarDec
+  
+  desugarings
+    desugar-foodec-alt
+  
+  rules
+    desugar-foodec :
+      FooDec(mods, name) -> SugarDec(SugarDecHead(mods, name), SugarBody([]))
+    
+    desugar-foodec2 :
+      FooDec(mods, name) -> EditorServicesDec(EditorServicesDecHead(mods, name), EditorServicesBody([]))
+    
+    desugar-foodec-alt :
+      foo at FooDec(mods, name) -> [<desugar-foodec> foo, <desugar-foodec2> foo]
+}
+   
\ No newline at end of file

Copied: sugarj/trunk/case-studies/pair/Pair.sugj (from r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/Pair.sugj)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/pair/Pair.sugj	Mon Apr 11 11:07:19 2011	(r22498, copy of r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/Pair.sugj)
@@ -0,0 +1,19 @@
+package pair;
+
+public class Pair<A, B> {
+  public A a;
+  public B b;
+  
+  public Pair (A a, B b) {
+    this.a = a;
+    this.b = b;
+  }
+  
+  public static <A, B> Pair<A, B> create(A a, B b) {
+    return new Pair(a, b);
+  }
+  
+  public String toString() {
+    return "(" + a.toString() + ", " + b.toString() + ")";
+  }
+}

Copied: sugarj/trunk/case-studies/pair/Sugar.sugj (from r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/Sugar.sugj)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/pair/Sugar.sugj	Mon Apr 11 11:07:19 2011	(r22498, copy of r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/Sugar.sugj)
@@ -0,0 +1,21 @@
+package pair;
+
+import org.sugarj.languages.Java;
+import concretesyntax.ConcreteJava;
+
+public sugar Sugar {
+  context-free syntax
+    "(" JavaType "," JavaType ")" -> JavaType {cons("PType")}
+    "(" JavaExpr "," JavaExpr ")" -> JavaExpr {cons("PExpr")}
+  
+  desugarings
+    desugar-pair-type
+    desugar-pair-expr
+
+  rules
+    desugar-pair-type :
+      PType(t1, t2) -> |[ pair.Pair<~t1, ~t2> ]| 
+
+    desugar-pair-expr : 
+      PExpr(e1, e2) -> |[ new pair.Pair.create(~e1, ~e2) ]|
+}
\ No newline at end of file

Copied: sugarj/trunk/case-studies/pair/concrete/Desugar.sugj (from r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Desugar.sugj)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/pair/concrete/Desugar.sugj	Mon Apr 11 11:07:19 2011	(r22498, copy of r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Desugar.sugj)
@@ -0,0 +1,22 @@
+package pair.concrete;
+
+import concretesyntax.ConcreteJava;
+
+import pair.concrete.Syntax;
+
+public sugar Desugar {
+  desugarings
+    pair2expr
+    pair2type
+
+  rules
+    pair2expr : 
+      |[ (~expr:e1, ~expr:e2) ]| 
+      ->
+      |[ pair.Pair.create(~e1, ~e2) ]|
+
+    pair2type :
+      |[ (~type:t1, ~type:t2) ]|
+      ->
+      |[ pair.Pair<~t1, ~t2> ]| 
+}
\ No newline at end of file

Copied: sugarj/trunk/case-studies/pair/concrete/Syntax.sugj (from r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Syntax.sugj)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/pair/concrete/Syntax.sugj	Mon Apr 11 11:07:19 2011	(r22498, copy of r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Syntax.sugj)
@@ -0,0 +1,12 @@
+package pair.concrete;
+
+import org.sugarj.languages.Java;
+
+public sugar Syntax {
+  context-free syntax
+    "(" JavaExpr "," JavaExpr ")" -> 
+      JavaExpr {cons("PExpr")}
+
+    "(" JavaType "," JavaType ")" -> 
+      JavaType {cons("PType")}
+}
\ No newline at end of file

Copied: sugarj/trunk/case-studies/pair/concrete/Test.sugj (from r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Test.sugj)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/pair/concrete/Test.sugj	Mon Apr 11 11:07:19 2011	(r22498, copy of r22495, sugarj/branches/SugarJ-editor-services/case-studies/pair/concrete/Test.sugj)
@@ -0,0 +1,12 @@
+package pair.concrete;
+
+import pair.concrete.Syntax;
+import pair.concrete.Desugar;
+
+public class Test {
+  private static (String, Integer) p = ("12", 34);
+  
+  public static void main(String[] args) {
+    System.out.println(p);
+  } 
+}
\ No newline at end of file

Copied: sugarj/trunk/case-studies/xml/Test.sugj (from r22495, sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/xml/Test.sugj	Mon Apr 11 11:07:19 2011	(r22498, copy of r22495, sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj)
@@ -0,0 +1,113 @@
+package xml;
+
+import java.util.StringTokenizer;
+
+import org.xml.sax.Attributes;
+import org.xml.sax.ContentHandler;
+import org.xml.sax.SAXException;
+import org.xml.sax.helpers.DefaultHandler;
+
+import xml.AsSax;
+import xml.XmlJavaSyntax;
+import xml.XmlEditor;
+
+/*
+ * code for printing based on http://www.informit.com/articles/article.aspx?p=26351&seqNum=5
+ */
+public class Test extends DefaultHandler {
+  public static void main(String[] args) throws SAXException {
+    ContentHandler ch = new Test();
+    
+    ch.<xsd:schema
+		     targetNamespace="http://www.w3.org/2001/XMLSchema"
+		     blockDefault="#all"
+		     elementFormDefault="qualified"
+		     version="1.0">   
+		     <{http://www.w3.org/2001/XMLSchema}simpleType name="derivationSet">
+		       <annotation>
+		       
+		         <documentation>
+		           A utility type, not for public use
+		         </documentation> 
+		         <documentation>
+		           #all or (possibly empty) subset of {extension, restriction}
+		         </documentation>
+ 		      </annotation>
+	 	      <union>
+		         <simpleType>
+		           <restriction base="token">
+		             <enumeration value="#all"/>
+		           </restriction>
+		         </simpleType>
+		         <simpleType>
+		           <list itemType="reducedDerivationControl"/>
+ 		        </simpleType>
+	 	      </union>
+		     </{http://www.w3.org/2001/XMLSchema}simpleType>  
+		   </xsd:schema>;
+  }
+  	
+	private int indentation = 0;
+
+  /** When you see a start tag, print it out and then
+   *  increase indentation by two spaces. If the
+   *  element has attributes, place them in parens
+   *  after the element name.
+   */
+
+  public void startElement(String namespaceUri,
+                           String localName,
+                           String qualifiedName,
+                           Attributes attributes)
+      throws SAXException {
+    indent(indentation);
+    System.out.print("<" + qualifiedName);
+    int numAttributes = attributes.getLength();
+
+    if (numAttributes > 0) {
+      System.out.print(" ");
+      for(int i=0; i<numAttributes; i++) {
+        if (i>0) {
+          System.out.print(" ");
+        }
+        System.out.print(attributes.getQName(i) + "=\"" +
+                         attributes.getValue(i) + "\"");
+      }
+    }
+    System.out.println(">");
+    indentation = indentation + 2;
+  }
+  /** When you see the end tag, print it out and decrease
+   *  indentation level by 2.
+   */
+  
+  public void endElement(String namespaceUri,
+                         String localName,
+                         String qualifiedName)
+      throws SAXException {
+    indentation = indentation - 2;
+    indent(indentation);
+    System.out.println("</" + qualifiedName + ">");
+  }
+
+  /** Print out the first word of each tag body. */
+  
+  public void characters(char[] chars,
+                         int startIndex,
+                         int endIndex) {
+    String data = new String(chars, startIndex, endIndex);
+    
+    StringTokenizer st = new StringTokenizer(data, "\n");
+    
+    while (st.hasMoreTokens()) {
+      indent(indentation);
+      System.out.println(st.nextToken());
+    }
+  }
+
+  private void indent(int indentation) {
+    for(int i=0; i<indentation; i++) {
+      System.out.print(" ");
+    }
+  }
+}
\ No newline at end of file

Copied: sugarj/trunk/compiler/.classpath (from r22497, sugarj/branches/SugarJ-editor-services/compiler/.classpath)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/compiler/.classpath	Mon Apr 11 11:07:19 2011	(r22498, copy of r22497, sugarj/branches/SugarJ-editor-services/compiler/.classpath)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="src" path=""/>
+	<classpathentry exported="true" kind="lib" path="make_permissive.jar"/>
+	<classpathentry exported="true" kind="lib" path="commons-cli-1.2.jar"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Copied: sugarj/trunk/compiler/META-INF/MANIFEST.MF (from r22493, sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/compiler/META-INF/MANIFEST.MF	Mon Apr 11 11:07:19 2011	(r22498, copy of r22493, sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF)
@@ -0,0 +1,24 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: org.sugarj.compiler
+Bundle-SymbolicName: org.sugarj.compiler;singleton:=true
+Bundle-Version: 1.0.0.qualifier
+Bundle-Activator: org.sugarj.driver.Activator
+Require-Bundle: org.eclipse.ui,
+ org.eclipse.core.runtime,
+ org.spoofax.jsglr,
+ org.sugarj.stdlib,
+ org.spoofax.terms,
+ org.eclipse.jdt.core,
+ org.strategoxt.strj,
+ org.strategoxt.imp.runtime,
+ org.strategoxt.imp.nativebundle
+Bundle-ActivationPolicy: lazy
+Bundle-RequiredExecutionEnvironment: JavaSE-1.6
+Export-Package: org.sugarj, 
+ org.sugarj.driver,
+ org.sugarj.driver.caching,
+ org.sugarj.driver.transformations
+Bundle-ClassPath: make_permissive.jar,
+ .,
+ commons-cli-1.2.jar

Copied: sugarj/trunk/compiler/org/sugarj/driver/Driver.java (from r22493, sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Mon Apr 11 11:07:19 2011	(r22498, copy of r22493, sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java)
@@ -0,0 +1,1298 @@
+package org.sugarj.driver;
+
+import static org.sugarj.driver.ATermCommands.extractSDF;
+import static org.sugarj.driver.ATermCommands.extractSTR;
+import static org.sugarj.driver.ATermCommands.fixSDF;
+import static org.sugarj.driver.ATermCommands.getApplicationSubterm;
+import static org.sugarj.driver.ATermCommands.getList;
+import static org.sugarj.driver.ATermCommands.getString;
+import static org.sugarj.driver.ATermCommands.isApplication;
+import static org.sugarj.driver.Environment.bin;
+import static org.sugarj.driver.Environment.sep;
+import static org.sugarj.driver.Log.log;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.net.URI;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.text.ParseException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.CommandLineParser;
+import org.apache.commons.cli.GnuParser;
+import org.apache.commons.cli.HelpFormatter;
+import org.apache.commons.cli.Options;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.ParseTable;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+import org.strategoxt.HybridInterpreter;
+import org.strategoxt.imp.runtime.parser.JSGLRI;
+import org.strategoxt.lang.Context;
+import org.strategoxt.permissivegrammars.make_permissive;
+import org.strategoxt.tools.tools;
+import org.sugarj.driver.caching.ModuleKeyCache;
+import org.sugarj.driver.transformations.extraction.extraction;
+import org.sugarj.stdlib.StdLib;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ */
+public class Driver{
+  
+  public final static String VERSION = "editor-services-0.1";
+  
+  private static class Key {
+    private String source;
+    private String moduleName;
+    
+    private Key(String source, String moduleName) {
+      this.source = source;
+      this.moduleName = moduleName;
+    }
+    
+    public int hashCode() {
+      return source.hashCode() + moduleName.hashCode();
+    }
+    
+    public boolean equals(Object o) {
+      return o instanceof Key 
+          && ((Key) o).source.equals(source)
+          && ((Key) o).moduleName.equals(moduleName);
+    }
+  }
+
+  private final static int PENDING_TIMEOUT = 120000;
+
+  private static Map<Key, Result> resultCache = new HashMap<Key, Result>();
+
+  private static List<URI> allInputFiles;
+  private static List<URI> pendingInputFiles;
+  private static List<URI> currentlyProcessing;
+
+  private Result driverResult = new Result();
+  
+  private String moduleName;
+  private String javaOutDir;
+  private String javaOutFile;
+  private String relPackageName;
+  private String mainModuleName;
+
+  private String currentGrammarSDF;
+  private String currentGrammarModule;
+  private String currentTransSTR;
+  private String currentTransModule;
+  private String remainingInput;
+  
+  // private Collection<String> dependentFiles;
+
+  private List<String> availableSDFImports;
+  private List<String> availableSTRImports;
+  
+  private IStrategoTerm sugaredPackageDecl;
+  private List<IStrategoTerm> sugaredImportDecls = new ArrayList<IStrategoTerm>();
+  private List<IStrategoTerm> sugaredTypeOrSugarDecls = new ArrayList<IStrategoTerm>();
+  
+  private IStrategoTerm lastSugaredToplevelDecl;
+  
+  private RetractableTreeBuilder inputTreeBuilder;
+  private JSGLRI sdfParser;
+  private JSGLRI strParser;
+  private HybridInterpreter interp;
+  private JSGLRI parser;
+  private Context sdfContext;
+  private Context makePermissiveContext;
+  private Context extractionContext;
+  private Context strjContext;
+  
+  private String currentTransProg;
+  
+  /**
+   * the next parsing and desugaring uses no cache lookup if skipCache.
+   */
+  private boolean skipCache = false;
+  
+  private static synchronized Result getResult(String source, String moduleName) {
+    return resultCache.get(new Key(source, moduleName));
+  }
+  
+  private static Result getNonPendingResult(String source, String moduleName) {
+    Key key = new Key(source, moduleName);
+    Result r;
+    int count = 0;
+    synchronized (key) {
+      while (true) {
+        synchronized (resultCache) {
+          r = resultCache.get(key);
+        }
+        
+        if (r != null && !(r instanceof PendingResult))
+          return r;
+        
+        if (count > PENDING_TIMEOUT)
+          throw new IllegalStateException("pending result timed out for module " + moduleName);
+        
+        count += 100;
+        try {
+          key.wait(100);
+        } catch (InterruptedException e) {
+        }
+      }
+    }
+  }
+
+  private static synchronized void putResult(String source, String moduleName, Result result) {
+    resultCache.put(new Key(source, moduleName), result);
+  }
+  
+  public static Result compile(URI sourceFile) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException {
+    synchronized (currentlyProcessing) {
+      // TODO we need better circular dependency handling
+      if (currentlyProcessing.contains(sourceFile))
+        throw new IllegalStateException("circular processing");
+      currentlyProcessing.add(sourceFile);
+    }
+
+    String source = FileCommands.readFileAsString(sourceFile.getPath());
+    String moduleName = FileCommands.fileName(sourceFile);
+    
+    Result res = compile(source, moduleName, sourceFile.getPath());
+
+    synchronized (currentlyProcessing) {
+      currentlyProcessing.remove(sourceFile);
+    }
+    pendingInputFiles.remove(sourceFile);
+
+    return res;
+  }
+  
+  public static Result compile(String source, String moduleName, String file) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException {
+    boolean isPending = false;
+    synchronized (Driver.class) {
+      Result result = getResult(source, moduleName);
+      if (result != null && result instanceof PendingResult)
+        isPending = true;
+      else if (result != null && result.isUpToDate())
+        return result;
+      
+      // mark this module as pending 
+      putResult(source, moduleName, PendingResult.instance);
+    }
+    
+    if (isPending && getNonPendingResult(source, moduleName) != null) 
+      return compile(source, moduleName, file);
+    
+    Driver driver = null;
+    try {
+      initialize();
+      driver = new Driver();
+      driver.process(source, moduleName);
+      storeCaches();
+    } finally {
+      putResult(source, moduleName, driver == null ? null : driver.driverResult);
+    }
+    
+    return driver.driverResult;
+  }
+  
+  /**
+   * Process the given Extensible Java file.
+   * 
+   * @param moduleFileName
+   *        the file to process.
+   * @param outdir
+   *        the directory to write the output into.
+   * @throws IOException 
+   * @throws SGLRException 
+   * @throws InvalidParseTableException 
+   * @throws ParseException 
+   * @throws BadTokenException 
+   * @throws TokenExpectedException 
+   */
+  private void process(String source, String moduleName) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException {
+    log.beginTask("processing", "BEGIN PROCESSING " + moduleName);
+    boolean success = false;
+    try {
+      init(moduleName);
+
+      remainingInput = source;
+      
+      driverResult.addEditorService(
+        ATermCommands.atermFromString(
+          "Builders(\"sugarj checking\", [SemanticObserver(Strategy(\"sugarj-analyze\"))])"));
+
+      boolean done = false;
+      while (!done) {
+        boolean wocache = Environment.wocache;
+        Environment.wocache |= skipCache;
+        
+        // PARSE the next top-level declaration
+        IncrementalParseResult parseResult =
+            parseNextToplevelDeclaration(remainingInput, true);
+        lastSugaredToplevelDecl = parseResult.getToplevelDecl();
+        remainingInput = parseResult.getRest();
+        
+        // DESUGAR the parsed top-level declaration
+        IStrategoTerm desugared = currentDesugar(lastSugaredToplevelDecl);
+        
+        // reset cache skipping
+        Environment.wocache = wocache;
+        
+        // PROCESS the assimilated top-level declaration
+        processToplevelDeclaration(desugared);
+
+        done = parseResult.parsingFinished();
+      }
+      
+      if (Environment.generateJavaFile) {
+        String f = Environment.bin + sep + relPackageNameSep() + mainModuleName + ".java";
+        driverResult.generateFile(f, FileCommands.readFileAsString(javaOutFile));
+        log.log("Wrote generated Java file to " + f);
+      }
+      
+      // check final grammar and transformation for errors
+      if (!Environment.noChecking) {
+        checkCurrentGrammar();
+        checkCurrentTransformation();
+      }
+      
+      // COMPILE the generated java file
+      compileGeneratedJavaFile();
+      
+      driverResult.setSugaredSyntaxTree(makeSugaredSyntaxTree());
+      if (currentTransProg != null)
+        driverResult.registerEditorDesugarings(currentTransProg);
+      
+      success = true;
+    }
+    catch (CommandExecution.ExecutionError e) {
+      // TODO do something more sensible
+      e.printStackTrace();
+      success = false;
+    }
+    finally {
+      log.endTask(success, "done processing " + moduleName, "failed processing " + moduleName);
+    }
+  }
+
+  private void compileGeneratedJavaFile() throws IOException {
+    log.beginTask("compilation", "COMPILE the generated java file");
+    try {
+      List<String> path = new ArrayList<String>(Environment.includePath);
+      path.add(StdLib.stdLibDir.getPath());
+      path.add(javaOutDir);
+      
+      driverResult.compileJava(javaOutFile, bin, path, relPackageName);
+    } finally {
+      log.endTask();
+    }
+  }
+
+  private IncrementalParseResult parseNextToplevelDeclaration(String input, boolean recovery)
+      throws IOException, ParseException, InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
+    log.beginTask("parsing", "PARSE the next toplevel declaration.");
+    try {
+      IStrategoTerm remainingInputTerm = currentParse(input, recovery);
+
+      if (remainingInputTerm == null)
+        throw new ParseException("could not parse toplevel declaration in:\n"
+            + input, -1);
+
+      IStrategoTerm toplevelDecl = getApplicationSubterm(remainingInputTerm, "NextToplevelDeclaration", 0);
+      IStrategoTerm restTerm = getApplicationSubterm(remainingInputTerm, "NextToplevelDeclaration", 1);
+      String rest = getString(restTerm);
+
+      if (input.equals(rest))
+        throw new RuntimeException("empty toplevel declaration parse rule");
+      
+      try {
+        if (!rest.isEmpty())
+          inputTreeBuilder.retract(restTerm);
+      } catch (Throwable t) {
+        t.printStackTrace();
+      }
+      
+      if (toplevelDecl == null || rest == null)
+        throw new ParseException(
+            "could not parse next toplevel declaration in:\n"
+                + remainingInputTerm.toString(),
+            -1);
+      
+      String tmpFile = FileCommands.newTempFile("aterm");
+      FileCommands.writeToFile(tmpFile, toplevelDecl.toString());
+      log.log("next toplevel declaration parsed: " + tmpFile);
+
+      return new IncrementalParseResult(toplevelDecl, rest);
+    } finally {
+      log.endTask();
+    }
+  }
+
+  
+  private void processEditorServicesDec(IStrategoTerm toplevelDecl) throws IOException {
+    log.beginTask(
+        "processing",
+        "PROCESS the desugared editor services declaration.");
+    try {
+      sugaredTypeOrSugarDecls.add(lastSugaredToplevelDecl);
+      
+      String extName = null;
+      String fullExtName = null;
+      boolean isPublic = false;
+
+      IStrategoTerm head = getApplicationSubterm(toplevelDecl, "EditorServicesDec", 0);
+      IStrategoTerm body= getApplicationSubterm(toplevelDecl, "EditorServicesDec", 1);
+      
+      log.beginTask("Extracting name and accessibility of the editor services.");
+      try {
+        extName =
+          SDFCommands.prettyPrintJava(
+          getApplicationSubterm(head, "EditorServicesDecHead", 1), interp);    
+        
+        IStrategoTerm mods = getApplicationSubterm(head, "EditorServicesDecHead", 0);
+        
+        for (IStrategoTerm t : getList(mods))
+          if (isApplication(t, "Public"))
+          {
+            isPublic = true;
+            break;
+          }
+        
+        fullExtName = relPackageNameSep() + extName;
+
+        log.log("The name of the editor services is '" + extName + "'.");
+        log.log("The full name of the editor services is '" + fullExtName + "'.");
+
+        if (extName.equals(mainModuleName))
+          driverResult.appendToFile(
+              javaOutFile,
+              "/* auto-generated dummy class as replacement\n" + 
+              " * for extracted editor services.\n" +
+              " */\n" +
+              (isPublic ? "public " : "") + "class " + mainModuleName + "{}\n");
+
+        
+
+        if (isPublic)
+          log.log("The editor services is public.");
+        else
+          log.log("The editor services is not public.");
+      
+        log.log("The body of the editor services is:");
+        log.log(body.toString());
+        
+        IStrategoTerm services = ATermCommands.getApplicationSubterm(body, "EditorServicesBody", 0);
+        
+        if (!ATermCommands.isList(services))
+          throw new IllegalStateException("editor services are not a list: " + services);
+        
+        List<IStrategoTerm> editorServices = ATermCommands.getList(services);
+        if (currentTransProg != null)
+          editorServices = ATermCommands.registerSemanticProvider(editorServices, currentTransProg);
+  
+        String editorServicesFile = bin + sep + relPackageNameSep() + extName + ".serv";
+        FileCommands.createFile(editorServicesFile);
+  
+        log.log("writing editor services to " + editorServicesFile);
+        
+        StringBuffer buf = new StringBuffer();
+        
+        for (IStrategoTerm service : driverResult.getEditorServices())
+          buf.append(service).append('\n');
+        
+        for (IStrategoTerm service : editorServices) {
+          driverResult.addEditorService(service);
+          buf.append(service).append('\n');
+        }
+        
+        driverResult.generateFile(editorServicesFile, buf.toString());
+      } finally {
+        log.endTask();
+      }
+    } finally {
+      log.endTask();
+    }
+  }
+  
+  
+  private void processToplevelDeclaration(IStrategoTerm toplevelDecl)
+      throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException {
+    if (isApplication(toplevelDecl, "PackageDec"))
+      processPackageDec(toplevelDecl);
+    else {
+      if (javaOutFile == null)
+        javaOutFile = javaOutDir + sep + relPackageNameSep() + mainModuleName + ".java";
+      
+      try {
+        if (isApplication(toplevelDecl, "TypeImportDec") || isApplication(toplevelDecl, "TypeImportOnDemandDec")) {
+          if (!Environment.atomicImportParsing)
+            processImportDec(toplevelDecl);
+          else 
+            processImportDecs(toplevelDecl);
+        }
+        else if (isApplication(toplevelDecl, "JavaTypeDec"))
+          processJavaTypeDec(toplevelDecl);
+        else if (isApplication(toplevelDecl, "SugarDec"))
+          processSugarDec(toplevelDecl);
+        else if (isApplication(toplevelDecl, "EditorServicesDec")) 
+          processEditorServicesDec(toplevelDecl);
+        else if (ATermCommands.isList(toplevelDecl))
+          /* 
+           * Desugarings may generate lists of toplevel declarations. These declarations,
+           * however, may not depend on one another.
+           */
+          for (IStrategoTerm term : ATermCommands.getList(toplevelDecl))
+            processToplevelDeclaration(term);
+        else
+          throw new IllegalArgumentException("unexpected toplevel declaration, desugaring probably failed: " + toplevelDecl.toString(5));
+      } catch (Exception e) {
+        ATermCommands.setErrorMessage(toplevelDecl, e.getLocalizedMessage() != null ? e.getLocalizedMessage() : e.toString());
+        sugaredTypeOrSugarDecls.add(lastSugaredToplevelDecl);
+      }
+    }
+  }
+
+  private IStrategoTerm currentParse(String remainingInput, boolean recovery) throws IOException,
+      InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
+    // recompile the current grammar definition
+    ParseTable currentGrammarTBL;
+    
+    currentGrammarTBL = SDFCommands.compile(currentGrammarSDF, currentGrammarModule, driverResult.getFileDependencies(), sdfParser, sdfContext, makePermissiveContext);
+
+    IStrategoTerm parseResult = null;
+
+    parser.setUseRecovery(recovery);
+    
+    // read next toplevel decl and stop if that fails
+    try {
+      parseResult = SDFCommands.parseImplode(
+          currentGrammarTBL,
+          remainingInput,
+          "NextToplevelDeclaration",
+          false,
+          inputTreeBuilder,
+          parser);
+    } finally {
+      if (recovery)
+        driverResult.addBadTokenExceptions(parser.getCollectedErrors());
+    }
+    
+    return parseResult;
+  }
+
+  private IStrategoTerm currentDesugar(IStrategoTerm term) throws IOException,
+      InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
+    // assimilate toplevelDec using current transformation
+
+    log.beginTask(
+        "desugaring",
+        "DESUGAR the current toplevel declaration.");
+    try {
+      currentTransProg = STRCommands.compile(currentTransSTR, "main", driverResult.getFileDependencies(), strParser, strjContext);
+
+      return STRCommands.assimilate(currentTransProg, term, interp);
+    } finally {
+      log.endTask();
+    }
+  }
+
+  private void processPackageDec(IStrategoTerm toplevelDecl) throws IOException {
+    log.beginTask("processing", "PROCESS the desugared package declaration.");
+    try {
+      sugaredPackageDecl = lastSugaredToplevelDecl;
+      
+      String packageName =
+          SDFCommands.prettyPrintJava(
+          getApplicationSubterm(toplevelDecl, "PackageDec", 1), interp);
+
+      log.log("The Java package name is '" + packageName + "'.");
+
+      relPackageName = FileCommands.getRelativeModulePath(packageName);
+
+      log.log("The SDF / Stratego package name is '" + relPackageName + "'.");
+
+      javaOutFile =
+          javaOutDir + sep + relPackageNameSep() + mainModuleName + ".java";
+      
+      driverResult.generateFile(javaOutFile, SDFCommands.prettyPrintJava(toplevelDecl, interp) + "\n");
+    } finally {
+      log.endTask();
+    }
+  }
+  
+  private void processImportDecs(IStrategoTerm toplevelDecl) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException {
+    List<IStrategoTerm> pendingImports = new ArrayList<IStrategoTerm>();
+    pendingImports.add(toplevelDecl);
+    
+    while (true) {
+      IncrementalParseResult res = null;
+      IStrategoTerm term = null;
+      
+      try {
+        log.beginSilent();
+        res = parseNextToplevelDeclaration(remainingInput, false);
+        term = res.getToplevelDecl();
+      }
+      catch (Throwable t) { }
+      finally {         
+        log.endSilent(); 
+      }
+    
+      if (res != null &&
+          term != null &&
+          (isApplication(term, "TypeImportDec") ||
+           isApplication(term, "TypeImportOnDemandDec"))) {
+        remainingInput = res.getRest();
+        pendingImports.add(term);
+      }
+      else {
+        if (term != null)
+          inputTreeBuilder.retract(term);
+        break;
+      }
+    }
+    
+    for (IStrategoTerm pendingImport : pendingImports) {
+      lastSugaredToplevelDecl = pendingImport;
+      processImportDec(pendingImport);
+    }
+  }
+
+  private void processImportDec(IStrategoTerm toplevelDecl) {
+    
+    sugaredImportDecls.add(lastSugaredToplevelDecl);
+    
+    if (javaOutFile == null)
+      javaOutFile = javaOutDir + sep + mainModuleName + ".java";
+    
+    log.beginTask("processing", "PROCESS the desugared import declaration.");
+    try {
+      String importModule = ModuleSystemCommands.extractImportedModuleName(toplevelDecl, interp);
+
+      // TODO handle import declarations with asterisks, e.g. import foo.*;
+      
+      String modulePath = FileCommands.getRelativeModulePath(importModule);
+  
+      boolean success = processImport(modulePath, toplevelDecl);
+      
+      URI sourceFile = ModuleSystemCommands.locateSourceFile(modulePath);
+      
+      if (sourceFile != null &&
+          !modulePath.startsWith("org/sugarj") &&
+          !modulePath.endsWith("*")) {
+        
+        URI classUri = ModuleSystemCommands.searchFile(modulePath, ".class");
+        if (!success ||
+            pendingInputFiles.contains(sourceFile) ||
+            (classUri != null && new File(sourceFile).lastModified() > new File(classUri).lastModified())) {
+
+          log.log("Need to compile the imported module first ; processing it now.");
+          compile(sourceFile);
+          log.log("CONTINUE PROCESSING'" + moduleName + "'.");
+          
+          // try again
+          success = processImport(modulePath, toplevelDecl);
+        }
+      }
+      
+      if (!success)
+        ATermCommands.setErrorMessage(toplevelDecl, "module not found " + importModule);
+      
+    } catch (Exception e) {
+      throw new RuntimeException(e);
+    } finally {
+      log.endTask();
+    }
+  }
+  
+  private boolean processImport(String modulePath, IStrategoTerm importTerm) throws IOException {
+    boolean success = false;
+    
+    success |= ModuleSystemCommands.importClass(
+        modulePath, 
+        importTerm, 
+        javaOutFile,
+        interp, 
+        driverResult);
+
+    String grammarModule = ModuleSystemCommands.importSdf(
+        modulePath, 
+        currentGrammarModule, 
+        availableSDFImports, 
+        driverResult);
+    if (grammarModule != null) {
+      success = true;
+      currentGrammarSDF = grammarModule;
+      currentGrammarModule = FileCommands.fileName(grammarModule);
+    }
+    
+    String transModule = ModuleSystemCommands.importStratego(
+        modulePath, 
+        currentTransModule, 
+        availableSTRImports, 
+        driverResult);
+    if (transModule != null) {
+      success = true;
+      currentTransSTR = transModule;
+      currentTransModule = FileCommands.fileName(transModule);
+    }
+    
+    success |= ModuleSystemCommands.importEditorServices(modulePath, driverResult);
+    
+    return success;
+  }
+
+  private void processJavaTypeDec(IStrategoTerm toplevelDecl) throws IOException {
+    log.beginTask(
+        "processing",
+        "PROCESS the desugared Java type declaration.");
+    try {
+      
+      sugaredTypeOrSugarDecls.add(lastSugaredToplevelDecl);
+      
+      log.beginTask("Generate Java code.");
+      try {
+        IStrategoTerm dec = getApplicationSubterm(toplevelDecl, "JavaTypeDec", 0);
+        driverResult.appendToFile(javaOutFile, SDFCommands.prettyPrintJava(dec, interp) + "\n");
+      } finally {
+        log.endTask();
+      }
+    } finally {
+      log.endTask();
+    }
+  }
+
+  private void processSugarDec(IStrategoTerm toplevelDecl) throws IOException,
+      InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
+    log.beginTask(
+        "processing",
+        "PROCESS the desugared sugar declaration.");
+    try {
+      sugaredTypeOrSugarDecls.add(lastSugaredToplevelDecl);
+      
+      boolean isNative;
+      String extName = null;
+      String fullExtName = null;
+      boolean isPublic = false;
+
+      IStrategoTerm head = getApplicationSubterm(toplevelDecl, "SugarDec", 0);
+      IStrategoTerm body= getApplicationSubterm(toplevelDecl, "SugarDec", 1);
+      
+      log.beginTask("Extracting name and accessibility of the sugar.");
+      try {
+        isNative = isApplication(head, "NativeSugarDecHead");
+        
+        if (isNative) {
+          extName =
+            SDFCommands.prettyPrintJava(
+            getApplicationSubterm(head, "NativeSugarDecHead", 2), interp);
+          
+          IStrategoTerm mods = getApplicationSubterm(head, "NativeSugarDecHead", 0);
+          
+          for (IStrategoTerm t : getList(mods))
+            if (isApplication(t, "Public"))
+            {
+              isPublic = true;
+              break;
+            }
+        }
+        else {
+          extName =
+            SDFCommands.prettyPrintJava(
+            getApplicationSubterm(head, "SugarDecHead", 1), interp);    
+          
+          IStrategoTerm mods = getApplicationSubterm(head, "SugarDecHead", 0);
+          
+          for (IStrategoTerm t : getList(mods))
+            if (isApplication(t, "Public"))
+            {
+              isPublic = true;
+              break;
+            }
+        }
+        
+        
+        
+        fullExtName = relPackageNameSep() + extName;
+
+        log.log("The name of the sugar is '" + extName + "'.");
+        log.log("The full name of the sugar is '" + fullExtName + "'.");
+
+        if (isPublic)
+          log.log("The sugar is public.");
+        else
+          log.log("The sugar is not public.");
+        
+        if (isNative)
+          log.log("The sugar is native.");
+        else
+          log.log("The sugar is not native.");
+
+
+      } finally {
+        log.endTask();
+      }
+      
+      String sdfExtension =
+          bin + sep + relPackageNameSep()
+              + extName + ".sdf";
+  
+      String strExtension =
+          bin + sep + relPackageNameSep()
+              + extName + ".str";
+      
+      FileCommands.delete(sdfExtension);
+      FileCommands.delete(strExtension);
+
+      String sdfImports = " imports " + StringCommands.printListSeparated(availableSDFImports, " ") + "\n";
+      String strImports = " imports " + StringCommands.printListSeparated(availableSTRImports, " ") + "\n";
+      
+      if (isNative) {
+        String nativeModule = getString(getApplicationSubterm(body, "NativeSugarBody", 0)); 
+        
+        if (nativeModule.length() > 1)
+            // remove quotes
+          nativeModule = nativeModule.substring(1, nativeModule.length() - 1);
+          
+        if (FileCommands.exists(ModuleSystemCommands.searchFile(nativeModule, ".sdf"))) {
+          availableSDFImports.add(nativeModule);
+          driverResult.generateFile(
+              sdfExtension, 
+              "module " + fullExtName + "\n" 
+              + sdfImports 
+              + "imports " + nativeModule);
+        }
+
+        if (FileCommands.exists(ModuleSystemCommands.searchFile(nativeModule, ".str"))) {
+          availableSTRImports.add(nativeModule);
+          driverResult.generateFile(
+              strExtension, 
+              "module " + fullExtName + "\n" 
+              + strImports
+              + "imports " + nativeModule);
+        }
+      }
+      else {
+        // this is a list of SDF and Stratego statements
+        IStrategoTerm sugarBody = getApplicationSubterm(body, "SugarBody", 0);
+  
+        IStrategoTerm sdfExtract = fixSDF(extractSDF(sugarBody, extractionContext), interp);
+        IStrategoTerm strExtract = extractSTR(sugarBody, extractionContext);
+        
+        
+        String sdfExtensionHead =
+          "module " + fullExtName + "\n" 
+          + sdfImports
+          + (isPublic ? "exports " : "hiddens ") + "\n"
+          + "  (/)" + "\n";
+
+        String sdfExtensionContent = SDFCommands.prettyPrintSDF(sdfExtract, interp);
+
+        String sdfSource = SDFCommands.makePermissiveSdf(sdfExtensionHead + sdfExtensionContent, makePermissiveContext);
+        driverResult.generateFile(sdfExtension, sdfSource);
+        availableSDFImports.add(fullExtName);
+        
+        if (CommandExecution.FULL_COMMAND_LINE)
+          log.log("Wrote SDF file to '" + new File(sdfExtension).getAbsolutePath() + "'.");
+        
+        String strExtensionTerm = 
+            "Module(" + "\"" + fullExtName+ "\"" + ", " 
+                      + strExtract + ")" + "\n";
+
+        String strExtensionContent = SDFCommands.prettyPrintSTR(ATermCommands.atermFromString(strExtensionTerm), interp);
+        
+        int index = strExtensionContent.indexOf('\n');
+        if (index >= 0)
+          strExtensionContent =
+            strExtensionContent.substring(0, index + 1) + "\n"
+            + strImports + "\n"
+            + strExtensionContent.substring(index + 1);
+        else
+          strExtensionContent += strImports;
+          
+        
+        driverResult.generateFile(strExtension, strExtensionContent);
+        availableSTRImports.add(fullExtName);
+        
+        if (CommandExecution.FULL_COMMAND_LINE)
+          log.log("Wrote Stratego file to '" + new File(strExtension).getAbsolutePath() + "'.");
+      }
+
+      if (FileCommands.exists(sdfExtension)) {
+        String currentGrammarName =
+          FileCommands.hashFileName("sugarj", currentGrammarModule + fullExtName);
+        currentGrammarSDF =
+          Environment.tmpDir + sep + currentGrammarName + ".sdf";
+        driverResult.generateFile(currentGrammarSDF, 
+            "module " + currentGrammarName + "\n"
+            + "imports " + currentGrammarModule + "\n" 
+            + "        " + fullExtName);
+        currentGrammarModule = currentGrammarName;
+        driverResult.addFileDependency(sdfExtension);
+      }
+
+      if (FileCommands.exists(strExtension)) {
+        String currentTransName =
+          FileCommands.hashFileName("sugarj", currentTransModule + fullExtName);
+        currentTransSTR = Environment.tmpDir + sep + currentTransName + ".str";
+        driverResult.generateFile(currentTransSTR,
+            "module " + currentTransName + "\n" 
+            + "imports " + currentTransModule + "\n"
+            + "        " + fullExtName);
+        currentTransModule = currentTransName;
+        driverResult.addFileDependency(strExtension);
+      }
+
+    } finally {
+      log.endTask();
+    }
+  }
+
+  private void checkCurrentGrammar() throws IOException, InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
+    log.beginTask("checking grammar", "CHECK current grammar");
+    
+    try {
+      SDFCommands.compile(currentGrammarSDF, currentGrammarModule, driverResult.getFileDependencies(), sdfParser, sdfContext, makePermissiveContext);
+    } finally {
+      log.endTask();
+    }
+  }
+  
+  private void checkCurrentTransformation() throws IOException, InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException{
+    log.beginTask("checking transformation", "CHECK current transformation");
+    
+    try {
+      STRCommands.compile(currentTransSTR, "main", driverResult.getFileDependencies(), strParser, strjContext);
+    } finally {
+      log.endTask();
+    }
+  }
+  
+  private static void initialize() throws IOException {
+    Environment.init();
+    
+    if (Environment.cacheDir != null)
+      FileCommands.createDir(Environment.cacheDir);
+    
+    FileCommands.createDir(Environment.bin);
+    
+    initializeCaches();
+    
+    allInputFiles = new ArrayList<URI>();
+    pendingInputFiles = new ArrayList<URI>();
+    currentlyProcessing = new ArrayList<URI>();
+  }
+  
+  private void init(String moduleName) throws FileNotFoundException, IOException, InvalidParseTableException {
+    this.moduleName = moduleName;
+
+    javaOutDir = FileCommands.newTempDir();
+    javaOutFile = null; 
+    // FileCommands.createFile(tmpOutdir, relModulePath + ".java");
+
+    mainModuleName = moduleName;
+
+    currentGrammarSDF = StdLib.initGrammar.getPath();
+    currentGrammarModule = StdLib.initGrammarModule;
+
+    currentTransSTR = StdLib.initTrans.getPath();
+    currentTransModule = StdLib.initTransModule;
+
+    // list of imports that contain SDF extensions
+    availableSDFImports = new ArrayList<String>();
+
+    // list of imports that contain Stratego extensions
+    availableSTRImports = new ArrayList<String>();
+
+    inputTreeBuilder = new RetractableTreeBuilder();
+    
+    // XXX need to load ANY parse table, preferably an empty one.
+    parser = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(StdLib.sdfTbl.getPath()), "Sdf2Module");
+    
+    sdfParser = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(StdLib.sdfTbl.getPath()), "Sdf2Module");
+    strParser = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(StdLib.strategoTbl.getPath()), "StrategoModule");
+
+    interp = new HybridInterpreter(); //TODO (ATermCommands.factory);
+    sdfContext = tools.init();
+    makePermissiveContext = make_permissive.init();
+    extractionContext = extraction.init();
+    strjContext = org.strategoxt.strj.strj.init();
+  }
+  
+  /**
+   * @param args
+   * @throws IOException
+   */
+  public static void main(String[] args) {
+    // log.log("This is the extensible java compiler.");
+    try {
+      initialize();
+      
+      String[] sources = handleOptions(args);
+
+      ClassLoader loader = new URLClassLoader(new URL[] {new File(Environment.src).toURI().toURL()});
+      
+      for (String source : sources)
+      {
+        URL url = loader.getResource(source);
+        
+        if (url == null)
+          throw new FileNotFoundException(source);
+        
+        URI uri = url.toURI();
+        
+        allInputFiles.add(uri);
+        pendingInputFiles.add(uri);
+      }
+      
+      for (URI source : allInputFiles) {
+        Result res = compile(source);
+        if (!DriverCLI.processResultCLI(res, source.getPath(), new File(".").getAbsolutePath()))
+          throw new RuntimeException("compilation of " + source.getPath() + " failed");
+      }
+      
+    } catch (Exception e) {
+      e.printStackTrace();
+    } catch (CLIError e) {
+      System.out.println(e.getMessage());
+      System.out.println();
+      e.showUsage();
+    }
+
+    // kills all remaining subprocesses, if any
+    // log.log("The extensible java compiler has done its job and says 'good bye'.");
+    System.exit(0);
+  }
+  
+  
+  /**
+   * This is thrown when a problem during option processing
+   * occurs.
+   *  
+   * @author rendel at informatik.uni-marburg.de
+   */
+  public static class CLIError extends Error {
+    private static final long serialVersionUID = -918505242287737113L;
+
+    private final Options options; 
+    
+    public CLIError(String message, Options options) {
+      super(message);
+      this.options = options;
+    }
+    
+    public void showUsage() {
+      showUsageMessage(options);
+    }
+  }
+
+  /**
+   * Parses and processes command line options. This method may
+   * set paths and flags in {@link CommandExecution} and
+   * {@link Environment} in the process.
+   * 
+   * @param args
+   *        the command line arguments to be parsed
+   * @return the source file to be processed
+   * @throws CLIError
+   *         when the command line is not correct
+   */
+  private static String[] handleOptions(String[] args) {
+    Options options = specifyOptions();
+
+    try {
+      CommandLine line = parseOptions(options, args);
+      return processOptions(options, line);
+    } catch (org.apache.commons.cli.ParseException e) {
+      throw new CLIError(e.getMessage(), options);
+    }
+  }
+
+  private static void showUsageMessage(Options options) {
+    HelpFormatter formatter = new HelpFormatter();
+    formatter.printHelp(
+        "java -java sugarj.jar [options] source-files",
+        options,
+        false);
+  }
+  
+  private static String[] processOptions(Options options, CommandLine line) throws org.apache.commons.cli.ParseException {
+    if (line.hasOption("help")) {
+      // TODO This is not exactly an error ...
+      throw new CLIError("help requested", options);
+    }
+
+    if (line.hasOption("verbose")) {
+      CommandExecution.SILENT_EXECUTION = false;
+      CommandExecution.SUB_SILENT_EXECUTION = false;
+      CommandExecution.FULL_COMMAND_LINE = true;
+    }
+
+    if (line.hasOption("silent-execution"))
+      CommandExecution.SILENT_EXECUTION = true;
+
+    if (line.hasOption("sub-silent-execution"))
+      CommandExecution.SUB_SILENT_EXECUTION = true;
+
+    if (line.hasOption("full-command-line"))
+      CommandExecution.FULL_COMMAND_LINE = true;
+
+    if (line.hasOption("cache-info"))
+      CommandExecution.CACHE_INFO = true;
+
+    if (line.hasOption("buildpath"))
+      for (String path : line.getOptionValue("buildpath").split(Environment.classpathsep))
+        Environment.includePath.add(path);
+
+    if (line.hasOption("sourcepath"))
+      for (String path : line.getOptionValue("sourcepath").split(Environment.classpathsep))
+        Environment.src = path;
+ 
+    if (line.hasOption("d"))
+      Environment.bin = line.getOptionValue("d");
+    
+    if (line.hasOption("cache"))
+      Environment.cacheDir = line.getOptionValue("cache");
+
+    if (line.hasOption("read-only-cache"))
+      Environment.rocache = true;
+    
+    if (line.hasOption("write-only-cache"))
+      Environment.wocache = true;
+    
+    if (line.hasOption("gen-java"))
+      Environment.generateJavaFile = true;
+    
+    if (line.hasOption("atomic-imports"))
+      Environment.atomicImportParsing = true;
+
+    if (line.hasOption("no-checking"))
+      Environment.noChecking = true;
+
+    String[] sources = line.getArgs();
+    if (sources.length < 1)
+      throw new CLIError("No source files specified.", options);
+
+    return sources;
+  }
+
+  private static CommandLine parseOptions(Options options, String[] args) throws org.apache.commons.cli.ParseException {
+    CommandLineParser parser = new GnuParser();
+    return parser.parse(options, args);
+  }
+
+  private static Options specifyOptions() {
+    Options options = new Options();
+
+    options.addOption(
+        "v", 
+        "verbose", 
+        false, 
+        "show verbose output");
+
+    options.addOption(
+        null, 
+        "silent-execution", 
+        false, 
+        "try to be silent");
+
+    options.addOption(
+        null,
+        "sub-silent-execution",
+        false,
+        "do not display output of subprocesses");
+
+    options.addOption(
+        null,
+        "full-command-line",
+        false,
+        "show all arguments to subprocesses");
+
+    options.addOption(
+        null, 
+        "cache-info", 
+        false, 
+        "show where files are cached");
+
+    options.addOption(
+        null,
+        "buildpath",
+        true,
+        "Specify where to find compiled files. Multiple paths can be given separated by \'" + Environment.classpathsep + "\'.");
+
+    options.addOption(
+        null,
+        "sourcepath",
+        true,
+        "Specify where to find source files. Multiple paths can be given separated by \'" + Environment.classpathsep + "\'.");
+
+    options.addOption(
+        "d", 
+        null,
+        true, 
+        "Specify where to place compiled files");
+
+    options.addOption(
+        null, 
+        "help", 
+        false, 
+        "Print this synopsis of options");
+    
+    options.addOption(
+        null,
+        "cache",
+        true,
+        "Specifiy a directory for caching.");
+    
+    options.addOption(
+        null,
+        "read-only-cache",
+        false,
+        "Specify the cache to be read-only.");
+
+    options.addOption(
+        null,
+        "write-only-cache",
+        false,
+        "Specify the cache to be write-only.");
+    
+    options.addOption(
+        null,
+        "imports-changed",
+        false,
+        "Declare that the imported modules have changed since last compilation.");
+    
+    options.addOption(
+        null,
+        "gen-java",
+        false,
+        "Generate the resulting Java file in the source folder.");
+
+    options.addOption(
+        null,
+        "atomic-imports",
+        false,
+        "Parse all import statements simultaneously.");
+
+    options.addOption(
+        null,
+        "no-checking",
+        false,
+        "Do not check resulting SDF and Stratego files.");
+    
+    return options;
+  }
+
+  @SuppressWarnings("unchecked")
+  private static synchronized void initializeCaches() throws IOException {
+    if (Environment.cacheDir == null)
+      return;
+    
+    String sdfCache = FileCommands.findFile("sdfCache" + "-" + VERSION, Environment.cacheDir);
+    String strCache = FileCommands.findFile("strCache" + "-" + VERSION, Environment.cacheDir);
+
+    if (SDFCommands.sdfCache == null && sdfCache != null)
+      try {
+        log.log("load sdf cache from " + sdfCache);
+          SDFCommands.sdfCache =
+              (ModuleKeyCache<String>) new ObjectInputStream(new FileInputStream(
+                  sdfCache)).readObject();
+      } 
+      catch (Exception e) {
+        SDFCommands.sdfCache = new ModuleKeyCache<String>();
+        e.printStackTrace();
+      }
+    else if (SDFCommands.sdfCache == null)
+      SDFCommands.sdfCache = new ModuleKeyCache<String>();
+    
+    if (STRCommands.strCache == null && strCache != null)
+      try {
+        log.log("load str cache from " + strCache);
+        STRCommands.strCache =
+            (ModuleKeyCache<String>) new ObjectInputStream(new FileInputStream(
+                strCache)).readObject();
+      } 
+      catch (Exception e) {
+        STRCommands.strCache = new ModuleKeyCache<String>();
+        e.printStackTrace();
+      }
+    else if (STRCommands.strCache == null)
+      STRCommands.strCache = new ModuleKeyCache<String>();
+  }
+
+  
+  private static synchronized void storeCaches() throws IOException {
+    if (Environment.cacheDir == null || Environment.rocache)
+      return;
+    
+    String sdfCache = FileCommands.findFile("sdfCache" + "-" + VERSION , Environment.cacheDir);
+    String strCache = FileCommands.findFile("strCache" + "-" + VERSION, Environment.cacheDir);
+
+    if (sdfCache == null) {
+      sdfCache = Environment.cacheDir + sep + "sdfCache" + "-" + VERSION;
+      FileCommands.createFile(sdfCache);
+    }
+
+    if (strCache == null) {
+      strCache = Environment.cacheDir + sep + "strCache" + "-" + VERSION;
+      FileCommands.createFile(strCache);
+    }
+    
+    
+    if (SDFCommands.sdfCache != null) {
+      log.log("store sdf cache in " + sdfCache);
+      log.log("sdf cache size: " + SDFCommands.sdfCache.size());
+      new ObjectOutputStream(new FileOutputStream(sdfCache)).writeObject(SDFCommands.sdfCache);
+    }
+    
+    if (STRCommands.strCache != null) {
+      log.log("store str cache in " + strCache);
+      log.log("str cache size: " + STRCommands.strCache.size());
+      new ObjectOutputStream(new FileOutputStream(strCache)).writeObject(STRCommands.strCache);
+    }
+  }
+
+  private String relPackageNameSep() {
+    if (relPackageName == null || relPackageName.isEmpty())
+      return "";
+    
+    return relPackageName + sep;
+  }
+  
+  /**
+   * @return the non-desugared syntax tree of the complete file.
+   */
+  private IStrategoTerm makeSugaredSyntaxTree() {
+    
+    // XXX empty lists => no tokens
+    IStrategoTerm packageDecl = ATermCommands.makeSome(sugaredPackageDecl, inputTreeBuilder.getTokenizer().getTokenAt(0));
+    IStrategoTerm imports = 
+      ATermCommands.makeList("JavaImportDec*", ImploderAttachment.getRightToken(packageDecl), sugaredImportDecls);
+    IStrategoTerm body =
+      ATermCommands.makeList("TypeOrSugarDec*", ImploderAttachment.getRightToken(imports), sugaredTypeOrSugarDecls);
+    
+    IStrategoTerm term =
+      ATermCommands.makeAppl("SugarCompilationUnit", "SugarCompilationUnit", 3,
+        packageDecl,
+        imports,
+        body);
+    
+    ImploderAttachment.getTokenizer(term).setAst(term);
+    ImploderAttachment.getTokenizer(term).initAstNodeBinding();
+    
+    return term;
+  }
+}

Copied: sugarj/trunk/editor/.settings/org.eclipse.jdt.core.prefs (from r22497, sugarj/branches/SugarJ-editor-services/editor/.settings/org.eclipse.jdt.core.prefs)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/editor/.settings/org.eclipse.jdt.core.prefs	Mon Apr 11 11:07:19 2011	(r22498, copy of r22497, sugarj/branches/SugarJ-editor-services/editor/.settings/org.eclipse.jdt.core.prefs)
@@ -0,0 +1,8 @@
+#Tue Apr 05 16:27:44 CEST 2011
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
+org.eclipse.jdt.core.compiler.compliance=1.6
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.6

Copied: sugarj/trunk/editor/META-INF/MANIFEST.MF (from r22497, sugarj/branches/SugarJ-editor-services/editor/META-INF/MANIFEST.MF)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/editor/META-INF/MANIFEST.MF	Mon Apr 11 11:07:19 2011	(r22498, copy of r22497, sugarj/branches/SugarJ-editor-services/editor/META-INF/MANIFEST.MF)
@@ -0,0 +1,34 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: org.sugarj.editor
+Bundle-SymbolicName: org.sugarj.editor;singleton:=true
+Bundle-Version: 1.0.0.qualifier
+Bundle-Activator: org.sugarj.editor.Activator
+Export-Package: org.sugarj.editor;
+  uses:="org.eclipse.imp.preferences,
+   org.eclipse.imp.parser,
+   org.eclipse.imp.runtime,
+   org.strategoxt.imp.runtime.services,
+   org.spoofax.interpreter.terms,
+   org.strategoxt.imp.runtime.parser,
+   org.osgi.framework,
+   org.strategoxt.imp.runtime.dynamicloading",
+ org.sugarj.editor.strategies
+Require-Bundle: org.eclipse.core.runtime,
+ org.eclipse.core.resources,
+ org.eclipse.imp.runtime,
+ org.eclipse.ui,
+ lpg.runtime,
+ org.eclipse.jface.text,
+ org.eclipse.ui.editors,
+ org.eclipse.ui.workbench.texteditor,
+ org.strategoxt.imp.runtime,
+ org.spoofax.jsglr,
+ org.strategoxt.strj,
+ org.sugarj.compiler,
+ org.sugarj.stdlib,
+ org.eclipse.ant.core,
+ org.eclipse.jdt.core
+Bundle-RequiredExecutionEnvironment: JavaSE-1.6
+Import-Package: org.osgi.framework;version="1.3.0"
+Bundle-ActivationPolicy: lazy

Copied: sugarj/trunk/editor/build.generated.xml (from r22497, sugarj/branches/SugarJ-editor-services/editor/build.generated.xml)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/editor/build.generated.xml	Mon Apr 11 11:07:19 2011	(r22498, copy of r22497, sugarj/branches/SugarJ-editor-services/editor/build.generated.xml)
@@ -0,0 +1,451 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${build}/org/sugarj/editor/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la org.sugarj.editor.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg line="${aster-input}"/>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete dir="${src-gen}/trans"/>
+        </target>
+    </project>
\ No newline at end of file

Copied: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParseControllerGenerated.java (from r22492, sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParseControllerGenerated.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParseControllerGenerated.java	Mon Apr 11 11:07:19 2011	(r22498, copy of r22492, sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParseControllerGenerated.java)
@@ -0,0 +1,108 @@
+package org.sugarj.editor;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileInputStream;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class SugarJParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("SugarJ");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    SugarJParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = SugarJParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = SugarJParseControllerGenerated.class.getResourceAsStream(TABLE);
+      boolean filesystem = false;
+      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
+      { 
+        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
+        filesystem = true;
+      }
+      if(table == null && new File("./" + TABLE).exists())
+      { 
+        table = new FileInputStream("./" + TABLE);
+        filesystem = true;
+      }
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
+      descriptor.setAttachmentProvider(SugarJParseControllerGenerated.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return SugarJParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Copied: sugarj/trunk/stdlib/org/sugarj/transformations/GenerateSignatures.str (from r22494, sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/transformations/GenerateSignatures.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/stdlib/org/sugarj/transformations/GenerateSignatures.str	Mon Apr 11 11:07:19 2011	(r22498, copy of r22494, sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/transformations/GenerateSignatures.str)
@@ -0,0 +1,142 @@
+module org/sugarj/transformations/GenerateSignatures
+
+imports org/sugarj/languages/Sdf2
+        org/sugarj/languages/Stratego
+        org/sugarj/languages/SugarJ
+        org/sugarj/init/InitTrans
+
+
+
+strategies
+  desugar =
+    changed-tree(gen-signature)
+
+
+rules
+
+  gen-signature :
+    SugarBody(elems) -> SugarBody(res)
+    where <(map(gen-signature-elem <+ ![<id>])
+            ; concat)> elems => res
+
+
+rules
+
+  gen-signature-elem :
+    grammar-elem(grammar) -> [ Locked(grammar-elem(grammar))
+                             , transformation-elem(sig)
+                             ]
+    where <gen-signature-from-grammar> grammar => sig
+
+
+rules
+
+  gen-signature-from-grammar :
+    syntax(productions) -> Signature([Constructors(opdecls)])
+    where <(map(ensure-list(gen-opdecl-from-prod)) ; concat)> productions => opdecls
+
+  gen-signature-from-grammar :
+    context-free-syntax(productions) -> Signature([Constructors(opdecls)])
+    where <(map(ensure-list(gen-opdecl-from-prod)) ; concat)> productions => opdecls
+
+
+rules
+
+  gen-opdecl-from-prod :
+    prod(arg-symbols, res-symbol, attributes) -> OpDecl(cons, type)
+    where <get-cons-attribute> attributes => cons
+          ; <get-prod-type> (arg-symbols, res-symbol) => type
+
+  get-cons-attribute :
+    attrs(attributes) -> cons
+    where <getfirst(
+             ?term(
+                default(
+                  appl(
+                    unquoted("cons")
+                  , [fun(quoted(<id>))]
+                  )
+                )
+              )
+           )> attributes => consQuoted
+          ; <unquote(?'"')> consQuoted => cons
+
+  get-prod-type :
+    ([], res) -> type
+    where <get-symbol-type> res => type
+
+  get-prod-type :
+    (args, res) -> type
+    where <(map(ensure-list(get-symbol-type)) ; concat)> args => arg-types
+          ; <get-symbol-type> res => res-type
+          ; <(?[]
+              < !res-type
+              + !FunType(arg-types, res-type))> arg-types => type
+
+  ensure-list(s) =
+    s
+    ; (is-list < id + ![<id>])
+    <+ ![]
+
+
+rules
+
+  get-symbol-type :
+    sym -> ConstType(Sort(name, []))
+    where <get-symbol-name> sym => name
+
+  get-symbol-name :
+    start() -> "<START>"
+
+  get-symbol-name :
+    file-start() -> "<Start>"
+
+  get-symbol-name :
+    label(_, sym) -> name
+    where <get-symbol-name> sym => name
+
+  get-symbol-name :
+    sort(name) -> name
+
+  get-symbol-name :
+    parameterized-sort(name, _) -> name
+
+  get-symbol-name :
+    lifting(sym) -> name
+    where <get-symbol-name> sym => name
+
+  get-symbol-name :
+    seq(_, _) -> "seq"
+
+  get-symbol-name :
+    opt(_) -> "opt"
+
+  get-symbol-name :
+    iter(_) -> "iter"
+
+  get-symbol-name :
+    iter-star(_) -> "iter-star"
+
+  get-symbol-name :
+    iter-sep(_, _) -> "iter-sep"
+
+  get-symbol-name :
+    iter-star-sep(_, _) -> "iter-star-sep"
+
+  get-symbol-name :
+    tuple(_, _) -> "tuple"
+
+  get-symbol-name :
+    alt(_, _) -> "alt"
+
+  get-symbol-name :
+    cf(sym) -> <concat-strings> ["cf-", name]
+    where <get-symbol-name> sym => name
+
+  get-symbol-name :
+    lex(sym) -> <concat-strings> ["lex-", name]
+    where <get-symbol-name> sym => name
+
+  get-symbol-name :
+    varsym(sym) -> <concat-strings> ["var-", name]
+    where <get-symbol-name> sym => name
\ No newline at end of file

From seba at informatik.uni-marburg.de  Mon Apr 11 14:23:36 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 11 Apr 2011 12:23:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22499 - sugarj/trunk
Message-ID: <20110411122336.940947F8002@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Mon Apr 11 12:23:36 2011
New Revision: 22499
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22499&sc=1

Log:
updated readme

Modified:
   sugarj/trunk/readme.txt

Modified: sugarj/trunk/readme.txt
==============================================================================
--- sugarj/trunk/readme.txt	Mon Apr 11 11:07:19 2011	(r22498)
+++ sugarj/trunk/readme.txt	Mon Apr 11 12:23:36 2011	(r22499)
@@ -1,59 +1,50 @@
-SugarJ compiler and case studies: standalone
-Released: December 20, 2010
+SugarJ compiler
+Released: April 11, 2011
 Contact: seba {at} informatik uni-marburg de
 
 
 Installing SugarJ
 -----------------
 
-SugarJ requires working installations of the following software:
-
- * Java 6
- * ATerm (http://strategoxt.org/Stratego/StrategoDownload)
- * SDF (http://strategoxt.org/Stratego/StrategoDownload)
- * Stratego (http://strategoxt.org/Stratego/StrategoDownload)
- * Java-front (http://strategoxt.org/Stratego/JavaFront)
-
-Please make sure that the commands installed by those tools are accesible via
-your PATH environment variable.
+SugarJ is mostly self-contained and only requires an installation of a Java 6
+runtime.
 
 
 Invoking SugarJ
 ---------------
 
-To call the SugarJ compiler, issue the following command on your command line:
-
-> java -jar sugarj.jar
-
-The general format for compiling SugarJ is
-
-> java -java sugarj.jar [options] source-files
-
-Likely, you want use some standard options:
-
-> java -Xss64M -Xmx1024M -jar sugarj.jar --cache cache --sourcepath example -d bin example/pair/Sugar.sugj
-
-For convenience, you can equivalently call
-
-> ./sugarjc.sh --sourcepath example -d bin example/pair/Sugar.sugj
+We have included a shell script `sugarjc.sh` for calling the SugarJ
+compiler. Its main duty is to include the numerous library dependencies in the
+class path, and to set up a few reasonable compiler options.
+
+> ./sugarjc.sh --sourcepath case-studies/ \
+>    javaclosure/Closure.sugj \
+>    javaclosure/concrete/Sugar.sugj \
+>    javaclosure/concrete/Test.sugj
 
 
 
 Compiler options
 ----------------
 
-    --buildpath <arg>        Specify where to find compiled files. Multiple paths can be given separated by ':'.
+    --atomic-imports         Parse all import statements simultaneously.
+    --buildpath <arg>        Specify where to find compiled files.
+                             Multiple paths can be given separated by ':'.
     --cache <arg>            Specifiy a directory for caching.
     --cache-info             show where files are cached
     -d <arg>                 Specify where to place compiled files
     --full-command-line      show all arguments to subprocesses
-    --gen-java               Generate the resulting Java file in the source folder.
+    --gen-java               Generate the resulting Java file in the
+                             source folder.
     --help                   Print this synopsis of options
-    --imports-changed        Declare that the imported modules have changed since last compilation.
+    --imports-changed        Declare that the imported modules have
+                             changed since last compilation.
+    --no-checing             Do not check resulting SDF and Stratego
+                             files.
     --read-only-cache        Specify the cache to be read-only.
     --silent-execution       try to be silent
-    --sourcepath <arg>       Specify where to find source files. Multiple paths can be given separated by ':'.
-    --stdlibdir <arg>        Specifiy the directory containing the standard library.
+    --sourcepath <arg>       Specify where to find source files. Multiple
+                             paths can be given separated by ':'.
     --sub-silent-execution   do not display output of subprocesses
-    -v,--verbose             show verbose output
+     -v,--verbose            show verbose output
     --write-only-cache       Specify the cache to be write-only.

From seba at informatik.uni-marburg.de  Mon Apr 11 16:01:06 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 11 Apr 2011 14:01:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22500 -
	sugarj/trunk/case-studies/pair
Message-ID: <20110411140106.2423F7F801C@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Mon Apr 11 14:01:05 2011
New Revision: 22500
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22500&sc=1

Log:
case study fix

Modified:
   sugarj/trunk/case-studies/pair/Sugar.sugj

Modified: sugarj/trunk/case-studies/pair/Sugar.sugj
==============================================================================
--- sugarj/trunk/case-studies/pair/Sugar.sugj	Mon Apr 11 12:23:36 2011	(r22499)
+++ sugarj/trunk/case-studies/pair/Sugar.sugj	Mon Apr 11 14:01:05 2011	(r22500)
@@ -17,5 +17,5 @@
       PType(t1, t2) -> |[ pair.Pair<~t1, ~t2> ]| 
 
     desugar-pair-expr : 
-      PExpr(e1, e2) -> |[ new pair.Pair.create(~e1, ~e2) ]|
+      PExpr(e1, e2) -> |[ pair.Pair.create(~e1, ~e2) ]|
 }
\ No newline at end of file

From seba at informatik.uni-marburg.de  Mon Apr 11 16:09:25 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 11 Apr 2011 14:09:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22501 - in
	sugarj/trunk: compiler/org/sugarj/driver editor/editor
	stdlib/org/sugarj/init stdlib/org/sugarj/languages
	stdlib/org/sugarj/stdlib stdlib/org/sugarj/transformat...
Message-ID: <20110411140925.CD4912B801F@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Mon Apr 11 14:09:25 2011
New Revision: 22501
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22501&sc=1

Log:
externalized initial editor services into SugarJ's standard library

Added:
   sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv
   sugarj/trunk/stdlib/org/sugarj/languages/EditorServices.tbl   (contents, props changed)
Modified:
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/JavaCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
   sugarj/trunk/editor/editor/SugarJ-Builders.esv
   sugarj/trunk/editor/editor/SugarJ-Colorer.generated.esv
   sugarj/trunk/editor/editor/SugarJ-Completions.esv
   sugarj/trunk/editor/editor/SugarJ-Completions.generated.esv
   sugarj/trunk/editor/editor/SugarJ-Folding.generated.esv
   sugarj/trunk/editor/editor/SugarJ-Outliner.generated.esv
   sugarj/trunk/editor/editor/SugarJ-Syntax.generated.esv
   sugarj/trunk/stdlib/org/sugarj/stdlib/StdLib.java
   sugarj/trunk/stdlib/org/sugarj/transformations/GenerateSignatures.str

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Mon Apr 11 14:01:05 2011	(r22500)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Mon Apr 11 14:09:25 2011	(r22501)
@@ -53,7 +53,7 @@
  */
 public class Driver{
   
-  public final static String VERSION = "editor-services-0.1";
+  public final static String VERSION = "editor-base-0.2";
   
   private static class Key {
     private String source;
@@ -111,6 +111,7 @@
   private RetractableTreeBuilder inputTreeBuilder;
   private JSGLRI sdfParser;
   private JSGLRI strParser;
+  private JSGLRI editorServicesParser;
   private HybridInterpreter interp;
   private JSGLRI parser;
   private Context sdfContext;
@@ -229,10 +230,8 @@
       init(moduleName);
 
       remainingInput = source;
-      
-      driverResult.addEditorService(
-        ATermCommands.atermFromString(
-          "Builders(\"sugarj checking\", [SemanticObserver(Strategy(\"sugarj-analyze\"))])"));
+  
+      initEditorServices();
 
       boolean done = false;
       while (!done) {
@@ -881,6 +880,22 @@
     }
   }
   
+  private void initEditorServices() throws IOException, TokenExpectedException, BadTokenException, SGLRException {
+    driverResult.addEditorService(
+        ATermCommands.atermFromString(
+          "Builders(\"sugarj checking\", [SemanticObserver(Strategy(\"sugarj-analyze\"))])"));
+    
+    IStrategoTerm initEditor = editorServicesParser.parse(new FileInputStream(StdLib.initEditor.getPath()), StdLib.initEditor.getPath());
+    
+    IStrategoTerm services = ATermCommands.getApplicationSubterm(initEditor, "Module", 2);
+    
+    if (!ATermCommands.isList(services))
+      throw new IllegalStateException("initial editor ill-formed");
+    
+    for (IStrategoTerm service : ATermCommands.getList(services))
+      driverResult.addEditorService(service);
+  }
+  
   private static void initialize() throws IOException {
     Environment.init();
     
@@ -924,6 +939,7 @@
     
     sdfParser = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(StdLib.sdfTbl.getPath()), "Sdf2Module");
     strParser = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(StdLib.strategoTbl.getPath()), "StrategoModule");
+    editorServicesParser = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(StdLib.editorServicesTbl.getPath()), "Module");
 
     interp = new HybridInterpreter(); //TODO (ATermCommands.factory);
     sdfContext = tools.init();

Modified: sugarj/trunk/compiler/org/sugarj/driver/JavaCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/JavaCommands.java	Mon Apr 11 14:01:05 2011	(r22500)
+++ sugarj/trunk/compiler/org/sugarj/driver/JavaCommands.java	Mon Apr 11 14:09:25 2011	(r22501)
@@ -35,8 +35,6 @@
     
     cpBuilder.append(dir);
     
-    // TODO change to ejc
-    
     String[] cmd = new String[] {
         "-cp", cpBuilder.toString(),
         "-d", FileCommands.toWindowsPath(dir),

Modified: sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Mon Apr 11 14:01:05 2011	(r22500)
+++ sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Mon Apr 11 14:09:25 2011	(r22501)
@@ -62,7 +62,7 @@
       "-Idef", StdLib.javaDef.getPath(),
       "-Idef", StdLib.sdfDef.getPath(),
       "-Idef", StdLib.strategoDef.getPath(),
-      "-Idef", StdLib.editorServiceDef.getPath(),
+      "-Idef", StdLib.editorServicesDef.getPath(),
       "-I", StdLib.stdLibDir.getPath(),
     }));
     

Modified: sugarj/trunk/editor/editor/SugarJ-Builders.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Builders.esv	Mon Apr 11 14:01:05 2011	(r22500)
+++ sugarj/trunk/editor/editor/SugarJ-Builders.esv	Mon Apr 11 14:09:25 2011	(r22501)
@@ -14,16 +14,5 @@
   provider : include/sugarj.ctree                                                                             
   provider : include/sugarj-java.jar                                                                          
                                                                                                               
-  // observer : editor-analyze                                                                                   
-                                                                                                              
-  builder  : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
   builder  : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (source)  
                                                                                                               
-
-refactorings
-                                                                                        
-  pp-table                  : get-pp-table                                              
-  pretty-print              : prettyprint                                               
-                                                                                        
-                                                                                        
-  // on save: generate-java                                                             
\ No newline at end of file

Modified: sugarj/trunk/editor/editor/SugarJ-Colorer.generated.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Colorer.generated.esv	Mon Apr 11 14:01:05 2011	(r22500)
+++ sugarj/trunk/editor/editor/SugarJ-Colorer.generated.esv	Mon Apr 11 14:09:25 2011	(r22501)
@@ -15,32 +15,4 @@
   //   environment _.ToMetaExpr:   _ 220 230 200                                             
   //   environment _.FromMetaExpr: _ white                                                   
 
-colorer Default, token-based highlighting
-                                  
-  keyword    : 127 0 85 bold      
-  identifier : default            
-  string     : blue               
-  number     : darkgreen          
-  var        : 255 0 100 italic   
-  operator   : 0 0 128            
-  layout     : 63 127 95 italic   
-
-colorer System colors
-                            
-  darkred   = 128 0 0       
-  red       = 255 0 0       
-  darkgreen = 0 128 0       
-  green     = 0 255 0       
-  darkblue  = 0 0 128       
-  blue      = 0 0 255       
-  cyan      = 0 255 255     
-  magenta   = 255 0 255     
-  yellow    = 255 255 0     
-  white     = 255 255 255   
-  black     = 0 0 0         
-  gray      = 128 128 128   
-  grey      = gray          
-  orange    = 255 165 0     
-  pink      = 255 105 180   
-  brown     = 139 69 19     
-  default   = _             
\ No newline at end of file
+       
\ No newline at end of file

Modified: sugarj/trunk/editor/editor/SugarJ-Completions.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Completions.esv	Mon Apr 11 14:01:05 2011	(r22500)
+++ sugarj/trunk/editor/editor/SugarJ-Completions.esv	Mon Apr 11 14:09:25 2011	(r22501)
@@ -8,21 +8,3 @@
   //                                                               
   // See the imported file for a brief introduction and examples.  
                                                                    
-
-completions
-                                                                 
-  // Syntax completion:                                          
-                                                                 
-  completion template : Start =      "module " <m> (blank)       
-                                                                 
-  completion template : Definition = "entity " <e> " {}" (blank) 
-                                                                 
-  completion template : Property =   <x> " : " <T> (blank)       
-                                                                 
-
-completions
-  // Semantic (identifier) completion:   
-                                         
-  completion proposer                  : editor-complete
-                                         
-  completion trigger                   : ":"
\ No newline at end of file

Modified: sugarj/trunk/editor/editor/SugarJ-Completions.generated.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Completions.generated.esv	Mon Apr 11 14:01:05 2011	(r22500)
+++ sugarj/trunk/editor/editor/SugarJ-Completions.generated.esv	Mon Apr 11 14:09:25 2011	(r22501)
@@ -41,18 +41,6 @@
   // All semantic services may make use of the dynamic rules created by the observer.     
 
 completions
-                                      
-  // Derived completions may follow   
-                                      
-  completion keyword                : "\\TOP"
-  completion keyword                : "\\EOF"
-  completion keyword                : "\\BOT"
-  completion keyword                : "\\LABEL_START"
-  completion keyword                : "-CF"
-  completion keyword                : "-LEX"
-  completion keyword                : "-VAR"
-  completion keyword                : "\\n"
-  completion keyword                : "\\t"
-  completion keyword                : "<START>"
-  completion keyword                : "<Start>"
-  completion keyword                : "\n"
\ No newline at end of file
+                                     
+  // Derived completions may follow  
+                                     
\ No newline at end of file

Modified: sugarj/trunk/editor/editor/SugarJ-Folding.generated.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Folding.generated.esv	Mon Apr 11 14:01:05 2011	(r22500)
+++ sugarj/trunk/editor/editor/SugarJ-Folding.generated.esv	Mon Apr 11 14:09:25 2011	(r22501)
@@ -19,92 +19,4 @@
   // To disable a folding rule defined elsewhere, add a (disabled) annotation:
   //
   //   Definition._ (disabled)
-  
-  SugarCompilationUnit.SugarCompilationUnit
-  JavaPackageDec.PackageDec
-  JavaExpr.Lit
-  JavaStringLiteral
-  JavaStringLiteral.String
-  JavaVarDecId.ArrayVarDecId
-  OptJavaTypeParams0
-  JavaTypeParams.TypeParams
-  JavaTypeParam.TypeParam
-  OptJavaTypeBound0
-  JavaTypeBound.TypeBound
-  OptJavaThrows0
-  JavaThrows.ThrowsDec
-  JavaClassType.ClassType
-  OptJavaInterfaces0
-  JavaInterfaces.ImplementsDec
-  JavaInterfaceType.InterfaceType
-  OptJavaExtendsInterfaces0
-  JavaExtendsInterfaces.ExtendsInterfaces
-  JavaMethodSpec.SuperMethod
-  JavaMethodSpec.QSuperMethod
-  JavaMethodSpec.GenericMethod
-  JavaPackageName.PackageName
-  JavaImportDec.TypeImportOnDemandDec
-  SugarDec.SugarDec
-  SugarDecHead.SugarDecHead
-  SugarBody.SugarBody
-  ListStarOfSugarDefElem0
-  SugarDefElem.grammar-elem
-  Grammar.sorts
-  Grammar.syntax
-  ListStarOfSdf2Production0
-  Sdf2Production.prod
-  Sdf2Attributes.attrs
-  Sdf2Attribute.term
-  Sdf2ATermAttribute.default
-  Sdf2ModuleName.parameterized
-  Sdf2Production.prefix-fun
-  Grammar.lexical-syntax
-  Grammar.context-free-syntax
-  Grammar.variables
-  Grammar.lexical-variables
-  Grammar.priorities
-  ListStarOfSdf2Priority0
-  Sdf2Priority.chain
-  Sdf2Group.with-arguments
-  Sdf2ArgumentIndicator.default
-  Sdf2Group.prods-group
-  Sdf2Group.assoc-group
-  Sdf2Priority.assoc
-  Grammar.lexical-priorities
-  Grammar.context-free-priorities
-  Grammar.restrictions
-  ListStarOfSdf2Restriction0
-  Sdf2Restriction.follow
-  Grammar.lexical-restrictions
-  Grammar.context-free-restrictions
-  Grammar.aliases
-  ListStarOfSdf2Alias0
-  Sdf2Alias.alias
-  SugarDefElem.transformation-elem
-  Transformation.Strategies
-  StrategoTypedid.VarDec
-  StrategoConstType
-  StrategoConstType.ConstType
-  StrategoConstType
-  StrategoStrategy.Scope
-  StrategoRuleDec.RDec
-  StrategoRuleDec.RDecT
-  ListStarOfStrategoId0
-  StrategoStrategyDef.ExtSDef
-  Transformation.Signature
-  StrategoSdecl.Sorts
-  StrategoSdecl.Constructors
-  StrategoOpdecl.OpDecl
-  StrategoOpdecl.OpDeclQ
-  StrategoOpdecl.OpDeclInj
-  StrategoOpdecl.ExtOpDecl
-  StrategoOpdecl.ExtOpDeclQ
-  StrategoOpdecl.ExtOpDeclInj
-  Transformation.Rules
-  Transformation.Overlays
-  StrategoOverlay.OverlayNoArgs
-  StrategoOverlay.Overlay
-  Transformation.Desugarings
-  Desugaring.PureDesugaring
-  Desugaring.InjectDesugaring
-  NativeSugarDecHead.NativeSugarDecHead
\ No newline at end of file
+  
\ No newline at end of file

Modified: sugarj/trunk/editor/editor/SugarJ-Outliner.generated.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Outliner.generated.esv	Mon Apr 11 14:01:05 2011	(r22500)
+++ sugarj/trunk/editor/editor/SugarJ-Outliner.generated.esv	Mon Apr 11 14:09:25 2011	(r22501)
@@ -11,58 +11,4 @@
   //   <sort>._
   //
   //   _.<constructor>
-  
-  JavaAnno.Anno
-  JavaTypeDecSpec.Member
-  JavaVarDecId.ArrayVarDecId
-  JavaMethodDecHead.MethodDecHead
-  JavaFormalParam.Param
-  JavaFormalParam.VarArityParam
-  JavaMethodDecHead.DeprMethodDecHead
-  JavaEnumDecHead.EnumDecHead
-  JavaClassDecHead.ClassDecHead
-  JavaStm.For
-  JavaStm.For
-  JavaStm.Synchronized
-  JavaAnnoDecHead.AnnoDecHead
-  JavaAnnoElemDec.AnnoMethodDec
-  JavaInterfaceDecHead.InterfaceDecHead
-  JavaAbstractMethodDec.AbstractMethodDec
-  JavaAbstractMethodDec.DeprAbstractMethodDec
-  JavaConstrHead.ConstrDecHead
-  JavaConstrInv.QSuperConstrInv
-  JavaExpr.QNewInstance
-  JavaArrayCreationExpr.NewArray
-  JavaArrayCreationExpr.NewArray
-  JavaExpr.Invoke
-  JavaMethodSpec.GenericMethod
-  SugarDecHead.SugarDecHead
-  Sdf2Symbol.parameterized-sort
-  Sdf2Production.prod
-  Sdf2ATerm.appl
-  Sdf2ModuleName.parameterized
-  Sdf2Production.prefix-fun
-  Sdf2Restriction.follow
-  StrategoStrategyDef.SDefT
-  StrategoFunType.FunType
-  StrategoSort.Sort
-  StrategoStrategy.CallT
-  StrategoPreTerm.Op
-  StrategoPreTerm.OpQ
-  StrategoPreTerm.ListTail
-  StrategoTerm.AnnoList
-  StrategoStrategy.CallDynamic
-  StrategoStrategy.PrimT
-  StrategoStrategy.Call
-  StrategoStrategy.Prim
-  StrategoStrategy.CongQ
-  StrategoRule.Rule
-  StrategoRuleDec.RDec
-  StrategoRuleDec.RDecT
-  StrategoStrategyDef.ExtSDefInl
-  StrategoStrategyDef.ExtSDef
-  StrategoStrategyDef.SDef
-  StrategoRuleDef.RDef
-  StrategoRuleDef.RDefT
-  StrategoOverlay.Overlay
-  NativeSugarDecHead.NativeSugarDecHead
\ No newline at end of file
+  
\ No newline at end of file

Modified: sugarj/trunk/editor/editor/SugarJ-Syntax.generated.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Syntax.generated.esv	Mon Apr 11 14:01:05 2011	(r22500)
+++ sugarj/trunk/editor/editor/SugarJ-Syntax.generated.esv	Mon Apr 11 14:09:25 2011	(r22501)
@@ -1,21 +1,3 @@
 module SugarJ-Syntax.generated
 
 language Syntax properties (static defaults)
-                                           
-  // Comment constructs:                   
-  line comment                           : "//"
-  block comment                          : "/*" * "*/"
-                                           
-  // Fences (used for matching,            
-  // inserting, indenting brackets):       
-  fences                                 : [ ]
-                                           ( )
-                                           { }
-                                           
-  // Automatic indent hints                
-  // (indent after these tokens):          
-  indent after                           : "="
-                                           ":"
-                                           
-  // Regular expression for identifiers:   
-  identifier lexical                     : "[A-Za-z0-9_]+"
\ No newline at end of file

Added: sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv	Mon Apr 11 14:09:25 2011	(r22501)
@@ -0,0 +1,31 @@
+module org/sugarj/init/initEditor
+
+colorer Default, token-based highlighting
+                                  
+  keyword    : 127 0 85 bold      
+  identifier : default            
+  string     : blue               
+  number     : darkgreen          
+  var        : 255 0 100 italic   
+  operator   : 0 0 128            
+  layout     : 63 127 95 italic   
+
+colorer System colors
+                            
+  darkred   = 128 0 0       
+  red       = 255 0 0       
+  darkgreen = 0 128 0       
+  green     = 0 255 0       
+  darkblue  = 0 0 128       
+  blue      = 0 0 255       
+  cyan      = 0 255 255     
+  magenta   = 255 0 255     
+  yellow    = 255 255 0     
+  white     = 255 255 255   
+  black     = 0 0 0         
+  gray      = 128 128 128   
+  grey      = gray          
+  orange    = 255 165 0     
+  pink      = 255 105 180   
+  brown     = 139 69 19     
+  default   = _      

Added: sugarj/trunk/stdlib/org/sugarj/languages/EditorServices.tbl
==============================================================================
Binary file. No diff available.

Modified: sugarj/trunk/stdlib/org/sugarj/stdlib/StdLib.java
==============================================================================
--- sugarj/trunk/stdlib/org/sugarj/stdlib/StdLib.java	Mon Apr 11 14:01:05 2011	(r22500)
+++ sugarj/trunk/stdlib/org/sugarj/stdlib/StdLib.java	Mon Apr 11 14:09:25 2011	(r22501)
@@ -59,7 +59,8 @@
   public static URI sdfTbl = ensureFile("org/sugarj/languages/Sdf2.tbl");
   public static URI strategoDef = ensureFile("org/sugarj/languages/Stratego.def");
   public static URI strategoTbl = ensureFile("org/sugarj/languages/Stratego.tbl");
-  public static URI editorServiceDef = ensureFile("org/sugarj/languages/EditorServices.def");
+  public static URI editorServicesDef = ensureFile("org/sugarj/languages/EditorServices.def");
+  public static URI editorServicesTbl = ensureFile("org/sugarj/languages/EditorServices.tbl");
 
   public static URI initGrammar = ensureFile("org/sugarj/init/initGrammar.sdf");
   public static String initGrammarModule = "org/sugarj/init/initGrammar";
@@ -68,6 +69,9 @@
   public static URI initGrammarXTBL = ensureFile("org/sugarj/init/initGrammar.xtbl");
   public static URI initTrans = ensureFile("org/sugarj/init/initTrans.str");
   public static String initTransModule = "org/sugarj/init/initTrans";
+  public static URI initEditor = ensureFile("org/sugarj/init/initEditor.serv");
+  public static String initEditorModule = "org/sugarj/init/initEditor";
+
 
   public static void main(String args[]) throws URISyntaxException {
     exists(javaDef);
@@ -75,10 +79,13 @@
     exists(sdfTbl);
     exists(strategoDef);
     exists(strategoTbl);
+    exists(editorServicesDef);
+    exists(editorServicesTbl);
     exists(initGrammar);
     exists(initGrammarAtomicImports);
     exists(initGrammarXTBL);
     exists(initTrans);
+    exists(initEditor);
     exists(stdLibDir.toURI());
   }
   

Modified: sugarj/trunk/stdlib/org/sugarj/transformations/GenerateSignatures.str
==============================================================================
--- sugarj/trunk/stdlib/org/sugarj/transformations/GenerateSignatures.str	Mon Apr 11 14:01:05 2011	(r22500)
+++ sugarj/trunk/stdlib/org/sugarj/transformations/GenerateSignatures.str	Mon Apr 11 14:09:25 2011	(r22501)
@@ -130,13 +130,14 @@
     alt(_, _) -> "alt"
 
   get-symbol-name :
-    cf(sym) -> <concat-strings> ["cf-", name]
+    cf(sym) -> <concat-strings> ["cf", name]
     where <get-symbol-name> sym => name
 
   get-symbol-name :
-    lex(sym) -> <concat-strings> ["lex-", name]
+    lex(sym) -> <concat-strings> ["lex", name]
     where <get-symbol-name> sym => name
 
   get-symbol-name :
-    varsym(sym) -> <concat-strings> ["var-", name]
-    where <get-symbol-name> sym => name
\ No newline at end of file
+    varsym(sym) -> <concat-strings> ["var", name]
+    where <get-symbol-name> sym => name
+  
\ No newline at end of file

From seba at informatik.uni-marburg.de  Tue Apr 12 09:46:25 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 12 Apr 2011 07:46:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22502 -
	sugarj/trunk/case-studies/xml/schema
Message-ID: <20110412074625.C1F43108C016@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Tue Apr 12 07:46:25 2011
New Revision: 22502
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22502&sc=1

Log:


Modified:
   sugarj/trunk/case-studies/xml/schema/Test.sugj
   sugarj/trunk/case-studies/xml/schema/TestSchema.sugj
   sugarj/trunk/case-studies/xml/schema/TestXmlSchema.sugj

Modified: sugarj/trunk/case-studies/xml/schema/Test.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/schema/Test.sugj	Mon Apr 11 14:09:25 2011	(r22501)
+++ sugarj/trunk/case-studies/xml/schema/Test.sugj	Tue Apr 12 07:46:25 2011	(r22502)
@@ -14,45 +14,43 @@
 	public static void main(String[] args) throws SAXException {
     ContentHandler ch = new Test();
     
-    ch.write valid document
-      <{http://www.informatik.uni-marburg.de/fb12/ps/students}students>
+    @Validate
+    ch.<{http://www.informatik.uni-marburg.de/fb12/ps/students}students>
       	
-      	
-      	
-        <{http://www.informatik.uni-marburg.de/fb12/ps/students}student name="Jane Doe">
-        	
-          <{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring course="PLT" score="80">
-          </{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring>
-          
-          <{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring course="Computability" score="62">
-          </{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring>
+         <{http://www.informatik.uni-marburg.de/fb12/ps/students}student name="Jane Doe">
+         	
+           <{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring course="PLT" score="80">
+           </{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring>
+           
+           <{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring course="Computability" score="62">
+           </{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring>
           	
-        </{http://www.informatik.uni-marburg.de/fb12/ps/students}student>
-        	
-        	
-        	
-        <{http://www.informatik.uni-marburg.de/fb12/ps/students}student name="John Dee">
-        	
-          <{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring course="Maths" score="80">
-          </{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring>
-          
-          <{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring course="Language processing II" score="12">
-          </{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring>
+         </{http://www.informatik.uni-marburg.de/fb12/ps/students}student>
+         	
+        	 
+        	 
+         <{http://www.informatik.uni-marburg.de/fb12/ps/students}student name="John Dee">
+         	
+           <{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring course="Maths" score="80">
+           </{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring>
+           
+           <{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring course="Language processing II" score="12">
+           </{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring>
           	
-        </{http://www.informatik.uni-marburg.de/fb12/ps/students}student>
+         </{http://www.informatik.uni-marburg.de/fb12/ps/students}student>
         	
         	
         	
-        <{http://www.informatik.uni-marburg.de/fb12/ps/students}student name="April November">
-        	
-          <{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring course="PLT" score="18">
-          </{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring>
+         <{http://www.informatik.uni-marburg.de/fb12/ps/students}student name="April November">
+         	
+           <{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring course="PLT" score="18">
+           </{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring>
           
-          <{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring course="Advanced advancement" score="100">
-          </{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring>
-          	
-        </{http://www.informatik.uni-marburg.de/fb12/ps/students}student>
-        	
+           <{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring course="Advanced advancement" score="100">
+           </{http://www.informatik.uni-marburg.de/fb12/ps/students}scoring>
+           	
+         </{http://www.informatik.uni-marburg.de/fb12/ps/students}student>
+         	
         	
         	
       </{http://www.informatik.uni-marburg.de/fb12/ps/students}students>;

Modified: sugarj/trunk/case-studies/xml/schema/TestSchema.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/schema/TestSchema.sugj	Mon Apr 11 14:09:25 2011	(r22501)
+++ sugarj/trunk/case-studies/xml/schema/TestSchema.sugj	Tue Apr 12 07:46:25 2011	(r22502)
@@ -1,11 +1,10 @@
 package xml.schema;
 
-import xml.schema.AsDesugaring;
-import xml.schema.XmlSchemaJavaSyntax;
+import xml.schema.XmlSchema;
 
 /*
  * example schema based on
- *   "An Introduction XML and Web Technologies"
+ *   "An Introduction to XML and Web Technologies"
  *   by Anders Moeller and Michael Schwartzbach,
  *   page 115,
  *   Addison-Wesley

Modified: sugarj/trunk/case-studies/xml/schema/TestXmlSchema.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/schema/TestXmlSchema.sugj	Mon Apr 11 14:09:25 2011	(r22501)
+++ sugarj/trunk/case-studies/xml/schema/TestXmlSchema.sugj	Tue Apr 12 07:46:25 2011	(r22502)
@@ -1,9 +1,7 @@
 package xml.schema;
 
-import org.xml.sax.Attributes;
 import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
-import org.xml.sax.helpers.DefaultHandler;
 
 import xml.AsSax;
 import xml.XmlJavaSyntax;
@@ -14,8 +12,8 @@
 	public static void main(String[] args) throws SAXException {
     ContentHandler ch = new TestXmlSchema();
     
-    ch.write valid document
-        <{http://www.w3.org/2001/XMLSchema}schema
+    @Validate
+    ch.<{http://www.w3.org/2001/XMLSchema}schema
 		    targetNamespace="http://www.w3.org/2001/XMLSchema">
 		   	
 		   	

From r.t.lindeman at student.tudelft.nl  Tue Apr 12 11:06:18 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Tue, 12 Apr 2011 09:06:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22503 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans
Message-ID: <20110412090618.E26547F8011@mx1.tudelft.nl>

Author: RickyLindeman
Date: Tue Apr 12 09:06:18 2011
New Revision: 22503
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22503&sc=1

Log:
First implementation of the s-fail event. s-fail events are fired when a with or where clause of a rule fails.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-fail-catch.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/location-util.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/stratego-transformer.str

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-fail-catch.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-fail-catch.str	Tue Apr 12 09:06:18 2011	(r22503)
@@ -0,0 +1,83 @@
+module gen-debug-fail-catch
+
+// A rule can have where and with clauses that can can the rule to fail
+// catch a fail and fire a r-exit event
+
+imports
+  libstratego-lib
+  include/Test
+  assert
+  gen-debug-info
+  
+strategies
+	
+
+
+	
+	add-fail-catch-blocks(|filename) = topdown(try(find-rdef(|filename)))
+		
+	find-rdef(|filename):
+		RDefNoArgs(r-name, r){a} -> RDefNoArgs(r-name, r'){a}
+		with r' := <add-fail-catch-block-to-rule(|filename, r-name)> r
+		//with r' := r
+	find-rdef(|filename):
+		RDef(r-name, s-args, r){a} -> RDef(r-name, s-args, r'){a}
+		with r' := <add-fail-catch-block-to-rule(|filename, r-name)> r
+	find-rdef(|filename):
+		RDefT(r-name, s-args, t-args, r){a} -> RDefT(r-name, s-args, t-args, r'){a}
+		with r' := <add-fail-catch-block-to-rule(|filename, r-name)> r
+
+	add-fail-catch-block-to-rule(|filename, r-name) :
+		Rule(match-term, build-term, rule-cond){a} -> Rule(match-term, build-term, rule-cond'*){a}
+		with
+			// walk over rule-conditions
+			rule-cond'* := <add-block-to-conditions(|filename, r-name)> rule-cond
+
+	// no conditions
+	add-fail-catch-block-to-rule(|filename, r-name) :
+		RuleNoCond(match-term, build-term){a} -> RuleNoCond(match-term, build-term){a}
+
+/*
+Term "->" Term "where" Strategy 		-> Rule {cons("Rule")}       %% backward comp.
+Term "->" Term RuleCond+	    		-> Rule {cons("Rule"), avoid}
+
+"where" Strategy 						-> RuleCond {cons("WhereClause")}
+"with"  Strategy 						-> RuleCond {cons("WithClause")}
+*/
+
+	// current term is not a list of WhereClause or WithClause terms
+    // current term can be a Strategy
+	add-block-to-conditions(|filename, r-name) :
+			s{a} -> s'
+		where not(<is-list> s)
+		with
+			s' := <create-block(|filename, r-name, a)> s
+		
+	// current term can be a list with WhereClause and WithClause terms
+	add-block-to-conditions(|filename, r-name) :
+		clause-list* -> clause-list'*
+		where <is-list> clause-list*
+		; clause-list'* := <map(add-block-to-clause(|filename, r-name))> clause-list*
+		  
+	
+	add-block-to-clause(|filename, r-name) :
+		WhereClause(s{a}) -> WhereClause(s')
+		with
+			s' := <create-block(|filename, r-name, a)> s
+			
+	add-block-to-clause(|filename, r-name) :
+		WithClause(s){a} -> WithClause(s')
+		with
+			s' := <create-block(|filename, r-name, a)> s
+			
+	create-block(|filename, r-name, a) = 
+		?s
+		; failed-call := <create-fail-exit(|filename, r-name, a)>
+		; !LChoice(s, failed-call)
+	
+	// fire exit-event
+	create-fail-exit(|filename, r-name, a) = 
+		fail-event-call := <create-s-fail-call(|filename, r-name, a)>
+		; exit-event-call := <create-r-exit-call(|filename, r-name, a)>
+		; fail-call := <create-fail>
+		; !Seq(Seq(fail-event-call, exit-event-call), fail-call)

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str	Tue Apr 12 07:46:25 2011	(r22502)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str	Tue Apr 12 09:06:18 2011	(r22503)
@@ -7,6 +7,7 @@
   gen-debug-step // add step debug information
   gen-debug-var // add local var debug information
   gen-debug-entry // add rule/strategy enter/exit debug information
+  gen-debug-fail-catch // add catch blocks around where and with clauses
   location-util
   
 //
@@ -52,13 +53,28 @@
 	
 strategies
 	
+	fail-catch-enabled =  
+		<get-config> "--fail-catch"
+	
+	step-disabled =
+		<get-config> "--no-step"
+		
+	var-disabled =
+		<get-config> "--no-var"
+		
+	entry-exit-disabled =
+		<get-config> "--no-entry-exit"
+	
+	
 	// main rule for adding debug information
 	add-debug-info(|filename) = 
-		add-step-statements(|filename) // step statements, each strategy statement s will be replaced by Seq(step-s, s)
-		; 
-		  add-var-statements(|filename) // local var statements, add them after step statements are added
-		; add-s-entry-and-exit-calls(|filename) // s-enter, s-exit
-		; add-r-entry-and-exit-calls(|filename) // r-enter, r-exit
+		if not(step-disabled) then add-step-statements(|filename) end // step statements, each strategy statement s will be replaced by Seq(step-s, s)
+		; if fail-catch-enabled then  add-fail-catch-blocks(|filename) end // add catch blocks around where and with clauses (catch a failure and send an event)
+		; if not(var-disabled) then add-var-statements(|filename) end // local var statements, add them after step statements are added
+		; if not(entry-exit-disabled) then 
+			add-s-entry-and-exit-calls(|filename) // s-enter, s-exit
+			; add-r-entry-and-exit-calls(|filename) // r-enter, r-exit
+		end
 		; add-s-debug-import // add import for debug library
 	
 	// current term should be a module
@@ -294,5 +310,7 @@
     
     create-s-exit-call(|filename, s-name, a) = !CallT(SVar("s-exit"), [], [NoAnnoList(Str(filename)), NoAnnoList(Str(s-name)), <location-to-term> a])
     
+    create-s-fail-call(|filename, name, a) = !CallT(SVar("s-fail"), [], [NoAnnoList(Str(filename)), NoAnnoList(Str(name)), <location-to-term> a])
+ 
     create-fail = !Fail()
 	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/location-util.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/location-util.str	Tue Apr 12 07:46:25 2011	(r22502)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/location-util.str	Tue Apr 12 09:06:18 2011	(r22503)
@@ -18,10 +18,26 @@
 
 	// a should be a String, thus "12"
 	create-arg:
-		a -> NoAnnoList(Str(a))
-		where(<is-string> a)
-		
+		a -> NoAnnoList(s)
+		with 
+			if <is-string> a then
+				// wrap around Str
+				!Str(a)
+			else
+				if <is-int> a then
+					!Str(<int-to-string> a)
+				else
+					// it is not an int and not a string, what is it?
+					// should never happen
+					!Str(a)
+				end
+			
+			end
+			; ?s
+
+/*
 	create-arg:
 		a -> NoAnnoList(Str(<int-to-string> a))
 		where(<is-int> a)
+*/
 // ===============	

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/stratego-transformer.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/stratego-transformer.str	Tue Apr 12 07:46:25 2011	(r22502)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/stratego-transformer.str	Tue Apr 12 09:06:18 2011	(r22503)
@@ -103,8 +103,20 @@
 		+ Option("--charoffset-converter"
 			, <set-config> ("--charoffset-converter", ())
 			, !"--charoffset-converter     Create line offset table."
-			
+		) + Option("--fail-catch"
+			, <set-config> ("--fail-catch", ())
+			, !"--fail-catch     try to catch fails in where clauses."
+		) + Option("--no-step"
+			, <set-config> ("--no-step", ())
+			, !"--no-step        do not generate s-step events."
+		) + Option("--no-var"
+			, <set-config> ("--no-var", ())
+			, !"--no-var         do not generate s-var events."
+		) + Option("--no-entry-exit"
+			, <set-config> ("--no-entry-exit", ())
+			, !"--no-entry-exit  do not generate s/r-entry/exit events."
 		)
+		
   get-config-I =
     <get-config> "-I" <+ ![]
 
@@ -112,13 +124,12 @@
       
  create-usage =
  default-system-usage(
- 	!"Usage: option-demo [options]"
+ 	!"Usage: stratego-transformer [options]"
   , !
-"   This is a test program to demonstrate use of
-    parse-options and  generation of usage info
-    from option and switch specificatios. These
-    now contain usage info as additional third 
-    argument."
+"   Adds debug information to a stratego program.
+    The program outputs a stratego program that 
+    depends on stratego-debug-runtime.jar and
+    stratego-debug-runtime-java.jar."
      )
 
 	

From r.t.lindeman at student.tudelft.nl  Tue Apr 12 13:32:42 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Tue, 12 Apr 2011 11:32:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22504 - in
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer: .
	editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies
	editor/java/org/stratego...
Message-ID: <20110412113242.D0589108C00B@mx3.tudelft.nl>

Author: RickyLindeman
Date: Tue Apr 12 11:32:42 2011
New Revision: 22504
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22504&sc=1

Log:
Finetune adding a "catch"-block to a where/with clause in a rule

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.custom.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/ffl_util/FileLineLengthTable.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/java_create_fll_table_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/lib/strategodebuglib.rtree
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-fail-catch.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-step.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-lookup.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.custom.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.custom.xml	Tue Apr 12 09:06:18 2011	(r22503)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.custom.xml	Tue Apr 12 11:32:42 2011	(r22504)
@@ -4,7 +4,7 @@
 
 	<target name="spoofaximp.default" depends="spoofaximp.default.ctree" />
 	<target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh" />
-	<target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+	<target name="spoofaximp.default.jar" depends="utils-files,check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
 
 	<!-- Initialization -->
 	<!--<available file="${build}/org/strategoxt/imp/debug/stratego/transformer/strategies/Main.class" property="java.jar.enabled"/>-->

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/ffl_util/FileLineLengthTable.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/ffl_util/FileLineLengthTable.java	Tue Apr 12 09:06:18 2011	(r22503)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/ffl_util/FileLineLengthTable.java	Tue Apr 12 11:32:42 2011	(r22504)
@@ -129,17 +129,36 @@
 	}
 	
 	/**
-	 * Use a zero based linenumber.
+	 * Use a zero based linenumber to get the line length.
+	 * If the linenumber is out of bounds then return -1;
+	 * 
+	 * TODO: fix -1 errors.
 	 * @param linenumber
 	 * @return
 	 */
 	public int getLineLength(int linenumber)
 	{
+		if (linenumber >= this.lengthPerLine.length)
+		{
+			return -1;
+		}
 		return this.lengthPerLine[linenumber];
 	}
 	
+	/**
+	 * Returns the lineoffset for the given linenumber (zero-based).
+	 * If the linenumber is out of bounds then return -1;
+	 * 
+	 * TODO: fix -1 errors.
+	 * @param linenumber
+	 * @return
+	 */
 	public int getLineOffset(int linenumber)
 	{
+		if (linenumber >= this.characterOffsetPerLine.length)
+		{
+			return -1;
+		}
 		return this.characterOffsetPerLine[linenumber];
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/java_create_fll_table_0_3.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/java_create_fll_table_0_3.java	Tue Apr 12 09:06:18 2011	(r22503)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/java_create_fll_table_0_3.java	Tue Apr 12 11:32:42 2011	(r22504)
@@ -19,7 +19,7 @@
 	
 	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm table_filename, IStrategoTerm base_dir, IStrategoTerm input_files)
 	{
-		System.out.println("CREATE FLL");
+		//System.out.println("CREATE FLL");
 		String tf = table_filename.toString();
 		File charOffsetTableFilename = new File(LineLengthTable.trimQuotes(tf));
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/lib/strategodebuglib.rtree
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-fail-catch.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-fail-catch.str	Tue Apr 12 09:06:18 2011	(r22503)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-fail-catch.str	Tue Apr 12 11:32:42 2011	(r22504)
@@ -18,20 +18,20 @@
 		
 	find-rdef(|filename):
 		RDefNoArgs(r-name, r){a} -> RDefNoArgs(r-name, r'){a}
-		with r' := <add-fail-catch-block-to-rule(|filename, r-name)> r
+		with r' := <try(add-fail-catch-block-to-rule(|filename, r-name))> r
 		//with r' := r
 	find-rdef(|filename):
 		RDef(r-name, s-args, r){a} -> RDef(r-name, s-args, r'){a}
-		with r' := <add-fail-catch-block-to-rule(|filename, r-name)> r
+		with r' := <try(add-fail-catch-block-to-rule(|filename, r-name))> r
 	find-rdef(|filename):
 		RDefT(r-name, s-args, t-args, r){a} -> RDefT(r-name, s-args, t-args, r'){a}
-		with r' := <add-fail-catch-block-to-rule(|filename, r-name)> r
+		with r' := <try(add-fail-catch-block-to-rule(|filename, r-name))> r
 
 	add-fail-catch-block-to-rule(|filename, r-name) :
 		Rule(match-term, build-term, rule-cond){a} -> Rule(match-term, build-term, rule-cond'*){a}
 		with
 			// walk over rule-conditions
-			rule-cond'* := <add-block-to-conditions(|filename, r-name)> rule-cond
+			rule-cond'* := <try(add-block-to-conditions(|filename, r-name))> rule-cond
 
 	// no conditions
 	add-fail-catch-block-to-rule(|filename, r-name) :
@@ -57,11 +57,11 @@
 	add-block-to-conditions(|filename, r-name) :
 		clause-list* -> clause-list'*
 		where <is-list> clause-list*
-		; clause-list'* := <map(add-block-to-clause(|filename, r-name))> clause-list*
+		; clause-list'* := <map(try(add-block-to-clause(|filename, r-name)))> clause-list*
 		  
 	
 	add-block-to-clause(|filename, r-name) :
-		WhereClause(s{a}) -> WhereClause(s')
+		WhereClause(s){a} -> WhereClause(s')
 		with
 			s' := <create-block(|filename, r-name, a)> s
 			

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-step.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-step.str	Tue Apr 12 09:06:18 2011	(r22503)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-step.str	Tue Apr 12 11:32:42 2011	(r22504)
@@ -290,224 +290,224 @@
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at GenDynRules(_){a1} -> s'
+		s at GenDynRules(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Call(_, _){a1} -> s'
+		s at Call(_, _){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at ScopeDefault(_){a1} -> s'
+		s at ScopeDefault(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Rec(_,_){a1} -> s'
+		s at Rec(_,_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Not(_){a1} -> s'
+		s at Not(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Where(_){a1} -> s'
+		s at Where(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at With(_){a1} -> s'
+		s at With(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Test(_){a1} -> s'
+		s at Test(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at PrimNoArgs(_){a1} -> s'
+		s at PrimNoArgs(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Prim(_, _){a1} -> s'
+		s at Prim(_, _){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 	
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at CallNoArgs(_){a1} -> s'
+		s at CallNoArgs(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at LRule(_){a1} -> s'
+		s at LRule(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 			  
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at SRule(_){a1} -> s'
+		s at SRule(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at ProceedNoArgs(){a1} -> s'
+		s at ProceedNoArgs(){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 			  
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Proceed(_){a1} -> s'
+		s at Proceed(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at AM(_,_){a1} -> s'
+		s at AM(_,_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 			  			  			  			  		  			  		  			  			  			  			  			  
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Assign(_,_){a1} -> s'
+		s at Assign(_,_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Let(_,_){a1} -> s'
+		s at Let(_,_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 			  
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at CallT(_,_, _){a1} -> s'
+		s at CallT(_,_, _){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 			  
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at CallDynamic(_,_, _){a1} -> s'
+		s at CallDynamic(_,_, _){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 			  
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Fail(){a1} -> s'
+		s at Fail(){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 			  
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Id(){a1} -> s'
+		s at Id(){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)		
 			  
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at ProceedT(_,_){a1} -> s'
+		s at ProceedT(_,_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)	
 			  
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at ProceedNoArgs(){a1} -> s'
+		s at ProceedNoArgs(){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)	
 			  
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Match(_){a1} -> s'
+		s at Match(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)	
 
 	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Build(_){a1} -> s'
+		s at Build(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)	
 			  
  	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Scope(_, _){a1} -> s'
+		s at Scope(_, _){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)	
 			  
  	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at PrimT(_, _, _){a1} -> s'
+		s at PrimT(_, _, _){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)	
 			  
  	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at Some(_){a1} -> s'
+		s at Some(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 			  
  	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at One(_){a1} -> s'
+		s at One(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)
 			  
  	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at All(_){a1} -> s'
+		s at All(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)	
 			  
  	// does not have child strategies
 	add-step-to-strategy(|filename, name):
-		s at ImportTerm(_){a1} -> s'
+		s at ImportTerm(_){a1} -> s'{a1}
 		with
 			s-step := <create-step-call(|filename, name, a1)>
 			; s' := Seq(s-step, s)

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-lookup.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-lookup.str	Tue Apr 12 09:06:18 2011	(r22503)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-lookup.str	Tue Apr 12 11:32:42 2011	(r22504)
@@ -12,12 +12,12 @@
 	// current term should be a list of inputfilenames each pointing to a stratego file
 	// output is the location of the table
 	create-table(|table-filename): inputfilenames* -> table-filename
-	where(debug(!"create-table"))
-	where(
+	//where(debug(!"create-table"))
+	where
 		table-file-handle := <get-file-handle(|table-filename)>
 		; <map(create-table-for-input(|table-file-handle))> inputfilenames* // writes the table contents of each inputfilename to table-file-handle
 		; close-file-handle(|table-file-handle)
-	)
+	
 	/*
 	get-anno-ast(|inputfilename)
   	; assert-module

From r.t.lindeman at student.tudelft.nl  Tue Apr 12 13:34:26 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Tue, 12 Apr 2011 11:34:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22505 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core...
Message-ID: <20110412113426.79C24CC092@mx4.tudelft.nl>

Author: RickyLindeman
Date: Tue Apr 12 11:34:26 2011
New Revision: 22505
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22505&sc=1

Log:
Added fail event handler to debug-runtime
Added more options for StrategoLauncher

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyFailHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/FailBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_fail_0_4.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchUtil.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandlerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/OffsetTable.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/HybridInterpreterDebugRuntime.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.rtree
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/external-calls.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/StrategoMainTab.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -28,22 +28,39 @@
 	public static final String ATTR_STRATEGO_COMPILE_ARGUMENTS = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_COMPILE_ARGUMENTS";
 	
 	/**
+	 * Extra classpath entries needed to compile java. Strategoxt and the stratego-debug-runtime jars will be on the classpath.
+	 * The attribute can be used to set other jars (that contain external strategies) on the classpath.
+	 */
+	public static final String ATTR_JAVA_COMPILE_CLASSPATH_LIST = ID_STRATEGO_DEBUG_MODEL + ".ATTR_JAVA_COMPILE_CLASSPATH_LIST";
+	
+	public static final String ATTR_JAVA_RUNTIME_CLASSPATH_LIST = ID_STRATEGO_DEBUG_MODEL + ".ATTR_JAVA_RUNTIME_CLASSPATH_LIST";
+	
+	/**
 	 * Launch configuration key. Value is boolean and true when before each launch the application should be recompiled.
 	 * If the value is false then the application won't get recompiled. Launching may fail if the compiled binaries are not present.
 	 */
 	public static final String ATTR_STRATEGO_PROGRAM_RECOMPILE = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_PROGRAM_RECOMPILE";
 
+	/**
+	 * The strategy that will be invoked by the HybridInterpreter Launcher.
+	 */
 	public static final String ATTR_STRATEGO_STRATEGY_NAME = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_STRATEGY_NAME";
 
+	/**
+	 * List of jars that will be placed on the classpath for a HybridIntepreter Launch
+	 */
 	public static final String ATTR_STRATEGO_REQUIRED_JARS = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_REQUIRED_JARS";
 
-	public static final String ATTR_STRATEGO_CLASSPATH = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_CLASSPATH";
+	//public static final String ATTR_STRATEGO_CLASSPATH = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_CLASSPATH";
 	
 	/**
 	 * Points to metadata directory, contains offsettable
 	 */
 	public static final String ATTR_METADATA_DIRECTORY = ID_STRATEGO_DEBUG_MODEL + ".ATTR_METADATA_DIRECTORY";
 	
+	/**
+	 * Points to the eclipse spoofax project
+	 */
 	public static final String ATTR_PROJECT_DIRECTORY = ID_STRATEGO_DEBUG_MODEL + ".ATTR_PROJECT_DIRECTORY";
 	
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -135,6 +135,20 @@
 		cpList.add(binBase);
 		cpList.add(debugSessionSettings.getStrategoxtJar());
 		cpList.addAll(debugSessionSettings.getRuntimeJars());
+		// add additional classpath
+		
+		// java runtime classpath
+		List runtimeClasspath = configuration.getAttribute(IStrategoConstants.ATTR_JAVA_RUNTIME_CLASSPATH_LIST, (List)null);
+		if (runtimeClasspath == null) {
+			runtimeClasspath = new ArrayList<String>();
+		}
+		for(Object o : runtimeClasspath)
+		{
+			if (o instanceof String)
+			{
+				cpList.add(new Path((String) o));
+			}
+		}
 		
 		String[] classPath = FileUtil.convertIPathToStringArray(cpList);	
 		
@@ -176,7 +190,7 @@
 			// socket attach
 			//String[] realVMargs = new String[] { "-Xdebug", "-Xrunjdwp:transport=dt_socket,address="+port+",server=y,suspend=y" };
 			// socket listen
-			String[] realVMargs = new String[] { "-Xdebug", "-Xrunjdwp:transport=dt_socket,address="+port+",suspend=y" };
+			String[] realVMargs = new String[] { "-Xdebug", "-Xrunjdwp:transport=dt_socket,address="+port+",suspend=y", "-Xss8m" };
 		//String[] realVMargs = new String[] { "-Xrunjdwp:transport=dt_socket,address=9000,server=y,suspend=y" };
 		//String[] realVMargs = new String[] { "-Xdebug" };
 			vmRunnerConfiguration.setVMArguments(realVMargs);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchUtil.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchUtil.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchUtil.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -9,6 +9,7 @@
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.Path;
 import org.eclipse.debug.core.ILaunchConfiguration;
 import org.eclipse.debug.core.ILaunchManager;
 import org.strategoxt.debug.core.util.DebugCompileException;
@@ -75,6 +76,24 @@
 		String[] compileTimeExtraArguments = (String[]) compileArguments.toArray(new String[0]);
 		debugSessionSettings.setCompileTimeExtraArguments(compileTimeExtraArguments);
 		
+		// java compile extra classpath
+		List javaCompileClasspath = configuration.getAttribute(IStrategoConstants.ATTR_JAVA_COMPILE_CLASSPATH_LIST, (List) null);
+		if (javaCompileClasspath == null) {
+			javaCompileClasspath = new ArrayList<String>();
+		}
+		List<IPath> paths = new ArrayList<IPath>();
+		for(Object o : javaCompileClasspath)
+		{
+			if (o instanceof String)
+			{
+				IPath path = new Path((String) o);
+				paths.add(path);
+			}
+		}
+		IPath[] javaCompileClasspathArray = (IPath[]) paths.toArray(new IPath[0]);
+		debugSessionSettings.setJavaCompileExtraClasspath(javaCompileClasspathArray);
+		
+		
 		IPath binBase = debugSessionSettings.getClassDirectory(); // default
 
 		if (rebuildBinary)

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -46,7 +46,7 @@
 	 */
 	private void init(StrategoStackFrame data) {
 		this.frameData = data;
-		fName = data.getName();
+		fName = data.getName()+":"+data.getFilename();
 		extractVariablesFromFrame();
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -365,8 +365,8 @@
 						IPath programPath = new Path(program);
 						File parent = programPath.toFile().getParentFile();
 						IPath subProjectPath = new Path(parent.getAbsolutePath()); // the dir in which the program is
-						System.out.println("subProjectPath: " + subProjectPath.toOSString());
-						System.out.println("breakPointPath: " + breakPointPath.toOSString() + " " + marker.getAttribute(IMarker.LINE_NUMBER));
+						//System.out.println("subProjectPath: " + subProjectPath.toOSString());
+						//System.out.println("breakPointPath: " + breakPointPath.toOSString() + " " + marker.getAttribute(IMarker.LINE_NUMBER));
 						boolean isPrefix = subProjectPath.isPrefixOf(breakPointPath);
 						return isPrefix;
 					}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -46,6 +46,7 @@
 import org.strategoxt.imp.debug.stratego.runtime.strategies.java_r_exit_0_4;
 import org.strategoxt.imp.debug.stratego.runtime.strategies.java_s_enter_0_4;
 import org.strategoxt.imp.debug.stratego.runtime.strategies.java_s_exit_0_4;
+import org.strategoxt.imp.debug.stratego.runtime.strategies.java_s_fail_0_4;
 import org.strategoxt.imp.debug.stratego.runtime.strategies.java_s_step_0_4;
 import org.strategoxt.imp.debug.stratego.runtime.strategies.java_s_var_0_5;
 
@@ -364,6 +365,13 @@
             	int l = java_r_exit_0_4.breakpointLinenumber;
             	DebugEventRequestInstaller.createBreakpointEntryRequest(mgr, clazz, l, EventHandler.R_EXIT);
 			}
+		} else if (java_s_fail_0_4.getFullClassName().equals(name))
+		{
+			if (event.referenceType() instanceof ClassType) {
+				ClassType clazz = (ClassType) event.referenceType();
+				int l = java_s_fail_0_4.breakpointLinenumber;
+				DebugEventRequestInstaller.createBreakpointEntryRequest(mgr, clazz, l, EventHandler.S_FAIL);
+			}
 		} else if (HybridInterpreterDebugRuntime.class.getName().equals(name))
 		{
 			if (event.referenceType() instanceof ClassType) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -103,6 +103,7 @@
 	
 	protected boolean breakpointEvent(BreakpointEvent event, EventSpecManager eventSpecManager)
 	{
+
 		executePendingExit();
 		long start = System.nanoTime(); // profile internal
 		boolean suspendThread = false;
@@ -111,6 +112,12 @@
 		this.extractor = IEventInfoExtractorFactory.createExtractor(event);
 		long extractorEnd = System.nanoTime();
 		EventHandler h = EventHandlerFactory.createEventHandler(eventType, extractor, eventSpecManager);
+		if (h == null)
+		{
+			// eventType not implemented
+			System.err.println("Event type '"+eventType+"' not implemented!");
+			return false;
+		}
 		if (h.isEnter())
 		{
 			// current stack frame should be pushed, this is done in processDebugEvent

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -19,6 +19,7 @@
 	public static String R_EXIT = "r_exit";
 	public static String S_STEP = "s_step";
 	public static String S_VAR = "s_var";
+	public static String S_FAIL = "s_fail";
 	
 	/**
 	 * Name of the event that occurs just before the strategy is invoked from the HybridInterpreter.
@@ -245,6 +246,14 @@
 		
 		strategoState.currentFrame().setCurrentLocationInfo(locationInfo, this.getEventType());
 		
+		// assert we are still in the same file
+		String currentFilename = strategoState.currentFrame().getFilename();
+		String eventFilename = this.getIEventInfoExtractor().getFilename();
+		if (!currentFilename.equals(eventFilename))
+		{
+			System.out.println("StackFrame Filename changed, maybe we lost an enter or exit event...");
+		}
+		
 		EventProfiler.instance.subMark(markName, "D-2");
 		
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandlerFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandlerFactory.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandlerFactory.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -31,9 +31,16 @@
 		{
 			h = new StrategyVarHandler(extractor, eventSpecManager);
 		}
+		else if (EventHandler.S_FAIL.equals(eventType))
+		{
+			h = new StrategyFailHandler(extractor, eventSpecManager);
+		}
 		else if (EventHandler.INTERPRETER_LOADED.equals(eventType))
 		{
 			h = new InterpreterLoadedHandler(extractor, eventSpecManager);
+		} else
+		{
+			System.err.println("Event Type: " + eventType + " unknown!");
 		}
 		return h;
 	}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyFailHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyFailHandler.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -0,0 +1,40 @@
+package org.strategoxt.debug.core.control.events;
+
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
+import org.strategoxt.debug.core.eventspec.FailBreakPoint;
+import org.strategoxt.debug.core.model.LocationInfo;
+import org.strategoxt.debug.core.model.StrategoState;
+
+public class StrategyFailHandler extends EventHandler {
+
+	public StrategyFailHandler(IEventInfoExtractor extractor, EventSpecManager eventSpecManager) {
+		super(extractor, eventSpecManager);
+	}
+	
+	@Override
+	protected BreakPoint createBreakPoint(StrategoState currentState) {
+		String name = this.getName(); // the name of the strategy
+		String filename = this.getFilename(); // the filename of the stratego file in which we want to set a breakpoint
+		LocationInfo locationInfo = getLocationInfo();
+		
+		FailBreakPoint b = new FailBreakPoint(filename, name, locationInfo.getStart_line_num(), locationInfo.getStart_token_pos());
+		b.setVirtual(false);
+		return b;
+	}
+	
+	@Override
+	public String getEventType() {
+		return EventHandler.S_FAIL;
+	}
+
+	@Override
+	public boolean isEnter() {
+		return true;
+	}
+	
+	@Override
+	public boolean isExit() {
+		return false;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/FailBreakPoint.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/FailBreakPoint.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -0,0 +1,76 @@
+package org.strategoxt.debug.core.eventspec;
+
+public class FailBreakPoint extends BreakPoint {
+
+	public FailBreakPoint(String filename, String name, int lineNumber,
+			int startTokenPosition) {
+		super(filename, name, lineNumber, startTokenPosition);
+	}
+	
+	@Override
+	public int hashCode() {
+		final int prime = 97;
+		int result = 1;
+		result = prime * result + getLineNumber();
+		result = prime * result + getStartTokenPosition();
+		result = prime * result
+				+ ((getName() == null) ? 0 : getName().hashCode());
+		result = prime * result + ((getFilename() == null) ? 0 : getFilename().hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof FailBreakPoint))
+			return false;
+		FailBreakPoint other = (FailBreakPoint) obj;
+		if (getFilename() == null || other.getFilename() == null) {
+			return false;
+		} else if (!getFilename().equals(other.getFilename())) {
+			return false;
+		}
+		if (getName() == null || other.getName() == null) {
+			return false; // one of the names is null
+		} else if (!getName().equals(other.getName())) {
+			return false; // names do not match
+		}
+		if (getLineNumber() == -1 || other.getLineNumber() == -1)
+		{
+			// TODO: do we allow this for Step Breakpoints?
+			return true; // -1 means match on any strategy with the same name
+		}
+		if (getLineNumber() != other.getLineNumber())
+			return false;
+		if (getStartTokenPosition() != other.getStartTokenPosition())
+			return false;
+		return true;
+	}
+
+	@Override
+	public boolean match(BreakPoint breakPoint) {
+		if (breakPoint.isVirtual())
+		{
+			return false;
+		}
+		else
+		{
+			// TODO: if this is virtual, check for wildcards
+			// else just use equals
+			return this.equals(breakPoint);
+		}
+	}
+
+	@Override
+	public boolean isEnter() {
+		return false;
+	}
+
+	@Override
+	public boolean isExit() {
+		return false;
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -254,6 +254,7 @@
 				, "--gen-dir", strOutputBasedir
 				, "--base-dir", sourceBasedir 
 				, "--charoffset-converter" // create charoffset table
+				, "--fail-catch" // catch fail in where/with in rules
 			};
 
 		String[] transformer_args = StringUtil.concat(basic_args, debugSessionSettings.getGenerateStrategoExtraArguments());
@@ -478,8 +479,9 @@
 	 * @param mainSourceFileName
 	 * @param binBasedir
 	 * @return
+	 * @throws DebugCompileException 
 	 */
-	protected IPath compileJava(DebugSessionSettings debugSessionSettings, IPath mainSourceFileName, IPath binBasedir)
+	protected IPath compileJava(DebugSessionSettings debugSessionSettings, IPath mainSourceFileName, IPath binBasedir) throws DebugCompileException
 	{
 		log("Compiling " + mainSourceFileName);
 		log("Please wait...");
@@ -514,17 +516,18 @@
 		// TODO: get extra compiler arguments from debugSessionSettings
 		FileOutputStream outStream = null;
 		FileOutputStream errorStream = null;
+		String logFileLocation = "";
 		try {
 			File outFile = new File("out.log");
 			File errorFile = new File("error.log");
 			outStream = new FileOutputStream(outFile, false);
 			errorStream = new FileOutputStream(errorFile, false);
-			
-			log("Logfile: " + outFile.getAbsolutePath());
+			logFileLocation =  outFile.getAbsolutePath();
 		} catch (FileNotFoundException e) {
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
+		log("Logfile: " + logFileLocation);
 		PrintWriter outWriter = null;
 		PrintWriter errWriter = null;
 		
@@ -552,6 +555,10 @@
 		//boolean result = main.compile(args);
 		boolean result = org.eclipse.jdt.core.compiler.batch.BatchCompiler.compile(args, outWriter, errWriter, compilationProgress);
 		log("Compile result: " + result);
+		if (!result)
+		{
+			throw new DebugCompileException("Could not compile java files, see " + logFileLocation);
+		}
 		//org.eclipse.jdt.internal.compiler.batch.Main.main(args);
 		
 		/*

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -118,6 +118,10 @@
 		return cp;
 	}
 	
+	/**
+	 * Find the lib directory 
+	 * @return
+	 */
 	@SuppressWarnings("rawtypes")
 	public static IPath getLibDirectory()
 	{

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/OffsetTable.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/OffsetTable.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/OffsetTable.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -13,7 +13,7 @@
 	}
 	
 	/**
-	 * 
+	 * Returns the line offset for the given linenumber(zero-based), if the linenumber out of bound return -1;
 	 * @param filename
 	 * @param i i is a zero-based index
 	 * @return

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -113,7 +113,7 @@
 		this.eventInfo = factory.makeTuple(filename, name, location).toString();
 		this.givenTermString = given.toString();
 		this.current = current;
-		System.out.println("TEST " + name.toString() + " D:"+getDRKeySetString()); // adding this will prevent a TimeoutException (I think because it will trigger a ClassLoad...)
+		debug("TEST " + name.toString() + " D:"+getDRKeySetString()); // adding this will prevent a TimeoutException (I think because it will trigger a ClassLoad...)
 		return current;
 	}
 	
@@ -124,7 +124,7 @@
 		String s = varname.toString();
 		this.varnameString = s;
 		this.current = current;
-		System.out.println("TEST " + name.toString() + " D:"+getDRKeySetString()); // adding this will prevent a TimeoutException (I think because it will trigger a ClassLoad...)
+		debug("TEST " + name.toString() + " D:"+getDRKeySetString()); // adding this will prevent a TimeoutException (I think because it will trigger a ClassLoad...)
 		return current;
 	}
 	
@@ -138,4 +138,9 @@
 		this.current = newCurrent;
 		this.givenTermString = termString;
 	}
+	
+	private void debug(String s)
+	{
+		//System.out.println(s);
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/HybridInterpreterDebugRuntime.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/HybridInterpreterDebugRuntime.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/HybridInterpreterDebugRuntime.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -49,7 +49,7 @@
 	 *         returns false.
 	 */
 	public boolean setCurrentTerm(String term) {
-		System.out.println("hi setCurrent begin");
+		//System.out.println("hi setCurrent begin");
 		StringTermReader termReader = new StringTermReader(this.getFactory());
 		try {
 			IStrategoTerm strategoTerm = termReader.parseFromString(term);
@@ -64,7 +64,7 @@
 	}
 
 	public static void main(String... args) {
-		System.out.println("Main");
+		//System.out.println("Main");
 		if (args == null || args.length < 1) {
 			System.out.println(USAGE);
 			System.exit(127);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/InteropRegisterer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/InteropRegisterer.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/InteropRegisterer.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -16,6 +16,7 @@
 				, java_r_exit_0_4.instance // rule exit
 				, java_s_step_0_4.instance // step
 				, java_s_var_0_5.instance // var assignment
+				, java_s_fail_0_4.instance // where/with clause fails
 				});
 	}
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_fail_0_4.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_fail_0_4.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -0,0 +1,29 @@
+package org.strategoxt.imp.debug.stratego.runtime.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+
+/**
+ * Called when a Where or With clause in a rule fails.
+ * 
+ * @author rlindeman
+ *
+ */
+public class java_s_fail_0_4 extends DebugCallStrategy {
+	public static java_s_fail_0_4 instance = new java_s_fail_0_4();
+	
+	public static int breakpointLinenumber = 21;
+		
+		
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
+		super.invoke(context, current, filename, name, location, given);
+		nothing();
+		return this.current;
+	}
+	
+	public static String getFullClassName()
+	{
+		return instance.getClass().getName();
+	}	
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.rtree
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/external-calls.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/external-calls.str	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/external-calls.str	Tue Apr 12 11:34:26 2011	(r22505)
@@ -14,4 +14,6 @@
 	external java-r-exit(|filename, name, location, given)
 	external java-s-step(|filename, name, location, given)
 	// var-name is the name of the variable that the term given is assigned to
-	external java-s-var(|filename, name, var-name, location, given)
\ No newline at end of file
+	external java-s-var(|filename, name, var-name, location, given)
+	// occurs when a where or with clause fails for a rule
+	external java-s-fail(|filename, name, location, given)
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str	Tue Apr 12 11:34:26 2011	(r22505)
@@ -75,4 +75,9 @@
     	t -> t'
     	//where (<debug(!"s-var: ")> <to-string> (name, loc))
     	where (t' := <java-s-var(|filename, name, var-name, loc, t)>)
+    	
+    // where or with clause fails in rule
+    s-fail(|filename, name, loc):
+    	t -> t'
+    		where (t' := <java-s-fail(|filename, name, loc, t)>)
 	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/StrategoMainTab.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/StrategoMainTab.java	Tue Apr 12 11:32:42 2011	(r22504)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/StrategoMainTab.java	Tue Apr 12 11:34:26 2011	(r22505)
@@ -46,6 +46,10 @@
 	 */
 	private Text fCompileArgumentsText; // multi-line textbox, every argument should be placed on a line
 	
+	private Text fJavaCompileExtraClasspath;
+	
+	private Text fJavaRuntimeExtraClasspath;
+	
 	/**
 	 * Checkbox, true if the stratego program needs to be recompiled before every launch.
 	 */
@@ -61,6 +65,7 @@
 	 * GUI: 
 	Program arguments:	| multiline textbox			|
 	Compile arguments:	| multiline textbox			|
+	Java classpath args:| multiline textbox			|
 	CB Re-compile before each run
 	 */
 	
@@ -93,6 +98,14 @@
 		createCompileArgumentsControl(font, comp);
 		
 		createVerticalSpacer(comp, 3);
+		
+		createJavaCompileExtraClasspathControl(font, comp);
+		
+		createVerticalSpacer(comp, 3);
+		
+		createJavaRuntimeExtraClasspathControl(font, comp);
+		
+		createVerticalSpacer(comp, 3);
 
 		createRecompileControl(comp);
 
@@ -139,6 +152,48 @@
 			}
 		});
 	}
+	
+	private void createJavaCompileExtraClasspathControl(Font font, Composite comp)
+	{
+		Label classpathLabel = new Label(comp, SWT.NONE);
+		classpathLabel.setText("Java compile classpath:");
+		GridData gdArg = new GridData(GridData.BEGINNING);
+		classpathLabel.setLayoutData(gdArg);
+		classpathLabel.setFont(font);
+		
+		fJavaCompileExtraClasspath = new Text(comp, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL); // a multi line text box, every argument should be placed on its own line
+		gdArg = new GridData(GridData.FILL_HORIZONTAL);
+		gdArg.horizontalSpan = 2;
+		gdArg.verticalSpan = 5;
+		fJavaCompileExtraClasspath.setLayoutData(gdArg);
+		fJavaCompileExtraClasspath.setFont(font);
+		fJavaCompileExtraClasspath.addModifyListener(new ModifyListener() {
+			public void modifyText(ModifyEvent e) {
+				updateLaunchConfigurationDialog();
+			}
+		});
+	}
+	
+	private void createJavaRuntimeExtraClasspathControl(Font font, Composite comp)
+	{
+		Label classpathLabel = new Label(comp, SWT.NONE);
+		classpathLabel.setText("Java runtime classpath:");
+		GridData gdArg = new GridData(GridData.BEGINNING);
+		classpathLabel.setLayoutData(gdArg);
+		classpathLabel.setFont(font);
+		
+		fJavaRuntimeExtraClasspath = new Text(comp, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL); // a multi line text box, every argument should be placed on its own line
+		gdArg = new GridData(GridData.FILL_HORIZONTAL);
+		gdArg.horizontalSpan = 2;
+		gdArg.verticalSpan = 5;
+		fJavaRuntimeExtraClasspath.setLayoutData(gdArg);
+		fJavaRuntimeExtraClasspath.setFont(font);
+		fJavaRuntimeExtraClasspath.addModifyListener(new ModifyListener() {
+			public void modifyText(ModifyEvent e) {
+				updateLaunchConfigurationDialog();
+			}
+		});
+	}
 
 	private void createArgumentsControl(Font font, Composite comp) {
 		// runtime arguments
@@ -220,6 +275,19 @@
 				fCompileArgumentsText.setText(flatString);
 			}
 			
+			// java compile classpath
+			List javaCompileClasspath = configuration.getAttribute(IStrategoConstants.ATTR_JAVA_COMPILE_CLASSPATH_LIST, (List) null);
+			if (javaCompileClasspath != null) {
+				String flatString = CollectionUtils.join(javaCompileClasspath, Text.DELIMITER);
+				fJavaCompileExtraClasspath.setText(flatString);
+			}
+			// java runtime classpath
+			List javaRuntimeClasspath = configuration.getAttribute(IStrategoConstants.ATTR_JAVA_RUNTIME_CLASSPATH_LIST, (List) null);
+			if (javaRuntimeClasspath != null) {
+				String flatString = CollectionUtils.join(javaRuntimeClasspath, Text.DELIMITER);
+				fJavaRuntimeExtraClasspath.setText(flatString);
+			}
+			
 			// recompile stratego program before each launch
 			boolean recompileSelected = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_RECOMPILE, (boolean) true);
 			fProgramRecompile.setSelection(recompileSelected);
@@ -241,7 +309,7 @@
 		}
 		configuration.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, program);
 		
-		// runtime arguments
+		// stratego program arguments
 		String runtimeArguments = fProgramArgumentsText.getText().trim();
 		if (runtimeArguments.length() == 0) {
 			runtimeArguments = null;
@@ -254,7 +322,7 @@
 		List<String> runtimeArgumentsList = Arrays.asList(runtimeArgumentsArray);
 		configuration.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_ARGUMENTS, runtimeArgumentsList);
 		
-		// runtime arguments
+		// stratego compile arguments (str->java)
 		String compileArguments = fCompileArgumentsText.getText().trim();
 		if (compileArguments.length() == 0) {
 			compileArguments = null;
@@ -267,6 +335,32 @@
 		List<String> compileArgumentsList = Arrays.asList(compileArgumentsArray);
 		configuration.setAttribute(IStrategoConstants.ATTR_STRATEGO_COMPILE_ARGUMENTS, compileArgumentsList);
 		
+		// java compile extra classpath (java->class)
+		String javaCompileClasspath = fJavaCompileExtraClasspath.getText().trim();
+		if (javaCompileClasspath.length() == 0) {
+			javaCompileClasspath = null;
+		}
+		String[] javaCompileClasspathArray = new String[0];
+		if (javaCompileClasspath != null)
+		{
+			javaCompileClasspathArray = javaCompileClasspath.split(Text.DELIMITER);
+		}
+		List<String> javaCompileClasspathList = Arrays.asList(javaCompileClasspathArray);
+		configuration.setAttribute(IStrategoConstants.ATTR_JAVA_COMPILE_CLASSPATH_LIST, javaCompileClasspathList);
+		
+		// java runtime extra classpath
+		String javaRuntimeClasspath = fJavaRuntimeExtraClasspath.getText().trim();
+		if (javaRuntimeClasspath.length() == 0) {
+			javaRuntimeClasspath = null;
+		}
+		String[] javaRuntimeClasspathArray = new String[0];
+		if (javaRuntimeClasspath != null)
+		{
+			javaRuntimeClasspathArray = javaRuntimeClasspath.split(Text.DELIMITER);
+		}
+		List<String> javaRuntimeClasspathList = Arrays.asList(javaRuntimeClasspathArray);
+		configuration.setAttribute(IStrategoConstants.ATTR_JAVA_RUNTIME_CLASSPATH_LIST, javaRuntimeClasspathList);
+		
 		// recompile
 		boolean reCompileSelected = fProgramRecompile.getSelection();
 		configuration.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_RECOMPILE, reCompileSelected);

From r.t.lindeman at student.tudelft.nl  Tue Apr 12 17:26:33 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Tue, 12 Apr 2011 15:26:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22506 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core...
Message-ID: <20110412152633.16ABF7F8008@mx1.tudelft.nl>

Author: RickyLindeman
Date: Tue Apr 12 15:26:32 2011
New Revision: 22506
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22506&sc=1

Log:
* Cleanup sysouts...
 * Do not drop annotations when inserting s-fail events

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugElement.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoThread.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-fail-catch.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Tue Apr 12 11:34:26 2011	(r22505)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Tue Apr 12 15:26:32 2011	(r22506)
@@ -202,17 +202,17 @@
 	// ILaunchListener interface
 	public void launchRemoved(ILaunch launch) {
 		// TODO Auto-generated method stub
-		System.out.println("removed");
+		System.out.println("Launch removed");
 	}
 	
 	public void launchAdded(ILaunch launch) {
 		// TODO Auto-generated method stub
-		
+		System.out.println("Launch added");
 	}
 	
 	public void launchChanged(ILaunch launch) {
 		// TODO Auto-generated method stub
-		
+		System.out.println("Launch changed");
 	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugElement.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugElement.java	Tue Apr 12 11:34:26 2011	(r22505)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugElement.java	Tue Apr 12 15:26:32 2011	(r22506)
@@ -89,7 +89,6 @@
 	 * Fires a <code>CREATE</code> event for this element.
 	 */
 	protected void fireCreationEvent() {
-		System.out.println("fireCreationEvent");
 		fireEvent(new DebugEvent(this, DebugEvent.CREATE));
 	}	
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoThread.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoThread.java	Tue Apr 12 11:34:26 2011	(r22505)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoThread.java	Tue Apr 12 15:26:32 2011	(r22506)
@@ -164,7 +164,6 @@
 				return;
 			}
 		}
-		System.out.println("ECLIPSE STEP INTO");
 		// TODO: the jdi eclipse plugin uses scheduling and such
 		((StrategoDebugTarget)getDebugTarget()).getDebugSessionManager().stepInto();
 	}
@@ -181,7 +180,6 @@
 				return;
 			}
 		}
-		System.out.println("ECLIPSE STEP OVER");
 		// TODO: the jdi eclipse plugin uses scheduling and such
 		((StrategoDebugTarget)getDebugTarget()).getDebugSessionManager().stepOver();
 	}
@@ -198,7 +196,6 @@
 				return;
 			}
 		}
-		System.out.println("ECLIPSE STEP RETURN");
 		// TODO: the jdi eclipse plugin uses scheduling and such
 		((StrategoDebugTarget)getDebugTarget()).getDebugSessionManager().stepReturn();
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Tue Apr 12 11:34:26 2011	(r22505)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Tue Apr 12 15:26:32 2011	(r22506)
@@ -474,7 +474,7 @@
 	
 	private void log(String message)
 	{
-		System.out.println(message);
+		//System.out.println(message);
 	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java	Tue Apr 12 11:34:26 2011	(r22505)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java	Tue Apr 12 15:26:32 2011	(r22506)
@@ -30,7 +30,29 @@
 	
 	public boolean remove(BreakPoint b)
 	{
-		return this.breakPoints.remove(b);
+		boolean ret = true;
+		if (this.breakPoints.contains(b))
+		{
+			this.breakPoints.remove(b);
+		} else
+		{
+			BreakPoint pbRemove = null;
+			for(BreakPoint bp : this.breakPoints)
+			{
+				boolean sameFile = bp.getFilename().equals(b.getFilename());
+				boolean sameLine = bp.getLineNumber() == b.getLineNumber();
+				if (sameFile && sameLine)
+				{
+					pbRemove = bp;
+				}
+			}
+			boolean removed = this.breakPoints.remove(pbRemove);
+			if (!removed)
+			{
+				System.out.println("Second remove also failed!");
+			}
+		}
+		return ret;
 	}
 	
 	public boolean contains(BreakPoint b) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-fail-catch.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-fail-catch.str	Tue Apr 12 11:34:26 2011	(r22505)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-fail-catch.str	Tue Apr 12 15:26:32 2011	(r22506)
@@ -48,7 +48,7 @@
 	// current term is not a list of WhereClause or WithClause terms
     // current term can be a Strategy
 	add-block-to-conditions(|filename, r-name) :
-			s{a} -> s'
+			s{a} -> s'{a}
 		where not(<is-list> s)
 		with
 			s' := <create-block(|filename, r-name, a)> s
@@ -61,12 +61,12 @@
 		  
 	
 	add-block-to-clause(|filename, r-name) :
-		WhereClause(s){a} -> WhereClause(s')
+		WhereClause(s){a} -> WhereClause(s'){a}
 		with
 			s' := <create-block(|filename, r-name, a)> s
 			
 	add-block-to-clause(|filename, r-name) :
-		WithClause(s){a} -> WithClause(s')
+		WithClause(s){a} -> WithClause(s'){a}
 		with
 			s' := <create-block(|filename, r-name, a)> s
 			

From rendel at informatik.uni-marburg.de  Wed Apr 13 11:27:58 2011
From: rendel at informatik.uni-marburg.de (Tillmann Rendel)
Date: Wed, 13 Apr 2011 09:27:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22507 -
	sugarj/trunk/case-studies/xml
Message-ID: <20110413092758.3F5507F8002@mx1.tudelft.nl>

Author: TillmanRendel
Date: Wed Apr 13 09:27:57 2011
New Revision: 22507
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22507&sc=1

Log:
improved editor services for XML case study (syntax highlighting for embedded Java, fixed outliner)

Modified:
   sugarj/trunk/case-studies/xml/BookTest.sugj
   sugarj/trunk/case-studies/xml/XmlEditor.sugj

Modified: sugarj/trunk/case-studies/xml/BookTest.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/BookTest.sugj	Tue Apr 12 15:26:32 2011	(r22506)
+++ sugarj/trunk/case-studies/xml/BookTest.sugj	Wed Apr 13 09:27:57 2011	(r22507)
@@ -14,7 +14,7 @@
      
     String title = "Sweetness and Power: The Place of Sugar in Modern History";
     
-    ch.<book title="{title}" >
+    ch.<book title="{new String(title)}" >
          <author name="Sidney W. Mintz" />
        </book>;
   }

Modified: sugarj/trunk/case-studies/xml/XmlEditor.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/XmlEditor.sugj	Tue Apr 12 15:26:32 2011	(r22506)
+++ sugarj/trunk/case-studies/xml/XmlEditor.sugj	Wed Apr 13 09:27:57 2011	(r22507)
@@ -9,7 +9,11 @@
      
     environment ElemName : blue
     environment AttrName : darkorange
-    environment AttValue : darkred
+    
+    AttValue : darkred
+    _.CharDataPart : darkred
+    FooDoubleQuotedText : darkred
+    
     environment CharData : black
     environment CharDataSection : black
     
@@ -19,7 +23,7 @@
     Element.Element
     
   outliner XmlOutliner
-    ElemName._
+    Element._
   
   completions
     completion template : ElemName = "author"

From M.A.Akhter at student.tudelft.nl  Wed Apr 13 17:33:32 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 13 Apr 2011 15:33:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22508 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax
Message-ID: <20110413153332.B596C108C037@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 13 15:33:32 2011
New Revision: 22508
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22508&sc=1

Log:
* Updated Syntax with Package/Module Constructs

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.pp
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Concepts.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SPXCommon.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Concepts.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Concepts.sdf	Wed Apr 13 09:27:57 2011	(r22507)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Concepts.sdf	Wed Apr 13 15:33:32 2011	(r22508)
@@ -1,7 +1,7 @@
 module Concepts
 
 imports
-  Common
+  SPXCommon
 
 exports
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SPXCommon.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SPXCommon.sdf	Wed Apr 13 09:27:57 2011	(r22507)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SPXCommon.sdf	Wed Apr 13 15:33:32 2011	(r22508)
@@ -44,3 +44,63 @@
     LAYOUT? -/- [\ \t\n\r]
     LAYOUT? -/- [\/].[\/]
     LAYOUT? -/- [\/].[\*]
+
+	lexical restrictions
+		
+		"main"
+		"module" 
+		"package" 
+		"imports"	-/- [A-Za-z0-9\_]
+		 
+
+	lexical syntax     
+    
+    "project"           -> Reserved
+    "retain"            -> Reserved
+    "with"              -> Reserved
+    "unimports"         -> Reserved
+    
+   
+    
+    "imports"           -> Reserved
+    "overlays"          -> Reserved
+    "rules"             -> Reserved
+    "signature"         -> Reserved
+    "strategies"        -> Reserved
+    "attributes"        -> Reserved
+    
+    "aliases"           -> Reserved
+    "lexical"           -> Reserved
+    "priorities"        -> Reserved
+    "context-free"      -> Reserved
+    "definition"        -> Reserved
+    "syntax"            -> Reserved
+    "variables"         -> Reserved
+    "module"            -> Reserved
+    "imports"           -> Reserved
+    "exports"           -> Reserved
+    "hiddens"           -> Reserved
+    "left"              -> Reserved
+    "right"             -> Reserved
+    "assoc"             -> Reserved
+    "non-assoc"         -> Reserved
+    "bracket"           -> Reserved
+    "sorts"             -> Reserved
+    "bracket"           -> Reserved
+    "sorts"             -> Reserved
+    "restrictions"      -> Reserved
+  	"as"								-> Reserved
+ 		"main"							-> Reserved 
+ 		
+ 		Reserved 						-> ReservedName[[ESV]]
+ 		ReservedName[[ESV]]	-> ID {reject}
+ 		
+ 	    
+	lexical syntax 
+ 		"package"  	-> EnclosingSymbol
+		"assembly"  -> EnclosingSymbol
+		"module"  	-> EnclosingSymbol
+		
+	context-free syntax 	
+		"main"			-> MainID{cons("Main")}
+		
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Wed Apr 13 09:27:57 2011	(r22507)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Wed Apr 13 15:33:32 2011	(r22508)
@@ -30,10 +30,12 @@
   lexical syntax
     {ID "/"}+       -> QID 
     {ID ("/"|".")}+ -> QIDWithDots
-
+		
   context-free syntax
   
-    "module" ModuleName Section* -> Start {cons("Module")}
+		ImportSection* PackageDefinition* 							-> Start{cons("CompilationUnit") }
+    "package" QName "{" Module*  "}"								-> PackageDefinition {cons("Package")}
+    MainID? "module" SPXModuleName "{" Section* "}" -> Module {cons("Module")}
     
     Grammar[[SDF]] -> Section {cons("SDFSection")}
     Decl[[STR]]    -> Section {cons("STRSection")}
@@ -47,71 +49,66 @@
 
     
     %% TODO: Support SDF .def "definitions"?
-    
     %% TODO: Mark deprecated, ast, and maybe other attrs as keyword using a {prefer, ast} production
-  
-  context-free syntax %% Imports
-    
+ 
+  context-free syntax
+    QID "[" Symbols[[SDF]] "]" -> QName  {cons("ParamName")}
+    QID		  									 -> LegacyImportName {cons("Name")}	
+    {ID "." }+								 -> QName	 {cons("QName")}
+	  ID 												 -> QName	 {cons("Name"),prefer}
+    ID  											 -> SPXModuleName	 {cons("SPXModuleName")}
+   	  
+	context-free syntax %% Imports   	
     %% TODO: SDF: "retains" clause eliminates need for "hiddens" section. except we need something to hide the start symbols
     %% Maybe a "with start symbols" clause, combined with a warning if the syntax has start symbols but the clause is not specified?
-    
-    "imports" Import*          -> ImportSection {cons("Imports")}
+    "imports" Import*          -> ImportSection {cons("Imports"),prefer}
     "unimports" Import*        -> ImportSection {cons("Unimports")}
-    
-    QID "[" Symbols[[SDF]] "]" -> ModuleName  {cons("ParamName")}
-    QID                        -> ModuleName  {cons("Name")}
-    
+ 
+    ImportedModule 		                   -> Import 
     ModuleName                           -> Import {cons("Import")}
     ModuleName "retain" Renamings[[SDF]] -> Import {cons("ImportRetain")}
     ModuleName          Renamings[[SDF]] -> Import {cons("ImportRename")}
-    "package" QIDWithDots                -> Import {cons("PackageImport")}
-    "(" Import ")"                       -> Import {bracket, deprecated} %% SDF-style import
-    
-    "project"           -> Reserved
-    "retain"            -> Reserved
-    "with"              -> Reserved %% future use?
-    "unimports"         -> Reserved
-    
-    "imports"           -> Reserved
-    "overlays"          -> Reserved
-    "rules"             -> Reserved
-    "signature"         -> Reserved
-    "strategies"        -> Reserved
-    "attributes"        -> Reserved
-    
-    "aliases"           -> Reserved
-    "lexical"           -> Reserved
-    "priorities"        -> Reserved
-    "context-free"      -> Reserved
-    "definition"        -> Reserved
-    "syntax"            -> Reserved
-    "variables"         -> Reserved
-    "module"            -> Reserved
-    "imports"           -> Reserved
-    "exports"           -> Reserved
-    "hiddens"           -> Reserved
-    "left"              -> Reserved
-    "right"             -> Reserved
-    "assoc"             -> Reserved
-    "non-assoc"         -> Reserved
-    "bracket"           -> Reserved
-    "sorts"             -> Reserved
-    "bracket"           -> Reserved
-    "sorts"             -> Reserved
-    "restrictions"      -> Reserved
-    "scopes"            -> Reserved
-    
+    "namespace" QIDWithDots              -> Import {cons("NamespaceImport")}
+    "(" Import ")"                       -> Import {bracket, deprecated}
+
+	context-free syntax    
+    LegacyImportName				 				   -> ImportedModule{cons("ImportLegacyArtifact"), prefer}
+    QName "::" SPXModuleName 				   -> ImportedModule{cons("ImportSpxModule"), prefer} 
+    QName		   					   					 	 -> ImportedModule{cons("ImportPackage")}
+    QName "as" ID					   					 -> ImportedModule{cons("ImportPackageWithAlias"),prefer}	
+
+	context-free syntax
+		"[" {AttributeDef "," }+ "]"  	-> Attribute{cons("AttributeSection")}
+		
+		ID  -> AttributeDef 
+		ID Attribute-arguments-> AttributeDef{prefer}
+	  
+	  Target ":" Attribute -> AttributeDef{non-assoc} 
+	    
+	  EnclosingSymbol  -> Target{cons("Target")} 
+	    
+		ID-> Argument-name{cons("Argument-Name")}
+		ID -> Attribute-argument-expression	
+		
+		Argument-name? Attribute-argument-expression -> Positional-argument{cons("Positional-argument")}
+		STRING -> Positional-argument{cons("Positional-argument")}
+		
+		ID "=" STRING -> Named-argument{cons("Named-argument")}
+	    
+		"(" {Named-argument ","}+ ")" -> Attribute-arguments
+	  "(" {Positional-argument ","}+ ")" -> Attribute-arguments
+	  "(" {Positional-argument ","}+  "," {Named-argument ","}*")" -> Attribute-arguments{prefer}
+	      
+
+  context-free syntax 
     Reserved            -> ReservedName[[ESV]]
-    
     ReservedName[[ESV]] -> ModuleName {reject}
-    
 
-  context-free syntax %% simplified constructors, highlight annos
-    
+	context-free syntax %% simplified constructors, highlight annos
     Constructor                 -> Attribute[[SDF]] {prefer, cons("Constructor")}
     "recover"                   -> Attribute[[SDF]] {prefer, ast("term(default(fun(unquoted(\"recover\"))))")}
     "incremental"               -> Attribute[[SDF]] {prefer, ast("term(default(fun(unquoted(\"incremental\"))))")}
     "deprecated"                -> Attribute[[SDF]] {prefer, ast("term(default(fun(unquoted(\"deprecated\"))))")}
     "deprecated" "(" STRING ")" -> Attribute[[SDF]] {prefer, ast("term(default(appl(unquoted(\"deprecated\"), [fun(quoted(<1>))])))")}
     "cons" "(" Constructor ")"  -> Attribute[[SDF]] {prefer, ast("term(default(appl(unquoted(\"cons\"), [fun(quoted(<1>))])))")}
-    StrCon[[SDF]]               -> Constructor
\ No newline at end of file
+    StrCon[[SDF]]               -> Constructor	    
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Wed Apr 13 17:50:32 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 13 Apr 2011 15:50:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22509 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	analyze analyze/esv analyze/sdf analyze/str codegen
	codegen/esv codegen/sdf codegen/str context co...
Message-ID: <20110413155032.1B3762B8044@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 13 15:50:31 2011
New Revision: 22509
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22509&sc=1

Log:
* packaging system  implementation for Spoofax
* scope-tree for managing scopes of the namespaces
* added support to compute dependency and compile artifacts using build order.
* added support for compiling and building + generating artifacts e.g. sdf, str, esv
* auto generation of the build script to generate ctree , def and packed.esv
* ..... so on.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/esv/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/esv/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/signature-generator.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/completion/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/resolve/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/resolve/imports.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/signatures.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/stratego.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/path.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resolve-symbol.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/unzip-semantic-issues.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/annotations.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/desugar.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analysis.str	Wed Apr 13 15:33:32 2011	(r22508)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analysis.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -1,10 +1,11 @@
 module analysis
 imports 
 	sdf/analysis
-	str/analysis
+	context/str/declare
 	esv/analysis
 imports 
 	common
+	config
 imports
 	lib/editor-common.generated
 			
@@ -28,22 +29,22 @@
   with 
   	rules
   	(
-  		Analyzed-ast := ast'''	
+  		AnalyzedAst := ast'''	
   	)
 	where 
 		<debug> $[Spoofax-lang|Starting analysis of the following SPX file:$[$[<base-filename> path]$]$]
   
 rules 
-	/* 
+	/**  
 	* Performs pre-analysis steps on AST
 	*
-	**/ 
+	*/ 
 	pre-analyze-ast:
 		i@(ast, path, project-path) -> i
  	with 
-		initialize-configuration //sets up various configuration
+		initialize-configuration 													//sets up various configuration
 	with 
-		<store-definition(|$[[project-path]/[path]])>ast
+		<store-definition(|$[[project-path]/[path]])>ast	// desugaring whole AST 
 	where 
 		<debug> $[Spoofax-lang|Pre-analysis]
   

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/esv/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/esv/check.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,41 @@
+module analyze/esv/check
+
+imports
+	common
+	esv/main
+	esv/analysis
+imports 
+	utils/debug
+	context/scope-tree
+imports
+  include/SpoofaxLang
+
+// TODO: warn about multi-char highlighted brackets
+// TODO: check if provider/imported/etc. files exist
+// TODO: check if there is _any_ provider for observer etc.
+ 
+
+//TODO : check whether language description is there . Otherwise raise warning as build will fail anyway if the information is not provided.
+
+rules 
+	resolve-sdf-sort-declaration = 
+ 		?symbol; 
+ 		<resolve-symbol-unique-declaration(all-keys-SortDeclaration , bagof-SortDeclaration)><to-scoped-symbol>symbol 
+ 	<+
+ 		<debug-analysis> $[ErrorChecking|Failed to retrive SDF Sort for symbol [<pp-aterm>]];
+ 		fail
+
+
+
+rules
+	constraint-esv-error:
+    Sort(x) -> (x, $[Unknown sort [x]])
+    where
+      not(<resolve-sdf-sort-declaration> x)
+  
+  constraint-esv-error:
+    SemanticProvider(x) -> (x, $[Must be a generated .ctree or .jar file])
+    where
+      not(<string-ends-with(|".jar") + string-ends-with(|".ctree")> x)
+   		
+   		 
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,206 @@
+module analyze/main
+
+imports 
+	context/sdf/declare
+	context/scope-tree
+	normalize/signatures
+imports 
+	include/SpoofaxLang
+imports
+	common
+	utils/annotations
+	utils/debug	
+imports 
+	analyze/sdf/check 
+	analyze/esv/check
+	analyze/str/check 
+	lib/editor-common.generated
+	
+rules
+	get-all-analyzed-problems =  all-keys-GetSemanticProblems ; map(GetSemanticProblems); unzip-semantic-issuses 
+	
+	get-analyzed-problems-of: scope@(package-typed-qname, module-typed-qname) -> problems
+		with 
+			<?Package(QName(_))>package-typed-qname;
+			<?Module(QName(_))> module-typed-qname
+			<+
+			debug(!"ErrorChecking | Failed to get analyzed errors . Invalid QName Arguments :");fail
+		where
+			<GetSemanticProblems>scope => problems 
+		where
+			<debug> $[ErrorChecking |  Problmes for [<pp-aterm-forced>scope] :  [<pp-aterm-forced>problems]]	
+
+rules	
+	module-constraint-error : 
+		Module(attrb* , s at SPXModuleName(modname) , section*) -> (modname, $[Multiple declaration of module '[modname]' ])
+			with
+				package-typed-qname := <get-annotation(get-package-annotation)> s
+				;Module(module-qname)  := <get-module-typed-qname>(package-typed-qname, s)
+			where 
+				require(<bagof-DeclaredModule>module-qname => [_])
+				
+	analyze: 
+		m at Module(attrb* , modname , section*) -> m
+		where 
+				 package-typed-qname := <GetEnclosingPackageName> 
+				;module-typed-qname  := <GetEnclosingModuleName>
+				<+ 
+				debug(!"ErrorChecking | Failed to create current scope.")
+				;fail
+		where
+				<debug-analysis>$[ErrorChecking | Analyzing Semantic Problems of [<pp-aterm-forced> (package-typed-qname,module-typed-qname)]]	 
+		where
+				issues* := <map(analyze-section)>section*
+				;unziped-issues* := <unzip-semantic-issuses>issues*
+				;current-scope := (package-typed-qname ,module-typed-qname)
+				;if (<GetSemanticProblems>current-scope => existing-problems) then
+					<debug(!"ErrorChecking | Modules with duplicate name found for following: ")>current-scope;
+					!unziped-issues*  =>(e, w, i); 
+					!existing-problems => ( e',w',i');
+					unziped-issues'* :=   <unzip-semantic-issuses>[(e, w, i)|[( e',w',i')]]
+					 
+				else
+					unziped-issues'* :=   unziped-issues*
+				end
+				;<collect-all(module-constraint-error, conc)>m  => merrors'
+				;!unziped-issues'*  =>(err, warning, info)	 
+				;<unzip-semantic-issuses>[(err, warning, info)|[(merrors',[],[])]] =>unziped-issues''*
+				;rules(
+						GetSemanticProblems :  current-scope  ->unziped-issues''*  
+					)	
+					
+		where
+			<debug-compiler>$[ErrorChecking | Found semantic problems for [<pp-aterm-forced> (package-typed-qname,module-typed-qname)]  
+			Problems :[<pp-aterm-forced> unziped-issues*]]
+							
+		 
+	analyze-section = 
+		where(not(?SDFSection(_) + ?ESVSection(_) + ?STRSection(_) + ?SDFSectionEH(_, _)))
+		;<debug-analysis>$[ErrorChecking | Ignoring Section: [<pp-aterm>]] 
+		;!([], [], [])		
+
+	analyze-section: 
+			SDFSectionEH(_, ast) -> <analyze-sdf-errors>ast
+	
+	analyze-section: 
+			SDFSection(ast) -> <analyze-sdf-errors>ast 
+			where
+				<debug-analysis>$[ErrorChecking | SDF Section : [<pp-aterm>]]
+    	with
+	      // We only collect-om since we don't want inner warning dupes
+	      error*   := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-error)>), conc)> ast;
+	      warning* := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-warning)>), conc)> ast;
+	      if <file-exists> $[[<project-path>]/.disable-global-analysis] then
+	        serror* := []
+	      else
+	        serror* := <collect-om(context-free-syntax-sort-error, conc)> ast
+	      end;
+	      error'*   := <conc;flatten-list> (serror*, error*);
+	      warning'* := <flatten-list> warning*
+	
+	analyze-sdf-errors : ast -> (error'*, warning'*, [])
+	where
+		<debug-analysis>$[ErrorChecking | SDF Section : [<pp-aterm>]]
+	with
+    // We only collect-om since we don't want inner warning dupes
+    error*   := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-error)>), conc)> ast;
+    warning* := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-warning)>), conc)> ast;
+    if <file-exists> $[[<project-path>]/.disable-global-analysis] then
+      serror* := []
+    else
+      serror* := <collect-om(context-free-syntax-sort-error, conc)> ast
+    end;
+    error'*   := <conc;flatten-list> (serror*, error*);
+    warning'* := <flatten-list> warning*
+
+	       
+  analyze-section: 
+		ESVSection(ast) -> (error-esv*, [], [])
+  	where
+  		<debug-analysis>$[ErrorChecking | ESV Section : [<pp-aterm>]]
+		where
+  		error-esv*   := <collect-all(constraint-esv-error, conc)> ast
+      	
+  analyze-section: 
+		STRSection(ast) -> ( errors, warnings, [])
+		where
+  		<debug-analysis>$[ErrorChecking | STR Section : [<pp-aterm>]]
+		with
+    	errors   := <collect-all(global-constraint-error + constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast
+      
+			
+ 	rules
+	/* Converts a list as following 
+	[([a1] , [b1] , [c1])
+	([a2] , [b2] , [c2])
+	([a3] , [b3] , [c3])
+	] 
+	To:
+	([a1,a2,a3] , [b1,b2,b3] , [c1,c2,c3])
+	*/
+	unzip-semantic-issuses:
+		list-of-semantic-issues -> unziped-list
+		where
+			<unzip-semantic-issuse(|[] , [], [])>list-of-semantic-issues => unziped-list
+			<+
+			debug(!"unzip semantic issues failed : ");fail
+	
+	//unziping list of semantic issues
+	unzip-semantic-issuse(|errors, warnings, infos) =
+		?[hd-issue|rest-issues];
+		(
+				(!hd-issue => (errs', warns' , infos') <+ <debug> $["Illegal Argument in unzip-semantic-issues : [<pp-aterm>hd-issue]"];fail)
+				;err1 := <concat>[errs', errors]
+				;war1 := <concat>[warns', warnings]
+				;inf1 := <concat>[infos', infos]
+				;<unzip-semantic-issuse(|err1, war1, inf1)>rest-issues
+			 <+
+			  !hd-issue => [];
+			  <unzip-semantic-issuse(|errors, warnings, infos)>rest-issues
+		)
+			
+		
+		
+	unzip-semantic-issuse(|errors, warning, infos) : [] -> (errors, warning, infos)		
+ 		
+ 		
+ 	
+/*
+	Idea is following . Build a scope tree as follows .
+	
+	Globals   = all the symbols from the legacy import will stored in this namespace
+	  |
+	Packages  = package consist of modules 
+		|
+	Modules		= modules consist of Sections i.e. STR Sections , SDF Sections and ESV Sections
+	
+*/	
+
+
+
+/*
+Todo: 
+	without import => make the package analysis and code generation works
+*/
+
+
+/*
+TODO : 
+-----------------------------------------------------------------------
+Visibility to package level : 
+Follow the nested scoping as mentioned in Language Implementation Patterns 
+
+	* Add visibility modifier such as   > Public : Visibility , Private : Visibility  , Internal : 
+	
+		Internal > internal to assembly
+		Private  > private to a concept  todo >>> will be useful to handle hiddens. Take care of hiddens in the symbol table that we are about to build. 
+		Public   > public  , everything is by default public. 
+		
+	* While creating a nested scope , anotate the tree with the extra attributes . 
+	* Import-chain > 1 => Internal Visibility 
+	
+Accessing Internal members will results in "Are you missing any reference to ..."
+
+*/	 		
+ 		     
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,144 @@
+module analyze/sdf/check
+
+imports
+ 	common
+ 	utils/debug
+  context/sdf/declare
+  context/scope-tree 
+  include/SpoofaxLang
+	
+
+strategies 
+  /**
+   * Tests if something is a non-terminal in terms of the AST produced.
+   */
+  is-non-terminal =
+    ?sort(_) + ?opt(_) + is-iter
+  
+  is-iter =
+    ?iter(_) + ?iter-star(_) + ?iter-sep(_, _) + ?iter-star-sep(_, _)
+  
+
+// Limited exisiting sort checking  
+rules  //global checks
+ 
+  context-free-syntax-sort-error:
+    sort(x) -> (x, $[No definition for [x]])
+    where
+      not(<resolve-sdf-declaration> x) 
+  
+  context-free-syntax-sort-error:
+    parameterized-sort(_, _) -> [] // not supported
+  
+  context-free-syntax-sort-error:
+    'sorts(_) -> [] // ignored
+
+
+rules // Local checks
+   context-free-syntax-warning:
+    prod(p*, s, a*) -> (target, $[Missing {"Label"} attribute to label the abstract syntax])
+    where
+      (
+        not(<occurrences(?sort(_))> p* => 1; <occurrences(?lit(_))> p* => 0)
+      <+
+        <oncetd(is-iter + ?opt(_))> p*
+      );
+      if !a* => attrs(a'*) then
+        not(<one(term(default(appl(unquoted("cons" + "ast"), [fun(quoted(not("\"\"")))]))))> a'*);
+        not(<one(?Constructor(_))> a'*);
+        not(<one(bracket() + reject())> a'*);
+        not(!s; (sort("Keyword") + sort("\"Keyword\""))); 
+        target := a*
+      else
+        target := s
+      end
+      
+  context-free-syntax-warning:
+    t @ term(default(appl(unquoted("cons"), a*))) -> (t, $[Single argument expected for {cons("Name")} attribute])
+    where
+      not(<length> a* => 1)
+  
+  context-free-syntax-warning:
+    t @ term(default(annotated(_, _))) -> (t, $[Use round parentheses () for attribute arguments])
+  
+  context-free-syntax-error:
+    prod([x], s, attrs(a*)) -> (a*, $[Illegal use of {bracket} attribute])
+    where
+      <one(bracket())> a*
+   
+  // TODO: don't warn for | in {reject} productions
+  context-free-syntax-warning:
+    alt(x, y) -> (<id>, $[The | construct is deprecated: instead of A|B->C use A->C B->C])
+
+  context-free-syntax-warning:
+    opt(s @ seq(_, _)) -> (s, $[Extract sequence in optional to separate productions to ensure acceptable abstract syntax])
+    where
+      <occurrences(is-non-terminal)> s => 1
+
+  context-free-syntax-warning:
+    opt(lit) -> (lit, $[Extract literal in optional to separate productions to ensure consistent abstract syntax])
+    where
+      oncetd(?lit(_))
+   // Instruct users to use { X "," }*
+
+  context-free-syntax-warning:
+    [sort(x), iter-star(seq(lit(sep), [sort(x)])) | _] ->
+    (<id>, $[Use {[x] [sep]}+ instead for [sep]-separated lists])
+
+  context-free-syntax-warning:
+    [iter-star(seq(sort(x), [lit(sep)])), sort(x) | _] ->
+    (<id>, $[Use {[x] [sep]}+ instead for [sep]-separated lists])
+
+  context-free-syntax-warning:
+    [opt(sort(x)), iter-star(seq(lit(sep), [sort(x)])) | _] ->
+    (<id>, $[Use {[x] [sep]}* instead for [sep]-separated lists])
+
+  context-free-syntax-warning:
+    [iter-star(seq(sort(x), [lit(sep)])), opt(sort(x)) | _] ->
+    (<id>, $[Use {[x] [sep]}* instead for [sep]-separated lists])
+
+  context-free-syntax-warning:
+    prod(lhs @ [sort(x), opt(seq(lit(sep), [sort(xs)]))], sort(xs), _) ->
+    (lhs, $[Use {[x] [sep]}+ instead for [sep]-separated lists])
+       
+  // Instruct users to use { X ","? }* (seen in MDSD 2010)
+
+  context-free-syntax-warning:
+    [sort(x), iter-star(seq(opt(lit(sep)), [sort(x)])) | _] ->
+    (<id>, $[Use {[x] [sep]?}+ instead for [sep]?-separated lists])
+
+  context-free-syntax-warning:
+    [iter-star(seq(sort(x), [opt(lit(sep))])), sort(x) | _] ->
+    (<id>, $[Use {[x] [sep]?}+ instead for [sep]?-separated lists])
+
+  context-free-syntax-warning:
+    [opt(sort(x)), iter-star(seq(opt(lit(sep)), [sort(x)])) | _] ->
+    (<id>, $[Use {[x] [sep]?}* instead for [sep]?-separated lists])
+
+  context-free-syntax-warning:
+    [iter-star(seq(sort(x), [opt(lit(sep))])), opt(sort(x)) | _] ->
+    (<id>, $[Use {[x] [sep]?}* instead for [sep]?-separated lists])
+
+  context-free-syntax-warning:
+    prod(lhs @ [sort(x), opt(seq(opt(lit(sep)), [sort(xs)]))], sort(xs), _) ->
+    (lhs, $[Use {[x] [sep]?}+ instead for [sep]?-separated lists])
+
+  context-free-syntax-warning:
+    [_ | t*] -> <context-free-syntax-warning> t*
+
+  context-free-syntax-warning:
+    iter-star(cs) -> (<id>, $[Character class iteration should be in lexical syntax section])
+    where
+      <oncetd(?range(_, _))> cs
+
+  context-free-syntax-warning:
+    iter(cs) -> (<id>, $[Character class iteration should be in lexical syntax section])
+    where
+      <oncetd(?range(_, _))> cs
+    
+  context-free-syntax-warning:
+    iter-sep(_, bad @ sort(_)) -> (bad, "Non-terminal used as a list separator (use round braces for grouping non-terminals)") 
+  
+  context-free-syntax-warning:
+    iter-star-sep(_, bad @ sort(_)) -> (bad, "Non-terminal used as a list separator (use round braces for grouping non-terminals)") 
+

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,189 @@
+module analyze/str/check
+
+imports
+	 libstratego-lib
+ 	 libstrc
+imports 
+	common
+	lib/editor-common.generated
+	include/SpoofaxLang
+imports
+	utils/debug 
+imports  
+	context/sdf/declare-signature
+	context/str/declare
+	context/str/signature-generator
+	 
+	
+rules 
+	//TODO : Use new Is-declared in other cases where needed. 		
+  is-declared( |actual-no-of-arguments)=
+  	one(
+    		(?opName + ?SVar(opName))
+    		;candidate-op-signatures := <getOperationSignatures>opName
+    		;<debug-analysis>$[operation name : [<pp-aterm>opName] . Associated Signatures Found :  [<pp-aterm> candidate-op-signatures]]
+    		;<assert-eq-opname-arity(|opName, actual-no-of-arguments)>candidate-op-signatures
+    		;!opName 
+      )
+  	   
+  is-declared =
+    	one(?_{cookie} + ?SVar(_{cookie}))
+	
+	assert-eq-opname-arity(|actual-opname , actual-no-of-arguments)= 
+			?[hd|tl]
+			;(	(expected-op-name , expected-no-of-arguments) := hd 
+					;	actual-opname := expected-op-name 
+					; actual-no-of-arguments := expected-no-of-arguments
+			  <+
+					<assert-eq-opname-arity(|actual-opname , actual-no-of-arguments)>tl
+				)	  
+       
+rules // Constraints
+
+  global-constraint-error:
+    CallT(SVar(x), s*, t*) -> (x, $[Strategy or rule '[x]' not defined])
+    where
+      //require(is-declared)
+			require(is-declared <+ is-declared(|<length> t*))
+			
+  global-constraint-error:
+    Op(x, t*) -> (x, $[Constructor [x]/[<length> t*] not declared])
+    where
+    	require(is-declared <+ is-declared(|<length> t*))
+
+  constraint-error:
+    Var(x) -> (x, $[Variable '[x]' is not declared])
+    where
+      require(is-declared)
+      
+  global-constraint-error:
+    Import(x) -> (x, $[Unable to import '[x]'])
+    where
+      require(not(<IsImportedFailed> x))
+
+  global-constraint-error:
+    DynRuleScopeId(x) -> (x, $[Dynamic rule '[x]' not defined])
+    where
+      require(is-declared)
+
+  global-constraint-error:
+    LabeledDynRuleId(x, _) -> (x, $[Dynamic rule '[x]' not defined])
+    where
+      require(is-declared)
+
+  constraint-error:
+    AnnoDef(a*, sdef @ SDefT(x, _, _, _)) -> (a*, $[No external strategy or rule '[x]'])
+    with
+      if not(!a* => []) then
+        sig := <signature-of> sdef;
+        rules(IsNoConflict: sdef)
+      end
+    where
+      require(
+        !a* => []
+      + !a* => [Internal()]
+      + <declaration-of> sdef => ExtSDef(_, _, _)
+      )
+
+  global-constraint-error:
+    SDefT(x{cookie}, s*, t*, s) -> (x, $[Conflicts with external definition of '[x]'])
+    where
+      require(
+        <getStrDeclaration> cookie => SDefT(_, _, _, _)
+      <+
+        IsNoConflict
+      )
+
+  // FIXME: name sdefs after constructors to fix constructor conflict errors 
+  constraint-error:
+    OpDecl(x{cookie}, s*) -> [(x, $[Conflicts with strategy '[y_name]']),
+                              (y, $[Conflicts with constructor [x]/[<length> s*]])]
+    where
+      require(not(<getStrDeclaration> cookie => y @ SDefT(y_name, _, _, _)))
+
+  constraint-error:
+    Build(t) -> <constraint-error-bad-build> t
+
+  constraint-error:
+    Assign(_, t) -> <constraint-error-bad-build> t
+
+  constraint-error:
+    Rule(_, t, _) -> <constraint-error-bad-build> t
+  
+  constraint-error:
+    BA(_, t) -> <constraint-error-bad-build> t
+  
+  constraint-error:
+    App(_, t) -> <constraint-error-bad-build> t
+
+  constraint-error:
+    Match(t) -> <constraint-error-bad-match> t
+
+  constraint-error:
+    Assign(t, _) -> <constraint-error-bad-match> t
+
+  constraint-error:
+    AM(_, t) -> <constraint-error-bad-match> t
+
+  constraint-error:
+    Rule(t, _, _) -> <constraint-error-bad-match> t
+
+  constraint-error-bad-build:
+    t -> matches
+    where
+      collect(?RootApp(_) + ?App(_, _) + Wld + ?As(_, _) + ?BuildDefault(_) + ?BuildDefaultPT(_));
+      filter(not(?RootApp(_) + ?App(_, _)));
+      map(!(<id>, "Match symbol in build pattern")) => matches;
+      require([])
+
+  constraint-error-bad-match:
+    t -> builds
+    where
+      collect(?StringQuotation1(_, _) + ?StringQuotation2(_, _) + ?StringQuotation3(_, _) + ?StringQuotation4(_, _) + ?BuildDefault(_) + ?BuildDefaultPT(_));
+      filter(not(?RootApp(_) + ?App(_, _)));
+      map(!(<id>, "Build symbol in match pattern")) => builds;
+      require([])
+  
+  //TODO FIX : origin tracking is not working 
+  constraint-warning:
+    Assign(v @ Var(x), _) -> (x, $[Variable '[x]' may be bound already])
+    where
+      Var(x') := <declaration-of> v;
+      require(<origin-equal(|x)> x')
+
+  constraint-warning:
+    Var(x) -> (x, $[Unparenthesized constructor: use '[x]()' instead])
+    where
+      require(not(is-constructor))
+
+  constraint-warning:
+    CallT(SVar(<"debug" + "say">), [t], []) -> (s, $[Should be '![s]'])
+    where
+      !t => StrCong(s) + !t => IntCong(s)
+
+  constraint-warning:
+    Import("Java-15") -> (<id>, "Use 'import libjava-front' instead")
+
+  /*
+  constraint-warning:
+    Module(x, _) -> (x, $[Module name should be qualified with a path relative to the import path])
+    where
+      not(NoAnalysis);
+      {| SourceDir:
+        rules(SourceDir :- _);
+        <eq> (<base-filename> x, <remove-extension> <base-filename> <CurrentFileFullPath>);
+        require(<resolve-import-path> $[[x].str] + <resolve-import-path> $[[x].rtree])
+      |}
+  */
+
+  constraint-warning:
+    Module(x, _) -> (x, $[Module name does not correspond to file name])
+    where
+      require(<eq> (<base-filename> x, <remove-extension> <base-filename> <CurrentFileFullPath>))
+
+  constraint-warning:
+    Import(f) -> (f, $[Relative path in import])
+    where
+      <string-starts-with(|"../")> f
+
+  // TODO: overlapping signatures

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Wed Apr 13 15:33:32 2011	(r22508)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -1,4 +1,4 @@
-module buildscripts
+module codegen/buildscripts
 
 imports 
   libstratego-lib
@@ -14,37 +14,35 @@
 	include/SpoofaxLang
 imports 
 	common
+	config 
+	utils/path
+	normalize/signatures
+	codegen/main
 
 rules
-	
-	emit-build-script: (project-path, library-root , current-package-root , package-name) -> None()
-		with 
-			autogen-ant-output-file-name := "build.spx.package.generated"
-			;autogen-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", "build.spx.package.generated")
-			;ant-package-output-name := $[[<string-replace(|"/", "."); string-replace(|"\\", "."); string-replace(|":", ".")>current-package-root].[package-name]]
-			;packagespecific-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", $[build.spx.package.[ant-package-output-name]])
+	emit-build-script: package-qnames* -> package-qnames* 
+		with 
+ 			 project-path             := <ProjectPath>
+ 		with 
+			 main-ant-output-file-name    := "build.spx.packages"
+			;autogen-ant-output-file-name := "build.spx.packages.generated"
+		  ;autogen-ant-output-path      := <concat-strings>[project-path  , "/" ,  autogen-ant-output-file-name , ".xml"]
+			;main-ant-output-path         := <concat-strings>[project-path  , "/" ,  main-ant-output-file-name    , ".xml"]
 		where
 			 <dirname; ensure-directory-exists>autogen-ant-output-path  
 			;<save-to-file>(autogen-ant-output-path  , <get-ant-autogeneratedscript>())
+			;<refresh-workspace-file>autogen-ant-output-path   
 		where
-			 <dirname; ensure-directory-exists>packagespecific-ant-output-path  
-			;<save-to-file>(
-			 								packagespecific-ant-output-path, 
-			 								<get-packagespecific-ant-script-string>(library-root , 
-			 																												current-package-root , 
-			 																												package-name,
-		 																													ant-package-output-name,
-			 																												autogen-ant-output-file-name) 
-			 								)
-	
+			packages-specific-ant-string := <packages-specific-ant>(package-qnames*, main-ant-output-file-name ,autogen-ant-output-file-name);
+			<dirname; ensure-directory-exists>main-ant-output-path;  
+			<save-to-file>(main-ant-output-path,packages-specific-ant-string);
+			<refresh-workspace-file>main-ant-output-path
 	
-	//TODO : replace package-name with fully qualified package. 
-	 
-	get-packagespecific-ant-script-string:(packages-root , current-package-root , package-name, package-qname, autogen-ant-output-file-name) ->
+		packages-specific-ant: (pakage-qname*, main-ant-output-file-name ,autogen-ant-output-file-name)  ->
 $[<?xml version="1.0" encoding="UTF-8" ?>
-<project name="build.[package-name]" default="build-spx-packages">
-        
-		<!-- autogenerated artifacts relative directory path -->	
+		
+		<project name="build.[main-ant-output-file-name]" default="build-spx-packages">
+    <!-- autogenerated artifacts relative directory path -->	
 		<property name="packages.root" location="[packages-root]"/>
 		
 		<!-- prject directories -->
@@ -68,18 +66,28 @@
         <isset property="eclipse.spoofaximp.nativeprefix"/>
     </condition>
     <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
-
-    
-	<import file="[autogen-ant-output-file-name].xml"/>
-	
-	<target name="build.[package-qname].package">
+	  
+	  <import file="[autogen-ant-output-file-name].xml"/>
+	  [<map(emit-package-specific-ant)>pakage-qname*]
+		
+		<!-- Main target -->
+  	<target name="build-spx-packages" depends="[build-package-dependencies]"/>
+</project>] 
+	with 
+		packages-root                :=	<Autogenerated-Artifacts-Dir>;
+		build-package-dependencies   :=	<map(get-package-target-name);separate-by(|",");concat-strings>pakage-qname*
+	
+	
+	emit-package-specific-ant : Package(package-qname at QName(qname-parts*)) -> $[ 
+	
+	<target name="[package-target-name]">
 		<property name="package.name" value="[package-name]"/>
-		<property name="package.path" location="[packages-root]/[current-package-root]"/>
-		<property name="package.main.sdf.module" value="[package-name]-main"/>
-		<property name="package.main.str.module" value="[package-name]-main"/>
-		<property name="package.main.esv.module" value="[package-name].main"/>
-		<property name="metasdfmodule" value="Stratego-[package-name]"/> 
-
+		<property name="package.path" location="[package-directory]"/>
+		<property name="package.main.sdf.module" value="[package-main-name]"/>
+		<property name="package.main.str.module" value="[package-main-name]"/>
+		<property name="package.main.esv.module" value="[package-main-name]"/>
+		<property name="metasdfmodule" value="Stratego-[package-main-name]"/> 
+		
 		<antcall target = "spx.default">
 		  	<param name = "package.name" value = "${package.name}"/>
 			<param name = "package.path" value = "${package.path}"/>
@@ -88,14 +96,26 @@
 		 	<param name = "package.main.esv.module" value = "${package.main.esv.module}"/>
 			<param name = "metasdfmodule" value = "${metasdfmodule}"/>
 		</antcall>
-	</target>
-	<!-- Main target -->
-  <target name="build-spx-packages" depends="build.[package-qname].package"/>
-</project>] 
-	
-			
-	
+	</target>	
+	]
+	where 
+		 relative-autogen-path      := <qname-to-path>package-qname
+		;package-directory		      := $[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
+ 		;package-main-name          := <get-main-file-name>package-qname
+ 		;package-name								:= <convert-qname(|"-")>package-qname
+ 		;package-target-name				:= <get-package-target-name>package-qname    
+
+
+	get-package-target-name : 
+		Package(q at QName(qname-parts*)) -> $[build.package.[package-qname-str]]
+		where
+			package-qname-str					:= 	<convert-qname(|".")>q
 	
+	get-package-target-name : 
+		package-qname at QName(qname-parts*) -> $[build.package.[package-qname-str]]
+		where
+			package-qname-str					:= 	<convert-qname(|".")>package-qname
+		
 	get-ant-autogeneratedscript : () ->
 $[<?xml version="1.0" encoding="UTF-8" ?>
 
@@ -272,7 +292,7 @@
   		<arg value="-I"/>
     	<arg value="${packages.root}"/>
   		<arg value="-i"/>
-      <arg value="${package.path}/${package.main.str.module}.str"/>
+      <arg value="${package.path}/${package.main.str.module}.rtree"/>
       <arg value="-o"/>
       <arg value="${build.stratego.outputfile}"/>
   		<arg value="-p"/> 

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,496 @@
+module codegen/compile
+
+imports 
+	normalize/main
+imports 
+	utils/cache 
+	utils/debug
+	utils/path
+imports 
+	analyze/main
+	context/scope-tree
+	context/signature
+	context/declare
+imports
+	common 
+	config
+imports 
+	lib/editor-common.generated 
+	normalize/signatures
+	include/SpoofaxLang
+	codegen/generate-all
+	codegen/buildscripts
+	context/str/declare
+
+rules			// Starting a new compilation session   
+	
+	new-compile-session(s) =
+			{| 	CompiledPackage,currently-compiling-package,CompiledModule, 
+			 		UsedBy,Using,
+			 		UsedLegacyArtifacts,UsingLegacyArtifacts,
+			 		GetSemanticProblems,
+			 		AnalyzedModulesDeclaredIn,
+					PackagesDeclaredIn,
+					DeclaredModule,
+					DeclaredPackage,
+					GetEnclosingScope,
+					GetEnclosedScope:
+						where(
+							<debug>$[============Starting new compiler session ==============]
+						);
+						compiler-init; // initializing compiler session 
+						where(<debug>$[============Initialization is done  ==============]);
+						s	
+			|}
+
+
+rules 	// Compiler initialization 
+			
+	compiler-init = 
+		where( 
+			bagof-SPX-Source-Dir => spx-sources
+		);
+		<list-loop(parse-spx-sources)> spx-sources   	
+
+	parse-spx-sources : 
+		(sourcedir , searchOption) -> <id>
+		where
+			{| current-working-root-dir :  
+				rules(
+					current-working-root-dir  := <getcwd>
+				);
+				<chdir>sourcedir;
+				<parse-spx-compilationUnits(|searchOption)> <getcwd>;
+				<chdir> <current-working-root-dir>
+			|}
+		
+	parse-spx-compilationUnits(|search-option) = 
+		readdir;
+		list-loop(
+    	if <isdir> <filemode> then  //FIXME : filemode / isdir contains bug. Common folder is not considered as directory which is a bug
+    		if not(Ignored-Spx-Souce-Dir); !search-option => AllDirectories()  then
+       		 chdir;
+        	 <parse-spx-compilationUnits(|search-option)<+ throw-unable-read-exception(|"Failed to read this directory : ")><getcwd>;
+           <chdir> ".."
+        end
+      else
+        where(parse-spx-compilationUnit) <+ throw-unable-read-file 
+      end
+    )
+    
+ 	parse-spx-compilationUnit: filename -> <id>
+ 		where
+ 			if has-extension(|"spx") then 
+	 			where (<debug-compiler>$[Pre-Compiling| Parsing following file : [<pp-aterm>]]);
+	 			open-spx-compilation-unit(
+					spx-compilation-unit-path, 
+					spx-precompiled-cache-path, 
+					parse-spoofaxlang-file ,
+					pre-complile-compilation-unit
+				)
+			end 
+
+strategies				// Pre-compilation before starting up actual compilation    
+	
+	// Before starting primary compilation, 
+	// pre-compile normalize the parsed tree
+	// and creates scope-tree and namespace-reference table for 
+	// performing further compilation. 
+	pre-complile-compilation-unit = 
+		origin-track-forced(nomalize-all) // nomalize and builds scope-tree and  partial symbol table with the local information availble
+		//nomalize-all
+
+strategies 
+	build-all = 
+		?current-term
+		;enable-compiler-debugging
+		;new-compile-session(
+			list-of-package-qname* := <get-package-list> 
+			;<compile-internal>list-of-package-qname*
+			;<debug>$[=========Getting list of errors============]
+			;<get-all-analyzed-problems>() => problems  
+			//;if <fail-if-has-errors>problems then
+			 	;debug(!"generating artifacts ")
+				;<list-loop(generate-spx-package)>list-of-package-qname*
+				;<debug>$[=========Generating Build Scipt============]
+				;<emit-build-script> list-of-package-qname*
+				;<debug>$[=========Code Generation is done============] 		
+			//else
+			//	debug(!"Please fix the errors before building the artifacts: " ) // Get all errors 
+			//end		 
+		)
+		;disable-compiler-debugging
+		;!current-term //restoring current term to avoid side effects  
+	
+	
+	fail-if-has-errors : problems@(errors, warning, infos*) -> problems
+		where 
+			if not(!errors => []) then 
+		 		fail	
+		 	end		 	 	
+
+strategies 				// Main compilation events  
+	
+	compile-all = 
+		?current-term ; 
+		enable-compiler-debugging;
+		new-compile-session(
+			list-of-package-qname := <get-package-list> 
+			;<compile-internal>list-of-package-qname
+			;<debug>$[=========Getting list of errors============] 
+			;<get-all-analyzed-problems>()  
+			;debug(!"Errors : " ) // Get all errors 
+		)
+		;disable-compiler-debugging
+		;!current-term //restoring current term to avoid side effects
+	
+	
+	compile-packages-of: file-abs-path -> issues*
+	where
+		<debug>$[Compiling packages of  [<pp-aterm-forced>file-abs-path]]
+	where
+		//enable-compiler-debugging;
+		new-compile-session(
+		 	list-of-package-qname:= <get-packages-of-file> file-abs-path
+			;<compile-internal>list-of-package-qname 
+			;<debug>$[=========Getting list of errors============] 
+			;<get-semantic-problmes-by-file>file-abs-path => issues* 
+			;debug(!"Errors : ") 	  // get errors for this file only   
+		) //find out the semantic errors  
+		//;disable-compiler-debugging
+	
+	
+	compile-internal : list-of-package-qname* -> list-of-package-qname* 
+	where 
+		<debug>$[=========Compiling packages===============
+		 				 [<pp-aterm-forced>list-of-package-qname* ]
+		 				 ]
+	where
+		<compile-main>list-of-package-qname*
+		;<debug>$[=========Compilation is done===============]
+	where 	    
+		if Enable-Caching then 
+			<debug>$[=========Caching Semantic Problems============] 
+			;<cache-semantic-problems>()
+		end
+
+
+rules				// Compiler main : Compiles provided list of packages and stores semantic problems   
+	
+	
+	compile-main= 
+		?list-of-package-qnames;
+		where(
+			<debug-compiler>$[Compile-main | compiling packages : [<pp-aterm>] with modules:	
+																		[<pp-aterm><all-keys-Declared;filter(?(Modules(),_) )>]
+			]
+		)
+		//Phase 1:  Resolve-all-import-reference for the listed packaged 
+		//				  in this way => dependecy list will be created automatically for 
+		//				  efficient analysis
+		;where(<debug-compiler>$[compile-main | resolving-package-reference:])
+		;where( resolve-package-references )  
+		//Phase 2:  Compile all the legacy artifacts referred by Spx Packages 
+		//				  and make them accessible in the Global Scope 
+		;where(<debug-compiler>$[compile-main | compile-legacy-artifacts:])
+		//;where(compile-legacy-artifacts)
+		
+		//Phase 3:  Compile Packagesand make them accessible in the different package 
+		//					namespace.
+		//					Use the dependency graph to first compile the depending on packages.
+		//					TODO : Optimize. Phase 2 and Phase 3 can be compiled together. 
+		;list-loop(compile-spx-package)
+		;list-loop(analyze-spx-package)
+				
+	
+	// Compile sdf, str, esv modules which are imported in the global nameepsace
+	compile-legacy-artifacts: package-tqnames* -> package-tqnames*
+	where
+		<make-set>package-tqnames* => upackages;
+		<debug-compiler>$[compile-main | compile-legacy-artifacts | List:[<pp-aterm>upackages]]
+	where
+		{| Resolved-ExternalArtifact:
+					<compile-legacy-artifact>(Unresolved() , Module(Name("libstratego-lib")) ,Unresolved()); 
+					<list-loop(compile-legacy-artifact-package)>upackages	
+		|}
+	
+	
+	compile-legacy-artifact-package : p at Package(qname) ->p
+	where	
+		<debug-compiler>$[compile-main | compile-legacy-artifacts | Current Package:[<pp-aterm>]]
+		;<bagof-UsingLegacyArtifacts>qname=> legacy-artifact-details*
+		;<debug-compiler>$[compile-main | compile-legacy-artifacts | Artifact List:[<pp-aterm>legacy-artifact-details*]]
+	where
+		<map(compile-legacy-artifact)>legacy-artifact-details*	
+		
+	compile-legacy-artifact: 
+		legacy-artifact-details@(namespace, Module(Name(modulename)) , resolving-path) -> legacy-artifact-details
+		where
+			<debug-compiler>$[compile-main | compile-legacy-artifact > planning to compile following legacy artifact: [<pp-aterm>]] 
+		where
+			if not(<Resolved-ExternalArtifact>(modulename,resolving-path)) then 	
+				if (!resolving-path => Unresolved()) then
+	  				<get-cached-lib-ast(read-stratego-signatures);declare-stratego-globals-top>modulename
+					<+
+						<read-stratego-signatures;declare-stratego-globals-top> modulename	
+					<+ 
+						<debug-compiler>$[compile-main | compile-legacy-artifact > failed to resolve]
+				end 	 
+			end	
+		where
+			rules ( Resolved-ExternalArtifact : (modulename,resolving-path) ->resolving-path) 
+			
+	//During analyze-package , just call this strategy 
+	compile-spx-package: 
+		package-typed-qname at Package(untyped-qname) -> <id>
+		where 
+			<debug-compiler>$[compile-spx-package| Planning to compile : [<pp-aterm>]] 
+		where
+			if should-compile-this-package  then //FOR handling circular referneces   
+				// Making this package as currently being compiled
+				where(
+					rules(
+						currently-compiling-package : package-typed-qname -> package-typed-qname
+					)
+				); 
+				// Getting List of Packages/Modules that this package is depending on.
+				<get-all-usings>untyped-qname => depeneding-typedqname* 
+			  ;<debug-compiler>$[	compile-spx-package | List of dependending-on packages/modules : [<pp-aterm>depeneding-typedqname*]]		
+				// Start Compiling the dependent Spx Artifacts
+				;<list-loop(compile-depending-spx)>depeneding-typedqname*
+			
+				;{|GetEnclosingPackageName:
+						rules ( GetEnclosingPackageName      := package-typed-qname);
+						// Now, since all the depending-on artifacts are compiled
+						// start compiling the enclosing modules of this package.
+						// Note: currently we are not considering any nested packages.
+						<list-loop(compile-spx-module)><get-enclosed-modules>package-typed-qname
+				|};
+			
+				// Making this package as compiled.
+				// TODO : consider keeping only 1 DR as a marker if compiled package. 
+				where(
+					rules(
+						CompiledPackage : package-typed-qname -> package-typed-qname 
+					)
+				)
+			else
+				<debug-compiler>$[compile-spx-package| Ignored as already in the queue : [<pp-aterm>]]
+			end
+
+	compile-depending-spx: 
+		typed-qname -> typed-qname
+		where 
+			<debug-compiler> $[compile-depending-spx > Compiling depending-on spx package/module :[<pp-aterm>]]
+		where 
+			if !typed-qname => Package(QName(_)) then
+				<compile-spx-package>typed-qname 					
+			else
+				if !typed-qname => Module(QName(_)) then
+						// Even when only a module is imported using ImportSpxModule(_,_),
+						// The whole package is compiled to check consistency , and find 
+						// semantic errors.
+						// In later step , when look up is performed, any symbol other than 
+						// symbols that consist in this particular module are marked/realized
+						// as private symbols. 
+						enclosing-package-typed-qname := <GetEnclosingScope>typed-qname;
+						<compile-spx-package>enclosing-package-typed-qname 				 
+				else
+					<debug-compiler> $[compile-depending-spx | Illegenal depending spx artifact: [<pp-aterm> typed-qname]];
+					fail
+				end
+					
+			end		 
+	
+	compile-spx-module: 
+		module-typed-qname at Module(untyped-qname) -> <id>
+		where 
+			<debug-compiler>$[compile-spx-module| Planning to Compile module: [<pp-aterm>]] 
+		where 
+			if not(<CompiledModule>module-typed-qname) then
+				<debug-compiler>$[compile-spx-module| Currently Compiling : [<pp-aterm>]]; //this package is not compiled before
+				module-decl* := <get-module-declarations>module-typed-qname;
+				{|GetEnclosingModuleName:
+						rules( GetEnclosingModuleName := module-typed-qname);
+						<list-loop(
+								origin-track-forced(declare-all)
+								//declare-all
+						 	)
+						 >module-decl*
+				|};
+				where(rules(CompiledModule: module-typed-qname -> module-typed-qname))
+			else
+				<debug-compiler>$[compile-spx-module| Ignored as already in the queue : [<pp-aterm>]] //this package is not compiled before
+			end	
+	
+		
+	should-compile-this-package = 
+		?package-qname;
+		where(not(<currently-compiling-package>package-qname))
+		//TODO : add checking of PDL caching. If souce is newer than pdl version of the
+		//package, do not compile it. use the pdl instantly.
+
+rules			// Analyze Semantic Errors 
+			
+	should-analyze-this-package = 
+		?package-qname;
+		where(not(<AnalyzedPackage>package-qname))
+		
+
+	analyze-spx-package: 
+		package-typed-qname at Package(untyped-qname) -> <id>
+		where 
+			<debug-analysis> $[Analyze| Analyze-spx-package| Planning to Analyze : [<pp-aterm>]] 
+		where
+			if should-analyze-this-package  then //FOR handling circular referneces   
+				{|GetEnclosingPackageName:
+						rules ( GetEnclosingPackageName      := package-typed-qname);
+						<list-loop(
+								analyze-spx-module
+							)
+						><get-enclosed-modules>package-typed-qname
+				|};		
+				where(
+					rules(AnalyzedPackage: package-typed-qname -> package-typed-qname)
+				)
+				<+
+				<debug-analysis> $[Analyze| analyze-spx-package > [<pp-aterm>package-typed-qname] Failed. ]
+				;fail
+			end
+
+	analyze-spx-module: 
+		module-typed-qname at Module(untyped-qname) -> <id>
+		where 
+			<debug-analysis> $[Analyze|  analyze-spx-module> Planning to analyze module for semantic problems: [<pp-aterm>]] 
+		where 
+			if not(<AnalyzedModule>module-typed-qname) then
+				<debug-analysis> $[Analyze| analyze-spx-module> Currently Analyzing : [<pp-aterm>]]; 
+				module-decl* := <get-module-declarations>module-typed-qname;
+				{|GetEnclosingModuleName:
+						rules( GetEnclosingModuleName := module-typed-qname);
+						<list-loop(
+								analyze
+						 )>module-decl*
+				|};
+				module-abs-path := <DeclaredModule>untyped-qname;
+				where(rules(
+					AnalyzedModule:     module-typed-qname -> module-typed-qname
+					AnalyzedModulesDeclaredIn:+ module-abs-path -> module-typed-qname
+					)
+				)
+				<+
+				<debug-analysis> $[Analyze| analyze-spx-module| [<pp-aterm>module-typed-qname] Failed. ]
+				;fail
+			else
+				<debug-analysis> $[Analyze| analyze-spx-module| Ignored as already in the queue :[<pp-aterm>]] //this package is not compiled before
+			end	
+	
+rules 			// Reference Resolving 
+	
+	 
+	resolve-package-references = 
+		?list-of-package-tqnames;
+		<list-loop(
+			// Get the list of enclosed modules
+			// and then get module declarations
+			// Afterwards, from the declarations, import references are resolved.
+			where(<debug-compiler>$[ resolve-package-references |  Currently working on package : [<pp-aterm>]]);
+			get-enclosed-modules; 
+			get-module-declarations;
+			origin-track-forced(map(store-import-references))
+			//map(store-import-references) 
+		<+
+			where(<debug-compiler>$[resolve-package-references | Failed to resolve package refernece:[<pp-aterm>]]);fail
+		)>list-of-package-tqnames
+		<+ 
+		<debug-compiler>$[resolve-package-references | Failed to resolve package referneces:[<pp-aterm>]];fail
+		
+	
+rules			// Caching Resulting Semantic Errors 	
+
+	cache-semantic-problems: () -> ()
+	where
+		all-keys-AnalyzedModulesDeclaredIn => list-file*;
+	 	<map(store-semantic-problmes)> list-file*
+	
+	store-semantic-problmes : filepath -> filepath
+	where
+		<debug-compiler>$[Caching | caching semantic issues : [<pp-aterm>]]
+	where 
+		<get-semantic-problmes-by-file> filepath=> problmes-to-save*
+	where
+		<debug-compiler>$[Caching | Saving problems: [<pp-aterm>problmes-to-save*]];
+		<cache-semantic-issues>( filepath , problmes-to-save*)
+	
+	get-semantic-problmes-by-file : file-abs-path -> problems*
+		where 
+			<bagof-AnalyzedModulesDeclaredIn>file-abs-path=> list-of-modules*;
+			<map(get-semantic-problmes-by-module)>list-of-modules*  => problmes-zipped* ;  
+			<unzip-semantic-issuses>problmes-zipped* => problems*
+		
+	get-semantic-problmes-by-module : module-typed-qname -> problems
+	where
+			<debug-compiler>$[Caching | Caching semantic issues for module [<pp-aterm>]]
+	where
+		<GetEnclosingScope> module-typed-qname => package-typed-qname;
+		<get-analyzed-problems-of> (package-typed-qname,module-typed-qname)=>problems
+	<+
+		problems := ([] , [] , [])
+	where
+		<debug-compiler>$[Caching | Found Problems for this module : [<pp-aterm>problems]]	
+	
+rules
+	
+	// Analyze Semantic Errors 
+	should-generate-code-this-package = 
+		?package-qname;
+		where(not(<PackageCodeGenerated>package-qname))
+		
+	generate-spx-package: 
+		package-typed-qname at Package(untyped-qname) -> <id>
+		where 
+			<debug-compiler> $[Generate| Generate code for spx-package| Planning to Generate Artifacts : [<pp-aterm>]] 
+		where
+			if should-generate-code-this-package  then 
+				{|GetEnclosingPackageName:
+						rules ( GetEnclosingPackageName := package-typed-qname);
+						enclosed-module-typed-qnames := <get-enclosed-modules>package-typed-qname;
+						<list-loop(
+								generate-spx-module
+							)
+						>enclosed-module-typed-qnames;
+						<generate-main> enclosed-module-typed-qnames // generate all the main artifacts now  
+				|};		
+				where(
+					rules(PackageCodeGenerated: package-typed-qname -> package-typed-qname)
+				)
+				<+
+				<debug-compiler> $[Generate| generate-spx-package > [<pp-aterm>package-typed-qname] Failed. ]
+				;fail
+			end
+
+	generate-spx-module: 
+		module-typed-qname at Module(untyped-qname) -> <id>
+		where 
+			<debug-compiler> $[Generate|  generate-spx-module> Planning to generate module for semantic problems: [<pp-aterm>]] 
+		where 
+			if not(<ModuleCodeGenerated>module-typed-qname) then
+				<debug-compiler> $[Generate| generate-spx-module| Currently Generating : [<pp-aterm>]]; 
+				module-decl* := <get-original-module-declaration>module-typed-qname;
+				{|GetEnclosingModuleName:
+						rules( GetEnclosingModuleName := module-typed-qname);
+						<generate-all> module-decl* // generating all the artifacts for the specified module
+				|};
+				module-abs-path := <DeclaredModule>untyped-qname;
+				where(
+					rules(
+						ModuleCodeGenerated:     module-typed-qname -> module-typed-qname
+					)
+				)
+				<+
+				<debug-compiler> $[Generate| generate-spx-module| [<pp-aterm>module-typed-qname] Failed. ]
+				;fail
+			else
+				<debug-compiler> $[Generate| generate-spx-module| Ignored as already in the queue :[<pp-aterm>]] //this package is not compiled before
+			end		
+			
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,185 @@
+module codegen/esv/to-esv
+imports 
+	libstratego-lib
+imports 
+	libstrc
+imports
+  common
+  config
+  spoofaxlang
+  utils/debug
+imports 
+	utils/path
+	normalize/signatures 
+	include/SpoofaxLang
+imports 
+	codegen/main 
+	context/scope-tree 
+	context/signature
+imports
+	lib/editor-common.generated
+	
+signature constructors
+  Module : ID * Imports * List(Section) -> Module
+	
+rules 
+
+	/**
+	* Packs all the esv definitions for the namespace and combine them as a 
+	* single *.main.packed.esv and store it in .showdow dir
+	* 
+	* OPTIMIZATION : If we allow arbitary order of different sections of ESV , 
+	*								then we can avoid store-esv-definitions .
+	*/
+	generate-esv-main: module-qname* -> <id>
+		with 
+ 			 project-path             := <ProjectPath>;
+ 			 Package(package-qname)   := <GetEnclosingPackageName>
+ 		where 
+			<debug-compiler>$[in generate-esv-main 1:]
+		with	 
+ 			 relative-autogen-path :=  <qname-to-path>package-qname
+ 			;package-esv-main-name := <get-main-file-name>package-qname
+ 			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
+ 		where 
+			<debug-compiler>$[Getting Contents and creating esv-aterm :]	  
+ 		where 
+ 			{|  Declared-Language-Description,Declared-Builders-Description,Declared-Colorer-Description,
+ 					Declared-Folding-Description,Declared-Outliner-Description,Declared-References-Description,
+ 					Declared-Completions-Description:
+						//TODO  : Q>> why do we need imports in main.packed.esv  ?
+ 						<map(get-original-module-declaration;store-esv-defintions)>module-qname*
+ 						;sections := <conc>(<add-package-ctree>(package-esv-main-name),   // adding ctree import by default
+ 						 					<all-keys-Declared-Language-Description>, 
+ 			 								<all-keys-Declared-Builders-Description> ,  
+ 			 								<all-keys-Declared-Colorer-Description> , 
+ 			 								<all-keys-Declared-Folding-Description>,
+ 			 								<all-keys-Declared-Outliner-Description>,
+ 			 								<all-keys-Declared-References-Description>,
+ 			 								<all-keys-Declared-Completions-Description>
+ 			 							   )
+ 			|} 
+ 			;esv-aterm := Module(package-esv-main-name, <get-all-imports>module-qname*, sections) 
+		where
+			<debug-compiler>$[ESV 11]		
+		where	
+			autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
+			;<ensure-exists>(autogen-root-directory , package-qname)
+			;output-path := <get-main-output-path(|"packed.esv")>(autogen-root-directory , package-qname)   
+			;<WriteToBinaryFile>(output-path ,esv-aterm)
+			;<refresh-workspace-file>output-path
+			;chdir-to-project-path
+			 		
+	
+	to-esv-all: 
+		(def, path , project-path)  -> None()
+	
+	
+	/*
+	* Adding package ctree as the default semantic provider0
+	* 
+	* @type packagename -> default semantic provider 
+	*/
+	add-package-ctree : package-name -> [SemanticProvider(package-output-ctree)] // TODO : get main package ctree
+		where 
+				package-output-ctree := $[include/[package-name].ctree]
+	
+	/*
+	* Returns all the imports for the current namespace.
+	*/
+ 	get-all-imports = 
+ 		?mod-qname*
+ 		;import-decl* := <map(to-esv-import) ; flatten-list ;	make-set> mod-qname*
+ 		;!Imports(import-decl* ) 		
+	 		
+rules
+	/**
+	* Converts ( package-name , concept-name) to stratego import
+	* 
+	* @type ( package-name, concept-name) -> Import(name) 
+	*/		
+	to-esv-import:  
+		Module(q at QName(qnameparts*))->Import(esv-import)
+		where 
+			esv-import:= <qname-to-path>q
+	
+ 
+rules			   
+ 	
+ 	/**
+ 	* Storing different Esv langauge definitions so that it can be 
+ 	* combined in *.main.packed.esv in a particular order 
+ 	*/
+ 	store-esv-defintions:
+ 		 m at Module(attrb* , modname , section*) -> m
+		 where debug(!"Inside module definition : ")
+		 with
+		 	<alltd(store-esv-def)> section* 
+ 
+ 	/**
+ 	* Storing Esv Definitions that specifies Langauge 
+ 	*/
+ 	store-esv-def : l at Language(_,_) -> l
+ 		with 
+ 			rules ( Declared-Language-Description :+ l -> l)
+ 	
+ 	/**
+ 	* Storing Esv Definitions that specifies the builders for the 
+ 	* langauge definition. 
+ 	*/
+ 	store-esv-def : b at Builders(_,_) -> b
+ 		with 
+ 			rules ( Declared-Builders-Description :+ b -> b) 
+ 	
+ 	/**
+ 	* Storing Esv Definitions that specifies the colorer for the 
+ 	* langauge definition. 
+ 	*/
+ 	store-esv-def : c at Colorer(_,_) -> c
+ 		with 
+ 			rules ( Declared-Colorer-Description :+ c -> c) 
+ 	
+ 	/**
+ 	* Storing Esv Definitions that specifies the folding semantics for the 
+ 	* langauge definition. 
+ 	*/
+ 	store-esv-def : f at Folding(_,_) -> f
+ 		with 
+ 			rules ( Declared-Folding-Description :+ f -> f)
+ 	
+ 	/**
+ 	* Storing Esv Definitions that specifies the outliner for the 
+ 	* langauge definition. 
+ 	*/		
+ 	store-esv-def : o at Outliner(_,_) -> o
+ 		with 
+ 			rules ( Declared-Outliner-Description :+ o -> o)
+ 	/**
+ 	* Storing Esv Definitions that specifies the code completion
+ 	* for the langauge definition. 
+ 	*/
+ 	store-esv-def : c at Completions(_,_) -> c
+ 		with 
+ 			rules ( Declared-Completions-Description:+ c -> c)
+ 	
+ 	/**
+ 	* Storing Esv Definitions that specifies the refencen resolving constructs
+ 	* for the langauge definition. 
+ 	*/
+ 	store-esv-def : r at References(_,_) -> r
+ 		with 
+ 			rules ( Declared-References-Description :+ r -> r)
+ 	
+ 	/*
+ 	* optimization - ignores following section that are not relevant to the current computations.
+ 	*		a] str sections
+ 	*		b] sdf sections
+ 	*/
+ 	store-esv-def : s at SDFSection (_) -> s //Do nothing
+ 	
+ 	store-esv-def : s at SDFSectionEH (_,_) -> s //Do nothing
+ 	
+ 	store-esv-def : s at STRSection (_) -> s //Do nothing
+ 	 
+ 	
+ 	 
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,29 @@
+module codegen/generate-all
+
+imports 
+	codegen/compile
+	codegen/sdf/to-sdf
+	codegen/sdf/to-signature 
+	codegen/str/to-stratego
+	codegen/esv/to-esv
+imports
+	codegen/buildscripts
+imports 
+	config 
+	utils/cache
+	lib/editor-common.generated
+	context/scope-tree
+	context/signature
+	normalize/signatures  
+	include/spoofaxlang
+	utils/path
+	utils/annotations
+
+rules 
+	generate-all =  emit-sdf;emit-signatures;emit-str <+ debug(!" Failed in Generate-all. "); fail
+
+	generate-main = 
+			?module-qname* ;generate-sdf-main;generate-str-main ; debug(!"inside generate esv main : ");generate-esv-main 
+		<+ 
+			debug(!" Failed in Main Generation. "); fail  
+	 

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,79 @@
+module codegen/main
+
+imports 
+	codegen/compile
+	codegen/sdf/to-sdf
+	codegen/sdf/to-signature 
+	codegen/str/to-stratego
+	codegen/esv/to-esv
+imports
+	codegen/buildscripts
+imports 
+	config 
+	utils/cache
+	lib/editor-common.generated
+	context/scope-tree
+	context/signature
+	normalize/signatures 
+	include/spoofaxlang
+	utils/path
+	
+rules 
+	build-all:
+		(selected, position, ast, path, project-path) -> None()
+		where
+			debug(!"=============starting compile-all ===================")
+		with 
+			editor-init;
+		  initialize-configuration
+		with
+			rules(ProjectPath := project-path)
+		with
+	  	<build-all>()
+	  /*	
+	  	 <to-sdf-all> (selected, path , project-path)
+	  	;<to-signature-all> (selected, path,project-path)
+		with	
+			<to-str-all>(selected, path , project-path)
+		with	
+			<to-esv-all>(selected, path , project-path)
+		where 
+			<emit-build-script>(project-path, <Autogenerated-Artifacts-Dir>, "", "")
+		*/
+		
+rules
+	//Intregation Test of the compile-all is working as expected 
+	compile-all:
+		(selected, position, ast, path, project-path) -> None()
+		where
+			debug(!"=============starting compile-all ===================")
+		with 
+			editor-init;
+		  initialize-configuration
+		where
+			<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
+		with 
+			compile-all
+	
+rules 
+	transform-import-declaration(s): 
+		ImportPackage(qname at QName(package-qname-parts*)) -> result 
+		where
+			package-name-path    := <qname-to-path>qname
+			;<s>package-name-path => result  
+	
+	transform-import-declaration(s): 
+		ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
+		where
+			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
+			;module-name-path    := <qname-to-path>module-qname
+			;<s>module-name-path => result  
+	
+	transform-import-declaration(s): ImportPackage(Name(package-name)) -> result
+	where 
+		<s>package-name => result 
+		
+	transform-import-declaration(s): ImportLegacyArtifact(Name(modulename)) -> result
+	where 
+		<s>modulename => result 
+	
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,207 @@
+module codegen/sdf/to-sdf
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-sglr
+  libstratego-sdf
+imports
+	include/SpoofaxLang
+	lib/editor-common.generated
+  lib/sdf-desugar
+  lib/sdf-parenthesize  
+imports 
+	context/sdf/declare  
+imports 
+	common
+	spoofaxlang
+	config
+	utils/annotations
+	context/scope-tree
+	context/signature
+	normalize/signatures
+	utils/path
+	utils/debug
+	codegen/generate-all 
+	codegen/main
+	
+      
+rules
+ 
+	emit-sdf:m at Module(attrb* , modname , section*) -> m
+ 		with 
+ 			project-path := <ProjectPath>
+ 		where
+ 			package-typed-qname := <GetEnclosingPackageName> 
+			;module-typed-qname  := <GetEnclosingModuleName> 
+			<+ 
+			<debug-compiler>$[ CodeGeneration | SDF | Failed to create current scope.]
+			;fail
+		where
+			 !module-typed-qname  => Module(module-untyped-qname)
+			;!package-typed-qname => Package(package-untyped-qname)
+		where <debug-compiler>$[ 2 ]
+		where
+			Module(_, _ , section') := <get-module-declaration>module-typed-qname
+			;import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> section'
+		  ;sections    := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> section*
+    where <debug-compiler>$[ 3 ]
+    where
+    	sections'        := <topdown(repeat(desugar-sdf-redux))> <list-to-conc-grammars> sections
+     ;import-temp      := <sdf-import-declarations> import-stmt* 
+     ;sdf-import-stmt* := 'imports( import-temp  )
+     ;sdf-string       := <pp-sdf-string'> 'module(<qname-to-path>module-untyped-qname, [sdf-import-stmt*], [exports(sections')])
+   	where 
+			<debug-compiler>$[ 4 ]
+		where //set up folders
+   		 autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
+   		;<debug(!"autogen-root : ")>autogen-root-directory  
+			;<ensure-exists>(autogen-root-directory, package-untyped-qname)
+			;output-path     := <get-output-path(|"sdf")>(autogen-root-directory , module-untyped-qname)
+		where 
+			<debug-compiler>$[ to sdf g 5 ]
+		where 
+			 <save-to-file>(output-path , sdf-string )
+			;<refresh-workspace-file>output-path
+			;chdir-to-project-path
+			
+		
+	generate-sdf-main:  module-qname* -> <id>
+		with 
+ 			 project-path             := <ProjectPath>;
+ 			 Package(package-qname)   := <GetEnclosingPackageName>
+ 		where <debug-compiler>$[ SDF MAIN ]
+ 		with	 
+ 			 relative-autogen-path :=  <qname-to-path>package-qname
+ 		where
+			sdf-string := 
+	    $[module [relative-autogen-path]/[<get-main-file-name>package-qname]
+	         imports
+		      	[<map(pp-sdf-import)>module-qname*]   									 
+	     ]
+	  where 
+	  	<debug-compiler>$[ SDF MAIN 3]
+		where
+			autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
+			;autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
+			;<ensure-exists>(autogen-root-directory , package-qname)
+			;output-path := <get-main-output-path(|"sdf")>(autogen-root-directory , package-qname)   
+			;<save-to-file>(output-path , sdf-string )
+	 		;<refresh-workspace-file>output-path
+			;chdir-to-project-path
+		
+		
+ to-sdf-all: (def, path , project-path)  -> None()
+ 		
+ 	to-sdf(|project-path):
+		(package-name,concept-name,def) -> None()
+				
+
+rules
+
+	override pp-sdf-string = fail // ensure compiler doesn't blow up
+	
+  pp-sdf-string' =
+    sdf-desugar; 
+    parenthesize-Sdf2; 
+  	sdf-ppfix; 
+    ast2box(|[<pp-table-sdf>]); 
+    box2text-string(|80)			 
+
+rules
+  // TODO: also support Constructor("Module(<2>, <1>)") => {ast("...")}?
+  //desugar-sdf-redux:
+  //  term(default(fun(quoted(s)))) -> term(default(appl(unquoted("cons"), [fun(quoted(s))])))
+
+  desugar-sdf-redux:
+    Constructor(s) -> term(default(appl(unquoted("cons"), [fun(quoted(s))])))
+
+  desugar-sdf-redux:
+    namespacedef(_, s) -> s
+
+  desugar-sdf-redux:
+    namespaceref(n) -> sort(s')
+    where
+      s' := < resolve-NamespaceSort-declaration <+ !"ID"> n
+
+  desugar-sdf-redux:
+    namespaceref2(n, s) -> s
+  
+  list-to-conc-grammars:
+    [g1, g2 | gs] -> conc-grammars(g1, <list-to-conc-grammars> [g2 | gs])
+  
+  list-to-conc-grammars:
+    [g1] -> g1
+  
+  list-to-conc-grammars:
+    [] -> []
+	
+rules 
+	
+	// coverts name to SDF  module name
+	to-sdf-import: name -> 'module(unparameterized(name))
+	
+	//pretty printing as sdf imports
+	pp-sdf-import: Module(q at QName(qnameparts*))-> result 
+		where 
+				result := $[[<qname-to-path >q]
+									 ]
+rules
+	sdf-import-declarations =
+		
+		?imports*;
+		map(debug;sdf-import-declaration;debug);
+		flatten-list;
+		make-set;
+		where(<debug-compiler>$[ SDF MAIN Result import :  [<pp-aterm>]]) 
+		
+	sdf-import-declaration: 
+		i at ImportPackage(package-qname) -> results
+		where 
+			<debug-compiler>$[ SDF MAIN Result import package]
+		where 
+			if not(<DeclaredPackage>package-qname) then
+				<debug-compiler>$[ SDF MAIN Result import package Found NA];
+				results := [] // unresolved imports. ignore. 
+			else
+				<get-enclosed-modules>Package(package-qname) => modules*;
+				<map(?Module(<id>) ; qname-to-path ; to-sdf-import)> modules* => results;
+				<debug-compiler>$[ SDF MAIN Result import package Result : ]
+			end
+	
+	sdf-import-declaration: 
+		i at ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
+		where 
+			<debug-compiler>$[ SDF MAIN Result import module : ] 
+		where
+			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
+			;if(not(<DeclaredModule>module-qname))  then
+				result := [] // unresolved imports. ignore. 
+			else
+				module-name-path    := <qname-to-path>module-qname
+				;<to-sdf-import>module-name-path => result'
+				;result := [result']  
+			end 
+	
+	sdf-import-declaration: i at ImportPackage(Name(package-name)) -> result
+	where 
+		<debug-compiler>$[ SDF MAIN Result import name: ]
+	where
+		if <DeclaredPackage>QName([package-name]) then
+			<get-enclosed-modules>Package(QName([package-name])) => modules*
+			;debug(!"converting to module paths : ")
+			;<map(?Module(<id>) ; qname-to-path ; to-sdf-import)> modules* => result
+			;debug(!"results : ")
+		else
+			<to-sdf-import>package-name => result'
+			;result := [result']	
+		end
+		
+	sdf-import-declaration: 
+		i at ImportLegacyArtifact(Name(modulename)) -> result
+		where 
+			<debug-compiler>$[ SDF MAIN Result import legacy: ]
+		where 
+				<to-sdf-import>modulename => result'
+				;result := [result']	
+			
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,149 @@
+module codegen/sdf/to-signature
+imports 
+	libstratego-sglr
+imports
+	lib/editor-common.generated
+imports 
+	config
+	common
+	analysis
+imports 
+	context/sdf/declare-signature
+	sdf/analysis
+	codegen/sdf/to-sdf
+	include/spoofaxlang
+imports
+	codegen/compile
+	utils/path
+	codegen/main
+	context/signature
+	normalize/signatures
+	
+rules
+	
+	/* Generating Signatures for all the SDF files */
+	parse-str-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(lib/Stratego-Sugar.tbl)>
+    )  
+	
+	to-signature-as-rtree =   
+		parse-str-string ; pp-aterm
+	
+	emit-signatures:
+		m at Module(attrb* , modname , section*) -> m
+		with 
+ 			project-path := <ProjectPath>
+ 		with
+ 			package-typed-qname := <GetEnclosingPackageName> 
+			;module-typed-qname  := <GetEnclosingModuleName> 
+			<+ 
+			debug(!"CodeGeneration | Failed to create current scope.")
+			;fail
+		where
+			 !module-typed-qname  => Module(module-untyped-qname)
+			;!package-typed-qname => Package(package-untyped-qname)
+			;!modname => SPXModuleName(modulename-string)
+		where 
+			debug(!"2 :")
+			;sig-file-name := <get-signature-file-name>modulename-string
+		where 
+			<debug> $[Spoofax-lang|Generating signature for the following package : [<pp-aterm>module-typed-qname]]			
+			;generated-signatures-string :=  <get-signature-contents(|sig-file-name)><get-all-signatures-as-string>
+			;<debug> $[Spoofax-lang|generated signatures : [generated-signatures-string ]] 
+			;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
+			
+		where  
+			autogen-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
+			;output-path-str 		:= <get-output-path(|"signature", "str")>(autogen-dir, module-untyped-qname)
+			;output-path-rtree 		:= <get-output-path(|"signature", "rtree")>(autogen-dir, module-untyped-qname)
+		where
+			<debug> $[Spoofax-lang|otuput path for signatures : [output-path-str]]		
+			;<ensure-exists>( autogen-dir , package-untyped-qname ) 
+			;<save-to-file>( output-path-str, generated-signatures-string)
+			;<save-to-file>( output-path-rtree, signatures-as-aterm-string)
+			;<refresh-workspace-file>output-path-str
+			;<refresh-workspace-file>output-path-rtree
+			;chdir-to-project-path
+			
+	to-signature-all:
+		(def, path , project-path) -> None()
+		where  
+			 	(name, relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
+			 	;<debug> $[Spoofax-lang|Generating signature for the following package : [name]]
+			 	;sig-file-name := $[[name].signature] 
+			 	;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]] 
+			 	;output-path-str 		:= <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-dir , sig-file-name)
+			 	;output-path-rtree 	:= <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-dir, sig-file-name)
+			 	;generated-signatures-string :=  <get-signature-contents(|sig-file-name)><get-all-signatures-as-string>
+			 	;<debug> $[Spoofax-lang|generated signatures : [generated-signatures-string ]] 
+			 	;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
+			 	;<debug> $[Spoofax-lang|otuput path for signatures : [output-path-str]]
+			 	;<ensure-exists>( project-path , autogen-dir ) 
+			 	;<save-to-file>( output-path-str, generated-signatures-string)
+				;<save-to-file>( output-path-rtree, signatures-as-aterm-string)
+				;rules (signature-import-path:= <append-if-not-empty(|relative-autogen-path, "/")> sig-file-name)
+						  
+rules 
+	
+	//generate signature 
+	get-signature-contents(|moduleName): signatures-string ->
+$[module [moduleName]
+signature
+    constructors
+       [signatures-string]
+				
+signature
+    constructors
+          Some : a -> Option(a) 
+          None : Option(a)
+
+signature
+    constructors
+          Cons : a * List(a) -> List(a)
+          Nil  : List(a)
+          Conc : List(a) * List(a) -> List(a)
+]  
+ 
+    	
+	get-all-signatures-as-string= 
+			<mapconcat(bagof-Get-Operation-Declaration);operation-decl-to-string>
+			<filter(?(<GetEnclosingPackageName>, <GetEnclosingModuleName>, _))>
+			<all-keys-Get-Operation-Singature>
+  
+  operation-decl-to-string : 
+		[] -> $[]
+  operation-decl-to-string : 
+  	[first-op-decl | rest-op-decl* ] 
+  		-> $[[current-op-decl-string] 
+  			[rest-op-decl-string]]
+  		where 
+  			(opname, operands*, resultant-sort) := first-op-decl
+  			;if (!operands* => []) then
+  			 	current-op-decl-string := $[[<opname-to-string>opname]: [resultant-sort]]
+  			else
+  				current-op-decl-string := $[[<opname-to-string>opname]: [<lhs-operands-to-string>operands*] -> [resultant-sort]]
+  			end		 
+  			;rest-op-decl-string := <operation-decl-to-string> rest-op-decl* 
+ 	
+ 	opname-to-string : 
+ 		opname -> opname-string
+ 		where 
+ 				if (!opname => "") then 
+ 						opname-string := $[]
+				else
+					 opname-string  := opname
+				end
+				
+  lhs-operands-to-string : 
+		[] -> $[]
+  lhs-operands-to-string : 
+  	[last] -> $[[last]] 
+  lhs-operands-to-string : 
+  		[hd-operand|rest*] -> $[[hd-operand-string] * [rest-operand-string]]
+  		where
+  				not (![] => rest*) 
+  		where 
+  			  hd-operand-string := hd-operand 
+  			  ;rest-operand-string := <lhs-operands-to-string>rest* 
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,180 @@
+module codegen/str/to-stratego
+imports 
+	libstrc
+imports
+  libstratego-lib
+	lib/editor-common.generated
+imports
+  include/SpoofaxLang
+
+imports 
+	common
+	config
+	utils/debug
+	codegen/sdf/to-signature
+	codegen/compile
+	utils/path
+	codegen/main
+	context/signature
+	normalize/signatures
+	utils/annotations
+	context/scope-tree
+	
+	
+rules
+
+ 	to-str-all = id
+ 	
+ 	/** 
+	* Generates stratego output for the specified package-name, module-name and related definition
+	* 
+	* @param project-path : path to the to project root folder 
+	*/	
+	emit-str:
+		m at Module(attrb* , modname , section*) -> m
+		with 
+ 			project-path := <ProjectPath>
+ 		with
+ 			package-typed-qname := <GetEnclosingPackageName> 
+			;module-typed-qname  := <GetEnclosingModuleName> 
+			<+ 
+			debug(!"CodeGeneration | STR | Failed to create current scope.")
+			;fail
+		where
+			 !module-typed-qname  => Module(module-untyped-qname)
+			;!package-typed-qname => Package(package-untyped-qname)
+			;!modname => SPXModuleName(modulename-string)
+		where
+			Module(_, _ , section') := <get-module-declaration>module-typed-qname 
+			;import-stmt* := <make-set><collect-om(?Imports(<id>) , conc);flatten-list> section'
+			;debug(!"2 : Imports : ")
+			;sections'*  := <collect-om(?STRSection(<id>), conc)> section*
+		where
+			debug(!"3 :");
+			import-temp* := <str-import-declarations>import-stmt*;
+			str-import-stmt* := [Imports(import-temp*)];
+			str-section := <conc>(str-import-stmt* , sections'*);
+			str-aterm := Module(<qname-to-path>module-untyped-qname, str-section);
+ 			str-string := <pp-stratego-string> <parenthesize-Stratego> str-aterm	
+		where
+			debug(!"6 :");
+			autogen-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
+			;output-path-str := <get-output-path(|"str")>(autogen-dir, module-untyped-qname)
+    	;output-path-rtree := <get-output-path(|"rtree")>(autogen-dir, module-untyped-qname)
+    	;<ensure-exists>( autogen-dir , package-untyped-qname ) 
+			;chdir-to-project-path 
+			;<save-to-file>( output-path-str, str-string )
+			;<WriteToBinaryFile>( output-path-rtree, str-aterm)
+			;<refresh-workspace-file>output-path-str
+			;<refresh-workspace-file>output-path-rtree
+			
+  
+	
+	/** 
+	* Generates stratego MAIN output for the specified package-name
+	* 
+	* @param project-path : path to the to project root folder
+	* @param : package name 
+	* @param : relative output path from the  configured autogenerated directory  
+	*/	
+	generate-str-main:  module-qname* -> <id>
+		with 
+ 			 project-path             := <ProjectPath>;
+ 			 Package(package-qname)   := <GetEnclosingPackageName>
+ 		where debug(!"generate-str-main 1 :")
+ 		with	 
+ 			 relative-autogen-path :=  <qname-to-path>package-qname
+ 			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
+ 		where debug(!"2 :")	  
+ 		where
+ 			main-str-module-name := <concat-strings>[relative-autogen-path, "/", <get-main-file-name>package-qname] ;
+			str-aterm := Module( main-str-module-name  ,[Imports(<map(to-str-import);flatten-list>module-qname*)])
+			;str-string := <pp-stratego-string> <parenthesize-Stratego>  str-aterm
+		where 
+			debug(!"3 :")   
+		where
+			autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
+			;<ensure-exists>(autogen-root-directory , package-qname)
+			;chdir-to-project-path // making sure that the current path is the project - path 
+			;output-path-str   := <get-main-output-path(|"str")>(autogen-root-directory , package-qname)   
+			;output-path-rtree := <get-main-output-path(|"rtree")>(autogen-root-directory , package-qname)   
+			;<save-to-file>(output-path-str ,   str-string)		// saving str string 		
+			;<WriteToBinaryFile>(output-path-rtree , str-aterm ) // saving rtree 
+	 		;<refresh-workspace-file>output-path-str
+			;<refresh-workspace-file>output-path-rtree
+			
+	to-str-import: 
+		package-name-> [Import(package-name) , Import(<get-signature-file-name>package-name)]
+	
+	to-str-import: 
+		Module(q at QName(qnameparts*))->[Import(str-import),Import(sig-import)]
+		where 
+			str-import:= <qname-to-path>q;
+			sig-import:= <get-signature-file-name>str-import
+		
+rules			
+	//TODO : remove code duplications 
+	str-import-declarations=
+		debug(!"test 0: "); 
+		?imports*;
+		debug(!"test 1: ");
+		map(debug;str-import-declaration;debug);
+		debug(!"RESULT' STR: ");
+		flatten-list;
+		make-set;
+		debug(!"RESULT STR: ") 
+		
+	str-import-declaration: 
+		i at ImportPackage(package-qname) -> results
+		where 
+			debug(!"import package : ") 
+			where 
+			if not(<DeclaredPackage>package-qname) then
+				debug(!"import package :  found NA");
+				results := [] // unresolved imports. ignore. 
+			else
+				<get-enclosed-modules>Package(package-qname) => modules*
+				;debug(!"converting to module paths : ")
+				;<map(?Module(<id>) ; qname-to-path ; to-str-import)> modules* => results
+				;debug(!"results : ") 
+			end
+	
+	str-import-declaration: 
+		i at ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
+		where 
+			debug(!"import module : ") 
+		where
+			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
+			;if(not(<DeclaredModule>module-qname))  then
+					result := [] // unresolved imports. ignore. 
+			else
+				module-name-path    := <qname-to-path>module-qname
+				;<to-str-import>module-name-path => result'
+				;result := [result']  
+			end 
+	
+	str-import-declaration: i at ImportPackage(Name(package-name)) -> result
+	where 
+		debug(!"import name : ")
+	where
+			if <DeclaredPackage>QName([package-name]) then
+				<get-enclosed-modules>Package(QName([package-name])) => modules*
+				;debug(!"converting to module paths : ")
+				;<map(?Module(<id>) ; qname-to-path ; to-str-import)> modules* => result
+				;debug(!"results : ")
+			else
+				<to-str-import>package-name => result'
+				;result := [result']	
+			end
+		
+
+	str-import-declaration: 
+		i at ImportLegacyArtifact(Name(modulename)) -> result
+	where debug(!"legacy  : ")
+		where 
+			if not(<get-annotation(get-unresolved-symbol-annotation)>i) then 
+				![] => result
+			else
+				<to-str-import>modulename => result'
+				;result := [result']	
+			end	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Wed Apr 13 15:33:32 2011	(r22508)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -15,11 +15,17 @@
 
 imports 
 	utils/debug
-	
-strategies 
-	pp-aterm = pp-aterm-box ; box2text-string(|100)
-
+	utils/path
+	config
 
+strategies 
+	//pretty printing aterm 
+	pp-aterm = disable-pp-aterm < !"N/A" + pp-aterm-forced
+	
+	pp-aterm-forced = pp-aterm-box ; box2text-string(|100)
+strategies
+	/*internal*/ require(s) = not(s)
+		
 rules
  	
  	/**
@@ -65,8 +71,6 @@
 		list* -> result
 		where 
 			result :=<map(project-declaration(declaration-adapter))>list*
-		
-				
 				
 	project-declaration(declaration-adapter):
 		n@(namespace, conceptname) -> result
@@ -90,7 +94,7 @@
     (path, def) -> name
    	 with
    	 		Module(name, _) := def
-   	 	<+
+ 	 		<+
    	 		if not(!path => "") then
       		name := <remove-extension> <base-filename> path
     		end
@@ -100,29 +104,27 @@
  	find-spoofax-module-name-string: 
 		(path,def) ->(package-name, relative-autogen-path)
 	  with
-				name := <find-spoofax-module-name> (path,def)
-	      ;if !name => ParamName(n, p) then
+				name := <find-spoofax-module-name> (path,def);
+	      if !name => ParamName(n, p) then
 	      	name' := parameterized(n, p)
       	else
    				(Name(name') := name) 
 	      	<+ 
      			(name' := name) 
-  	    end
-  	  	;modname-part* := <string-tokenize> (['/'], name')
-  	 		;if <eq>(<length>modname-part* , 1) then
-  	 		 		package-name  := name'
-  	 		 		;relative-autogen-path := ""
-  	 		 else
-  	 		 	 package-name   := <last>modname-part*
-  	 		 	;relative-autogen-path := <dirname>name'  
-  	 		 end
-		  	 
+  	    end;
+  	  	modname-part* := <string-tokenize> (['/'], name');
+  	 		if <eq>(<length>modname-part* , 1) then
+  	 		 		package-name  := name';
+  	 		 		relative-autogen-path := ""
+  	 		else
+  	 		 	 package-name   := <last>modname-part*;
+  	 		 	 relative-autogen-path := <dirname>name'  
+  	 		end
 	
   get-qualified-spxmodulename: 
   	(namespace-name,module-name) -> result
-	where
-		result := namespace-name//TODO : when there is a concept-name added in spx , result will be package-name/conceptname 
-   		    
+		where
+			result := namespace-name//TODO : when there is a concept-name added in spx , result will be package-name/conceptname 
   
   //TODO : remove followind temp fix  
   get-qualified-importpath: 
@@ -131,16 +133,7 @@
 		autogen-dir := <Package-Gen-Root-of-DeclaredConcept>(package-name,module-name)
 		;<append-if-not-empty(|autogen-dir , "/")>package-name => result //TODO : when there is a module-name added in spx , result will be package-name/conceptname
 	
-  append-if-not-empty(|string-to-append, seperator) : operand ->result
-  where 
-  	if <eq>("", string-to-append) then 
-			result := operand
-		else
-			result := $[[string-to-append][seperator][operand]]//TODO : when there is a concept-name added in spx , result will be package-name/conceptname
-		end 
-   
-   
-  
+ 
   
   get-fullyqualified-autogen-path(|extension): 
   	(project-path, base-dir,spx-modulename) -> $[[project-path]/[base-dir]/[spx-modulename].[extension]]  
@@ -149,35 +142,10 @@
       where
           not(<eq>("", fileContent))
       with  
-      		<debug> $[Writing to the following file : [fileName]the following content: [fileContent] ]
-      		//;<debug> $[Writing the following content: [<pp-aterm>fileContent] to the following file: [fileName]]
+      		<debug> $[Writing to the following file : [fileName] the following content: 
+      							[fileContent] 
+      						 ]
           ;handle := <fopen> (fileName, "w+")
           ;<fputs>(fileContent , handle)
           ;fclose
-    rules
-	
-	ensure-directory-exists = ?dirpath ; (file-exists ; filemode ; isdir) <+ mkdir	
-    		    	
-rules
-	
-	initialize-configuration  = rules (Autogenerated-Artifacts-Dir := ".shawdowdir")
-															;<debug> $[Spoofax-lang|Initialize-Configuration]
-rules
-	
-	ensure-exists =  
-		?(project-path,relative-path)
-		;dir* := <string-tokenize> (['/'], relative-path) //tokenize relative-path to create the subdirectories
-		;if not(<eq>(<length>dir*,0)) then 
-				<map(create-folder)> dir*  //Creating sub-directories if they does not exists
-		 end
-		;create-folder(|project-path)  // restoring current folder to the project-path 
-		 
-		
-	create-folder(|directory-to-create) =   <file-exists<+mkdir(|"w")> directory-to-create;<chdir>directory-to-create  
-	
-  create-folder: folder-name -> None() 
-		with 
-    	<file-exists<+mkdir(|"w")> folder-name 
-      ;<chdir>folder-name 		    
- 	
  	 					 
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,29 @@
+module config 
+
+imports common
+
+rules 
+	initialize-configuration = 
+		rules(
+			Autogenerated-Artifacts-Dir := ".shawdowdir"
+			SPX-Source-Dir :+  _ -> ("test" , TopDirectoryOnly())
+		  Ignored-Spx-Souce-Dir :+ ".svn" -> ".svn"
+		  Enable-Caching: _ 
+		);
+		<debug> $[Spoofax-lang|Initialize-Configuration];
+		<debug> $[	- Autogenerated-Artifacts-Dir = [<pp-aterm><Autogenerated-Artifacts-Dir>]];
+		<debug> $[	- SPX-Source-Dir = [<pp-aterm><bagof-SPX-Source-Dir>]];
+		<debug> $[	- Ignored-Spx-Souce-Dir = [<pp-aterm><all-keys-Ignored-Spx-Souce-Dir>]]
+		;rules(invalidate-lib-cache: _ )
+		;rules(disable-pp-aterm : _ )
+		;rules(disable-pp-aterm :- _ ) // enable pp-aterm  
+		;rules(Enable-Caching :- _ )      // turing of caching 
+		;if Enable-Caching then 
+			<debug> $[	- Caching of Semantic Errors is Enabled]
+		 end	
+		
+signature 
+	constructors 
+		AllDirectories 		: 	SearchOption  
+		TopDirectoryOnly  :  	SearchOption   
+	 		
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,67 @@
+module context/declare
+
+imports 
+	context/sdf/declare
+	context/str/declare
+	context/scope-tree
+	context/signature
+	normalize/signatures 
+imports 
+	include/SpoofaxLang
+	lib/editor-common.generated
+imports
+	utils/annotations
+	utils/debug	
+	common
+
+rules		
+	declare-all = declare-sdf-all;declare-esv-all ; declare-str-all; update-modified-module-declaration   
+
+rules	
+	declare-sdf-all = declare-spxmodules-all(declare-sdf-section) 
+	declare-str-all = declare-spxmodules-all(declare-str-section)
+	declare-esv-all = declare-spxmodules-all(declare-esv-section)
+
+rules
+	declare-spxmodules-all(s): 
+		Module(attrb* , modname , section*) -> Module(attrb* , modname , m-sections*) 
+		where
+			<alltd(s)>section* => m-sections*
+			
+	update-modified-module-declaration:
+		m at Module(attrb* , modname , section*) -> m
+		with
+				Package( package-qname) := <get-annotation(get-package-annotation)>modname
+		with 
+			<store-declaration(|Modules())>(<get-module-untyped-qname>(package-qname, modname),  m) 
+	
+rules 
+	declare-sdf-section: 
+		SDFSection(definition*) ->SDFSection(declared-definition*) 
+		where 
+			declared-definition* := <alltd(declare-sdf-definition-main)>definition*
+	
+	declare-sdf-section: STRSection(def*) -> <id>
+ 
+	declare-sdf-section: ESVSection(def*) -> <id>  
+
+rules	
+	declare-str-section: SDFSection(def*) -> <id>
+	
+	declare-str-section: s at STRSection(def*) -> STRSection(m-definition*)
+	where 
+		m-definition* := <alltd(declare-str-definition-main)>def*
+	
+		
+	declare-str-section: ESVSection(def*) -> <id>   
+
+rules	
+	declare-esv-section: SDFSection(def*) -> <id>
+	
+	declare-esv-section: STRSection(def*) -> <id>
+ 
+	declare-esv-section: ESVSection(def*) -> <id>
+	
+	
+	
+	   
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,434 @@
+module context/scope-tree
+imports
+	include/SpoofaxLang 
+	lib/editor-common.generated
+imports 
+	context/signature
+	normalize/signatures
+	codegen/compile
+imports 	
+	common
+	utils/annotations
+	utils/path
+	utils/debug 
+
+	
+//TODO OPTIMIZE : eliminate redundant dynamic rules. Declared with package definition most likely is a redundant DR
+
+rules 
+
+	// Scope Tree implementation using Dynamic Rules
+	store-package-abspath: 
+		(package-untyped-qname , abspath) -> <id>
+		with 
+			rules( 
+				DeclaredPackage   :+ package-untyped-qname -> abspath
+				PackagesDeclaredIn:+ abspath -> package-untyped-qname 
+			)
+		where 
+			<debug-symboltable>$[ScopeTree|storing abs path | DeclaredPackage: [<pp-aterm>package-untyped-qname]-> [<pp-aterm>abspath]]
+	
+	store-module-abspath: 
+		(module-untyped-qname, abspath) -> <id>
+		with 
+			rules(
+				DeclaredModule:+ module-untyped-qname -> abspath
+			)
+		where 
+			<debug-symboltable>$[ScopeTree|storing abs path| DeclaredModule: [<pp-aterm>module-untyped-qname]-> [<pp-aterm>abspath]]
+	
+	store-declaration(|ScopedSymbol): ( untyped-qname , definition) -> <id>
+		with 
+			rules( Declared : (ScopedSymbol, untyped-qname ) -> definition) 
+		where	
+			<debug-symboltable>$[ScopeTree|storing declaration| Declared: [<pp-aterm>untyped-qname]-> [<pp-aterm>definition]] 
+	
+	store-original-declaration(|ScopedSymbol): ( untyped-qname , definition) -> <id>
+		with 
+			rules( DeclaredOriginal : (ScopedSymbol, untyped-qname ) -> definition) 
+		where	
+			<debug-symboltable>$[ScopeTree|storing declaration| Declared: [<pp-aterm>untyped-qname]-> [<pp-aterm>definition]] 
+	
+	
+	store-scope-reference: (typed-qname, typed-qname-ofparent) -> <id>
+		with 
+			rules( 
+				GetEnclosingScope :+ 	typed-qname 				 -> typed-qname-ofparent
+				GetEnclosedScope  :+  typed-qname-ofparent -> typed-qname 
+			)				
+		where	
+			<debug-symboltable>$[ScopeTree|storing enclosing namespace reference| GetEnclosingNamespace: [<pp-aterm>typed-qname]-> [<pp-aterm>typed-qname-ofparent]]
+	
+	
+	store-declaration(|Type): 
+		x -> x
+		where
+			scoped-x := <to-scoped-symbol>x;
+			rules( Declaration : (Type, scoped-x) -> x)
+		where
+			<debug-symboltable>$[ScopeTree|Storing Declaration [<pp-aterm>(Type, scoped-x)] -> [<pp-aterm>x]]	
+		
+rules 
+	get-module-abs-filepath : Module(qname) -> result
+	where 
+			result := <DeclaredModule>qname 
+			<+
+			debug(!"SymbolTable| Failed to retrieve module's abs file path.");fail
+			 
+	get-package-abs-filepath : Module(qname) -> result
+	where 
+			result := <DeclaredPackage>qname 
+			<+
+			debug(!"SymbolTable| Failed to retrieve package's abs file path.");fail
+	
+rules	
+	// Add scopes for the symbol 
+	to-global-symbol =
+		!(Globals(), <id>)
+	<+
+		<debug> $[Type| FAIL | Failed to convert it to Global symbol. <symbol> [<pp-aterm-forced>]]
+		;fail	
+		
+	to-scoped-symbol =  
+		!(<GetEnclosingPackageName> , <GetEnclosingModuleName> , <id>)
+	<+
+		to-global-symbol //if enclosing scope is not declared, then considering the namespace of the Symbol to be global 
+	<+
+		<debug> $[Type| FAIL | Failed to convert it to scoped symbol. 
+										<enclosing package> [<pp-aterm><GetEnclosingPackageName>] <enclosing module>[<pp-aterm-forced><GetEnclosingModuleName>] <symbol> [<pp-aterm-forced>]]
+		;fail	
+		 
+	// Strip Scope and retuns the symbol 
+	remove-scope-from-symbol = ?(_,_, <id>) + ?(Globals(), <id>)
+
+rules
+	
+	//After ensuring result is unique i.e. list contains only one element, it returns the unique result
+	ensure-is-unique = ?[<id>] <+ debug(!"SymbolTable| Failed to resolve unique declaration.");fail
+	
+	//resolving symbol in global scope and returing list of result	
+	resolve-symbol-global-declarations(key-resolver, value-resolver)= 
+		?symbol; // NOTE : symbol does not contain any scope information
+		where(not(?(_,_) <+ ?(_,_,_)));
+		// Looking for the symbol in the Globals() Scope
+		where(<debug-symboltable>$[SymbolResolver| Resoving Symbol in Global Scope.]);
+		<resolve-symbol-declarations-internal(key-resolver, value-resolver,?(Globals() , symbol))>symbol;
+		where(<debug-symboltable>$[SymbolResolver| Resoving Symbol in Global Scope. Result: [<pp-aterm>]]);
+		is-not-empty-list
+	<+
+		<debug-symboltable>$[SymbolTable| FAIL| Failed to resolve following symbol [<pp-aterm>] in Global Scope];
+		fail
+	
+	//resolving symbol in global scope only and ensuring result is unique
+	resolve-symbol-unique-declaration(key-resolver, value-resolver)=
+		where(?( Globals(), symbol ))
+		;<resolve-symbol-global-declarations(key-resolver, value-resolver)> symbol	
+		;ensure-is-unique // verify as resolved unique declaration 
+	<+	
+		<debug-symboltable>$[SymbolTable| FAIL| Failed to retrieve uniqe declaration in global scope."];fail
+	
+	// Resolving unique declaration of symbol in the scope (current-package, current-module)
+	// Symbol is resolved using the specified strategy parameter, i.e. using key-resolved and value-resolved  
+	resolve-symbol-unique-declaration(key-resolver, value-resolver)=
+		?( current-package , current-module, symbol )
+		;<resolve-symbol-unique-declaration(key-resolver, value-resolver|current-package , current-module)>symbol	
+	
+	
+	// resolving unique declaration - generic implementation   
+	resolve-symbol-unique-declaration(key-resolver, value-resolver|current-package , current-module)=
+		resolve-symbol-declarations(key-resolver, value-resolver|current-package , current-module)
+		;ensure-is-unique // verify as resolved unique declaration 
+	<+	
+		<debug-symboltable>$[SymbolTable| Failed to retrieve unique declaration.];fail
+	
+	// resolving declaration in global scope 
+	resolve-symbol-declarations(key-resolver, value-resolver) = 
+		?( Globals(), symbol )
+		;<resolve-symbol-global-declarations(key-resolver, value-resolver)> symbol
+	
+	// resolving declartion in the scope mentioned
+	resolve-symbol-declarations(key-resolver, value-resolver) = 
+		?( current-package , current-module,symbol )
+		;<resolve-symbol-declarations(key-resolver, value-resolver|current-package , current-module)> symbol
+	
+	// resolving declarations incrementally	
+	resolve-symbol-declarations(key-resolver, value-resolver|current-package , current-module)= 
+		?symbol; // NOTE : symbol does not contain any scope information
+		(	
+				// Looking for the symbol in the current Module Scope
+				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Current Scope [<pp-aterm>(current-package , current-module)].]);
+				<value-resolver>(current-package , current-module, symbol); 
+				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Current Scope. Result: [<pp-aterm>]]);
+				is-not-empty-list
+			<+
+				// Looking for the symbol in the parent enclosing scope => Package Scope
+				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Enclosing Package Scope ([<pp-aterm>current-package],_)  or in Global Scope]);
+				<resolve-symbol-declarations-internal(
+					key-resolver, 
+					value-resolver, 
+					?(current-package , _ , symbol) + ?(Globals() , symbol) // NOTE : Currently we combined Globals() + Enclosing package search in ONE loopup.
+				)>symbol;
+				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Enclosing Package + Global Scope. Result: [<pp-aterm>]]);				 	 
+		 	 	is-not-empty-list
+			<+
+				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Imported Scopes.]);
+				where( 
+					!current-package => Package(untyped-package-qname);
+					!current-module  => Module(untyped-module-qname)
+					;<get-all-usings>( untyped-package-qname , untyped-module-qname) => imported-typedqname*
+					;<debug-symboltable>$[SymbolResolver| Getting List of dependening-on packages/modules : [<pp-aterm>]]
+					
+				);
+				<resolve-imported-symbol-declarations(key-resolver  , value-resolver)>(symbol, imported-typedqname*);
+				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Imported Scopes. Result: [<pp-aterm>]]);
+				is-not-empty-list
+			<+
+				<debug-symboltable>$[SymbolTable| FAIL| Failed to resolve following symbol [<pp-aterm>] in namespace [<pp-aterm>(current-package , current-module)]];
+				fail
+		)
+
+	resolve-symbol-declarations-internal(key-resolver,value-resolver,namespace-filter) =
+		key-resolver;
+		filter(namespace-filter);
+	  mapconcat(value-resolver)
+	<+     			 
+		<debug-symboltable>$[SymbolTable| FAIL | resolve-symbol-declarations | Failed to resolve following symbol [<pp-aterm>]]
+		;fail
+
+	resolve-imported-symbol-declarations(key-resolver,value-resolver):
+		(symbol, scopes*) -> resolved*
+		where 
+			if !scopes* => [] then 
+				<debug-symboltable> $[SymbolTable| FAIL| Failed to resolve following symbol: [<pp-aterm>symbol] as there is no scope specified. ];
+				fail
+			else
+				!scopes* => [currentscope|rest*]	
+			end
+		where 
+			if !currentscope => Package(_) then 
+				resolved* := <is-not-empty-list><resolve-symbol-declarations-internal(key-resolver, value-resolver,?(currentscope, _ , symbol))>symbol
+			else
+				if !currentscope => Module(_) then 
+					resolved* := <is-not-empty-list><resolve-symbol-declarations-internal(key-resolver, value-resolver,?(_ , currentscope , symbol))>symbol
+				end
+			end;
+			where(<debug-symboltable>$[SymbolResolver| Resoving Symbol in Imported Scopes. Result: [<pp-aterm>resolved*]. Found in :[<pp-aterm>currentscope] ])
+		<+
+			resolved* := <resolve-imported-symbol-declarations(key-resolver  , value-resolver)> ( symbol, rest*)
+	
+	
+	// Verifies tha tthe current term is not a empty list 
+	is-not-empty-list = ?[_|_] 
+		
+rules
+	
+	store-import-references: m at Module(attrb*,modname,section*) -> Module(attrb*,modname,resulting-section*)
+		with 
+			!modname => SPXModuleName(<id>);
+			 <debug-symboltable>$[ImportReferenceResolver| store-import-references|Resolving import references for module : [<pp-aterm>]] 
+		where
+			Package(package-qname) :=<get-annotation(get-package-annotation)>modname// get package-name from the modname
+		where 
+			{| GetEnclosingPackageName, current-source-directory, GetEnclosingModuleName:
+					rules(
+						GetEnclosingPackageName      := package-qname //TODO refactor: most likely it is no longer needed 
+						GetEnclosingModuleName			 := modname 				
+						current-source-directory     := <get-module-untyped-qname;
+																					   DeclaredModule;
+																					   dirname
+																				    >(package-qname, modname)
+					)
+					;<alltd(store-import-declaration(|<GetEnclosingPackageName>))> section* => resulting-section*
+					;!Module(attrb*,modname,resulting-section*) => modifiedModuleDescription
+					;<store-declaration(|Modules())>(<get-module-untyped-qname>(package-qname, modname),  modifiedModuleDescription) //updating with import reference annotation	 
+			|}
+			
+	store-import-declaration(|enclosing-namespace-qname): 
+		i at ImportPackage(qname at QName(package-qname-parts*)) -> annotated-import-decl
+		where
+			<debug-symboltable>$[ImportReferenceResolver| store-import-declaration|storing package reference :[<pp-aterm>]]
+		where 
+			if <DeclaredPackage>qname then
+				<store-spx-import-declaration(|enclosing-namespace-qname)> Package(qname)
+				;annotated-import-decl:= i
+			else
+				annotated-import-decl:= <add-annotation(|Unresolved())>i
+				;<debug-symboltable>$[ImportReferenceResolver| store-import-declaratio|Failed to resolve following import : [<pp-aterm>]]	
+	 		end
+	 		
+	store-import-declaration(|enclosing-namespace-qname) :
+		i at ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> annotated-import-decl 
+		where 
+			<debug-symboltable>$[ImportReferenceResolver| store-import-declaration|storing module reference : [<pp-aterm>]]
+		with
+			module-qname := <get-module-untyped-qname> (package-qname-parts , modname)//TODO: construct modules qualified name
+		where 
+			if <DeclaredModule>module-qname then
+					<store-spx-import-declaration(|enclosing-namespace-qname)> Module(module-qname)
+					;annotated-import-decl:= i
+			else
+					annotated-import-decl:= <add-annotation(|Unresolved())>i
+					;<debug-symboltable> $[Store-import-declaration| Warning |Failed to resolve following import : [<pp-aterm>]]	
+		 	end		
+		 
+		// Store import references in the 2nd pass of the traversals
+	store-import-declaration(|enclosing-namespace-qname):
+		i at ImportPackage(Name(package-name)) -> annotated-import-decl 
+		where 
+			<debug-symboltable>$[ImportReferenceResolver| store-import-declaration|storing reference : [<pp-aterm>]]
+		where 
+			if <DeclaredPackage>QName([package-name]) then
+				<store-spx-import-declaration(|enclosing-namespace-qname)> Package(QName([package-name]))
+				;annotated-import-decl:= i 			
+			else
+				// Seems like package-name is not declared as a SPX package 
+				// Hence, looking for it in the file system as any external/legacy
+				// artifact.   
+				result:= <store-import-declaration(|enclosing-namespace-qname)>ImportLegacyArtifact(Name(package-name))
+			 ;if not(<get-annotation(get-unresolved-symbol-annotation)>result) then
+					//import is resolved as legacy artifact and found in local file system 
+					annotated-import-decl:= result
+				else
+					//Not found in the file system. Hence, just ignoring it and annotating it.
+					//and marking it as Unresolved()		
+					annotated-import-decl:= <add-annotation(|Unresolved())>i
+				end	  
+			end 
+
+	store-import-declaration(|enclosing-namespace):
+		i at ImportLegacyArtifact(Name(modulename))  -> annotated-import-decl 
+		where 
+			<debug-symboltable>$[ImportReferenceResolver| store-import-declaration|storing leagacy/external artifact reference : [<pp-aterm>]]
+		where 
+			resolved-path := <resolve-legacy-import-path(|<current-source-directory>)>modulename
+			;if (!resolved-path => Unresolved()) then 
+				<debug>$[SymbolTable|storing enclosing imports reference| FAIL <UsingLegacyArtifacts>: [<pp-aterm>i]]
+				;annotated-import-decl :=  <add-annotation(|Unresolved())>i
+			else
+				annotated-import-decl :=  i
+			end	
+		with
+			rules(
+					UsedLegacyArtifacts:   (Globals(), modulename) -> resolved-path
+					UsingLegacyArtifacts:+ enclosing-namespace	   -> (Globals(), Module(Name(modulename)), resolved-path)    
+				)
+			;<debug-symboltable>$[ImportReferenceResolver| storing enclosing imports reference| <UsingLegacyArtifacts>: [<pp-aterm>enclosing-namespace]-> [<pp-aterm>(Globals(), Module(Name(modulename)), resolved-path)]]
+			
+	store-spx-import-declaration(|importedby-package): 
+		imported -> imported
+		where 
+			!importedby-package => QName(_)
+		where 
+			module-untyped-qname := <get-module-untyped-qname>(importedby-package , <GetEnclosingModuleName>);
+			rules (
+				UsedBy:+ imported   -> importedby-package  
+				Using :+ (importedby-package, module-untyped-qname) -> imported 
+			)
+		where
+			<debug-symboltable>$[ImportReferenceResolver| storing enclosing imports reference| <Using>: ([<pp-aterm>importedby-package] , [<pp-aterm>module-untyped-qname])-> [<pp-aterm>imported]]
+			
+rules 
+	// TODO refactor : reduce the duplicate codes.
+	get-package-declaration = ?package-qname; get-declaration(|Packages())
+	
+	// Given a Module's Qualified Typed name , it returns the module declaration 
+	get-module-declarations = where(?Module(QName(_)));get-untyped-qname ; !(Modules() , <id>); bagof-Declared
+	
+	get-module-declaration = where(?Module(QName(_)));	get-untyped-qname ; !(Modules() , <id>); Declared		
+	
+	get-original-module-declaration = 	where(?Module(QName(_)));	get-untyped-qname ; !(Modules() , <id>); DeclaredOriginal
+	
+	get-module-and-verfity-unique = where(?Module(QName(_)));	get-untyped-qname ;	!(Modules() , <id>); bagof-Declared; ?[<id>]		  	
+		
+	// Given a List of Modules' Qualified Type name, it returns the list of module declaration 
+	get-module-declarations =  mapconcat(	get-module-declarations	)	<+	debug(!"Failed to get module declarations: ") ;fail
+
+	get-declaration(|ScopedSymbol)= !(ScopedSymbol, <id>); Declared
+	
+	get-enclosed-declarations(s) =?package-qname ; !Package(package-qname);	bagof-GetEnclosedScope;filter(s)
+	
+	// Get a list of Package declared in the current Project
+	// Retunrs: List of Packages' Typed-QName , i.e. , Package(QName(_))						  
+	get-package-list = all-keys-DeclaredPackage; get-typed-qnames(|PackageType())
+	
+	get-packages-of-file: file-abs-path -> result
+	with 
+		<has-extension(|"spx")>file-abs-path 
+		;<file-exists>  file-abs-path
+	where
+		<bagof-PackagesDeclaredIn>file-abs-path; get-typed-qnames(|PackageType()) => result
+	
+	// Given Typed-QName of Package, it returns list of enclosed Modules in the Package
+	// Returns:  List of Modules' Typed-QName, i.e. Module(QName(_))
+	get-enclosed-modules =  where (?Package(uqname));	bagof-GetEnclosedScope;	filter(?Module(_)) <+ debug(!"Failed to get enclosed modules: ") ;fail
+
+	// Returns a list of package/modules that <id> is depeding on. 
+	// Requires the <ID> to be untyped QName to look it up in the symbol tree.
+	// Otherwise, it throws <illegal argument exception>
+	get-all-usings =  where(?QName(_));	?package-untyped-qname; all-keys-Using;	filter(?(package-untyped-qname, _)); mapconcat(bagof-Using)	
+	
+	get-all-usings : (package-untyped-qname , module-untyped-qname) -> lstUsings*
+	where 
+		<bagof-Using>(package-untyped-qname , module-untyped-qname) => lstUsings* 			
+
+rules
+	//TODO : better handling of Typed and Untyped QName
+	
+	//Strongly typing/untyping qname
+	get-untyped-qname : typed-qname -> u-qname
+		where
+			!typed-qname => Package(u-qname)
+			<+ 
+			 !typed-qname => Module(u-qname)
+
+	get-typed-qnames(|Type) : list-qname -> result
+		where 
+			<is-list>list-qname
+		where
+			 <map(get-typed-qname(|Type))>list-qname => result
+		
+	get-typed-qname(|Type) = 
+		?QName(q-name-parts*); where(<is-list>q-name-parts*);<get-typed-qname>(Type , <id>)
+		<+
+		<debug>$[Type| FAIL | Failed to cast  [<pp-aterm-forced>] to [<pp-aterm-forced>Type]]; fail 	
+	
+	get-typed-qname: (ModuleType() , qname) -> Module(qname)
+	
+	get-typed-qname: (PackageType() , qname) -> Package(qname)
+
+	get-module-typed-qname: (Package(QName(package-qname-parts*)), spxmodulename) -> <get-typed-qname(|ModuleType())> <get-module-untyped-qname>(QName(package-qname-parts*), spxmodulename)
+	
+	get-module-typed-qname: (QName(package-qname-parts*), spxmodulename) -> <get-typed-qname(|ModuleType())>(<get-module-untyped-qname><id>)
+		  
+	get-module-untyped-qname: 
+		p@(package-qname-parts*, spxmodulename) ->QName(<conc>( package-qname-parts* , [modname]))
+		 where 
+		 	<is-list>package-qname-parts* 	
+		 where 
+				if <is-string>spxmodulename then 
+		 			modname := spxmodulename
+		 		else
+		 			!spxmodulename => SPXModuleName(modname-string);
+		 			 modname := modname-string 
+		 			<+ 
+		 			debug(!"Type| Illegal <spxmodulename> argument in get-module-untyped-qname ");fail
+				end		 				
+			<+
+				<debug>$[Type| FAIL |get-module-untyped-qname failed to cast  [<pp-aterm-forced>p] to [<pp-aterm-forced>ModuleType()]]; fail 	
+
+	get-module-untyped-qname: (QName(package-qname-parts*), spxmodulename) -> <get-module-untyped-qname>(package-qname-parts*, spxmodulename)
+	 					
+strategies
+	
+	// Returns matching strategy for looking up package annotations
+	get-package-annotation = ?Package(qname)
+	
+	// Returns matching strategy for looking up package annotations
+	get-module-annotation = ?Module(qname)
+	
+	
+	// Returns matching strategy for looking up Unresolved symbol annotations
+	get-unresolved-symbol-annotation = ?Unresolved()
+	
+	
+	 		 		
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,233 @@
+module context/sdf/declare-signature
+
+imports 
+		common 
+		include/SpoofaxLang
+		utils/debug		
+		
+imports 
+		context/scope-tree
+		context/sdf/declare
+		
+
+// TODO : refactor common functionily in seperate rules/strategy
+// DON'T like several things about this implementation. Need to refactor/re-implement.
+
+
+//TODO : write a pretty printer to convert Get-Operation-Declaration to Signatures' Aterm 
+
+rules 
+	getOperationSignatures = 
+		?opname; 
+ 		<resolve-symbol-declarations(all-keys-Get-Operation-Singature, bagof-Get-Operation-Singature)><to-scoped-symbol>opname 
+ 	<+
+ 		<debug-declaration> $[Waring | Failed to retrive OperationSignatures for opname[<pp-aterm>]. Returning  empty list . ];
+ 		![]
+ 		
+strategies 
+	// Returns right hand side of the production. In case of A -> B, it
+	// retunrs B.
+	get-rhs-sort-name = 
+			try(?cf(<id>) + ?lex(<id>));
+      repeat(?label(_, <id>));
+      (?sort(<id>) + ?parameterized-sort(<id>, _))
+		
+rules 
+	
+	//Stores operation name and operation declarations 
+	
+	/**
+  * Gets the operation name from the Production. It actually search all the attributes 
+  * in the attribute list and create  a dynamic rule that stores operation name. 
+  */
+  get-opration-name = alltd(store-operation-name)
+  
+  
+  /**
+  *	Store operation name from the RHS of the Production, i.e. from fun constructors.
+  * It creates a dynamic rule to store the operation name.
+  */
+  store-operation-name : f at fun(quoted( quoted-operation-name) ) -> f
+  	with
+  		opname := <un-double-quote>quoted-operation-name  
+		;rules (get-op-name: _ -> opname)
+  	where 
+  		<debug-declaration> $[Operation Name :  [opname]]
+	
+	store-operation-declaration
+  	=  ?p at prod(lhs , rhs-sort, attrs(attribute-list))
+  		;rhs-sort-name := <get-rhs-sort-name>rhs-sort	
+  		;{|lhs-sort, get-op-name:
+  					<find-sorts>lhs
+  					;<get-opration-name>attribute-list  
+  					;operation-name := <get-op-name>
+  					;lhs-operands-types := <reverse><bagof-lhs-sort>  
+  					;create-opname2opdecl-mapping(|operation-name , lhs-operands-types, rhs-sort-name , p) 
+  		  |}
+			  
+	store-operation-declaration 
+  	= 	?p at prod(lhs , rhs-sort, no-attrs()) 
+  		;rhs-sort-name := <get-rhs-sort-name>rhs-sort	
+  	  ; {|lhs-sort :
+	  				if (IsInsideLexicalSyntaxBlock<+ (!rhs-sort; ?lex(sort(rhs-sort-name))))then 
+							 rules ( lhs-sort :+ _ -> $[String] )
+						else
+							<find-sorts>lhs //TODO : consider ignorig :ID->ID-Prime operation decl 
+						end
+	  				;lhs-operands-types := <reverse><bagof-lhs-sort>
+	  				;operation-name := ""
+	  				;create-opname2opdecl-mapping(|operation-name , lhs-operands-types, rhs-sort-name , p)  
+			 |}
+
+	/*
+	store-operation-declaration 
+  	= ?p at prod(_ , lex(sort(rhs-sort-name)), no-attrs())
+  		; {|lhs-sort :
+							rules ( lhs-sort :+ _ -> $[String] )
+		  				;lhs-operands-types := <reverse><bagof-lhs-sort>
+		  				;operation-name := ""
+		  				;create-opname2opdecl-mapping(|operation-name , lhs-operands-types, rhs-sort-name , p)  
+			 |}
+	*/
+			 
+  find-sorts 
+  	= alltd(get-sort-decl)
+
+rules  
+	
+	// Gets sort declaration from the production	
+	get-sort-decl:
+		a at alt(frstSort , restSort*) -> a
+		where
+			{| lhs-sort:
+						<find-sorts>frstSort
+					;	<find-sorts>restSort*
+					;	inner-sort* := <bagof-lhs-sort;reverse>
+					;	intermediate-resultant-sort-type :=<string-replace(|"(", "_Of_");string-replace(|")", "")> <separate-by(|"_"); concat-strings>inner-sort* 
+			|}
+			; <map(create-opname2opdecl-mapping(|"", intermediate-resultant-sort-type, "[N/A]" ))>inner-sort*	
+			; rules( lhs-sort :+ _ -> intermediate-resultant-sort-type)
+	
+	get-sort-decl: 
+		seq( frst , rest*)-> seq( frst , rest*)
+		where
+			{| lhs-sort:
+						<find-sorts>frst
+					;	<find-sorts>rest*
+					;	inner-sort* := <bagof-lhs-sort;reverse>
+					;	intermediate-resultant-sort-type :=<string-replace(|"(", "_Of_");string-replace(|")", "")> <separate-by(|"_"); concat-strings>inner-sort* 
+					  
+			|}
+			; create-opname2opdecl-mapping(|"", inner-sort*, intermediate-resultant-sort-type, "[N/A]" ) 	
+		 	; rules( lhs-sort :+ _ -> intermediate-resultant-sort-type)
+	
+	get-sort-decl: 
+		i at iter-star ( x ) -> i
+  	where 
+  		{| 	lhs-sort:
+  					<find-sorts>x
+  				; inner-sorts-tostring := <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>
+  		|}
+  		;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")> inner-sorts-tostring])]
+  		;rules ( lhs-sort :+ _ -> ret-string)
+	
+	
+	get-sort-decl: 
+		i at iter( x ) -> i
+  	where 
+  		{| lhs-sort:
+  					<find-sorts>x
+  				; inner-sorts-tostring := <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>
+  		|}
+  		;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")>inner-sorts-tostring])]
+  		;rules ( lhs-sort :+ _ -> ret-string) 
+			  
+ 	get-sort-decl:
+ 		p at parameterized-sort(x, _) ->p
+		with 
+			rules( lhs-sort :+ _ -> x)
+			
+  get-sort-decl: 
+  	s at sort(x) -> s
+  	with 
+  		rules( lhs-sort :+ _ -> x)
+	
+	get-sort-decl: 
+		o at opt(parameterized-sort(x, _)) -> o
+  	with rules( lhs-sort :+ _ -> $[Option([x])])
+  	
+	get-sort-decl: 
+		opt(sort(x)) -> opt(sort(x))
+  	with rules( lhs-sort :+ _ -> $[Option([x])])
+	
+	get-sort-decl: 
+		i at iter-star-sep(operand1, operand2) -> i
+ 		with {|lhs-sort:
+			 					 <find-sorts>operand1
+		 					  ;<find-sorts>operand2
+		 					  ; inner-sorts-tostring := <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>    
+				  |}
+				 	;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")>inner-sorts-tostring])]
+  				;rules ( lhs-sort :+ _ -> ret-string)	 
+  				 
+	get-sort-decl: 
+		i at iter-sep(operand1, operand2) -> i
+		with {|lhs-sort:
+			 					 <find-sorts>operand1
+		 					  ;<find-sorts>operand2
+		 					  ;inner-sorts-tostring 
+		 					   		:= <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>    
+				  |}
+				 	;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")>inner-sorts-tostring])]
+  				;rules ( lhs-sort :+ _ -> ret-string)	 
+
+		
+strategies
+		
+	assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)= 
+			?[hd|tl]
+			;(expected-op-name , expected-op-sorts*, ex-resultant-sort) := hd
+			;(
+			 			 operation-name := expected-op-name 
+						;opernand-sorts* := expected-op-sorts*
+						;resultant-sort := ex-resultant-sort
+				  <+
+						<assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)>tl
+				)	 
+				
+	/**
+	* Create a dynamic rule that mapes operation name to the operation declaration.
+	*	Addinationally, Arity of Operation Decl. has also been stored.
+	* 
+	* @Param operation-name.
+	* @param Sort or Operand Types involve in the operation. 
+	* @Param Resultant Sort from the operation .
+	* @Param Production related to the operation.  
+	*	
+	*/		  
+	create-opname2opdecl-mapping(|operation-name, opernand-sorts*, resultant-sort , production) =
+		 available-opdecl*     := <getOperationSignatures>operation-name
+		;scoped-operation-name := <to-scoped-symbol>operation-name   
+		;if(
+		 		(!available-opdecl* => []) 
+				<+ 
+				not (<assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)>available-opdecl*)
+			)then 
+					
+					rules
+				 		(
+				 				Get-Operation-Singature  :+  scoped-operation-name -> (operation-name , <length>opernand-sorts*)
+				 				Get-Operation-Declaration:+  scoped-operation-name -> (operation-name , opernand-sorts* , resultant-sort)
+				 		)    
+				 		; <debug-declaration> $[DeclareSDF | Stored operation declration of production: [<pp-aterm> production] as the following : [<pp-aterm> ( operation-name , opernand-sorts* , resultant-sort) ].]
+				 		; <debug-declaration> $[DeclareSDF | Stored operation signature: [<pp-aterm> scoped-operation-name] -> [<pp-aterm> (operation-name , <length>opernand-sorts*)].]  
+ 		 	else 
+ 		 			<debug-declaration> $[DeclareSDF | Waring | There is an existing operation declration of production: [<pp-aterm> production] as the following : [<pp-aterm>(operation-name, opernand-sorts* , resultant-sort)] 
+ 		 								DeclareSDF | Debug-info: scoped-op-name [<pp-aterm>scoped-operation-name]. ]
+			end
+			
+	create-opname2opdecl-mapping(|operation-name, resultant-sort , production): alt-sort -> alt-sort  
+		where 
+			  alt-srt-lst := [alt-sort]
+			  ;create-opname2opdecl-mapping(|operation-name, alt-srt-lst, resultant-sort , production)
+

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,150 @@
+module context/sdf/declare
+
+imports 
+	libstratego-sdf
+  lib/editor-common.generated
+	include/SpoofaxLang
+imports 
+	context/scope-tree
+	normalize/signatures	
+imports
+	common
+	utils/debug
+	utils/annotations
+imports  
+	context/sdf/declare-signature	
+
+imports 
+	libstratego-sdf
+  lib/editor-common.generated
+	include/SpoofaxLang
+	context/scope-tree
+
+rules 
+	resolve-sdf-declaration = 
+ 		?symbol; 
+ 		<resolve-symbol-unique-declaration(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>symbol 
+ 	<+
+ 		<debug-analysis> $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<pp-aterm>]];
+ 		fail
+	
+	resolve-NamespaceSort-declaration = 
+ 		?symbol; 
+ 		<resolve-symbol-unique-declaration(all-keys-NamespaceSort , bagof-NamespaceSort)><to-scoped-symbol>symbol 
+ 	<+
+ 		<debug-analysis> $[ErrorChecking| FAIL| Failed to retrive NamespaceSort declaration for symbol [<pp-aterm>]];
+ 		fail
+	
+					  
+rules	 
+ // Traverse AST and declare sdf definition  
+ //	Instead of declaring in the Global Scope 
+ // now it is declared in a particular Scope. 
+ // Here scope is defined by (Package-QName, Module-QName)
+ declare-sdf-definition-main=
+    	alltd(declare-sdf-definition)
+  
+rules
+	 
+ declare-sdf-definition:
+    prod @ prod(lhs, sort, _) -> <id>
+    where
+      x:= <get-rhs-sort-name>sort;
+      qualified-sort-name := <to-scoped-symbol> x 
+   	with
+  		<store-operation-declaration>prod
+  	with
+      <topdown(try(store-namespace-def))> lhs
+    with
+      <Declaration> qualified-sort-name 
+    <+
+      file := <get-module-abs-filepath> <GetEnclosingModuleName>;
+      rules(
+       	Declaration		 :    qualified-sort-name  -> prod
+        DeclarationFile:    qualified-sort-name  -> file
+        // Added following two dynamic rules for the ESV Def. analysis
+        SortDeclaration  :  qualified-sort-name -> x
+       	SortProductionLHS:+ qualified-sort-name -> lhs
+      );
+      <debug-declaration> $[DeclareSDF | Storing Declaration : [<pp-aterm>qualified-sort-name]  -> [<pp-aterm>prod]]
+    with
+      <alltd(declare-sdf-usage)> lhs 
+  
+  store-namespace-def:
+    namespacedef(name, sort) -> <id>
+    with 
+    	scoped-name  := <to-scoped-symbol> name
+    where
+      rules(NamespaceSort: scoped-name  -> sort)
+
+  declare-sdf-definition:
+		lex-syntax at lexical-syntax(lex-defintions) ->lex-syntax
+		with{| IsInsideLexicalSyntaxBlock:
+						rules (IsInsideLexicalSyntaxBlock :_);
+					  <declare-sdf-definition-main> lex-defintions
+				|} 
+				
+	declare-sdf-definition:
+		parameterized(x, y) -> parameterized(x, y)
+  	where
+			<declare-sdf-definition> unparameterized(x);
+  		<alltd(declare-sdf-simple-definition)> y
+
+	declare-sdf-definition:
+		'sorts(_) -> <id>
+		with
+    	 alltd(declare-sdf-usage)
+  
+	declare-sdf-definition:
+		context-free-start-symbols(_) -> <id>
+		with
+    	alltd(declare-sdf-usage)
+	  
+  declare-sdf-definition:
+		lexical-start-symbols(_) -> <id>
+	  with
+	  	alltd(declare-sdf-usage)
+	  
+	declare-sdf-definition:
+    kernel-start-symbols(_) -> <id>
+    with
+      alltd(declare-sdf-usage)
+
+	declare-sdf-simple-definition:
+		sort(x) -> <id>
+		with
+	  	scoped-x:= <to-scoped-symbol>x;
+	  	rules(Declaration: scoped-x -> x)
+		where
+			<debug-declaration>$[DeclareSDF | Storing Declaration [<pp-aterm>scoped-x] -> [<pp-aterm>x]]	
+		
+rules
+	
+	declare-sdf-usage:
+    sort(x) -> <id>
+    with
+    	x-with-scope := <to-scoped-symbol>x 
+      ;rules(Usage: (scope, x)-> x)
+	  
+	declare-sdf-usage:
+    parameterized-sort(x, y) -> <id>
+    where
+      if !y => [sort(y')]; <is-string> x; <is-string> y' then
+        text := ${{x}[[{y'}]]};
+        text-with-scope := <to-scoped-symbol>text;
+        rules(Usage: text-with-scope -> text)
+      end
+	
+rules
+	
+	propose-completion:
+    sort(COMPLETION(x)) -> [decl*, use*]
+    with
+      decl* := <all-keys-Declaration> <to-scoped-symbol> x;
+      use*  := <all-keys-Usage> <to-scoped-symbol>x
+	  
+	propose-completion:
+    NOCONTEXT(COMPLETION(x)) -> [decl*, use*]
+    with
+      decl* := <all-keys-Declaration> <to-scoped-symbol>x;
+      use*  := <all-keys-Usage> <to-scoped-symbol> x
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signature.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signature.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,32 @@
+module context/signature
+
+// signature visibility 
+
+// Importing depth > 1 => visibility is internal
+// IDEA : how to implement this depth
+// build a tree and during resolving search in only one level up 
+ 
+signature constructors
+	Public	:	 Visibility
+	Private	:	 Visibility
+	Internal:  Visibility	
+
+
+//Signature scopes	
+signature constructors
+	Modules										: ScopedSymbol
+	Packages			 						: ScopedSymbol
+	Globals										: ScopedSymbol
+	
+	ScopeSymbol								: Symbol 
+	
+	//consider declaring the following 
+	STRSection								: Symbol
+	ESVSection								: Symbol
+	SDFSection								: Symbol
+	Unresolved								: Symbol
+	
+	
+	ModuleType								: Type
+	PackageType								: Type
+	SDFType										: Type
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,597 @@
+module context/str/declare
+
+imports
+	libstrc		
+	libstratego-lib
+ 	libstratego-gpp
+	libstratego-aterm
+imports
+	lib/editor-common.generated
+imports  	
+ 	utils/sourcedir
+ 	utils/debug
+ 	normalize/stratego
+imports	
+	analysis
+	common
+	config 
+imports 
+	include/SpoofaxLang
+	context/str/signature-generator
+	context/scope-tree
+
+
+rules 
+	
+	getStrDeclaration = 
+ 		?cookie; 
+ 		<resolve-symbol-unique-declaration(all-keys-STRDeclaration, bagof-STRDeclaration)><to-scoped-symbol>cookie 
+ 	<+
+ 		<debug-declaration> $[DeclareSTR | Failed to retrive STRDeclaration for cookie [<pp-aterm-forced><to-scoped-symbol>]];
+ 		fail
+	
+	getCookie =
+			?sig; 
+ 			<resolve-symbol-unique-declaration(all-keys-DeclareCookie, bagof-DeclareCookie)><to-scoped-symbol>sig
+ 		<+
+ 			<debug-declaration> $[DeclareSTR | Failed to retrive DeclareCookie for signature [<pp-aterm>]];
+ 			fail
+	 
+rules 
+	is-constructor =
+    (?(_, _); getCookie; getStrDeclaration <+ declaration-of);
+    (?OpDecl(_, _) + ?ExtOpDecl(_, _))
+
+  is-congruence-signature:
+    (x, s, 0) -> (x, s, [])
+    where
+      <getCookie> (x, s)   
+ 
+  declare-cookie-of =
+    signature-of; getCookie
+
+  declaration-of =
+    signature-of; (?_{<getStrDeclaration>} <+ ?(_{<getStrDeclaration>}, _) <+ ?(_{<getStrDeclaration>}, _, _))
+
+rules 
+  
+  declare-definition:
+    def -> cookie
+    with
+      sig := <signature-of>
+      ;if not(<getCookie> sig) then
+         cookie := <newterm>
+        ;scoped-cookie :=<to-scoped-symbol> cookie
+        ;scoped-sig    :=<to-scoped-symbol> sig
+        ;rules(
+          DeclareCookie:  scoped-sig  -> cookie
+          STRDeclaration: scoped-cookie  -> def
+        )
+      else
+       	cookie := <getCookie> sig 
+      end
+
+  redeclare-definition:
+    def -> cookie
+    with
+    	sig := <signature-of>
+      ;cookie := <newterm>
+      ;scoped-cookie :=<to-scoped-symbol> cookie
+      ;scoped-sig    :=<to-scoped-symbol> sig
+      ;rules(
+        DeclareCookie:  scoped-sig    -> cookie
+        STRDeclaration: scoped-cookie -> def
+      )
+  external SRTS-EXT-newint(|)
+  
+rules 
+	
+	declare-str-definition-main =  
+		declare-stratego-globals-top;
+		declare-bodies-top
+	
+	declare-stratego-globals-top =
+    if not(NoAnalysis) then
+    	where(<debug-declaration>$[DeclareSTR | Inside stratego-globals-top : [<pp-aterm>]]);
+    	//TODO : FIX handle it during legacy-compilation
+    	//with(<declare-str-globals>Import("libstratego-lib")); 
+      alltd(declare-str-definition)
+    end
+
+  declare-str-definition:
+    SDefT(x, s*, t*, s) -> SDefT(x', s*, t*, s')
+    with
+    	x' := x{<declare-definition>};
+      s' := <topdown(try(declare-dynrule))> s
+	
+	declare-str-definition:
+    OpDecl(x, t) -> OpDecl(x', t)
+    with
+      cookie := <redeclare-definition>;
+      x'     := x{cookie}
+    with
+      // Declare congruence
+      (x'', n) := <signature-of>;
+      sig'     := (x'', n, 0);
+      scoped-sig'  :=<to-scoped-symbol> sig';
+      rules(
+        DeclareCookie: scoped-sig' -> cookie
+      )
+  
+   declare-str-definition:
+    ExtSDef(x, s*, t*) -> <id>
+    with
+      redeclare-definition
+	
+  declare-str-definition:
+    ExtOpDecl(x, t) -> <id>
+    with
+     redeclare-definition
+	
+  declare-str-definition:
+    Overlay(x, t, d) -> Overlay(x', t, d)
+    with
+      cookie := <redeclare-definition>;
+      x'     := x{cookie}
+    with
+      // Declare congruence
+      (x'', n)     := <signature-of>;
+      sig'         := (x'', n, 0);
+      scoped-sig'  :=<to-scoped-symbol> sig';
+      rules(
+        DeclareCookie: scoped-sig'   -> cookie
+      )
+  declare-dynrule:
+    dec @ RDecT(x, s*, t*) -> RDecT(x', s*, t*)
+    where
+      not(!x => COMPLETION(_))
+    with
+      x' := x{<declare-cookie-of>}
+    <+
+      cookie := <newterm>;
+      x'  := x{cookie};
+      s'* := <length> s*;
+      t'* := <length> t*;
+      sig := (x, s'*, t'*);
+      scoped-cookie :=<to-scoped-symbol> cookie;
+      scoped-sig    :=<to-scoped-symbol> sig;
+      scoped-x      :=<to-scoped-symbol> sig;
+      rules(
+        DeclareCookie:  scoped-sig    -> cookie
+        DeclareCookie:  scoped-x      -> cookie
+        STRDeclaration: scoped-cookie -> dec
+      );
+      // See https://svn.strategoxt.org/repos/StrategoXT/strategoxt/trunk/strc-core/lib/stratego/strc/front/lift-dynamic-rules.str
+      ![ "new", "undefine", "aux", "once", "bagof", "reverse-bagof", "bigbagof", "all-keys"
+       , "innermost-scope", "break", "break-to-label", "break-bp", "continue", "continue-to-label"
+       , "throw", "chain", "bigchain", "fold", "bigfold" ];
+      list-loop({prefix, sig, cookie':
+        ?prefix;
+        sig := ($[[prefix]-[x]], s'*, t'*);
+        scoped-sig' := <to-scoped-symbol> sig;
+        rules(DeclareCookie: scoped-sig'  -> cookie)
+      })
+
+  dr-scope-declare-cookies(defs, s):
+    t -> t'
+    with
+      defs        := <defs>;
+      old-cookies := <map(!(<signature-of>, <declare-cookie-of <+ !()>))>;
+      t'          := <s> t;
+      <list-loop({
+        ?(sig, cookie);
+        if !cookie => () then
+        	scoped-sig    :=<to-scoped-symbol> sig;
+          rules(DeclareCookie :- scoped-sig)
+        else
+        	scoped-sig    :=<to-scoped-symbol> sig;
+          rules(DeclareCookie : scoped-sig -> cookie)
+        end
+       })> old-cookies
+
+rules // Declarations inside definition bodies
+
+  declare-bodies-top =
+    alltd(propose-completion <+ declare-bodies)
+
+  declare-bodies:
+    SDefT(x, s*, t*, s) -> SDefT(x, s'*, t'*, s')
+    with
+      {| DeclareCookie:
+        s'* := <map(declare-svar)> s*;
+        t'* := <map(declare-tvar)> t*;
+        s'  := <declare-bodies-top> s
+      |}
+
+  declare-bodies:
+    Let(d*, b) -> Rec(d'*, b')
+    with
+      dr-scope-declare-cookies(
+        !d*
+      ,
+        d'* := <map(declare-let-definition)> d*;
+        b'  := <declare-bodies-top> b
+      )
+
+  declare-let-definition:
+    SDefT(x, s*, t*, s) -> SDefT(x', s'*, t'*, s')
+    with
+      dr-scope-declare-cookies(
+        ![s*, t*]
+      ,
+        x'  := x{<redeclare-definition>};
+        s'* := <map(declare-svar)> s*;
+        t'* := <map(declare-tvar)> t*;
+        s'  := <declare-bodies-top> s
+      )
+
+  declare-bodies:
+    rec @ Rec(r, b) -> Rec(r', b')
+    with
+      dr-scope-declare-cookies(
+        ![rec]
+      ,
+        r' := r {<redeclare-definition> rec};
+        b' := <declare-bodies-top> b
+      )
+
+  declare-bodies:
+    Overlay(x, t*, d) -> Overlay(x, t'*, d')
+    with
+      {| DeclareCookie:
+        t'* := <map(declare-tvar)> t*;
+        d'  := <declare-bodies-top> d 
+      |}
+
+  declare-bodies:
+    ScopeDefault(s) -> ScopeDefault(s')
+    with
+      {| DeclareCookie:
+        with(
+          tvars;
+          list-loop({
+            sig := (<id>, 0); scoped-sig := <to-scoped-symbol>sig; rules(DeclareCookie :- scoped-sig)
+          })
+        );
+        s' := <declare-bodies-top> s
+      |}
+
+  declare-bodies:
+    Scope(v*, s) -> Scope(v*, s')
+    with
+      {| DeclareCookie:
+        <list-loop({ sig := (<id>, 0);scoped-sig:=<to-scoped-symbol> sig;  rules(DeclareCookie :- scoped-sig)})> v*;
+        s' := <declare-bodies-top> s
+      |}
+
+  declare-bodies:
+    Match(t) -> Match(t')
+    with
+      t' := <declare-match> t
+
+  declare-bodies:
+    Rule(t1, t2, w) -> Rule(t1', t2', w')
+    with
+      t1' := <declare-match> t1;
+      w'  := <declare-bodies-top> w;
+      t2' := <declare-bodies-top> t2 
+
+  declare-bodies:
+    LRule(r) -> LRule(r')
+    with
+      {| DeclareCookie: // acts as a non-blanking scope
+        r' := <declare-bodies-top> r
+      |}
+
+  declare-bodies:
+    SetDynRule(x, r) -> SetDynRule(x', r')
+    with
+      {| DeclareCookie: // acts as a non-blanking scope
+        x' := <declare-bodies-top> x;
+        r' := <declare-bodies-top> r
+      |}
+
+  declare-bodies:
+    DynRuleScopeId(x) -> DynRuleScopeId(x')
+    where
+      x' := x{<declare-cookie-of>} 
+
+  declare-bodies:
+    LabeledDynRuleScopeId(x, t) -> LabeledDynRuleScopeId(x', t')
+    where
+      x' := x{<signature-of; getCookie>}; 
+      t' := <declare-bodies-top> t
+
+  declare-bodies:
+    Assign(t1, t2) -> Assign(t1', t2')
+    with
+      t2' := <declare-bodies-top> t2;
+      t1' := <declare-match> t1
+
+  declare-bodies:
+    AM(s, t) -> AM(s', t')
+    with
+      s' := <declare-bodies-top> s;
+      t' := <declare-match> t
+
+  declare-match =
+    alltd(?Var(_); declare-var + ?App(_, _) + ?RootApp(_));
+    declare-bodies-top
+
+  declare-bodies:
+    GuardedLChoice(c, s1, s2) -> GuardedLChoice(c', s1', s2')
+    with
+      ( c' := <declare-bodies-top> c;
+        s1' := <declare-bodies-top> s1)
+    \DeclareCookie/
+      s2' := <declare-bodies-top> s2
+
+  declare-svar:
+    dec @ VarDec(x, t) -> VarDec(x', t)
+    with
+      cookie := <newterm>;
+      x'     := x{cookie};
+      scoped-cookie :=<to-scoped-symbol> cookie;
+      //TODO FIX : possibly will result in a bug 
+      scoped-sig    := <to-scoped-symbol><signature-of>x; // getting scoped symbol of x  
+      rules(
+	    	DeclareCookie:   scoped-sig -> cookie
+	      STRDeclaration: scoped-cookie  -> dec
+	    )
+	    
+  declare-tvar:
+    x -> x'
+    where
+      <is-string> x
+    with
+      x' := x{<declare-definition> Var(x)}
+
+  declare-tvar:
+    VarDec(x, t) -> VarDec(x', t)
+    with
+      x' := x{<declare-definition>}
+      
+	//TODO : Check why this rule is failing for var(x)
+  declare-var:
+    Var(x) -> Var(x')
+    with
+      x' := x{<declare-definition>}
+
+  declare-bodies:
+    Var(x{}) -> Var(x')
+    where
+      x' := x{<declare-cookie-of>}
+
+rules // Uses inside definition bodies
+
+  declare-bodies:
+    CallT(SVar(x), s*, t*) -> CallT(SVar(x'), s'*, t'*)
+    with
+      x' := x{<declare-cookie-of>}
+    <+
+      x' := x
+    with
+      t'* := <declare-bodies-top> t*;
+      s'* := <map(declare-bodies-svar <+ declare-bodies-top)> s*
+
+  declare-bodies-svar:
+    CallT(SVar(x), [], []) -> CallT(SVar(x'), [], [])
+    where
+      x' := x{<declare-cookie-of>}
+    <+
+      fail // TODO: special exception for higher-order args
+
+  declare-bodies:
+    Op(x, t*) -> Op(x', t'*)
+    where
+      x' := x{<declare-cookie-of>}
+    with
+      t'* := <declare-bodies-top> t*
+
+
+rules 
+
+	// TODO IMPLEMENT IMPORT handling => needs to be moved to the compile-legacy-artifacts
+	// and declare them in GLobal Scope for the furthur analysis
+  open-import(to-signatures):
+    full-path -> ast
+    with
+      ast := <id>
+  
+  declare-str-definition:
+    Import(x) -> Import(x)
+  	with
+	  	if (!x => Name(mName)) then
+  			moduleName := mName 
+  		else
+  			moduleName :=  x 
+  		end
+  	with 
+  		<get-all-declared-entries-by-namespace; map-declarations(declare-stratego-globals-top)>moduleName 
+  	<+	
+  		<open-import(resolve-import-decl, read-stratego-signatures, declare-stratego-globals-top)> moduleName
+    <+
+      rules(IsImportedFailed: moduleName)
+       
+
+  declare-str-definition:
+    ImportWildcard(x) -> ImportWildcard(x)
+   	with
+	  	if (!x => Name(mName)) then
+  			moduleName := mName 
+  		else
+  			moduleName :=  x 
+  		end
+  	with 
+  		<get-declarations-by-namespace; map-declarations(declare-stratego-globals-top)>moduleName 
+  	<+	
+  	  <open-wildcard-import(file-exists <+ resolve-import-path, read-stratego-signatures, declare-stratego-globals-top, has-extension(|"str") + has-extension(|"rtree"))> x
+    <+
+      rules(IsImportedFailed: x)
+
+   resolve-import-decl:
+     x -> full-path
+     where
+       fetch-library-ast; 
+       full-path := x 
+     <+
+       full-path := <resolve-import-path> $[[x].spx]
+     <+
+       full-path := <resolve-import-path> $[[x].str]
+     <+
+       full-path := <resolve-import-path> $[[x].rtree]
+
+   resolve-import-path:
+     x -> full-path
+     where
+        // FIXME: fetch true import paths from someplace
+        full-path := <file-exists> $[[<SourceDir>]/[x]]
+     <+ full-path := <file-exists> $[[<ProjectDir>]/[x]]
+     <+ full-path := <file-exists> $[[<ProjectDir>]/trans/[x]]
+     <+ full-path := <file-exists> $[[<ProjectDir>]/lib/[x]]
+     <+ full-path := <file-exists> $[[<ProjectDir>]/src/[x]]
+     <+ full-path := <file-exists> $[[<ProjectDir>]/syntax/[x]]
+     <+ full-path := <file-exists> $[[<ProjectDir>]/syn/[x]]
+     <+ full-path := <file-exists> $[[<ProjectDir>]/src/syntax/[x]]
+ 
+  fetch-library-ast:
+    x -> <pack-stratego-parse-stratego> (IncludeFromPath(x), [])
+
+ 
+
+	
+  read-stratego-signatures:
+    str -> <to-signatures> file
+    where
+      file := <fetch-library-ast>str
+    <+
+      rtree := <guarantee-extension(|"rtree")>;
+      if <is-newer> (rtree, str) + not(<file-exists> str) + <has-extension(|"rtree")> str then
+        file := <file-exists; ReadFromFile> rtree
+      else
+        file := <parse-stratego-file> str
+      end
+  
+ 
+	 
+	 to-signatures =
+    basic-stratego-desugar-top;
+    topdown(try(remove-stratego-bodies))
+
+
+  remove-stratego-bodies:
+    SDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s')
+    with
+      s' := <collect-all(?RDecT(_, _, _))> s
+   
+  remove-stratego-bodies:
+    Import(_) -> ()
+   
+  remove-stratego-bodies:
+    ImportWildcard(_) -> ()
+
+
+rules 
+
+	// Content completion
+  propose-completion:
+    completion -> proposals
+    where
+      signature-of; one(?COMPLETION(prefix)) <+ one(?COMPLETION(prefix))
+    with
+      all-signatures := <filter-by-prefix(|prefix)> <all-keys-DeclareCookie>;
+      switch !completion
+        case ?Var(_):
+          all-signatures' := <try(filter(?(_, _)); not([]))> all-signatures
+        case ?SVar(_):
+          all-signatures' := <filter(?(_, _, _))> all-signatures
+        case ?DynRuleScopeId(_):
+          all-signatures' := <filter(?(_, _, _); not(is-congruence-signature))> all-signatures
+        case ?Import(_):
+          all-signatures' := []
+        otherwise: // unknown context
+          all-signatures' := <filter(not(is-congruence-signature))> all-signatures
+      end;
+      proposals := <map(signature-to-proposal)> all-signatures';
+      rules(
+        ContentProposals := proposals
+      )
+  
+  propose-completion:
+    Rule(lhs, rhs @ Var(COMPLETION(_)), _) -> proposals
+    where
+      <not(oncetd(?RootApp(_) + ?App(_, _)))> lhs
+    with
+      lhs'      := <topdown(try(\As(_, e) -> e\))> lhs;
+      proposals := [([<pp-stratego-string> lhs'], "") | <propose-completion> rhs];
+      rules(
+        ContentProposals := proposals
+      )
+  
+  filter-by-prefix(|prefix) =
+    filter(one(string-starts-with(|prefix); not(?"")))
+  
+  signature-to-proposal:
+    (x, 0) -> [x | parentheses]
+    with
+      if is-constructor then
+        parentheses := ["()"]
+      else
+        parentheses := []
+      end
+
+  signature-to-proposal:
+    (x, n) -> [x, "(", t*, ")"]
+    where
+      <gt> (n, 0)
+    with
+      t* := <separate-by(|", ")> <copy> (n, "t") // TODO: number (Spoofax/231)
+
+  signature-to-proposal:
+    (x, 0, 0) -> [x, ""]
+
+  signature-to-proposal:
+    (x, n, 0) -> [x, "(", t*, ")"]
+    where
+      <gt> (n, 0)
+    with
+      t* := <separate-by(|", ")> <copy> (n, "s")
+
+  signature-to-proposal:
+    (x, n, m) -> [x, "(", s*, "|", t*, ")"]
+    where
+      <gt> (m, 0)
+    with
+      s* := <separate-by(|", ")> <copy> (n, "s");
+      t* := <separate-by(|", ")> <copy> (m, "t")
+
+  signature-to-proposal:
+    (x, [DR_DUMMY()], [DR_DUMMY()]) -> x // strategy param (wildcard arity)
+
+	
+rules 
+	// Projections and lookup
+	analyze-str-ast:
+		(ast, path, project-path) -> ast'
+		with
+			enable-stratego-debugging
+			;rules(
+        		CurrentFileFullPath := $[[project-path]/[path]]
+        )
+      ;<try(get-source-base-dir)>ast
+   		;if <file-exists> $[[project-path]/.disable-global-analysis] then
+    		rules(NoAnalysis: _)
+    	end
+   		;if <file-exists> $[[project-path]/.warn-global-analysis] then
+    		rules(WarnAnalysis: _)
+    	end
+    with
+    	declare-stratego-globals-top //TODO  : Refactor globals-top. Rewriting of the tree is done here.
+     	;ast' := <declare-bodies-top>;
+      rules(
+        DecoratedAst := ast'
+      )
+    where 
+    	disable-stratego-debugging
+    	;<debug-str> $[AST after analysis : [<pp-aterm>ast']]
+   

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/signature-generator.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/signature-generator.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,60 @@
+module context/str/signature-generator
+
+imports 
+	include/SpoofaxLang
+imports
+	lib/editor-common.generated
+
+rules
+  		
+	signature-of:
+    SDefT(x, s*, t*, s) -> (<remove-quote> x, <length> s*, <length> t*)
+
+  signature-of:
+    RDecT(x, s*, t*) -> (<remove-quote> x, <length> s*, <length> t*)
+
+  signature-of:
+    ExtSDef(x, s*, t*) -> (<remove-quote> x, <length> s*, <length> t*) 
+
+  signature-of:
+    CallT(SVar(x), s*, t*) -> (<remove-quote> x, <length> s*, <length> t*)
+
+  signature-of:
+    Var(x) -> (<remove-quote> x, 0)
+
+  signature-of:
+    VarDec(x, t) -> (<remove-quote> x, 0)
+
+  signature-of:
+    Op(x, t*) -> (<remove-quote> x, <length> t*)
+
+  signature-of:
+    OpDecl(x, t) -> (<remove-quote> x, <dec> <occurrences(?ConstType(_))> t)
+    
+  signature-of:
+    ExtOpDecl(x, t) -> (<remove-quote> x, <dec> <occurrences(?ConstType(_))> t)
+    
+  signature-of:
+    Overlay(x, t*, _) -> (<remove-quote> x, <length> t*)
+
+  signature-of:
+    Rec(x, s) -> (<remove-quote> x, 0, 0)
+
+  signature-of:
+    LabeledDynRuleScopeId(x, _) -> <remove-quote> x
+
+  signature-of:
+    DynRuleScopeId(x) -> <remove-quote> x
+  
+  remove-quote:
+    COMPLETION(s) -> COMPLETION(<remove-quote> s)
+  
+  remove-quote: 
+    s -> s'
+    with
+      if explode-string => ['\'' | s_tail] then
+        s' := <implode-string> s_tail
+      else
+        s' := s
+      end
+  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,36 @@
+module editor/main
+
+imports
+	lib/editor-common.generated
+
+imports 
+	codegen/compile
+imports 
+	config
+	utils/cache	
+rules
+	//editor-resolve 
+	
+	
+rules
+	//editor-complete 
+	
+	
+	
+rules
+	//editor-analyze	
+ 	editor-analyze: (ast, path, project-path) -> (ast, errors, warnings, infos) // get the analyzed AST 
+    with 
+			editor-init;
+		  initialize-configuration
+		with 
+			abs-path := <concat-strings;string-replace(|"\\", "/")>[project-path, "/" ,path]  
+		with 
+			<cache-currently-analyzing-ast>(abs-path  , ast)	 
+		with 
+			if Enable-Caching then
+				<get-cached-semantic-issues<+ compile-packages-of> abs-path  => semantic-issues*
+			else
+				<compile-packages-of> abs-path  => ( errors, warnings, infos)
+			end	
+			
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/resolve/imports.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/resolve/imports.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,7 @@
+module editor/resolve/imports
+	
+	
+rules 
+	
+	// resolves imports 
+		
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/main.str	Wed Apr 13 15:33:32 2011	(r22508)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/main.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -1,9 +1,11 @@
 module esv/main
-
+imports 
+	context/scope-tree
+	
 imports
-  esv/to-esv
+  codegen/esv/to-esv
   esv/analysis 
-  esv/check
+  analyze/esv/check
 imports
 	common
 	analysis
@@ -16,7 +18,9 @@
   libstratego-sglr
   libstrc
 
-
+imports 
+	context/sdf/declare
+	
 rules 
 	//Generate ESV Definition from SPX
   generate-esv:
@@ -25,26 +29,23 @@
     	<analyze-ast>(ast, path, project-path)
      with
       <to-esv-all> (selected, path, project-path)
-      
         
 rules // editor analysis
 	
 	editor-analyze-esv: (ast, path, project-path) -> (error-esv*, warning-esv*, note-esv*)
     with
-    	//Already SDF productions are recorded during previous analysis phase 
-      //<chdir> project-path
-      //;<record-all-sdfs> "."
-      //; <debug>$[all keys : [<pp-aterm> <mapconcat(bagof-SortDeclaration)><all-keys-SortDeclaration>]] 
-      error-esv*   := <collect-all(constraint-esv-error, conc)> ast
+       error-esv*   := <collect-all(constraint-esv-error, conc)> ast
       ;warning-esv* := []
       ;note-esv* := []  
  
  rules // rules related to editor complete 
+	
+	// TODO : FIX ME
 	
   editor-complete:
     (Sort(x), position, ast, path, project-path) -> proposals
     where
-      proposals := <all-keys-SortDeclaration>
+      proposals := <all-keys-SortDeclaration ; mapconcat(bagof-SortDeclaration)>
 
   editor-complete:
     (CompletionTemplate(COMPLETION(_), parts, _), position, ast, path, project-path) -> proposals
@@ -54,25 +55,27 @@
       else
         suffix := " = "
       end;
-      proposals := <map(<conc-strings> (<id>, suffix))> <all-keys-SortDeclaration>
+      proposals := <map(<conc-strings> (<id>, suffix))> <all-keys-SortDeclaration;mapconcat(bagof-SortDeclaration)>
 
   editor-complete:
     (CompletionTemplateWithSort(Sort(sort), COMPLETION(_), _, _), position, ast, path, project-path) -> proposals
     where
-      lhs*      := <bagof-SortProductionLHS> sort;
+      lhs*      := <to-scoped-symbol;
+      							resolve-symbol-declarations(all-keys-SortDeclaration,bagof-SortDeclaration)
+      						 >sort; 
       lhs'*     := <topdown(repeat(remove-completion-irrelevant))> lhs*;
       proposals := <make-set> <filter(to-completion-parts-top)> lhs'*
 
   editor-complete:
     (Sort(COMPLETION(_)), position, ast, path, project-path) -> proposals
     where
-      proposals := <map(<conc-strings> (<id>, " = "))> <all-keys-SortDeclaration>
+      proposals := <map(<conc-strings> (<id>, " = "))> <all-keys-SortDeclaration;mapconcat(bagof-SortDeclaration)>
  
  
  rules
  	
- 	//TODO : I think following rules are not required as ESV DEF only subjected to the current SPX
-  record-all-sdfs =
+ 	//Obsolete 
+ 	record-all-sdfs =
     <readdir> ".";
     list-loop(
       if <isdir> <filemode> then
@@ -89,8 +92,7 @@
     
     where
       <has-extension(|"sdf")> filename;
-      <debug> $[opening file : [filename]]
-      ;<open-import(abspath, parse-sdf-module-file, topdown(try(record-prod)))> filename
+      <open-import(abspath, parse-sdf-module-file, topdown(try(record-prod)))> filename
   
   record-sdf:
     filename -> filename

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,127 @@
+module normalize/main 
+
+imports
+  libstratego-lib
+  libstrc
+imports 
+	normalize/stratego
+	normalize/signatures
+imports 
+	include/SpoofaxLang
+imports 
+	utils/annotations
+	utils/debug
+	utils/cache
+imports 
+	common
+imports 
+	context/scope-tree
+	context/signature	
+
+//FIX : 
+// Design issues : 
+//		Package Common Imports are only for the current spx file at this moment
+//		It could be kept as it is or make it common in the whole package. 
+ 
+
+strategies		
+	nomalize-all = desugar-compilationa-unit
+
+rules	
+	desugar-compilationa-unit: 
+		CompilationUnit(import* , package*) -> 	CompilationUnit( import* , modified-packages) 
+		with 
+			{| PackageCommonImports:
+						<alltd(desugar-imports)> import*;
+						<alltd(desugar-spx-package)> package* => modified-packages
+			|}
+	
+	desugar-imports:
+		i at Imports(import*) -> i
+		with	
+			rules(
+				PackageCommonImports:+ _ -> i
+			)
+	
+	desugar-spx-package:
+		Package(Name(package-name) , modules* ) -> normalized-package-definition
+		with 
+			<debug-compiler>$[Desugaring Packages [<pp-aterm>package-name]]
+		where 
+			!QName([package-name]) 																=> package-qname;
+			<desugar-spx-package>Package(package-qname, modules*) => normalized-package-definition 
+		
+	desugar-spx-package:	
+		p at Package(package-qname , modules* ) -> modifiedPackageDescription
+		with 
+			!package-qname => QName(_);
+				<debug-compiler>$[Desugaring Packages [<pp-aterm>package-qname]]
+		with
+			{| EnclosingNamespace :
+			   	rules(
+						EnclosingNamespace := Package(package-qname)
+			   	);
+			   	<alltd(desugar-spx)> modules*  => desugared-modules*
+			|}
+		with 
+			currently-precompiling-spx-abspath  					=> package-abs-path;
+			!Package( package-qname , desugared-modules*) => modifiedPackageDescription
+		where
+			<store-package-abspath>(package-qname ,package-abs-path)
+		
+		/* seems not needed at this moment. hence, commenting this code.
+		where
+			if <get-package-declaration> package-qname => Package(package-qname, module-def*) then
+				modifiedPackageDescription' 						 := Package(package-qname, <conc>(module-def* , desugared-modules*))
+			else
+				modifiedPackageDescription' 						 := modifiedPackageDescription 
+			end;
+			<store-declaration(|Packages())>	(package-qname,  modifiedPackageDescription')
+		*/	
+	
+	desugar-spx: 
+		m at Module(attrb* , modname , section*) -> modifiedModuleDescription
+		with 
+			<debug-compiler>$[Desugaring Modules : [<pp-aterm>modname]]
+			
+		where
+			EnclosingNamespace      								=>  package;
+			modname-with-annotation 					      :=  <add-annotation(|package)>modname;
+		  !modname-with-annotation				      	=>  SPXModuleName(mod-name-string);
+		  !package							  								=>  Package(QName( package-name-part*));
+		  enclosing-module-name   								:=  [package-name-part*| [mod-name-string]];
+		  enclosing-module-qname   								:=  QName(enclosing-module-name) 
+		where 
+			{| EnclosingNamespace:
+			  	rules(
+						EnclosingNamespace 								:= 	Module(enclosing-module-qname)  
+					);
+					sections' := <conc>(<reverse><bagof-PackageCommonImports>, <alltd(desugar-spx)>section*)
+					;<debug-symboltable> $[ Storing enclosing namespace : [<pp-aterm>enclosing-module-qname]]
+			|}
+		with 
+			currently-precompiling-spx-abspath  												=> package-abs-path;
+			!Module(attrb* , modname-with-annotation , sections')				=> modifiedModuleDescription
+		where	
+			<store-module-abspath> (enclosing-module-qname, package-abs-path);
+			<store-declaration(|Modules())>(enclosing-module-qname,  modifiedModuleDescription);
+			<store-scope-reference>(Module(enclosing-module-qname),  package);
+			<store-original-declaration(|Modules())>(enclosing-module-qname,  m) // stored original ast 
+		
+		 
+		
+	//Desugaring SDF Sections 
+	desugar-spx : SDFSection ( sectionDef ) -> <add-annotation(|<EnclosingNamespace>)> <id>
+	
+	//Desugarting STR sections 
+	desugar-spx : STRSection ( sectionDef ) -> <add-annotation(|<EnclosingNamespace>)> STRSection ( sectionDef' )
+		with 
+			<basic-stratego-desugar-top> sectionDef => sectionDef'  		
+	
+	//Desugaring ESV Sections 
+	desugar-spx : ESVSection ( sectionDef ) -> <add-annotation(|<EnclosingNamespace>)> <id>
+	
+	
+
+
+			
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/signatures.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/signatures.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,22 @@
+module normalize/signatures 
+
+signature 
+	constructors
+	  FromMetaExpr     : Term -> Term
+	  ToMetaExpr       : Term -> Term
+	  FromTerm         : Term -> Term
+	  ToTerm           : Term -> Term
+	  FromMetaListExpr : Term -> Term
+	  ToMetaListExpr   : Term -> Term
+	  FromBuild        : Term -> Term
+	  ToBuild          : Term -> Term
+	  FromStrategy     : Term -> Term
+	  ToStrategy       : Term -> Term
+	  meta-var         : String -> Term
+	  meta-listvar     : String -> Term
+
+	constructors
+		Package					 : Namepace 
+		Package					 : QName -> Namespace
+		Module					 : QName -> Namespace
+	
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/stratego.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/stratego.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,108 @@
+// Based on org.strategoxt.imp.editors.stratego/trans/desugar.str
+module normalize/stratego
+
+imports 
+	normalize/signatures
+	
+imports
+  libstratego-lib
+  libstrc
+
+rules
+  basic-stratego-desugar-top =
+    topdown(try(basic-desugar))
+
+  basic-desugar:
+    SDef(x, a*, s) -> SDefT(x, a*, [], s)
+
+  basic-desugar:
+    RDef(x, a*, s) -> SDefT(x, a*, [], s)
+
+  basic-desugar:
+    RDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s)
+
+  basic-desugar:
+    RDec(x, a*) -> RDecT(x, a*, [])
+
+  basic-desugar:
+    SDefNoArgs(x, s) -> SDefT(x, [], [], s)
+
+  basic-desugar:
+    RDefNoArgs(x, s) -> SDefT(x, [], [], s)
+
+  basic-desugar:
+    OverlayNoArgs(x, o) -> Overlay(x, [], o)
+
+  basic-desugar:
+    RDecNoArgs(x) -> RDecT(x, [], [])
+
+  basic-desugar:
+    Call(x, s*) -> CallT(x, s*, [])
+
+  basic-desugar:
+    CallNoArgs(x) -> CallT(x, [], [])
+
+  basic-desugar:
+    ListVar(x) -> x
+
+  basic-desugar:
+    DefaultVarDec(x) -> VarDec(x, ConstType(SortNoArgs("ATerm")))
+
+  basic-desugar:
+    RuleNoCond(t1, t2) -> Rule(t1, t2, [])
+
+  basic-desugar:
+    Choice(s1, s2) -> <try(basic-desugar)> GuardedLChoice(s1, Id(), s2)
+
+  basic-desugar:
+    LChoice(s1, s2) -> <try(basic-desugar)> GuardedLChoice(s1, Id(), s2)
+
+  basic-desugar:
+    RChoice(s1, s2) -> <try(basic-desugar)> GuardedLChoice(s2, Id(), s1)
+
+  basic-desugar:
+    CondChoice(c, s1, s2) -> <try(basic-desugar)> GuardedLChoice(Where(c), s1, s2)
+
+  basic-desugar:
+    IfThen(c, s1) -> <try(basic-desugar)> GuardedLChoice(Where(c), s1, Id())
+
+  basic-desugar:
+    GuardedLChoice(Where(Not(c)), s1, s2) -> GuardedLChoice(Where(c), s2, s1)
+
+  basic-desugar:
+    GuardedLChoice(Not(c), s1, s2) -> GuardedLChoice(Where(c), s2, s1)
+
+  basic-desugar:
+    ToMetaExpr(t) -> ToMetaExpr(<extract-meta-expr-escapes> t)
+
+  basic-desugar:
+    ToBuild(t) -> ToBuild(<extract-meta-expr-escapes> t)
+
+  basic-desugar:
+    ToTerm(t) -> ToTerm(<extract-meta-expr-escapes> t)
+
+  basic-desugar:
+    ToMetaListExpr(t) -> ToMetaListExpr(<extract-meta-expr-escapes> t)
+
+  basic-desugar:
+    ToStrategy(t) -> ToStrategy(<extract-meta-expr-escapes> t)
+  
+  basic-desugar:
+    SwitchChoiceNoOtherwise(init, c*) ->
+    <basic-desugar> SwitchChoice(init, c*, Fail())
+
+  basic-desugar:
+    SwitchChoice(init, [SwitchCase(c, s) | c*], o) ->
+    Seq(init, GuardedLChoice(c, s, SwitchChoice(Id(), c*, o)))
+
+  basic-desugar:
+    SwitchChoice(init, [], o) -> Seq(init, o)
+
+  // HACK: eliminate embedded languages
+  extract-meta-expr-escapes:
+    t -> t'
+    with
+      t' := <collect-om(?FromTerm(_) + ?FromMetaExpr(_) + ?FromBuild(_)
+                      + ?FromMetaListExpr(_) + ?FromStrategy(_)
+                      + \meta-var(x) -> Var(x)\
+                      + \meta-listvar(x) -> Var(x)\, conc)> t

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str	Wed Apr 13 15:33:32 2011	(r22508)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -1,5 +1,4 @@
 module sdf/analysis
-
 imports
   libstratego-sdf
   lib/editor-common.generated
@@ -9,7 +8,7 @@
 	  common
 	  utils/debug
 imports  
-		sdf/signatures-mapper
+		context/sdf/declare-signature
 
 rules
 	
@@ -38,39 +37,32 @@
 	declare-sdf-globals-top =
     	alltd(declare-sdf-globals)
 	
-	//TODO : Ignore ESVSection and STRSection 
-	declare-sdf-globals : 
-		s at STRSection(_) -> s
+	//Ignores traversing STR sections  
+	declare-sdf-globals: s at STRSection(_) -> s
+
+	//Ignores traversing ESV sections 
+	declare-sdf-globals: e at ESVSection(_) -> e
 
-	//TODO : ESVSection 
-				
 	declare-sdf-globals:
     prod @ prod(lhs, sort, _) -> <id>
     where
       x:= <get-rhs-sort-name>sort
-    with
+   where
   		<store-operation-declaration>prod
     with
-      <topdown(try(store-namespace-def))> lhs
-    with
       <Declaration> x
     <+
       file := <CurrentFile>
       ;rules(
        	Declaration: x -> prod
         DeclarationFile: x -> file
-        
+  
         // Added following two dynamic rules for the ESV Def. analysis
         SortDeclaration:  x -> x
        	SortProductionLHS :+ x -> lhs
       )
     with
       <alltd(declare-sdf-use)> lhs
-  
-  store-namespace-def:
-    namespacedef(name, sort) -> <id>
-    where
-      rules(NamespaceSort: name -> sort)
       
 	declare-sdf-globals:
 		lex-syntax at lexical-syntax(lex-defintions) ->lex-syntax
@@ -80,6 +72,8 @@
 				 ;<declare-sdf-globals-top> lex-defintions
 				|}  
 				
+	//TODO FIX : Unparameterized imports
+	/*
 	declare-sdf-globals:
 		unparameterized(x) -> unparameterized(x)
     where
@@ -90,9 +84,11 @@
       )> x
     <+
       rules(IsImportFailed: _)
-
+	*/
+	//TODO FIX : Import
+	/*
 	declare-sdf-globals:
-		i at Import(Name(x)) -> i
+		i at Import(Name(x)) -> i  
     where
       <open-import(
         resolve-import
@@ -101,13 +97,9 @@
       )> x
     <+
       rules(IsImportFailed: _)
+	*/
 
 
-	declare-sdf-globals:
-		parameterized(x, y) -> parameterized(x, y)
-  	where
-			<declare-sdf-globals> unparameterized(x);
-  		<alltd(declare-sdf-simple-global)> y
   
 	resolve-import =
     	// TODO: better import handling
@@ -122,60 +114,65 @@
     	\x -> $[[<CurrentDir>]/[x].spx]\; file-exists
   	<+
   		\x -> $[[<ProjectDir>]/test/[x].spx]\; file-exists // TODO : temporarily adding this. will remove it later
- 
+ 	
+ 	declare-sdf-globals:
+		parameterized(x, y) -> parameterized(x, y)
+  	where
+			<declare-sdf-globals> unparameterized(x);
+  		<alltd(declare-sdf-simple-global)> y
  
 	declare-sdf-globals:
-    	'sorts(_) -> <id>
-	with
+		'sorts(_) -> <id>
+		with
     	 alltd(declare-sdf-use)
   
 	declare-sdf-globals:
-	    	context-free-start-symbols(_) -> <id>
-	with
+		context-free-start-symbols(_) -> <id>
+		with
     	alltd(declare-sdf-use)
 	  
   declare-sdf-globals:
-	    lexical-start-symbols(_) -> <id>
-	    with
-	      alltd(declare-sdf-use)
+		lexical-start-symbols(_) -> <id>
+	  with
+	  	alltd(declare-sdf-use)
 	  
 	declare-sdf-globals:
-	    kernel-start-symbols(_) -> <id>
-	    with
-	      alltd(declare-sdf-use)
+    kernel-start-symbols(_) -> <id>
+    with
+      alltd(declare-sdf-use)
 	  
   /**
    *Creating Declaration Dynamic Rule for all the Sorts
    */
 	declare-sdf-simple-global:
-	    sort(x) -> <id>
+		sort(x) -> <id>
 		with
-	      rules(Declaration: x -> x)
+	  	rules(Declaration: x -> x)
 	    
-  /**
-   *Creating Usage Dynamic Rule for all the sorts 
-   */
-	 declare-sdf-use:
-	    sort(x) -> <id>
-	    with
-	      rules(Usage: x -> x)
+	/**
+	 *Creating Usage Dynamic Rule for all the sorts 
+	 */
+	declare-sdf-use:
+    sort(x) -> <id>
+    with
+      rules(Usage: x -> x)
 	  
 	declare-sdf-use:
-	    parameterized-sort(x, y) -> <id>
-	    where
-	      if !y => [sort(y')]; <is-string> x; <is-string> y' then
-	        text := ${{x}[[{y'}]]};
-	        rules(Usage: text -> text)
-	      end
+    parameterized-sort(x, y) -> <id>
+    where
+      if !y => [sort(y')]; <is-string> x; <is-string> y' then
+        text := ${{x}[[{y'}]]};
+        rules(Usage: text -> text)
+      end
 	  
 	propose-completion:
-	    sort(COMPLETION(x)) -> [decl*, use*]
-	    with
-	      decl* := <all-keys-Declaration> x;
-	      use*  := <all-keys-Usage> x
-	  
-	  propose-completion:
-	    NOCONTEXT(COMPLETION(x)) -> [decl*, use*]
-	    with
-	      decl* := <all-keys-Declaration> x;
-	      use*  := <all-keys-Usage> x
+    sort(COMPLETION(x)) -> [decl*, use*]
+    with
+      decl* := <all-keys-Declaration> x;
+      use*  := <all-keys-Usage> x
+	  
+	propose-completion:
+    NOCONTEXT(COMPLETION(x)) -> [decl*, use*]
+    with
+      decl* := <all-keys-Declaration> x;
+      use*  := <all-keys-Usage> x

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/main.str	Wed Apr 13 15:33:32 2011	(r22508)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/main.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -11,12 +11,13 @@
 	analysis
 	common
 imports 
-  sdf/to-sdf
+  codegen/sdf/to-sdf
   sdf/analysis 
-  sdf/check
-  sdf/to-signature
+  analyze/sdf/check
+  codegen/sdf/to-signature
 
 rules
+	
 	editor-analyze-sdf: (ast, path, project-path) -> (error'*, warning'*, [])
     with
       // We only collect-om since we don't want inner warning dupes
@@ -27,14 +28,9 @@
       else
         serror* := <collect-om(context-free-syntax-sort-error, conc)> ast
       end;
-      if IsImportFailed then
-        error'*   := error*;
-        warning'* := <conc> (serror*, warning*)
-      else
-        error'*   := <conc> (serror*, error*);
-        warning'* := warning*
-      end 
-			;if not(![]; ?<flatten-list>error'*) then  
+      error'*   := <conc> (serror*, error*);
+      warning'* := warning*;
+      if not(![]; ?<flatten-list>error'*) then  
            rules ( get-sdf-errors := error'*)
        end
   
@@ -49,8 +45,7 @@
     with
       filename := <guarantee-extension(|"sdf")> path;
       result   := <pp-sdf-string'> <to-sdf> (selected, path , project-path)
-    */  
-      
+	*/  
 	generate-sdf: 
     	(selected, position, ast, path, project-path) -> None()
     with 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Wed Apr 13 15:33:32 2011	(r22508)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -10,44 +10,37 @@
 imports
   common
   analysis
+  config 
   include/SpoofaxLang
   lib/editor-common.generated
 imports
   str/main
-  str/to-stratego
+  codegen/str/to-stratego
 imports  
   sdf/main
-  sdf/to-sdf
-  sdf/to-signature
+  codegen/sdf/to-sdf
+  codegen/sdf/to-signature
   sdf/analysis 
-  sdf/check
+  analyze/sdf/check
 imports
-  esv/to-esv
+  codegen/esv/to-esv
   esv/main
 imports 
+	normalize/main
+	normalize/signatures   
+imports 
 	codegen/buildscripts
-	
-rules
- 	editor-analyze:
-    (ast, path, project-path) -> (all-error*, all-warning*, notes-sdf*)
-    with 
-    	<analyze-ast> (ast, path, project-path)
-    	;<debug>$[Spoofax-lang|Analysis is done.]
-    where 
-     	(error-sdf* , warning-sdf*, notes-sdf*):= <editor-analyze-sdf>(<Analyzed-ast> , path, project-path)
-   	where   
-   	 	(error-str* , warning-str*, notes-str*):= <editor-analyze-str>(<Analyzed-ast>  , path, project-path)
-    where 
-     (error-esv* , warning-esv*, notes-esv*):= <editor-analyze-esv>(<Analyzed-ast>  , path, project-path)
-   	where
-     	 all-error* := <flatten-list>[error-sdf*, error-str*,error-esv*]
-     	;all-warning* := <flatten-list>[warning-sdf*, warning-str*,warning-esv*]
-     	;if not(![]; ?all-error*) then  
-      	  <debug>$[Spoofax-lang|SDF Errors: [<flatten-list;pp-aterm>error-sdf*]]
-      	 ;<debug>$[Spoofax-lang|STR Errors: [<flatten-list;pp-aterm>error-str*]]
-      	 ;<debug>$[Spoofax-lang|ESV Errors: [<flatten-list;pp-aterm>error-esv*]]
-      end  
- 		
+	codegen/compile
+	utils/cache
+	context/scope-tree
+	context/signature
+imports	 
+	unit-tests/-
+imports
+	 editor/main
+	 codegen/main
+
+rules 
   editor-complete:
     (node, position, ast, path, project-path) -> proposals
     where
@@ -62,31 +55,20 @@
     (unparameterized(x), position, ast, path, project-path) -> target
     where
       target := <parse-spoofaxlang-file> <resolve-import> x
-
+rules
+	
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       filename := <guarantee-extension(|"aterm")> path;
       result   := ast // we just return the input term
-
-
-rules 
-	generate-all:
-		(selected, position, ast, path, project-path) -> None()
-		with 
-			<analyze-ast>(ast, path, project-path)
-		with 
-			(name , relative-autogen-path ):=<find-spoofax-module-name-string>(path, selected)	
+	
+	generate-desugar:
+    (selected, position, ast, path, project-path) -> (filename, result)
     with
-	  	 <to-sdf-all> (selected, path , project-path)
-	  	;<to-signature-all> (selected, path,project-path)
-		with	
-			<to-str-all>(selected, path , project-path)
-		with	
-			<to-esv-all>(selected, path , project-path)
-		where 
-			<emit-build-script>(project-path, <Autogenerated-Artifacts-Dir>, relative-autogen-path, name)
-		
+      filename := <guarantee-extension(|"aterm.sugar")> path;
+      result   := <nomalize-all>ast // we just return the input term
+
 rules	 
 
 	// Generate Signature for SDF Definition
@@ -105,10 +87,14 @@
 					;generated-signature-module-name := <concat-strings>[source-sdf, "-signature"] 
 					;generated-signatures :=  <get-signature-contents(|generated-signature-module-name)><get-all-signatures-as-string> 
 					;gen-file-name := $[[generated-signature-module-name].str]  
-					;<save-to-file>( gen-file-name, generated-signatures) 
+					;<save-to-file>( gen-file-name, generated-signatures)
+					;<chdir>project-path  
 				else
 					errors := <get-sdf-errors>
 	        ;<debug(!"Compiling failed for following SDF definition: ")> <base-filename> path
     			;<debug(!"Following errors has been encountered:")> <pp-aterm>errors
 				end	 
-
+				
+								 
+						
+	 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/analysis.str	Wed Apr 13 15:33:32 2011	(r22508)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/analysis.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -8,17 +8,18 @@
 imports
 	lib/editor-common.generated
 imports  	
- 	str/sourcedir
-	str/desugar
+ 	utils/-
+ 	normalize/stratego
 imports	
 	analysis
-	utils/debug
 	common
+	config 
+	
 imports 
 	include/SpoofaxLang
 	
 rules 
-	// Projections and lookup
+	// Projections and lookup 
 	analyze-str-ast:
 		(ast, path, project-path) -> ast'
 		with
@@ -34,8 +35,7 @@
     		rules(WarnAnalysis: _)
     	end
     with
-    	<basic-stratego-desugar-top> ast
-      ;declare-stratego-globals-top //TODO  : Refactor globals-top. Rewriting of the tree is done here.
+    	declare-stratego-globals-top //TODO  : Refactor globals-top. Rewriting of the tree is done here.
      	;ast' := <declare-bodies-top>;
       rules(
         DecoratedAst := ast'
@@ -43,6 +43,7 @@
     where 
     	disable-stratego-debugging
     	;<debug-str> $[AST after analysis : [<pp-aterm>ast']]
+    	 
  rules   		
   signature-of:
     SDefT(x, s*, t*, s) -> (<remove-quote> x, <length> s*, <length> t*)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/desugar.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/desugar.str	Wed Apr 13 15:33:32 2011	(r22508)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/desugar.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -4,22 +4,9 @@
 imports
   libstratego-lib
   libstrc
-
-signature constructors
-
-  FromMetaExpr     : Term -> Term
-  ToMetaExpr       : Term -> Term
-  FromTerm         : Term -> Term
-  ToTerm           : Term -> Term
-  FromMetaListExpr : Term -> Term
-  ToMetaListExpr   : Term -> Term
-  FromBuild        : Term -> Term
-  ToBuild          : Term -> Term
-  FromStrategy     : Term -> Term
-  ToStrategy       : Term -> Term
-  meta-var         : String -> Term
-  meta-listvar     : String -> Term
-
+imports
+	normalize/signatures
+	
 rules
 
   basic-stratego-desugar-top =

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/main.str	Wed Apr 13 15:33:32 2011	(r22508)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/main.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -4,9 +4,9 @@
 imports 
   lib/editor-common.generated
 imports   
-  str/analysis
-  str/check
-  str/to-stratego
+  context/str/declare
+  analyze/str/check
+  codegen/str/to-stratego
 
 rules
   editor-analyze-str:

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/compile.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/compile.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,27 @@
+module compile
+
+imports
+  libstratego-lib
+imports
+  config 
+  include/SpoofaxLang
+  lib/editor-common.generated
+imports 
+	codegen/compile
+	utils/cache
+	context/scope-tree
+	
+rules 
+	//Intregation Test of the compile-all is working as expected 
+	test-build-namespace-reference-table:
+		(selected, position, ast, path, project-path) -> None()
+		with
+			debug(!"starting compilation . ")
+		with 
+			editor-init;
+		  initialize-configuration
+		with 
+			<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
+		with 
+			compile-all
+	

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/path.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/path.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,38 @@
+module unit-tests/path
+
+imports 
+	common
+	utils/path
+	include/spoofaxlang
+rules
+	test-path:
+		(selected, position, ast, path, project-path) -> selected
+		where
+			<debug>$[=============Test 1: Get-Output-Path ============]
+			;result := <get-output-path(|"sdf")>( "c:/test" , QName(["a" , "b" , "c"]))
+			;<debug>$[[<pp-aterm-forced>result]] 
+		where
+			<debug>$[=============Test 2: Get-Output-Path with empty qname ============]
+			;result2 := <get-output-path(|"sdf")>( "c:/test" , QName([]))
+			;<debug>$[[<pp-aterm-forced>result2]] 	 
+		where
+			<debug>$[=============Test 3: convert-qname ============]
+			;result3 := <convert-qname(|"-")>QName([])
+			;<debug>$[[<pp-aterm-forced>result3]] 	 
+		where
+			<debug>$[=============Test 4: convert-qname ============]
+			;result4 := <convert-qname(|"-")>QName(["package" , "Name"])
+			;<debug>$[[<pp-aterm-forced>result4]] 	 
+		where 
+			<debug>$[=============Test 5: get-main-file-name ============]
+			;result5 := <get-main-file-name>QName(["package" , "Name"])
+			;<debug>$[[<pp-aterm-forced>result5]]
+		where 
+			<debug>$[=============Test 6: get-main-file-path ============]
+			;result6 := <get-main-output-path(|"sdf")> ("c:/test" , QName(["package" , "Name"]))
+			;<debug>$[[<pp-aterm-forced>result6]]	
+		where 
+			<debug>$[=============Test 7: get-output-path with prefix ============]
+			;result7 := <get-output-path(|"main", "sdf")> ("c:/test" , QName(["package" , "Name" , "A"]))
+			;<debug>$[[<pp-aterm-forced>result7]]	
+				 
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resolve-symbol.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resolve-symbol.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,165 @@
+module unit-tests/resolve-symbol 
+
+imports
+	include/SpoofaxLang 
+	lib/editor-common.generated
+	utils/debug
+imports
+	common
+	context/scope-tree
+	context/signature 
+	normalize/signatures
+rules
+		
+	// Unit Test to check the resolve symbol is working as expected.	
+	test-resolving-symbol:
+		(selected, position, ast, path, project-path) -> selected
+		where 
+			debug(!"starting test now. ");
+			editor-init
+		where
+		 package1  := Package(QName(["A" , "B"]))
+		 ;module1  := Module(QName(["A" , "B","m1"]))
+		 ;!package1 => Package(pqname)
+		 ;!module1  => Module (mqname) 
+		 ;module2  := Module(QName(["A" , "B","m2"]))
+		 ;p2 := Package(QName(["A" , "P2"]))
+		 ;p3 := Package(QName(["A" , "P3"]))
+		 ;p4 := Package(QName(["A" , "P4"]))
+		 ;m21  := Module(QName(["A" , "P2","m21"]))
+		 ;m22  := Module(QName(["A" , "P2","m22"]))
+		 ;m31  := Module(QName(["A" , "P3","m31"]))
+		 ;m32  := Module(QName(["A" , "P3","m32"]))
+		 ;m4  := Module(QName(["A" , "P4","m4"]))
+		  
+		 ;rules(Using :+ (pqname, mqname) -> p2) 	
+		 ;rules(Using :+ (pqname, mqname) -> p3)
+		 ;rules(Using :+ (pqname, mqname) -> m4) 	
+		where 
+			symbol1 := "ID";
+			symbol2 := "ID2";
+			s21 := "INT";
+			s22 := "CHAR";
+			s41 := "Test41";
+			s51 := "Test51"
+		where
+			enable-debug-all	
+		where
+			<setup-declaration>( package1, module1, symbol1);		// scoped symbol
+			<setup-declaration>( package1, module2, symbol2);		// scoped symbol
+			<setup-declaration>( p2, m21, s21);									// scoped symbol	
+			<setup-declaration>( p2, m22, s22);									// scoped symbol	
+			<setup-declaration>( p4, m4, s41);									// scoped symbol
+			<setup-declaration>( p4, m4, s41);									// scoped symbol
+			<setup-global-declaration> s51 											// global symbol
+		where
+			<debug> $[===============Running Test : 1===============]
+		where
+	 	{|GetEnclosingPackageName, GetEnclosingModuleName:			
+			rules(
+				GetEnclosingPackageName      := package1  
+				GetEnclosingModuleName			 :=  module1
+			);
+			<debug>$[Test1: Resolve Declaration:-----------------]
+			;result := <resolve-symbol-unique-declaration(all-keys-Declaration , bagof-Declaration| package1, module1)>symbol1
+			;result' := <resolve-symbol-unique-declaration(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>symbol1
+			;<debug(!"Result: ")> result
+			;<debug(!"Result': ")> result'
+		|}  
+	 	where
+		<debug> $[===============Running Test : 2===============]
+	
+	
+	 	where
+	 	{|GetEnclosingPackageName, GetEnclosingModuleName:	 		
+	 		rules(
+				GetEnclosingPackageName      := package1  
+				GetEnclosingModuleName			 :=  module1
+			);
+	 		lst := [(Package(QName(["A","B"])),Module(QName(["A","B","m1"])),"ID"),(Package(QName(["A","B"])),Module(QName(["A","B","m2"])),"ID2")];
+	 		lst*:= <filter(?(package1,_,symbol2))>lst;
+	 		<debug(!"test :")>lst*
+		|}	
+	 where
+		<debug> $[===============Running Test : 3===============]
+	
+	 where
+	 	{|GetEnclosingPackageName, GetEnclosingModuleName:
+	 		rules(
+				GetEnclosingPackageName      := package1  
+				GetEnclosingModuleName			 :=  module1
+			);
+			<debug>$[Test2: Resolve Declaration in parent scope:-----------------];
+			result2 := <resolve-symbol-declarations(all-keys-Declaration , bagof-Declaration| package1, module1)>symbol2;
+			result2' := <to-scoped-symbol; resolve-symbol-declarations(all-keys-Declaration , bagof-Declaration)>symbol2
+			;<debug(!"Result: ")>result2 
+			;<debug(!"Result': ")>result2' 
+		|}
+	where
+		<debug> $[===============Running Test : 4 ===============]
+	where
+		{|GetEnclosingPackageName, GetEnclosingModuleName:	
+			rules(
+				GetEnclosingPackageName      := package1  
+				GetEnclosingModuleName			 :=  module1
+			);
+			<debug>$[Test3: Resolve Declaration in imported scopes:-----------------];
+			result3 := <resolve-symbol-declarations(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>s22
+			;<debug(!"Result: ")>result3 
+		|}
+	where
+		<debug> $[===============Running Test : 5 ===============]	  
+	where
+		{|GetEnclosingPackageName, GetEnclosingModuleName:	
+			rules(
+				GetEnclosingPackageName      := package1  
+				GetEnclosingModuleName			 :=  module1
+			);
+			<debug>$[Test5: Resolve Declaration in imported module:-----------------];
+			result4 := <resolve-symbol-declarations(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>s41
+			;<debug(!"Result: ")>result4
+		|}
+	where
+		<debug> $[===============Running Test : 6 ===============]
+	where	
+	{|GetEnclosingPackageName, GetEnclosingModuleName:
+		
+			rules(
+				GetEnclosingPackageName      := package1  
+				GetEnclosingModuleName			 :=  module1
+			);
+			
+			<debug>$[Test6: Resolve Declaration in Global Scope:-----------------];
+			result5 := <resolve-symbol-unique-declaration(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>s51
+			;<debug(!"Result: ")>result5
+ |}	
+	where
+		<debug> $[===============Running Test : 7===============]
+	where	
+		<debug>$[Test7: Resolve Declaration in Global Scope:-----------------]
+		;result6 := <resolve-symbol-unique-declaration(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>s51
+		;<debug(!"Result: ")>result6
+ 	where 
+ 		<debug>$[======================================= ]
+ 	 ;<debug>$[!" Ran 7 Tests. All were ok."] 
+		  
+			
+	setup-global-declaration: x -> x
+	with 
+		scoped-symbol := <to-scoped-symbol>x
+		;rules(Declaration:+  scoped-symbol  -> scoped-symbol)
+	where
+		<debug>$[storing Global declaration [<pp-aterm>scoped-symbol]]
+				
+	setup-declaration: x@(p , m , symbol) ->x
+	with
+		{| GetEnclosingPackageName,GetEnclosingModuleName: 
+			rules(
+				GetEnclosingPackageName      := p  
+				GetEnclosingModuleName			 :=  m
+			);				scoped-symbol := <to-scoped-symbol>symbol; 
+				rules(Declaration:+ scoped-symbol  -> symbol)
+		|} 
+	where
+		<debug>$[storing declaration [<pp-aterm>scoped-symbol]]
+			
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/unzip-semantic-issues.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/unzip-semantic-issues.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,58 @@
+module 
+	unit-tests/unzip-semantic-issues
+
+imports
+  libstratego-lib
+
+rules
+	
+	test-unzip-semantic-issues: 
+		(selected, position, ast, path, project-path) -> None()
+		where
+			![[],(["a1"] , ["b1"] , ["c1"]),
+				    (["a2"] , ["b2"] , ["c2"]),
+				    (["a3"] , ["b3"] , ["c3"])
+			 ];
+			 result := <test-unzip-semantic-issuse-main(|[] , [], [])> <id>;
+			 <debug(!"result : ")>result
+			where
+			![([],[],[]),
+				([],[],[])
+			 ];
+			 result1 := <test-unzip-semantic-issuse-main(|[] , [], [])> <id>;
+			 <debug(!"result2 : ")>result1
+			 	 
+			  
+	
+	/* Testing Unzip . It converts
+	* [([a1] , [b1] , [c1])
+	*  ([a2] , [b2] , [c2])
+	*  ([a3] , [b3] , [c3])
+	* ] 
+	* to ([a1,a2,a3] , [b1,b2,b3] , [c1,c2,c3])
+	* store following mapping then module-name  -> issues
+	* 
+	*/
+	test-unzip-semantic-issuse-main(|errors, warnings, infos) =
+		where (debug(!" Currently working :"));
+		?[hd-issue|rest-issues];
+		(
+				!hd-issue => (errs', warns' , infos')
+				;err1 := <concat>[errs', errors]
+				;war1 := <concat>[warns', warnings]
+				;inf1 := <concat>[infos', infos]
+				;<test-unzip-semantic-issuse-main(|err1, war1, inf1)>rest-issues
+			 <+
+			  !hd-issue => [];
+			  <test-unzip-semantic-issuse-main(|errors, warnings, infos)>rest-issues
+		)
+			
+		
+		
+	test-unzip-semantic-issuse-main(|errors, warning, infos) : [] -> (errors, warning, infos)	
+
+			
+			
+			
+						
+	
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/annotations.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/annotations.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,61 @@
+/**  
+* Based on copy from WebDSL revision 4115. 
+* Modified version from revision 4115.
+*/
+module lib/annotations
+
+imports
+  libstrategolib
+
+rules 
+  add-annotation(|new-anno): elem -> elem{new-anno, anno*}
+		where 
+			anno* := <get-annos> elem
+
+	add-annotations(|new-annos): elem -> out
+		where 
+			<is-list> new-annos
+		where 
+			<gt> (<length> new-annos,0)
+		with (
+			if <?[i]> new-annos
+			then 
+				// we are at the last item
+				out := <add-annotation(|<last> new-annos)> elem
+			else
+				// we still have items to go
+				<?[i,ii*]> new-annos;
+				out := <add-annotations(|ii*)> <add-annotation(|i)> elem
+			end
+		)
+	
+	copy-annotations(|copyFrom) =
+		?elem;
+		<get-annos>copyFrom => srcAnnos;
+		if <?[]> srcAnnos	then
+			!elem
+		else
+			!<add-annotations(|srcAnnos)> elem
+		end
+	
+	copy-add-annotations(|copyFrom,new-annos) : elem -> <copy-annotations(|copyFrom); (add-annotations(|new-annos) <+ add-annotation(|new-annos))> elem
+	
+	// Return given anno if found, fail otherwise
+	get-annotation(|anno): elem -> anno
+		where 
+			(?_{anno*}; 
+			!anno*; 
+			fetch-elem(?anno))
+
+	// Return anno for which the strategy succeeds, fail otherwise
+	get-annotation(s) = ?_{anno*}; !anno*; fetch-elem(s)
+  
+	// Succeed if no anno matches
+	has-no-anno(s) = not(get-annotation(s))
+  
+	// Add annotation if not present, fail otherwise
+	add-new-anno(|anno) = where(has-no-anno(?anno)); add-annotation(|anno)
+	
+	// remove annotation from a particular term
+	remove-annotations = rm-annotations
+ 
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,102 @@
+module utils/cache
+imports 
+	common 
+	lib/editor-common.generated 
+	utils/path
+	utils/debug
+	config
+	
+rules
+  open-spx-compilation-unit(resolve-spx-path, resolve-cache-path, parse-file, precompile):
+    path -> spx-compilation-unit
+    with
+    	full-path := <resolve-spx-path>path;
+    	cache-path := <resolve-cache-path> full-path;
+			if not(<CachedCompilationUnit> full-path) then
+      	if <CachedParseAst> full-path then
+					spx-compilation-unit:= <CachedParseAst>full-path
+				else
+        	if <is-newer> (cache-path, path) then
+          	spx-compilation-unit := <ReadFromFile> cache-path
+          else
+          	spx-compilation-unit := <parse-file> full-path;
+            if <file-exists> full-path then
+            	// Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, spx-compilation-unit)
+            end
+          end
+ 				end;
+ 				path' := <string-replace(|"\\", "/")>full-path;
+ 			  rules (
+ 			  	CachedCompilationUnit: path' -> (cache-path,spx-compilation-unit)
+ 			  );
+ 			  {| currently-precompiling-spx-abspath:
+ 			  			rules ( 
+ 			  				currently-precompiling-spx-abspath := path'  
+ 			  			); 
+ 			  			
+ 			  			<precompile <+ throw-precompile-exception>spx-compilation-unit	
+ 			  |}
+ 			end
+  	where 
+  		<debug-compiler>$[Caching |Storing CompilationUnit: [<pp-aterm>full-path]]
+
+rules 
+	cache-lib-ast : a@( name , ast) -> a
+	where
+		<spx-lib-cache-path> name => lib-cache-path
+	where
+		<WriteToBinaryFile> (lib-cache-path, ast)
+	
+	get-cached-lib-ast(read-lib) : name -> ast
+		with
+			<spx-lib-cache-path> name => cache-path
+		where
+			if not(invalidate-lib-cache) then
+			 	<debug-compiler>$[Caching | Cache is invalidated. read it.];
+	     	fail	 
+	     else
+				if <file-exists> cache-path then
+				 	<debug-compiler>$[Caching | lib Cache is still valid  :[<pp-aterm>]]
+				 	;<ReadFromFile> cache-path => ast
+				 	;<debug-compiler>$[Caching | Found ast:[<pp-aterm>ast]]
+				else
+					<read-lib>name => ast
+					;<cache-lib-ast>( name , ast) 		 
+				end
+			 end     
+rules
+	cache-semantic-issues: (abs-path ,issues) ->(abs-path ,issues)
+	where
+		<debug-compiler>$[Caching | Storing in Cache : [<pp-aterm>]]
+	where 	
+		<spx-semantic-issues-cache-path> abs-path => cache-path;
+		<debug-compiler>$[Caching | Cache Path  :[<pp-aterm>]]
+	where 	 
+	  <WriteToBinaryFile> (cache-path, issues)
+  
+	get-cached-semantic-issues : abs-path ->issues
+		where
+			<spx-semantic-issues-cache-path> abs-path => cache-path 
+			;if <is-newer> (cache-path, abs-path)then
+			 	<debug-compiler>$[Caching | Cache is still valid  :[<pp-aterm>]]
+			 	;<ReadFromFile> cache-path => issues
+			 	;<debug-compiler>$[Caching | Found Issues:[<pp-aterm>]]
+	     else
+				<debug-compiler>$[Caching | Cache is invalidated. Going in the hard way.];
+	     	fail		
+	     end     
+		
+	    
+rules
+	cache-currently-analyzing-ast = 
+		(?(path, compilation-unit-ast) <+ throw-invalid-argument-exception(|"utils.cache.cache-currently-analyzing-ast")); 
+		path' := <string-replace(|"\\", "/")>path;
+		rules(
+	      CachedParseAst: path' -> compilation-unit-ast
+	  ) 
+
+
+	
+	
+					
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str	Wed Apr 13 15:33:32 2011	(r22508)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -1,7 +1,15 @@
 module utils/debug
 
+imports 
+	common
+
 strategies 
-	
+	enable-debug-all  = rules ( DebugAll: _ )
+	
+	disable-debug-all  = rules ( DebugAll:- _ )
+
+strategies 
+		
 	enable-stratego-debugging  = rules(DebugStr: x -> x)
 	
 	disable-stratego-debugging = rules(DebugStr:- _ )
@@ -10,10 +18,61 @@
   
 strategies 
 
-	// Dubug switches  
-	enable-sdf-debugging  = rules(DebugSDF: x -> x)
+	enable-sdf-debugging  = rules(DebugSDF: _)
 	
 	disable-sdf-debugging = rules(DebugSDF:- _ )
+	
+	// Dubug switches  
+	enable-declaration-debugging  = rules(DebugDeclaration: x -> x)
+	
+	disable-declaration-debugging = rules(DebugDeclaration:- _ )
+	
+	debug-declaration = not(DebugDeclaration <+ DebugAll)  <+ debug(!"--- Declaration | ") 
+ 
+ 
+ 
+	// Dubug switches  for symbol table
+	enable-symboltable-debugging  = rules(DebugSymbolTable: x -> x)
 	
-	debug-sdf = not(DebugSDF) <+ debug
- 
\ No newline at end of file
+	disable-symboltable-debugging = rules(DebugSymbolTable:- _ )
+	
+	debug-symboltable = not(DebugSymbolTable <+ DebugAll)  <+ debug(!"--- SymbolTable | ") 
+ 
+ 
+  // Dubug switches for semantic analysis  
+	enable-semantic-analysis-debugging = rules(DebugSemanticAnalysis: x -> x)
+	
+	disable-semantic-analysis-debugging = rules(DebugSemanticAnalysis:- _ )
+	
+	debug-analysis = not(DebugSemanticAnalysis <+ DebugAll)  <+ debug(!"--- SemanticAnalysis | ") 
+ 
+ 
+ 	// Dubug switches for compile  
+	enable-compiler-debugging  = rules(DebugCompiler: x -> x)
+	
+	disable-compiler-debugging = rules(DebugCompiler:- _ )
+	
+	debug-compiler = not(DebugCompiler <+ DebugAll)  <+ debug(!"--- Compiler | ")
+ 
+ rules 
+ 	
+ 	debug-time(s|msg) =
+      where(starttime := <times>)
+    ; s
+    ; where(
+          total := <diff-times> (<times>,starttime)
+        ; t1 := <self-children-user-time; ticks-to-seconds; real-to-string(|3)> total
+        ; str := <concat-strings> [msg, ": ", t1, " s"]
+        ; debug
+      )
+
+rules 
+	throw-unable-read-exception(|message) = debug(!message);fail
+	throw-unable-read-file = debug(!"unable to read file : ")
+
+rules 
+	throw-precompile-exception = debug(!"Could not precompile: "); fail
+	throw-invalid-argument-exception(|strategy-name) = <debug>$[invalid argument at [strategy-name] : [<pp-aterm><id>]]; fail
+	
+	
+	      
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,167 @@
+module utils/path 
+imports 
+	lib/editor-common.generated 
+	context/signature
+imports
+	common
+	utils/debug
+	include/spoofaxlang
+
+rules 
+	
+	qname-to-path = 
+		convert-qname(|"/")
+	
+	convert-qname(|seperator) =
+		?QName(qname-parts*)
+		;<separate-by(|seperator);concat-strings>qname-parts*
+		
+rules
+	get-output-path(|prefix, extension)= 
+		?(dir-path, QName(qname-parts*))
+		;if not(!qname-parts* => []) then 
+				relative-path := <qname-to-path> QName(qname-parts*)
+				;<concat-strings> [dir-path, "/" , relative-path ,"-", prefix, "." , extension]
+		else
+			!dir-path// there is no point of concat relative-path if its empty
+		end
+		
+	get-output-path(|extension)= 
+		?(dir-path, QName(qname-parts*))
+		;if not(!qname-parts* => []) then 
+				relative-path := <qname-to-path> QName(qname-parts*)
+				;<concat-strings> [dir-path, "/" , relative-path , "." , extension]
+		else
+			!dir-path// there is no point of concat relative-path if its empty
+		end 
+	
+	get-main-file-name =
+		?QName(qname-parts*);
+		<convert-qname(|"-")>QName(qname-parts*) => qname-as-string;
+		<concat-strings>[qname-as-string,"-main"]
+	
+	get-signature-file-name = 
+		?sdf-module-name;
+		<concat-strings>[sdf-module-name,"-signature"]
+			
+	get-main-output-path(|extension)=
+			?(dir-path, QName(qname-parts*))
+		 ;artifact-main-file-name    := <get-main-file-name>QName(qname-parts*)
+		 ;relative-path := <qname-to-path> QName(qname-parts*)
+		 ;<concat-strings> [dir-path, "/" , relative-path, "/" ,artifact-main-file-name, "." , extension]
+	
+	
+	append-if-not-empty(|string-to-append, seperator) : operand ->result
+  where 
+  	if <eq>("", string-to-append) then 
+			result := operand
+		else
+			result := $[[string-to-append][seperator][operand]]//TODO : when there is a concept-name added in spx , result will be package-name/conceptname
+		end 
+		
+rules
+	//ensures whether a particular directory exists. If it does not , then creates a new one with the same name. 	
+	ensure-directory-exists = ?dirpath ; ((file-exists ; filemode ; isdir) <+ mkdir); chdir	
+rules
+	ensure-exists = 
+	?( project-path , autogen-dir )
+	; where (<is-string>autogen-dir)
+	; fail  
+	
+	ensure-exists =  
+		?(autogen-root-path, QName(qname-parts*))
+		;debug(!"inside ensure-exists ")
+		;<ensure-directory-exists>autogen-root-path 
+		;if not(<eq>(<length>qname-parts*,0)) then 
+				<map(create-folder)>qname-parts*  //Creating sub-directories from the qname parts 
+		 end
+		;create-folder(|autogen-root-path)  // restoring current folder to the project-path 
+	
+	create-folder(|directory-to-create) = <file-exists<+mkdir(|"w")> directory-to-create;<chdir>directory-to-create  
+	
+  create-folder: folder-name -> None() 
+		with 
+    	<file-exists<+mkdir(|"w")> folder-name 
+      ;<chdir>folder-name 		    
+  
+  chdir-to-project-path =  
+  <chdir><project-path>   
+
+rules 
+	spx-precompiled-cache-path = 
+		spx-cache-path(|"precompiled.sig")
+	
+	spx-lib-cache-path = 
+		spx-cache-path(|"libs.sig")
+	
+	
+	spx-semantic-issues-cache-path = 
+		spx-cache-path(|"err")
+		
+	spx-cache-path(|extension-prefix):
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.spxcache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].[extension-prefix]]
+	
+	spx-compilation-unit-path=
+		where(is-string);
+		abspath
+		
+rules 
+	resolve-legacy-import-path(|sourcedir) =
+		 where (is-string);
+		 {| SourceDir, ProjectDir:
+		 		rules( 
+		 			ProjectDir  := <project-path>
+		 			SourceDir		:= sourcedir 
+		 		);	
+			 		 try-resolve-as-sdf
+				<+ try-resolve-as-str
+				<+ try-resolve-as-esv
+		 |}
+		<+ 
+		 <debug-symboltable> $[PathResolving | resolve-legacy-import-path|Failed to resolve import path for : [<pp-aterm>]]
+		 ;!Unresolved() 
+	
+			
+	try-resolve-as-str = 
+		?importname; 
+		where (
+			full-path := <resolve-import-path> $[[importname].str]
+  	<+
+  		full-path := <resolve-import-path> $[[importname].rtree]
+		);
+		!full-path
+	
+	
+	try-resolve-as-sdf = 
+		?importname; 
+		where (
+			full-path := <resolve-import-path> $[[importname].sdf]
+  	<+
+  		full-path := <resolve-import-path> $[[importname].def]
+		);
+		!full-path
+		
+		
+	try-resolve-as-esv = 
+		fail
+	
+	
+	
+	//TODO refactor : fetch the folders from the config.str 
+	resolve-import-path:
+  x -> full-path
+  where
+  	full-path := <file-exists> $[[<SourceDir>]/[x]]
+ <+ full-path := <file-exists> $[[<ProjectDir>]/[x]]
+ <+ full-path := <file-exists> $[[<ProjectDir>]/trans/[x]]
+ <+ full-path := <file-exists> $[[<ProjectDir>]/lib/[x]]
+ <+ full-path := <file-exists> $[[<ProjectDir>]/src/[x]]
+ <+ full-path := <file-exists> $[[<ProjectDir>]/syntax/[x]]
+ <+ full-path := <file-exists> $[[<ProjectDir>]/syn/[x]]
+ <+ full-path := <file-exists> $[[<ProjectDir>]/src/syntax/[x]]
+   		
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str	Wed Apr 13 15:50:31 2011	(r22509)
@@ -0,0 +1,38 @@
+module utils/sourcedir
+
+imports
+  analysis
+  libstrc
+
+rules
+  
+  get-source-base-dir: mod at Module(x, _) -> mod
+    where <explode-string> x
+        ; filter(?'/')
+        ; length => ndirs
+        ; CurrentDir
+          // remove the last ndirs of directories
+        ; explode-string(|'/')
+        ; take(|<subt> (<length>, ndirs))
+        ; implode-string(|'/') => basedir
+        ; rules(SourceDir := basedir)
+        
+  get-soure-base-dir = ProjectDir
+          
+rules  // string utils
+  
+  explode-string'(|sep) =
+      split-at(?sep); \(a,b) -> [ a | <explode-string'(|sep)> b]\
+    <+ ![<id>]
+  
+  // Sep is a character
+  explode-string(|sep) = 
+        explode-string 
+      ; explode-string'(|sep)
+      ; map(implode-string)
+
+  // Sep can be a character or a string
+  implode-string(|sep) =
+      where(sep' := <is-string <+ ![<id>]; implode-string> sep)
+    ; separate-by(|sep'); concat-strings
+      
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Wed Apr 13 17:51:27 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 13 Apr 2011 15:51:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22510 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test: . common
Message-ID: <20110413155127.93587108C046@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 13 15:51:27 2011
New Revision: 22510
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22510&sc=1

Log:
added test spx file with package/module constructs

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/common/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/example.spx
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/spoofax-test.spx

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/example.spx
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/example.spx	Wed Apr 13 15:50:31 2011	(r22509)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/example.spx	Wed Apr 13 15:51:27 2011	(r22510)
@@ -1,44 +1,49 @@
-module example
-
-
-exports
-
-context-free start-symbols
-  Start
-
-context-free syntax
-  MethodDecl -> Start{cons("Test"), left-assoc}
- 	"public" Type ID Params -> MethodDecl{cons("Method")}
- 	{Param? "," }+ -> Params{cons("Args")}
- 	{Param+*  "," }+ -> Params{cons("Args1")}
- 	Type ID -> Param{cons ("Parameter")}
- 	
- 	 MethodDecl -> Start{"Test", left-assoc}  MethodDecl1 -> Start{"Test", left-assoc}
- 	
- 	"public" ID "(" {(Param ID Type) ","}+ ")""{" "}" -> MethodDecl{non-assoc, cons("Method")}
- 	%%{"," {Param ","}+ }+  ID  Param -> MethodDecl{cons("Method")}
-  	%%{"," Param? }+ -> MethodDecl{cons("Method")}
- 	%%Param* -> MethodDecl{cons("Method")}
- 	(ID-prime (Type Param)+ Param)* -> MethodDecl{cons("Method")}
- 	(Param Type)+ -> MethodDecl1{cons("Method1")}
- 	(Param?*)* -> MethodDecl1{cons("Method1")}
- 	
-	"int " ID  -> Param {cons ("Parameter")}  
-	%%"int " ID|Type|ID-prime  -> Param {cons ("Parameter")} 
-	 Type ID  -> ID-prime{cons("ID-Prime1")}
-	((Type Param)+ Type*)+ -> MethodDecl1{cons("Method2")}
-	Type+*+ -> MethodDecl1{cons("Method3")}    
+imports
+	test.A::dummy3
 	
-	
-
-lexical syntax
-	[a-zA-B0-9]+ ID -> Type  
-	[a-zA-B][a-zA-B0-9]+ -> ID      
-	[0-9]+            -> INT          
+package test
+{
+	module example
+	{
+		exports
+		context-free start-symbols
+  		Start 
+ 
+		context-free syntax
+		  MethodDecl -> Start{cons("Test"), left-assoc}
+		 	"public" Type ID Params -> MethodDecl{cons("Method")}
+		 	{Param? "," }+ -> Params{cons("Args")}
+		 	{Param+*  "," }+ -> Params{cons("Args1")}
+		 	Type ID -> Param{cons ("Parameter")}
+		 	
+		 	 
+		 	"public" ID "(" {(Param ID Type) ","}+ ")""{" "}" -> MethodDecl{non-assoc, cons("Method")}
+		 	%%{"," {Param ","}+ }+  ID  Param -> MethodDecl{cons("Method")}
+		  	%%{"," Param? }+ -> MethodDecl{cons("Method")}
+		 	%%Param* -> MethodDecl{cons("Method")}
+		 	(ID-prime (Type Param)+ Param)* -> MethodDecl{cons("Method")}
+		 	(Param Type)+ -> MethodDecl1{cons("Method1")}
+		 	(Param?*)* -> MethodDecl1{cons("Method1")}
+		 	
+			"int " ID  -> Param {cons ("Parameter")}  
+			%%"int " ID|Type|ID-prime  -> Param {cons ("Parameter")} 
+			 Type  Type ID  -> ID-prime{cons("ID-Prime1")}
+			((Type Param)+ Type*)+ -> MethodDecl1{cons("Method2")} 
+			Type+*+ -> MethodDecl1{cons("Method3")}    
+			
+			
+		
+			lexical syntax
+			[a-zA-B0-9]+ ID -> Type  
+			[a-zA-B][a-zA-B0-9]+ -> ID      
+			[0-9]+            -> INT            
+		     
+		rules  
+			  test-id1: A ->  ID-Prime1(2, 1,2)
+			  test-id2: A ->  Entity(1,2)     
+			  test-id3: A ->  Adil(1,2)      
+	    		
+	}
+}
      
-rules
-	  test-id1: A ->  ID-Prime1(1,2)
-	  test-id2: A ->  Entity(1,2)     
-	  test-id3: A ->  Adil(1,2)      
-	         
 	    
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/spoofax-test.spx
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/spoofax-test.spx	Wed Apr 13 15:50:31 2011	(r22509)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/spoofax-test.spx	Wed Apr 13 15:51:27 2011	(r22510)
@@ -1,28 +1,38 @@
-module spoofax-test
-imports
-	common/A
+imports 
+	test.A 
+package test
+{
+	module spoofax-test
+	{
 
-context-free start-symbols
-  Start 
-
-context-free syntax
-	A -> Start{cons("Program")} 
-	 	 
-
-builders
-
-builders
-  provider                  : include/spoofaxlang.ctree                                                                        
-  provider                  : include/spoofaxlang-java.jar                                                                     
-  observer                  : editor-analyze
-                                                                                     
-completions
-  completion template : Start = "module " <m> (blank)       
-  completion template : A = "entity " <e> " {}" (blank) 
-
-rules
-	  test-rule1: Program(_) ->  IntVar(1,2) 
-	  test-rule1: Program(_) ->  IntVar-prime(1)        
-	      
- 
-   
\ No newline at end of file
+		imports
+			common/A
+			test.A::dummy3
+		
+		context-free start-symbols 
+		  Start 
+		
+		
+		context-free syntax
+			A -> Start{cons("Program")} 
+			 	   
+		
+		builders
+		
+		builders
+		//  provider                  : include/spoofaxlang.ctree                                                                        
+		  provider                  : include/spoofaxlang-java.jar                                                                     
+		  observer                  : editor-analyze
+		                                                                                     
+		completions
+		  completion template : Start = "module " <m> (blank)       
+		  completion template : A = "entity " <e> " {}" (blank) 
+		
+		rules
+			  test-rule1: Program(_) ->  IntVar(1,2)    
+			  test-rule1: Program(_) ->  IntVar-prime(1)         		
+	  }
+}
+			      
+		 
+		    
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Wed Apr 13 17:54:16 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 13 Apr 2011 15:54:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22511 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor
Message-ID: <20110413155416.56E2D2B801B@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 13 15:54:16 2011
New Revision: 22511
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22511&sc=1

Log:
* updated builder for spoofax lang

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Wed Apr 13 15:51:27 2011	(r22510)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Wed Apr 13 15:54:16 2011	(r22511)
@@ -14,21 +14,32 @@
   provider                  : include/spoofaxlang.ctree                                                                        
   provider                  : include/spoofaxlang-java.jar                                                                     
                                                                                                                                
-  observer                  : editor-analyze                                                                                   
+	observer                  : editor-analyze                                                                                   
                                                                                                                                
   builder : "Show abstract syntax (for selection)" =
     generate-aterm (openeditor) (realtime) (meta) (source)  
     
-  builder : "Show SDF (for selection)" =
-    generate-sdf (openeditor) (realtime)           
+  //builder : "Show SDF (for selection)" =
+  //  generate-sdf (openeditor) (realtime)           
     
-  builder : "Show Stratego (for selection)" =
-    generate-str (openeditor) (realtime)      
+  //builder : "Show Stratego (for selection)" =
+  //  generate-str (openeditor) (realtime)      
     
-  builder : "Show Editor Descriptor (for selection)" =
-    generate-esv (openeditor) (realtime)              
+ // builder : "Show Editor Descriptor (for selection)" =
+  //  generate-esv (openeditor) (realtime)              
   
-  builder: "generate signatures" = 
-		generate-signatures-from-SDF (realtime) (openeditor) (meta)
-		                                                                                                                             
-  //on save: generate-java                                                                                                    
\ No newline at end of file
+  //builder: "generate signatures" = 
+	//	generate-signatures-from-SDF (realtime) (openeditor) (meta)
+	
+	builder : "build-all" =
+    build-all (openeditor) (realtime) (meta)
+   
+  //builder : "test desugar" =
+   // generate-desugar (openeditor) (realtime) (meta)
+  
+  builder : "compile-all" =  
+    compile-all(openeditor) (realtime) (meta)
+    	                                                                                                                             
+  builder : "test-resolve" =  
+    test-resolving-symbol (openeditor) (realtime) (meta)
+                                                                                                     
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Wed Apr 13 17:58:19 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 13 Apr 2011 15:58:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22512 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test
Message-ID: <20110413155819.2BB5F2B8018@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 13 15:58:18 2011
New Revision: 22512
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22512&sc=1

Log:
* added two test SPX

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/test.spx
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/testspxpackage.spx

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/test.spx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/test.spx	Wed Apr 13 15:58:18 2011	(r22512)
@@ -0,0 +1,72 @@
+package test.A 
+{	 
+	module dummy2{
+		imports test.b::m1
+		
+		context-free start-symbols
+  		Start  
+
+		context-free syntax 
+			Test4 A -> Start{cons("Program")}  
+			 
+		folding  
+			Test5.Program 
+				 
+		completions
+		  completion template : Start = "module " <m> (blank)        
+		  completion template : A = "entity " <e> " {}" (blank) 
+		
+		rules 
+			  test-rule1: "test" ->  <to-java><test-unzip-semantic-issuse-main(|[],[],[])>Program(1,2)       
+
+		}	
+
+	module dummy3{
+		imports test.b::m2 
+		
+		context-free syntax 
+			"int" Test5 ->  Test6{cons("Test6")} 
+		 
+		lexical syntax 
+			"void" -> A
+			
+		rules 
+			  test-rule1: "test" ->  <test-unzip-semantic-issuse-main(|[],[],[])>Program(1,2)    
+			
+	}
+	
+	
+	module module-langauge
+	{	
+		imports 
+			test.b
+		context-free start-symbols
+  		Start  
+
+		context-free syntax 
+			"module" ID Definition*       -> Start {cons("Module")}
+	    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+	    ID ":" Type                   -> Property {cons("Property")}
+	    ID                            -> Type {cons("Type")}
+
+		rules
+
+		  to-java:
+		    Module(x, d*) ->
+		    $[ package [x];
+		       
+		       [d'*]
+		     ]
+		    with
+		      d'* := <to-java> d*
+			  
+		  to-java:
+		    Entity(x, p*) ->
+		    $[ class [x] {
+		           [p'*]
+		       }
+		     ]
+		    with
+		      p'* := <to-java> p*
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/testspxpackage.spx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/testspxpackage.spx	Wed Apr 13 15:58:18 2011	(r22512)
@@ -0,0 +1,47 @@
+package test.b
+{
+	module m1
+	{
+		lexical syntax
+			"Test-Dummy2"-> 		Test4
+			
+		rules 
+			to-java:
+   			 x -> x
+   			 	
+	}  
+	 	 
+}  
+ 
+package test.b   
+{ 
+	 
+	module m2
+	{
+		imports test.c 
+		lexical syntax
+			"Test-Dummy3" -> 		Test5
+			
+		rules
+				test-unzip-semantic-issuse-main(|errors, warnings, infos) = id
+			     
+	}
+}
+
+package test.c 
+{
+	
+	module m2
+	{
+		lexical syntax
+			"Test-Dummy3" -> 		ID
+		
+	}
+}
+  
+
+
+
+
+
+   
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Wed Apr 13 18:13:56 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 13 Apr 2011 16:13:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22513 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	analyze/esv esv sdf str utils
Message-ID: <20110413161356.8907DCC04B@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 13 16:13:56 2011
New Revision: 22513
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22513&sc=1

Log:
* removing obsolete codes

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/signatures-mapper.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/desugar.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/sourcedir.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/esv/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/esv/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/esv/check.str	Wed Apr 13 15:58:18 2011	(r22512)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/esv/check.str	Wed Apr 13 16:13:56 2011	(r22513)
@@ -2,8 +2,7 @@
 
 imports
 	common
-	esv/main
-	esv/analysis
+	context/sdf/declare
 imports 
 	utils/debug
 	context/scope-tree

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Wed Apr 13 15:58:18 2011	(r22512)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Wed Apr 13 16:13:56 2011	(r22513)
@@ -8,33 +8,30 @@
   libstratego-sdf
   libstrc
 imports
-  common
-  analysis
-  config 
   include/SpoofaxLang
   lib/editor-common.generated
 imports
-  str/main
   codegen/str/to-stratego
 imports  
-  sdf/main
-  codegen/sdf/to-sdf
-  codegen/sdf/to-signature
-  sdf/analysis 
   analyze/sdf/check
+  context/sdf/declare
+  context/str/declare
 imports
-  codegen/esv/to-esv
-  esv/main
+  codegen/buildscripts
+	codegen/compile
+	codegen/esv/to-esv
+	codegen/sdf/to-sdf
+  codegen/sdf/to-signature
 imports 
 	normalize/main
 	normalize/signatures   
 imports 
-	codegen/buildscripts
-	codegen/compile
-	utils/cache
 	context/scope-tree
 	context/signature
 imports	 
+	utils/cache
+	common
+  config
 	unit-tests/-
 imports
 	 editor/main
@@ -51,10 +48,13 @@
     where
       target := <Declaration> x
  
+ /*  TODO : Fix Editor Resolve 
   editor-resolve:
     (unparameterized(x), position, ast, path, project-path) -> target
     where
       target := <parse-spoofaxlang-file> <resolve-import> x
+ */
+ 
 rules
 	
   generate-aterm:
@@ -69,32 +69,4 @@
       filename := <guarantee-extension(|"aterm.sugar")> path;
       result   := <nomalize-all>ast // we just return the input term
 
-rules	 
-
-	// Generate Signature for SDF Definition
-	generate-signatures-from-SDF:
-		(selected, position, ast, path, project-path) -> None()
-		where //verify that there is no errors exists. If exist, stop further signature generation process 
-			 <debug>$[Compiling SDF Definition.]
-			 ;<editor-analyze> (ast, path, project-path)
-			 ;if not(get-sdf-errors) <+ ([] := <flatten-list><get-sdf-errors>) then 
-					source-sdf		:= <remove-extension><base-filename> path
-					//;genpath		:= <remove-extension> path
-					//;<file-exists ; filemode ; isdir <+ mkdir> genpath
-					;genpath := <concat-strings>[ project-path , "/" , <dirname>path]
-					;<chdir>genpath
-					;<debug>$[Generating Signatures.]	   
-					;generated-signature-module-name := <concat-strings>[source-sdf, "-signature"] 
-					;generated-signatures :=  <get-signature-contents(|generated-signature-module-name)><get-all-signatures-as-string> 
-					;gen-file-name := $[[generated-signature-module-name].str]  
-					;<save-to-file>( gen-file-name, generated-signatures)
-					;<chdir>project-path  
-				else
-					errors := <get-sdf-errors>
-	        ;<debug(!"Compiling failed for following SDF definition: ")> <base-filename> path
-    			;<debug(!"Following errors has been encountered:")> <pp-aterm>errors
-				end	 
-				
-								 
-						
 	 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str	Wed Apr 13 15:58:18 2011	(r22512)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str	Wed Apr 13 16:13:56 2011	(r22513)
@@ -1,7 +1,7 @@
 module utils/sourcedir
 
 imports
-  analysis
+  lib/editor-common.generated
   libstrc
 
 rules
@@ -10,14 +10,14 @@
     where <explode-string> x
         ; filter(?'/')
         ; length => ndirs
-        ; CurrentDir
+        ; getcwd
           // remove the last ndirs of directories
         ; explode-string(|'/')
         ; take(|<subt> (<length>, ndirs))
         ; implode-string(|'/') => basedir
         ; rules(SourceDir := basedir)
         
-  get-soure-base-dir = ProjectDir
+  get-soure-base-dir = project-path
           
 rules  // string utils
   

From M.A.Akhter at student.tudelft.nl  Wed Apr 13 18:25:47 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 13 Apr 2011 16:25:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22514 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen/sdf sdf str
Message-ID: <20110413162547.365FC108C041@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 13 16:25:46 2011
New Revision: 22514
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22514&sc=1

Log:
* removed more obsolete stuff from spx

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Wed Apr 13 16:13:56 2011	(r22513)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Wed Apr 13 16:25:46 2011	(r22514)
@@ -6,10 +6,9 @@
 imports 
 	config
 	common
-	analysis
 imports 
 	context/sdf/declare-signature
-	sdf/analysis
+	context/sdf/declare
 	codegen/sdf/to-sdf
 	include/spoofaxlang
 imports

From M.A.Akhter at student.tudelft.nl  Wed Apr 13 18:30:11 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 13 Apr 2011 16:30:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22515 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor
Message-ID: <20110413163011.7CD297F8022@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 13 16:30:11 2011
New Revision: 22515
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22515&sc=1

Log:
updating builders - removed builder for resolving symbol

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Wed Apr 13 16:25:46 2011	(r22514)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Wed Apr 13 16:30:11 2011	(r22515)
@@ -39,7 +39,8 @@
   
   builder : "compile-all" =  
     compile-all(openeditor) (realtime) (meta)
-    	                                                                                                                             
+  
+  /*  	                                                                                                                             
   builder : "test-resolve" =  
     test-resolving-symbol (openeditor) (realtime) (meta)
-                                                                                                     
\ No newline at end of file
+  */                                                                                                   
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Wed Apr 13 18:49:18 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 13 Apr 2011 16:49:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22516 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen
Message-ID: <20110413164918.95DD0108C00B@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 13 16:49:18 2011
New Revision: 22516
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22516&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Wed Apr 13 16:30:11 2011	(r22515)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Wed Apr 13 16:49:18 2011	(r22516)
@@ -30,16 +30,6 @@
 			rules(ProjectPath := project-path)
 		with
 	  	<build-all>()
-	  /*	
-	  	 <to-sdf-all> (selected, path , project-path)
-	  	;<to-signature-all> (selected, path,project-path)
-		with	
-			<to-str-all>(selected, path , project-path)
-		with	
-			<to-esv-all>(selected, path , project-path)
-		where 
-			<emit-build-script>(project-path, <Autogenerated-Artifacts-Dir>, "", "")
-		*/
 		
 rules
 	//Intregation Test of the compile-all is working as expected 
@@ -54,26 +44,3 @@
 			<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
 		with 
 			compile-all
-	
-rules 
-	transform-import-declaration(s): 
-		ImportPackage(qname at QName(package-qname-parts*)) -> result 
-		where
-			package-name-path    := <qname-to-path>qname
-			;<s>package-name-path => result  
-	
-	transform-import-declaration(s): 
-		ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
-		where
-			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
-			;module-name-path    := <qname-to-path>module-qname
-			;<s>module-name-path => result  
-	
-	transform-import-declaration(s): ImportPackage(Name(package-name)) -> result
-	where 
-		<s>package-name => result 
-		
-	transform-import-declaration(s): ImportLegacyArtifact(Name(modulename)) -> result
-	where 
-		<s>modulename => result 
-	
\ No newline at end of file

From r.t.lindeman at student.tudelft.nl  Wed Apr 13 20:57:47 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Wed, 13 Apr 2011 18:57:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22517 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.stratego.runtime
	org.strategoxt.imp.debug.stratego.runtime/META-INF
	org.strategoxt.imp.debug.stratego.runtime/editor...
Message-ID: <20110413185747.96705108C039@mx3.tudelft.nl>

Author: RickyLindeman
Date: Wed Apr 13 18:57:47 2011
New Revision: 22517
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22517&sc=1

Log:
Added ant property providers that point to the stratego-debug-runtime and stratego-transformer jars

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrategoDebugRuntimeJarsAntPropertyProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/StrategoTransformerJarsAntPropertyProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/plugin.xml
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.properties

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Wed Apr 13 16:49:18 2011	(r22516)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Wed Apr 13 18:57:47 2011	(r22517)
@@ -15,7 +15,8 @@
  org.eclipse.ui.editors,
  org.eclipse.ui.workbench.texteditor,
  org.spoofax.jsglr,
- org.strategoxt.strj
+ org.strategoxt.strj,
+ org.eclipse.ant.core
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Export-Package: org.strategoxt.imp.debug.stratego.runtime;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties	Wed Apr 13 16:49:18 2011	(r22516)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties	Wed Apr 13 18:57:47 2011	(r22517)
@@ -4,4 +4,5 @@
                include/,\
                bin/,\
                lib/,\
-               .
+               .,\
+               plugin.xml

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrategoDebugRuntimeJarsAntPropertyProvider.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrategoDebugRuntimeJarsAntPropertyProvider.java	Wed Apr 13 18:57:47 2011	(r22517)
@@ -0,0 +1,67 @@
+package org.strategoxt.imp.debug.stratego.runtime;
+
+import java.net.URL;
+
+import org.eclipse.ant.core.IAntPropertyValueProvider;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.Path;
+
+/**
+ * Creates an ANT property that will point to the stratego-debug-runtime.jar and stratego-debug-runtime-java.jar.
+ * 
+ * @author rlindeman
+ *
+ */
+public class StrategoDebugRuntimeJarsAntPropertyProvider implements IAntPropertyValueProvider {
+
+	private static String INCLUDE = "include";
+	private static String STR_LIB = "str-lib";
+	
+	public static String RUNTIME_JAR = "stratego-debug-runtime.jar";
+	public static String RUNTIME_JAVA_JAR = "stratego-debug-runtime-java.jar";
+	
+	private static String ANT_RUNTIME_JAR = "eclipse.spoofaximp.stratego-debug-runtime-jar";
+	private static String ANT_RUNTIME_JAVA_JAR = "eclipse.spoofaximp.stratego-debug-runtime-java-jar";
+	private static String ANT_STRATEGO_DEBUG_LIB_FOLDER = "eclipse.spoofaximp.strategodebuglib-folder";
+	
+	public String getAntPropertyValue(String antPropertyName) {
+		if (ANT_RUNTIME_JAR.equals(antPropertyName))
+		{
+			return getRuntimeJarPath();
+		} else if (ANT_RUNTIME_JAVA_JAR.equals(antPropertyName))
+		{
+			return getRuntimeJavaJarPath();
+		} else if (ANT_STRATEGO_DEBUG_LIB_FOLDER.equals(antPropertyName)) 
+		{
+			return getStrategoDebugLibFolderPath();
+		}
+		return null;
+	}
+	
+	private String getStrategoDebugLibFolderPath() {
+		// loc points to the basedit of the plugin
+		URL loc = StrategoDebugRuntimeJarsAntPropertyProvider.class.getProtectionDomain().getCodeSource().getLocation();
+		IPath p = new Path(loc.getPath());
+		p = p.append(STR_LIB); 
+		return p.toOSString();
+	}
+
+	private String getRuntimeJarPath()
+	{
+		// loc points to the basedit of the plugin
+		URL loc = StrategoDebugRuntimeJarsAntPropertyProvider.class.getProtectionDomain().getCodeSource().getLocation();
+		IPath p = new Path(loc.getPath());
+		p = p.append(INCLUDE).append(RUNTIME_JAR); 
+		return p.toOSString();
+	}
+	
+	private String getRuntimeJavaJarPath()
+	{
+		// loc points to the basedit of the plugin
+		URL loc = StrategoDebugRuntimeJarsAntPropertyProvider.class.getProtectionDomain().getCodeSource().getLocation();
+		IPath p = new Path(loc.getPath());
+		p = p.append(INCLUDE).append(RUNTIME_JAVA_JAR); 
+		return p.toOSString();
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/plugin.xml	Wed Apr 13 18:57:47 2011	(r22517)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?eclipse version="3.4"?>
+<plugin>
+   <extension
+         point="org.eclipse.ant.core.antProperties">
+      <antProperty
+            class="org.strategoxt.imp.debug.stratego.runtime.StrategoDebugRuntimeJarsAntPropertyProvider"
+            name="eclipse.spoofaximp.stratego-debug-runtime-jar">
+      </antProperty>
+      <antProperty
+            class="org.strategoxt.imp.debug.stratego.runtime.StrategoDebugRuntimeJarsAntPropertyProvider"
+            name="eclipse.spoofaximp.stratego-debug-runtime-java-jar">
+      </antProperty>
+      <antProperty
+            class="org.strategoxt.imp.debug.stratego.runtime.StrategoDebugRuntimeJarsAntPropertyProvider"
+            name="eclipse.spoofaximp.strategodebuglib-folder">
+      </antProperty>
+   </extension>
+
+</plugin>

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Wed Apr 13 16:49:18 2011	(r22516)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Wed Apr 13 18:57:47 2011	(r22517)
@@ -15,7 +15,8 @@
  org.eclipse.ui.editors,
  org.eclipse.ui.workbench.texteditor,
  org.spoofax.jsglr,
- org.strategoxt.strj
+ org.strategoxt.strj,
+ org.eclipse.ant.core
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Export-Package: org.strategoxt.imp.debug.stratego.transformer;uses:="org.eclipse.imp.preferences,org.eclipse.imp.runtime,org.osgi.framework",

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.properties
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.properties	Wed Apr 13 16:49:18 2011	(r22516)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.properties	Wed Apr 13 18:57:47 2011	(r22517)
@@ -4,4 +4,5 @@
                include/,\
                bin/,\
                lib/,\
-               .
+               .,\
+               plugin.xml

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/StrategoTransformerJarsAntPropertyProvider.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/StrategoTransformerJarsAntPropertyProvider.java	Wed Apr 13 18:57:47 2011	(r22517)
@@ -0,0 +1,54 @@
+package org.strategoxt.imp.debug.stratego.transformer;
+
+import java.net.URL;
+
+import org.eclipse.ant.core.IAntPropertyValueProvider;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.Path;
+
+/**
+ * Creates an ANT property that will point to the stratego-transformer.jar and stratego-transformer.jar.
+ * 
+ * @author rlindeman
+ *
+ */
+public class StrategoTransformerJarsAntPropertyProvider implements IAntPropertyValueProvider {
+
+	private static String INCLUDE = "include";
+	
+	public static String TRANSFORMER_JAR = "stratego-transformer.jar";
+	public static String TRANSFORMER_JAVA_JAR = "stratego-transformer-java.jar";
+	
+	private static String ANT_TRANSFORMER_JAR = "eclipse.spoofaximp.stratego-transformer-jar";
+	private static String ANT_TRANSFORMER_JAVA_JAR = "eclipse.spoofaximp.stratego-transformer-java-jar";
+	
+	public String getAntPropertyValue(String antPropertyName) {
+		if (ANT_TRANSFORMER_JAR.equals(antPropertyName))
+		{
+			return getTransformerJarPath();
+		} else if (ANT_TRANSFORMER_JAVA_JAR.equals(antPropertyName))
+		{
+			return getTransformerJavaJarPath();
+		}
+		return null;
+	}
+	
+	private String getTransformerJarPath()
+	{
+		// loc points to the basedit of the plugin
+		URL loc = StrategoTransformerJarsAntPropertyProvider.class.getProtectionDomain().getCodeSource().getLocation();
+		IPath p = new Path(loc.getPath());
+		p = p.append(INCLUDE).append(TRANSFORMER_JAR); 
+		return p.toOSString();
+	}
+	
+	private String getTransformerJavaJarPath()
+	{
+		// loc points to the basedit of the plugin
+		URL loc = StrategoTransformerJarsAntPropertyProvider.class.getProtectionDomain().getCodeSource().getLocation();
+		IPath p = new Path(loc.getPath());
+		p = p.append(INCLUDE).append(TRANSFORMER_JAVA_JAR); 
+		return p.toOSString();
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/plugin.xml	Wed Apr 13 18:57:47 2011	(r22517)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?eclipse version="3.4"?>
+<plugin>
+   <extension
+         point="org.eclipse.ant.core.antProperties">
+      <antProperty
+            class="org.strategoxt.imp.debug.stratego.transformer.StrategoTransformerJarsAntPropertyProvider"
+            name="eclipse.spoofaximp.stratego-transformer-jar">
+      </antProperty>
+      <antProperty
+            class="org.strategoxt.imp.debug.stratego.transformer.StrategoTransformerJarsAntPropertyProvider"
+            name="eclipse.spoofaximp.stratego-transformer-java-jar">
+      </antProperty>
+   </extension>
+
+</plugin>

From r.t.lindeman at student.tudelft.nl  Wed Apr 13 22:06:51 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Wed, 13 Apr 2011 20:06:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22518 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching
	org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug...
Message-ID: <20110413200651.B92067F8004@mx1.tudelft.nl>

Author: RickyLindeman
Date: Wed Apr 13 20:06:51 2011
New Revision: 22518
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22518&sc=1

Log:
Cleaned up the code a little and added some comments

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/InterpreterLoadedHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Wed Apr 13 18:57:47 2011	(r22517)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Wed Apr 13 20:06:51 2011	(r22518)
@@ -6,6 +6,8 @@
 import java.util.List;
 
 import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.debug.core.DebugPlugin;
 import org.eclipse.debug.core.ILaunch;
 import org.eclipse.debug.core.ILaunchConfiguration;
 import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
@@ -46,11 +48,21 @@
 	
 	private String projectpath = null;
 	
+	/**
+	 * Keep track of the number of simultaneous launches.
+	 */
+	public static int counter = 0;
+	
+	
+	/**
+	 * Creates a new interpreter
+	 * @param termFactory
+	 */
 	public DebuggableHybridInterpreter(ITermFactory termFactory) {
 		super(termFactory);
+		initLaunchListener();
 	}
 
-	public static int counter = 0;
 	
 	/**
 	 * Creates an interpreter that bases its definition scope on an existing instance.
@@ -63,9 +75,17 @@
 	 * @param reuseRegistries	The names of operator registries that should not be re-created,
 	 *                       	but can be reused from the old instance.
 	 */
-	public DebuggableHybridInterpreter(HybridInterpreter interpreter, String... reuseRegistries) {
-		
+	public DebuggableHybridInterpreter(HybridInterpreter interpreter, String... reuseRegistries) 
+	{
 		super(interpreter, reuseRegistries);
+		initLaunchListener();
+	}
+	
+	private void initLaunchListener()
+	{
+		// connect to the eclipse launch manager and listen to launches.
+		// so we can keep track of the number of simultaneous HybridInterpreter launches.
+		DebugPlugin.getDefault().getLaunchManager().addLaunchListener(this);
 	}
 	
 	private List<URL> loadJars = new ArrayList<URL>();
@@ -83,6 +103,10 @@
 		super.loadJars(parentClassLoader, jars);
 	}
 	
+	/**
+	 * Returns a list of strings with paths to jars that are dynamically loaded by the HybridInterpreter.
+	 * @return
+	 */
 	private List<String> getLoadJarsAsList()
 	{
 		List<String> list = new ArrayList<String>();
@@ -124,6 +148,10 @@
 		//return false;
 	}
 	
+	/**
+	 * Tries to launch a debug HybridInterpreter session that will invoke the given strategy name.
+	 * @param name
+	 */
 	private void tryLaunch(String name)
 	{
 		// launch a JVM
@@ -172,7 +200,10 @@
 			// Use the Descriptor
 			// We also need EditorIOAgent
 			//config.launch(ILaunchManager.DEBUG_MODE, null);
-			config.launch(ILaunchManager.DEBUG_MODE, null, false, true);
+			IProgressMonitor monitor = null;
+			boolean build = false;
+			boolean register = true;
+			config.launch(ILaunchManager.DEBUG_MODE, monitor, build, register);
 			//boolean build,
             //boolean register
 		} catch (CoreException e) {
@@ -182,6 +213,10 @@
 	}
 
 
+	/**
+	 * Points to the spoofax project this HybridInterpreter is loaded for.
+	 * @return
+	 */
 	public String getProjectpath() {
 		return projectpath;
 	}
@@ -215,4 +250,9 @@
 		System.out.println("Launch changed");
 	}
 
+	@Override
+	public void uninit() {
+		// called by StrategoObserver.uninitialize()
+		super.uninit();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java	Wed Apr 13 18:57:47 2011	(r22517)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java	Wed Apr 13 20:06:51 2011	(r22518)
@@ -67,4 +67,10 @@
 	 * The current term will be replaced by this value, it will be parsed as an IStrategoTerm.
 	 */
 	public static final String ATTR_CURRENT_TERM = ID_STRATEGO_DEBUG_MODEL + ".ATTR_CURRENT_TERM";
+	
+	/**
+	 * The id of the HybridIntepreter launch type.
+	 */
+	public static final String HYBRID_INTERPRETER_LAUNCH_TYPE = ID_STRATEGO_DEBUG_MODEL + ".launchConfigurationType.hybridinterpreter";
+
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Wed Apr 13 18:57:47 2011	(r22517)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Wed Apr 13 20:06:51 2011	(r22518)
@@ -320,9 +320,8 @@
 		EventRequestManager mgr = vm.eventRequestManager();
 
 		String name = event.referenceType().name();
-		//System.out.println(name);
 		// if the name matches on of the predefined strategies implemented in java (e.g.: s-enter, s-step) we should add a breakpoint
-		System.out.println("Load " + name);
+		//System.out.println("Load " + name);
 		if (java_s_enter_0_4.getFullClassName().equals(name))
 		{
             if (event.referenceType() instanceof ClassType) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Wed Apr 13 18:57:47 2011	(r22517)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Wed Apr 13 20:06:51 2011	(r22518)
@@ -133,9 +133,6 @@
 		long suspendCheckEnd = System.nanoTime();
 		if (suspendThread)
 		{
-			System.out.println("suspend");
-			// FIXME: get current term
-			System.out.println(this.strategoState.currentFrame().getCurrentTerm());
 			String[] dynamicRuleNames = getDynamicRuleNames(h);
 			if (dynamicRuleNames != null) {
 				this.strategoState.currentFrame().setDynamicRuleNames(dynamicRuleNames);
@@ -204,7 +201,7 @@
 		}
 		List<Method> methodsC = fr.thisObject().referenceType().methodsByName(DebugCallStrategy.SETCURRENTTERM);
 		Method mCurrent = methodsC.get(0);
-		Value outputCurrent = null; // will be a string representation of an IStrategoTerm, IStrategoList, containing the names of the active dynamic rules
+		Value outputCurrent = null;
 		try {
 			Value arg = thread.virtualMachine().mirrorOf(term);
 			List<Value> argumentsC = new ArrayList<Value>();
@@ -224,7 +221,10 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
-		System.out.println(outputCurrent);
+		if (outputCurrent == null)
+		{
+			// failed
+		}
 		IStrategoTerm t = this.extractor.getGiven();
 		//System.out.println("BEFORE: " + this.strategoState.currentFrame().getCurrentTerm());
 		this.strategoState.currentFrame().setCurrentTerm(t);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/InterpreterLoadedHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/InterpreterLoadedHandler.java	Wed Apr 13 18:57:47 2011	(r22517)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/InterpreterLoadedHandler.java	Wed Apr 13 20:06:51 2011	(r22518)
@@ -47,16 +47,15 @@
 	
 	@Override
 	public void processDebugEvent(StrategoState strategoState) {
-		//super.processDebugEvent(strategoState);
-		// TODO: we may want to change the current term before calling the strategy
+		// we may want to change the current term before the intpreter is started
 		if (this.getEventSpecManager().getInputTerm() != null)
 		{
 			// change the input term
 			ObjectReference ref = this.getStackFrame().thisObject(); // get the stackframe
-			// check if it is an HybridInterpreter
+			// TODO: check if it is an HybridInterpreter
 			if (ref != null)
 			{
-				// HybridInterpreter.public boolean invoke(String name)
+				// current method: HybridInterpreter.public boolean invoke(String name)
 				@SuppressWarnings("unchecked")
 				List<Method> methods = ref.referenceType().methodsByName(HybridInterpreterDebugRuntime.SET_CURRENT_TERM);
 				Method method = null;
@@ -87,9 +86,12 @@
 					// something took too long....
 					e.printStackTrace();
 				}
-				System.out.println("SET_CURRENT_TERM succes? " + output);
+				if (output == null)
+				{
+					System.err.println("Changing current term failed...");
+				}
 			}
-			// call setCurrent() method
+
 		}
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Wed Apr 13 18:57:47 2011	(r22517)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Wed Apr 13 20:06:51 2011	(r22518)
@@ -266,6 +266,10 @@
 		this.inputTerm = term;
 	}
 	
+	/**
+	 * If the value is set, the current term of the HybridInterpreter should be changed to this term before the "invoke" is executed.
+	 * @return
+	 */
 	public String getInputTerm() {
 		return inputTerm;
 	}

From L.C.L.Kats at tudelft.nl  Thu Apr 14 10:05:49 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 14 Apr 2011 08:05:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22519 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110414080549.849802B8002@mx2.tudelft.nl>

Author: LennartKats
Date: Thu Apr 14 08:05:49 2011
New Revision: 22519
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22519&sc=1

Log:
fixed error popup not showing when builder fails

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Wed Apr 13 20:06:51 2011	(r22518)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Thu Apr 14 08:05:49 2011	(r22519)
@@ -333,14 +333,18 @@
 		}
 	}
 	
-	private void openError(EditorState editor, String message) {
-		try {
-			Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
-			ErrorDialog.openError(editor.getEditor().getSite().getShell(),
-					caption, null, status);
-		} catch (RuntimeException e) {
-			Environment.logException("Problem reporting error: " + message, e);
-		}
+	private void openError(final EditorState editor, final String message) {
+		Job job = new UIJob("Reporting error") {
+			@Override
+			public IStatus runInUIThread(IProgressMonitor monitor) {
+				Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
+				ErrorDialog.openError(editor.getEditor().getSite().getShell(),
+						caption, null, status);
+				return Status.OK_STATUS;
+			}
+		};
+		job.setSystem(true);
+		job.schedule();
 	}
 
 	private void setFileContents(final EditorState editor, IFile file, final String contents) throws CoreException {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Wed Apr 13 20:06:51 2011	(r22518)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Thu Apr 14 08:05:49 2011	(r22519)
@@ -53,7 +53,10 @@
 /**
  * @author Maartje
  */
-public class StrategoRefactoring implements IBuilder { //TODO extract "AbstractStrategoBuilder"
+public class StrategoRefactoring implements IBuilder {
+	
+	// TODO extract "AbstractStrategoBuilder"
+	//      this is code duplication hell :(
 	
 	private final String ppTable;
 	
@@ -343,14 +346,18 @@
 		}
 	}
 	
-	private void openError(EditorState editor, String message) {
-		try {
-			Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
-			ErrorDialog.openError(editor.getEditor().getSite().getShell(),
-					caption, null, status);
-		} catch (RuntimeException e) {
-			Environment.logException("Problem reporting error: " + message);
-		}
+	private void openError(final EditorState editor, final String message) {
+		Job job = new UIJob("Reporting error") {
+			@Override
+			public IStatus runInUIThread(IProgressMonitor monitor) {
+				Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
+				ErrorDialog.openError(editor.getEditor().getSite().getShell(),
+						caption, null, status);
+				return Status.OK_STATUS;
+			}
+		};
+		job.setSystem(true);
+		job.schedule();
 	}
 	
 	@Override

From M.A.Akhter at student.tudelft.nl  Thu Apr 14 10:36:54 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 14 Apr 2011 08:36:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22520 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen codegen/esv codegen/sdf codegen/str context/sdf context/str
Message-ID: <20110414083654.D77BA108C037@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 14 08:36:54 2011
New Revision: 22520
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22520&sc=1

Log:
* removed import to analysis from str/declare
* checked other imports from *.str files and organized it a bit

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Thu Apr 14 08:05:49 2011	(r22519)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Thu Apr 14 08:36:54 2011	(r22520)
@@ -1,15 +1,7 @@
 module codegen/buildscripts
 
 imports 
-  libstratego-lib
-  libstratego-sdf
-  libstratego-sglr
-  libstratego-gpp
-  libstratego-aterm
-  libstrc
   lib/editor-common.generated
-  lib/sdf-desugar
-  lib/sdf-parenthesize
 imports 
 	include/SpoofaxLang
 imports 
@@ -20,7 +12,7 @@
 	codegen/main
 
 rules
-	emit-build-script: package-qnames* -> package-qnames* 
+	emit-build-script: package-qnames* -> package-qnames*  
 		with 
  			 project-path             := <ProjectPath>
  		with 
@@ -51,7 +43,7 @@
     <property name="syntax" location="syntax"/>
     <property name="include" location="include"/>
     <property name="lib" location="lib"/>
-    <property name="build" location="bin"/>
+    <property name="build" location="bin"/> 
     <property name="dist" location="bin/dist"/>
     
 		<!-- Environment configuration for command-line builds -->

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Apr 14 08:05:49 2011	(r22519)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Apr 14 08:36:54 2011	(r22520)
@@ -16,7 +16,7 @@
 	config
 imports 
 	lib/editor-common.generated 
-	normalize/signatures
+	normalize/signatures 
 	include/SpoofaxLang
 	codegen/generate-all
 	codegen/buildscripts

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Thu Apr 14 08:05:49 2011	(r22519)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Thu Apr 14 08:36:54 2011	(r22520)
@@ -1,15 +1,13 @@
 module codegen/esv/to-esv
 imports 
 	libstratego-lib
-imports 
 	libstrc
 imports
   common
   config
-  spoofaxlang
   utils/debug
+  utils/path
 imports 
-	utils/path
 	normalize/signatures 
 	include/SpoofaxLang
 imports 
@@ -18,8 +16,9 @@
 	context/signature
 imports
 	lib/editor-common.generated
+
 	
-signature constructors
+signature constructors 
   Module : ID * Imports * List(Section) -> Module
 	
 rules 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Thu Apr 14 08:05:49 2011	(r22519)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Thu Apr 14 08:36:54 2011	(r22520)
@@ -35,7 +35,7 @@
  			package-typed-qname := <GetEnclosingPackageName> 
 			;module-typed-qname  := <GetEnclosingModuleName> 
 			<+ 
-			<debug-compiler>$[ CodeGeneration | SDF | Failed to create current scope.]
+			<debug-compiler>$[ CodeGeneration | SDF | Failed to create current scope.] 
 			;fail
 		where
 			 !module-typed-qname  => Module(module-untyped-qname)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Thu Apr 14 08:05:49 2011	(r22519)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Thu Apr 14 08:36:54 2011	(r22520)
@@ -6,19 +6,21 @@
 	lib/editor-common.generated
 imports
   include/SpoofaxLang
-
 imports 
 	common
 	config
-	utils/debug
+	utils/debug	
+	utils/path
+	utils/annotations	
+imports 	
 	codegen/sdf/to-signature
 	codegen/compile
-	utils/path
 	codegen/main
 	context/signature
-	normalize/signatures
-	utils/annotations
 	context/scope-tree
+imports	
+	normalize/signatures
+
 	
 	
 rules

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Thu Apr 14 08:05:49 2011	(r22519)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Thu Apr 14 08:36:54 2011	(r22520)
@@ -1,13 +1,13 @@
 module context/sdf/declare-signature
 
 imports 
-		common 
-		include/SpoofaxLang
-		utils/debug		
-		
+	include/SpoofaxLang
+imports		
+	common 
+	utils/debug		
 imports 
-		context/scope-tree
-		context/sdf/declare
+	context/scope-tree
+	context/sdf/declare
 		
 
 // TODO : refactor common functionily in seperate rules/strategy

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Thu Apr 14 08:05:49 2011	(r22519)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Thu Apr 14 08:36:54 2011	(r22520)
@@ -7,19 +7,18 @@
 	libstratego-aterm
 imports
 	lib/editor-common.generated
+	include/SpoofaxLang
 imports  	
- 	utils/sourcedir
- 	utils/debug
  	normalize/stratego
 imports	
-	analysis
-	common
+	utils/sourcedir
+ 	utils/debug
+ 	common
 	config 
 imports 
-	include/SpoofaxLang
 	context/str/signature-generator
-	context/scope-tree
-
+	context/scope-tree   
+ 
 
 rules 
 	
@@ -445,20 +444,17 @@
      x -> full-path
      where
         // FIXME: fetch true import paths from someplace
-        full-path := <file-exists> $[[<SourceDir>]/[x]]
-     <+ full-path := <file-exists> $[[<ProjectDir>]/[x]]
-     <+ full-path := <file-exists> $[[<ProjectDir>]/trans/[x]]
-     <+ full-path := <file-exists> $[[<ProjectDir>]/lib/[x]]
-     <+ full-path := <file-exists> $[[<ProjectDir>]/src/[x]]
-     <+ full-path := <file-exists> $[[<ProjectDir>]/syntax/[x]]
-     <+ full-path := <file-exists> $[[<ProjectDir>]/syn/[x]]
-     <+ full-path := <file-exists> $[[<ProjectDir>]/src/syntax/[x]]
+   			full-path := <file-exists> $[[<project-path>]/[x]]
+     <+ full-path := <file-exists> $[[<project-path>]/trans/[x]]
+     <+ full-path := <file-exists> $[[<project-path>]/lib/[x]]
+     <+ full-path := <file-exists> $[[<project-path>]/src/[x]]
+     <+ full-path := <file-exists> $[[<project-path>]/syntax/[x]]
+     <+ full-path := <file-exists> $[[<project-path>]/syn/[x]]
+     <+ full-path := <file-exists> $[[<project-path>]/src/syntax/[x]]
  
   fetch-library-ast:
     x -> <pack-stratego-parse-stratego> (IncludeFromPath(x), [])
 
- 
-
 	
   read-stratego-signatures:
     str -> <to-signatures> file
@@ -471,10 +467,8 @@
       else
         file := <parse-stratego-file> str
       end
-  
- 
-	 
-	 to-signatures =
+	
+	to-signatures =
     basic-stratego-desugar-top;
     topdown(try(remove-stratego-bodies))
 

From M.A.Akhter at student.tudelft.nl  Thu Apr 14 10:40:43 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 14 Apr 2011 08:40:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22521 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf
Message-ID: <20110414084043.802C72B8028@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 14 08:40:43 2011
New Revision: 22521
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22521&sc=1

Log:
* reorganize imports for to-sdf

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Thu Apr 14 08:36:54 2011	(r22520)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Thu Apr 14 08:40:43 2011	(r22521)
@@ -11,18 +11,18 @@
   lib/sdf-desugar
   lib/sdf-parenthesize  
 imports 
-	context/sdf/declare  
+	context/scope-tree
+	context/signature
+	context/sdf/declare
+imports
+	normalize/signatures
 imports 
 	common
-	spoofaxlang
 	config
 	utils/annotations
-	context/scope-tree
-	context/signature
-	normalize/signatures
 	utils/path
 	utils/debug
-	codegen/generate-all 
+imports 	 
 	codegen/main
 	
       

From M.A.Akhter at student.tudelft.nl  Thu Apr 14 10:46:08 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 14 Apr 2011 08:46:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22522 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen
Message-ID: <20110414084608.7A878CC058@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 14 08:46:08 2011
New Revision: 22522
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22522&sc=1

Log:
*reorganize imports.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Apr 14 08:40:43 2011	(r22521)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Apr 14 08:46:08 2011	(r22522)
@@ -2,6 +2,7 @@
 
 imports 
 	normalize/main
+	normalize/signatures 
 imports 
 	utils/cache 
 	utils/debug
@@ -16,11 +17,12 @@
 	config
 imports 
 	lib/editor-common.generated 
-	normalize/signatures 
 	include/SpoofaxLang
+imports	
 	codegen/generate-all
 	codegen/buildscripts
-	context/str/declare
+imports 	
+	context/str/declare  //TODO : refactor : move it to declare all when handling all types of legacy artifacts. Currently only considering STR Libs 
 
 rules			// Starting a new compilation session   
 	

From M.A.Akhter at student.tudelft.nl  Thu Apr 14 11:15:30 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 14 Apr 2011 09:15:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22523 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor
Message-ID: <20110414091530.B81BACC0D2@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 14 09:15:29 2011
New Revision: 22523
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22523&sc=1

Log:
* removed builders that are related to testing

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Thu Apr 14 08:46:08 2011	(r22522)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Thu Apr 14 09:15:29 2011	(r22523)
@@ -35,11 +35,11 @@
     build-all (openeditor) (realtime) (meta)
    
   //builder : "test desugar" =
-   // generate-desugar (openeditor) (realtime) (meta)
-  
+  // generate-desugar (openeditor) (realtime) (meta)
+  /*
   builder : "compile-all" =  
     compile-all(openeditor) (realtime) (meta)
-  
+  */
   /*  	                                                                                                                             
   builder : "test-resolve" =  
     test-resolving-symbol (openeditor) (realtime) (meta)

From M.A.Akhter at student.tudelft.nl  Thu Apr 14 11:28:12 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 14 Apr 2011 09:28:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22524 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: editor
	trans/codegen
Message-ID: <20110414092812.D1F8E2B8046@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 14 09:28:12 2011
New Revision: 22524
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22524&sc=1

Log:
added strategy to just to compile

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Thu Apr 14 09:15:29 2011	(r22523)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Thu Apr 14 09:28:12 2011	(r22524)
@@ -31,15 +31,15 @@
   //builder: "generate signatures" = 
 	//	generate-signatures-from-SDF (realtime) (openeditor) (meta)
 	
-	builder : "build-all" =
+	builder : "Build-All" =
     build-all (openeditor) (realtime) (meta)
    
   //builder : "test desugar" =
   // generate-desugar (openeditor) (realtime) (meta)
-  /*
-  builder : "compile-all" =  
-    compile-all(openeditor) (realtime) (meta)
-  */
+  
+  builder : "Compile" =  
+    compile-spx(openeditor) (realtime) (meta)
+  
   /*  	                                                                                                                             
   builder : "test-resolve" =  
     test-resolving-symbol (openeditor) (realtime) (meta)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Thu Apr 14 09:15:29 2011	(r22523)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Thu Apr 14 09:28:12 2011	(r22524)
@@ -33,7 +33,7 @@
 		
 rules
 	//Intregation Test of the compile-all is working as expected 
-	compile-all:
+	compile-spx:
 		(selected, position, ast, path, project-path) -> None()
 		where
 			debug(!"=============starting compile-all ===================")
@@ -43,4 +43,5 @@
 		where
 			<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
 		with 
-			compile-all
+			debug(!"=============starting compile-all =1==================");
+			<compile-all>()

From L.C.L.Kats at tudelft.nl  Thu Apr 14 13:36:04 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 14 Apr 2011 11:36:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22525 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/syntax org.strategoxt.imp.testing/trans
Message-ID: <20110414113604.AF2F87F800C@mx1.tudelft.nl>

Author: LennartKats
Date: Thu Apr 14 11:36:04 2011
New Revision: 22525
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22525&sc=1

Log:
Updated testing language syntax, minor fixes

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Thu Apr 14 11:36:04 2011	(r22525)
@@ -0,0 +1,12 @@
+module test5 
+
+language Spoofax-Testing
+
+test Testing TestingTesting testing
+  [[[ module x
+     language TestingTesting
+     test Testing TestingTesting [[
+       module x
+     ]]
+  ]]]
+  
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Apr 14 09:28:12 2011	(r22524)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Apr 14 11:36:04 2011	(r22525)
@@ -55,6 +55,19 @@
     "[" {Strategy ","}* "]"              -> TestStratego {reject}
     "[" {Strategy ","}* "|" Strategy "]" -> TestStratego {reject}
     Strategy "=>" Term                   -> TestStratego {reject}
+    "build"                              -> TestStratego {reject}
+    "resolve"                            -> TestStratego {reject}
+    "refactor"                           -> TestStratego {reject}
+    "complete"                           -> TestStratego {reject}
+    "parse"                              -> TestStratego {reject}
+    "run"                                -> TestStratego {reject}
+    
+    "build"                              -> Term {reject}
+    "resolve"                            -> Term {reject}
+    "refactor"                           -> Term {reject}
+    "complete"                           -> Term {reject}
+    "parse"                              -> Term {reject}
+    "run"                                -> Term {reject}
     "succeeds"                           -> Term {reject}
     "fails"                              -> Term {reject}
 
@@ -92,22 +105,23 @@
     INT "warning"     -> Result    {cons("Warning")}
     INT "warnings"    -> Result    {cons("Warnings")}
 
-    "resolve"                                 -> Result {cons("ResolvesUnnumbered")}
-    "resolve" Numbered                        -> Result {cons("Resolves")}
-    "resolve" Numbered "to" Numbered          -> Result {cons("ResolvesTo")}
-    "complete" OptNumbered                    -> Result {cons("Completes")}
-    "complete" OptNumbered "to" STRING        -> Result {cons("CompletesTo")}
-    
-    TestStratego                          -> Result {cons("Stratego")} 
-    "build" ID Pattern                   -> Result {cons("Builds")}
-    "run" ID "(" STRING ")" Pattern      -> Result {cons("Runs")}
-    "refactor" ID "(" STRING ")" Pattern -> Result {cons("Refactors")}
-    
-                         -> Pattern {cons("wildcard")}
-    "to" "file" PathName -> Pattern {cons("File")}
-    "to" Output          -> Pattern {cons("Fragment")}
-    "to" ATerm           -> Pattern {cons("ATerm")}
-    "fails"              -> Pattern {cons("Fails")}
+    "resolve" OptNumbered                     -> Result {cons("Resolve")}
+    "resolve" Numbered "to" Numbered          -> Result {cons("ResolveTo")}
+    "complete" OptNumbered                    -> Result {cons("Complete")}
+    "complete" OptNumbered "to" STRING        -> Result {cons("CompleteTo")}
+    
+    TestStratego                         -> Result {cons("Stratego")} 
+    "build"    ID OptArgument OptPattern -> Result {cons("Build")}
+    "run"      ID OptArgument OptPattern -> Result {cons("Run")}
+    "refactor" ID OptArgument OptPattern -> Result {cons("Refactor")}
+    
+                         -> OptArgument {cons("None")}
+    "(" STRING ")"       -> OptArgument {cons("Argument")}
+                         -> OptPattern {cons("wildcard")}
+    "to" "file" PathName -> OptPattern {cons("File")}
+    "to" Output          -> OptPattern {cons("Fragment")}
+    "to" ATerm           -> OptPattern {cons("ATerm")}
+    "fails"              -> OptPattern {cons("Fails")}
 
     RegexExp          -> Result
 
@@ -180,6 +194,10 @@
     <NFBracket3-LEX> <StringPart3-CF> <NFCBracket3-LEX> -> <MarkedPart3-CF> {cons("Marked")}
     <NFBracket4-LEX> <StringPart4-CF> <NFCBracket4-LEX> -> <MarkedPart4-CF> {cons("Marked")}
     
+    <NFBracket2-LEX> <ThreeDots-LEX> <NFCBracket2-LEX> -> <MarkedPart2-CF> {cons("MarkedPlaceholder"), prefer}
+    <NFBracket3-LEX> <ThreeDots-LEX> <NFCBracket3-LEX> -> <MarkedPart3-CF> {cons("MarkedPlaceholder"), prefer}
+    <NFBracket4-LEX> <ThreeDots-LEX> <NFCBracket4-LEX> -> <MarkedPart4-CF> {cons("MarkedPlaceholder"), prefer}
+    
     <InputChars2-LEX> -> <StringPart2-CF> {cons("QuotePart")}
     <InputChars3-LEX> -> <StringPart3-CF> {cons("QuotePart")}
     <InputChars4-LEX> -> <StringPart4-CF> {cons("QuotePart")}
@@ -209,6 +227,8 @@
     "]]"   -> CBracket2
     "]]]"  -> CBracket3
     "]]]]" -> CBracket4
+    
+    "..."  -> ThreeDots
 
     %% non-follow-restricted:
 

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Thu Apr 14 11:36:04 2011	(r22525)
@@ -0,0 +1,21 @@
+module check-builders
+
+imports
+  libstratego-lib
+  libstratego-aterm
+  include/Spoofax-Testing
+  lib/editor-common.generated
+  aterm-eq
+  spoofax_testing
+  check
+
+rules
+  
+  spt-desugar:
+    Refactor(x, arg, p) -> Build(x, arg, p)
+  
+  spt-desugar:
+    Run(x, arg, p) -> Build(x, arg, p)
+
+  check-expectation(|ast, selections, messages) :
+    Build(_, _, _) -> $[Not implemented: [<write-to-string>]]
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str	Thu Apr 14 09:28:12 2011	(r22524)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str	Thu Apr 14 11:36:04 2011	(r22525)
@@ -17,11 +17,11 @@
 
 rules
 
-  check-expectation(|ast, selections, messages) :
-    Completes(x) -> <check-expectation(|ast, selections, messages)> CompletesTo(x, wildcard())
+  spt-desugar:
+    Complete(x) -> CompleteTo(x, wildcard())
 
   check-expectation(|ast, selections, messages) :
-    CompletesTo(from, to) -> error
+    CompleteTo(from, to) -> error
     where
       from' := <resolve-selection(|selections)> from;
       to'   := <resolve-selection(|selections)> to
@@ -45,18 +45,16 @@
     where
       x-root := <repeat(prim("SSL_EXT_get_parent", <id>))> x;
       if y-root := <alltd(origin-equal(|x); !COMPLETION(<id>))> x-root then
-        y := <oncetd(?COMPLETION(_))> y-root;
-        debug(!"y")
+        y := <oncetd(?COMPLETION(_))> y-root
       else
         y := NOCONTEXT(x)
       end;
-      tuple := <get-service-input-term> y;
-      debug(!"y'")
+      tuple := <get-service-input-term> y
   
   is-successful-completion(|expected):
     Some(result) -> <id>
     where
       !expected => wildcard()
     <+
-      <oncetd(strip-annos; ?expeceted)> result
+      <oncetd(strip-annos; ?expected)> result
       
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Thu Apr 14 09:28:12 2011	(r22524)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Thu Apr 14 11:36:04 2011	(r22525)
@@ -10,9 +10,15 @@
   check
 
 rules
+  
+  spt-desugar:
+    Resolve(n) -> ResolveTo(n, wildcard())
+  
+  spt-desugar:
+    Unnumbered() -> Numbered("1")
 
   check-expectation(|ast, selections, messages) :
-    ResolvesTo(_, _) -> $[No reference resolving defined for [<Language>]]
+    ResolveTo(_, _) -> $[No reference resolving defined for [<Language>]]
     where
       spt-get-reference-resolvers => []
   
@@ -24,7 +30,7 @@
       error*     := <filter(check-selection(|selections))> reference*
   
   check-selection(|selections):
-    Numbered(n) -> (n, $[Identifier not found in input])
+    Numbered(n) -> (<id>, $[No identifier selection #[n] found in input])
     where
       not(resolve-selection(|selections))
   
@@ -33,15 +39,9 @@
     where
       n'        := <string-to-int> n;
       selection := <index(|n')> selections
-  
-  resolve-selection(|selections):
-    Unnumbered() -> <resolve-selection(|selections)> Numbered("1")
-  
-  check-expectation(|ast, selections, messages) :
-    Resolves(x) -> <check-expectation(|ast, selections, messages)> ResolvesTo(x, wildcard())
 
   check-expectation(|ast, selections, messages) :
-    ResolvesTo(from, to) -> error
+    ResolveTo(from, to) -> error
     where
       from' := <resolve-selection(|selections)> from;
       to'   := <resolve-selection(|selections)> to

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Apr 14 09:28:12 2011	(r22524)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Apr 14 11:36:04 2011	(r22525)
@@ -17,6 +17,13 @@
   amb : List(Term) -> Term
   
 rules
+  
+  spt-desugar:
+    Error(n) -> Errors(n)
+  
+  spt-desugar:
+    Warning(n) -> Warnings(n)
+  
   check-note = fail
   
   check-error:
@@ -30,6 +37,10 @@
     where
       not(spt-get-observer)
   
+  check-error:
+    MarkedPlaceholder(_, _, _) -> (<id>, $[Placeholders are not yet supported; 
+                                           place a 'footer' setup block at the end of the file instead])
+  
   check-warning:
     Test(_,description(d), i, expectations) -> (d, warnings)
     where
@@ -130,8 +141,7 @@
       not(!messages => ([], [], _))
   
   is-semantic-failure-allowed =
-    Fails() + ?Errors(_) + ?Error(_) + ?Warning(_) + ?Warnings(_)
-  + ?Completes(_) + ?CompletesTo(_, _)
+    Fails() + ?Errors(_) + ?Warnings(_) + ?CompleteTo(_, _)
 
   check-expectation(|ast, selections, messages) :
     Errors(n) -> $[[n] errors expected: [<grab-errors> messages]]
@@ -140,9 +150,6 @@
     ; not(<eq> (<length> errors, <string-to-int> n))
 
   check-expectation(|ast, selections, messages) :
-    Error(n) -> <check-expectation(|ast, selections, messages)> Errors(n)
-
-  check-expectation(|ast, selections, messages) :
     Warnings(n) -> $[[n] warning(s) expected: [<grab-warnings> messages]]
     where
       !messages => ([], warnings, _)
@@ -154,18 +161,6 @@
       !messages => ([_ | _], _, _)
 
   check-expectation(|ast, selections, messages) :
-    Warning(n) -> <check-expectation(|ast, selections, messages)> Warnings(n)
-
-  check-expectation(|ast, selections, messages) :
-    Builds(_, _) -> $[Not implemented: [<write-to-string>]]
-
-  check-expectation(|ast, selections, messages) :
-    Runs(_, _, _) -> $[Not implemented: [<write-to-string>]]
-
-  check-expectation(|ast, selections, messages) :
-    Refactors(_, _, _) -> $[Not implemented: [<write-to-string>]]
-
-  check-expectation(|ast, selections, messages) :
     Stratego(_) -> $[Not implemented: [<write-to-string>]]
 
   check-expectation(|ast, selections, messages) :

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Thu Apr 14 09:28:12 2011	(r22524)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Thu Apr 14 11:36:04 2011	(r22525)
@@ -16,22 +16,23 @@
     
   editor-analyze:
     (ast, path, project-path) ->
-    (ast, errors', warnings', notes')
+    (ast', errors', warnings', notes')
     with
-      editor-init
+      editor-init;
+      ast' := <topdown(repeat(spt-desugar))> ast
     with
-      (errors', warnings', notes') := <report-invalid-language> ast
+      (errors', warnings', notes') := <report-invalid-language> ast'
     <+
       scope-paths(
         <chdir> project-path;
         <record-all-sdfs> ".";
         rules(
           InputFile := path
-          Language  := <get-language> ast
+          Language  := <get-language> ast'
         );
-        errors    := <collect-all(check-error, conc)> ast;
-        warnings  := <collect-all(check-warning, conc)> ast;
-        notes     := <collect-all(check-note, conc)> ast;
+        errors    := <collect-all(check-error, conc)> ast';
+        warnings  := <collect-all(check-warning, conc)> ast';
+        notes     := <collect-all(check-note, conc)> ast';
         errors'   := <flatten-list> [errors, <bagof-GrabbedErrors>];
         warnings' := <flatten-list> [warnings, <bagof-GrabbedWarnings>];
         notes'    := <flatten-list> [notes, <bagof-GrabbedNotes>];
@@ -102,7 +103,8 @@
        language (<spt-get-default-language>)
        
        test First test
-         [[), " ", "test", " ]]"]]
+         [[), " ", "test", " ]]\n"
+    ]]
 	
   editor-complete:
     (Language(t), _, _, _, _) -> [<spt-get-default-language>]

From L.C.L.Kats at tudelft.nl  Thu Apr 14 13:38:06 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 14 Apr 2011 11:38:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22526 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <20110414113806.24CAD108C037@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Apr 14 11:38:05 2011
New Revision: 22526
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22526&sc=1

Log:
new primitive to programmatically override user dialog input

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OverrideInputPrimitive.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/MessageDialogPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NameDialogPrimitive.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Thu Apr 14 11:36:04 2011	(r22525)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Thu Apr 14 11:38:05 2011	(r22526)
@@ -43,6 +43,7 @@
 		add(new SaveAllResourcesPrimitive());
 		add(new MessageDialogPrimitive());
 		add(new LanguageDescriptionPrimitive());
+		add(new OverrideInputPrimitive());
 	}
 
 	public String getOperatorRegistryName() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/MessageDialogPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/MessageDialogPrimitive.java	Thu Apr 14 11:36:04 2011	(r22525)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/MessageDialogPrimitive.java	Thu Apr 14 11:38:05 2011	(r22526)
@@ -1,6 +1,5 @@
 package org.strategoxt.imp.runtime.stratego;
 
-import static org.spoofax.interpreter.core.Tools.isTermList;
 import static org.spoofax.interpreter.core.Tools.isTermString;
 
 import org.eclipse.core.runtime.IProgressMonitor;
@@ -8,17 +7,15 @@
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.jface.dialogs.IDialogConstants;
-import org.eclipse.jface.dialogs.InputDialog;
 import org.eclipse.jface.dialogs.MessageDialog;
-import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.progress.UIJob;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.stratego.Fail;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.Environment;
 
 /**
  * @author Maartje de Jonge
@@ -66,8 +63,7 @@
 		try {
 			job.join();
 		} catch (InterruptedException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			Environment.logException("Interrupted", e);
 		}
 		return job.getResult()==Status.OK_STATUS && dialogResultOk[0]==true;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NameDialogPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NameDialogPrimitive.java	Thu Apr 14 11:36:04 2011	(r22525)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NameDialogPrimitive.java	Thu Apr 14 11:38:05 2011	(r22526)
@@ -18,6 +18,7 @@
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.IOperatorRegistry;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -40,6 +41,10 @@
 	@Override
 	public boolean call(final IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 			throws InterpreterException {		
+		
+		if (fetchOverriddenValue(env))
+			return true;
+		
 		for (int i = 0; i < tvars.length; i++) {
 			if (!isTermString(tvars[i])) return false;			
 		}
@@ -67,12 +72,23 @@
 		try {
 			job.join();
 		} catch (InterruptedException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			Environment.logException("Interrupted", e);
 		}
 		return job.getResult()==Status.OK_STATUS && dialogResultOk[0]==true;
 	}
 
+	private boolean fetchOverriddenValue(final IContext env) {
+		IOperatorRegistry registry = env.getOperatorRegistry(IMPLibrary.REGISTRY_NAME);
+		OverrideInputPrimitive override = (OverrideInputPrimitive) registry.get(OverrideInputPrimitive.NAME);
+		String overridden = override.getOverrideValue();
+		if (overridden != null) {
+			env.getFactory().makeString(overridden);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
 	private IInputValidator getIdentifierValidator(final Language language) {
 		IInputValidator validator = null;
 		if (language != null) {
@@ -107,8 +123,7 @@
 			pt = Environment.getParseTableProvider(language).get();
 			return pt.getKeywordRecognizer();
 		} catch (Exception e1) {
-			// TODO Auto-generated catch block
-			e1.printStackTrace();
+			Environment.logException("Could not fetch keyword recognizer", e1);
 			return null;
 		} 
 	}

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OverrideInputPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OverrideInputPrimitive.java	Thu Apr 14 11:38:05 2011	(r22526)
@@ -0,0 +1,43 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * A primitive used to programmaticaly override the next user input dialog
+ * to return a fixed value rather than show the dialog and ask the user.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class OverrideInputPrimitive extends AbstractPrimitive {
+
+	public static final String NAME = "SSL_ext_overrideinput";
+	
+	private String lastOverride;
+	
+	public OverrideInputPrimitive() {
+		super(NAME, 0, 1);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		if (isTermString(tvars[0])) {
+			lastOverride = asJavaString(tvars[0]);
+			return true;
+		} else {
+			return false;
+		}
+	}
+	
+	public String getOverrideValue() {
+		String result = lastOverride;
+		lastOverride = null;
+		return result;
+	}
+
+}

From M.A.Akhter at student.tudelft.nl  Thu Apr 14 14:20:48 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 14 Apr 2011 12:20:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22527 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	analyze codegen editor
Message-ID: <20110414122048.9ED64CC06B@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 14 12:20:48 2011
New Revision: 22527
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22527&sc=1

Log:
* simplified editor-analyze 
* refactored module-level error checking 
* refactored compile-package-of: filepath -> _

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Thu Apr 14 11:38:05 2011	(r22526)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Thu Apr 14 12:20:48 2011	(r22527)
@@ -17,6 +17,8 @@
 	lib/editor-common.generated
 	
 rules
+	
+	//lookups for the analyzed problems
 	get-all-analyzed-problems =  all-keys-GetSemanticProblems ; map(GetSemanticProblems); unzip-semantic-issuses 
 	
 	get-analyzed-problems-of: scope@(package-typed-qname, module-typed-qname) -> problems
@@ -31,6 +33,7 @@
 			<debug> $[ErrorChecking |  Problmes for [<pp-aterm-forced>scope] :  [<pp-aterm-forced>problems]]	
 
 rules	
+	//module specific semantic error checking 	
 	module-constraint-error : 
 		Module(attrb* , s at SPXModuleName(modname) , section*) -> (modname, $[Multiple declaration of module '[modname]' ])
 			with
@@ -38,42 +41,48 @@
 				;Module(module-qname)  := <get-module-typed-qname>(package-typed-qname, s)
 			where 
 				require(<bagof-DeclaredModule>module-qname => [_])
-				
+rules 
+	//analyzes module errors returns it as a touple of errors , warnings and infos 
+	analyze-module-semantics : m at Module(attrb* , modname , section*)  -> (merrors',[],[]) 
+	where 
+		<collect-all(module-constraint-error, conc)>m  => merrors'
+
+		
+	// analyzes module errors and appened it with the existing problems  
+	append-semantic-problems(s|unziped-issues*):  m at Module(attrb* , modname , section*)  -> semantic-problems*
+	with 
+		(merrors,mwarnings,minfos) 	:=  <s> m;
+		!unziped-issues*  =>(err, warning, info);
+		combined-problmes* := [(merrors,mwarnings,minfos),(err, warning, info)]
+	where		
+		<unzip-semantic-issuses>combined-problmes*=> semantic-problems* 
+		
+rules
+	
 	analyze: 
 		m at Module(attrb* , modname , section*) -> m
-		where 
+		with
 				 package-typed-qname := <GetEnclosingPackageName> 
 				;module-typed-qname  := <GetEnclosingModuleName>
 				<+ 
 				debug(!"ErrorChecking | Failed to create current scope.")
 				;fail
-		where
+		with
 				<debug-analysis>$[ErrorChecking | Analyzing Semantic Problems of [<pp-aterm-forced> (package-typed-qname,module-typed-qname)]]	 
-		where
-				issues* := <map(analyze-section)>section*
+				;issues* := <map(analyze-section)>section*
 				;unziped-issues* := <unzip-semantic-issuses>issues*
+		where		 
+				<append-semantic-problems(analyze-module-semantics|unziped-issues*)> m  => unziped-issues'*
 				;current-scope := (package-typed-qname ,module-typed-qname)
-				;if (<GetSemanticProblems>current-scope => existing-problems) then
-					<debug(!"ErrorChecking | Modules with duplicate name found for following: ")>current-scope;
-					!unziped-issues*  =>(e, w, i); 
-					!existing-problems => ( e',w',i');
-					unziped-issues'* :=   <unzip-semantic-issuses>[(e, w, i)|[( e',w',i')]]
-					 
-				else
-					unziped-issues'* :=   unziped-issues*
-				end
-				;<collect-all(module-constraint-error, conc)>m  => merrors'
-				;!unziped-issues'*  =>(err, warning, info)	 
-				;<unzip-semantic-issuses>[(err, warning, info)|[(merrors',[],[])]] =>unziped-issues''*
 				;rules(
-						GetSemanticProblems :  current-scope  ->unziped-issues''*  
-					)	
-					
+						GetSemanticProblems :  current-scope  ->unziped-issues'*  
+				)	
 		where
 			<debug-compiler>$[ErrorChecking | Found semantic problems for [<pp-aterm-forced> (package-typed-qname,module-typed-qname)]  
 			Problems :[<pp-aterm-forced> unziped-issues*]]
 							
-		 
+rules 
+			 
 	analyze-section = 
 		where(not(?SDFSection(_) + ?ESVSection(_) + ?STRSection(_) + ?SDFSectionEH(_, _)))
 		;<debug-analysis>$[ErrorChecking | Ignoring Section: [<pp-aterm>]] 
@@ -112,7 +121,6 @@
     end;
     error'*   := <conc;flatten-list> (serror*, error*);
     warning'* := <flatten-list> warning*
-
 	       
   analyze-section: 
 		ESVSection(ast) -> (error-esv*, [], [])
@@ -129,8 +137,9 @@
     	errors   := <collect-all(global-constraint-error + constraint-error, conc)> ast;
       warnings := <collect-all(constraint-warning, conc)> ast
       
-			
- 	rules
+rules
+
+
 	/* Converts a list as following 
 	[([a1] , [b1] , [c1])
 	([a2] , [b2] , [c2])
@@ -159,8 +168,6 @@
 			  !hd-issue => [];
 			  <unzip-semantic-issuse(|errors, warnings, infos)>rest-issues
 		)
-			
-		
 		
 	unzip-semantic-issuse(|errors, warning, infos) : [] -> (errors, warning, infos)		
  		

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Apr 14 11:38:05 2011	(r22526)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Apr 14 12:20:48 2011	(r22527)
@@ -111,15 +111,15 @@
 			;<compile-internal>list-of-package-qname*
 			;<debug>$[=========Getting list of errors============]
 			;<get-all-analyzed-problems>() => problems  
-			//;if <fail-if-has-errors>problems then
-			 	;debug(!"generating artifacts ")
+			;if <fail-if-has-errors>problems then
+			 	 <debug>$[=========generating artifacts============]
 				;<list-loop(generate-spx-package)>list-of-package-qname*
 				;<debug>$[=========Generating Build Scipt============]
 				;<emit-build-script> list-of-package-qname*
 				;<debug>$[=========Code Generation is done============] 		
-			//else
-			//	debug(!"Please fix the errors before building the artifacts: " ) // Get all errors 
-			//end		 
+			else
+				<debug>$[Please fix the errors before building the artifacts:  [<pp-aterm-forced>problems]]
+			end		 
 		)
 		;disable-compiler-debugging
 		;!current-term //restoring current term to avoid side effects  
@@ -151,16 +151,21 @@
 	where
 		<debug>$[Compiling packages of  [<pp-aterm-forced>file-abs-path]]
 	where
-		//enable-compiler-debugging;
-		new-compile-session(
-		 	list-of-package-qname:= <get-packages-of-file> file-abs-path
-			;<compile-internal>list-of-package-qname 
-			;<debug>$[=========Getting list of errors============] 
-			;<get-semantic-problmes-by-file>file-abs-path => issues* 
-			;debug(!"Errors : ") 	  // get errors for this file only   
-		) //find out the semantic errors  
-		//;disable-compiler-debugging
-	
+			Enable-Caching;
+			<debug>$[=========Try Getting  Semantic Problems From cache============]; 
+			<get-cached-semantic-issues> file-abs-path => issues*;
+			debug(!"Errors : ") 
+		<+
+			//enable-compiler-debugging;
+			new-compile-session(
+			 	list-of-package-qname:= <get-packages-of-file> file-abs-path
+				;<compile-internal>list-of-package-qname 
+				;<debug>$[=========Getting list of errors============] 
+				;<get-semantic-problmes-by-file>file-abs-path => issues* 
+				;debug(!"Errors : ") 	  // get errors for this file only   
+			) //find out the semantic errors  
+			//;disable-compiler-debugging
+		
 	
 	compile-internal : list-of-package-qname* -> list-of-package-qname* 
 	where 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Thu Apr 14 11:38:05 2011	(r22526)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Thu Apr 14 12:20:48 2011	(r22527)
@@ -2,11 +2,13 @@
 
 imports common
 
+//TODO : add spxconfig file and move this content to that file 
+
 rules 
 	initialize-configuration = 
 		rules(
 			Autogenerated-Artifacts-Dir := ".shawdowdir"
-			SPX-Source-Dir :+  _ -> ("test" , TopDirectoryOnly())
+			SPX-Source-Dir :+  _ -> ("test" , AllDirectories())
 		  Ignored-Spx-Souce-Dir :+ ".svn" -> ".svn"
 		  Enable-Caching: _ 
 		);
@@ -17,7 +19,7 @@
 		;rules(invalidate-lib-cache: _ )
 		;rules(disable-pp-aterm : _ )
 		;rules(disable-pp-aterm :- _ ) // enable pp-aterm  
-		;rules(Enable-Caching :- _ )      // turing of caching 
+		//;rules(Enable-Caching :- _ )      // turing off caching 
 		;if Enable-Caching then 
 			<debug> $[	- Caching of Semantic Errors is Enabled]
 		 end	

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Thu Apr 14 11:38:05 2011	(r22526)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Thu Apr 14 12:20:48 2011	(r22527)
@@ -19,7 +19,7 @@
 	
 rules
 	//editor-analyze	
- 	editor-analyze: (ast, path, project-path) -> (ast, errors, warnings, infos) // get the analyzed AST 
+ 	editor-analyze: (ast, path, project-path) -> (ast, errors, warnings, infos) // TODO : ast -> get the analyzed AST 
     with 
 			editor-init;
 		  initialize-configuration
@@ -28,9 +28,5 @@
 		with 
 			<cache-currently-analyzing-ast>(abs-path  , ast)	 
 		with 
-			if Enable-Caching then
-				<get-cached-semantic-issues<+ compile-packages-of> abs-path  => semantic-issues*
-			else
-				<compile-packages-of> abs-path  => ( errors, warnings, infos)
-			end	
-			
\ No newline at end of file
+			<compile-packages-of> abs-path  => ( errors, warnings, infos)
+			 
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Thu Apr 14 15:52:59 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 14 Apr 2011 13:52:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22528 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	analyze unit-tests utils
Message-ID: <20110414135259.53AFE2B803E@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 14 13:52:58 2011
New Revision: 22528
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22528&sc=1

Log:
* Draft of code contracts for stratego
* Added unit tests for the stratego rules
* using contracts in analyze/main.str for spx langauge

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/contracts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Thu Apr 14 12:20:48 2011	(r22527)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Thu Apr 14 13:52:58 2011	(r22528)
@@ -15,18 +15,19 @@
 	analyze/esv/check
 	analyze/str/check 
 	lib/editor-common.generated
-	
+imports 
+	utils/contract 	
 rules
 	
 	//lookups for the analyzed problems
 	get-all-analyzed-problems =  all-keys-GetSemanticProblems ; map(GetSemanticProblems); unzip-semantic-issuses 
 	
 	get-analyzed-problems-of: scope@(package-typed-qname, module-typed-qname) -> problems
-		with 
-			<?Package(QName(_))>package-typed-qname;
-			<?Module(QName(_))> module-typed-qname
-			<+
-			debug(!"ErrorChecking | Failed to get analyzed errors . Invalid QName Arguments :");fail
+		where 
+			contracts (
+					contract-requires(?Package(QName(_)) |package-typed-qname);
+					contract-requires(?Module(QName(_))  |module-typed-qname)
+			)	
 		where
 			<GetSemanticProblems>scope => problems 
 		where

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/contracts.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/contracts.str	Thu Apr 14 13:52:58 2011	(r22528)
@@ -0,0 +1,36 @@
+module unit-tests/contracts 
+
+imports
+	include/SpoofaxLang 
+	lib/editor-common.generated
+	utils/debug
+imports
+	common
+	context/scope-tree
+	context/signature 
+	normalize/signatures
+	utils/contract
+	
+rules
+	test-contracts: 
+		(selected, position, ast, path, project-path) -> selected
+		where 
+			debug(!"starting test on code-contracts now. ");
+			editor-init
+		where
+			debug(!"running Test 1 .... ");
+			if not (<test-dummy-strategy> "test") then  
+				debug(!"Test 1 passed")
+			end
+		where
+			debug(!"running Test 2 .... ");
+			(<test-dummy-strategy> [1,2]);   
+			debug(!"Test 2 passed")
+		
+	
+	test-dummy-strategy : list* -> list* 
+	where contracts(
+		contract-requires( is-list | list*, "list")
+	)
+					
+		

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str	Thu Apr 14 13:52:58 2011	(r22528)
@@ -0,0 +1,32 @@
+module 
+	utils/contract 
+imports 
+	common
+	utils/debug	
+
+
+//Draft of code contracts for stratego 
+rules 
+
+	contract-requires ( s , on-fail | arg , expected) =
+			contract-requires ( s | arg , expected)
+		<+
+			on-fail
+		
+		
+	contract-requires ( s | arg , expected) =
+			where(<s>arg)
+		<+
+			<debug> $[Contract | Requires Failed - actual :[<pp-aterm>arg] expected : [expected]]
+			;fail 	 
+	
+	
+	contract-requires ( s | arg ) =
+			where(<s>arg)
+		<+
+			<debug> $[Contract | Requires Failed - argument :[<pp-aterm>arg] ]
+			;fail 	 
+	
+	
+	
+	contracts ( s ) =  where(s) <+ fail    
\ No newline at end of file

From r.t.lindeman at student.tudelft.nl  Thu Apr 14 16:28:31 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Thu, 14 Apr 2011 14:28:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22529 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching
	org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug...
Message-ID: <20110414142831.34A28CC057@mx4.tudelft.nl>

Author: RickyLindeman
Date: Thu Apr 14 14:28:30 2011
New Revision: 22529
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22529&sc=1

Log:
Moved location of strategodebuglib.rtree to debug.stratego.runtime (strategodebuglib.rtree should match the strategy debug-event definitions)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrategoDebugRuntimeJarsAntPropertyProvider.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Thu Apr 14 13:52:58 2011	(r22528)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Thu Apr 14 14:28:30 2011	(r22529)
@@ -6,7 +6,9 @@
 import java.util.List;
 
 import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.Path;
 import org.eclipse.debug.core.DebugPlugin;
 import org.eclipse.debug.core.ILaunch;
 import org.eclipse.debug.core.ILaunchConfiguration;
@@ -107,7 +109,7 @@
 	 * Returns a list of strings with paths to jars that are dynamically loaded by the HybridInterpreter.
 	 * @return
 	 */
-	private List<String> getLoadJarsAsList()
+	public List<String> getLoadJarsAsStringList()
 	{
 		List<String> list = new ArrayList<String>();
 		for(URL jarURL : this.loadJars)
@@ -117,6 +119,16 @@
 		return list;
 	}
 	
+	public List<IPath> getLoadJarsAsIPathList()
+	{
+		List<IPath> list = new ArrayList<IPath>();
+		for(URL jarURL : this.loadJars)
+		{
+			list.add(new Path(jarURL.getFile()));
+		}
+		return list;
+	}
+	
 	/**
 	 * Invokes a compiled or interpreted strategy bound to this instance.
 	 * 
@@ -171,7 +183,7 @@
 		
 		// required jars
 		// IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS
-		configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS, getLoadJarsAsList());
+		configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS, getLoadJarsAsStringList());
 		
 		// also set the path to the project, breakpoints 
 		// IStrategoConstants.ATTR_STRATEGO_PROGRAM

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java	Thu Apr 14 13:52:58 2011	(r22528)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java	Thu Apr 14 14:28:30 2011	(r22529)
@@ -72,6 +72,7 @@
 		}
 		
 		//String flatJarList = "";
+		// convert List to List<Path>
 		List<IPath> jarPaths = new ArrayList<IPath>();
 		Iterator iter = requiredJars.iterator();
 		while(iter.hasNext())
@@ -99,7 +100,7 @@
 		List<IPath> classpaths = jarPaths;
 		// also add strategoxt.jar
 		classpaths.add(new Path(StrategoJarAntPropertyProvider.getStrategoJarPath()));
-		
+
 		LaunchSettings ls = new LaunchSettings();
 		ls.classToLaunch = mainClass;
 		ls.classpath = FileUtil.convertIPathToStringArray(classpaths);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java	Thu Apr 14 13:52:58 2011	(r22528)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java	Thu Apr 14 14:28:30 2011	(r22529)
@@ -6,6 +6,7 @@
 import java.util.List;
 
 import org.eclipse.core.runtime.IPath;
+import org.strategoxt.imp.debug.stratego.runtime.ClasspathHandler;
 
 
 public class DebugSessionSettings {
@@ -149,8 +150,6 @@
 		IPath strategoxt_jar = directory.append(STRATEGOXT_JAR);
 		
 		this.strategoxtJar = strategoxt_jar;
-
-		this.strategoDebugLibraryDirectory = directory; // rtree
 	}
 	
 	private List<IPath> runtimeJars = null;
@@ -233,6 +232,10 @@
 	 */
 	public IPath getStrategoDebugLibraryDirectory()
 	{
+		if (this.strategoDebugLibraryDirectory == null)
+		{
+			this.strategoDebugLibraryDirectory = ClasspathHandler.getStrLibDirectory();
+		}
 		return this.strategoDebugLibraryDirectory;
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties	Thu Apr 14 13:52:58 2011	(r22528)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties	Thu Apr 14 14:28:30 2011	(r22529)
@@ -5,4 +5,5 @@
                bin/,\
                lib/,\
                .,\
-               plugin.xml
+               plugin.xml,\
+               str-lib/

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java	Thu Apr 14 13:52:58 2011	(r22528)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java	Thu Apr 14 14:28:30 2011	(r22529)
@@ -19,6 +19,11 @@
 	
 	public final static String STRATEGO_DEBUG_RUNTIME_JAR_ENTRY = "/include/" + STRATEGO_DEBUG_RUNTIME_JAR_NAME;
 	public final static String STRATEGO_DEBUG_RUNTIME_JAVA_JAR_ENTRY = "/include/" + STRATEGO_DEBUG_RUNTIME_JAVA_JAR_NAME;
+	
+	
+	
+	private static String STR_LIB = "str-lib";
+	
 	/**
 	 * Returns a list of locations that are generated by this plugin.
 	 * The jars "stratego-debug-runtime-java.jar" and "stratego-debug-runtime.jar" are in the include dir of this plugin.
@@ -78,4 +83,19 @@
 		//System.out.println("OSSTRING: " + path.toOSString());
 		return path;
 	}
+	
+	/**
+	 * This directory contains the strategodebuglib.rtree.
+	 * Compiling a stratego program to java requires this file to be on the path.
+	 * Path can be extended using "-I" parameter.
+	 * @return
+	 */
+	public static IPath getStrLibDirectory()
+	{
+		// loc points to the basedit of the plugin
+		URL loc = ClasspathHandler.class.getProtectionDomain().getCodeSource().getLocation();
+		IPath p = new Path(loc.getPath());
+		p = p.append(STR_LIB); 
+		return p;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrategoDebugRuntimeJarsAntPropertyProvider.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrategoDebugRuntimeJarsAntPropertyProvider.java	Thu Apr 14 13:52:58 2011	(r22528)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrategoDebugRuntimeJarsAntPropertyProvider.java	Thu Apr 14 14:28:30 2011	(r22529)
@@ -15,7 +15,7 @@
 public class StrategoDebugRuntimeJarsAntPropertyProvider implements IAntPropertyValueProvider {
 
 	private static String INCLUDE = "include";
-	private static String STR_LIB = "str-lib";
+
 	
 	public static String RUNTIME_JAR = "stratego-debug-runtime.jar";
 	public static String RUNTIME_JAVA_JAR = "stratego-debug-runtime-java.jar";
@@ -38,12 +38,12 @@
 		return null;
 	}
 	
+	/**
+	 * The str-lib folder in the debug.stratego.runtime plugin should contain the strategodebuglib.rtree file.
+	 * @return
+	 */
 	private String getStrategoDebugLibFolderPath() {
-		// loc points to the basedit of the plugin
-		URL loc = StrategoDebugRuntimeJarsAntPropertyProvider.class.getProtectionDomain().getCodeSource().getLocation();
-		IPath p = new Path(loc.getPath());
-		p = p.append(STR_LIB); 
-		return p.toOSString();
+		return ClasspathHandler.getStrLibDirectory().toOSString();
 	}
 
 	private String getRuntimeJarPath()

From r.t.lindeman at student.tudelft.nl  Thu Apr 14 16:31:02 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Thu, 14 Apr 2011 14:31:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22530 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20110414143102.0D3C6108C043@mx3.tudelft.nl>

Author: RickyLindeman
Date: Thu Apr 14 14:31:01 2011
New Revision: 22530
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22530&sc=1

Log:
change the contents of the build.generated.xml to support building a spoofax-project debug-build

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Apr 14 14:28:30 2011	(r22529)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Apr 14 14:31:01 2011	(r22530)
@@ -77,7 +77,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar"   depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar"   depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/<%= pkgdir %>/strategies/Main.class" property="java.jar.enabled"/>
@@ -89,7 +89,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -489,6 +489,156 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}" />
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac 
+	        	destdir="${build}" 
+	        	source="1.5" 
+	        	target="1.5" 
+	        	debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information" />
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}" />
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}" />
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;" />
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans" />
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

From M.A.Akhter at student.tudelft.nl  Thu Apr 14 16:32:25 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 14 Apr 2011 14:32:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22531 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: test
	test/Test-old trans trans/analyze trans/codegen
Message-ID: <20110414143225.CC1622B8020@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 14 14:32:25 2011
New Revision: 22531
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22531&sc=1

Log:
adding entity-lang as an example SPX

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/example.spx
      - copied, changed from r22511, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/example.spx
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/spoofax-test.spx
      - copied, changed from r22511, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/spoofax-test.spx
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/test.spx
      - copied, changed from r22512, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/test.spx
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/testspxpackage.spx
      - copied, changed from r22512, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/testspxpackage.spx
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/example.spx
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/spoofax-test.spx
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/test.spx
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/testspxpackage.spx
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/example.spx (from r22511, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/example.spx)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/example.spx	Wed Apr 13 15:54:16 2011	(r22511, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/example.spx	Thu Apr 14 14:32:25 2011	(r22531)
@@ -11,7 +11,7 @@
  
 		context-free syntax
 		  MethodDecl -> Start{cons("Test"), left-assoc}
-		 	"public" Type ID Params -> MethodDecl{cons("Method")}
+		 	"public" Type ID Params -> MethodDecl{cons("Method")} 
 		 	{Param? "," }+ -> Params{cons("Args")}
 		 	{Param+*  "," }+ -> Params{cons("Args1")}
 		 	Type ID -> Param{cons ("Parameter")}

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/spoofax-test.spx (from r22511, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/spoofax-test.spx)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/spoofax-test.spx	Wed Apr 13 15:54:16 2011	(r22511, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/spoofax-test.spx	Thu Apr 14 14:32:25 2011	(r22531)
@@ -16,7 +16,7 @@
 		context-free syntax
 			A -> Start{cons("Program")} 
 			 	   
-		
+		 
 		builders
 		
 		builders

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/test.spx (from r22512, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/test.spx)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/test.spx	Wed Apr 13 15:58:18 2011	(r22512, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/test.spx	Thu Apr 14 14:32:25 2011	(r22531)
@@ -1,6 +1,6 @@
 package test.A 
 {	 
-	module dummy2{
+	module dummy2{  
 		imports test.b::m1
 		
 		context-free start-symbols
@@ -9,8 +9,8 @@
 		context-free syntax 
 			Test4 A -> Start{cons("Program")}  
 			 
-		folding  
-			Test5.Program 
+		folding   
+			Test5.Program    
 				 
 		completions
 		  completion template : Start = "module " <m> (blank)        
@@ -25,7 +25,7 @@
 		imports test.b::m2 
 		
 		context-free syntax 
-			"int" Test5 ->  Test6{cons("Test6")} 
+			"int" Test5 ->  Test6{cons("Test6")}  
 		 
 		lexical syntax 
 			"void" -> A

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/testspxpackage.spx (from r22512, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/testspxpackage.spx)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/testspxpackage.spx	Wed Apr 13 15:58:18 2011	(r22512, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/testspxpackage.spx	Thu Apr 14 14:32:25 2011	(r22531)
@@ -6,27 +6,28 @@
 			"Test-Dummy2"-> 		Test4
 			
 		rules 
-			to-java:
+			to-java: 
    			 x -> x
-   			 	
+   			 	 
 	}  
 	 	 
 }  
  
 package test.b   
 { 
-	 
+	
 	module m2
 	{
 		imports test.c 
 		lexical syntax
-			"Test-Dummy3" -> 		Test5
-			
+			"Test-Dummy3" -> 		Test5 
+			 
 		rules
 				test-unzip-semantic-issuse-main(|errors, warnings, infos) = id
 			     
 	}
-}
+
+} 
 
 package test.c 
 {

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Thu Apr 14 14:32:25 2011	(r22531)
@@ -0,0 +1,77 @@
+package entity 
+{
+	module entity-lang
+	{
+		context-free start-symbols
+    	Start
+
+  	context-free syntax
+	    "module" ID Definition*       -> Start {cons("Module")}
+	    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+	    ID ":" Type                   -> Property {cons("Property")}
+	    ID                            -> Type {cons("Type")}
+
+	}
+	
+	module builders
+	{
+		builders
+                                                                                                                               
+			provider                  : include/testspoofax-java.jar                                                                     
+	    observer                  : editor-analyze                                                                                   
+	                                                                                                                           
+	  	builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
+	 		builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  }
+}
+
+package entity  
+{
+	module common
+	{
+		lexical syntax
+   
+    [a-zA-Z][a-zA-Z0-9\_]* -> ID
+    "-"? [0-9]+            -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+     
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]
+		
+	} 
+	
+}
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Thu Apr 14 14:31:01 2011	(r22530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Thu Apr 14 14:32:25 2011	(r22531)
@@ -31,7 +31,7 @@
 		where
 			<GetSemanticProblems>scope => problems 
 		where
-			<debug> $[ErrorChecking |  Problmes for [<pp-aterm-forced>scope] :  [<pp-aterm-forced>problems]]	
+			<debug-compiler> $[ErrorChecking |  Problmes found [<pp-aterm-forced>scope] :  [<pp-aterm-forced>problems]]	
 
 rules	
 	//module specific semantic error checking 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Apr 14 14:31:01 2011	(r22530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Apr 14 14:32:25 2011	(r22531)
@@ -38,10 +38,10 @@
 					GetEnclosingScope,
 					GetEnclosedScope:
 						where(
-							<debug>$[============Starting new compiler session ==============]
+							<debug-compiler>$[============Starting new compiler session ==============]
 						);
 						compiler-init; // initializing compiler session 
-						where(<debug>$[============Initialization is done  ==============]);
+						where(<debug-compiler>$[============Initialization is done  ==============]);
 						s	
 			|}
 
@@ -149,35 +149,36 @@
 	
 	compile-packages-of: file-abs-path -> issues*
 	where
-		<debug>$[Compiling packages of  [<pp-aterm-forced>file-abs-path]]
+		<debug-compiler>$[Compiling packages of  [<pp-aterm-forced>file-abs-path]]
 	where
 			Enable-Caching;
-			<debug>$[=========Try Getting  Semantic Problems From cache============]; 
-			<get-cached-semantic-issues> file-abs-path => issues*;
-			debug(!"Errors : ") 
+			<debug-compiler>$[=========Try Getting  Semantic Problems From cache============]; 
+			<get-cached-semantic-issues> file-abs-path => issues*
 		<+
 			//enable-compiler-debugging;
 			new-compile-session(
 			 	list-of-package-qname:= <get-packages-of-file> file-abs-path
 				;<compile-internal>list-of-package-qname 
-				;<debug>$[=========Getting list of errors============] 
+				;<debug-compiler>$[=========Getting list of errors============] 
 				;<get-semantic-problmes-by-file>file-abs-path => issues* 
-				;debug(!"Errors : ") 	  // get errors for this file only   
 			) //find out the semantic errors  
 			//;disable-compiler-debugging
-		
+		where
+			if not(<fail-if-has-errors>issues*) then  
+				  <debug(!"Errors : ")>issues* 	  // get errors for this file only
+			end
 	
 	compile-internal : list-of-package-qname* -> list-of-package-qname* 
 	where 
-		<debug>$[=========Compiling packages===============
+		<debug-compiler>$[=========Compiling packages===============
 		 				 [<pp-aterm-forced>list-of-package-qname* ]
 		 				 ]
 	where
 		<compile-main>list-of-package-qname*
-		;<debug>$[=========Compilation is done===============]
+		;<debug-compiler>$[=========Compilation is done===============]
 	where 	    
 		if Enable-Caching then 
-			<debug>$[=========Caching Semantic Problems============] 
+			<debug-compiler>$[=========Caching Semantic Problems============] 
 			;<cache-semantic-problems>()
 		end
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Thu Apr 14 14:31:01 2011	(r22530)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Thu Apr 14 14:32:25 2011	(r22531)
@@ -1,6 +1,8 @@
 module config 
 
-imports common
+imports 
+	common
+	utils/debug
 
 //TODO : add spxconfig file and move this content to that file 
 
@@ -8,20 +10,20 @@
 	initialize-configuration = 
 		rules(
 			Autogenerated-Artifacts-Dir := ".shawdowdir"
-			SPX-Source-Dir :+  _ -> ("test" , AllDirectories())
+			SPX-Source-Dir :+  _ -> ("test" , TopDirectoryOnly())
 		  Ignored-Spx-Souce-Dir :+ ".svn" -> ".svn"
 		  Enable-Caching: _ 
 		);
-		<debug> $[Spoofax-lang|Initialize-Configuration];
-		<debug> $[	- Autogenerated-Artifacts-Dir = [<pp-aterm><Autogenerated-Artifacts-Dir>]];
-		<debug> $[	- SPX-Source-Dir = [<pp-aterm><bagof-SPX-Source-Dir>]];
-		<debug> $[	- Ignored-Spx-Souce-Dir = [<pp-aterm><all-keys-Ignored-Spx-Souce-Dir>]]
+		<debug-compiler> $[Spoofax-lang|Initialize-Configuration];
+		<debug-compiler> $[	- Autogenerated-Artifacts-Dir = [<pp-aterm><Autogenerated-Artifacts-Dir>]];
+		<debug-compiler> $[	- SPX-Source-Dir = [<pp-aterm><bagof-SPX-Source-Dir>]];
+		<debug-compiler> $[	- Ignored-Spx-Souce-Dir = [<pp-aterm><all-keys-Ignored-Spx-Souce-Dir>]]
 		;rules(invalidate-lib-cache: _ )
 		;rules(disable-pp-aterm : _ )
 		;rules(disable-pp-aterm :- _ ) // enable pp-aterm  
-		//;rules(Enable-Caching :- _ )      // turing off caching 
+		;rules(Enable-Caching :- _ )      // turing off caching 
 		;if Enable-Caching then 
-			<debug> $[	- Caching of Semantic Errors is Enabled]
+			<debug-compiler> $[	- Caching of Semantic Errors is Enabled]
 		 end	
 		
 signature 

From L.C.L.Kats at tudelft.nl  Thu Apr 14 17:28:51 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 14 Apr 2011 15:28:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22532 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20110414152852.01E49CC104@mx4.tudelft.nl>

Author: LennartKats
Date: Thu Apr 14 15:28:51 2011
New Revision: 22532
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22532&sc=1

Log:
prevent lib/refactoring-common.generated.str from requiring a Stratego rebuild every time :(

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Apr 14 14:32:25 2011	(r22531)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Apr 14 15:28:51 2011	(r22532)
@@ -422,7 +422,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -440,7 +440,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>

From L.C.L.Kats at tudelft.nl  Thu Apr 14 17:29:55 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 14 Apr 2011 15:29:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22533 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20110414152955.0ECCE7F805E@mx1.tudelft.nl>

Author: LennartKats
Date: Thu Apr 14 15:29:54 2011
New Revision: 22533
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22533&sc=1

Log:
cleanup of refactoring generated file

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	Thu Apr 14 15:28:51 2011	(r22532)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	Thu Apr 14 15:29:54 2011	(r22533)
@@ -27,7 +27,7 @@
   lib/editor-common.generated
   check
   generate
-  refactorings
+  refactor
 
 rules // Main editor interface (defined by editor/{sdf-name}-Builders and -References.esv)
   
@@ -190,29 +190,28 @@
 end;
 
 
-if not(<file-exists> "trans/refactorings.str") then
-  <output-text-file(|["trans"], "refactorings.str")>
-${module refactorings
+if not(<file-exists> "trans/refactor.str") then
+  <output-text-file(|["trans"], "refactor.str")>
+${module refactor
 
 imports
   lib/refactor-common.generated
   include/{sdf-name}
   lib/editor-common.generated  
 
-strategies //renaming
+rules
  
-rename-entity:
-  (selected-name, position, ast, path, project-path) -> [(ast, new-ast)]
-  with
-  	<parent-at-position(|position); (?Entity(_,_) <+ ?Type(_))> ast;
-    new-name:=<input-dialog>("{<get-sdf-main-module>}", "rename", "Rename Entity:", ""); 
-    new-ast:=<topdown(try(rename-type(|selected-name, new-name)))> ast
+  rename-entity:
+    (selected-name, position, ast, path, project-path) -> [(ast, new-ast)]
+    with
+      new-name := <input-dialog> ("{<get-sdf-main-module>}", "rename", "Rename entity:", ""); 
+      new-ast  := <topdown(try(rename-type(|selected-name, new-name)))> ast
 
-rename-type(|old-name, new-name):
-  Entity(old-name, y) -> Entity(new-name, y)
+  rename-type(|old-name, new-name):
+    Entity(old-name, y) -> Entity(new-name, y)
 
-rename-type(|old-name, new-name):
-  Type(old-name) -> Type(new-name)
+  rename-type(|old-name, new-name):
+    Type(old-name) -> Type(new-name)
 
 }
 end

From L.C.L.Kats at tudelft.nl  Thu Apr 14 18:29:54 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 14 Apr 2011 16:29:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22534 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110414162954.0A9772B8002@mx2.tudelft.nl>

Author: LennartKats
Date: Thu Apr 14 16:29:53 2011
New Revision: 22534
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22534&sc=1

Log:
Spoofax/358: Change to reference resolving interface

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	Thu Apr 14 15:29:54 2011	(r22533)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	Thu Apr 14 16:29:53 2011	(r22534)
@@ -19,7 +19,7 @@
  */
 public class StrategoReferenceResolver implements IReferenceResolver {
 	
-	public static boolean ALLOW_MULTI_CHILD_PARENT = true; // TODO: set to false for reference resolving??
+	public static boolean ALLOW_MULTI_CHILD_PARENT = false;
 	
 	private final StrategoObserver observer;
 	
@@ -41,7 +41,7 @@
 
 	public ISimpleTerm getLinkTarget(Object oNode, IParseController parseController) {
 		IStrategoTerm innerNode = (IStrategoTerm) oNode;
-		IStrategoTerm node = InputTermBuilder.getMatchingAncestor(innerNode, true);
+		IStrategoTerm node = InputTermBuilder.getMatchingAncestor(innerNode, ALLOW_MULTI_CHILD_PARENT);
 		
 		String function = NodeMapping.getFirstAttribute(resolverFunctions, tryGetName(node), getSort(node), 0);
 		if (function == null) function = wildcardResolverFunction;

From L.C.L.Kats at tudelft.nl  Thu Apr 14 18:31:32 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 14 Apr 2011 16:31:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22535 - in
	spoofax-imp/trunk: experimental/NamingExperiment/test
	experimental/NamingExperiment/trans
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org...
Message-ID: <20110414163132.2EA922B8020@mx2.tudelft.nl>

Author: LennartKats
Date: Thu Apr 14 16:31:31 2011
New Revision: 22535
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22535&sc=1

Log:
Implemented testing support for builders, runners, and refactorings

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/builders.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/refactorings.str
Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt
   spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NameDialogPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OverrideInputPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/.externalToolBuilders/TestingTesting build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/java/org/strategoxt/imp/testing/test/TestingTestingParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/testingtesting.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/aterm-eq.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt	Thu Apr 14 16:31:31 2011	(r22535)
@@ -42,7 +42,7 @@
       var v : A = a.x.y
     }
   }
-]] complete to "yyyy"
+]] complete to "yyayy"
 
 test Resolve property access fails [[
   entity B {

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Thu Apr 14 16:31:31 2011	(r22535)
@@ -39,17 +39,7 @@
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       filename := <guarantee-extension(|"aterm")> path;
-      result   := <desugar-top> selected // we just return the input term
-  
-    desugar-top =
-      alltd(desugar);
-      where(oncetd(?PropAccess(_, _); debug(!"to:"); origin-term; debug(!"was:")))
-
-    desugar:
-      Function(x, a, body) -> Function(PropAccess(m,x), a, body)
-      where
-        m := "something different"
-
+      result   := selected // we just return the input term
   
   // Prints the abstract syntax ATerm of a selection.
   generate-analyzed:
@@ -75,7 +65,7 @@
     (target, position, ast, path, project-path) -> $[[def-path'']]
     where
       // FIXME: this only works for definition paths
-      <debug(!2)> target;
+      //<debug(!2)> target;
       def-term           := <get-definition-key> target;
       _{[ns | def-path]} := def-term;
       def-path'  := <take-until(?Anon())> def-path;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Thu Apr 14 16:31:31 2011	(r22535)
@@ -17,6 +17,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.imploder.IToken;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
@@ -172,7 +173,9 @@
 			return getParent(oNode);
 		
 		IStrategoTerm result = oNode;
-		int startOffset = getLeftToken(result).getStartOffset();
+		IToken left = getLeftToken(result);
+		if (left == null) return oNode;
+		int startOffset = left.getStartOffset();
 		int endOffset = getRightToken(result).getEndOffset();
 		while (getParent(result) != null
 				&& !getParent(result).isList()

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NameDialogPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NameDialogPrimitive.java	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NameDialogPrimitive.java	Thu Apr 14 16:31:31 2011	(r22535)
@@ -82,7 +82,7 @@
 		OverrideInputPrimitive override = (OverrideInputPrimitive) registry.get(OverrideInputPrimitive.NAME);
 		String overridden = override.getOverrideValue();
 		if (overridden != null) {
-			env.getFactory().makeString(overridden);
+			env.setCurrent(env.getFactory().makeString(overridden));
 			return true;
 		} else {
 			return false;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OverrideInputPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OverrideInputPrimitive.java	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OverrideInputPrimitive.java	Thu Apr 14 16:31:31 2011	(r22535)
@@ -16,7 +16,7 @@
  */
 public class OverrideInputPrimitive extends AbstractPrimitive {
 
-	public static final String NAME = "SSL_ext_overrideinput";
+	public static final String NAME = "SSL_EXT_overrideinput";
 	
 	private String lastOverride;
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/.externalToolBuilders/TestingTesting build.main.xml.launch
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/.externalToolBuilders/TestingTesting build.main.xml.launch	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/.externalToolBuilders/TestingTesting build.main.xml.launch	Thu Apr 14 16:31:31 2011	(r22535)
@@ -2,8 +2,12 @@
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
 <stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
 <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.strategoxt.imp.testing.test/build.main.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
 <booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
 <listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
 <listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
@@ -14,9 +18,9 @@
 <booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.testing.test/build.main.xml}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS" value="-verbose"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.testing.test}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/java/org/strategoxt/imp/testing/test/TestingTestingParseControllerGenerated.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/java/org/strategoxt/imp/testing/test/TestingTestingParseControllerGenerated.java	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/editor/java/org/strategoxt/imp/testing/test/TestingTestingParseControllerGenerated.java	Thu Apr 14 16:31:31 2011	(r22535)
@@ -33,7 +33,12 @@
     return descriptor;
   }
 
-  private static void createDescriptor()
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    TestingTestingParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
   { 
     try
     { 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/lib/editor-common.generated.str	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/lib/editor-common.generated.str	Thu Apr 14 16:31:31 2011	(r22535)
@@ -143,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 
@@ -203,6 +203,11 @@
 
   subterm-at(|index):
     _#(t*) -> <index(|<inc> index)> t*
+
+strategies
+  
+  input-dialog-override:
+    s -> <prim("SSL_EXT_overrideinput", s)>
   
 signature constructors
 

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/builders.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/builders.spt	Thu Apr 14 16:31:31 2011	(r22535)
@@ -0,0 +1,25 @@
+module test5 
+
+language TestingTesting
+
+setup [[
+  module X
+]]
+
+test Builder
+  [[ entity Y {
+       
+     }
+  ]] build generate-java
+
+test Refactoring
+  [[ entity [[X]] {
+       X : X
+     }
+  ]] refactor rename-entity("Y") to [[
+     entity Y {
+       X : Y
+     }
+  ]]
+
+ 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Thu Apr 14 16:31:31 2011	(r22535)
@@ -2,11 +2,34 @@
 
 language Spoofax-Testing
 
-test Testing TestingTesting testing
+test Basic
   [[[ module x
      language TestingTesting
      test Testing TestingTesting [[
        module x
      ]]
   ]]]
+
+test Builder
+  [[[ module x
+      language TestingTesting
+      test builder
+      [[ module x
+         entity Y {
+           
+         }
+      ]] build generate-java fails
+  ]]] 1 warning
+  
+
+test Refactoring
+  [[[ module x
+      language TestingTesting
+      test builder
+      [[ module x
+         entity Y {
+           
+         }
+      ]] build generate-java fails
+  ]]] 1 warning
   
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/refactorings.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/refactorings.str	Thu Apr 14 16:31:31 2011	(r22535)
@@ -0,0 +1,21 @@
+module refactorings
+
+imports
+  lib/refactor-common.generated
+  include/TestingTesting
+  lib/editor-common.generated  
+
+rules
+ 
+  rename-entity:
+    (selected-name, position, ast, path, project-path) -> [(ast, new-ast)]
+    with
+      with(<is-string> selected-name | "Selection must be a string");
+      new-name := <input-dialog> ("TestingTesting", "rename", "Rename entity:", "");
+      new-ast  := <topdown(try(rename-type(|selected-name, new-name)))> ast
+
+  rename-type(|old-name, new-name):
+    Entity(old-name, y) -> Entity(new-name, y)
+
+  rename-type(|old-name, new-name):
+    Type(old-name) -> Type(new-name)
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/testingtesting.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/testingtesting.str	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/testingtesting.str	Thu Apr 14 16:31:31 2011	(r22535)
@@ -8,6 +8,7 @@
   lib/editor-common.generated
   check
   generate
+  refactorings
 
 rules // Main editor interface (defined by editor/TestingTesting-Builders and -References.esv)
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Syntax.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Syntax.esv	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Syntax.esv	Thu Apr 14 16:31:31 2011	(r22535)
@@ -11,8 +11,8 @@
   // Fences (used for matching,            
   // inserting, indenting brackets):       
   fences                                 : [ ]
-                                           [[ ]]
-                                           [[[ ]]]
+                                           // [[ ]]
+                                           // [[[ ]]]
                                            { }
                                            ( )
                                            

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Thu Apr 14 16:31:31 2011	(r22535)
@@ -57,6 +57,9 @@
 	private static final IStrategoConstructor SETUP_3 =
 		Environment.getTermFactory().makeConstructor("Setup", 3);
 	
+	private static final IStrategoConstructor OUTPUT_4 =
+		Environment.getTermFactory().makeConstructor("Output", 4);
+	
 	private static final IStrategoConstructor QUOTEPART_1 =
 		Environment.getTermFactory().makeConstructor("QuotePart", 1);
 	
@@ -259,6 +262,7 @@
 	*/
 	
 	private boolean isSuccessExpected(IStrategoTerm fragment) {
+		if (tryGetConstructor(fragment) == OUTPUT_4) return true;
 		IStrategoAppl test = (IStrategoAppl) getParent(getParent(getParent(fragment)));
 		if (test.getConstructor() == SETUP_3) return true;
 		IStrategoList expectations = listAt(test, test.getSubtermCount() - 1);

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Thu Apr 14 16:31:31 2011	(r22535)
@@ -88,7 +88,7 @@
 					IStrategoTerm fragmentTail = termAt(term, 2);
 					retokenizer.copyTokensUpToIndex(getLeftToken(fragmentHead).getIndex() - 1);
 					try {
-						IStrategoTerm parsed = testedParser.parse(oldTokenizer, term, cons == OUTPUT_4);
+						IStrategoTerm parsed = testedParser.parse(oldTokenizer, term, /*cons == OUTPUT_4*/ false);
 						int oldFragmentEndIndex = getRightToken(fragmentTail).getIndex();
 						retokenizer.copyTokensFromFragment(fragmentHead, fragmentTail, parsed,
 								getLeftToken(fragmentHead).getStartOffset(), getRightToken(fragmentTail).getEndOffset());

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str	Thu Apr 14 16:31:31 2011	(r22535)
@@ -203,6 +203,11 @@
 
   subterm-at(|index):
     _#(t*) -> <index(|<inc> index)> t*
+
+strategies
+  
+  input-dialog-override:
+    s -> <prim("SSL_EXT_overrideinput", s)>
   
 signature constructors
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Apr 14 16:31:31 2011	(r22535)
@@ -79,11 +79,11 @@
 
   context-free syntax
 
-    "->" "file" PathName -> Result {cons("file"),    deprecated("Use => instead of ->")}
-    "->" ATerm           -> Result {cons("pattern"), deprecated("Use => instead of ->")}
+    %%"->" "file" PathName -> Result {cons("file"),    deprecated("Use 'parse to file' instead")}
+    %%"->" ATerm           -> Result {cons("pattern"), deprecated("Use 'parse to' instead")}
 
-    "=>" "file" PathName -> Result {cons("file"), deprecated("Use 'parse to file' instead")}
-    "=>" ATerm           -> Result {cons("pattern"), deprecated("Use 'parse to' instead")}
+    %%"=>" "file" PathName -> Result {cons("file"), deprecated("Use 'parse to file' instead")}
+    %%"=>" ATerm           -> Result {cons("pattern"), deprecated("Use 'parse to' instead")}
 
     "parse" "to" "file" PathName -> Result {cons("file")}
     "parse" "to" ATerm   -> Result {cons("pattern")}
@@ -167,9 +167,6 @@
     "_"                  -> ATerm  {cons("wildcard")}
     "..."                -> { ATerm ","}+ {cons("wildcardvar")}
 
-  context-free syntax
-    StringQuotation -> Input
-
   sorts
   syntax
       
@@ -179,9 +176,9 @@
     <Bracket3-LEX> <StringPart3-CF> <TailParts3-CF> <CBracket3-LEX> -> <Input-CF> {cons("Input")}
     <Bracket4-LEX> <StringPart4-CF> <TailParts4-CF> <CBracket4-LEX> -> <Input-CF> {cons("Input")}
 
-    <Bracket2-LEX> <StringPart2-CF> <TailParts2-CF> <TailParts2-CF> -> <Output-CF> {cons("Output")}
-    <Bracket3-LEX> <StringPart3-CF> <TailParts3-CF> <TailParts3-CF> -> <Output-CF> {cons("Output")}
-    <Bracket4-LEX> <StringPart4-CF> <TailParts4-CF> <TailParts4-CF> -> <Output-CF> {cons("Output")}
+    <Bracket2-LEX> <StringPart2-CF> <TailParts2-CF> <CBracket2-CF> -> <Output-CF> {cons("Output")}
+    <Bracket3-LEX> <StringPart3-CF> <TailParts3-CF> <CBracket3-CF> -> <Output-CF> {cons("Output")}
+    <Bracket4-LEX> <StringPart4-CF> <TailParts4-CF> <CBracket4-CF> -> <Output-CF> {cons("Output")}
     
                                                       -> <TailParts2-CF> {cons("Done")}
     <MarkedPart2-CF> <StringPart2-CF> <TailParts2-CF> -> <TailParts2-CF> {cons("More")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/aterm-eq.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/aterm-eq.str	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/aterm-eq.str	Thu Apr 14 16:31:31 2011	(r22535)
@@ -14,8 +14,9 @@
   aterm-eq(|p) =
     <aterm-eq>(<explode-aterm>,<read-from-string>p)
 
-  aterm-eq = 
-    rec x(
+  aterm-eq =
+    aterm-appl0-to-fun
+  ; rec x(
         list-term-eq(x)
     +    int-term-eq(x)
     +    fun-term-eq(x)
@@ -25,6 +26,9 @@
     + wildcardvar-eq(x) 
     +   annotated-eq(x)
     ) 
+    
+  aterm-appl0-to-fun =
+    topdown(try(\appl(s, []) -> fun(s)\))
 
 rules
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-builders.str	Thu Apr 14 16:31:31 2011	(r22535)
@@ -8,14 +8,89 @@
   aterm-eq
   spoofax_testing
   check
+  check-resolve
 
-rules
+overlays
   
-  spt-desugar:
-    Refactor(x, arg, p) -> Build(x, arg, p)
+  OVERRIDE_INPUT(s) = Prim("\"SSL_EXT_overrideinput\"", [NoAnnoList(Str(s))])
+
+rules
   
   spt-desugar:
     Run(x, arg, p) -> Build(x, arg, p)
 
   check-expectation(|ast, selections, messages) :
-    Build(_, _, _) -> $[Not implemented: [<write-to-string>]]
\ No newline at end of file
+    c at Build(builder, arg, expected) ->
+    <check-builder(|ast, selections, messages, c)> (builder, arg, expected)
+
+  check-expectation(|ast, selections, messages) :
+    c at Run(builder, arg, expected) ->
+    <check-builder(|ast, selections, messages, c)> (builder, arg, expected)
+
+  check-expectation(|ast, selections, messages) :
+    c at Refactor(builder, arg, expected) ->
+    <check-builder(|ast, selections, messages, c)> (builder, arg, expected)
+  
+  check-builder(|ast, selections, messages, condition):
+    (builder, arg, expected) -> error
+    with
+      selected := <resolve-selection(|selections) <+ !ast> Numbered("1");
+      input    := <get-service-input-term> selected;
+      if !arg => Argument(arg') then
+        plugin-strategy-evaluate(id |<Language>, OVERRIDE_INPUT(arg'))
+      end;
+      output := <execute-service(|input)> builder
+    where
+      switch !output
+        case ?Some(output'):
+          with(result := <fetch-builder-result(|input, output')> condition);
+          error       := <check-builder-expectation(|result)> expected
+        case ?Error(m):
+          if not(!condition => Fails()) then
+            error := $[Unexpected error: [m]]
+          end
+        case ?Fail(m):
+          error  := $[Unexpected error: [m]]
+        otherwise: with(fail)
+      end
+  
+  fetch-builder-result(|input, output):
+    Run(_, _, _) -> output
+  
+  fetch-builder-result(|input, output):
+    Build(_, _, _) -> result
+    with
+      !output => (<is-string>, result)
+    <+
+      !output => result
+  
+  fetch-builder-result(|input, output):
+    Refactor(_, _, _) -> result
+    with
+      !output => <one(?(input, _); ?(_, result))>
+    <+
+      !output => [(_, result) | _]
+    <+
+      !output => (_, result)
+    <+
+      !output => result
+   
+  check-builder-expectation(|result) :
+    Fails() -> $[Builder was expected to fail, but produced: [result]]
+   
+  check-builder-expectation(|result) :
+    File(_) -> $[Builder comparison to file is not implemented] // TODO
+   
+  check-builder-expectation(|result) :
+    Fragment(_{^[ast | _]}) -> $[Unexpected output: [result']]
+    where
+      not(<eq> (result, ast))
+    with
+      result' := <spt-pp-string> result
+    <+
+      result' := $[[<write-to-string> result] instead of [<write-to-string> ast]]
+   
+  check-builder-expectation(|result) :
+    ATerm(p) -> $[Unexpected output: [<write-to-string> result]]
+    where
+      not(<aterm-eq> (result, p))

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Apr 14 16:31:31 2011	(r22535)
@@ -10,6 +10,7 @@
   file-resolving
   check-resolve
   check-complete
+  check-builders
 
 signature constructors
   error : Term * Term -> Term
@@ -126,14 +127,14 @@
     pattern(p) -> $[Does not match pattern: [<write-to-string> ast]]
     where
       exploded := <explode-aterm> ast
-    ; not(<aterm-eq> (exploded, <aterm-appl0-to-fun> p))
+    ; not(<aterm-eq> (exploded, p))
 
   check-expectation(|ast, selections, messages) :
     file(f) -> $[Does not match pattern: [<write-to-string> ast]]
     where
       exploded := <explode-aterm> ast
     ; p := <resolve-path(|<current-path>); ReadFromFile; explode-aterm> f
-    ; not(<aterm-eq> (exploded, <aterm-appl0-to-fun> p))
+    ; not(<aterm-eq> (exploded, p))
 
   check-expectation(|ast, selections, messages) :
     <not(is-semantic-failure-allowed)> -> $[Unexpected message(s): [<grab-messages> messages]]
@@ -231,7 +232,4 @@
     where
       !result => Some(result')
     ; result'' := <explode-aterm> result'
-    ; not(<aterm-eq> (result'', <aterm-appl0-to-fun> p))
-    
-  aterm-appl0-to-fun =
-    topdown(try(\appl(s, []) -> fun(s)\))
+    ; not(<aterm-eq> (result'', p))

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Thu Apr 14 16:29:53 2011	(r22534)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Thu Apr 14 16:31:31 2011	(r22535)
@@ -171,6 +171,11 @@
     | <spt-get-parsetable>
     )    
   
+  // Tries to pretty print an AST, or fails
+  spt-pp-string =
+    plugin-strategy-invoke(|<Language>, $[pp-[<lower-case> <Language>]-string]);
+    ?Some(<id>)
+  
   get-service-input-term =
     get-service-input-term(|<LastAnalyzedAst>)
   

From L.C.L.Kats at tudelft.nl  Thu Apr 14 19:09:27 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 14 Apr 2011 17:09:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22536 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing
	org.strategoxt.imp.testing/syntax
Message-ID: <20110414170927.DB3CA7F8040@mx1.tudelft.nl>

Author: LennartKats
Date: Thu Apr 14 17:09:27 2011
New Revision: 22536
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22536&sc=1

Log:
Support testing of "extract something" refactorings

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/builders.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SelectionFetcher.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/builders.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/builders.spt	Thu Apr 14 16:31:31 2011	(r22535)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/builders.spt	Thu Apr 14 17:09:27 2011	(r22536)
@@ -6,13 +6,14 @@
   module X
 ]]
 
+/*
 test Builder
   [[ entity Y {
        
      }
   ]] build generate-java
 
-test Refactoring
+test Rename refactoring
   [[ entity [[X]] {
        X : X
      }
@@ -20,6 +21,16 @@
      entity Y {
        X : Y
      }
-  ]]
+  ]]*/
+
+test Extract something refactoring
+  [[ entity X {
+       X : X
+       [[X : X
+       X : X]]
+     }
+  ]] refactor extract-entity /* to [[
+     ...
+  ]]*/
 
  
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SelectionFetcher.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SelectionFetcher.java	Thu Apr 14 16:31:31 2011	(r22535)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SelectionFetcher.java	Thu Apr 14 17:09:27 2011	(r22536)
@@ -14,6 +14,7 @@
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.terms.TermVisitor;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.stratego.StrategoTermPath;
 
 /**
  * Lamely-named class for fetching selections in test
@@ -26,26 +27,41 @@
 	public IStrategoList fetch(IStrategoTerm parsedFragment) {
 		final List<IStrategoTerm> results = new ArrayList<IStrategoTerm>();
 		new TermVisitor() {
+			IStrategoTerm unclosedChild;
 			public void preVisit(IStrategoTerm term) {
 				IToken left = getTokenBefore(getLeftToken(term));
 				IToken right = getTokenAfter(getRightToken(term));
-				if (isOpenQuote(left) && isCloseQuote(right)) {
-					results.add(term);
+				if (isOpenQuote(left)) {
+					if (isCloseQuote(right)) {
+						results.add(term);
+					} else {
+						unclosedChild = term;
+					}
+				}
+			}
+			
+			@Override
+			public void postVisit(IStrategoTerm term) {
+				IToken right = getTokenAfter(getRightToken(term));
+				if (isCloseQuote(right)) {
+					if (unclosedChild != null)
+						results.add(StrategoTermPath.findCommonAncestor(unclosedChild, term));
+					unclosedChild = null;
 				}
 			}
 		}.visit(parsedFragment);
 		return Environment.getTermFactory().makeList(results);
 	}
 
-	private boolean isOpenQuote(IToken left) {
+	protected boolean isOpenQuote(IToken left) {
 		return left != null && left.getKind() == TK_ESCAPE_OPERATOR && isQuoteOpenText(left.toString());
 	}
 
-	private boolean isCloseQuote(IToken right) {
+	protected boolean isCloseQuote(IToken right) {
 		return right != null && right.getKind() == TK_ESCAPE_OPERATOR && !isQuoteOpenText(right.toString());
 	}
 
-	private boolean isQuoteOpenText(String contents) {
+	protected boolean isQuoteOpenText(String contents) {
 		// HACK: inspect string contents to find out if it's an open or close quote
 		if (contents.contains("[")) {
 			return true;

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Apr 14 16:31:31 2011	(r22535)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Apr 14 17:09:27 2011	(r22536)
@@ -51,7 +51,8 @@
     "->" ATerm -> StrategoResult {cons("StrategoEquals"), deprecated("Use => instead of ->")}
     Strategy   -> TestStratego
 
-    String                               -> TestStratego {reject}
+    STRING                               -> TestStratego {reject}
+    "(" STRING ")"                       -> TestStratego {reject} %% (e.g., refactor ("STRING"))
     "[" {Strategy ","}* "]"              -> TestStratego {reject}
     "[" {Strategy ","}* "|" Strategy "]" -> TestStratego {reject}
     Strategy "=>" Term                   -> TestStratego {reject}

From L.C.L.Kats at tudelft.nl  Thu Apr 14 19:10:03 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 14 Apr 2011 17:10:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22537 -
	spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans
Message-ID: <20110414171003.7D19B7F8010@mx1.tudelft.nl>

Author: LennartKats
Date: Thu Apr 14 17:10:03 2011
New Revision: 22537
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22537&sc=1

Log:
dummy "extract something" refactoring

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/refactorings.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/refactorings.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/refactorings.str	Thu Apr 14 17:09:27 2011	(r22536)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/trans/refactorings.str	Thu Apr 14 17:10:03 2011	(r22537)
@@ -18,4 +18,7 @@
     Entity(old-name, y) -> Entity(new-name, y)
 
   rename-type(|old-name, new-name):
-    Type(old-name) -> Type(new-name)
\ No newline at end of file
+    Type(old-name) -> Type(new-name)
+  
+  extract-entity: // TODO
+    x -> x
\ No newline at end of file

From L.C.L.Kats at tudelft.nl  Thu Apr 14 19:10:14 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 14 Apr 2011 17:10:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22538 - in
	spoofax-imp/trunk: experimental/NamingExperiment/lib
	experimental/NamingExperiment/test org.strategoxt.imp.editors.aster
	org.strategoxt.imp.editors.aster/lib or...
Message-ID: <20110414171014.38485108C003@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Apr 14 17:10:13 2011
New Revision: 22538
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22538&sc=1

Log:
generated stuff

Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/lib/editor-common.generated.str
   spoofax-imp/trunk/experimental/NamingExperiment/test/example.analyzed.aterm
   spoofax-imp/trunk/org.strategoxt.imp.editors.aster/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.aster/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.pp/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.pp/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.types/lib/editor-common.generated.str

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/editor-common.generated.str	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/editor-common.generated.str	Thu Apr 14 17:10:13 2011	(r22538)
@@ -143,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Modified: spoofax-imp/trunk/experimental/NamingExperiment/test/example.analyzed.aterm
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/test/example.analyzed.aterm	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/experimental/NamingExperiment/test/example.analyzed.aterm	Thu Apr 14 17:10:13 2011	(r22538)
@@ -1,114 +1,71 @@
 ( Module(
-    "M"{[Module(), "M"]}
-  , [ Entity("A"{[Entity(), "A", "M"]}, [Property("x"{[Property(), "x", "A", "M"]}, "B"{[Entity(), "B", "M"]})])
+    "Y"{[Module(), "Y"]}
+  , [ Import("\"N\"")
+    , Entity("A"{[Entity(), "A", "Y"]}, [Property("x"{[Property(), "x", "A", "Y"]}, "BX"{[Unresolved(Entity()), "BX", "Y"]})])
     , Entity(
-        "B"{[Entity(), "B", "M"]}
-      , [ Property("y"{[Property(), "y", "B", "M"]}, "A"{[Entity(), "A", "M"]})
+        "B"{[Entity(), "B", "Y"]}
+      , [ Property("y"{[Property(), "y", "B", "Y"]}, "A"{[Entity(), "A", "Y"]})
         , Function(
-            "f"{[Function(), "f", "B", "M"]}
-          , [Param("a"{[Var(), "a", "f", "B", "M"]}, "A"{[Entity(), "A", "M"]})]
+            "f"{[Function(), "f", "B", "Y"]}
+          , [Param("a"{[Var(), "a", "f", "B", "Y"]}, "A"{[Entity(), "A", "Y"]})]
           , Block(
-              [ VarDeclInit(
-                  "v"{[Var(), "v", Anon("l_2201"), "f", "B", "M"]}
-                , "B"{[Entity(), "B", "M"]}
-                , PropAccess(
-                    PropAccess(PropAccess(PropAccess(Var("a"{[Var(), "a", "f", "B", "M"]}), "x"{[Property(), "x", "A", "M"]}), "y"{[Property(), "y", "B", "M"]}), "x"{[Property(), "x", "A", "M"]})
-                  , "x"{[Unresolved(Property()), "x", "B", "M"]}
-                  )
-                )
-              , Assign("v"{[Var(), "v", Anon("l_2201"), "f", "B", "M"]}, Var("y"{[Property(), "y", "B", "M"]}))
-              , Assign("v"{[Var(), "v", Anon("l_2201"), "f", "B", "M"]}, Call("f"{[Function(), "f", "B", "M"]}, [Var("v"{[Var(), "v", Anon("l_2201"), "f", "B", "M"]})]))
-              , VarDecl("v"{[Var(), "v", Anon("l_2201"), "f", "B", "M"]}, "B"{[Entity(), "B", "M"]})
-              ]
+              [VarDeclInit("y"{[Var(), "y", Anon("t_3000"), "f", "B", "Y"]}, "A"{[Entity(), "A", "Y"]}, PropAccess(Var("a"{[Var(), "a", "f", "B", "Y"]}), "x"{[Property(), "x", "A", "Y"]}))]
             )
           )
         ]
       )
     ]
   )
-, [ Def([Module(), "M"])
-  , Def([Entity(), "A", "M"])
-  , Def([Property(), "x", "A", "M"])
-  , Def([Entity(), "B", "M"])
-  , Def([Property(), "y", "B", "M"])
-  , Def([Function(), "f", "B", "M"])
-  , Def([Var(), "a", "f", "B", "M"])
+, [ Def([Module(), "Y"])
+  , Def([Entity(), "A", "Y"])
+  , Def([Property(), "x", "A", "Y"])
+  , Def([Entity(), "B", "Y"])
+  , Def([Property(), "y", "B", "Y"])
+  , Def([Function(), "f", "B", "Y"])
+  , Def([Var(), "a", "f", "B", "Y"])
   , Def(
-      [Var(), "v", Anon("l_2201"), "f", "B", "M"]
-    )
-  , Def(
-      [Var(), "v", Anon("l_2201"), "f", "B", "M"]
+      [Var(), "y", Anon("t_3000"), "f", "B", "Y"]
     )
   ]
-, [ Use([Entity(), "M"], [Entity(), "B", "M"])
-  , Use([Entity(), "M"], [Entity(), "A", "M"])
-  , Use([Entity(), "M"], [Entity(), "A", "M"])
-  , Use([Entity(), "M"], [Entity(), "B", "M"])
-  , Use(
-      [Var(), Anon("l_2201"), "f", "B", "M"]
-    , [Var(), "a", "f", "B", "M"]
-    )
-  , Use(
-      [Property(), "B", "M"]
-    , [Property(), "x", "A", "M"]
-    )
-  , Use(
-      [Property(), "B", "M"]
-    , [Property(), "y", "B", "M"]
-    )
-  , Use(
-      [Property(), "B", "M"]
-    , [Property(), "x", "A", "M"]
-    )
-  , BadUse([Unresolved(Property()), "x", "B", "M"])
-  , Use(
-      [Var(), Anon("l_2201"), "f", "B", "M"]
-    , [Var(), "v", Anon("l_2201"), "f", "B", "M"]
-    )
-  , Use(
-      [Var(), Anon("l_2201"), "f", "B", "M"]
-    , [Property(), "y", "B", "M"]
-    )
-  , Use(
-      [Var(), Anon("l_2201"), "f", "B", "M"]
-    , [Var(), "v", Anon("l_2201"), "f", "B", "M"]
-    )
+, [ BadUse([Unresolved(Entity()), "BX", "Y"])
+  , Use([Entity(), "Y"], [Entity(), "A", "Y"])
+  , Use([Entity(), "Y"], [Entity(), "A", "Y"])
+  , Use([Entity(), "Y"], [Entity(), "A", "Y"])
   , Use(
-      [Function(), "B", "M"]
-    , [Function(), "f", "B", "M"]
+      [Var(), Anon("t_3000"), "f", "B", "Y"]
+    , [Var(), "a", "f", "B", "Y"]
     )
   , Use(
-      [Var(), Anon("l_2201"), "f", "B", "M"]
-    , [Var(), "v", Anon("l_2201"), "f", "B", "M"]
+      [Property(), "B", "Y"]
+    , [Property(), "x", "A", "Y"]
     )
-  , Use([Entity(), "M"], [Entity(), "B", "M"])
   ]
-, [ DefData(Type(), [Entity(), "A", "M"], ENTITY("A"{[Entity(), "A", "M"]}))
+, [ DefData(Type(), [Entity(), "A", "Y"], ENTITY("A"{[Entity(), "A", "Y"]}))
   , DefData(
       Type()
-    , [Property(), "x", "A", "M"]
-    , ENTITY("B"{[Unresolved(Entity()), "B", "M"]})
+    , [Property(), "x", "A", "Y"]
+    , ENTITY("BX"{[Unresolved(Entity()), "BX", "Y"]})
     )
-  , DefData(Type(), [Entity(), "B", "M"], ENTITY("B"{[Entity(), "B", "M"]}))
+  , DefData(Type(), [Entity(), "B", "Y"], ENTITY("B"{[Entity(), "B", "Y"]}))
   , DefData(
       Type()
-    , [Property(), "y", "B", "M"]
-    , ENTITY("A"{[Unresolved(Entity()), "A", "M"]})
+    , [Property(), "y", "B", "Y"]
+    , ENTITY("A"{[Unresolved(Entity()), "A", "Y"]})
     )
   , DefData(
       ParamTypes()
-    , [Function(), "f", "B", "M"]
-    , [ENTITY("A"{[Unresolved(Entity()), "A", "M"]})]
+    , [Function(), "f", "B", "Y"]
+    , [ENTITY("A"{[Unresolved(Entity()), "A", "Y"]})]
     )
   , DefData(
       Type()
-    , [Var(), "a", "f", "B", "M"]
-    , ENTITY("A"{[Unresolved(Entity()), "A", "M"]})
+    , [Var(), "a", "f", "B", "Y"]
+    , ENTITY("A"{[Unresolved(Entity()), "A", "Y"]})
     )
   , DefData(
       Type()
-    , [Var(), "v", Anon("l_2201"), "f", "B", "M"]
-    , ENTITY("B"{[Unresolved(Entity()), "B", "M"]})
+    , [Var(), "y", Anon("t_3000"), "f", "B", "Y"]
+    , ENTITY("A"{[Unresolved(Entity()), "A", "Y"]})
     )
   ]
 )
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aster/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aster/build.generated.xml	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aster/build.generated.xml	Thu Apr 14 17:10:13 2011	(r22538)
@@ -4,7 +4,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/org/strategoxt/imp/editors/aster/strategies/Main.class" property="java.jar.enabled"/>
@@ -16,7 +16,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -312,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -334,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         
@@ -350,7 +349,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -368,7 +367,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -417,6 +416,152 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information"/>
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aster/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aster/lib/editor-common.generated.str	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aster/lib/editor-common.generated.str	Thu Apr 14 17:10:13 2011	(r22538)
@@ -143,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml	Thu Apr 14 17:10:13 2011	(r22538)
@@ -4,7 +4,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/org/strategoxt/imp/editors/aterm/strategies/Main.class" property="java.jar.enabled"/>
@@ -16,7 +16,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -312,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -334,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         
@@ -350,7 +349,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -368,7 +367,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -417,6 +416,152 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information"/>
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml	Thu Apr 14 17:10:13 2011	(r22538)
@@ -4,7 +4,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/org/strategoxt/imp/editors/editorservice/strategies/Main.class" property="java.jar.enabled"/>
@@ -16,7 +16,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -312,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -334,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         
@@ -350,7 +349,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -368,7 +367,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -417,6 +416,152 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information"/>
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/lib/editor-common.generated.str	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/lib/editor-common.generated.str	Thu Apr 14 17:10:13 2011	(r22538)
@@ -143,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.pp/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.pp/build.generated.xml	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.pp/build.generated.xml	Thu Apr 14 17:10:13 2011	(r22538)
@@ -4,7 +4,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/org/strategoxt/imp/editors/pp/strategies/Main.class" property="java.jar.enabled"/>
@@ -16,7 +16,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -312,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -334,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         
@@ -350,7 +349,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -368,7 +367,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -417,6 +416,152 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information"/>
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.pp/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.pp/lib/editor-common.generated.str	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.pp/lib/editor-common.generated.str	Thu Apr 14 17:10:13 2011	(r22538)
@@ -143,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.generated.xml	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.generated.xml	Thu Apr 14 17:10:13 2011	(r22538)
@@ -4,7 +4,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/org/strategoxt/imp/editors/rtg/strategies/Main.class" property="java.jar.enabled"/>
@@ -16,7 +16,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -312,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -334,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         
@@ -350,7 +349,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -368,7 +367,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -417,6 +416,152 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information"/>
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/lib/editor-common.generated.str	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/lib/editor-common.generated.str	Thu Apr 14 17:10:13 2011	(r22538)
@@ -143,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml	Thu Apr 14 17:10:13 2011	(r22538)
@@ -4,7 +4,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/org/strategoxt/imp/editors/sdf/strategies/Main.class" property="java.jar.enabled"/>
@@ -16,7 +16,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -312,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -334,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         
@@ -350,7 +349,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -368,7 +367,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -417,6 +416,152 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information"/>
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/lib/editor-common.generated.str	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/lib/editor-common.generated.str	Thu Apr 14 17:10:13 2011	(r22538)
@@ -143,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml	Thu Apr 14 17:10:13 2011	(r22538)
@@ -4,7 +4,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/org/strategoxt/imp/editors/spoofax/strategies/Main.class" property="java.jar.enabled"/>
@@ -16,7 +16,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -312,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -334,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         
@@ -350,7 +349,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -368,7 +367,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -417,6 +416,152 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information"/>
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/editor-common.generated.str	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/editor-common.generated.str	Thu Apr 14 17:10:13 2011	(r22538)
@@ -143,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Thu Apr 14 17:10:13 2011	(r22538)
@@ -4,7 +4,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/org/strategoxt/imp/editors/stratego/strategies/Main.class" property="java.jar.enabled"/>
@@ -16,7 +16,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -312,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -334,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         
@@ -350,7 +349,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -368,7 +367,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -417,6 +416,152 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information"/>
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str	Thu Apr 14 17:10:13 2011	(r22538)
@@ -143,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/build.generated.xml	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/build.generated.xml	Thu Apr 14 17:10:13 2011	(r22538)
@@ -4,7 +4,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/org/strategoxt/imp/testing/test/strategies/Main.class" property="java.jar.enabled"/>
@@ -16,7 +16,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -25,6 +25,9 @@
         <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
             <isset property="eclipse.running"/>
         </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
         </condition>
@@ -309,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -331,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         
@@ -347,7 +349,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -365,7 +367,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -414,6 +416,152 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information"/>
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/lib/editor-common.generated.str	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/lib/editor-common.generated.str	Thu Apr 14 17:10:13 2011	(r22538)
@@ -203,11 +203,6 @@
 
   subterm-at(|index):
     _#(t*) -> <index(|<inc> index)> t*
-
-strategies
-  
-  input-dialog-override:
-    s -> <prim("SSL_EXT_overrideinput", s)>
   
 signature constructors
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Thu Apr 14 17:10:13 2011	(r22538)
@@ -4,7 +4,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/org/strategoxt/imp/testing/strategies/Main.class" property="java.jar.enabled"/>
@@ -16,7 +16,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -349,7 +349,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -367,7 +367,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -416,6 +416,152 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information"/>
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str	Thu Apr 14 17:10:13 2011	(r22538)
@@ -203,11 +203,6 @@
 
   subterm-at(|index):
     _#(t*) -> <index(|<inc> index)> t*
-
-strategies
-  
-  input-dialog-override:
-    s -> <prim("SSL_EXT_overrideinput", s)>
   
 signature constructors
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.types/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.types/lib/editor-common.generated.str	Thu Apr 14 17:10:03 2011	(r22537)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/lib/editor-common.generated.str	Thu Apr 14 17:10:13 2011	(r22538)
@@ -143,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

From M.A.Akhter at student.tudelft.nl  Thu Apr 14 22:21:41 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 14 Apr 2011 20:21:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22539 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: test
	trans/context/sdf trans/context/str trans/unit-tests trans/utils
Message-ID: <20110414202141.79143108C005@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 14 20:21:41 2011
New Revision: 22539
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22539&sc=1

Log:
* more refactoring on how the signatures are stored 

* writing  the default spx entity lang in SPOOFAX Lang

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/contracts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Thu Apr 14 17:10:13 2011	(r22538)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Thu Apr 14 20:21:41 2011	(r22539)
@@ -11,18 +11,28 @@
 	    ID ":" Type                   -> Property {cons("Property")}
 	    ID                            -> Type {cons("Type")}
 
+		language General properties
+    	name          : entity-lang
+  		id            : entity-lang
+  		extends       : Root
+                  
+  		description   : "Spoofax/IMP-generated editor for the TestSpoofax language"
+  		url           : http://strategoxt.org
+                  
+  		extensions    : ent
+  		start symbols : Start
 	}
 	
-	module builders
+	module entity-builders 
 	{
 		builders
                                                                                                                                
 			provider                  : include/testspoofax-java.jar                                                                     
 	    observer                  : editor-analyze                                                                                   
 	                                                                                                                           
-	  	builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
-	 		builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
-  }
+	  	builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)
+	  	
+	}
 }
 
 package entity  

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Thu Apr 14 17:10:13 2011	(r22538)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Thu Apr 14 20:21:41 2011	(r22539)
@@ -212,22 +212,35 @@
 		 		(!available-opdecl* => []) 
 				<+ 
 				not (<assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)>available-opdecl*)
-			)then 
-					
-					rules
-				 		(
-				 				Get-Operation-Singature  :+  scoped-operation-name -> (operation-name , <length>opernand-sorts*)
-				 				Get-Operation-Declaration:+  scoped-operation-name -> (operation-name , opernand-sorts* , resultant-sort)
-				 		)    
-				 		; <debug-declaration> $[DeclareSDF | Stored operation declration of production: [<pp-aterm> production] as the following : [<pp-aterm> ( operation-name , opernand-sorts* , resultant-sort) ].]
-				 		; <debug-declaration> $[DeclareSDF | Stored operation signature: [<pp-aterm> scoped-operation-name] -> [<pp-aterm> (operation-name , <length>opernand-sorts*)].]  
+			)
+			then 
+				enable-declaration-debugging; 
+				store-operation-declaration(|scoped-operation-name  , operation-name  , opernand-sorts* , resultant-sort) // storing this operation declaration 
+					   
+				; <debug-declaration> $[DeclareSDF | Stored operation declration of production: [<pp-aterm> production] as the following : [<pp-aterm> ( operation-name , opernand-sorts* , resultant-sort) ].]
+				; <debug-declaration> $[DeclareSDF | Stored operation signature: [<pp-aterm> scoped-operation-name] -> [<pp-aterm> (operation-name , <length>opernand-sorts*)].]  
+ 		 		; disable-declaration-debugging
  		 	else 
  		 			<debug-declaration> $[DeclareSDF | Waring | There is an existing operation declration of production: [<pp-aterm> production] as the following : [<pp-aterm>(operation-name, opernand-sorts* , resultant-sort)] 
  		 								DeclareSDF | Debug-info: scoped-op-name [<pp-aterm>scoped-operation-name]. ]
 			end
+	
 			
 	create-opname2opdecl-mapping(|operation-name, resultant-sort , production): alt-sort -> alt-sort  
 		where 
 			  alt-srt-lst := [alt-sort]
 			  ;create-opname2opdecl-mapping(|operation-name, alt-srt-lst, resultant-sort , production)
 
+
+	store-operation-declaration ( |scoped-op-name ,  opname , operand-sort* ,  resultant-sort) = 
+		where (
+			rules(
+					Get-Operation-Singature  :+  scoped-op-name   -> (opname  , <length>operand-sort*)
+				 	Get-Operation-Declaration:+  scoped-op-name   -> (opname  , operand-sort* , resultant-sort)
+				)    
+		) 
+
+	
+		 
+		
+		

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Thu Apr 14 17:10:13 2011	(r22538)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Thu Apr 14 20:21:41 2011	(r22539)
@@ -13,7 +13,7 @@
 imports	
 	utils/sourcedir
  	utils/debug
- 	common
+ 	common 
 	config 
 imports 
 	context/str/signature-generator
@@ -37,10 +37,12 @@
  			fail
 	 
 rules 
+	
 	is-constructor =
     (?(_, _); getCookie; getStrDeclaration <+ declaration-of);
     (?OpDecl(_, _) + ?ExtOpDecl(_, _))
 
+  
   is-congruence-signature:
     (x, s, 0) -> (x, s, [])
     where
@@ -69,6 +71,7 @@
       else
        	cookie := <getCookie> sig 
       end
+
 
   redeclare-definition:
     def -> cookie

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/contracts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/contracts.str	Thu Apr 14 17:10:13 2011	(r22538)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/contracts.str	Thu Apr 14 20:21:41 2011	(r22539)
@@ -30,7 +30,7 @@
 	
 	test-dummy-strategy : list* -> list* 
 	where contracts(
-		contract-requires( is-list | list*, "list")
+		contract-requires( is-list | list*, "list") 
 	)
 					
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str	Thu Apr 14 17:10:13 2011	(r22538)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str	Thu Apr 14 20:21:41 2011	(r22539)
@@ -11,7 +11,7 @@
 	contract-requires ( s , on-fail | arg , expected) =
 			contract-requires ( s | arg , expected)
 		<+
-			on-fail
+			on-fail 
 		
 		
 	contract-requires ( s | arg , expected) =

From M.A.Akhter at student.tudelft.nl  Fri Apr 15 04:16:56 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 15 Apr 2011 02:16:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22540 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	codegen codegen/sdf context context/sdf
Message-ID: <20110415021656.9149F108C005@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 15 02:16:54 2011
New Revision: 22540
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22540&sc=1

Log:
* added default signature constructors in delcare init 
* added documentation and few thing to do in signature generation

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Apr 14 20:21:41 2011	(r22539)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Fri Apr 15 02:16:54 2011	(r22540)
@@ -21,8 +21,10 @@
 imports	
 	codegen/generate-all
 	codegen/buildscripts
-imports 	
-	context/str/declare  //TODO : refactor : move it to declare all when handling all types of legacy artifacts. Currently only considering STR Libs 
+imports
+	context/declare 	
+	context/str/declare  //TODO : refactor : move it to declare all when handling all types of legacy artifacts. Currently only considering STR Libs
+	 
 
 rules			// Starting a new compilation session   
 	
@@ -49,10 +51,16 @@
 rules 	// Compiler initialization 
 			
 	compiler-init = 
+		// Getting Source directory to start parsing files if needed. 
+		// Otherwise, it reads from the cache
 		where( 
 			bagof-SPX-Source-Dir => spx-sources
 		);
-		<list-loop(parse-spx-sources)> spx-sources   	
+		//Iterating all the configured source directory 
+		<list-loop(parse-spx-sources)> spx-sources;
+		//Initializes global symbols / default primitives 
+		init-declaration    	
+
 
 	parse-spx-sources : 
 		(sourcedir , searchOption) -> <id>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Thu Apr 14 20:21:41 2011	(r22539)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Fri Apr 15 02:16:54 2011	(r22540)
@@ -13,11 +13,11 @@
 	utils/cache
 	lib/editor-common.generated
 	context/scope-tree
-	context/signature
-	normalize/signatures 
-	include/spoofaxlang
+	context/signature 
+	normalize/signatures  
+	include/spoofaxlang 
 	utils/path
-	
+	 
 rules 
 	build-all:
 		(selected, position, ast, path, project-path) -> None()

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Thu Apr 14 20:21:41 2011	(r22539)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 15 02:16:54 2011	(r22540)
@@ -85,8 +85,10 @@
 				;rules (signature-import-path:= <append-if-not-empty(|relative-autogen-path, "/")> sig-file-name)
 						  
 rules 
-	
-	//generate signature 
+
+	// Instead of using String interpolation,
+	// generate the default constructors using global contructor defined 
+	// during init-declartion   
 	get-signature-contents(|moduleName): signatures-string ->
 $[module [moduleName]
 signature

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Thu Apr 14 20:21:41 2011	(r22539)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Fri Apr 15 02:16:54 2011	(r22540)
@@ -2,6 +2,7 @@
 
 imports 
 	context/sdf/declare
+	context/sdf/declare-signature
 	context/str/declare
 	context/scope-tree
 	context/signature
@@ -17,6 +18,7 @@
 rules		
 	declare-all = declare-sdf-all;declare-esv-all ; declare-str-all; update-modified-module-declaration   
 
+	init-declaration = init-record-signatures 
 rules	
 	declare-sdf-all = declare-spxmodules-all(declare-sdf-section) 
 	declare-str-all = declare-spxmodules-all(declare-str-section)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Thu Apr 14 20:21:41 2011	(r22539)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Fri Apr 15 02:16:54 2011	(r22540)
@@ -8,7 +8,7 @@
 imports 
 	context/scope-tree
 	context/sdf/declare
-		
+	context/signature	
 
 // TODO : refactor common functionily in seperate rules/strategy
 // DON'T like several things about this implementation. Need to refactor/re-implement.
@@ -206,7 +206,8 @@
 	*	
 	*/		  
 	create-opname2opdecl-mapping(|operation-name, opernand-sorts*, resultant-sort , production) =
-		 available-opdecl*     := <getOperationSignatures>operation-name
+		where (<debug-declaration> $[DeclareSDF | Storing Signature for following production: [<pp-aterm> production]])
+		;available-opdecl*     := <getOperationSignatures>operation-name
 		;scoped-operation-name := <to-scoped-symbol>operation-name   
 		;if(
 		 		(!available-opdecl* => []) 
@@ -214,33 +215,37 @@
 				not (<assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)>available-opdecl*)
 			)
 			then 
-				enable-declaration-debugging; 
-				store-operation-declaration(|scoped-operation-name  , operation-name  , opernand-sorts* , resultant-sort) // storing this operation declaration 
-					   
-				; <debug-declaration> $[DeclareSDF | Stored operation declration of production: [<pp-aterm> production] as the following : [<pp-aterm> ( operation-name , opernand-sorts* , resultant-sort) ].]
-				; <debug-declaration> $[DeclareSDF | Stored operation signature: [<pp-aterm> scoped-operation-name] -> [<pp-aterm> (operation-name , <length>opernand-sorts*)].]  
- 		 		; disable-declaration-debugging
+				record-operation-declaration(|scoped-operation-name  , operation-name  , opernand-sorts* , resultant-sort) // storing this operation declaration 
  		 	else 
- 		 			<debug-declaration> $[DeclareSDF | Waring | There is an existing operation declration of production: [<pp-aterm> production] as the following : [<pp-aterm>(operation-name, opernand-sorts* , resultant-sort)] 
+ 		 		<debug-declaration> $[DeclareSDF | Waring | There is an existing operation declration of production: [<pp-aterm> production] as the following : [<pp-aterm>(operation-name, opernand-sorts* , resultant-sort)] 
  		 								DeclareSDF | Debug-info: scoped-op-name [<pp-aterm>scoped-operation-name]. ]
 			end
 	
-			
 	create-opname2opdecl-mapping(|operation-name, resultant-sort , production): alt-sort -> alt-sort  
 		where 
 			  alt-srt-lst := [alt-sort]
 			  ;create-opname2opdecl-mapping(|operation-name, alt-srt-lst, resultant-sort , production)
 
-
-	store-operation-declaration ( |scoped-op-name ,  opname , operand-sort* ,  resultant-sort) = 
+	record-operation-declaration ( |scoped-op-name ,  opname , operand-sort* ,  resultant-sort) = 
 		where (
+			arg-length := <length>operand-sort*;
 			rules(
-					Get-Operation-Singature  :+  scoped-op-name   -> (opname  , <length>operand-sort*)
+					Get-Operation-Singature  :+  scoped-op-name   -> (opname  , arg-length )
 				 	Get-Operation-Declaration:+  scoped-op-name   -> (opname  , operand-sort* , resultant-sort)
-				)    
-		) 
-
-	
-		 
-		
-		
+				)
+			; <debug-declaration> $[DeclareSignature | Globals() | Stored operation declration : [<pp-aterm> ( opname , operand-sort* ,  resultant-sort) ].]
+			; <debug-declaration> $[DeclareSignature | Globals() | Stored operation signature  : [<pp-aterm> scoped-op-name] -> [<pp-aterm> (opname, <length>operand-sort*)].]
+	) 
+		
+	record-operation-declaration-at-global-scope ( | opname , operand-sort* ,  resultant-sort) = 
+		where ( <to-global-symbol> opname => scoped-op-name);	
+		record-operation-declaration( |scoped-op-name ,  opname , operand-sort* ,  resultant-sort) 
+
+
+rules
+	init-record-signatures = 
+			record-operation-declaration-at-global-scope ( |"None", [] 		,"Option(a)"); 
+			record-operation-declaration-at-global-scope ( |"Some", ["a"] ,"Option(a)");
+			record-operation-declaration-at-global-scope ( |"Cons", ["a","List(a)"] ,"List(a)");
+			record-operation-declaration-at-global-scope ( |"Nil", [] ,"List(a)");
+			record-operation-declaration-at-global-scope ( |"Conc", ["List(a)" , "List(a)"] ,"List(a)")
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Thu Apr 14 20:21:41 2011	(r22539)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Fri Apr 15 02:16:54 2011	(r22540)
@@ -37,7 +37,7 @@
 	 editor/main
 	 codegen/main
 
-rules 
+rules  
   editor-complete:
     (node, position, ast, path, project-path) -> proposals
     where

From M.A.Akhter at student.tudelft.nl  Fri Apr 15 04:17:44 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 15 Apr 2011 02:17:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22541 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor
Message-ID: <20110415021744.1F5F72B8002@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 15 02:17:43 2011
New Revision: 22541
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22541&sc=1

Log:
* added SPX colorer with the stratego coloring

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Colorer.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Colorer.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Colorer.esv	Fri Apr 15 02:16:54 2011	(r22540)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Colorer.esv	Fri Apr 15 02:17:43 2011	(r22541)
@@ -15,4 +15,63 @@
   
   _.namespaceref  : 0   96  96 italic
   _.namespaceref2 : 0   96  96 italic
-  _.namespacedef  : 0   96  96 italic
\ No newline at end of file
+  _.namespacedef  : 0   96  96 italic
+  
+  
+  
+   layout     : 63 127 95    italic
+
+  environment var:
+    0 128 64
+    255 255 255
+    italic
+    
+  // StrategyDef: 0 128 128 bold
+  // RuleDef:     0 128 128 bold
+  
+  // White background for variables and escapes
+  environment _.StringEscape1 : _ 255 255 255
+  environment _.StringEscape2 : _ 255 255 255
+  environment _.StringEscape3 : _ 255 255 255
+  environment _.StringEscape4 : _ 255 255 255
+  _.Wld     : _ 255 255 255
+
+  _.StringEscape1 : gray  
+  _.StringEscape2 : gray  
+  _.StringEscape3 : gray  
+  _.StringEscape4 : gray
+  
+  _.Str     : blue
+  _.StrCong : blue
+  _.QStr    : blue
+  _.QDollar : blue
+  _.QBr     : gray
+  
+  RuleDef     : 0 64 128 bold
+  RuleDec     : 0 64 128 bold
+  StrategyDef : 0 64 128 bold
+  Overlay     : 0 64 128 bold
+  
+  //strategies    = 0    0    0
+  strategycalls = 0   64  128
+  terms         = 0    0    0
+  vars          = 24 170 222 242 242 242 
+  sdefault      = 0    0    0
+  
+  _.RootApp : strategycalls
+  _.App     : strategycalls
+  
+  //Strategy  : strategies
+  SVar      : strategycalls
+  Term      : terms
+  PreTerm   : terms
+  Var       : vars
+  _.Var     : vars
+  _.ListVar : vars
+  _.Assign  : sdefault
+  _.AM      : sdefault
+
+  QuotedBracket1 : blue
+  QuotedBracket2 : blue
+  QuotedBracket3 : blue
+  QuotedBracket4 : blue
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Fri Apr 15 04:23:36 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 15 Apr 2011 02:23:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22542 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test
Message-ID: <20110415022336.8D9B62B8002@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 15 02:23:36 2011
New Revision: 22542
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22542&sc=1

Log:
* updating entity-lang with stratego builders

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Fri Apr 15 02:17:43 2011	(r22541)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Fri Apr 15 02:23:36 2011	(r22542)
@@ -20,18 +20,25 @@
   		url           : http://strategoxt.org
                   
   		extensions    : ent
-  		start symbols : Start
+  		start symbols : Start    
 	}
 	
-	module entity-builders 
+	
+	module entity-builders  
 	{
+			  
 		builders
                                                                                                                                
-			provider                  : include/testspoofax-java.jar                                                                     
+			provider                  : include/testspoofax-java.jar                                                                        
 	    observer                  : editor-analyze                                                                                   
 	                                                                                                                           
 	  	builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)
-	  	
+	
+	 	rules 
+			generate-java:
+  		  (selected, position, ast, path, project-path) -> None()
+    
+	 	
 	}
 }
 

From M.A.Akhter at student.tudelft.nl  Fri Apr 15 13:14:55 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 15 Apr 2011 11:14:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22543 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen/esv codegen/sdf codegen/str context/sdf
Message-ID: <20110415111455.0D3672B8008@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 15 11:14:54 2011
New Revision: 22543
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22543&sc=1

Log:
* refactoring code-gen - 1

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Fri Apr 15 02:23:36 2011	(r22542)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Fri Apr 15 11:14:54 2011	(r22543)
@@ -35,14 +35,12 @@
  			 project-path             := <ProjectPath>;
  			 Package(package-qname)   := <GetEnclosingPackageName>
  		where 
-			<debug-compiler>$[in generate-esv-main 1:]
+			<debug-compiler>$[codegen | ESV | generate-esv-main  : [<pp-aterm>package-qname]]
 		with	 
  			 relative-autogen-path :=  <qname-to-path>package-qname
  			;package-esv-main-name := <get-main-file-name>package-qname
  			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
  		where 
-			<debug-compiler>$[Getting Contents and creating esv-aterm :]	  
- 		where 
  			{|  Declared-Language-Description,Declared-Builders-Description,Declared-Colorer-Description,
  					Declared-Folding-Description,Declared-Outliner-Description,Declared-References-Description,
  					Declared-Completions-Description:
@@ -59,9 +57,10 @@
  			 							   )
  			|} 
  			;esv-aterm := Module(package-esv-main-name, <get-all-imports>module-qname*, sections) 
-		where
-			<debug-compiler>$[ESV 11]		
-		where	
+		where 
+			<debug-compiler>$[codegen | ESV | Creating content for the ESV Main of package [<pp-aterm>package-qname]. ]	  
+ 		where
+ 			// Saving the content to a file . 	
 			autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
 			;<ensure-exists>(autogen-root-directory , package-qname)
 			;output-path := <get-main-output-path(|"packed.esv")>(autogen-root-directory , package-qname)   
@@ -70,10 +69,6 @@
 			;chdir-to-project-path
 			 		
 	
-	to-esv-all: 
-		(def, path , project-path)  -> None()
-	
-	
 	/*
 	* Adding package ctree as the default semantic provider0
 	* 
@@ -84,7 +79,7 @@
 				package-output-ctree := $[include/[package-name].ctree]
 	
 	/*
-	* Returns all the imports for the current namespace.
+	* Returns all the imports for the current namespace. 
 	*/
  	get-all-imports = 
  		?mod-qname*
@@ -92,6 +87,7 @@
  		;!Imports(import-decl* ) 		
 	 		
 rules
+	
 	/**
 	* Converts ( package-name , concept-name) to stratego import
 	* 
@@ -111,7 +107,6 @@
  	*/
  	store-esv-defintions:
  		 m at Module(attrb* , modname , section*) -> m
-		 where debug(!"Inside module definition : ")
 		 with
 		 	<alltd(store-esv-def)> section* 
  

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Fri Apr 15 02:23:36 2011	(r22542)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Fri Apr 15 11:14:54 2011	(r22543)
@@ -35,31 +35,29 @@
  			package-typed-qname := <GetEnclosingPackageName> 
 			;module-typed-qname  := <GetEnclosingModuleName> 
 			<+ 
-			<debug-compiler>$[ CodeGeneration | SDF | Failed to create current scope.] 
+			<debug-compiler>$[ codegen | SDF | Failed to create current scope.] 
 			;fail
 		where
 			 !module-typed-qname  => Module(module-untyped-qname)
 			;!package-typed-qname => Package(package-untyped-qname)
-		where <debug-compiler>$[ 2 ]
 		where
 			Module(_, _ , section') := <get-module-declaration>module-typed-qname
 			;import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> section'
 		  ;sections    := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> section*
-    where <debug-compiler>$[ 3 ]
+    where 
+    	<debug-compiler>$[ codegen | SDF | Found Section + Imports for the following module [<pp-aterm> module-untyped-qname].]
     where
     	sections'        := <topdown(repeat(desugar-sdf-redux))> <list-to-conc-grammars> sections
      ;import-temp      := <sdf-import-declarations> import-stmt* 
      ;sdf-import-stmt* := 'imports( import-temp  )
      ;sdf-string       := <pp-sdf-string'> 'module(<qname-to-path>module-untyped-qname, [sdf-import-stmt*], [exports(sections')])
-   	where 
-			<debug-compiler>$[ 4 ]
-		where //set up folders
+   where //set up folders
    		 autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
    		;<debug(!"autogen-root : ")>autogen-root-directory  
 			;<ensure-exists>(autogen-root-directory, package-untyped-qname)
 			;output-path     := <get-output-path(|"sdf")>(autogen-root-directory , module-untyped-qname)
 		where 
-			<debug-compiler>$[ to sdf g 5 ]
+			<debug-compiler>$[ codegen | SDF | Saving the artifacts of [<pp-aterm> module-untyped-qname].]
 		where 
 			 <save-to-file>(output-path , sdf-string )
 			;<refresh-workspace-file>output-path
@@ -69,10 +67,10 @@
 	generate-sdf-main:  module-qname* -> <id>
 		with 
  			 project-path             := <ProjectPath>;
- 			 Package(package-qname)   := <GetEnclosingPackageName>
- 		where <debug-compiler>$[ SDF MAIN ]
- 		with	 
+ 			 Package(package-qname)   := <GetEnclosingPackageName>;
  			 relative-autogen-path :=  <qname-to-path>package-qname
+ 		where 
+ 			<debug-compiler>$[ codegen | SDF | Generating main for the following package : [<pp-aterm> package-qname].]
  		where
 			sdf-string := 
 	    $[module [relative-autogen-path]/[<get-main-file-name>package-qname]
@@ -80,7 +78,7 @@
 		      	[<map(pp-sdf-import)>module-qname*]   									 
 	     ]
 	  where 
-	  	<debug-compiler>$[ SDF MAIN 3]
+	  	<debug-compiler>$[ codegen | SDF | Content of the main SDF is generated for the package : [<pp-aterm> package-qname].]
 		where
 			autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
 			;autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
@@ -93,8 +91,7 @@
 		
  to-sdf-all: (def, path , project-path)  -> None()
  		
- 	to-sdf(|project-path):
-		(package-name,concept-name,def) -> None()
+ to-sdf(|project-path): (package-name,concept-name,def) -> None()
 				
 
 rules
@@ -148,17 +145,16 @@
 									 ]
 rules
 	sdf-import-declarations =
-		
 		?imports*;
 		map(debug;sdf-import-declaration;debug);
 		flatten-list;
 		make-set;
-		where(<debug-compiler>$[ SDF MAIN Result import :  [<pp-aterm>]]) 
+		where(<debug-compiler>$[codegen | SDF | Resultant imports :  [<pp-aterm>]]) 
 		
 	sdf-import-declaration: 
 		i at ImportPackage(package-qname) -> results
 		where 
-			<debug-compiler>$[ SDF MAIN Result import package]
+			<debug-compiler>$[ codegen | SDF |  SDF MAIN Result import package]
 		where 
 			if not(<DeclaredPackage>package-qname) then
 				<debug-compiler>$[ SDF MAIN Result import package Found NA];
@@ -166,13 +162,11 @@
 			else
 				<get-enclosed-modules>Package(package-qname) => modules*;
 				<map(?Module(<id>) ; qname-to-path ; to-sdf-import)> modules* => results;
-				<debug-compiler>$[ SDF MAIN Result import package Result : ]
+				<debug-compiler>$[ codegen | SDF |  SDF MAIN Result import package Result : ]
 			end
 	
 	sdf-import-declaration: 
 		i at ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
-		where 
-			<debug-compiler>$[ SDF MAIN Result import module : ] 
 		where
 			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
 			;if(not(<DeclaredModule>module-qname))  then
@@ -181,27 +175,28 @@
 				module-name-path    := <qname-to-path>module-qname
 				;<to-sdf-import>module-name-path => result'
 				;result := [result']  
-			end 
+			end
+		where 
+			<debug-compiler>$[ codegen | SDF | import module :  [<pp-aterm>result]] 
+		 
 	
 	sdf-import-declaration: i at ImportPackage(Name(package-name)) -> result
-	where 
-		<debug-compiler>$[ SDF MAIN Result import name: ]
 	where
 		if <DeclaredPackage>QName([package-name]) then
 			<get-enclosed-modules>Package(QName([package-name])) => modules*
-			;debug(!"converting to module paths : ")
 			;<map(?Module(<id>) ; qname-to-path ; to-sdf-import)> modules* => result
-			;debug(!"results : ")
 		else
 			<to-sdf-import>package-name => result'
 			;result := [result']	
 		end
-		
+	where 
+			<debug-compiler>$[ codegen | SDF | import pcakage :  [<pp-aterm>result]] 
+			
 	sdf-import-declaration: 
 		i at ImportLegacyArtifact(Name(modulename)) -> result
 		where 
-			<debug-compiler>$[ SDF MAIN Result import legacy: ]
-		where 
 				<to-sdf-import>modulename => result'
 				;result := [result']	
+		where 
+			<debug-compiler>$[codegen | SDF |  import legacy artifact [<pp-aterm>result].]
 			
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 15 02:23:36 2011	(r22542)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 15 11:14:54 2011	(r22543)
@@ -1,4 +1,5 @@
-module codegen/sdf/to-signature
+module 
+	codegen/sdf/to-signature
 imports 
 	libstratego-sglr
 imports
@@ -65,30 +66,11 @@
 			;<refresh-workspace-file>output-path-str
 			;<refresh-workspace-file>output-path-rtree
 			;chdir-to-project-path
-			
-	to-signature-all:
-		(def, path , project-path) -> None()
-		where  
-			 	(name, relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
-			 	;<debug> $[Spoofax-lang|Generating signature for the following package : [name]]
-			 	;sig-file-name := $[[name].signature] 
-			 	;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]] 
-			 	;output-path-str 		:= <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-dir , sig-file-name)
-			 	;output-path-rtree 	:= <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-dir, sig-file-name)
-			 	;generated-signatures-string :=  <get-signature-contents(|sig-file-name)><get-all-signatures-as-string>
-			 	;<debug> $[Spoofax-lang|generated signatures : [generated-signatures-string ]] 
-			 	;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
-			 	;<debug> $[Spoofax-lang|otuput path for signatures : [output-path-str]]
-			 	;<ensure-exists>( project-path , autogen-dir ) 
-			 	;<save-to-file>( output-path-str, generated-signatures-string)
-				;<save-to-file>( output-path-rtree, signatures-as-aterm-string)
-				;rules (signature-import-path:= <append-if-not-empty(|relative-autogen-path, "/")> sig-file-name)
-						  
+	
 rules 
 
-	// Instead of using String interpolation,
-	// generate the default constructors using global contructor defined 
-	// during init-declartion   
+	// Instead of using String interpolation, Generate the default signatures
+	// using global contructor defined during init-declartion   
 	get-signature-contents(|moduleName): signatures-string ->
 $[module [moduleName]
 signature
@@ -113,38 +95,32 @@
 			<filter(?(<GetEnclosingPackageName>, <GetEnclosingModuleName>, _))>
 			<all-keys-Get-Operation-Singature>
   
-  operation-decl-to-string : 
-		[] -> $[]
-  operation-decl-to-string : 
-  	[first-op-decl | rest-op-decl* ] 
-  		-> $[[current-op-decl-string] 
-  			[rest-op-decl-string]]
-  		where 
-  			(opname, operands*, resultant-sort) := first-op-decl
-  			;if (!operands* => []) then
-  			 	current-op-decl-string := $[[<opname-to-string>opname]: [resultant-sort]]
-  			else
-  				current-op-decl-string := $[[<opname-to-string>opname]: [<lhs-operands-to-string>operands*] -> [resultant-sort]]
-  			end		 
-  			;rest-op-decl-string := <operation-decl-to-string> rest-op-decl* 
+  operation-decl-to-string : [] -> $[]
+  
+  operation-decl-to-string : [first-op-decl | rest-op-decl* ]	-> $[[current-op-decl-string][rest-op-decl-string]]
+  where 
+  	(opname, operands*, resultant-sort) := first-op-decl
+  	;if (!operands* => []) then
+  		current-op-decl-string := $[[<opname-to-string>opname]: [resultant-sort]]
+  	else
+  		current-op-decl-string := $[[<opname-to-string>opname]: [<lhs-operands-to-string>operands*] -> [resultant-sort]]
+  	end		 
+  ;rest-op-decl-string := <operation-decl-to-string> rest-op-decl* 
  	
- 	opname-to-string : 
- 		opname -> opname-string
- 		where 
- 				if (!opname => "") then 
- 						opname-string := $[]
-				else
-					 opname-string  := opname
-				end
+ 	opname-to-string : opname -> opname-string
+ 	where 
+ 		if (!opname => "") then 
+ 			opname-string := $[]
+		else
+			opname-string  := opname
+		end
 				
-  lhs-operands-to-string : 
-		[] -> $[]
-  lhs-operands-to-string : 
-  	[last] -> $[[last]] 
-  lhs-operands-to-string : 
-  		[hd-operand|rest*] -> $[[hd-operand-string] * [rest-operand-string]]
-  		where
-  				not (![] => rest*) 
-  		where 
-  			  hd-operand-string := hd-operand 
-  			  ;rest-operand-string := <lhs-operands-to-string>rest* 
\ No newline at end of file
+  lhs-operands-to-string : [] -> $[]
+  lhs-operands-to-string : [last] -> $[[last]] 
+  lhs-operands-to-string : [hd-operand|rest*] -> $[[hd-operand-string] * [rest-operand-string]]
+  where
+  	not (![] => rest*) 
+  where 
+  	hd-operand-string := hd-operand 
+  	;rest-operand-string := <lhs-operands-to-string>rest*
+  	  
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 15 02:23:36 2011	(r22542)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 15 11:14:54 2011	(r22543)
@@ -24,15 +24,8 @@
 	
 	
 rules
-
- 	to-str-all = id
- 	
- 	/** 
-	* Generates stratego output for the specified package-name, module-name and related definition
-	* 
-	* @param project-path : path to the to project root folder 
-	*/	
-	emit-str:
+	// emitting STR definition for the specified SPX module.
+ 	emit-str:
 		m at Module(attrb* , modname , section*) -> m
 		with 
  			project-path := <ProjectPath>
@@ -40,27 +33,28 @@
  			package-typed-qname := <GetEnclosingPackageName> 
 			;module-typed-qname  := <GetEnclosingModuleName> 
 			<+ 
-			debug(!"CodeGeneration | STR | Failed to create current scope.")
+			debug(!"CodeGen | STR | Failed to create current scope.")
 			;fail
 		where
 			 !module-typed-qname  => Module(module-untyped-qname)
 			;!package-typed-qname => Package(package-untyped-qname)
 			;!modname => SPXModuleName(modulename-string)
+		where 
+			<debug-compiler> $[CodeGen | STR | generating code for the following module : [<pp-aterm>module-untyped-qname]]
 		where
-			Module(_, _ , section') := <get-module-declaration>module-typed-qname 
+			 Module(_, _ , section') := <get-module-declaration>module-typed-qname 
 			;import-stmt* := <make-set><collect-om(?Imports(<id>) , conc);flatten-list> section'
-			;debug(!"2 : Imports : ")
 			;sections'*  := <collect-om(?STRSection(<id>), conc)> section*
+		where 
+			<debug-compiler> $[CodeGen | STR | imports are generated for the following module : [<pp-aterm>module-untyped-qname]]
 		where
-			debug(!"3 :");
 			import-temp* := <str-import-declarations>import-stmt*;
 			str-import-stmt* := [Imports(import-temp*)];
 			str-section := <conc>(str-import-stmt* , sections'*);
 			str-aterm := Module(<qname-to-path>module-untyped-qname, str-section);
  			str-string := <pp-stratego-string> <parenthesize-Stratego> str-aterm	
 		where
-			debug(!"6 :");
-			autogen-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
+			 autogen-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
 			;output-path-str := <get-output-path(|"str")>(autogen-dir, module-untyped-qname)
     	;output-path-rtree := <get-output-path(|"rtree")>(autogen-dir, module-untyped-qname)
     	;<ensure-exists>( autogen-dir , package-untyped-qname ) 
@@ -74,28 +68,26 @@
 	
 	/** 
 	* Generates stratego MAIN output for the specified package-name
-	* 
-	* @param project-path : path to the to project root folder
-	* @param : package name 
-	* @param : relative output path from the  configured autogenerated directory  
 	*/	
 	generate-str-main:  module-qname* -> <id>
 		with 
- 			 project-path             := <ProjectPath>;
- 			 Package(package-qname)   := <GetEnclosingPackageName>
- 		where debug(!"generate-str-main 1 :")
+ 			 project-path             := <ProjectPath>
+ 			 ;Package(package-qname)   := <GetEnclosingPackageName>
  		with	 
  			 relative-autogen-path :=  <qname-to-path>package-qname
  			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
- 		where debug(!"2 :")	  
+ 		where 
+ 			<debug-compiler> $[CodeGen | STR | generate-str-main from package-name: [<pp-aterm>package-qname]]	  
  		where
- 			main-str-module-name := <concat-strings>[relative-autogen-path, "/", <get-main-file-name>package-qname] ;
-			str-aterm := Module( main-str-module-name  ,[Imports(<map(to-str-import);flatten-list>module-qname*)])
+ 			 main-str-module-name := <concat-strings>[relative-autogen-path, "/", <get-main-file-name>package-qname] 
+			;str-aterm := Module( main-str-module-name  ,[Imports(<map(to-str-import);flatten-list>module-qname*)])
 			;str-string := <pp-stratego-string> <parenthesize-Stratego>  str-aterm
-		where 
-			debug(!"3 :")   
 		where
-			autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
+			<debug-compiler> $[CodeGen | STR | str-string has been generated : [<pp-aterm>package-qname]]
+		where
+			// Saving str-content in the specified file
+			// TODO : refactor and abstract file operation. 
+			 autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
 			;<ensure-exists>(autogen-root-directory , package-qname)
 			;chdir-to-project-path // making sure that the current path is the project - path 
 			;output-path-str   := <get-main-output-path(|"str")>(autogen-root-directory , package-qname)   
@@ -117,34 +109,27 @@
 rules			
 	//TODO : remove code duplications 
 	str-import-declarations=
-		debug(!"test 0: "); 
 		?imports*;
-		debug(!"test 1: ");
 		map(debug;str-import-declaration;debug);
-		debug(!"RESULT' STR: ");
 		flatten-list;
 		make-set;
-		debug(!"RESULT STR: ") 
+		where( <debug-compiler> $[CodeGen | STR | Adding following imports : [<pp-aterm>] ]) 
 		
 	str-import-declaration: 
 		i at ImportPackage(package-qname) -> results
 		where 
-			debug(!"import package : ") 
-			where 
 			if not(<DeclaredPackage>package-qname) then
-				debug(!"import package :  found NA");
 				results := [] // unresolved imports. ignore. 
 			else
 				<get-enclosed-modules>Package(package-qname) => modules*
-				;debug(!"converting to module paths : ")
 				;<map(?Module(<id>) ; qname-to-path ; to-str-import)> modules* => results
-				;debug(!"results : ") 
 			end
+		where
+			<debug-compiler> $[CodeGen | STR | adding import to package. Added following module references: [<pp-aterm>results]]
+				
 	
 	str-import-declaration: 
 		i at ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
-		where 
-			debug(!"import module : ") 
 		where
 			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
 			;if(not(<DeclaredModule>module-qname))  then
@@ -154,10 +139,10 @@
 				;<to-str-import>module-name-path => result'
 				;result := [result']  
 			end 
-	
+		where
+			<debug-compiler> $[CodeGen | STR | adding import to modules [<pp-aterm>result]]
+		
 	str-import-declaration: i at ImportPackage(Name(package-name)) -> result
-	where 
-		debug(!"import name : ")
 	where
 			if <DeclaredPackage>QName([package-name]) then
 				<get-enclosed-modules>Package(QName([package-name])) => modules*
@@ -168,15 +153,19 @@
 				<to-str-import>package-name => result'
 				;result := [result']	
 			end
-		
+	where
+			<debug-compiler> $[CodeGen | STR | adding import to following module [<pp-aterm>result]]
+				
 
 	str-import-declaration: 
 		i at ImportLegacyArtifact(Name(modulename)) -> result
-	where debug(!"legacy  : ")
 		where 
 			if not(<get-annotation(get-unresolved-symbol-annotation)>i) then 
 				![] => result
 			else
 				<to-str-import>modulename => result'
 				;result := [result']	
-			end	
\ No newline at end of file
+			end
+		where
+			<debug-compiler> $[CodeGen | STR | adding import to (legacy )modules [<pp-aterm>result]]
+				
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Fri Apr 15 02:23:36 2011	(r22542)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Fri Apr 15 11:14:54 2011	(r22543)
@@ -90,7 +90,7 @@
 			 |}
 	*/
 			 
-  find-sorts 
+  find-sorts  
   	= alltd(get-sort-decl)
 
 rules  

From M.A.Akhter at student.tudelft.nl  Fri Apr 15 19:56:19 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 15 Apr 2011 17:56:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22544 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	codegen codegen/sdf codegen/str context utils
Message-ID: <20110415175619.529DA2B8034@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 15 17:56:18 2011
New Revision: 22544
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22544&sc=1

Log:
* refactored code generation using adapter pattern - 2 
* fixed bug 1.2 / 1.3
* removed debug / modified it with the debug-compiler  so that it can be turned on/off

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str	Fri Apr 15 11:14:54 2011	(r22543)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str	Fri Apr 15 17:56:18 2011	(r22544)
@@ -16,14 +16,34 @@
 	context/signature
 	normalize/signatures  
 	include/spoofaxlang
-	utils/path
+	utils/path 
 	utils/annotations
+	utils/contract
 
+
+
+//TODO: OPTIMIZE : get the imports and resue it in all the generation phase rather traversing to find it out each time. 
+//TODO: OPTIMIZE : DR can be used to construct this imports  
 rules 
+	
 	generate-all =  emit-sdf;emit-signatures;emit-str <+ debug(!" Failed in Generate-all. "); fail
 
 	generate-main = 
-			?module-qname* ;generate-sdf-main;generate-str-main ; debug(!"inside generate esv main : ");generate-esv-main 
+			?module-qname* ;generate-sdf-main;generate-str-main ; generate-esv-main 
 		<+ 
-			debug(!" Failed in Main Generation. "); fail  
+			debug(!" Failed in Main Generation. "); fail    
 	 
+
+
+rules
+	
+	to-generated-artifact-block(adapter, post-coversion-adapter) : list-stmt* -> resultant-block* 
+	with contracts( 
+		contract-requires(is-list |list-stmt*)
+	)
+	where 
+		<adapter>list-stmt*  => adapted-result*; // results are  adapted using the specified adapter
+		<post-coversion-adapter>adapted-result*  => resultant-block*
+
+
+	ensure-list-is-not-empty =  is-not-empty-list 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Fri Apr 15 11:14:54 2011	(r22543)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Fri Apr 15 17:56:18 2011	(r22544)
@@ -24,53 +24,46 @@
 	utils/debug
 imports 	 
 	codegen/main
+	codegen/generate-all 
+	utils/contract
 	
       
 rules
  
-	emit-sdf:m at Module(attrb* , modname , section*) -> m
+	 emit-sdf:m at Module(attrb* , modname , section*) -> m
  		with 
  			project-path := <ProjectPath>
  		where
  			package-typed-qname := <GetEnclosingPackageName> 
 			;module-typed-qname  := <GetEnclosingModuleName> 
 			<+ 
-			<debug-compiler>$[ codegen | SDF | Failed to create current scope.] 
+			<debug-compiler>$[ Codegen | SDF | Failed to create current scope.] 
 			;fail
 		where
 			 !module-typed-qname  => Module(module-untyped-qname)
 			;!package-typed-qname => Package(package-untyped-qname)
-		where
-			Module(_, _ , section') := <get-module-declaration>module-typed-qname
-			;import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> section'
-		  ;sections    := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> section*
-    where 
-    	<debug-compiler>$[ codegen | SDF | Found Section + Imports for the following module [<pp-aterm> module-untyped-qname].]
-    where
-    	sections'        := <topdown(repeat(desugar-sdf-redux))> <list-to-conc-grammars> sections
-     ;import-temp      := <sdf-import-declarations> import-stmt* 
-     ;sdf-import-stmt* := 'imports( import-temp  )
-     ;sdf-string       := <pp-sdf-string'> 'module(<qname-to-path>module-untyped-qname, [sdf-import-stmt*], [exports(sections')])
-   where //set up folders
-   		 autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
-   		;<debug(!"autogen-root : ")>autogen-root-directory  
-			;<ensure-exists>(autogen-root-directory, package-untyped-qname)
-			;output-path     := <get-output-path(|"sdf")>(autogen-root-directory , module-untyped-qname)
+			; Module(_, _ , section') := <get-module-declaration>module-typed-qname 
 		where 
-			<debug-compiler>$[ codegen | SDF | Saving the artifacts of [<pp-aterm> module-untyped-qname].]
-		where 
-			 <save-to-file>(output-path , sdf-string )
+    	<debug-compiler>$[ Codegen | SDF | Found Section + Imports for the following module [<pp-aterm> module-untyped-qname].]
+    where
+    	sdf-string       := <pp-sdf-string'> 'module(<qname-to-path>module-untyped-qname, <to-sdf-imports-block>section* , <to-sdf-section-block>section* )
+    	;<debug-compiler>$[ Codegen | SDF | Saving the artifacts of [<pp-aterm> module-untyped-qname].]
+		where
+			 autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
+   		;<ensure-exists>(autogen-root-directory, package-untyped-qname)
+			;output-path     := <get-output-path(|"sdf")>(autogen-root-directory , module-untyped-qname) 
+			; <save-to-file>(output-path , sdf-string )
 			;<refresh-workspace-file>output-path
 			;chdir-to-project-path
-			
 		
+	
 	generate-sdf-main:  module-qname* -> <id>
 		with 
  			 project-path             := <ProjectPath>;
  			 Package(package-qname)   := <GetEnclosingPackageName>;
  			 relative-autogen-path :=  <qname-to-path>package-qname
  		where 
- 			<debug-compiler>$[ codegen | SDF | Generating main for the following package : [<pp-aterm> package-qname].]
+ 			<debug-compiler>$[ Codegen | SDF | Generating main for the following package : [<pp-aterm> package-qname].]
  		where
 			sdf-string := 
 	    $[module [relative-autogen-path]/[<get-main-file-name>package-qname]
@@ -80,20 +73,45 @@
 	  where 
 	  	<debug-compiler>$[ codegen | SDF | Content of the main SDF is generated for the package : [<pp-aterm> package-qname].]
 		where
-			autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
+			 autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
 			;autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
 			;<ensure-exists>(autogen-root-directory , package-qname)
 			;output-path := <get-main-output-path(|"sdf")>(autogen-root-directory , package-qname)   
 			;<save-to-file>(output-path , sdf-string )
 	 		;<refresh-workspace-file>output-path
 			;chdir-to-project-path
-		
-		
- to-sdf-all: (def, path , project-path)  -> None()
- 		
- to-sdf(|project-path): (package-name,concept-name,def) -> None()
+	
 				
+rules
+	
+	to-sdf-section-block : sections* -> sdf-section-block 
+	with contracts( 
+		contract-requires ( is-list |sections*)
+	)
+	where 
+		sdf-section* := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)>sections*;
+		if <ensure-list-is-not-empty>sdf-section* then
+			sdf-section-block := <to-generated-artifact-block(list-to-conc-grammars; topdown(repeat(desugar-sdf-redux)), \s -> [exports(s)]\)>sdf-section*
+		else
+			sdf-section-block := []
+		end 	
 
+		
+	to-sdf-imports-block : sections*  -> sdf-import-block
+	with contracts( 
+		contract-requires ( is-list |sections*)
+	)
+	where 
+		spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
+		if <ensure-list-is-not-empty>spx-import-stmt*  then
+			sdf-import-block := <to-generated-artifact-block(sdf-import-declarations, \s -> ['imports(s)]\)>spx-import-stmt*
+		else
+			sdf-import-block := []
+		end		
+			
+
+				
+ 
 rules
 
 	override pp-sdf-string = fail // ensure compiler doesn't blow up
@@ -144,26 +162,29 @@
 				result := $[[<qname-to-path >q]
 									 ]
 rules
+	
 	sdf-import-declarations =
 		?imports*;
-		map(debug;sdf-import-declaration;debug);
+		map(sdf-import-declaration);
 		flatten-list;
 		make-set;
-		where(<debug-compiler>$[codegen | SDF | Resultant imports :  [<pp-aterm>]]) 
+		where(<debug-compiler>$[Codegen | SDF | Resultant imports :  [<pp-aterm>]]) 
+		
 		
 	sdf-import-declaration: 
-		i at ImportPackage(package-qname) -> results
-		where 
-			<debug-compiler>$[ codegen | SDF |  SDF MAIN Result import package]
+		i at ImportPackage(package-qname at QName(_)) -> results
 		where 
 			if not(<DeclaredPackage>package-qname) then
-				<debug-compiler>$[ SDF MAIN Result import package Found NA];
 				results := [] // unresolved imports. ignore. 
 			else
 				<get-enclosed-modules>Package(package-qname) => modules*;
-				<map(?Module(<id>) ; qname-to-path ; to-sdf-import)> modules* => results;
-				<debug-compiler>$[ codegen | SDF |  SDF MAIN Result import package Result : ]
+				<map(?Module(<id>) ; qname-to-path ; to-sdf-import)> modules* => results
 			end
+		where
+			<debug-compiler>$[ Codegen | SDF |  Result import package Result : [<pp-aterm>results] ]
+	
+	sdf-import-declaration:		
+		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> <sdf-import-declaration>ImportSpxModule(QName([package-name]), SPXModuleName(modname))
 	
 	sdf-import-declaration: 
 		i at ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
@@ -177,7 +198,7 @@
 				;result := [result']  
 			end
 		where 
-			<debug-compiler>$[ codegen | SDF | import module :  [<pp-aterm>result]] 
+			<debug-compiler>$[ Codegen | SDF | import module :  [<pp-aterm>result]] 
 		 
 	
 	sdf-import-declaration: i at ImportPackage(Name(package-name)) -> result
@@ -186,11 +207,12 @@
 			<get-enclosed-modules>Package(QName([package-name])) => modules*
 			;<map(?Module(<id>) ; qname-to-path ; to-sdf-import)> modules* => result
 		else
-			<to-sdf-import>package-name => result'
+			 <to-sdf-import>package-name => result'
 			;result := [result']	
 		end
 	where 
-			<debug-compiler>$[ codegen | SDF | import pcakage :  [<pp-aterm>result]] 
+			<debug-compiler>$[ Codegen | SDF | import pcakage :  [<pp-aterm>result]] 
+	
 			
 	sdf-import-declaration: 
 		i at ImportLegacyArtifact(Name(modulename)) -> result
@@ -198,5 +220,5 @@
 				<to-sdf-import>modulename => result'
 				;result := [result']	
 		where 
-			<debug-compiler>$[codegen | SDF |  import legacy artifact [<pp-aterm>result].]
+			<debug-compiler>$[Codegen | SDF |  import legacy artifact [<pp-aterm>result].]
 			
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 15 11:14:54 2011	(r22543)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 15 17:56:18 2011	(r22544)
@@ -46,8 +46,7 @@
 			;!package-typed-qname => Package(package-untyped-qname)
 			;!modname => SPXModuleName(modulename-string)
 		where 
-			debug(!"2 :")
-			;sig-file-name := <get-signature-file-name>modulename-string
+			sig-file-name := <get-signature-file-name>modulename-string
 		where 
 			<debug> $[Spoofax-lang|Generating signature for the following package : [<pp-aterm>module-typed-qname]]			
 			;generated-signatures-string :=  <get-signature-contents(|sig-file-name)><get-all-signatures-as-string>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 15 11:14:54 2011	(r22543)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 15 17:56:18 2011	(r22544)
@@ -16,10 +16,13 @@
 	codegen/sdf/to-signature
 	codegen/compile
 	codegen/main
+	codegen/generate-all
+imports	
 	context/signature
 	context/scope-tree
 imports	
 	normalize/signatures
+	utils/contract
 
 	
 	
@@ -33,26 +36,17 @@
  			package-typed-qname := <GetEnclosingPackageName> 
 			;module-typed-qname  := <GetEnclosingModuleName> 
 			<+ 
-			debug(!"CodeGen | STR | Failed to create current scope.")
+			<debug-compiler>$[ Codegen | STR | Failed to create current scope.] 
 			;fail
 		where
 			 !module-typed-qname  => Module(module-untyped-qname)
 			;!package-typed-qname => Package(package-untyped-qname)
 			;!modname => SPXModuleName(modulename-string)
+			; Module(_, _ , section') := <get-module-declaration>module-typed-qname
 		where 
 			<debug-compiler> $[CodeGen | STR | generating code for the following module : [<pp-aterm>module-untyped-qname]]
-		where
-			 Module(_, _ , section') := <get-module-declaration>module-typed-qname 
-			;import-stmt* := <make-set><collect-om(?Imports(<id>) , conc);flatten-list> section'
-			;sections'*  := <collect-om(?STRSection(<id>), conc)> section*
-		where 
-			<debug-compiler> $[CodeGen | STR | imports are generated for the following module : [<pp-aterm>module-untyped-qname]]
-		where
-			import-temp* := <str-import-declarations>import-stmt*;
-			str-import-stmt* := [Imports(import-temp*)];
-			str-section := <conc>(str-import-stmt* , sections'*);
-			str-aterm := Module(<qname-to-path>module-untyped-qname, str-section);
- 			str-string := <pp-stratego-string> <parenthesize-Stratego> str-aterm	
+			;str-aterm := Module(<qname-to-path>module-untyped-qname, <conc>(<to-str-imports-block>section*, <collect-om(?STRSection(<id>), conc)> section*))
+ 			;str-string := <to-str-string>str-aterm	
 		where
 			 autogen-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
 			;output-path-str := <get-output-path(|"str")>(autogen-dir, module-untyped-qname)
@@ -64,7 +58,26 @@
 			;<refresh-workspace-file>output-path-str
 			;<refresh-workspace-file>output-path-rtree
 			
-  
+rules
+	
+	to-str-string: sections* -> str-section-block  
+	where 
+		str-section-block := <parenthesize-Stratego; pp-stratego-string>sections*
+
+	to-str-imports-block : sections*  -> str-import-block
+	with contracts( 
+		contract-requires ( is-list |sections*)
+	)
+	where 
+		spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
+		if <ensure-list-is-not-empty>spx-import-stmt*  then
+			str-import-block := <to-generated-artifact-block(str-import-declarations, \s -> [Imports(s)]\)>spx-import-stmt*
+		else
+			str-import-block := []
+		end		
+			
+
+		  
 	
 	/** 
 	* Generates stratego MAIN output for the specified package-name
@@ -116,7 +129,7 @@
 		where( <debug-compiler> $[CodeGen | STR | Adding following imports : [<pp-aterm>] ]) 
 		
 	str-import-declaration: 
-		i at ImportPackage(package-qname) -> results
+		i at ImportPackage(package-qname at QName(_)) -> results
 		where 
 			if not(<DeclaredPackage>package-qname) then
 				results := [] // unresolved imports. ignore. 
@@ -127,6 +140,9 @@
 		where
 			<debug-compiler> $[CodeGen | STR | adding import to package. Added following module references: [<pp-aterm>results]]
 				
+	str-import-declaration:		
+		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> <str-import-declaration>ImportSpxModule(QName([package-name]), SPXModuleName(modname))
+	
 	
 	str-import-declaration: 
 		i at ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Fri Apr 15 11:14:54 2011	(r22543)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Fri Apr 15 17:56:18 2011	(r22544)
@@ -142,7 +142,7 @@
       where
           not(<eq>("", fileContent))
       with  
-      		<debug> $[Writing to the following file : [fileName] the following content: 
+      		<debug-compiler> $[Writing to the following file : [fileName] the following content: 
       							[fileContent] 
       						 ]
           ;handle := <fopen> (fileName, "w+")

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str	Fri Apr 15 11:14:54 2011	(r22543)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str	Fri Apr 15 17:56:18 2011	(r22544)
@@ -255,7 +255,10 @@
 				annotated-import-decl:= <add-annotation(|Unresolved())>i
 				;<debug-symboltable>$[ImportReferenceResolver| store-import-declaratio|Failed to resolve following import : [<pp-aterm>]]	
 	 		end
-	 		
+	
+	store-import-declaration(|enclosing-namespace-qname) :
+		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> <store-import-declaration(|enclosing-namespace-qname)>ImportSpxModule(QName([package-name]), SPXModuleName(modname)) 
+		 
 	store-import-declaration(|enclosing-namespace-qname) :
 		i at ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> annotated-import-decl 
 		where 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Fri Apr 15 11:14:54 2011	(r22543)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Fri Apr 15 17:56:18 2011	(r22544)
@@ -70,7 +70,6 @@
 	
 	ensure-exists =  
 		?(autogen-root-path, QName(qname-parts*))
-		;debug(!"inside ensure-exists ")
 		;<ensure-directory-exists>autogen-root-path 
 		;if not(<eq>(<length>qname-parts*,0)) then 
 				<map(create-folder)>qname-parts*  //Creating sub-directories from the qname parts 

From M.A.Akhter at student.tudelft.nl  Fri Apr 15 22:27:34 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 15 Apr 2011 20:27:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22545 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen:
	. sdf str
Message-ID: <20110415202734.0A9B97F8026@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 15 20:27:33 2011
New Revision: 22545
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22545&sc=1

Log:
* refactor -code generation 2 . added a generic import resolver for SDF and STR using higher order strategies. 
* moved common functionality in codegen/generate-all

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str	Fri Apr 15 17:56:18 2011	(r22544)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str	Fri Apr 15 20:27:33 2011	(r22545)
@@ -6,19 +6,24 @@
 	codegen/sdf/to-signature 
 	codegen/str/to-stratego
 	codegen/esv/to-esv
-imports
 	codegen/buildscripts
 imports 
 	config 
-	utils/cache
+	common
+imports	
 	lib/editor-common.generated
+	include/spoofaxlang
+
+imports	
 	context/scope-tree
 	context/signature
-	normalize/signatures  
-	include/spoofaxlang
+	normalize/signatures
+imports 	
 	utils/path 
 	utils/annotations
 	utils/contract
+	utils/debug
+	utils/cache
 
 
 
@@ -32,9 +37,6 @@
 			?module-qname* ;generate-sdf-main;generate-str-main ; generate-esv-main 
 		<+ 
 			debug(!" Failed in Main Generation. "); fail    
-	 
-
-
 rules
 	
 	to-generated-artifact-block(adapter, post-coversion-adapter) : list-stmt* -> resultant-block* 
@@ -46,4 +48,66 @@
 		<post-coversion-adapter>adapted-result*  => resultant-block*
 
 
-	ensure-list-is-not-empty =  is-not-empty-list 
\ No newline at end of file
+	ensure-list-is-not-empty =  is-not-empty-list
+	
+	
+rules
+	
+	to-generate-artifacts-import-declarations(s) =
+		?imports*;	map(to-import-declaration(s)); flatten-list;	make-set; 	where(<debug-compiler>$[Codegen | Imports | Resultant imports :  [<pp-aterm>]]) 
+		
+		
+	to-import-declaration(s): 
+		i at ImportPackage(package-qname at QName(_)) -> results
+		where 
+			if not(<DeclaredPackage>package-qname) then
+				results := [] // unresolved imports. ignore. 
+			else
+				<get-enclosed-modules>Package(package-qname) => modules*;
+				<map(?Module(<id>) ; qname-to-path ; s)> modules* => results
+			end
+		where
+			<debug-compiler>$[ Codegen | Imports Conversion |  import package Result : [<pp-aterm>results] ]
+	
+	to-import-declaration(s):		
+		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> <to-import-declaration(s)>ImportSpxModule(QName([package-name]), SPXModuleName(modname))
+	
+	to-import-declaration(s):
+		ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
+		where
+			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
+			;if(not(<DeclaredModule>module-qname))  then
+				result := [] // unresolved imports. ignore. 
+			else
+				module-name-path    := <qname-to-path>module-qname
+				;<s>module-name-path => result'
+				;result := [result']  
+			end
+		where 
+			<debug-compiler>$[ Codegen | Imports Conversion  | import module Result:  [<pp-aterm>result]] 
+		 
+	to-import-declaration(s): 
+		ImportPackage(Name(package-name)) -> result
+		where
+			if <DeclaredPackage>QName([package-name]) then
+				<get-enclosed-modules>Package(QName([package-name])) => modules*
+				;<map(?Module(<id>) ; qname-to-path ; s)> modules*   => result
+			else
+				 <s>package-name => result'
+				;result          := [result']	
+			end
+		where 
+			<debug-compiler>$[ Codegen | Imports Conversion  | import pcakage/legacy artifact Result :  [<pp-aterm>result]] 
+	
+	to-import-declaration(s): 
+		ImportLegacyArtifact(Name(modulename)) -> result
+		where 
+				<s>modulename => result'
+				;result			 := [result']	
+		where 
+			<debug-compiler>$[Codegen | Imports Conversion |  import legacy artifact Result : [<pp-aterm>result].]
+	
+	
+	
+	
+				 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Fri Apr 15 17:56:18 2011	(r22544)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Fri Apr 15 20:27:33 2011	(r22545)
@@ -55,6 +55,7 @@
 			; <save-to-file>(output-path , sdf-string )
 			;<refresh-workspace-file>output-path
 			;chdir-to-project-path
+			;<debug-compiler>$[ Codegen | SDF | Finishing generation of SDF for [<pp-aterm> module-untyped-qname].] 
 		
 	
 	generate-sdf-main:  module-qname* -> <id>
@@ -104,14 +105,11 @@
 	where 
 		spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
 		if <ensure-list-is-not-empty>spx-import-stmt*  then
-			sdf-import-block := <to-generated-artifact-block(sdf-import-declarations, \s -> ['imports(s)]\)>spx-import-stmt*
+			sdf-import-block := <to-generated-artifact-block(to-generate-artifacts-import-declarations(\name -> 'module(unparameterized(name))\), \s -> ['imports(s)]\)>spx-import-stmt*
 		else
 			sdf-import-block := []
 		end		
-			
 
-				
- 
 rules
 
 	override pp-sdf-string = fail // ensure compiler doesn't blow up
@@ -161,64 +159,4 @@
 		where 
 				result := $[[<qname-to-path >q]
 									 ]
-rules
-	
-	sdf-import-declarations =
-		?imports*;
-		map(sdf-import-declaration);
-		flatten-list;
-		make-set;
-		where(<debug-compiler>$[Codegen | SDF | Resultant imports :  [<pp-aterm>]]) 
-		
-		
-	sdf-import-declaration: 
-		i at ImportPackage(package-qname at QName(_)) -> results
-		where 
-			if not(<DeclaredPackage>package-qname) then
-				results := [] // unresolved imports. ignore. 
-			else
-				<get-enclosed-modules>Package(package-qname) => modules*;
-				<map(?Module(<id>) ; qname-to-path ; to-sdf-import)> modules* => results
-			end
-		where
-			<debug-compiler>$[ Codegen | SDF |  Result import package Result : [<pp-aterm>results] ]
-	
-	sdf-import-declaration:		
-		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> <sdf-import-declaration>ImportSpxModule(QName([package-name]), SPXModuleName(modname))
-	
-	sdf-import-declaration: 
-		i at ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
-		where
-			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
-			;if(not(<DeclaredModule>module-qname))  then
-				result := [] // unresolved imports. ignore. 
-			else
-				module-name-path    := <qname-to-path>module-qname
-				;<to-sdf-import>module-name-path => result'
-				;result := [result']  
-			end
-		where 
-			<debug-compiler>$[ Codegen | SDF | import module :  [<pp-aterm>result]] 
-		 
-	
-	sdf-import-declaration: i at ImportPackage(Name(package-name)) -> result
-	where
-		if <DeclaredPackage>QName([package-name]) then
-			<get-enclosed-modules>Package(QName([package-name])) => modules*
-			;<map(?Module(<id>) ; qname-to-path ; to-sdf-import)> modules* => result
-		else
-			 <to-sdf-import>package-name => result'
-			;result := [result']	
-		end
-	where 
-			<debug-compiler>$[ Codegen | SDF | import pcakage :  [<pp-aterm>result]] 
-	
-			
-	sdf-import-declaration: 
-		i at ImportLegacyArtifact(Name(modulename)) -> result
-		where 
-				<to-sdf-import>modulename => result'
-				;result := [result']	
-		where 
-			<debug-compiler>$[Codegen | SDF |  import legacy artifact [<pp-aterm>result].]
 			
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 15 17:56:18 2011	(r22544)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 15 20:27:33 2011	(r22545)
@@ -14,10 +14,12 @@
 	include/spoofaxlang
 imports
 	codegen/compile
-	utils/path
 	codegen/main
 	context/signature
 	normalize/signatures
+imports 
+	utils/path
+	utils/debug	
 	
 rules
 	
@@ -64,7 +66,9 @@
 			;<save-to-file>( output-path-rtree, signatures-as-aterm-string)
 			;<refresh-workspace-file>output-path-str
 			;<refresh-workspace-file>output-path-rtree
-			;chdir-to-project-path
+			;chdir-to-project-path
+		where
+			<debug-compiler>$[ Codegen | SDF | Finishing generation of Signature for [<pp-aterm> module-untyped-qname].]
 	
 rules 
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 15 17:56:18 2011	(r22544)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 15 20:27:33 2011	(r22545)
@@ -57,26 +57,6 @@
 			;<WriteToBinaryFile>( output-path-rtree, str-aterm)
 			;<refresh-workspace-file>output-path-str
 			;<refresh-workspace-file>output-path-rtree
-			
-rules
-	
-	to-str-string: sections* -> str-section-block  
-	where 
-		str-section-block := <parenthesize-Stratego; pp-stratego-string>sections*
-
-	to-str-imports-block : sections*  -> str-import-block
-	with contracts( 
-		contract-requires ( is-list |sections*)
-	)
-	where 
-		spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
-		if <ensure-list-is-not-empty>spx-import-stmt*  then
-			str-import-block := <to-generated-artifact-block(str-import-declarations, \s -> [Imports(s)]\)>spx-import-stmt*
-		else
-			str-import-block := []
-		end		
-			
-
 		  
 	
 	/** 
@@ -110,6 +90,26 @@
 	 		;<refresh-workspace-file>output-path-str
 			;<refresh-workspace-file>output-path-rtree
 			
+
+
+rules
+	
+	to-str-string: sections* -> str-section-block  
+	where 
+		str-section-block := <parenthesize-Stratego; pp-stratego-string>sections*
+
+	to-str-imports-block : sections*  -> str-import-block
+	with contracts( 
+		contract-requires ( is-list |sections*)
+	)
+	where 
+		spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
+		if <ensure-list-is-not-empty>spx-import-stmt*  then
+			str-import-block := <to-generated-artifact-block(to-generate-artifacts-import-declarations(to-str-import), \s -> [Imports(s)]\)>spx-import-stmt*
+		else
+			str-import-block := []
+		end		
+			
 	to-str-import: 
 		package-name-> [Import(package-name) , Import(<get-signature-file-name>package-name)]
 	
@@ -118,70 +118,3 @@
 		where 
 			str-import:= <qname-to-path>q;
 			sig-import:= <get-signature-file-name>str-import
-		
-rules			
-	//TODO : remove code duplications 
-	str-import-declarations=
-		?imports*;
-		map(debug;str-import-declaration;debug);
-		flatten-list;
-		make-set;
-		where( <debug-compiler> $[CodeGen | STR | Adding following imports : [<pp-aterm>] ]) 
-		
-	str-import-declaration: 
-		i at ImportPackage(package-qname at QName(_)) -> results
-		where 
-			if not(<DeclaredPackage>package-qname) then
-				results := [] // unresolved imports. ignore. 
-			else
-				<get-enclosed-modules>Package(package-qname) => modules*
-				;<map(?Module(<id>) ; qname-to-path ; to-str-import)> modules* => results
-			end
-		where
-			<debug-compiler> $[CodeGen | STR | adding import to package. Added following module references: [<pp-aterm>results]]
-				
-	str-import-declaration:		
-		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> <str-import-declaration>ImportSpxModule(QName([package-name]), SPXModuleName(modname))
-	
-	
-	str-import-declaration: 
-		i at ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
-		where
-			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
-			;if(not(<DeclaredModule>module-qname))  then
-					result := [] // unresolved imports. ignore. 
-			else
-				module-name-path    := <qname-to-path>module-qname
-				;<to-str-import>module-name-path => result'
-				;result := [result']  
-			end 
-		where
-			<debug-compiler> $[CodeGen | STR | adding import to modules [<pp-aterm>result]]
-		
-	str-import-declaration: i at ImportPackage(Name(package-name)) -> result
-	where
-			if <DeclaredPackage>QName([package-name]) then
-				<get-enclosed-modules>Package(QName([package-name])) => modules*
-				;debug(!"converting to module paths : ")
-				;<map(?Module(<id>) ; qname-to-path ; to-str-import)> modules* => result
-				;debug(!"results : ")
-			else
-				<to-str-import>package-name => result'
-				;result := [result']	
-			end
-	where
-			<debug-compiler> $[CodeGen | STR | adding import to following module [<pp-aterm>result]]
-				
-
-	str-import-declaration: 
-		i at ImportLegacyArtifact(Name(modulename)) -> result
-		where 
-			if not(<get-annotation(get-unresolved-symbol-annotation)>i) then 
-				![] => result
-			else
-				<to-str-import>modulename => result'
-				;result := [result']	
-			end
-		where
-			<debug-compiler> $[CodeGen | STR | adding import to (legacy )modules [<pp-aterm>result]]
-				
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Sat Apr 16 01:21:55 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 15 Apr 2011 23:21:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22546 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen:
	. esv sdf
Message-ID: <20110415232155.51AF3108C011@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 15 23:21:54 2011
New Revision: 22546
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22546&sc=1

Log:
* more refactoring 
* fixed 1 minor issue with signature import

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Fri Apr 15 20:27:33 2011	(r22545)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Fri Apr 15 23:21:54 2011	(r22546)
@@ -310,7 +310,7 @@
 	  <target name="sdf2imp" depends="sdf2imp.eclipse"/>
 	        
 		<target name="sdf2imp.eclipse" if="eclipse.running" >
-			<copy file="${package.path}/${package.main.esv.module}.packed.esv" tofile="${include}/${package.main.esv.module}.packed.esv" preservelastmodified="true"/>
+			<copy file="${package.path}/${package.main.esv.module}.packed.esv" tofile="${include}/${package.name}.packed.esv" preservelastmodified="true"/>
 		</target>
 	
 </project>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Fri Apr 15 20:27:33 2011	(r22545)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Fri Apr 15 23:21:54 2011	(r22546)
@@ -38,7 +38,7 @@
 			<debug-compiler>$[codegen | ESV | generate-esv-main  : [<pp-aterm>package-qname]]
 		with	 
  			 relative-autogen-path :=  <qname-to-path>package-qname
- 			;package-esv-main-name := <get-main-file-name>package-qname
+ 			;package-esv-main-name := <convert-qname(|"-")>package-qname
  			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
  		where 
  			{|  Declared-Language-Description,Declared-Builders-Description,Declared-Colorer-Description,
@@ -67,7 +67,9 @@
 			;<WriteToBinaryFile>(output-path ,esv-aterm)
 			;<refresh-workspace-file>output-path
 			;chdir-to-project-path
-			 		
+		where
+			<debug-compiler>$[ Codegen | ESV | Finishing generation of packed esv for [<pp-aterm>package-qname].]
+		 		
 	
 	/*
 	* Adding package ctree as the default semantic provider0

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str	Fri Apr 15 20:27:33 2011	(r22545)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str	Fri Apr 15 23:21:54 2011	(r22546)
@@ -53,7 +53,7 @@
 	
 rules
 	
-	to-generate-artifacts-import-declarations(s) =
+	to-generated-artifacts-import-declarations(s) =
 		?imports*;	map(to-import-declaration(s)); flatten-list;	make-set; 	where(<debug-compiler>$[Codegen | Imports | Resultant imports :  [<pp-aterm>]]) 
 		
 		
@@ -108,6 +108,7 @@
 			<debug-compiler>$[Codegen | Imports Conversion |  import legacy artifact Result : [<pp-aterm>result].]
 	
 	
+
 	
 	
 				 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Fri Apr 15 20:27:33 2011	(r22545)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Fri Apr 15 23:21:54 2011	(r22546)
@@ -81,6 +81,7 @@
 			;<save-to-file>(output-path , sdf-string )
 	 		;<refresh-workspace-file>output-path
 			;chdir-to-project-path
+			;<debug-compiler>$[ Codegen | SDF | Finishing generation of Main SDF Module of package : [<pp-aterm> package-qname].]
 	
 				
 rules
@@ -105,11 +106,11 @@
 	where 
 		spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
 		if <ensure-list-is-not-empty>spx-import-stmt*  then
-			sdf-import-block := <to-generated-artifact-block(to-generate-artifacts-import-declarations(\name -> 'module(unparameterized(name))\), \s -> ['imports(s)]\)>spx-import-stmt*
+			sdf-import-block := <to-generated-artifact-block(to-generated-artifacts-import-declarations(\name -> 'module(unparameterized(name))\), \s -> ['imports(s)]\)>spx-import-stmt*
 		else
 			sdf-import-block := []
 		end		
-
+ 
 rules
 
 	override pp-sdf-string = fail // ensure compiler doesn't blow up
@@ -151,9 +152,6 @@
 	
 rules 
 	
-	// coverts name to SDF  module name
-	to-sdf-import: name -> 'module(unparameterized(name))
-	
 	//pretty printing as sdf imports
 	pp-sdf-import: Module(q at QName(qnameparts*))-> result 
 		where 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 15 20:27:33 2011	(r22545)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 15 23:21:54 2011	(r22546)
@@ -23,7 +23,10 @@
 	
 rules
 	
-	/* Generating Signatures for all the SDF files */
+	// TODO : OPTMIZE : add a pretty printer to convert operation name DR to STR Signatures. 
+	// Currently , using string interpolation, signature are generated . then it is reparsed to
+	// to convert it to aterm. Get rid of this. 
+	  
 	parse-str-string =
     parse-string(
       strsglr-report-parse-error
@@ -41,26 +44,25 @@
  			package-typed-qname := <GetEnclosingPackageName> 
 			;module-typed-qname  := <GetEnclosingModuleName> 
 			<+ 
-			debug(!"CodeGeneration | Failed to create current scope.")
+			<debug-compiler>$[Codegen | Failed to create current scope.]
 			;fail
 		where
 			 !module-typed-qname  => Module(module-untyped-qname)
 			;!package-typed-qname => Package(package-untyped-qname)
 			;!modname => SPXModuleName(modulename-string)
 		where 
-			sig-file-name := <get-signature-file-name>modulename-string
+			sig-file-name := <get-signature-file-name><qname-to-path>module-untyped-qname
 		where 
-			<debug> $[Spoofax-lang|Generating signature for the following package : [<pp-aterm>module-typed-qname]]			
+			<debug-compiler>$[Codegen|Generating signature for the following package : [<pp-aterm>module-typed-qname]]			
 			;generated-signatures-string :=  <get-signature-contents(|sig-file-name)><get-all-signatures-as-string>
-			;<debug> $[Spoofax-lang|generated signatures : [generated-signatures-string ]] 
+			;<debug-compiler> $[Codegen|generated signatures : [generated-signatures-string ]] 
 			;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
-			
 		where  
 			autogen-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
 			;output-path-str 		:= <get-output-path(|"signature", "str")>(autogen-dir, module-untyped-qname)
 			;output-path-rtree 		:= <get-output-path(|"signature", "rtree")>(autogen-dir, module-untyped-qname)
 		where
-			<debug> $[Spoofax-lang|otuput path for signatures : [output-path-str]]		
+			<debug-compiler> $[Codegen|otuput path for signatures : [output-path-str]]		
 			;<ensure-exists>( autogen-dir , package-untyped-qname ) 
 			;<save-to-file>( output-path-str, generated-signatures-string)
 			;<save-to-file>( output-path-rtree, signatures-as-aterm-string)

From srabbelier at gmail.com  Sat Apr 16 03:02:31 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Sat, 16 Apr 2011 01:02:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22547 - in
	spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client:
	. services
Message-ID: <20110416010231.5EDE37F8005@mx1.tudelft.nl>

Author: SverreRabbelier
Date: Sat Apr 16 01:02:30 2011
New Revision: 22547
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22547&sc=1

Log:
Add and use NativeTermFactory

Added:
   spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/NativeTermFactory.java
Modified:
   spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/Worker.java
   spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java

Modified: spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/Worker.java
==============================================================================
--- spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/Worker.java	Fri Apr 15 23:21:54 2011	(r22546)
+++ spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/Worker.java	Sat Apr 16 01:02:30 2011	(r22547)
@@ -1,12 +1,14 @@
 package org.spoofax.jssglr.client;
 
-import com.google.gwt.webworker.client.DedicatedWorkerEntryPoint;
-import com.google.gwt.webworker.client.MessageEvent;
-import com.google.gwt.webworker.client.MessageHandler;
-
-import org.spoofax.jssglr.client.services.*;
+import org.spoofax.interpreter.terms.ISimpleTerm;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jssglr.client.services.NativeTermFactory;
+import org.spoofax.jssglr.client.services.Parser;
+import org.spoofax.terms.TermFactory;
 
 import com.google.gwt.core.client.JavaScriptObject;
+import com.google.gwt.webworker.client.DedicatedWorkerEntryPoint;
 
 /**
  *
@@ -17,23 +19,40 @@
 public class Worker extends DedicatedWorkerEntryPoint {
 
 	private Parser parser;
+	private NativeTermFactory factory;
+	private JavaScriptObject jsfactory;
 
 	private native void nativeOnWorkerLoad() /*-{
 		var oneself = this;
 
 		self.spoofax = {};
+		self.spoofax.factory = oneself. at org.spoofax.jssglr.client.Worker::getFactory()();
 		self.spoofax.createParser = function(lang) {
 			return oneself. at org.spoofax.jssglr.client.Worker::createParser(Ljava/lang/String;)(lang);
 		}
+		self.spoofax.createParserSync = function(ast) {
+			return oneself. at org.spoofax.jssglr.client.Worker::createParserSync(Lorg/spoofax/interpreter/terms/IStrategoTerm;)(ast);
+		}
 	}-*/;
 
 	@Override
 	public void onWorkerLoad() {
+		factory = new NativeTermFactory();
+		jsfactory = factory.exposeFactory(factory);
 		nativeOnWorkerLoad();
 	}
 
+	public JavaScriptObject getFactory() {
+		return jsfactory;
+	}
+
 	private JavaScriptObject createParser(String grammarUrl) {
-		parser = new Parser();
+		parser = new Parser(new TermFactory());
 		return parser.asyncInitializeFromURL(grammarUrl);
 	}
+
+	private JavaScriptObject createParserSync(IStrategoTerm ast) {
+		parser = new Parser(factory);
+		return parser.initializeFromTable(ast);
+	}
 }

Added: spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/NativeTermFactory.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/NativeTermFactory.java	Sat Apr 16 01:02:30 2011	(r22547)
@@ -0,0 +1,59 @@
+package org.spoofax.jssglr.client.services;
+
+import org.spoofax.terms.StrategoConstructor;
+import org.spoofax.terms.TermFactory;
+
+import com.google.gwt.core.client.JavaScriptObject;
+
+public class NativeTermFactory extends TermFactory {
+	JavaScriptObject constructorCache;
+
+	public NativeTermFactory() {
+		super();
+	}
+
+	public StrategoConstructor makeConstructor(String name, int arity) {
+        return nativeMakeConstructor(name, arity);
+    }
+
+	public StrategoConstructor makeNewConstructor(String name, int arity) {
+        return new StrategoConstructor(name, arity);
+    }
+
+	public native StrategoConstructor nativeMakeConstructor(String name, int arity)  /*-{
+		var self = this;
+		var constructor_cache = self. at org.spoofax.jssglr.client.services.NativeTermFactory::constructorCache;
+        var cache = constructor_cache[name];
+	    if(cache === undefined) {
+	        constructor_cache[name] = cache = {};
+	    }
+	    var ctor = cache[arity];
+	    if(ctor === undefined) {
+	        cache[arity] = ctor = self. at org.spoofax.jssglr.client.services.NativeTermFactory::makeNewConstructor(Ljava/lang/String;I)(name, arity);
+	    }
+	    return ctor;
+    }-*/;
+
+	public native JavaScriptObject exposeFactory(TermFactory factory) /*-{
+		var self = this;
+		self. at org.spoofax.jssglr.client.services.NativeTermFactory::constructorCache = {};
+		var factory = {};
+		factory.makeConstructor = function(name, arity) {
+			return self. at org.spoofax.jssglr.client.services.NativeTermFactory::nativeMakeConstructor(Ljava/lang/String;I)(name, arity);
+		};
+		factory.makeString = function(s) {
+			return self. at org.spoofax.jssglr.client.services.NativeTermFactory::makeString(Ljava/lang/String;)(s);
+		};
+		factory.makeAppl = function (ctr, terms, annotations) {
+			return self. at org.spoofax.jssglr.client.services.NativeTermFactory::makeAppl(Lorg/spoofax/interpreter/terms/IStrategoConstructor;[Lorg/spoofax/interpreter/terms/IStrategoTerm;Lorg/spoofax/interpreter/terms/IStrategoList;)(ctr, terms, annotations);
+		};
+		factory.makeInt = function(i) {
+			return self. at org.spoofax.jssglr.client.services.NativeTermFactory::makeInt(I)(i);
+		};
+		factory.makeList = function (terms, outerAnnos) {
+			return self. at org.spoofax.jssglr.client.services.NativeTermFactory::makeList([Lorg/spoofax/interpreter/terms/IStrategoTerm;Lorg/spoofax/interpreter/terms/IStrategoList;)(terms, outerAnnos);
+		};
+		factory.result = null;
+		return factory;
+	}-*/;
+}

Modified: spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java
==============================================================================
--- spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java	Fri Apr 15 23:21:54 2011	(r22546)
+++ spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java	Sat Apr 16 01:02:30 2011	(r22547)
@@ -55,59 +55,92 @@
 	private ParseTable parseTable;
 	private TreeBuilder treeBuilder;
 	private SGLR sglr;
+	private boolean tableLoaded = false;
 	private Set<String> incrementalSorts;
 	private IStrategoTerm lastResult;
 
-	public Parser() {
-		af = new TermFactory();
+	public Parser(ITermFactory termFactory) {
+		af = termFactory;
 
 		incrementalSorts = new HashSet<String>();
 		for (String s : HACK_DEFAULT_INCREMENTAL_SORTS)
 			incrementalSorts.add(s);
 	}
 
-	public JavaScriptObject asyncInitializeFromURL(String parseTableURL) {
+	public JavaScriptObject asyncInitializeFromURL(final String parseTableURL) {
 		final RequestBuilder builder = new RequestBuilder(RequestBuilder.GET, parseTableURL);
 		try {
 			builder.sendRequest( null,  new RequestCallback() {
 				@Override
 				public void onError(Request request, Throwable exception)
 				{
+					tableLoaded = true;
 					GWT.log( "error", exception );
+					logToConsole("Could not load parse table at: '" + parseTableURL + "' due to: " + exception.getMessage());
 				}
 				@Override
 				public void onResponseReceived(Request request, Response response) {
+					tableLoaded = true;
 					if(response.getStatusCode() == 200 || response.getStatusCode() == 304) {
-						initialize(response.getText());
+						initializeFromString(response.getText());
+						parseTableLoaded();
+					} else {
+						logToConsole("Could not load parse table at: " + parseTableURL);
 					}
 				}
 			});
 		} catch (final RequestException e) {
 			GWT.log( "error", e);
+			tableLoaded = true;
+			logToConsole("Could not build parsetable request for: '" + parseTableURL + "' due to: " + e.getMessage());
 		}
 
 		return exposeParser(this);
 	}
 
-	private void initialize(String tableContents) {
+	public JavaScriptObject initializeFromTable(IStrategoTerm tableTerm) {
+		initialize(tableTerm);
+		return exposeParser(this);
+	}
+
+	private void initializeFromString(String tableContents) {
 		// TODO: share table across multiple Parser instances
+		long before = System.currentTimeMillis();
 		IStrategoTerm tableTerm = af.parseFromString(tableContents);
+		long after = System.currentTimeMillis();
+		logToConsole("break here: " + (after-before));
+		initialize(tableTerm);
+	}
+
+	private void initialize(IStrategoTerm tableTerm) {
+
 		try {
 			parseTable = new ParseTable(tableTerm, af);
-			TermTreeFactory factory = new TermTreeFactory(af);
-			treeBuilder = new TreeBuilder(factory);
-			sglr = new SGLR(treeBuilder, parseTable);
-			sglr.setUseStructureRecovery(true);
-//			sglr = new IncrementalSGLR<IStrategoTerm>(parser, C_STYLE, factory, incrementalSorts);
 		} catch (InvalidParseTableException e) {
 			GWT.log("error", e);
+			logToConsole("Could not load parsetable due to: " + e.getMessage());
+			return;
 		}
+		TermTreeFactory factory = new TermTreeFactory(af);
+		treeBuilder = new TreeBuilder(factory);
+		sglr = new SGLR(treeBuilder, parseTable);
+		sglr.setUseStructureRecovery(true);
+//			sglr = new IncrementalSGLR<IStrategoTerm>(parser, C_STYLE, factory, incrementalSorts);
+
 	}
 
 	public boolean isReady() {
 		return sglr != null;
 	}
 
+	public boolean isTableLoaded() {
+		return tableLoaded;
+	}
+
+	public boolean loadFailed() {
+		return tableLoaded && sglr == null;
+	}
+
 	private native JavaScriptObject exposeParser (Parser parser) /*-{
 		var self = this;
 		var parser = {};
@@ -117,6 +150,12 @@
 		parser.parseAndTokenize = function (lineCount, text) {
 			return self. at org.spoofax.jssglr.client.services.Parser::parseAndTokenize(ILjava/lang/String;)(lineCount, text);
 		};
+		parser.loadFailed = function() {
+			return self. at org.spoofax.jssglr.client.services.Parser::loadFailed()();
+		}
+		parser.isTableLoaded = function() {
+			return self. at org.spoofax.jssglr.client.services.Parser::isTableLoaded()();
+		}
 		parser.isReady = function() {
 			return self. at org.spoofax.jssglr.client.services.Parser::isReady()();
 		};
@@ -260,10 +299,14 @@
 		return makeParseResult(makeJsArray(attrs), jserrors);
 	}
 
-	public native static void debug(String message) /*-{
+	public native static void logToConsole(String message) /*-{
 		$self.sender.emit("log", message);
 	}-*/;
 
+	public native static void parseTableLoaded() /*-{
+		$self.sender.emit("loaded", "");
+	}-*/;
+
 	public native static JavaScriptObject createWarningToken(int row, int column, String text, boolean isWarning) /*-{
 		return {
 			row: row,

From seba at informatik.uni-marburg.de  Sat Apr 16 12:14:23 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Sat, 16 Apr 2011 10:14:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22548 - in
	sugarj/trunk: feature update-site
Message-ID: <20110416101423.0ADC9108C024@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Sat Apr 16 10:14:22 2011
New Revision: 22548
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22548&sc=1

Log:
added SugarJ feature and update site

Added:
   sugarj/trunk/feature/
   sugarj/trunk/feature/.project
   sugarj/trunk/feature/build.properties
   sugarj/trunk/feature/feature.xml
   sugarj/trunk/update-site/
   sugarj/trunk/update-site/.project
   sugarj/trunk/update-site/site.xml

Added: sugarj/trunk/feature/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/feature/.project	Sat Apr 16 10:14:22 2011	(r22548)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.sugarj.feature</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.pde.FeatureBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.FeatureNature</nature>
+	</natures>
+</projectDescription>

Added: sugarj/trunk/feature/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/feature/build.properties	Sat Apr 16 10:14:22 2011	(r22548)
@@ -0,0 +1 @@
+bin.includes = feature.xml

Added: sugarj/trunk/feature/feature.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/feature/feature.xml	Sat Apr 16 10:14:22 2011	(r22548)
@@ -0,0 +1,325 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<feature
+      id="org.sugarj.editor"
+      label="SugarJ"
+      version="1.0.1.qualifier"
+      provider-name="sugarj.org">
+
+   <description url="http://www.sugarj.org/update">
+      SugarJ
+   </description>
+
+   <copyright url="http://www.example.com/copyright">
+      SugarJ
+   </copyright>
+
+   <url>
+      <update label="SugarJ" url="http://sugarj.org/update"/>
+   </url>
+
+   <requires>
+      <import plugin="org.eclipse.core.runtime"/>
+      <import plugin="org.eclipse.core.resources"/>
+      <import plugin="org.junit"/>
+      <import plugin="org.eclipse.swt"/>
+      <import plugin="org.eclipse.jface"/>
+      <import plugin="org.eclipse.jface.text"/>
+      <import plugin="org.eclipse.ui.editors"/>
+      <import plugin="org.eclipse.ui.workbench"/>
+      <import plugin="org.eclipse.ui"/>
+      <import plugin="org.eclipse.ui.ide"/>
+      <import plugin="org.eclipse.ant.core"/>
+      <import plugin="org.eclipse.ui.console"/>
+      <import plugin="org.eclipse.debug.ui"/>
+      <import plugin="org.junit4"/>
+      <import plugin="org.eclipse.compare"/>
+      <import plugin="org.eclipse.core.filesystem"/>
+      <import plugin="org.eclipse.debug.core"/>
+      <import plugin="org.eclipse.help"/>
+      <import plugin="org.eclipse.ltk.core.refactoring"/>
+      <import plugin="org.eclipse.ltk.ui.refactoring"/>
+      <import plugin="org.eclipse.ui.navigator"/>
+      <import plugin="org.eclipse.ui.views"/>
+      <import plugin="org.eclipse.ui.workbench.texteditor"/>
+      <import plugin="org.eclipse.jdt.core" version="3.5.0" match="greaterOrEqual"/>
+      <import plugin="org.eclipse.osgi"/>
+      <import plugin="org.eclipse.jdt.ui" version="3.5.0" match="greaterOrEqual"/>
+      <import plugin="org.eclipse.pde.ui"/>
+      <import plugin="org.eclipse.ui.forms"/>
+      <import plugin="org.eclipse.search"/>
+      <import plugin="org.eclipse.pde"/>
+      <import plugin="org.eclipse.ui.cheatsheets"/>
+      <import plugin="org.eclipse.pde.core"/>
+      <import plugin="org.eclipse.help.ui"/>
+      <import plugin="org.eclipse.jdt.debug" version="3.5.0" match="greaterOrEqual"/>
+      <import plugin="org.eclipse.jdt.launching" version="3.5.0" match="greaterOrEqual"/>
+      <import plugin="org.eclipse.core.variables"/>
+   </requires>
+
+   <plugin
+         id="org.strategoxt.imp.metatooling"
+         download-size="52"
+         install-size="94"
+         version="0.1.1.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.strategoxt.imp.runtime"
+         download-size="364"
+         install-size="791"
+         version="0.1.1.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.spoofax.aterm"
+         download-size="153"
+         install-size="238"
+         version="0.2.3.201104091523"/>
+
+   <plugin
+         id="org.spoofax.compiler"
+         download-size="8"
+         install-size="12"
+         version="0.3.9.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.spoofax.interpreter.core"
+         download-size="241"
+         install-size="486"
+         version="0.4.0.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.spoofax.interpreter.library.jsglr"
+         download-size="13"
+         install-size="21"
+         version="0.3.9.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.spoofax.jsglr"
+         download-size="211"
+         install-size="436"
+         version="0.3.0.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.eclipse.imp.lpg"
+         download-size="2"
+         install-size="2"
+         version="0.1.84.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.eclipse.imp.runtime"
+         download-size="687"
+         install-size="1435"
+         version="0.1.101.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="lpg.runtime"
+         download-size="89"
+         install-size="94"
+         version="2.0.17.201104091523"/>
+
+   <plugin
+         id="org.eclipse.imp.smapi"
+         download-size="8"
+         install-size="13"
+         version="0.1.89.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.eclipse.imp.smapifier"
+         download-size="11"
+         install-size="19"
+         version="0.1.89.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.strategoxt.imp.editors.editorservice"
+         download-size="801"
+         install-size="1353"
+         version="0.1.1.201104091523"/>
+
+   <plugin
+         id="com.ibm.wala.shrike"
+         download-size="283"
+         install-size="537"
+         version="1.1.3.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.eclipse.imp.metatooling"
+         download-size="591"
+         install-size="1017"
+         version="0.1.92.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.eclipse.imp.preferences"
+         download-size="19"
+         install-size="35"
+         version="0.1.86.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.eclipse.imp.prefspecs"
+         download-size="450"
+         install-size="950"
+         version="0.1.89.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.eclipse.imp.presentation"
+         download-size="319"
+         install-size="597"
+         version="0.1.7.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.strategoxt.strj"
+         download-size="11053"
+         install-size="13138"
+         version="0.17.92.201104091523"/>
+
+   <plugin
+         id="org.strategoxt.imp.generator"
+         download-size="7781"
+         install-size="8723"
+         version="0.1.2.201104091523"/>
+
+   <plugin
+         id="org.strategoxt.imp.editors.sdf"
+         download-size="841"
+         install-size="1376"
+         version="0.0.0"/>
+
+   <plugin
+         id="org.strategoxt.imp.editors.stratego"
+         download-size="1728"
+         install-size="2825"
+         version="0.1.1.201104091523"/>
+
+   <plugin
+         id="org.strategoxt.imp.editors.aterm"
+         download-size="23"
+         install-size="35"
+         version="0.1.1.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.strategoxt.imp.nativebundle"
+         download-size="4976"
+         install-size="18388"
+         version="0.0.0"/>
+
+   <plugin
+         id="org.eclipse.imp.java.hosted"
+         download-size="48"
+         install-size="95"
+         version="0.1.2.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.eclipse.imp.lpg.ide"
+         download-size="1231"
+         install-size="3031"
+         version="0.1.87.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.eclipse.imp.xform"
+         download-size="187"
+         install-size="371"
+         version="0.1.91.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.strategoxt.imp.editors.aster"
+         download-size="2239"
+         install-size="2777"
+         version="0.1.0.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.strategoxt.imp.editors.pp"
+         download-size="68"
+         install-size="214"
+         version="0.1.0.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.strategoxt.imp.editors.rtg"
+         download-size="55"
+         install-size="190"
+         version="0.1.0.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.strategoxt.imp.testing"
+         download-size="72"
+         install-size="142"
+         version="1.0.0.201104091523"/>
+
+   <plugin
+         id="org.spoofax.terms"
+         download-size="100"
+         install-size="205"
+         version="1.0.0.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.strategoxt.imp.debug.core"
+         download-size="48"
+         install-size="100"
+         version="0.1.1.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.strategoxt.imp.debug.stratego.core"
+         download-size="99"
+         install-size="198"
+         version="0.1.1.201104091523"/>
+
+   <plugin
+         id="org.strategoxt.imp.debug.ui"
+         download-size="22"
+         install-size="37"
+         version="0.1.1.201104091523"
+         unpack="false"/>
+
+   <plugin
+         id="org.strategoxt.imp.debug.stratego.runtime"
+         download-size="83"
+         install-size="143"
+         version="0.1.0.201104091523"/>
+
+   <plugin
+         id="org.strategoxt.imp.debug.stratego.transformer"
+         download-size="1880"
+         install-size="3605"
+         version="0.1.0.201104091523"/>
+
+   <plugin
+         id="org.sugarj.compiler"
+         download-size="0"
+         install-size="0"
+         version="0.0.0"
+         unpack="false"/>
+
+   <plugin
+         id="org.sugarj.editor"
+         download-size="0"
+         install-size="0"
+         version="0.0.0"/>
+
+   <plugin
+         id="org.sugarj.stdlib"
+         download-size="0"
+         install-size="0"
+         version="0.0.0"/>
+
+</feature>

Added: sugarj/trunk/update-site/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/update-site/.project	Sat Apr 16 10:14:22 2011	(r22548)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.sugarj.update-site</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.pde.UpdateSiteBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.UpdateSiteNature</nature>
+	</natures>
+</projectDescription>

Added: sugarj/trunk/update-site/site.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/update-site/site.xml	Sat Apr 16 10:14:22 2011	(r22548)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<site>
+   <description name="SugarJ" url="sugarj.org/update">
+      SugarJ
+   </description>
+   <feature url="features/org.sugarj.editor_1.0.1.201104161011.jar" id="org.sugarj.editor" version="1.0.1.201104161011">
+      <category name="SugarJ"/>
+   </feature>
+   <category-def name="SugarJ" label="SugarJ">
+      <description>
+         SugarJ plugin
+      </description>
+   </category-def>
+</site>

From r.t.lindeman at student.tudelft.nl  Sun Apr 17 23:42:30 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Sun, 17 Apr 2011 21:42:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22549 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20110417214230.B34D47F8004@mx1.tudelft.nl>

Author: RickyLindeman
Date: Sun Apr 17 21:42:30 2011
New Revision: 22549
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22549&sc=1

Log:
Fixed type in ant-script generation.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Sat Apr 16 10:14:22 2011	(r22548)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Sun Apr 17 21:42:30 2011	(r22549)
@@ -615,7 +615,7 @@
 	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
 	        <java classname="org.strategoxt.strj.Main" failonerror="true">
 	            <arg value="-i"/>
-	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
 	            <arg value="-o"/>
 	            <arg value="${build.stratego.outputfile}"/>
 	            <arg value="-p"/>

From r.t.lindeman at student.tudelft.nl  Sun Apr 17 23:46:01 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Sun, 17 Apr 2011 21:46:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22550 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime: META-INF
	src/org/strategoxt/imp/runtime
	src/org/strategoxt/imp/runtime/dynamicloading
	src/org/strategoxt/imp/runti...
Message-ID: <20110417214601.877D3108C015@mx3.tudelft.nl>

Author: RickyLindeman
Date: Sun Apr 17 21:46:01 2011
New Revision: 22550
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22550&sc=1

Log:
Activated Debuggable HybridInterpreter  in the imp.runtime.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/DebugModeBuilder.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Sun Apr 17 21:42:30 2011	(r22549)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Sun Apr 17 21:46:01 2011	(r22550)
@@ -22,7 +22,8 @@
  org.spoofax.compiler,
  org.strategoxt.imp.generator,
  org.spoofax.terms,
- org.strategoxt.strj
+ org.strategoxt.strj,
+ org.strategoxt.imp.debug.core
 Export-Package: org.strategoxt.imp.runtime,
  org.strategoxt.imp.runtime.dynamicloading,
  org.strategoxt.imp.runtime.parser,

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	Sun Apr 17 21:42:30 2011	(r22549)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	Sun Apr 17 21:46:01 2011	(r22550)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.runtime;
 
+import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
@@ -14,6 +15,7 @@
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.imp.language.Language;
@@ -22,6 +24,7 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.StackTracer;
+import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
@@ -35,6 +38,7 @@
 import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.attachments.ParentTermFactory;
 import org.strategoxt.HybridInterpreter;
+import org.strategoxt.imp.debug.core.str.launching.DebuggableHybridInterpreter;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 import org.strategoxt.imp.runtime.dynamicloading.DynamicParseTableProvider;
@@ -58,6 +62,8 @@
  */
 public final class Environment {
 	
+	public static boolean DEBUG_INTERPRETER_ENABLED = true; // set to false to disable the creation of a DebuggableHybridInterpreter
+	
 	private final static ParseTableManager parseTableManager;
 	
 	private final static Map<String, ParseTableProvider> parseTables;
@@ -65,7 +71,7 @@
 	private final static Map<String, ParseTableProvider> unmanagedTables;
 	
 	private final static Map<String, Descriptor> descriptors;
-	
+
 	private final static ITermFactory termFactory;
 	
 	private final static PrintStream STDERR = System.err; // avoid deadlocky ant override
@@ -165,30 +171,67 @@
 	public static HybridInterpreter createInterpreter() {
 		return createInterpreter(false);
 	}
+	
+	private static HybridInterpreter createHybridInterpreter(boolean noGlobalLock)
+	{
+		HybridInterpreter result = noGlobalLock
+		? new HybridInterpreter(getTermFactory(true))
+		: new HybridInterpreter(getTermFactory(true)) {
+			@Override
+			public boolean invoke(String name) throws InterpreterExit, InterpreterException {
+				assertLock();
+				return super.invoke(name);
+			}
+			
+			@Override
+			public void load(IStrategoTerm program) throws InterpreterException {
+				assertLock();
+				super.load(program);
+			}
+			
+			@Override
+			public IStrategoTerm current() {
+				assertLock();
+				return super.current();
+			}
+		};
+		return result;
+	}
+	
+	private static DebuggableHybridInterpreter createDebuggableHybridInterpreter(boolean noGlobalLock)
+	{
+		DebuggableHybridInterpreter result = noGlobalLock
+		? new DebuggableHybridInterpreter(getTermFactory(true))
+		: new DebuggableHybridInterpreter(getTermFactory(true)) {
+			@Override
+			public boolean invoke(String name) throws InterpreterExit, InterpreterException {
+				assertLock();
+				return super.invoke(name);
+			}
+			
+			@Override
+			public void load(IStrategoTerm program) throws InterpreterException {
+				assertLock();
+				super.load(program);
+			}
+			
+			@Override
+			public IStrategoTerm current() {
+				assertLock();
+				return super.current();
+			}
+		};
+		return result;
+	}
 
 	public static HybridInterpreter createInterpreter(boolean noGlobalLock) {
-		HybridInterpreter result =	noGlobalLock
-			? new HybridInterpreter(getTermFactory(true))
-			: new HybridInterpreter(getTermFactory(true)) {
-				@Override
-				public boolean invoke(String name) throws InterpreterExit, InterpreterException {
-					assertLock();
-					return super.invoke(name);
-				}
-				
-				@Override
-				public void load(IStrategoTerm program) throws InterpreterException {
-					assertLock();
-					super.load(program);
-				}
-				
-				@Override
-				public IStrategoTerm current() {
-					assertLock();
-					return super.current();
-				}
-			};
-		
+		HybridInterpreter result = null;
+		if (DEBUG_INTERPRETER_ENABLED)
+		{
+			result = createDebuggableHybridInterpreter(noGlobalLock);
+		} else {
+			result = createHybridInterpreter(noGlobalLock);
+		}
 		result.getCompiledContext().getExceptionHandler().setEnabled(false);
 		result.getCompiledContext().registerComponent("stratego_lib"); // ensure op. registry available
 		result.getCompiledContext().registerComponent("stratego_sglr"); // ensure op. registry available
@@ -207,7 +250,24 @@
 		return result;
 	}
 
+	/**
+	 * Creates a new Interpreter using the given Interpreter as prototype.
+	 */
 	public static HybridInterpreter createInterpreterFromPrototype(HybridInterpreter prototype) {
+		HybridInterpreter result = null;
+		if (DEBUG_INTERPRETER_ENABLED)
+		{
+			// create a DebuggableHybridInterpreter from the prototype
+			result = createDebuggableHybridInterpreterFromPrototype(prototype);
+		} else {
+			// create a normal HybridInterpreter from the prototype
+			result = createHybridInterpreterFromPrototype(prototype);
+		}
+		return result;
+	}
+	
+	private static HybridInterpreter createHybridInterpreterFromPrototype(HybridInterpreter prototype)
+	{
 		HybridInterpreter result = new HybridInterpreter(prototype,
 				IMPJSGLRLibrary.REGISTRY_NAME, // is spoofax-specific
 				JSGLRLibrary.REGISTRY_NAME,    // connected to the library above
@@ -218,6 +278,28 @@
 		return result;
 	}
 	
+	/**
+	 * TODO: For now ignore the prototype as the actual HybridInterpreter will be run in another VM. 
+	 */
+	private static DebuggableHybridInterpreter createDebuggableHybridInterpreterFromPrototype(HybridInterpreter prototype)
+	{
+		DebuggableHybridInterpreter result = new DebuggableHybridInterpreter(prototype,
+				IMPJSGLRLibrary.REGISTRY_NAME, // is spoofax-specific
+				JSGLRLibrary.REGISTRY_NAME,    // connected to the library above
+				IMPLibrary.REGISTRY_NAME);     // also used
+		result.getCompiledContext().getExceptionHandler().setEnabled(false);
+		IMPJSGLRLibrary parseLibrary = ((IMPJSGLRLibrary) result.getContext().getOperatorRegistry(IMPJSGLRLibrary.REGISTRY_NAME));
+		parseLibrary.addOverrides(result.getCompiledContext());
+		
+		IOAgent agent = prototype.getIOAgent();
+		if (agent instanceof EditorIOAgent)
+		{
+			EditorIOAgent eioAgent = (EditorIOAgent) agent;
+			result.setProjectpath(eioAgent.getProjectPath());
+		}
+		return result;
+	}
+	
 	public static ParseTableProvider registerParseTable(Language language, ParseTableProvider table) {
 		parseTables.put(language.getName(), table);
 		return table;
@@ -280,6 +362,27 @@
 		}
 	}
 	
+	/**
+	 * Returns true if the given Descriptor allows debugging.
+	 * 
+	 * Place a file in the project dir with the name ".debugmode". This tells the ant build script we want to enable debugging.
+	 * 
+	 * @param descriptor
+	 * @return Returns true if the given Descriptor allows debugging.
+	 */
+	public static boolean allowsDebugging(Descriptor descriptor)
+	{
+		IPath debugModeFile = descriptor.getBasePath().append(".debugmode");
+		File file = new File(debugModeFile.toOSString());
+		if (file.exists())
+		{
+			// enable debugging for the developer
+			return true;
+		} else {
+			return false;
+		}
+	}
+	
 	public static ParseTable getUnmanagedParseTable(String name) {
 		ParseTableProvider result = unmanagedTables.get(name);
 		try {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	Sun Apr 17 21:42:30 2011	(r22549)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	Sun Apr 17 21:46:01 2011	(r22550)
@@ -1,32 +1,26 @@
 package org.strategoxt.imp.runtime.dynamicloading;
 
 import static org.spoofax.interpreter.core.Tools.termAt;
-import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getSort;
-import static org.spoofax.terms.Term.tryGetConstructor;
-import static org.spoofax.terms.attachments.ParentAttachment.getParent;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.collectTerms;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.cons;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.termContents;
 
-import java.util.ArrayList;
 import java.util.LinkedHashSet;
 import java.util.Set;
 
 import org.eclipse.imp.editor.UniversalEditor;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
-import org.strategoxt.imp.runtime.parser.ast.StrategoSubList;
 import org.strategoxt.imp.runtime.services.BuilderMap;
 import org.strategoxt.imp.runtime.services.CustomStrategyBuilder;
+import org.strategoxt.imp.runtime.services.DebugModeBuilder;
 import org.strategoxt.imp.runtime.services.IBuilder;
 import org.strategoxt.imp.runtime.services.IBuilderMap;
 import org.strategoxt.imp.runtime.services.InputTermBuilder;
-import org.strategoxt.imp.runtime.services.NodeMapping;
 import org.strategoxt.imp.runtime.services.StrategoBuilder;
 import org.strategoxt.imp.runtime.services.StrategoBuilderListener;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
@@ -54,6 +48,10 @@
 		addCustomStrategyBuilder(d, controller, builders, derivedFromEditor);
 		if (EditorState.isUIThread()) // don't show for background (realtime) builders; not threadsafe
 			addRefactorings(d, controller, builders);
+		if (Environment.allowsDebugging(d)) // Descriptor allows debugging)
+		{
+			addDebugModeBuilder(d, controller, builders, derivedFromEditor);
+		}
 		return new BuilderMap(builders);
 	}
 
@@ -182,6 +180,18 @@
 		}
 	}
 
+	/**
+	 * Adds a Debug Mode Builder, if debug mode is allowed the user can choose to enable stratego debugging.
+	 * If debugging is enabled, a new JVM is started for every strategy invoke resulting in major performance drops.
+	 * The user can also disable Debug mode, without needing to rebuil the project. 
+	 */
+	private static void addDebugModeBuilder(Descriptor d, SGLRParseController controller,
+			Set<IBuilder> builders, EditorState derivedFromEditor) throws BadDescriptorException
+	{
+		StrategoObserver feedback = d.createService(StrategoObserver.class, controller);
+		builders.add(new DebugModeBuilder(feedback));
+	}
+	
 	private static EditorState getDerivedFromEditor(SGLRParseController controller) {
 		if (controller.getEditor() == null || controller.getEditor().getEditor() == null)
 			return null;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java	Sun Apr 17 21:42:30 2011	(r22549)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java	Sun Apr 17 21:46:01 2011	(r22550)
@@ -105,10 +105,12 @@
 			// item.fill(menu, Action.AS_PUSH_BUTTON);
 			item.fill(menu, menu.getItemCount());
 		}
+		// TODO: only add the debug menu-item to the transform menu when it is defined in the language description
+		//addDebugModeMenuItem();
 		
 		dummy.dispose();
 	}
-
+	
 	private IBuilderMap getBuilders(EditorState editor) {
 		IBuilderMap builders;
 		try {

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/DebugModeBuilder.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/DebugModeBuilder.java	Sun Apr 17 21:46:01 2011	(r22550)
@@ -0,0 +1,126 @@
+package org.strategoxt.imp.runtime.services;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.IncrementalProjectBuilder;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.jface.dialogs.ErrorDialog;
+import org.eclipse.ui.progress.UIJob;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.MonitorStateWatchDog;
+import org.strategoxt.imp.runtime.RuntimeActivator;
+
+/**
+ * Toggles between stratego debugging.
+ * 
+ * If debug mode is allowed in Environment.allowsDebugging(Descriptor) the user can disable or enable debugging.
+ * @author rlindeman
+ *
+ */
+public class DebugModeBuilder implements IBuilder {
+
+	private final StrategoObserver observer;
+	
+	public DebugModeBuilder(StrategoObserver observer) {
+		this.observer = observer;
+	}
+
+	public String getCaption() {
+		if (this.observer.isDebuggerEnabled())
+		{
+			return "Disable debug mode";
+		}
+		else
+		{
+			return "Enable debug mode";
+		}
+	}
+
+	public Job scheduleExecute(final EditorState editor, IStrategoTerm node,
+			final IFile errorReportFile, final boolean isRebuild) {
+		// ignore the parameters, we just want to toggle the debug mode and rebuild the project (if necessary)
+
+		boolean isDebuggerEnabled = observer.isDebuggerEnabled();
+		observer.setDebuggerEnabled(!isDebuggerEnabled); // toggle
+		boolean needsProjectRebuild = false;
+		if (observer.isDebuggerEnabled())
+		{
+			try {
+				needsProjectRebuild = observer.needsProjectRebuild();
+			} catch (CoreException e) {
+				this.openError(editor, e.getMessage());
+			}
+		}
+		System.out.println("NEEDS REBUILD: " + needsProjectRebuild);
+		Job job = null;
+		if (needsProjectRebuild)
+		{
+			job = new Job("Executing " + displayCaption) {
+				@Override
+				protected IStatus run(IProgressMonitor monitor) {
+					MonitorStateWatchDog protector = new MonitorStateWatchDog(this, monitor, observer);
+					try {
+						execute(editor, monitor);
+						return monitor.isCanceled() ? Status.CANCEL_STATUS : Status.OK_STATUS;
+					} finally {
+						protector.endProtect();
+					}
+				}
+			};
+			job.setUser(true);
+			job.schedule();
+		}
+		return job;
+	}
+	
+	/**
+	 * Executes a rebuild of the Project.
+	 * @param editor
+	 * @param monitor
+	 */
+	private void execute(EditorState editor, IProgressMonitor monitor) {
+		// rebuild the project
+		IProject project = this.observer.getProject();
+		if (project != null)
+		{
+			int kind = IncrementalProjectBuilder.INCREMENTAL_BUILD;
+			//int kind = IncrementalProjectBuilder.FULL_BUILD;
+			
+			//IProgressMonitor monitor = null;
+			try {
+				project.build(kind, monitor);
+			} catch (CoreException e) {
+				Environment.logException(e.getMessage());
+				openError(editor, e.getMessage());
+			}
+		}
+	}
+
+	public Object getData() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public void setData(Object data) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	private String displayCaption = "Debug mode";
+	
+	private void openError(EditorState editor, String message) {
+		try {
+			Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
+			ErrorDialog.openError(editor.getEditor().getSite().getShell(),
+					displayCaption, null, status);
+		} catch (RuntimeException e) {
+			Environment.logException("Problem reporting error: " + message, e);
+		}
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Sun Apr 17 21:42:30 2011	(r22549)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Sun Apr 17 21:46:01 2011	(r22550)
@@ -8,7 +8,9 @@
 import static org.spoofax.terms.Term.isTermString;
 import static org.spoofax.terms.attachments.OriginAttachment.tryGetOrigin;
 import static org.spoofax.terms.attachments.ParentAttachment.getParent;
+import static org.strategoxt.imp.runtime.dynamicloading.TermReader.collectTerms;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.cons;
+import static org.strategoxt.imp.runtime.dynamicloading.TermReader.termContents;
 
 import java.io.File;
 import java.io.IOException;
@@ -21,12 +23,19 @@
 import java.util.WeakHashMap;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
+import java.util.jar.JarFile;
 
 import org.eclipse.core.resources.IMarker;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.IncrementalProjectBuilder;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Status;
 import org.eclipse.imp.parser.IModelListener;
 import org.eclipse.imp.parser.IParseController;
 import org.spoofax.IAsyncCancellable;
@@ -37,6 +46,7 @@
 import org.spoofax.interpreter.core.UndefinedStrategyException;
 import org.spoofax.interpreter.library.LoggingIOAgent;
 import org.spoofax.interpreter.terms.ISimpleTerm;
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -44,10 +54,12 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.IncompatibleJarException;
+import org.strategoxt.imp.debug.core.str.launching.DebuggableHybridInterpreter;
 import org.strategoxt.imp.generator.postprocess_feedback_results_0_0;
 import org.strategoxt.imp.generator.sdf2imp;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.RuntimeActivator;
 import org.strategoxt.imp.runtime.SWTSafeLock;
 import org.strategoxt.imp.runtime.WeakWeakMap;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
@@ -63,6 +75,7 @@
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoException;
 import org.strategoxt.stratego_lib.set_config_0_0;
+import org.strategoxt.stratego_lib.system_about_0_0;
 
 /**
  * Basic Stratego feedback (i.e., errors and warnings) provider.
@@ -73,6 +86,8 @@
  */
 public class StrategoObserver implements IDynamicLanguageService, IModelListener, IAsyncCancellable {
 	
+	public long time = System.currentTimeMillis();
+	
 	// TODO: separate delay for error markers?
 	public static final int OBSERVER_DELAY = 600;
 	
@@ -106,6 +121,14 @@
 	
 	private boolean wasExceptionLogged;
 	
+	/**
+	 * Value is true when the user enabled debugging for this language.
+	 * 
+	 * When debugging is enabled it will start a JVM for every StrategoObserver.invoke(...).
+	 * The user is limited to one (TODO: make limit configarable) debug session at a time, to prevent exessive memory and cpu usage.
+	 */
+	private volatile boolean isDebuggerEnabled = false;
+	
 	public StrategoObserver(Descriptor descriptor, String feedbackFunction) {
 		this.descriptor = descriptor;
 		this.feedbackFunction = feedbackFunction;
@@ -156,6 +179,126 @@
 		return inputBuilder;
 	}
 	
+	/**
+	 * Returns true if the debugger is enabled for the next invoke.
+	 * @return Returns true if the debugger is enabled for the next invoke.
+	 */
+	public boolean isDebuggerEnabled() {
+		return isDebuggerEnabled;
+	}
+	
+	public void setDebuggerEnabled(boolean isDebuggerEnabled) {
+		this.isDebuggerEnabled = isDebuggerEnabled;
+	}
+	
+	
+	/**
+	 * Returns true if the Language Descriptor uses a ctree as provider.
+	 * @return
+	 */
+	private boolean usesCTrees()
+	{
+		//List<File> providers = new ArrayList<File>();
+		for (IStrategoAppl s : collectTerms(this.descriptor.getDocument(), "SemanticProvider")) {
+			IPath p = new Path(termContents(s));
+			if ("ctree".equals(p.getFileExtension()))
+			{
+				//providers.add();
+				return true;
+			}
+		}
+		return false;
+		
+	}
+	
+	
+	public boolean needsProjectRebuild() throws CoreException
+	{
+		// check if the spoofax project is already built with debug info
+		// if not try to rebuild
+		// only rebuild when we are not using ctree's.
+		// the debugger will be enabled
+		// check if the project was already build with debug information
+		// if it isn't, then rebuild the project
+		if (!(this.runtime instanceof DebuggableHybridInterpreter)) {
+			// runtime is not a DebuggableHybridInterpreter the language was not loaded with debug information.
+			// rebuild the project
+			return true;
+			//rebuild(monitor);
+		} else
+		{
+			// .debugmode was found and debug mode is enabled.
+			// Now check if the project was also build with debug information
+			DebuggableHybridInterpreter dhi = (DebuggableHybridInterpreter) this.runtime;
+			List<IPath> loadedJars = dhi.getLoadJarsAsIPathList();
+			boolean needsRebuilding = !this.operatesOnDebugBuild(loadedJars);
+			boolean usesCTree = this.usesCTrees();
+			
+			if (usesCTree)
+			{
+				// please use jars, debug instrumentation is not included for ctrees in the build.main.xml
+				String message = "Please change the providers in the Builders.esv from ctree-files to jar-files, debug instrumentation currently only supports jar-files.";
+				Status status = new Status(Status.ERROR, RuntimeActivator.PLUGIN_ID, message);
+				throw new CoreException(status);
+			} else if (needsRebuilding) {
+				// schedule a rebuild
+				//rebuild(monitor);
+				return true;
+			}
+			
+		}
+		return false;
+
+	}
+	
+	/**
+	 * Returns the Spoofax language descript project this observer is associated with.
+	 * @return
+	 */
+	public IProject getProject()
+	{
+		IPath path = this.descriptor.getBasePath();
+		//System.out.println(path);
+		//System.out.println(path.lastSegment());
+		IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(path.lastSegment());
+		return project;
+	}
+	
+	/**
+	 * Returns true if the current classpath used by the HybridInterpreter is suitable for a debug launch.
+	 * 
+	 *  We check if HybridInterpreterDebugRuntime is located in one of the jars on the classpath, if it is found we can do a debug launch.
+	 * @param classpaths
+	 * @return
+	 */
+	private boolean operatesOnDebugBuild(List<IPath> classpaths)
+	{
+		// try to find the HybridInterpreterDebugRuntime class in the jars on the classpath
+		// http://stackoverflow.com/questions/176527/how-can-i-enumerate-all-classes-in-a-package-and-add-them-to-a-list
+		boolean foundHIDR = false; // try if org.strategoxt.imp.debug.stratego.runtime.strategies.HybridInterpreterDebugRuntime is found in a jar
+		for(IPath path : classpaths)
+		{
+			// if path ends with .jar, then try to find the class
+			if (path.getFileExtension().equals("jar"))
+			{
+				try {
+					JarFile jarFile = new JarFile(path.toFile());
+					
+					java.util.zip.ZipEntry hidrClassEntry = jarFile.getEntry("org/strategoxt/imp/debug/stratego/runtime/strategies/HybridInterpreterDebugRuntime.class");
+					if (hidrClassEntry != null)
+					{
+						foundHIDR = true;
+						break;
+					}
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+			}
+		}
+		return foundHIDR;
+	}
+	
 	private void initialize(IProgressMonitor monitor) {
 		assert getLock().isHeldByCurrentThread();
 		
@@ -182,6 +325,32 @@
 				Environment.asynOpenErrorDialog("Loading analysis components", "Cannot use .str files as a provider: please specify a .ctree or .jar file instead (usually built in /include/)", null);
 			}
 		}
+		// if debug mode is enabled, add the debug-runtime
+		// debug symbols for strategoj
+		//  provider : include/stratego-debug-runtime-java.jar
+		//  provider : include/stratego-debug-runtime.jar
+		boolean allowsDebugging = Environment.allowsDebugging(this.descriptor);
+		try {
+			System.out.println(this.descriptor.getLanguage().getName() + " " + allowsDebugging);
+			if (allowsDebugging)
+			{
+				IPath utilsPath = this.descriptor.getBasePath().append("utils");
+				boolean javajarExists = utilsPath.append("stratego-debug-runtime-java.jar").toFile().exists();
+				boolean jarExists = utilsPath.append("stratego-debug-runtime.jar").toFile().exists();
+				if (!javajarExists || !jarExists)
+				{
+					// one of the required jars does not exist!
+					// make sure the project builds jars instead of ctree's!
+					System.err.println("Debug runtime jars not found! Please rebuild with jars instead of ctree's");
+				} else {
+					jars.add("utils/stratego-debug-runtime-java.jar");
+					jars.add("utils/stratego-debug-runtime.jar");
+				}
+			}
+		} catch (BadDescriptorException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
 		
 		if (!jars.isEmpty()) loadJars(jars);
 		Debug.stopTimer("Loaded analysis components");
@@ -504,6 +673,14 @@
 			((LoggingIOAgent) runtime.getIOAgent()).clearLog();
 			assert runtime.getCompiledContext().getOperatorRegistry(IMPJSGLRLibrary.REGISTRY_NAME)
 					instanceof IMPJSGLRLibrary;
+			boolean isDebugModeAllowed = Environment.allowsDebugging(this.descriptor);
+			if (isDebugModeAllowed && runtime instanceof DebuggableHybridInterpreter)
+			{
+				// enable the debugger, otherwise it would just do a normal invoke
+				// TODO: check if we allow the invoke, the number of simultaneous invokes may have an upper limit
+				// to prevent exessive use of cpu and memory (each invoke will start a new VM!)
+				((DebuggableHybridInterpreter) runtime).setDebugLaunchEnabled(this.isDebuggerEnabled());
+			}
 			boolean success = runtime.invoke(function);
 			
 			// Cleanup input term.
@@ -635,6 +812,12 @@
 			Environment.logException("Could not set Stratego working directory", e);
 			throw new RuntimeException(e);
 		}
+		
+		// TODO: RLINDEMAN: set the project path and the language name
+		if (runtime instanceof DebuggableHybridInterpreter)
+		{
+			((DebuggableHybridInterpreter) runtime).setProjectpath(projectPath);
+		}
 	}
 	
 	public HybridInterpreter getRuntime() {

From M.A.Akhter at student.tudelft.nl  Mon Apr 18 01:21:52 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sun, 17 Apr 2011 23:21:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22551 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen codegen/esv codegen/str utils
Message-ID: <20110417232152.C21E3108C027@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sun Apr 17 23:21:52 2011
New Revision: 22551
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22551&sc=1

Log:
* added qualified-name-to-string lib functions 
* get rid of additional code contract in to-str-import block

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Sun Apr 17 21:46:01 2011	(r22550)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Sun Apr 17 23:21:52 2011	(r22551)
@@ -94,7 +94,7 @@
 		 relative-autogen-path      := <qname-to-path>package-qname
 		;package-directory		      := $[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
  		;package-main-name          := <get-main-file-name>package-qname
- 		;package-name								:= <convert-qname(|"-")>package-qname
+ 		;package-name								:= <qname-to-string>package-qname
  		;package-target-name				:= <get-package-target-name>package-qname    
 
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Sun Apr 17 21:46:01 2011	(r22550)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Sun Apr 17 23:21:52 2011	(r22551)
@@ -38,7 +38,7 @@
 			<debug-compiler>$[codegen | ESV | generate-esv-main  : [<pp-aterm>package-qname]]
 		with	 
  			 relative-autogen-path :=  <qname-to-path>package-qname
- 			;package-esv-main-name := <convert-qname(|"-")>package-qname
+ 			;package-esv-main-name := $[[<convert-qname(|"-")>package-qname].main.packed]
  			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
  		where 
  			{|  Declared-Language-Description,Declared-Builders-Description,Declared-Colorer-Description,
@@ -46,7 +46,7 @@
  					Declared-Completions-Description:
 						//TODO  : Q>> why do we need imports in main.packed.esv  ?
  						<map(get-original-module-declaration;store-esv-defintions)>module-qname*
- 						;sections := <conc>(<add-package-ctree>(package-esv-main-name),   // adding ctree import by default
+ 						;sections := <conc>(<add-package-ctree>(<qname-to-string>package-qname),   // adding ctree import by default
  						 					<all-keys-Declared-Language-Description>, 
  			 								<all-keys-Declared-Builders-Description> ,  
  			 								<all-keys-Declared-Colorer-Description> , 
@@ -56,7 +56,8 @@
  			 								<all-keys-Declared-Completions-Description>
  			 							   )
  			|} 
- 			;esv-aterm := Module(package-esv-main-name, <get-all-imports>module-qname*, sections) 
+ 			//;esv-aterm := Module(package-esv-main-name, <get-all-imports>module-qname*, sections) 
+ 			;esv-aterm := Module(package-esv-main-name, Import([]), sections) 
 		where 
 			<debug-compiler>$[codegen | ESV | Creating content for the ESV Main of package [<pp-aterm>package-qname]. ]	  
  		where

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Sun Apr 17 21:46:01 2011	(r22550)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Sun Apr 17 23:21:52 2011	(r22551)
@@ -45,9 +45,9 @@
 			; Module(_, _ , section') := <get-module-declaration>module-typed-qname
 		where 
 			<debug-compiler> $[CodeGen | STR | generating code for the following module : [<pp-aterm>module-untyped-qname]]
-			;str-aterm := Module(<qname-to-path>module-untyped-qname, <conc>(<to-str-imports-block>section*, <collect-om(?STRSection(<id>), conc)> section*))
- 			;str-string := <to-str-string>str-aterm	
-		where
+			;str-aterm := Module(<qname-to-path>module-untyped-qname, <conc>(<to-str-imports-block(|module-untyped-qname)>section*, <collect-om(?STRSection(<id>), conc)> section*))
+ 			;str-string := <to-str-string>str-aterm
+ 		where
 			 autogen-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
 			;output-path-str := <get-output-path(|"str")>(autogen-dir, module-untyped-qname)
     	;output-path-rtree := <get-output-path(|"rtree")>(autogen-dir, module-untyped-qname)
@@ -57,7 +57,7 @@
 			;<WriteToBinaryFile>( output-path-rtree, str-aterm)
 			;<refresh-workspace-file>output-path-str
 			;<refresh-workspace-file>output-path-rtree
-		  
+		  ;<debug-compiler>$[ Codegen | STR | Finishing generation of following module: [<pp-aterm> module-untyped-qname].]
 	
 	/** 
 	* Generates stratego MAIN output for the specified package-name
@@ -89,6 +89,7 @@
 			;<WriteToBinaryFile>(output-path-rtree , str-aterm ) // saving rtree 
 	 		;<refresh-workspace-file>output-path-str
 			;<refresh-workspace-file>output-path-rtree
+			;<debug-compiler>$[ Codegen | STR | Finishing generation of Main STR Module of package : [<pp-aterm> package-qname].] 
 			
 
 
@@ -98,17 +99,22 @@
 	where 
 		str-section-block := <parenthesize-Stratego; pp-stratego-string>sections*
 
-	to-str-imports-block : sections*  -> str-import-block
-	with contracts( 
-		contract-requires ( is-list |sections*)
-	)
+	to-str-imports-block(|module-qname): sections*  ->str-import-block 
+	with 
+		contracts( 
+			contract-requires ( is-list |sections*);
+			contract-requires ( ?QName(_)|module-qname)
+		)
 	where 
 		spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
 		if <ensure-list-is-not-empty>spx-import-stmt*  then
-			str-import-block := <to-generated-artifact-block(to-generate-artifacts-import-declarations(to-str-import), \s -> [Imports(s)]\)>spx-import-stmt*
+			str-import-block' := <to-generated-artifact-block(to-generated-artifacts-import-declarations(to-str-import), \s -> [Imports(s)]\)>spx-import-stmt*
 		else
-			str-import-block := []
-		end		
+			str-import-block' := []
+		end;
+		module-qualified-path := <qname-to-path>module-qname ;
+		str-import-block := <flatten-list>[[Imports([Import(<get-signature-file-name>module-qualified-path)])], str-import-block'] 
+						 
 			
 	to-str-import: 
 		package-name-> [Import(package-name) , Import(<get-signature-file-name>package-name)]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Sun Apr 17 21:46:01 2011	(r22550)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Sun Apr 17 23:21:52 2011	(r22551)
@@ -12,6 +12,9 @@
 	qname-to-path = 
 		convert-qname(|"/")
 	
+	qname-to-string = 
+		convert-qname(|"-")
+		
 	convert-qname(|seperator) =
 		?QName(qname-parts*)
 		;<separate-by(|seperator);concat-strings>qname-parts*

From L.C.L.Kats at tudelft.nl  Mon Apr 18 14:46:16 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 18 Apr 2011 12:46:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22552 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies
	org.strategoxt.imp.testing/...
Message-ID: <20110418124616.B8843CC112@mx4.tudelft.nl>

Author: LennartKats
Date: Mon Apr 18 12:46:16 2011
New Revision: 22552
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22552&sc=1

Log:
Some fixes to content completion tests (not working atm)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/builders.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_1.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/builders.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/builders.spt	Sun Apr 17 23:21:52 2011	(r22551)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/builders.spt	Mon Apr 18 12:46:16 2011	(r22552)
@@ -6,7 +6,6 @@
   module X
 ]]
 
-/*
 test Builder
   [[ entity Y {
        
@@ -21,7 +20,7 @@
      entity Y {
        X : Y
      }
-  ]]*/
+  ]]
 
 test Extract something refactoring
   [[ entity X {

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_1.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_1.java	Sun Apr 17 23:21:52 2011	(r22551)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_1.java	Mon Apr 18 12:46:16 2011	(r22552)
@@ -1,6 +1,7 @@
 package org.strategoxt.imp.testing.strategies;
 
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
+import static org.spoofax.terms.Term.*;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -22,7 +23,8 @@
 		// TODO: adapt to latest strategy of StrategoReferenceResolver?
 		if (isTermAppl(analyzedAst) && ((IStrategoAppl) analyzedAst).getName().equals("None"))
 			analyzedAst = null;
-		current = InputTermBuilder.getMatchingAncestor(current, StrategoReferenceResolver.ALLOW_MULTI_CHILD_PARENT);
+		if ("COMPLETION" != tryGetName(current))
+			current = InputTermBuilder.getMatchingAncestor(current, StrategoReferenceResolver.ALLOW_MULTI_CHILD_PARENT);
 		HybridInterpreter runtime = HybridInterpreter.getInterpreter(context);
 		InputTermBuilder inputBuilder = new InputTermBuilder(runtime, analyzedAst);
 		return inputBuilder.makeInputTerm(current, true);

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str	Sun Apr 17 23:21:52 2011	(r22551)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str	Mon Apr 18 12:46:16 2011	(r22552)
@@ -16,6 +16,9 @@
   NOCONTEXT  : Term -> Term
 
 rules
+  
+  check-error:
+    CompleteTo(_, _) -> (<id>, $[Content completion testing not is (correctly) implemented at this point])
 
   spt-desugar:
     Complete(x) -> CompleteTo(x, wildcard())
@@ -23,15 +26,14 @@
   check-expectation(|ast, selections, messages) :
     CompleteTo(from, to) -> error
     where
-      from' := <resolve-selection(|selections)> from;
-      to'   := <resolve-selection(|selections)> to
+      from' := <resolve-selection(|selections)> from
     with
       from''    := <get-completion-input-term> from';
       resolvers := <spt-get-content-proposers>;
       results   := <map(execute-service(|from''))> resolvers
     where
       switch !results
-        case one(is-successful-completion(|to')): fail
+        case debug(!1); one(is-successful-completion(|to)); debug(!2): fail
         case one(?Some(t)):  error := $[Unexpected result: [<write-to-string> t]]
         case one(?Error(m)): error := $[Unexpected error: [m]]
         case one(?Fail(m)):  error := $[Unexpected error: [m]]
@@ -45,7 +47,7 @@
     where
       x-root := <repeat(prim("SSL_EXT_get_parent", <id>))> x;
       if y-root := <alltd(origin-equal(|x); !COMPLETION(<id>))> x-root then
-        y := <oncetd(?COMPLETION(_))> y-root
+        y := <collect-one(?COMPLETION(_))> y-root
       else
         y := NOCONTEXT(x)
       end;

From L.C.L.Kats at tudelft.nl  Mon Apr 18 16:06:05 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 18 Apr 2011 14:06:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22553 - in
	spoofax-imp/trunk: experimental/NamingExperiment
	experimental/NamingExperiment/lib
	experimental/NamingExperiment/syntax
	experimental/NamingExperiment/test exper...
Message-ID: <20110418140605.15C2A108C010@mx3.tudelft.nl>

Author: LennartKats
Date: Mon Apr 18 14:06:04 2011
New Revision: 22553
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22553&sc=1

Log:
Basic code generation for naming annotations in SDF

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-name-analysis.str
Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/build.generated.xml
   spoofax-imp/trunk/experimental/NamingExperiment/lib/refactor-common.generated.str
   spoofax-imp/trunk/experimental/NamingExperiment/syntax/SPX.spx
   spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt
   spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-generated.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Naming.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str

Modified: spoofax-imp/trunk/experimental/NamingExperiment/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/build.generated.xml	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/experimental/NamingExperiment/build.generated.xml	Mon Apr 18 14:06:04 2011	(r22553)
@@ -4,7 +4,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/NamingExperiment/strategies/Main.class" property="java.jar.enabled"/>
@@ -16,7 +16,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -349,7 +349,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -367,7 +367,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -416,6 +416,152 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information"/>
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/refactor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/refactor-common.generated.str	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/refactor-common.generated.str	Mon Apr 18 14:06:04 2011	(r22553)
@@ -50,15 +50,18 @@
 strategies //user-input
 
 /**
- * Opens an input dialog for one string value
- * @type (String, String, String) -> String
+ * Opens an input dialog for one string value that represents an identifier
+ * The language is used to check if the input value matches the identifier pattern
+ * @type (String, String, String, String) -> String
  */
 input-dialog:
-  (title, label, default-value) -> <prim("SSL_EXT_opendialog", title, label, default-value)>
+  (language, title, label, default-value) -> <prim("SSL_EXT_newnamedialog", language, title, label, default-value)>
   
+input-dialog:
+  (title, label, default-value) -> <input-dialog>("", title, label, default-value)
 
 strategies //pp-table
 	
 get-pp-table=
-  import-term(include/EntityRefactorings.generated.pp.af)
+  import-term(include/NamingExperiment.generated.pp.af)
 	

Modified: spoofax-imp/trunk/experimental/NamingExperiment/syntax/SPX.spx
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/syntax/SPX.spx	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/experimental/NamingExperiment/syntax/SPX.spx	Mon Apr 18 14:06:04 2011	(r22553)
@@ -1,5 +1,7 @@
 //package foo
 
+package SPX
+
 module example2
 
 context-free syntax
@@ -9,10 +11,14 @@
     "entity" Entity@=ID "{" Member* "}" -> Definition {"Entity", scope(Property, Function)}
     "import" Module at STRING              -> Definition {"Import"}
     
+    X@=Test? -> Test
+    
+    X@=a:Test -> Test
+    
     Property@=ID ":" Entity at ID          -> Member {"Property"}
 
 
-    ID "(" { Param "," }* ")" Stm -> Member {"Function", scope(Var)}
+    Function@=ID "(" { Param "," }* ")" Stm -> Member {"Function", scope(Var)}
     Var@=ID ":" Entity at ID           -> Param {"Param"}
     
     Function at ID "(" {Exp ","}* ")"      -> Exp {"Call"}        %% or, could be an Entity 
@@ -20,8 +26,7 @@
     "var" Var@=ID ":" Entity at ID "=" Exp -> Stm {"VarDeclInit"}
     Var at ID "=" Exp                      -> Stm {"Assign"}
     Var at ID                              -> Exp {"Var"}         %% or, could be a Property!
-    Entity
-    Exp "." Property at ID                 -> Exp {"PropAccess", left}
+    Exp "." Property at ID                 -> Exp {"PropAccess"}
     "{" Stm* "}"                        -> Stm {"Block", scope(Var)}
 
 /*

Modified: spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt	Mon Apr 18 14:06:04 2011	(r22553)
@@ -39,10 +39,10 @@
   entity B {
     yyyyy : A
     f(a : A) {
-      var v : A = a.x.y
+      var v : A = a.x.[[y]]
     }
   }
-]] complete to "yyayy"
+]] complete to "yyyyy"
 
 test Resolve property access fails [[
   entity B {

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-generated.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-generated.str	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-generated.str	Mon Apr 18 14:06:04 2011	(r22553)
@@ -12,98 +12,119 @@
   Function : Namespace
   Var      : Namespace
   
-rules // "generated" scoping rules
-      
-  get-scope-types:
+rules // generated code
+
+  nam-get-scope-types :
     Module(_, _) -> [Entity(), Module()]
-  
-  get-scope-types:
+
+  nam-get-scope-types :
     Entity(_, _) -> [Property(), Function()]
-  
-  get-scope-types:
+
+  nam-get-scope-types :
     Function(_, _, _) -> [Var()]
-  
-  get-scope-types:
+
+  nam-get-scope-types :
     Block(_) -> [Var()]
 
-rules // "generated" definition fetching rules
-    
-  get-definition:
-    Module(x, _) -> Def([Module(), x | <IndexPath <+ ![]> Module()])
-  
-  get-definition:
-    Entity(x, _) -> Def([Entity(), x | <IndexPath <+ ![]> Entity()])
-  
-  get-definition:
-    Property(x, _) -> Def([Property(), x | <IndexPath <+ ![]> Property()])
-  
-  get-definition:
-    Function(x, _, _) -> Def([Function(), x | <IndexPath <+ ![]> Function()])
-  
-  get-definition:
-    VarDecl(x, _) -> Def([Var(), x | <IndexPath <+ ![]> Var()])
-  
-  get-definition:
-    VarDeclInit(x, _, _) -> Def([Var(), x | <IndexPath <+ ![]> Var()])
-  
-  get-definition:
-    Param(x, _) -> Def([Var(), x | <IndexPath <+ ![]> Var()])
-    
-  get-definition-key:
+  nam-get-definition :
+    Module(x, _) -> <nam-get-def(|Module())> x
+
+  nam-get-definition :
+    Entity(x, _) -> <nam-get-def(|Entity())> x
+
+  nam-get-definition :
+    Property(x, _) -> <nam-get-def(|Property())> x
+
+  nam-get-definition :
+    Function(x, _, _) -> <nam-get-def(|Function())> x
+
+  nam-get-definition :
+    Param(x, _) -> <nam-get-def(|Var())> x
+
+  nam-get-definition :
+    VarDecl(x, _) -> <nam-get-def(|Var())> x
+
+  nam-get-definition :
+    VarDeclInit(x, _, _) -> <nam-get-def(|Var())> x
+
+  nam-get-definition-key :
     Module(x, _) -> x
-  
-  get-definition-key:
+
+  nam-get-definition-key :
     Entity(x, _) -> x
-  
-  get-definition-key:
+
+  nam-get-definition-key :
     Property(x, _) -> x
-  
-  get-definition-key:
+
+  nam-get-definition-key :
     Function(x, _, _) -> x
-  
-  get-definition-key:
+
+  nam-get-definition-key :
+    Param(x, _) -> x
+
+  nam-get-definition-key :
     VarDecl(x, _) -> x
-  
-  get-definition-key:
+
+  nam-get-definition-key :
     VarDeclInit(x, _, _) -> x
-  
-  get-definition-key:
-    Param(x, _) -> x
 
-rules // "generated" uri annotation rules
-    
-  annotate-use(|namespace):
-    t -> t{[Unresolved(namespace), t | <IndexPath <+ ![]> namespace]}
-    
-  annotate-names(|def-path):
-    Module(t1, t2) -> Module(t1{def-path}, t2)
-    
-  annotate-names(|def-path):
-    Entity(t1, t2) -> Entity(t1{def-path}, t2)
-    
-  annotate-names(|def-path):
-    Property(t1, t2) -> Property(t1{def-path}, <annotate-use(|Entity())> t2)
-    
-  annotate-names(|def-path):
-    Function(t1, t2, t3) -> Function(t1{def-path}, t2, t3)
-    
-  annotate-names(|def-path):
-    Param(t1, t2) -> Param(t1{def-path}, <annotate-use(|Entity())> t2)
-    
-  annotate-names(|def-path):
-    VarDecl(t1, t2) -> VarDecl(t1{def-path}, <annotate-use(|Entity())> t2)
-    
-  annotate-names(|def-path):
-    VarDeclInit(t1, t2, t3) -> VarDeclInit(t1{def-path}, <annotate-use(|Entity())> t2, t3)
-    
-  annotate-names(|def-path):
-    Assign(t1, t2) -> Assign(<annotate-use(|Var())> t1, t2)
-    
-  annotate-names(|def-path):
-    Var(t1) -> Var(<annotate-use(|Var())> t1)
-    
-  annotate-names(|def-path):
-    PropAccess(t1, t2) -> PropAccess(t1, <annotate-use(|Property())> t2)
+  nam-annotate-names(|def-path):
+    Module(i_172135, j_172135) -> Module(i_172135{def-path}, j_172135)
+
+  nam-annotate-names(|def-path):
+    Entity(g_172135, h_172135) -> Entity(g_172135{def-path}, h_172135)
+
+  nam-annotate-names(|def-path):
+    Import(f_172135) -> Import(<nam-annotate-use(|Module())> f_172135)
+
+  nam-annotate-names(|def-path):
+    Property(d_172135, e_172135) -> Property(
+                                      d_172135{def-path}
+                                    , <nam-annotate-use(|Entity())> e_172135
+                                    )
+
+  nam-annotate-names(|def-path):
+    Function(a_172135, b_172135, c_172135) -> Function(a_172135{def-path}, b_172135, c_172135)
+
+  nam-annotate-names(|def-path):
+    Param(y_172134, z_172134) -> Param(
+                                   y_172134{def-path}
+                                 , <nam-annotate-use(|Entity())> z_172134
+                                 )
+
+  nam-annotate-names(|def-path):
+    Call(w_172134, x_172134) -> Call(
+                                  <nam-annotate-use(|Function())> w_172134
+                                , x_172134
+                                )
+
+  nam-annotate-names(|def-path):
+    VarDecl(u_172134, v_172134) -> VarDecl(
+                                     u_172134{def-path}
+                                   , <nam-annotate-use(|Entity())> v_172134
+                                   )
+
+  nam-annotate-names(|def-path):
+    VarDeclInit(r_172134, s_172134, t_172134) -> VarDeclInit(
+                                                   r_172134{def-path}
+                                                 , <nam-annotate-use(|Entity())> s_172134
+                                                 , t_172134
+                                                 )
+
+  nam-annotate-names(|def-path):
+    Assign(p_172134, q_172134) -> Assign(
+                                    <nam-annotate-use(|Var())> p_172134
+                                  , q_172134
+                                  )
+
+  nam-annotate-names(|def-path):
+    Var(o_172134) -> Var(<nam-annotate-use(|Var())> o_172134)
+
+  nam-annotate-names(|def-path):
+    PropAccess(m_172134, n_172134) -> PropAccess(
+                                        m_172134
+                                      , <nam-annotate-use(|Property())> n_172134
+                                      )
 
-  annotate-names(|def-path):
-    Call(t1, t2) -> Call(<annotate-use(|Function())> t1, t2)
+  nam-annotate-names(|def-path):
+    Block(l_172134) -> Block(l_172134)
\ No newline at end of file

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str	Mon Apr 18 14:06:04 2011	(r22553)
@@ -70,7 +70,7 @@
   analyze-defs(|head-scope, head-scope-ns):
     ast -> (ast', defs')
     with
-      if def := <get-definition> ast then
+      if def := <nam-get-definition> ast then
         Def(def-path)                     := def;
         [head-scope-ns', head-scope' | _] := def-path
       else
@@ -78,7 +78,7 @@
         head-scope-ns' := head-scope-ns;
         head-scope'    := head-scope
       end;
-      if scope-types := <get-scope-types> ast then
+      if scope-types := <nam-get-scope-types> ast then
         {| IndexPath:
           <list-loop(update-index-path(|head-scope', head-scope-ns', ast))> scope-types;
           // <balanced-update-path> head-scope';
@@ -94,7 +94,7 @@
     where
       analyzed      := <all(analyze-defs(|head-scope, head-scope-ns))> ast;
       (ast', defs)  := <unzip-analyzed> analyzed;
-      ast''         := <try(annotate-names(|def-path))> ast'
+      ast''         := <try(nam-annotate-names(|def-path))> ast'
   
   update-index-path(|head-scope, head-scope-ns, ast):
     scope-type -> scope-type
@@ -159,7 +159,7 @@
   analyze-tree-data-part(|set):
     tree -> tree
     where
-      if def-term := <get-definition-key> then
+      if def-term := <nam-get-definition-key> then
         _{[namespace | path]} := def-term;
         if result := <adjust-index-def-data(store-index-data-results(|set) |namespace, path)> tree then
           <fatal-err(|"Unexpected result from adjust-index-def-data; should call <store-results>")> result
@@ -206,7 +206,7 @@
   index-tree-terms:
     tree -> tree
     where
-      if def-term{uri} := <get-definition-key> then
+      if def-term{uri} := <nam-get-definition-key> then
         def := Def(uri);
         rules(
           IndexedTerm: uri -> tree
@@ -350,3 +350,16 @@
     )
   
   external SRTS-EXT-eq-ignore-annos(|t)
+
+rules // interface for generated code
+  
+  nam-get-def(|namespace):
+    x -> Def([namespace, x | <IndexPath <+ ![]> namespace])
+    
+  nam-annotate-use(|namespace):
+    t -> t{[Unresolved(namespace), t | <IndexPath <+ ![]> namespace]}
+    
+  nam-get-scope-types = fail
+  nam-get-definition = fail
+  nam-get-definition-key = fail
+  nam-annotate-names(|def-path) = fail

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str	Mon Apr 18 14:06:04 2011	(r22553)
@@ -30,7 +30,7 @@
   constraint-error:
     def -> (def, $[Duplicate definition])
     where
-      def-child  := <get-definition-key> def;
+      def-child  := <nam-get-definition-key> def;
       def'       := <index-get-term> <index-lookup-outermost> def-child;
       not(<origin-equal(|def)> def')
   

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Mon Apr 18 14:06:04 2011	(r22553)
@@ -66,7 +66,7 @@
     where
       // FIXME: this only works for definition paths
       //<debug(!2)> target;
-      def-term           := <get-definition-key> target;
+      def-term           := <nam-get-definition-key> target;
       _{[ns | def-path]} := def-term;
       def-path'  := <take-until(?Anon())> def-path;
       def-path'' := <reverse; separate-by(|".")> def-path'

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Mon Apr 18 14:06:04 2011	(r22553)
@@ -17,7 +17,10 @@
 	observer                  : editor-analyze                                                                                   
                                                                                                                                
   builder : "Show abstract syntax (for selection)" =
-    generate-aterm (openeditor) (realtime) (meta) (source)  
+    generate-aterm (openeditor) (realtime) (meta) (source)                                                                       
+                                                                                                                               
+  builder : "Show name analysis (for selection)" =
+    generate-name-analysis (openeditor) (realtime) (meta) (source) 
     
   //builder : "Show SDF (for selection)" =
   //  generate-sdf (openeditor) (realtime)           

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang.main.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang.main.esv	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang.main.esv	Mon Apr 18 14:06:04 2011	(r22553)
@@ -13,4 +13,4 @@
                   
   extensions    : spx
   table         : include/SpoofaxLang.tbl
-  start symbols : Start
\ No newline at end of file
+  start symbols : Start

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Naming.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Naming.sdf	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Naming.sdf	Mon Apr 18 14:06:04 2011	(r22553)
@@ -30,7 +30,17 @@
 
 %%  "scope" "(" "*" ")" -> Attribute[[SDF]] {prefer, ast("term(default(appl(unquoted(\"scope\"), [fun(quoted(\"*\"))])))")}
 
+context-free priorities
   
+  %% FIXME: priorities for @= and @ don't work
+    
+    Symbol[[SDF]] "?"              -> Symbol[[SDF]] >
+    Symbol "?"              -> Symbol >
+    %%{Symbol[[SDF]] "?"              -> Symbol[[SDF]]
+    %%Symbol[[SDF]] "*"               -> Symbol[[SDF]]
+    %%Symbol[[SDF]] "+"               -> Symbol[[SDF]]} >
+    %%Symbol[[SDF]] "|" Symbol[[SDF]] -> Symbol[[SDF]] >
+    Namespace "@=" Symbol[[SDF]]    -> Symbol[[SDF]]   
 
 lexical restrictions
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Mon Apr 18 14:06:04 2011	(r22553)
@@ -34,8 +34,10 @@
   context-free syntax
   
 		ImportSection* PackageDefinition* 							-> Start{cons("CompilationUnit") }
-    "package" QName "{" Module*  "}"								-> PackageDefinition {cons("Package")}
-    MainID? "module" SPXModuleName "{" Section* "}" -> Module {cons("Module")}
+    "package" QName "{" Module*  "}"								-> PackageDefinition {cons("Package"), deprecated("Specify packages without brackets")}
+    MainID? "module" SPXModuleName "{" Section* "}" -> Module {cons("Module"), deprecated("Specify modules without brackets")}
+    "package" QName Module*                         -> PackageDefinition {cons("Package")}
+    MainID? "module" SPXModuleName Section*         -> Module {cons("Module")}
     
     Grammar[[SDF]] -> Section {cons("SDFSection")}
     Decl[[STR]]    -> Section {cons("STRSection")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Mon Apr 18 14:06:04 2011	(r22553)
@@ -14,6 +14,8 @@
    */
   is-non-terminal =
     ?sort(_) + ?opt(_) + is-iter
+  + namespacedef(id, is-non-terminal) + namespaceref(is-non-terminal)
+  + namespaceref2(id, is-non-terminal)
   
   is-iter =
     ?iter(_) + ?iter-star(_) + ?iter-sep(_, _) + ?iter-star-sep(_, _)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Mon Apr 18 14:06:04 2011	(r22553)
@@ -2,10 +2,9 @@
 
 imports 
 	codegen/compile
-	codegen/sdf/to-sdf
-	codegen/sdf/to-signature 
-	codegen/str/to-stratego
-	codegen/esv/to-esv
+	codegen/sdf/-
+	codegen/str/-
+	codegen/esv/-
 imports
 	codegen/buildscripts
 imports 

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-name-analysis.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-name-analysis.str	Mon Apr 18 14:06:04 2011	(r22553)
@@ -0,0 +1,149 @@
+module codegen/sdf/to-name-analysis
+imports 
+  libstrc
+  lib/editor-common.generated
+  context/sdf/declare-signature
+  context/sdf/declare
+  include/spoofaxlang
+  analyze/sdf/check
+  
+rules
+  
+  generate-name-analysis:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"name-analysis.str")> path;
+      result   := <generate-name-analysis; pp-stratego-string> selected
+    
+  generate-name-analysis:
+    sdf ->
+    Module("analysis-generated", [
+      Signature([Constructors(namespace-sigs)])
+    , Rules(<flatten-list> [
+        scope-rules
+      , get-def-rules
+      , annotate-names-rules
+      ])  
+    ])
+    with
+      namespaces           := <collect-all(fetch-namespace); flatten-list> sdf;
+      namespace-sigs       := <map(namespace-to-signature)> namespaces;
+      scope-rules          := <collect-all(fetch-scope-rule)> sdf;
+      get-def-rules        := <collect-all(fetch-get-def-rules)> sdf;
+      annotate-names-rules := <collect-all(fetch-annotate-names-rule)> sdf
+
+rules
+  
+  fetch-namespace:
+    namespacedef(n, _) -> n
+  
+  fetch-namespace:
+    namespaceref(n) -> n
+  
+  fetch-namespace:
+    namespaceref2(n, _) -> n
+  
+  namespace-to-signature:
+    name -> OpDecl(name, ConstType(SortNoArgs("Namespace")))
+
+rules
+  
+  fetch-scope-rule:
+    prod(p*, _, attrs(a*)) ->
+    RDefNoArgs(
+      "nam-get-scope-types"
+    , RuleNoCond(
+        NoAnnoList(Op(cons, p'*))
+      , NoAnnoList(List(scope-terms))
+      )
+    )
+    where
+      scopes := <collect-all(fetch-scope-names)> a*;
+      not(!scopes => []);
+      cons := <getfirst(fetch-cons-name)> a*
+    with
+      scopes'     := <make-set> <flatten-list> scopes;
+      p'*         := <filter(non-terminal-to-wld)> p*;
+      scope-terms := <map(![NoAnnoList(Op(<id>, []))])> scopes'
+  
+  fetch-get-def-rules:
+    prod(p*, _, attrs(a*)) ->
+    [ RDefNoArgs(
+        "nam-get-definition-key"
+      , RuleNoCond(
+          NoAnnoList(Op(cons, p'*))
+        , Var("x")
+        )
+      )
+    , RDefNoArgs(
+        "nam-get-definition"
+      , RuleNoCond(
+          NoAnnoList(Op(cons, p'*))
+        , App(
+            CallT(SVar("nam-get-def"), [], [NoAnnoList(Op(namespace, []))])
+          , Var("x")
+          )
+        )
+      )
+    ]
+    where
+      p'*  := <filter(namespace-def-to-x(?namespace) <+ non-terminal-to-wld)> p*;
+      where(!namespace); 
+      cons := <getfirst(fetch-cons-name)> a*
+  
+  fetch-annotate-names-rule:
+    prod(p*, _, attrs(a*)) ->
+    RDefT(
+      "nam-annotate-names"
+    , []
+    , [DefaultVarDec("def-path")]
+    , RuleNoCond(
+        NoAnnoList(Op(cons, vars))
+      , NoAnnoList(Op(cons, annotated-vars))
+      )
+    )
+    where
+      cons := <getfirst(fetch-cons-name)> a*
+    with
+      p'*            := <filter(is-non-terminal)> p*;
+      vars           := <map(non-terminal-to-new-var)> p'*;
+      annotated-vars := <zip(add-namespace-anno-1 <+ add-namespace-anno-2)> (p'*, vars)
+
+rules
+  
+  // TODO: what about productions with inner namespaces?
+  //       e.g. Var@=ID?
+  
+  namespace-def-to-x(set-namespace):
+    namespacedef(<set-namespace>, _) -> Var("x")
+  
+  non-terminal-to-wld:
+    <is-non-terminal> -> Wld()
+  
+  non-terminal-to-new-var:
+    <is-non-terminal> -> Var(<new>)
+  
+  add-namespace-anno-1:
+    (namespaceref(n), Var(x)) -> <add-namespace-anno-1> (namespaceref2(n, "ID"), Var(x))
+  
+  add-namespace-anno-1:
+    (namespaceref2(n, _), Var(x)) ->
+    App(
+      CallT(SVar("nam-annotate-use"), [], [NoAnnoList(Op(n, []))])
+    , Var(x)
+    )
+  
+  add-namespace-anno-1:
+    (namespacedef(n, _), Var(x)) -> AnnoList(Var(x), [Var("def-path")])
+  
+  add-namespace-anno-2:
+    (_, Var(x)) -> Var(x)
+  
+  fetch-cons-name:
+    term(default(appl(unquoted("cons"), [fun(quoted(cons))]))) -> <un-double-quote> cons
+  
+  fetch-cons-name:
+    Constructor(cons) -> <un-double-quote> cons
+  
+  fetch-scope-names:
+    term(default(appl(unquoted("scope"), [fun(quoted(scopes))]))) -> scopes

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Mon Apr 18 14:06:04 2011	(r22553)
@@ -74,8 +74,11 @@
 	
 rules 
 
+	// TODO: use concrete syntax for signatures?
+	
 	// Instead of using String interpolation, Generate the default signatures
 	// using global contructor defined during init-declartion   
+
 	get-signature-contents(|moduleName): signatures-string ->
 $[module [moduleName]
 signature

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Mon Apr 18 12:46:16 2011	(r22552)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Mon Apr 18 14:06:04 2011	(r22553)
@@ -69,4 +69,4 @@
       filename := <guarantee-extension(|"aterm.sugar")> path;
       result   := <nomalize-all>ast // we just return the input term
 
-	 
\ No newline at end of file
+	 

From seba at informatik.uni-marburg.de  Mon Apr 18 16:21:24 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 18 Apr 2011 14:21:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22554 -
	sugarj/trunk/case-studies/xml
Message-ID: <20110418142124.EE9057F8047@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Mon Apr 18 14:21:24 2011
New Revision: 22554
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22554&sc=1

Log:
code completion experiment

Modified:
   sugarj/trunk/case-studies/xml/XmlEditor.sugj

Modified: sugarj/trunk/case-studies/xml/XmlEditor.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/XmlEditor.sugj	Mon Apr 18 14:06:04 2011	(r22553)
+++ sugarj/trunk/case-studies/xml/XmlEditor.sugj	Mon Apr 18 14:21:24 2011	(r22554)
@@ -26,6 +26,6 @@
     Element._
   
   completions
-    completion template : ElemName = "author"
-    completion template : "<{lib}author title=\"<AttVal>\">\n</{lib}author>"
+    completion trigger : "<"
+    completion template : Content = "<{lib}author title=\"" <AttVal> "\">\n</{lib}author>"
 }
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Mon Apr 18 20:01:44 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Mon, 18 Apr 2011 18:01:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22555 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test
Message-ID: <20110418180144.61F09108C019@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Mon Apr 18 18:01:44 2011
New Revision: 22555
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22555&sc=1

Log:
* updated Test entity lang

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Mon Apr 18 14:21:24 2011	(r22554)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Mon Apr 18 18:01:44 2011	(r22555)
@@ -1,8 +1,7 @@
-package entity 
-{
-	module entity-lang
-	{
-		context-free start-symbols
+package entity-lang
+
+	module module-main
+		context-free start-symbols 
     	Start
 
   	context-free syntax
@@ -19,33 +18,67 @@
   		description   : "Spoofax/IMP-generated editor for the TestSpoofax language"
   		url           : http://strategoxt.org
                   
-  		extensions    : ent
-  		start symbols : Start    
-	}
-	
+  		extensions    : tent
+  		start symbols : Start
+  		
+  	language Syntax properties (static defaults)
+	    // Comment constructs:                   
+	  	line comment                           : "//"
+	 	 	block comment                          : "/*" * "*/"
+	    // Fences (used for matching,            
+	  	// inserting, indenting brackets):       
+	  	fences                                 : [ ]
+	                                           ( )
+	                                           { }
+	                                           
+	  	// Automatic indent hints                
+	  	// (indent after these tokens):          
+	  	indent after                           : "="
+	    // Regular expression for identifiers:   
+	  	identifier lexical                     : "[A-Za-z0-9_]+"	     
 	
-	module entity-builders  
-	{
-			  
+	module entity-builders    
+		imports 
+			entity.Common	  
+			 
 		builders
-                                                                                                                               
-			provider                  : include/testspoofax-java.jar                                                                        
-	    observer                  : editor-analyze                                                                                   
-	                                                                                                                           
-	  	builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)
-	
-	 	rules 
-			generate-java:
-  		  (selected, position, ast, path, project-path) -> None()
-    
-	 	
-	}
-}
-
-package entity  
-{
+    	builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)
+	 
+	 	outliner Default outliner        
+	    // Outliner rules indicate which syntactic constructs should be shown in the outline
+		  // and quick outline views, and take one of the following forms:
+		  //
+		  //   <sort>.<constructor>
+		  //
+		  //   <sort>._
+		  //
+		  //   _.<constructor>
+		  Start.Module
+		  Definition.Entity 	
+		
+		folding Default folding definitions
+  
+		  // Folding rules indicate which syntactic constructs can be folded,
+		  // and take one of the following forms:
+		  //
+		  //   <sort>.<constructor>
+		  //
+		  //   <sort>._
+		  //
+		  //   _.<constructor>
+		  //
+		  // To indicate that an element should always be folded, add
+		  // a (folded) annotation:
+		  //
+		  //   _.Imports (folded)
+		  //
+		  // To disable a folding rule defined elsewhere, add a (disabled) annotation:
+		  //
+		  //   Definition._ (disabled)
+		  Start.Module
+  		Definition.Entity
+		 	
 	module common
-	{
 		lexical syntax
    
     [a-zA-Z][a-zA-Z0-9\_]* -> ID
@@ -65,7 +98,7 @@
     
     -> EOF
   
-  lexical restrictions
+  lexical restrictions 
   
     %% Ensure greedy matching for lexicals
   
@@ -89,6 +122,7 @@
     LAYOUT? -/- [\/].[\/]
     LAYOUT? -/- [\/].[\*]
 		
-	} 
+package A
+	module Test1
 	
-}
\ No newline at end of file
+	module Test2
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Tue Apr 19 04:14:21 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 19 Apr 2011 02:14:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22556 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	codegen codegen/sdf context/sdf utils
Message-ID: <20110419021421.57C7D2B8005@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Apr 19 02:14:19 2011
New Revision: 22556
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22556&sc=1

Log:
* refactoring signature generation. 
* using global signature constructors DR and reusing it in all other signature contructors.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Mon Apr 18 18:01:44 2011	(r22555)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Tue Apr 19 02:14:19 2011	(r22556)
@@ -111,6 +111,7 @@
 		//nomalize-all
 
 strategies 
+	
 	build-all = 
 		?current-term
 		;enable-compiler-debugging
@@ -121,6 +122,7 @@
 			;<get-all-analyzed-problems>() => problems  
 			;if <fail-if-has-errors>problems then
 			 	 <debug>$[=========generating artifacts============]
+			 	;init-code-generation  
 				;<list-loop(generate-spx-package)>list-of-package-qname*
 				;<debug>$[=========Generating Build Scipt============]
 				;<emit-build-script> list-of-package-qname*

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str	Mon Apr 18 18:01:44 2011	(r22555)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str	Tue Apr 19 02:14:19 2011	(r22556)
@@ -30,8 +30,9 @@
 //TODO: OPTIMIZE : get the imports and resue it in all the generation phase rather traversing to find it out each time. 
 //TODO: OPTIMIZE : DR can be used to construct this imports  
 rules 
-	
-	generate-all =  emit-sdf;emit-signatures;emit-str <+ debug(!" Failed in Generate-all. "); fail
+	init-code-generation = where(<emit-default-signatures>()) 
+		
+	generate-all = emit-sdf;emit-signatures;emit-str <+ debug(!" Failed in Generate-all. "); fail
 
 	generate-main = 
 			?module-qname* ;generate-sdf-main;generate-str-main ; generate-esv-main 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Mon Apr 18 18:01:44 2011	(r22555)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Tue Apr 19 02:14:19 2011	(r22556)
@@ -23,11 +23,7 @@
 	
 rules
 	
-	// TODO : OPTMIZE : add a pretty printer to convert operation name DR to STR Signatures. 
-	// Currently , using string interpolation, signature are generated . then it is reparsed to
-	// to convert it to aterm. Get rid of this. 
-	  
-	parse-str-string =
+		parse-str-string =
     parse-string(
       strsglr-report-parse-error
     | <import-term(lib/Stratego-Sugar.tbl)>
@@ -36,6 +32,36 @@
 	to-signature-as-rtree =   
 		parse-str-string ; pp-aterm
 	
+	
+			
+rules
+	
+	emit-default-signatures:
+		() -> ()
+		with 
+ 			project-path := <ProjectPath>
+ 		where 
+			sig-file-name := "Globals/Singatures"
+		where 
+			<debug-compiler>$[Codegen|Generating deafult signatures]			
+			;generated-signatures-string :=  <get-signature-contents(|sig-file-name,"")><get-all-signatures-as-string(?(Globals(), _))>
+			;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
+		where  
+			 autogen-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
+			;output-path-str 		:=   $[[autogen-dir]/[sig-file-name].str]
+			;output-path-rtree 		:= $[[autogen-dir]/[sig-file-name].rtree]
+			;<ensure-path-exists>(project-path, $[[<Autogenerated-Artifacts-Dir>]/Globals]) 
+			;chdir-to-project-path  
+		where
+			<save-to-file>( output-path-str, generated-signatures-string)
+			;<save-to-file>(output-path-rtree, signatures-as-aterm-string)
+			;<refresh-workspace-file>output-path-str
+			;<refresh-workspace-file>output-path-rtree
+		where
+			<debug-compiler>$[ Codegen | SDF | Finishing generation of default signature]
+		
+		
+			
 	emit-signatures:
 		m at Module(attrb* , modname , section*) -> m
 		with 
@@ -51,10 +77,13 @@
 			;!package-typed-qname => Package(package-untyped-qname)
 			;!modname => SPXModuleName(modulename-string)
 		where 
-			sig-file-name := <get-signature-file-name><qname-to-path>module-untyped-qname
+			sig-file-name := <get-signature-file-name><qname-to-path>module-untyped-qname
 		where 
-			<debug-compiler>$[Codegen|Generating signature for the following package : [<pp-aterm>module-typed-qname]]			
-			;generated-signatures-string :=  <get-signature-contents(|sig-file-name)><get-all-signatures-as-string>
+			<debug-compiler>$[Codegen|Generating signature for the following module: [<pp-aterm>module-typed-qname]]			
+			;imports-string := $[imports 
+				Globals/Singatures
+			]
+			;generated-signatures-string :=  <get-signature-contents(|sig-file-name,imports-string)><get-all-signatures-as-string(?(package-typed-qname, module-typed-qname, _))>
 			;<debug-compiler> $[Codegen|generated signatures : [generated-signatures-string ]] 
 			;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
 		where  
@@ -78,43 +107,40 @@
 	
 	// Instead of using String interpolation, Generate the default signatures
 	// using global contructor defined during init-declartion   
+	
+	// TODO : OPTMIZE : add a pretty printer to convert operation name DR to STR Signatures. 
+	// Currently , using string interpolation, signature are generated . then it is reparsed to
+	// to convert it to aterm. Get rid of this. 
+	
+	get-signature-contents(|moduleName,imports): signatures-string* ->
+$[module [moduleName]
 
-	get-signature-contents(|moduleName): signatures-string ->
-$[module [moduleName]
+[imports]
 signature
     constructors
-       [signatures-string]
-				
-signature
-    constructors
-          Some : a -> Option(a) 
-          None : Option(a)
-
-signature
-    constructors
-          Cons : a * List(a) -> List(a)
-          Nil  : List(a)
-          Conc : List(a) * List(a) -> List(a)
+       [<concat-strings>signatures-string*]
 ]  
- 
+	
     	
-	get-all-signatures-as-string= 
-			<mapconcat(bagof-Get-Operation-Declaration);operation-decl-to-string>
-			<filter(?(<GetEnclosingPackageName>, <GetEnclosingModuleName>, _))>
-			<all-keys-Get-Operation-Singature>
+	get-all-signatures-as-string(s) = all-keys-Get-Operation-Singature; filter(s); mapconcat(bagof-Get-Operation-Declaration);operation-decl-to-string
   
-  operation-decl-to-string : [] -> $[]
+  operation-decl-to-string : [] -> []
   
-  operation-decl-to-string : [first-op-decl | rest-op-decl* ]	-> $[[current-op-decl-string][rest-op-decl-string]]
-  where 
-  	(opname, operands*, resultant-sort) := first-op-decl
-  	;if (!operands* => []) then
-  		current-op-decl-string := $[[<opname-to-string>opname]: [resultant-sort]]
-  	else
-  		current-op-decl-string := $[[<opname-to-string>opname]: [<lhs-operands-to-string>operands*] -> [resultant-sort]]
-  	end		 
-  ;rest-op-decl-string := <operation-decl-to-string> rest-op-decl* 
- 	
+  operation-decl-to-string : 
+  	[first-op-decl | rest-op-decl* ]->[current-op-decl-string | rest-op-decl-string*]
+  	where 
+  		(opname, operands*, resultant-sort) := first-op-decl
+  		;if (!operands* => []) then
+	  		current-op-decl-string := $[[<opname-to-string>opname]: [resultant-sort]
+	  		]
+  		else
+  			current-op-decl-string := $[[<opname-to-string>opname]: [<lhs-operands-to-string>operands*] -> [resultant-sort]
+  			]
+  			
+  		end		 
+  		;rest-op-decl-string* := <operation-decl-to-string> rest-op-decl* 
+ 	
+ 	
  	opname-to-string : opname -> opname-string
  	where 
  		if (!opname => "") then 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Mon Apr 18 18:01:44 2011	(r22555)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Tue Apr 19 02:14:19 2011	(r22556)
@@ -9,7 +9,7 @@
 rules 
 	initialize-configuration = 
 		rules(
-			Autogenerated-Artifacts-Dir := ".shawdowdir"
+			Autogenerated-Artifacts-Dir := ".shadowdir"
 			SPX-Source-Dir :+  _ -> ("test" , TopDirectoryOnly())
 		  Ignored-Spx-Souce-Dir :+ ".svn" -> ".svn"
 		  Enable-Caching: _ 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Mon Apr 18 18:01:44 2011	(r22555)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Tue Apr 19 02:14:19 2011	(r22556)
@@ -207,6 +207,7 @@
 	*/		  
 	create-opname2opdecl-mapping(|operation-name, opernand-sorts*, resultant-sort , production) =
 		where (<debug-declaration> $[DeclareSDF | Storing Signature for following production: [<pp-aterm> production]])
+		//;enable-declaration-debugging
 		;available-opdecl*     := <getOperationSignatures>operation-name
 		;scoped-operation-name := <to-scoped-symbol>operation-name   
 		;if(
@@ -216,10 +217,15 @@
 			)
 			then 
 				record-operation-declaration(|scoped-operation-name  , operation-name  , opernand-sorts* , resultant-sort) // storing this operation declaration 
- 		 	else 
- 		 		<debug-declaration> $[DeclareSDF | Waring | There is an existing operation declration of production: [<pp-aterm> production] as the following : [<pp-aterm>(operation-name, opernand-sorts* , resultant-sort)] 
- 		 								DeclareSDF | Debug-info: scoped-op-name [<pp-aterm>scoped-operation-name]. ]
-			end
+ 		else 
+ 		 		<debug-declaration> 
+ 		 			$[
+ 		 				DeclareSignature | Waring | There is an existing operation declration of production: [<pp-aterm> production] as the following : [<pp-aterm>(operation-name, opernand-sorts* , resultant-sort)] 
+ 		 				DeclareSignature | Debug-info: scoped-op-name [<pp-aterm>scoped-operation-name]. 
+ 		 			 ]
+		end
+		//;disable-declaration-debugging
+			
 	
 	create-opname2opdecl-mapping(|operation-name, resultant-sort , production): alt-sort -> alt-sort  
 		where 
@@ -233,8 +239,8 @@
 					Get-Operation-Singature  :+  scoped-op-name   -> (opname  , arg-length )
 				 	Get-Operation-Declaration:+  scoped-op-name   -> (opname  , operand-sort* , resultant-sort)
 				)
-			; <debug-declaration> $[DeclareSignature | Globals() | Stored operation declration : [<pp-aterm> ( opname , operand-sort* ,  resultant-sort) ].]
-			; <debug-declaration> $[DeclareSignature | Globals() | Stored operation signature  : [<pp-aterm> scoped-op-name] -> [<pp-aterm> (opname, <length>operand-sort*)].]
+			; <debug-declaration> $[DeclareSignature | Stored operation declration : [<pp-aterm> ( opname , operand-sort* ,  resultant-sort) ].]
+			; <debug-declaration> $[DeclareSignature | Stored operation signature  : [<pp-aterm> scoped-op-name] -> [<pp-aterm> (opname, <length>operand-sort*)].]
 	) 
 		
 	record-operation-declaration-at-global-scope ( | opname , operand-sort* ,  resultant-sort) = 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Mon Apr 18 18:01:44 2011	(r22555)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Tue Apr 19 02:14:19 2011	(r22556)
@@ -65,11 +65,16 @@
 rules
 	//ensures whether a particular directory exists. If it does not , then creates a new one with the same name. 	
 	ensure-directory-exists = ?dirpath ; ((file-exists ; filemode ; isdir) <+ mkdir); chdir	
-rules
-	ensure-exists = 
-	?( project-path , autogen-dir )
-	; where (<is-string>autogen-dir)
-	; fail  
+
+	ensure-path-exists =  
+		?(project-path,relative-path)
+		;<is-string>relative-path
+		;dir* := <string-tokenize> (['/'], relative-path) //tokenize relative-path to create the subdirectories
+		;if not(<eq>(<length>dir*,0)) then 
+				<map(create-folder)> dir*  //Creating sub-directories if they does not exists
+		 end
+		;create-folder(|project-path)  // restoring current folder to the project-path 
+		 
 	
 	ensure-exists =  
 		?(autogen-root-path, QName(qname-parts*))

From seba at informatik.uni-marburg.de  Tue Apr 19 08:51:36 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 19 Apr 2011 06:51:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22557 -
	sugarj/trunk/editor/editor
Message-ID: <20110419065137.02CBD2B8004@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Tue Apr 19 06:51:35 2011
New Revision: 22557
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22557&sc=1

Log:
removed import of generated editor services

Deleted:
   sugarj/trunk/editor/editor/SugarJ-Builders.generated.esv
   sugarj/trunk/editor/editor/SugarJ-Colorer.generated.esv
   sugarj/trunk/editor/editor/SugarJ-Completions.generated.esv
   sugarj/trunk/editor/editor/SugarJ-Folding.generated.esv
   sugarj/trunk/editor/editor/SugarJ-Outliner.generated.esv
   sugarj/trunk/editor/editor/SugarJ-References.generated.esv
   sugarj/trunk/editor/editor/SugarJ-Syntax.generated.esv
Modified:
   sugarj/trunk/editor/editor/SugarJ-Builders.esv
   sugarj/trunk/editor/editor/SugarJ-Colorer.esv
   sugarj/trunk/editor/editor/SugarJ-Completions.esv
   sugarj/trunk/editor/editor/SugarJ-Folding.esv
   sugarj/trunk/editor/editor/SugarJ-Outliner.esv
   sugarj/trunk/editor/editor/SugarJ-References.esv
   sugarj/trunk/editor/editor/SugarJ-Syntax.esv

Modified: sugarj/trunk/editor/editor/SugarJ-Builders.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Builders.esv	Tue Apr 19 02:14:19 2011	(r22556)
+++ sugarj/trunk/editor/editor/SugarJ-Builders.esv	Tue Apr 19 06:51:35 2011	(r22557)
@@ -1,8 +1,6 @@
 
 module SugarJ-Builders
 
-imports SugarJ-Builders.generated
-
 builders
                                                                       
   // This file can be used for custom analysis and builder rules.     

Modified: sugarj/trunk/editor/editor/SugarJ-Colorer.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Colorer.esv	Tue Apr 19 02:14:19 2011	(r22556)
+++ sugarj/trunk/editor/editor/SugarJ-Colorer.esv	Tue Apr 19 06:51:35 2011	(r22557)
@@ -1,7 +1,5 @@
 module SugarJ-Colorer
 
-imports SugarJ-Colorer.generated
-
 colorer
                                                                       
   // This file can be used for custom colorer rules.                  

Modified: sugarj/trunk/editor/editor/SugarJ-Completions.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Completions.esv	Tue Apr 19 02:14:19 2011	(r22556)
+++ sugarj/trunk/editor/editor/SugarJ-Completions.esv	Tue Apr 19 06:51:35 2011	(r22557)
@@ -1,7 +1,5 @@
 module SugarJ-Completions
 
-imports SugarJ-Completions.generated
-
 completions
                                                                    
   // This file is used to define content completion.               

Modified: sugarj/trunk/editor/editor/SugarJ-Folding.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Folding.esv	Tue Apr 19 02:14:19 2011	(r22556)
+++ sugarj/trunk/editor/editor/SugarJ-Folding.esv	Tue Apr 19 06:51:35 2011	(r22557)
@@ -1,7 +1,5 @@
 module SugarJ-Folding
 
-imports SugarJ-Folding.generated
-
 folding
   
   // This file can be used for custom folding rules.

Modified: sugarj/trunk/editor/editor/SugarJ-Outliner.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Outliner.esv	Tue Apr 19 02:14:19 2011	(r22556)
+++ sugarj/trunk/editor/editor/SugarJ-Outliner.esv	Tue Apr 19 06:51:35 2011	(r22557)
@@ -1,7 +1,5 @@
 module SugarJ-Outliner
 
-imports SugarJ-Outliner.generated
-
 outliner
   
   // This file can be used for custom outliner rules.

Modified: sugarj/trunk/editor/editor/SugarJ-References.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-References.esv	Tue Apr 19 02:14:19 2011	(r22556)
+++ sugarj/trunk/editor/editor/SugarJ-References.esv	Tue Apr 19 06:51:35 2011	(r22557)
@@ -1,7 +1,5 @@
 module SugarJ-References
 
-imports SugarJ-References.generated
-
 references
                                                                                                    
   // This file can be used to specify reference resolving and hover help, and content completion.  

Modified: sugarj/trunk/editor/editor/SugarJ-Syntax.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Syntax.esv	Tue Apr 19 02:14:19 2011	(r22556)
+++ sugarj/trunk/editor/editor/SugarJ-Syntax.esv	Tue Apr 19 06:51:35 2011	(r22557)
@@ -1,7 +1,5 @@
 module SugarJ-Syntax
 
-imports SugarJ-Syntax.generated
-
 language
                                                                    
   // This file can be used for custom syntax rules.                

From R.B.Vermaas at tudelft.nl  Tue Apr 19 09:23:07 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 19 Apr 2011 07:23:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22558 - hydra/jobs
Message-ID: <20110419072307.45E3DCC056@mx4.tudelft.nl>

Author: rob
Date: Tue Apr 19 07:23:06 2011
New Revision: 22558
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22558&sc=1

Log:
add aster.jar to ant's classpath

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Tue Apr 19 06:51:35 2011	(r22557)
+++ hydra/jobs/spoofax-imp.nix	Tue Apr 19 07:23:06 2011	(r22558)
@@ -182,7 +182,7 @@
                 cp -v org.strategoxt.strj/java/strategoxt.jar $e/utils/
 	            header "Pre-building $e"
 	            cd $e
-                export LOCALCLASSPATH="utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
+                export LOCALCLASSPATH="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
                 export ANT_OPTS="-Xss8m -Xmx768m"
 	            ant -verbose -f build.main.xml -Declipse.spoofaximp.jars=utils/ -Declipse.home=$eclipsefakehome
 	            cd ..

From seba at informatik.uni-marburg.de  Tue Apr 19 11:35:03 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 19 Apr 2011 09:35:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22559 - in
	sugarj/trunk/case-studies: assertions concretesyntax
	javaclosure/concrete pair pair/concrete xml xml/schema
Message-ID: <20110419093503.B6E7CCC10B@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Tue Apr 19 09:35:02 2011
New Revision: 22559
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22559&sc=1

Log:
renamed concretesyntax modules

Added:
   sugarj/trunk/case-studies/concretesyntax/Java.sugj
      - copied, changed from r22553, sugarj/trunk/case-studies/concretesyntax/ConcreteJava.sugj
   sugarj/trunk/case-studies/concretesyntax/Stratego.sugj
      - copied, changed from r22553, sugarj/trunk/case-studies/concretesyntax/ConcreteStratego.sugj
Deleted:
   sugarj/trunk/case-studies/concretesyntax/ConcreteJava.sugj
   sugarj/trunk/case-studies/concretesyntax/ConcreteStratego.sugj
Modified:
   sugarj/trunk/case-studies/assertions/AssertionSugar.sugj
   sugarj/trunk/case-studies/javaclosure/concrete/Sugar.sugj
   sugarj/trunk/case-studies/pair/Sugar.sugj
   sugarj/trunk/case-studies/pair/concrete/Desugar.sugj
   sugarj/trunk/case-studies/xml/AsSax.sugj
   sugarj/trunk/case-studies/xml/BookTest.sugj
   sugarj/trunk/case-studies/xml/XmlEditor.sugj
   sugarj/trunk/case-studies/xml/XmlTextTools.sugj
   sugarj/trunk/case-studies/xml/schema/AsDesugaring.sugj
   sugarj/trunk/case-studies/xml/schema/AsEditorService.sugj

Modified: sugarj/trunk/case-studies/assertions/AssertionSugar.sugj
==============================================================================
--- sugarj/trunk/case-studies/assertions/AssertionSugar.sugj	Tue Apr 19 07:23:06 2011	(r22558)
+++ sugarj/trunk/case-studies/assertions/AssertionSugar.sugj	Tue Apr 19 09:35:02 2011	(r22559)
@@ -2,7 +2,7 @@
 
 import org.sugarj.languages.Stratego;
 
-import concretesyntax.ConcreteStratego;
+import concretesyntax.Stratego;
 
 public sugar AssertionSugar {
 

Copied and modified: sugarj/trunk/case-studies/concretesyntax/Java.sugj (from r22553, sugarj/trunk/case-studies/concretesyntax/ConcreteJava.sugj)
==============================================================================
--- sugarj/trunk/case-studies/concretesyntax/ConcreteJava.sugj	Mon Apr 18 14:06:04 2011	(r22553, copy source)
+++ sugarj/trunk/case-studies/concretesyntax/Java.sugj	Tue Apr 19 09:35:02 2011	(r22559)
@@ -9,7 +9,7 @@
  * copied and adpated from
  *   https://svn.strategoxt.org/repos/StrategoXT/java-front/trunk/syntax-embedding/languages/java/EmbeddedJava.sdf
  */
-public sugar ConcreteJava {
+public sugar Java {
 
   context-free syntax
     "~" JavaExpr -> JavaExpr {reject}	

Copied and modified: sugarj/trunk/case-studies/concretesyntax/Stratego.sugj (from r22553, sugarj/trunk/case-studies/concretesyntax/ConcreteStratego.sugj)
==============================================================================
--- sugarj/trunk/case-studies/concretesyntax/ConcreteStratego.sugj	Mon Apr 18 14:06:04 2011	(r22553, copy source)
+++ sugarj/trunk/case-studies/concretesyntax/Stratego.sugj	Tue Apr 19 09:35:02 2011	(r22559)
@@ -4,7 +4,7 @@
 
 import concretesyntax.MetaExplode;
 
-public sugar ConcreteStratego {
+public sugar Stratego {
   context-free syntax
     "stratego-decl" "|[" StrategoDecl "]|" -> StrategoTerm {cons("ToMetaExpr")}
 	  "stratego"      "|[" StrategoDecl "]|" -> StrategoTerm {cons("ToMetaExpr")}

Modified: sugarj/trunk/case-studies/javaclosure/concrete/Sugar.sugj
==============================================================================
--- sugarj/trunk/case-studies/javaclosure/concrete/Sugar.sugj	Tue Apr 19 07:23:06 2011	(r22558)
+++ sugarj/trunk/case-studies/javaclosure/concrete/Sugar.sugj	Tue Apr 19 09:35:02 2011	(r22559)
@@ -1,6 +1,6 @@
 package javaclosure.concrete;
 
-import concretesyntax.ConcreteJava;
+import concretesyntax.Java;
 
 import javaclosure.Closure;
 import javaclosure.ToRefType;

Modified: sugarj/trunk/case-studies/pair/Sugar.sugj
==============================================================================
--- sugarj/trunk/case-studies/pair/Sugar.sugj	Tue Apr 19 07:23:06 2011	(r22558)
+++ sugarj/trunk/case-studies/pair/Sugar.sugj	Tue Apr 19 09:35:02 2011	(r22559)
@@ -1,7 +1,7 @@
 package pair;
 
 import org.sugarj.languages.Java;
-import concretesyntax.ConcreteJava;
+import concretesyntax.Java;
 
 public sugar Sugar {
   context-free syntax

Modified: sugarj/trunk/case-studies/pair/concrete/Desugar.sugj
==============================================================================
--- sugarj/trunk/case-studies/pair/concrete/Desugar.sugj	Tue Apr 19 07:23:06 2011	(r22558)
+++ sugarj/trunk/case-studies/pair/concrete/Desugar.sugj	Tue Apr 19 09:35:02 2011	(r22559)
@@ -1,6 +1,6 @@
 package pair.concrete;
 
-import concretesyntax.ConcreteJava;
+import concretesyntax.Java;
 
 import pair.concrete.Syntax;
 

Modified: sugarj/trunk/case-studies/xml/AsSax.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/AsSax.sugj	Tue Apr 19 07:23:06 2011	(r22558)
+++ sugarj/trunk/case-studies/xml/AsSax.sugj	Tue Apr 19 09:35:02 2011	(r22559)
@@ -1,6 +1,6 @@
 package xml;
 
-import concretesyntax.ConcreteJava;
+import concretesyntax.Java;
 
 import eblock.EBlock;
 

Modified: sugarj/trunk/case-studies/xml/BookTest.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/BookTest.sugj	Tue Apr 19 07:23:06 2011	(r22558)
+++ sugarj/trunk/case-studies/xml/BookTest.sugj	Tue Apr 19 09:35:02 2011	(r22559)
@@ -8,14 +8,16 @@
 import xml.XmlJavaSyntax;
 import xml.XmlEditor;
 
+import xml.XmlSyntax;
+
 public class BookTest extends xml.Test {
   public static void main(String[] args) throws SAXException {
     ContentHandler ch = new BookTest();
-     
+    
     String title = "Sweetness and Power: The Place of Sugar in Modern History";
     
-    ch.<book title="{new String(title)}" >
+    ch.<book title="{new String(title)}">
          <author name="Sidney W. Mintz" />
-       </book>;
+       </book>;   
   }
 }
\ No newline at end of file

Modified: sugarj/trunk/case-studies/xml/XmlEditor.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/XmlEditor.sugj	Tue Apr 19 07:23:06 2011	(r22558)
+++ sugarj/trunk/case-studies/xml/XmlEditor.sugj	Tue Apr 19 09:35:02 2011	(r22559)
@@ -28,4 +28,4 @@
   completions
     completion trigger : "<"
     completion template : Content = "<{lib}author title=\"" <AttVal> "\">\n</{lib}author>"
-}
\ No newline at end of file
+} 
\ No newline at end of file

Modified: sugarj/trunk/case-studies/xml/XmlTextTools.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/XmlTextTools.sugj	Tue Apr 19 07:23:06 2011	(r22558)
+++ sugarj/trunk/case-studies/xml/XmlTextTools.sugj	Tue Apr 19 09:35:02 2011	(r22559)
@@ -1,6 +1,6 @@
 package xml;
 
-import concretesyntax.ConcreteJava;
+import concretesyntax.Java;
 
 import xml.XmlSyntax;
 

Modified: sugarj/trunk/case-studies/xml/schema/AsDesugaring.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/schema/AsDesugaring.sugj	Tue Apr 19 07:23:06 2011	(r22558)
+++ sugarj/trunk/case-studies/xml/schema/AsDesugaring.sugj	Tue Apr 19 09:35:02 2011	(r22559)
@@ -1,6 +1,6 @@
 package xml.schema;
 
-import concretesyntax.ConcreteStratego;
+import concretesyntax.Stratego;
 
 import xml.ConcreteXml;
 import xml.XmlJavaSyntax;

Modified: sugarj/trunk/case-studies/xml/schema/AsEditorService.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/schema/AsEditorService.sugj	Tue Apr 19 07:23:06 2011	(r22558)
+++ sugarj/trunk/case-studies/xml/schema/AsEditorService.sugj	Tue Apr 19 09:35:02 2011	(r22559)
@@ -1,5 +1,7 @@
 package xml.schema;
 
+import concretesyntax.EditorServices;
+
 import xml.XmlSyntax;
 import xml.schema.XmlSchemaJavaSyntax;
 

From seba at informatik.uni-marburg.de  Tue Apr 19 11:35:20 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 19 Apr 2011 09:35:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22560 -
	sugarj/trunk/stdlib/org/sugarj/init
Message-ID: <20110419093520.8C637108C02F@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Tue Apr 19 09:35:20 2011
New Revision: 22560
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22560&sc=1

Log:
improved initial editor support

Modified:
   sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv

Modified: sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv
==============================================================================
--- sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv	Tue Apr 19 09:35:02 2011	(r22559)
+++ sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv	Tue Apr 19 09:35:20 2011	(r22560)
@@ -29,3 +29,12 @@
   pink      = 255 105 180   
   brown     = 139 69 19     
   default   = _      
+
+language
+  fences : ( )
+  fences : { }
+  fences : < >
+  fences : [ ]
+  fences : ' '
+  fences : "\"" "\""
+  
\ No newline at end of file

From seba at informatik.uni-marburg.de  Tue Apr 19 11:38:10 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 19 Apr 2011 09:38:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22561 -
	sugarj/trunk/editor/editor/java/org/sugarj/editor
Message-ID: <20110419093810.95C882B802E@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Tue Apr 19 09:38:10 2011
New Revision: 22561
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22561&sc=1

Log:
reinitialize editors in a separate thread

Modified:
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJDescriptor.java

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJDescriptor.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJDescriptor.java	Tue Apr 19 09:35:20 2011	(r22560)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJDescriptor.java	Tue Apr 19 09:38:10 2011	(r22561)
@@ -65,14 +65,21 @@
     return result;
   }
 
-  private void initObserver(StrategoObserver observer) {
-    observer.getLock().lock();
-    try {
-      observer.setPrototypeAllowed(false);
-      ((StrategoObserver) observer).getRuntime(); // eagerly initilize w/ current document
-    } finally {
-      observer.getLock().unlock();
-    }
+  private void initObserver(final StrategoObserver observer) {
+    new Thread(new Runnable() {
+      public void run() {
+        try {
+          observer.getLock().lockInterruptibly();
+          observer.setPrototypeAllowed(false);
+          ((StrategoObserver) observer).getRuntime(); // eagerly initilize w/ current document
+        } catch (InterruptedException e) {
+          Environment.logException("could not reinitialize editor: interrupted", e);
+        }
+        finally {
+          observer.getLock().unlock();
+        }
+      }
+    }).start();
   }
   
   private void reloadEditors(SGLRParseController controller) {

From m.dejonge at tudelft.nl  Tue Apr 19 15:25:35 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 19 Apr 2011 13:25:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22562 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110419132535.081FF2B800D@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Apr 19 13:25:34 2011
New Revision: 22562
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22562&sc=1

Log:
remove update labels methods

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Amb.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseProductionNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java	Tue Apr 19 09:38:10 2011	(r22561)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java	Tue Apr 19 13:25:34 2011	(r22562)
@@ -17,8 +17,6 @@
     public abstract Object toTreeBottomup(BottomupTreeBuilder builder);
     
     public abstract Object toTreeTopdown(TopdownTreeBuilder builder);
-
-    public abstract boolean updateLabels(AbstractParseNode oldLabel, AbstractParseNode label);
     
     @Override
 	abstract public boolean equals(Object obj);

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Amb.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Amb.java	Tue Apr 19 09:38:10 2011	(r22561)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Amb.java	Tue Apr 19 13:25:34 2011	(r22562)
@@ -105,24 +105,4 @@
 	public String toStringShallow() {
 		return "Amb";
 	}
-
-	@Override
-	public boolean updateLabels(AbstractParseNode oldLabel, AbstractParseNode label) {
-		boolean updated=false;
-		if(this!=label){
-			for (int i = 0; i < alternatives.length; i++) {
-				if(alternatives[i] == oldLabel){
-					alternatives[i]=label;
-					updated=true;
-				}
-				else{
-					updated = updated || alternatives[i].updateLabels(oldLabel, label);
-				}
-			}
-		}
-		if(updated){
-			this.cachedHashCode=NO_HASH_CODE; 
-		}
-		return updated;
-	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java	Tue Apr 19 09:38:10 2011	(r22561)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java	Tue Apr 19 13:25:34 2011	(r22562)
@@ -96,26 +96,6 @@
 	}
     
     @Override
-	public boolean updateLabels(AbstractParseNode oldLabel, AbstractParseNode label) {
-    	boolean isUpdated=false;
-    	if(kids.length>0){
-    		// Updating the labels of the rightmost child should be sufficient, 
-    		// since the Ambiguities are created in the last reduction step
-			if(kids[kids.length-1] == oldLabel){
-				kids[kids.length-1] = label;
-				isUpdated=true;
-			}
-			else
-				isUpdated =  kids[kids.length-1].updateLabels(oldLabel, label);
-			if(isUpdated){
-				this.cachedHashCode=NO_HASH_CODE; 
-				isParseProductionChain = calculateIsParseProdChain(kids);
-			}
-		}
-		return isUpdated;
-	}
-
-    @Override
     public boolean equals(Object obj) {
         if(!(obj instanceof ParseNode))
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseProductionNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseProductionNode.java	Tue Apr 19 09:38:10 2011	(r22561)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseProductionNode.java	Tue Apr 19 13:25:34 2011	(r22562)
@@ -47,7 +47,6 @@
         return prod == ((ParseProductionNode)obj).prod;
     }
 
-
     @Override
     public int hashCode() {
         return 6359 * prod;
@@ -57,9 +56,4 @@
     public String toStringShallow() {
         return "prod*(" + prod + ")";
     }
-
-	@Override
-	public boolean updateLabels(AbstractParseNode oldLabel, AbstractParseNode label) {
-		return false;
-	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Tue Apr 19 09:38:10 2011	(r22561)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Tue Apr 19 13:25:34 2011	(r22562)
@@ -8,10 +8,8 @@
 package org.spoofax.jsglr.client;
 
 import java.util.Arrays;
-import java.util.HashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
-import java.util.Map;
 import java.util.Queue;
 import java.util.Set;
 
@@ -99,8 +97,6 @@
 
 	protected boolean useIntegratedRecovery;
 	
-	private HashMap<AbstractParseNode, AbstractParseNode> postponedAmbiguities;
-
 	public ParserHistory getHistory() {
 		return history;
 	}
@@ -150,8 +146,6 @@
 		forActor = new ArrayDeque<Frame>();
 		forActorDelayed = new ArrayDeque<Frame>();
 		forShifter = new ArrayDeque<ActionState>();
-		postponedAmbiguities=new HashMap<AbstractParseNode, AbstractParseNode>();
-
 		disambiguator = new Disambiguator();
 		useIntegratedRecovery = false;
 		recoverIntegrator = null;
@@ -294,7 +288,6 @@
 					return sglrParse(startSymbol);
 				}
 			}
-			updateLabels(acceptingStack);
 			getPerformanceMeasuring().endParse(acceptingStack!=null);
 		} catch (final TaskCancellationException e) {
 			throw new ParseTimeoutException(this, currentToken, tokensSeen - 1, lineNumber,
@@ -303,7 +296,6 @@
 			activeStacks.clear();
 			activeStacksWorkQueue.clear();
 			forShifter.clear();
-			postponedAmbiguities.clear();
 			history.clear();
 			if (recoverStacks != null) recoverStacks.clear();
 		}
@@ -343,7 +335,6 @@
 		forActorDelayed.clear();
 		forShifter.clear();
 		history.clear();
-		postponedAmbiguities.clear();
 		startFrame = initActiveStacks();
 		tokensSeen = 0;
 		currentInputStream = new PushbackStringIterator(input);
@@ -414,7 +405,6 @@
 		while (forShifter.size() > 0) {
 
 			final ActionState as = forShifter.remove();
-			updateLabels(as.st);
 			if (!parseTable.hasRejects() || !as.st.allLinksRejected()) {				
 				Frame	st1=findStack(activeStacks, as.s);
 				if(st1==null){				
@@ -442,7 +432,6 @@
 	private void parseCharacter() {
 		logBeforeParseCharacter();
 
-		postponedAmbiguities.clear();
 		activeStacksWorkQueue.clear();
 		activeStacksWorkQueue.addAll(activeStacks);
 
@@ -664,10 +653,7 @@
 					nl.reject();
 				}
 				if(numberOfRecoveries == 0 && nl.recoverCount == 0 || nl.isRejected()) {
-					// UNDONE: this doesn't quite work yet
-					// AbstractParseNode oldLabel=nl.label;
 					createAmbNode(t, nl);
-					// postponedAmbiguities.put(oldLabel, nl.label);
 				} else if (numberOfRecoveries < nl.recoverCount) {
 					nl.label = t;
 					nl.recoverCount = numberOfRecoveries;
@@ -722,14 +708,6 @@
 		ambiguityManager.increaseAmbiguityCalls();
 	}
 	
-	private void updateLabels(Frame f) {
-		if (f != null) {
-			for (Map.Entry<AbstractParseNode, AbstractParseNode> entry : postponedAmbiguities.entrySet()) {
-				f.updateLabels(entry.getKey(), entry.getValue());
-			}
-		}
-	}
-
 	/**
 	 * Found no existing stack with for state s; make new stack
 	 */

From m.dejonge at tudelft.nl  Wed Apr 20 09:10:07 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 20 Apr 2011 07:10:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22563 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110420071007.C5C81108C003@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Apr 20 07:10:07 2011
New Revision: 22563
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22563&sc=1

Log:
remove update labels methods

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java	Tue Apr 19 13:25:34 2011	(r22562)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java	Wed Apr 20 07:10:07 2011	(r22563)
@@ -295,13 +295,6 @@
         }
     }
     
-	public void updateLabels(AbstractParseNode oldLabel, AbstractParseNode label) {
-		for (int i=0; i<stepsCount; i++) {
-			Link ln = steps[i];
-			ln.label.updateLabels(oldLabel, label);			
-		}
-	}
-    
     //mj debug info function
     public int minAvoidValue()
     {

From tobivollebregt at gmail.com  Wed Apr 20 11:26:30 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 20 Apr 2011 09:26:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22564 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans
Message-ID: <20110420092630.514F4108C031@mx3.tudelft.nl>

Author: tvo
Date: Wed Apr 20 09:26:29 2011
New Revision: 22564
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22564&sc=1

Log:
SDF editor: don't give undefined sort warnings in renamings

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str	Wed Apr 20 07:10:07 2011	(r22563)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/analysis.str	Wed Apr 20 09:26:29 2011	(r22564)
@@ -20,13 +20,18 @@
       )
     with
       ast' := <declare-globals-top> ast
-  
+
 rules
 
   declare-globals-top =
     alltd(declare-globals)
 
   declare-globals:
+    renamed-module(x, renamings(y)) -> <id>
+    where
+      <all(try(?symbol(_, <id>); declare-simple-global))> y
+
+  declare-globals:
     unparameterized(x) -> unparameterized(x)
     where
       <open-import(
@@ -42,7 +47,7 @@
     where
       <declare-globals> unparameterized(x);
       <alltd(declare-simple-global)> y
-  
+
   resolve-import =
     // TODO: better import handling
     \x -> $[[<ProjectDir>]/[x].sdf]\; file-exists
@@ -52,7 +57,7 @@
     \x -> $[[<ProjectDir>]/lib/[x].def]\; file-exists
   <+
     \x -> $[[<CurrentDir>]/[x].sdf]\; file-exists
-  
+
   declare-globals:
     prod @ prod(lhs, sort, _) -> <id>
     where
@@ -70,37 +75,37 @@
       )
     with
       <alltd(declare-use)> lhs
-  
+
   declare-globals:
     'sorts(_) -> <id>
     with
       alltd(declare-use)
-  
+
   declare-globals:
     context-free-start-symbols(_) -> <id>
     with
       alltd(declare-use)
-  
+
   declare-globals:
     lexical-start-symbols(_) -> <id>
     with
       alltd(declare-use)
-  
+
   declare-globals:
     kernel-start-symbols(_) -> <id>
     with
       alltd(declare-use)
-  
+
   declare-simple-global:
     sort(x) -> <id>
     with
       rules(Declaration: x -> x)
-  
+
   declare-use:
     sort(x) -> <id>
     with
       rules(Usage: x -> x)
-  
+
   declare-use:
     parameterized-sort(x, y) -> <id>
     where
@@ -108,13 +113,13 @@
         text := ${{x}[[{y'}]]};
         rules(Usage: text -> text)
       end
-  
+
   propose-completion:
     sort(COMPLETION(x)) -> [decl*, use*]
     with
       decl* := <all-keys-Declaration> x;
       use*  := <all-keys-Usage> x
-  
+
   propose-completion:
     NOCONTEXT(COMPLETION(x)) -> [decl*, use*]
     with

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Wed Apr 20 07:10:07 2011	(r22563)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Wed Apr 20 09:26:29 2011	(r22564)
@@ -29,18 +29,18 @@
       else
         error'*   := <conc> (serror*, error*);
         warning'* := warning*
-      end 
+      end
 
   editor-complete:
     (node, position, ast, path, project-path) -> proposals
     where
       proposals := <propose-completion <+ ![]> node
- 
+
   editor-resolve:
     (sort(x), position, ast, path, project-path) -> target
     where
       target := <Declaration> x
- 
+
   editor-resolve:
     (unparameterized(x), position, ast, path, project-path) -> target
     where
@@ -49,20 +49,23 @@
   override pp-sdf-string = fail // ensure compiler doesn't blow up
 
 rules // Limited exisiting sort checking
-    
+
+  context-free-syntax-sort-error:
+    renamed-module(x, renamings(y)) -> [] // not supported
+
   context-free-syntax-sort-error:
     sort(x) -> (x, $[No definition for [x]])
     where
       not(<Declaration> x)
-  
+
   context-free-syntax-sort-error:
     parameterized-sort(_, _) -> [] // not supported
-  
+
   context-free-syntax-sort-error:
     'sorts(_) -> [] // ignored
 
 rules // Local checks
-  
+
   context-free-syntax-warning:
     prod(p*, s, a*) -> (target, $[Missing {cons("Label")} attribute to label the abstract syntax])
     where
@@ -74,25 +77,25 @@
       if !a* => attrs(a'*) then
         not(<one(term(default(appl(unquoted("cons" + "ast"), [fun(quoted(not("\"\"")))]))))> a'*);
         not(<one(bracket() + reject())> a'*);
-        not(!s; (sort("Keyword") + sort("\"Keyword\""))); 
+        not(!s; (sort("Keyword") + sort("\"Keyword\"")));
         target := a*
       else
         target := s
       end
-  
+
   context-free-syntax-warning:
     t @ term(default(appl(unquoted("cons"), a*))) -> (t, $[Single argument expected for {cons("Name")} attribute])
     where
       not(<length> a* => 1)
-  
+
   context-free-syntax-warning:
     t @ term(default(annotated(_, _))) -> (t, $[Use round parentheses () for attribute arguments])
-  
+
   context-free-syntax-error:
     prod([x], s, attrs(a*)) -> (a*, $[Illegal use of {bracket} attribute])
     where
       <one(bracket())> a*
-   
+
   // TODO: don't warn for | in {reject} productions
   context-free-syntax-warning:
     alt(x, y) -> (<id>, $[The | construct is deprecated: instead of A|B->C use A->C B->C])
@@ -106,16 +109,16 @@
     opt(lit) -> (lit, $[Extract literal in optional to separate productions to ensure consistent abstract syntax])
     where
       oncetd(?lit(_))
-   
+
   /**
    * Tests if something is a non-terminal in terms of the AST produced.
    */
   is-non-terminal =
     ?sort(_) + ?opt(_) + is-iter
-  
+
   is-iter =
     ?iter(_) + ?iter-star(_) + ?iter-sep(_, _) + ?iter-star-sep(_, _)
-  
+
   // Instruct users to use { X "," }*
 
   context-free-syntax-warning:
@@ -137,7 +140,7 @@
   context-free-syntax-warning:
     prod(lhs @ [sort(x), opt(seq(lit(sep), [sort(xs)]))], sort(xs), _) ->
     (lhs, $[Use {[x] [sep]}+ instead for [sep]-separated lists])
-       
+
   // Instruct users to use { X ","? }* (seen in MDSD 2010)
 
   context-free-syntax-warning:
@@ -172,12 +175,12 @@
     iter(cs) -> (<id>, $[Character class iteration should be in lexical syntax section])
     where
       <oncetd(?range(_, _))> cs
-    
+
   context-free-syntax-warning:
-    iter-sep(_, bad @ sort(_)) -> (bad, "Non-terminal used as a list separator (use round braces for grouping non-terminals)") 
-  
+    iter-sep(_, bad @ sort(_)) -> (bad, "Non-terminal used as a list separator (use round braces for grouping non-terminals)")
+
   context-free-syntax-warning:
-    iter-star-sep(_, bad @ sort(_)) -> (bad, "Non-terminal used as a list separator (use round braces for grouping non-terminals)") 
+    iter-star-sep(_, bad @ sort(_)) -> (bad, "Non-terminal used as a list separator (use round braces for grouping non-terminals)")
 
 rules
 
@@ -189,7 +192,7 @@
       result    := <ppgenerate; pp-pp-table> selected'
     <+
       fatal-err-msg(|$[Could not generate pretty printer rules for this selection.])
-  
+
   generate-rtg:
     (selected, position, ast, path, project-path) -> (filename, result)
     where
@@ -198,12 +201,12 @@
       result    := <debug(!4); core-rtg2sig; debug(!5); pp-stratego-string> selected'
     <+
       fatal-err-msg(|$[Could not generate abstract syntax signatures for this selection.])
-  
+
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, selected)
     where
       filename  := <guarantee-extension(|"aterm")> path
-  
+
   add-context =
     if not(oncetd(?context-free-syntax(_))) then
       if is-list then
@@ -224,6 +227,6 @@
 
   pp-pp-table =
     <call> ("org.strategoxt.tools.pp-pp-table", [<id>])
-  
+
   sdf-desugar =
     <call> ("org.strategoxt.tools.sdf-desugar", [<id>]) => [_, <id>]

From tobivollebregt at gmail.com  Wed Apr 20 11:26:35 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 20 Apr 2011 09:26:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22565 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans
Message-ID: <20110420092635.20D11108C026@mx3.tudelft.nl>

Author: tvo
Date: Wed Apr 20 09:26:34 2011
New Revision: 22565
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22565&sc=1

Log:
ESV editor: recognize renamed sorts

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	Wed Apr 20 09:26:29 2011	(r22564)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	Wed Apr 20 09:26:34 2011	(r22565)
@@ -12,7 +12,7 @@
   include/EditorService
 
 rules
-  
+
   editor-analyze:
     (ast, path, project-path) -> (error*, warning*, [])
     with
@@ -20,7 +20,7 @@
       <record-all-sdfs> ".";
       error*   := <collect-all(constraint-error, conc)> ast;
       warning* := <conc> (<collect-all(constraint-warning, conc)> ast, <warnings-refactoring> ast)
-  
+
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, selected)
     where
@@ -52,7 +52,7 @@
     (Sort(COMPLETION(_)), position, ast, path, project-path) -> proposals
     where
       proposals := <map(<conc-strings> (<id>, " = "))> <all-keys-SortDeclaration>
-  
+
   record-all-sdfs =
     <readdir> ".";
     list-loop(
@@ -64,19 +64,27 @@
         try(record-sdf)
       end
     )
-  
+
   record-sdf:
     filename -> filename
     where
       <has-extension(|"sdf")> filename;
-      <open-import(abspath, parse-sdf-module-file, topdown(try(record-prod)))> filename
-  
+      <open-import(abspath, parse-sdf-module-file, alltd(record-prod))> filename
+
   record-sdf:
     filename -> filename
     where
       <has-extension(|"def")> filename;
-      <open-import(abspath, parse-sdf-definition-file, topdown(try(record-prod)))> filename
-   
+      <open-import(abspath, parse-sdf-definition-file, alltd(record-prod))> filename
+
+  record-prod:
+    renamed-module(x, renamings(y)) -> <id>
+    where
+      let record-sort = \x -> x with rules(SortDeclaration : x -> x)\
+      in
+        <all(try(?symbol(_, sort(<id>))); record-sort)> y
+      end
+
   record-prod:
     prod @ prod(lhs, sort, attrs) -> <id>
     where
@@ -89,14 +97,14 @@
         SortDeclaration   :  x -> x
         SortProductionLHS :+ x -> lhs
       )
-  
+
   to-completion-parts:
     [lit(x) | tail] -> ["\"", lits', "\" " | tail']
     where
       lits  := <map(?lit(<id>))> <take-while(?lit(_))>;
       lits' := <escape> <concat-strings> <separate-by(|" ")> lits;
       tail' := <to-completion-parts> <drop-while(?lit(_))> tail
-  
+
   to-completion-parts-top:
     [lit(first) | tail] -> $[[trigger'] [rest']]
     where
@@ -104,45 +112,45 @@
       trigger' := <to-completion-parts> trigger;
       rest     := <drop-while(?lit(<is-alpha>))> tail;
       rest'    := <to-completion-parts> <separate-by(|lit(" "))> rest
-  
+
   to-completion-parts:
     [sort(x) | tail] -> ["<", x, "> " | <to-completion-parts> tail]
-  
+
   to-completion-parts:
     [iter-star(sort(x)) | tail] -> ["<", x, "*> " | <to-completion-parts> tail]
-  
+
   to-completion-parts:
     [iter-star-sep(sort(x), _) | tail] -> ["<", x, "*> " | <to-completion-parts> tail]
-  
+
   to-completion-parts:
     [iter(sort(x)) | tail] -> ["<", x, "*> " | <to-completion-parts> tail]
-  
+
   to-completion-parts:
     [iter-sep(sort(x), _) | tail] -> ["<", x, "*> " | <to-completion-parts> tail]
-  
+
   to-completion-parts:
     [opt(sort(x)) | tail] -> ["<", x, "> " | <to-completion-parts> tail]
-  
+
   to-completion-parts:
     [] -> []
-  
+
   remove-completion-irrelevant:
     parameterized-sort(x, _) -> sort(x)
-  
+
   remove-completion-irrelevant:
     cf(x) -> x
-  
+
   remove-completion-irrelevant:
     lex(x) -> x
-  
+
   remove-completion-irrelevant:
     opt(layout()) -> lit(" ")
-  
+
   constraint-error:
     Sort(x) -> (x, $[Unknown sort [x]])
     where
       not(<SortDeclaration> x)
-  
+
   constraint-error:
     SemanticProvider(x) -> (x, $[Must be a generated .ctree or .jar file])
     where
@@ -150,45 +158,44 @@
 
   constraint-warning:
     CompletionTrigger(".", _) -> $[Trigger is a regular expression that matches any character. Use \. instead]
-  
+
   warnings-refactoring=
-  	?ast;
-  	wrns-pp-unspecified:=<warning-pptable-unspecified> ast;
-  	wrns-src-property:=<collect-all(warning-source-property-missing)> ast;
-  	wrns-unused-annotation:=<collect-all(warning-unused-anno); flatten-list> ast;
-  	<concat>[wrns-pp-unspecified, wrns-src-property, wrns-unused-annotation]
-  
+    ?ast;
+    wrns-pp-unspecified:=<warning-pptable-unspecified> ast;
+    wrns-src-property:=<collect-all(warning-source-property-missing)> ast;
+    wrns-unused-annotation:=<collect-all(warning-unused-anno); flatten-list> ast;
+    <concat>[wrns-pp-unspecified, wrns-src-property, wrns-unused-annotation]
+
   warning-unused-anno=
     ?Refactoring(_, _, _, annos);
     <filter(
-    	?OpenEditor()<+
-    	?Persistent()<+
-    	?RealTime())
+      ?OpenEditor()<+
+      ?Persistent()<+
+      ?RealTime())
     > annos;
     map(!(<id>, $[the '[<origin-text>]' annotation is not used for refactorings]))
-    
+
   warning-pptable-unspecified=
     if not(oncetd(?PPTable(_))) then
-  	  collect-all(
-  	  	warning-pp-table-missing
-  	  ) 		
+      collect-all(
+        warning-pp-table-missing
+      )
     else
       ![]
     end
-  	
+
   warning-pp-table-missing=
-    ?refactoring at Refactoring(_, _, _, _); 
+    ?refactoring at Refactoring(_, _, _, _);
     !(
-       refactoring, 
-       $["pp-table : 'stratego-call'" is missing, 
+       refactoring,
+       $["pp-table : 'stratego-call'" is missing,
        as a result the source code reconstruction may fail]
      )
 
   warning-source-property-missing=
     ?refactoring at Refactoring(_, _, _, props);
-    <not(fetch(?Source()))> props; 
+    <not(fetch(?Source()))> props;
     !(
-       refactoring, 
+       refactoring,
        $["Layout deviations will occur for desugared constructs, (source) annotation is recommended"]
      )
-  	
\ No newline at end of file

From tobivollebregt at gmail.com  Wed Apr 20 11:26:42 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 20 Apr 2011 09:26:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22566 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor
Message-ID: <20110420092642.80FCCCC0DB@mx4.tudelft.nl>

Author: tvo
Date: Wed Apr 20 09:26:42 2011
New Revision: 22566
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22566&sc=1

Log:
ESV editor: Don't spam errors about non-existing strategies

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-References.esv

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-References.esv	Wed Apr 20 09:26:42 2011	(r22566)
@@ -0,0 +1,15 @@
+module EditorService-References
+
+imports EditorService-References.generated
+
+references
+
+  // This file can be used to specify reference resolving and hover help, and content completion.
+  //
+  // See the imported file for a brief introduction and examples.
+
+
+references
+
+  // reference _ : editor-resolve
+  // hover _     : editor-hover

From L.C.L.Kats at tudelft.nl  Wed Apr 20 13:51:40 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 20 Apr 2011 11:51:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22567 - in
	spoofax/trunk/spoofax:
	org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	org.spoofax.terms/src/org/spoofax/interpreter/terms org.spoofax...
Message-ID: <20110420115140.3A93CCC0E2@mx4.tudelft.nl>

Author: LennartKats
Date: Wed Apr 20 11:51:39 2011
New Revision: 22567
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22567&sc=1

Log:
Implemented and changed return type of ISimpleTerm.removeAttachment()

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoHashMap.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/ISimpleTerm.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractSimpleTerm.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/LazyTerm.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoHashMap.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoHashMap.java	Wed Apr 20 09:26:42 2011	(r22566)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoHashMap.java	Wed Apr 20 11:51:39 2011	(r22567)
@@ -17,6 +17,7 @@
 
     private static final long serialVersionUID = -8193582031891397734L;
     
+    // I already burned my base class here, so I use encapsulation for attachments
     private final AbstractSimpleTerm attachmentContainer = new AbstractSimpleTerm() {
         public boolean isList() {
             return false;
@@ -94,8 +95,8 @@
         attachmentContainer.putAttachment(attachment);
     }
     
-    public void removeAttachment(TermAttachmentType<?> type) {
-        attachmentContainer.removeAttachment(type);
+    public ITermAttachment removeAttachment(TermAttachmentType<?> type) {
+        return attachmentContainer.removeAttachment(type);
     }
     
     public boolean isList() {

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/ISimpleTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/ISimpleTerm.java	Wed Apr 20 09:26:42 2011	(r22566)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/ISimpleTerm.java	Wed Apr 20 11:51:39 2011	(r22567)
@@ -27,7 +27,7 @@
 
 	void putAttachment(ITermAttachment resourceAttachment);
     
-    void removeAttachment(TermAttachmentType<?> attachmentType);
+	ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType);
 	
 	boolean isList();
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractSimpleTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractSimpleTerm.java	Wed Apr 20 09:26:42 2011	(r22566)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractSimpleTerm.java	Wed Apr 20 11:51:39 2011	(r22567)
@@ -1,6 +1,5 @@
 package org.spoofax.terms;
 
-import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.ISimpleTerm;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.attachments.ITermAttachment;
@@ -40,15 +39,35 @@
 	        		if (a.getAttachmentType() == newType) {
 	        			attachment.setNext(a.getNext());
 	        			previous.setNext(attachment);
+	        			break;
 	        		}
+	        		previous = a;
 	        	}
     			previous.setNext(attachment);
     		}
     	}
     }
     
-    public void removeAttachment(TermAttachmentType<?> attachmentType) {
-    	throw new NotImplementedException();
+    public ITermAttachment removeAttachment(TermAttachmentType<?> type) {
+    	if (attachment != null) {
+    		if (attachment.getAttachmentType() == type) {
+    			ITermAttachment old = attachment;
+    			attachment = attachment.getNext();
+    			old.setNext(null);
+    			return old;
+    		}
+    	} else {
+			ITermAttachment previous = this.attachment;
+			for (ITermAttachment a = attachment.getNext(); a != null; a = a.getNext()) {
+        		if (a.getAttachmentType() == type) {
+        			previous.setNext(a.getNext());
+        			a.setNext(null);
+        			return a;
+        		}
+        		previous = a;
+        	}
+    	}
+    	return null;
     }
     
     protected void clearAttachments() {

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/LazyTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/LazyTerm.java	Wed Apr 20 09:26:42 2011	(r22566)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/LazyTerm.java	Wed Apr 20 11:51:39 2011	(r22567)
@@ -187,8 +187,8 @@
     	getWrapped().putAttachment(attachment);
     }
     
-    public void removeAttachment(TermAttachmentType<?> attachmentType) {
-    	getWrapped().removeAttachment(attachmentType);
+    public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
+    	return getWrapped().removeAttachment(attachmentType);
     }
     
 	public boolean isList() {

From L.C.L.Kats at tudelft.nl  Wed Apr 20 14:12:31 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 20 Apr 2011 12:12:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22568 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spo...
Message-ID: <20110420121231.27DC82B8038@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Apr 20 12:12:29 2011
New Revision: 22568
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22568&sc=1

Log:
cosmetic tweaks

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Folding.esv
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Folding.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Folding.esv	Wed Apr 20 11:51:39 2011	(r22567)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Folding.esv	Wed Apr 20 12:12:29 2011	(r22568)
@@ -5,4 +5,6 @@
 folding
   
   // This file can be used for custom folding rules.
-  // See the imported file for a brief introduction and examples.
\ No newline at end of file
+  // See the imported file for a brief introduction and examples.
+  
+  Decl.Imports (folded)
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str	Wed Apr 20 11:51:39 2011	(r22567)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str	Wed Apr 20 12:12:29 2011	(r22568)
@@ -33,7 +33,7 @@
       results   := <map(execute-service(|from''))> resolvers
     where
       switch !results
-        case debug(!1); one(is-successful-completion(|to)); debug(!2): fail
+        case one(is-successful-completion(|to)): fail
         case one(?Some(t)):  error := $[Unexpected result: [<write-to-string> t]]
         case one(?Error(m)): error := $[Unexpected error: [m]]
         case one(?Fail(m)):  error := $[Unexpected error: [m]]

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java	Wed Apr 20 11:51:39 2011	(r22567)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java	Wed Apr 20 12:12:29 2011	(r22568)
@@ -135,6 +135,9 @@
 		return term.getAttachment(TYPE) != null ? term : null;
 	}
 	
+	/**
+	 * @param isAnonymousSequence  True if the term is an unnamed sequence like a list or tuple.
+	 */
 	public static void putImploderAttachment(ISimpleTerm term, boolean isAnonymousSequence, String sort, IToken leftToken, IToken rightToken) {
 		term.putAttachment(isAnonymousSequence ?
 				  new ListImploderAttachment(sort, leftToken, rightToken)

From L.C.L.Kats at tudelft.nl  Wed Apr 20 14:25:47 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 20 Apr 2011 12:25:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22569 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.editorservice/editor
	org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/run...
Message-ID: <20110420122547.2F00B2B8035@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Apr 20 12:25:46 2011
New Revision: 22569
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22569&sc=1

Log:
Spoofax/359: pure stratego syntax disambiguator

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CustomDisambiguator.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverUpdateJob.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv	Wed Apr 20 12:12:29 2011	(r22568)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv	Wed Apr 20 12:25:46 2011	(r22569)
@@ -101,6 +101,9 @@
     "start symbols" ":\n\t" <Start> (blank)
  
   completion template : LanguageProperty = 
+    "disambiguator" ":\n\t" <s> (blank)
+ 
+  completion template : LanguageProperty = 
     "description" ":\n\t" <description> (blank)
  
   completion template : LanguageProperty = 

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Wed Apr 20 12:12:29 2011	(r22568)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Wed Apr 20 12:25:46 2011	(r22569)
@@ -22,6 +22,7 @@
    OccurrenceRule       -- R [ H [ KW["occurrence"] _1 ] H [ KW[":"] _2 ] ],
    SemanticProvider     -- R [ H [ KW["provider"] ] KW[":"] _1 ],
    OnSave               -- R [ H [ KW["on"] KW["save"] ] KW[":"] _1 _2 ],
+   Disambiguator        -- R [ H [ KW["disambiguator"] ] KW[":"] _1 ],
    SemanticObserver     -- R [ H [ KW["observer"] ]  KW[":"] _1 ],
    Builder              -- R [ H [ KW["builder"] ]   KW[":"] _1 H [ KW["="] _2 _3 ] ],
    Builder.3:iter-star  -- _1,

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf	Wed Apr 20 12:12:29 2011	(r22568)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf	Wed Apr 20 12:25:46 2011	(r22569)
@@ -46,6 +46,7 @@
     "extends"         ":" PropertyValues -> LanguageProperty {cons("Extends")}
     "aliases"         ":" PropertyValues -> LanguageProperty {cons("Aliases")} %% deprecated
     "unmanaged" "table" ":" Id "*"       -> LanguageProperty {cons("UnmanagedTablePrefix")}
+    "disambiguator"   ":" StrategoCall   -> LanguageProperty {cons("Disambiguator")}
    
      %% Syntax properties
      

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Wed Apr 20 12:12:29 2011	(r22568)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Wed Apr 20 12:25:46 2011	(r22569)
@@ -498,12 +498,16 @@
 		if (result == null)
 			return defaultValue;
 
-		if (termAt(result, 0).getTermType() == IStrategoTerm.APPL
-				&& cons(termAt(result, 0)).equals("Values")) {
-			return concatTermStrings(termAt(result, 0));
-		} else {
-			return termContents(result);
+		return termContents(result);
+	}
+
+	protected String[] getProperties(String name) {
+		List<IStrategoAppl> resultTerms = collectTerms(document, name);
+		String[] results = new String[resultTerms.size()];
+		for (int i = 0, max = results.length; i < max; i++) {
+			results[i] = termContents(resultTerms.get(i));
 		}
+		return results;
 	}
 
 	protected String[] getPropertyArray(String name) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java	Wed Apr 20 12:12:29 2011	(r22568)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java	Wed Apr 20 12:25:46 2011	(r22569)
@@ -8,6 +8,7 @@
 import org.eclipse.imp.services.ILanguageSyntaxProperties;
 import org.spoofax.jsglr.client.InvalidParseTableException;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.parser.CustomDisambiguator;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 
 /**
@@ -36,6 +37,7 @@
 			throw new BadDescriptorException("Could not load parse table for " + language.getName(), e);
 		}
 		SGLRParseController result = new SGLRParseController(language, table, syntaxProperties, descriptor.getStartSymbol());
+		result.setCustomDisambiguator(new CustomDisambiguator(result, descriptor.getProperties("Disambiguator")));
 		if (table.isDynamic())
 			table.setController(result);
 		return result;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java	Wed Apr 20 12:12:29 2011	(r22568)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java	Wed Apr 20 12:25:46 2011	(r22569)
@@ -2,6 +2,7 @@
 
 import static org.spoofax.interpreter.terms.IStrategoTerm.APPL;
 import static org.spoofax.interpreter.terms.IStrategoTerm.STRING;
+import static org.spoofax.terms.Term.tryGetName;
 
 import java.util.ArrayList;
 
@@ -59,6 +60,8 @@
 		
 		if (t.getTermType() == STRING) {
 			result = asJavaString(t);
+		} else if (t.getSubtermCount() == 1 && "Values".equals(tryGetName(t))) {
+			return concatTermStrings(listAt(t, 0));
 		} else if (t.getTermType() == APPL && t.getSubtermCount() == 1 && termAt(t, 0).getTermType() == STRING) {
 			result = asJavaString(termAt(t, 0));
 		} else if (t.getTermType() == APPL && t.getSubtermCount() == 1) {
@@ -73,16 +76,15 @@
 		return result;
 	}
 
-	public static String concatTermStrings(IStrategoTerm values) {
-		IStrategoList list = termAt(values, 0);
+	public static String concatTermStrings(IStrategoList values) {
 		StringBuilder results = new StringBuilder();
 		
-		if (list.getSubtermCount() > 0)
-			results.append(termContents(termAt(list, 0)));
+		if (values.getSubtermCount() > 0)
+			results.append(termContents(termAt(values, 0)));
 		
-		for (int i = 1; i <  list.getSubtermCount(); i++) {
+		for (int i = 1; i <  values.getSubtermCount(); i++) {
 			results.append(',');
-			results.append(termContents(termAt(list, i)));
+			results.append(termContents(termAt(values, i)));
 		}
 		return results.toString();
 	}

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CustomDisambiguator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CustomDisambiguator.java	Wed Apr 20 12:25:46 2011	(r22569)
@@ -0,0 +1,137 @@
+package org.strategoxt.imp.runtime.parser;
+
+import static org.spoofax.interpreter.core.Tools.isTermTuple;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getTokenizer;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.putImploderAttachment;
+import static org.spoofax.terms.TermVisitor.tryGetListIterator;
+import static org.spoofax.terms.attachments.OriginAttachment.getOrigin;
+import static org.strategoxt.imp.runtime.stratego.SourceAttachment.*;
+
+import java.lang.ref.WeakReference;
+import java.util.Iterator;
+
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.OperationCanceledException;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.jsglr.client.imploder.Tokenizer;
+import org.spoofax.terms.attachments.OriginAttachment;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.StrategoObserver;
+import org.strategoxt.imp.runtime.stratego.SourceAttachment;
+
+/**
+ * A class that uses the language runtime to disambiguate an AST.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class CustomDisambiguator {
+
+	private final SGLRParseController controller;
+	
+	private final String[] functions;
+	
+	private WeakReference<StrategoObserver> runtime;
+	
+	public CustomDisambiguator(SGLRParseController controller, String[] functions) {
+		this.controller = controller;
+		this.functions = functions;
+	}
+	
+	public IStrategoTerm disambiguate(IStrategoTerm ast) {
+		if (functions.length == 0)
+			return ast;
+		
+		if (Environment.isMainThread()) {
+			// Shouldn't acquire environment lock from main thread 
+			controller.scheduleParserUpdate(SGLRParseController.REPARSE_DELAY, false);
+			throw new OperationCanceledException("Cannot parse and disambiguate from main thread");
+		}
+		
+		StrategoObserver myRuntime = getRuntime();
+		if (myRuntime == null)
+			return ast;
+		
+		myRuntime.getLock().lock();
+		try {
+			IResource resource = getResource(ast);
+			for (String f : functions) {
+				IStrategoTerm input = myRuntime.getInputBuilder().makeInputTerm(ast, false);
+				IStrategoTerm result = myRuntime.invokeSilent(f, input, resource);
+				if (result == null) {
+					myRuntime.reportRewritingFailed();
+					Environment.logException("Disambiguation failed (see error log)");
+				} else {
+					ast = transferAttachments(ast, result);
+				}
+			}
+		} finally {
+			myRuntime.getLock().unlock();
+		}
+		
+		return ast;
+	}
+	
+	private static IStrategoTerm transferAttachments(final IStrategoTerm oldTerm, IStrategoTerm newTerm) {
+		reinitTokens(newTerm, getLeftToken(oldTerm), getRightToken(oldTerm));
+		getTokenizer(oldTerm).setAst(newTerm);
+		getTokenizer(oldTerm).initAstNodeBinding();
+		SourceAttachment.putSource(newTerm, getResource(oldTerm), getParseController(oldTerm));
+		return newTerm;
+	}
+	
+	/**
+	 * Assign tokens to this term and all subterms, using the origin tokens or the given tokens.
+	 * 
+	 * @param left  The left token to use if no token can be identified for this term.
+	 * @param right The right token to use if no token can be identified for this term.
+	 */
+	private static void reinitTokens(IStrategoTerm term, IToken left, IToken right) {
+		// Init tokens
+		if (ImploderAttachment.get(term) == null) {
+			IStrategoTerm origin = getOrigin(term);
+			if (origin != null) {
+				ImploderAttachment old = ImploderAttachment.get(origin);
+				String sort = isListOrTuple(origin) ? old.getElementSort() : old.getSort();
+				left = old.getLeftToken();
+				right = old.getRightToken();
+				putImploderAttachment(term, isListOrTuple(term), sort, left, right);
+			} else {
+				putImploderAttachment(term, isListOrTuple(term), null, left, right);
+			}
+		}
+		term.removeAttachment(OriginAttachment.TYPE);
+		
+		// Recurse
+		Iterator<IStrategoTerm> iterator = tryGetListIterator(term); 
+		for (int i = 0, max = term.getSubtermCount(); i < max; i++) {
+			IStrategoTerm child = iterator == null ? term.getSubterm(i) : iterator.next();
+			reinitTokens(child, left, right);
+			left = Tokenizer.getTokenAfter(getRightToken(child));
+		}
+	}
+
+	private static boolean isListOrTuple(IStrategoTerm term) {
+		return term.isList() || isTermTuple(term);
+	}
+
+	private StrategoObserver getRuntime() {
+		StrategoObserver result = runtime == null ? null : runtime.get();
+		try {
+			if (result == null) {
+				Descriptor descriptor = Environment.getDescriptor(controller.getLanguage());
+				result = descriptor.createService(StrategoObserver.class, controller);
+				runtime = new WeakReference<StrategoObserver>(result);
+			}
+			return result;
+		} catch (BadDescriptorException e) {
+			Environment.logException("Could not load observer", e);
+			return null;
+		}
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Wed Apr 20 12:12:29 2011	(r22568)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Wed Apr 20 12:25:46 2011	(r22569)
@@ -61,7 +61,7 @@
 	
 	private static final int PARSE_TIMEOUT = 20 * 1000;
 	
-	private static final int REPARSE_DELAY = 1 * 1000;
+	public static final int REPARSE_DELAY = 1 * 1000;
 	
 	private final SWTSafeLock parseLock = new SWTSafeLock(true);
 	
@@ -99,6 +99,8 @@
 
 	private volatile long initialReschedule;
 
+	private CustomDisambiguator disambiguator;
+
 	// Simple accessors
 	
 	/**
@@ -284,6 +286,9 @@
 			currentTokenizer = new NullTokenizer(input, filename);
 			IStrategoTerm result = doParse(input, filename);
 			currentTokenizer = getTokenizer(result);
+			
+			if (disambiguator != null)
+				result = disambiguator.disambiguate(result);
 
 			errorHandler.clearErrors();
 			errorHandler.setRecoveryFailed(false);
@@ -539,4 +544,8 @@
 		
 		return result.toString();
 	}
+
+	public void setCustomDisambiguator(CustomDisambiguator disambiguator) {
+		this.disambiguator = disambiguator;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverUpdateJob.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverUpdateJob.java	Wed Apr 20 12:12:29 2011	(r22568)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverUpdateJob.java	Wed Apr 20 12:25:46 2011	(r22569)
@@ -31,7 +31,7 @@
 			return Status.OK_STATUS;
 		} finally {
 			observer.getLock().unlock();
-		}
+ 		}
 		
 	}
 

From srabbelier at gmail.com  Wed Apr 20 14:54:13 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Wed, 20 Apr 2011 12:54:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22570 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110420125413.A04EA108C037@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Wed Apr 20 12:54:13 2011
New Revision: 22570
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22570&sc=1

Log:
Remove Range class, construct int[] directly

Deleted:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Range.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseTable.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RangeList.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseTable.java	Wed Apr 20 12:25:46 2011	(r22569)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseTable.java	Wed Apr 20 12:54:13 2011	(r22570)
@@ -331,14 +331,15 @@
     }
 
     private State[] parseStates(IStrategoNamed statesTerm) throws InvalidParseTableException {
-
         IStrategoList states = termAt(statesTerm, 0);
         State[] ret = new State[states.getSubtermCount()];
+
         for(int i = 0; i < ret.length; i++) {
             IStrategoNamed stateRec = (IStrategoNamed) states.head();
             states = states.tail();
 
             int stateNumber = intAt(stateRec, 0);
+
             Goto[] gotos = parseGotos((IStrategoList) termAt(stateRec, 1));
             Action[] actions = parseActions((IStrategoList) termAt(stateRec, 2));
 
@@ -359,7 +360,6 @@
         }
     }
 
-
     private Action[] parseActions(IStrategoList actionList) throws InvalidParseTableException {
         Action[] ret = new Action[actionList.getSubtermCount()];
 
@@ -510,25 +510,28 @@
 //    }
 
     private RangeList parseRanges(IStrategoList ranges) throws InvalidParseTableException {
-        // TODO: Optimize - directly create int[] for RangeList, don't bother with intermediate Range objects
-        Range[] ret = new Range[ranges.getSubtermCount()];
+        int size = ranges.getSubtermCount();
+        int[] ret = new int[size * 2];
 
-        for(int i = 0; i < ret.length; i++) {
+        int idx = 0;
+
+        for(int i = 0; i < size; i++) {
             IStrategoTerm t = ranges.head();
             ranges = ranges.tail();
             if (isTermInt(t)) {
-                ret[i] = makeRange(javaInt(t));
+                int value = javaInt(t);
+                ret[idx++] = value;
+                ret[idx++] = value;
             } else {
-                int low = intAt(t, 0);
-                int hi = intAt(t, 1);
-                ret[i] = makeRange(low, hi);
+                ret[idx++] = intAt(t, 0);
+                ret[idx++] = intAt(t, 1);
             }
         }
 
         return makeRangeList(ret);
     }
 
-    private RangeList makeRangeList(Range[] ranges) throws InvalidParseTableException {
+    private RangeList makeRangeList(int[] ranges) throws InvalidParseTableException {
         RangeList r = new RangeList(ranges);
         RangeList cached = rangesCache.get(r);
         if (cached == null) {
@@ -539,14 +542,6 @@
         }
     }
 
-    private Range makeRange(int low, int hi) throws InvalidParseTableException {
-        return new Range(low, hi);
-    }
-
-    private Range makeRange(int n) throws InvalidParseTableException {
-        return makeRange(n, n);
-    }
-
     public State getInitialState() {
         return states[startState];
     }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RangeList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RangeList.java	Wed Apr 20 12:25:46 2011	(r22569)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RangeList.java	Wed Apr 20 12:54:13 2011	(r22570)
@@ -20,54 +20,16 @@
     
     private final int singularRange;
     
-    public RangeList(Range... ranges) {
-        if (ranges.length == 1 && ranges[0].low == ranges[0].high) {
+    public RangeList(int[] ranges) {
+        if (ranges.length == 1) {
             this.ranges = null;
-            singularRange = ranges[0].low;
+            singularRange = ranges[0];
         } else {
-            // Assume unsanitized input
-            List<Range> sortedRanges = toSortedList(ranges);
-            List<Range> sanitizedRanges = mergeOverlap(sortedRanges);
-            this.ranges = rangesToArray(sanitizedRanges);
+            this.ranges = ranges;
             singularRange = NONE;
         }
     }
     
-    private static List<Range> mergeOverlap(List<Range> ranges) {
-        for (int i = 0; i < ranges.size(); i++) {
-            final Range range = ranges.get(i);            
-            final int j = i + 1;
-            
-            while (j < ranges.size() && ranges.get(j).low <= range.high) {
-                if (ranges.get(j).high > range.high)
-                   range.high = ranges.get(j).high;
-                ranges.remove(j);
-            }
-        }
-        
-        return ranges;
-    }
-
-    private static List<Range> toSortedList(Range[] ranges) {
-        Arrays.sort(ranges);
-        List<Range> results = new ArrayList<Range>(ranges.length);
-        for (Range range : ranges)
-            results.add(range);
-        return results;
-    }
-    
-    private static int[] rangesToArray(List<Range> ranges) {
-        int[] results = new int[ranges.size() * 2];
-        int i = 0;
-        
-        for (Range range : ranges) {
-            results[i++] = range.low;
-            results[i++] = range.high;
-        }
-        
-        return results;
-    }
-    
     public final boolean within(int c) {
         if (singularRange != NONE) return c == singularRange;
         for (int i = 0; i < ranges.length; i += 2) {

From M.A.Akhter at student.tudelft.nl  Wed Apr 20 16:00:54 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 20 Apr 2011 14:00:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22571 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen
Message-ID: <20110420140054.4BC1E7F8033@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 20 14:00:52 2011
New Revision: 22571
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22571&sc=1

Log:
* Update Build Script with SDF2Table, PPGen, Pack, SDF2IMP and ....

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Wed Apr 20 12:54:13 2011	(r22570)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Wed Apr 20 14:00:52 2011	(r22571)
@@ -33,7 +33,7 @@
 		packages-specific-ant: (pakage-qname*, main-ant-output-file-name ,autogen-ant-output-file-name)  ->
 $[<?xml version="1.0" encoding="UTF-8" ?>
 		
-		<project name="build.[main-ant-output-file-name]" default="build-spx-packages">
+		<project name="[main-ant-output-file-name]" default="build-spx-packages">
     <!-- autogenerated artifacts relative directory path -->	
 		<property name="packages.root" location="[packages-root]"/>
 		
@@ -77,7 +77,7 @@
 		<property name="package.path" location="[package-directory]"/>
 		<property name="package.main.sdf.module" value="[package-main-name]"/>
 		<property name="package.main.str.module" value="[package-main-name]"/>
-		<property name="package.main.esv.module" value="[package-main-name]"/>
+		<property name="package.main.esv.module" value="[package-name].main"/>
 		<property name="metasdfmodule" value="Stratego-[package-main-name]"/> 
 		
 		<antcall target = "spx.default">
@@ -112,51 +112,51 @@
 $[<?xml version="1.0" encoding="UTF-8" ?>
 
 <project name="build.spx.generated">
-		
-		<target name="spx.default" depends="spx.default.ctree"/>
-    <target name="spx.default.ctree" depends="check-classpath,init,pack-sdf,copy-sdf,java.jar,stratego.ctree,sdf2imp, refresh"/>
-        
-    <!-- Initialization -->
-    <available file="${build}/org/strategoxt/imp/editors/spoofax/strategies/Main.class" property="java.jar.enabled"/>
-    <condition property="java.jar.import" value="-la org.strategoxt.imp.editors.spoofax.strategies" else="">
-        <isset property="java.jar.enabled"/>
-    </condition>
-    <condition property="java.jar.classpath" value=":${include}/${package.main.str.module}-java.jar" else="">
-        <isset property="java.jar.enabled"/>
-    </condition>
-    <available file="${package.path}/${package.main.str.module}.rtree" property="build.stratego.enabled"/>
-    <dirname property="externaldefdir" file="${externaldef}"/>
-    <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
-        <isset property="externaldef"/>
-    </condition>
-    <condition property="externaljarimport" value=":${externaljar}" else="">
-        <isset property="externaljar"/>
-    </condition>
-    <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
-        <isset property="eclipse.running"/>
-    </condition>
-    <condition property="externaljarflags" value="${externaljarflags}" else="">
-        <isset property="externaljarflags"/>
-    </condition>
-    <condition property="metasdfmodule.available" value="1">
-        <available file="${package.path}/${metasdfmodule}.sdf"/>
-    </condition>
+	<target name="spx.default" depends="spx.default.ctree"/>
+  <target name="spx.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table, ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp, refresh"/>
+	<target name="spx.default.jar"   depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,java.jar,sdf2imp,refresh"/>
+	          
+  <!-- Initialization -->
+  <available file="${build}/org/strategoxt/imp/editors/spoofax/strategies/Main.class" property="java.jar.enabled"/>
+  <condition property="java.jar.import" value="-la org.strategoxt.imp.editors.spoofax.strategies" else="">
+      <isset property="java.jar.enabled"/>
+  </condition>
+  <condition property="java.jar.classpath" value=":${include}/${package.main.str.module}-java.jar" else="">
+      <isset property="java.jar.enabled"/>
+  </condition>
+  <available file="${package.path}/${package.main.str.module}.rtree" property="build.stratego.enabled"/>
+  <dirname property="externaldefdir" file="${externaldef}"/>
+  <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+      <isset property="externaldef"/>
+  </condition>
+  <condition property="externaljarimport" value=":${externaljar}" else="">
+      <isset property="externaljar"/>
+  </condition>
+  <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+      <isset property="eclipse.running"/>
+  </condition>
+  <condition property="externaljarflags" value="${externaljarflags}" else="">
+      <isset property="externaljarflags"/>
+  </condition>
+  <condition property="metasdfmodule.available" value="1">
+      <available file="${package.path}/${metasdfmodule}.sdf"/>
+  </condition>
     
 	<fail unless="build" message="Please use build.spx.main.xml to build this project or configure the required properties manually"/>
-    <mkdir dir="${build}"/>
-    <mkdir dir="${src-gen}"/>
-    <mkdir dir="${dist}"/>
-    <mkdir dir="${include}"/>
-    <mkdir dir="${lib}"/>
-    <mkdir dir="${syntax}"/>
+  <mkdir dir="${build}"/>
+  <mkdir dir="${src-gen}"/>
+  <mkdir dir="${dist}"/>
+  <mkdir dir="${include}"/>
+  <mkdir dir="${lib}"/>
+  <mkdir dir="${syntax}"/>
 
-		<target name="init" if="eclipse.running">
-            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
-            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
-                <arg value="${include}"/>
-            </java>
-		</target>
-		      
+	<target name="init" if="eclipse.running">
+	  <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+	  <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+	      <arg value="${include}"/>
+	  </java>
+	</target>
+	      
 		<target name="check-classpath">
         <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
         <antcall target="check-classpath.helper"/>  
@@ -187,9 +187,9 @@
 				<eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>	
 			
 				<eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
-				<eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
-				
-				<eclipse.refreshLocal resource="${package.path}" depth="infinite"/>
+				<eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+				
+				<eclipse.refreshLocal resource="${package.path}" depth="infinite"/>
 				<eclipse.refreshLocal resource="${packages.root}" depth="infinite"/>
 				
 				<eclipse.refreshLocal resource="${projectdir}/build.spx.autogenerated.xml" depth="infinite"/>
@@ -207,12 +207,9 @@
         <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
         <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
   	</target>
-    
-		<target name="copy-sdf" if="externaldef">
-	  		<copy file="${externaldef}" tofile="${include}/${package.name}.def" preservelastmodified="true"/>
-    </target>
-	
-    <target name="pack-sdf" unless="externaldef">
+  
+	  <!-- Pack SDF -->
+	  <target name="pack-sdf" unless="externaldef">
         <dependset>
             <srcfileset dir="${packages.root}">
                 <include name="**/*.sdf"/>
@@ -244,11 +241,236 @@
             <arg line="${build.sdf.imports}"/>
         </java>
     </target>
+	
+	<target name="copy-sdf" if="externaldef">
+		  <copy file="${externaldef}" tofile="${include}/${package.name}.def" preservelastmodified="true"/>
+	  </target>
 
-  	<target name="copy-jar" if="externaljar">
-  		<copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+	<!-- SDF-To-Table -->
+	<target name="meta-sdf2table" if="metasdfmodule.available">
+		<fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+		<antcall target="sdf2table">
+			<param name="sdfmodule" value="${metasdfmodule}"/>
+			<param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+		</antcall>
+		<antcall target="meta-sdf2table.helper"/>
     </target>
+	
+	<target name="meta-sdf2table.helper" if="eclipse.running">
+	   <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+	   <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+    </target>
+	
+	<target name="sdf2table" depends="make-permissive">
+		<apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+			<arg value="-i"/>
+			<srcfile/>
+			<arg value="-o"/>
+			<targetfile/>
+			<arg value="-m"/>
+			<arg value="${package.name}"/>
+			
+			<fileset file="${include}/${package.name}-Permissive.def"/>
+			<mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+		</apply>
+   </target>
+	
+	<target name="make-permissive" depends="pack-sdf,copy-sdf">
+		<dependset>
+			<srcfileset file="${include}/${package.name}.def"/>
+			<targetfileset file="${include}/${package.name}-Permissive.def"/>
+    </dependset>
+		<available file="${include}/${package.name}-Permissive.def" property="permissive-grammar.available"/>
+    <antcall target="make-permissive.helper"/>
+  </target>
+	
+	<target name="make-permissive.helper" unless="permissive-grammar.available">
+		<java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+			<arg value="-i"/>
+			<arg value="${include}/${package.name}.def"/>
+			<arg value="-o"/>
+			<arg value="${include}/${package.name}-Permissive.def"/>
+			<arg line="--optimize on"/>
+        </java>
+    </target>
+	
+	
+	<!-- PP Generation -->
+	<target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+	  <dependset>
+	      <srcfileset    file="${include}/${package.name}.def"/>
+	      <targetfileset file="${syntax}/${package.name}.generated.pp"/>
+	      <targetfileset file="${include}/${package.name}.generated.pp.af"/>
+	  </dependset>
+	  <available file="${include}/${package.name}.generated.pp.af" property="ppgen.available"/>
+	  <antcall target="ppgen.helper"/>
+	  <available file="${include}/${package.name}.generated.pp.af" property="ppgen.available"/>
+	  <antcall target="ppgen.helper.fallback"/>
+	</target>
+	    
+  <target name="ppgen.helper" unless="ppgen.available">
+      <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+      <java classname="run" failonerror="false">
+          <arg value="org.strategoxt.tools.main-ppgen"/>
+          <arg value="-i"/>
+          <arg value="${include}/${package.name}.def"/>
+          <arg value="-o"/>
+          <arg value="${include}/${package.name}.generated.pp.af"/>
+          <arg value="-t"/>
+      </java>
+  	
+      <java classname="run" failonerror="false">
+          <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+          <arg value="-i"/>
+          <arg value="${include}/${package.name}.generated.pp.af"/>
+          <arg value="-o"/>
+          <arg value="${package.path}/${package.name}.generated.pp"/>
+      </java>
+  </target>
+	    
+  <target name="ppgen.helper.fallback" unless="ppgen.available">
+  	<echo file="${include}/${package.name}.generated.pp.af" message="PP-Table($[$ $]$)"/>
+  </target>
+  
+	
+	<!-- PP Packing -->
+  <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+      <dependset>
+          <srcfileset file="${package.path}/${package.name}.pp"/>
+          <targetfileset file="${include}/${package.name}.pp.af"/>
+      </dependset>
+      <available file="${package.path}/${package.name}.pp" property="pppack.source-available"/>
+      <available file="${include}/${package.name}.pp.af" property="pppack.available"/>
+      <antcall target="pppack.helper"/>
+      <available file="${include}/${package.name}.pp.af" property="pppack.available"/>
+      <antcall target="pppack.helper.fallback"/>
+  </target>
+	
+	 <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+	 	<java classname="run" failonerror="true">
+	  	<arg value="org.strategoxt.tools.main-parse-pp-table"/>
+	    <arg value="-i"/>
+	    <arg value="${package.path}/${package.name}.pp"/>
+	    <arg value="-o"/>
+	    <arg value="${include}/${package.name}.pp.af"/>
+	  </java>
+	</target>
 
+	<target name="pppack.helper.fallback" unless="pppack.available">
+      <echo file="${include}/${package.name}.pp.af" message="PP-Table($[$ $]$)"/>
+  </target>
+	
+	<target name="copy-jar" if="externaljar">
+  	<copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+  </target>
+	
+	<!-- Generates Signature file  *.STR from RTG file -->
+	<target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+		<dependset>
+	  	<srcfileset file="${include}/${package.name}.rtg"/>
+	   	<targetfileset file="${include}/${package.name}.str"/>
+	  </dependset>
+	  <available file="${include}/${package.name}.str" property="rtg2sig.available"/>
+	  <antcall target="rtg2sig.helper"/>
+	</target>
+	    
+	<target name="rtg2sig.helper" unless="rtg2sig.available">
+		<java classname="run" failonerror="true">
+	  	<arg value="org.strategoxt.tools.main-rtg2sig"/>
+    	<arg value="-i"/>
+	    <arg value="${include}/${package.name}.rtg"/>
+	    <arg value="-o"/>
+	    <arg value="${include}/${package.name}.str"/>
+	    <arg value="--module"/>
+	    <arg value="${sdfmodule}"/>
+	 	</java>
+	</target>
+	 
+	
+	<!-- Generates *.RTG file from SDF *def files  -->
+	<target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+		<dependset>
+	  	<srcfileset file="${include}/${package.name}.def"/>
+	    <targetfileset file="${include}/${package.name}.rtg"/>
+	  </dependset>
+	  <available file="${include}/${package.name}.rtg" property="sdf2rtg.available"/>
+	  <antcall target="sdf2rtg.helper"/>
+	</target>
+	    
+	<target name="sdf2rtg.helper" unless="sdf2rtg.available">
+		<java classname="run" failonerror="true">
+	  	<arg value="org.strategoxt.tools.main-sdf2rtg"/>
+	    <arg value="-i"/>
+	    <arg value="${include}/${package.name}.def"/>
+	    <arg value="-m"/>
+	    <arg value="${sdfmodule}"/>
+			<arg value="-o"/>
+	    <arg value="${include}/${package.name}.rtg"/>
+	    <arg value="--ignore-missing-cons"/>
+	    <arg value="-Xnativepath"/>
+	    <arg value="${build.strategoxt.sdf}"/>
+	 </java>
+	</target>
+	
+	
+  <!-- Aster to Stratego -->
+   <target name="stratego.aster">
+       <available file="${package.path}/${package.main.str.module}.rtree" property="aster-output.available"/>
+       <pathconvert property="aster-input" setonempty="false" pathsep=" ">
+           <path><fileset dir="${basedir}" includes="*.astr"/></path>
+       </pathconvert>
+       <dependset>
+           <srcfileset dir="${basedir}">
+               <include name="**/*.astr"/>
+           </srcfileset>
+           <targetfileset file="${package.path}/${package.main.str.module}.rtree"/>
+       </dependset>
+       <condition property="aster-output.uptodate">
+           <and>
+               <isset property="aster-output.available"/>
+               <available file="${package.path}/${package.main.str.module}.rtree"/>
+           </and>
+       </condition>
+       <available file="${package.path}/${package.main.str.module}.rtree" property="aster-output.uptodate"/>
+       <antcall target="stratego.aster.helper"/>
+   </target>
+
+   <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+       <java classname="org.strategoxt.aster.Main" failonerror="true">
+           <arg value="-i"/>
+           <fileset dir="${packages.root}">
+               <include name="**/*.astr"/>
+           </fileset>
+       </java>
+   </target>
+	
+   <!-- Stratego to Java compiler -->
+   <target name="stratego.jar" depends="rtg2sig,utils-files">
+   	<dependset>
+    	<srcfileset dir="${package.path}">
+      	<include name="**/*.str"/>
+        <include name="**/*.astr"/>
+        <exclude name="lib/editor-common.generated.str"/>
+			</srcfileset>
+    	<targetfileset file="${src-gen}/trans/Main.java"/>
+         </dependset>
+         <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+         <antcall target="copy-jar"/>
+         <antcall target="stratego.jar.deletehelper"/>
+         <antcall target="stratego.jvm.helper">
+         		<param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+         </antcall>
+         <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+         <!-- copy imported terms -->
+         <copy todir="${build}/trans">
+             <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+         </copy>
+         <jar basedir="${build}" includes="trans/**" destfile="${include}/${package.name}.tmp.jar"/>
+         <move file="${include}/${package.name}.tmp.jar" tofile="${include}/${package.name}.jar"/>
+         <delete><fileset dir="${build}" includes="trans/**"/></delete>
+     </target>
+	
 	
 		<!-- Stratego to Java interpreter -->
     <target name="stratego.ctree" >
@@ -307,13 +529,24 @@
       <delete dir="${src-gen}/trans"/>
 		</target>
 	
-	  <target name="sdf2imp" depends="sdf2imp.eclipse"/>
+	  <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
 	        
 		<target name="sdf2imp.eclipse" if="eclipse.running" >
 			<copy file="${package.path}/${package.main.esv.module}.packed.esv" tofile="${include}/${package.name}.packed.esv" preservelastmodified="true"/>
+			<java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+				<arg value="${include}/${package.name}.packed.esv"/> <!-- esv main file-->
+			</java>
 		</target>
 	
-</project>
+  <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2table,sdf2rtg">
+		<java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+			<arg value="-i"/>
+      <arg value="${package.path}/${package.main.esv.module}.packed.esv"/>
+      <arg value="-p"/>
+      <arg value="${include}/${package.name}.tbl"/>
+    </java>
+  </target>
+</project>
 ]
 
 	
\ No newline at end of file

From tobivollebregt at gmail.com  Thu Apr 21 11:24:55 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 21 Apr 2011 09:24:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22572 - in
	spoofax-imp/trunk: org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110421092455.8937D2B8027@mx2.tudelft.nl>

Author: tvo
Date: Thu Apr 21 09:24:55 2011
New Revision: 22572
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22572&sc=1

Log:
`<Proposal:Sort>' placeholders that create ProposalPositions in the
LinkedModeModel prefilled with all templates applying at the given sort.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf	Wed Apr 20 14:00:52 2011	(r22571)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf	Thu Apr 21 09:24:55 2011	(r22572)
@@ -50,6 +50,7 @@
     String      -> CompletionPart
     Placeholder -> CompletionPart {cons("Placeholder")}
     "(cursor)"  -> CompletionPart {cons("Cursor")}
+    PlaceholderWithSortPrefix Id ">" -> CompletionPart {cons("PlaceholderWithSort")}
 
                  -> CompletionAnno {cons("None")}
     "(disabled)" -> CompletionAnno {cons("Disable")}
@@ -64,6 +65,6 @@
 
   lexical syntax
 
+    "<" PlaceholderChar* ":" -> PlaceholderWithSortPrefix
     "<" PlaceholderChar* ">" -> Placeholder
-    ~[\>\n]                  -> PlaceholderChar
-
+    ~[\:\>\n]                -> PlaceholderChar

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Wed Apr 20 14:00:52 2011	(r22571)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Thu Apr 21 09:24:55 2011	(r22572)
@@ -11,6 +11,7 @@
    CompletionLexical    -- R [ H [ KW["completion"] KW["lexical"] ] KW[":"] _1 ],
    IdentifierLexical    -- R [ H [ KW["identifier"] KW["lexical"] ] KW[":"] _1 ],
    Placeholder          -- H hs=0 [ _1 ],
+   PlaceholderWithSort  -- H hs=0 [ _1 _2 KW[">"] ],
    CompletionKeyword    -- R [ H [ KW["completion"] KW["keyword"] ] KW[":"] H [ _1 _2 ] ],
    CompletionTemplate   -- R [ H [ KW["completion"] KW["template"] ] KW[":"] H [ _1 _2 _3 ] ],
    CompletionTemplate.2:iter-star -- _1,
@@ -119,6 +120,6 @@
    Imports.1:iter       -- _1,
    Import               -- _1,
    ImportRenamed        -- H hs=0 [_1 KW["["] _2 KW["]"]],
-   NoImports            -- 
+   NoImports            --
 ]
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java	Wed Apr 20 14:00:52 2011	(r22571)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java	Thu Apr 21 09:24:55 2011	(r22572)
@@ -102,7 +102,7 @@
 			return null;
 		StringBuilder result = new StringBuilder();
 		for (IStrategoTerm part : newTextParts.getAllSubterms()) {
-			if ("Placeholder".equals(cons(part))) {
+			if ("Placeholder".equals(cons(part)) || "PlaceholderWithSort".equals(cons(part))) {
 				IStrategoString placeholder = termAt(part, 0);
 				String contents = placeholder.stringValue();
 				contents = contents.substring(1, contents.length() - 1); // strip < >

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Wed Apr 20 14:00:52 2011	(r22571)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Thu Apr 21 09:24:55 2011	(r22572)
@@ -21,6 +21,7 @@
 import org.eclipse.jface.text.link.LinkedModeUI;
 import org.eclipse.jface.text.link.LinkedPosition;
 import org.eclipse.jface.text.link.LinkedPositionGroup;
+import org.eclipse.jface.text.link.ProposalPosition;
 import org.eclipse.jface.viewers.StyledString;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.graphics.Point;
@@ -64,8 +65,8 @@
 		this.position = position;
 	}
 
-	public ContentProposal(ContentProposer proposer, Completion completion, String prefix, ITextViewer viewer) {
-		this(proposer, completion, prefix, null, viewer);
+	public ContentProposal(ContentProposer proposer, Completion completion, ITextViewer viewer) {
+		this(proposer, completion, "", null, viewer);
 	}
 
 	public Point getSelection(IDocument document) {
@@ -106,7 +107,7 @@
 	private String proposalPartToString(IDocument document, IStrategoTerm part) {
 		try {
 			String lineStart = AutoEditStrategy.getLineBeforeOffset(document, position.getOffset());
-			if ("Placeholder".equals(cons(part))) {
+			if ("Placeholder".equals(cons(part)) || "PlaceholderWithSort".equals(cons(part))) {
 				IStrategoString placeholder = termAt(part, 0);
 				String contents = placeholder.stringValue();
 				contents = contents.substring(1, contents.length() - 1); // strip < >
@@ -136,7 +137,7 @@
 		for (IStrategoList cons = proposalParts; !cons.isEmpty(); cons = cons.tail()) {
 			IStrategoTerm partTerm = cons.head();
 			String part = proposalPartToString(document, partTerm);
-			if ("Placeholder".equals(cons(partTerm))
+			if ("Placeholder".equals(cons(partTerm)) || "PlaceholderWithSort".equals(cons(partTerm))
 					// HACK: we should migrate to semantic completion returning Placeholder cons too when it wants placeholders
 					|| (cons != proposalParts && proposer.getCompletionLexical().matcher(part).matches())) {
 				LinkedPositionGroup group = groups.get(part);
@@ -144,7 +145,18 @@
 					group = new LinkedPositionGroup();
 					groups.put(part, group);
 				}
-				group.addPosition(new LinkedPosition(document, offset + i, part.length(), group.isEmpty() ? 0 : LinkedPositionGroup.NO_STOP));
+				if (partTerm.getSubtermCount() == 2 && group.isEmpty()) {
+					IStrategoString sortTerm = termAt(partTerm, 1);
+					ICompletionProposal[] choices = proposer.getTemplateProposalsForSort(sortTerm.stringValue(), viewer);
+					LinkedPosition position = new ProposalPosition(document, offset + i, part.length(), 0, choices);
+					for (ICompletionProposal proposal : choices) {
+						((ContentProposal)proposal).setPosition(position);
+					}
+					group.addPosition(position);
+				}
+				else {
+					group.addPosition(new LinkedPosition(document, offset + i, part.length(), group.isEmpty() ? 0 : LinkedPositionGroup.NO_STOP));
+				}
 			}
 			else if ("Cursor".equals(cons(partTerm))) {
 				result.exitPos = offset + i;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Apr 20 14:00:52 2011	(r22571)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Apr 21 09:24:55 2011	(r22572)
@@ -97,7 +97,17 @@
 		*/
 
 		return results;
-    }
+	}
+
+	public ICompletionProposal[] getTemplateProposalsForSort(String wantedSort, ITextViewer viewer) {
+		Set<ICompletionProposal> results = new HashSet<ICompletionProposal>();
+		for (Completion proposal : templates) {
+			if (wantedSort.equals(proposal.getSort())) {
+				results.add(new ContentProposal(this, proposal, viewer));
+			}
+		}
+		return toSortedArray(results);
+	}
 
 	private ICompletionProposal[] getParseFailureProposals(IParseController controller,
 			String document, int offset, Set<String> sorts, ITextViewer viewer) {

From tobivollebregt at gmail.com  Thu Apr 21 11:25:09 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 21 Apr 2011 09:25:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22573 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.editorservice/editor
	org.strategoxt.imp.editors.editorservice/trans
	org.strategoxt.imp.generator/src/sdf2imp/servi...
Message-ID: <20110421092509.7605BCC0DD@mx4.tudelft.nl>

Author: tvo
Date: Thu Apr 21 09:25:09 2011
New Revision: 22573
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22573&sc=1

Log:
New completion template syntax (see Spoofax/362)

Also fixed semantic proposals starting with non-identifier chars.
(e.g. for the completion of completion parts of completion templates)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv	Thu Apr 21 09:24:55 2011	(r22572)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv	Thu Apr 21 09:25:09 2011	(r22573)
@@ -12,114 +12,114 @@
 
   completion trigger:
     "(completion\s*template|start\s*symbols)\s*:\s*[^\s]+\s*=\s+"
-  
+
   completion template : Module =
-    "module " <Module> 
-  
+    "module " <Module>
+
   completion template : Section =
     "imports" "\n\t" (blank)
-  
+
   completion template : Section =
     "builders" "\n\t" (blank)
-  
+
   completion template : Section =
     "colorer" "\n\t" (blank)
-  
+
   completion template : Section =
     "folding" "\n\t" (blank)
-  
+
   completion template : Section =
     "outliner" "\n\t" (blank)
-  
+
   completion template : Section =
     "completions" "\n\t" (blank)
-  
+
   completion template : Section =
     "language" "\n\t" (blank)
-  
+
   completion template : Section =
     "references" "\n\t" (blank)
-  
+
   completion template : SemanticRule =
-    "completion template" " : " <Sort> " =\n\t" <"prefix"> " " <"completion"> (blank)
-  
+    "completion template" " " <Sort> " :\n\t" <"prefix"> " " <"completion"> (blank)
+
   completion template : SemanticRule =
     "identifier lexical" ":\n\t" <regex> (blank)
-  
+
   completion template : SemanticRule =
     "completion proposer" ":\n\t" <s> (blank)
-  
+
   completion template : SemanticRule =
     "completion keyword" ":\n\t" <k> (blank)
-  
+
   completion template : SemanticRule =
     "completion trigger" ":\n\t" <regex> (blank)
-    
+
   completion template : SemanticRule =
   	"observer" ": " <s> (blank)
-  
+
   completion template : SemanticRule =
     "provider" ": " <provider.jar> (blank)
-  
+
   completion template : SemanticRule =
   	"builder" ": " <"caption"> " = " <s> (blank)
-  
+
   completion template : SemanticRule =
     "builder caption" ": " <"caption"> (blank)
-  
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
   	"unmanaged table" ": " <prefix> "*" (blank)
-  
+
   completion template : LanguageProperty =
   	"line comment" ": " <prefix> (blank)
-  
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
   	"block comment" ":\n\t" <prefix> " " <middle> " " <end> (blank)
-  
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
   	"fences" ":\n\t" <f> " " <g> (blank)
- 
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
   	"indent after" ":\n\t" <keyword> (blank)
- 
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
     "name" ":\n\t" <Name> (blank)
- 
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
     "url" ":\n\thttp://" <url> (blank)
- 
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
     "id" ":\n\t" <id> (blank)
- 
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
     "extends" ":\n\t" <Language> (blank)
- 
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
     "extensions" ":\n\t" <ext> (blank)
- 
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
     "start symbols" ":\n\t" <Start> (blank)
- 
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
     "disambiguator" ":\n\t" <s> (blank)
- 
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
     "description" ":\n\t" <description> (blank)
- 
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
     "table" ":\n\t" <table> (blank)
- 
-  completion template : LanguageProperty = 
+
+  completion template : LanguageProperty =
     "table provider" ":\n\t" <provider> (blank)
-  
-  completion template : SemanticRule = 
+
+  completion template : SemanticRule =
   	"reference" " _ : " <s> (blank)
-  
-  completion template : SemanticRule = 
+
+  completion template : SemanticRule =
     "occurrence" " _ : " <s> (blank)
-  
-  completion template : SemanticRule = 
+
+  completion template : SemanticRule =
     "hover" " _ : " <s> (blank)
 
-  completion template : SemanticRule = 
-    "on save" ": " <s> (blank)
\ No newline at end of file
+  completion template : SemanticRule =
+    "on save" ": " <s> (blank)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	Thu Apr 21 09:24:55 2011	(r22572)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	Thu Apr 21 09:25:09 2011	(r22573)
@@ -27,32 +27,17 @@
       filename  := <guarantee-extension(|"aterm")> path
 
   editor-complete:
-    (Sort(x), position, ast, path, project-path) -> proposals
+    (Sort(COMPLETION(_)), position, ast, path, project-path) -> proposals
     where
       proposals := <all-keys-SortDeclaration>
 
   editor-complete:
-    (CompletionTemplate(COMPLETION(_), parts, _), position, ast, path, project-path) -> proposals
-    where
-      if [] := parts then
-        suffix := " =\n\t\t"
-      else
-        suffix := " = "
-      end;
-      proposals := <map(<conc-strings> (<id>, suffix))> <all-keys-SortDeclaration>
-
-  editor-complete:
-    (CompletionTemplateWithSort(Sort(sort), COMPLETION(_), _, _), position, ast, path, project-path) -> proposals
+    (CompletionTemplateEx([Sort(sort)], COMPLETION(_), _, _), position, ast, path, project-path) -> proposals
     where
       lhs*      := <bagof-SortProductionLHS> sort;
       lhs'*     := <topdown(repeat(remove-completion-irrelevant))> lhs*;
       proposals := <make-set> <filter(to-completion-parts-top)> lhs'*
 
-  editor-complete:
-    (Sort(COMPLETION(_)), position, ast, path, project-path) -> proposals
-    where
-      proposals := <map(<conc-strings> (<id>, " = "))> <all-keys-SortDeclaration>
-
   record-all-sdfs =
     <readdir> ".";
     list-loop(
@@ -82,7 +67,7 @@
     where
       let record-sort = \x -> x with rules(SortDeclaration : x -> x)\
       in
-        <all(try(?symbol(_, sort(<id>))); record-sort)> y
+        <all(try(?symbol(_, sort(<id>)); record-sort))> y
       end
 
   record-prod:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str	Thu Apr 21 09:24:55 2011	(r22572)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str	Thu Apr 21 09:25:09 2011	(r22573)
@@ -3,7 +3,7 @@
 imports
   libstratego-lib
   libstratego-sdf
-  
+
   sdf2imp/util/-
   sdf2imp/main
 
@@ -21,9 +21,9 @@
       <descriptor-name> "-Completions"
     , !|[
         module <descriptor-name> "-Completions"
-        
+
         imports <descriptor-name> "-Completions.generated"
-        
+
         completions
           ~~
           ~~// This file is used to define content completion.
@@ -34,13 +34,13 @@
           ~~
           ~~// Syntax completion:
           ~~
-          completion template : Start =
+          completion template Start :
             "module " <m> (blank)
           ~~
-          completion template : Definition =
-            "entity " <e> " {}"  (blank)
+          completion template Definition :
+            "entity " <e> " {" (cursor) "}"  (blank)
           ~~
-          completion template : Property =
+          completion template Property : "prop" =
             <x> " : " <T>  (blank)
           ~~
         completions
@@ -52,7 +52,7 @@
       ]|
     );
     create-derived-completions-descriptor
-    
+
   create-derived-completions-descriptor =
     not(is-heuristic-services-needed);
     verbose-msg(!"Skipping", <descriptor-name> "-Completions.generated")
@@ -63,7 +63,7 @@
       completion-rules := <collect-all-keywords; map(keyword-to-completion-rule)>;
       !|[
         module <descriptor-name> "-Completions.generated"
-        
+
         completions
           ~
           ~// Syntactic content completion can be defined as follows:
@@ -81,21 +81,26 @@
           ~//
           ~//   completion template: "section " <title> "\n\t" (blank)
           ~//
-          ~// Finally, you can specify a specific SDF sort for which a completion
+          ~// You can specify a specific SDF sort for which a completion
           ~// rule should trigger as follows:
           ~//
-          ~//   completion template : Section =
+          ~//   completion template Section :
           ~//     "section " <title> "\n\t" (blank)
           ~//
+          ~// Finally, you can override the prefix of the completion:
+          ~//
+          ~//   completion template Statement : "assignment" =
+          ~//     <x> " = " <y> (blank)
+          ~//
           ~// Semantic content completion can be defined as follows:
           ~//
-          ~//   completion proposer : completion-function-call  
+          ~//   completion proposer : completion-function-call
           ~//   completion trigger  : "\."
           ~//
           ~// This sets completion-function-call as the completion strategy,
           ~// and declares that [A-Za-z0-9_]+ may be used as a lexical pattern
           ~// to parse identifiers (used to set the text selection with suggestions).
-          ~// The completion trigger uses a regular expression to specify that  
+          ~// The completion trigger uses a regular expression to specify that
           ~// completions should be proposed as the user types ".".
           ~//
           ~// Completions make use of the identifier lexical defined in YourLanguage-Syntax.esv
@@ -138,7 +143,7 @@
     where
       <is-prefixed-keyword> lit
     with
-      keyword-suffix := <take-while(lit(is-prefixed-keyword))> p*; 
+      keyword-suffix := <take-while(lit(is-prefixed-keyword))> p*;
       keyword        := <map(?lit(<id>)); separate-by(|" "); concat-strings> [lit(lit) | keyword-suffix];
       p'*            := <drop-while(?lit(_))> p*
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf	Thu Apr 21 09:24:55 2011	(r22572)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/CompletionsService.sdf	Thu Apr 21 09:25:09 2011	(r22573)
@@ -22,20 +22,25 @@
 
     "identifier" "lexical" ":" PropertyValue -> SemanticRule {cons("IdentifierLexical")}
 
-    "completion" "keyword" ":" PropertyValue CompletionAnno -> SemanticRule {cons("CompletionKeyword")}
-
-    "completion" "template" ":" CompletionPart CompletionPart* CompletionAnno -> SemanticRule {cons("CompletionTemplate")}
+    "completion" "keyword" ":" PropertyValue OptCompletionAnno -> SemanticRule {cons("CompletionKeyword")}
 
     %% Deprecated: conflicts with content completion
-    "completion" "template" ":" Id CompletionPart+ CompletionAnno -> SemanticRule {cons("CompletionTemplate"), avoid, deprecated("Add quotes to the starting literal")}
+    "completion" "template" ":" Id CompletionPart+ OptCompletionAnno -> SemanticRule {cons("CompletionTemplate"), avoid, deprecated("Add quotes to the starting literal")}
 
-    "completion" "template" ":" Sort "=" CompletionPart CompletionPart* CompletionAnno -> SemanticRule {cons("CompletionTemplateWithSort")}
+    %% Deprecated: replaced by CompletionTemplateEx
+    "completion" "template" ":" Sort "=" CompletionPart CompletionPart* OptCompletionAnno -> SemanticRule {cons("CompletionTemplateWithSort"), avoid, deprecated("Move the sort before ':' and remove '='")}
 
     %% Used as content completion triggers
-    "completion" "template" ":" PropertyValue CompletionPart* CompletionAnno -> SemanticRule {cons("CompletionTemplate"), recover, avoid}
-    "completion" "template" ":" Sort "=" PropertyValue CompletionPart* CompletionAnno -> SemanticRule {cons("CompletionTemplateWithSort"), recover, avoid}
+    %% "completion" "template" PropertyValue CompletionPart* OptCompletionAnno -> SemanticRule {cons("CompletionTemplate"), recover, avoid}
+    "completion" "template" Sort* ":" PropertyValue CompletionPart* CompletionAnno* -> SemanticRule {cons("CompletionTemplateEx"), recover, avoid}
+
+    "completion" "trigger" ":" PropertyValue OptCompletionAnno -> SemanticRule {cons("CompletionTrigger")}
 
-    "completion" "trigger" ":" PropertyValue CompletionAnno -> SemanticRule {cons("CompletionTrigger")}
+    %% New completion template
+    "completion" "template" Sort* ":" CompletionPrefix CompletionPart+ CompletionAnno* -> SemanticRule {cons("CompletionTemplateEx")}
+
+               -> CompletionPrefix {cons("NoCompletionPrefix")}
+    String "=" -> CompletionPrefix {cons("CompletionPrefix")}
 
   context-free syntax
 
@@ -52,12 +57,16 @@
     "(cursor)"  -> CompletionPart {cons("Cursor")}
     PlaceholderWithSortPrefix Id ">" -> CompletionPart {cons("PlaceholderWithSort")}
 
-                 -> CompletionAnno {cons("None")}
+                   -> OptCompletionAnno {cons("None")}
+    CompletionAnno -> OptCompletionAnno
+
     "(disabled)" -> CompletionAnno {cons("Disable")}
     "(disable)"  -> CompletionAnno {cons("Disable"), deprecated("Use (disabled) instead")}
     "(blank)"    -> CompletionAnno {cons("Blank")}
+    "(linked)"   -> CompletionAnno {cons("Linked")}
     "(blank)"    -> PropertyValue {reject}
     "(disable)"  -> PropertyValue {reject}
+    "(linked)"   -> PropertyValue {reject}
     "completion" -> PropertyValue {reject}
     "template"   -> PropertyValue {reject}
     "trigger"    -> PropertyValue {reject}

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Thu Apr 21 09:24:55 2011	(r22572)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Thu Apr 21 09:25:09 2011	(r22573)
@@ -18,6 +18,13 @@
    CompletionTemplateWithSort   -- R [ V is=2 [ H [ KW["completion"] KW["template"] KW[":"] _1 KW["="]] ]
                                                 H [ _2 _3 _4 ] ],
    CompletionTemplateWithSort.3:iter-star -- _1,
+   CompletionTemplateEx -- R [ V is=2 [ H [ KW["completion"] KW["template"] _1 KW[":"] _2 ]
+                                        H [ _3 _4 ] ] ],
+   CompletionTemplateEx.1:iter-star       -- _1,
+   CompletionTemplateEx.3:iter            -- _1,
+   CompletionTemplateEx.4:iter-star       -- _1,
+   NoCompletionPrefix                     -- ,
+   CompletionPrefix                       -- _1 KW["="],
    CompletionTrigger    -- R [ H [ KW["completion"] KW["trigger"] ] KW[":"] H [ _1 _2 ] ],
    HoverRule            -- R [ H [ KW["hover"]     _1 ] KW[":"] _2 ],
    OccurrenceRule       -- R [ H [ KW["occurrence"] _1 ] H [ KW[":"] _2 ] ],

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	Thu Apr 21 09:24:55 2011	(r22572)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	Thu Apr 21 09:25:09 2011	(r22573)
@@ -114,18 +114,47 @@
 			results.add(parseContentProposalTemplate(template, 1, sort));
 		}
 
+		for (IStrategoAppl template : collectTerms(descriptor.getDocument(), "CompletionTemplateEx")) {
+			parseContentProposalTemplateEx(template, results);
+		}
+
 		return results;
 	}
 
 	private static Completion parseContentProposalTemplate(IStrategoAppl template, int index, String sort) {
 		ITermFactory factory = Environment.getTermFactory();
 		IStrategoTerm prefixTerm = termAt(template, index + 0);
-		boolean noPrefix = !"String".equals(cons(prefixTerm));
-		String prefix = noPrefix ? "" : termContents(prefixTerm);
 		IStrategoList completionParts = termAt(template, index + 1);
 		IStrategoTerm anno = termAt(template, index + 2);
 		completionParts = factory.makeListCons(prefixTerm, completionParts);
-		return Completion.makeTemplate(prefix, sort, completionParts, "Blank".equals(cons(anno)));
+		return Completion.makeTemplate(null, sort, completionParts, "Blank".equals(cons(anno)), false);
+	}
+
+	private static void parseContentProposalTemplateEx(IStrategoAppl template, Set<Completion> results) {
+		IStrategoList parts = termAt(template, 2);
+		String prefix = termContents(termAt(template, 1));
+		IStrategoList annos = termAt(template, 3);
+		boolean blank = isConsInList(annos, "Blank");
+		boolean linked = isConsInList(annos, "Linked");
+
+		IStrategoList sorts = termAt(template, 0);
+		if (sorts.isEmpty()) {
+			results.add(Completion.makeTemplate(prefix, null, parts, blank, linked));
+		}
+		else {
+			for (; !sorts.isEmpty(); sorts = sorts.tail()) {
+				String sort = termContents(sorts.head());
+				results.add(Completion.makeTemplate(prefix, sort, parts, blank, linked));
+			}
+		}
+	}
+
+	private static boolean isConsInList(IStrategoList list, String cons) {
+		for (; !list.isEmpty(); list = list.tail()) {
+			IStrategoTerm term = list.head();
+			if (cons.equals(cons(term))) return true;
+		}
+		return false;
 	}
 
 	private static Set<Pattern> readTriggers(Descriptor descriptor) throws BadDescriptorException {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java	Thu Apr 21 09:24:55 2011	(r22572)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java	Thu Apr 21 09:25:09 2011	(r22573)
@@ -22,18 +22,27 @@
 
 	private static LazyColor identifierColor = new LazyColor(64, 64, 255);
 
+	private static final int BLANK_LINE_REQUIRED = 1;
+	private static final int LINK_PLACEHOLDERS = 2;
+	private static final int KEYWORD = 4;
+	private static final int TEMPLATE = 8;
+	private static final int SEMANTIC = 16;
+
 	public static Completion makeKeyword(String literal) {
-		return new Completion(literal, null, null, false, null, keywordColor);
+		return new Completion(literal, null, null, KEYWORD, null, keywordColor);
 	}
 
-	public static Completion makeTemplate(String prefix, String sort, IStrategoList completionParts, boolean blankLineRequired) {
-		return new Completion(prefix, sort, completionParts, blankLineRequired, null, keywordColor);
+	public static Completion makeTemplate(String prefix, String sort, IStrategoList completionParts, boolean blankLineRequired, boolean linkPlaceholders) {
+		int flags = TEMPLATE;
+		if (blankLineRequired) flags |= BLANK_LINE_REQUIRED;
+		if (linkPlaceholders)  flags |= LINK_PLACEHOLDERS;
+		return new Completion(prefix, sort, completionParts, flags, null, keywordColor);
 	}
 
 	public static Completion makeSemantic(IStrategoList completionParts, String description) {
 		final String prefix = ((IStrategoString) completionParts.head()).stringValue();
 		final LazyColor color = completionParts.size() == 1 ? identifierColor : null; // identifier proposal?
-		return new Completion(prefix, null, completionParts, false, description, color);
+		return new Completion(prefix, null, completionParts, SEMANTIC, description, color);
 	}
 
 	private final String prefix;
@@ -42,21 +51,63 @@
 
 	private final IStrategoList newTextParts;
 
-	private final boolean blankLineRequired;
+	private final String newText;
+
+	private final int flags;
 
 	private final String description;
 
+	private final String name;
+
 	private final LazyColor color;
 
-	protected Completion(String prefix, String sort, IStrategoList newTextParts, boolean blankLineRequired, String description, LazyColor color) {
-		this.prefix = prefix;
+	protected Completion(String prefix, String sort, IStrategoList newTextParts, int flags, String description, LazyColor color) {
+		this.prefix = prefix != null ? prefix : getPrefix(newTextParts);
 		this.sort = sort;
 		this.newTextParts = newTextParts;
-		this.blankLineRequired = blankLineRequired;
+		this.newText = buildNewText();
+		this.flags = flags;
 		this.description = description;
+		this.name = prefix != null ? prefix : buildName();
 		this.color = color;
 	}
 
+	private static String getPrefix(IStrategoList completionParts) {
+		IStrategoTerm prefixTerm = completionParts.head();
+		boolean noPrefix = !"String".equals(cons(prefixTerm));
+		return noPrefix ? "" : termContents(prefixTerm);
+	}
+
+	private String buildNewText() {
+		if (newTextParts == null)
+			return null;
+		StringBuilder result = new StringBuilder();
+		for (IStrategoTerm part : newTextParts.getAllSubterms()) {
+			if ("Placeholder".equals(cons(part)) || "PlaceholderWithSort".equals(cons(part))) {
+				IStrategoString placeholder = termAt(part, 0);
+				String contents = placeholder.stringValue();
+				contents = contents.substring(1, contents.length() - 1); // strip < >
+				result.append(contents);
+			}
+			else if ("Cursor".equals(cons(part))) {
+				// do nothing
+			}
+			else {
+				result.append(termContents(part));
+			}
+		}
+		return AutoEditStrategy.formatInsertedText(result.toString(), "");
+	}
+
+	private String buildName() {
+		if (newText == null || newText.indexOf("\n") != -1 || newText.indexOf("\t") != -1) {
+			return prefix.replace("\\n", "").replace("\\t", "  ");
+		}
+		else {
+			return newText;
+		}
+	}
+
 	public final String getPrefix() {
 		return prefix;
 	}
@@ -69,8 +120,28 @@
 		return newTextParts;
 	}
 
+	public final String getNewText() {
+		return newText;
+	}
+
 	public final boolean isBlankLineRequired() {
-		return blankLineRequired;
+		return (flags & BLANK_LINE_REQUIRED) != 0;
+	}
+
+	public final boolean shouldLinkPlaceholders() {
+		return (flags & LINK_PLACEHOLDERS) != 0;
+	}
+
+	public final boolean isKeyword() {
+		return (flags & KEYWORD) != 0;
+	}
+
+	public final boolean isTemplate() {
+		return (flags & TEMPLATE) != 0;
+	}
+
+	public final boolean isSemantic() {
+		return (flags & SEMANTIC) != 0;
 	}
 
 	public String getDescription() {
@@ -78,11 +149,7 @@
 	}
 
 	public String getName() {
-		final String newText = getNewText();
-		if (newText == null || newText.indexOf("\n") != -1 || newText.indexOf("\t") != -1) {
-			return getPrefix().replace("\\n", "").replace("\\t", "  ");
-		}
-		return newText;
+		return name;
 	}
 
 	public StyledString getStyledName() {
@@ -97,25 +164,4 @@
 		});
 	}
 
-	public final String getNewText() {
-		if (newTextParts == null)
-			return null;
-		StringBuilder result = new StringBuilder();
-		for (IStrategoTerm part : newTextParts.getAllSubterms()) {
-			if ("Placeholder".equals(cons(part)) || "PlaceholderWithSort".equals(cons(part))) {
-				IStrategoString placeholder = termAt(part, 0);
-				String contents = placeholder.stringValue();
-				contents = contents.substring(1, contents.length() - 1); // strip < >
-				result.append(contents);
-			}
-			else if ("Cursor".equals(cons(part))) {
-				// do nothing
-			}
-			else {
-				result.append(termContents(part));
-			}
-		}
-		return AutoEditStrategy.formatInsertedText(result.toString(), "");
-	}
-
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Thu Apr 21 09:24:55 2011	(r22572)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Thu Apr 21 09:25:09 2011	(r22573)
@@ -131,20 +131,25 @@
 	}
 
 	private LinkedModeModelAndExitPos buildLinkedModeModel(IDocument document, int offset, IStrategoList proposalParts) throws BadLocationException {
+		boolean shouldLinkPlaceholders = completion.shouldLinkPlaceholders();
 		LinkedModeModelAndExitPos result = new LinkedModeModelAndExitPos();
-		HashMap<String, LinkedPositionGroup> groups = new HashMap<String, LinkedPositionGroup>();
+		HashMap<Object, LinkedPositionGroup> groups = new HashMap<Object, LinkedPositionGroup>();
 		int i = 0;
+
 		for (IStrategoList cons = proposalParts; !cons.isEmpty(); cons = cons.tail()) {
 			IStrategoTerm partTerm = cons.head();
 			String part = proposalPartToString(document, partTerm);
+
 			if ("Placeholder".equals(cons(partTerm)) || "PlaceholderWithSort".equals(cons(partTerm))
 					// HACK: we should migrate to semantic completion returning Placeholder cons too when it wants placeholders
 					|| (cons != proposalParts && proposer.getCompletionLexical().matcher(part).matches())) {
 				LinkedPositionGroup group = groups.get(part);
-				if (group == null) {
+
+				if (group == null || !shouldLinkPlaceholders) {
 					group = new LinkedPositionGroup();
-					groups.put(part, group);
+					groups.put(shouldLinkPlaceholders ? part : new Object(), group);
 				}
+
 				if (partTerm.getSubtermCount() == 2 && group.isEmpty()) {
 					IStrategoString sortTerm = termAt(partTerm, 1);
 					ICompletionProposal[] choices = proposer.getTemplateProposalsForSort(sortTerm.stringValue(), viewer);
@@ -161,11 +166,14 @@
 			else if ("Cursor".equals(cons(partTerm))) {
 				result.exitPos = offset + i;
 			}
+
 			i += part.length();
 		}
+
 		if (result.exitPos == 0) {
 			result.exitPos = offset + i;
 		}
+
 		if (!groups.isEmpty()) {
 			LinkedModeModel model = new LinkedModeModel();
 			for (LinkedPositionGroup group : groups.values()) {
@@ -173,6 +181,7 @@
 			}
 			result.model = model;
 		}
+
 		return result;
 	}
 
@@ -204,8 +213,7 @@
 					? completion.getPrefix()
 					: proposalPartsToString(document, newTextParts);
 			justApplied = true;
-			assert document.get(position.getOffset() - prefix.length(), prefix.length()).equals(prefix);
-			document.replace(position.getOffset(), position.getLength(), newText.substring(prefix.length()));
+			document.replace(position.getOffset() - prefix.length(), position.getLength() + prefix.length(), newText);
 
 			if (newTextParts != null) {
 				goToLinkedMode(viewer, position.getOffset() - prefix.length(), document, newTextParts);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Apr 21 09:24:55 2011	(r22572)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Apr 21 09:25:09 2011	(r22573)
@@ -305,7 +305,7 @@
 				continue;
 			if (!backTrackResultsOnly && proposalPrefix.regionMatches(IGNORE_TEMPLATE_PREFIX_CASE, 0, prefix, 0, prefix.length())) {
 				if (!proposal.isBlankLineRequired() || isBlankBeforeOffset(document, offset - prefix.length()))
-					if (prefix.length() > 0 || identifierLexical.matcher(proposalPrefix).lookingAt() || proposalPrefix.length() == 0)
+					if (proposal.isSemantic() || prefix.length() > 0 || identifierLexical.matcher(proposalPrefix).lookingAt() || proposalPrefix.length() == 0)
 						results.add(new ContentProposal(this, proposal, prefix, offsetPosition, viewer));
 			} /*else*/ {
 				Matcher matcher = identifierLexical.matcher(proposalPrefix);

From tobivollebregt at gmail.com  Thu Apr 21 14:18:17 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 21 Apr 2011 12:18:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22574 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <20110421121818.0241ACC0CF@mx4.tudelft.nl>

Author: tvo
Date: Thu Apr 21 12:18:17 2011
New Revision: 22574
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22574&sc=1

Log:
Stratego editor: Fix completion for strategies with s-arity == 0 and t-arity > 0

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Thu Apr 21 09:25:09 2011	(r22573)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Thu Apr 21 12:18:17 2011	(r22574)
@@ -581,8 +581,16 @@
       t* := <numbered-arguments> (n, "s")
 
   signature-to-proposal:
+    (x, 0, m) -> [x, "(|", t*, ")"]
+    where
+      <gt> (m, 0)
+    with
+      t* := <numbered-arguments> (m, "t")
+
+  signature-to-proposal:
     (x, n, m) -> [x, "(", s*, "|", t*, ")"]
     where
+      <gt> (n, 0);
       <gt> (m, 0)
     with
       s* := <numbered-arguments> (n, "s");

From srabbelier at gmail.com  Thu Apr 21 15:28:59 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 21 Apr 2011 13:28:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22575 -
	spoofax/trunk/org.spoofax.jssglr/.settings
Message-ID: <20110421132859.6F6F1108C02C@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Thu Apr 21 13:28:59 2011
New Revision: 22575
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22575&sc=1

Log:
Enable obfuscation

Modified:
   spoofax/trunk/org.spoofax.jssglr/.settings/com.google.gwt.eclipse.core.prefs

Modified: spoofax/trunk/org.spoofax.jssglr/.settings/com.google.gwt.eclipse.core.prefs
==============================================================================
--- spoofax/trunk/org.spoofax.jssglr/.settings/com.google.gwt.eclipse.core.prefs	Thu Apr 21 12:18:17 2011	(r22574)
+++ spoofax/trunk/org.spoofax.jssglr/.settings/com.google.gwt.eclipse.core.prefs	Thu Apr 21 13:28:59 2011	(r22575)
@@ -1,5 +1,5 @@
-#Tue Mar 15 15:12:51 CET 2011
+#Thu Apr 21 14:34:58 CEST 2011
 eclipse.preferences.version=1
 entryPointModules=
 filesCopiedToWebInfLib=gwt-servlet.jar
-gwtCompileSettings=PGd3dC1jb21waWxlLXNldHRpbmdzPjxsb2ctbGV2ZWw+SU5GTzwvbG9nLWxldmVsPjxvdXRwdXQtc3R5bGU+UFJFVFRZPC9vdXRwdXQtc3R5bGU+PGV4dHJhLWFyZ3M+PCFbQ0RBVEFbXV0+PC9leHRyYS1hcmdzPjx2bS1hcmdzPjwhW0NEQVRBWy1YbXg1MTJtXV0+PC92bS1hcmdzPjwvZ3d0LWNvbXBpbGUtc2V0dGluZ3M+
+gwtCompileSettings=PGd3dC1jb21waWxlLXNldHRpbmdzPjxsb2ctbGV2ZWw+SU5GTzwvbG9nLWxldmVsPjxvdXRwdXQtc3R5bGU+T0JGVVNDQVRFRDwvb3V0cHV0LXN0eWxlPjxleHRyYS1hcmdzPjwhW0NEQVRBWy1YZGlzYWJsZUNsYXNzTWV0YWRhdGEgLVhkaXNhYmxlQ2FzdENoZWNraW5nIC1vcHRpbWl6ZSA5XV0+PC9leHRyYS1hcmdzPjx2bS1hcmdzPjwhW0NEQVRBWy1YbXg1MTJtXV0+PC92bS1hcmdzPjwvZ3d0LWNvbXBpbGUtc2V0dGluZ3M+

From srabbelier at gmail.com  Thu Apr 21 15:29:01 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 21 Apr 2011 13:29:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22576 -
	spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services
Message-ID: <20110421132901.19FCE7F8059@mx1.tudelft.nl>

Author: SverreRabbelier
Date: Thu Apr 21 13:29:00 2011
New Revision: 22576
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22576&sc=1

Log:
Remove debug output

Modified:
   spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java

Modified: spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java
==============================================================================
--- spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java	Thu Apr 21 13:28:59 2011	(r22575)
+++ spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java	Thu Apr 21 13:29:00 2011	(r22576)
@@ -105,10 +105,7 @@
 
 	private void initializeFromString(String tableContents) {
 		// TODO: share table across multiple Parser instances
-		long before = System.currentTimeMillis();
 		IStrategoTerm tableTerm = af.parseFromString(tableContents);
-		long after = System.currentTimeMillis();
-		logToConsole("break here: " + (after-before));
 		initialize(tableTerm);
 	}
 

From L.C.L.Kats at tudelft.nl  Thu Apr 21 18:21:24 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 21 Apr 2011 16:21:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22577 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language:
	. .settings META-INF src src/org src/org/spoofax
	src/org/spoofax/interpreter src/org/spoofax/int...
Message-ID: <20110421162124.9BEB0108C017@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Apr 21 16:21:24 2011
New Revision: 22577
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22577&sc=1

Log:
Setup of new project with primitives for the construction of DSLs

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.project
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings/org.eclipse.jdt.core.prefs
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/build.properties
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_all_files.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_all.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_omitted_files.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_persist.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_all.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_data.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_setup.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndex.java

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.classpath	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.project	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.spoofax.interpreter.library.language</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.settings/org.eclipse.jdt.core.prefs	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,8 @@
+#Thu Apr 21 17:14:07 CEST 2011
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,8 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: org.spoofax.interpreter.library.language
+Bundle-SymbolicName: org.spoofax.interpreter.library.language
+Bundle-Version: 1.0.0.qualifier
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Require-Bundle: org.spoofax.interpreter.core
+Export-Package: org.spoofax.interpreter.library.language

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/build.properties	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,4 @@
+source.. = src/
+output.. = bin/
+bin.includes = META-INF/,\
+               .

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_all_files.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_all_files.java	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,27 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LANG_index_all_files extends AbstractPrimitive {
+
+	private static String NAME = "LANG_index_persist";
+	
+	private final SemanticIndex index;
+	
+	public LANG_index_all_files(SemanticIndex index) {
+		super(NAME, 0, 1);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_all.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_all.java	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,27 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LANG_index_clear_all extends AbstractPrimitive {
+
+	private static String NAME = "LANG_index_persist";
+	
+	private final SemanticIndex index;
+	
+	public LANG_index_clear_all(SemanticIndex index) {
+		super(NAME, 0, 1);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_file.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_file.java	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,27 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LANG_index_clear_file extends AbstractPrimitive {
+
+	private static String NAME = "LANG_index_persist";
+	
+	private final SemanticIndex index;
+	
+	public LANG_index_clear_file(SemanticIndex index) {
+		super(NAME, 0, 1);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_omitted_files.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_omitted_files.java	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,27 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LANG_index_omitted_files extends AbstractPrimitive {
+
+	private static String NAME = "LANG_index_persist";
+	
+	private final SemanticIndex index;
+	
+	public LANG_index_omitted_files(SemanticIndex index) {
+		super(NAME, 0, 1);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_persist.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_persist.java	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,27 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LANG_index_persist extends AbstractPrimitive {
+
+	private static String NAME = "LANG_index_persist";
+	
+	private final SemanticIndex index;
+	
+	public LANG_index_persist(SemanticIndex index) {
+		super(NAME, 0, 1);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve.java	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,27 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LANG_index_retrieve extends AbstractPrimitive {
+
+	private static String NAME = "LANG_index_persist";
+	
+	private final SemanticIndex index;
+	
+	public LANG_index_retrieve(SemanticIndex index) {
+		super(NAME, 0, 1);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_all.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_all.java	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,27 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LANG_index_retrieve_all extends AbstractPrimitive {
+
+	private static String NAME = "LANG_index_persist";
+	
+	private final SemanticIndex index;
+	
+	public LANG_index_retrieve_all(SemanticIndex index) {
+		super(NAME, 0, 1);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_data.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_data.java	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,27 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LANG_index_retrieve_data extends AbstractPrimitive {
+
+	private static String NAME = "LANG_index_persist";
+	
+	private final SemanticIndex index;
+	
+	public LANG_index_retrieve_data(SemanticIndex index) {
+		super(NAME, 0, 1);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_file.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_file.java	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,27 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LANG_index_retrieve_file extends AbstractPrimitive {
+
+	private static String NAME = "LANG_index_persist";
+	
+	private final SemanticIndex index;
+	
+	public LANG_index_retrieve_file(SemanticIndex index) {
+		super(NAME, 0, 1);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_setup.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_setup.java	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,31 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LANG_index_setup extends AbstractPrimitive {
+
+	private static String NAME = "LANG_index_persist";
+	
+	private final SemanticIndex index;
+	
+	public LANG_index_setup(SemanticIndex index) {
+		super(NAME, 0, 1);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		// TODO Auto-generated method stub
+		// gets:
+		// - 
+		// - file extension for determining input files
+		// 
+		return false;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,20 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LanguageLibrary extends AbstractStrategoOperatorRegistry {
+	
+	public static final String REGISTRY_NAME = "LANGUAGE";
+
+	public LanguageLibrary() {
+		// TODO Auto-generated constructor stub
+	}
+
+	public String getOperatorRegistryName() {
+		return REGISTRY_NAME;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndex.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndex.java	Thu Apr 21 16:21:24 2011	(r22577)
@@ -0,0 +1,42 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SemanticIndex {
+
+	protected final IStrategoConstructor DEF;
+
+	protected final IStrategoConstructor USE;
+
+	protected final IStrategoConstructor DEF_DATA;
+
+	protected final IStrategoConstructor BAD_DEF;
+
+	protected final IStrategoConstructor BAD_USE;
+	
+	public SemanticIndex(ITermFactory factory) {
+		DEF = factory.makeConstructor("Def", 1);
+		USE = factory.makeConstructor("Use", 1);
+		DEF_DATA = factory.makeConstructor("DefData", 1);
+		BAD_DEF = factory.makeConstructor("BadDef", 1);
+		BAD_USE = factory.makeConstructor("BadUse", 1);
+	}
+	
+	public void put(IStrategoAppl entry) {
+		IStrategoConstructor type = entry.getConstructor();
+		if (type == DEF || type == BAD_DEF) {
+			
+		} else if (type == USE || type == BAD_USE) {
+			
+		} else if (type == DEF_DATA) {
+			
+		} else {
+			throw new IllegalArgumentException("Illegal index entry: " + entry);
+		}
+	}
+}

From M.A.Akhter at student.tudelft.nl  Tue Apr 26 08:01:53 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 26 Apr 2011 06:01:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22578 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration
Message-ID: <20110426060153.22AE3108C01A@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Apr 26 06:01:51 2011
New Revision: 22578
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22578&sc=1

Log:
* added *.config for specifying source directories and project references

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.def
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.generated.pp.af
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.pp.af
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.tbl   (contents, props changed)

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.def	Tue Apr 26 06:01:51 2011	(r22578)
@@ -0,0 +1,102 @@
+definition
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9]* -> ID
+    "-"? [0-9]+          -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "%%" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\%].[\%]
+    LAYOUT? -/- [\/].[\*]
+
+module SpoofaxConfiguration
+
+imports Common
+
+exports
+
+  	context-free start-symbols
+    	Start
+
+  	context-free syntax
+  
+	    "Configuration"  ConfigSection*         -> Start {cons("Configuration")}
+	    
+	    "Includes" IncludeDefinition*    				-> ConfigSection{cons("Includes")}
+	     IncludeOption RelativePath*						-> IncludeDefinition {cons("Sources")}
+	    "SpxProjects" AbsolutePath* 						-> IncludeDefinition {cons("SpxProjects")}
+	    	
+	    
+	    "CodeGeneration" CodeGenDefinition*     -> ConfigSection{cons("CodeGeneration")}
+	    "OutputDirectory"  RelativePath				    -> CodeGenDefinition {cons("OutputDirectory")}
+	    
+	    "AllDirectories"												->   IncludeOption{cons("AllDirectories")}
+	    "RootDirectory"												  ->   IncludeOption{cons("RootDirectory")}
+
+	lexical syntax 
+		[a-zA-Z\.][A-Za-z0-9\_\-\/\ \.\+]* 		-> RelativePath
+		"/" RelativePath											-> AbsolutePath
+		[a-zA-Z]":/" RelativePath							-> AbsolutePath
+		"../" RelativePath										-> AbsolutePath{prefer}
+		
+	lexical syntax     
+    
+    "SpxProjects"        			  -> Reserved
+    "Sources"          					-> Reserved
+    "SpxSources"        		    -> Reserved
+    "Configuration"     		   	-> Reserved
+    "Includes"        					-> Reserved		
+    "AllDirectories"   					-> Reserved		
+    "RootDirectory" 				  -> Reserved		
+   
+    Reserved -> RelativePath{reject}
+	    
+	    
+	lexical restrictions
+		RelativePath -/- [A-Za-z0-9\_\-\/\ \.\+]
+			
+		"SpxProjects" 
+		"Sources" 
+		"SpxSources"
+		"Configuration" 
+		"Includes"
+		"AllDirectories"
+		"RootDirectory" -/- [A-Za-z0-9\_]
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.generated.pp.af
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.generated.pp.af	Tue Apr 26 06:01:51 2011	(r22578)
@@ -0,0 +1 @@
+PP-Table([PP-Entry(Path1("Configuration"),V([],[H([],[FBOX(KW,S("\"Configuration\""))]),Arg("1")])),PP-Entry(Path("Configuration",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Includes"),V([],[H([],[FBOX(KW,S("\"Includes\""))]),Arg("1")])),PP-Entry(Path("Includes",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Sources"),[Arg("1"),Arg("2")]),PP-Entry(Path("Sources",[selector("2","iter-star")]),[Arg("1")]),PP-Entry(Path1("SpxProjects"),V([],[H([],[FBOX(KW,S("\"SpxProjects\""))]),Arg("1")])),PP-Entry(Path("SpxProjects",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("CodeGeneration"),V([],[H([],[FBOX(KW,S("\"CodeGeneration\""))]),Arg("1")])),PP-Entry(Path("CodeGeneration",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("OutputDirectory"),[FBOX(KW,S("\"OutputDirectory\"")),Arg("1")]),PP-Entry(Path1("AllDirectories"),[FBOX(KW,S("\"AllDirectories\""))]),PP-Entry(Path1("RootDirectory"),[FBOX(KW,S("\"RootDirectory\""))])])
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.pp.af
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.pp.af	Tue Apr 26 06:01:51 2011	(r22578)
@@ -0,0 +1 @@
+PP-Table([])
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.str	Tue Apr 26 06:01:51 2011	(r22578)
@@ -0,0 +1,27 @@
+module SpoofaxConfiguration
+
+signature
+  constructors
+    RootDirectory   : IncludeOption
+    AllDirectories  : IncludeOption
+    OutputDirectory : RelativePath -> CodeGenDefinition
+    SpxProjects     : List(AbsolutePath) -> IncludeDefinition
+    Sources         : IncludeOption * List(RelativePath) -> IncludeDefinition
+    CodeGeneration  : List(CodeGenDefinition) -> ConfigSection
+    Includes        : List(IncludeDefinition) -> ConfigSection
+    Configuration   : List(ConfigSection) -> Start
+                    : String -> AbsolutePath
+                    : String -> RelativePath
+
+
+signature
+  constructors
+    Some : a -> Option(a)
+    None : Option(a)
+
+
+signature
+  constructors
+    Cons : a * List(a) -> List(a)
+    Nil  : List(a)
+    Conc : List(a) * List(a) -> List(a)

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.tbl
==============================================================================
Binary file. No diff available.

From M.A.Akhter at student.tudelft.nl  Tue Apr 26 08:02:19 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 26 Apr 2011 06:02:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22579 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax
Message-ID: <20110426060219.AC8CACC045@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Apr 26 06:02:19 2011
New Revision: 22579
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22579&sc=1

Log:
* a sample config file for a spx project

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/spx.config

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/spx.config
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/spx.config	Tue Apr 26 06:02:19 2011	(r22579)
@@ -0,0 +1,14 @@
+Configuration
+	Includes
+		RootDirectory
+				test %% specify relative path of local source directories
+		AllDirectories
+				
+	
+		SpxProjects	
+			%%Specify external reference projects
+			%% e.g. c:/test
+			../Test/		
+	
+	CodeGeneration 
+		OutputDirectory		.shadowdir
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Tue Apr 26 08:03:14 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 26 Apr 2011 06:03:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22580 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	codegen codegen/esv utils
Message-ID: <20110426060314.D6E8BCC045@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Apr 26 06:03:14 2011
New Revision: 22580
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22580&sc=1

Log:
* updated existing infrastructure to support spx.config

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Tue Apr 26 06:02:19 2011	(r22579)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Tue Apr 26 06:03:14 2011	(r22580)
@@ -16,14 +16,18 @@
 	common 
 	config
 imports 
-	lib/editor-common.generated 
+	lib/editor-common.generated
+	lib/configuration/SpoofaxConfiguration 
 	include/SpoofaxLang
 imports	
 	codegen/generate-all
 	codegen/buildscripts
 imports
 	context/declare 	
-	context/str/declare  //TODO : refactor : move it to declare all when handling all types of legacy artifacts. Currently only considering STR Libs
+	context/str/declare  
+	
+		
+//TODO : refactor : move it to declare all when handling all types of legacy artifacts. Currently only considering STR Libs
 	 
 
 rules			// Starting a new compilation session   

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Tue Apr 26 06:02:19 2011	(r22579)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Tue Apr 26 06:03:14 2011	(r22580)
@@ -64,7 +64,8 @@
  			// Saving the content to a file . 	
 			autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
 			;<ensure-exists>(autogen-root-directory , package-qname)
-			;output-path := <get-main-output-path(|"packed.esv")>(autogen-root-directory , package-qname)   
+			//TODO : create a consistent namming for the file name + move it to lib 
+			;output-path := <get-main-esv-output-path(|"packed.esv")>(autogen-root-directory , package-qname)   
 			;<WriteToBinaryFile>(output-path ,esv-aterm)
 			;<refresh-workspace-file>output-path
 			;chdir-to-project-path

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Tue Apr 26 06:02:19 2011	(r22579)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Tue Apr 26 06:03:14 2011	(r22580)
@@ -1,33 +1,177 @@
 module config 
 
 imports 
+	libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+imports 
 	common
 	utils/debug
+	lib/configuration/SpoofaxConfiguration
+	lib/editor-common.generated
+	
 
 //TODO : add spxconfig file and move this content to that file 
 
 rules 
 	initialize-configuration = 
+		?current-term
+		;<parse-spoofaxconfiguration-file>"spx.config" => config-aterms
+		;init-output-directory
+		;init-source-directory    		
+		;<init-ignored-directories>[".svn"]
+		;enable-caching
+		;enable-lib-cache-invalidation
+		;enable-pretty-printing       
+		;disable-caching
+		;disable-pretty-printing    
+		;!current-term
+
+	show-configuration: (selected, position, ast, path, project-path) -> (filename, result)
+	with 
+		editor-init;
+		initialize-configuration 		
+	where 
+		if Enable-Caching then 
+			enabled-caching-string := "Caching of Semantic Errors is Enabled"  
+		else
+			enabled-caching-string := "Caching of Semantic Errors is Disabled"
+		end
+	where
+		filename := <guarantee-extension(|"config.resolved")> path;
+		result := $[ Spoofax-lang|Configuration  - [project-path]/spx.config
+	
+		Resolved Source Directories:  
+			[<pp-aterm><bagof-SPX-Source-Dir>]
+		
+		Ignored Subdirectories : 
+			[<pp-aterm><all-keys-Ignored-Spx-Souce-Dir>]
+		
+		Output Directory : [<pp-aterm><Autogenerated-Artifacts-Dir>]
+		
+		[enabled-caching-string] 
+				
+		]
+					
+	
+		
+	// enables library cache invalidation 
+	enable-lib-cache-invalidation = with( rules(invalidate-lib-cache: _ ) )
+	
+	disable-lib-cache-invalidation = with( rules(invalidate-lib-cache:- _ ) )
+	
+	
+	//enable caching 
+	enable-caching =  with (rules(Enable-Caching : _ ))
+	
+	disable-caching = with(rules(Enable-Caching :- _ ))
+	
+	
+	
+	// enable pp-aterm
+	enable-pretty-printing = with (rules(disable-pp-aterm : _ ))
+	 
+	disable-pretty-printing = with (rules(disable-pp-aterm :- _ ))	
+	
+	
+	init-ignored-directories : [] -> [] 
+	
+	init-ignored-directories: [current-dir | rest] ->[current-dir | <init-ignored-directories>rest]    
+		where
+			not(?[])
+		where
+			rules(Ignored-Spx-Souce-Dir :+ current-dir -> current-dir) 	
+	
+	
+	init-output-directory : config-aterm -> config-aterm 
+	where
+  	 get-code-output-directory; setup-autogen-root-directory  			
+	
+	init-source-directory : config-aterm -> config-aterm 
+	where 
+		get-all-includes ; 
+		setup-source-directories			
+	
+rules
+	setup-autogen-root-directory = 
+		?codegen-output-dir;
+		with(
+				rules(
+					Autogenerated-Artifacts-Dir := codegen-output-dir
+				)
+		) 
+
+	setup-source-directories: [] -> []	 
+	setup-source-directories: [configured-directory-setting|rest*] -> [configured-directory-setting|<setup-source-directories>rest*]  
+	where 
+		not(?[])
+	where 
 		rules(
-			Autogenerated-Artifacts-Dir := ".shadowdir"
-			SPX-Source-Dir :+  _ -> ("test" , TopDirectoryOnly())
-		  Ignored-Spx-Souce-Dir :+ ".svn" -> ".svn"
-		  Enable-Caching: _ 
-		);
-		<debug-compiler> $[Spoofax-lang|Initialize-Configuration];
-		<debug-compiler> $[	- Autogenerated-Artifacts-Dir = [<pp-aterm><Autogenerated-Artifacts-Dir>]];
-		<debug-compiler> $[	- SPX-Source-Dir = [<pp-aterm><bagof-SPX-Source-Dir>]];
-		<debug-compiler> $[	- Ignored-Spx-Souce-Dir = [<pp-aterm><all-keys-Ignored-Spx-Souce-Dir>]]
-		;rules(invalidate-lib-cache: _ )
-		;rules(disable-pp-aterm : _ )
-		;rules(disable-pp-aterm :- _ ) // enable pp-aterm  
-		;rules(Enable-Caching :- _ )      // turing off caching 
-		;if Enable-Caching then 
-			<debug-compiler> $[	- Caching of Semantic Errors is Enabled]
-		 end	
+			SPX-Source-Dir :+ _ -> configured-directory-setting
+		)
+				  			 	
 		
-signature 
-	constructors 
-		AllDirectories 		: 	SearchOption  
-		TopDirectoryOnly  :  	SearchOption   
-	 		
\ No newline at end of file
+rules  
+	
+	parse-spoofaxconfiguration-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(lib/configuration/SpoofaxConfiguration.tbl)>
+    )
+	
+	//Returns output directory for the code generation
+	get-code-output-directory = collect-all(?OutputDirectory(<id>), union) ; ?[<id>]
+	
+	get-all-includes  = 
+ 	<conc>(<get-all-sources(|<project-path>)> ,   <get-sources-from-external-projects>)
+ 	;make-set
+ 
+	get-all-sources(|project-path) =
+ 		collect-all(?Sources(_, _));
+ 		get-local-sources;
+ 		map(\(s,o)-> ($[[project-path]/[s]],o)\)
+ 	<+ 
+  	debug(!"Failed to get list of source directory.") ; fail
+ 
+	get-local-sources: [] -> []
+ 
+	get-local-sources: 
+ 	[Sources(include-option,sources*)|rest] -> result
+ 	where
+ 		<map(\s -> (s,include-option)\)>sources* => result';
+ 		<conc>(<get-local-sources>rest, result') => result	 	
+ 
+	get-sources-from-external-projects = 
+  	get-all-project-refernces; 
+  	get-external-sources
+ 
+	get-all-project-refernces = 
+  	collect-all(?SpxProjects(<id>), conc) ; 
+  	flatten-list
+  <+ 
+  	debug(!"Failed to retrieve list of projects.") ; fail 
+  
+	get-external-sources: spx-projects* -> result
+	where 
+		not (?[])
+	  ;!spx-projects* => [current-project-path|rest*]
+	 where
+	 	result := <conc>( <external-sources>current-project-path , <get-external-sources>rest* )
+	
+	get-external-sources: []  -> []
+	  
+	external-sources =
+		where(explode-string; <not(eq)>(<Hd> , 46)) ; // not started wtih  ..
+	  ?current-project-path;
+	  <parse-file>$[[current-project-path]/spx.config];
+	  get-all-sources(|current-project-path) 
+	  	
+	external-sources =
+		where(explode-string; <eq>(<Hd> , 46)) ;
+	  ?current-project-path; 
+	  current-dir := <getcwd>;
+	  <chdir> current-project-path;
+	  <parse-spoofaxconfiguration-file;get-all-sources(|<getcwd>)>"spx.config" => result;
+	  <chdir>current-dir; // restoring current directory
+	  !result 
+	   	 		 		
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Tue Apr 26 06:02:19 2011	(r22579)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Tue Apr 26 06:03:14 2011	(r22580)
@@ -46,7 +46,16 @@
 	get-signature-file-name = 
 		?sdf-module-name;
 		<concat-strings>[sdf-module-name,"-signature"]
-			
+	
+	//TODO : refactor the repetation of same logic
+	get-main-esv-output-path(|extension)=
+		?(dir-path, QName(qname-parts*))
+		 ;artifact-main-file-name    := <qname-to-string>QName(qname-parts*)
+		 ;relative-path := <qname-to-path> QName(qname-parts*)
+		 ;<concat-strings> [dir-path, "/" , relative-path, "/" ,artifact-main-file-name, ".main" , ".", extension]
+		
+		
+	 		
 	get-main-output-path(|extension)=
 			?(dir-path, QName(qname-parts*))
 		 ;artifact-main-file-name    := <get-main-file-name>QName(qname-parts*)

From M.A.Akhter at student.tudelft.nl  Tue Apr 26 08:24:24 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 26 Apr 2011 06:24:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22581 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor
Message-ID: <20110426062424.7A6BC2B8026@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Apr 26 06:24:24 2011
New Revision: 22581
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22581&sc=1

Log:
updated builders. Added a builder to view configuration for the current spx project

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Tue Apr 26 06:03:14 2011	(r22580)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Tue Apr 26 06:24:24 2011	(r22581)
@@ -43,6 +43,10 @@
   builder : "Compile" =  
     compile-spx(openeditor) (realtime) (meta)
   
+  
+  builder : "Show Configuration" =  
+    show-configuration(openeditor) (realtime) (meta)
+  
   /*  	                                                                                                                             
   builder : "test-resolve" =  
     test-resolving-symbol (openeditor) (realtime) (meta)

From R.B.Vermaas at tudelft.nl  Tue Apr 26 08:58:47 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 26 Apr 2011 06:58:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22582 -
	strategoxt/branches/strategoxt-java
Message-ID: <20110426065847.951E37F801C@mx1.tudelft.nl>

Author: rob
Date: Tue Apr 26 06:58:47 2011
New Revision: 22582
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22582&sc=1

Log:
re-enable parse-hack untill jsglr bug is fixed

Modified:
   strategoxt/branches/strategoxt-java/build.xml

Modified: strategoxt/branches/strategoxt-java/build.xml
==============================================================================
--- strategoxt/branches/strategoxt-java/build.xml	Tue Apr 26 06:24:24 2011	(r22581)
+++ strategoxt/branches/strategoxt-java/build.xml	Tue Apr 26 06:58:47 2011	(r22582)
@@ -17,7 +17,7 @@
 
     <target
         name="all"
-        depends="ensure-dirs,syntax,generate-java,compile-java,jar"
+        depends="ensure-dirs,syntax,parse-hack,generate-java,compile-java,jar"
     />
 
     <target name="test" depends="tests">

From z.hemel at tudelft.nl  Tue Apr 26 10:41:27 2011
From: z.hemel at tudelft.nl (Zef Hemel)
Date: Tue, 26 Apr 2011 08:41:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22583 - pil/web
Message-ID: <20110426084127.F2D22CC047@mx4.tudelft.nl>

Author: zef
Date: Tue Apr 26 08:41:27 2011
New Revision: 22583
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22583&sc=1

Log:
web app

Added:
   pil/web/

From z.hemel at tudelft.nl  Tue Apr 26 10:42:36 2011
From: z.hemel at tudelft.nl (Zef Hemel)
Date: Tue, 26 Apr 2011 08:42:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22584 - in pil/web: .
	images stylesheets
Message-ID: <20110426084236.667B3CC07B@mx4.tudelft.nl>

Author: zef
Date: Tue Apr 26 08:42:36 2011
New Revision: 22584
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22584&sc=1

Log:
wep

Added:
   pil/web/ac.app
   pil/web/data.app
   pil/web/images/
   pil/web/images/PIL-logo.png   (contents, props changed)
   pil/web/images/logosmall.png   (contents, props changed)
   pil/web/logic.app
   pil/web/pilweb.app
   pil/web/stylesheets/
   pil/web/stylesheets/common_.css
   pil/web/templates.app

Added: pil/web/ac.app
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ pil/web/ac.app	Tue Apr 26 08:42:36 2011	(r22584)
@@ -0,0 +1,79 @@
+module ac
+
+access control rules
+
+  principal is User with credentials email, password
+
+  rule template *(*) { 
+    true 
+  }
+
+  rule page *(*) { 
+    true 
+  }
+
+  rule page edit*(*) {
+    securityContext.loggedIn
+  }
+
+  rule page new*(*) {
+    securityContext.loggedIn
+  }
+
+section ui
+
+  define page signin() {
+    title { "Sign in" }
+    main {
+      var email : Email
+      var password : Secret
+      form {
+        table {
+          row { label("E-mail:") { input(email) } }
+          row { label("Password:") { input(password) } }
+        }
+
+        action("Login",signin())
+
+        action signin() {
+          if(authenticate(email, password)) {
+            message("Welcome " + email);
+            return root();
+          } 
+          message("Wrong e-mail, password combination.");
+        }
+      }
+    }
+  }
+  
+
+  define page register() {
+    title { "Register" }
+    main {
+      var u : User := User{};
+
+      header { "Register" }
+      form { 
+        table {
+          row {
+            label("E-mail:") { 
+              input(u.email) {
+              }
+            }
+          }
+          row { label("Password:") { input(u.password) } }
+          row { label("Your name:") { input(u.name) } }
+        }
+        captcha()
+        action("Register", register())
+
+        action register() {
+          validate(findUser(u.email) == null, "User with this e-mail already registered. Register using a different email.");
+          u.password := u.password.digest();
+          u.save();
+          message("You have successfully registered. Sign in now.");
+          return signin();
+        }
+      }
+    }
+  }

Added: pil/web/data.app
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ pil/web/data.app	Tue Apr 26 08:42:36 2011	(r22584)
@@ -0,0 +1,28 @@
+module data
+
+  entity User {
+    email    :: Email (id)
+    password :: Secret
+    name     :: String
+    isAdmin  :: Bool
+  }
+
+  entity Page {
+    slug        :: String (id)
+    title       :: String (name)
+    content     :: WikiText
+    lastChanged :: DateTime
+    authors     -> Set<User>
+    inMenu      :: Bool
+    order       :: Int
+    currentRev  -> PageRevision
+  }
+
+  entity PageRevision {
+    page     -> Page
+    author   -> User
+    title    :: String
+    content  :: WikiText
+    previous -> PageRevision
+    next     -> PageRevision
+  }

Added: pil/web/images/PIL-logo.png
==============================================================================
Binary file. No diff available.

Added: pil/web/images/logosmall.png
==============================================================================
Binary file. No diff available.

Added: pil/web/logic.app
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ pil/web/logic.app	Tue Apr 26 08:42:36 2011	(r22584)
@@ -0,0 +1,23 @@
+module logic
+
+section authentication logic
+
+  function authenticate(email : Email, password : Secret) : Bool {
+    var user : User := findUser(email);
+    if(user != null) {
+      if(user.password.check(password)) {
+        securityContext.principal := user;
+        securityContext.loggedIn := true;
+        return true;
+      }
+    }
+    securityContext.loggedIn := false;
+    return false;
+  }
+
+  function signoff() {
+    securityContext.loggedIn := false;
+    securityContext.principal := null;
+  }
+
+

Added: pil/web/pilweb.app
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ pil/web/pilweb.app	Tue Apr 26 08:42:36 2011	(r22584)
@@ -0,0 +1,110 @@
+application pilweb
+
+imports data
+imports templates
+imports ac
+imports logic
+
+section pages
+
+  define page root() {
+    title { "PIL - Platform Independent Language" }
+    var mainPage : Page := findPage("welcome");
+    main {
+      output(mainPage.content)
+    }
+  }
+
+  define page page(p : Page) {
+    title { output(p.title) }
+    main {
+      header { output(p.title) }
+      output(p.content)
+      <hr/>
+      navigate(editPage(p)) { "Edit" }
+    }
+  }
+
+
+  define page editPage(p : Page) {
+    title { "Edit: " output(p.title) }
+
+    main {
+      form {
+        header { "Edit: " input(p.title) }
+        if(securityContext.principal.isAdmin) {
+          table {
+            row { label("In menu: ") { input(p.inMenu) } }
+            row { label("Order: ") { input(p.order) } }
+          }
+        }
+        par {
+          input(p.content)
+          editHelp()
+        }
+
+        action("Save changes", save())
+
+        action save() {
+          p.lastChanged := now();
+          p.authors.add(securityContext.principal);
+          var rev : PageRevision := PageRevision { page := p, previous := p.currentRev, next := null };
+          rev.title := p.title;
+          rev.content := p.content;
+          rev.author := securityContext.principal;
+          p.currentRev.next := rev;
+          p.currentRev := rev;
+          rev.save();
+          p.save();
+          message("Your changes have been saved.");
+          return page(p);
+        }
+      }
+    }
+  }
+
+  define page newPage() {
+    title { "Create new page" }
+
+    main { 
+      form {
+        var p : Page := Page{ order := 9999, inMenu := false };
+        header { "New page: " input(p.title) }
+        table {
+          row { label("Slug (used in URL): ") { input(p.slug) } }
+          if(securityContext.principal.isAdmin) {
+            row { label("In menu: ") { input(p.inMenu) } }
+            row { label("Order: ") { input(p.order) } }
+          }
+        }
+
+        par {
+          input(p.content)
+          editHelp()
+        }
+
+        action("Create", save())
+
+        action save() {
+          p.lastChanged := now();
+          p.authors.add(securityContext.principal);
+          var rev : PageRevision := PageRevision { page := p, previous := null, next := null };
+          rev.title := p.title;
+          rev.content := p.content;
+          rev.author := securityContext.principal;
+          p.currentRev := rev;
+          rev.save();
+          p.save();
+          message("Your page has been created.");
+          return page(p);
+        }
+      }
+    }
+  }
+
+  define editHelp() {
+    par {
+      navigate(url("http://daringfireball.net/projects/markdown/basics")) { "Markdown markup allowed." }
+      " additionally, the [[page(PageName)|Link name]] syntax can be used to link to other pages."
+    }
+  }

Added: pil/web/stylesheets/common_.css
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ pil/web/stylesheets/common_.css	Tue Apr 26 08:42:36 2011	(r22584)
@@ -0,0 +1,116 @@
+body {
+    margin: 0;
+    padding: 0;
+    font-family: Arial, Helvetica, sans-serif;
+}
+img {
+  border-width   : 0px;
+  background-color:white;
+}
+#pagewrapper {
+    width: 70%;
+    margin: 10px auto;
+    padding: 0;
+    border: 1px solid #999;
+    font-family: Arial, Helvetica, sans-serif;
+}
+#content {
+    padding: 20px 10px;
+}
+#header {
+    background-color: white;
+    margin: 0;
+    padding: 0;
+}
+#header p {
+    padding: 20px 10px;
+    font-size: 24px;
+    margin: 0;
+    color: white;
+    font-weight: bold;
+  font-family: Arial, Helvetica, sans-serif;
+}
+#footer {
+    background-color: #999;
+    padding-top: 6px;
+    padding-bottom: 6px;
+    clear:both;
+    border-top: 2px solid #333;
+    text-align: center;
+}
+#footer p, #footer a {
+    text-align: center;
+    font-size: 12px;
+    color: white;
+    font-weight:bold;
+    margin: 0;
+    padding: 2px;
+}
+
+/* Navigation Bar */
+
+#navbar ul {
+    padding: 0;
+    margin: 0;
+    background-color: #999;
+    color: White;
+    float: left;
+    width: 100%;
+    list-style: none;
+    font-weight: bold;
+    font-size: 13px;
+    border-bottom: 2px solid #333;
+}
+#navbar ul li { 
+    display: inline;
+    color: White;
+    float: left;
+    border-right: 1px solid #333;
+    font-family: arial, helvetica, sans-serif;
+}
+#navbar ul li a {
+    padding: 0.2em 0.7em;
+    background-color: #999; 
+    color: White;
+    text-decoration: none;
+    float:left;
+}
+#navbar ul li a:hover {
+    background-color: #333;
+    color: #fff;
+}
+
+form { 
+  display : inline;
+}
+
+#usertable td { 
+  padding : 2px 5px 2px 0px;
+}
+
+#usertable tr { 
+  border-bottom : 1px solid #333;
+}
+
+#tasktable td { 
+  padding : 2px 5px 2px 0px;
+}
+
+#tasktable tr { 
+  border-bottom : 1px solid #333;
+}
+
+textarea { 
+  height : 15em;
+  width : 600px;
+}
+
+select {
+  width : 20em;
+}
+input[type="text"]{
+  width : 20em;
+}
+input[type="file"]{
+  width : 20em;
+}

Added: pil/web/templates.app
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ pil/web/templates.app	Tue Apr 26 08:42:36 2011	(r22584)
@@ -0,0 +1,71 @@
+module templates
+
+define main() {
+  <div id="pagewrapper">
+     <div id="header">
+        mainheader()
+     </div>
+     <div id="navbar">
+       applicationmenu()
+     </div>
+     <div id="content">
+       messages()
+       elements()
+     </div>
+     <div id="footer">
+       par {
+         "powered by " <a href="http://webdsl.org">"WebDSL"</a>
+       }
+     </div>
+  </div>
+<script>
+var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
+document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
+</script>
+<script>
+try {
+var pageTracker = _gat._getTracker("UA-58112-6");
+pageTracker._trackPageview();
+} catch(err) {}
+</script>
+}
+
+define mainheader() {
+  navigate(root()){
+    image("/images/PIL-logo.png")
+  }
+}
+
+define applicationmenu() {
+  <ul>
+    <li>navigate(root()) { "Home" }</li>
+    for(p : Page where p.inMenu order by p.order asc) {
+      <li>output(p)</li>
+    }
+    if(securityContext.loggedIn) {
+      form{ 
+        <li>action("Sign off", signoffAction())</li>
+        action signoffAction() {
+          message("You're now signed off.");
+          signoff();
+        }
+      }
+    } else {
+      <li>navigate(signin()){"Login"}</li>
+      <li>navigate(register()){"Register"}</li>
+    }
+  </ul>
+}
+ 
+define ignore-access-control errorTemplateInput(messages : List<String>){
+  validatedInput
+  for(ve: String in messages){
+    row[style := "color: #FF0000;border: 1px solid #FF0000;"]{
+      column{}
+      column{ 
+        output(ve)
+      }
+    }
+  }
+}
+ 

From m.dejonge at tudelft.nl  Tue Apr 26 11:35:05 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 26 Apr 2011 09:35:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22585 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring
Message-ID: <20110426093505.38869CC02E@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Apr 26 09:35:04 2011
New Revision: 22585
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22585&sc=1

Log:
generic renaming: strategies to collect required information, transformation + semantic checks

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/files.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/rename-generic.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/user-interaction.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/files.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/files.str	Tue Apr 26 08:42:36 2011	(r22584)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/files.str	Tue Apr 26 09:35:04 2011	(r22585)
@@ -11,16 +11,20 @@
   get-source-asts(parse, is-source-file, is-source-dir) =
   	save-all-resources;
     get-source-files(is-source-file, is-source-dir);
-    (asts, parse-failures) := <partition(parse)>;
-    <report-parse-failures> parse-failures;
-    !asts
-    
+    parse-source-files(parse)
+  
+  parse-source-files(parse) :
+  	filenames -> asts
+  	where
+      (asts, parse-failures) := <partition(parse)> filenames;
+      <report-parse-failures> parse-failures
+  	
   get-source-files(|extensions, source-dirs) =
     get-source-files(check-extension(|extensions), elem-of(|source-dirs))
   
   get-source-files(is-source-file, is-source-dir) =
     ?dir-path; 
-    if <is-source-dir; isdir> dir-path then
+    if <where(is-source-dir); isdir> dir-path then
       readdir; 
       map(!$[[dir-path]/[<id>]]);  
       map(
@@ -32,7 +36,7 @@
       ![]
     end
 	
-  save-all-resources = prim("SSL_EXT_saveresources", "")
+  save-all-resources = where(prim("SSL_EXT_saveresources", ""))
   
   check-extension(|ext) =
   	has-extension(|ext)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/rename-generic.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/rename-generic.str	Tue Apr 26 08:42:36 2011	(r22584)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/rename-generic.str	Tue Apr 26 09:35:04 2011	(r22585)
@@ -2,105 +2,96 @@
 
 imports
   lib-refactoring/user-interaction
-  
-	
-rules //Strategies that can be implemented in the language specific part
-
-  // _ -> String
-  dialog-newname-custom = fail
+  lib-refactoring/fetch 
 
-  //(ref-name, new-name, asts) -> (errors, warnings)
-  check-preconditions-rename = fail
+rules //helper functions for refactoring input terms
 
-  		
-rules //workflow
+	/**
+	 * Annotates AST with reference names (analyse),
+	 * and fetches the annotated selection in the result AST 
+	 * @type (String, T) -> (String{T}, T)
+	 * @param T -> T (or: List(T) -> T)
+	 */
+	get-analysed-terms(analyse):
+		(selected, ast) -> (ref-name, ast')
+		where
+			ast' := <analyse <+ (![<id>]; analyse; Hd)> ast;
+			ref-name := <fetch-annotated-term(|<fetch-down(is-string)> selected)> ast'
   
+  /*
+   * Opens an input dialog for specifying a new name
+   * Checks if input name is a an identifier (matches ID pattern, excluding keywords)
+   * @type _ -> String 
+   * @param String name of the language (@See editor/myLanguage.main.esv)
+   */ 
+  dialog-newname(|language) =
+    <newname-dialog> (language, "rename", "new name: ", "")
+  
+  //TODO: dialog-newname(s|language) applies s while user types new name 
+
   /**
-   * Handles rename refactoring workflow.
-   * Input: string annotated with unique reference name, asts annotated with unique names, language name
-   * REMARK: save all resources before collecting ASTs and applying the refactoring 
-   * - Checks if selected term is indeed a reference or declaration name
-   * - Checks if input name is a an identifier (matches ID pattern while excluding keywords)
-   * - Checks if the semantic errors before and after the transformation are the same
-   * - Checks if the name bindings are preserved
-   * @type (String, List(T), String) -> List((T, T'))
-   * @param String -> ERROR checks whether the reference can be renamed (for example: exclude lib declarations)
-   * @param List(T) -> List(T) strategy that annotates all names with a unique reference name. 
-   * REMARK: old analysis result stored in name tables should be cleared
-   * @param List(T) -> List(ERROR), with ERROR either a string or a tuple (term, String)   
+   * Reports precondition issues
+   * @param _ -> (List(ERROR), List(WARNING)) with ERROR, WARNING String or (T, String)
    */
-  apply-rename-refactoring(constraint-error-refname, re-analyse, collect-sem-errors) =
-  	?(ref-name, analyzed-asts, language-name);
-    where(<report-invalid-refname(constraint-error-refname)> ref-name);
-    apply-rename-refactoring(re-analyse, collect-sem-errors)
+  report-precondition-issues(check-preconditions) =
+    if (errors, warnings) := <check-preconditions> then
+      <report-errors-warnings> ("The following problems are found: ", errors, warnings)
+    end
+    
+  
+  		
+rules //refactoring transformation and semantic checks
 
   /**
    * Handles rename refactoring workflow.
-   * Input: string annotated with unique reference name, asts annotated with unique names, language name
+   * Input: asts annotated with unique names
    * REMARK: save all resources before collecting ASTs and applying the refactoring 
    * - Checks if selected term is indeed a reference or declaration name
-   * - Checks if input name is a an identifier (matches ID pattern while excluding keywords)
    * - Checks if the semantic errors before and after the transformation are the same
    * - Checks if the name bindings are preserved
-   * @type (String, List(T), String) -> List((T, T'))
+   * @type (List(T)) -> List((T, T'))
    * @param List(T) -> List(T) strategy that annotates all names with a unique reference name. 
-   * REMARK: old analysis result stored in name tables should be cleared
    * @param List(T) -> List(ERROR), with ERROR either a string or a tuple (term, String)   
+   * @param String selected identifier annotated with unique reference name 
+   * @param String new name   
    */
-  apply-rename-refactoring(re-analyse, collect-sem-errors):
-    (ref-name, analyzed-asts, language-name) -> changed-asts
+  apply-rename-refactoring(re-analyse, collect-sem-errors|ref-name, new-name):
+    analyzed-asts -> changed-asts
     where
       <report-invalid-selection> ref-name;
-      new-name     := <get-user-input(|language-name)>;
-      <report-precondition-issues> (ref-name, new-name, analyzed-asts);
       renamed-asts := <apply-renaming(|ref-name, new-name)> analyzed-asts;
       <report-semantic-issues(re-analyse, collect-sem-errors|ref-name, new-name)> (analyzed-asts, renamed-asts);
       changed-asts := <get-changed-asts> (analyzed-asts, renamed-asts)
-  
-  get-changed-asts:
-    (asts-before, asts-after) -> changed-asts
-    where
-      changed-asts := <zip; filter(not(equal))> (
-      	<topdown(try(strip-annos))> asts-before, 
-      	<topdown(try(strip-annos))> asts-after
-      )
-
-  get-user-input(|language-name) =
-  	dialog-newname-custom <+
-    dialog-newname(|language-name)	
-    
+            
   report-invalid-selection = 
     if not(is-string; has-annos) then 
       message-invalid-selection
     end
     
-  report-invalid-refname(constraint-error-refname) =
-  	if err := <constraint-error-refname> then
-  	  <is-list <+ ![<id>]> err;
-      report-errors
-    end
-
-  report-precondition-issues =
-    if (errors, warnings) := <check-preconditions-rename> then
-      <report-errors-warnings> ("The following problems are found: ", errors, warnings)
-    end
-
   report-semantic-issues(analyse, collect-sem-errors|ref-name, new-name) =
     check-semantics(analyse, collect-sem-errors|ref-name, new-name);
     (
     	report-semantic-problems <+
-    	(try(dr-scope-all-end);dr-scope-all-start; fail) //do not store analysis results in name tables after rollback
+    	(try(dr-scope-all-end); dr-scope-all-start; fail) //do not store analysis results in name tables after rollback
+    	//TODO: better solution
     )
     
   check-semantics(analyse, collect-sem-errors|ref-name, new-name) :
     (analyzed-asts, asts-after) -> (var-capture-warnings, <make-set> introduced-errors, <make-set> solved-errors)
     where    	
       errors-before        := <get-sem-errors(collect-sem-errors)> analyzed-asts; //debug(!"errors before: ");
-      analyzed-asts-after  := <analyse> asts-after;
+      analyzed-asts-after  := <analyse> asts-after; //debug(!"asts-after: ");
       errors-after         := <get-sem-errors(collect-sem-errors)> analyzed-asts-after; //debug(!"errors after: ");
       (introduced-errors, solved-errors) := <check-consistency-changes> (errors-before, errors-after); 
       var-capture-warnings := <check-var-captures(|ref-name, new-name)> (analyzed-asts, analyzed-asts-after)
     	   	
+  get-changed-asts:
+    (asts-before, asts-after) -> changed-asts
+    where
+      changed-asts := <zip; filter(not(equal))> (
+      	<topdown(try(strip-annos))> asts-before, 
+      	<topdown(try(strip-annos))> asts-after
+      )
     	
 rules // transformation: renaming
     

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/user-interaction.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/user-interaction.str	Tue Apr 26 08:42:36 2011	(r22584)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/user-interaction.str	Tue Apr 26 09:35:04 2011	(r22585)
@@ -30,9 +30,6 @@
 
 rules //dialogs used in refactoring workflow
 
-  dialog-newname(|language) =
-    <newname-dialog> (language, "rename", "new name: ", "")
-
   message-unexpected-failure =
     <message-errors> "Refactoring fails unexpectedly, no changes are made"
       
@@ -107,7 +104,7 @@
   
   make-error-string :
     (term, message) -> error-string
-    where debug(!"1: ");
+    where 
       if (txt, line, column):= <origin-source-info> then  //TODO: filename
         error-string := $[ ([line],[column]): [message]] 
       else 

From m.dejonge at tudelft.nl  Tue Apr 26 11:37:50 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 26 Apr 2011 09:37:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22586 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <20110426093750.74DFC2B8007@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Apr 26 09:37:50 2011
New Revision: 22586
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22586&sc=1

Log:
precondition:
- exclude external defined strategies from renaming
more efficient implementation:
- using cache
- filtering affected ASTs
- analyse / reanalyse

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str	Tue Apr 26 09:35:04 2011	(r22585)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str	Tue Apr 26 09:37:50 2011	(r22586)
@@ -8,9 +8,8 @@
   lib/editor-common.generated
   lib-refactoring/rename-generic
   lib-refactoring/files
-  lib-refactoring/fetch 
   lib-refactoring/language-description
-
+  testing/cached_old //TODO: mag weg
 
 rules //rename refactoring, builder
   
@@ -23,78 +22,135 @@
   rename-refactoring:
     (selected, position, ast, path, project-path) -> ast-change-tuples
     where
-      asts := <analyse-names> [ast|<collect-other-asts(|path)>];
-      ref-name := <Hd; fetch-annotated-term(|<fetch-down(is-string)> selected)> asts;
+      init-analysis;
+      save-all-resources;
+      (ref-name, ast') := <get-analysed-terms(analyse-names)> (selected, ast);
+      newname := <dialog-newname(|<get-language-name> path)>;
+      asts := <collect-affected-asts>(ref-name, newname, ast', $[[<project-path>]/[path]]);
+      report-precondition-issues(!asts; precondition-error(|ref-name));
       ast-change-tuples := <apply-rename-refactoring(
-      	constraint-error-external-def,
       	re-analyse-names, 
-      	collect-sem-errors
-      )> (ref-name, asts, <get-language-name> path)
-    
-    
-rules //check for semantic errors
- 		
-  collect-sem-errors = 
-    where (errors :=<collect-all(global-constraint-error + constraint-error, conc)>);
-    where (warnings :=<collect-all(constraint-warning, conc)>);
-    <conc>(errors, warnings);
-    flatten-list
-
-  constraint-error-external-def :
-  	x{c} -> (x, $[External definitions can not be renamed])
-  	where
-  	  <Declaration> c => ExtSDef(_, _, _) <+
-  	  <Declaration> c => ExtOpDecl(_, _)
- 	
-rules //collecting ASTs
-
-  /**
-   * Collects all ASTs from trans directory (except the excluded file)
-   */
-  collect-other-asts(|excluded-file) =
-    !$[[<project-path>]/trans];
-    get-source-asts(
-      parse-file, 
-      has-extension(|"str"); not(equal(|$[[<project-path>]/[excluded-file]])), 
-      not(fail)
-    )
+      	collect-sem-errors |
+      	ref-name,
+      	newname
+      )> asts
+ 
+rules //precondition checks
+
+//TODO: better solution?	
+//FIXME: no declaration outside asts (lib or generated), since these files are not changed
+//NOW: a declaration in asts exists
+precondition-error(|ref-name):
+	asts -> ([$[Declaration can not be found in [<project-path>]/trans]],[])
+	where
+	  <?_{ref}> ref-name;
+	  <is-global-ref> ref;
+	  dec_sig := <Declaration; signature-of> ref;
+	  <not(oncetd(where(declare-globals); topdown(strip-annos); signature-of; equal(|dec_sig)))> asts
 
 rules //name analysis
+    
+  analyse-names:
+  	asts -> <analyse-names-asts> desugared-asts
+    where
+       desugared-asts := <map(basic-desugar-top)> asts;
+       <declare-globals> Import("libstratego-lib"); //Import external strategy definitions
+       <map( //Import strategy definitions from files that are not in the list
+           alltd(
+           	 is-not-imported-from-list(|asts);
+             declare-globals
+           )
+       )> desugared-asts
+  
+  is-not-imported-from-list(|asts) =
+    where(?Import(mod) <+ ?ImportWildcard(mod)); 
+    where(not(<fetch(?Module(mod, _))> asts))
   
   re-analyse-names =
-    editor-init;
     topdown(strip-annos);
     topdown(try(resugar-Let)); //TODO: better solution?
-    analyse-names
+    analyse-names-asts
   
+  analyse-names-asts:
+    asts -> asts'
+    where
+       asts' := < //re-analyze affected asts
+         map(alltd(where(not(?Import(_) <+ ?ImportWildcard(_))); declare-globals)); //external imports already done 
+         map(declare-bodies-top)
+       > asts
+
   resugar-Let:
   	Rec(x, y) -> Let(x,y)
   	where 
   	  origin-term; 
   	  ?Let(_, _)
-  	
-  
-  analyse-names:
-    asts -> asts'
-    where
+
+  init-analysis =
        rules(
           CurrentFile := "" //TODO: primitive for file path?
           ProjectDir  := <project-path>
        );
-       try(get-source-base-dir);
-       <declare-globals> Import("libstratego-lib");
-       asts' := <
-         map(basic-desugar-top);
-         map(alltd(where(not(?Import(_) <+ ?ImportWildcard(_))); declare-globals)); //use asts in list instead of file system
-         map(
-           alltd(
-           	 is-not-imported(|asts);
-             declare-globals //TODO: Imports should be handled as external definitions (otherwise extname -> extname' leads to unnoticed behaviour change)
-           );
-           declare-bodies-top
-         )
-       > asts
+       try(get-source-base-dir)
 
-  is-not-imported(|asts) =
-    where(?Import(mod) <+ ?ImportWildcard(mod)); 
-    where(not(<fetch(?Module(mod, _))> asts)) //Do not overwrite with old information (from files)
+rules //semantic constraint check
+
+  collect-sem-errors = 
+    where (errors :=<collect-all(global-constraint-error + constraint-error, conc)>);
+    where (warnings :=<collect-all(constraint-warning, conc)>);
+    <conc>(errors, warnings);
+    flatten-list
+	
+rules //collect asts that are possibly affected by renaming, efficient implementation using cache
+
+//1. do not collect files when selected var is local ##
+//2. for global vars: 
+//2a. keep editor ast to be more robust in case of syntax errors ##
+//2b. collect only the files that are relevant ## 
+//2c. use cache to reject files before analyzing ##
+//2d. parallel with user input dialog
+//2e. (?) collect files in loop instead of by map(parse)?
+//3. re-analyzes: keep lookup tables, no normalization, no external import ##
+ 
+collect-affected-asts:
+	(oldname{ref}, newname, ast, path-to-ast) -> [ast|<analyse-names> affected-asts]
+	where
+  	  if <is-global-ref> ref then //files are only collected if the selected var is global 
+  	  	//save-all-resources;
+	    fnames := <get-source-files(
+		  has-extension(|"str"); not(equal(|path-to-ast)), //exclude current ast which is obtained from the editor (allowing parse errors) 
+		  not(fail)
+	    )> $[[<project-path>]/trans]; 
+	    (fnames-cache, fnames-no-cache) := <partition-by-cache(|oldname)> fnames;
+	    asts-no-cache := <parse-source-files(parse-file)> fnames-no-cache; //TODO: parallel with rename dialog?!
+	    asts-filtered-no-cache := <filter(
+	    	oncetd(equal(|newname) <+ equal(|<strip-annos> oldname))
+	    )> asts-no-cache;
+	    asts-filtered-cache := <filter(ReadFromFile; oncetd(equal(|newname)))> fnames-cache; 
+	    affected-asts := <conc>(asts-filtered-no-cache, asts-filtered-cache)
+      else
+      	affected-asts := []
+      end
+
+is-global-ref =
+	where(
+		?ref;
+		<Declaration; signature-of; DeclareCookie; equal(|ref)> ref
+	)
+
+partition-by-cache(|refname):
+	fnames -> 
+		<partition(
+			get-cache-path;
+			where(
+				ReadFromFile; 
+				not(oncetd(equal(|<strip-annos> refname))) //exclude files that will change
+			)
+		)> fnames
+		
+	
+get-cache-path: //asts without endangered names can be ignored
+	path -> cache-path
+	where(
+  	  cache-path := <import-cache-path; string-replace(|".str.sig", ".rtree")> path; 
+  	  <is-newer> (cache-path, path)
+  	)

From m.dejonge at tudelft.nl  Tue Apr 26 11:42:18 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 26 Apr 2011 09:42:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22587 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <20110426094218.7E7CF7F8035@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Apr 26 09:42:18 2011
New Revision: 22587
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22587&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java	Tue Apr 26 09:37:50 2011	(r22586)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java	Tue Apr 26 09:42:18 2011	(r22587)
@@ -96,13 +96,13 @@
 		initialize();
 		this.node= tryGetOrigin(node);
 		analysize();
-		System.out.println("sep-ws: "+"$"+seperatingWhitespace+"$");
-		if(getCommentsBefore()!=null)
-			System.out.println(getCommentsBefore().getText(getLexStream()));
-		if(getCommentsAfter()!=null)
-			System.out.println(getCommentsAfter().getText(getLexStream()));
-		System.out.println("indent: "+"$"+indentNode+"$");
-		System.out.println(textWithLayout().getText(getLexStream()));
+		//System.out.println("sep-ws: "+"$"+seperatingWhitespace+"$");
+		//if(getCommentsBefore()!=null)
+			//System.out.println(getCommentsBefore().getText(getLexStream()));
+		//if(getCommentsAfter()!=null)
+			//System.out.println(getCommentsAfter().getText(getLexStream()));
+		//System.out.println("indent: "+"$"+indentNode+"$");
+		//System.out.println(textWithLayout().getText(getLexStream()));
 	}
 	
 	private void initialize() {

From m.dejonge at tudelft.nl  Tue Apr 26 11:43:19 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 26 Apr 2011 09:43:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22588 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110426094319.412902B800E@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Apr 26 09:43:18 2011
New Revision: 22588
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22588&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Tue Apr 26 09:42:18 2011	(r22587)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Tue Apr 26 09:43:18 2011	(r22588)
@@ -193,7 +193,7 @@
 	 * Returns null in case no match is found
 	 * 
 	 * @param semanticNodes
-	 *             Define Sorts and/or Constructors that shold apply. (example: Stm+ ID)
+	 *             Define Sorts and/or Constructors that should apply. (example: Stm+ ID)
 	 * @param allowMultiChildParent
 	 *             Also fetch the first parent if it has multiple children (e.g., Call("foo", "bar")).
 	 */

From M.A.Akhter at student.tudelft.nl  Tue Apr 26 12:12:38 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 26 Apr 2011 10:12:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22589 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans
Message-ID: <20110426101238.0BD6CCC080@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Apr 26 10:12:37 2011
New Revision: 22589
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22589&sc=1

Log:
Added error handling for the case of illegal project reference(s)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Tue Apr 26 09:43:18 2011	(r22588)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Tue Apr 26 10:12:37 2011	(r22589)
@@ -121,17 +121,19 @@
 	
 	//Returns output directory for the code generation
 	get-code-output-directory = collect-all(?OutputDirectory(<id>), union) ; ?[<id>]
-	
+
+	// Returns all the resolved directories 	
 	get-all-includes  = 
  	<conc>(<get-all-sources(|<project-path>)> ,   <get-sources-from-external-projects>)
  	;make-set
  
+ 
 	get-all-sources(|project-path) =
  		collect-all(?Sources(_, _));
  		get-local-sources;
  		map(\(s,o)-> ($[[project-path]/[s]],o)\)
  	<+ 
-  	debug(!"Failed to get list of source directory.") ; fail
+  		debug(!"Failed to get list of source directory.") ; fail
  
 	get-local-sources: [] -> []
  
@@ -141,6 +143,9 @@
  		<map(\s -> (s,include-option)\)>sources* => result';
  		<conc>(<get-local-sources>rest, result') => result	 	
  
+ 
+ 
+ 	// Resolving project References 
 	get-sources-from-external-projects = 
   	get-all-project-refernces; 
   	get-external-sources
@@ -156,22 +161,34 @@
 		not (?[])
 	  ;!spx-projects* => [current-project-path|rest*]
 	 where
-	 	result := <conc>( <external-sources>current-project-path , <get-external-sources>rest* )
-	
+	 	result := <conc>( <resolve-external-sources<+ ![]>current-project-path , <get-external-sources>rest* )
+	 	
 	get-external-sources: []  -> []
-	  
-	external-sources =
+	 
+	resolve-external-sources =
 		where(explode-string; <not(eq)>(<Hd> , 46)) ; // not started wtih  ..
-	  ?current-project-path;
-	  <parse-file>$[[current-project-path]/spx.config];
-	  get-all-sources(|current-project-path) 
+	  	?current-project-path;
+	  	verify-directory-exists;
+	  	verify-config-file-exists;   
+	  	<parse-file>$[[current-project-path]/spx.config];
+	  	get-all-sources(|current-project-path)
 	  	
-	external-sources =
+	resolve-external-sources =
 		where(explode-string; <eq>(<Hd> , 46)) ;
-	  ?current-project-path; 
-	  current-dir := <getcwd>;
-	  <chdir> current-project-path;
-	  <parse-spoofaxconfiguration-file;get-all-sources(|<getcwd>)>"spx.config" => result;
-	  <chdir>current-dir; // restoring current directory
-	  !result 
+	  	?current-project-path; 
+	  	where(current-dir := <getcwd>);
+	  	(<chdir> current-project-path <+ throw-directory-not-found-exception(fail));
+	  	verify-config-file-exists;
+	  	<parse-spoofaxconfiguration-file;get-all-sources(|<getcwd>)>"spx.config" => result;
+	  	<chdir>current-dir; // restoring current directory
+	  	!result
+	  	
+	
+	verify-directory-exists  = where( (file-exists ; filemode ; isdir)  <+ throw-directory-not-found-exception(fail) )
+	
+	verify-config-file-exists =where(<file-exists>$[[<id>]/spx.config] <+ throw-config-not-found-exception(fail) )  
+	
+	throw-directory-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find the directory specified: ") ;post-processing-strategy
+	
+	throw-config-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find spx.config file in the directory specified: ") ;post-processing-strategy
 	   	 		 		
\ No newline at end of file

From seba at informatik.uni-marburg.de  Tue Apr 26 12:39:59 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 26 Apr 2011 10:39:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22590 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110426103959.1FCE8CC086@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Tue Apr 26 10:39:58 2011
New Revision: 22590
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22590&sc=1

Log:
changed content proposal filter

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Tue Apr 26 10:12:37 2011	(r22589)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Tue Apr 26 10:39:58 2011	(r22590)
@@ -308,24 +308,34 @@
 					if (proposal.isSemantic() || prefix.length() > 0 || identifierLexical.matcher(proposalPrefix).lookingAt() || proposalPrefix.length() == 0)
 						results.add(new ContentProposal(this, proposal, prefix, offsetPosition, viewer));
 			} /*else*/ {
-				Matcher matcher = identifierLexical.matcher(proposalPrefix);
-				if (matcher.find() && (matcher.start() > 0 || matcher.end() < proposalPrefix.length())) {
-					// Handle completion literals with special characters, like "(disabled)"
-					if (matcher.start() == 0 && !matcher.find(matcher.end()))
-						continue;
-					do {
-						if (document.regionMatches(offset - matcher.start() - prefix.length(), proposalPrefix, 0, matcher.start())
-								&& proposalPrefix.regionMatches(matcher.start(), prefix, 0, prefix.length())) {
-
-							// TODO: respect proposal.isBlankLineRequired() here?
-							String bigPrefix = proposalPrefix.substring(0, matcher.start() + prefix.length());
-							if (!backTrackResultsOnly) results.clear();
-							backTrackResultsOnly = true;
-							results.add(new ContentProposal(this, proposal, bigPrefix, offsetPosition, viewer));
-							break;
-						}
-					} while (matcher.find(matcher.end()));
-				}
+				// find longest match of proposal in document
+				// start at length - 2 to exclude proposals that already are fully part of the document
+				for (int i = proposalPrefix.length() - 2; i >= 0; i--)
+					if (document.regionMatches(true, offset - i, proposalPrefix, 0, i)) {
+						if (!backTrackResultsOnly) results.clear();
+						backTrackResultsOnly = true;
+						results.add(new ContentProposal(this, proposal, proposalPrefix.substring(0, i), offsetPosition, viewer));
+						break;
+					}
+				
+//				Matcher matcher = identifierLexical.matcher(proposalPrefix);
+//				if (matcher.find() && (matcher.start() > 0 || matcher.end() < proposalPrefix.length())) {
+//					// Handle completion literals with special characters, like "(disabled)"
+//					if (matcher.start() == 0 && !matcher.find(matcher.end()))
+//						continue;
+//					do {
+//						if (document.regionMatches(offset - matcher.start() - prefix.length(), proposalPrefix, 0, matcher.start())
+//								&& proposalPrefix.regionMatches(matcher.start(), prefix, 0, prefix.length())) {
+//
+//							// TODO: respect proposal.isBlankLineRequired() here?
+//							String bigPrefix = proposalPrefix.substring(0, matcher.start() + prefix.length());
+//							if (!backTrackResultsOnly) results.clear();
+//							backTrackResultsOnly = true;
+//							results.add(new ContentProposal(this, proposal, bigPrefix, offsetPosition, viewer));
+//							break;
+//						}
+//					} while (matcher.find(matcher.end()));
+//				}
 			}
 		}
 

From m.dejonge at tudelft.nl  Tue Apr 26 16:23:10 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 26 Apr 2011 14:23:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22591 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <20110426142310.0AAE82B8004@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Apr 26 14:23:09 2011
New Revision: 22591
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22591&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str	Tue Apr 26 10:39:58 2011	(r22590)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str	Tue Apr 26 14:23:09 2011	(r22591)
@@ -9,7 +9,6 @@
   lib-refactoring/rename-generic
   lib-refactoring/files
   lib-refactoring/language-description
-  testing/cached_old //TODO: mag weg
 
 rules //rename refactoring, builder
   

From seba at informatik.uni-marburg.de  Tue Apr 26 16:51:27 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 26 Apr 2011 14:51:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22592 -
	sugarj/trunk/stdlib/org/sugarj/init
Message-ID: <20110426145127.B85A97F8021@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Tue Apr 26 14:51:27 2011
New Revision: 22592
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22592&sc=1

Log:
removed some fences

Modified:
   sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv

Modified: sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv
==============================================================================
--- sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv	Tue Apr 26 14:23:09 2011	(r22591)
+++ sugarj/trunk/stdlib/org/sugarj/init/initEditor.serv	Tue Apr 26 14:51:27 2011	(r22592)
@@ -33,8 +33,7 @@
 language
   fences : ( )
   fences : { }
-  fences : < >
   fences : [ ]
   fences : ' '
-  fences : "\"" "\""
+//  fences : "\"" "\""
   
\ No newline at end of file

From seba at informatik.uni-marburg.de  Tue Apr 26 16:52:02 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 26 Apr 2011 14:52:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22593 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110426145202.7E0B17F800D@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Tue Apr 26 14:52:02 2011
New Revision: 22593
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22593&sc=1

Log:
fixed start index of content proposal filter

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Tue Apr 26 14:51:27 2011	(r22592)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Tue Apr 26 14:52:02 2011	(r22593)
@@ -309,8 +309,7 @@
 						results.add(new ContentProposal(this, proposal, prefix, offsetPosition, viewer));
 			} /*else*/ {
 				// find longest match of proposal in document
-				// start at length - 2 to exclude proposals that already are fully part of the document
-				for (int i = proposalPrefix.length() - 2; i >= 0; i--)
+				for (int i = proposalPrefix.length() - 1; i >= 0; i--)
 					if (document.regionMatches(true, offset - i, proposalPrefix, 0, i)) {
 						if (!backTrackResultsOnly) results.clear();
 						backTrackResultsOnly = true;

From seba at informatik.uni-marburg.de  Tue Apr 26 16:52:24 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 26 Apr 2011 14:52:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22594 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
Message-ID: <20110426145224.831427F8027@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Tue Apr 26 14:52:24 2011
New Revision: 22594
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22594&sc=1

Log:
fixed index out of bounds exception

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java	Tue Apr 26 14:52:02 2011	(r22593)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java	Tue Apr 26 14:52:24 2011	(r22594)
@@ -70,7 +70,7 @@
 			return null;
 		}
 		
-		if (result.startsWith("\"") && result.endsWith("\""))
+		if (result.startsWith("\"") && result.endsWith("\"") && result.length() > 1)
 			result = result.substring(1, result.length() - 1).replace("\\\\", "\"");
 		
 		return result;

From seba at informatik.uni-marburg.de  Tue Apr 26 16:55:57 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 26 Apr 2011 14:55:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22595 - in
	sugarj/trunk/case-studies: concretesyntax xml/schema
Message-ID: <20110426145557.E94A57F801C@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Tue Apr 26 14:55:57 2011
New Revision: 22595
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22595&sc=1

Log:
editor service generation for Xml Schema

Added:
   sugarj/trunk/case-studies/concretesyntax/EditorServices.sugj
Modified:
   sugarj/trunk/case-studies/xml/schema/AsDesugaring.sugj
   sugarj/trunk/case-studies/xml/schema/AsEditorService.sugj
   sugarj/trunk/case-studies/xml/schema/BookSchema.sugj
   sugarj/trunk/case-studies/xml/schema/SharedStrategies.sugj
   sugarj/trunk/case-studies/xml/schema/XmlSchema.sugj
   sugarj/trunk/case-studies/xml/schema/XmlSchemaCompiled.sugj

Added: sugarj/trunk/case-studies/concretesyntax/EditorServices.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/concretesyntax/EditorServices.sugj	Tue Apr 26 14:55:57 2011	(r22595)
@@ -0,0 +1,21 @@
+package concretesyntax;
+
+import org.sugarj.languages.EditorServices;
+import org.sugarj.languages.Stratego;
+
+import concretesyntax.MetaExplode;
+
+public sugar EditorServices {
+  context-free syntax
+    "editor" "service" "|[" EditorServiceSection* "]|" -> StrategoTerm {cons("ToMetaExpr")}
+                       "|[" EditorServiceSection* "]|" -> StrategoTerm {cons("ToMetaExpr")}
+
+  context-free syntax
+    "~" StrategoTerm -> EditorServiceSemanticRule {cons("FromMetaExpr")}
+    "~" StrategoTerm -> EditorServicePropertyValue {cons("FromMetaExpr")} 
+    "~" StrategoTerm -> EditorServiceCompletionPart {cons("FromMetaExpr")} 
+    "~" StrategoTerm -> EditorServiceStrategoCall {cons("FromMetaExpr")}
+    "~" StrategoTerm -> EditorServiceSemanticNode {cons("FromMetaExpr")} 
+    "~" StrategoTerm -> EditorServiceCompletionPart {cons("FromMetaExpr")}
+    "~" StrategoTerm -> EditorServiceAttribute {cons("FromMetaExpr")} 
+}  

Modified: sugarj/trunk/case-studies/xml/schema/AsDesugaring.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/schema/AsDesugaring.sugj	Tue Apr 26 14:52:24 2011	(r22594)
+++ sugarj/trunk/case-studies/xml/schema/AsDesugaring.sugj	Tue Apr 26 14:55:57 2011	(r22595)
@@ -1,4 +1,4 @@
-package xml.schema;
+package xml.schema; 
 
 import concretesyntax.Stratego;
 
@@ -356,7 +356,7 @@
       stratego |[
         if ?[]
           then ![]
-          else is-list < (map(!(<id>,string~msg))) + ![(<id>,string~msg)]
+          else is-a-list < (map(!(<id>,string~msg))) + ![(<id>,string~msg)]
         end
       ]|
 }

Modified: sugarj/trunk/case-studies/xml/schema/AsEditorService.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/schema/AsEditorService.sugj	Tue Apr 26 14:52:24 2011	(r22594)
+++ sugarj/trunk/case-studies/xml/schema/AsEditorService.sugj	Tue Apr 26 14:55:57 2011	(r22595)
@@ -4,6 +4,8 @@
 
 import xml.XmlSyntax;
 import xml.schema.XmlSchemaJavaSyntax;
+import xml.ConcreteXml;
+import xml.XmlEditor;
 
 public sugar AsEditorService {
   rules
@@ -11,8 +13,81 @@
       XsdSugarBody(XMLSchemaDoc(xsd)) -> <schema-editor> xsd
     
     schema-editor :
-      Document(pre, el, post) -> <schema-editor-element> el
+      Document(pre, el, post) -> <schema-editor-root-completion> el
 
-    schema-editor-element :
-      el -> []    
+    schema-editor-root-completion :
+      Element(
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "schema")),
+        [Attribute(AttrName(QName(None(), "targetNamespace")), attval)],
+        contents,
+        _)
+      -> res
+      where
+        <xml-attr-value2string> attval => namespace;
+        <mapconcat(schema-editor-type-completion <+ ![])> contents => types;
+        <mapconcat(schema-editor-element-completion(|namespace, types); ensure-list <+ ![])> contents => res
+
+ 
+    schema-editor-element-completion(|namespace, types) :
+      Element(
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), name)),
+        _,
+        contents,
+        _)
+      -> res
+      where
+        <not(equal)> (name, "element");
+        <mapconcat(schema-editor-element-completion(|namespace, types); ensure-list <+ ![])> contents => res
+
+
+
+    schema-editor-element-completion(|namespace, types) :
+      |[
+        <{http://www.w3.org/2001/XMLSchema}element name=attval1 type=attval2>
+        </{http://www.w3.org/2001/XMLSchema}element>
+      ]|
+      -> 
+      |[  completions
+            completion trigger : "<"
+            ~completion
+       ]|
+      where
+        <xml-attr-value2string> attval1 => element;
+        <xml-attr-value2string> attval2 => type;
+
+        <concat-strings> ["<", "{", namespace, "}", element] => prefix;
+        !"\n" => content;
+        <concat-strings> ["</", "{", namespace, "}", element, ">"] => suffix;
+
+        <lookup> (type, types) => attributes;
+
+        !CompletionTemplateWithSort(
+           Sort("Content"),
+           String(prefix),
+           <conc> (attributes, [String(">"), String(content), String(suffix)]),
+           None())
+        => completion
+
+    
+    schema-editor-type-completion :
+      Element(
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "complexType")),
+        [Attribute(AttrName(QName(None(), "name")), attval)],
+        contents,
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "complexType"))) 
+      -> [(<xml-attr-value2string> attval, attributeCompletion)]
+      where
+        <mapconcat(schema-editor-attribute-completion <+ ![])> contents => attributeCompletion
+        
+    schema-editor-attribute-completion :
+      |[
+        <{http://www.w3.org/2001/XMLSchema}attribute name=attval1 type=attval2>
+        </{http://www.w3.org/2001/XMLSchema}attribute>
+      ]|
+      -> 
+      [String(attr-pre), Placeholder(attr-placeholder), String(attr-post)]
+      where
+        <concat-strings> [" ", <xml-attr-value2string> attval1, "=\""] => attr-pre;
+        <concat-strings> ["<", <xml-attr-value2string> attval2, ">"] => attr-placeholder;
+        <concat-strings> ["\""] => attr-post
 }
\ No newline at end of file

Modified: sugarj/trunk/case-studies/xml/schema/BookSchema.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/schema/BookSchema.sugj	Tue Apr 26 14:52:24 2011	(r22594)
+++ sugarj/trunk/case-studies/xml/schema/BookSchema.sugj	Tue Apr 26 14:55:57 2011	(r22595)
@@ -7,7 +7,7 @@
     
     <{http://www.w3.org/2001/XMLSchema}element name="book" type="BookType">
     </{http://www.w3.org/2001/XMLSchema}element>
-    
+
     <{http://www.w3.org/2001/XMLSchema}complexType name="BookType">
       <{http://www.w3.org/2001/XMLSchema}sequence maxOccurs="unbounded">
         <{http://www.w3.org/2001/XMLSchema}element name="author" type="AuthorType">

Modified: sugarj/trunk/case-studies/xml/schema/SharedStrategies.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/schema/SharedStrategies.sugj	Tue Apr 26 14:52:24 2011	(r22594)
+++ sugarj/trunk/case-studies/xml/schema/SharedStrategies.sugj	Tue Apr 26 14:55:57 2011	(r22595)
@@ -6,7 +6,8 @@
     is-error = where(?[(a,<id>)|c]; is-string)
     head : [x|y] -> x
     tail : [x|y] -> y
-    ensure-list = is-list <+ ![<id>]
+    is-a-list = is-list <+ \ l@[x] -> l \
+    ensure-list = is-a-list <+ ![<id>]
     
   strategies
     validate-base-string =

Modified: sugarj/trunk/case-studies/xml/schema/XmlSchema.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/schema/XmlSchema.sugj	Tue Apr 26 14:52:24 2011	(r22594)
+++ sugarj/trunk/case-studies/xml/schema/XmlSchema.sugj	Tue Apr 26 14:55:57 2011	(r22595)
@@ -4,6 +4,8 @@
 import xml.schema.XmlSchemaJavaSyntax;
 
 import xml.schema.XmlSchemaCompiled;
+ 
+import xml.schema.AsEditorService;
 
 public xmlschema XmlSchema {
   <{http://www.w3.org/2001/XMLSchema}schema 
@@ -11,7 +13,7 @@
    	
    	<{http://www.w3.org/2001/XMLSchema}element name="schema" type="SchemaType">
    	</{http://www.w3.org/2001/XMLSchema}element>
-   	   	
+
     <{http://www.w3.org/2001/XMLSchema}complexType name="SchemaType">
     	<{http://www.w3.org/2001/XMLSchema}choice maxOccurs="unbounded">
         
@@ -26,7 +28,7 @@
       
       </{http://www.w3.org/2001/XMLSchema}choice>
       
-      <{http://www.w3.org/2001/XMLSchema}attribute name="targetNamespace" type="StringType">
+      <{http://www.w3.org/2001/XMLSchema}attribute name="targetNamespace" type="string">
       </{http://www.w3.org/2001/XMLSchema}attribute>
     </{http://www.w3.org/2001/XMLSchema}complexType> 
     
@@ -53,7 +55,7 @@
       
       </{http://www.w3.org/2001/XMLSchema}sequence>
       
-      <{http://www.w3.org/2001/XMLSchema}attribute name="name" type="StringType">
+      <{http://www.w3.org/2001/XMLSchema}attribute name="name" type="string">
       </{http://www.w3.org/2001/XMLSchema}attribute>        
     </{http://www.w3.org/2001/XMLSchema}complexType>
     
@@ -96,7 +98,7 @@
     
       </{http://www.w3.org/2001/XMLSchema}choice>
       
-      <{http://www.w3.org/2001/XMLSchema}attribute name="maxOccurs" type="StringType">
+      <{http://www.w3.org/2001/XMLSchema}attribute name="maxOccurs" type="string">
       </{http://www.w3.org/2001/XMLSchema}attribute>
     </{http://www.w3.org/2001/XMLSchema}complexType>
     
@@ -105,10 +107,10 @@
       <{http://www.w3.org/2001/XMLSchema}sequence>
       </{http://www.w3.org/2001/XMLSchema}sequence>
       	
-      <{http://www.w3.org/2001/XMLSchema}attribute name="name" type="StringType">
+      <{http://www.w3.org/2001/XMLSchema}attribute name="name" type="string">
       </{http://www.w3.org/2001/XMLSchema}attribute>
     
-      <{http://www.w3.org/2001/XMLSchema}attribute name="type" type="StringType">
+      <{http://www.w3.org/2001/XMLSchema}attribute name="type" type="string">
       </{http://www.w3.org/2001/XMLSchema}attribute>
     </{http://www.w3.org/2001/XMLSchema}complexType>
     
@@ -117,10 +119,10 @@
       <{http://www.w3.org/2001/XMLSchema}sequence>
       </{http://www.w3.org/2001/XMLSchema}sequence>
       
- 	  <{http://www.w3.org/2001/XMLSchema}attribute name="name" type="StringType">
+ 	  <{http://www.w3.org/2001/XMLSchema}attribute name="name" type="string">
       </{http://www.w3.org/2001/XMLSchema}attribute>
     
-      <{http://www.w3.org/2001/XMLSchema}attribute name="type" type="StringType">
+      <{http://www.w3.org/2001/XMLSchema}attribute name="type" type="string">
       </{http://www.w3.org/2001/XMLSchema}attribute>
     </{http://www.w3.org/2001/XMLSchema}complexType>
     
@@ -131,23 +133,23 @@
         </{http://www.w3.org/2001/XMLSchema}element>
       </{http://www.w3.org/2001/XMLSchema}sequence>
       
-      <{http://www.w3.org/2001/XMLSchema}attribute name="name" type="StringType">
+      <{http://www.w3.org/2001/XMLSchema}attribute name="name" type="string">
       </{http://www.w3.org/2001/XMLSchema}attribute>
     </{http://www.w3.org/2001/XMLSchema}complexType>
     
     	
     
-	<{http://www.w3.org/2001/XMLSchema}complexType name="RestrictionType">
-	  <{http://www.w3.org/2001/XMLSchema}sequence>
+    <{http://www.w3.org/2001/XMLSchema}complexType name="RestrictionType">
+      <{http://www.w3.org/2001/XMLSchema}sequence>
       </{http://www.w3.org/2001/XMLSchema}sequence>
       
-      <{http://www.w3.org/2001/XMLSchema}attribute name="base" type="StringType">
+      <{http://www.w3.org/2001/XMLSchema}attribute name="base" type="string">
       </{http://www.w3.org/2001/XMLSchema}attribute>
     </{http://www.w3.org/2001/XMLSchema}complexType>    
     
     
     
-    <{http://www.w3.org/2001/XMLSchema}simpleType name="StringType">
+    <{http://www.w3.org/2001/XMLSchema}simpleType name="string">
     	<{http://www.w3.org/2001/XMLSchema}restriction base="string">
     	</{http://www.w3.org/2001/XMLSchema}restriction>
     </{http://www.w3.org/2001/XMLSchema}simpleType>

Modified: sugarj/trunk/case-studies/xml/schema/XmlSchemaCompiled.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/schema/XmlSchemaCompiled.sugj	Tue Apr 26 14:52:24 2011	(r22594)
+++ sugarj/trunk/case-studies/xml/schema/XmlSchemaCompiled.sugj	Tue Apr 26 14:55:57 2011	(r22595)
@@ -9,6 +9,7 @@
 public sugar XmlSchemaCompiled {
 
 rules
+
   xml-validate =
     ?Element(
        ElemName(
@@ -69,10 +70,10 @@
                                     AttrName(QName(None, "targetNamespace"))
                                   , attval
                                   ) -> err
-                              where <(validate-attval-type-StringType
+                              where <(validate-attval-type-string
                                       <+ ![ ( att
                                             , <concat-strings> [ "no type definition for "
-                                                               , "StringType"
+                                                               , "string"
                                                                , " of attribute "
                                                                , "targetNamespace"
                                                                , " found"
@@ -91,7 +92,7 @@
                 if ?[] then
                   ![]
                 else
-                  is-list
+                  is-a-list
                   < map(!(<id>, "unexpected attribute"))
                   + ![(<id>, "unexpected attribute")]
                 end
@@ -229,7 +230,7 @@
                   if ?[] then
                     ![]
                   else
-                    is-list
+                    is-a-list
                     < map(!(<id>, "unexpected element"))
                     + ![(<id>, "unexpected element")]
                   end
@@ -246,10 +247,10 @@
                                     AttrName(QName(None, "name"))
                                   , attval
                                   ) -> err
-                              where <(validate-attval-type-StringType
+                              where <(validate-attval-type-string
                                       <+ ![ ( att
                                             , <concat-strings> [ "no type definition for "
-                                                               , "StringType"
+                                                               , "string"
                                                                , " of attribute "
                                                                , "name"
                                                                , " found"
@@ -268,7 +269,7 @@
                 if ?[] then
                   ![]
                 else
-                  is-list
+                  is-a-list
                   < map(!(<id>, "unexpected attribute"))
                   + ![(<id>, "unexpected attribute")]
                 end
@@ -488,7 +489,7 @@
                   if ?[] then
                     ![]
                   else
-                    is-list
+                    is-a-list
                     < map(!(<id>, "unexpected element"))
                     + ![(<id>, "unexpected element")]
                   end
@@ -503,7 +504,7 @@
     where <(if ?[] then
               ![]
             else
-              is-list
+              is-a-list
               < map(!(<id>, "unexpected attribute"))
               + ![(<id>, "unexpected attribute")]
             end
@@ -726,7 +727,7 @@
                   if ?[] then
                     ![]
                   else
-                    is-list
+                    is-a-list
                     < map(!(<id>, "unexpected element"))
                     + ![(<id>, "unexpected element")]
                   end
@@ -743,10 +744,10 @@
                                     AttrName(QName(None, "maxOccurs"))
                                   , attval
                                   ) -> err
-                              where <(validate-attval-type-StringType
+                              where <(validate-attval-type-string
                                       <+ ![ ( att
                                             , <concat-strings> [ "no type definition for "
-                                                               , "StringType"
+                                                               , "string"
                                                                , " of attribute "
                                                                , "maxOccurs"
                                                                , " found"
@@ -765,7 +766,7 @@
                 if ?[] then
                   ![]
                 else
-                  is-list
+                  is-a-list
                   < map(!(<id>, "unexpected attribute"))
                   + ![(<id>, "unexpected attribute")]
                 end
@@ -989,7 +990,7 @@
                   if ?[] then
                     ![]
                   else
-                    is-list
+                    is-a-list
                     < map(!(<id>, "unexpected element"))
                     + ![(<id>, "unexpected element")]
                   end
@@ -1006,10 +1007,10 @@
                                     AttrName(QName(None, "name"))
                                   , attval
                                   ) -> err
-                              where <(validate-attval-type-StringType
+                              where <(validate-attval-type-string
                                       <+ ![ ( att
                                             , <concat-strings> [ "no type definition for "
-                                                               , "StringType"
+                                                               , "string"
                                                                , " of attribute "
                                                                , "name"
                                                                , " found"
@@ -1030,10 +1031,10 @@
                                         AttrName(QName(None, "type"))
                                       , attval
                                       ) -> err
-                                  where <(validate-attval-type-StringType
+                                  where <(validate-attval-type-string
                                           <+ ![ ( att
                                                 , <concat-strings> [ "no type definition for "
-                                                                   , "StringType"
+                                                                   , "string"
                                                                    , " of attribute "
                                                                    , "type"
                                                                    , " found"
@@ -1052,7 +1053,7 @@
                     if ?[] then
                       ![]
                     else
-                      is-list
+                      is-a-list
                       < map(!(<id>, "unexpected attribute"))
                       + ![(<id>, "unexpected attribute")]
                     end
@@ -1066,7 +1067,7 @@
                   if ?[] then
                     ![]
                   else
-                    is-list
+                    is-a-list
                     < map(!(<id>, "unexpected element"))
                     + ![(<id>, "unexpected element")]
                   end
@@ -1083,10 +1084,10 @@
                                     AttrName(QName(None, "name"))
                                   , attval
                                   ) -> err
-                              where <(validate-attval-type-StringType
+                              where <(validate-attval-type-string
                                       <+ ![ ( att
                                             , <concat-strings> [ "no type definition for "
-                                                               , "StringType"
+                                                               , "string"
                                                                , " of attribute "
                                                                , "name"
                                                                , " found"
@@ -1107,10 +1108,10 @@
                                         AttrName(QName(None, "type"))
                                       , attval
                                       ) -> err
-                                  where <(validate-attval-type-StringType
+                                  where <(validate-attval-type-string
                                           <+ ![ ( att
                                                 , <concat-strings> [ "no type definition for "
-                                                                   , "StringType"
+                                                                   , "string"
                                                                    , " of attribute "
                                                                    , "type"
                                                                    , " found"
@@ -1129,7 +1130,7 @@
                     if ?[] then
                       ![]
                     else
-                      is-list
+                      is-a-list
                       < map(!(<id>, "unexpected attribute"))
                       + ![(<id>, "unexpected attribute")]
                     end
@@ -1143,7 +1144,7 @@
                   if ?[] then
                     ![]
                   else
-                    is-list
+                    is-a-list
                     < map(!(<id>, "unexpected element"))
                     + ![(<id>, "unexpected element")]
                   end
@@ -1160,10 +1161,10 @@
                                     AttrName(QName(None, "name"))
                                   , attval
                                   ) -> err
-                              where <(validate-attval-type-StringType
+                              where <(validate-attval-type-string
                                       <+ ![ ( att
                                             , <concat-strings> [ "no type definition for "
-                                                               , "StringType"
+                                                               , "string"
                                                                , " of attribute "
                                                                , "name"
                                                                , " found"
@@ -1182,7 +1183,7 @@
                 if ?[] then
                   ![]
                 else
-                  is-list
+                  is-a-list
                   < map(!(<id>, "unexpected attribute"))
                   + ![(<id>, "unexpected attribute")]
                 end
@@ -1228,7 +1229,7 @@
                   if ?[] then
                     ![]
                   else
-                    is-list
+                    is-a-list
                     < map(!(<id>, "unexpected element"))
                     + ![(<id>, "unexpected element")]
                   end
@@ -1245,10 +1246,10 @@
                                     AttrName(QName(None, "base"))
                                   , attval
                                   ) -> err
-                              where <(validate-attval-type-StringType
+                              where <(validate-attval-type-string
                                       <+ ![ ( att
                                             , <concat-strings> [ "no type definition for "
-                                                               , "StringType"
+                                                               , "string"
                                                                , " of attribute "
                                                                , "base"
                                                                , " found"
@@ -1267,7 +1268,7 @@
                 if ?[] then
                   ![]
                 else
-                  is-list
+                  is-a-list
                   < map(!(<id>, "unexpected attribute"))
                   + ![(<id>, "unexpected attribute")]
                 end
@@ -1280,7 +1281,7 @@
                   if ?[] then
                     ![]
                   else
-                    is-list
+                    is-a-list
                     < map(!(<id>, "unexpected element"))
                     + ![(<id>, "unexpected element")]
                   end
@@ -1290,7 +1291,7 @@
 
 rules
 
-  validate-type-StringType :
+  validate-type-string :
     Element(name1, attrs, [c], name2) -> err
     where <chardata2string> c => cstring
           ; <(validate-base-string
@@ -1299,7 +1300,7 @@
                     , <concat-strings> ["no base type definition ", "string", " for value ", val, " found"]
                     ))> (c, cstring) => err
 
-  validate-type-StringType :
+  validate-type-string :
     Element(name1, attrs, cs, name2) -> [ ( c
                                           , <concat-strings> ["type mismatch: expected character data, found ", <write-to-string> cs]
                                           )
@@ -1307,7 +1308,7 @@
     where <(not(?[c])
             + ?[c] ; not(chardata2string))> cs
 
-  validate-attval-type-StringType :
+  validate-attval-type-string :
     attr -> err
     where <xml-attr-value2string> attr => attrstring
           ; <(validate-base-string

From seba at informatik.uni-marburg.de  Tue Apr 26 16:56:40 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 26 Apr 2011 14:56:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22596 -
	sugarj/trunk/case-studies/xml
Message-ID: <20110426145640.B2B3F2B8028@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Tue Apr 26 14:56:40 2011
New Revision: 22596
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22596&sc=1

Log:
fixed xml editor

Modified:
   sugarj/trunk/case-studies/xml/XmlEditor.sugj

Modified: sugarj/trunk/case-studies/xml/XmlEditor.sugj
==============================================================================
--- sugarj/trunk/case-studies/xml/XmlEditor.sugj	Tue Apr 26 14:55:57 2011	(r22595)
+++ sugarj/trunk/case-studies/xml/XmlEditor.sugj	Tue Apr 26 14:56:40 2011	(r22596)
@@ -24,8 +24,4 @@
     
   outliner XmlOutliner
     Element._
-  
-  completions
-    completion trigger : "<"
-    completion template : Content = "<{lib}author title=\"" <AttVal> "\">\n</{lib}author>"
-} 
\ No newline at end of file
+}
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Wed Apr 27 00:16:49 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 26 Apr 2011 22:16:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22597 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans
Message-ID: <20110426221649.838C5CC045@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Apr 26 22:16:48 2011
New Revision: 22597
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22597&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Tue Apr 26 14:56:40 2011	(r22596)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Tue Apr 26 22:16:48 2011	(r22597)
@@ -175,19 +175,28 @@
 	  	
 	resolve-external-sources =
 		where(explode-string; <eq>(<Hd> , 46)) ;
-	  	?current-project-path; 
-	  	where(current-dir := <getcwd>);
-	  	(<chdir> current-project-path <+ throw-directory-not-found-exception(fail));
-	  	verify-config-file-exists;
-	  	<parse-spoofaxconfiguration-file;get-all-sources(|<getcwd>)>"spx.config" => result;
-	  	<chdir>current-dir; // restoring current directory
-	  	!result
-	  	
+		where(current-dir := <getcwd>);
+		(
+	  		?current-project-path;
+	  		verify-directory-exists;   
+	  		<chdir> current-project-path;
+	  		verify-config-file-exists;
+	  		<parse-spoofaxconfiguration-file;get-all-sources(|<getcwd>)>"spx.config" => result;
+	  		<chdir>current-dir; // restoring current directory
+	  		!result
+	  	<+
+	  		<chdir>current-dir // restoring current directory
+		)
+	verify-directory-exists  = is-spx-config-exist  <+ throw-directory-not-found-exception(fail) 
+	
+	verify-config-file-exists = is-dir-exist  <+ throw-config-not-found-exception(fail)   
 	
-	verify-directory-exists  = where( (file-exists ; filemode ; isdir)  <+ throw-directory-not-found-exception(fail) )
 	
-	verify-config-file-exists =where(<file-exists>$[[<id>]/spx.config] <+ throw-config-not-found-exception(fail) )  
+	is-spx-config-exist = where(<file-exists>$[[<id>]/spx.config])  
 	
+	is-dir-exist =  where(file-exists ; filemode ; isdir)
+
+
 	throw-directory-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find the directory specified: ") ;post-processing-strategy
 	
 	throw-config-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find spx.config file in the directory specified: ") ;post-processing-strategy

From v.vergu at gmail.com  Wed Apr 27 10:01:06 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Wed, 27 Apr 2011 08:01:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22598 -
	spoofax-imp/branches/stratego-editor
Message-ID: <20110427080106.09779CC096@mx4.tudelft.nl>

Author: VladVergu
Date: Wed Apr 27 08:01:04 2011
New Revision: 22598
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22598&sc=1

Log:
Branched

Added:
   spoofax-imp/branches/stratego-editor/

From v.vergu at gmail.com  Wed Apr 27 10:01:09 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Wed, 27 Apr 2011 08:01:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22599 -
	spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego
Message-ID: <20110427080109.1D92CCC0BC@mx4.tudelft.nl>

Author: VladVergu
Date: Wed Apr 27 08:01:08 2011
New Revision: 22599
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22599&sc=1

Log:
Branched

Added:
   spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/   (props changed)
      - copied from r22597, spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/

From m.dejonge at tudelft.nl  Wed Apr 27 10:17:50 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 27 Apr 2011 08:17:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22600 - in
	spoofax/trunk/spoofax/org.spoofax.jsglr:
	src/org/spoofax/jsglr/client src/org/spoofax/jsglr/client/imploder
	test/org/spoofax/jsglr/tests
Message-ID: <20110427081750.19F82108C018@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Apr 27 08:17:49 2011
New Revision: 22600
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22600&sc=1

Log:
BugFix: Amb problem (http://yellowgrass.org/issue/Spoofax/361):
- Amb, Prefer, Avoid, Reject are ParseNodes (instead of separate subclasses)
- ParseNode is changed in an ambiguous ParseNode instead of creating a new Amb (so the created ambiguity is now adopted for earlier reductions)
- cycles are prevented (a parsenode can not have itself as a descendant)
- PPC and hashcode change if an ambiguity is created in a descendant, therefore: hashcode is cached in shifter, PPC is set during disambiguation

Deleted:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Amb.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseAvoid.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParsePrefer.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseReject.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Link.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseProductionNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Production.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TopdownTreeBuilder.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TreeBuilder.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/test/org/spoofax/jsglr/tests/TestAbstractParseNode.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java	Wed Apr 27 08:01:08 2011	(r22599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java	Wed Apr 27 08:17:49 2011	(r22600)
@@ -12,6 +12,36 @@
 
 public abstract class AbstractParseNode {
 
+    public static final int PARSE_PRODUCTION_NODE = 1;
+    public static final int PARSENODE = 2;
+    public static final int AMBIGUITY = 3;
+    public static final int PREFER = 4;
+    public static final int AVOID = 5;
+    public static final int REJECT = 6;
+    
+    public boolean isAmbNode(){
+    	return getNodeType()==AbstractParseNode.AMBIGUITY;
+    }
+
+    public boolean isParseNode(){
+    	return (getNodeType()==AbstractParseNode.PARSENODE
+    		|| getNodeType()==AbstractParseNode.REJECT
+    		|| getNodeType()== AbstractParseNode.PREFER
+    		|| getNodeType()==AbstractParseNode.AVOID
+    	);
+    }
+
+    public boolean isParseRejectNode(){
+    	return getNodeType()==AbstractParseNode.REJECT;
+    }
+
+    public boolean isParseProductionNode(){
+    	return getNodeType()==AbstractParseNode.PARSE_PRODUCTION_NODE;
+    }
+
+    abstract public int getNodeType();
+    abstract public AbstractParseNode[] getChildren();
+    
     protected static final int NO_HASH_CODE = 0;
 
     public abstract Object toTreeBottomup(BottomupTreeBuilder builder);
@@ -20,10 +50,16 @@
     
     @Override
 	abstract public boolean equals(Object obj);
+    
     @Override
 	abstract public int hashCode();
+    
+    public void setCachedHashCode(){
+    	//Hashcode is cached for ParseNodes (not for PPNs)
+    }
 
     abstract public String toStringShallow();
+    
     @Override
 	abstract public String toString();
     

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Wed Apr 27 08:01:08 2011	(r22599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Wed Apr 27 08:17:49 2011	(r22600)
@@ -315,7 +315,7 @@
 	}
 
 	private IStrategoTerm getProduction(AbstractParseNode t) {
-		if (t instanceof ParseNode) {
+		if (t.isParseNode()) {
 			return parseTable.getProduction(((ParseNode) t).getLabel());
 		} else {
 			return parseTable.getProduction(((ParseProductionNode) t).getProduction());
@@ -358,7 +358,7 @@
 	private AbstractParseNode selectOnTopSort(AbstractParseNode t, String sort) throws FilterException {
 		final List<AbstractParseNode> results = new ArrayList<AbstractParseNode>();
 
-		if (t instanceof Amb) {
+		if (t.isAmbNode()) {
 			addTopSortAlternatives(t, sort, results);
 
 			switch (results.size()) {
@@ -366,7 +366,7 @@
 			case 1: return results.get(0);
 			default:
 				ambiguityManager.increaseAmbiguityCount();
-				return new Amb(results.toArray(new AbstractParseNode[results.size()]));
+				return ParseNode.createAmbNode(results.toArray(new AbstractParseNode[results.size()]));
 			}
 		} else {
 			final IStrategoTerm prod = getProduction(t);
@@ -375,8 +375,8 @@
 	}
 
 	private void addTopSortAlternatives(AbstractParseNode t, String sort, List<AbstractParseNode> results) throws FilterException {
-		for(final AbstractParseNode amb : ((Amb) t).getAlternatives()) {
-			if (amb instanceof Amb) {
+		for(final AbstractParseNode amb : t.getChildren()) {
+			if (amb.isAmbNode()) {
 				addTopSortAlternatives(amb, sort, results);
 			} else {
 				final IStrategoTerm prod = getProduction(amb);
@@ -394,25 +394,23 @@
 		}
 
 		// parseTable.setTreeBuilder(new Asfix2TreeBuilder());
-		// System.out.println(yieldTree(t));
-
-		if (t instanceof Amb) {
+		if (t.isAmbNode()) {
 			if (!inAmbiguityCluster) {
 				// (some cycle stuff should be done here)
-				final AbstractParseNode[] ambs = ((Amb)t).getAlternatives();
+				final AbstractParseNode[] ambs = t.getChildren();
 				t = filterAmbiguities(ambs);
 			} else {
 				// FIXME: hasRejectProd(Amb) can never succeed?
 				if (filterReject && parseTable.hasRejects() && hasRejectProd(t)) {
 					return null;
 				}
-				final AbstractParseNode[] ambs = ((Amb) t).getAlternatives();
+				final AbstractParseNode[] ambs = t.getChildren();
 				return filterAmbiguities(ambs);
 
 			}
-		} else if(t instanceof ParseNode) {
+		} else if(t.isParseNode()) {
 			final ParseNode node = (ParseNode) t;
-			final AbstractParseNode[] args = node.kids;
+			final AbstractParseNode[] args = node.getChildren();
 			final AbstractParseNode[] newArgs =
 				t.isParseProductionChain() ? null : filterTree(args, false);
 			// TODO: assert that parse production chains do not have reject nodes?
@@ -424,7 +422,7 @@
 			}
 
 			if (newArgs != null && args != newArgs)
-				t = new ParseNode(node.label, newArgs);
+				t = new ParseNode(node.getLabel(), newArgs, AbstractParseNode.PARSENODE);
 		} else if(t instanceof ParseProductionNode) {
 			// leaf node -- do thing (cannot be any ambiguities here)
 			return t;
@@ -511,7 +509,7 @@
 
 		AbstractParseNode r = t;
 
-		if (t instanceof ParseNode) {
+		if (t.isParseNode()) {
 			final Label prodLabel = getProductionLabel(t);
 			final ParseNode n = (ParseNode) t;
 
@@ -533,7 +531,7 @@
 					if(Tools.debugging) {
 						Tools.debug(" - found");
 					}
-					if (r instanceof Amb) {
+					if (r.isAmbNode()) {
 						return r;
 					}
 					return applyPriorityFilter((ParseNode) r, prodLabel);
@@ -556,19 +554,19 @@
 		}
 
 		final List<AbstractParseNode> newAmbiguities = new ArrayList<AbstractParseNode>();
-		final AbstractParseNode[] kids = t.kids;
+		final AbstractParseNode[] kids = t.getChildren();
 		final AbstractParseNode firstKid = kids[0];
 
-		if(firstKid instanceof Amb) {
+		if(firstKid.isAmbNode()) {
 
-			for (final AbstractParseNode amb : ((Amb)firstKid).getAlternatives()) {
+			for (final AbstractParseNode amb : firstKid.getChildren()) {
 				if(((ParseNode)amb).getLabel() != prodLabel.labelNumber) {
 					newAmbiguities.add(amb);
 				}
 			}
 
 			final int additionalAmbNodes = newAmbiguities.isEmpty() ? 0 : 1;
-			final AbstractParseNode[] restKids = new AbstractParseNode[t.kids.length - 1 + additionalAmbNodes];
+			final AbstractParseNode[] restKids = new AbstractParseNode[t.getChildren().length - 1 + additionalAmbNodes];
 			for(int i = 0; i < restKids.length; i++) {
 				restKids[i] = kids[i + 1];
 			}
@@ -577,7 +575,7 @@
 					if(!newAmbiguities.isEmpty()) {
 						AbstractParseNode extraAmb;
 						if(newAmbiguities.size() > 1) {
-							extraAmb = new Amb(newAmbiguities.toArray(new AbstractParseNode[newAmbiguities.size()]));
+							extraAmb = ParseNode.createAmbNode(newAmbiguities.toArray(new AbstractParseNode[newAmbiguities.size()]));
 							ambiguityManager.increaseAmbiguityCount();
 						} else {
 							extraAmb = newAmbiguities.get(0);
@@ -588,9 +586,9 @@
 					}
 
 					// FIXME is this correct?
-					return new ParseNode(t.label, restKids);
+					return new ParseNode(t.getLabel(), restKids, AbstractParseNode.PARSENODE);
 
-		} else if(firstKid instanceof ParseNode) {
+		} else if(firstKid.isParseNode()) {
 			if(((ParseNode)firstKid).getLabel() == prodLabel.labelNumber) {
 				throw new FilterException(parser);
 			}
@@ -611,16 +609,16 @@
 		final int l0 = prodLabel.labelNumber;
 		int kidnumber = 0;
 
-		for (final AbstractParseNode kid : t.kids) {
+		for (final AbstractParseNode kid : t.getChildren()) {
 			AbstractParseNode newKid = kid;
 			final AbstractParseNode injection = jumpOverInjections(kid);
 
-			if (injection instanceof Amb) {
+			if (injection.isAmbNode()) {
 				newAmbiguities.clear();
-				for (final AbstractParseNode amb : ((Amb) injection).getAlternatives()) {
+				for (final AbstractParseNode amb : injection.getChildren()) {
 					final AbstractParseNode injAmb = jumpOverInjections(amb);
 
-					if (injAmb instanceof ParseNode) {
+					if (injAmb.isParseNode()) {
 						final Label label = getProductionLabel(t);
 						if(hasGreaterPriority(l0, label.labelNumber, kidnumber)) {
 							newAmbiguities.add(amb);
@@ -631,7 +629,7 @@
 				if(!newAmbiguities.isEmpty()) {
 					AbstractParseNode n = null;
 					if(newAmbiguities.size() > 1) {
-						n = new Amb(newAmbiguities.toArray(new AbstractParseNode[newAmbiguities.size()]));
+						n = ParseNode.createAmbNode(newAmbiguities.toArray(new AbstractParseNode[newAmbiguities.size()]));
 						ambiguityManager.increaseAmbiguityCount();
 					} else {
 						n = newAmbiguities.get(0);
@@ -646,8 +644,8 @@
 								return t;
 					}
 				}
-			} else if (injection instanceof ParseNode) {
-				final int l1 = ((ParseNode) injection).label;
+			} else if (injection.isParseNode()) {
+				final int l1 = ((ParseNode) injection).getLabel();
 				if (hasGreaterPriority(l0, l1, kidnumber)) {
 					throw new FilterException(parser);
 				}
@@ -658,7 +656,7 @@
 		}
 
 		// FIXME (KTK) get rid of toArray by precomputing the necessary size of newKids earlier in the method
-		return new ParseNode(t.label, newKids.toArray(new AbstractParseNode[newKids.size()]));
+		return new ParseNode(t.getLabel(), newKids.toArray(new AbstractParseNode[newKids.size()]), AbstractParseNode.PARSENODE);
 	}
 
 	private AbstractParseNode replaceUnderInjections(AbstractParseNode alt, AbstractParseNode injection, AbstractParseNode n)
@@ -685,14 +683,14 @@
 			Tools.debug("jumpOverInjections() - ", t);
 		}
 
-		if (t instanceof ParseNode) {
-			int prod = ((ParseNode) t).label;
+		if (t.isParseNode()) {
+			int prod = ((ParseNode) t).getLabel();
 			ParseNode n = (ParseNode)t;
 			while (isUserDefinedLabel(prod)) {
 				final AbstractParseNode x = n.kids[0];
-				if(x instanceof ParseNode) {
+				if(x.isParseNode()) {
 					n = (ParseNode)x;
-					prod = n.label;
+					prod = n.getLabel();
 				} else {
 					return x;
 				}
@@ -741,10 +739,10 @@
 		final AbstractParseNode[] kids = t.kids;
 		AbstractParseNode last = kids[kids.length - 1];
 
-		if (last instanceof Amb) {
+		if (last.isAmbNode()) {
 
-			for (final AbstractParseNode amb : ((Amb) last).getAlternatives()) {
-				if (amb instanceof Amb
+			for (final AbstractParseNode amb : last.getChildren()) {
+				if (amb.isAmbNode()
 						|| !parseTable.getLabel(((ParseNode) amb).getLabel()).equals(prodLabel)) {
 					newAmbiguities.add(amb);
 				}
@@ -758,18 +756,18 @@
 
 				
 				if (newAmbiguities.size() > 1) {
-					last = new Amb(newAmbiguities.toArray(new AbstractParseNode[newAmbiguities.size()]));
+					last = ParseNode.createAmbNode(newAmbiguities.toArray(new AbstractParseNode[newAmbiguities.size()]));
 					ambiguityManager.increaseAmbiguityCount();
 				} else {
 					last = newAmbiguities.get(0);
 				}
 				rest[rest.length - 1] = last;
 				ambiguityManager.increaseAmbiguityCount();
-				return new Amb(rest);
+				return ParseNode.createAmbNode(rest);
 			} else {
 				throw new FilterException(parser);
 			}
-		} else if (last instanceof ParseNode) {
+		} else if (last.isParseNode()) {
 			final Label other = parseTable.getLabel(((ParseNode) last).getLabel());
 			if (prodLabel.equals(other)) {
 				throw new FilterException(parser);
@@ -780,7 +778,7 @@
 	}
 
 	private Label getProductionLabel(AbstractParseNode t) {
-		if (t instanceof ParseNode) {
+		if (t.isParseNode()) {
 			return parseTable.getLabel(((ParseNode) t).getLabel());
 		} else if (t instanceof ParseProductionNode) {
 			return parseTable.getLabel(((ParseProductionNode) t).getProduction());
@@ -789,7 +787,7 @@
 	}
 
 	private boolean hasRejectProd(AbstractParseNode t) {
-		return t instanceof ParseReject;
+		return t.isParseRejectNode();
 	}
 
 	private AbstractParseNode filterAmbiguities(AbstractParseNode[] ambs) throws FilterException {
@@ -827,7 +825,7 @@
 		}
 
 		ambiguityManager.increaseAmbiguityCount();
-		return new Amb(newAmbiguities.toArray(new AbstractParseNode[newAmbiguities.size()]));
+		return ParseNode.createAmbNode(newAmbiguities.toArray(new AbstractParseNode[newAmbiguities.size()]));
 	}
 
 	private List<AbstractParseNode> filterAmbiguityList(List<AbstractParseNode> ambs, AbstractParseNode t) {
@@ -907,7 +905,7 @@
 	private int filterPermissiveLiterals(AbstractParseNode left, AbstractParseNode right) {
 		// Work-around for http://bugs.strategoxt.org/browse/SPI-5 (Permissive grammars introduce ambiguities for literals)
 
-		if (left instanceof ParseNode && right instanceof ParseNode) {
+		if (left.isParseNode() && right.isParseNode()) {
 			final AbstractParseNode[] leftKids = ((ParseNode) left).kids;
 			final AbstractParseNode[] rightKids = ((ParseNode) right).kids;
 			if (leftKids.length > 0 && rightKids.length == 1) {
@@ -946,10 +944,10 @@
 	private int countAllInjections(AbstractParseNode t) {
 		// SG_CountAllInjectionsInTree
 		// - ok
-		if (t instanceof Amb) {
+		if (t.isAmbNode()) {
 			// Trick from forest.c
-			return countAllInjections(((Amb) t).getAlternatives()[0]);
-		} else if (t instanceof ParseNode) {
+			return countAllInjections(t.getChildren()[0]);
+		} else if (t.isParseNode()) {
 			final int c = getProductionLabel(t).isInjection() ? 1 : 0;
 			return c + countAllInjections(((ParseNode) t).kids);
 		}
@@ -1009,9 +1007,9 @@
 	private int countPrefers(AbstractParseNode t) {
 		// SG_CountPrefersInTree
 		// - ok
-		if (t instanceof Amb) {
-			return countPrefers(((Amb) t).getAlternatives());
-		} else if (t instanceof ParseNode) {
+		if (t.isAmbNode()) {
+			return countPrefers(t.getChildren());
+		} else if (t.isParseNode()) {
 			final int type = getProductionType(t);
 			if (type == ProductionType.PREFER) {
 				return 1;
@@ -1036,9 +1034,9 @@
 	private int countAvoids(AbstractParseNode t) {
 		// SG_CountAvoidsInTree
 		// - ok
-		if (t instanceof Amb) {
-			return countAvoids(((Amb) t).getAlternatives());
-		} else if (t instanceof ParseNode) {
+		if (t.isAmbNode()) {
+			return countAvoids(t.getChildren());
+		} else if (t.isParseNode()) {
 			final int type = getProductionType(t);
 			if (type == ProductionType.PREFER) {
 				return 0;
@@ -1067,7 +1065,7 @@
 			Tools.debug("filterOnIndirectPrefers()");
 		}
 
-		if (left instanceof Amb || right instanceof Amb) {
+		if (left.isAmbNode() || right.isAmbNode()) {
 			return FILTER_DRAW;
 		}
 
@@ -1116,7 +1114,7 @@
 	}
 
 	private boolean isLeftMoreEager(AbstractParseNode left, AbstractParseNode right) {
-		assert !(left instanceof Amb || right instanceof Amb);
+		assert !(left.isAmbNode() || right.isAmbNode());
 		if (isMoreEager(left, right)) {
 			return true;
 		}
@@ -1124,7 +1122,7 @@
 		final AbstractParseNode newLeft = jumpOverInjectionsModuloEagerness(left);
 		final AbstractParseNode newRight = jumpOverInjectionsModuloEagerness(right);
 
-		if (newLeft instanceof ParseNode && newRight instanceof ParseNode) {
+		if (newLeft.isParseNode() && newRight.isParseNode()) {
 			return isMoreEager(newLeft, newRight);
 		}
 
@@ -1139,7 +1137,7 @@
 
 		final int prodType = getProductionType(t);
 
-		if (t instanceof ParseNode && prodType != ProductionType.PREFER
+		if (t.isParseNode() && prodType != ProductionType.PREFER
 				&& prodType != ProductionType.AVOID) {
 
 			Label prod = getLabel(t);
@@ -1148,7 +1146,7 @@
 				t = ((ParseNode) t).kids[0];
 
 
-				if (t instanceof ParseNode) {
+				if (t.isParseNode()) {
 					final int prodTypeX = getProductionType(t);
 
 					if (prodTypeX != ProductionType.PREFER
@@ -1164,9 +1162,9 @@
 	}
 
 	private Label getLabel(AbstractParseNode t) {
-		if (t instanceof ParseNode) {
+		if (t.isParseNode()) {
 			final ParseNode n = (ParseNode) t;
-			return parseTable.getLabel(n.label);
+			return parseTable.getLabel(n.getLabel());
 		} else if (t instanceof ParseProductionNode) {
 			final ParseProductionNode n = (ParseProductionNode) t;
 			return parseTable.getLabel(n.prod);
@@ -1233,7 +1231,7 @@
 				Tools.debug(" bumping");
 			}
 			return null;
-		} else if (t instanceof ParseNode) {
+		} else if (t.isParseNode()) {
 			//Amb ambiguities = null;
 			List<AbstractParseNode> cycle = null;
 			//int clusterIndex;

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java	Wed Apr 27 08:01:08 2011	(r22599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java	Wed Apr 27 08:17:49 2011	(r22600)
@@ -332,12 +332,17 @@
         }            
         return stackStrings;
     }
-   
+
+	public void cacheHashCodeLabels() {
+		for (int i = 0; i < stepsCount; i++) {
+			Link ln = steps[i];
+			ln.label.setCachedHashCode();
+		}
+	}
+
     //mj debug
     public String[] getStackRepresentation(boolean avoidFree){
         List<String> stackStrings=this.getStackPaths("", avoidFree);
         return stackStrings.toArray(new String[stackStrings.size()]);
-    }
-    
-  
+    }      
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Link.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Link.java	Wed Apr 27 08:01:08 2011	(r22599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Link.java	Wed Apr 27 08:17:49 2011	(r22600)
@@ -62,11 +62,12 @@
     }
 
     public void addAmbiguity(AbstractParseNode t, int tokensSeen) {
+    	assert(label instanceof ParseNode);
         if(Tools.tracing) {
             SGLR.TRACE("SG_CreateAmbCluster() - " + tokensSeen);
         }
-        label = new Amb(label, t);
-       
+        ((ParseNode)label).toAmbiguity(t);
+        //label = new Amb(label, t);
     }
     
     @Override

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java	Wed Apr 27 08:01:08 2011	(r22599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java	Wed Apr 27 08:17:49 2011	(r22600)
@@ -11,6 +11,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.imploder.TopdownTreeBuilder;
@@ -18,49 +19,120 @@
 
 public class ParseNode extends AbstractParseNode {
 
-    final int label;
+    private int label;
 
-    final AbstractParseNode[] kids;
+    AbstractParseNode[] kids;
     
     private boolean isParseProductionChain;
 
-    private int cachedHashCode;
+    private boolean isSetPPC;
+    
+    private int nodeType;
+
+    private int cachedHashCode; 
 
-    public ParseNode(int label, AbstractParseNode[] kids) {
+    public int getLabel() {
+    	if(isAmbNode())
+    		throw new NotImplementedException();
+    	return label;
+    }
+
+    public ParseNode(int label, AbstractParseNode[] kids, int type) {
+    	setFields(label, kids, type);
+    	if(type == AbstractParseNode.AMBIGUITY){
+        	this.isParseProductionChain=false;
+        	this.isSetPPC=true;
+        	this.label = -1;
+    	}
+    }
+    
+    public static ParseNode createAmbNode(AbstractParseNode[] kids){
+    	ParseNode amb = new ParseNode(-1, kids, AbstractParseNode.AMBIGUITY);
+    	return amb;
+    }
+
+	private void setFields(int label, AbstractParseNode[] kids, int type) {
+		assert (type!=AbstractParseNode.AMBIGUITY || (label==-1));
+		this.nodeType = type;
         this.label = label;
         this.kids = kids;
-        isParseProductionChain = calculateIsParseProdChain(kids);
-        // TODO: Optimize - create compact representation for parse production chains
-    }
+        this.isParseProductionChain = false;
+        this.isSetPPC=false;
+ 	}
+	
+	public void toAmbiguity(AbstractParseNode pn){
+		if(this.equals(pn))
+			return;
+		ParseNode left = new ParseNode(this.label, this.kids, this.nodeType); 
+		left.cachedHashCode = this.cachedHashCode;
+		this.cachedHashCode = NO_HASH_CODE;
+		if(pn instanceof ParseNode)
+			((ParseNode) pn).replaceDescendant(this, left); //prevent cycles
+		setFields(-1, new AbstractParseNode[] { left, pn }, AbstractParseNode.AMBIGUITY);
+	}
+	
+	private void replaceDescendant(ParseNode before, ParseNode after){ //only reductions for current char (right chain) are inspected
+		if(kids.length > 0 ){ 
+			replaceDescendantAt(before, after, kids.length-1);			
+		}
+		if(isAmbNode() && kids.length >1){
+			replaceDescendantAt(before, after, kids.length-2);			
+		}
+	}
 
-	private static boolean calculateIsParseProdChain(AbstractParseNode[] kids) {
-		switch (kids.length) {
-        	case 2:
-        		return
-        			kids[0] instanceof ParseProductionNode /*kids[0].isParseProductionChain()*/
-        			&& kids[1].isParseProductionChain();
-        	case 1:
-        		return kids[0].isParseProductionChain();
-        	default:
-        		return false;
-        }
+	private void replaceDescendantAt(ParseNode before, ParseNode after, int index) {
+		AbstractParseNode kid = kids[index];
+		if(kid==before){
+			kids[index]=after; 
+			return; //no further inspection needed since cycles should not occur
+		}
+		else if(kid instanceof ParseNode){
+			((ParseNode)kid).replaceDescendant(before, after);
+		}
 	}
-    
+	    
     @Override
 	public boolean isParseProductionChain() {
+    	//REMARK: works because PPC property is not set during parsing, so descendants will not change
 		// assert isParseProductionChain == calculateIsParseProdChain(kids);
+    	if(!isSetPPC)
+    		deepSetIsParseProdChain();
 		return isParseProductionChain;
 	}
     
-    @Override
+	private void deepSetIsParseProdChain(){
+		if(!isSetPPC){
+			for (int i = 0; i < kids.length; i++) {
+				if(kids[i].isParseNode() || kids[i].isAmbNode())
+					((ParseNode)kids[i]).deepSetIsParseProdChain();
+			}
+			this.isParseProductionChain=false;
+			if (kids.length == 2 && !isAmbNode()) {
+	    		this.isParseProductionChain =
+	    			kids[0] instanceof ParseProductionNode /*kids[0].isParseProductionChain()*/
+	    			&& kids[1].isParseProductionChain();
+	        }
+			else if (kids.length == 1) {
+	    		this.isParseProductionChain = kids[0].isParseProductionChain();
+	        } 
+			isSetPPC=true;
+		}
+	}
+
+	@Override 
     public Object toTreeTopdown(TopdownTreeBuilder builder) {
+    	if(isAmbNode())
+        	return builder.buildTreeAmb(this);
     	return builder.buildTreeNode(this);
     }
 
-    @Override
+    //TODO: refactor
+    @Override 
 	public Object toTreeBottomup(BottomupTreeBuilder builder) {
+    	if(isAmbNode()){
+    		return toTreeBottomupAmb(builder);
+    	}
     	builder.visitLabel(label);
-
         ArrayList<Object> subtrees = new ArrayList<Object>(kids.length);
         for (int i = 0; i < kids.length; i++) {
         	subtrees.add(kids[i].toTreeBottomup(builder));
@@ -70,6 +142,24 @@
         builder.endVisitLabel(label);
 		return result;
     }
+    
+	
+	public Object toTreeBottomupAmb(BottomupTreeBuilder builder) {
+    	ArrayList<Object> collect = new ArrayList<Object>();
+    	addToTreeAmb(builder, collect);
+    	return builder.buildAmb(collect);
+    }
+        
+    private void addToTreeAmb(BottomupTreeBuilder builder, List<Object> collect) {
+    	for (int i = kids.length - 1; i >= 0; i--) {
+    		AbstractParseNode alt = kids[i];
+    		if (alt.isAmbNode()) {
+    			((ParseNode) alt).addToTreeAmb(builder, collect);
+    		} else {
+    			collect.add(alt.toTreeBottomup(builder));
+    		}
+    	}
+    }
 
     /**
      * todo: stolen from TAFReader; move elsewhere
@@ -84,13 +174,28 @@
 
     @Override
     public String toString() {
-        return "regular(aprod(" + label + ")," + Arrays.toString(kids) + ")";
-    }
+    	switch (nodeType) {
+		case AbstractParseNode.AMBIGUITY:
+    		return "amb(" + Arrays.toString(kids) + ")";
+		case AbstractParseNode.PARSENODE:
+	        return "regular(aprod(" + label + ")," + Arrays.toString(kids) + ")";
+		case AbstractParseNode.AVOID:
+			return "avoid(" + getLabel() + "," + kids + ")";
+		case AbstractParseNode.PREFER:
+			return "prefer(" + getLabel() + "," + kids + ")";
+		case AbstractParseNode.REJECT:
+		    return "reject(" + getLabel() + "," + kids + ")";
+		default:
+			throw new NotImplementedException();
+		}
+    }
+
+	@Override
+	public int getNodeType() {
+		return nodeType;
+	}
 
-    public int getLabel() {
-    	return label;
-    }
-    
+    @Override
     public AbstractParseNode[] getChildren() {
 		return kids;
 	}
@@ -101,9 +206,11 @@
             return false;
         if (obj == this)
             return true;
-        ParseNode o = (ParseNode)obj;
-        if(label != o.label || kids.length != o.kids.length
-                || hashCode() != o.hashCode())
+        final ParseNode o = (ParseNode)obj;
+        if (getNodeType() != o.getNodeType() || 
+        	label != o.label || 
+        	kids.length != o.kids.length || 
+        	hashCode() != o.hashCode())
             return false;
         for(int i = 0; i < kids.length; i++) {
             if(!kids[i].equals(o.kids[i]))
@@ -120,12 +227,31 @@
         int result = prime * label;
         for(AbstractParseNode n : kids)
             result += (prime * n.hashCode());
-        cachedHashCode = result;
+        //cachedHashCode = result; //Does not work if descendant nodes change (toAmbiguity) during parsing
         return result;
     }
+    
+    @Override    
+    public void setCachedHashCode(){
+        for(AbstractParseNode n : kids)
+            n.setCachedHashCode();
+        cachedHashCode = hashCode();
+    }
 
     @Override
     public String toStringShallow() {
+    	if (isAmbNode())
+    		return "Amb";
         return "regular*(" + label + ", {" +  kids.length + "})";
     }
+	
+	/*
+	private void log(){
+		System.out.println(this.toStringShallow());
+		for (int i = 0; i < kids.length; i++) {
+			if(kids[i].isParseNode() || kids[i].isAmbNode())
+				((ParseNode)kids[i]).log();			
+		}
+	}*/
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseProductionNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseProductionNode.java	Wed Apr 27 08:01:08 2011	(r22599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseProductionNode.java	Wed Apr 27 08:17:49 2011	(r22600)
@@ -7,6 +7,7 @@
  */
 package org.spoofax.jsglr.client;
 
+import org.spoofax.NotImplementedException;
 import org.spoofax.jsglr.client.imploder.TopdownTreeBuilder;
 
 
@@ -56,4 +57,14 @@
     public String toStringShallow() {
         return "prod*(" + prod + ")";
     }
+
+	@Override
+	public int getNodeType() {
+		return AbstractParseNode.PARSE_PRODUCTION_NODE;
+	}
+
+	@Override
+	public AbstractParseNode[] getChildren() {
+		throw new NotImplementedException();
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Production.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Production.java	Wed Apr 27 08:01:08 2011	(r22599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Production.java	Wed Apr 27 08:17:49 2011	(r22600)
@@ -36,13 +36,13 @@
     public AbstractParseNode apply(AbstractParseNode[] kids) {
         switch(status) {
         case REJECT:
-            return new ParseReject(label, kids);
+            return new ParseNode(label, kids, AbstractParseNode.REJECT);
         case AVOID:
-            return new ParseAvoid(label, kids);
+            return new ParseNode(label, kids, AbstractParseNode.AVOID);
         case PREFER:
-            return new ParsePrefer(label, kids);
+            return new ParseNode(label, kids, AbstractParseNode.PREFER);
         case NO_TYPE:
-            return new ParseNode(label, kids);
+            return new ParseNode(label, kids, AbstractParseNode.PARSENODE);
         }
         throw new IllegalStateException();
     }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Wed Apr 27 08:01:08 2011	(r22599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Wed Apr 27 08:17:49 2011	(r22600)
@@ -403,8 +403,8 @@
 		final AbstractParseNode prod = parseTable.lookupProduction(currentToken);
 
 		while (forShifter.size() > 0) {
-
 			final ActionState as = forShifter.remove();
+			as.st.cacheHashCodeLabels(); //labels will not change
 			if (!parseTable.hasRejects() || !as.st.allLinksRejected()) {				
 				Frame	st1=findStack(activeStacks, as.s);
 				if(st1==null){				
@@ -1224,7 +1224,7 @@
 					st1.state.stateNumber, " ", (prod.isRejectProduction() ? "{reject}" : ""));
 			if (nl.label instanceof ParseNode) {
 				Tools.logger("nl is ", nl.isRejected() ? "{reject}" : "", " for ",
-						((ParseNode) nl.label).label);
+						((ParseNode) nl.label).getLabel());
 			}
 		}
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TopdownTreeBuilder.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TopdownTreeBuilder.java	Wed Apr 27 08:01:08 2011	(r22599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TopdownTreeBuilder.java	Wed Apr 27 08:17:49 2011	(r22600)
@@ -1,7 +1,6 @@
 package org.spoofax.jsglr.client.imploder;
 
 import org.spoofax.jsglr.client.AbstractParseNode;
-import org.spoofax.jsglr.client.Amb;
 import org.spoofax.jsglr.client.ITreeBuilder;
 import org.spoofax.jsglr.client.ParseNode;
 import org.spoofax.jsglr.client.ParseProductionNode;
@@ -29,8 +28,8 @@
 		} else if (node instanceof ParseProductionNode) {
 			return buildTreeProduction((ParseProductionNode) node);
 		} else {
-			assert node instanceof Amb;
-			return buildTreeAmb((Amb) node);
+			assert node.isAmbNode();
+			return buildTreeAmb((ParseNode)node);
 		}
 	}
 	
@@ -46,5 +45,5 @@
 
 	public abstract Object buildTreeProduction(ParseProductionNode node);
 
-	public abstract Object buildTreeAmb(Amb node);
+	public abstract Object buildTreeAmb(ParseNode node);
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TreeBuilder.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TreeBuilder.java	Wed Apr 27 08:01:08 2011	(r22599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TreeBuilder.java	Wed Apr 27 08:17:49 2011	(r22600)
@@ -13,7 +13,6 @@
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.AbstractParseNode;
-import org.spoofax.jsglr.client.Amb;
 import org.spoofax.jsglr.client.ParseNode;
 import org.spoofax.jsglr.client.ParseProductionNode;
 import org.spoofax.jsglr.client.ParseTable;
@@ -284,16 +283,16 @@
 	}
 
 	@Override
-	public Object buildTreeAmb(Amb a) {
+	public Object buildTreeAmb(ParseNode a) {
 		if (inLexicalContext) {
 			// Ignore ambiguities in lexicals; can't show them in AST
-			return a.getAlternatives()[0].toTreeTopdown(this);
+			return a.getChildren()[0].toTreeTopdown(this);
 		}
 		
 		final int oldOffset = offset;
 		final int oldBeginOffset = tokenizer.getStartOffset();
 		final boolean oldLexicalContext = inLexicalContext;
-		final AbstractParseNode[] subnodes = a.getAlternatives();
+		final AbstractParseNode[] subnodes = a.getChildren();
 		final ArrayList<Object> children =
 			new ArrayList<Object>(max(EXPECTED_NODE_CHILDREN, subnodes.length));
 		tokenizer.setAmbiguous(true);

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/test/org/spoofax/jsglr/tests/TestAbstractParseNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/test/org/spoofax/jsglr/tests/TestAbstractParseNode.java	Wed Apr 27 08:01:08 2011	(r22599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/test/org/spoofax/jsglr/tests/TestAbstractParseNode.java	Wed Apr 27 08:17:49 2011	(r22600)
@@ -21,10 +21,10 @@
     @Override
     protected void setUp() throws Exception {
         AbstractParseNode[]  r0 = { new ParseProductionNode(123) };
-        pn0 = new ParseNode(233, r0);
+        pn0 = new ParseNode(233, r0, AbstractParseNode.PARSENODE);
 
         AbstractParseNode[] r1 = { new ParseProductionNode(123) };
-        pn1 = new ParseNode(233, r1);
+        pn1 = new ParseNode(233, r1, AbstractParseNode.PARSENODE);
     }
 
     public void testHashCode() {

From L.C.L.Kats at tudelft.nl  Wed Apr 27 10:30:15 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 08:30:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22601 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder
Message-ID: <20110427083015.64DD87F8044@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 08:30:14 2011
New Revision: 22601
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22601&sc=1

Log:
Introduced the notion of 'compact' imploder attachments that only have position information

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ListImploderAttachment.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/NullTokenizer.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java	Wed Apr 27 08:17:49 2011	(r22600)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java	Wed Apr 27 08:30:14 2011	(r22601)
@@ -136,7 +136,9 @@
 	}
 
 	public String toString(int startOffset, int endOffset) {
-		return getInput().substring(startOffset, endOffset + 1);
+		return getInput() == null
+			? null
+			: getInput().substring(startOffset, endOffset + 1);
 	}
 	
 	public static boolean isErrorInRange(IToken start, IToken end) {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java	Wed Apr 27 08:17:49 2011	(r22600)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java	Wed Apr 27 08:30:14 2011	(r22601)
@@ -1,7 +1,10 @@
 package org.spoofax.jsglr.client.imploder;
 
+import static org.spoofax.jsglr.client.imploder.IToken.TK_UNKNOWN;
+
 import org.spoofax.interpreter.terms.ISimpleTerm;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.TermVisitor;
 import org.spoofax.terms.attachments.AbstractTermAttachment;
 import org.spoofax.terms.attachments.OriginAttachment;
 import org.spoofax.terms.attachments.TermAttachmentType;
@@ -55,6 +58,10 @@
 		return sort;
 	}
 	
+	public boolean isSequenceAttachment() {
+		return false;
+	}
+	
 	/**
 	 * The element sort for list terms.
 	 * 
@@ -136,6 +143,40 @@
 	}
 	
 	/**
+	 * Creates a compact position information attachment for a term.
+	 */
+	public static ImploderAttachment getCompactPositionAttachment(IStrategoTerm term, boolean useOnlyFirstAttach) {
+		if (useOnlyFirstAttach) {
+			FirstAttachFetcher fetcher = new FirstAttachFetcher();
+			fetcher.visit(term);
+			return getCompactPositionAttachment(fetcher.result, fetcher.result);
+		} else {
+			FirstLastAttachFetcher fetcher = new FirstLastAttachFetcher();
+			fetcher.visit(term);
+			return getCompactPositionAttachment(fetcher.first, fetcher.last);
+		}
+	}
+	
+	public static ImploderAttachment getCompactPositionAttachment(
+			ImploderAttachment first, ImploderAttachment last) {
+		if (first == null || last == null) return null;
+		
+		IToken left = first.getLeftToken();
+		IToken right = last.getRightToken();
+		String filename = left.getTokenizer().getFilename();
+		
+		return createCompactPositionAttachment(filename, left.getLine(), left.getColumn(), left.getStartOffset(), right.getEndOffset());
+	}
+	
+	public static ImploderAttachment createCompactPositionAttachment(
+			String filename, int line, int column, int startOffset, int endOffset) {
+		Token token = new Token(null, 0, line, column, startOffset, endOffset, TK_UNKNOWN);
+		NullTokenizer newTokenizer = new NullTokenizer(null, filename, token);
+		token.setTokenizer(newTokenizer);
+		return new ImploderAttachment(null, token, token);
+	}
+
+	/**
 	 * @param isAnonymousSequence  True if the term is an unnamed sequence like a list or tuple.
 	 */
 	public static void putImploderAttachment(ISimpleTerm term, boolean isAnonymousSequence, String sort, IToken leftToken, IToken rightToken) {
@@ -152,4 +193,40 @@
 			return "(" + sort + ",null)";
 		}
 	}
+	
+	/**
+	 * An inner class that fetches the first imploder atachment
+	 * in a tree.
+	 * 
+	 * @author Lennart Kats <lennart add lclnet.nl>
+	 */
+	static class FirstAttachFetcher extends TermVisitor {
+		ImploderAttachment result;
+		public void preVisit(IStrategoTerm term) {
+			term = OriginAttachment.tryGetOrigin(term);
+			ImploderAttachment attach = ImploderAttachment.get(term);
+			result = attach;
+		}
+		@Override
+		public boolean isDone(IStrategoTerm term) {
+			return result != null;
+		}
+	}
+	
+	/**
+	 * An inner class that fetches the first and last imploder atachment
+	 * in a tree.
+	 * 
+	 * @author Lennart Kats <lennart add lclnet.nl>
+	 */
+	static class FirstLastAttachFetcher extends TermVisitor {
+		ImploderAttachment first, last;
+		public void preVisit(IStrategoTerm term) {
+			term = OriginAttachment.tryGetOrigin(term);
+			ImploderAttachment attach = term.getAttachment(TYPE);
+			if (attach == null) return;
+			if (first == null) first = attach;
+			last = attach;
+		}
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ListImploderAttachment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ListImploderAttachment.java	Wed Apr 27 08:17:49 2011	(r22600)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ListImploderAttachment.java	Wed Apr 27 08:30:14 2011	(r22601)
@@ -29,4 +29,9 @@
 	public String getElementSort() {
 		return super.getSort();
 	}
+	
+	@Override
+	public boolean isSequenceAttachment() {
+		return true;
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/NullTokenizer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/NullTokenizer.java	Wed Apr 27 08:17:49 2011	(r22600)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/NullTokenizer.java	Wed Apr 27 08:30:14 2011	(r22601)
@@ -6,6 +6,8 @@
 import org.spoofax.interpreter.terms.ISimpleTerm;
 
 /**
+ * A special tokenizer that has only one token.
+ * 
  * @author Lennart Kats <lennart add lclnet.nl>
  * @author Karl Trygve Kalleberg <karltk near strategoxt dot org>
  */
@@ -13,9 +15,17 @@
 	
 	private final IToken onlyToken;
 	
+	public NullTokenizer(String input, String filename, Token onlyToken) {
+		super(input, filename);
+		this.onlyToken = onlyToken;
+		assert onlyToken.getTokenizer() == null || onlyToken.getTokenizer() == this;
+		onlyToken.setTokenizer(this);
+	}
+		
 	public NullTokenizer(String input, String filename) {
 		super(input, filename);
-		onlyToken = new Token(this, 0, 0, 0, 0, input == null ? 0 : input.length() - 1, IToken.TK_UNKNOWN);
+		onlyToken = new Token(this, 0, 0, 0, 0,
+				input == null ? 0 : input.length() - 1, IToken.TK_UNKNOWN);
 	}
 
 	public int getStartOffset() {

From L.C.L.Kats at tudelft.nl  Wed Apr 27 10:31:03 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 08:31:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22602 - in
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax:
	interpreter/terms terms terms/attachments
Message-ID: <20110427083103.C81BF7F800C@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 08:31:03 2011
New Revision: 22602
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22602&sc=1

Log:
Added a stripper class. We need a stripper class.

Added:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentStripper.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTermBuilder.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/TermConverter.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractTermFactory.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTermBuilder.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTermBuilder.java	Wed Apr 27 08:30:14 2011	(r22601)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTermBuilder.java	Wed Apr 27 08:31:03 2011	(r22602)
@@ -24,7 +24,7 @@
     public IStrategoString makeString(String s);
     public IStrategoList makeList();
     public IStrategoList makeList(IStrategoTerm... terms);
-    public IStrategoList makeList(Collection<IStrategoTerm> terms);
+    public IStrategoList makeList(Collection<? extends IStrategoTerm> terms);
 
 	public IStrategoAppl makeAppl(IStrategoConstructor constructor, IStrategoTerm[] kids, IStrategoList annotations);
 	public IStrategoList makeList(IStrategoTerm[] kids, IStrategoList annotations);

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/TermConverter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/TermConverter.java	Wed Apr 27 08:30:14 2011	(r22601)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/TermConverter.java	Wed Apr 27 08:31:03 2011	(r22602)
@@ -11,6 +11,8 @@
 
 import java.util.HashMap;
 
+import org.spoofax.terms.StrategoAnnotation;
+
 /**
  * Copies terms created by one {@link ITermFactory} to
  * terms created by another (or the same) factory. 
@@ -83,6 +85,33 @@
         	factory.replaceTerm(result, term);
         return result;
     }
+    
+    public IStrategoTerm convertShallow(IStrategoTerm term, IStrategoTerm[] kids, IStrategoList annos) {
+		switch (term.getTermType()) {
+			case APPL:
+				IStrategoConstructor cons = ((IStrategoAppl)term).getConstructor();
+				return factory.makeAppl(cons, kids, annos);
+			case LIST:
+				return factory.makeList(kids, annos);
+			case INT:
+				int i = ((IStrategoInt) term).intValue();
+				return factory.annotateTerm(factory.makeInt(i), annos);
+			case REAL:
+				double r = ((IStrategoReal) term).realValue();
+				return factory.annotateTerm(factory.makeReal(r), annos);
+			case STRING:
+				String s = ((IStrategoString) term).stringValue();
+				return factory.annotateTerm(factory.makeString(s), annos);
+			case TUPLE:
+				return factory.makeTuple(kids, annos);
+			case BLOB:
+				return new StrategoAnnotation(factory, term, annos);
+			case CTOR:
+				return convert((IStrategoConstructor) term);
+			default:
+				throw new IllegalStateException("Unknown term type: " + term.getClass().getName()); 
+		}
+	}
 
     public final IStrategoAppl convert(IStrategoAppl term) {
         IStrategoTerm[] subTerms = convertAll(term.getAllSubterms());

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractTermFactory.java	Wed Apr 27 08:30:14 2011	(r22601)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractTermFactory.java	Wed Apr 27 08:31:03 2011	(r22602)
@@ -105,7 +105,7 @@
         return makeList(EMPTY, null);
     }
 
-    public IStrategoList makeList(Collection<IStrategoTerm> terms) {
+    public IStrategoList makeList(Collection<? extends IStrategoTerm> terms) {
         return makeList(terms.toArray(new IStrategoTerm[terms.size()]));
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Wed Apr 27 08:30:14 2011	(r22601)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Wed Apr 27 08:31:03 2011	(r22602)
@@ -222,7 +222,7 @@
 	public IStrategoPlaceholder makePlaceholder(IStrategoTerm template) {
         if (placeholderConstructor == null)
             placeholderConstructor = makeConstructor("<>", 1);
-        return new StrategoPlaceholder(placeholderConstructor, template, EMPTY_LIST, defaultStorageType);
+        return new StrategoPlaceholder(placeholderConstructor, template, makeList(), defaultStorageType);
 	}
     
     /*

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentStripper.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentStripper.java	Wed Apr 27 08:31:03 2011	(r22602)
@@ -0,0 +1,91 @@
+package org.spoofax.terms.attachments;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.terms.TermConverter;
+import org.spoofax.terms.StrategoListIterator;
+import org.spoofax.terms.TermFactory;
+
+/**
+ * Strips all attachments from a term
+ * 
+ * @see org.spoofax.jsglr.client.imploder.ImploderAttachment#getCompressedPositionAttachment()
+ *      Creates a compact position information attachment for a term.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class TermAttachmentStripper {
+	
+	private final ITermFactory factory;
+	
+	private final TermConverter converter;
+
+	public TermAttachmentStripper(ITermFactory factory) {
+		this.factory = factory;
+		this.converter = new TermConverter(factory);
+	}
+	
+	public IStrategoTerm strip(IStrategoTerm term) {
+		if (term == null)
+			return null;
+		
+		// Kids
+		boolean isRebuildNeeded = false;
+		IStrategoTerm[] kids = TermFactory.EMPTY;
+		if (term.getSubtermCount() > 0) {
+			kids = term.getAllSubterms();
+			IStrategoTerm[] newKids = tryStripKids(kids);
+			if (newKids != null) {
+				isRebuildNeeded = true;
+				kids = newKids;
+			}
+		}
+		
+		// Annotations
+		IStrategoList annos = term.getAnnotations();
+		IStrategoTerm[] newAnnos = tryStripAnnos(annos);
+		if (newAnnos != null) {
+			isRebuildNeeded = true;
+			annos = factory.makeList(newAnnos);
+		}
+		
+		// Self
+		if (!isRebuildNeeded)
+			isRebuildNeeded = term.getAttachment(null) != null;
+		
+		return isRebuildNeeded
+			? converter.convertShallow(term, kids, annos)
+			: term;
+	}
+	
+	private IStrategoTerm[] tryStripKids(IStrategoTerm[] oldKids) {
+		boolean isChanged = false;
+		IStrategoTerm[] newKids = null;
+		for (int i = 0; i < oldKids.length; i++) {
+			IStrategoTerm oldKid = oldKids[i];
+			IStrategoTerm newKid = strip(oldKid);
+			if (!isChanged && oldKid != newKid) {
+				newKids = oldKids.clone();
+				isChanged = true;
+			}
+			if (isChanged)
+				newKids[i] = newKid;
+		}
+		return newKids;
+	}
+	
+	private IStrategoTerm[] tryStripAnnos(IStrategoList oldAnnos) {
+		if (oldAnnos.isEmpty()) return null;
+		boolean isChanged = false;
+		IStrategoTerm[] newAnnos = new IStrategoTerm[oldAnnos.size()];
+		StrategoListIterator oldIterator = new StrategoListIterator(oldAnnos);
+		for (int i = 0; i < newAnnos.length; i++) {
+			IStrategoTerm oldAnno = oldIterator.next();
+			IStrategoTerm newAnno = strip(oldAnno);
+			isChanged |= oldAnno != newAnno;
+			newAnnos[i] = newAnno;
+		}
+		return isChanged ? newAnnos : null;
+	}
+}

From L.C.L.Kats at tudelft.nl  Wed Apr 27 10:32:32 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 08:32:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22603 - hydra/jobs
	strategoxt-java-backend/trunk/META-INF
	strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat
Message-ID: <20110427083232.91E1C108C00D@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 08:32:32 2011
New Revision: 22603
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22603&sc=1

Log:
Added org.spoofax.interpreter.library.language as a dependency

Modified:
   hydra/jobs/spoofax-imp.nix
   strategoxt-java-backend/trunk/META-INF/MANIFEST.MF
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Apr 27 08:31:03 2011	(r22602)
+++ hydra/jobs/spoofax-imp.nix	Wed Apr 27 08:32:32 2011	(r22603)
@@ -87,6 +87,7 @@
 	                 ${spoofax}/org.spoofax.compiler \
 	                 ${spoofax}/org.spoofax.interpreter.core \
 	                 ${spoofax}/org.spoofax.interpreter.library.jsglr \
+	                 ${spoofax}/org.spoofax.interpreter.library.language \
 	                 ${spoofax}/org.spoofax.jsglr \
 	                 ${spoofax}/org.spoofax.terms \
                          ${spoofaxImp}/org.strategoxt.imp.editors.aster \

Modified: strategoxt-java-backend/trunk/META-INF/MANIFEST.MF
==============================================================================
--- strategoxt-java-backend/trunk/META-INF/MANIFEST.MF	Wed Apr 27 08:31:03 2011	(r22602)
+++ strategoxt-java-backend/trunk/META-INF/MANIFEST.MF	Wed Apr 27 08:32:32 2011	(r22603)
@@ -50,6 +50,7 @@
  org.spoofax.jsglr;bundle-version="0.3.0",
  org.spoofax.terms,
  org.spoofax.interpreter.library.jsglr,
+ org.spoofax.interpreter.library.language;bundle-version="1.0.0",
  org.eclipse.ant.core;bundle-version="3.0.0",
  org.eclipse.core.runtime;bundle-version="3.0.0"
 Bundle-RequiredExecutionEnvironment: J2SE-1.5

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	Wed Apr 27 08:31:03 2011	(r22602)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	Wed Apr 27 08:32:32 2011	(r22603)
@@ -7,6 +7,7 @@
 import org.spoofax.interpreter.core.VarScope;
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
 import org.spoofax.interpreter.library.jsglr.origin.OriginLibrary;
+import org.spoofax.interpreter.library.language.LanguageLibrary;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.InteropSDefT;
@@ -45,6 +46,10 @@
 		    varScope.addSVar("SRTS_EXT_newint_0_0", new InteropSDefT(SRTS_EXT_newint_0_0.instance, iContext));
 		    varScope.addSVar("SRTS_EXT_eq_ignore_annos_0_1", new InteropSDefT(SRTS_EXT_eq_ignore_annos_0_1.instance, iContext));
 		}
+		
+		// More standard registries, kind of
+        context.addOperatorRegistry(new LanguageLibrary());
+        context.addOperatorRegistry(new OriginLibrary());
 	}
 
 	public void registerComponent(String component) {
@@ -65,7 +70,6 @@
 			ReadFromFile_cached_0_0.init();
 		} else if ("stratego_sglr".equals(component)) {
 			context.addOperatorRegistry(new JSGLRLibrary());
-			context.addOperatorRegistry(new OriginLibrary());
 			context.addOperatorRegistry(new SGLRCompatLibrary());
 		}
 	}

From L.C.L.Kats at tudelft.nl  Wed Apr 27 10:32:46 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 08:32:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22604 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language:
	META-INF src/org/spoofax/interpreter/library/language
Message-ID: <20110427083246.3F6B6108C002@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 08:32:45 2011
New Revision: 22604
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22604&sc=1

Log:
Implemented basic index data structure and access primitives

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_add.java
      - copied, changed from r22577, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_persist.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get.java
      - copied, changed from r22577, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_data.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java
      - copied, changed from r22577, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_all_files.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get_children.java
      - copied, changed from r22577, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_all.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get_descendants.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get_files_of.java
      - copied, changed from r22577, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_is_indexed_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntryFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntryParent.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexSerializer.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_all_files.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_persist.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_all.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_data.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_file.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_all.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_setup.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndex.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF	Wed Apr 27 08:32:32 2011	(r22603)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/META-INF/MANIFEST.MF	Wed Apr 27 08:32:45 2011	(r22604)
@@ -4,5 +4,7 @@
 Bundle-SymbolicName: org.spoofax.interpreter.library.language
 Bundle-Version: 1.0.0.qualifier
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
-Require-Bundle: org.spoofax.interpreter.core
+Require-Bundle: org.spoofax.interpreter.core,
+ org.spoofax.terms;bundle-version="1.0.0",
+ org.spoofax.jsglr;bundle-version="0.3.0"
 Export-Package: org.spoofax.interpreter.library.language

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_add.java (from r22577, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_persist.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_persist.java	Thu Apr 21 16:21:24 2011	(r22577, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_add.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -1,27 +1,40 @@
 package org.spoofax.interpreter.library.language;
 
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.net.URI;
+
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class LANG_index_persist extends AbstractPrimitive {
+public class LANG_index_add extends AbstractPrimitive {
 
-	private static String NAME = "LANG_index_persist";
+	private static String NAME = "LANG_index_add";
 	
 	private final SemanticIndex index;
 	
-	public LANG_index_persist(SemanticIndex index) {
-		super(NAME, 0, 1);
+	public LANG_index_add(SemanticIndex index) {
+		super(NAME, 0, 2);
 		this.index = index;
 	}
 
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		// TODO Auto-generated method stub
-		return false;
+		if (isTermAppl(tvars[0]) && isTermString(tvars[1])) {
+			IStrategoAppl entry = (IStrategoAppl) tvars[0];
+			URI file = index.toFileURI(asJavaString(tvars[1]));
+			index.add(entry, file);
+			return true;
+		} else {
+			return false;
+		}
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_all.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_all.java	Wed Apr 27 08:32:32 2011	(r22603)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_all.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -10,18 +10,18 @@
  */
 public class LANG_index_clear_all extends AbstractPrimitive {
 
-	private static String NAME = "LANG_index_persist";
+	private static String NAME = "LANG_index_clear_all";
 	
 	private final SemanticIndex index;
 	
 	public LANG_index_clear_all(SemanticIndex index) {
-		super(NAME, 0, 1);
+		super(NAME, 0, 0);
 		this.index = index;
 	}
 
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		// TODO Auto-generated method stub
-		return false;
+		index.clear();
+		return true;
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_file.java	Wed Apr 27 08:32:32 2011	(r22603)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_clear_file.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -1,5 +1,10 @@
 package org.spoofax.interpreter.library.language;
 
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.net.URI;
+
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
@@ -10,7 +15,7 @@
  */
 public class LANG_index_clear_file extends AbstractPrimitive {
 
-	private static String NAME = "LANG_index_persist";
+	private static String NAME = "LANG_index_clear_file";
 	
 	private final SemanticIndex index;
 	
@@ -21,7 +26,12 @@
 
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		// TODO Auto-generated method stub
-		return false;
+		if (isTermString(tvars[0])) {
+			URI file = index.toFileURI(asJavaString(tvars[0]));
+			index.clear(file);
+			return true;
+		} else {
+			return false;
+		}
 	}
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get.java (from r22577, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_data.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_data.java	Thu Apr 21 16:21:24 2011	(r22577, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -1,27 +1,35 @@
 package org.spoofax.interpreter.library.language;
 
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class LANG_index_retrieve_data extends AbstractPrimitive {
+public class LANG_index_get extends AbstractPrimitive {
 
-	private static String NAME = "LANG_index_persist";
+	private static String NAME = "LANG_index_get";
 	
 	private final SemanticIndex index;
 	
-	public LANG_index_retrieve_data(SemanticIndex index) {
+	public LANG_index_get(SemanticIndex index) {
 		super(NAME, 0, 1);
 		this.index = index;
 	}
 
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		// TODO Auto-generated method stub
-		return false;
+		if (isTermAppl(tvars[0])) {
+			IStrategoAppl template = (IStrategoAppl) tvars[0];
+			env.setCurrent(index.getTerms(template));
+			return true;
+		} else {
+			return false;
+		}
 	}
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java (from r22577, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_all_files.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_all_files.java	Thu Apr 21 16:21:24 2011	(r22577, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -1,27 +1,41 @@
 package org.spoofax.interpreter.library.language;
 
+import java.io.File;
+import java.net.URI;
+import java.util.Set;
+
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class LANG_index_all_files extends AbstractPrimitive {
+public class LANG_index_get_all_files extends AbstractPrimitive {
 
-	private static String NAME = "LANG_index_persist";
+	private static String NAME = "LANG_index_all_files";
 	
 	private final SemanticIndex index;
 	
-	public LANG_index_all_files(SemanticIndex index) {
+	public LANG_index_get_all_files(SemanticIndex index) {
 		super(NAME, 0, 1);
 		this.index = index;
 	}
 
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		// TODO Auto-generated method stub
-		return false;
+		Set<URI> allFiles = index.getAllFiles();
+		ITermFactory factory = env.getFactory();
+		IStrategoList results = factory.makeList();
+		for (URI file : allFiles) {
+			IStrategoString result = factory.makeString(new File(file).getAbsolutePath());
+			results = factory.makeListCons(result, results);
+		}
+		env.setCurrent(results);
+		return true;
 	}
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get_children.java (from r22577, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_all.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_all.java	Thu Apr 21 16:21:24 2011	(r22577, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get_children.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -1,27 +1,35 @@
 package org.spoofax.interpreter.library.language;
 
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class LANG_index_retrieve_all extends AbstractPrimitive {
+public class LANG_index_get_children extends AbstractPrimitive {
 
-	private static String NAME = "LANG_index_persist";
+	private static String NAME = "LANG_index_get_children";
 	
 	private final SemanticIndex index;
 	
-	public LANG_index_retrieve_all(SemanticIndex index) {
+	public LANG_index_get_children(SemanticIndex index) {
 		super(NAME, 0, 1);
 		this.index = index;
 	}
 
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		// TODO Auto-generated method stub
-		return false;
+		if (isTermAppl(tvars[0])) {
+			IStrategoAppl template = (IStrategoAppl) tvars[0];
+			env.setCurrent(index.getEntryChildTerms(template));
+			return true;
+		} else {
+			return false;
+		}
 	}
 }

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get_descendants.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get_descendants.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -0,0 +1,35 @@
+package org.spoofax.interpreter.library.language;
+
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LANG_index_get_descendants extends AbstractPrimitive {
+
+	private static String NAME = "LANG_index_get_descendants";
+	
+	private final SemanticIndex index;
+	
+	public LANG_index_get_descendants(SemanticIndex index) {
+		super(NAME, 0, 1);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		if (isTermAppl(tvars[0])) {
+			IStrategoAppl template = (IStrategoAppl) tvars[0];
+			env.setCurrent(index.getEntryDescendantTerms(template));
+			return true;
+		} else {
+			return false;
+		}
+	}
+}

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get_files_of.java (from r22577, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_file.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve_file.java	Thu Apr 21 16:21:24 2011	(r22577, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_get_files_of.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -1,27 +1,48 @@
 package org.spoofax.interpreter.library.language;
 
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+
+import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class LANG_index_retrieve_file extends AbstractPrimitive {
+public class LANG_index_get_files_of extends AbstractPrimitive {
 
-	private static String NAME = "LANG_index_persist";
+	private static String NAME = "LANG_index_get_file_of";
 	
 	private final SemanticIndex index;
 	
-	public LANG_index_retrieve_file(SemanticIndex index) {
+	public LANG_index_get_files_of(SemanticIndex index) {
 		super(NAME, 0, 1);
 		this.index = index;
 	}
 
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		// TODO Auto-generated method stub
-		return false;
+		if (isTermAppl(tvars[0])) {
+			IStrategoAppl template = (IStrategoAppl) tvars[0];
+			SemanticIndexEntry entry = index.getEntry(template);
+			if (entry == null) return false;
+			
+			if (entry.getTail() == null) {
+				String file = index.fromFileURI(entry.getFile());
+				IStrategoTerm result = env.getFactory().makeString(file);
+				IStrategoList results = env.getFactory().makeListCons(result, env.getFactory().makeList());
+				env.setCurrent(results);
+			} else {
+				// TODO: LANG_index_get_files_of - Getting the file for a multiply declared entry
+				throw new NotImplementedException("Getting the file for a multiply declared entry");
+			}
+			return true;
+		} else {
+			return false;
+		}
 	}
 }

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_is_indexed_file.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_is_indexed_file.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -0,0 +1,36 @@
+package org.spoofax.interpreter.library.language;
+
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.net.URI;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LANG_index_is_indexed_file extends AbstractPrimitive {
+
+	private static String NAME = "LANG_index_is_indexed_file";
+	
+	private final SemanticIndex index;
+	
+	public LANG_index_is_indexed_file(SemanticIndex index) {
+		super(NAME, 0, 1);
+		this.index = index;
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		if (isTermString(tvars[0])) {
+			URI file = index.toFileURI(asJavaString(tvars[0]));
+			return index.isIndexed(file);
+		} else {
+			return false;
+		}
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_setup.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_setup.java	Wed Apr 27 08:32:32 2011	(r22603)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_setup.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -2,6 +2,7 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
@@ -10,12 +11,12 @@
  */
 public class LANG_index_setup extends AbstractPrimitive {
 
-	private static String NAME = "LANG_index_persist";
+	private static String NAME = "LANG_index_setup";
 	
 	private final SemanticIndex index;
 	
 	public LANG_index_setup(SemanticIndex index) {
-		super(NAME, 0, 1);
+		super(NAME, 0, 4);
 		this.index = index;
 	}
 
@@ -23,9 +24,14 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
 		// TODO Auto-generated method stub
 		// gets:
-		// - 
-		// - file extension for determining input files
+		// - store path
+		// - root paths
+		// - lookup paths for additional root paths
+		// - file extensionS for determining input files (or a strategy to determine it based on filename/contents?)
 		// 
-		return false;
+		// would be nice if it could read .project files for project refs
+		// TODO: clear index when it is loaded from somwhere else
+		index.initialize(env.getFactory(), SSLLibrary.instance(env).getIOAgent());
+		return true;
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Wed Apr 27 08:32:32 2011	(r22603)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -10,7 +10,17 @@
 	public static final String REGISTRY_NAME = "LANGUAGE";
 
 	public LanguageLibrary() {
-		// TODO Auto-generated constructor stub
+		SemanticIndex index = new SemanticIndex();
+		add(new LANG_index_add(index));
+		add(new LANG_index_clear_all(index));
+		add(new LANG_index_clear_file(index));
+		add(new LANG_index_get_all_files(index));
+		add(new LANG_index_get_children(index));
+		add(new LANG_index_get_descendants(index));
+		add(new LANG_index_get_files_of(index));
+		add(new LANG_index_get(index));
+		add(new LANG_index_is_indexed_file(index));
+		add(new LANG_index_setup(index));
 	}
 
 	public String getOperatorRegistryName() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndex.java	Wed Apr 27 08:32:32 2011	(r22603)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndex.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -1,42 +1,301 @@
 package org.spoofax.interpreter.library.language;
 
+import java.io.File;
+import java.net.URI;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class SemanticIndex {
+	
+	private final Map<SemanticIndexEntry, SemanticIndexEntry> table =
+		new HashMap<SemanticIndexEntry, SemanticIndexEntry>();
+	
+	private final Map<URI, Set<SemanticIndexEntry>> fileTable =
+		new HashMap<URI, Set<SemanticIndexEntry>>();
 
-	protected final IStrategoConstructor DEF;
-
-	protected final IStrategoConstructor USE;
-
-	protected final IStrategoConstructor DEF_DATA;
-
-	protected final IStrategoConstructor BAD_DEF;
+	private IOAgent agent;
 
-	protected final IStrategoConstructor BAD_USE;
+	private ITermFactory termFactory;
+	
+	private SemanticIndexEntryFactory factory;
 	
-	public SemanticIndex(ITermFactory factory) {
-		DEF = factory.makeConstructor("Def", 1);
-		USE = factory.makeConstructor("Use", 1);
-		DEF_DATA = factory.makeConstructor("DefData", 1);
-		BAD_DEF = factory.makeConstructor("BadDef", 1);
-		BAD_USE = factory.makeConstructor("BadUse", 1);
+	private SemanticIndexEntry entryTemplate;
+	
+	public void initialize(ITermFactory factory, IOAgent agent) {
+		this.agent = agent;
+		this.factory = new SemanticIndexEntryFactory(factory);
+		this.termFactory = factory;
+		entryTemplate = new SemanticIndexEntry(
+			factory.makeConstructor("template", 0), factory.makeList(), factory.makeList(), null, null);
 	}
 	
-	public void put(IStrategoAppl entry) {
-		IStrategoConstructor type = entry.getConstructor();
-		if (type == DEF || type == BAD_DEF) {
-			
-		} else if (type == USE || type == BAD_USE) {
-			
-		} else if (type == DEF_DATA) {
+	public void ensureInitialized() {
+		if (factory == null)
+			throw new IllegalStateException("Semantic index not initialized");
+	}
+	
+	public SemanticIndexEntryFactory getFactory() {
+		return factory;
+	}
+	
+	public void add(IStrategoAppl entry, URI file) {
+		ensureInitialized();
+		IStrategoTerm type = factory.getEntryType(entry);
+		IStrategoList id = factory.getEntryId(entry);
+		IStrategoTerm namespace = factory.getEntryNamespace(entry);
+		IStrategoTerm data = factory.getEntryData(entry);
+		SemanticIndexEntryParent parent = getEntryParentAbove(namespace, id, true);
+		add(factory.createEntry(type, namespace, id, data, parent, file), parent);
+	}
+	
+	public void add(SemanticIndexEntry entry) {
+		ensureInitialized();
+		add(entry, getEntryParentAbove(entry.getNamespace(), entry.getId(), true));
+	}
+	
+	private void add(SemanticIndexEntry entry, SemanticIndexEntryParent parent) {
+		if (parent != null)
+			parent.add(entry);
+		SemanticIndexEntry existing = table.get(entry);
+		if (existing == null) {
+			table.put(entry, entry);
+			if (entry.getFile() != null)
+				getFileSet(entry.getFile()).add(entry);
+		} else {
+			assert !entry.isParent();
+			existing.addToTail(entry);
+			if (entry.getFile() != null)
+				getFileSet(entry.getFile()).add(existing);
+		}
+	}
+	
+	public void remove(SemanticIndexEntry entry) {
+		// Remove from table
+		SemanticIndexEntry head;
+		List<SemanticIndexEntry> tail = entry.getTail();
+		if (!tail.isEmpty()) {
+			head = tail.remove(tail.size() - 1);
+			head.setTail(tail);
+			table.put(head, head);
+		} else if ((head = table.get(entry)) != entry) {
+			tail = head.getTail();
+			for (int i = 0, max = tail.size(); i < max; i++) {
+				if (tail.get(i) == entry) {
+					tail.remove(i);
+					break;
+				}
+			}
+		} else {
+			// Common case: only one entry with this id exists
+			table.remove(entry);
+		}
+		
+		boolean otherEntriesExist = head != entry;
+		
+		// Remove from parent
+		SemanticIndexEntryParent parent = getEntryParentAbove(entry.getNamespace(), entry.getId(), false);
+		if (parent != null) {
+			if (!otherEntriesExist) {
+				parent.remove(entry);
+				if (parent.isEmpty()) remove(parent);
+			} else {
+				parent.add(head); // overwrite with head
+			}
+		}
 			
+		// Remove from fileTable
+		URI file = entry.getFile();
+		if (file != null) {
+			Set<SemanticIndexEntry> fileSet = getFileSet(file);
+			if (fileSet == null) {
+				// Already removed by clear(URI)
+			} if (otherEntriesExist && isFileReferenced(head, tail, file)) {
+				fileSet.add(head); // overwrite with head
+			} else {
+				fileSet.remove(entry);
+				if (fileSet.isEmpty())
+					fileTable.remove(file);
+			}
+		}
+	}
+
+	private boolean isFileReferenced(SemanticIndexEntry head, List<SemanticIndexEntry> tail, URI file) {
+		if (file.equals(head.getFile()))
+			return true;
+		for (int i = 0, max = tail.size(); i < max; i++) {
+			if (file.equals(tail.get(i).getFile()))
+				return true;
+		}
+		return false;
+	}
+	
+	private Set<SemanticIndexEntry> getFileSet(URI file) {
+		Set<SemanticIndexEntry> result = fileTable.get(file);
+		if (result == null) {
+			result = new HashSet<SemanticIndexEntry>();
+			fileTable.put(file, result);
+		}
+		return result;
+	}
+	
+	public IStrategoList getTerms(IStrategoAppl template) {
+		IStrategoList results = termFactory.makeList();
+		SemanticIndexEntry entry = getEntry(template);
+		if (entry == null) return results;
+		
+		IStrategoAppl result = entry.toTerm(factory);
+		results = termFactory.makeListCons(result, results);
+		List<SemanticIndexEntry> tail = entry.getTail();
+		
+		for (int i = 0, max = tail.size(); i < max; i++) {
+			result = tail.get(i).toTerm(factory);
+			results = termFactory.makeListCons(result, results);
+		}
+		
+		return results;
+	}
+	
+	/**
+	 * Returns an entry in the index that matches the given template.
+	 * Note that the result can have a 'tail' with other matching entries.
+	 */
+	public SemanticIndexEntry getEntry(IStrategoAppl template) {
+		ensureInitialized();
+		return getEntry(factory.getEntryType(template),
+				factory.getEntryNamespace(template),
+				factory.getEntryId(template),
+				factory.getEntryData(template) != null
+				);
+	}
+	
+	/**
+	 * Returns an entry in the index that matches the given type and id.
+	 * Note that the result can have a 'tail' with other matching entries.
+	 */
+	private SemanticIndexEntry getEntry(IStrategoTerm type, IStrategoTerm namespace, IStrategoList id, boolean isDataEntry) {
+		entryTemplate.internalReinit(type, namespace, id, isDataEntry ? factory.getDefDataCon() : null);
+		return table.get(entryTemplate);
+	}
+	
+	public IStrategoList getEntryChildTerms(IStrategoAppl template) {
+		ensureInitialized();
+		IStrategoTerm type = factory.getEntryType(template);
+		IStrategoTerm namespace = factory.getEntryNamespace(template);
+		SemanticIndexEntryParent parent = getEntryParentAt(namespace, factory.getEntryId(template));
+		IStrategoList results = termFactory.makeList();
+		if (parent == null)
+			return results;
+		if (type == factory.getDefCon() && parent.getAllDefsCached() != null)
+			return parent.getAllDefsCached();
+		for (SemanticIndexEntry entry : parent.getChildren()) {
+			if (entry.getType() == type) {
+				assert !entry.isParent();
+				assert entry.getNamespace().match(namespace);
+				results = termFactory.makeListCons(entry.toTerm(factory), results);
+			}
+		}
+		if (type == factory.getDefCon())
+			parent.setAllDefsCached(results);
+		return results;
+	}
+	
+	public IStrategoList getEntryDescendantTerms(IStrategoAppl template) {
+		ensureInitialized();
+		IStrategoTerm type = factory.getEntryType(template);
+		IStrategoTerm namespace = factory.getEntryNamespace(template);
+		SemanticIndexEntryParent parent = getEntryParentAt(namespace, factory.getEntryId(template));
+		return collectEntryDescendentTerms(parent, type, namespace, termFactory.makeList());
+	}
+	
+	private IStrategoList collectEntryDescendentTerms(SemanticIndexEntryParent parent, IStrategoTerm type, IStrategoTerm namespace, IStrategoList results) {
+		for (SemanticIndexEntry entry : parent.getChildren()) {
+			if (entry.getType() == type) {
+				assert !entry.isParent();
+				assert entry.getNamespace().match(namespace);
+				results = termFactory.makeListCons(entry.toTerm(factory), results);
+			} else if (entry.isParent()) {
+				results = collectEntryDescendentTerms((SemanticIndexEntryParent) entry, type, namespace, results);
+			}
+		}
+		return results;
+	}
+	
+	private SemanticIndexEntryParent getEntryParentAbove(IStrategoTerm namespace, IStrategoList id, boolean createNonExistant) {
+		if (id.isEmpty()) {
+			return null;
 		} else {
-			throw new IllegalArgumentException("Illegal index entry: " + entry);
+			id = id.tail();
+		}
+		SemanticIndexEntryParent result = getEntryParentAt(namespace, id);
+		if (result == null && createNonExistant) {
+			result = factory.createEntryParent(namespace, id, getEntryParentAbove(namespace, id, true));
+			add(result); // add and recurse for parents
+		}
+		return result;
+	}
+	
+	/**
+	 * Gets the {@link SemanticIndexEntryParent} with the given identifier.
+	 */
+	private SemanticIndexEntryParent getEntryParentAt(IStrategoTerm namespace, IStrategoList id) {
+		return (SemanticIndexEntryParent) getEntry(SemanticIndexEntryParent.TYPE, namespace, id, false);
+	}
+	
+	public void clear() {
+		table.clear();
+		fileTable.clear();
+	}
+	
+	public void clear(URI file) {
+		Set<SemanticIndexEntry> fileSet = fileTable.remove(file);
+		if (fileSet == null) return;
+		
+		SemanticIndexEntry[] copy = new SemanticIndexEntry[fileSet.size()];
+		copy = fileSet.toArray(copy);
+		for (SemanticIndexEntry entry : copy) {
+			remove(entry);
 		}
 	}
+	
+	public boolean isIndexed(URI file) {
+		return fileTable.get(file) != null;
+	}
+	
+	public void setIndexed(URI file) {
+		getFileSet(file); // creates new file set
+	}
+	
+	public Set<URI> getAllFiles() {
+		return Collections.unmodifiableSet(fileTable.keySet());
+	}
+	
+	public URI toFileURI(String path) {
+		File file = new File(path);
+		return file.isAbsolute()
+			? file.toURI()
+			: new File(agent.getWorkingDir(), path).toURI();
+	}
+	
+	public String fromFileURI(URI uri) {
+		File file = new File(uri);
+		return file.toString();
+	}
+	
+	@Override
+	public String toString() {
+		return table.keySet().toString();
+	}
 }

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntry.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntry.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -0,0 +1,198 @@
+package org.spoofax.interpreter.library.language;
+
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SemanticIndexEntry {
+
+	private IStrategoTerm type;
+	
+	private IStrategoList id;
+
+	private IStrategoTerm namespace;
+
+	private IStrategoTerm data;
+	
+	private URI file;
+	
+	private List<SemanticIndexEntry> tail = null;
+	
+	private transient IStrategoAppl term;
+
+	/**
+	 * @param namespace The namespace of the entry, e.g., 'Foo()'
+	 * @param id        The identifier of the entry, e.g., '["foo", Foo()]'
+	 */
+	protected SemanticIndexEntry(IStrategoTerm type, IStrategoTerm namespace,
+			IStrategoList id, IStrategoTerm data, URI file) {
+		this.type = type;
+		this.id = id;
+		this.namespace = namespace;
+		this.data = data;
+		this.file = file;
+		assert id != null && namespace != null && id != null;
+		assert data != null || type instanceof IStrategoConstructor;
+	}
+	
+	public IStrategoTerm getType() {
+		return type;
+	}
+	
+	public IStrategoList getId() {
+		return id;
+	}
+	
+	public IStrategoTerm getNamespace() {
+		return namespace;
+	}
+	
+	public IStrategoTerm getData() {
+		return data;
+	}
+	
+	public URI getFile() {
+		return file;
+	}
+	
+	public List<SemanticIndexEntry> getTail() {
+		if (tail == null)
+			return Collections.emptyList();
+		else
+			return tail;
+	}
+	
+	public boolean isParent() {
+		return type == SemanticIndexEntryParent.TYPE;
+	}
+	
+	public void setTail(List<SemanticIndexEntry> tail) {
+		this.tail = tail;
+	}
+	
+	public void addToTail(SemanticIndexEntry entry) {
+		if (tail == null)
+			tail = new ArrayList<SemanticIndexEntry>();
+		tail.add(entry);
+	}
+	
+	public void removeFromTail(SemanticIndexEntry entry) {
+		if (tail == null) return;
+		tail.remove(entry);
+	}
+	
+	/**
+	 * Reinitialize this template. Used for maintaining a reusable lookup object
+	 * in the index.
+	 */
+	protected void internalReinit(IStrategoTerm type, IStrategoTerm namespace, IStrategoList id, IStrategoTerm data) {
+		this.type = type;
+		this.namespace = namespace;
+		this.id = id;
+		this.data = data;
+	}
+	
+	/**
+	 * Returns a term representation of this entry.
+	 * (Null for {@link SemanticIndexEntryParent} terms.)
+	 */
+	public IStrategoAppl toTerm(SemanticIndexEntryFactory factory) {
+		if (term != null)
+			return term;
+		
+		ITermFactory terms = factory.getTermFactory();
+		IStrategoList namespaceId = terms.makeListCons(namespace, id);
+		if (!isDataEntry()) {
+			// Def/Use/BadDef/BadUse
+			term = terms.makeAppl((IStrategoConstructor) type, namespaceId);
+		} else {
+			assert !(type instanceof IStrategoConstructor) : "DefData expected";
+			term = terms.makeAppl(factory.getDefDataCon(), namespaceId, type, data);
+		}
+		return forceImploderAttachment(term);
+	}
+
+	/**
+	 * Determines if this is a data entry.
+	 * If it is, the {@link #getType()} determines the data type,
+	 * and is a {@link IStrategoTerm}. If it is not,
+	 * {@link #getType()} is simply an {@link IStrategoConstructor}
+	 * such as 'Def' or 'Use'.
+	 */
+	private boolean isDataEntry() {
+		return data != null;
+	}
+
+	/**
+	 * Force an imploder attachment for a term.
+	 * This ensures that there is always some form of position info,
+	 * and makes sure that origin info is not added to the term.
+	 * (The latter would be bad since we cache in {@link #term}.)
+	 */
+	private IStrategoAppl forceImploderAttachment(IStrategoAppl term) {
+		ImploderAttachment attach = ImploderAttachment.get(id);
+		if (attach != null) {
+			ImploderAttachment.putImploderAttachment(term, false, attach.getSort(), attach.getLeftToken(), attach.getRightToken());
+		} else {
+			String fn = file == null ? null : file.toString();
+			term.putAttachment(ImploderAttachment.createCompactPositionAttachment(
+					fn, 0, 0, 0, -1));
+		}
+		return term;
+	}
+	
+	@Override
+	public String toString() {
+		if (isDataEntry()) {
+			return "DefData(" + namespace + "," + id + "," + type + "," + data + ")";
+		} else { 
+			// Def/Use/BadDef/BadUse
+			return ((IStrategoConstructor) type).getName() + "(" + namespace + "," + id + ")";
+		}
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + id.hashCode();
+		result = prime * result + type.hashCode();
+		result = prime * result + namespace.hashCode();
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof SemanticIndexEntry))
+			return false;
+		SemanticIndexEntry other = (SemanticIndexEntry) obj;
+		if (type != other.type) {
+			if (!isDataEntry()) {
+				assert type instanceof IStrategoConstructor && !type.equals(other.type);
+				return false;
+			} else if (!type.match(other.type)) {
+				return false;
+			}
+		}
+		if (namespace != other.namespace && !namespace.match(other.namespace))
+			return false;
+		if (id != other.id && !id.match(other.id))
+			return false;
+		return true;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntryFactory.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntryFactory.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -0,0 +1,135 @@
+package org.spoofax.interpreter.library.language;
+
+import static org.spoofax.interpreter.core.Tools.isTermList;
+
+import java.net.URI;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.terms.attachments.TermAttachmentStripper;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SemanticIndexEntryFactory {
+
+	private final ITermFactory termFactory;
+
+	private final TermAttachmentStripper stripper;
+
+	private final IStrategoConstructor defCon;
+
+	private final IStrategoConstructor useCon;
+
+	private final IStrategoConstructor defDataCon;
+
+	private final IStrategoConstructor badDefCon;
+
+	private final IStrategoConstructor badUseCon;
+
+	public SemanticIndexEntryFactory(ITermFactory termFactory) {
+		this.termFactory = termFactory;
+		this.stripper = new TermAttachmentStripper(termFactory);
+		defCon = termFactory.makeConstructor("Def", 1);
+		useCon = termFactory.makeConstructor("Use", 1);
+		defDataCon = termFactory.makeConstructor("DefData", 3);
+		badDefCon = termFactory.makeConstructor("BadDef", 1);
+		badUseCon = termFactory.makeConstructor("BadUse", 1);
+	}
+	
+	public ITermFactory getTermFactory() {
+		return termFactory;
+	}
+	
+	public IStrategoConstructor getDefCon() {
+		return defCon;
+	}
+	
+	public IStrategoConstructor getDefDataCon() {
+		return defDataCon;
+	}
+	
+	public SemanticIndexEntry createEntry(IStrategoAppl entryTerm, SemanticIndexEntryParent parent, URI file) {
+		return createEntry(getEntryType(entryTerm), getEntryNamespace(entryTerm), getEntryId(entryTerm), getEntryData(entryTerm), parent, file);
+	}
+	
+	public SemanticIndexEntry createEntry(IStrategoTerm type, IStrategoTerm namespace, IStrategoList id, IStrategoTerm data,
+			SemanticIndexEntryParent parent, URI file) {
+		
+		ImploderAttachment idAttachment = ImploderAttachment.getCompactPositionAttachment(id, true);
+		ImploderAttachment dataAttachment =
+			data == null ? null : ImploderAttachment.getCompactPositionAttachment(data, false);
+		
+		id = createSanitizedId(id, parent);
+		data = stripper.strip(data);
+		type = stripper.strip(type);
+		assert namespace == stripper.strip(namespace);
+		
+		id.putAttachment(idAttachment);
+		if (data != null)
+			data.putAttachment(dataAttachment);
+
+		return new SemanticIndexEntry(type, namespace, id, data, file);
+	}
+
+	private IStrategoList createSanitizedId(IStrategoList id, SemanticIndexEntryParent parent) {
+		if (parent != null) {
+			// Share the parent's identifier prefix for efficiency
+			return termFactory.makeListCons(stripper.strip(id.head()), parent.getId());
+		} else {
+			return (IStrategoList) stripper.strip(id);
+		}
+	}
+	
+	public SemanticIndexEntryParent createEntryParent(IStrategoTerm namespace, IStrategoList id, SemanticIndexEntryParent parent) {
+		assert namespace == stripper.strip(namespace);
+		id = createSanitizedId(id, parent);
+		return new SemanticIndexEntryParent(namespace, id);
+	}
+	
+	public IStrategoTerm getEntryType(IStrategoAppl entry) {
+		IStrategoConstructor type = entry.getConstructor();
+		if (type == defCon || type == badDefCon) {
+			return defCon;
+		} else if (type == useCon || type == badUseCon) {
+			return useCon;
+		} else if (type == defDataCon) {
+			return entry.getSubterm(1);
+		} else {
+			throw new IllegalArgumentException("Illegal index entry: " + entry);
+		}
+	}
+	
+	public IStrategoList getEntryId(IStrategoAppl entry) {
+		IStrategoTerm result = entry.getSubterm(0);
+		if (isTermList(result)) {
+			IStrategoList full = (IStrategoList) result;
+			return full.isEmpty() ? full : full.tail();
+		} else {
+			throw new IllegalArgumentException("Illegal index entry: " + entry);
+		}
+	}
+	
+	public IStrategoTerm getEntryNamespace(IStrategoAppl entry) {
+		IStrategoTerm result = entry.getSubterm(0);
+		if (isTermList(result)) {
+			IStrategoList full = (IStrategoList) result;
+			return stripper.strip(full.isEmpty() ? full : full.head());
+		} else {
+			throw new IllegalArgumentException("Illegal index entry: " + entry);
+		}
+	}
+	
+	public IStrategoTerm getEntryData(IStrategoAppl entry) {
+		if (entry.getSubtermCount() == 3) {
+			return entry.getSubterm(2);
+		} else {
+			assert entry.getSubtermCount() < 3;
+			return null;
+		}
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntryParent.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntryParent.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -0,0 +1,76 @@
+package org.spoofax.interpreter.library.language;
+
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.TermFactory;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SemanticIndexEntryParent extends SemanticIndexEntry {
+
+	public static final IStrategoConstructor TYPE =
+		new TermFactory().makeConstructor("<parent>", 1);
+
+	private final Set<SemanticIndexEntry> children =
+		new HashSet<SemanticIndexEntry>();
+	
+	private transient IStrategoList allDefsCached;
+	
+	protected SemanticIndexEntryParent(IStrategoTerm namespace, IStrategoList id) {
+		super(TYPE, namespace, id, null, null);
+	}
+	
+	@Override
+	public IStrategoAppl toTerm(SemanticIndexEntryFactory factory) {
+		return null;
+	}
+	
+	@Override
+	public void setTail(List<SemanticIndexEntry> tail) {
+		throw new UnsupportedOperationException();
+	}
+	
+	@Override
+	public void addToTail(SemanticIndexEntry entry) {
+		throw new UnsupportedOperationException();
+	}
+	
+	@Override
+	public void removeFromTail(SemanticIndexEntry entry) {
+		throw new UnsupportedOperationException();
+	}
+	
+	public void add(SemanticIndexEntry entry) {
+		allDefsCached = null;
+		children.add(entry);
+	}
+	
+	public void remove(SemanticIndexEntry entry) {
+		allDefsCached = null;
+		children.remove(entry);
+	}
+	
+	public boolean isEmpty() {
+		return children.isEmpty();
+	}
+	
+	public Set<SemanticIndexEntry> getChildren() {
+		return Collections.unmodifiableSet(children);
+	}
+	
+	public IStrategoList getAllDefsCached() {
+		return allDefsCached;
+	}
+	
+	public void setAllDefsCached(IStrategoList allDefsCached) {
+		this.allDefsCached = allDefsCached;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexSerializer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexSerializer.java	Wed Apr 27 08:32:45 2011	(r22604)
@@ -0,0 +1,19 @@
+package org.spoofax.interpreter.library.language;
+
+import org.spoofax.interpreter.terms.ITermFactory;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SemanticIndexSerializer {
+	
+	private final ITermFactory factory;
+
+	public SemanticIndexSerializer(ITermFactory factory) {
+		this.factory = factory;
+	}
+	
+	public void write(Appendable output) {
+		// TODO: write as one big term with position info in annos or something
+	}
+}

From L.C.L.Kats at tudelft.nl  Wed Apr 27 10:35:53 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 08:35:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22605 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110427083553.0484F7F800C@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 08:35:52 2011
New Revision: 22605
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22605&sc=1

Log:
Prefer makeList() over EMPTY_LIST for most cases

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java	Wed Apr 27 08:32:45 2011	(r22604)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java	Wed Apr 27 08:35:52 2011	(r22605)
@@ -222,7 +222,7 @@
 
 	        if (headValue == null)
 	        {
-	        	return TermFactory.EMPTY_LIST;
+	        	return f.makeList();
 	        }
 	        else
 	        {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Apr 27 08:32:45 2011	(r22604)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Apr 27 08:35:52 2011	(r22605)
@@ -119,7 +119,7 @@
 			String prefix = parser.readPrefix(offset, document);
 			sorts.add(startSymbol);
 			printCompletionTip(controller, sorts);
-			ICompletionProposal[] proposals = computeAllCompletionProposals(TermFactory.EMPTY_LIST, document, prefix, offset, sorts, viewer);
+			ICompletionProposal[] proposals = computeAllCompletionProposals(Environment.getTermFactory().makeList(), document, prefix, offset, sorts, viewer);
 			if (proposals.length != 0) return proposals;
 		}
 		if (parser.isFatalSyntaxError()) {

From L.C.L.Kats at tudelft.nl  Wed Apr 27 10:36:51 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 08:36:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22606 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	parser/ast stratego
Message-ID: <20110427083651.7F432CC0C0@mx4.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 08:36:51 2011
New Revision: 22606
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22606&sc=1

Log:
Better handling for when there's only a compact ImploderAttachment and no SourceAttachment

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java	Wed Apr 27 08:35:52 2011	(r22605)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java	Wed Apr 27 08:36:51 2011	(r22606)
@@ -99,7 +99,7 @@
 	
 	public IPath getPath(Object element) {
 		IResource resource = getResource(impObjectToAstNode(element));
-		return resource.getLocation();
+		return resource == null ? null : resource.getLocation();
 	}
 
 	public static IStrategoTerm impObjectToAstNode(Object element) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java	Wed Apr 27 08:35:52 2011	(r22605)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java	Wed Apr 27 08:36:51 2011	(r22606)
@@ -1,8 +1,12 @@
 package org.strategoxt.imp.runtime.stratego;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+
 import org.eclipse.core.resources.IResource;
 import org.eclipse.imp.parser.IParseController;
 import org.spoofax.interpreter.terms.ISimpleTerm;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 import org.spoofax.terms.attachments.AbstractTermAttachment;
 import org.spoofax.terms.attachments.ParentAttachment;
 import org.spoofax.terms.attachments.TermAttachmentType;
@@ -46,7 +50,16 @@
 
 	public static IResource getResource(ISimpleTerm term) {
 		SourceAttachment resource = ParentAttachment.getRoot(term).getAttachment(TYPE);
-		return resource == null ? null : resource.resource;
+		if (resource == null) {
+			String file = ImploderAttachment.getFilename(term);
+			try {
+				return file == null ? null : EditorIOAgent.getResource(new File(file));
+			} catch (FileNotFoundException e) {
+				return null;
+			}
+		} else {
+			return resource.resource;
+		}
 	}
 
 	public static IParseController getParseController(ISimpleTerm term) {

From L.C.L.Kats at tudelft.nl  Wed Apr 27 10:37:25 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 08:37:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22607 - in
	spoofax-imp/trunk/experimental/NamingExperiment: . trans
Message-ID: <20110427083725.A333A108C018@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 08:37:25 2011
New Revision: 22607
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22607&sc=1

Log:
Changed NamingExperiment to use the new LANG_index primitives

Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/build.generated.xml
   spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-imports.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/types.str

Modified: spoofax-imp/trunk/experimental/NamingExperiment/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/build.generated.xml	Wed Apr 27 08:36:51 2011	(r22606)
+++ spoofax-imp/trunk/experimental/NamingExperiment/build.generated.xml	Wed Apr 27 08:37:25 2011	(r22607)
@@ -538,7 +538,7 @@
 	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
 	        <java classname="org.strategoxt.strj.Main" failonerror="true">
 	            <arg value="-i"/>
-	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
 	            <arg value="-o"/>
 	            <arg value="${build.stratego.outputfile}"/>
 	            <arg value="-p"/>

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-imports.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-imports.str	Wed Apr 27 08:36:51 2011	(r22606)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-imports.str	Wed Apr 27 08:37:25 2011	(r22607)
@@ -15,7 +15,7 @@
   //       requires runtime support a project-wide index
 
   adjust-index-def-data(store-results |namespace, path):
-    Module(m, defs) -> <store-results> DefData(Imports(), [namespace | path], import*)
+    Module(m, defs) -> <store-results> DefData([namespace | path], Imports(), import*)
     where
       import* := <filter(get-import-name)> defs
 

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str	Wed Apr 27 08:36:51 2011	(r22606)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str	Wed Apr 27 08:37:25 2011	(r22607)
@@ -13,7 +13,7 @@
   Def     : List(UriPart) -> Summary
   Use     : List(UriPart) * List(UriPart) -> Summary
   BadUse  : List(UriPart) -> Summary
-  DefData : DefDataType * List(UriPart) * Term -> Summary
+  DefData : List(UriPart) * DefDataType * Term -> Summary
 
   // TODO: add a new constructor for URI header/path separation?
   
@@ -45,18 +45,22 @@
 rules // analysis traversals
    
   analyze-top:
-    ast -> (ast5, defs, uses, data)
+    (ast, path, project-path) -> (ast5, defs, uses, data)
     with
       {| CurrentAnalysisAst:
         rules(
           CurrentAnalysisAst := ast
         );
-        (ast2, defs) := <analyze-defs(|Anon(), Anon())> ast;
-        <index-summary-parts> defs;
+        // HACK: use Some() constructor to force origin tracking...
+        (Some(ast2), defs) := <analyze-defs(|Anon(), Anon())> Some(ast);
+        full-path    := $[[project-path]/[path]];
+        prim("LANG_index_setup", $[[full-path]/.cache/index], $[project-path], [], []);
+        prim("LANG_index_clear_file", full-path);
+        <index-summary-parts(|full-path)> defs;
         ast3         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast2;
         <index-tree-terms> ast3;
-        data         := <analyze-tree-data> ast3;
-        <index-summary-parts> data;
+        data         := <origin-track-forced(analyze-tree-data)> ast3;
+        <index-summary-parts(|full-path)> data;
         // TODO: resolve any URIs in index data at this point? or re-index data after uses analysis?
         (ast4, uses) := <analyze-uses> ast3;
         ast5         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast4
@@ -189,19 +193,8 @@
   
   // TODO: optimize: use hashtables instead of dynamic rules
     
-  index-summary-parts =
-    list-loop(index-summary-part)
-  
-  index-summary-part:
-    Def(uri @ [namespace, name | path]) -> <id>
-    where
-      parent-uri := [namespace | path];
-      rules(IndexedDef :+ parent-uri -> Def(uri))
-
-  index-summary-part:
-    DefData(kind, uri, contents) -> <id>
-    where
-      rules(IndexedDefData: (kind, uri) -> contents)
+  index-summary-parts(|file) =
+    list-loop(with(prim("LANG_index_add", <id>, file)))
 
   index-tree-terms:
     tree -> tree
@@ -216,11 +209,20 @@
 
 rules // index API
 
-  index-get-term =
-    with(?Def(uri) | "Def expected"); <IndexedTerm> uri
+  /** @deprecated */
+  index-get-term:
+    <with(?Def(uri) | "Def expected")> -> <IndexedTerm> uri
   
-  index-get-data(|kind) =
-    with(?Def(uri) | "Def expected"); <IndexedDefData> (kind, uri)
+  index-get-data(|kind):
+    <with(?Def(uri) | "Def expected")> -> data
+    where
+      prim("LANG_index_get", DefData(uri, kind, [])) => [DefData(_, _, data) | _]
+  
+  index-get-data-all(|kind):
+    <with(?Def(uri) | "Def expected")> -> datas'
+    where
+      datas  := <prim("LANG_index_get", DefData(uri, kind, []))>;
+      datas' := <map(\DefData(_, _, d) -> d\)> datas
 
   index-namespace:
     x{[namespace | path]} -> <index-namespace-unwrap> namespace
@@ -273,7 +275,7 @@
           <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
       ?defs
     <+
-      defs := <bagof-IndexedDef <+ ![]> [namespace | path]
+      defs := <prim("LANG_index_get_children", Def([namespace | path]))>
 
   index-lookup-all-levels:
     x{[namespace | path]} -> <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
@@ -288,7 +290,7 @@
           <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
       ?all-defs
     <+
-      one-level := <bagof-IndexedDef <+ ![]> [namespace | path];
+      one-level := <prim("LANG_index_get", Def([namespace | path]))>;
       if [_ | path'] := path then
         all-defs := <concat> [one-level, <index-lookup-all-levels(fail |namespace, path')> x]
       else
@@ -297,7 +299,7 @@
 
   index-lookup-contained(|namespace):
     x{[ns | path]} -> defs
-    where
+    with
       if !ns => Unresolved(_) then
         Def([_ | def-path]) := <index-lookup>;
         defs := <index-lookup-one-level(id|namespace, def-path)> x 
@@ -307,7 +309,7 @@
 
   index-lookup-contained-all-levels(|namespace):
     x{[ns | path]} -> defs
-    where
+    with
       if !ns => Unresolved(_) then
         Def([_ | def-path]) := <index-lookup>;
         defs := <index-lookup-all-levels(id|namespace, def-path)> x
@@ -317,7 +319,7 @@
   
   index-lookup-container(|namespace):
     x{[ns | path]} -> def
-    where
+    with
       def := ();
       fatal-err(|"Not implemented") // TODO: index-lookup-container
 

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Wed Apr 27 08:36:51 2011	(r22606)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Wed Apr 27 08:37:25 2011	(r22607)
@@ -54,10 +54,10 @@
   editor-resolve:
     (node, position, ast, path, project-path) -> target
     where
-      // TODO: shouldn't work on parent node
+      // TODO: shouldn't work on parent node?
       !node => <one(?subnode) <+ ?subnode>;
-      def     := <index-lookup> subnode;
-      target  := <index-get-term> def
+      def     := <index-lookup> node;
+      target  := /*<index-get-term>*/ def
 
   // Returns "hover help" information for a particular node in the editor.
   // For references, this rule is invoked using the resolved term.

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/types.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/types.str	Wed Apr 27 08:36:51 2011	(r22606)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/types.str	Wed Apr 27 08:37:25 2011	(r22607)
@@ -55,11 +55,11 @@
 rules // store definition and parameter types
     
   adjust-index-def-data(store-results |namespace, path):
-    def -> <store-results> DefData(Type(), [namespace | path], type)
+    def -> <store-results> DefData([namespace | path], Type(), type)
     where
       type := <type-of> def
   
   adjust-index-def-data(store-results |namespace, path):
-    Function(_, params, _) -> <store-results> DefData(ParamTypes(), [namespace | path], types)
+    Function(_, params, _) -> <store-results> DefData([namespace | path], ParamTypes(), types)
     with
       types := <map(type-of)> params

From R.B.Vermaas at tudelft.nl  Wed Apr 27 10:43:43 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 08:43:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22608 - hydra/jobs
Message-ID: <20110427084343.4C9B6108C00D@mx3.tudelft.nl>

Author: rob
Date: Wed Apr 27 08:43:42 2011
New Revision: 22608
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22608&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Apr 27 08:37:25 2011	(r22607)
+++ hydra/jobs/spoofax-imp.nix	Wed Apr 27 08:43:42 2011	(r22608)
@@ -176,7 +176,7 @@
 
             mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e || true
 
-            for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer #org.strategoxt.imp.testing
+            for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer org.strategoxt.imp.testing
             do
                 mkdir -p $e/utils/
                 cp -v org.strategoxt.imp.generator/lib/*.jar $e/utils/

From L.C.L.Kats at tudelft.nl  Wed Apr 27 10:56:30 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 08:56:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22609 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110427085630.851C9CC096@mx4.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 08:56:30 2011
New Revision: 22609
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22609&sc=1

Log:
added language library dependency

Modified:
   strategoxt-java-backend/trunk/java/Makefile.am
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/Makefile.am
==============================================================================
--- strategoxt-java-backend/trunk/java/Makefile.am	Wed Apr 27 08:43:42 2011	(r22608)
+++ strategoxt-java-backend/trunk/java/Makefile.am	Wed Apr 27 08:56:30 2011	(r22609)
@@ -137,6 +137,7 @@
 	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.terms/bin/ .
 	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.jsglr/bin/ .
 	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.library.jsglr/bin/ .
+	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.library.language/bin/ .
 	rm -rf spoofax-libs-tmp
 	mv spoofax-libs.jar.tmp spoofax-libs.jar
 

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From L.C.L.Kats at tudelft.nl  Wed Apr 27 11:46:53 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 09:46:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22610 -
	spoofax-imp/trunk/experimental/NamingExperiment/trans
Message-ID: <20110427094653.DFA35108C02C@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 09:46:53 2011
New Revision: 22610
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22610&sc=1

Log:
Fixed reference resolving not always working

Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str	Wed Apr 27 08:56:30 2011	(r22609)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str	Wed Apr 27 09:46:53 2011	(r22610)
@@ -270,7 +270,7 @@
     with
       is-adjusted-lookup-enabled;
       do-adjusted-index-lookup(|namespace, path, x);
-      mapconcat(\Def(p) -> [Def(p)]\
+      mapconcat(\d at Def(p) -> [d]\
           <+ \[namespace' | path'] -> <index-lookup-one-level(fail |namespace', path')> x\
           <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
       ?defs
@@ -285,12 +285,12 @@
     with
       is-adjust-lookup-enabled;
       do-adjusted-index-lookup(|namespace, path, x);
-      mapconcat(\Def(p) -> [Def(p)]\
+      mapconcat(\d at Def(p) -> [d]\
           <+ \[namespace' | path'] -> <index-lookup-all-levels(fail |namespace', path')> x\
           <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
       ?all-defs
     <+
-      one-level := <prim("LANG_index_get", Def([namespace | path]))>;
+      one-level := <prim("LANG_index_get_children", Def([namespace | path]))>;
       if [_ | path'] := path then
         all-defs := <concat> [one-level, <index-lookup-all-levels(fail |namespace, path')> x]
       else

From R.B.Vermaas at tudelft.nl  Wed Apr 27 11:48:14 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 09:48:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22611 - hydra/jobs
Message-ID: <20110427094814.F27E7108C024@mx3.tudelft.nl>

Author: rob
Date: Wed Apr 27 09:48:14 2011
New Revision: 22611
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22611&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Apr 27 09:46:53 2011	(r22610)
+++ hydra/jobs/spoofax-imp.nix	Wed Apr 27 09:48:14 2011	(r22611)
@@ -174,7 +174,7 @@
             make -C org.strategoxt.imp.generator all
             stopNest
 
-            mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e || true
+            mvn -fn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e  || true
 
             for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer org.strategoxt.imp.testing
             do

From R.B.Vermaas at tudelft.nl  Wed Apr 27 11:59:54 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 09:59:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22612 -
	spoofax-imp/trunk/org.strategoxt.imp.testing
Message-ID: <20110427095954.3BD2D2B804C@mx2.tudelft.nl>

Author: rob
Date: Wed Apr 27 09:59:53 2011
New Revision: 22612
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22612&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Wed Apr 27 09:48:14 2011	(r22611)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Wed Apr 27 09:59:53 2011	(r22612)
@@ -378,7 +378,7 @@
                 <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
                 <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
             </antcall>
-            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" destdir="${build}" source="1.5" target="1.5" debug="on"/>
             <!-- copy imported terms -->
             <copy todir="${build}/trans">
                 <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
@@ -594,4 +594,4 @@
             <delete file="${include}/${sdfmodule}.def"/>
             <delete dir="${src-gen}/trans"/>
         </target>
-    </project>
\ No newline at end of file
+    </project>

From L.C.L.Kats at tudelft.nl  Wed Apr 27 12:33:01 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 10:33:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22613 - in
	spoofax/trunk/spoofax:
	org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder
	org.spoofax.terms/src/org/spoofax/terms/attachments
Message-ID: <20110427103301.D2B8D7F8043@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 10:33:01 2011
New Revision: 22613
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22613&sc=1

Log:
Added API support for serializing position attachments from/to terms

Added:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/VolatileTermAttachmentType.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginAttachment.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentAttachment.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java	Wed Apr 27 09:59:53 2011	(r22612)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java	Wed Apr 27 10:33:01 2011	(r22613)
@@ -1,9 +1,12 @@
 package org.spoofax.jsglr.client.imploder;
 
 import static org.spoofax.jsglr.client.imploder.IToken.TK_UNKNOWN;
+import static org.spoofax.terms.Term.asJavaInt;
+import static org.spoofax.terms.Term.asJavaString;
 
 import org.spoofax.interpreter.terms.ISimpleTerm;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.terms.TermVisitor;
 import org.spoofax.terms.attachments.AbstractTermAttachment;
 import org.spoofax.terms.attachments.OriginAttachment;
@@ -20,7 +23,28 @@
 	private static final long serialVersionUID = -578795745164445689L;
 
 	public static final TermAttachmentType<ImploderAttachment> TYPE =
-		TermAttachmentType.create(ImploderAttachment.class);
+		new TermAttachmentType<ImploderAttachment>(ImploderAttachment.class, "ImploderAttachment", 5) {
+
+			@Override
+			protected IStrategoTerm[] toSubterms(ITermFactory f, ImploderAttachment attachment) {
+				IToken left = attachment.getLeftToken();
+				IToken right = attachment.getRightToken();
+				return new IStrategoTerm[] {
+					f.makeString(left.getTokenizer().getFilename()),
+					f.makeInt(left.getLine()),
+					f.makeInt(left.getColumn()),
+					f.makeInt(left.getStartOffset()),
+					f.makeInt(right.getEndOffset())
+				};
+			}
+
+			@Override
+			protected ImploderAttachment fromSubterms(IStrategoTerm[] subterms) {
+				return createCompactPositionAttachment(asJavaString(subterms[0]), asJavaInt(subterms[1]),
+						asJavaInt(subterms[2]), asJavaInt(subterms[3]), asJavaInt(subterms[4]));
+			}
+		
+		};
 	
 	private final IToken leftToken, rightToken;
 	

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginAttachment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginAttachment.java	Wed Apr 27 09:59:53 2011	(r22612)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginAttachment.java	Wed Apr 27 10:33:01 2011	(r22613)
@@ -11,7 +11,7 @@
 	private static final long serialVersionUID = 1180953352629370705L;
 
 	public static TermAttachmentType<OriginAttachment> TYPE =
-		TermAttachmentType.create(OriginAttachment.class);
+		new VolatileTermAttachmentType<OriginAttachment>(OriginAttachment.class);
 	
 	private IStrategoTerm origin;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentAttachment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentAttachment.java	Wed Apr 27 09:59:53 2011	(r22612)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentAttachment.java	Wed Apr 27 10:33:01 2011	(r22613)
@@ -17,7 +17,7 @@
 	private static final long serialVersionUID = -159325782499007370L;
 
 	public static TermAttachmentType<ParentAttachment> TYPE =
-		TermAttachmentType.create(ParentAttachment.class);
+		new VolatileTermAttachmentType<ParentAttachment>(ParentAttachment.class);
 
 	private IStrategoTerm parent;
 	

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java	Wed Apr 27 09:59:53 2011	(r22612)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java	Wed Apr 27 10:33:01 2011	(r22613)
@@ -3,42 +3,68 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.TermFactory;
+
 /** 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class TermAttachmentType<T extends ITermAttachment> {
+public abstract class TermAttachmentType<T extends ITermAttachment> {
 	
-	private static Map<Class<?>, TermAttachmentType<?>> types =
+	private static Map<Class<?>, TermAttachmentType<?>> asyncTypes =
 		new HashMap<Class<?>, TermAttachmentType<?>>();
 	
-	private final Class<?> type;
+	private final Class<T> type;
+	
+	private final IStrategoConstructor constructor;
 	
-	private TermAttachmentType(Class<?> type) {
+	/**
+	 * @param constructorName  The constructor for this attachment in term form, or null if not supported.
+	 */
+	protected TermAttachmentType(Class<T> type, String constructorName, int constructorArity) {
 		this.type = type;
-		// Private default constructor
+		this.constructor = new TermFactory().makeConstructor(constructorName, constructorArity);
+		assert isNotOverlapping(type) : "Term attachments do not support inheritance, failed on: " + type.getName();
 	}
 	
 	/**
-	 * Creates a new attachment type. Can only create attachment types that are not
+	 * Sanity check: can only create attachment types that are not
 	 * a superclass or subclass of another, existing attachment type.
 	 */
-	public synchronized static<T extends ITermAttachment> TermAttachmentType<T> create(Class<T> baseClass) {
-		@SuppressWarnings("unchecked")
-		TermAttachmentType<T> result = (TermAttachmentType<T>) types.get(baseClass);
-		if (result != null) {
-			return result;
-		} else {
-			result = new TermAttachmentType<T>(baseClass);
-			for (Class<?> otherClass : types.keySet()) {
+	private boolean isNotOverlapping(Class<T> baseClass) {
+		synchronized (TermAttachmentType.class) {
+			for (Class<?> otherClass : asyncTypes.keySet()) {
 				if (otherClass.isAssignableFrom(baseClass) || baseClass.isAssignableFrom(otherClass))
-					throw new IllegalArgumentException("An attachment type based on class "
-							+ otherClass.getName() + " already exists; cannot add " + baseClass.getName());
+					return true;
 			}
-			types.put(baseClass, result);
-			return result;
+			asyncTypes.put(baseClass, this);
 		}
+		return false;
+	}
+	
+	public boolean isSerializationSupported() {
+		return constructor != null;
 	}
 	
+	public final IStrategoAppl toTerm(ITermFactory factory, T attachment) {
+		return factory.makeAppl(constructor, toSubterms(factory, attachment));
+	}
+
+	public final T fromTerm(IStrategoAppl term) {
+		if (term.getConstructor() == constructor) {
+			return fromSubterms(term.getAllSubterms());
+		} else {
+			return null;
+		}
+	}
+	
+	protected abstract IStrategoTerm[] toSubterms(ITermFactory factory, T attachment);
+	
+	protected abstract T fromSubterms(IStrategoTerm[] subterms);
+	
 	@Override
 	public String toString() {
 		return type.getName(); // (reflective call)

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/VolatileTermAttachmentType.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/VolatileTermAttachmentType.java	Wed Apr 27 10:33:01 2011	(r22613)
@@ -0,0 +1,27 @@
+package org.spoofax.terms.attachments;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+/**
+ * A term attachment type that cannot be written from or to terms.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class VolatileTermAttachmentType<T extends ITermAttachment> extends TermAttachmentType<T> {
+
+	public VolatileTermAttachmentType(Class<T> type) {
+		super(type, null, 0);
+	}
+
+	@Override
+	protected IStrategoTerm[] toSubterms(ITermFactory factory, T attachment) {
+		throw new UnsupportedOperationException();
+	}
+
+	@Override
+	protected T fromSubterms(IStrategoTerm[] subterms) {
+		throw new UnsupportedOperationException();
+	}
+
+}

From M.A.Akhter at student.tudelft.nl  Wed Apr 27 13:34:38 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 27 Apr 2011 11:34:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22614 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration:
	. .externalToolBuilders META-INF editor editor/java
	editor/java/org editor/java/org/stratego...
Message-ID: <20110427113438.997A3CC0FD@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 27 11:34:37 2011
New Revision: 22614
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22614&sc=1

Log:
* spoofax configuration *.config lang
* error checking + resolving added

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/.externalToolBuilders/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/.externalToolBuilders/SpoofaxConfiguration build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/.project
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/META-INF/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Folding.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Outliner.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/SpoofaxConfigurationParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/SpoofaxConfigurationParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/SpoofaxConfigurationValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/strategies/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/strategies/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/strategies/java_strategy_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/lib/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/lib/refactor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/Common.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/test/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/test/example.config
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/spoofaxconfiguration.str

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/.classpath	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/.externalToolBuilders/SpoofaxConfiguration build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/.externalToolBuilders/SpoofaxConfiguration build.main.xml.launch	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.spoofax.configuration/build.main.xml}"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.editors.spoofax.configuration}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/.project	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>org.strategoxt.imp.editors.spoofax.configuration</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/SpoofaxConfiguration build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/META-INF/MANIFEST.MF	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,21 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: SpoofaxConfiguration Plug-in
+Bundle-SymbolicName: org.strategoxt.imp.editors.spoofax.configuration; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: org.strategoxt.imp.editors.spoofax.configuration.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: org.strategoxt.imp.editors.spoofax.configuration

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/build.generated.xml	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,447 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  java.jar,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${build}/org/strategoxt/imp/editors/spoofax/configuration/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la org.strategoxt.imp.editors.spoofax.configuration.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-t"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
+                <path><fileset dir="${basedir}" includes="*.astr"/></path>
+            </pathconvert>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <fileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </fileset>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${src-gen}/trans/Main.java"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/build.main.xml	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="SpoofaxConfiguration" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="SpoofaxConfiguration"/>
+        <property name="metasdfmodule" value="Stratego-SpoofaxConfiguration"/>
+        <property name="esvmodule" value="SpoofaxConfiguration"/>
+        <property name="strmodule" value="spoofaxconfiguration"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/build.properties	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Builders.esv	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,20 @@
+
+module SpoofaxConfiguration-Builders
+
+imports SpoofaxConfiguration-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                              
+  provider : include/spoofaxconfiguration.ctree                                                               
+	
+	observer : editor-analyze
+	                                      
+  builder  : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  
+  builder  : "Show Resolved Path(for selection)" = get-full-paths(openeditor) (realtime) (meta) (source)                                                                                                              

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Colorer.esv	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,9 @@
+module SpoofaxConfiguration-Colorer
+
+imports SpoofaxConfiguration-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Completions.esv	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,15 @@
+module SpoofaxConfiguration-Completions
+
+imports SpoofaxConfiguration-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+  
+completions
+  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Folding.esv	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,9 @@
+module SpoofaxConfiguration-Folding
+
+imports SpoofaxConfiguration-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Outliner.esv	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,9 @@
+module SpoofaxConfiguration-Outliner
+
+imports SpoofaxConfiguration-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-References.esv	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,15 @@
+module SpoofaxConfiguration-References
+
+imports SpoofaxConfiguration-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  //hover _     : editor-hover
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Syntax.esv	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,9 @@
+module SpoofaxConfiguration-Syntax
+
+imports SpoofaxConfiguration-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration.main.esv	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,17 @@
+
+module SpoofaxConfiguration.main
+
+imports SpoofaxConfiguration-Builders SpoofaxConfiguration-Colorer SpoofaxConfiguration-Completions SpoofaxConfiguration-Folding SpoofaxConfiguration-Outliner SpoofaxConfiguration-References SpoofaxConfiguration-Syntax
+
+language General properties
+                  
+  name          : SpoofaxConfiguration
+  id            : org.strategoxt.imp.editors.spoofax.configuration
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the SpoofaxConfiguration language"
+  url           : http://strategoxt.org
+                  
+  extensions    : config
+  table         : include/SpoofaxConfiguration.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/Activator.java	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,44 @@
+package org.strategoxt.imp.editors.spoofax.configuration;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "SpoofaxConfiguration";
+
+  public static final String kLanguageName = "SpoofaxConfiguration";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/SpoofaxConfigurationParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/SpoofaxConfigurationParseController.java	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,4 @@
+package org.strategoxt.imp.editors.spoofax.configuration;
+
+public class SpoofaxConfigurationParseController extends SpoofaxConfigurationParseControllerGenerated 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/SpoofaxConfigurationParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/SpoofaxConfigurationParseControllerGenerated.java	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,89 @@
+package org.strategoxt.imp.editors.spoofax.configuration;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class SpoofaxConfigurationParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("SpoofaxConfiguration");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = SpoofaxConfigurationParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = SpoofaxConfigurationParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(SpoofaxConfigurationParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return SpoofaxConfigurationParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/SpoofaxConfigurationValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/SpoofaxConfigurationValidator.java	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,12 @@
+package org.strategoxt.imp.editors.spoofax.configuration;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class SpoofaxConfigurationValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return SpoofaxConfigurationParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/strategies/InteropRegisterer.java	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,14 @@
+package org.strategoxt.imp.editors.spoofax.configuration.strategies;
+
+import org.strategoxt.lang.JavaInteropRegisterer;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Helper class for {@link java_strategy_0_0}.
+ */
+public class InteropRegisterer extends JavaInteropRegisterer {
+
+  public InteropRegisterer() {
+    super(new Strategy[] { java_strategy_0_0.instance });
+  }
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/strategies/Main.java	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,11 @@
+package org.strategoxt.imp.editors.spoofax.configuration.strategies;
+
+import org.strategoxt.lang.Context;
+
+public class Main {
+  
+  public static void init(Context context) {
+    // Called when the editor is being initialized
+  }
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/java/org/strategoxt/imp/editors/spoofax/configuration/strategies/java_strategy_0_0.java	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,32 @@
+package org.strategoxt.imp.editors.spoofax.configuration.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Example Java strategy implementation.
+ *
+ * This strategy can be used by editor services and can be called
+ * in Stratego modules by declaring it as an external strategy
+ * as follows:
+ *
+ * <code>
+ *  external java-strategy(|)
+ * </code>
+ *
+ * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+ */
+public class java_strategy_0_0 extends Strategy {
+  
+  public static java_strategy_0_0 instance = new java_strategy_0_0();
+
+  @Override
+  public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+    context.getIOAgent().printError("Input for java-strategy: " + current);
+    ITermFactory factory = context.getFactory();
+    return factory.makeString("Regards from java-strategy");
+  }
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/lib/editor-common.generated.str	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,254 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-spoofaxconfiguration-file
+  parse-spoofaxconfiguration-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/SpoofaxConfiguration.tbl)>
+    )
+
+  parse-string = parse-spoofaxconfiguration-string
+  parse-spoofaxconfiguration-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/SpoofaxConfiguration.tbl)>
+    )
+  
+  parse-stream = parse-spoofaxconfiguration-stream
+  parse-spoofaxconfiguration-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/SpoofaxConfiguration.tbl)>
+    )
+
+  pp-spoofaxconfiguration-string =
+    ast2abox(|[<import-term(include/SpoofaxConfiguration.generated.pp.af)>,
+               <import-term(include/SpoofaxConfiguration.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "SpoofaxConfiguration", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    !Some(<id>); all(s); ?Some(<id>)
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/spoofaxconfiguration.str file. These definitions should also be automatically 
+  // generated in the imported include/SpoofaxConfiguration.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/lib/refactor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/lib/refactor-common.generated.str	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,67 @@
+module lib/refactor-common.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+
+strategies //transformation
+
+/**
+ * Replaces elements in a list (once, starting from the right)
+ * @param match strategy for partial list
+ * @param new elements List(b)
+ * @type List(a) -> List(a,b)
+ */
+replace-sublist(match-sublist|new-elems): 
+  list -> <
+    at-suffix(match-sublist;!new-elems) <+
+    (
+      init; 
+      replace-sublist(match-sublist|new-elems);
+      at-end(![<last> list])
+    )
+  > list 
+
+/**
+ * Inserts an element at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list element 
+ * @type Term -> Term
+ */
+insert-elem(|pos, elem)=
+  insert-sublist(|pos, [elem])
+
+/**
+ * Inserts a list of elements at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list elements 
+ * @type Term -> Term
+ */	
+insert-sublist(|pos, elems)=
+  at-position(
+    split-at(|<last> pos);
+    ?(prefix, suffix);
+    <concat>[prefix, elems, suffix]
+    |<init> pos
+  )
+
+
+strategies //user-input
+
+/**
+ * Opens an input dialog for one string value that represents an identifier
+ * The language is used to check if the input value matches the identifier pattern
+ * @type (String, String, String, String) -> String
+ */
+input-dialog:
+  (language, title, label, default-value) -> <prim("SSL_EXT_newnamedialog", language, title, label, default-value)>
+  
+input-dialog:
+  (title, label, default-value) -> <input-dialog>("", title, label, default-value)
+
+strategies //pp-table
+	
+get-pp-table=
+  import-term(include/SpoofaxConfiguration.generated.pp.af)
+	

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/plugin.xml	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="config" description="SpoofaxConfiguration" language="SpoofaxConfiguration" derivedFrom="DynamicRoot" validator="org.strategoxt.imp.editors.spoofax.configuration.SpoofaxConfigurationValidator" validatorClass="org.strategoxt.imp.editors.spoofax.configuration.SpoofaxConfigurationValidator"></language>
+       </extension>
+       <extension id="org.strategoxt.imp.editors.spoofax.configuration.parser" name="SpoofaxConfiguration Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="org.strategoxt.imp.editors.spoofax.configuration.SpoofaxConfigurationParseController" language="SpoofaxConfiguration">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/Common.sdf	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,47 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9]* -> ID
+    "-"? [0-9]+          -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "%%" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\%].[\%]
+    LAYOUT? -/- [\/].[\*]

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,55 @@
+%% Grammar for the SpoofaxConfiguration language
+%% By default, based on an example "entities" syntax
+module SpoofaxConfiguration
+
+imports Common
+
+exports
+
+  	context-free start-symbols
+    	Start
+
+  	context-free syntax
+  
+	    "Configuration"  ConfigSection*         -> Start {cons("Configuration")}
+	    
+	    "Includes" IncludeDefinition*    				-> ConfigSection{cons("Includes")}
+	     IncludeOption RelativePath*						-> IncludeDefinition {cons("Sources")}
+	    "SpxProjects" AbsolutePath* 						-> IncludeDefinition {cons("SpxProjects")}
+	    	
+	    
+	    "CodeGeneration" CodeGenDefinition*     -> ConfigSection{cons("CodeGeneration")}
+	    "OutputDirectory"  RelativePath				    -> CodeGenDefinition {cons("OutputDirectory")}
+	    
+	    "AllDirectories"												->   IncludeOption{cons("AllDirectories")}
+	    "RootDirectory"												  ->   IncludeOption{cons("RootDirectory")}
+
+	lexical syntax 
+		[a-zA-Z\.][A-Za-z0-9\_\-\/\ \.\+]* 		-> RelativePath
+		"/" RelativePath											-> AbsolutePath
+		[a-zA-Z]":/" RelativePath							-> AbsolutePath
+		"../" RelativePath										-> AbsolutePath{prefer}
+		
+	lexical syntax     
+    
+    "SpxProjects"        			  -> Reserved
+    "Sources"          					-> Reserved
+    "SpxSources"        		    -> Reserved
+    "Configuration"     		   	-> Reserved
+    "Includes"        					-> Reserved		
+    "AllDirectories"   					-> Reserved		
+    "RootDirectory" 				  -> Reserved		
+   
+    Reserved -> RelativePath{reject}
+	    
+	    
+	lexical restrictions
+		RelativePath -/- [A-Za-z0-9\_\-\/\ \.\+]
+			
+		"SpxProjects" 
+		"Sources" 
+		"SpxSources"
+		"Configuration" 
+		"Includes"
+		"AllDirectories"
+		"RootDirectory" -/- [A-Za-z0-9\_]
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/test/example.config
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/test/example.config	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,11 @@
+Configuration
+	Includes 
+		RootDirectory
+				test
+			
+		SpxProjects	
+			../org.strategoxt.imp.editors.spoofax
+			
+	CodeGeneration
+		OutputDirectory		.shadowdir  
+			 
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/check.str	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,180 @@
+module check
+
+imports
+  libstratego-lib
+  include/SpoofaxConfiguration
+  lib/editor-common.generated
+
+rules
+    
+  // Reports an error if a property type is undefined.
+  // This error is reported on the type name 'type'.
+  constraint-error:
+   SpxProjects(lst) -> <verify-project-references>lst
+   
+  constraint-error:
+   Sources(includeoption, list-local-dirs*) -> <verify-local-directories-exists>list-local-dirs*
+
+
+  
+rules  
+  verify-local-directories-exists : [] -> [] 
+  verify-local-directories-exists :[current | rest*] -> result 
+  where 
+  	not(?[])
+  where 
+  	result := <conc;flatten-list>(<verify-local-directory-exist>current , <verify-local-directories-exists>rest*)	
+  	
+  	
+  verify-local-directory-exist : current -> result  
+  where 
+  	if (<is-dir-exist> current) then
+		result := []
+  	else
+  		result := [(current, $[Direcotory "[current]" is not found.])]
+	end
+  	
+rules  	
+  
+  verify-project-references : [] -> []
+  
+  verify-project-references : [current | rest*] -> result 
+  where 
+  	not(?[])
+  where 
+  	result := <conc;flatten-list>(<verify-project-reference>current , <verify-project-references>rest*)  
+
+	verify-project-reference : current -> result
+	where 
+  	if (<is-dir-exist> current) then
+  		if(<is-spx-config-exist>current) then
+  			result := []
+  		else
+  			result := [(current, $[Illegal project reference. spx.config file is not found in the following directory : [current]])]
+  		end		
+  	else
+  		result := [(current, $[Illegal project reference. Following directory is not found [current]])]
+		end 
+	
+	
+	is-dir-exist =  where(file-exists ; filemode ; isdir) 
+
+	
+	is-spx-config-exist  =
+		?current-project-ref;
+		where(explode-string; <not(eq)>(<Hd> , 46)) ; // not started wtih  ..
+		where(<file-exists>$[[<id>]/spx.config]) ; 
+		with(
+			spx-config-location := $[[<id>]/spx.config];
+			rules (get-config-reference : current-project-ref ->spx-config-location)   
+		) 
+			
+	
+	is-spx-config-exist =
+		?current-project-ref;
+		where(
+			explode-string; <eq>(<Hd> , 46);
+			current-dir := <getcwd>
+		) ;
+		where(chdir);
+		where(
+			<file-exists>$[[<id>]/spx.config]
+			;spx-config-location := $[[<getcwd>]/spx.config]
+			;<debug> $[storing reference : "[current-project-ref]" -> "[spx-config-location]"]
+			;rules (get-config-reference : current-project-ref ->spx-config-location)
+		  ;<chdir>current-dir
+		<+
+			<chdir>current-dir;
+			fail
+		)
+		
+		
+	//Returns output directory for the code generation
+	get-code-output-directory = collect-all(?OutputDirectory(<id>), union) ; ?[<id>]
+	
+rules 
+	// Returns all the resolved directories 	
+	get-all-includes  = 
+ 	<conc>(<get-all-sources(|<project-path>)> ,   <get-sources-from-external-projects>)
+ 	;make-set
+ 	; where ( getcwd) 
+ 
+ 
+	get-all-sources(|project-path) =
+ 		collect-all(?Sources(_, _));
+ 		get-local-sources;
+ 		map(\(s,o)-> ($[[project-path]/[s]],o)\)
+ 	<+ 
+  		debug(!"Failed to get list of source directory.") ; fail
+ 
+	get-local-sources: [] -> []
+ 
+	get-local-sources: 
+ 	[Sources(include-option,sources*)|rest] -> result
+ 	where
+ 		<map(\s -> (s,include-option)\)>sources* => result';
+ 		<conc>(<get-local-sources>rest, result') => result	 	
+ 
+ 	// Resolving project References 
+	get-sources-from-external-projects = 
+  	get-all-project-refernces; 
+  	get-external-sources
+  	
+ 
+	get-all-project-refernces = 
+  	collect-all(?SpxProjects(<id>), conc) ; 
+  	flatten-list
+  <+ 
+  	debug(!"Failed to retrieve list of projects.") ; fail 
+  	
+  
+	get-external-sources: spx-projects* -> result
+	where 
+		not (?[])
+	  ;!spx-projects* => [current-project-path|rest*]
+	 where
+	 	result := <conc>( <resolve-external-sources<+ ![]>current-project-path , <get-external-sources>rest* )
+	 	
+	get-external-sources: []  -> []
+	 
+	resolve-external-sources =
+		where(
+			explode-string; <not(eq)>(<Hd> , 46) // not started wtih  ..
+		); 
+	  ?current-project-path;
+	  verify-directory-exists;
+	  verify-config-file-exists;   
+	  <parse-file>$[[current-project-path]/spx.config];
+	  get-all-sources(|current-project-path)
+	  	
+	resolve-external-sources =
+		where(
+			explode-string; <eq>(<Hd> , 46);
+			current-dir := <getcwd>
+		) ;
+		where(
+	  		verify-directory-exists;   
+	  		chdir; //since relative path is provided, moving to the directory specified
+	  		verify-config-file-exists;	
+	  		<parse-spoofaxconfiguration-file;get-all-sources(|<getcwd>)>"spx.config" => result;
+	  		<chdir>current-dir; 
+	  		!result
+	  	<+
+	  		<chdir>current-dir;
+	  		fail 
+		)
+		
+	verify-directory-exists  = is-spx-config-exist  <+ throw-directory-not-found-exception(fail) 
+	
+	verify-config-file-exists = is-dir-exist  <+ throw-config-not-found-exception(fail)   
+	
+	
+	is-spx-config-exist = where(<file-exists>$[[<id>]/spx.config])  
+	
+	is-dir-exist =  where(file-exists ; filemode ; isdir)
+
+
+	throw-directory-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find the directory specified: ") ;post-processing-strategy
+	
+	throw-config-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find spx.config file in the directory specified: ") ;post-processing-strategy
+	   	 		 			   	 		 		
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/spoofaxconfiguration.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/spoofaxconfiguration.str	Wed Apr 27 11:34:37 2011	(r22614)
@@ -0,0 +1,65 @@
+module spoofaxconfiguration
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/SpoofaxConfiguration
+  lib/editor-common.generated
+  check
+
+rules // Main editor interface (defined by editor/SpoofaxConfiguration-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := [];
+      notes    := []
+  
+  
+  get-full-paths:
+    (selected, position, ast, path, project-path) -> (filename, result)
+ 		where 
+ 			filename := <guarantee-extension(|"config.fullpath")> path;
+ 			result := <get-all-includes>selected;
+ 			<debug(!"outputdir : ")><get-code-output-directory>selected
+       
+ // Prints the abstract syntax ATerm of a selection.
+ generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected	// we just return the input term
+  		 
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> elem
+    where 
+    	<resolve> node => elem
+    		 
+    	
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) ->[]
+  
+
+rules 
+		
+	resolve : str -> result
+	where 
+			(is-string <+ ?[<id>]); get-config-reference;parse-file => result
+		<+ 
+			!str => result 
+		
+	
\ No newline at end of file

From R.B.Vermaas at tudelft.nl  Wed Apr 27 14:22:32 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 12:22:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22615 -
	spoofax-imp/trunk/org.strategoxt.imp.testing
Message-ID: <20110427122232.7DA502B802A@mx2.tudelft.nl>

Author: rob
Date: Wed Apr 27 12:22:32 2011
New Revision: 22615
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22615&sc=1

Log:
for testing add external_classpath, will remove later

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Wed Apr 27 11:34:37 2011	(r22614)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Wed Apr 27 12:22:32 2011	(r22615)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 
 <project name="build.generated">
-
+        <property name="external_classpath" value=""/>        
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
         <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
@@ -378,7 +378,7 @@
                 <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
                 <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
             </antcall>
-            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}:${external_classpath}" srcdir="${src-gen}" destdir="${build}" source="1.5" target="1.5" debug="on"/>
             <!-- copy imported terms -->
             <copy todir="${build}/trans">
                 <fileset dir="${src-gen}/trans" excludes="**/*.java"/>

From M.A.Akhter at student.tudelft.nl  Wed Apr 27 15:06:59 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 27 Apr 2011 13:06:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22616 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans
Message-ID: <20110427130659.BF375CC111@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 27 13:06:59 2011
New Revision: 22616
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22616&sc=1

Log:
* refactor the funcitonallity in separate files 
* fixed issues with resolving external project refs

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/resolve.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/spoofaxconfiguration.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/check.str	Wed Apr 27 12:22:32 2011	(r22615)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/check.str	Wed Apr 27 13:06:59 2011	(r22616)
@@ -87,94 +87,4 @@
 			<chdir>current-dir;
 			fail
 		)
-		
-		
-	//Returns output directory for the code generation
-	get-code-output-directory = collect-all(?OutputDirectory(<id>), union) ; ?[<id>]
-	
-rules 
-	// Returns all the resolved directories 	
-	get-all-includes  = 
- 	<conc>(<get-all-sources(|<project-path>)> ,   <get-sources-from-external-projects>)
- 	;make-set
- 	; where ( getcwd) 
- 
- 
-	get-all-sources(|project-path) =
- 		collect-all(?Sources(_, _));
- 		get-local-sources;
- 		map(\(s,o)-> ($[[project-path]/[s]],o)\)
- 	<+ 
-  		debug(!"Failed to get list of source directory.") ; fail
- 
-	get-local-sources: [] -> []
- 
-	get-local-sources: 
- 	[Sources(include-option,sources*)|rest] -> result
- 	where
- 		<map(\s -> (s,include-option)\)>sources* => result';
- 		<conc>(<get-local-sources>rest, result') => result	 	
- 
- 	// Resolving project References 
-	get-sources-from-external-projects = 
-  	get-all-project-refernces; 
-  	get-external-sources
-  	
- 
-	get-all-project-refernces = 
-  	collect-all(?SpxProjects(<id>), conc) ; 
-  	flatten-list
-  <+ 
-  	debug(!"Failed to retrieve list of projects.") ; fail 
-  	
-  
-	get-external-sources: spx-projects* -> result
-	where 
-		not (?[])
-	  ;!spx-projects* => [current-project-path|rest*]
-	 where
-	 	result := <conc>( <resolve-external-sources<+ ![]>current-project-path , <get-external-sources>rest* )
-	 	
-	get-external-sources: []  -> []
-	 
-	resolve-external-sources =
-		where(
-			explode-string; <not(eq)>(<Hd> , 46) // not started wtih  ..
-		); 
-	  ?current-project-path;
-	  verify-directory-exists;
-	  verify-config-file-exists;   
-	  <parse-file>$[[current-project-path]/spx.config];
-	  get-all-sources(|current-project-path)
-	  	
-	resolve-external-sources =
-		where(
-			explode-string; <eq>(<Hd> , 46);
-			current-dir := <getcwd>
-		) ;
-		where(
-	  		verify-directory-exists;   
-	  		chdir; //since relative path is provided, moving to the directory specified
-	  		verify-config-file-exists;	
-	  		<parse-spoofaxconfiguration-file;get-all-sources(|<getcwd>)>"spx.config" => result;
-	  		<chdir>current-dir; 
-	  		!result
-	  	<+
-	  		<chdir>current-dir;
-	  		fail 
-		)
-		
-	verify-directory-exists  = is-spx-config-exist  <+ throw-directory-not-found-exception(fail) 
-	
-	verify-config-file-exists = is-dir-exist  <+ throw-config-not-found-exception(fail)   
-	
-	
-	is-spx-config-exist = where(<file-exists>$[[<id>]/spx.config])  
-	
-	is-dir-exist =  where(file-exists ; filemode ; isdir)
-
-
-	throw-directory-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find the directory specified: ") ;post-processing-strategy
-	
-	throw-config-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find spx.config file in the directory specified: ") ;post-processing-strategy
-	   	 		 			   	 		 		
\ No newline at end of file
+		 		 		
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/resolve.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/resolve.str	Wed Apr 27 13:06:59 2011	(r22616)
@@ -0,0 +1,102 @@
+module resolve 
+
+imports 
+	lib/editor-common.generated
+	include/spoofaxconfiguration 
+	check
+
+rules
+	//Returns output directory for the code generation
+	get-code-output-directory = collect-all(?OutputDirectory(<id>), union) ; ?[<id>]
+
+	// Returns all the resolved directories 	
+	get-all-includes  = 
+ 	<conc>(<get-all-sources(|<project-path>)> ,   <get-sources-from-external-projects>)
+ 	;make-set
+ 
+ 
+	get-all-sources(|project-path) =
+ 		collect-all(?Sources(_, _));
+ 		get-local-sources;
+ 		map(\(s,o)-> ($[[project-path]/[s]],o)\)
+ 	<+ 
+  		debug(!"Failed to get list of source directory.") ; fail
+ 
+	get-local-sources: [] -> []
+ 
+	get-local-sources: 
+ 	[Sources(include-option,sources*)|rest] -> result
+ 	where
+ 		<map(\s -> (s,include-option)\)>sources* => result';
+ 		<conc>(<get-local-sources>rest, result') => result	 	
+ 
+ 
+rules 
+ 	
+ 	// Resolving project References 
+	get-sources-from-external-projects = 
+  	get-all-project-refernces; 
+  	get-external-sources
+
+	// Returns all the external sournce collected from the project references 
+ 	get-external-sources: spx-projects* -> result
+	where 
+		not (?[])
+	  ;!spx-projects* => [current-project-path|rest*]
+	 where
+	 	result := <conc>( <resolve-external-sources<+ ![]>current-project-path , <get-external-sources>rest* )
+	 	
+	get-external-sources: []  -> []
+	 
+	 
+	// Resolves External Project Refernces and returns the directories configured in that configuration file
+	// Transitive imports/inclusion is not allowed. If a->b , b->c != a->c
+	resolve-external-sources =
+		where(explode-string; <not(eq)>(<Hd> , 46)) ; // not started wtih  ..
+	  	?current-project-path;
+	  	fail-if-no-directory-found;
+	  	fail-if-no-config-found;   
+	  	<parse-file>$[[current-project-path]/spx.config];
+	  	get-all-sources(|current-project-path)
+	
+	  	
+	resolve-external-sources =
+		where(explode-string; <eq>(<Hd> , 46)) ;
+		where(current-dir := <getcwd>);
+		(
+	  		?current-project-path;
+	  		<fail-if-no-directory-found>current-project-path;
+	  		<chdir> current-project-path;
+	  		<fail-if-no-config-found><getcwd>; // verifies config file exisit in the current working directory
+	  		<parse-spoofaxconfiguration-file;get-all-sources(|<getcwd>)>"spx.config" => result;
+	  		<chdir>current-dir; 
+	  		!result
+	  	<+
+	  		<chdir>current-dir  
+		)
+
+
+ 
+	get-all-project-refernces = 
+  	collect-all(?SpxProjects(<id>), conc) ; 
+  	flatten-list
+  <+ 
+  	debug(!"Failed to retrieve list of projects.") ; fail 
+ 
+  
+		
+rules 
+
+	// Utility strategies  
+
+	
+	// verifies whether current directory exists 
+	fail-if-no-directory-found  = is-dir-exist   <+ throw-directory-not-found-exception(fail) 
+	
+	// verfies whether there is a config file in the provided directory 
+	fail-if-no-config-found = is-spx-config-exist   <+ throw-config-not-found-exception(fail)   
+	
+	throw-directory-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find the directory specified: ") ;post-processing-strategy
+	
+	throw-config-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find spx.config file in the directory specified: ") ;post-processing-strategy
+	   	 	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/spoofaxconfiguration.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/spoofaxconfiguration.str	Wed Apr 27 12:22:32 2011	(r22615)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/spoofaxconfiguration.str	Wed Apr 27 13:06:59 2011	(r22616)
@@ -7,6 +7,7 @@
   include/SpoofaxConfiguration
   lib/editor-common.generated
   check
+  resolve
 
 rules // Main editor interface (defined by editor/SpoofaxConfiguration-Builders and -References.esv)
   
@@ -25,8 +26,8 @@
     (selected, position, ast, path, project-path) -> (filename, result)
  		where 
  			filename := <guarantee-extension(|"config.fullpath")> path;
- 			result := <get-all-includes>selected;
- 			<debug(!"outputdir : ")><get-code-output-directory>selected
+ 			result := <get-all-includes>selected
+ 			
        
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:

From M.A.Akhter at student.tudelft.nl  Wed Apr 27 15:07:32 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 27 Apr 2011 13:07:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22617 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans
Message-ID: <20110427130732.476372B8054@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 27 13:07:31 2011
New Revision: 22617
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22617&sc=1

Log:
* updated config. Added few error checking and documentations.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Wed Apr 27 13:06:59 2011	(r22616)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Wed Apr 27 13:07:31 2011	(r22617)
@@ -144,19 +144,15 @@
  		<conc>(<get-local-sources>rest, result') => result	 	
  
  
- 
+rules 
+ 	
  	// Resolving project References 
 	get-sources-from-external-projects = 
   	get-all-project-refernces; 
   	get-external-sources
- 
-	get-all-project-refernces = 
-  	collect-all(?SpxProjects(<id>), conc) ; 
-  	flatten-list
-  <+ 
-  	debug(!"Failed to retrieve list of projects.") ; fail 
-  
-	get-external-sources: spx-projects* -> result
+
+	// Returns all the external sournce collected from the project references 
+ 	get-external-sources: spx-projects* -> result
 	where 
 		not (?[])
 	  ;!spx-projects* => [current-project-path|rest*]
@@ -165,6 +161,9 @@
 	 	
 	get-external-sources: []  -> []
 	 
+	 
+	// Resolves External Project Refernces and returns the directories configured in that configuration file
+	// Transitive imports/inclusion is not allowed. If a->b , b->c != a->c
 	resolve-external-sources =
 		where(explode-string; <not(eq)>(<Hd> , 46)) ; // not started wtih  ..
 	  	?current-project-path;
@@ -172,31 +171,48 @@
 	  	verify-config-file-exists;   
 	  	<parse-file>$[[current-project-path]/spx.config];
 	  	get-all-sources(|current-project-path)
+	
 	  	
 	resolve-external-sources =
 		where(explode-string; <eq>(<Hd> , 46)) ;
 		where(current-dir := <getcwd>);
 		(
 	  		?current-project-path;
-	  		verify-directory-exists;   
+	  		<verify-directory-exists>current-project-path;
 	  		<chdir> current-project-path;
-	  		verify-config-file-exists;
+	  		<verify-config-file-exists><getcwd>; // verifies config file exisit in the current working directory
 	  		<parse-spoofaxconfiguration-file;get-all-sources(|<getcwd>)>"spx.config" => result;
-	  		<chdir>current-dir; // restoring current directory
+	  		<chdir>current-dir; 
 	  		!result
 	  	<+
-	  		<chdir>current-dir // restoring current directory
+	  		<chdir>current-dir  
 		)
-	verify-directory-exists  = is-spx-config-exist  <+ throw-directory-not-found-exception(fail) 
+
+
+ 
+	get-all-project-refernces = 
+  	collect-all(?SpxProjects(<id>), conc) ; 
+  	flatten-list
+  <+ 
+  	debug(!"Failed to retrieve list of projects.") ; fail 
+ 
+  
+		
+rules 
+
+	// Utility strategies  
+
 	
-	verify-config-file-exists = is-dir-exist  <+ throw-config-not-found-exception(fail)   
+	// verifies whether current directory exists 
+	verify-directory-exists  = is-dir-exist   <+ throw-directory-not-found-exception(fail) 
 	
+	// verfies whether there is a config file in the provided directory 
+	verify-config-file-exists = is-spx-config-exist   <+ throw-config-not-found-exception(fail)   
 	
 	is-spx-config-exist = where(<file-exists>$[[<id>]/spx.config])  
 	
 	is-dir-exist =  where(file-exists ; filemode ; isdir)
 
-
 	throw-directory-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find the directory specified: ") ;post-processing-strategy
 	
 	throw-config-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find spx.config file in the directory specified: ") ;post-processing-strategy

From M.A.Akhter at student.tudelft.nl  Wed Apr 27 15:07:52 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 27 Apr 2011 13:07:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22618 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax
Message-ID: <20110427130752.43179CC103@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 27 13:07:51 2011
New Revision: 22618
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22618&sc=1

Log:
* example config file

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/spx.config

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/spx.config
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/spx.config	Wed Apr 27 13:07:31 2011	(r22617)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/spx.config	Wed Apr 27 13:07:51 2011	(r22618)
@@ -8,7 +8,8 @@
 		SpxProjects	
 			%%Specify external reference projects
 			%% e.g. c:/test
-			../Test/		
+			../org.strategoxt.imp.editors.spoofax.configuration
+	
 	
 	CodeGeneration 
 		OutputDirectory		.shadowdir
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Wed Apr 27 15:09:03 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 27 Apr 2011 13:09:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22619 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test
Message-ID: <20110427130903.8316ECC042@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 27 13:09:03 2011
New Revision: 22619
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22619&sc=1

Log:
* (in-progress) spoofax entity lang in SPX language

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang2.spx

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang2.spx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang2.spx	Wed Apr 27 13:09:03 2011	(r22619)
@@ -0,0 +1,63 @@
+package entity-lang1 
+
+	module module-main
+		context-free start-symbols 
+    	Start
+
+  	context-free syntax
+	    "module" ID Definition*       -> Start {cons("Module")}
+	    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+	    
+	    ID ":" Type                   -> Property {cons("Property")}
+	    ID                            -> Type {cons("Type")}
+
+		
+	module entity-builders    
+		imports 
+			entity.Common	  
+			 
+		
+		 	
+	module common
+		lexical syntax
+   
+    [a-zA-Z][a-zA-Z0-9\_]* -> ID
+    "-"? [0-9]+            -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar 
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+     
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions  
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

From L.C.L.Kats at tudelft.nl  Wed Apr 27 15:17:04 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 13:17:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22620 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110427131704.79E7E2B8049@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 13:17:04 2011
New Revision: 22620
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22620&sc=1

Log:
Show marker if analysis returns malformed tuple, since the popup stopped working

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Wed Apr 27 13:09:03 2011	(r22619)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Wed Apr 27 13:17:04 2011	(r22620)
@@ -28,7 +28,6 @@
 import org.eclipse.core.resources.IMarker;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
-import org.eclipse.core.resources.IncrementalProjectBuilder;
 import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
@@ -75,7 +74,6 @@
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoException;
 import org.strategoxt.stratego_lib.set_config_0_0;
-import org.strategoxt.stratego_lib.system_about_0_0;
 
 /**
  * Basic Stratego feedback (i.e., errors and warnings) provider.
@@ -584,8 +582,10 @@
 			    feedbackToMarkers(resource, warnings, IMarker.SEVERITY_WARNING);
 			    feedbackToMarkers(resource, notes, IMarker.SEVERITY_INFO);
 			} else {
-				// Throw an exception to trigger an Eclipse pop-up  
-				throw new StrategoException("Illegal output from " + feedbackFunction + " (should be (errors,warnings,notes) tuple: " + feedback);
+				Environment.logException("Incorrect output from analysis function: " + feedbackFunction);
+				messages.addMarkerFirstLine(resource, "Analysis failed: " + feedbackFunction +
+						" should return (errors,warnings,notes) or (ast,errors,warnings,notes) tuple ",
+						IMarker.SEVERITY_ERROR);
 			}
 		} finally {
 			messages.commitAllChanges();

From R.B.Vermaas at tudelft.nl  Wed Apr 27 15:18:41 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 13:18:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22621 - hydra/jobs
Message-ID: <20110427131841.11D8A108C03C@mx3.tudelft.nl>

Author: rob
Date: Wed Apr 27 13:18:40 2011
New Revision: 22621
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22621&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:17:04 2011	(r22620)
+++ hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:18:40 2011	(r22621)
@@ -167,6 +167,39 @@
             ulimit -s unlimited
 
             mvn org.sonatype.tycho:maven-tycho-plugin:generate-poms -Dversion=1.0.0-SNAPSHOT -DgroupId=spoofax -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags}
+            for e in */build.main.xml
+            do
+              POM=`dirname $e`/pom.xml
+              if [[ -f $POM ]] ; then
+                sed -i 's|</project>||' $POM
+                echo '
+<build> 
+  <plugin>
+    <groupId>org.apache.maven.plugins</groupId>
+    <artifactId>maven-antrun-plugin</artifactId>
+    <executions>
+    	<execution>
+    		<id>generate-sources</id>
+    		<phase>generate-sources</phase>
+    		<configuration>
+    			<tasks>
+    				<echo>Running ant script</echo>
+    				<property name="external_classpath" refid="maven.compile.classpath"/>
+    				<ant antfile="${basedir}/build.main.xml" inheritRefs="true">
+    					<target name="all" />
+    				</ant>
+    			</tasks>
+    		</configuration>
+    		<goals>
+    			<goal>run</goal>
+    		</goals>
+    	</execution>
+    </executions>
+  </plugin>
+</build></project>' >>$POM
+                
+              fi
+            done
  
             cp ${strcJava}/share/strc-java/strategoxt.jar org.strategoxt.strj/java
 
@@ -174,21 +207,23 @@
             make -C org.strategoxt.imp.generator all
             stopNest
 
-            mvn -fn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e  || true
 
-            for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer org.strategoxt.imp.testing
-            do
-                mkdir -p $e/utils/
-                cp -v org.strategoxt.imp.generator/lib/*.jar $e/utils/
-                cp -v org.strategoxt.strj/java/strategoxt.jar $e/utils/
-	            header "Pre-building $e"
-	            cd $e
-                export LOCALCLASSPATH="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
-                export ANT_OPTS="-Xss8m -Xmx768m"
-	            ant -verbose -f build.main.xml -Declipse.spoofaximp.jars=utils/ -Declipse.home=$eclipsefakehome
-	            cd ..
-	            stopNest
-            done
+
+            #mvn -fn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e  || true
+
+            #for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer org.strategoxt.imp.testing
+            #do
+            #    mkdir -p $e/utils/
+            #    cp -v org.strategoxt.imp.generator/lib/*.jar $e/utils/
+            #    cp -v org.strategoxt.strj/java/strategoxt.jar $e/utils/
+	    #        header "Pre-building $e"
+	    #        cd $e
+            #    export LOCALCLASSPATH="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
+            #    export ANT_OPTS="-Xss8m -Xmx768m"
+	    #        ant -verbose -f build.main.xml -Declipse.spoofaximp.jars=utils/ -Declipse.home=$eclipsefakehome
+	    #        cd ..
+	    #        stopNest
+            #done
             	        
             mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e
 	      '';

From R.B.Vermaas at tudelft.nl  Wed Apr 27 15:19:49 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 13:19:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22622 - hydra/jobs
Message-ID: <20110427131949.70A89CC067@mx4.tudelft.nl>

Author: rob
Date: Wed Apr 27 13:19:49 2011
New Revision: 22622
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22622&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:18:40 2011	(r22621)
+++ hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:19:49 2011	(r22622)
@@ -185,7 +185,7 @@
     			<tasks>
     				<echo>Running ant script</echo>
     				<property name="external_classpath" refid="maven.compile.classpath"/>
-    				<ant antfile="${basedir}/build.main.xml" inheritRefs="true">
+    				<ant antfile="build.main.xml" inheritRefs="true">
     					<target name="all" />
     				</ant>
     			</tasks>

From R.B.Vermaas at tudelft.nl  Wed Apr 27 15:32:14 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 13:32:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22623 - hydra/jobs
Message-ID: <20110427133214.2904C7F8024@mx1.tudelft.nl>

Author: rob
Date: Wed Apr 27 13:32:13 2011
New Revision: 22623
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22623&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:19:49 2011	(r22622)
+++ hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:32:13 2011	(r22623)
@@ -174,6 +174,7 @@
                 sed -i 's|</project>||' $POM
                 echo '
 <build> 
+  <plugins>
   <plugin>
     <groupId>org.apache.maven.plugins</groupId>
     <artifactId>maven-antrun-plugin</artifactId>
@@ -196,6 +197,7 @@
     	</execution>
     </executions>
   </plugin>
+  </plugins>
 </build></project>' >>$POM
                 
               fi

From R.B.Vermaas at tudelft.nl  Wed Apr 27 15:46:16 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 13:46:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22624 - hydra/jobs
Message-ID: <20110427134616.A0341108C00D@mx3.tudelft.nl>

Author: rob
Date: Wed Apr 27 13:46:16 2011
New Revision: 22624
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22624&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:32:13 2011	(r22623)
+++ hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:46:16 2011	(r22624)
@@ -167,6 +167,14 @@
             ulimit -s unlimited
 
             mvn org.sonatype.tycho:maven-tycho-plugin:generate-poms -Dversion=1.0.0-SNAPSHOT -DgroupId=spoofax -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags}
+
+            cp ${strcJava}/share/strc-java/strategoxt.jar org.strategoxt.strj/java
+
+            header "Building org.strategoxt.imp.generator"
+            make -C org.strategoxt.imp.generator all
+            stopNest
+
+
             for e in */build.main.xml
             do
               POM=`dirname $e`/pom.xml
@@ -201,15 +209,10 @@
 </build></project>' >>$POM
                 
               fi
+              mkdir -p `dirname $e`/utils/
+              cp -v org.strategoxt.imp.generator/lib/*.jar $e/utils/
+              cp -v org.strategoxt.strj/java/strategoxt.jar $e/utils/
             done
- 
-            cp ${strcJava}/share/strc-java/strategoxt.jar org.strategoxt.strj/java
-
-            header "Building org.strategoxt.imp.generator"
-            make -C org.strategoxt.imp.generator all
-            stopNest
-
-
 
             #mvn -fn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e  || true
 
@@ -227,6 +230,11 @@
 	    #        stopNest
             #done
             	        
+            mkdir utils
+            export LOCALCLASSPATH="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar"
+            export ANT_OPTS="-Xss8m -Xmx768m"
+            export ANT_ARGS="-Declipse.spoofaximp.jars=utils/ -Declipse.home=$eclipsefakehome"
+
             mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e
 	      '';
 	      

From R.B.Vermaas at tudelft.nl  Wed Apr 27 15:49:50 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 13:49:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22625 - hydra/jobs
Message-ID: <20110427134950.E6DC52B8059@mx2.tudelft.nl>

Author: rob
Date: Wed Apr 27 13:49:50 2011
New Revision: 22625
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22625&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:46:16 2011	(r22624)
+++ hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:49:50 2011	(r22625)
@@ -210,8 +210,8 @@
                 
               fi
               mkdir -p `dirname $e`/utils/
-              cp -v org.strategoxt.imp.generator/lib/*.jar $e/utils/
-              cp -v org.strategoxt.strj/java/strategoxt.jar $e/utils/
+              cp -v org.strategoxt.imp.generator/lib/*.jar `dirname $e`/utils/
+              cp -v org.strategoxt.strj/java/strategoxt.jar `dirname $e`/utils/
             done
 
             #mvn -fn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e  || true

From L.C.L.Kats at tudelft.nl  Wed Apr 27 15:55:35 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 13:55:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22626 - in
	spoofax/trunk/spoofax:
	org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego
	org.spoofax.interpreter.library.language/src/org/spoofax/interpret...
Message-ID: <20110427135535.8D035CC032@mx4.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 13:55:35 2011
New Revision: 22626
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22626&sc=1

Log:
- made a sketch of an attachment-to-annotation reader/writer class
- removed TermAttachmentType from the GWT dir (removed the offending sanity check from the base type instead of maintaining this override)

Added:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/org/spoofax/terms/attachments/
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Match.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Match.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Match.java	Wed Apr 27 13:49:50 2011	(r22625)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Match.java	Wed Apr 27 13:55:35 2011	(r22626)
@@ -393,7 +393,7 @@
     throws InterpreterException {
 
     	if (t == null) {
-    	    throw new InterpreterException("Null term while matching: term library is defective");
+    	    throw new InterpreterException("Null term while matching: term library or one of the primitives is defective");
     	}
         switch (t.getTermType()) {
         case IStrategoTerm.APPL:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndex.java	Wed Apr 27 13:49:50 2011	(r22625)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndex.java	Wed Apr 27 13:55:35 2011	(r22626)
@@ -195,11 +195,11 @@
 		IStrategoTerm type = factory.getEntryType(template);
 		IStrategoTerm namespace = factory.getEntryNamespace(template);
 		SemanticIndexEntryParent parent = getEntryParentAt(namespace, factory.getEntryId(template));
-		IStrategoList results = termFactory.makeList();
 		if (parent == null)
-			return results;
+			return termFactory.makeList();
 		if (type == factory.getDefCon() && parent.getAllDefsCached() != null)
 			return parent.getAllDefsCached();
+		IStrategoList results = termFactory.makeList();
 		for (SemanticIndexEntry entry : parent.getChildren()) {
 			if (entry.getType() == type) {
 				assert !entry.isParent();

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java	Wed Apr 27 13:55:35 2011	(r22626)
@@ -0,0 +1,75 @@
+package org.spoofax.terms.attachments;
+
+import static org.spoofax.terms.Term.isTermAppl;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.TermTransformer;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class TermAttachmentSerializer {
+	
+	private final ITermFactory factory;
+
+	public TermAttachmentSerializer(ITermFactory factory) {
+		this.factory = factory;
+	}
+	
+	public static void initialize(TermAttachmentType<?>... types) {
+		// Once instantiated, the attachments initialize themselves
+	}
+	
+	public IStrategoTerm toAnnotations(IStrategoTerm term) {
+		final ITermFactory factory = this.factory;
+		
+		return new TermTransformer(factory, false) {
+			@Override
+			public IStrategoTerm preTransform(IStrategoTerm term) {
+				IStrategoList results = null;
+				ITermAttachment attachment = term.getAttachment(null);
+				while (attachment != null) {
+					if (attachment.getAttachmentType().isSerializationSupported()) {
+						IStrategoTerm result = attachment.getAttachmentType().toTerm(factory, attachment);
+						if (results == null) results = term.getAnnotations();
+						results = factory.makeListCons(result, results);
+					}
+					attachment = attachment.getNext();
+				}
+				if (results != null)
+					term = factory.annotateTerm(term, results);
+				return term;
+			}
+		}.transform(term);
+	}
+	
+	public IStrategoTerm fromAnnotations(IStrategoTerm term, boolean mutableOperations) {
+		if (!mutableOperations)
+			throw new NotImplementedException("fromAnnotations() with mutableOperations == false");
+		
+		final TermAttachmentType<?>[] types = TermAttachmentType.getKnownTypes();
+		
+		return new TermTransformer(factory, false) {
+			@Override
+			public IStrategoTerm preTransform(IStrategoTerm term) {
+				IStrategoList annotations = term.getAnnotations();
+				while (!annotations.isEmpty()) {
+					IStrategoTerm head = annotations.head();
+					if (isTermAppl(head)) {
+						IStrategoAppl appl = (IStrategoAppl) head;
+						IStrategoConstructor con = appl.getConstructor();
+						for (TermAttachmentType<?> type : types)
+							if (type.getTermConstructor() == con)
+								term.putAttachment(type.fromTerm(appl)); // mutate
+					}
+				}
+				return term;
+			}
+		}.transform(term);
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java	Wed Apr 27 13:49:50 2011	(r22625)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java	Wed Apr 27 13:55:35 2011	(r22626)
@@ -1,7 +1,8 @@
 package org.spoofax.terms.attachments;
 
-import java.util.HashMap;
-import java.util.Map;
+import java.util.Collections;
+import java.util.Set;
+import java.util.concurrent.CopyOnWriteArraySet;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
@@ -14,8 +15,8 @@
  */
 public abstract class TermAttachmentType<T extends ITermAttachment> {
 	
-	private static Map<Class<?>, TermAttachmentType<?>> asyncTypes =
-		new HashMap<Class<?>, TermAttachmentType<?>>();
+	private static Set<TermAttachmentType<?>> asyncTypes =
+		new CopyOnWriteArraySet<TermAttachmentType<?>>();
 	
 	private final Class<T> type;
 	
@@ -27,13 +28,22 @@
 	protected TermAttachmentType(Class<T> type, String constructorName, int constructorArity) {
 		this.type = type;
 		this.constructor = new TermFactory().makeConstructor(constructorName, constructorArity);
-		assert isNotOverlapping(type) : "Term attachments do not support inheritance, failed on: " + type.getName();
+		// assert isNotOverlapping(type) : "Term attachments do not support inheritance, failed on: " + type.getName();
 	}
 	
-	/**
+	public static TermAttachmentType<?>[] getKnownTypes() {
+		Set<TermAttachmentType<?>> copy = asyncTypes;
+		return copy.toArray(new TermAttachmentType[copy.size()]);
+	}
+	
+	/*
 	 * Sanity check: can only create attachment types that are not
 	 * a superclass or subclass of another, existing attachment type.
-	 */
+	 *
+	 * (Not supported with GWT: isAssignableFrom.)
+	 *
+	private static Map<Class<?>, TermAttachmentType<?>> asyncTypes =
+		new HashMap<Class<?>, TermAttachmentType<?>>();
 	private boolean isNotOverlapping(Class<T> baseClass) {
 		synchronized (TermAttachmentType.class) {
 			for (Class<?> otherClass : asyncTypes.keySet()) {
@@ -44,13 +54,20 @@
 		}
 		return false;
 	}
+	*/
 	
 	public boolean isSerializationSupported() {
 		return constructor != null;
 	}
 	
-	public final IStrategoAppl toTerm(ITermFactory factory, T attachment) {
-		return factory.makeAppl(constructor, toSubterms(factory, attachment));
+	public IStrategoConstructor getTermConstructor() {
+		return constructor;
+	}
+	
+	@SuppressWarnings("unchecked")
+	public final IStrategoAppl toTerm(ITermFactory factory, ITermAttachment attachment) {
+		assert this == attachment.getAttachmentType();
+		return factory.makeAppl(constructor, toSubterms(factory, (T) attachment));
 	}
 
 	public final T fromTerm(IStrategoAppl term) {

From L.C.L.Kats at tudelft.nl  Wed Apr 27 15:55:45 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 13:55:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22627 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <20110427135545.5DDE9108C044@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 13:55:45 2011
New Revision: 22627
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22627&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java	Wed Apr 27 13:55:35 2011	(r22626)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java	Wed Apr 27 13:55:45 2011	(r22627)
@@ -10,6 +10,7 @@
 import org.spoofax.terms.attachments.AbstractTermAttachment;
 import org.spoofax.terms.attachments.ParentAttachment;
 import org.spoofax.terms.attachments.TermAttachmentType;
+import org.spoofax.terms.attachments.VolatileTermAttachmentType;
 
 /** 
  * A tree-wide source resource and parse controller attachment.
@@ -24,7 +25,7 @@
 	private static final long serialVersionUID = -8114392265614382463L;
 
 	public static TermAttachmentType<SourceAttachment> TYPE =
-		TermAttachmentType.create(SourceAttachment.class);
+		new VolatileTermAttachmentType<SourceAttachment>(SourceAttachment.class);
 	
 	private final IResource resource;
 	

From L.C.L.Kats at tudelft.nl  Wed Apr 27 15:55:54 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 13:55:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22628 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110427135554.3C2947F8058@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 13:55:53 2011
New Revision: 22628
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22628&sc=1

Log:
spoofax-libs

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From R.B.Vermaas at tudelft.nl  Wed Apr 27 15:58:40 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 13:58:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22629 - hydra/jobs
Message-ID: <20110427135840.0AEB8108C03D@mx3.tudelft.nl>

Author: rob
Date: Wed Apr 27 13:58:39 2011
New Revision: 22629
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22629&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:55:53 2011	(r22628)
+++ hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:58:39 2011	(r22629)
@@ -194,6 +194,8 @@
     			<tasks>
     				<echo>Running ant script</echo>
     				<property name="external_classpath" refid="maven.compile.classpath"/>
+    				<property name="eclipse.spoofaximp.jarse" value="utils/"/>
+    				<property name="eclipse.home" value="$eclipsefakehome"/>
     				<ant antfile="build.main.xml" inheritRefs="true">
     					<target name="all" />
     				</ant>

From R.B.Vermaas at tudelft.nl  Wed Apr 27 16:10:33 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 14:10:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22630 - hydra/jobs
Message-ID: <20110427141033.E055DCC0F7@mx4.tudelft.nl>

Author: rob
Date: Wed Apr 27 14:10:33 2011
New Revision: 22630
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22630&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Apr 27 13:58:39 2011	(r22629)
+++ hydra/jobs/spoofax-imp.nix	Wed Apr 27 14:10:33 2011	(r22630)
@@ -194,7 +194,7 @@
     			<tasks>
     				<echo>Running ant script</echo>
     				<property name="external_classpath" refid="maven.compile.classpath"/>
-    				<property name="eclipse.spoofaximp.jarse" value="utils/"/>
+    				<property name="eclipse.spoofaximp.jars" value="utils/"/>
     				<property name="eclipse.home" value="$eclipsefakehome"/>
     				<ant antfile="build.main.xml" inheritRefs="true">
     					<target name="all" />

From R.B.Vermaas at tudelft.nl  Wed Apr 27 16:28:15 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 14:28:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22631 - hydra/jobs
Message-ID: <20110427142815.9A88E7F803C@mx1.tudelft.nl>

Author: rob
Date: Wed Apr 27 14:28:15 2011
New Revision: 22631
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22631&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Apr 27 14:10:33 2011	(r22630)
+++ hydra/jobs/spoofax-imp.nix	Wed Apr 27 14:28:15 2011	(r22631)
@@ -195,6 +195,7 @@
     				<echo>Running ant script</echo>
     				<property name="external_classpath" refid="maven.compile.classpath"/>
     				<property name="eclipse.spoofaximp.jars" value="utils/"/>
+    				<property name="eclipse.spoofaximp.strategojar" value="utils/strategoxt.jar"/>
     				<property name="eclipse.home" value="$eclipsefakehome"/>
     				<ant antfile="build.main.xml" inheritRefs="true">
     					<target name="all" />

From seba at informatik.uni-marburg.de  Wed Apr 27 16:42:31 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Wed, 27 Apr 2011 14:42:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22632 -
	sugarj/trunk/case-studies/concretesyntax
Message-ID: <20110427144231.CD0002B805B@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Wed Apr 27 14:42:29 2011
New Revision: 22632
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22632&sc=1

Log:


Modified:
   sugarj/trunk/case-studies/concretesyntax/EditorServices.sugj

Modified: sugarj/trunk/case-studies/concretesyntax/EditorServices.sugj
==============================================================================
--- sugarj/trunk/case-studies/concretesyntax/EditorServices.sugj	Wed Apr 27 14:28:15 2011	(r22631)
+++ sugarj/trunk/case-studies/concretesyntax/EditorServices.sugj	Wed Apr 27 14:42:29 2011	(r22632)
@@ -18,4 +18,5 @@
     "~" StrategoTerm -> EditorServiceSemanticNode {cons("FromMetaExpr")} 
     "~" StrategoTerm -> EditorServiceCompletionPart {cons("FromMetaExpr")}
     "~" StrategoTerm -> EditorServiceAttribute {cons("FromMetaExpr")} 
+    "string~" StrategoTerm -> EditorServiceString {cons("FromMetaExpr")}
 }  

From R.B.Vermaas at tudelft.nl  Wed Apr 27 16:53:05 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 27 Apr 2011 14:53:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22633 - hydra/jobs
Message-ID: <20110427145305.1A034108C048@mx3.tudelft.nl>

Author: rob
Date: Wed Apr 27 14:53:03 2011
New Revision: 22633
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22633&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Apr 27 14:42:29 2011	(r22632)
+++ hydra/jobs/spoofax-imp.nix	Wed Apr 27 14:53:03 2011	(r22633)
@@ -197,6 +197,7 @@
     				<property name="eclipse.spoofaximp.jars" value="utils/"/>
     				<property name="eclipse.spoofaximp.strategojar" value="utils/strategoxt.jar"/>
     				<property name="eclipse.home" value="$eclipsefakehome"/>
+    				<property name="java.class.path" value="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar"/>
     				<ant antfile="build.main.xml" inheritRefs="true">
     					<target name="all" />
     				</ant>

From L.C.L.Kats at tudelft.nl  Wed Apr 27 16:56:32 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 14:56:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22634 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20110427145632.E18D6108C029@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 14:56:31 2011
New Revision: 22634
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22634&sc=1

Log:
new externaljarx property in build.generated.xml

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Wed Apr 27 14:53:03 2011	(r22633)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Wed Apr 27 14:56:31 2011	(r22634)
@@ -92,9 +92,12 @@
         <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
-        <condition property="externaljarimport" value=":${externaljar}" else="">
+        <condition property="externaljarimport1" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
+        <condition property="externaljarimport2" value=":${externaljarx}" else="">
+            <isset property="externaljarx"/>
+        </condition>
         <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
             <isset property="eclipse.running"/>
         </condition>
@@ -451,7 +454,7 @@
                 <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
                 <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
             </antcall>
-            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
             <!-- copy imported terms -->
             <copy todir="${build}/trans">
                 <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
@@ -566,9 +569,9 @@
 	        	debug="on">
 	    		<!-- attribute in javac: srcdir="${src-gen}" -->
 	    		<src path="${src-gen}"/>
-	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
 	        	<classpath>
-	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
 	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
 	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
 	        	</classpath>

From L.C.L.Kats at tudelft.nl  Wed Apr 27 16:56:33 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 14:56:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22635 -
	spoofax-imp/trunk/experimental/NamingExperiment/trans
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments
	strategoxt-java-backend/trunk/java
Message-ID: <20110427145633.5354A108C03E@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 14:56:32 2011
New Revision: 22635
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22635&sc=1

Log:
oops

Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Wed Apr 27 14:56:31 2011	(r22634)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Wed Apr 27 14:56:32 2011	(r22635)
@@ -77,7 +77,7 @@
     (node, position, ast, path, project-path) -> proposals'
     where
       editor-init;
-      (ast', _, _, _) := <analyze-top> ast;
+      (ast', _, _, _) := <analyze-top> (ast, path, project-path);
       x              := <collect-one(?COMPLETION(_); debug)> ast';
       debug(!"ok");
       proposals      := <index-lookup-all-levels> x;

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java	Wed Apr 27 14:56:31 2011	(r22634)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentType.java	Wed Apr 27 14:56:32 2011	(r22635)
@@ -1,6 +1,5 @@
 package org.spoofax.terms.attachments;
 
-import java.util.Collections;
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArraySet;
 
@@ -27,7 +26,9 @@
 	 */
 	protected TermAttachmentType(Class<T> type, String constructorName, int constructorArity) {
 		this.type = type;
-		this.constructor = new TermFactory().makeConstructor(constructorName, constructorArity);
+		this.constructor = constructorName == null
+			? null
+			: new TermFactory().makeConstructor(constructorName, constructorArity);
 		// assert isNotOverlapping(type) : "Term attachments do not support inheritance, failed on: " + type.getName();
 	}
 	

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From seba at informatik.uni-marburg.de  Wed Apr 27 17:00:56 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Wed, 27 Apr 2011 15:00:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22636 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
Message-ID: <20110427150056.5A1F27F8043@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Wed Apr 27 15:00:56 2011
New Revision: 22636
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22636&sc=1

Log:
ignore deleted files

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	Wed Apr 27 14:56:32 2011	(r22635)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	Wed Apr 27 15:00:56 2011	(r22636)
@@ -195,7 +195,8 @@
 	}
 	
 	public void clearMarkers(IResource file) {
-		currentBatch.clearMarkers(file);
+		if (file.exists())
+		  currentBatch.clearMarkers(file);
 	}
 	
 	public final String getMarkerType() {

From L.C.L.Kats at tudelft.nl  Wed Apr 27 17:01:45 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 15:01:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22637 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: . editor
Message-ID: <20110427150145.CBDCE2B8044@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 15:01:45 2011
New Revision: 22637
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22637&sc=1

Log:
compile SpoofaxLang to jar file

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml	Wed Apr 27 15:00:56 2011	(r22636)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml	Wed Apr 27 15:01:45 2011	(r22637)
@@ -43,5 +43,5 @@
         <import file="build.generated.xml"/>
     
         <!-- Main target -->
-        <target name="all" depends="spoofaximp.default.ctree"/>
+        <target name="all" depends="spoofaximp.default.jar"/>
     </project>
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Wed Apr 27 15:00:56 2011	(r22636)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Wed Apr 27 15:01:45 2011	(r22637)
@@ -11,7 +11,7 @@
 
 builders
                                                                                                                                
-  provider                  : include/spoofaxlang.ctree                                                                        
+  provider                  : include/spoofaxlang.jar                                                                        
   provider                  : include/spoofaxlang-java.jar                                                                     
                                                                                                                                
 	observer                  : editor-analyze                                                                                   

From seba at informatik.uni-marburg.de  Wed Apr 27 17:06:12 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Wed, 27 Apr 2011 15:06:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22638 -
	sugarj/trunk/compiler/org/sugarj/driver
Message-ID: <20110427150612.1B54CCC0E3@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Wed Apr 27 15:06:11 2011
New Revision: 22638
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22638&sc=1

Log:
enforce mutable terms

Modified:
   sugarj/trunk/compiler/org/sugarj/driver/ATermCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java

Modified: sugarj/trunk/compiler/org/sugarj/driver/ATermCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/ATermCommands.java	Wed Apr 27 15:01:45 2011	(r22637)
+++ sugarj/trunk/compiler/org/sugarj/driver/ATermCommands.java	Wed Apr 27 15:06:11 2011	(r22638)
@@ -8,8 +8,14 @@
 import java.util.Iterator;
 import java.util.List;
 
+import javax.activation.UnsupportedDataTypeException;
+
 import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoPlaceholder;
+import org.spoofax.interpreter.terms.IStrategoReal;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
@@ -332,11 +338,42 @@
       Token tok = ((Token) left.getTokenizer().getTokenAt(i));
       tok.setError(msg);
       
-      if (tok.getTokenizer().getInput().charAt(tok.getStartOffset()) == '\n')
+      if (tok.getTokenizer().getInput().length() <= tok.getStartOffset() || tok.getTokenizer().getInput().charAt(tok.getStartOffset()) == '\n')
         break;
     }
     
     log.log(msg + ": " + file);
   }
+
+  public static IStrategoTerm makeMutable(IStrategoTerm term) {
+    if (term.getStorageType() == IStrategoTerm.MUTABLE)
+      return term;
+    
+    IStrategoTerm[] kids = new IStrategoTerm[term.getSubtermCount()];
+    
+    for (int i = 0; i < kids.length; i++)
+      kids[i] = makeMutable(term.getSubterm(i));
+    
+    switch (term.getTermType()) {
+      case IStrategoTerm.APPL :
+        return factory.makeAppl(((IStrategoAppl) term).getConstructor(), kids, term.getAnnotations());
+      case IStrategoTerm.LIST :
+        return factory.makeList(kids, term.getAnnotations());
+      case IStrategoTerm.INT :
+        return factory.makeInt(((IStrategoInt) term).intValue());
+      case IStrategoTerm.REAL :
+        return factory.makeReal(((IStrategoReal) term).realValue());
+      case IStrategoTerm.STRING :
+        return factory.makeString(((IStrategoString) term).stringValue());
+      case IStrategoTerm.CTOR :
+        return factory.makeConstructor(((IStrategoConstructor) term).getName(), ((IStrategoConstructor) term).getArity());
+      case IStrategoTerm.TUPLE :
+        return factory.makeTuple(kids, term.getAnnotations());
+      case IStrategoTerm.PLACEHOLDER :
+        return factory.makePlaceholder(((IStrategoPlaceholder) term).getTemplate());
+      default :
+        throw new UnsupportedOperationException();
+    }
+  }
   
 }

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Wed Apr 27 15:01:45 2011	(r22637)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Wed Apr 27 15:06:11 2011	(r22638)
@@ -390,9 +390,6 @@
         else
           log.log("The editor services is not public.");
       
-        log.log("The body of the editor services is:");
-        log.log(body.toString());
-        
         IStrategoTerm services = ATermCommands.getApplicationSubterm(body, "EditorServicesBody", 0);
         
         if (!ATermCommands.isList(services))

Modified: sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java	Wed Apr 27 15:01:45 2011	(r22637)
+++ sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java	Wed Apr 27 15:06:11 2011	(r22638)
@@ -209,6 +209,7 @@
         String sort = ImploderAttachment.getSort(in);
         
         try {
+          term = ATermCommands.makeMutable(term);
           ImploderAttachment.putImploderAttachment(term, false, sort, left, right);
         } catch (Exception e) {
           log.log("origin annotation failed");

From seba at informatik.uni-marburg.de  Wed Apr 27 17:12:00 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Wed, 27 Apr 2011 15:12:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22639 - in
	sugarj/trunk/case-studies/features: . test
Message-ID: <20110427151200.8BC487F8005@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Wed Apr 27 15:12:00 2011
New Revision: 22639
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22639&sc=1

Log:
added feature case study: conditional compilation

Added:
   sugarj/trunk/case-studies/features/
   sugarj/trunk/case-studies/features/Features.sugj
   sugarj/trunk/case-studies/features/test/
   sugarj/trunk/case-studies/features/test/FeatureConfig.sugj
   sugarj/trunk/case-studies/features/test/FeatureModel.sugj
   sugarj/trunk/case-studies/features/test/Test.sugj

Added: sugarj/trunk/case-studies/features/Features.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/features/Features.sugj	Wed Apr 27 15:12:00 2011	(r22639)
@@ -0,0 +1,199 @@
+package features;
+
+import concretesyntax.Stratego;
+import concretesyntax.EditorServices;
+
+import org.sugarj.languages.Java;
+import editor.Colors;
+
+public sugar Features {
+ context-free syntax
+  JavaId -> FeatureName {cons("FeatureName")}
+
+  //conditional elements
+   "#" "feature" "(" FeatureExpr ")" JavaMethodDec -> JavaMethodDec {cons("ConditionalMethod")}
+   "#" "feature" "(" FeatureExpr ")" JavaStm -> JavaStm {cons("ConditionalStatement")}
+   "#" "feature" "(" FeatureExpr ")" JavaTypeDec -> JavaTypeDec{cons("ConditionalType")}
+   FeatureName->FeatureExpr
+   FeatureExpr "&&" FeatureExpr -> FeatureExpr {cons("FeatureExprAnd")}
+   FeatureExpr "||" FeatureExpr -> FeatureExpr {cons("FeatureExprOr")}
+   "(" FeatureExpr ")" -> FeatureExpr
+   "!" FeatureExpr -> FeatureExpr {cons("FeatureExprNot")}
+  
+  //feature model
+  AnnoOrSugarMod* "featuremodel" JavaId FeatureModelBody -> ToplevelDeclaration{cons("FMDecl")}
+  "{" FeatureDeclaration* "}" -> FeatureModelBody {cons("FMBody")}
+   "feature" FeatureName FeatureDependencies? ";" -> FeatureDeclaration {cons("FeatureDecl")}
+   "implies" FeatureName -> FeatureDependencies
+
+//config declaration
+  AnnoOrSugarMod* "config" JavaId "for" JavaId "{" ConfigDeclaration*  "}" -> ToplevelDeclaration {cons("ConfigDecl")}
+  "enable" {FeatureName ","}+ ";" -> ConfigDeclaration {cons("FeatureActivation")}
+  "color" FeatureName EditorServiceInt EditorServiceInt EditorServiceInt ";" -> ConfigDeclaration {cons("FeatureColorDefinition")}
+  
+ context-free priorities
+   {"(" FeatureExpr ")" -> FeatureExpr } >
+   {FeatureExpr "&&" FeatureExpr -> FeatureExpr }>
+   {FeatureExpr "||" FeatureExpr -> FeatureExpr }>
+   {"!" FeatureExpr -> FeatureExpr }
+
+
+ desugarings
+   featuremodel
+   featureconfig
+
+ rules
+   featuremodel : 
+     FMDecl(mods, Id(n), FMBody(decls))
+     -> 
+     [SugarDec(SugarDecHead(mods, Id(n)), SugarBody([sugar])),
+      EditorServicesDec(EditorServicesDecHead(mods, Id(n)), EditorServicesBody(services))]
+     where 
+       <featuredecl2sugar(|n)> decls => pre-sugar;
+       !transformation-elem(pre-sugar) => sugar;
+
+       <map(featuredecl2service)> decls => services
+
+     featuredecl2sugar(|n) :
+       decls
+       ->
+       |[ rules featuremodel : string~n -> term~names ]|
+       where
+         <get-decl-names; map(!NoAnnoList(Str(<id>))); !NoAnnoList(List(<id>))> decls => names
+    
+    featuredecl2service :
+     FeatureDecl(FeatureName(Id(n)), _)
+     ->
+     |[  completions
+           completion template : FeatureName = string~n
+     ]|
+    
+    featuremodel = fail
+
+    get-decl-names = map(?FeatureDecl(FeatureName(Id(<id>)), _))
+
+
+      
+
+ rules
+   featureconfig : 
+     ConfigDecl(mods, Id(n), Id(fm), configs)
+     -> 
+     SugarDec(SugarDecHead(mods, Id(n)), SugarBody([sugar]))
+     where 
+       <featureconfig2sugar> configs => pre-sugar;
+       !transformation-elem(pre-sugar) => sugar
+
+   featureconfig2sugar :
+     decls
+     ->
+     |[ rules featureconfig : () -> term~names ]|
+     where
+       <get-enabled-names; map(!NoAnnoList(Str(<id>))); !NoAnnoList(List(<id>))> decls => names
+    
+    featureconfig = fail
+
+    get-enabled-names = mapconcat(?FeatureActivation(<id>); map(?FeatureName(Id(<id>))))
+
+ 
+ 
+  rules
+    check-decls =
+      ?decls;
+      get-decl-names;
+      ?names;
+      !decls;
+      mapconcat(check-name(|names);![<id>] <+ ![])
+
+    check-name(|names) :
+      FeatureDecl(FeatureName(Id(n)), t at Some(FeatureName(Id(dep))))
+      ->
+      (t, <concat-strings> ["undefined feature ", dep, " in feature decl ", n])
+      where <not(elem)> (dep, names)
+
+    constraint-error = check-decls
+
+
+  desugarings
+    cond-stm
+    cond-methods
+    cond-type
+
+  rules
+    cond-stm :
+      ConditionalStatement(e, s) -> s
+       where <eval-condition> e
+
+    cond-stm :
+      ConditionalStatement(e, s) -> Empty
+       where <not(eval-condition)> e
+
+    filter-method :
+      ConditionalMethod(e, m) -> m
+       where <eval-condition> e
+
+    filter-method :
+      m -> m
+      where <not(?ConditionalMethod(_,_))> m
+
+    cond-methods :
+      list -> <filter(filter-method)> list
+
+    cond-type :
+      ConditionalType(e, t) -> t
+       where <eval-condition> e
+
+    cond-type :
+      ConditionalType(e, t) -> [] 
+       where <not(eval-condition)> e
+
+
+    eval-condition :
+      e at FeatureName(Id(n)) -> e 
+      where <featureconfig> () => names;
+            <elem> (n, names)
+
+    eval-condition :
+      n at FeatureExprNot(e) -> n 
+      where <not(eval-condition)> e
+
+    eval-condition :
+      a at FeatureExprAnd(e1, e2) -> a 
+      where <eval-condition> e1;
+            <eval-condition> e2
+
+    eval-condition :
+      o at FeatureExprOr(e1, e2) -> o 
+      where <eval-condition> e1
+
+    eval-condition :
+      o at FeatureExprOr(e1, e2) -> o 
+      where <eval-condition> e2
+}
+
+public editor services Features {
+  //TODO coloring
+  //TODO configuration-aware folding
+  //TODO configuration-specific preview builder or with input dialog
+  //TODO outlining
+  //TODO reference resolving
+  //TODO code completion limited through candidate sorts
+
+  completions
+    completion trigger : "#"
+    completion template : JavaTypeDec = "#feature(" <e> ")" 
+    completion template : JavaMethodDec = "#feature(" <e> ")" 
+    completion template : JavaStm = "#feature(" <e> ")" 
+    completion template : JavaBlockStm = "#feature(" <e> ")" 
+
+  folding
+    _.ConditionalStatement
+    _.ConditionalMethod
+    _.ConditionalType
+
+//   colorer ConditionalMethodColoring
+//     environment _.ConditionalStatement : _ 192 255 255
+//     _.ConditionalStatement : _ 192 255 255
+//
+//     _.ConditionalMethod : _ 192 192 192
+}

Added: sugarj/trunk/case-studies/features/test/FeatureConfig.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/features/test/FeatureConfig.sugj	Wed Apr 27 15:12:00 2011	(r22639)
@@ -0,0 +1,8 @@
+package features.test;
+
+import features.Features;
+import features.test.FeatureModel;
+
+config FeatureConfig for FeatureModel {
+  enable A, B;
+}

Added: sugarj/trunk/case-studies/features/test/FeatureModel.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/features/test/FeatureModel.sugj	Wed Apr 27 15:12:00 2011	(r22639)
@@ -0,0 +1,8 @@
+package features.test;
+
+import features.Features;
+
+featuremodel FeatureModel {
+  feature A;
+  feature B implies A;
+}

Added: sugarj/trunk/case-studies/features/test/Test.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/features/test/Test.sugj	Wed Apr 27 15:12:00 2011	(r22639)
@@ -0,0 +1,23 @@
+package features.test;
+
+import features.Features;
+
+import features.test.FeatureModel;
+import features.test.FeatureConfig;
+
+
+#feature(A)
+class Test {
+  #feature(B)
+  void foo(){
+    foo();
+    #feature(B){
+    bar();
+    }
+  }
+  void bar(){}
+}
+
+#feature(!A)
+class Test {
+}

From seba at informatik.uni-marburg.de  Wed Apr 27 17:14:26 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Wed, 27 Apr 2011 15:14:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22640 -
	sugarj/trunk/editor/editor/java/org/sugarj/editor
Message-ID: <20110427151426.28B76108C041@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Wed Apr 27 15:14:25 2011
New Revision: 22640
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22640&sc=1

Log:
enabled Java file generation by default

Modified:
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java	Wed Apr 27 15:12:00 2011	(r22639)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParser.java	Wed Apr 27 15:14:25 2011	(r22640)
@@ -48,7 +48,7 @@
 
     
     Environment.atomicImportParsing = true;
-    // Environment.generateJavaFile = true;
+    Environment.generateJavaFile = true;
 
     // use this to temporarily deactivate caching
     // Environment.wocache = true;

From L.C.L.Kats at tudelft.nl  Wed Apr 27 17:16:39 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 15:16:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22641 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax
Message-ID: <20110427151639.14D152B8039@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 15:16:38 2011
New Revision: 22641
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22641&sc=1

Log:
missing library imports

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml	Wed Apr 27 15:14:25 2011	(r22640)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml	Wed Apr 27 15:16:38 2011	(r22641)
@@ -26,7 +26,8 @@
                         --library
                         -I &quot;${trans}&quot;
                         -I &quot;${basedir}&quot;
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm
+        	              -la strc -la stratego-sdf"/>
         
         <!-- Optional: external .def and .jar locations
         <property name="externaldef" location="syntax/${sdfmodule}.def"/>

From L.C.L.Kats at tudelft.nl  Wed Apr 27 18:04:48 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Apr 2011 16:04:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22642 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	. services
Message-ID: <20110427160448.47E5B7F8041@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Apr 27 16:04:48 2011
New Revision: 22642
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22642&sc=1

Log:
Spoofax/364: off by one

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/OnSaveService.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	Wed Apr 27 15:16:38 2011	(r22641)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	Wed Apr 27 16:04:48 2011	(r22642)
@@ -203,7 +203,7 @@
 			return null;
 		
 		IToken start = getParseController().getTokenIterator(new Region(selection.x, 0), true).next();
-		IToken end = getParseController().getTokenIterator(new Region(selection.x + selection.y-1, 0), true).next();
+		IToken end = getParseController().getTokenIterator(new Region(selection.x + selection.y, 0), true).next();
 		
 		ITokenizer tokens = start.getTokenizer();
 		int layout = IToken.TK_LAYOUT;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/OnSaveService.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/OnSaveService.java	Wed Apr 27 15:16:38 2011	(r22641)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/OnSaveService.java	Wed Apr 27 16:04:48 2011	(r22642)
@@ -52,7 +52,7 @@
 	public void documentChanged(DocumentEvent event) {
 		if (function == null) return;
 		
-		String contents = event.getDocument().get();
+		//String contents = event.getDocument().get();
 		
 		try {
 			Environment.getStrategoLock().lock();

From M.A.Akhter at student.tudelft.nl  Wed Apr 27 21:09:52 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 27 Apr 2011 19:09:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22643 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen:
	. esv
Message-ID: <20110427190952.86A982B8016@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 27 19:09:52 2011
New Revision: 22643
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22643&sc=1

Log:
* changed the gen esv file name

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Wed Apr 27 16:04:48 2011	(r22642)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Wed Apr 27 19:09:52 2011	(r22643)
@@ -532,7 +532,7 @@
 	  <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
 	        
 		<target name="sdf2imp.eclipse" if="eclipse.running" >
-			<copy file="${package.path}/${package.main.esv.module}.packed.esv" tofile="${include}/${package.name}.packed.esv" preservelastmodified="true"/>
+			<copy file="${package.path}/${package.main.esv.module}.packed.esv" tofile="${include}/${package.name}.esv" preservelastmodified="true"/>
 			<java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
 				<arg value="${include}/${package.name}.packed.esv"/> <!-- esv main file-->
 			</java>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Wed Apr 27 16:04:48 2011	(r22642)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Wed Apr 27 19:09:52 2011	(r22643)
@@ -65,7 +65,7 @@
 			autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
 			;<ensure-exists>(autogen-root-directory , package-qname)
 			//TODO : create a consistent namming for the file name + move it to lib 
-			;output-path := <get-main-esv-output-path(|"packed.esv")>(autogen-root-directory , package-qname)   
+			;output-path := <get-main-esv-output-path(|".esv")>(autogen-root-directory , package-qname)   
 			;<WriteToBinaryFile>(output-path ,esv-aterm)
 			;<refresh-workspace-file>output-path
 			;chdir-to-project-path

From M.A.Akhter at student.tudelft.nl  Wed Apr 27 22:07:11 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 27 Apr 2011 20:07:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22644 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen:
	. esv
Message-ID: <20110427200711.3BB43108C003@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Apr 27 20:07:10 2011
New Revision: 22644
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22644&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Wed Apr 27 19:09:52 2011	(r22643)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Wed Apr 27 20:07:10 2011	(r22644)
@@ -532,7 +532,7 @@
 	  <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
 	        
 		<target name="sdf2imp.eclipse" if="eclipse.running" >
-			<copy file="${package.path}/${package.main.esv.module}.packed.esv" tofile="${include}/${package.name}.esv" preservelastmodified="true"/>
+			<copy file="${package.path}/${package.main.esv.module}.esv" tofile="${include}/${package.name}.packed.esv" preservelastmodified="true"/>
 			<java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
 				<arg value="${include}/${package.name}.packed.esv"/> <!-- esv main file-->
 			</java>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Wed Apr 27 19:09:52 2011	(r22643)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Wed Apr 27 20:07:10 2011	(r22644)
@@ -65,7 +65,7 @@
 			autogen-root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
 			;<ensure-exists>(autogen-root-directory , package-qname)
 			//TODO : create a consistent namming for the file name + move it to lib 
-			;output-path := <get-main-esv-output-path(|".esv")>(autogen-root-directory , package-qname)   
+			;output-path := <get-main-esv-output-path(|"esv")>(autogen-root-directory , package-qname)   
 			;<WriteToBinaryFile>(output-path ,esv-aterm)
 			;<refresh-workspace-file>output-path
 			;chdir-to-project-path

From M.A.Akhter at student.tudelft.nl  Thu Apr 28 10:02:54 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 28 Apr 2011 08:02:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22645 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: test
	trans/codegen
Message-ID: <20110428080254.0F2612B8065@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 28 08:02:53 2011
New Revision: 22645
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22645&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang2.spx
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang2.spx
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang2.spx	Wed Apr 27 20:07:10 2011	(r22644)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang2.spx	Thu Apr 28 08:02:53 2011	(r22645)
@@ -1,4 +1,4 @@
-package entity-lang1 
+package entity-lang
 
 	module module-main
 		context-free start-symbols 
@@ -7,16 +7,76 @@
   	context-free syntax
 	    "module" ID Definition*       -> Start {cons("Module")}
 	    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
-	    
 	    ID ":" Type                   -> Property {cons("Property")}
 	    ID                            -> Type {cons("Type")}
 
-		
-	module entity-builders    
+		language General properties
+    	name          : entity-lang
+  		id            : entity-lang
+  		extends       : Root
+                  
+  		description   : "Spoofax/IMP-generated editor for the TestSpoofax language"
+  		url           : http://strategoxt.org
+                  
+  		extensions    : tent
+  		start symbols : Start
+  		
+  	language Syntax properties (static defaults)
+	    // Comment constructs:                   
+	  	line comment                           : "//"
+	 	 	block comment                          : "/*" * "*/"
+	    // Fences (used for matching,            
+	  	// inserting, indenting brackets):       
+	  	fences                                 : [ ]
+	                                           ( )
+	                                           { }
+	                                           
+	  	// Automatic indent hints                
+	  	// (indent after these tokens):          
+	  	indent after                           : "="
+	    // Regular expression for identifiers:   
+	  	identifier lexical                     : "[A-Za-z0-9_]+"	     
+	
+	module entity-builders   
 		imports 
 			entity.Common	  
 			 
+		builders
+    	builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)
+	 
+	 	outliner Default outliner        
+	    // Outliner rules indicate which syntactic constructs should be shown in the outline
+		  // and quick outline views, and take one of the following forms:
+		  //
+		  //   <sort>.<constructor>
+		  //
+		  //   <sort>._
+		  //
+		  //   _.<constructor>
+		  Start.Module
+		  Definition.Entity 	
 		
+		folding Default folding definitions
+  
+		  // Folding rules indicate which syntactic constructs can be folded,
+		  // and take one of the following forms:
+		  //
+		  //   <sort>.<constructor>
+		  //
+		  //   <sort>._
+		  //
+		  //   _.<constructor>
+		  //
+		  // To indicate that an element should always be folded, add
+		  // a (folded) annotation:
+		  //
+		  //   _.Imports (folded)
+		  //
+		  // To disable a folding rule defined elsewhere, add a (disabled) annotation:
+		  //
+		  //   Definition._ (disabled)
+		  Start.Module
+  		Definition.Entity
 		 	
 	module common
 		lexical syntax
@@ -27,7 +87,7 @@
     "\"" StringChar* "\"" -> STRING
     ~[\"\n]               -> StringChar
     "\\\""                -> StringChar
-    BackSlashChar         -> StringChar 
+    BackSlashChar         -> StringChar
     "\\"                  -> BackSlashChar
     
     [\ \t\n\r] -> LAYOUT
@@ -38,7 +98,7 @@
     
     -> EOF
   
-  lexical restrictions  
+  lexical restrictions 
   
     %% Ensure greedy matching for lexicals
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Wed Apr 27 20:07:10 2011	(r22644)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Thu Apr 28 08:02:53 2011	(r22645)
@@ -533,7 +533,7 @@
 	        
 		<target name="sdf2imp.eclipse" if="eclipse.running" >
 			<copy file="${package.path}/${package.main.esv.module}.esv" tofile="${include}/${package.name}.packed.esv" preservelastmodified="true"/>
-			<java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+			<java classname="org.strategoxt.imp.metatooling.building.AntSpxDescriptorBuilder" failonerror="true">
 				<arg value="${include}/${package.name}.packed.esv"/> <!-- esv main file-->
 			</java>
 		</target>

From M.A.Akhter at student.tudelft.nl  Thu Apr 28 10:11:57 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 28 Apr 2011 08:11:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22646 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test
Message-ID: <20110428081157.3ED2ACC132@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 28 08:11:56 2011
New Revision: 22646
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22646&sc=1

Log:


Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang2.spx
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Thu Apr 28 08:02:53 2011	(r22645)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Thu Apr 28 08:11:56 2011	(r22646)
@@ -121,8 +121,3 @@
     LAYOUT? -/- [\ \t\n\r]
     LAYOUT? -/- [\/].[\/]
     LAYOUT? -/- [\/].[\*]
-		
-package A
-	module Test1
-	
-	module Test2
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Thu Apr 28 10:12:42 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 28 Apr 2011 08:12:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22647 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax
Message-ID: <20110428081242.C8459108C002@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 28 08:12:41 2011
New Revision: 22647
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22647&sc=1

Log:


Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.spx.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.spx.package.generated.xml

From R.B.Vermaas at tudelft.nl  Thu Apr 28 11:18:37 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 09:18:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22648 - hydra/jobs
Message-ID: <20110428091837.B1B8F2B800C@mx2.tudelft.nl>

Author: rob
Date: Thu Apr 28 09:18:37 2011
New Revision: 22648
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22648&sc=1

Log:
another try :(

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 08:12:41 2011	(r22647)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 09:18:37 2011	(r22648)
@@ -181,35 +181,31 @@
               if [[ -f $POM ]] ; then
                 sed -i 's|</project>||' $POM
                 echo '
-<build> 
-  <plugins>
-  <plugin>
-    <groupId>org.apache.maven.plugins</groupId>
-    <artifactId>maven-antrun-plugin</artifactId>
-    <executions>
-    	<execution>
-    		<id>generate-sources</id>
-    		<phase>generate-sources</phase>
-    		<configuration>
-    			<tasks>
-    				<echo>Running ant script</echo>
-    				<property name="external_classpath" refid="maven.compile.classpath"/>
-    				<property name="eclipse.spoofaximp.jars" value="utils/"/>
-    				<property name="eclipse.spoofaximp.strategojar" value="utils/strategoxt.jar"/>
-    				<property name="eclipse.home" value="$eclipsefakehome"/>
-    				<property name="java.class.path" value="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar"/>
-    				<ant antfile="build.main.xml" inheritRefs="true">
-    					<target name="all" />
-    				</ant>
-    			</tasks>
-    		</configuration>
-    		<goals>
-    			<goal>run</goal>
-    		</goals>
-    	</execution>
-    </executions>
-  </plugin>
-  </plugins>
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>exec-maven-plugin</artifactId>
+        <version>1.1</version>
+        <executions>
+          <execution>
+            <goals>
+              <goal>exec</goal>
+            </goals>
+          </execution>
+        </executions>
+        <configuration>
+          <executable>ant</executable>
+          <arguments>
+            <argument>-Dexternal_classpath=${maven.compile.classpath}</argument>
+            <argument>-Declipse.spoofaximp.jars=utils/</argument>
+            <argument>-Declipse.spoofaximp.strategojar=utils/strategoxt.jar</argument>
+            <argument>-Declipse.home=$eclipsefakehome</argument>
+            <argument>all</argument>
+          </arguments>
+        </configuration>
+      </plugin>
+    </plugins>
 </build></project>' >>$POM
                 
               fi

From R.B.Vermaas at tudelft.nl  Thu Apr 28 11:20:56 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 09:20:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22649 - hydra/jobs
Message-ID: <20110428092056.32C527F801F@mx1.tudelft.nl>

Author: rob
Date: Thu Apr 28 09:20:55 2011
New Revision: 22649
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22649&sc=1

Log:
another try :(

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 09:18:37 2011	(r22648)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 09:20:55 2011	(r22649)
@@ -197,7 +197,7 @@
         <configuration>
           <executable>ant</executable>
           <arguments>
-            <argument>-Dexternal_classpath=${maven.compile.classpath}</argument>
+            <argument>-Dexternal_classpath=''${maven.compile.classpath}</argument>
             <argument>-Declipse.spoofaximp.jars=utils/</argument>
             <argument>-Declipse.spoofaximp.strategojar=utils/strategoxt.jar</argument>
             <argument>-Declipse.home=$eclipsefakehome</argument>

From R.B.Vermaas at tudelft.nl  Thu Apr 28 11:25:40 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 09:25:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22650 - hydra/jobs
Message-ID: <20110428092540.9A3B7CC07C@mx4.tudelft.nl>

Author: rob
Date: Thu Apr 28 09:25:40 2011
New Revision: 22650
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22650&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 09:20:55 2011	(r22649)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 09:25:40 2011	(r22650)
@@ -207,7 +207,7 @@
       </plugin>
     </plugins>
 </build></project>' >>$POM
-                
+                cat $POM
               fi
               mkdir -p `dirname $e`/utils/
               cp -v org.strategoxt.imp.generator/lib/*.jar `dirname $e`/utils/

From R.B.Vermaas at tudelft.nl  Thu Apr 28 11:34:07 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 09:34:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22651 - hydra/jobs
Message-ID: <20110428093407.1C145CC12E@mx4.tudelft.nl>

Author: rob
Date: Thu Apr 28 09:34:06 2011
New Revision: 22651
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22651&sc=1

Log:
re-arrange

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 09:25:40 2011	(r22650)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 09:34:06 2011	(r22651)
@@ -189,21 +189,22 @@
         <version>1.1</version>
         <executions>
           <execution>
+            <phase>build all from build.main.xml</phase>
             <goals>
               <goal>exec</goal>
             </goals>
+            <configuration>
+              <executable>ant</executable>
+              <arguments>
+                <argument>-Dexternal_classpath=''${maven.compile.classpath}</argument>
+                <argument>-Declipse.spoofaximp.jars=utils/</argument>
+                <argument>-Declipse.spoofaximp.strategojar=utils/strategoxt.jar</argument>
+                <argument>-Declipse.home=$eclipsefakehome</argument>
+                <argument>all</argument>
+              </arguments>
+            </configuration>
           </execution>
         </executions>
-        <configuration>
-          <executable>ant</executable>
-          <arguments>
-            <argument>-Dexternal_classpath=''${maven.compile.classpath}</argument>
-            <argument>-Declipse.spoofaximp.jars=utils/</argument>
-            <argument>-Declipse.spoofaximp.strategojar=utils/strategoxt.jar</argument>
-            <argument>-Declipse.home=$eclipsefakehome</argument>
-            <argument>all</argument>
-          </arguments>
-        </configuration>
       </plugin>
     </plugins>
 </build></project>' >>$POM

From R.B.Vermaas at tudelft.nl  Thu Apr 28 11:43:52 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 09:43:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22652 - hydra/jobs
Message-ID: <20110428094352.4FA35108C012@mx3.tudelft.nl>

Author: rob
Date: Thu Apr 28 09:43:52 2011
New Revision: 22652
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22652&sc=1

Log:
re-arrange

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 09:34:06 2011	(r22651)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 09:43:52 2011	(r22652)
@@ -236,7 +236,7 @@
             export ANT_OPTS="-Xss8m -Xmx768m"
             export ANT_ARGS="-Declipse.spoofaximp.jars=utils/ -Declipse.home=$eclipsefakehome"
 
-            mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e
+            mvn -X package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e
 	      '';
 	      
 	      installPhase = ''

From R.B.Vermaas at tudelft.nl  Thu Apr 28 11:56:41 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 09:56:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22653 - hydra/jobs
Message-ID: <20110428095641.81F15108C012@mx3.tudelft.nl>

Author: rob
Date: Thu Apr 28 09:56:40 2011
New Revision: 22653
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22653&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 09:43:52 2011	(r22652)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 09:56:40 2011	(r22653)
@@ -189,7 +189,8 @@
         <version>1.1</version>
         <executions>
           <execution>
-            <phase>build all from build.main.xml</phase>
+            <id>generate-sources</id>
+            <phase>generate-sources</phase>
             <goals>
               <goal>exec</goal>
             </goals>

From R.B.Vermaas at tudelft.nl  Thu Apr 28 12:48:07 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 10:48:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22654 - hydra/jobs
Message-ID: <20110428104807.F03D67F8051@mx1.tudelft.nl>

Author: rob
Date: Thu Apr 28 10:48:07 2011
New Revision: 22654
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22654&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 09:56:40 2011	(r22653)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 10:48:07 2011	(r22654)
@@ -195,7 +195,7 @@
               <goal>exec</goal>
             </goals>
             <configuration>
-              <executable>ant</executable>
+              <executable>${pkgs.ant}/bin/ant</executable>
               <arguments>
                 <argument>-Dexternal_classpath=''${maven.compile.classpath}</argument>
                 <argument>-Declipse.spoofaximp.jars=utils/</argument>

From R.B.Vermaas at tudelft.nl  Thu Apr 28 12:52:32 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 10:52:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22655 - hydra/jobs
Message-ID: <20110428105232.3EC91108C012@mx3.tudelft.nl>

Author: rob
Date: Thu Apr 28 10:52:32 2011
New Revision: 22655
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22655&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 10:48:07 2011	(r22654)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 10:52:32 2011	(r22655)
@@ -174,6 +174,8 @@
             make -C org.strategoxt.imp.generator all
             stopNest
 
+            export LOCALCLASSPATH="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
+            export ANT_OPTS="-Xss8m -Xmx768m"
 
             for e in */build.main.xml
             do
@@ -201,6 +203,8 @@
                 <argument>-Declipse.spoofaximp.jars=utils/</argument>
                 <argument>-Declipse.spoofaximp.strategojar=utils/strategoxt.jar</argument>
                 <argument>-Declipse.home=$eclipsefakehome</argument>
+                <argument>-f</argument>
+                <argument>build.main.xml</argument>
                 <argument>all</argument>
               </arguments>
             </configuration>

From seba at informatik.uni-marburg.de  Thu Apr 28 12:55:10 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Thu, 28 Apr 2011 10:55:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22656 - in
	sugarj/trunk: compiler/org/sugarj/driver stdlib/org/sugarj/init
Message-ID: <20110428105510.C44697F8004@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Thu Apr 28 10:55:10 2011
New Revision: 22656
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22656&sc=1

Log:
no wrapping of java type decls

Modified:
   sugarj/trunk/compiler/org/sugarj/driver/ATermCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/stdlib/org/sugarj/init/initGrammar.sdf

Modified: sugarj/trunk/compiler/org/sugarj/driver/ATermCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/ATermCommands.java	Thu Apr 28 10:52:32 2011	(r22655)
+++ sugarj/trunk/compiler/org/sugarj/driver/ATermCommands.java	Thu Apr 28 10:55:10 2011	(r22656)
@@ -115,7 +115,7 @@
   }
   
   public static IStrategoTerm getApplicationSubterm(IStrategoTerm term, String cons, int index) {
-    if (isApplication(term, cons))
+    if (cons == null || isApplication(term, cons))
       return term.getSubterm(index);
     
     throw new MatchError(term, "application", cons);

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Apr 28 10:52:32 2011	(r22655)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Apr 28 10:55:10 2011	(r22656)
@@ -375,16 +375,6 @@
         log.log("The name of the editor services is '" + extName + "'.");
         log.log("The full name of the editor services is '" + fullExtName + "'.");
 
-        if (extName.equals(mainModuleName))
-          driverResult.appendToFile(
-              javaOutFile,
-              "/* auto-generated dummy class as replacement\n" + 
-              " * for extracted editor services.\n" +
-              " */\n" +
-              (isPublic ? "public " : "") + "class " + mainModuleName + "{}\n");
-
-        
-
         if (isPublic)
           log.log("The editor services is public.");
         else
@@ -439,7 +429,11 @@
           else 
             processImportDecs(toplevelDecl);
         }
-        else if (isApplication(toplevelDecl, "JavaTypeDec"))
+        else if (isApplication(toplevelDecl, "JavaTypeDec") || //XXX remove this branch
+                 isApplication(toplevelDecl, "ClassDec") ||
+                 isApplication(toplevelDecl, "InterfaceDec") ||
+                 isApplication(toplevelDecl, "EnumDec") ||
+                 isApplication(toplevelDecl, "AnnoDec"))
           processJavaTypeDec(toplevelDecl);
         else if (isApplication(toplevelDecl, "SugarDec"))
           processSugarDec(toplevelDecl);
@@ -661,7 +655,7 @@
       
       log.beginTask("Generate Java code.");
       try {
-        IStrategoTerm dec = getApplicationSubterm(toplevelDecl, "JavaTypeDec", 0);
+        IStrategoTerm dec =  isApplication(toplevelDecl, "JavaTypeDec") ? getApplicationSubterm(toplevelDecl, "JavaTypeDec", 0) : toplevelDecl;
         driverResult.appendToFile(javaOutFile, SDFCommands.prettyPrintJava(dec, interp) + "\n");
       } finally {
         log.endTask();

Modified: sugarj/trunk/stdlib/org/sugarj/init/initGrammar.sdf
==============================================================================
--- sugarj/trunk/stdlib/org/sugarj/init/initGrammar.sdf	Thu Apr 28 10:52:32 2011	(r22655)
+++ sugarj/trunk/stdlib/org/sugarj/init/initGrammar.sdf	Thu Apr 28 10:55:10 2011	(r22656)
@@ -10,7 +10,7 @@
   context-free syntax %% ToplevelDeclaration
     JavaPackageDec -> ToplevelDeclaration
     JavaImportDec -> ToplevelDeclaration
-    JavaTypeDec -> ToplevelDeclaration {cons("JavaTypeDec")}
+    JavaTypeDec -> ToplevelDeclaration
     SugarDec -> ToplevelDeclaration
   
   context-free syntax %% NextToplevelDeclaration

From R.B.Vermaas at tudelft.nl  Thu Apr 28 13:04:39 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 11:04:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22657 - hydra/jobs
Message-ID: <20110428110439.4C0942B8011@mx2.tudelft.nl>

Author: rob
Date: Thu Apr 28 11:04:39 2011
New Revision: 22657
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22657&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 10:55:10 2011	(r22656)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 11:04:39 2011	(r22657)
@@ -182,7 +182,7 @@
               POM=`dirname $e`/pom.xml
               if [[ -f $POM ]] ; then
                 sed -i 's|</project>||' $POM
-                echo '
+                echo "
   <build>
     <plugins>
       <plugin>
@@ -212,7 +212,7 @@
         </executions>
       </plugin>
     </plugins>
-</build></project>' >>$POM
+</build></project>" >>$POM
                 cat $POM
               fi
               mkdir -p `dirname $e`/utils/

From R.B.Vermaas at tudelft.nl  Thu Apr 28 13:20:39 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 11:20:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22658 - hydra/jobs
Message-ID: <20110428112039.172EB7F8004@mx1.tudelft.nl>

Author: rob
Date: Thu Apr 28 11:20:38 2011
New Revision: 22658
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22658&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 11:04:39 2011	(r22657)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 11:20:38 2011	(r22658)
@@ -170,9 +170,9 @@
 
             cp ${strcJava}/share/strc-java/strategoxt.jar org.strategoxt.strj/java
 
-            header "Building org.strategoxt.imp.generator"
-            make -C org.strategoxt.imp.generator all
-            stopNest
+#            header "Building org.strategoxt.imp.generator"
+#            make -C org.strategoxt.imp.generator all
+#            stopNest
 
             export LOCALCLASSPATH="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
             export ANT_OPTS="-Xss8m -Xmx768m"
@@ -182,7 +182,7 @@
               POM=`dirname $e`/pom.xml
               if [[ -f $POM ]] ; then
                 sed -i 's|</project>||' $POM
-                echo "
+                echo '
   <build>
     <plugins>
       <plugin>
@@ -202,7 +202,7 @@
                 <argument>-Dexternal_classpath=''${maven.compile.classpath}</argument>
                 <argument>-Declipse.spoofaximp.jars=utils/</argument>
                 <argument>-Declipse.spoofaximp.strategojar=utils/strategoxt.jar</argument>
-                <argument>-Declipse.home=$eclipsefakehome</argument>
+                <argument>-Declipse.home=${eclipse}/eclipse</argument>
                 <argument>-f</argument>
                 <argument>build.main.xml</argument>
                 <argument>all</argument>
@@ -212,7 +212,7 @@
         </executions>
       </plugin>
     </plugins>
-</build></project>" >>$POM
+</build></project>' >>$POM
                 cat $POM
               fi
               mkdir -p `dirname $e`/utils/

From R.B.Vermaas at tudelft.nl  Thu Apr 28 13:24:29 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 11:24:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22659 - hydra/jobs
Message-ID: <20110428112429.C454B2B801F@mx2.tudelft.nl>

Author: rob
Date: Thu Apr 28 11:24:29 2011
New Revision: 22659
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22659&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 11:20:38 2011	(r22658)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 11:24:29 2011	(r22659)
@@ -170,9 +170,9 @@
 
             cp ${strcJava}/share/strc-java/strategoxt.jar org.strategoxt.strj/java
 
-#            header "Building org.strategoxt.imp.generator"
-#            make -C org.strategoxt.imp.generator all
-#            stopNest
+            header "Building org.strategoxt.imp.generator"
+            make -C org.strategoxt.imp.generator all
+            stopNest
 
             export LOCALCLASSPATH="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
             export ANT_OPTS="-Xss8m -Xmx768m"

From R.B.Vermaas at tudelft.nl  Thu Apr 28 13:29:14 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 11:29:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22660 - hydra/jobs
Message-ID: <20110428112914.C2AFD2B800F@mx2.tudelft.nl>

Author: rob
Date: Thu Apr 28 11:29:14 2011
New Revision: 22660
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22660&sc=1

Log:
not all projects have same target

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 11:24:29 2011	(r22659)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 11:29:14 2011	(r22660)
@@ -205,7 +205,6 @@
                 <argument>-Declipse.home=${eclipse}/eclipse</argument>
                 <argument>-f</argument>
                 <argument>build.main.xml</argument>
-                <argument>all</argument>
               </arguments>
             </configuration>
           </execution>

From R.B.Vermaas at tudelft.nl  Thu Apr 28 13:51:28 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 11:51:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22661 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core
Message-ID: <20110428115128.0E447108C056@mx3.tudelft.nl>

Author: rob
Date: Thu Apr 28 11:51:27 2011
New Revision: 22661
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22661&sc=1

Log:
eclipse.refreshLocal only when eclipse.running

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/build.main.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/build.main.xml	Thu Apr 28 11:29:14 2011	(r22660)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/build.main.xml	Thu Apr 28 11:51:27 2011	(r22661)
@@ -28,8 +28,11 @@
 				<file file="../${project.debug.transformer}/utils/strategoxt.jar" />
 			</resources>
 		</copy>
+		<antcall target="refresh-lib"/>
+	</target>
+
+	<target name="refresh-lib" if="eclipse.running">
 		<eclipse.refreshLocal resource="${basedir}/lib" depth="infinite" />
-		
 	</target>
 	
 	<target name="clean">
@@ -39,4 +42,4 @@
 		  </delete>
 	</target>
 	
-</project>
\ No newline at end of file
+</project>

From R.B.Vermaas at tudelft.nl  Thu Apr 28 14:05:33 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 12:05:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22662 -
	spoofax-imp/trunk/org.strategoxt.imp.testing
Message-ID: <20110428120533.70ABFCC07F@mx4.tudelft.nl>

Author: rob
Date: Thu Apr 28 12:05:33 2011
New Revision: 22662
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22662&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Thu Apr 28 11:51:27 2011	(r22661)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Thu Apr 28 12:05:33 2011	(r22662)
@@ -491,7 +491,7 @@
 	    		<src path="${src-gen}"/>
 	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
 	        	<classpath>
-	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}:${external_classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
 	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
 	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
 	        	</classpath>

From R.B.Vermaas at tudelft.nl  Thu Apr 28 14:15:08 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 12:15:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22663 - hydra/jobs
Message-ID: <20110428121508.8608C7F8053@mx1.tudelft.nl>

Author: rob
Date: Thu Apr 28 12:15:08 2011
New Revision: 22663
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22663&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 12:05:33 2011	(r22662)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 12:15:08 2011	(r22663)
@@ -153,8 +153,9 @@
 	      	pkgs.jdk 
 	      	pkgs.ant
 	      ];
-	      mvnFlags = "-Dmaven.repo.local=/tmp/m3";
+	      mvnFlags = "-Dversion=1.0.0-SNAPSHOT -DgroupId=spoofax -Dtycho.targetPlatform=${eclipse}/eclipse -Dmaven.repo.local=/tmp/m3";
 	      buildPhase = ''
+            ulimit -s unlimited
             export M2_REPO=/tmp/m3
             export STRATEGOXT=${pkgs.strategoPackages.strategoxt}
             export JAVA_FRONT=${pkgs.strategoPackages.javafront}
@@ -164,9 +165,7 @@
             mkdir -p plugins
             export eclipsefakehome=`pwd`
             
-            ulimit -s unlimited
-
-            mvn org.sonatype.tycho:maven-tycho-plugin:generate-poms -Dversion=1.0.0-SNAPSHOT -DgroupId=spoofax -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags}
+            mvn org.sonatype.tycho:maven-tycho-plugin:generate-poms ${mvnFlags}
 
             cp ${strcJava}/share/strc-java/strategoxt.jar org.strategoxt.strj/java
 
@@ -203,6 +202,7 @@
                 <argument>-Declipse.spoofaximp.jars=utils/</argument>
                 <argument>-Declipse.spoofaximp.strategojar=utils/strategoxt.jar</argument>
                 <argument>-Declipse.home=${eclipse}/eclipse</argument>
+                <argument>-verbose</argument>
                 <argument>-f</argument>
                 <argument>build.main.xml</argument>
               </arguments>
@@ -212,35 +212,18 @@
       </plugin>
     </plugins>
 </build></project>' >>$POM
-                cat $POM
               fi
               mkdir -p `dirname $e`/utils/
               cp -v org.strategoxt.imp.generator/lib/*.jar `dirname $e`/utils/
               cp -v org.strategoxt.strj/java/strategoxt.jar `dirname $e`/utils/
             done
 
-            #mvn -fn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e  || true
-
-            #for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer org.strategoxt.imp.testing
-            #do
-            #    mkdir -p $e/utils/
-            #    cp -v org.strategoxt.imp.generator/lib/*.jar $e/utils/
-            #    cp -v org.strategoxt.strj/java/strategoxt.jar $e/utils/
-	    #        header "Pre-building $e"
-	    #        cd $e
-            #    export LOCALCLASSPATH="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
-            #    export ANT_OPTS="-Xss8m -Xmx768m"
-	    #        ant -verbose -f build.main.xml -Declipse.spoofaximp.jars=utils/ -Declipse.home=$eclipsefakehome
-	    #        cd ..
-	    #        stopNest
-            #done
-            	        
             mkdir utils
             export LOCALCLASSPATH="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar"
             export ANT_OPTS="-Xss8m -Xmx768m"
             export ANT_ARGS="-Declipse.spoofaximp.jars=utils/ -Declipse.home=$eclipsefakehome"
 
-            mvn -X package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e
+            mvn package ${mvnFlags} -e
 	      '';
 	      
 	      installPhase = ''

From M.A.Akhter at student.tudelft.nl  Thu Apr 28 14:33:23 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 28 Apr 2011 12:33:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22664 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old
Message-ID: <20110428123323.348BFCC147@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 28 12:33:22 2011
New Revision: 22664
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22664&sc=1

Log:


Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Test-old/

From R.B.Vermaas at tudelft.nl  Thu Apr 28 15:10:56 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 28 Apr 2011 13:10:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22665 - hydra/jobs
Message-ID: <20110428131056.B6EB97F8017@mx1.tudelft.nl>

Author: rob
Date: Thu Apr 28 13:10:56 2011
New Revision: 22665
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22665&sc=1

Log:
retry antrun

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Apr 28 12:33:22 2011	(r22664)
+++ hydra/jobs/spoofax-imp.nix	Thu Apr 28 13:10:56 2011	(r22665)
@@ -173,8 +173,8 @@
             make -C org.strategoxt.imp.generator all
             stopNest
 
-            export LOCALCLASSPATH="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
-            export ANT_OPTS="-Xss8m -Xmx768m"
+            export CLASSPATH="utils/aster.jar:utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
+            export MAVEN_OPTS="-Xss8m -Xmx768m"
 
             for e in */build.main.xml
             do
@@ -184,32 +184,30 @@
                 echo '
   <build>
     <plugins>
-      <plugin>
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>exec-maven-plugin</artifactId>
-        <version>1.1</version>
-        <executions>
-          <execution>
-            <id>generate-sources</id>
-            <phase>generate-sources</phase>
-            <goals>
-              <goal>exec</goal>
-            </goals>
-            <configuration>
-              <executable>${pkgs.ant}/bin/ant</executable>
-              <arguments>
-                <argument>-Dexternal_classpath=''${maven.compile.classpath}</argument>
-                <argument>-Declipse.spoofaximp.jars=utils/</argument>
-                <argument>-Declipse.spoofaximp.strategojar=utils/strategoxt.jar</argument>
-                <argument>-Declipse.home=${eclipse}/eclipse</argument>
-                <argument>-verbose</argument>
-                <argument>-f</argument>
-                <argument>build.main.xml</argument>
-              </arguments>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
+ <plugin>
+    <groupId>org.apache.maven.plugins</groupId>
+    <artifactId>maven-antrun-plugin</artifactId>
+    <executions>
+       <execution>
+               <id>generate-sources</id>
+               <phase>generate-sources</phase>
+               <configuration>
+                       <tasks>
+                               <echo>Running ant script</echo>
+                               <property name="external_classpath" refid="maven.compile.classpath"/>
+                               <property name="eclipse.spoofaximp.jars" value="utils/"/>
+                               <property name="eclipse.spoofaximp.strategojar" value="utils/strategoxt.jar"/>
+                               <property name="eclipse.home" value="${eclipse}/eclipse"/>
+                               <ant antfile="build.main.xml" inheritRefs="true">
+                               </ant>
+                       </tasks>
+               </configuration>
+               <goals>
+                       <goal>run</goal>
+               </goals>
+       </execution>
+    </executions>
+  </plugin>
     </plugins>
 </build></project>' >>$POM
               fi

From M.A.Akhter at student.tudelft.nl  Thu Apr 28 15:14:17 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 28 Apr 2011 13:14:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22666 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	analyze codegen codegen/sdf codegen/str
Message-ID: <20110428131417.4A42B2B802A@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Apr 28 13:14:17 2011
New Revision: 22666
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22666&sc=1

Log:


Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
      - copied, changed from r22663, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Thu Apr 28 13:10:56 2011	(r22665)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Thu Apr 28 13:14:17 2011	(r22666)
@@ -17,6 +17,70 @@
 	lib/editor-common.generated
 imports 
 	utils/contract 	
+	
+rules			// Analyze Semantic Errors 
+			
+	should-analyze-this-package = 
+		?package-qname;
+		where(not(<AnalyzedPackage>package-qname))
+		
+
+	fail-if-has-errors : problems@(errors, warning, infos*) -> problems
+		where 
+			if not(!errors => []) then 
+		 		fail	
+		 	end		 	 	
+
+
+	analyze-spx-package: 
+		package-typed-qname at Package(untyped-qname) -> <id>
+		where 
+			<debug-analysis> $[Analyze| Analyze-spx-package| Planning to Analyze : [<pp-aterm>]] 
+		where
+			if should-analyze-this-package  then //FOR handling circular referneces   
+				{|GetEnclosingPackageName:
+						rules ( GetEnclosingPackageName      := package-typed-qname);
+						<list-loop(
+								analyze-spx-module
+							)
+						><get-enclosed-modules>package-typed-qname
+				|};		
+				where(
+					rules(AnalyzedPackage: package-typed-qname -> package-typed-qname)
+				)
+				<+
+				<debug-analysis> $[Analyze| analyze-spx-package > [<pp-aterm>package-typed-qname] Failed. ]
+				;fail
+			end
+
+
+	analyze-spx-module: 
+		module-typed-qname at Module(untyped-qname) -> <id>
+		where 
+			<debug-analysis> $[Analyze|  analyze-spx-module> Planning to analyze module for semantic problems: [<pp-aterm>]] 
+		where 
+			if not(<AnalyzedModule>module-typed-qname) then
+				<debug-analysis> $[Analyze| analyze-spx-module> Currently Analyzing : [<pp-aterm>]]; 
+				module-decl* := <get-module-declarations>module-typed-qname;
+				{|GetEnclosingModuleName:
+						rules( GetEnclosingModuleName := module-typed-qname);
+						<list-loop(
+								analyze
+						 )>module-decl*
+				|};
+				module-abs-path := <DeclaredModule>untyped-qname;
+				where(rules(
+					AnalyzedModule:     module-typed-qname -> module-typed-qname
+					AnalyzedModulesDeclaredIn:+ module-abs-path -> module-typed-qname
+					)
+				)
+				<+
+				<debug-analysis> $[Analyze| analyze-spx-module| [<pp-aterm>module-typed-qname] Failed. ]
+				;fail
+			else
+				<debug-analysis> $[Analyze| analyze-spx-module| Ignored as already in the queue :[<pp-aterm>]] //this package is not compiled before
+			end		
+	
 rules
 	
 	//lookups for the analyzed problems

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Apr 28 13:10:56 2011	(r22665)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Apr 28 13:14:17 2011	(r22666)
@@ -20,12 +20,15 @@
 	lib/configuration/SpoofaxConfiguration 
 	include/SpoofaxLang
 imports	
-	codegen/generate-all
+	codegen/generate
 	codegen/buildscripts
+	analyze/main
+	
 imports
 	context/declare 	
 	context/str/declare  
 	
+	
 		
 //TODO : refactor : move it to declare all when handling all types of legacy artifacts. Currently only considering STR Libs
 	 
@@ -114,37 +117,6 @@
 		origin-track-forced(nomalize-all) // nomalize and builds scope-tree and  partial symbol table with the local information availble
 		//nomalize-all
 
-strategies 
-	
-	build-all = 
-		?current-term
-		;enable-compiler-debugging
-		;new-compile-session(
-			list-of-package-qname* := <get-package-list> 
-			;<compile-internal>list-of-package-qname*
-			;<debug>$[=========Getting list of errors============]
-			;<get-all-analyzed-problems>() => problems  
-			;if <fail-if-has-errors>problems then
-			 	 <debug>$[=========generating artifacts============]
-			 	;init-code-generation  
-				;<list-loop(generate-spx-package)>list-of-package-qname*
-				;<debug>$[=========Generating Build Scipt============]
-				;<emit-build-script> list-of-package-qname*
-				;<debug>$[=========Code Generation is done============] 		
-			else
-				<debug>$[Please fix the errors before building the artifacts:  [<pp-aterm-forced>problems]]
-			end		 
-		)
-		;disable-compiler-debugging
-		;!current-term //restoring current term to avoid side effects  
-	
-	
-	fail-if-has-errors : problems@(errors, warning, infos*) -> problems
-		where 
-			if not(!errors => []) then 
-		 		fail	
-		 	end		 	 	
-
 strategies 				// Main compilation events  
 	
 	compile-all = 
@@ -182,6 +154,7 @@
 				  <debug(!"Errors : ")>issues* 	  // get errors for this file only
 			end
 	
+	
 	compile-internal : list-of-package-qname* -> list-of-package-qname* 
 	where 
 		<debug-compiler>$[=========Compiling packages===============
@@ -197,9 +170,9 @@
 		end
 
 
+
 rules				// Compiler main : Compiles provided list of packages and stores semantic problems   
 	
-	
 	compile-main= 
 		?list-of-package-qnames;
 		where(
@@ -236,31 +209,6 @@
 					<list-loop(compile-legacy-artifact-package)>upackages	
 		|}
 	
-	
-	compile-legacy-artifact-package : p at Package(qname) ->p
-	where	
-		<debug-compiler>$[compile-main | compile-legacy-artifacts | Current Package:[<pp-aterm>]]
-		;<bagof-UsingLegacyArtifacts>qname=> legacy-artifact-details*
-		;<debug-compiler>$[compile-main | compile-legacy-artifacts | Artifact List:[<pp-aterm>legacy-artifact-details*]]
-	where
-		<map(compile-legacy-artifact)>legacy-artifact-details*	
-		
-	compile-legacy-artifact: 
-		legacy-artifact-details@(namespace, Module(Name(modulename)) , resolving-path) -> legacy-artifact-details
-		where
-			<debug-compiler>$[compile-main | compile-legacy-artifact > planning to compile following legacy artifact: [<pp-aterm>]] 
-		where
-			if not(<Resolved-ExternalArtifact>(modulename,resolving-path)) then 	
-				if (!resolving-path => Unresolved()) then
-	  				<get-cached-lib-ast(read-stratego-signatures);declare-stratego-globals-top>modulename
-					<+
-						<read-stratego-signatures;declare-stratego-globals-top> modulename	
-					<+ 
-						<debug-compiler>$[compile-main | compile-legacy-artifact > failed to resolve]
-				end 	 
-			end	
-		where
-			rules ( Resolved-ExternalArtifact : (modulename,resolving-path) ->resolving-path) 
 			
 	//During analyze-package , just call this strategy 
 	compile-spx-package: 
@@ -352,64 +300,36 @@
 		//TODO : add checking of PDL caching. If souce is newer than pdl version of the
 		//package, do not compile it. use the pdl instantly.
 
-rules			// Analyze Semantic Errors 
-			
-	should-analyze-this-package = 
-		?package-qname;
-		where(not(<AnalyzedPackage>package-qname))
-		
 
-	analyze-spx-package: 
-		package-typed-qname at Package(untyped-qname) -> <id>
-		where 
-			<debug-analysis> $[Analyze| Analyze-spx-package| Planning to Analyze : [<pp-aterm>]] 
+rules 
+	
+	//Compile legacy SDF + STR Artifacts . Currently it only supports STR legacy artifacts . TODO  : add others 		
+	compile-legacy-artifact-package : p at Package(qname) ->p
+	where	
+		<debug-compiler>$[compile-main | compile-legacy-artifacts | Current Package:[<pp-aterm>]]
+		;<bagof-UsingLegacyArtifacts>qname=> legacy-artifact-details*
+		;<debug-compiler>$[compile-main | compile-legacy-artifacts | Artifact List:[<pp-aterm>legacy-artifact-details*]]
+	where
+		<map(compile-legacy-artifact)>legacy-artifact-details*	
+		
+	compile-legacy-artifact: 
+		legacy-artifact-details@(namespace, Module(Name(modulename)) , resolving-path) -> legacy-artifact-details
 		where
-			if should-analyze-this-package  then //FOR handling circular referneces   
-				{|GetEnclosingPackageName:
-						rules ( GetEnclosingPackageName      := package-typed-qname);
-						<list-loop(
-								analyze-spx-module
-							)
-						><get-enclosed-modules>package-typed-qname
-				|};		
-				where(
-					rules(AnalyzedPackage: package-typed-qname -> package-typed-qname)
-				)
-				<+
-				<debug-analysis> $[Analyze| analyze-spx-package > [<pp-aterm>package-typed-qname] Failed. ]
-				;fail
-			end
-
-	analyze-spx-module: 
-		module-typed-qname at Module(untyped-qname) -> <id>
-		where 
-			<debug-analysis> $[Analyze|  analyze-spx-module> Planning to analyze module for semantic problems: [<pp-aterm>]] 
-		where 
-			if not(<AnalyzedModule>module-typed-qname) then
-				<debug-analysis> $[Analyze| analyze-spx-module> Currently Analyzing : [<pp-aterm>]]; 
-				module-decl* := <get-module-declarations>module-typed-qname;
-				{|GetEnclosingModuleName:
-						rules( GetEnclosingModuleName := module-typed-qname);
-						<list-loop(
-								analyze
-						 )>module-decl*
-				|};
-				module-abs-path := <DeclaredModule>untyped-qname;
-				where(rules(
-					AnalyzedModule:     module-typed-qname -> module-typed-qname
-					AnalyzedModulesDeclaredIn:+ module-abs-path -> module-typed-qname
-					)
-				)
-				<+
-				<debug-analysis> $[Analyze| analyze-spx-module| [<pp-aterm>module-typed-qname] Failed. ]
-				;fail
-			else
-				<debug-analysis> $[Analyze| analyze-spx-module| Ignored as already in the queue :[<pp-aterm>]] //this package is not compiled before
+			<debug-compiler>$[compile-main | compile-legacy-artifact > planning to compile following legacy artifact: [<pp-aterm>]] 
+		where
+			if not(<Resolved-ExternalArtifact>(modulename,resolving-path)) then 	
+				if (!resolving-path => Unresolved()) then
+	  				<get-cached-lib-ast(read-stratego-signatures);declare-stratego-globals-top>modulename
+					<+
+						<read-stratego-signatures;declare-stratego-globals-top> modulename	
+					<+ 
+						<debug-compiler>$[compile-main | compile-legacy-artifact > failed to resolve]
+				end 	 
 			end	
+		where
+			rules ( Resolved-ExternalArtifact : (modulename,resolving-path) ->resolving-path) 
 	
 rules 			// Reference Resolving 
-	
-	 
 	resolve-package-references = 
 		?list-of-package-tqnames;
 		<list-loop(
@@ -460,59 +380,3 @@
 		problems := ([] , [] , [])
 	where
 		<debug-compiler>$[Caching | Found Problems for this module : [<pp-aterm>problems]]	
-	
-rules
-	
-	// Analyze Semantic Errors 
-	should-generate-code-this-package = 
-		?package-qname;
-		where(not(<PackageCodeGenerated>package-qname))
-		
-	generate-spx-package: 
-		package-typed-qname at Package(untyped-qname) -> <id>
-		where 
-			<debug-compiler> $[Generate| Generate code for spx-package| Planning to Generate Artifacts : [<pp-aterm>]] 
-		where
-			if should-generate-code-this-package  then 
-				{|GetEnclosingPackageName:
-						rules ( GetEnclosingPackageName := package-typed-qname);
-						enclosed-module-typed-qnames := <get-enclosed-modules>package-typed-qname;
-						<list-loop(
-								generate-spx-module
-							)
-						>enclosed-module-typed-qnames;
-						<generate-main> enclosed-module-typed-qnames // generate all the main artifacts now  
-				|};		
-				where(
-					rules(PackageCodeGenerated: package-typed-qname -> package-typed-qname)
-				)
-				<+
-				<debug-compiler> $[Generate| generate-spx-package > [<pp-aterm>package-typed-qname] Failed. ]
-				;fail
-			end
-
-	generate-spx-module: 
-		module-typed-qname at Module(untyped-qname) -> <id>
-		where 
-			<debug-compiler> $[Generate|  generate-spx-module> Planning to generate module for semantic problems: [<pp-aterm>]] 
-		where 
-			if not(<ModuleCodeGenerated>module-typed-qname) then
-				<debug-compiler> $[Generate| generate-spx-module| Currently Generating : [<pp-aterm>]]; 
-				module-decl* := <get-original-module-declaration>module-typed-qname;
-				{|GetEnclosingModuleName:
-						rules( GetEnclosingModuleName := module-typed-qname);
-						<generate-all> module-decl* // generating all the artifacts for the specified module
-				|};
-				module-abs-path := <DeclaredModule>untyped-qname;
-				where(
-					rules(
-						ModuleCodeGenerated:     module-typed-qname -> module-typed-qname
-					)
-				)
-				<+
-				<debug-compiler> $[Generate| generate-spx-module| [<pp-aterm>module-typed-qname] Failed. ]
-				;fail
-			else
-				<debug-compiler> $[Generate| generate-spx-module| Ignored as already in the queue :[<pp-aterm>]] //this package is not compiled before
-			end		
-			
\ No newline at end of file

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str (from r22663, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate-all.str	Thu Apr 28 12:15:08 2011	(r22663, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Thu Apr 28 13:14:17 2011	(r22666)
@@ -1,4 +1,4 @@
-module codegen/generate-all
+module codegen/generate
 
 imports 
 	codegen/compile
@@ -7,13 +7,13 @@
 	codegen/str/to-stratego
 	codegen/esv/to-esv
 	codegen/buildscripts
+
 imports 
 	config 
 	common
 imports	
 	lib/editor-common.generated
 	include/spoofaxlang
-
 imports	
 	context/scope-tree
 	context/signature
@@ -24,8 +24,89 @@
 	utils/contract
 	utils/debug
 	utils/cache
+	analyze/main
 
+strategies 
+	
+	build-all = 
+		?current-term
+		;enable-compiler-debugging
+		;new-compile-session(
+			list-of-package-qname* := <get-package-list> 
+			;<compile-internal>list-of-package-qname*
+			;<debug>$[=========Getting list of errors============]
+			;<get-all-analyzed-problems>() => problems  
+			;if <fail-if-has-errors>problems then
+			 	 <debug>$[=========generating artifacts============]
+			 	;init-code-generation  
+				;<list-loop(generate-spx-package)>list-of-package-qname*
+				;<debug>$[=========Generating Build Scipt============]
+				;<emit-build-script> list-of-package-qname*
+				;<debug>$[=========Code Generation is done============] 		
+			else
+				<debug>$[Please fix the errors before building the artifacts:  [<pp-aterm-forced>problems]]
+			end		 
+		)
+		;disable-compiler-debugging
+		;!current-term //restoring current term to avoid side effects  
+	
+		
+rules
 
+	should-generate-code-this-package = 
+		?package-qname;
+		where(not(<PackageCodeGenerated>package-qname))
+		
+	// generates artifact for spx packages 
+	generate-spx-package: 
+		package-typed-qname at Package(untyped-qname) -> <id>
+		where 
+			<debug-compiler> $[Generate| Generate code for spx-package| Planning to Generate Artifacts : [<pp-aterm>]] 
+		where
+			if should-generate-code-this-package  then 
+				{|GetEnclosingPackageName:
+						rules ( GetEnclosingPackageName := package-typed-qname);
+						enclosed-module-typed-qnames := <get-enclosed-modules>package-typed-qname;
+						<list-loop(
+								generate-spx-module
+							)
+						>enclosed-module-typed-qnames;
+						<generate-main> enclosed-module-typed-qnames // generate all the main artifacts now  
+				|};		
+				where(
+					rules(PackageCodeGenerated: package-typed-qname -> package-typed-qname)
+				)
+				<+
+				<debug-compiler> $[Generate| generate-spx-package > [<pp-aterm>package-typed-qname] Failed. ]
+				;fail
+			end
+	
+	// generates artifacts fro spx module
+	generate-spx-module: 
+		module-typed-qname at Module(untyped-qname) -> <id>
+		where 
+			<debug-compiler> $[Generate|  generate-spx-module> Planning to generate module for semantic problems: [<pp-aterm>]] 
+		where 
+			if not(<ModuleCodeGenerated>module-typed-qname) then
+				<debug-compiler> $[Generate| generate-spx-module| Currently Generating : [<pp-aterm>]]; 
+				module-decl* := <get-original-module-declaration>module-typed-qname;
+				{|GetEnclosingModuleName:
+						rules( GetEnclosingModuleName := module-typed-qname);
+						<generate-all> module-decl* // generating all the artifacts for the specified module
+				|};
+				module-abs-path := <DeclaredModule>untyped-qname;
+				where(
+					rules(
+						ModuleCodeGenerated:     module-typed-qname -> module-typed-qname
+					)
+				)
+				<+
+				<debug-compiler> $[Generate| generate-spx-module| [<pp-aterm>module-typed-qname] Failed. ]
+				;fail
+			else
+				<debug-compiler> $[Generate| generate-spx-module| Ignored as already in the queue :[<pp-aterm>]] //this package is not compiled before
+			end		
+			
 
 //TODO: OPTIMIZE : get the imports and resue it in all the generation phase rather traversing to find it out each time. 
 //TODO: OPTIMIZE : DR can be used to construct this imports  

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Thu Apr 28 13:10:56 2011	(r22665)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Thu Apr 28 13:14:17 2011	(r22666)
@@ -42,5 +42,5 @@
 		where
 			<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
 		with 
-			debug(!"=============starting compile-all =1==================");
+			debug(!"=============starting compile-all ===================");
 			<compile-all>()

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Thu Apr 28 13:10:56 2011	(r22665)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Thu Apr 28 13:14:17 2011	(r22666)
@@ -24,7 +24,7 @@
 	utils/debug
 imports 	 
 	codegen/main
-	codegen/generate-all 
+	codegen/generate 
 	utils/contract
 	
       

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Thu Apr 28 13:10:56 2011	(r22665)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Thu Apr 28 13:14:17 2011	(r22666)
@@ -16,7 +16,7 @@
 	codegen/sdf/to-signature
 	codegen/compile
 	codegen/main
-	codegen/generate-all
+	codegen/generate
 imports	
 	context/signature
 	context/scope-tree

From seba at informatik.uni-marburg.de  Thu Apr 28 16:51:58 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Thu, 28 Apr 2011 14:51:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22667 - in
	sugarj/trunk: compiler/org/sugarj/driver
	stdlib/org/sugarj/languages stdlib/org/sugarj/stdlib
Message-ID: <20110428145158.C9C76CC0EA@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Thu Apr 28 14:51:58 2011
New Revision: 22667
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22667&sc=1

Log:
support plain output files

Added:
   sugarj/trunk/stdlib/org/sugarj/languages/Plain.def
   sugarj/trunk/stdlib/org/sugarj/languages/Plain.str
Modified:
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
   sugarj/trunk/stdlib/org/sugarj/languages/SugarJ.def
   sugarj/trunk/stdlib/org/sugarj/stdlib/StdLib.java

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Apr 28 13:14:17 2011	(r22666)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Apr 28 14:51:58 2011	(r22667)
@@ -39,6 +39,7 @@
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.spoofax.jsglr.shared.SGLRException;
 import org.spoofax.jsglr.shared.TokenExpectedException;
+import org.spoofax.terms.Term;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
 import org.strategoxt.lang.Context;
@@ -53,7 +54,7 @@
  */
 public class Driver{
   
-  public final static String VERSION = "editor-base-0.2";
+  public final static String VERSION = "editor-base-0.3";
   
   private static class Key {
     private String source;
@@ -413,6 +414,67 @@
     }
   }
   
+  private void processPlainDec(IStrategoTerm toplevelDecl) throws IOException {
+    log.beginTask(
+        "processing",
+        "PROCESS the desugared plain declaration.");
+    try {
+      sugaredTypeOrSugarDecls.add(lastSugaredToplevelDecl);
+      
+      String extName = null;
+      String fullExtName = null;
+      boolean isPublic = false;
+
+      IStrategoTerm head = getApplicationSubterm(toplevelDecl, "PlainDec", 0);
+      IStrategoTerm body= getApplicationSubterm(toplevelDecl, "PlainDec", 1);
+      
+      log.beginTask("Extracting name and accessibility.");
+      try {
+        extName =
+          SDFCommands.prettyPrintJava(
+          getApplicationSubterm(head, "PlainDecHead", 1), interp);    
+
+        String extension = null;
+        if (head.getSubtermCount() >= 3 && isApplication(getApplicationSubterm(head, "PlainDecHead", 2), "Some"))
+          extension = Term.asJavaString(
+                      getApplicationSubterm(getApplicationSubterm(head, "PlainDecHead", 2), "Some", 0));    
+ 
+
+        
+        IStrategoTerm mods = getApplicationSubterm(head, "PlainDecHead", 0);
+        
+        for (IStrategoTerm t : getList(mods))
+          if (isApplication(t, "Public"))
+          {
+            isPublic = true;
+            break;
+          }
+        
+        fullExtName = relPackageNameSep() + extName + (extension == null ? "" : ("." + extension));
+
+        log.log("The name is '" + extName + "'.");
+        log.log("The full name is '" + fullExtName + "'.");
+
+        if (isPublic)
+          log.log("The plain file is public.");
+        else
+          log.log("The plain file is not public.");
+      
+        String plainContent = Term.asJavaString(ATermCommands.getApplicationSubterm(body, "PlainBody", 0));
+        
+        String plainFile = bin + sep + relPackageNameSep() + extName + (extension == null ? "" : ("." + extension));
+        FileCommands.createFile(plainFile);
+  
+        log.log("writing plain content to " + plainFile);
+        driverResult.generateFile(plainFile, plainContent);
+      } finally {
+        log.endTask();
+      }
+    } finally {
+      log.endTask();
+    }
+  }
+  
   
   private void processToplevelDeclaration(IStrategoTerm toplevelDecl)
       throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException {
@@ -439,6 +501,8 @@
           processSugarDec(toplevelDecl);
         else if (isApplication(toplevelDecl, "EditorServicesDec")) 
           processEditorServicesDec(toplevelDecl);
+        else if (isApplication(toplevelDecl, "PlainDec")) 
+          processPlainDec(toplevelDecl);
         else if (ATermCommands.isList(toplevelDecl))
           /* 
            * Desugarings may generate lists of toplevel declarations. These declarations,
@@ -449,7 +513,7 @@
         else
           throw new IllegalArgumentException("unexpected toplevel declaration, desugaring probably failed: " + toplevelDecl.toString(5));
       } catch (Exception e) {
-        ATermCommands.setErrorMessage(toplevelDecl, e.getLocalizedMessage() != null ? e.getLocalizedMessage() : e.toString());
+        ATermCommands.setErrorMessage(toplevelDecl, e.getClass().getName() + " " + e.getLocalizedMessage() != null ? e.getLocalizedMessage() : e.toString());
         sugaredTypeOrSugarDecls.add(lastSugaredToplevelDecl);
       }
     }

Modified: sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Thu Apr 28 13:14:17 2011	(r22666)
+++ sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Thu Apr 28 14:51:58 2011	(r22667)
@@ -63,6 +63,7 @@
       "-Idef", StdLib.sdfDef.getPath(),
       "-Idef", StdLib.strategoDef.getPath(),
       "-Idef", StdLib.editorServicesDef.getPath(),
+      "-Idef", StdLib.plainDef.getPath(),
       "-I", StdLib.stdLibDir.getPath(),
     }));
     
@@ -145,6 +146,9 @@
       cacheParseTable(key, tbl);
     }
     
+    if (tbl != null)
+      log.log("use generated table " + tbl);
+    
     return org.strategoxt.imp.runtime.Environment.loadParseTable(tbl);
   }
   

Added: sugarj/trunk/stdlib/org/sugarj/languages/Plain.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/stdlib/org/sugarj/languages/Plain.def	Thu Apr 28 14:51:58 2011	(r22667)
@@ -0,0 +1,14 @@
+definition
+module org/sugarj/languages/Plain
+exports
+  context-free syntax
+    PlainDecHead PlainBody   -> ToplevelDeclaration              {cons("PlainDec")}
+    AnnoOrSugarMod* "plain" JavaId PlainExtension? -> PlainDecHead {cons("PlainDecHead")}
+    "." JavaID -> PlainExtension
+  
+  syntax
+    "{" <PlainContent-LEX> "}"              -> <PlainBody-CF>    {cons("PlainBody")}
+
+  lexical syntax
+    ~[\{\}]* -> PlainContent
+    PlainContent "{" PlainContent "}" PlainContent -> PlainContent

Added: sugarj/trunk/stdlib/org/sugarj/languages/Plain.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/stdlib/org/sugarj/languages/Plain.str	Thu Apr 28 14:51:58 2011	(r22667)
@@ -0,0 +1,8 @@
+module org/sugarj/languages/Plain
+
+signature
+  constructors
+  	PlainDec : PlainDecHead * PlainBody -> ToplevelDeclaration
+  	PlainDecHead : list(AnnoOrSugarMod) * JavaId * Some(JavaID) -> PlainDecHead
+  	PlainBody : PlainContent -> PlainBody
+ 
\ No newline at end of file

Modified: sugarj/trunk/stdlib/org/sugarj/languages/SugarJ.def
==============================================================================
--- sugarj/trunk/stdlib/org/sugarj/languages/SugarJ.def	Thu Apr 28 13:14:17 2011	(r22666)
+++ sugarj/trunk/stdlib/org/sugarj/languages/SugarJ.def	Thu Apr 28 14:51:58 2011	(r22667)
@@ -1,8 +1,11 @@
 definition
 
 module org/sugarj/languages/SugarJ
-imports org/sugarj/languages/Java org/sugarj/languages/Sdf2
-        org/sugarj/languages/Stratego org/sugarj/languages/EditorServices
+imports org/sugarj/languages/Java 
+        org/sugarj/languages/Sdf2
+        org/sugarj/languages/Stratego
+        org/sugarj/languages/EditorServices
+        org/sugarj/languages/Plain
 
 exports
   sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR

Modified: sugarj/trunk/stdlib/org/sugarj/stdlib/StdLib.java
==============================================================================
--- sugarj/trunk/stdlib/org/sugarj/stdlib/StdLib.java	Thu Apr 28 13:14:17 2011	(r22666)
+++ sugarj/trunk/stdlib/org/sugarj/stdlib/StdLib.java	Thu Apr 28 14:51:58 2011	(r22667)
@@ -61,7 +61,8 @@
   public static URI strategoTbl = ensureFile("org/sugarj/languages/Stratego.tbl");
   public static URI editorServicesDef = ensureFile("org/sugarj/languages/EditorServices.def");
   public static URI editorServicesTbl = ensureFile("org/sugarj/languages/EditorServices.tbl");
-
+  public static URI plainDef = ensureFile("org/sugarj/languages/Plain.def");
+  
   public static URI initGrammar = ensureFile("org/sugarj/init/initGrammar.sdf");
   public static String initGrammarModule = "org/sugarj/init/initGrammar";
   public static URI initGrammarAtomicImports = ensureFile("org/sugarj/init/initGrammar_atomicImports.sdf");
@@ -81,6 +82,7 @@
     exists(strategoTbl);
     exists(editorServicesDef);
     exists(editorServicesTbl);
+    exists(plainDef);
     exists(initGrammar);
     exists(initGrammarAtomicImports);
     exists(initGrammarXTBL);

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 02:01:37 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 00:01:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22668 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen
Message-ID: <20110429000139.498A1CC118@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 00:01:37 2011
New Revision: 22668
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22668&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Thu Apr 28 14:51:58 2011	(r22667)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Fri Apr 29 00:01:37 2011	(r22668)
@@ -22,7 +22,7 @@
 			;main-ant-output-path         := <concat-strings>[project-path  , "/" ,  main-ant-output-file-name    , ".xml"]
 		where
 			 <dirname; ensure-directory-exists>autogen-ant-output-path  
-			;<save-to-file>(autogen-ant-output-path  , <get-ant-autogeneratedscript>())
+			;<save-to-file>(autogen-ant-output-path  , <get-ant-autogeneratedscript>)
 			;<refresh-workspace-file>autogen-ant-output-path   
 		where
 			packages-specific-ant-string := <packages-specific-ant>(package-qnames*, main-ant-output-file-name ,autogen-ant-output-file-name);
@@ -73,7 +73,8 @@
 	emit-package-specific-ant : Package(package-qname at QName(qname-parts*)) -> $[ 
 	
 	<target name="[package-target-name]">
-		<property name="package.name" value="[package-name]"/>
+		<property name="package.name" value="[package-name]"/>
+		<property name="package.qname" value="[package-qname-string]"/>
 		<property name="package.path" location="[package-directory]"/>
 		<property name="package.main.sdf.module" value="[package-main-name]"/>
 		<property name="package.main.str.module" value="[package-main-name]"/>
@@ -81,8 +82,9 @@
 		<property name="metasdfmodule" value="Stratego-[package-main-name]"/> 
 		
 		<antcall target = "spx.default">
-		  	<param name = "package.name" value = "${package.name}"/>
-			<param name = "package.path" value = "${package.path}"/>
+		  <param name = "package.name"  value = "${package.name}"/>
+		  <param name = "package.qname" value = "${package.qname}"/>
+			<param name = "package.path"  value = "${package.path}"/>
 		 	<param name = "package.main.sdf.module" value = "${package.main.sdf.module}"/>
 			<param name = "package.main.str.module" value = "${package.main.str.module}"/>
 		 	<param name = "package.main.esv.module" value = "${package.main.esv.module}"/>
@@ -95,6 +97,7 @@
 		;package-directory		      := $[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
  		;package-main-name          := <get-main-file-name>package-qname
  		;package-name								:= <qname-to-string>package-qname
+ 		;package-qname-string				:=  <convert-qname(|"."); string-replace(|"-", ".")>package-qname
  		;package-target-name				:= <get-package-target-name>package-qname    
 
 
@@ -506,11 +509,11 @@
   		<arg value="-I"/>
     	<arg value="${packages.root}"/>
   		<arg value="-i"/>
-      <arg value="${package.path}/${package.main.str.module}.rtree"/>
+      <arg value="${package.path}/${package.main.str.module}.str"/>
       <arg value="-o"/>
       <arg value="${build.stratego.outputfile}"/>
   		<arg value="-p"/> 
-  	  <arg value="test"/><!-- Todo : reconsider whether this extra args are needed -->
+  	  <arg value="${package.qname}"/>
       <arg value="--library"/>
       <arg value="--clean"/>
   		<arg line="${build.stratego.args}"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Apr 28 14:51:58 2011	(r22667)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Fri Apr 29 00:01:37 2011	(r22668)
@@ -188,7 +188,7 @@
 		//Phase 2:  Compile all the legacy artifacts referred by Spx Packages 
 		//				  and make them accessible in the Global Scope 
 		;where(<debug-compiler>$[compile-main | compile-legacy-artifacts:])
-		//;where(compile-legacy-artifacts)
+		;where(compile-legacy-artifacts)
 		
 		//Phase 3:  Compile Packagesand make them accessible in the different package 
 		//					namespace.
@@ -197,19 +197,7 @@
 		;list-loop(compile-spx-package)
 		;list-loop(analyze-spx-package)
 				
-	
-	// Compile sdf, str, esv modules which are imported in the global nameepsace
-	compile-legacy-artifacts: package-tqnames* -> package-tqnames*
-	where
-		<make-set>package-tqnames* => upackages;
-		<debug-compiler>$[compile-main | compile-legacy-artifacts | List:[<pp-aterm>upackages]]
-	where
-		{| Resolved-ExternalArtifact:
-					<compile-legacy-artifact>(Unresolved() , Module(Name("libstratego-lib")) ,Unresolved()); 
-					<list-loop(compile-legacy-artifact-package)>upackages	
-		|}
-	
-			
+				
 	//During analyze-package , just call this strategy 
 	compile-spx-package: 
 		package-typed-qname at Package(untyped-qname) -> <id>
@@ -302,23 +290,38 @@
 
 
 rules 
-	
-	//Compile legacy SDF + STR Artifacts . Currently it only supports STR legacy artifacts . TODO  : add others 		
+
+	// Compile sdf, str, esv modules which are imported in the global nameepsace
+	compile-legacy-artifacts: package-tqnames* -> package-tqnames*
+	where
+		<make-set>package-tqnames* => upackages;
+		<debug-compiler>$[compile-main | compile-legacy-artifacts | List:[<pp-aterm>upackages]]
+	where
+		{| Resolved-ExternalArtifact:
+					<compile-legacy-artifact>(Unresolved() , Module(Name("libstratego-lib")) ,Unresolved()); 
+					<list-loop(compile-legacy-artifact-package)>upackages	
+		|}
+
+
+	//Compile  a particular legacy SDF + STR Artifacts . Currently it only supports STR legacy artifacts . TODO  : add others 		
 	compile-legacy-artifact-package : p at Package(qname) ->p
 	where	
-		<debug-compiler>$[compile-main | compile-legacy-artifacts | Current Package:[<pp-aterm>]]
+		 <debug-compiler>$[compile-main | compile-legacy-artifacts | Current Package:[<pp-aterm>]]
 		;<bagof-UsingLegacyArtifacts>qname=> legacy-artifact-details*
 		;<debug-compiler>$[compile-main | compile-legacy-artifacts | Artifact List:[<pp-aterm>legacy-artifact-details*]]
 	where
 		<map(compile-legacy-artifact)>legacy-artifact-details*	
 		
+	
 	compile-legacy-artifact: 
 		legacy-artifact-details@(namespace, Module(Name(modulename)) , resolving-path) -> legacy-artifact-details
 		where
 			<debug-compiler>$[compile-main | compile-legacy-artifact > planning to compile following legacy artifact: [<pp-aterm>]] 
 		where
-			if not(<Resolved-ExternalArtifact>(modulename,resolving-path)) then 	
-				if (!resolving-path => Unresolved()) then
+			if not(<Resolved-ExternalArtifact>(modulename,resolving-path)) then // check to see if already taken care off.  	
+				if (!resolving-path => Unresolved()) then 
+					  // logic : we are only supporting legacy STR lib at this moment which are not located in the file system . 
+					  // Hence, it is unresolved , we are giving it a try to resolve it as a lib
 	  				<get-cached-lib-ast(read-stratego-signatures);declare-stratego-globals-top>modulename
 					<+
 						<read-stratego-signatures;declare-stratego-globals-top> modulename	
@@ -329,7 +332,9 @@
 		where
 			rules ( Resolved-ExternalArtifact : (modulename,resolving-path) ->resolving-path) 
 	
-rules 			// Reference Resolving 
+rules 			
+	
+	// Reference Resolving 
 	resolve-package-references = 
 		?list-of-package-tqnames;
 		<list-loop(
@@ -340,7 +345,6 @@
 			get-enclosed-modules; 
 			get-module-declarations;
 			origin-track-forced(map(store-import-references))
-			//map(store-import-references) 
 		<+
 			where(<debug-compiler>$[resolve-package-references | Failed to resolve package refernece:[<pp-aterm>]]);fail
 		)>list-of-package-tqnames

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 02:17:55 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 00:17:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22669 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen
Message-ID: <20110429001755.8C4C7CC131@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 00:17:54 2011
New Revision: 22669
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22669&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Fri Apr 29 00:01:37 2011	(r22668)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Fri Apr 29 00:17:54 2011	(r22669)
@@ -22,7 +22,7 @@
 			;main-ant-output-path         := <concat-strings>[project-path  , "/" ,  main-ant-output-file-name    , ".xml"]
 		where
 			 <dirname; ensure-directory-exists>autogen-ant-output-path  
-			;<save-to-file>(autogen-ant-output-path  , <get-ant-autogeneratedscript>)
+			;<save-to-file>(autogen-ant-output-path  , <get-ant-autogeneratedscript>())
 			;<refresh-workspace-file>autogen-ant-output-path   
 		where
 			packages-specific-ant-string := <packages-specific-ant>(package-qnames*, main-ant-output-file-name ,autogen-ant-output-file-name);
@@ -97,7 +97,7 @@
 		;package-directory		      := $[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
  		;package-main-name          := <get-main-file-name>package-qname
  		;package-name								:= <qname-to-string>package-qname
- 		;package-qname-string				:=  <convert-qname(|"."); string-replace(|"-", ".")>package-qname
+ 		;package-qname-string				:=  <convert-qname(|".");string-replace(|"-", ".")>package-qname
  		;package-target-name				:= <get-package-target-name>package-qname    
 
 

From R.B.Vermaas at tudelft.nl  Fri Apr 29 10:36:43 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 29 Apr 2011 08:36:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22670 - hydra
Message-ID: <20110429083643.7023D108C005@mx3.tudelft.nl>

Author: rob
Date: Fri Apr 29 08:36:43 2011
New Revision: 22670
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22670&sc=1

Log:


Modified:
   hydra/build.nix

Modified: hydra/build.nix
==============================================================================
--- hydra/build.nix	Fri Apr 29 00:17:54 2011	(r22669)
+++ hydra/build.nix	Fri Apr 29 08:36:43 2011	(r22670)
@@ -91,7 +91,7 @@
       meta.maintainers = if specpkgs ? notifyAddresses then specpkgs.notifyAddresses else [] ;
 
       preHook = ''
-        ulimit -s 64000
+        ulimit -s ${if pkgs.stdenv.isDarwin then "64000" else "unlimited"}
       '';
 
     } // pkgs.lib.optionalAttrs (pkgs.stdenv.system == "i686-cygwin") 
@@ -352,7 +352,7 @@
 
 
   deb_variants = if makeDebs then [ "debian50i386" "ubuntu910i386"] else [] ;
-  rpm_variants = if makeRPMs then [ "fedora12i386" "opensuse110i386" ] else [] ;
+  rpm_variants = if makeRPMs then [ "fedora12i386" "opensuse111i386" ] else [] ;
 
   rpmToNix = rpm :
      pkgsDefault.runCommand

From seba at informatik.uni-marburg.de  Fri Apr 29 10:49:11 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 29 Apr 2011 08:49:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22671 - in
	sugarj/trunk: case-studies/foo stdlib/org/sugarj/languages
Message-ID: <20110429084911.2772ECC0F5@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Fri Apr 29 08:49:10 2011
New Revision: 22671
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22671&sc=1

Log:
support plain output files

Added:
   sugarj/trunk/case-studies/foo/Plain.sugj
Modified:
   sugarj/trunk/stdlib/org/sugarj/languages/Plain.def

Added: sugarj/trunk/case-studies/foo/Plain.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/foo/Plain.sugj	Fri Apr 29 08:49:10 2011	(r22671)
@@ -0,0 +1,12 @@
+package foo;
+
+import org.sugarj.languages.Plain;
+
+public plain File {
+  abc def \\ \ \n 
+ asdas
+as
+3
+- --da s// 
+asdas
+}
\ No newline at end of file

Modified: sugarj/trunk/stdlib/org/sugarj/languages/Plain.def
==============================================================================
--- sugarj/trunk/stdlib/org/sugarj/languages/Plain.def	Fri Apr 29 08:36:43 2011	(r22670)
+++ sugarj/trunk/stdlib/org/sugarj/languages/Plain.def	Fri Apr 29 08:49:10 2011	(r22671)
@@ -11,4 +11,4 @@
 
   lexical syntax
     ~[\{\}]* -> PlainContent
-    PlainContent "{" PlainContent "}" PlainContent -> PlainContent
+    ~[\{\}]* "{" PlainContent "}" PlainContent -> PlainContent

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 11:13:58 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 09:13:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22672 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen:
	. sdf str
Message-ID: <20110429091358.96D98108C015@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 09:13:58 2011
New Revision: 22672
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22672&sc=1

Log:
* fixed compile time error by back-end regarding touple. reference to libstratego-lib was missing. 
* currently package-level unresolved imports is completely ignored. need to fix this if we want to support it. (-) problem with the origin tracking . will be fixed in the next check-ins

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Fri Apr 29 08:49:10 2011	(r22671)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Fri Apr 29 09:13:58 2011	(r22672)
@@ -134,10 +134,13 @@
 	
 	
 rules
-	
+	// generates the import declaration for the artifacts .  
+	// s is a artifact specific adapted strategy applied to all the import declaration 
+	// to get the artifact-specific import declaration. 
 	to-generated-artifacts-import-declarations(s) =
 		?imports*;	map(to-import-declaration(s)); flatten-list;	make-set; 	where(<debug-compiler>$[Codegen | Imports | Resultant imports :  [<pp-aterm>]]) 
 		
+	
 		
 	to-import-declaration(s): 
 		i at ImportPackage(package-qname at QName(_)) -> results
@@ -175,8 +178,8 @@
 				<get-enclosed-modules>Package(QName([package-name])) => modules*
 				;<map(?Module(<id>) ; qname-to-path ; s)> modules*   => result
 			else
-				 <s>package-name => result'
-				;result          := [result']	
+				 // since it is not declared as a spx package , it could be a legacy artifact . 
+				 result := <to-import-declaration(s)>ImportLegacyArtifact(Name(package-name))
 			end
 		where 
 			<debug-compiler>$[ Codegen | Imports Conversion  | import pcakage/legacy artifact Result :  [<pp-aterm>result]] 
@@ -184,8 +187,7 @@
 	to-import-declaration(s): 
 		ImportLegacyArtifact(Name(modulename)) -> result
 		where 
-				<s>modulename => result'
-				;result			 := [result']	
+				<s>Name(modulename) => result
 		where 
 			<debug-compiler>$[Codegen | Imports Conversion |  import legacy artifact Result : [<pp-aterm>result].]
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Fri Apr 29 08:49:10 2011	(r22671)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Fri Apr 29 09:13:58 2011	(r22672)
@@ -106,11 +106,28 @@
 	where 
 		spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
 		if <ensure-list-is-not-empty>spx-import-stmt*  then
-			sdf-import-block := <to-generated-artifact-block(to-generated-artifacts-import-declarations(\name -> 'module(unparameterized(name))\), \s -> ['imports(s)]\)>spx-import-stmt*
+			sdf-import-block := <to-generated-artifact-block(to-generated-artifacts-import-declarations(sdf-import-adapter), \s -> ['imports(s)]\)>spx-import-stmt*
 		else
 			sdf-import-block := []
 		end		
  
+ 	
+ 	sdf-import-adapter : name  -> 	'module(unparameterized(name))
+ 	where debug(!" in sdf-import-adapter: " )
+ 	where 
+ 		<is-string>name
+ 	
+ 	sdf-import-adapter : legacy-artifact at Name(name)  -> 	result
+ 	where debug(!" in sdf-import-adapter : legacy : " )
+ 	where 
+ 			if(<UsedLegacyArtifacts>(Globals(), name) => Unresolved()) then
+ 				result := [] 
+ 			else 
+ 				result :=  'module(unparameterized(name)) 
+			end 
+	where
+		<debug(!" in sdf-import-adapter : legacy : " )> result		
+
 rules
 
 	override pp-sdf-string = fail // ensure compiler doesn't blow up

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 29 08:49:10 2011	(r22671)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 29 09:13:58 2011	(r22672)
@@ -118,7 +118,18 @@
 			
 	to-str-import: 
 		package-name-> [Import(package-name) , Import(<get-signature-file-name>package-name)]
-	
+		where 
+			<is-string>package-name
+			
+	to-str-import: 
+		legacy-artifact at Name(name)  -> 	result 
+ 	where
+ 			if(<UsedLegacyArtifacts>(Globals(), name) => Unresolved()) then
+ 				result := [Import(name)]  // Probably lib legacy imports . SInce, it is unresolved, no signature is generated for this import
+ 			else 
+ 				result :=  [Import(name) , Import(<get-signature-file-name>name)] 
+			end	
+ 		
 	to-str-import: 
 		Module(q at QName(qnameparts*))->[Import(str-import),Import(sig-import)]
 		where 

From m.dejonge at tudelft.nl  Fri Apr 29 12:31:20 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 29 Apr 2011 10:31:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22673 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110429103120.7228A7F806D@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Apr 29 10:31:20 2011
New Revision: 22673
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22673&sc=1

Log:
performance fix: hashcode is calculated lazy after parsing

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java	Fri Apr 29 09:13:58 2011	(r22672)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java	Fri Apr 29 10:31:20 2011	(r22673)
@@ -24,11 +24,14 @@
     }
 
     public boolean isParseNode(){
-    	return (getNodeType()==AbstractParseNode.PARSENODE
-    		|| getNodeType()==AbstractParseNode.REJECT
-    		|| getNodeType()== AbstractParseNode.PREFER
-    		|| getNodeType()==AbstractParseNode.AVOID
-    	);
+    	switch(getNodeType()) {
+    	case AbstractParseNode.PARSENODE:
+    		case AbstractParseNode.REJECT:
+    		case  AbstractParseNode.PREFER:
+    		case AbstractParseNode.AVOID: return true;
+    	default:
+    		return false;
+    	}
     }
 
     public boolean isParseRejectNode(){
@@ -53,10 +56,6 @@
     
     @Override
 	abstract public int hashCode();
-    
-    public void setCachedHashCode(){
-    	//Hashcode is cached for ParseNodes (not for PPNs)
-    }
 
     abstract public String toStringShallow();
     

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java	Fri Apr 29 09:13:58 2011	(r22672)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java	Fri Apr 29 10:31:20 2011	(r22673)
@@ -333,13 +333,6 @@
         return stackStrings;
     }
 
-	public void cacheHashCodeLabels() {
-		for (int i = 0; i < stepsCount; i++) {
-			Link ln = steps[i];
-			ln.label.setCachedHashCode();
-		}
-	}
-
     //mj debug
     public String[] getStackRepresentation(boolean avoidFree){
         List<String> stackStrings=this.getStackPaths("", avoidFree);

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java	Fri Apr 29 09:13:58 2011	(r22672)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java	Fri Apr 29 10:31:20 2011	(r22673)
@@ -23,13 +23,13 @@
 
     AbstractParseNode[] kids;
     
-    private boolean isParseProductionChain;
+    private boolean isParseProductionChain; //should be set only after parsing 
 
     private boolean isSetPPC;
     
     private int nodeType;
 
-    private int cachedHashCode; 
+    private int cachedHashCode; //should be set only after parsing 
 
     public int getLabel() {
     	if(isAmbNode())
@@ -61,11 +61,11 @@
  	}
 	
 	public void toAmbiguity(AbstractParseNode pn){
-		if(this.equals(pn))
+		if(this == pn)
 			return;
 		ParseNode left = new ParseNode(this.label, this.kids, this.nodeType); 
-		left.cachedHashCode = this.cachedHashCode;
-		this.cachedHashCode = NO_HASH_CODE;
+		assert(this.cachedHashCode == NO_HASH_CODE) : "Hashcode should not be cached during parsing because descendant nodes may change";
+		assert(!this.isParseProductionChain) : "PPC is not set to true during parsing because descendents may change";
 		if(pn instanceof ParseNode)
 			((ParseNode) pn).replaceDescendant(this, left); //prevent cycles
 		setFields(-1, new AbstractParseNode[] { left, pn }, AbstractParseNode.AMBIGUITY);
@@ -227,16 +227,9 @@
         int result = prime * label;
         for(AbstractParseNode n : kids)
             result += (prime * n.hashCode());
-        //cachedHashCode = result; //Does not work if descendant nodes change (toAmbiguity) during parsing
+        cachedHashCode = result; //Assumption is that hashcode is not set during parsing
         return result;
     }
-    
-    @Override    
-    public void setCachedHashCode(){
-        for(AbstractParseNode n : kids)
-            n.setCachedHashCode();
-        cachedHashCode = hashCode();
-    }
 
     @Override
     public String toStringShallow() {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Fri Apr 29 09:13:58 2011	(r22672)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Fri Apr 29 10:31:20 2011	(r22673)
@@ -404,7 +404,6 @@
 
 		while (forShifter.size() > 0) {
 			final ActionState as = forShifter.remove();
-			as.st.cacheHashCodeLabels(); //labels will not change
 			if (!parseTable.hasRejects() || !as.st.allLinksRejected()) {				
 				Frame	st1=findStack(activeStacks, as.s);
 				if(st1==null){				

From seba at informatik.uni-marburg.de  Fri Apr 29 12:54:13 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 29 Apr 2011 10:54:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22674 - in
	sugarj/trunk/case-studies/text: . test
Message-ID: <20110429105413.0B43E7F8036@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Fri Apr 29 10:54:12 2011
New Revision: 22674
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22674&sc=1

Log:
bibtex and latex sugar libraries

Added:
   sugarj/trunk/case-studies/text/
   sugarj/trunk/case-studies/text/Bibtex.sugj
   sugarj/trunk/case-studies/text/Latex.sugj
   sugarj/trunk/case-studies/text/LatexLib.sugj
   sugarj/trunk/case-studies/text/test/
   sugarj/trunk/case-studies/text/test/Bibtex.sugj
   sugarj/trunk/case-studies/text/test/LatexTest.sugj

Added: sugarj/trunk/case-studies/text/Bibtex.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/text/Bibtex.sugj	Fri Apr 29 10:54:12 2011	(r22674)
@@ -0,0 +1,102 @@
+package text;
+
+import org.sugarj.languages.Plain;
+
+import editor.Colors;
+import concretesyntax.EditorServices;
+
+public sugar Bibtex {
+  context-free syntax
+    AnnoOrSugarMod* "bibtex" JavaId BibtexBody -> ToplevelDeclaration{cons("BibtexDec")}
+    "{" BibtexStm* "}" -> BibtexBody {cons("BibtexBody")}
+    
+    BibtexStringKeyword "{" BibtexConstName "=" "{" BibtexValue "}" "}" -> BibtexStm {cons("BibtexStringStm")}
+    BibtexEntryKeyword "{" BibtexEntryName Commas {BibtexAttribute ","}* Commas "}" -> BibtexStm {cons("BibtexEntryStm")}
+    
+    BibtexID -> BibtexConstName {cons("BibtexConstName")}
+    BibtexID -> BibtexEntryName {cons("BibtexEntryName")}
+    BibtexID -> BibtexAttributeName {cons("BibtexAttributeName")}
+    
+    BibtexAttributeName "=" "{" BibtexValue "}" -> BibtexAttribute {cons("BibtexAttribute")}
+    BibtexAttributeName "=" BibtexID -> BibtexAttribute {cons("BibtexAttributeUnwrapped")}
+
+  lexical syntax
+    [\@][sS][tT][rR][iI][nN][gG] -> BibtexStringKeyword
+    [\,]* -> Commas
+    [a-zA-Z\_\--\/0-9\:\.\&]+ -> BibtexID 
+    
+    [\@][a-zA-Z]* -> BibtexEntryKeyword
+    [\@][sS][tT][rR][iI][nN][gG] -> BibtexEntryKeyword {reject}
+    
+    ~[\{\}]* -> BibtexValue
+    ~[\{\}]* "{" BibtexValue "}" BibtexValue -> BibtexValue
+  
+  desugarings
+    desugar-bibtex 
+  
+  rules
+    desugar-bibtex :
+      BibtexDec(mods, n, BibtexBody(stms))
+      ->
+      [PlainDec(PlainDecHead(mods, n, Some("bib")), PlainBody(<map(pp-bibtex); concat-strings> stms)),
+       EditorServicesDec(EditorServicesDecHead(mods, n), EditorServicesBody(<filter(bibtex-to-service)> stms)),
+       SugarDec(SugarDecHead(mods, n), SugarBody(<filter(bibtex-to-sugar)> stms))]
+     
+    pp-bibtex :
+      BibtexStringStm(keyword, BibtexConstName(var), val)
+      -> 
+      <concat-strings> [keyword, "{", var, "=", "{", val, "}", "}", "\n"]
+    
+    pp-bibtex :
+      BibtexEntryStm(keyword, BibtexEntryName(n), _, attrs, _)
+      ->
+      <concat-strings> [keyword, "{", n, ",", "\n", attrs-string, "}\n"]
+      where
+        <map(pp-bibtex-attr); concat-strings> attrs => attrs-string
+      
+    
+    pp-bibtex-attr :
+      BibtexAttributeUnwrapped(BibtexAttributeName(attr), val)
+      ->
+      <concat-strings> [attr, " = ", val, "\n"]
+    
+    pp-bibtex-attr :
+      BibtexAttribute(BibtexAttributeName(attr), val)
+      ->
+      <concat-strings> [attr, " = ", "{", val, "}", "\n"]
+    
+    
+  rules
+    bibtex-to-service :
+      BibtexEntryStm(_, BibtexEntryName(n), _, attrs, _)
+      ->
+      |[
+        completions
+          completion template : BibtexEntryName = string~n
+      ]|
+  
+  rules
+    bibtex-to-sugar :
+      BibtexEntryStm(_, BibtexEntryName(n), _, attrs, _)
+      ->
+      transformation-elem(Rules([SDefNoArgs("bibtex-entry", Match(NoAnnoList(Str(n))))]))
+}
+
+public editor services Bibtex {
+  colorer
+    BibtexStringKeyword : blue
+    BibtexEntryKeyword : blue
+    BibtexAttributeName : darkorange
+    BibtexConstName : turquoise
+    BibtexEntryName : turquoise
+    BibtexValue : black
+    
+    turquoise = 24 150 150
+    
+  folding
+    BibtexStm
+  
+  outliner
+    _.BibtexConstName
+    BibtexEntryName
+}
\ No newline at end of file

Added: sugarj/trunk/case-studies/text/Latex.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/text/Latex.sugj	Fri Apr 29 10:54:12 2011	(r22674)
@@ -0,0 +1,188 @@
+package text;
+
+import org.sugarj.languages.Plain;
+
+public sugar Latex {
+  context-free syntax
+    AnnoOrSugarMod* "latex" JavaId LatexBody -> ToplevelDeclaration{cons("LatexDec")}
+  
+  syntax
+    "{" LatexDocument "}" -> <LatexBody-CF> {cons("LatexBody")}
+    
+    <TextContent-LEX> -> LatexTextContentPart {cons("Text")}
+    "{" LatexTextContent "}" -> LatexTextContentPart {cons("TextBlock")}
+    InTextCommand -> LatexTextContentPart {cons("TextCommand")}
+    InTextEnvironment -> LatexTextContentPart {cons("TextEnvironment")}
+    
+    LatexTextContentPart+ -> LatexTextContent
+
+    "\\part" "{" LatexHeader "}" LatexPartContent -> LatexPart {cons("Part")}
+    "\\chapter" "{" LatexHeader "}" LatexChapterContent -> LatexChapter {cons("Chapter")}
+    "\\section" "{" LatexHeader "}" LatexSectionContent -> LatexSection {cons("Section")}
+    "\\subsection" "{" LatexHeader "}" LatexSubsectionContent -> LatexSubsection {cons("Subsection")}
+    "\\subsubsection" "{" LatexHeader "}" LatexSubsubsectionContent -> LatexSubsubsection {cons("Subsubsection")}
+    "\\paragraph" "{" LatexHeader "}" LatexParagraphContent -> LatexParagraph {cons("Paragraph")}
+    
+    LatexTextContent? LatexPart+ -> LatexDocument
+    LatexPartContent -> LatexDocument
+    
+    LatexTextContent? LatexChapter+ -> LatexPartContent
+    LatexChapterContent -> LatexPartContent
+    
+    LatexTextContent? LatexSection+ -> LatexChapterContent
+    LatexSectionContent -> LatexChapterContent
+    
+    LatexTextContent? LatexSubsection+ -> LatexSectionContent
+    LatexSubsectionContent -> LatexSectionContent
+    
+    LatexTextContent? LatexSubsubsection+ -> LatexSubsectionContent
+    LatexSubsubsectionContent -> LatexSubsectionContent
+    
+    LatexTextContent? LatexParagraph+ -> LatexSubsubsectionContent
+    LatexParagraphContent -> LatexSubsubsectionContent
+    
+    LatexTextContent? -> LatexParagraphContent
+    
+    LatexTextContent? -> LatexHeader {cons("Header")}
+
+  lexical syntax  
+    ~[\\\{\}]+ -> TextContent
+    
+  lexical restrictions
+    TextContent -/- ~[\\\{\}]
+
+  syntax
+    "\\latex" "{" <PlainContent-LEX> "}" -> InTextCommand {cons("LatexEscape")}
+  
+  lexical syntax
+    [a-zA-Z]+ -> LatexTextEnvironmentName
+  
+  syntax
+    <LatexTextEnvironmentName-LEX> -> LatexTextEnvironmentName {cons("LatexTextEnvironmentName")}
+    "\\begin" "{" LatexTextEnvironmentName "}"
+      LatexTextContent
+    "\\end" "{" LatexTextEnvironmentName "}" 
+    ->
+    InTextEnvironment {cons("StandardEnvironment")}
+  
+  
+  desugarings
+    latex-to-plain
+  
+  rules
+    mapconcat-strings(s) = map(s); concat-strings
+  
+    latex-to-plain :
+      LatexDec(mods, n, LatexBody(content))
+      ->
+      PlainDec(PlainDecHead(mods, n, Some("tex")), PlainBody(<pp-latex> content))
+    
+    pp-latex :
+      (a, b) -> <conc-strings> (s1, s2)
+      where <pp-latex> a => s1; 
+            <pp-latex> b => s2
+    
+    pp-latex :
+      l -> s
+      where <?[] + ?[_] + is-list> l;
+            <mapconcat-strings(pp-latex)> l => s
+
+    pp-latex :
+      None -> ""
+    
+    pp-latex :
+      Some(t) -> <pp-latex> t
+    
+    pp-latex :
+      Text(s) -> s
+      
+    pp-latex :
+      TextBlock(t) -> <conc-strings> ("{", s, "}")
+      where
+        <pp-latex> t => s
+    
+    pp-latex :
+      TextCommand(c) -> <pp-latex-command> c
+    
+    pp-latex :
+      TextEnvironment(e) -> <pp-latex-environment> e
+    
+    pp-latex :
+      Header(h) -> <pp-latex> h
+
+    pp-latex-structure(|struct) :
+      (h, p) -> <conc-strings> ("\\", struct, "{", hs, "}", ps)
+      where
+        <pp-latex> h => hs;
+        <pp-latex> p => ps 
+    
+    pp-latex :
+      Part(h, p) -> <pp-latex-structure(|"part")> (h, p)
+    pp-latex :
+      Chapter(h, p) -> <pp-latex-structure(|"chapter")> (h, p)
+    pp-latex :
+      Section(h, p) -> <pp-latex-structure(|"section")> (h, p)
+    pp-latex :
+      Subsection(h, p) -> <pp-latex-structure(|"subsection")> (h, p)
+    pp-latex :
+      Subsubsection(h, p) -> <pp-latex-structure(|"subsubsection")> (h, p)
+    pp-latex :
+      Paragraph(h, p) -> <pp-latex-structure(|"paragraph")> (h, p)
+    
+    pp-latex-command :
+      LatexEscape(code) -> code
+      
+    pp-latex-environment :
+      StandardEnvironment(LatexTextEnvironmentName(lname), content, LatexTextEnvironmentName(rname)) ->
+      <conc-strings> ("\\begin{", lname, "}", 
+                        <pp-latex> content,
+                      "\\end{", rname, "}")
+  
+  rules
+    latex-environment = fail
+    
+    constraint-error :
+      e at LatexTextEnvironmentName(name) -> (<id>, <conc-strings> ("undefined environment: ", name))
+      where <not(latex-environment)> name
+    
+    constraint-error :
+      StandardEnvironment(lname, _, rname) -> [(lname, msg), (rname, msg)]
+      where
+        <not(equal)> (lname, rname); 
+        !"begin and end name must coincide" => msg
+}
+
+public editor services Latex {
+  colorer
+    TextContent : black
+    LatexTextEnvironmentName : black
+    
+    environment _.LatexEscape : black
+    environment LatexHeader : 0 0 255 bold
+  
+  outliner
+    LatexPart
+    LatexChapter
+    LatexSection
+    LatexSubsection
+    LatexSubsubsection
+    LatexParagraph
+  
+  folding
+    LatexPart
+    LatexChapter
+    LatexSection
+    LatexSubsection
+    LatexSubsubsection
+    LatexParagraph
+    
+    InTextEnvironment
+
+  completions
+    completion template : LatexPart = "\part{" <name> "}\n"
+    completion template : LatexChapter = "\chapter{" <name> "}\n"
+    completion template : LatexSection = "\section{" <name> "}\n"
+    completion template : LatexSubsection = "\subsection{" <name> "}\n"
+    completion template : LatexSubsubsection = "\subsubsection{" <name> "}\n"
+    completion template : LatexParagraph = "\paragraph{" <name> "}\n"
+}
\ No newline at end of file

Added: sugarj/trunk/case-studies/text/LatexLib.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/text/LatexLib.sugj	Fri Apr 29 10:54:12 2011	(r22674)
@@ -0,0 +1,58 @@
+package text;
+
+import text.Bibtex;
+
+public sugar LatexLib {
+  syntax
+    "\\emph" "{" LatexTextContent "}" -> InTextCommand {cons("EmphCommand")}
+    "\\cite" "{" <BibtexEntries-CF> "}" -> InTextCommand {cons("CiteCommand")}
+  
+  context-free syntax
+    {BibtexEntryName ","}+ -> BibtexEntries
+    
+  rules
+    latex-environment = ?"abstract"
+  
+  rules
+    pp-latex = fail
+    
+    pp-latex-command :
+      EmphCommand(content)
+      ->
+      <conc-strings> ("\\emph{", <pp-latex> content, "}")
+
+    pp-latex-command :
+      CiteCommand(cites)
+      ->
+      <conc-strings> ("\\cite{", s , "}")
+      where
+        <map(?BibtexEntryName(<id>))> cites => names;
+        <intersperse(|","); concat-strings> names => s
+
+  rules
+    intersperse(|s) : [] -> []
+    intersperse(|s) : [x] -> [x]
+    intersperse(|s) : [x|y] -> [x,s| <intersperse(|s)> y]
+  
+  rules
+    constraint-error :
+      CiteCommand(cites)
+      -> <filter(cite-error)> cites
+    
+    bibtex-entry = fail
+    
+    cite-error :
+      t at BibtexEntryName(n) -> (t, <conc-strings> ("undefined citation: ", n))
+      where
+        <not(bibtex-entry)> n
+}
+
+public editor services LatexLib {
+  colorer
+    environment _.EmphCommand : 0 0 255 italic
+  
+  completions
+    completion template : LatexTextEnvironmentName = "abstract"
+  
+    completion template : LatexTextContentPart = "\emph{" <text> "}"
+}
\ No newline at end of file

Added: sugarj/trunk/case-studies/text/test/Bibtex.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/text/test/Bibtex.sugj	Fri Apr 29 10:54:12 2011	(r22674)
@@ -0,0 +1,672 @@
+package text.test;
+
+import text.Bibtex;
+
+public bibtex Bibtex {
+ 
+	@String{OOPSLA = {Proceedings of Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA)}}
+  @String{POPL = {Proceedings of Symposium on Principles of Programming Languages (POPL)}}
+  @String{GPCE = {Proceedings of Conference on Generative Programming and Component Engineering (GPCE)}}
+  @String{SLE = {Proceedings of Conference on Software Language Engineering (SLE)}}
+  @String{PEPM = {Proceedings of Workshop on Partial Evaluation and Program Manipulation (PEPM)}}
+  @String{PLDI = {Proceedings of Conference on Programming Language Design and Implementation (PLDI)}}
+  @String{ECOOP = {Proceedings of European Conference on Object-Oriented Programming (ECOOP)}}
+  @String{ICALP = {Proceedings of International Colloquium on Automata, Languages and Programming (ICALP)}}
+  @String{RTA = {Proceedings of Conference on Rewriting Techniques and Applications (RTA)}}
+  @String{ICSR = {Proceedings of International Conference on Software Reuse (ICSR)}}
+  @String{CC = {Proceedings of Conference on Compiler Construction (CC)}}
+  @String{SAIG = {Proceedings of Workshop on Semantics, Applications, and Implementation of Program Generation (SAIG)}}
+  @String{ICFP = {Proceedings of International Conference on Functional Programming (ICFP)}}
+  @String{LFP = {Proceedings of Conference on LISP and Functional Programming (LFP)}}
+  @String{ILC = {Proceedings of International Lisp Conference (ILC)}}
+  @String{RSE = {Proceedings of Workshop on Reflection and Software Engineering}}
+    
+  @article{Parnas72,
+   author = {Parnas, D. L.},
+   title = {On the criteria to be used in decomposing systems into modules},
+   journal = {Communication of the ACM},
+   volume = {15},
+   number = {12},
+   year = {1972},
+   pages = {1053--1058},
+   publisher = {ACM},
+   }
+   
+  @inproceedings{BravenboerV04,
+   author = {Bravenboer, Martin and Visser, Eelco},
+   title = {Concrete syntax for objects: domain-specific language embedding and assimilation without restrictions},
+   booktitle = OOPSLA,
+   year = {2004},
+   pages = {365--383},
+   publisher = {ACM}
+   }
+
+  @inproceedings{Cardelli97,
+   author = {Cardelli, Luca},
+   title = {Program fragments, linking, and modularization},
+   booktitle = POPL,
+   year = {1997},
+   pages = {266--277},
+   publisher = {ACM}
+   }
+  
+  
+  @TechReport{Cardelli1994,
+    author =       {Cardelli, Luca and Matthes, Florian and Abadi, Mart\'{i}n},
+    title =        {Extensible Syntax with Lexical Scoping},
+    institution =  {DEC SRC},
+    year =         {1994},
+    number =       {121},
+  }
+  
+  
+  @inproceedings{Porkolab2010,
+   author = {Porkol\'{a}b, Zolt\'{a}n and Sinkovics, \'{A}bel},
+   title = {Domain-specific Language Integration with Compile-time Parser Generator Library},
+   booktitle = GPCE,
+   year = 2010,
+   publisher = {ACM},
+  }
+  
+  @inproceedings{BravenboerV08,
+    author    = {Martin Bravenboer and
+                 Eelco Visser},
+    title     = {Parse Table Composition},
+    booktitle = SLE,
+    year      = {2008},
+    pages     = {74--94},
+    publisher = {Springer}
+  }
+  
+  @inproceedings{BrabrandS02,
+    author    = {Claus Brabrand and
+                 Michael I. Schwartzbach},
+    title     = {Growing languages with metamorphic syntax macros},
+    booktitle = PEPM,
+    year      = {2002},
+    pages     = {31--40},
+    publisher = {ACM},
+  }
+  
+  
+  @TechReport{Maddox89,
+    author =       {William Maddox},
+    title =        {Semantically-Sensitive Macroprocessing},
+    institution =  {University of California, Berkeley},
+    year =         {1989},
+    number =    {UCB/CSD 89/545},
+  }
+  
+  @inproceedings{WeiseC93,
+    author    = {Daniel Weise and
+                 Roger F. Crew},
+    title     = {Programmable Syntax Macros},
+    booktitle = PLDI,
+    year      = {1993},
+    pages     = {156--165},
+    publisher = {ACM},
+  }
+  
+  @Book{Shalit96,
+    author =    {Andrew Shalit},
+    title =        {The {Dylan} Reference Manual},
+    publisher =    {Addison-Wesley-Longman},
+    year =         {1996},
+  }
+
+  @TechReport{scala-overview-tech-report,
+    author =       {Martin Odersky and 
+                    Philippe Altherr and
+                    Vincent Cremet and 
+                    Burak Emir and
+                    Sebastian Maneth and
+                    St\'{e}hane Micheloud and
+                    Nikolay Mihaylov and
+                    Michel Schinz and
+                    Erik Stenman and 
+                    Matthias Zenger},
+    title =        {An Overview of the {Scala} Programming Language},
+    institution =  {EPFL},
+    year =         2004,
+    number =       {IC/2004/64}
+  }
+  
+  
+  @misc{scalaspec,
+    author =       {Martin Odersky},
+    title =        {The {Scala} language specication, Version 2.8},
+    url   = {http://www.scala-lang.org/docu/files/ScalaReference.pdf},
+    howpublished = {Available at \url{http://www.scala-lang.org/docu/files/ScalaReference.pdf}.},
+    year = {2010},
+  }
+  
+  @inproceedings{NystromCM03,
+    author    = {Nathaniel Nystrom and
+                 Michael R. Clarkson and
+                 Andrew C. Myers},
+    title     = {{Polyglot}: An Extensible Compiler Framework for {Java}},
+    booktitle = CC,
+    year      = {2003},
+    pages     = {138--152},
+    publisher = {Springer},
+  }
+  
+  @inproceedings{EkmanH07,
+    author    = {Torbj{\"o}rn Ekman and
+                 G{\"o}rel Hedin},
+    title     = {The {JastAdd} extensible {Java} compiler},
+    booktitle = OOPSLA,
+    year      = {2007},
+    pages     = {1--18},
+    publisher = {ACM},
+  }
+  
+  @inproceedings{Steele94,
+    author    = {Steele, Jr., Guy L.},
+    title     = {Building Interpreters by Composing Monads},
+    booktitle = POPL,
+    year      = {1994},
+    pages     = {472--492},
+    publisher = {ACM},
+  }
+  
+  
+  @inproceedings{LiangHJ95,
+    author    = {Sheng Liang and
+                 Paul Hudak and
+                 Mark P. Jones},
+    title     = {Monad Transformers and Modular Interpreters},
+    booktitle = POPL,
+    year      = {1995},
+    pages     = {333--343},
+    publisher = {ACM},
+  }
+
+
+  
+  
+  @misc{closure-extensions,
+    author    = {Neal Gafter and 
+                 Peter von der Ah\'e},
+    title     = {Closures for Java},
+    url       = {http://javac.info/closures-v06a.html},
+    howpublished = {Available at \url{http://javac.info/closures-v06a.html}. Accessed April 5, 2011.},
+  }
+  
+  @inproceedings{KatsV10,
+    author    = {Lennart C. L. Kats and
+                 Eelco Visser},
+    title     = {The {Spoofax} language workbench: Rules for declarative specification
+                 of languages and {IDEs}},
+    booktitle = OOPSLA,
+    year      = {2010},
+    pages     = {444--463},
+    publisher = {ACM},
+  }
+  
+  @article{HeeringHKR89,
+    author    = {Jan Heering and
+                 P. R. H. Hendriks and
+                 Paul Klint and
+                 J. Rekers},
+    title     = {The syntax definition formalism {SDF} - reference manual},
+    journal   = {SIGPLAN Notices},
+    volume    = {24},
+    number    = {11},
+    year      = {1989},
+    pages     = {43--75},
+    publisher = {ACM},
+  }
+  
+  
+  @inproceedings{Visser01,
+    author    = {Eelco Visser},
+    title     = {Stratego: A Language for Program Transformation Based on
+                 Rewriting Strategies},
+    booktitle = RTA,
+    year      = {2001},
+    pages     = {357--362},
+    publisher = {Springer},
+    series    = {LNCS},
+  }
+  
+  
+  @inproceedings{Hudak98,
+    author    = {Paul Hudak},
+    title     = {Modular domain specific languages and tools},
+    booktitle = ICSR,
+    year      = {1998},
+    pages     = {134--142},
+    publisher = {IEEE},
+  }
+  
+  
+  @inproceedings{RenggliGN10,
+    author    = {Lukas Renggli and
+                 Tudor G\^{\i}rba and
+                 Oscar Nierstrasz},
+    title     = {Embedding Languages without Breaking Tools},
+    booktitle = ECOOP,
+    year      = 2010,
+    pages     = {380--404},
+    publisher = {Springer},
+    series    = {LNCS},
+  }
+  
+  @inproceedings{Visser02,
+    author    = {Eelco Visser},
+    title     = {Meta-programming with Concrete Object Syntax},
+    booktitle = GPCE,
+    year      = {2002},
+    pages     = {299--315},
+    publisher = {Springer},
+    series    = {LNCS},
+  }
+  
+  
+  @article{VanDeursenKT93,
+   author = {Arie van Deursen and
+             Paul Klint and
+             Frank Tip},
+   title = {Origin tracking},
+   journal = {Journal of Symbolic Computation},
+   volume = {15},
+   issue = {5/6},
+   year = {1993},
+   pages = {523--545},
+  } 
+  
+  @inproceedings{BachrachP01,
+    author    = {Jonathan Bachrach and
+                 Keith Playford},
+    title     = {The {Java} Syntactic Extender ({JSE})},
+    booktitle = OOPSLA,
+    year      = {2001},
+    pages     = {31--42},
+    publisher = {ACM},
+  }
+  
+  @InProceedings{ErdwegO10,
+          author =       {Sebastian Erdweg and Klaus Ostermann},
+          title =        {Featherweight {TeX} and Parser Correctness},
+          booktitle =    SLE,
+          year =         {2010},
+          series =       {LNCS},
+          volume =       {6563},
+          publisher =    {Springer},
+        }
+  
+  @inproceedings{VanWykKBS07,
+    author    = {Eric {Van Wyk} and
+                 Lijesh Krishnan and
+                 Derek Bodin and
+                 August Schwerdfeger},
+    title     = {Attribute Grammar-Based Language Extensions for {Java}},
+    booktitle = ECOOP,
+    year      = {2007},
+    pages     = {575--599},
+    publisher = {Springer},
+    series    = {LNCS},
+   }
+  
+  @article{Tratt08,
+    author    = {Laurence Tratt},
+    title     = {Domain Specific Language Implementation via Compile-Time
+                 Meta-Programming},
+    Journal   = {Transactions on Programming Languages and Systems},
+    volume    = {30},
+    number    = {6},
+    publisher = {ACM},
+    year      = {2008},
+    pages     = {1--40},
+  }
+  
+  @article{Krishnamurthi06,
+    author    = {Shriram Krishnamurthi},
+    title     = {Educational Pearl: Automata via Macros},
+    journal   = {Journal of Functional Programming},
+    volume    = {16},
+    number    = {3},
+    year      = {2006},
+    pages     = {253--267},
+    publisher = {Cambridge University Press},
+  }
+  
+  @article{VanWykBGK10,
+    author    = {Eric {Van Wyk} and
+                 Derek Bodin and
+                 Jimin Gao and
+                 Lijesh Krishnan},
+    title     = {Silver: An extensible attribute grammar system},
+    journal   = {Science of Computer Programming},
+    volume    = {75},
+    number    = {1-2},
+    year      = {2010},
+    pages     = {39--54},
+  }
+  
+  
+  @inproceedings{Sheard01,
+    author    = {Tim Sheard},
+    title     = {Accomplishments and Research Challenges in Meta-programming},
+    booktitle = SAIG,
+    year      = {2001},
+    pages     = {2--44},
+    publisher = {Springer},
+  }
+  
+  
+  @article{Mernik05,
+   author = {Mernik, Marjan and Heering, Jan and Sloane, Anthony M.},
+   title = {When and how to develop domain-specific languages},
+   journal = {ACM Computing Surveys},
+   volume = {37},
+   issue = {4},
+   year = {2005},
+   pages = {316--344},
+   numpages = {29},
+   publisher = {ACM},
+  } 
+  
+
+  
+  @article{Leavenworth,
+   author = {Leavenworth, B. M.},
+   title = {Syntax macros and extended translation},
+   journal = {Communications of the ACM},
+   volume = {9},
+   issue = {11},
+   year = {1966},
+   pages = {790--793},
+   publisher = {ACM},
+  } 
+  
+  @inproceedings{Batory:1998:JTI:551789.853531,
+   author = {Batory, D. and Lofaso, B. and Smaragdakis, Y.},
+   title = {{JTS}: Tools for Implementing Domain-Specific Languages},
+   booktitle = ICSR,
+   year = {1998},
+   pages = {143--153},
+   publisher = {IEEE Computer Society},
+  } 
+  
+  
+  @inproceedings{SchwerdfegerW09,
+    author    = {August Schwerdfeger and
+                 Eric {Van Wyk}},
+    title     = {Verifiable composition of deterministic grammars},
+    booktitle = PLDI,
+    year      = {2009},
+    pages     = {199--210},
+    publisher = {ACM},
+  }
+  
+  @misc{Fowler05,
+    author    = {Martin Fowler},
+    title     = {Language Workbenches: The Killer-App for Domain Specific Languages?},
+    year      = {2005},
+    url       = {http://martinfowler.com/articles/languageWorkbench.html},
+    howpublished = {Available at \url{http://martinfowler.com/articles/languageWorkbench.html}},
+  }
+  
+  
+  @INPROCEEDINGS{HO:GPCE10,
+    AUTHOR = {Christian Hofer and Klaus Ostermann},
+    TITLE = {Modular Domain-Specific Language Components in {Scala}},
+    BOOKTITLE = GPCE,
+    YEAR = 2010,
+    PUBLISHER = {ACM}
+  }
+  
+  @INPROCEEDINGS{HORM08,
+    TITLE = {Polymorphic Embedding of {DSLs}},
+    AUTHOR = {Christian Hofer and Klaus Ostermann and Tillmann Rendel and Adriaan Moors},
+    BOOKTITLE = GPCE,
+    YEAR = {2008},
+    URL = {http://www.daimi.au.dk/~ko/papers/gpce50_hofer.pdf},
+    PUBLISHER = {ACM}
+  }
+  
+  @inproceedings{Oliveira:2009:MVC:1615184.1615202,
+   author = {Oliveira, Bruno C.},
+   title = {Modular Visitor Components},
+   booktitle = ECOOP,
+   year = {2009},
+   pages = {269--293},
+   publisher = {Springer},
+  } 
+  
+  
+  @Misc{XHTML,
+    author =    {{W3C HTML Working Group}},
+    title =     {{XHTML} 1.0 The Extensible HyperText Markup Language (Second Edition)},
+    howpublished = {Available at \url{http://www.w3.org/TR/xhtml1}},
+    year =      {2002},
+  }
+  
+  @Misc{XML,
+    author =    {{W3C XML Working Group}},
+    title =     {Extensible Markup Language ({XML}) 1.0 (Fifth Edition)},
+    howpublished = {Available at \url{http://www.w3.org/TR/xml}},
+    year =      {2008},
+  }
+  
+  @Misc{XMLSchema,
+    author =    {{W3C XML Schema Working Group}},
+    title =     {{XML} Schema Part 0: {Primer} Second Edition},
+    howpublished = {Available at \url{http://www.w3.org/TR/xmlschema-0}},
+    year =      {2004},
+  }
+  
+  @Book{MoellerS06,
+    author =    {Anders M\o{}ller and Michael I. Schwartzbach},
+    title =        {An Introduction to XML and Web Technologies},
+    publisher =    {Addison-Wesley},
+    year =         {2006},
+  }
+  
+  @inproceedings{Reng09c,
+    title = {Language Boxes: Bending the Host Language with Modular Language Changes},
+    author = {Lukas Renggli and Marcus Denker and Oscar Nierstrasz},
+    year = {2009},
+    booktitle = SLE,
+    publisher = {Springer},
+  }
+  
+  
+  @article{CKMR:JCTN03,
+   author = {Muffy Calder and Mario Kolberg and Evan H. Magill and Stephan Reiff-Marganiec},
+   title = {Feature Interaction: A Critical Review and Considered Forecast},
+   journal = {Computer Networks},
+   volume = {41},
+   number = {1},
+   year = {2003},
+   pages = {115--141},
+   publisher = {Elsevier},
+   }
+  
+  @InProceedings{Bracha04,
+    author =       {Gilad Bracha},
+    title =        {Pluggable Type Sysmtes},
+    booktitle = {OOPSLA Workshop on Revival of Dynamic  Languages},
+    year =      {2004},
+  }
+  
+  @article{BravenboerDV10,
+    author    = {Martin Bravenboer and
+                 Eelco Dolstra and
+                 Eelco Visser},
+    title     = {Preventing injection attacks with syntax embeddings},
+    journal   = {Science of Computer Programming},
+    volume    = {75},
+    number    = {7},
+    year      = {2010},
+    pages     = {473--495},
+  }
+  
+  @incollection {AxelssonHL08,
+     author = {Axelsson, Roland and Heljanko, Keijo and Lange, Martin},
+     title = {Analyzing Context-Free Grammars Using an Incremental {SAT} Solver},
+     booktitle = ICALP,
+     series = {LNCS},
+     publisher = {Springer},
+     pages = {410--422},
+     year = {2008}
+  }
+  
+  @incollection {Schmitz07,
+     author = {Schmitz, Sylvain},
+     title = {Conservative Ambiguity Detection in Context-Free Grammars},
+     booktitle = ICALP,
+     series = {LNCS},
+     publisher = {Springer},
+     pages = {692--703},
+     year = {2007}
+  }
+  
+  @article{MensTR05,
+    author = {Tom Mens and Gabriele Taentzer and Olga Runge},
+    title = {Detecting Structural Refactoring Conflicts Using Critical Pair Analysis},
+    journal = {Electronic Notes in Theoretical Computer Science},
+    volume = {127},
+    number = {3},
+    pages = {113--128},
+    year = {2005},
+  }
+  
+  
+  @inproceedings{AotoYT09,
+    author    = {Takahito Aoto and
+                 Junichi Yoshida and
+                 Yoshihito Toyama},
+    title     = {Proving Confluence of Term Rewriting Systems Automatically},
+    booktitle = RTA,
+    year      = {2009},
+    pages     = {93--102},
+    publisher = {Springer},
+    series    = {LNCS},
+  }
+  
+  @inproceedings{ClingerR91,
+   author = {Clinger, William and Rees, Jonathan},
+   title = {Macros that work},
+   booktitle = POPL,
+   year = {1991},
+   pages = {155--162},
+   publisher = {ACM},
+  } 
+  
+  @inproceedings{Flatt02,
+   author = {Flatt, Matthew},
+   title = {Composable and compilable macros: you want it when?},
+   booktitle = ICFP,
+   year = {2002},
+   pages = {72--83},
+   publisher = {ACM},
+  } 
+  
+  @inproceedings{KohlbeckerFFD86,
+   author = {Kohlbecker, Eugene and Friedman, Daniel P. and Felleisen, Matthias and Duba, Bruce},
+   title = {Hygienic macro expansion},
+   booktitle = LFP,
+   year = {1986},
+   pages = {151--161},
+   publisher = {ACM},
+  } 
+  
+  
+  
+  @inproceedings{Kiselyov02,
+   author = {Kiselyov, Oleg},
+   title = {Macros That Compose: Systematic Macro Programming},
+   booktitle = GPCE,
+   year = {2002},
+   pages = {202--217},
+   publisher = {Springer},
+   volume = {2487},
+   series = {LNCS},
+  } 
+  
+  
+  @inproceedings{TobinHochstadtSCFF11,
+    title = {Languages as Libraries},
+    author = {Sam Tobin-Hochstadt and Vincent St-Amour and Ryan Culpepper and Matthew Flatt and Matthias Felleisen},
+    booktitle = PLDI,
+    year = {2011},
+    publisher = {ACM},
+    note = {to appear},
+  }
+  
+  
+  @inproceedings{RepenningI07,
+   author = {Repenning, Alexander and Ioannidou, Andri},
+   title = {{X}-expressions in {XMLisp}: {S}-expressions and extensible markup language unite},
+   booktitle = ILC,
+   year = {2007},
+   pages = {1--11},
+   publisher = {ACM},
+  } 
+  
+  
+  @ARTICLE{Kastens92modularityand,
+      author = {U. Kastens and W. M. Waite},
+      title = {Modularity and Reusability in Attribute Grammars},
+      journal = {Acta Informatica},
+      year = {1992},
+      volume = {31},
+      pages = {601--627}
+  }
+  
+  @inproceedings{NystromQM06,
+   author = {Nystrom, Nathaniel and Qi, Xin and Myers, Andrew C.},
+   title = {J\&: Nested intersection for scalable software composition},
+   booktitle = OOPSLA,
+   year = {2006},
+   pages = {21--36},
+   publisher = {ACM},
+  }
+  
+  @incollection {TatsuboriCKI00,
+     author = {Tatsubori, Michiaki and Chiba, Shigeru and Killijian, Marc-Olivier and Itano, Kozo},
+     title = {OpenJava: A Class-Based Macro System for {Java}},
+     booktitle = RSE,
+     series = {LNCS},
+     publisher = {Springer},
+     pages = {117--133},
+     volume = {1826},
+     year = {2000}
+  }
+  
+  @mastersthesis{Seaton07,
+    Author = {Chris Seaton},
+    School = {University of Bristol},
+    Title = {A Programming Language Where the Syntax and Semantics Are Mutable at Runtime},
+    Year = {2007}}
+  
+  
+  @misc{Dmitriev,
+    author =       {Sergey Dmitriev},
+    title =        {Language oriented programming: The next programming paradigm},
+    url   = {http://www.jetbrains.com/mps/docs/Language_Oriented_Programming.pdf},
+    howpublished = {Available at \url{http://www.jetbrains.com/mps/docs/Language_Oriented_Programming.pdf}.},
+    year = {2004},
+  }
+  
+  
+  @Inproceedings{Simonyi95,
+  author = {Charles Simonyi},
+  title  = {The Death of Computer Languages, the Birth of Intentional Programming},
+  year = 1995,
+  booktitle = {NATO Science Committee Conference}
+  }
+  
+  @ARTICLE{Ward95languageoriented,
+      author = {M. P. Ward},
+      title = {Language-Oriented Programming},
+      journal = {Software -- Concepts and Tools},
+      year = {1995},
+      volume = {15},
+      pages = {147--161}
+  }
+
+}

Added: sugarj/trunk/case-studies/text/test/LatexTest.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/text/test/LatexTest.sugj	Fri Apr 29 10:54:12 2011	(r22674)
@@ -0,0 +1,27 @@
+package text.test;
+
+import text.Latex;  
+import text.LatexLib;
+
+import text.test.Bibtex;
+
+public latex LatexTest {
+\part{a} text1
+\part{b} text2
+\section{b.1} text3
+\part{c} \emph{text4}
+\section{c.1}
+\subsection{c.1.1} text5
+ 
+ \latex{$\pi * 4$}
+ 
+ \cite{Parnas72,BravenboerV08} 
+   
+ \begin{abstract}
+   This is an abstract
+   
+ \end{abstract}  
+
+ \begin{test}
+ \end{test}
+} 
\ No newline at end of file

From v.vergu at gmail.com  Fri Apr 29 13:44:32 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Fri, 29 Apr 2011 11:44:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22675 - in
	spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans:
	. signatures
Message-ID: <20110429114432.C09572B8066@mx2.tudelft.nl>

Author: VladVergu
Date: Fri Apr 29 11:44:32 2011
New Revision: 22675
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22675&sc=1

Log:
- signature sort name checking
- partial signature sort analysis. sort variable constraints in future commit.

Added:
   spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/
   spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/check.str
   spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/constructors.str
   spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/map.str
   spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/pp.str
   spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/project.str
Modified:
   spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/   (props changed)
   spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str

Modified: spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/analysis.str
==============================================================================
--- spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/analysis.str	Fri Apr 29 10:54:12 2011	(r22674)
+++ spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/analysis.str	Fri Apr 29 11:44:32 2011	(r22675)
@@ -6,7 +6,9 @@
   desugar
   lib/editor-common.generated
   sourcedir
-
+	signatures/project
+	signatures/map
+	
 strategies
 
   analyze-ast:
@@ -63,6 +65,10 @@
 
   signature-of:
     OpDecl(x, t) -> (<remove-quote> x, <dec> <occurrences(?ConstType(_))> t)
+    
+  
+  	
+  	
 
   signature-of:
     ExtOpDecl(x, t) -> (<remove-quote> x, <dec> <occurrences(?ConstType(_))> t)
@@ -158,7 +164,7 @@
       redeclare-definition
 
   declare-globals:
-    OpDecl(x, t) -> OpDecl(x', t)
+    w at OpDecl(x, t) -> OpDecl(x', t)
     with
       cookie := <redeclare-definition>;
       x'     := x{cookie}
@@ -166,10 +172,22 @@
       // Declare congruence
       (x'', n) := <signature-of>;
       sig'     := (x'', n, 0);
+      type-sig := <poly-sort-signature-of> w;
+      <store-sort-decl> type-sig;
       rules(
         DeclareCookie: sig' -> cookie
       )
-
+  
+  declare-globals:
+  	w at OpDeclInj(_) -> w
+  	with
+  		type-sig :=  <poly-sort-signature-of> w;
+  		sort := <signature-sort> type-sig;
+  		<store-sort-decl> type-sig;
+			rules(
+				SortDeclare: sort -> type-sig
+			)
+			
   declare-globals:
     ExtOpDecl(x, t) -> <id>
     with
@@ -581,16 +599,8 @@
       t* := <numbered-arguments> (n, "s")
 
   signature-to-proposal:
-    (x, 0, m) -> [x, "(|", t*, ")"]
-    where
-      <gt> (m, 0)
-    with
-      t* := <numbered-arguments> (m, "t")
-
-  signature-to-proposal:
     (x, n, m) -> [x, "(", s*, "|", t*, ")"]
     where
-      <gt> (n, 0);
       <gt> (m, 0)
     with
       s* := <numbered-arguments> (n, "s");
@@ -598,6 +608,7 @@
 
   signature-to-proposal:
     (x, [DR_DUMMY()], [DR_DUMMY()]) -> x // strategy param (wildcard arity)
+    
 
 rules // Constraints
 

Added: spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/check.str	Fri Apr 29 11:44:32 2011	(r22675)
@@ -0,0 +1,53 @@
+module signatures/check
+
+imports
+	libstrc
+	signatures/constructors
+	signatures/map
+	signatures/project
+	signatures/pp
+
+rules // sort constraints
+	// not declared SortNoArgs
+	global-constraint-error:
+		s at SortNoArgs(_) -> (s, $[The sort [<pp-sort-signature-top> s'] is not declared])
+		where
+			sort-signature-of => s';
+			get-sort-decl;
+			?[]
+	
+	// not declared Sort(s,t)
+	global-constraint-error:
+		s at Sort(_,_) -> (s,$[The sort [<pp-sort-signature-top> s'] is not declared])
+		where
+			sort-signature-of => s';
+			get-sort-decl;
+			?[]
+
+	// unknown generic sorts on RHS of signature
+	global-constraint-error:
+		d at OpDecl(_,_) -> msgs 
+		where
+			poly-sort-signature-of => sig at ConstSig(_,_,sort,_);
+			srtVars := <collect-all(?Var(_),union)> sort;
+			<filter(\
+				Var(v) -> v
+				where not( <is-freevar(|v)> sig )
+			\)> srtVars;
+			map(\
+				v -> (v, $[Unknown sort variable [v]. It should be declared in left-hand-side])
+			\) => msgs
+	
+	// incompatible sort application
+	global-constraint-error:
+		s at Sort(_,_) -> (s,$[The sort [<pp-sort-signature-top> s'] is not compatible with any of its declarations:
+			 [<pp-list(pp-sort-signature-top|", ")> decl]])
+		where
+			sort-signature-of => s';
+			get-sort-decl;
+			map(signature-sort) => decl;
+			<sort-apply> (s',decl);
+			?[]
+
+
+

Added: spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/constructors.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/constructors.str	Fri Apr 29 11:44:32 2011	(r22675)
@@ -0,0 +1,167 @@
+module signatures/constructors
+
+imports 
+	signatures/project
+/*
+* We might need the following annotations preceding a constructor declaration:
+*	@suppress -> don't display errors
+* @declare -> use the constructor as declaration. all sorts inside that have not been declared will be declared
+*/
+
+signature
+	constructors
+		/* built-in primitive Sorts + Types */
+		// Sort: Sort
+		Term: Sort
+		ATerm: Sort
+		Int: Sort
+		Double: Sort
+		String: Sort
+		List: a -> Sort
+		List: Sort
+		Option: a -> Sort
+		Option: Sort
+		// Tuple??
+			
+signature
+	constructors // helpers
+		Var: String -> Var 
+		
+signature
+	constructors
+		/* signature type signatures */
+		
+		/*
+		* Signature constructor for signature signatures
+		* args:
+		* 1. String -> the name of the constructor
+		* 2. List(Sort) -> the sorts of the constructor arguments
+		* 3. Sort -> the output sort of the constructor
+		*/
+		/*
+		* Representation for a parametric polymorphic signature
+		* arguments:
+			1. constructor name
+			2. argument sorts
+			3. output sort
+			4. for All variables list
+		*/
+		ConstSig: String * List(Sort) * Sort * List(Var) -> ConstSig
+
+rules //constructor signatures
+		/* Steps
+		* 1. pass through all the signatures:
+				a. store the constructor signatures -> as constructor declaration
+				b. store the constructor signatures -> as sort declaration
+				- we have to be able to look-up possible constructors for the given Sort!!! 
+					because we use constructors in rules, but sorts in declarations
+			2. pass through all the signatures:
+				a. check that all the sorts used in the signatures are declared
+		*/
+		
+	
+rules // sort applications
+	
+	/*
+	* rules to implement application of sort signatures
+	* sort-apply: (sig, applyTo) -> resulting sort signature OR fail
+	*/
+	
+	
+	// dispatch for lists
+	sort-apply:
+		(s,l) -> <filter(\ l' -> <sort-apply> (s,l') \)> l
+		where
+			<is-list> l
+	
+	/* rules for primitive applications */
+	
+	sort-apply:
+		(s,Term()) -> s
+	
+	sort-apply:
+		(s,ATerm()) -> s
+	
+	sort-apply:
+		(Int(), Int()) -> Int()
+	
+	sort-apply:
+		(Double(),Double()) -> Double()
+	
+	sort-apply:
+		(Int(), Double()) -> Double()
+	
+	sort-apply:
+		(String(), String()) -> String()
+	
+	// the sort application for collections propagates inside the sorts collected
+	sort-apply:
+		(List(s),List(k)) -> List(<sort-apply> (s,k))
+	
+	// empty lists collect the Nothing sort (which doesn't exist). On application to a List of sort a, the result is a list of sort a
+	sort-apply:
+		(List(),List()) -> List()
+	
+	sort-apply:
+		(List(),List(_)) -> List()
+	
+	// TODO: is this true always?
+	sort-apply:
+		(List(_),List()) -> <fail>
+		
+	sort-apply:
+		(Option(s),Option(k)) -> Option(<sort-apply> (s,k))
+	
+	sort-apply:
+		(Option(),Option()) -> Option()
+	
+	sort-apply:
+		(Option(),Option(k)) -> Option()
+	
+	// TODO: is this true always?
+	sort-apply:
+		(Option(_),Option()) -> <fail>
+	
+	/* rules for sort variables */
+	
+	// FIXME: this should result in a condition placed on the sort of the actual variable
+	/**
+	* Sort application to a sort variable
+	* A variable has conditions enforced on it
+	* If the application is possible, the variable should be refined
+	*/
+	sort-apply:
+		(s,Var(_)) -> s 
+	
+	// FIXME: we should look-up what the sort variable conditions are and check whether we can do this without violating them
+	sort-apply:
+		(Var(_),s) -> s
+		where not(<is-list> s)
+	
+	/* rules for user-declared sorts */
+	
+	sort-apply:
+		(a,a) -> a
+		where not(<is-list> a)
+		
+	sort-apply:
+		(s,t) -> c#(<zip(sort-apply)> (p,p'))
+		where not(
+			<is-prim> s +
+			<is-prim> t +
+			<is-list> t
+		)
+		where
+			!s;
+			?c#(p);
+			!t;
+			?c#(p')
+			
+
+		
+	
+	
+		
+	
+	
+	

Added: spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/map.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/map.str	Fri Apr 29 11:44:32 2011	(r22675)
@@ -0,0 +1,130 @@
+module signatures/map
+
+imports
+	signatures/constructors
+	signatures/project
+
+rules // store & retrieve sorts
+			
+		store-sort-decl:
+			sig -> cookie
+			where
+				signature-sort;
+				not(is-prim)
+			with
+				signature-sort => sort;
+				get-sort-cookie => cookie;
+				not(
+					<elem> (sig,<bagof-DeclaredSort> cookie)
+				) <
+					// where(!sig; debug(!"STORE  "));
+					rules (
+						DeclaredSort:+ cookie -> sig
+					)
+					+
+					id
+		
+		get-sort-decl:
+			sort -> decls
+			// where debug(!"GET ")
+			where
+				?_{cookie};
+				decls := <bagof-DeclaredSort> cookie
+
+		// already has a cookie
+		get-sort-cookie:
+			sort -> cookie
+			where
+				?_{cookie} +
+				?s#(l at _);
+				all-keys-SortCookie;
+				filter(\
+				s'#(l'@_) -> <and(<eq> (s',s), <eq> (<length> l',<length> l))>
+				\);
+				mapconcat(bagof-SortCookie);
+				?[cookie|_]
+
+		// no cookie yet		
+		get-sort-cookie:
+			sort -> cookie
+			where not(is-prim)
+			where not(
+				?_{_} +
+				?s#(l at _);
+				all-keys-SortCookie;
+				filter(\
+				s'#(l'@_) -> <and(<eq> (s',s), <eq> (<length> l',<length> l))>
+				\);
+				?[_|_]
+			)
+			with
+				cookie := <newterm>;
+				rules (
+					SortCookie:+ sort -> cookie
+				)
+				
+rules // transparent auto-declarations for the primitive sorts
+	/* when a primitive sort is used we automatically declare it */
+	// get-sort-decl: List(_) -> <declare-me;get-declaration>
+	
+	/* there are two types:
+		1. sort usage:
+			- is cookie-stored during signature-of (probably not the best time)
+		2. sort declaration:
+			- is stored after signature-of from declare-globals
+
+		For non-primitives:
+			1. stores (if not already stored) a cookie for that Sort and returns it [get-sort-cookie]
+			2. if it is not already declared stores the constructor declaration as a sort declaration
+				and returns the cookie [store-sort-decl]
+			
+		For primitives:
+			1. allocate a cookie (if not already allocated) for that primitive and return it. also store the built-in declaration
+				for that sort so that we have it for later [get-sort-cookie].
+			2. basically a dummy. all primitives should have been declared already (including parameterized ones hopefully). Just
+				returns the cookie
+					
+	*/
+		
+		store-sort-decl:
+			sig -> cookie
+			where
+				signature-sort;
+				is-prim;
+				get-sort-cookie => cookie
+		
+		//normal sort
+		get-sort-cookie:
+			sort -> cookie
+			where
+				is-prim;
+				?srt#([])
+			where not(
+				?_{_} + SortCookie
+			)
+			with
+				cookie := <newterm>;
+				sig := ConstSig(srt,[],srt#([]){cookie},[]);
+				// debug(!"STOREP ");
+				rules (
+					SortCookie:+ sort -> cookie
+					DeclaredSort:+ cookie -> sig
+				)
+		
+		//parameterized sort
+		get-sort-cookie:
+			sort -> cookie
+			where
+				is-prim;
+				?srt#([_|_])
+			where not(
+				?_{_} + SortCookie
+			)
+			with
+				cookie := <newterm>;
+				sig := ConstSig(srt,[Var("a")],srt#([Var("a")]),["a"]);
+				// debug(!"STOREP ");
+				rules (
+					SortCookie:+ sort -> cookie
+					DeclaredSort:+ cookie -> sig
+				)
\ No newline at end of file

Added: spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/pp.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/pp.str	Fri Apr 29 11:44:32 2011	(r22675)
@@ -0,0 +1,48 @@
+module signatures/pp
+
+imports
+	signatures/constructors
+
+
+rules // pretty print for constructor signatures
+
+	pp-sort-signature-top =
+		pp-sort-signature
+	
+	pp-sort-signature:
+		ConstSig(name,args,srt,[]) -> $[[name] : [<pp-list(pp-sort-signature-top|" * ")> args] => [<pp-sort-signature-top> srt]]
+	
+	pp-sort-signature:
+		ConstSig(name,args,srt,fvars@[_|_]) -> $[[name]([<pp-list(|", ")> fvars]) : [<pp-list(pp-sort-signature-top|" * ")> args] => [<pp-sort-signature-top> srt]]
+	
+	pp-sort-signature:
+		x -> x
+		where is-string
+		
+	pp-sort-signature:
+		Var(a) -> <pp-sort-signature-top> a
+	
+	pp-sort-signature:
+		c#([]) -> $[[c]]
+		where
+			not(
+				is-string + ?Var(_) + ?ConstSig(_,_,_,_)
+			)
+	
+	pp-sort-signature:
+		e at c#(l) -> $[[c]([<pp-list(pp-sort-signature-top|", ")> l])]
+		where
+			not(
+				is-string + ?Var(_) + ?ConstSig(_,_,_,_)
+			)
+	
+	pp-list(|sep) = pp-list(id|sep)
+	
+	pp-list(s|sep):
+		[] -> ""
+	
+	pp-list(s|sep):
+		[x] -> <s> x
+	
+	pp-list(s|sep):
+		[x|xs] -> $[[<s> x][sep][<pp-list(s|sep)> xs]]

Added: spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/project.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/signatures/project.str	Fri Apr 29 11:44:32 2011	(r22675)
@@ -0,0 +1,92 @@
+module constructors/project
+
+imports
+	signatures/constructors
+	signatures/map
+	libstrc
+	
+rules // accessors for Signatures
+	
+	signature-constructor:
+		ConstSig(c,_,_,_) -> c
+	
+	signature-arguments:
+		ConstSig(_,a,_,_) -> a
+
+	signature-sort:
+		ConstSig(_,_,c,_) -> c
+	
+	signature-freevars:
+		ConstSig(_,_,_,v) -> v
+	
+	is-freevar(|var-name):
+		sig at ConstSig(_,_,_,freevars) -> <elem> (var-name,freevars)
+
+rules // primitive test helper rules
+		
+		is-prim:
+			c -> c
+			where
+				?Int() + ?Double() + ?String() + ?List(_) + ?List() + ?Option(_) + ?Option() + ?Term() +?ATerm()
+
+rules // Stage 1
+	
+	poly-sort-signature-of =
+		sort-signature-of;
+		to-poly-signature
+
+	// normal signature with name and function	
+	sort-signature-of: 
+		OpDecl(name, FunType(args,srt)) -> ConstSig(name,args',srt',[])
+		with
+			args' := <map(sort-signature-of)> args;
+			srt' := <sort-signature-of> srt
+	
+	// signature with no arguments	
+	sort-signature-of:
+		OpDecl(name, ConstType(srt)) -> ConstSig(name,[],srt',[])
+		with
+			srt' := <sort-signature-of> srt			
+			
+	
+	// signature with no name
+	sort-signature-of:
+		OpDeclInj(FunType(args,srt)) -> ConstSig("",args',srt',[])
+		with
+			args' := <map(sort-signature-of)> args;
+			srt' := <sort-signature-of> srt
+	
+	sort-signature-of:
+		OpDeclInj(ConstType(srt)) -> ConstSig("",[],srt',[])
+		with
+			srt' := <sort-signature-of> srt
+	
+	sort-signature-of:
+		ConstType(s) -> <sort-signature-of> s
+	
+	sort-signature-of:
+		SortVar(v) -> Var(v)
+		where
+			<is-string> v
+	
+	sort-signature-of:
+		SortNoArgs(s) -> sort
+		with
+			srt := s#([]);
+			sort := srt{<get-sort-cookie> srt}
+	
+	sort-signature-of:
+		Sort(s,a) -> sort
+		with
+			srt := s#(<sort-signature-of> a);
+			sort := srt{<get-sort-cookie> srt}
+		
+	sort-signature-of:
+		t -> <map(sort-signature-of)> t
+		where is-list
+	
+	// get all the variables from the LHS of constructor
+	to-poly-signature:
+		ConstSig(n,args,srt,_) -> ConstSig(n,args,srt,freevars)
+		with
+			freevars := <collect-all(\ Var(a) -> a \,union)> args
\ No newline at end of file

Modified: spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
==============================================================================
--- spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	Fri Apr 29 10:54:12 2011	(r22674)
+++ spoofax-imp/branches/stratego-editor/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	Fri Apr 29 11:44:32 2011	(r22675)
@@ -9,19 +9,26 @@
   desugar
   lib/editor-common.generated
   rename
+  
+imports
+  signatures/pp
+  signatures/project
+  signatures/map
+  signatures/check
 
 strategies
 
 rules
 
   editor-analyze:
-    (ast, path, project-path) -> (/*ast',*/ errors, warnings, [])
+    (ast, path, project-path) -> (ast', errors, warnings, [])
     with
       // Ensure all dynamic rules are properly scoped
       try(dr-scope-all-end);
       dr-scope-all-start
     with
       ast' := <analyze-ast> (ast, path, project-path);
+      
       if NoAnalysis then
         errors   := <collect-all(constraint-error, conc)> ast';
         warnings := <collect-all(constraint-warning, conc)> ast'
@@ -64,12 +71,22 @@
     where
       target := <parse-stratego-file> <resolve-import-decl> x
 
+  // hover info for constructors
   editor-hover:
     (node, position, ast, path, project-path) -> text
     where
-      <signature-of> node; // only show definitions
-      text := <pp-stratego-string> node
-
+			<signature-of> node; // only show definitions
+			text := <pp-stratego-string> node
+			// sig := <poly-sort-signature-of> node;
+			// text := <pp-sort-signature-top> sig
+ 	
+ 	editor-hover:
+    (node, position, ast, path, project-path) -> text
+    where
+    	<sort-signature-of> node;
+    	get-sort-decl;
+    	pp-list(pp-sort-signature-top|"<br/>") => text
+  
   editor-hover:
     (node at ToMetaExpr(_), position, ast, path, project-path) -> text
     where
@@ -87,3 +104,16 @@
     with
       filename := <guarantee-extension(|"aterm")> path;
       result   := <basic-desugar-top> selected
+  
+  generate-analysed-aterm:
+  	(selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"a.aterm")> path;
+      result   := <DecoratedAst> selected
+  
+  // FIXME: for debugging
+  generate-sort-signatures:
+  	(selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"sig.aterm")> path;
+      result   := <all-keys-DeclaredSort; mapconcat(bagof-DeclaredSort)>

From L.C.L.Kats at tudelft.nl  Fri Apr 29 14:13:36 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Apr 2011 12:13:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22676 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.spoofax/META-INF
	org.strategoxt.imp.feature org.strategoxt.imp.metatooling/META-INF
Message-ID: <20110429121336.817ED2B8065@mx2.tudelft.nl>

Author: LennartKats
Date: Fri Apr 29 12:13:36 2011
New Revision: 22676
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22676&sc=1

Log:
Include SpoofaxLang in distribution and on classpath

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF	Fri Apr 29 11:44:32 2011	(r22675)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF	Fri Apr 29 12:13:36 2011	(r22676)
@@ -5,6 +5,7 @@
 Bundle-Version: 1.0.0
 Bundle-Activator: org.strategoxt.imp.editors.spoofax.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
+Bundle-ClassPath: include/SpoofaxLang.jar
 Require-Bundle: org.eclipse.core.runtime,
   org.eclipse.core.resources,
   org.eclipse.imp.runtime,

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Fri Apr 29 11:44:32 2011	(r22675)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Fri Apr 29 12:13:36 2011	(r22676)
@@ -317,4 +317,11 @@
          install-size="0"
          version="0.1.0.qualifier"/>
 
+   <plugin
+         id="org.spoofax.interpreter.library.language"
+         download-size="0"
+         install-size="0"
+         version="0.0.0"
+         unpack="false"/>
+
 </feature>

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	Fri Apr 29 11:44:32 2011	(r22675)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	Fri Apr 29 12:13:36 2011	(r22676)
@@ -26,6 +26,7 @@
  org.strategoxt.imp.editors.sdf,
  org.strategoxt.imp.editors.pp,
  org.strategoxt.imp.editors.stratego,
+ org.strategoxt.imp.editors.spoofax,
  org.strategoxt.imp.editors.aterm,
  org.eclipse.ant.core,
  org.strategoxt.imp.nativebundle,

From L.C.L.Kats at tudelft.nl  Fri Apr 29 14:14:46 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Apr 2011 12:14:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22677 - in
	spoofax-imp/trunk/experimental/NamingExperiment: syntax trans
Message-ID: <20110429121446.3E3572B800C@mx2.tudelft.nl>

Author: LennartKats
Date: Fri Apr 29 12:14:46 2011
New Revision: 22677
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22677&sc=1

Log:
cleanup

Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/syntax/SPX.spx
   spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str

Modified: spoofax-imp/trunk/experimental/NamingExperiment/syntax/SPX.spx
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/syntax/SPX.spx	Fri Apr 29 12:13:36 2011	(r22676)
+++ spoofax-imp/trunk/experimental/NamingExperiment/syntax/SPX.spx	Fri Apr 29 12:14:46 2011	(r22677)
@@ -11,10 +11,6 @@
     "entity" Entity@=ID "{" Member* "}" -> Definition {"Entity", scope(Property, Function)}
     "import" Module at STRING              -> Definition {"Import"}
     
-    X@=Test? -> Test
-    
-    X@=a:Test -> Test
-    
     Property@=ID ":" Entity at ID          -> Member {"Property"}
 
 
@@ -89,4 +85,4 @@
     
     unordered unique scope Function:
       Module(_)
-*/
\ No newline at end of file
+*/

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Fri Apr 29 12:13:36 2011	(r22676)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Fri Apr 29 12:14:46 2011	(r22677)
@@ -78,10 +78,8 @@
     where
       editor-init;
       (ast', _, _, _) := <analyze-top> (ast, path, project-path);
-      x              := <collect-one(?COMPLETION(_); debug)> ast';
-      debug(!"ok");
+      x              := <collect-one(?COMPLETION(_))> ast';
       proposals      := <index-lookup-all-levels> x;
-      debug(!"almost");
       proposals'     := <map(def-to-name)> proposals
 
   def-to-name:

From L.C.L.Kats at tudelft.nl  Fri Apr 29 14:19:54 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Apr 2011 12:19:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22678 - in
	spoofax-contrib/Lawoco: . .externalToolBuilders META-INF
	editor editor/java editor/java/Lawoco
	editor/java/Lawoco/strategies lib syntax test trans
Message-ID: <20110429121954.09E2A7F802E@mx1.tudelft.nl>

Author: LennartKats
Date: Fri Apr 29 12:19:53 2011
New Revision: 22678
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22678&sc=1

Log:
Added empty Lawoco project

Added:
   spoofax-contrib/Lawoco/
   spoofax-contrib/Lawoco/.classpath
   spoofax-contrib/Lawoco/.externalToolBuilders/
   spoofax-contrib/Lawoco/.externalToolBuilders/Lawoco build.main.xml.launch
   spoofax-contrib/Lawoco/.project
   spoofax-contrib/Lawoco/META-INF/
   spoofax-contrib/Lawoco/META-INF/MANIFEST.MF
   spoofax-contrib/Lawoco/build.generated.xml
   spoofax-contrib/Lawoco/build.main.xml
   spoofax-contrib/Lawoco/build.properties
   spoofax-contrib/Lawoco/editor/
   spoofax-contrib/Lawoco/editor/Lawoco-Builders.esv
   spoofax-contrib/Lawoco/editor/Lawoco-Colorer.esv
   spoofax-contrib/Lawoco/editor/Lawoco-Completions.esv
   spoofax-contrib/Lawoco/editor/Lawoco-Folding.esv
   spoofax-contrib/Lawoco/editor/Lawoco-Outliner.esv
   spoofax-contrib/Lawoco/editor/Lawoco-References.esv
   spoofax-contrib/Lawoco/editor/Lawoco-Syntax.esv
   spoofax-contrib/Lawoco/editor/Lawoco.main.esv
   spoofax-contrib/Lawoco/editor/java/
   spoofax-contrib/Lawoco/editor/java/Lawoco/
   spoofax-contrib/Lawoco/editor/java/Lawoco/Activator.java
   spoofax-contrib/Lawoco/editor/java/Lawoco/LawocoParseController.java
   spoofax-contrib/Lawoco/editor/java/Lawoco/LawocoParseControllerGenerated.java
   spoofax-contrib/Lawoco/editor/java/Lawoco/LawocoValidator.java
   spoofax-contrib/Lawoco/editor/java/Lawoco/strategies/
   spoofax-contrib/Lawoco/editor/java/Lawoco/strategies/InteropRegisterer.java
   spoofax-contrib/Lawoco/editor/java/Lawoco/strategies/Main.java
   spoofax-contrib/Lawoco/editor/java/Lawoco/strategies/java_strategy_0_0.java
   spoofax-contrib/Lawoco/lib/
   spoofax-contrib/Lawoco/lib/editor-common.generated.str
   spoofax-contrib/Lawoco/lib/refactor-common.generated.str
   spoofax-contrib/Lawoco/plugin.xml
   spoofax-contrib/Lawoco/syntax/
   spoofax-contrib/Lawoco/syntax/Common.sdf
   spoofax-contrib/Lawoco/syntax/Lawoco.generated.pp
   spoofax-contrib/Lawoco/syntax/Lawoco.pp
   spoofax-contrib/Lawoco/syntax/Lawoco.sdf
   spoofax-contrib/Lawoco/test/
   spoofax-contrib/Lawoco/test/example.lawo
   spoofax-contrib/Lawoco/trans/
   spoofax-contrib/Lawoco/trans/check.str
   spoofax-contrib/Lawoco/trans/generate.str
   spoofax-contrib/Lawoco/trans/lawoco.str
   spoofax-contrib/Lawoco/trans/refactor.str

Added: spoofax-contrib/Lawoco/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/.classpath	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-contrib/Lawoco/.externalToolBuilders/Lawoco build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/.externalToolBuilders/Lawoco build.main.xml.launch	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Lawoco/build.main.xml}"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Lawoco}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-contrib/Lawoco/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/.project	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>Lawoco</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/Lawoco build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: spoofax-contrib/Lawoco/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/META-INF/MANIFEST.MF	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,21 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: Lawoco Plug-in
+Bundle-SymbolicName: Lawoco; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: Lawoco.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: Lawoco

Added: spoofax-contrib/Lawoco/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/build.generated.xml	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,597 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${build}/Lawoco/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la Lawoco.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg line="${aster-input}"/>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+		<!-- 
+			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+			Only used by stratego.jvm.helper.debug 
+		-->
+		<condition property="transformer-output" value="" else="--output-rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+		
+		<!-- 
+			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+			Only used by stratego.jvm.helper.debug
+		-->
+		<condition property="strj.input.file.type" value="str" else="rtree">
+			<isset property="debug.the.debug.transformer"/>
+		</condition>
+        
+        <!-- value determines which target will be executed.
+        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
+        	else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+		
+		<!-- will save the stratego files with debug info in this folder -->
+		<property name="trans-debug" location="trans-debug"/>
+		
+		<!-- this helper target determines what target to call, based on debug.build.enabled -->
+		<target name="stratego.jar.helper">
+			<antcall target="${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar unless debug.build.enabled property is set --> 
+		<target name="call.stratego.jar" depends="stratego.jar">
+			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
+		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+		</target>
+		
+		<!-- copy stratego runtime jars to utils folder -->
+		<target name="utils-files-debug" depends="utils-files">
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+		</target>
+		
+	    <!-- Stratego to Java compiler with debugging capabilities -->
+	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+	        <dependset>
+	            <srcfileset dir="${basedir}">
+	                <include name="**/*.str"/>
+	                <include name="**/*.astr"/>
+	                <exclude name="lib/editor-common.generated.str"/>
+	            </srcfileset>
+	            <targetfileset file="${src-gen}/trans/Main.java"/>
+	        </dependset>
+	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+	        <antcall target="copy-jar"/>
+	        <antcall target="stratego.jar.deletehelper"/>
+	    	<!-- compile stratego to java -->
+	        <antcall target="stratego.jvm.helper.debug">
+	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+	        </antcall>
+	    	<!-- compile java to class -->
+	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+	    		<!-- attribute in javac: srcdir="${src-gen}" -->
+	    		<src path="${src-gen}"/>
+	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
+	        	<classpath>
+	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
+	        	</classpath>
+	        	<!-- attribute in javac: includes="trans/**"  -->
+	        	<include name="trans/**"/>
+	    	</javac>
+	        <!-- copy imported terms -->
+	        <copy todir="${build}/trans">
+	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+	        </copy>
+	    	<!-- create a jar from the class files -->
+	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
+	    </target>
+		
+		<!-- instrument the stratego program and compile it to java -->
+	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+	    	<echo message="generate stratego with debug information"/>
+	    	<echo message="${basedir}"/>
+	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+	    	<!-- add debug information -->
+	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+	  		     <classpath>
+					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
+	  		     </classpath>
+	  			<arg value="-i"/>
+	  			<arg value="${trans}/${strmodule}.str"/>
+	  			<arg value="--gen-dir"/>
+	  			<arg value="${trans-debug}"/>
+	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+	  			<arg value="${basedir}"/>
+	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
+	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+	  			
+	  			<!-- arguments should start with two '-'-characters -->
+	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+	  			<!-- <arg value="-output-rtree"/> --> 
+	    	</java>
+	    	<!-- now compile instrumented stratego to java -->
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <java classname="org.strategoxt.strj.Main" failonerror="true">
+	            <arg value="-i"/>
+	            <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+	            <arg value="-o"/>
+	            <arg value="${build.stratego.outputfile}"/>
+	            <arg value="-p"/>
+	            <arg value="trans"/>
+	            <arg value="--library"/>
+	            <arg value="--clean"/>
+	            <arg line="${build.stratego.args}"/>
+	            <arg line="${build.stratego.extraargs}"/>
+	            <arg line="${externaljarflags}"/>
+	            <arg line="${externaldefimport}"/>
+	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+	        	<!-- put strategodebuglib.rtree on the include path -->
+	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	        </java>
+	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+	        <mkdir dir="${build}/trans"/>
+	    </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete dir="${src-gen}/trans"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/Lawoco/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/build.main.xml	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="Lawoco" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="Lawoco"/>
+        <property name="metasdfmodule" value="Stratego-Lawoco"/>
+        <property name="esvmodule" value="Lawoco"/>
+        <property name="strmodule" value="lawoco"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/Lawoco/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/build.properties	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-contrib/Lawoco/editor/Lawoco-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/Lawoco-Builders.esv	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,29 @@
+
+module Lawoco-Builders
+
+imports Lawoco-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                              
+  provider : include/lawoco.ctree                                                                             
+  provider : include/lawoco-java.jar                                                                          
+                                                                                                              
+  observer : editor-analyze                                                                                   
+                                                                                                              
+  builder  : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
+  builder  : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+                                                                                                              
+
+refactorings
+                                                                                 
+  pp-table                  : get-pp-table                                       
+                                                                                 
+  refactoring ID            : "Rename Entity" = rename-entity (source) (cursor)  
+                                                                                 
+  // on save: generate-java                                                      
\ No newline at end of file

Added: spoofax-contrib/Lawoco/editor/Lawoco-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/Lawoco-Colorer.esv	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,9 @@
+module Lawoco-Colorer
+
+imports Lawoco-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-contrib/Lawoco/editor/Lawoco-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/Lawoco-Completions.esv	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,31 @@
+module Lawoco-Completions
+
+imports Lawoco-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                             
+  // Syntax completion:                      
+                                             
+  completion template Start :
+    "module " <m> (blank)  
+                                             
+  completion template Definition :
+    "entity " <e> " {" (cursor) "}" (blank)  
+                                             
+  completion template Property : "prop" =
+    <x> " : " <T> (blank)  
+                                             
+
+completions
+  // Semantic (identifier) completion:   
+                                         
+  completion proposer                  : editor-complete
+                                         
+  completion trigger                   : ":"
\ No newline at end of file

Added: spoofax-contrib/Lawoco/editor/Lawoco-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/Lawoco-Folding.esv	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,9 @@
+module Lawoco-Folding
+
+imports Lawoco-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/Lawoco/editor/Lawoco-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/Lawoco-Outliner.esv	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,9 @@
+module Lawoco-Outliner
+
+imports Lawoco-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/Lawoco/editor/Lawoco-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/Lawoco-References.esv	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,15 @@
+module Lawoco-References
+
+imports Lawoco-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  hover _     : editor-hover
\ No newline at end of file

Added: spoofax-contrib/Lawoco/editor/Lawoco-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/Lawoco-Syntax.esv	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,9 @@
+module Lawoco-Syntax
+
+imports Lawoco-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-contrib/Lawoco/editor/Lawoco.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/Lawoco.main.esv	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,16 @@
+module Lawoco.main
+
+imports Lawoco-Builders Lawoco-Colorer Lawoco-Completions Lawoco-Folding Lawoco-Outliner Lawoco-References Lawoco-Syntax
+
+language General properties
+                  
+  name          : Lawoco
+  id            : Lawoco
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the Lawoco language"
+  url           : http://strategoxt.org
+                  
+  extensions    : lawo
+  table         : include/Lawoco.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-contrib/Lawoco/editor/java/Lawoco/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/java/Lawoco/Activator.java	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,44 @@
+package Lawoco;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "Lawoco";
+
+  public static final String kLanguageName = "Lawoco";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-contrib/Lawoco/editor/java/Lawoco/LawocoParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/java/Lawoco/LawocoParseController.java	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,4 @@
+package Lawoco;
+
+public class LawocoParseController extends LawocoParseControllerGenerated 
+{ }
\ No newline at end of file

Added: spoofax-contrib/Lawoco/editor/java/Lawoco/LawocoParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/java/Lawoco/LawocoParseControllerGenerated.java	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,108 @@
+package Lawoco;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileInputStream;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class LawocoParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("Lawoco");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    LawocoParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = LawocoParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = LawocoParseControllerGenerated.class.getResourceAsStream(TABLE);
+      boolean filesystem = false;
+      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
+      { 
+        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
+        filesystem = true;
+      }
+      if(table == null && new File("./" + TABLE).exists())
+      { 
+        table = new FileInputStream("./" + TABLE);
+        filesystem = true;
+      }
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
+      descriptor.setAttachmentProvider(LawocoParseControllerGenerated.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return LawocoParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/Lawoco/editor/java/Lawoco/LawocoValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/java/Lawoco/LawocoValidator.java	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,12 @@
+package Lawoco;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class LawocoValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return LawocoParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/Lawoco/editor/java/Lawoco/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/java/Lawoco/strategies/InteropRegisterer.java	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,14 @@
+package Lawoco.strategies;
+
+import org.strategoxt.lang.JavaInteropRegisterer;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Helper class for {@link java_strategy_0_0}.
+ */
+public class InteropRegisterer extends JavaInteropRegisterer {
+
+  public InteropRegisterer() {
+    super(new Strategy[] { java_strategy_0_0.instance });
+  }
+}

Added: spoofax-contrib/Lawoco/editor/java/Lawoco/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/java/Lawoco/strategies/Main.java	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,11 @@
+package Lawoco.strategies;
+
+import org.strategoxt.lang.Context;
+
+public class Main {
+  
+  public static void init(Context context) {
+    // Called when the editor is being initialized
+  }
+
+}

Added: spoofax-contrib/Lawoco/editor/java/Lawoco/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/editor/java/Lawoco/strategies/java_strategy_0_0.java	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,32 @@
+package Lawoco.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Example Java strategy implementation.
+ *
+ * This strategy can be used by editor services and can be called
+ * in Stratego modules by declaring it as an external strategy
+ * as follows:
+ *
+ * <code>
+ *  external java-strategy(|)
+ * </code>
+ *
+ * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+ */
+public class java_strategy_0_0 extends Strategy {
+  
+  public static java_strategy_0_0 instance = new java_strategy_0_0();
+
+  @Override
+  public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+    context.getIOAgent().printError("Input for java-strategy: " + current);
+    ITermFactory factory = context.getFactory();
+    return factory.makeString("Regards from java-strategy");
+  }
+
+}

Added: spoofax-contrib/Lawoco/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/lib/editor-common.generated.str	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,254 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-lawoco-file
+  parse-lawoco-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/Lawoco.tbl)>
+    )
+
+  parse-string = parse-lawoco-string
+  parse-lawoco-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/Lawoco.tbl)>
+    )
+  
+  parse-stream = parse-lawoco-stream
+  parse-lawoco-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/Lawoco.tbl)>
+    )
+
+  pp-lawoco-string =
+    ast2abox(|[<import-term(include/Lawoco.generated.pp.af)>,
+               <import-term(include/Lawoco.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "Lawoco", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    ![<id>]; all(s); ?[<id>]
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/lawoco.str file. These definitions should also be automatically 
+  // generated in the imported include/Lawoco.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-contrib/Lawoco/lib/refactor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/lib/refactor-common.generated.str	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,67 @@
+module lib/refactor-common.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+
+strategies //transformation
+
+/**
+ * Replaces elements in a list (once, starting from the right)
+ * @param match strategy for partial list
+ * @param new elements List(b)
+ * @type List(a) -> List(a,b)
+ */
+replace-sublist(match-sublist|new-elems): 
+  list -> <
+    at-suffix(match-sublist;!new-elems) <+
+    (
+      init; 
+      replace-sublist(match-sublist|new-elems);
+      at-end(![<last> list])
+    )
+  > list 
+
+/**
+ * Inserts an element at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list element 
+ * @type Term -> Term
+ */
+insert-elem(|pos, elem)=
+  insert-sublist(|pos, [elem])
+
+/**
+ * Inserts a list of elements at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list elements 
+ * @type Term -> Term
+ */	
+insert-sublist(|pos, elems)=
+  at-position(
+    split-at(|<last> pos);
+    ?(prefix, suffix);
+    <concat>[prefix, elems, suffix]
+    |<init> pos
+  )
+
+
+strategies //user-input
+
+/**
+ * Opens an input dialog for one string value that represents an identifier
+ * The language is used to check if the input value matches the identifier pattern
+ * @type (String, String, String, String) -> String
+ */
+input-dialog:
+  (language, title, label, default-value) -> <prim("SSL_EXT_newnamedialog", language, title, label, default-value)>
+  
+input-dialog:
+  (title, label, default-value) -> <input-dialog>("", title, label, default-value)
+
+strategies //pp-table
+	
+get-pp-table=
+  import-term(include/Lawoco.generated.pp.af)
+	

Added: spoofax-contrib/Lawoco/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/plugin.xml	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="lawo" description="Lawoco" language="Lawoco" derivedFrom="DynamicRoot" validator="Lawoco.LawocoValidator" validatorClass="Lawoco.LawocoValidator"></language>
+       </extension>
+       <extension id="Lawoco.parser" name="Lawoco Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="Lawoco.LawocoParseController" language="Lawoco">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-contrib/Lawoco/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/syntax/Common.sdf	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9]* -> ID
+    "-"? [0-9]+          -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Added: spoofax-contrib/Lawoco/syntax/Lawoco.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/syntax/Lawoco.generated.pp	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,8 @@
+[
+   Module             -- KW["module"] _1 _2,
+   Module.2:iter-star -- _1,
+   Entity             -- KW["entity"] _1 KW["{"] _2 KW["}"],
+   Entity.2:iter-star -- _1,
+   Property           -- _1 KW[":"] _2,
+   Type               -- _1
+]
\ No newline at end of file

Added: spoofax-contrib/Lawoco/syntax/Lawoco.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/syntax/Lawoco.pp	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also Lawoco.generated.pp)
+[]

Added: spoofax-contrib/Lawoco/syntax/Lawoco.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/syntax/Lawoco.sdf	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,17 @@
+%% Grammar for the Lawoco language
+%% By default, based on an example "entities" syntax
+module Lawoco
+
+imports Common
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+  
+    "module" ID Definition*       -> Start {cons("Module")}
+    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+    ID ":" Type                   -> Property {cons("Property")}
+    ID                            -> Type {cons("Type")}

Added: spoofax-contrib/Lawoco/test/example.lawo
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/test/example.lawo	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,18 @@
+module example
+
+// Example "Lawoco" program (see syntax/Lawoco.sdf for the grammar)
+
+entity User {
+  name     : String
+  password : String
+  homepage : URL
+}
+
+entity BlogPosting {
+  poster : User
+  body   : String
+}
+
+entity URL {
+  location : String
+}
\ No newline at end of file

Added: spoofax-contrib/Lawoco/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/trans/check.str	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,51 @@
+module check
+
+imports
+  libstratego-lib
+  include/Lawoco
+  lib/editor-common.generated
+
+rules
+
+  // Analysis: does a topdown traversal of the tree,
+  // and tries to apply the record-entity rule.
+  analyze:
+    t -> t
+    with
+      <topdown(try(record-entity))> t
+
+  // Records the definition of an entity in a dynamic rule GetEntity.
+  record-entity:
+    Entity(x, body) -> Entity(x, body)
+    with
+      // For a name 'x', GetEntity will return the original 'x' tree node
+      rules(
+        GetEntity :+ x -> x
+      )
+rules
+    
+  // Reports an error if a property type is undefined.
+  // This error is reported on the type name 'type'.
+  constraint-error:
+    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
+    where
+      not(!type => "String"); // String and Int are built-in types
+      not(!type => "Int");
+      not(<GetEntity> type) // no entity for this type
+  
+  // Reports an error if an entity is defined more than once.
+  // This constraint is implemented by testing if the "bag" of
+  // all entities x is not a singleton list.
+  constraint-error:
+    Entity(x, _) -> (x, $[Duplicate entity name])
+    where
+      not(<bagof-GetEntity> x => [_])
+  
+  constraint-warning:
+    Entity(x, _) -> (x, $[Entity names must start with a capital])
+    where
+      not(<string-starts-with-capital> x)
+  
+  constraint-note:
+    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
+                                      (this note is defined in trans/check.str) ])

Added: spoofax-contrib/Lawoco/trans/generate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/trans/generate.str	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,47 @@
+module generate
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/Lawoco
+  lib/editor-common.generated
+
+rules
+
+  to-java:
+    Module(x, d*) ->
+    $[ package [x];
+       
+       [d'*]
+     ]
+    with
+      d'* := <to-java> d*
+  
+  to-java:
+    Entity(x, p*) ->
+    $[ class [x] {
+           [p'*]
+       }
+     ]
+    with
+      p'* := <to-java> p*
+
+  to-java:
+    Property(x, Type(t)) -> $[
+      private [t] [x];
+      
+      public [t] get_[x] {
+          return [x];
+      }
+      
+      public void set_[x] ([t] [x]) {
+          this.[x] = [x];    
+      }
+  ]
+  
+  to-java:
+    Type(t) -> t
+
+  to-java:
+    t* -> <map(to-java)> t*

Added: spoofax-contrib/Lawoco/trans/lawoco.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/trans/lawoco.str	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,62 @@
+module lawoco
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/Lawoco
+  lib/editor-common.generated
+  check
+  generate
+  refactor
+
+rules // Main editor interface (defined by editor/Lawoco-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast;
+      notes    := <collect-all(constraint-note, conc)> ast
+  
+  // Transforms a selection to Java
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
+    where
+      <debug(!"Resolve: ")> node; 
+      Type(type) := node; 
+      target     := <GetEntity> type
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) ->
+    ["String", "Int" | proposals]
+    where
+      if !node => Type(COMPLETION(prefix)) then
+        proposals := <all-keys-GetEntity>
+      end

Added: spoofax-contrib/Lawoco/trans/refactor.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/trans/refactor.str	Fri Apr 29 12:19:53 2011	(r22678)
@@ -0,0 +1,21 @@
+module refactor
+
+imports
+  lib/refactor-common.generated
+  include/Lawoco
+  lib/editor-common.generated  
+
+rules
+ 
+  rename-entity:
+    (selected-name, position, ast, path, project-path) -> [(ast, new-ast)]
+    with
+      new-name := <input-dialog> ("Lawoco", "rename", "Rename entity:", ""); 
+      new-ast  := <topdown(try(rename-type(|selected-name, new-name)))> ast
+
+  rename-type(|old-name, new-name):
+    Entity(old-name, y) -> Entity(new-name, y)
+
+  rename-type(|old-name, new-name):
+    Type(old-name) -> Type(new-name)
+

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 14:24:37 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 12:24:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22679 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str
Message-ID: <20110429122437.8EF757F8007@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 12:24:37 2011
New Revision: 22679
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22679&sc=1

Log:
integrated Name-Analysis . Now , generated rules can be found in the auto-generated *.str file in the .ShadowDir

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 29 12:19:53 2011	(r22678)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 29 12:24:37 2011	(r22679)
@@ -17,6 +17,8 @@
 	codegen/compile
 	codegen/main
 	codegen/generate
+	codegen/sdf/to-name-analysis
+	
 imports	
 	context/signature
 	context/scope-tree
@@ -45,7 +47,8 @@
 			; Module(_, _ , section') := <get-module-declaration>module-typed-qname
 		where 
 			<debug-compiler> $[CodeGen | STR | generating code for the following module : [<pp-aterm>module-untyped-qname]]
-			;str-aterm := Module(<qname-to-path>module-untyped-qname, <conc>(<to-str-imports-block(|module-untyped-qname)>section*, <collect-om(?STRSection(<id>), conc)> section*))
+			;str-section-def := <conc>(<collect-om(?STRSection(<id>), conc)> section* ,<emit-name-analysis>section*)     
+			;str-aterm := Module(<qname-to-path>module-untyped-qname, <conc>(<to-str-imports-block(|module-untyped-qname)>section*, str-section-def))
  			;str-string := <to-str-string>str-aterm
  		where
 			 autogen-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
@@ -59,6 +62,14 @@
 			;<refresh-workspace-file>output-path-rtree
 		  ;<debug-compiler>$[ Codegen | STR | Finishing generation of following module: [<pp-aterm> module-untyped-qname].]
 	
+	
+	emit-name-analysis : sections* -> result 
+	where 
+		sdf-section* := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)>sections*;
+		Module(_, result) := <generate-name-analysis>sdf-section*
+	<+
+		<debug-compiler>$[ Codegen | STR | Failed name analysis.]
+	
 	/** 
 	* Generates stratego MAIN output for the specified package-name
 	*/	

From L.C.L.Kats at tudelft.nl  Fri Apr 29 14:30:25 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Apr 2011 12:30:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22680 -
	spoofax-contrib/Lawoco
Message-ID: <20110429123025.68F07CC125@mx4.tudelft.nl>

Author: LennartKats
Date: Fri Apr 29 12:30:24 2011
New Revision: 22680
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22680&sc=1

Log:
Added shadow dir to import path

Modified:
   spoofax-contrib/Lawoco/build.main.xml

Modified: spoofax-contrib/Lawoco/build.main.xml
==============================================================================
--- spoofax-contrib/Lawoco/build.main.xml	Fri Apr 29 12:24:37 2011	(r22679)
+++ spoofax-contrib/Lawoco/build.main.xml	Fri Apr 29 12:30:24 2011	(r22680)
@@ -18,11 +18,12 @@
         <property name="dist" location="bin/dist"/>
         
         <!-- Imports -->
-        <property name="build.sdf.imports" value=""/>
+        <property name="build.sdf.imports" value="-I &quot;${basedir}/.shadowdir&quot;"/>
         <property name="build.stratego.args" value="
                         --library
                         -I &quot;${trans}&quot;
                         -I &quot;${basedir}&quot;
+                        -I &quot;${basedir}/.shadowdir&quot;
                         -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
         
         <!-- Optional: external .def and .jar locations

From L.C.L.Kats at tudelft.nl  Fri Apr 29 15:06:46 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Apr 2011 13:06:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22681 - in
	spoofax-contrib/Lawoco: lib syntax trans
Message-ID: <20110429130646.C8BF57F807F@mx1.tudelft.nl>

Author: LennartKats
Date: Fri Apr 29 13:06:46 2011
New Revision: 22681
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22681&sc=1

Log:
Copying stuff from NamingExperiment

Added:
   spoofax-contrib/Lawoco/lib/analysis-library.str
      - copied unchanged from r22629, spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str
   spoofax-contrib/Lawoco/syntax/Common.spx
      - copied unchanged from r22678, spoofax-contrib/Lawoco/syntax/Common.sdf
   spoofax-contrib/Lawoco/syntax/Lawoco.spx
      - copied unchanged from r22678, spoofax-contrib/Lawoco/syntax/Lawoco.sdf
   spoofax-contrib/Lawoco/trans/analysis.str
      - copied unchanged from r22629, spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-manual.str
   spoofax-contrib/Lawoco/trans/types.str
      - copied unchanged from r22629, spoofax-imp/trunk/experimental/NamingExperiment/trans/types.str
Replaced:
   spoofax-contrib/Lawoco/trans/check.str
      - copied unchanged from r22629, spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str
   spoofax-contrib/Lawoco/trans/lawoco.str
      - copied unchanged from r22677, spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
Deleted:
   spoofax-contrib/Lawoco/syntax/Common.sdf
   spoofax-contrib/Lawoco/syntax/Lawoco.sdf

Copied: spoofax-contrib/Lawoco/lib/analysis-library.str (from r22629, spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/lib/analysis-library.str	Fri Apr 29 13:06:46 2011	(r22681, copy of r22629, spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str)
@@ -0,0 +1,367 @@
+module analysis-library
+
+imports
+  include/NamingExperiment
+  libstratego-lib
+  types
+  lib/editor-common.generated
+  analysis-generated
+
+signature constructors
+
+  // Index elements:
+  Def     : List(UriPart) -> Summary
+  Use     : List(UriPart) * List(UriPart) -> Summary
+  BadUse  : List(UriPart) -> Summary
+  DefData : List(UriPart) * DefDataType * Term -> Summary
+
+  // TODO: add a new constructor for URI header/path separation?
+  
+  // URI header:
+  Namespace      : UriPart
+  Unresolved     : Namespace -> UriPart
+  INTERNAL_ERROR : UriPart
+  
+  // Remainder of URI:
+  String : UriPart
+  Anon   : Int -> UriPart
+  Anon   : UriPart
+
+rules // extension points
+  
+  // Should return list of Def(_) and/or [namespace | path]
+  adjust-index-lookup(is-use |namespace, path) = fail
+  
+  // adjust-index-select(|namespace, path, use) = fail // (e.g., for imports)
+  
+  // Should call <store-results> on a (list of) DefData 
+  adjust-index-def-data(store-results |namespace, path) = fail
+  
+  // Should return a path
+  adjust-index-path(is-def |namespace, path) = fail
+  
+  // adjust-index-path-from-filesystem(|project-path, path)
+
+rules // analysis traversals
+   
+  analyze-top:
+    (ast, path, project-path) -> (ast5, defs, uses, data)
+    with
+      {| CurrentAnalysisAst:
+        rules(
+          CurrentAnalysisAst := ast
+        );
+        // HACK: use Some() constructor to force origin tracking...
+        (Some(ast2), defs) := <analyze-defs(|Anon(), Anon())> Some(ast);
+        full-path    := $[[project-path]/[path]];
+        prim("LANG_index_setup", $[[full-path]/.cache/index], $[project-path], [], []);
+        prim("LANG_index_clear_file", full-path);
+        <index-summary-parts(|full-path)> defs;
+        ast3         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast2;
+        <index-tree-terms> ast3;
+        data         := <origin-track-forced(analyze-tree-data)> ast3;
+        <index-summary-parts(|full-path)> data;
+        // TODO: resolve any URIs in index data at this point? or re-index data after uses analysis?
+        (ast4, uses) := <analyze-uses> ast3;
+        ast5         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast4
+      |}
+  
+  /**
+   * Identifies all definitions in the tree
+   * and annotates them with their URI.
+   * Also annotates uses with a preliminary "Unresolved(_)" URI.
+   */
+  analyze-defs(|head-scope, head-scope-ns):
+    ast -> (ast', defs')
+    with
+      if def := <nam-get-definition> ast then
+        Def(def-path)                     := def;
+        [head-scope-ns', head-scope' | _] := def-path
+      else
+        def-path       := INTERNAL_ERROR();
+        head-scope-ns' := head-scope-ns;
+        head-scope'    := head-scope
+      end;
+      if scope-types := <nam-get-scope-types> ast then
+        {| IndexPath:
+          <list-loop(update-index-path(|head-scope', head-scope-ns', ast))> scope-types;
+          // <balanced-update-path> head-scope';
+          (ast', defs) := <analyze-defs-recurse(|Anon(), Anon(), def-path)> ast
+        |}
+      else
+        (ast', defs) := <analyze-defs-recurse(|head-scope', head-scope-ns', def-path)> ast
+      end;
+      defs' := <![def | defs] <+ !defs>
+  
+  analyze-defs-recurse(|head-scope, head-scope-ns, def-path):
+    ast -> (ast'', defs)
+    where
+      analyzed      := <all(analyze-defs(|head-scope, head-scope-ns))> ast;
+      (ast', defs)  := <unzip-analyzed> analyzed;
+      ast''         := <try(nam-annotate-names(|def-path))> ast'
+  
+  update-index-path(|head-scope, head-scope-ns, ast):
+    scope-type -> scope-type
+    where
+      if !head-scope-ns => Anon() then
+        path  := <IndexPath <+ ![]> scope-type;
+        path' := <do-adjusted-index-path(|scope-type, path, Anon(<new>))> ast
+      else
+        path  := <IndexPath <+ ![]> head-scope-ns;
+        path' := <do-adjusted-index-path(|scope-type, path, head-scope)> ast
+      end;
+      rules(IndexPath: scope-type -> path')
+  
+  /* TODO: consider using simple-update-def-path
+   *       which uses "balanced" path scopes
+   *       e.g. when Entity doesn't scope Function
+   *       then it's hard to access properties from a function
+  balanced-update-index-path:
+    head-scope -> head-scope
+    where
+      if !head-scope => Anon() then
+        head-scope' := Anon(<new>)
+      else
+        head-scope' := head-scope
+      end;
+      (something with do-adjust-path)
+      rules(IndexPath := [head-scope' | <IndexPath <+ ![]> ()])
+  */
+  
+  /**
+   * Analyze all uses, changing their preliminary
+   * "Unresolve(_)" URI to a definite URI of their definition. 
+   */
+  analyze-uses:
+    ast -> (ast'', uses')
+    with
+      analyzed     := <all(analyze-uses)> ast;
+      (ast', uses) := <unzip-analyzed> analyzed;
+      if !ast' => _{unresolved@[Unresolved(namespace), x | path]} then
+        if Def(path') := <index-lookup(id |namespace, path)> ast' then
+          ast'' := ast{path'};
+          uses' := [Use([namespace | path], path') | uses]
+        else
+          ast'' := ast';
+          uses' := [BadUse(unresolved) | uses]
+        end
+      else
+        ast'' := ast';
+        uses' := uses
+      end
+  
+  /**
+   * Collects all index data (e.g., types of definitions).
+   */
+  analyze-tree-data:
+    tree -> data
+    where
+      set := <new-iset>;
+      <topdown(analyze-tree-data-part(|set))> tree;
+      data := <iset-elements> set
+  
+  analyze-tree-data-part(|set):
+    tree -> tree
+    where
+      if def-term := <nam-get-definition-key> then
+        _{[namespace | path]} := def-term;
+        if result := <adjust-index-def-data(store-index-data-results(|set) |namespace, path)> tree then
+          <fatal-err(|"Unexpected result from adjust-index-def-data; should call <store-results>")> result
+        end
+      end
+  
+  store-index-data-results(|set):
+    t -> <fail>
+    where
+      if is-list then
+        <iset-addlist(|t)> set
+      else
+        <iset-add(|t)> set
+      end
+  
+  /**
+   * Transforms a term C( (a1, [b1]), (a2, [b2, b3]) )
+   * to a tuple (C(a1, a2), [b1, b2, b3]).
+   */
+  unzip-analyzed:
+    appl -> (appl', unzipped-parts)
+    with
+      appl'          := <all(\(a, _) -> a\)> appl;
+      unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl
+
+rules // index construction
+  
+  // TODO: optimize: use hashtables instead of dynamic rules
+    
+  index-summary-parts(|file) =
+    list-loop(with(prim("LANG_index_add", <id>, file)))
+
+  index-tree-terms:
+    tree -> tree
+    where
+      if def-term{uri} := <nam-get-definition-key> then
+        def := Def(uri);
+        rules(
+          IndexedTerm: uri -> tree
+        )
+      end;
+      <all(index-tree-terms)> tree
+
+rules // index API
+
+  /** @deprecated */
+  index-get-term:
+    <with(?Def(uri) | "Def expected")> -> <IndexedTerm> uri
+  
+  index-get-data(|kind):
+    <with(?Def(uri) | "Def expected")> -> data
+    where
+      prim("LANG_index_get", DefData(uri, kind, [])) => [DefData(_, _, data) | _]
+  
+  index-get-data-all(|kind):
+    <with(?Def(uri) | "Def expected")> -> datas'
+    where
+      datas  := <prim("LANG_index_get", DefData(uri, kind, []))>;
+      datas' := <map(\DefData(_, _, d) -> d\)> datas
+
+  index-namespace:
+    x{[namespace | path]} -> <index-namespace-unwrap> namespace
+
+  index-path:
+    x{[namespace | path]} -> path'
+    where
+      if !namespace => Unresolved(namespace) then
+        Def(path') := <index-lookup> 
+      else
+        path' := path
+      end
+
+  index-lookup:
+    x{[namespace | path]} -> <index-lookup(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup(is-adjust-lookup-enabled |namespace, path):
+    x -> def
+    where
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      def        := <index-select(|namespace, path, x)>
+    <+
+      // TODO: optimize: try not to call do-adjust-index-lookup from here
+      [_ | path'] := path;
+      def         := <index-lookup(is-adjust-lookup-enabled |namespace, path')> x
+
+  index-lookup-outermost:
+    x{[namespace | path]} -> <index-lookup-outermost(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup-outermost(is-adjust-lookup-enabled |namespace, path):
+    x -> def
+    where
+      // TODO: optimize: just like index-lookup
+      [_ | path'] := path;
+      def         := <index-lookup-outermost(is-adjust-lookup-enabled |namespace, path')> x
+    <+
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      def        := <index-select(|namespace, path, x)>
+
+  index-lookup-one-level:
+    x{[namespace | path]} -> <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
+  
+  index-lookup-one-level(is-adjusted-lookup-enabled |namespace, path):
+    x -> defs
+    with
+      is-adjusted-lookup-enabled;
+      do-adjusted-index-lookup(|namespace, path, x);
+      mapconcat(\d at Def(p) -> [d]\
+          <+ \[namespace' | path'] -> <index-lookup-one-level(fail |namespace', path')> x\
+          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
+      ?defs
+    <+
+      defs := <prim("LANG_index_get_children", Def([namespace | path]))>
+
+  index-lookup-all-levels:
+    x{[namespace | path]} -> <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
+  
+  index-lookup-all-levels(is-adjust-lookup-enabled |namespace, path):
+    x -> all-defs
+    with
+      is-adjust-lookup-enabled;
+      do-adjusted-index-lookup(|namespace, path, x);
+      mapconcat(\d at Def(p) -> [d]\
+          <+ \[namespace' | path'] -> <index-lookup-all-levels(fail |namespace', path')> x\
+          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
+      ?all-defs
+    <+
+      one-level := <prim("LANG_index_get_children", Def([namespace | path]))>;
+      if [_ | path'] := path then
+        all-defs := <concat> [one-level, <index-lookup-all-levels(fail |namespace, path')> x]
+      else
+        all-defs := one-level
+      end
+
+  index-lookup-contained(|namespace):
+    x{[ns | path]} -> defs
+    with
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-one-level(id|namespace, def-path)> x 
+      else
+        defs := <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
+      end
+
+  index-lookup-contained-all-levels(|namespace):
+    x{[ns | path]} -> defs
+    with
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-all-levels(id|namespace, def-path)> x
+      else
+        defs := <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
+      end
+  
+  index-lookup-container(|namespace):
+    x{[ns | path]} -> def
+    with
+      def := ();
+      fatal-err(|"Not implemented") // TODO: index-lookup-container
+
+  index-namespace-unwrap =
+    \Unresolved(n) -> n\ <+ id
+  
+  do-adjusted-index-lookup(|namespace, path, use) =
+    // UNDONE: try(origin-term);
+    repeat-until(
+      prim("SSL_EXT_get_parent", <id>)
+    , adjust-index-lookup(origin-equal(|use) |namespace, path)
+    )
+
+  index-select(|namespace, path, use) =
+    getfirst(
+      where(
+        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
+      )
+    )
+  
+  do-adjusted-index-path(|namespace, path, def) =
+    adjust-index-path(origin-equal(|def) |namespace, path)
+  <+
+    ![def | path]
+  
+  index-eq(|namespace, expected) =
+    where(
+      ?Def([_, name | _]);
+      <SRTS-EXT-eq-ignore-annos(|expected)> name
+    )
+  
+  external SRTS-EXT-eq-ignore-annos(|t)
+
+rules // interface for generated code
+  
+  nam-get-def(|namespace):
+    x -> Def([namespace, x | <IndexPath <+ ![]> namespace])
+    
+  nam-annotate-use(|namespace):
+    t -> t{[Unresolved(namespace), t | <IndexPath <+ ![]> namespace]}
+    
+  nam-get-scope-types = fail
+  nam-get-definition = fail
+  nam-get-definition-key = fail
+  nam-annotate-names(|def-path) = fail

Copied: spoofax-contrib/Lawoco/syntax/Common.spx (from r22678, spoofax-contrib/Lawoco/syntax/Common.sdf)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/syntax/Common.spx	Fri Apr 29 13:06:46 2011	(r22681, copy of r22678, spoofax-contrib/Lawoco/syntax/Common.sdf)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9]* -> ID
+    "-"? [0-9]+          -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Copied: spoofax-contrib/Lawoco/syntax/Lawoco.spx (from r22678, spoofax-contrib/Lawoco/syntax/Lawoco.sdf)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/syntax/Lawoco.spx	Fri Apr 29 13:06:46 2011	(r22681, copy of r22678, spoofax-contrib/Lawoco/syntax/Lawoco.sdf)
@@ -0,0 +1,17 @@
+%% Grammar for the Lawoco language
+%% By default, based on an example "entities" syntax
+module Lawoco
+
+imports Common
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+  
+    "module" ID Definition*       -> Start {cons("Module")}
+    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+    ID ":" Type                   -> Property {cons("Property")}
+    ID                            -> Type {cons("Type")}

Copied: spoofax-contrib/Lawoco/trans/analysis.str (from r22629, spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-manual.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/trans/analysis.str	Fri Apr 29 13:06:46 2011	(r22681, copy of r22629, spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-manual.str)
@@ -0,0 +1,40 @@
+module analysis-manual
+
+imports
+  include/NamingExperiment
+  analysis-generated
+  analysis-library
+  types
+
+rules
+  
+  // Adjust the URI of the Module element
+  //adjust-index-path(is-def |namespace, path):
+  //  Module(<is-def>, _) -> ["ROOT"]
+  
+  // Adjust the lookup behavior for properties,
+  // overriding the lookup with a list of property Defs
+  adjust-index-lookup(is-use |namespace, path):
+    PropAccess(e, <is-use>) -> p*
+    with
+      if ENTITY(e-type) := <type-of> e then
+        p* := <index-lookup-contained(|Property())> e-type
+        //or: p* := [[namespace | <index-path> e-type]]
+      else
+        p* := []
+      end
+
+  // Adjust the lookup behavior for variables,
+  // overriding the lookup with a list of URIs
+  adjust-index-lookup(is-use |namespace, path):
+    Var(<is-use>) -> [[Var() | path], [Property() | path]]
+
+  // Adjust the lookup behavior for function calls,
+  // selecting a function with matching parameter types
+  // (if this fails, the normal lookup behavior is used!)
+  adjust-index-lookup(is-use |namespace, path):
+    Call(<is-use>, args) -> def
+    where
+      arg-types := <map(type-of)> args;
+      all-defs  := <index-lookup-all-levels(fail |namespace, path)>;
+      def       := <getfirst(is-params-compatible(|arg-types))>

Copied: spoofax-contrib/Lawoco/trans/check.str (from r22629, spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/trans/check.str	Fri Apr 29 13:06:46 2011	(r22681, copy of r22629, spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str)
@@ -0,0 +1,101 @@
+module check
+
+imports
+  libstratego-lib
+  include/NamingExperiment
+  lib/editor-common.generated
+  analysis-library
+  analysis-generated
+  types
+
+rules
+
+  // TODO: don't use index-get-term, but store offsets in the index
+
+  constraint-error:
+    x{[Unresolved(t) | _]} ->
+    (x, $[Unable to resolve [x]])
+  
+  constraint-error:
+    x -> (x, $[Use before definition])
+    where
+      namespace := <index-namespace> x;
+      <is-ordered-namespace> namespace
+    where
+      def  := <index-lookup> x;
+      def' := <index-get-term> def
+    where
+      <gt> (<origin-offset> def', <origin-offset> x)
+  
+  constraint-error:
+    def -> (def, $[Duplicate definition])
+    where
+      def-child  := <nam-get-definition-key> def;
+      def'       := <index-get-term> <index-lookup-outermost> def-child;
+      not(<origin-equal(|def)> def')
+  
+  is-ordered-namespace:
+    Var() -> Var()
+    
+  constraint-error:
+    Call(f, a*) -> (f, $[Illegal argument types, expected [<strip-annos; write-to-string> param-types] not [<strip-annos; write-to-string> arg-types]])
+    where
+      arg-types   := <map(type-of)> a*;
+      def         := <index-lookup> f;
+      param-types := <index-get-data(|ParamTypes())> def;
+      not(
+        <is-params-compatible(|arg-types)> def
+      )
+  
+  constraint-warning = fail
+  constraint-note = fail
+
+  origin-offset =
+    prim("SSL_EXT_origin_offset", <id>) => (<id>, _)
+
+/*
+
+  // Analysis: does a topdown traversal of the tree,
+  // and tries to apply the record-entity rule.
+  analyze:
+    t -> t
+    with
+      <topdown(try(record-entity))> t
+
+  // Records the definition of an entity in a dynamic rule GetEntity.
+  record-entity:
+    Entity(x, body) -> Entity(x, body)
+    with
+      // For a name 'x', GetEntity will return the original 'x' tree node
+      rules(
+        GetEntity :+ x -> x
+      )
+*/
+rules
+    /*
+  // Reports an error if a property type is undefined.
+  // This error is reported on the type name 'type'.
+  constraint-error:
+    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
+    where
+      not(!type => "String"); // String and Int are built-in types
+      not(!type => "Int");
+      not(<lookup-one> type) // no entity for this type
+  
+  // Reports an error if an entity is defined more than once.
+  // This constraint is implemented by testing if the "bag" of
+  // all entities x is not a singleton list.
+  constraint-error:
+    Entity(x, _) -> (x, $[Duplicate entity name])
+    where
+      not(<lookup-all-Entity> x => [_])
+  
+  constraint-warning:
+    Entity(x, _) -> (x, $[Entity names must start with a capital])
+    where
+      not(<string-starts-with-capital> x)
+  
+  constraint-note:
+    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
+                                      (this note is defined in trans/check.str) ])
+*/
\ No newline at end of file

Copied: spoofax-contrib/Lawoco/trans/lawoco.str (from r22677, spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/trans/lawoco.str	Fri Apr 29 13:06:46 2011	(r22681, copy of r22677, spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str)
@@ -0,0 +1,86 @@
+module namingexperiment
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/NamingExperiment
+  lib/editor-common.generated
+  check
+  generate
+  prettyprint
+  refactorings
+  analysis-manual
+  analysis-generated
+  analysis-library
+
+rules // Main editor interface (defined by editor/NamingExperiment-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast', errors, warnings, notes)
+    with
+      editor-init;
+      (ast', defs, uses, data) := <analyze-top>;
+      errors   := <collect-all(constraint-error, conc)> ast';
+      warnings := <collect-all(constraint-warning, conc)> ast';
+      notes    := <collect-all(constraint-note, conc)> ast'
+  
+  // Transforms a selection to Java
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-analyzed:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      editor-init;
+      filename := <guarantee-extension(|"analyzed.aterm")> path;
+      result   := <analyze-top> selected // we just return the input term
+  
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
+    where
+      // TODO: shouldn't work on parent node?
+      !node => <one(?subnode) <+ ?subnode>;
+      def     := <index-lookup> node;
+      target  := /*<index-get-term>*/ def
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[[def-path'']]
+    where
+      // FIXME: this only works for definition paths
+      //<debug(!2)> target;
+      def-term           := <nam-get-definition-key> target;
+      _{[ns | def-path]} := def-term;
+      def-path'  := <take-until(?Anon())> def-path;
+      def-path'' := <reverse; separate-by(|".")> def-path'
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) -> proposals'
+    where
+      editor-init;
+      (ast', _, _, _) := <analyze-top> (ast, path, project-path);
+      x              := <collect-one(?COMPLETION(_))> ast';
+      proposals      := <index-lookup-all-levels> x;
+      proposals'     := <map(def-to-name)> proposals
+
+  def-to-name:
+    Def([namespace, name | _]) -> name

Copied: spoofax-contrib/Lawoco/trans/types.str (from r22629, spoofax-imp/trunk/experimental/NamingExperiment/trans/types.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/trans/types.str	Fri Apr 29 13:06:46 2011	(r22681, copy of r22629, spoofax-imp/trunk/experimental/NamingExperiment/trans/types.str)
@@ -0,0 +1,65 @@
+module types
+
+imports
+  include/NamingExperiment
+  analysis-library
+
+signature constructors
+
+  ENTITY     : STRING -> Type
+  Type       : DefDataKind
+  ParamTypes : DefDataKind
+
+rules // type projections
+
+  type-of:
+    Property(_, x) -> ENTITY(x)
+  
+  type-of:
+    Entity(x, _) -> ENTITY(x)
+  
+  type-of:
+    VarDecl(_, x) -> ENTITY(x)
+  
+  type-of:
+    VarDeclInit(_, x, _) -> ENTITY(x)
+  
+  type-of:
+    Param(_, x) -> ENTITY(x)
+  
+  type-of:
+    Var(v) -> <type-of> <index-lookup> v
+  
+  type-of:
+    PropAccess(e, p) -> <type-of> <index-lookup> p
+
+  type-of:
+    Def(uri) -> <index-get-data(|Type())> Def(uri)
+
+rules // utility
+
+  is-params-compatible(|arg-types):
+    Def(uri) -> <id>
+    with
+      param-types := <index-get-data(|ParamTypes())>
+    where
+      <eq> (<length> arg-types, <length> param-types);
+      <zip(is-assignable-to)> (arg-types, param-types)
+
+  is-assignable-to:
+    (to-type, from-type) -> to-type
+    where
+      <eq> (from-type, to-type)
+
+
+rules // store definition and parameter types
+    
+  adjust-index-def-data(store-results |namespace, path):
+    def -> <store-results> DefData([namespace | path], Type(), type)
+    where
+      type := <type-of> def
+  
+  adjust-index-def-data(store-results |namespace, path):
+    Function(_, params, _) -> <store-results> DefData([namespace | path], ParamTypes(), types)
+    with
+      types := <map(type-of)> params

From m.dejonge at tudelft.nl  Fri Apr 29 15:42:23 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 29 Apr 2011 13:42:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22682 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110429134223.35628108C047@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Apr 29 13:42:22 2011
New Revision: 22682
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22682&sc=1

Log:
bugfix: parse failure on first line caused a nullpointer exception in the region recovery
fix: start state of the parser is stored

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParserHistory.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java	Fri Apr 29 13:06:46 2011	(r22681)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java	Fri Apr 29 13:42:22 2011	(r22682)
@@ -238,7 +238,7 @@
         return "regular*(" + label + ", {" +  kids.length + "})";
     }
 	
-	/*
+    /*
 	private void log(){
 		System.out.println(this.toStringShallow());
 		for (int i = 0; i < kids.length; i++) {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParserHistory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParserHistory.java	Fri Apr 29 13:06:46 2011	(r22681)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParserHistory.java	Fri Apr 29 13:42:22 2011	(r22682)
@@ -94,7 +94,7 @@
         indentHandler.updateIndentation(myParser.currentToken);
         recoverTokenCount++;
         tokenIndex++;
-        if(indentHandler.lineMarginEnded() || myParser.currentToken==SGLR.EOF)
+        if(indentHandler.lineMarginEnded() || myParser.currentToken==SGLR.EOF || tokenIndex == 1)
             keepNewLinePoint(myParser, myParser.tokensSeen-1, false, indentHandler);
     }
     

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java	Fri Apr 29 13:06:46 2011	(r22681)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java	Fri Apr 29 13:42:22 2011	(r22682)
@@ -82,6 +82,7 @@
         acceptPosition=-1;
         NewStructureSkipper newRegionSelector=new NewStructureSkipper(myParser);
         int failureIndex=getHistory().getIndexLastLine();
+        assert(failureIndex >= 0);
         errorDetectionLocation=getHistory().getIndexLastToken();
         ArrayList<StructureSkipSuggestion> prevRegions=newRegionSelector.getPreviousSkipSuggestions(failureIndex);
         //System.out.println("PREVIOUS REGION");        

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Fri Apr 29 13:06:46 2011	(r22681)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Fri Apr 29 13:42:22 2011	(r22682)
@@ -1221,7 +1221,7 @@
 		if (Tools.logging) {
 			Tools.logger("Ambiguity: direct link ", st0.state.stateNumber, " -> ",
 					st1.state.stateNumber, " ", (prod.isRejectProduction() ? "{reject}" : ""));
-			if (nl.label instanceof ParseNode) {
+			if (nl.label.isParseNode()) {
 				Tools.logger("nl is ", nl.isRejected() ? "{reject}" : "", " for ",
 						((ParseNode) nl.label).getLabel());
 			}

From L.C.L.Kats at tudelft.nl  Fri Apr 29 15:56:08 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Apr 2011 13:56:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22683 - in
	spoofax-contrib/Lawoco: syntax trans
Message-ID: <20110429135608.47322108C009@mx3.tudelft.nl>

Author: LennartKats
Date: Fri Apr 29 13:56:07 2011
New Revision: 22683
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22683&sc=1

Log:


Added:
   spoofax-contrib/Lawoco/trans/analyze.str
      - copied, changed from r22681, spoofax-contrib/Lawoco/trans/analysis.str
Deleted:
   spoofax-contrib/Lawoco/trans/analysis.str
   spoofax-contrib/Lawoco/trans/refactor.str
Modified:
   spoofax-contrib/Lawoco/syntax/Common.spx
   spoofax-contrib/Lawoco/syntax/Lawoco.spx
   spoofax-contrib/Lawoco/trans/lawoco.str

Modified: spoofax-contrib/Lawoco/syntax/Common.spx
==============================================================================
--- spoofax-contrib/Lawoco/syntax/Common.spx	Fri Apr 29 13:42:22 2011	(r22682)
+++ spoofax-contrib/Lawoco/syntax/Common.spx	Fri Apr 29 13:56:07 2011	(r22683)
@@ -1,6 +1,6 @@
-module Common
+package Lawoco
 
-exports
+module Common
 
   lexical syntax
   

Modified: spoofax-contrib/Lawoco/syntax/Lawoco.spx
==============================================================================
--- spoofax-contrib/Lawoco/syntax/Lawoco.spx	Fri Apr 29 13:42:22 2011	(r22682)
+++ spoofax-contrib/Lawoco/syntax/Lawoco.spx	Fri Apr 29 13:56:07 2011	(r22683)
@@ -1,17 +1,20 @@
-%% Grammar for the Lawoco language
-%% By default, based on an example "entities" syntax
-module Lawoco
-
-imports Common
-
-exports
+package Lawoco
 
-  context-free start-symbols
-    Start
+module Lawoco
 
-  context-free syntax
+context-free syntax
   
-    "module" ID Definition*       -> Start {cons("Module")}
-    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
-    ID ":" Type                   -> Property {cons("Property")}
-    ID                            -> Type {cons("Type")}
+    "module" Module@=ID Definition*     -> Start {"Module", scope(Entity, Module)}
+    "entity" Entity@=ID "{" Member* "}" -> Definition {"Entity", scope(Property, Function)}
+    Entity at ID Property@=ID              -> Member {"Property"}
+
+    Function@=ID "(" { Param "," }* ")" Stm -> Member {"Function", scope(Var)}
+    Var@=ID ":" Entity at ID           -> Param {"Param"}
+    
+    Function at ID "(" {Exp ","}* ")"      -> Exp {"Call"}        %% or, could be an Entity 
+    "var" Var@=ID ":" Entity at ID         -> Stm {"VarDecl"}
+    "var" Var@=ID ":" Entity at ID "=" Exp -> Stm {"VarDeclInit"}
+    Var at ID "=" Exp                      -> Stm {"Assign"}
+    Var at ID                              -> Exp {"Var"}         %% or, could be a Property!
+    Exp "." Property at ID                 -> Exp {"PropAccess"}
+    "{" Stm* "}"                        -> Stm {"Block", scope(Var)}
\ No newline at end of file

Copied and modified: spoofax-contrib/Lawoco/trans/analyze.str (from r22681, spoofax-contrib/Lawoco/trans/analysis.str)
==============================================================================
--- spoofax-contrib/Lawoco/trans/analysis.str	Fri Apr 29 13:06:46 2011	(r22681, copy source)
+++ spoofax-contrib/Lawoco/trans/analyze.str	Fri Apr 29 13:56:07 2011	(r22683)
@@ -1,10 +1,10 @@
-module analysis-manual
+module analyze
 
 imports
   include/NamingExperiment
-  analysis-generated
   analysis-library
   types
+  lib/analysis-library
 
 rules
   

Modified: spoofax-contrib/Lawoco/trans/lawoco.str
==============================================================================
--- spoofax-contrib/Lawoco/trans/lawoco.str	Fri Apr 29 13:42:22 2011	(r22682)
+++ spoofax-contrib/Lawoco/trans/lawoco.str	Fri Apr 29 13:56:07 2011	(r22683)
@@ -6,12 +6,10 @@
   libstratego-aterm
   include/NamingExperiment
   lib/editor-common.generated
+  analyze
   check
   generate
-  prettyprint
-  refactorings
-  analysis-manual
-  analysis-generated
+  analysis
   analysis-library
 
 rules // Main editor interface (defined by editor/NamingExperiment-Builders and -References.esv)

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 16:08:18 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 14:08:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22684 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	codegen
Message-ID: <20110429140818.1655F7F8088@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 14:08:17 2011
New Revision: 22684
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22684&sc=1

Log:
* added main strategy build-spoofax-main
* tested it with test-build-spoofax-main builder without xtc-io-wrap enabled
* added override-configured-source-directories  that actually removes all the configured source directories from spx.config and create new source directory based on the argument passed in build-spoofax-main. thus, basically override the config. 
*assumption : getcwd is considered as the project-dir

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Fri Apr 29 13:56:07 2011	(r22683)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Fri Apr 29 14:08:17 2011	(r22684)
@@ -16,8 +16,36 @@
 	normalize/signatures  
 	include/spoofaxlang 
 	utils/path
-	 
+imports 	
+	libstratego-gpp
+	libstratego-xtc 
 rules 
+		
+	build-spoofax-main:
+		arg  -> "" // local directory path is specified 
+		where 
+		xtc-io-wrap(
+				editor-init; 						         // cleaning up and initializing editors
+				initialize-configuration;        // initializes configuration and setting up enviroment variables
+				rules(NoDebugInfo: _);           // HACK: disable origin use for now
+				rules(ProjectPath := <getcwd>);  // Assumption, it will run from command prompt. Hence, setting getcwd as the project path.
+				// Overriding spx.config configured source directory. 
+				// Comment this line if sources configured in the spx.config should be activated
+				<override-configured-source-directories><abspath>arg;
+				<show-configuration;debug>();     //show configuration for this spx project
+				<build-all>()                     //building all the spx files in the sources directory
+				
+			<+
+				prim("SSL_stacktrace_get_all_frame_names") ; report-failure
+		)
+	
+		
+	test-build-spoofax-main:
+		(selected, position, ast, path, project-path) -> None()
+	where 
+		<build-spoofax-main> "test"		
+	
+
 	build-all:
 		(selected, position, ast, path, project-path) -> None()
 		where

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Fri Apr 29 13:56:07 2011	(r22683)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Fri Apr 29 14:08:17 2011	(r22684)
@@ -53,7 +53,27 @@
 				
 		]
 					
+	show-configuration : ()-> result
+	where 
+		if Enable-Caching then 
+			enabled-caching-string := "Caching of Semantic Errors is Enabled"  
+		else
+			enabled-caching-string := "Caching of Semantic Errors is Disabled"
+		end
+	where
+		result := $[ Spoofax-lang|Configuration  - [<getcwd>]/spx.config
 	
+		Resolved Source Directories:  
+			[<pp-aterm><bagof-SPX-Source-Dir>]
+		
+		Ignored Subdirectories : 
+			[<pp-aterm><all-keys-Ignored-Spx-Souce-Dir>]
+		
+		Output Directory : [<pp-aterm><Autogenerated-Artifacts-Dir>]
+		
+		[enabled-caching-string] 
+				
+		] 
 		
 	// enables library cache invalidation 
 	enable-lib-cache-invalidation = with( rules(invalidate-lib-cache: _ ) )
@@ -87,11 +107,22 @@
 	where
   	 get-code-output-directory; setup-autogen-root-directory  			
 	
+	
+	//intializes the source directories . Compiler will only consider this directory as a valid spx sources .
 	init-source-directory : config-aterm -> config-aterm 
 	where 
 		get-all-includes ; 
 		setup-source-directories			
+
+
+	override-configured-source-directories : localsoucedir -> localsoucedir
+	where
+		remove-existing-configuration-sourcedirs;
+		<setup-source-directories>[(localsoucedir,AllDirectories())]
 	
+	remove-existing-configuration-sourcedirs= with( rules(	SPX-Source-Dir :- _)) // removing all the configured source directory 
+
+
 rules
 	setup-autogen-root-directory = 
 		?codegen-output-dir;
@@ -187,16 +218,12 @@
 	  	<+
 	  		<chdir>current-dir  
 		)
-
-
- 
+	
 	get-all-project-refernces = 
   	collect-all(?SpxProjects(<id>), conc) ; 
   	flatten-list
   <+ 
   	debug(!"Failed to retrieve list of projects.") ; fail 
- 
-  
 		
 rules 
 

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 16:23:16 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 14:23:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22685 -
	spoofax-contrib/Lawoco
Message-ID: <20110429142316.6736CCC074@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 14:23:16 2011
New Revision: 22685
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22685&sc=1

Log:
added spx.config file

Added:
   spoofax-contrib/Lawoco/spx.config

Added: spoofax-contrib/Lawoco/spx.config
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/Lawoco/spx.config	Fri Apr 29 14:23:16 2011	(r22685)
@@ -0,0 +1,8 @@
+Configuration
+	Includes
+		RootDirectory
+				syntax %% specify relative path of local source directories
+		AllDirectories
+	
+	CodeGeneration 
+		OutputDirectory		.shadowdir
\ No newline at end of file

From seba at informatik.uni-marburg.de  Fri Apr 29 16:57:55 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 29 Apr 2011 14:57:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22686 - in
	sugarj/trunk/case-studies: concretesyntax text text/test
Message-ID: <20110429145755.6E764108C007@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Fri Apr 29 14:57:55 2011
New Revision: 22686
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22686&sc=1

Log:
bibtex and latex sugar libraries

Modified:
   sugarj/trunk/case-studies/concretesyntax/Java.sugj
   sugarj/trunk/case-studies/text/Latex.sugj
   sugarj/trunk/case-studies/text/LatexLib.sugj
   sugarj/trunk/case-studies/text/test/Bibtex.sugj

Modified: sugarj/trunk/case-studies/concretesyntax/Java.sugj
==============================================================================
--- sugarj/trunk/case-studies/concretesyntax/Java.sugj	Fri Apr 29 14:23:16 2011	(r22685)
+++ sugarj/trunk/case-studies/concretesyntax/Java.sugj	Fri Apr 29 14:57:55 2011	(r22686)
@@ -154,6 +154,7 @@
     "java_lvdec"  "|[" JavaLocalVarDec "]|" -> StrategoTerm {cons("ToMetaExpr")}
 
     "java_vdec" "|[" JavaVarDec "]|" -> StrategoTerm {cons("ToMetaExpr")}
+    "java_tdec" "|[" JavaTypeDec "]|" -> StrategoTerm {cons("ToMetaExpr")}
 
   %%%
    %% Anti Quotations for Local Variable Declarations

Modified: sugarj/trunk/case-studies/text/Latex.sugj
==============================================================================
--- sugarj/trunk/case-studies/text/Latex.sugj	Fri Apr 29 14:23:16 2011	(r22685)
+++ sugarj/trunk/case-studies/text/Latex.sugj	Fri Apr 29 14:57:55 2011	(r22686)
@@ -54,6 +54,12 @@
   syntax
     "\\latex" "{" <PlainContent-LEX> "}" -> InTextCommand {cons("LatexEscape")}
   
+    <NullaryTextCommand-LEX> -> InTextCommand {cons("InTextCommand")}
+    <UnaryTextCommand-LEX> <LAYOUT?-CF> "{" LatexTextContent? "}" -> InTextCommand {cons("InTextCommand")}
+    <BinaryTextCommand-LEX> <LAYOUT?-CF> "{" LatexTextContent? "}" <LAYOUT?-CF> "{" LatexTextContent? "}" -> InTextCommand {cons("InTextCommand")}
+    <TrenaryTextCommand-LEX> <LAYOUT?-CF> "{" LatexTextContent? "}" <LAYOUT?-CF> "{" LatexTextContent? "}" <LAYOUT?-CF> "{" LatexTextContent? "}" -> InTextCommand {cons("InTextCommand")}
+    
+  
   lexical syntax
     [a-zA-Z]+ -> LatexTextEnvironmentName
   
@@ -131,6 +137,11 @@
     
     pp-latex-command :
       LatexEscape(code) -> code
+    
+    pp-latex-command :
+      InTextCommand#([com|args]) -> <debug;conc-strings> (com, args-string)
+      where
+        <mapconcat(\ a -> <conc-strings> ("{", <pp-latex> a, "}") \); concat-strings> args => args-string
       
     pp-latex-environment :
       StandardEnvironment(LatexTextEnvironmentName(lname), content, LatexTextEnvironmentName(rname)) ->
@@ -157,6 +168,11 @@
     TextContent : black
     LatexTextEnvironmentName : black
     
+    NullaryTextCommand : 127 0 85 bold
+    UnaryTextCommand : 127 0 85 bold
+    BinaryTextCommand : 127 0 85 bold
+    TrearyTextCommand : 127 0 85 bold
+    
     environment _.LatexEscape : black
     environment LatexHeader : 0 0 255 bold
   

Modified: sugarj/trunk/case-studies/text/LatexLib.sugj
==============================================================================
--- sugarj/trunk/case-studies/text/LatexLib.sugj	Fri Apr 29 14:23:16 2011	(r22685)
+++ sugarj/trunk/case-studies/text/LatexLib.sugj	Fri Apr 29 14:57:55 2011	(r22686)
@@ -3,15 +3,23 @@
 import text.Bibtex;
 
 public sugar LatexLib {
+  lexical syntax
+    "\\maketitle" -> NullaryTextCommand
+    "\\and" -> NullaryTextCommand
+
+  
   syntax
     "\\emph" "{" LatexTextContent "}" -> InTextCommand {cons("EmphCommand")}
     "\\cite" "{" <BibtexEntries-CF> "}" -> InTextCommand {cons("CiteCommand")}
+    "\\title" "{" LatexTextContent "}" -> InTextCommand {cons("TitleCommand")}
+    
   
   context-free syntax
     {BibtexEntryName ","}+ -> BibtexEntries
     
   rules
     latex-environment = ?"abstract"
+    latex-environment = ?"document"
   
   rules
     pp-latex = fail
@@ -29,6 +37,11 @@
         <map(?BibtexEntryName(<id>))> cites => names;
         <intersperse(|","); concat-strings> names => s
 
+    pp-latex-command :
+      TitleCommand(content)
+      ->
+      <conc-strings> ("\\title{", <pp-latex> content, "}") 
+
   rules
     intersperse(|s) : [] -> []
     intersperse(|s) : [x] -> [x]
@@ -50,9 +63,11 @@
 public editor services LatexLib {
   colorer
     environment _.EmphCommand : 0 0 255 italic
+    environment _.TitleCommand : 0 128 0 bold
   
   completions
     completion template : LatexTextEnvironmentName = "abstract"
+    completion template : LatexTextEnvironmentName = "document"
   
     completion template : LatexTextContentPart = "\emph{" <text> "}"
 }
\ No newline at end of file

Modified: sugarj/trunk/case-studies/text/test/Bibtex.sugj
==============================================================================
--- sugarj/trunk/case-studies/text/test/Bibtex.sugj	Fri Apr 29 14:23:16 2011	(r22685)
+++ sugarj/trunk/case-studies/text/test/Bibtex.sugj	Fri Apr 29 14:57:55 2011	(r22686)
@@ -4,7 +4,7 @@
 
 public bibtex Bibtex {
  
-	@String{OOPSLA = {Proceedings of Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA)}}
+  @String{OOPSLA = {Proceedings of Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA)}}
   @String{POPL = {Proceedings of Symposium on Principles of Programming Languages (POPL)}}
   @String{GPCE = {Proceedings of Conference on Generative Programming and Component Engineering (GPCE)}}
   @String{SLE = {Proceedings of Conference on Software Language Engineering (SLE)}}

From seba at informatik.uni-marburg.de  Fri Apr 29 16:58:50 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 29 Apr 2011 14:58:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22687 - in
	sugarj/trunk: feature update-site
Message-ID: <20110429145850.9A413CC111@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Fri Apr 29 14:58:50 2011
New Revision: 22687
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22687&sc=1

Log:
SugarJ 1.0.3

Modified:
   sugarj/trunk/feature/feature.xml
   sugarj/trunk/update-site/site.xml

Modified: sugarj/trunk/feature/feature.xml
==============================================================================
--- sugarj/trunk/feature/feature.xml	Fri Apr 29 14:57:55 2011	(r22686)
+++ sugarj/trunk/feature/feature.xml	Fri Apr 29 14:58:50 2011	(r22687)
@@ -2,7 +2,7 @@
 <feature
       id="org.sugarj.editor"
       label="SugarJ"
-      version="1.0.1.qualifier"
+      version="1.0.3.qualifier"
       provider-name="sugarj.org">
 
    <description url="http://www.sugarj.org/update">
@@ -60,136 +60,122 @@
          id="org.strategoxt.imp.metatooling"
          download-size="52"
          install-size="94"
-         version="0.1.1.201104091523"
-         unpack="false"/>
-
-   <plugin
-         id="org.strategoxt.imp.runtime"
-         download-size="364"
-         install-size="791"
-         version="0.1.1.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.spoofax.aterm"
          download-size="153"
          install-size="238"
-         version="0.2.3.201104091523"/>
+         version="0.0.0"/>
 
    <plugin
          id="org.spoofax.compiler"
          download-size="8"
          install-size="12"
-         version="0.3.9.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.spoofax.interpreter.core"
          download-size="241"
          install-size="486"
-         version="0.4.0.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.spoofax.interpreter.library.jsglr"
          download-size="13"
          install-size="21"
-         version="0.3.9.201104091523"
-         unpack="false"/>
-
-   <plugin
-         id="org.spoofax.jsglr"
-         download-size="211"
-         install-size="436"
-         version="0.3.0.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.lpg"
          download-size="2"
          install-size="2"
-         version="0.1.84.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.runtime"
          download-size="687"
          install-size="1435"
-         version="0.1.101.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="lpg.runtime"
          download-size="89"
          install-size="94"
-         version="2.0.17.201104091523"/>
+         version="0.0.0"/>
 
    <plugin
          id="org.eclipse.imp.smapi"
          download-size="8"
          install-size="13"
-         version="0.1.89.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.smapifier"
          download-size="11"
          install-size="19"
-         version="0.1.89.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.strategoxt.imp.editors.editorservice"
          download-size="801"
          install-size="1353"
-         version="0.1.1.201104091523"/>
+         version="0.0.0"/>
 
    <plugin
          id="com.ibm.wala.shrike"
          download-size="283"
          install-size="537"
-         version="1.1.3.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.metatooling"
          download-size="591"
          install-size="1017"
-         version="0.1.92.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.preferences"
          download-size="19"
          install-size="35"
-         version="0.1.86.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.prefspecs"
          download-size="450"
          install-size="950"
-         version="0.1.89.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.presentation"
          download-size="319"
          install-size="597"
-         version="0.1.7.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.strategoxt.strj"
          download-size="11053"
          install-size="13138"
-         version="0.17.92.201104091523"/>
+         version="0.0.0"/>
 
    <plugin
          id="org.strategoxt.imp.generator"
          download-size="7781"
          install-size="8723"
-         version="0.1.2.201104091523"/>
+         version="0.0.0"/>
 
    <plugin
          id="org.strategoxt.imp.editors.sdf"
@@ -201,13 +187,13 @@
          id="org.strategoxt.imp.editors.stratego"
          download-size="1728"
          install-size="2825"
-         version="0.1.1.201104091523"/>
+         version="0.0.0"/>
 
    <plugin
          id="org.strategoxt.imp.editors.aterm"
          download-size="23"
          install-size="35"
-         version="0.1.1.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
@@ -220,88 +206,88 @@
          id="org.eclipse.imp.java.hosted"
          download-size="48"
          install-size="95"
-         version="0.1.2.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.lpg.ide"
          download-size="1231"
          install-size="3031"
-         version="0.1.87.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.xform"
          download-size="187"
          install-size="371"
-         version="0.1.91.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.strategoxt.imp.editors.aster"
          download-size="2239"
          install-size="2777"
-         version="0.1.0.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.strategoxt.imp.editors.pp"
          download-size="68"
          install-size="214"
-         version="0.1.0.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.strategoxt.imp.editors.rtg"
          download-size="55"
          install-size="190"
-         version="0.1.0.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.strategoxt.imp.testing"
          download-size="72"
          install-size="142"
-         version="1.0.0.201104091523"/>
+         version="0.0.0"/>
 
    <plugin
          id="org.spoofax.terms"
          download-size="100"
          install-size="205"
-         version="1.0.0.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.strategoxt.imp.debug.core"
          download-size="48"
          install-size="100"
-         version="0.1.1.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.strategoxt.imp.debug.stratego.core"
          download-size="99"
          install-size="198"
-         version="0.1.1.201104091523"/>
+         version="0.0.0"/>
 
    <plugin
          id="org.strategoxt.imp.debug.ui"
          download-size="22"
          install-size="37"
-         version="0.1.1.201104091523"
+         version="0.0.0"
          unpack="false"/>
 
    <plugin
          id="org.strategoxt.imp.debug.stratego.runtime"
          download-size="83"
          install-size="143"
-         version="0.1.0.201104091523"/>
+         version="0.0.0"/>
 
    <plugin
          id="org.strategoxt.imp.debug.stratego.transformer"
          download-size="1880"
          install-size="3605"
-         version="0.1.0.201104091523"/>
+         version="0.0.0"/>
 
    <plugin
          id="org.sugarj.compiler"
@@ -322,4 +308,18 @@
          install-size="0"
          version="0.0.0"/>
 
+   <plugin
+         id="org.strategoxt.imp.runtime"
+         download-size="0"
+         install-size="0"
+         version="0.0.0"
+         unpack="false"/>
+
+   <plugin
+         id="org.spoofax.jsglr"
+         download-size="0"
+         install-size="0"
+         version="0.0.0"
+         unpack="false"/>
+
 </feature>

Modified: sugarj/trunk/update-site/site.xml
==============================================================================
--- sugarj/trunk/update-site/site.xml	Fri Apr 29 14:57:55 2011	(r22686)
+++ sugarj/trunk/update-site/site.xml	Fri Apr 29 14:58:50 2011	(r22687)
@@ -3,7 +3,7 @@
    <description name="SugarJ" url="sugarj.org/update">
       SugarJ
    </description>
-   <feature url="features/org.sugarj.editor_1.0.1.201104161011.jar" id="org.sugarj.editor" version="1.0.1.201104161011">
+   <feature url="features/org.sugarj.editor_1.0.3.201104291626.jar" id="org.sugarj.editor" version="1.0.3.201104291626">
       <category name="SugarJ"/>
    </feature>
    <category-def name="SugarJ" label="SugarJ">

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 17:03:41 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 15:03:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22688 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen:
	. sdf
Message-ID: <20110429150341.B27647F8084@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 15:03:40 2011
New Revision: 22688
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22688&sc=1

Log:
* package-wide signature generation is done. Now, build-all will generate a [package-name]-signature file for every package available and store it in the include\ directory for future references .

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Fri Apr 29 14:58:50 2011	(r22687)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Fri Apr 29 15:03:40 2011	(r22688)
@@ -64,7 +64,7 @@
 			<debug-compiler> $[Generate| Generate code for spx-package| Planning to Generate Artifacts : [<pp-aterm>]] 
 		where
 			if should-generate-code-this-package  then 
-				{|GetEnclosingPackageName:
+				{|GetEnclosingPackageName,GeneratedSignature: 
 						rules ( GetEnclosingPackageName := package-typed-qname);
 						enclosed-module-typed-qnames := <get-enclosed-modules>package-typed-qname;
 						<list-loop(
@@ -92,7 +92,8 @@
 				module-decl* := <get-original-module-declaration>module-typed-qname;
 				{|GetEnclosingModuleName:
 						rules( GetEnclosingModuleName := module-typed-qname);
-						<generate-all> module-decl* // generating all the artifacts for the specified module
+						<generate-all> module-decl* ;		// generating all the artifacts for the specified module
+						<emit-package-signature-main>()
 				|};
 				module-abs-path := <DeclaredModule>untyped-qname;
 				where(
@@ -119,6 +120,8 @@
 			?module-qname* ;generate-sdf-main;generate-str-main ; generate-esv-main 
 		<+ 
 			debug(!" Failed in Main Generation. "); fail    
+			
+			
 rules
 	
 	to-generated-artifact-block(adapter, post-coversion-adapter) : list-stmt* -> resultant-block* 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 29 14:58:50 2011	(r22687)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 29 15:03:40 2011	(r22688)
@@ -35,13 +35,38 @@
 	
 			
 rules
+	// temporarily need  for the lwc project 
+	emit-package-signature-main : () -> ()
+	with 
+ 			project-path := <ProjectPath>
+ 			;Package(package-qname)   := <GetEnclosingPackageName>
+ 			;package-name-string			:= <qname-to-string>package-qname
+ 	where 
+			<debug-compiler>$[Codegen|Generating main signature for the packagees]
+			;generated-signatures-string := $[module [package-name-string]-signatures 
+			 	imports 
+					[<map(\s->$[[s]
+				]\)	><all-keys-GeneratedSignature>]	
+			]
+			;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
+	where
+		autogen-dir := $[[project-path]/include]
+	 	;output-path-str 		:=   $[[autogen-dir]/[package-name-string]-signatures.str]
+	 	;output-path-rtree 		:= $[[autogen-dir]/[package-name-string]-signatures.rtree]
+	 	;<ensure-path-exists>(project-path, "include") 
+   	;chdir-to-project-path 
+	where
+		 <save-to-file>( output-path-str, generated-signatures-string)
+		;<save-to-file>(output-path-rtree, signatures-as-aterm-string)
+		;<refresh-workspace-file>output-path-str
+		;<refresh-workspace-file>output-path-rtree
 	
 	emit-default-signatures:
 		() -> ()
 		with 
- 			project-path := <ProjectPath>
- 		where 
-			sig-file-name := "Globals/Singatures"
+ 			project-path := <ProjectPath>;
+ 			sig-file-name := "Globals/Singatures";
+ 			sig-file-rel-path := $[[<Autogenerated-Artifacts-Dir>]/[sig-file-name]]
 		where 
 			<debug-compiler>$[Codegen|Generating deafult signatures]			
 			;generated-signatures-string :=  <get-signature-contents(|sig-file-name,"")><get-all-signatures-as-string(?(Globals(), _))>
@@ -53,11 +78,12 @@
 			;<ensure-path-exists>(project-path, $[[<Autogenerated-Artifacts-Dir>]/Globals]) 
 			;chdir-to-project-path  
 		where
-			<save-to-file>( output-path-str, generated-signatures-string)
+			 <save-to-file>( output-path-str, generated-signatures-string)
 			;<save-to-file>(output-path-rtree, signatures-as-aterm-string)
 			;<refresh-workspace-file>output-path-str
 			;<refresh-workspace-file>output-path-rtree
 		where
+			rules( GeneratedSignature : sig-file-rel-path );    
 			<debug-compiler>$[ Codegen | SDF | Finishing generation of default signature]
 		
 		
@@ -77,7 +103,8 @@
 			;!package-typed-qname => Package(package-untyped-qname)
 			;!modname => SPXModuleName(modulename-string)
 		where 
-			sig-file-name := <get-signature-file-name><qname-to-path>module-untyped-qname
+			sig-file-name     := <get-signature-file-name><qname-to-path>module-untyped-qname;
+			sig-file-rel-path := $[[<Autogenerated-Artifacts-Dir>]/[<qname-to-path>module-untyped-qname]]
 		where 
 			<debug-compiler>$[Codegen|Generating signature for the following module: [<pp-aterm>module-typed-qname]]			
 			;imports-string := $[imports 
@@ -99,7 +126,9 @@
 			;<refresh-workspace-file>output-path-rtree
 			;chdir-to-project-path
 		where
-			<debug-compiler>$[ Codegen | SDF | Finishing generation of Signature for [<pp-aterm> module-untyped-qname].]
+			rules( GeneratedSignature : sig-file-rel-path );
+			<debug-compiler>$[ Codegen | SDF | Finishing generation of Signature for [<pp-aterm> module-untyped-qname].]
+			
 	
 rules 
 

From seba at informatik.uni-marburg.de  Fri Apr 29 17:08:18 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 29 Apr 2011 15:08:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22689 -
	sugarj/trunk/case-studies/text
Message-ID: <20110429150818.92E677F806D@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Fri Apr 29 15:08:18 2011
New Revision: 22689
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22689&sc=1

Log:
fix

Modified:
   sugarj/trunk/case-studies/text/Latex.sugj

Modified: sugarj/trunk/case-studies/text/Latex.sugj
==============================================================================
--- sugarj/trunk/case-studies/text/Latex.sugj	Fri Apr 29 15:03:40 2011	(r22688)
+++ sugarj/trunk/case-studies/text/Latex.sugj	Fri Apr 29 15:08:18 2011	(r22689)
@@ -141,7 +141,7 @@
     pp-latex-command :
       InTextCommand#([com|args]) -> <debug;conc-strings> (com, args-string)
       where
-        <mapconcat(\ a -> <conc-strings> ("{", <pp-latex> a, "}") \); concat-strings> args => args-string
+        <mapconcat-strings(\ a -> <conc-strings> ("{", <pp-latex> a, "}") \)> args => args-string
       
     pp-latex-environment :
       StandardEnvironment(LatexTextEnvironmentName(lname), content, LatexTextEnvironmentName(rname)) ->

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 17:09:16 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 15:09:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22690 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test
Message-ID: <20110429150916.E2BFD7F8080@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 15:09:16 2011
New Revision: 22690
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22690&sc=1

Log:
test spx with multiple package one referring another.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Fri Apr 29 15:08:18 2011	(r22689)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Fri Apr 29 15:09:16 2011	(r22690)
@@ -1,6 +1,25 @@
-package entity-lang
+package test
+	module test-main 
+		imports entity-lang
+		
+		context-free start-symbols 
+    	Start
+
+  	context-free syntax
+	    "module" ID Definition*       -> Start {cons("Module")}
+	    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+	    ID ":" Type                   -> Property {cons("Property")}
+	    ID                            -> Type {cons("Type")}
 
+
+
+
+	    
+package entity-lang
 	module module-main
+		imports 
+			libstratego-lib
+		
 		context-free start-symbols 
     	Start
 
@@ -10,6 +29,10 @@
 	    ID ":" Type                   -> Property {cons("Property")}
 	    ID                            -> Type {cons("Type")}
 
+		rules
+  	 generate-aterm:
+    	(selected, position, ast, path, project-path) -> path
+
 		language General properties
     	name          : entity-lang
   		id            : entity-lang
@@ -40,7 +63,8 @@
 	module entity-builders    
 		imports 
 			entity.Common	  
-			 
+			libstratego-lib
+	 
 		builders
     	builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)
 	 
@@ -79,6 +103,9 @@
   		Definition.Entity
 		 	
 	module common
+		imports 
+			libstratego-lib
+	
 		lexical syntax
    
     [a-zA-Z][a-zA-Z0-9\_]* -> ID

From L.C.L.Kats at tudelft.nl  Fri Apr 29 17:27:40 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Apr 2011 15:27:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22691 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF
Message-ID: <20110429152740.D16FFCC0EE@mx4.tudelft.nl>

Author: LennartKats
Date: Fri Apr 29 15:27:40 2011
New Revision: 22691
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22691&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF	Fri Apr 29 15:09:16 2011	(r22690)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF	Fri Apr 29 15:27:40 2011	(r22691)
@@ -5,7 +5,7 @@
 Bundle-Version: 1.0.0
 Bundle-Activator: org.strategoxt.imp.editors.spoofax.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
-Bundle-ClassPath: include/SpoofaxLang.jar
+Bundle-ClassPath: include/spoofaxlang.jar
 Require-Bundle: org.eclipse.core.runtime,
   org.eclipse.core.resources,
   org.eclipse.imp.runtime,
@@ -19,4 +19,4 @@
   org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
-Export-Package: org.strategoxt.imp.editors.spoofax
+Export-Package: trans, org.strategoxt.imp.editors.spoofax

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 18:00:43 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 16:00:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22692 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax
Message-ID: <20110429160043.113C4CC166@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 16:00:42 2011
New Revision: 22692
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22692&sc=1

Log:
syntax updated . Making package declaration optional 

so it can now support following syntax : 

module test-main 
	imports ...
	
module test-A
	imports ....

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SPXCommon.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SPXCommon.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SPXCommon.sdf	Fri Apr 29 15:27:40 2011	(r22691)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SPXCommon.sdf	Fri Apr 29 16:00:42 2011	(r22692)
@@ -91,6 +91,7 @@
     "restrictions"      -> Reserved
   	"as"								-> Reserved
  		"main"							-> Reserved 
+ 		"_Default"					-> Reserved 
  		
  		Reserved 						-> ReservedName[[ESV]]
  		ReservedName[[ESV]]	-> ID {reject}

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Fri Apr 29 15:27:40 2011	(r22691)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Fri Apr 29 16:00:42 2011	(r22692)
@@ -34,10 +34,10 @@
   context-free syntax
   
 		ImportSection* PackageDefinition* 							-> Start{cons("CompilationUnit") }
-    "package" QName "{" Module*  "}"								-> PackageDefinition {cons("Package"), deprecated("Specify packages without brackets")}
-    MainID? "module" SPXModuleName "{" Section* "}" -> Module {cons("Module"), deprecated("Specify modules without brackets")}
+	  Module* 																				-> Start{cons("CompilationUnit") , prefer}
+    
     "package" QName Module*                         -> PackageDefinition {cons("Package")}
-    MainID? "module" SPXModuleName Section*         -> Module {cons("Module")}
+    MainID? "module" SPXModuleName Section*         				-> Module {cons("Module")}
     
     Grammar[[SDF]] -> Section {cons("SDFSection")}
     Decl[[STR]]    -> Section {cons("STRSection")}

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 18:01:12 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 16:01:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22693 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test
Message-ID: <20110429160112.42B807F8073@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 16:01:12 2011
New Revision: 22693
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22693&sc=1

Log:
* syntax specifying a module with package-declaration

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/test-without-package.spx

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/test-without-package.spx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/test-without-package.spx	Fri Apr 29 16:01:12 2011	(r22693)
@@ -0,0 +1,13 @@
+module test-main 
+		imports entity-lang
+		
+		context-free start-symbols 
+    	Start
+
+  	context-free syntax
+	    "module" ID Definition*       -> Start {cons("Module")}
+	    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+	    ID ":" Type                   -> Property {cons("Property")}
+	    ID                            -> Type {cons("Type")}  
+ 
+ 
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 18:02:58 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 16:02:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22694 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	context normalize
Message-ID: <20110429160258.6EEF67F806A@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 16:02:58 2011
New Revision: 22694
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22694&sc=1

Log:
* support for optional package decl . Now, normalize-all is adding default package if package-name is missing .

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Fri Apr 29 16:01:12 2011	(r22693)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Fri Apr 29 16:02:58 2011	(r22694)
@@ -12,7 +12,9 @@
 	
 
 //TODO : add spxconfig file and move this content to that file 
-
+rules 
+	default_package_name = !"_Default"
+	
 rules 
 	initialize-configuration = 
 		?current-term

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str	Fri Apr 29 16:01:12 2011	(r22693)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str	Fri Apr 29 16:02:58 2011	(r22694)
@@ -305,7 +305,7 @@
 		where 
 			resolved-path := <resolve-legacy-import-path(|<current-source-directory>)>modulename
 			;if (!resolved-path => Unresolved()) then 
-				<debug>$[SymbolTable|storing enclosing imports reference| FAIL <UsingLegacyArtifacts>: [<pp-aterm>i]]
+				<debug-symboltable>$[SymbolTable|storing enclosing imports reference| FAIL <UsingLegacyArtifacts>: [<pp-aterm>i]]
 				;annotated-import-decl :=  <add-annotation(|Unresolved())>i
 			else
 				annotated-import-decl :=  i

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str	Fri Apr 29 16:01:12 2011	(r22693)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str	Fri Apr 29 16:02:58 2011	(r22694)
@@ -14,10 +14,12 @@
 	utils/cache
 imports 
 	common
+	config
+	
 imports 
 	context/scope-tree
 	context/signature	
-
+ 
 //FIX : 
 // Design issues : 
 //		Package Common Imports are only for the current spx file at this moment
@@ -28,6 +30,14 @@
 	nomalize-all = desugar-compilationa-unit
 
 rules	
+	
+	desugar-compilationa-unit: 
+		CompilationUnit(moduledef*) -> 	<desugar-compilationa-unit>CompilationUnit([] , [appneded-default-package-declaration])
+		where 
+			 appneded-default-package-declaration :=  Package(Name(<default_package_name>) , moduledef*)
+	
+	
+	
 	desugar-compilationa-unit: 
 		CompilationUnit(import* , package*) -> 	CompilationUnit( import* , modified-packages) 
 		with 
@@ -43,6 +53,8 @@
 				PackageCommonImports:+ _ -> i
 			)
 	
+	
+	
 	desugar-spx-package:
 		Package(Name(package-name) , modules* ) -> normalized-package-definition
 		with 

From L.C.L.Kats at tudelft.nl  Fri Apr 29 18:57:05 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Apr 2011 16:57:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22695 -
	strategoxt-java-backend/trunk/java/runtime/org/strategoxt
Message-ID: <20110429165705.E430F108C030@mx3.tudelft.nl>

Author: LennartKats
Date: Fri Apr 29 16:57:05 2011
New Revision: 22695
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22695&sc=1

Log:
Minor HybridInterpreter CLI fixes

Modified:
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	Fri Apr 29 16:02:58 2011	(r22694)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	Fri Apr 29 16:57:05 2011	(r22695)
@@ -174,14 +174,14 @@
 					break;
 				}
 			} catch (Exception e) {
-				System.err.println("Could not open input file " + args[i]
+				System.err.println("Could not open input file " + args[i - 1]
 						+ ": " + e.getClass().getSimpleName() + " - "
 						+ e.getMessage());
 				System.exit(126);
 			}
 		}
 		boolean nothingLoaded = i == 0;
-		if (i == args.length || (!nothingLoaded && args[i].indexOf('.') > -1)) {
+		if (i == args.length) {
 			System.err.println(USAGE);
 			System.exit(1);
 		} else if (nothingLoaded && args[i].indexOf('.') > -1) {

From L.C.L.Kats at tudelft.nl  Fri Apr 29 18:58:29 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Apr 2011 16:58:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22696 - in
	spoofax-contrib/Lawoco: . lib trans
Message-ID: <20110429165829.1C65A108C002@mx3.tudelft.nl>

Author: LennartKats
Date: Fri Apr 29 16:58:28 2011
New Revision: 22696
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22696&sc=1

Log:
Found a way to invoke build-spoofax-main by putting spoofaxlang.jar in lib/ for now

Added:
   spoofax-contrib/Lawoco/lib/spoofaxlang.jar   (contents, props changed)
Modified:
   spoofax-contrib/Lawoco/build.main.xml
   spoofax-contrib/Lawoco/trans/analyze.str
   spoofax-contrib/Lawoco/trans/lawoco.str

Modified: spoofax-contrib/Lawoco/build.main.xml
==============================================================================
--- spoofax-contrib/Lawoco/build.main.xml	Fri Apr 29 16:57:05 2011	(r22695)
+++ spoofax-contrib/Lawoco/build.main.xml	Fri Apr 29 16:58:28 2011	(r22696)
@@ -39,7 +39,16 @@
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
     
         <import file="build.generated.xml"/>
+	
+	      <target name="SPXgen">
+	        <java classname="run" failonerror="true">
+            <arg value="${basedir}/lib/spoofaxlang.jar"/>
+	        	<arg value="build-spoofax-main"/>
+	      	  <arg value="-i"/>
+	      	  <arg value="${basedir}"/>
+	      	</java>
+	      </target>
     
         <!-- Main target -->
-        <target name="all" depends="spoofaximp.default.ctree"/>
+        <target name="all" depends="SPXgen, spoofaximp.default.ctree"/>
     </project>
\ No newline at end of file

Added: spoofax-contrib/Lawoco/lib/spoofaxlang.jar
==============================================================================
Binary file. No diff available.

Modified: spoofax-contrib/Lawoco/trans/analyze.str
==============================================================================
--- spoofax-contrib/Lawoco/trans/analyze.str	Fri Apr 29 16:57:05 2011	(r22695)
+++ spoofax-contrib/Lawoco/trans/analyze.str	Fri Apr 29 16:58:28 2011	(r22696)
@@ -1,7 +1,7 @@
 module analyze
 
 imports
-  include/NamingExperiment
+  include/Lawoco-signature
   analysis-library
   types
   lib/analysis-library

Modified: spoofax-contrib/Lawoco/trans/lawoco.str
==============================================================================
--- spoofax-contrib/Lawoco/trans/lawoco.str	Fri Apr 29 16:57:05 2011	(r22695)
+++ spoofax-contrib/Lawoco/trans/lawoco.str	Fri Apr 29 16:58:28 2011	(r22696)
@@ -1,16 +1,15 @@
-module namingexperiment
+module lawoco
 
 imports
   libstratego-lib
   libstratego-gpp
   libstratego-aterm
-  include/NamingExperiment
-  lib/editor-common.generated
+  include/Lawoco-signature
+  lib/-
   analyze
   check
   generate
-  analysis
-  analysis-library
+  analyze
 
 rules // Main editor interface (defined by editor/NamingExperiment-Builders and -References.esv)
   

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 18:59:01 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 16:59:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22697 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: test
	trans/context/sdf
Message-ID: <20110429165901.DA1812B800F@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 16:59:01 2011
New Revision: 22697
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22697&sc=1

Log:
* retrieving the constructor name is updated. Now, it supports new kind of constructor declartion. e.g. Constructor(...)
* Lawoco-Test = Lawco.spx is added in spoofax project and tested with compilation and code generation and editor analyze. So far, it seems to work fine.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Lawoco-Test.spx
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Lawoco-Test.spx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/Lawoco-Test.spx	Fri Apr 29 16:59:01 2011	(r22697)
@@ -0,0 +1,19 @@
+module Lawoco
+	imports entity-lang
+
+context-free syntax
+  
+    "module" Module@=ID Definition*     -> Start {"Module", scope(Entity, Module)}
+    "entity" Entity@=ID "{" Member* "}" -> Definition {"Entity", scope(Property, Function)}
+    Entity at ID Property@=ID              -> Member {"Property"}
+
+    Function@=ID "(" { Param "," }* ")" Stm -> Member {"Function", scope(Var)}
+    Var@=ID ":" Entity at ID           -> Param {"Param"}
+    
+    Function at ID "(" {Exp ","}* ")"      -> Exp {"Call"}        %% or, could be an Entity 
+    "var" Var@=ID ":" Entity at ID         -> Stm {"VarDecl"}
+    "var" Var@=ID ":" Entity at ID "=" Exp -> Stm {"VarDeclInit"}
+    Var at ID "=" Exp                      -> Stm {"Assign"}
+    Var at ID                              -> Exp {"Var"}         %% or, could be a Property!
+    Exp "." Property at ID                 -> Exp {"PropAccess"}
+    "{" Stm* "}"                        -> Stm {"Block", scope(Var)}         
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Fri Apr 29 16:58:28 2011	(r22696)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/entity-lang.spx	Fri Apr 29 16:59:01 2011	(r22697)
@@ -1,4 +1,5 @@
 package test
+	
 	module test-main 
 		imports entity-lang
 		
@@ -14,15 +15,16 @@
 
 
 
-	    
+	     
 package entity-lang
+	
 	module module-main
 		imports 
 			libstratego-lib
 		
 		context-free start-symbols 
     	Start
-
+ 
   	context-free syntax
 	    "module" ID Definition*       -> Start {cons("Module")}
 	    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Fri Apr 29 16:58:28 2011	(r22696)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Fri Apr 29 16:59:01 2011	(r22697)
@@ -3,12 +3,15 @@
 imports 
 	include/SpoofaxLang
 imports		
-	common 
+	common
+	libstrc 
 	utils/debug		
 imports 
 	context/scope-tree
 	context/sdf/declare
-	context/signature	
+	context/signature
+	codegen/sdf/to-name-analysis
+		
 
 // TODO : refactor common functionily in seperate rules/strategy
 // DON'T like several things about this implementation. Need to refactor/re-implement.
@@ -40,18 +43,16 @@
   * Gets the operation name from the Production. It actually search all the attributes 
   * in the attribute list and create  a dynamic rule that stores operation name. 
   */
-  get-opration-name = alltd(store-operation-name)
-  
+  get-opration-name = where(getfirst(fetch-cons-name) ; store-operation-name)  
   
   /**
   *	Store operation name from the RHS of the Production, i.e. from fun constructors.
   * It creates a dynamic rule to store the operation name.
   */
-  store-operation-name : f at fun(quoted( quoted-operation-name) ) -> f
-  	with
-  		opname := <un-double-quote>quoted-operation-name  
-		;rules (get-op-name: _ -> opname)
-  	where 
+  store-operation-name : opname-> opname
+  with  
+		rules (get-op-name: _ -> opname)
+  where 
   		<debug-declaration> $[Operation Name :  [opname]]
 	
 	store-operation-declaration

From L.C.L.Kats at tudelft.nl  Fri Apr 29 18:59:07 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Apr 2011 16:59:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22698 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: .
	.externalToolBuilders META-INF
	editor/java/org/strategoxt/imp/editors/spoofax/strategies
	trans/codegen t...
Message-ID: <20110429165907.0D3222B800B@mx2.tudelft.nl>

Author: LennartKats
Date: Fri Apr 29 16:59:06 2011
New Revision: 22698
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22698&sc=1

Log:
Changes to allow compilation with older STRJ version; removed spoofaxlang-java.jar component.

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/strategies/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders/SpoofaxLang build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders/SpoofaxLang build.main.xml.launch
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders/SpoofaxLang build.main.xml.launch	Fri Apr 29 16:59:01 2011	(r22697)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders/SpoofaxLang build.main.xml.launch	Fri Apr 29 16:59:06 2011	(r22698)
@@ -2,8 +2,12 @@
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
 <stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
 <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.strategoxt.imp.editors.spoofax/build.main.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
 <booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
 <listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
 <listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
@@ -14,7 +18,6 @@
 <booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.spoofax}/build.main.xml"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF	Fri Apr 29 16:59:01 2011	(r22697)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF	Fri Apr 29 16:59:06 2011	(r22698)
@@ -4,8 +4,8 @@
 Bundle-SymbolicName: org.strategoxt.imp.editors.spoofax; singleton:=true
 Bundle-Version: 1.0.0
 Bundle-Activator: org.strategoxt.imp.editors.spoofax.Activator
-Import-Package: org.osgi.framework;version="1.3.0"
-Bundle-ClassPath: include/spoofaxlang.jar
+Bundle-ClassPath: include/spoofaxlang.jar,
+ .
 Require-Bundle: org.eclipse.core.runtime,
   org.eclipse.core.resources,
   org.eclipse.imp.runtime,
@@ -19,4 +19,5 @@
   org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
-Export-Package: trans, org.strategoxt.imp.editors.spoofax
+Export-Package: org.strategoxt.imp.editors.spoofax,
+ trans

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml	Fri Apr 29 16:59:01 2011	(r22697)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml	Fri Apr 29 16:59:06 2011	(r22698)
@@ -4,7 +4,7 @@
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
         <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
     
         <!-- Initialization -->
         <available file="${build}/org/strategoxt/imp/editors/spoofax/strategies/Main.class" property="java.jar.enabled"/>
@@ -16,7 +16,7 @@
         </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
             <isset property="externaldef"/>
         </condition>
         <condition property="externaljarimport" value=":${externaljar}" else="">
@@ -349,7 +349,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/*.generated.str"/>
+                    <exclude name="lib/editor-common.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
@@ -367,7 +367,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/*.generated.str"/>
+                    <exclude name="lib/editor-common.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -416,152 +416,6 @@
             <mkdir dir="${build}/trans"/>
         </target>
                 
-        <!-- begin: targets used for adding debugging instrumentation to stratego -->
-        
-		<!-- 
-			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
-			Only used by stratego.jvm.helper.debug 
-		-->
-		<condition property="transformer-output" value="" else="--output-rtree">
-			<isset property="debug.the.debug.transformer"/>
-		</condition>
-		
-		<!-- 
-			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
-			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
-			Only used by stratego.jvm.helper.debug
-		-->
-		<condition property="strj.input.file.type" value="str" else="rtree">
-			<isset property="debug.the.debug.transformer"/>
-		</condition>
-        
-        <!-- value determines which target will be executed.
-        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
-        	else call stratego.jar
-        -->
-        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
-            <available file=".debugmode"/>
-        </condition>
-		
-		<!-- will save the stratego files with debug info in this folder -->
-		<property name="trans-debug" location="trans-debug"/>
-		
-		<!-- this helper target determines what target to call, based on debug.build.enabled -->
-		<target name="stratego.jar.helper">
-			<antcall target="${stratego.jar.target}"/>
-		</target>
-		
-		<!-- call stratego.jar unless debug.build.enabled property is set --> 
-		<target name="call.stratego.jar" depends="stratego.jar">
-			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
-		</target>
-		
-		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
-		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
-			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
-		</target>
-		
-		<!-- copy stratego runtime jars to utils folder -->
-		<target name="utils-files-debug" depends="utils-files">
-			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
-			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
-		</target>
-		
-	    <!-- Stratego to Java compiler with debugging capabilities -->
-	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
-	        <dependset>
-	            <srcfileset dir="${basedir}">
-	                <include name="**/*.str"/>
-	                <include name="**/*.astr"/>
-	                <exclude name="lib/editor-common.generated.str"/>
-	            </srcfileset>
-	            <targetfileset file="${src-gen}/trans/Main.java"/>
-	        </dependset>
-	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
-	        <antcall target="copy-jar"/>
-	        <antcall target="stratego.jar.deletehelper"/>
-	    	<!-- compile stratego to java -->
-	        <antcall target="stratego.jvm.helper.debug">
-	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
-	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
-	        </antcall>
-	    	<!-- compile java to class -->
-	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
-	    		<!-- attribute in javac: srcdir="${src-gen}" -->
-	    		<src path="${src-gen}"/>
-	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"  -->
-	        	<classpath>
-	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
-	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
-	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
-	        	</classpath>
-	        	<!-- attribute in javac: includes="trans/**"  -->
-	        	<include name="trans/**"/>
-	    	</javac>
-	        <!-- copy imported terms -->
-	        <copy todir="${build}/trans">
-	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
-	        </copy>
-	    	<!-- create a jar from the class files -->
-	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
-	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
-	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
-	    </target>
-		
-		<!-- instrument the stratego program and compile it to java -->
-	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
-	    	<echo message="generate stratego with debug information"/>
-	    	<echo message="${basedir}"/>
-	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
-	    	<!-- add debug information -->
-	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
-	  		     <classpath>
-					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
-	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
-	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
-	  		     </classpath>
-	  			<arg value="-i"/>
-	  			<arg value="${trans}/${strmodule}.str"/>
-	  			<arg value="--gen-dir"/>
-	  			<arg value="${trans-debug}"/>
-	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
-	  			<arg value="${basedir}"/>
-	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
-	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
-	  			
-	  			<!-- arguments should start with two '-'-characters -->
-	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
-	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
-	  			<!-- <arg value="-output-rtree"/> --> 
-	    	</java>
-	    	<!-- now compile instrumented stratego to java -->
-	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
-	        <java classname="org.strategoxt.strj.Main" failonerror="true">
-	            <arg value="-i"/>
-	            <arg value="${trans-debug}/trans/${strmodule}.{strj.input.file.type}"/>
-	            <arg value="-o"/>
-	            <arg value="${build.stratego.outputfile}"/>
-	            <arg value="-p"/>
-	            <arg value="trans"/>
-	            <arg value="--library"/>
-	            <arg value="--clean"/>
-	            <arg line="${build.stratego.args}"/>
-	            <arg line="${build.stratego.extraargs}"/>
-	            <arg line="${externaljarflags}"/>
-	            <arg line="${externaldefimport}"/>
-	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
-	        	<!-- put strategodebuglib.rtree on the include path -->
-	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
-	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
-	        </java>
-	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
-	        <mkdir dir="${build}/trans"/>
-	    </target>
-        
-        
-        <!-- end: targets used for adding debugging instrumentation to stratego -->
-
-
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.properties
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.properties	Fri Apr 29 16:59:01 2011	(r22697)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.properties	Fri Apr 29 16:59:06 2011	(r22698)
@@ -5,4 +5,5 @@
                include/,\
                bin/,\
                lib/,\
-               .
+               .,\
+               include/spoofaxlang.jar

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Fri Apr 29 16:59:01 2011	(r22697)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Fri Apr 29 16:59:06 2011	(r22698)
@@ -25,10 +25,11 @@
 		arg  -> "" // local directory path is specified 
 		where 
 		xtc-io-wrap(
+		    ?FILE(input);
 				editor-init; 						         // cleaning up and initializing editors
 				initialize-configuration;        // initializes configuration and setting up enviroment variables
 				rules(NoDebugInfo: _);           // HACK: disable origin use for now
-				rules(ProjectPath := <getcwd>);  // Assumption, it will run from command prompt. Hence, setting getcwd as the project path.
+				rules(ProjectPath := input);
 				// Overriding spx.config configured source directory. 
 				// Comment this line if sources configured in the spx.config should be activated
 				<override-configured-source-directories><abspath>arg;

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 29 16:59:01 2011	(r22697)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 29 16:59:06 2011	(r22698)
@@ -45,7 +45,7 @@
 			<debug-compiler>$[Codegen|Generating main signature for the packagees]
 			;generated-signatures-string := $[module [package-name-string]-signatures 
 			 	imports 
-					[<map(\s->$[[s]
+					[<map(\s -> $[[s]
 				]\)	><all-keys-GeneratedSignature>]	
 			]
 			;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 29 16:59:01 2011	(r22697)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 29 16:59:06 2011	(r22698)
@@ -128,7 +128,7 @@
 						 
 			
 	to-str-import: 
-		package-name-> [Import(package-name) , Import(<get-signature-file-name>package-name)]
+		package-name -> [Import(package-name) , Import(<get-signature-file-name>package-name)]
 		where 
 			<is-string>package-name
 			

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 21:06:25 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 19:06:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22699 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	analyze codegen codegen/esv codegen/sdf codegen/str
	context/str editor utils
Message-ID: <20110429190625.315097F8019@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 19:06:24 2011
New Revision: 22699
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22699&sc=1

Log:
added get-project-path = (ProjectPath <+ project-path)

for some reason, primitives are not working from the main-strategy

* project-path
* refresh-workspace-file 

Hence, added different strategy to by-pass primitives

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-name-analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -17,6 +17,7 @@
 	lib/editor-common.generated
 imports 
 	utils/contract 	
+	spoofaxlang
 	
 rules			// Analyze Semantic Errors 
 			
@@ -164,7 +165,7 @@
 	      // We only collect-om since we don't want inner warning dupes
 	      error*   := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-error)>), conc)> ast;
 	      warning* := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-warning)>), conc)> ast;
-	      if <file-exists> $[[<project-path>]/.disable-global-analysis] then
+	      if <file-exists> $[[<get-project-path>]/.disable-global-analysis] then
 	        serror* := []
 	      else
 	        serror* := <collect-om(context-free-syntax-sort-error, conc)> ast
@@ -179,7 +180,7 @@
     // We only collect-om since we don't want inner warning dupes
     error*   := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-error)>), conc)> ast;
     warning* := <collect-om(?context-free-syntax(<collect-om(context-free-syntax-warning)>), conc)> ast;
-    if <file-exists> $[[<project-path>]/.disable-global-analysis] then
+    if <file-exists> $[[<get-project-path>]/.disable-global-analysis] then
       serror* := []
     else
       serror* := <collect-om(context-free-syntax-sort-error, conc)> ast

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -23,12 +23,12 @@
 		where
 			 <dirname; ensure-directory-exists>autogen-ant-output-path  
 			;<save-to-file>(autogen-ant-output-path  , <get-ant-autogeneratedscript>())
-			;<refresh-workspace-file>autogen-ant-output-path   
+			;<refresh-file>autogen-ant-output-path   
 		where
 			packages-specific-ant-string := <packages-specific-ant>(package-qnames*, main-ant-output-file-name ,autogen-ant-output-file-name);
 			<dirname; ensure-directory-exists>main-ant-output-path;  
 			<save-to-file>(main-ant-output-path,packages-specific-ant-string);
-			<refresh-workspace-file>main-ant-output-path
+			<refresh-file>main-ant-output-path
 	
 		packages-specific-ant: (pakage-qname*, main-ant-output-file-name ,autogen-ant-output-file-name)  ->
 $[<?xml version="1.0" encoding="UTF-8" ?>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -67,7 +67,7 @@
 			//TODO : create a consistent namming for the file name + move it to lib 
 			;output-path := <get-main-esv-output-path(|"esv")>(autogen-root-directory , package-qname)   
 			;<WriteToBinaryFile>(output-path ,esv-aterm)
-			;<refresh-workspace-file>output-path
+			;<refresh-file>output-path
 			;chdir-to-project-path
 		where
 			<debug-compiler>$[ Codegen | ESV | Finishing generation of packed esv for [<pp-aterm>package-qname].]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -25,9 +25,13 @@
 	utils/debug
 	utils/cache
 	analyze/main
+	codegen/generate
 
-strategies 
+rules 
+	//refresh-file = refresh-workspace-file //temporarily disabling refresh for running the main strategy
+	refresh-file = id
 	
+strategies 
 	build-all = 
 		?current-term
 		;enable-compiler-debugging

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -24,18 +24,20 @@
 	build-spoofax-main:
 		arg  -> "" // local directory path is specified 
 		where 
-		xtc-io-wrap(
+			xtc-io-wrap(
 		    ?FILE(input);
 				editor-init; 						         // cleaning up and initializing editors
-				initialize-configuration;        // initializes configuration and setting up enviroment variables
 				rules(NoDebugInfo: _);           // HACK: disable origin use for now
 				rules(ProjectPath := input);
+				<chdir>input;
+				initialize-configuration;        // initializes configuration and setting up enviroment variables
 				// Overriding spx.config configured source directory. 
 				// Comment this line if sources configured in the spx.config should be activated
-				<override-configured-source-directories><abspath>arg;
+				//<override-configured-source-directories><abspath>arg;
 				<show-configuration;debug>();     //show configuration for this spx project
-				<build-all>()                     //building all the spx files in the sources directory
-				
+				<build-all>();                     //building all the spx files in the sources directory
+				<debug>$["-----------Build-all succeeds-----------------"];
+				!FILE($[[input]/.shadowdir/Globals/Singatures.str])	 //HACK : just to ensure this strategy is not failing ...
 			<+
 				prim("SSL_stacktrace_get_all_frame_names") ; report-failure
 		)
@@ -52,10 +54,9 @@
 		where
 			debug(!"=============starting compile-all ===================")
 		with 
-			editor-init;
-		  initialize-configuration
-		with
-			rules(ProjectPath := project-path)
+			editor-init
+		 ;rules(ProjectPath := project-path)
+		 ;initialize-configuration
 		with
 	  	<build-all>()
 		
@@ -70,6 +71,8 @@
 		  initialize-configuration
 		where
 			<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
+		with
+			rules(ProjectPath := project-path)
 		with 
 			debug(!"=============starting compile-all ===================");
 			<compile-all>()

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-name-analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-name-analysis.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-name-analysis.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -4,7 +4,7 @@
   lib/editor-common.generated
   context/sdf/declare-signature
   context/sdf/declare
-  include/spoofaxlang
+  include/spoofaxlang 
   analyze/sdf/check
   
 rules
@@ -92,7 +92,7 @@
       cons := <getfirst(fetch-cons-name)> a*
   
   fetch-annotate-names-rule:
-    prod(p*, _, attrs(a*)) ->
+    prod(p*, _, attrs(a*)) -> 
     RDefT(
       "nam-annotate-names"
     , []
@@ -115,7 +115,7 @@
   //       e.g. Var@=ID?
   
   namespace-def-to-x(set-namespace):
-    namespacedef(<set-namespace>, _) -> Var("x")
+    namespacedef(<set-namespace>, _) -> Var("x") 
   
   non-terminal-to-wld:
     <is-non-terminal> -> Wld()

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -24,7 +24,7 @@
 	utils/debug
 imports 	 
 	codegen/main
-	codegen/generate 
+	codegen/generate  
 	utils/contract
 	
       
@@ -53,7 +53,7 @@
    		;<ensure-exists>(autogen-root-directory, package-untyped-qname)
 			;output-path     := <get-output-path(|"sdf")>(autogen-root-directory , module-untyped-qname) 
 			; <save-to-file>(output-path , sdf-string )
-			;<refresh-workspace-file>output-path
+			;<refresh-file>output-path
 			;chdir-to-project-path
 			;<debug-compiler>$[ Codegen | SDF | Finishing generation of SDF for [<pp-aterm> module-untyped-qname].] 
 		
@@ -79,7 +79,7 @@
 			;<ensure-exists>(autogen-root-directory , package-qname)
 			;output-path := <get-main-output-path(|"sdf")>(autogen-root-directory , package-qname)   
 			;<save-to-file>(output-path , sdf-string )
-	 		;<refresh-workspace-file>output-path
+	 		;<refresh-file>output-path
 			;chdir-to-project-path
 			;<debug-compiler>$[ Codegen | SDF | Finishing generation of Main SDF Module of package : [<pp-aterm> package-qname].]
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -15,6 +15,8 @@
 imports
 	codegen/compile
 	codegen/main
+	codegen/generate
+	
 	context/signature
 	normalize/signatures
 imports 
@@ -58,8 +60,8 @@
 	where
 		 <save-to-file>( output-path-str, generated-signatures-string)
 		;<save-to-file>(output-path-rtree, signatures-as-aterm-string)
-		;<refresh-workspace-file>output-path-str
-		;<refresh-workspace-file>output-path-rtree
+		;<refresh-file>output-path-str
+		;<refresh-file>output-path-rtree
 	
 	emit-default-signatures:
 		() -> ()
@@ -80,8 +82,8 @@
 		where
 			 <save-to-file>( output-path-str, generated-signatures-string)
 			;<save-to-file>(output-path-rtree, signatures-as-aterm-string)
-			;<refresh-workspace-file>output-path-str
-			;<refresh-workspace-file>output-path-rtree
+			;<refresh-file>output-path-str
+			;<refresh-file>output-path-rtree
 		where
 			rules( GeneratedSignature : sig-file-rel-path );    
 			<debug-compiler>$[ Codegen | SDF | Finishing generation of default signature]
@@ -122,8 +124,8 @@
 			;<ensure-exists>( autogen-dir , package-untyped-qname ) 
 			;<save-to-file>( output-path-str, generated-signatures-string)
 			;<save-to-file>( output-path-rtree, signatures-as-aterm-string)
-			;<refresh-workspace-file>output-path-str
-			;<refresh-workspace-file>output-path-rtree
+			;<refresh-file>output-path-str
+			;<refresh-file>output-path-rtree 
 			;chdir-to-project-path
 		where
 			rules( GeneratedSignature : sig-file-rel-path );

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -58,8 +58,8 @@
 			;chdir-to-project-path 
 			;<save-to-file>( output-path-str, str-string )
 			;<WriteToBinaryFile>( output-path-rtree, str-aterm)
-			;<refresh-workspace-file>output-path-str
-			;<refresh-workspace-file>output-path-rtree
+			;<refresh-file>output-path-str
+			;<refresh-file>output-path-rtree
 		  ;<debug-compiler>$[ Codegen | STR | Finishing generation of following module: [<pp-aterm> module-untyped-qname].]
 	
 	
@@ -98,8 +98,8 @@
 			;output-path-rtree := <get-main-output-path(|"rtree")>(autogen-root-directory , package-qname)   
 			;<save-to-file>(output-path-str ,   str-string)		// saving str string 		
 			;<WriteToBinaryFile>(output-path-rtree , str-aterm ) // saving rtree 
-	 		;<refresh-workspace-file>output-path-str
-			;<refresh-workspace-file>output-path-rtree
+	 		;<refresh-file>output-path-str 
+			;<refresh-file>output-path-rtree
 			;<debug-compiler>$[ Codegen | STR | Finishing generation of Main STR Module of package : [<pp-aterm> package-qname].] 
 			
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -9,9 +9,8 @@
 	utils/debug
 	lib/configuration/SpoofaxConfiguration
 	lib/editor-common.generated
+	spoofaxlang
 	
-
-//TODO : add spxconfig file and move this content to that file 
 rules 
 	default_package_name = !"_Default"
 	
@@ -157,7 +156,7 @@
 
 	// Returns all the resolved directories 	
 	get-all-includes  = 
- 	<conc>(<get-all-sources(|<project-path>)> ,   <get-sources-from-external-projects>)
+ 	<conc>(<get-all-sources(|<get-project-path>)> ,   <get-sources-from-external-projects>)
  	;make-set
  
  

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -17,7 +17,8 @@
 	config 
 imports 
 	context/str/signature-generator
-	context/scope-tree   
+	context/scope-tree 
+	spoofaxlang  
  
 
 rules 
@@ -447,13 +448,13 @@
      x -> full-path
      where
         // FIXME: fetch true import paths from someplace
-   			full-path := <file-exists> $[[<project-path>]/[x]]
-     <+ full-path := <file-exists> $[[<project-path>]/trans/[x]]
-     <+ full-path := <file-exists> $[[<project-path>]/lib/[x]]
-     <+ full-path := <file-exists> $[[<project-path>]/src/[x]]
-     <+ full-path := <file-exists> $[[<project-path>]/syntax/[x]]
-     <+ full-path := <file-exists> $[[<project-path>]/syn/[x]]
-     <+ full-path := <file-exists> $[[<project-path>]/src/syntax/[x]]
+   			full-path := <file-exists> $[[<get-project-path>]/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/trans/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/lib/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/src/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/syntax/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/syn/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/src/syntax/[x]]
  
   fetch-library-ast:
     x -> <pack-stratego-parse-stratego> (IncludeFromPath(x), [])

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -14,15 +14,15 @@
 	
 rules
 	//editor-complete 
-	
-	
-	
+
 rules
 	//editor-analyze	
  	editor-analyze: (ast, path, project-path) -> (ast, errors, warnings, infos) // TODO : ast -> get the analyzed AST 
     with 
-			editor-init;
-		  initialize-configuration
+			editor-init
+		with
+			rules(ProjectPath := project-path)
+			;initialize-configuration
 		with 
 			abs-path := <concat-strings;string-replace(|"\\", "/")>[project-path, "/" ,path]  
 		with 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -36,8 +36,13 @@
 imports
 	 editor/main
 	 codegen/main
-
+	
+rules 
+	get-project-path = (ProjectPath <+ project-path)
+ 
+	
 rules  
+   
   editor-complete:
     (node, position, ast, path, project-path) -> proposals
     where

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -6,6 +6,7 @@
 	common
 	utils/debug
 	include/spoofaxlang
+	spoofaxlang
 
 rules 
 	
@@ -101,7 +102,7 @@
       ;<chdir>folder-name 		    
   
   chdir-to-project-path =  
-  <chdir><project-path>   
+  <chdir><get-project-path>   
 
 rules 
 	spx-precompiled-cache-path = 
@@ -117,7 +118,7 @@
 	spx-cache-path(|extension-prefix):
     full-path -> cache-path
     with
-      project-path := <project-path>;
+      project-path := <get-project-path>;
       cache-dir    := <file-exists <+ mkdir> $[[project-path]/.spxcache];
       full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
       cache-path   := $[[cache-dir]/[full-path'].[extension-prefix]]
@@ -131,7 +132,7 @@
 		 where (is-string);
 		 {| SourceDir, ProjectDir:
 		 		rules( 
-		 			ProjectDir  := <project-path>
+		 			ProjectDir  := <get-project-path>
 		 			SourceDir		:= sourcedir 
 		 		);	
 			 		 try-resolve-as-sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str	Fri Apr 29 16:59:06 2011	(r22698)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str	Fri Apr 29 19:06:24 2011	(r22699)
@@ -3,7 +3,7 @@
 imports
   lib/editor-common.generated
   libstrc
-
+	spoofaxlang
 rules
   
   get-source-base-dir: mod at Module(x, _) -> mod
@@ -17,7 +17,7 @@
         ; implode-string(|'/') => basedir
         ; rules(SourceDir := basedir)
         
-  get-soure-base-dir = project-path
+  get-soure-base-dir = get-project-path
           
 rules  // string utils
   

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 21:08:25 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 19:08:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22700 -
	spoofax-contrib/Lawoco/lib
Message-ID: <20110429190825.35B22108C002@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 19:08:25 2011
New Revision: 22700
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22700&sc=1

Log:
* lib with main strategy fixed. Now it can generate all the artifacts from the main strategy using ANT script

Modified:
   spoofax-contrib/Lawoco/lib/spoofaxlang.jar

Modified: spoofax-contrib/Lawoco/lib/spoofaxlang.jar
==============================================================================
Binary file (source and/or target). No diff available.

From M.A.Akhter at student.tudelft.nl  Fri Apr 29 21:32:23 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 29 Apr 2011 19:32:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22701 -
	spoofax-contrib/Lawoco/syntax
Message-ID: <20110429193223.2A8732B800C@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Apr 29 19:32:22 2011
New Revision: 22701
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22701&sc=1

Log:
new syntax without any package declaration , by default it is emiting code in _Default package.

Modified:
   spoofax-contrib/Lawoco/syntax/Common.spx
   spoofax-contrib/Lawoco/syntax/Lawoco.spx

Modified: spoofax-contrib/Lawoco/syntax/Common.spx
==============================================================================
--- spoofax-contrib/Lawoco/syntax/Common.spx	Fri Apr 29 19:08:25 2011	(r22700)
+++ spoofax-contrib/Lawoco/syntax/Common.spx	Fri Apr 29 19:32:22 2011	(r22701)
@@ -1,5 +1,3 @@
-package Lawoco
-
 module Common
 
   lexical syntax

Modified: spoofax-contrib/Lawoco/syntax/Lawoco.spx
==============================================================================
--- spoofax-contrib/Lawoco/syntax/Lawoco.spx	Fri Apr 29 19:08:25 2011	(r22700)
+++ spoofax-contrib/Lawoco/syntax/Lawoco.spx	Fri Apr 29 19:32:22 2011	(r22701)
@@ -1,5 +1,3 @@
-package Lawoco
-
 module Lawoco
 
 context-free syntax
@@ -17,4 +15,4 @@
     Var at ID "=" Exp                      -> Stm {"Assign"}
     Var at ID                              -> Exp {"Var"}         %% or, could be a Property!
     Exp "." Property at ID                 -> Exp {"PropAccess"}
-    "{" Stm* "}"                        -> Stm {"Block", scope(Var)}
\ No newline at end of file
+    "{" Stm* "}"                        -> Stm {"Block", scope(Var)}   
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Sat Apr 30 20:55:29 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 30 Apr 2011 18:55:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22702 -
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
Message-ID: <20110430185529.911C3108C01C@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Apr 30 18:55:28 2011
New Revision: 22702
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22702&sc=1

Log:
* new descriptor builder for loading generated packed ESV 
* Main task of this builder is to load the descriptors

Added:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxDescriptorBuilder.java

Added: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxDescriptorBuilder.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxDescriptorBuilder.java	Sat Apr 30 18:55:28 2011	(r22702)
@@ -0,0 +1,110 @@
+package org.strategoxt.imp.metatooling.building;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.net.URI;
+
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.IWorkspace;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.strategoxt.imp.metatooling.loading.DynamicDescriptorLoader;
+import org.strategoxt.imp.runtime.Environment;
+
+/**
+ * Triggers descriptor building and loading from an Ant build file.
+ */
+public class AntSpxDescriptorBuilder {
+
+	private static volatile boolean active;
+
+	public static void main(String[] args) {
+
+		if (args == null || args.length == 0)
+			throw new IllegalArgumentException("Descriptor file expected");
+
+
+		DynamicDescriptorBuilder builder = DynamicDescriptorBuilder.getInstance();
+		if (builder.isAntBuildDisallowed())
+			throw new IllegalStateException("Cannot load new editor at this time: try again after background loading is completed");
+
+		Environment.getStrategoLock().lock();
+		try {
+			active = true;
+			try {
+				String descriptor = args[0]; // esv-main.packed.esv file name is specified 
+
+				IResource source = getResource(descriptor);
+
+				if (!source.exists()) {
+					Environment.logException("Could not find descriptor:" + source, new FileNotFoundException(source.getFullPath().toOSString()));
+					System.err.println("Build failed: could not find descriptor " + source);
+					System.exit(1);
+				}
+				
+				boolean success = loadEditorService(source , new NullProgressMonitor());
+
+				if (!success) {
+					System.err.println("Build failed; see error log.");
+					System.exit(1);
+				}
+			} finally {
+				active = false;
+			}
+		} finally {
+			Environment.getStrategoLock().unlock();
+		}
+	}
+
+
+	public static boolean isActive() {
+		return active;
+	}
+
+	private static IResource getResource(String file) {
+		File fileRef = new File(file);
+		try {
+			fileRef = fileRef.getCanonicalFile();
+		} catch (IOException e) {
+			Environment.logException(e);
+		}
+		URI uri = fileRef.toURI();
+		IWorkspace workspace = ResourcesPlugin.getWorkspace();
+		IResource[] resources = workspace.getRoot().findFilesForLocationURI(uri);
+		if (resources.length == 0)
+			throw new IllegalArgumentException("File not in workspace: " + file);
+
+		IResource resource = resources[0];
+		return resource;
+	}
+
+	
+	private static boolean loadEditorService(IResource descriptor, IProgressMonitor monitor) {
+		IPath location = descriptor.getRawLocation();
+		if (location == null) return false;
+	
+		try {
+			monitor.setTaskName("Loading " + descriptor.getName());
+			
+			if (descriptor.exists()) {
+				Environment.assertLock();
+				monitor.setTaskName("Loading " + descriptor.getName());
+				if (AntSpxDescriptorBuilder.isActive())
+					System.err.println("Loading new editor services");
+
+				DynamicDescriptorLoader.getInstance().loadPackedDescriptor(descriptor);
+
+				monitor.setTaskName(null);
+			}
+			return true;
+
+		} catch (Exception e) {
+			Environment.logException("Unable to load new editor services for " + descriptor, e);
+			return false;
+		}
+	}
+
+}

