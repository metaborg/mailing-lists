From srabbelier at gmail.com  Thu Dec  1 15:46:47 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:46:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23664 -
	spoofax/trunk/org.spoofax.jssglr/trans
Message-ID: <20111201144647.C77C52B8020@mx2.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:46:47 2011
New Revision: 23664
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23664&sc=1

Log:
Add parsetable to-js script

Added:
   spoofax/trunk/org.spoofax.jssglr/trans/
   spoofax/trunk/org.spoofax.jssglr/trans/to-js.str

Added: spoofax/trunk/org.spoofax.jssglr/trans/to-js.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/org.spoofax.jssglr/trans/to-js.str	Thu Dec  1 14:46:47 2011	(r23664)
@@ -0,0 +1,596 @@
+module to-js
+
+imports
+	libstratego-lib
+	libstratego-xtc
+
+strategies
+
+  main-to-js =
+    xtc-io-wrap(
+      read-from;
+      to-js;
+      print-to
+    )
+
+  debug-elem:
+  	t -> t
+  	with t' := <ElementName>
+  	with c := <Count>
+  	with <debug(!"element: ")>(t, t', c)
+
+  to-js:
+  	t -> result
+	with bottomup(try(analyze-ctors))
+	with bottomup(try(analyze-trees))
+	with all-keys-Count; filter(reused-element); sort-elements; map(name-element)
+	with ctors := <all-keys-CtorPos; filter(reused-element); map(output-ctor); separate; concat-strings>
+	with trees := <all-keys-TreePos; filter(reused-element); map(output-tree); separate; concat-strings>
+	// with all-keys-ElementName; map(debug-elem)
+	with escaped := <escape-lookup-js>t
+	with result := $<
+  		define(function(require, exports, module) {
+
+		var jssglr = require("ace/jssglr_pretty");
+		
+		var WebDSL = exports.WebDSL = function() {
+		    jssglr.load();
+		    this.factory = spoofax.factory;
+		};
+		
+		(function() {
+		
+			this.parse = function() {
+			
+				var _f = this.factory;
+
+				var parseArg = function(arg) {
+				    var type = Object.prototype.toString.call(arg);
+				    if(type === '[object Array]') {
+				        return _f.makeList(parseArgs(arg), null);
+				    }
+				    if(type === '[object Number]') {
+				        return _f.makeInt(arg);
+				    }
+				    if(type === '[object String]') {
+				        return _f.makeString(arg);
+				    }
+				    return arg;
+				}
+				
+				var parseArgs = function(args) {
+				    var length = args.length;
+				    var result = [];
+				    for(var i = 0; i $<$ length; i++) {
+				        var arg = args[i];
+				        var parsed = parseArg(arg);
+				        result.push(parsed);
+				    }
+				    return result;
+				}
+
+				var accept = _f.makeAppl(_f.makeConstructor('accept', arguments.length), parseArgs(arguments), null);
+				var action = function() { return _f.makeAppl(_f.makeConstructor('action', arguments.length), parseArgs(arguments), null); };
+				var alt = function() { return _f.makeAppl(_f.makeConstructor('alt', arguments.length), parseArgs(arguments), null); };
+				var ass0c = _f.makeAppl(_f.makeConstructor('assoc', arguments.length), parseArgs(arguments), null);
+				var assoc = function() { return _f.makeAppl(_f.makeConstructor('assoc', arguments.length), parseArgs(arguments), null); };
+				var arg_gtr_prio = function() { return _f.makeAppl(_f.makeConstructor('arg-gtr-prio', arguments.length), parseArgs(arguments), null); };
+				var attrs = function() { return _f.makeAppl(_f.makeConstructor('attrs', arguments.length), parseArgs(arguments), null); };
+				var avoid = _f.makeAppl(_f.makeConstructor('avoid', arguments.length), parseArgs(arguments), null);
+				var bracket = _f.makeAppl(_f.makeConstructor('bracket', arguments.length), parseArgs(arguments), null);
+				var cf = function() { return _f.makeAppl(_f.makeConstructor('cf', arguments.length), parseArgs(arguments), null); };
+				var _class = function() { return _f.makeAppl(_f.makeConstructor('class', arguments.length), parseArgs(arguments), null); };
+				var char_class = function() { return _f.makeAppl(_f.makeConstructor('char-class', arguments.length), parseArgs(arguments), null); };
+				var cons = function() { return _f.makeAppl(_f.makeConstructor('cons', arguments.length), parseArgs(arguments), null); };
+				var deprecated = function() { return _f.makeAppl(_f.makeConstructor('deprecated', arguments.length), parseArgs(arguments), null); };
+				var follow_restriction = function() { return _f.makeAppl(_f.makeConstructor('follow-restriction', arguments.length), parseArgs(arguments), null); };
+				var _goto = function() { return _f.makeAppl(_f.makeConstructor('goto', arguments.length), parseArgs(arguments), null); };
+				var gtr_prio = function() { return _f.makeAppl(_f.makeConstructor('gtr-prio', arguments.length), parseArgs(arguments), null); };
+				var indentpadding = _f.makeAppl(_f.makeConstructor('indentpadding', arguments.length), parseArgs(arguments), null);
+				var iter = function() { return _f.makeAppl(_f.makeConstructor('iter', arguments.length), parseArgs(arguments), null); };
+				var iter_sep = function() { return _f.makeAppl(_f.makeConstructor('iter-sep', arguments.length), parseArgs(arguments), null); };
+				var iter_star = function() { return _f.makeAppl(_f.makeConstructor('iter-star', arguments.length), parseArgs(arguments), null); };
+				var iter_star_sep = function() { return _f.makeAppl(_f.makeConstructor('iter-star-sep', arguments.length), parseArgs(arguments), null); };
+				var label = function() { return _f.makeAppl(_f.makeConstructor('label', arguments.length), parseArgs(arguments), null); };
+				var layout = _f.makeAppl(_f.makeConstructor('layout', arguments.length), parseArgs(arguments), null);
+				var left = _f.makeAppl(_f.makeConstructor('left', arguments.length), parseArgs(arguments), null);
+				var lex = function() { return _f.makeAppl(_f.makeConstructor('lex', arguments.length), parseArgs(arguments), null); };
+				var lit = function() { return _f.makeAppl(_f.makeConstructor('lit', arguments.length), parseArgs(arguments), null); };
+				var look = function() { return _f.makeAppl(_f.makeConstructor('look', arguments.length), parseArgs(arguments), null); };
+				var no_attrs = _f.makeAppl(_f.makeConstructor('no-attrs', arguments.length), parseArgs(arguments), null);
+				var non_assoc = _f.makeAppl(_f.makeConstructor('non-assoc', arguments.length), parseArgs(arguments), null);
+				var opt = function() { return _f.makeAppl(_f.makeConstructor('opt', arguments.length), parseArgs(arguments), null); };
+				var parameterized_sort = function() { return _f.makeAppl(_f.makeConstructor('parameterized-sort', arguments.length), parseArgs(arguments), null); };
+				var parse_table = function() { return _f.makeAppl(_f.makeConstructor('parse-table', arguments.length), parseArgs(arguments), null);};
+				var prefer = _f.makeAppl(_f.makeConstructor('prefer', arguments.length), parseArgs(arguments), null);
+				var prio = function() { return _f.makeAppl(_f.makeConstructor('prio', arguments.length), parseArgs(arguments), null); };
+				var priorities = function() { return _f.makeAppl(_f.makeConstructor('priorities', arguments.length), parseArgs(arguments), null); };
+				var prod = function() { return _f.makeAppl(_f.makeConstructor('prod', arguments.length), parseArgs(arguments), null); };
+				var range = function() { return _f.makeAppl(_f.makeConstructor('range', arguments.length), parseArgs(arguments), null); };
+				var recover = _f.makeAppl(_f.makeConstructor('recover', arguments.length), parseArgs(arguments), null);
+				var rec = function() { return _f.makeAppl(_f.makeConstructor('rec', arguments.length), parseArgs(arguments), null); };
+				var reduce = function() { return _f.makeAppl(_f.makeConstructor('reduce', arguments.length), parseArgs(arguments), null); };
+				var reject = _f.makeAppl(_f.makeConstructor('reject', arguments.length), parseArgs(arguments), null);
+				var restriction = function() { return _f.makeAppl(_f.makeConstructor('restriction', arguments.length), parseArgs(arguments), null); };
+				var right = _f.makeAppl(_f.makeConstructor('right', arguments.length), parseArgs(arguments), null);
+				var sep = function() { return _f.makeAppl(_f.makeConstructor('sep', arguments.length), parseArgs(arguments), null); };
+				var seq = function() { return _f.makeAppl(_f.makeConstructor('seq', arguments.length), parseArgs(arguments), null); };
+				var shift = function() { return _f.makeAppl(_f.makeConstructor('shift', arguments.length), parseArgs(arguments), null); };
+				var sort = function() { return _f.makeAppl(_f.makeConstructor('sort', arguments.length), parseArgs(arguments), null); };
+				var star = function() { return _f.makeAppl(_f.makeConstructor('star', arguments.length), parseArgs(arguments), null); };
+				var state_rec = function() { return _f.makeAppl(_f.makeConstructor('state-rec', arguments.length), parseArgs(arguments), null); };
+				var states = function() { return _f.makeAppl(_f.makeConstructor('states', arguments.length), parseArgs(arguments), null); };
+				var table = function() { return _f.makeAppl(_f.makeConstructor('table', arguments.length), parseArgs(arguments), null); };
+				var term = function() { return _f.makeAppl(_f.makeConstructor('term', arguments.length), parseArgs(arguments), null); };
+				
+				var <ctors>;
+				var <trees>;
+				
+				return <escaped>;
+			};
+
+		}).call(WebDSL.prototype);
+		
+		});
+  	>
+  	
+  	compare-element = ?(a,b); <gt>(<Count>a, <Count>b)
+  	
+  	sort-elements = qsort(compare-element)
+
+	// separate = separate-by(|",\n")
+	separate = separate-by(|",")
+
+	output-ctor:
+		// t at Constructor(name) -> $[[v] = [name] // [count]]
+		t at Constructor(name) -> $[[v]=[name]]
+		with v := <ElementName>t
+		with count := <Count>t
+	
+	output-tree:
+		// t -> $[[v] = [t'] // [count]]
+		t -> $[[v]=[t']]
+		with t' := <escape-js>t
+		with v := <ElementName>t
+		with count := <Count>t
+		
+	reused-element:
+		t -> t
+		where count := <Count>t
+		where <gt>(count, 3)
+
+	analyze-trees:
+		t -> t
+		where not(<is-string>t)
+		where not(<is-int>t)
+		where not(<Count>t)
+		with rules(
+				Count: t -> 1
+				TreePos: t -> t
+			)
+
+	analyze-trees:
+		t -> t
+		where not(<is-string>t)
+		where not(<is-int>t)
+		with new := <Count; inc>t
+		with rules(
+			Count: t -> new
+			TreePos: t -> t
+		)
+
+	escape-lookup-js:
+		t -> t'
+		where reused-element
+		with t' := <ElementName>t
+	
+	escape-lookup-js:
+		t -> $["[t']"]
+		where is-string
+		with t' := <escape>t
+		
+	escape-lookup-js:
+		t -> <escape-js>t
+
+	count-name(|t):
+		rawname -> t
+		with name := Constructor(rawname)
+		where not(<Count>name)
+		with rules(
+			Count: name -> 1 
+			CtorPos: name -> name
+		)
+		
+	count-name(|t):
+		rawname -> t
+		with name := Constructor(rawname)
+		with new := <Count; inc>name
+		with rules(
+			Count: name -> new
+		)
+
+	lookup-name:
+		t -> t'
+		where t' := <ElementName>Constructor(t)
+		
+	lookup-name:
+		t -> t
+
+	inc-secondary-counter:
+		t -> 0
+		where not(SecondaryCounter)
+		with rules (
+			SecondaryCounter := 0
+		)
+
+	inc-secondary-counter:
+		t -> result
+		with result := <SecondaryCounter; inc>
+		with rules (
+			SecondaryCounter := result
+		)
+	
+	secondary-counter-as-ints:
+		_ -> result
+		where counter := <SecondaryCounter>
+		with result := <counter-as-ints>counter
+
+	secondary-counter-as-ints:
+		_ -> []
+	
+	counter-as-ints:
+		counter -> []
+		where <lt>(counter, 0)
+	
+	counter-as-ints:
+		counter -> [result]
+		where <lt>(counter, 10)
+		with result := <add>(48, counter)
+		
+	counter-as-ints:
+		counter -> [result]
+		where <lt>(counter, 36)
+		with result := <add>(55, counter)
+	
+	counter-as-ints:
+		counter -> [result]
+		where <lt>(counter, 62)
+		with result := <add>(61, counter)
+	
+	head:
+		[x|xs] -> x
+		
+	head:
+		[x] -> x
+	
+	counter-as-ints:
+		counter -> [x | xs]
+		with total := 62
+		with modded := <mod>(counter, total)
+		with x := <counter-as-ints; head>modded
+		with divided := <div; dec>(counter, total)
+		with xs := <counter-as-ints>divided
+
+	blacklist:
+		_ -> <bagof-BlackList>
+		where not(BlackList)
+		with rules (
+			BlackList :+= <explode-string>"break"
+			BlackList :+= <explode-string>"case"
+			BlackList :+= <explode-string>"catch"
+			BlackList :+= <explode-string>"class"
+			BlackList :+= <explode-string>"const"
+			BlackList :+= <explode-string>"continue"
+			BlackList :+= <explode-string>"debugger"
+			BlackList :+= <explode-string>"default"
+			BlackList :+= <explode-string>"delete"
+			BlackList :+= <explode-string>"do"
+			BlackList :+= <explode-string>"else"
+			BlackList :+= <explode-string>"export"
+			BlackList :+= <explode-string>"extends"
+			BlackList :+= <explode-string>"false"
+			BlackList :+= <explode-string>"finally"
+			BlackList :+= <explode-string>"for"
+			BlackList :+= <explode-string>"function"
+			BlackList :+= <explode-string>"if"
+			BlackList :+= <explode-string>"import"
+			BlackList :+= <explode-string>"in"
+			BlackList :+= <explode-string>"instanceof"
+			BlackList :+= <explode-string>"new"
+			BlackList :+= <explode-string>"null"
+			BlackList :+= <explode-string>"protected"
+			BlackList :+= <explode-string>"return"
+			BlackList :+= <explode-string>"super"
+			BlackList :+= <explode-string>"switch"
+			BlackList :+= <explode-string>"this"
+			BlackList :+= <explode-string>"throw"
+			BlackList :+= <explode-string>"true"
+			BlackList :+= <explode-string>"try"
+			BlackList :+= <explode-string>"typeof"
+			BlackList :+= <explode-string>"var"
+			BlackList :+= <explode-string>"while"
+			BlackList :+= <explode-string>"with"
+			
+			BlackList :+= <explode-string>"parseArg"
+			BlackList :+= <explode-string>"parseArgs"
+		)
+	
+	blacklist = bagof-BlackList
+
+	starts-with-int:
+		t -> t
+		with first := <head>
+		where not(<lt>(first, 48))
+		where not(<gt>(first, 57))
+
+	in-blacklist:
+		t -> t 
+		where blacklist; fetch(?t)
+
+	valid-result:
+		ints -> ints
+		where not(starts-with-int)
+		where not(in-blacklist)
+
+	valid-result:
+		t -> <try-name>
+		// with <debug(!"reject: ")>(t, <implode-string>t)
+
+	try-name:
+		_ -> ints
+		with inc-secondary-counter
+		with ints := <secondary-counter-as-ints; valid-result>
+
+	new-name:
+		_ -> result
+		with result := <try-name; implode-string> 
+		// with <debug(!"result: ")>result
+
+	name-element:
+		t -> y
+		with y:= <new-name>;
+			rules(
+				ElementName: t -> y
+			)
+
+	ctor:
+		name -> <lookup-name>name
+
+	ctor(|a):
+		name -> $[[name']([a'])]
+		with name' := <lookup-name>name
+		with a' := <escape-lookup-js>a
+		
+	ctor(|a, b):
+		name -> $[[name']([a'],[b'])]
+		with name' := <lookup-name>name
+		with a' := <escape-lookup-js>a
+		with b' := <escape-lookup-js>b
+
+	ctor(|a, b, c):
+		name -> $[[name']([a'],[b'],[c'])]
+		with name' := <lookup-name>name
+		with a' := <escape-lookup-js>a
+		with b' := <escape-lookup-js>b
+		with c' := <escape-lookup-js>c
+
+	ctor(|a, b, c, d):
+		name -> $[[name']([a'],[b'],[c'],[d'])]
+		with name' := <lookup-name>name
+		with a' := <escape-lookup-js>a
+		with b' := <escape-lookup-js>b
+		with c' := <escape-lookup-js>c
+		with d' := <escape-lookup-js>d
+
+	ctor(|a, b, c, d, e):
+		name -> $[[name']([a'],[b'],[c'],[d'],[e'])]
+		with name' := <lookup-name>name
+		with a' := <escape-lookup-js>a
+		with b' := <escape-lookup-js>b
+		with c' := <escape-lookup-js>c
+		with d' := <escape-lookup-js>d
+		with e' := <escape-lookup-js>e
+
+	analyze-ctors: t at accept() -> <count-name(|t)>"accept"
+	analyze-ctors: t at action() -> <count-name(|t)>"acti0n"
+	analyze-ctors: t at action(a, b) -> <count-name(|t)>"action"
+	analyze-ctors: t at alt(a, b) -> <count-name(|t)>"alt"
+	analyze-ctors: t at arg-gtr-prio(a, b, c) -> <count-name(|t)>"arg_gtr_prio"
+	analyze-ctors: t at assoc() -> <count-name(|t)>"ass0c"
+	analyze-ctors: t at assoc(a) -> <count-name(|t)>"assoc"
+	analyze-ctors: t at attrs(a) -> <count-name(|t)>"attrs"
+	analyze-ctors: t at avoid() -> <count-name(|t)>"avoid"
+	analyze-ctors: t at cf(a) -> <count-name(|t)>"cf"
+	analyze-ctors: t at char-class(a) -> <count-name(|t)>"char_class"
+	analyze-ctors: t at cons(a) -> <count-name(|t)>"cons"
+	analyze-ctors: t at deprecated(a) -> <count-name(|t)>"deprecated"
+	analyze-ctors: t at follow-restriction(a) -> <count-name(|t)>"follow_restriction"
+	analyze-ctors: t at goto(a, b) -> <count-name(|t)>"_goto"
+	analyze-ctors: t at gtr-prio(a, b) -> <count-name(|t)>"gtr_prio"
+	analyze-ctors: t at indentpadding() -> <count-name(|t)>"indentpadding"
+	analyze-ctors: t at iter(a) -> <count-name(|t)>"iter"
+	analyze-ctors: t at iter(a) -> <count-name(|t)>"iter"
+	analyze-ctors: t at iter-star(a) -> <count-name(|t)>"iter_star"
+	analyze-ctors: t at iter-star-sep(a, b) -> <count-name(|t)>"iter_star_sep"
+	analyze-ctors: t at iter-sep(a, b) -> <count-name(|t)>"iter_sep"
+	analyze-ctors: t at label(a, b) -> <count-name(|t)>"label"
+	analyze-ctors: t at layout() -> <count-name(|t)>"layout"
+	analyze-ctors: t at left() -> <count-name(|t)>"left"
+	analyze-ctors: t at lex(a) -> <count-name(|t)>"lex"
+	analyze-ctors: t at lit(a) -> <count-name(|t)>"lit"
+	analyze-ctors: t at look(a, b) -> <count-name(|t)>"look"
+	analyze-ctors: t at no-attrs() -> <count-name(|t)>"no_attrs"
+	analyze-ctors: t at opt(a) -> <count-name(|t)>"opt"
+	analyze-ctors: t at parameterized-sort(a, b) -> <count-name(|t)>"parameterized_sort"
+	analyze-ctors: t at parse-table(a, b, c, d, e) -> <count-name(|t)>"parse_table"
+	analyze-ctors: t at prefer() -> <count-name(|t)>"prefer"
+	
+	analyze-ctors: t at non-assoc() -> <count-name(|t)>"non_assoc"
+	analyze-ctors: t at assoc() -> <count-name(|t)>"assoc"
+	analyze-ctors: t at bracket() -> <count-name(|t)>"bracket"
+	analyze-ctors: t at right() -> <count-name(|t)>"right"
+	
+	analyze-ctors: t at priorities(a) -> <count-name(|t)>"priorities"
+	analyze-ctors: t at prod(a, b, c) -> <count-name(|t)>"prod"
+	analyze-ctors: t at range(a, b) -> <count-name(|t)>"range"
+	analyze-ctors: t at recover() -> <count-name(|t)>"recover"
+	analyze-ctors: t at reject() -> <count-name(|t)>"reject"
+	analyze-ctors: t at reduce(a, b, c) -> <count-name(|t)>"reduce"
+	analyze-ctors: t at reduce(a, b, c, d) -> <count-name(|t)>"reduce"
+	analyze-ctors: t at seq(a) -> <count-name(|t)>"seq"
+	analyze-ctors: t at shift(a) -> <count-name(|t)>"shift"
+	analyze-ctors: t at sort(a) -> <count-name(|t)>"sort"
+	analyze-ctors: t at state-rec(a, b, c) ->  <count-name(|t)>"state_rec"
+	analyze-ctors: t at states(a) -> <count-name(|t)>"states"
+	analyze-ctors: t at term(a) -> <count-name(|t)>"term"
+
+	escape-js: accept() -> <ctor>"accept"
+	escape-js: action() -> <ctor>"acti0n"
+	escape-js: action(a, b) -> <ctor(|a,b)>"action"
+	escape-js: alt(a, b) -> <ctor(|a,b)>"alt"
+	escape-js: arg-gtr-prio(a, b, c) -> <ctor(|a,b,c)>"arg_gtr_prio"
+	escape-js: assoc() -> <ctor>"ass0c"
+	escape-js: assoc(a) -> <ctor(|a)>"assoc"
+	escape-js: attrs(a) -> <ctor(|a)>"attrs"
+	escape-js: avoid() -> <ctor>"avoid"
+	escape-js: cf(a) -> <ctor(|a)>"cf"
+	escape-js: char-class(a) -> <ctor(|a)>"char_class"
+	escape-js: cons(a) -> <ctor(|a)>"cons"
+	escape-js: deprecated(a) -> <ctor(|a)>"deprecated"
+	escape-js: follow-restriction(a) -> <ctor(|a)>"follow_restriction"
+	escape-js: goto(a, b) -> <ctor(|a,b)>"_goto"
+	escape-js: gtr-prio(a, b) -> <ctor(|a,b)>"gtr_prio"
+	escape-js: iter(a) -> <ctor(|a)>"iter"
+	escape-js: iter(a) -> <ctor(|a)>"iter"
+	escape-js: iter-star(a) -> <ctor(|a)>"iter_star"
+	escape-js: iter-star-sep(a, b) -> <ctor(|a,b)>"iter_star_sep"
+	escape-js: iter-sep(a, b) -> <ctor(|a,b)>"iter_sep"
+	escape-js: indentpadding() -> <ctor>"indentpadding"
+	escape-js: label(a, b) -> <ctor(|a,b)>"label"
+	escape-js: layout() -> <ctor>"layout"
+	escape-js: left() -> <ctor>"left"
+	escape-js: lex(a) -> <ctor(|a)>"lex"
+	escape-js: lit(a) -> <ctor(|a)>"lit"
+	escape-js: look(a, b) -> <ctor(|a,b)>"look"
+	escape-js: no-attrs() -> <ctor>"no_attrs"
+	escape-js: opt(a) -> <ctor(|a)>"opt"
+	escape-js: parameterized-sort(a, b) -> <ctor(|a,b)>"parameterized_sort"
+	escape-js: parse-table(a, b, c, d, e) -> <ctor(|a,b,c,d,e)>"parse_table"
+	escape-js: prefer() -> <ctor>"prefer"
+	escape-js: priorities(a) -> <ctor(|a)>"priorities"
+	escape-js: prod(a, b, c) -> <ctor(|a,b,c)>"prod"
+	escape-js: range(a, b) -> <ctor(|a,b)>"range"
+	escape-js: recover() -> <ctor>"recover"
+	
+	escape-js: non-assoc() -> <ctor>"non_assoc"
+	escape-js: assoc() -> <ctor>"assoc"
+	escape-js: bracket() -> <ctor>"bracket"
+	escape-js: right() -> <ctor>"right"
+	
+	escape-js: reject() -> <ctor>"reject"
+	escape-js: reduce(a, b, c) -> <ctor(|a,b,c)>"reduce"
+	escape-js: reduce(a, b, c, d) -> <ctor(|a,b,c,d)>"reduce"
+	escape-js: seq(a) -> <ctor(|a)>"seq"
+	escape-js: shift(a) -> <ctor(|a)>"shift"
+	escape-js: sort(a) -> <ctor(|a)>"sort"
+	escape-js: state-rec(a, b, c) ->  <ctor(|a,b,c)>"state_rec"
+	escape-js: states(a) -> <ctor(|a)>"states"
+	escape-js: term(a) -> <ctor(|a)>"term"
+
+	escape-js:
+		[] -> ${[]}
+		
+	escape-js:
+		[x] -> ${[{x'}]}
+		with x' := <escape-lookup-js>x 
+	
+	escape-js:
+		t@[_|_] -> ${[{t'}]}
+		with t' := <map(escape-js); separate; concat-strings>
+
+	unknown:
+		_ -> $[unknown]
+		with debug(!"term: ")
+
+	wrap-string:
+		t -> t
+		
+	wrap-int:
+		t -> $[[t']]
+		with t' := <int-to-string>t
+
+	escape-unknown-js = 
+		if is-string then
+			wrap-string
+		else
+			if is-int then
+				wrap-int
+			else
+				unknown
+			end
+		end
+
+	escape-js:
+		t -> result
+		with result := <escape-unknown-js>t
+
+signature constructors
+	Constructor : Term -> Term
+	
+	Name : Term -> Term
+	
+	parse-table : Term * Term * Term * Term * Term -> Term
+	label : Term * Term -> Term
+	states : Term -> Term
+	priorities : Term -> Term
+
+	accept: Term
+	action: Term
+	action: Term * Term -> Term
+	alt: Term * Term -> Term
+	arg-gtr-prio: Term * Term * Term -> Term
+	assoc: Term
+	assoc: Term -> Term
+	attrs: Term -> Term
+	avoid: Term
+	cf: Term -> Term
+	char-class: Term -> Term
+	cons: Term -> Term
+	deprecated: Term -> Term
+	goto: Term * Term -> Term
+	follow-restriction: Term -> Term
+	gtr-prio: Term * Term -> Term
+	iter: Term -> Term
+	iter-star: Term -> Term
+	iter-sep: Term * Term -> Term
+	iter-star-sep: Term * Term -> Term
+	label: Term * Term -> Term
+	layout: Term 
+	left: Term
+	
+	non-assoc: Term
+	assoc: Term
+	bracket: Term
+	right: Term
+	
+	look: Term * Term -> Term
+	indentpadding: Term
+	lex: Term -> Term
+	lit: Term -> Term
+	no-attrs: Term
+	opt: Term -> Term
+	parameterized-sort: Term * Term -> Term
+	prefer: Term
+	priorities: Term -> Term
+	prod: Term * Term * Term -> Term
+	range: Term * Term -> Term
+	recover: Term
+	reduce: Term * Term * Term -> Term
+	reduce: Term * Term * Term * Term -> Term
+	reject: Term
+	seq: Term -> Term
+	shift: Term -> Term
+	sort: Term -> Term
+	state-rec: Term * Term * Term -> Term
+	states: Term -> Term
+	term: Term -> Term

From srabbelier at gmail.com  Thu Dec  1 15:48:05 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:48:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23665 -
	strategoxt-javascript-backend/trunk
Message-ID: <20111201144805.C8BD82B8014@mx2.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:48:05 2011
New Revision: 23665
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23665&sc=1

Log:
Remove SINCLUDE and add -Wno-unused-but-set-variable

Modified:
   strategoxt-javascript-backend/trunk/Makefile

Modified: strategoxt-javascript-backend/trunk/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/Makefile	Thu Dec  1 14:46:47 2011	(r23664)
+++ strategoxt-javascript-backend/trunk/Makefile	Thu Dec  1 14:48:05 2011	(r23665)
@@ -1,6 +1,3 @@
-SINCLUDE = \
-	-I $(HOME)/apps/ecmascript/share/sdf/ecmascript-front
-
 SLIBS = \
 	-la stratego-lib \
 	-la strc
@@ -8,5 +5,4 @@
 all: s2js
 
 s2js:
-	strc $(SINCLUDE) -I src/stratego -i src/stratego/s2js.str $(SLIBS)
-
+	strc  -I src/stratego -i src/stratego/s2js.str -Xcc -Wno-unused-but-set-variable  $(SLIBS)

From srabbelier at gmail.com  Thu Dec  1 15:48:08 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:48:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23666 -
	strategoxt-javascript-backend/trunk/scripts
Message-ID: <20111201144808.EB092CC114@mx4.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:48:08 2011
New Revision: 23666
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23666&sc=1

Log:
Add missing ${bp}/.. to strjsi

Modified:
   strategoxt-javascript-backend/trunk/scripts/strjsi

Modified: strategoxt-javascript-backend/trunk/scripts/strjsi
==============================================================================
--- strategoxt-javascript-backend/trunk/scripts/strjsi	Thu Dec  1 14:48:05 2011	(r23665)
+++ strategoxt-javascript-backend/trunk/scripts/strjsi	Thu Dec  1 14:48:08 2011	(r23666)
@@ -8,4 +8,4 @@
 strc -S -i $1 -F -o /tmp/${bn}.ctree
 ${bp}/../src/stratego/s2js -i /tmp/${bn}.ctree > /tmp/${bn}.js.t
 cat ${bp}/../src/javascript/srts.js /tmp/${bn}.js.t ${bp}/../src/javascript/cli-wrapper.js > /tmp/${bn}.js
-java -jar lib/js.jar /tmp/${bn}.js $2 $3 $4 $5 $6 $7 $9 $10
+java -jar ${bp}/../lib/js.jar /tmp/${bn}.js $2 $3 $4 $5 $6 $7 $9 $10

From srabbelier at gmail.com  Thu Dec  1 15:48:10 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:48:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23667 -
	strategoxt-javascript-backend/trunk/src/javascript
Message-ID: <20111201144810.E15EF7F8075@mx1.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:48:10 2011
New Revision: 23667
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23667&sc=1

Log:
Make cli-wrapper compatible with node

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js

Modified: strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Thu Dec  1 14:48:08 2011	(r23666)
+++ strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Thu Dec  1 14:48:10 2011	(r23667)
@@ -1,5 +1,5 @@
 StrategoJS.registerLibrary(StrategoJS.SSL);
 StrategoJS.registerLibrary(StrategoJS.SRTS);
 StrategoJS.registerLibrary(StrategoJS.StrategoLib);
-StrategoJS.init().main(["./program"].concat(arguments));
+StrategoJS.init().main(["./program"].concat(process.argv.slice(2)));
 

From srabbelier at gmail.com  Thu Dec  1 15:48:12 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:48:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23668 -
	strategoxt-javascript-backend/trunk/src/javascript
Message-ID: <20111201144812.90059108C020@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:48:12 2011
New Revision: 23668
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23668&sc=1

Log:
Prefix logging functions with TRACE, ERROR, INFO

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/strategojs.js

Modified: strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Thu Dec  1 14:48:10 2011	(r23667)
+++ strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Thu Dec  1 14:48:12 2011	(r23668)
@@ -31,10 +31,27 @@
 		}
 		return function() {}; 
 	}();
+
+    var wrap = function(value, prefix) {
+        if(value === undefined) {
+            value = "undefined";
+        }
+        return prefix + ": " + value.toString().replace(/\n/g, '\n' + prefix + '+ ');
+    };
+
+	print = function(value) {
+		StrategoJS.log(wrap(value, 'PRINT'));
+	};
 	
-	StrategoJS.trace = StrategoJS.log;
-	StrategoJS.error = StrategoJS.log;
-	StrategoJS.info = StrategoJS.log;
+	StrategoJS.trace = function(value) {
+		StrategoJS.log(wrap(value, 'TRACE'));
+	};
+	StrategoJS.error = function(value) {
+		StrategoJS.log(wrap(value, 'ERROR'));
+	};
+	StrategoJS.info = function(value) {
+		StrategoJS.log(wrap(value, 'INFO'));
+	};
 	
 	StrategoJS.assert = function(msg, e) {
 		if(e == false)

From srabbelier at gmail.com  Thu Dec  1 15:48:14 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:48:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23669 - in
	strategoxt-javascript-backend/trunk: . scripts src/javascript
	src/stratego tests tests/basic
Message-ID: <20111201144814.D3984CC0D2@mx4.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:48:14 2011
New Revision: 23669
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23669&sc=1

Log:
checkpoint

Deleted:
   strategoxt-javascript-backend/trunk/tests/basic/readterm_1.str
Modified:
   strategoxt-javascript-backend/trunk/Makefile
   strategoxt-javascript-backend/trunk/scripts/add-cli-wrapper.sh
   strategoxt-javascript-backend/trunk/scripts/no-fail-check.sh
   strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
   strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
   strategoxt-javascript-backend/trunk/src/javascript/terms.js
   strategoxt-javascript-backend/trunk/src/stratego/backend-simplify.str
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/signatures.str
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/tests/Makefile

Modified: strategoxt-javascript-backend/trunk/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/Makefile	Thu Dec  1 14:48:12 2011	(r23668)
+++ strategoxt-javascript-backend/trunk/Makefile	Thu Dec  1 14:48:14 2011	(r23669)
@@ -1,8 +1,54 @@
 SLIBS = \
 	-la stratego-lib \
-	-la strc
+	-la strc -la stratego-aterm -la stratego-gpp -la stratego-xtc
 
-all: s2js
+SXTJAR=~/.nix-profile/share/strc-java/strategoxt.jar
+STRLIB=~/.nix-profile/share/stratego-lib
+CTREES=~/.nix-profile/share
+STRSDF=~/.nix-profile/share/sdf/stratego-front
+RTGSDF=~/.nix-profile/share/sdf/stratego-regular
 
-s2js:
-	strc  -I src/stratego -i src/stratego/s2js.str -Xcc -Wno-unused-but-set-variable  $(SLIBS)
+LIBPATH=src/stratego
+LIBPATH=.
+
+all: s2js.jar
+
+s2js/Main.java: src/stratego/s2js.str
+	strj -I $(LIBPATH) -i $< -o $@ -p s2js $(SLIBS)
+
+s2js/Main.class: s2js/Main.java
+	javac -cp $(SXTJAR) -d . -source 5 s2js/*.java
+
+jarme: s2js/Main.class
+	mkdir -p jarme
+	touch jarme
+	cp -r s2js jarme
+
+s2js.jar: jarme
+	fastjar cf s2js.jar -C jarme/ .
+
+%.js: $(prefix)%.str s2js.jar
+	java -cp $(SXTJAR):s2js.jar s2js.s2js -i $< -I $(STRLIB) > $@
+
+lib/stratego_strc.js: s2js.jar
+	java -cp $(SXTJAR):s2js.jar s2js.s2js -i $(CTREES)libstrc.ctree -I $(STRSDF) > $@
+
+%.lib.js: %.js
+	cat $< | scripts/wrap-libraries.sh > $@
+
+%.wrapped.js: %.js
+	cat $< | scripts/wrap-libraries.sh | scripts/add-cli-wrapper.sh > $@
+
+clean:
+	rm -rf jarme
+	rm -rf s2js
+	rm -f s2js.jar
+
+hack: compiler-hack file-hack
+
+compiler-hack:
+	rm -rf out && mkdir -p out/compile_test && strj -i tests/awesome/compile-test.str -o out/compile_test/compile_test.java -p compile_test -la stratego-lib -la strc -la stratego-xtc -la stratego-aterm -la stratego-gpp && javac -cp ~/.nix-profile/share/strc-java/strategoxt.jar out/compile_test/*.java && fastjar cf out/compile_test.jar -C out/ .
+
+file-hack:
+	java -cp ~/.nix-profile/share/strc-java/strategoxt.jar:out/compile_test.jar compile_test.compile_test -i tests/awesome/minimal.str -I $(STRLIB) -o tests/awesome/minimal.ctree
+# -o tests/awesome/minimal.ctree

Modified: strategoxt-javascript-backend/trunk/scripts/add-cli-wrapper.sh
==============================================================================
--- strategoxt-javascript-backend/trunk/scripts/add-cli-wrapper.sh	Thu Dec  1 14:48:12 2011	(r23668)
+++ strategoxt-javascript-backend/trunk/scripts/add-cli-wrapper.sh	Thu Dec  1 14:48:14 2011	(r23669)
@@ -1,10 +1,6 @@
-#! /bin/bash -x
+#! /bin/bash
 
 bp=$(dirname $0)
 cat \
-	${bp}/../src/javascript/strategojs.js \
-	${bp}/../src/javascript/terms.js \
-	${bp}/../src/javascript/srts.js \
-	${bp}/../src/javascript/ssl.js \
 	- \
 	${bp}/../src/javascript/cli-wrapper.js

Modified: strategoxt-javascript-backend/trunk/scripts/no-fail-check.sh
==============================================================================
--- strategoxt-javascript-backend/trunk/scripts/no-fail-check.sh	Thu Dec  1 14:48:12 2011	(r23668)
+++ strategoxt-javascript-backend/trunk/scripts/no-fail-check.sh	Thu Dec  1 14:48:14 2011	(r23669)
@@ -2,5 +2,3 @@
 
 f="/tmp/strjs.exec.trace"
 tee $f
-x=$(tail -n 29 $f | egrep "rewriting failed|uncaught")
-[ "$x" == "" ]

Modified: strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Thu Dec  1 14:48:12 2011	(r23668)
+++ strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Thu Dec  1 14:48:14 2011	(r23669)
@@ -1,5 +1,5 @@
 StrategoJS.registerLibrary(StrategoJS.SSL);
 StrategoJS.registerLibrary(StrategoJS.SRTS);
 StrategoJS.registerLibrary(StrategoJS.StrategoLib);
-StrategoJS.init().main(["./program"].concat(process.argv.slice(2)));
-
+StrategoJS.init().main(["./program"].concat(
+typeof(process) === 'undefined' ? arguments : process.argv.slice(2)));

Modified: strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Thu Dec  1 14:48:12 2011	(r23668)
+++ strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Thu Dec  1 14:48:14 2011	(r23669)
@@ -61,6 +61,17 @@
 	return true;
 }();
 
+StrategoJS.StrategoLib = {};
+
+StrategoJS.StrategoLib._loaded = function() {
+    StrategoJS.StrategoLib.log_0_2 = StrategoJS.log;
+    StrategoJS.StrategoLib.whoami_0_0 = function() {
+        return process.argv[1];
+    };
+    StrategoJS.StrategoLib.if_java_platform_1_0 = function() {};
+    StrategoJS.StrategoLib.if_c_platform_1_0 = function() {};
+}();
+
  // include order:
  //  1) stratego.js
  //  2) terms.js

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Thu Dec  1 14:48:12 2011	(r23668)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Thu Dec  1 14:48:14 2011	(r23669)
@@ -310,6 +310,7 @@
 
 	function parseTermSequence(stringIterator, endChar) {
 		var pos = stringIterator.offset;
+        var seq = "";
 		var els = [];
 		parseSkip(stringIterator);
 		var ch = stringIterator.read();

Modified: strategoxt-javascript-backend/trunk/src/stratego/backend-simplify.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/backend-simplify.str	Thu Dec  1 14:48:12 2011	(r23668)
+++ strategoxt-javascript-backend/trunk/src/stratego/backend-simplify.str	Thu Dec  1 14:48:14 2011	(r23669)
@@ -4,7 +4,7 @@
   libstratego-lib
   libstrc
   
-  lib/dr-scoping
+  src/stratego/lib/dr-scoping
   
 signature
  constructors

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Dec  1 14:48:12 2011	(r23668)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Dec  1 14:48:14 2011	(r23669)
@@ -8,37 +8,45 @@
 imports
   libstratego-lib
   libstrc
-  
-  backend-simplify 
-  lib/dr-scoping
-  signatures
-  term-construction
-  term-deconstruction
-  utils
-  variable-access
-  variable-lifting
+
+	libstratego-aterm
+	libstratego-gpp
+	libstratego-xtc
+
+
+  src/stratego/s2js-options 
+  src/stratego/backend-simplify 
+  src/stratego/lib/dr-scoping
+  src/stratego/signatures
+  src/stratego/term-construction
+  src/stratego/term-deconstruction
+  src/stratego/utils
+  src/stratego/variable-access
+  src/stratego/variable-lifting
+
+  src/stratego/direct
 
 strategies
 	
-  main = io-wrap(s2js ; echo ; ![])
+  main = with(s2js-init-options); parse-options(s2js-options); xtc-input(s2js ; echo ; ![])
+	
+  pp-aterm(msg) = ?x; pp-aterm-box; box2text-string(|80); debug(msg); !x
 	
   s2js =
       with(
-          s2js-init-options
-        ; record-main-closurename
+        record-main-closurename
       )
-	; log-timed(
-        backend-simplify
+	; log-timed(id
+        ; direct-compile
       | "Backend preprocessing succeeded", 1
       )
-    ; log-timed(
-        dr-scope-all-verbose(js-compile-spec)
+    ; log-timed(id
+        ; dr-scope-all-verbose(js-compile-spec)
       | "Backend transformation succeeded", 1
       )
-  
-  s2js-init-options = id
-  s2js-options = id
-	
+
+
+
 rules
 	
   js-compile-spec:
@@ -58,6 +66,9 @@
          var SRTS_one = StrategoJS.resolveImport("SRTS_one");
          var SRTS_all = StrategoJS.resolveImport("SRTS_all");
          var SRTS_some = StrategoJS.resolveImport("SRTS_some");
+         /*
+         [import*]
+         */
          [ctor-decl*]
          [ctor-init*]
          [const-decl*]
@@ -403,6 +414,26 @@
   ; body' := <translate-strategy(|s,f)> body
   
 
+  NonReqEscape =
+      NonReqEscape-backslash ; NonReqEscape-double-quote ; NonReqEscape-linefeed ; NonReqEscape-carriage-return
+
+  NonReqEscape-backslash = string-replace(|"\\", "\\\\")
+
+  /** @internal */
+  NonReqEscape-double-quote = string-replace(|"\"",  "\\\"")
+  
+  /** @internal */
+  NonReqEscape-single-quote = string-replace(|"'","\\'")
+  
+  /** @internal */
+  
+  /** @internal */
+  NonReqEscape-linefeed = string-replace(|"\n", "\\n")
+  
+  NonReqEscape-carriage-return = string-replace(|"\r", "\\r")
+  /** @internal */
+
+
   translate-ImportTerm(|s,f) :
     ImportTerm(file) -> $[ term = /*x_constants.*/[x_constant]; ]
   with
@@ -421,7 +452,7 @@
         ]
         ConstDecl :+= $[]
         ConstInit :+= $[
-          [x_constant] = StrategoJS.Term.parse(@@[<write-to-string> contents]@@);
+          [x_constant] = StrategoJS.Term.parse("[<write-to-string; NonReqEscape> contents]");
         ] /*[x_constants],*/
       )
 
@@ -506,6 +537,20 @@
       ConstructorInit :+= <JSInitConstructorQ <+ JSInitConstructor>  
     )
     
+  JSTranslate =
+  	?ExtOpDecl(c, t)
+  ; !OpDecl(c, t)	
+  ; JSTranslate
+    
+ JSDeclareExtConstructor:
+ 	ExtOpDecl(c, t) ->
+ 	$[
+ 		/* external constructor [x] */
+ 	]
+ 	with
+ 		n := <Arity <+ is-int> t
+ 	;	x := <js-ConstructorName> (c, n)
+    
   JSDeclareConstructor: 
   	OpDecl(c, t) -> 
   	$[ 
@@ -554,4 +599,4 @@
   	      	var [x] = factory.makeCtor("[name]", [<js-mk-int-const> arity]); 
   	      ]
   	    )
-  	end 	    
\ No newline at end of file
+  	end 	    

Modified: strategoxt-javascript-backend/trunk/src/stratego/signatures.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/signatures.str	Thu Dec  1 14:48:12 2011	(r23668)
+++ strategoxt-javascript-backend/trunk/src/stratego/signatures.str	Thu Dec  1 14:48:14 2011	(r23669)
@@ -7,7 +7,7 @@
 imports
   libstrc
   
-  utils
+  src/stratego/utils
   
 strategies
 	

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Dec  1 14:48:12 2011	(r23668)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Dec  1 14:48:14 2011	(r23669)
@@ -9,9 +9,9 @@
   libstratego-lib
   libstrc
 
-  signatures
-  variable-access
-  utils
+  src/stratego/signatures
+  src/stratego/variable-access
+  src/stratego/utils
     				
 strategies
 

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Thu Dec  1 14:48:12 2011	(r23668)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Thu Dec  1 14:48:14 2011	(r23669)
@@ -8,8 +8,8 @@
 imports
  libstrc
 
- term-construction 
- variable-access
+ src/stratego/term-construction 
+ src/stratego/variable-access
  
 signature
  constructors

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Thu Dec  1 14:48:12 2011	(r23668)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Thu Dec  1 14:48:14 2011	(r23669)
@@ -1,24 +1,55 @@
-
 COREFILES  := $(wildcard core/*.str)
 BASICFILES := $(wildcard basic/*.str)
+ERRORFILES := $(wildcard error/*.str)
 TESTFILES  := $(COREFILES) $(BASICFILES)
-#TESTFILES  := $(BASICFILES)
+#TESTFILES := $(ERRORFILES)
+TESTFILES  := $(wildcard awesome/*.str)
 CTREEFILES := $(subst .str,.ctree,$(TESTFILES))
 JSFILES    := $(subst .str,.js,$(TESTFILES))
 TESTRUNS   := $(subst .str,.run,$(TESTFILES))
 
+SXTJAR=~/.nix-profile/share/strc-java/strategoxt.jar
+CTREES=~/.nix-profile/share/
+STRSDF=~/.nix-profile/share/sdf/stratego-front/
+RTGSDF=~/.nix-profile/share/sdf/stratego-regular/
+
+RUN=java -jar ../lib/js.jar
+RUN=node
+
+ifndef V
+	QUIET_STRC      = @echo '   ' STRC $@;
+	QUIET_JS        = @echo '   ' JS $@;
+	QUIET_RUN       = @echo '   ' RUN $@;
+	QUIET_S2JS      = @echo '   ' S2JS $@;
+	QUIET_RM        = @
+endif
+
 all: $(TESTRUNS)
 
-%.ctree : %.str ../src/stratego/s2js
-	strc -S -I testlib -i $< -F -o $@
+%.ctree : %.str
+	$(QUIET_STRC) strj -S -I testlib -i $< -F -o $@
+	@pp-aterm -i $@ > $*.aterm
 
 %.js : %.ctree
-	../trans/s2js -i $< | ../scripts/quote-term-imports.sh | ../scripts/add-cli-wrapper.sh > $@
+	$(QUIET_S2JS) $(MAKE) -s -C .. tests/$*.js tests/$*.wrapped.js
+	@mv $*.js $*.raw.js
+	@mv $*.wrapped.js $@
 
 %.run : %.js
-	java -jar ../lib/js.jar $< 2>&1 | ../scripts/no-fail-check.sh && touch $@
+	$(QUIET_RUN) $(RUN) $< | ../scripts/no-fail-check.sh | ../scripts/modulate-verbosity.sh && test 0 -eq $${PIPESTATUS} && touch $@
+	@echo '*** $< ***'
+
+all_js: $(JSFILES)
+
+clean: clean_js clean_testruns
+
+clean_ctree:
+	$(QUIET_RM) rm -f $(CTREEFILES)
 
-clean:
-	rm -f $(CTREEFILES) $(JSFILES) $(TESTRUNS)
+clean_js:
+	$(QUIET_RM) rm -f $(JSFILES)
 
+clean_testruns:
+	$(QUIET_RM) rm -f $(TESTRUNS)
 
+.PRECIOUS: $(CTREEFILES) $(JSFILES)

From srabbelier at gmail.com  Thu Dec  1 15:48:17 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:48:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23670 -
	strategoxt-javascript-backend/trunk/src/stratego
Message-ID: <20111201144817.F00CA2B8020@mx2.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:48:17 2011
New Revision: 23670
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23670&sc=1

Log:
== is the bane of my existance

Modified:
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Dec  1 14:48:14 2011	(r23669)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Dec  1 14:48:17 2011	(r23670)
@@ -197,7 +197,7 @@
   	SDefT(x, s*, t*, s) ->
   	$[
      function(ctx, term [param*]) {
-       trace("[x] : " + (term == undefined ? "undefined" : ctx.factory.prettify(term)));
+       trace("[x] : " + (term === undefined ? "undefined" : ctx.factory.prettify(term)));
        [bstm-init*]
        if(TRACES_ENABLED) ctx.push("[x]");
        [feil]: {
@@ -281,10 +281,10 @@
   	CallT(SVar(x), s*, t*) -> 
   	$[
         term = [x](ctx, term [args]);	
-        if(term == null) {
+        if(term === null) {
         	trace("[feil] : return from [x]"); 
             break [feil];
-        } else if(term == undefined) {
+        } else if(term === undefined) {
         	throw "internal error: call to [x] produced 'undefined' result";
         }
   	]
@@ -328,11 +328,11 @@
     $[ 
       ctx.push("[f]");
       term = StrategoJS.SSL.[f](ctx, term [args]);
-      if (term == null) {
+      if (term === null) {
       	ctx.popOnFailure();
       	trace("[feil]");
       	break [feil];
-      } else if(term == undefined) {
+      } else if(term === undefined) {
       	throw "internal error: call to SSL.[f] gave undefined term"; 
       }
       ctx.popOnSuccess();

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Dec  1 14:48:14 2011	(r23669)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Dec  1 14:48:17 2011	(r23670)
@@ -90,7 +90,7 @@
           ( $[ var [x]; ]
           , ${
                {x} = StrategoJS.SSL.SSL_mkterm(ctx, term, {e_t1}, {e_t2});
-               if ({x} == null)
+               if ({x} === null)
                  break {feil};
             })
       )
@@ -122,7 +122,7 @@
         ( $[ var [x]; ]
         , $[
             [x] = StrategoJS.SRTS.checkListTail([e]);
-            if ([x] == null) break [feil];
+            if ([x] === null) break [feil];
           ]
         )
     )
@@ -140,5 +140,5 @@
   where
       <collect({?Var(_){t*}; where(<not(["bound"])> t* )})> t
     ; not([])
-    ; e := <foldr1(!$[[<Hd; js-ConstructVar>] == null]
-                  ,!$[[<Fst; js-ConstructVar>] == null || [<Snd>] ])>
\ No newline at end of file
+    ; e := <foldr1(!$[[<Hd; js-ConstructVar>] === null]
+                  ,!$[[<Fst; js-ConstructVar>] === null || [<Snd>] ])>
\ No newline at end of file

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Thu Dec  1 14:48:14 2011	(r23669)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Thu Dec  1 14:48:17 2011	(r23670)
@@ -54,7 +54,7 @@
   translate-Match(|s,feil) :
     Match(Var(x){"(un)bound"}, ReadFrom(e)) ->
     $[
-      if ([e_var] == null) {
+      if ([e_var] === null) {
         [stm_assign]
       }?else if ([e_var] != [e] && !factory.match([e_var], [e])) {
       	trace("[feil]");

From srabbelier at gmail.com  Thu Dec  1 15:48:20 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:48:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23671 -
	strategoxt-javascript-backend/trunk/src/stratego
Message-ID: <20111201144820.C9D037F803D@mx1.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:48:20 2011
New Revision: 23671
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23671&sc=1

Log:
New files

Added:
   strategoxt-javascript-backend/trunk/src/stratego/direct.str
   strategoxt-javascript-backend/trunk/src/stratego/s2js-options.str

Added: strategoxt-javascript-backend/trunk/src/stratego/direct.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/stratego/direct.str	Thu Dec  1 14:48:20 2011	(r23671)
@@ -0,0 +1,82 @@
+module direct
+
+imports 
+	libstrc
+	libstratego-lib
+
+strategies
+
+pack-include-from-dir-parsed(|mod) :
+    IncludeDir(dir) -> (file, tree)
+      where(<concat-strings; file-exists> [dir,"/", mod, ".ctree"] => file)
+          ; pack-log-include
+          ; <ReadFromFile> file => tree
+
+override pack-stratego-parse-stratego =
+      ?(IncludeFromPath(<id>), includes)
+    ; if has-extension(|"str") then
+        remove-extension
+      end
+    ;  ?mod
+    ; !includes
+    ; fetch-elem(
+       pack-include-from-dir(|mod)
+       <+ pack-include-from-dir-parsed(|mod)
+    )
+    ; (id, ctree-to-rtree; report-ambs)
+    ; pack-fc(|"Stratego-Sugar-Cong")
+ 
+  /**
+   * Include from a fixed location
+   */
+override pack-stratego-parse-stratego =
+    let pack-is-qualified =
+           ?['/' | _] + ?['.' | _ ] + ?['\' | _] + [is-alpha, ':', '\' | id]
+
+    	pack-qualify-pathname =
+            where(explode-string => cs)
+          ; if <pack-is-qualified> cs then
+              id
+            else
+              <implode-string> ['.', '/' | cs]
+            end
+
+     in ?(IncludePathName(<pack-qualify-pathname>), _)
+      ; if file-exists then
+          pack-include-pathname
+          ; (id,report-ambs)
+          ; pack-fc(|"Stratego-Sugar-Cong")
+        else
+          <fatal-error> ["pack-stratego: error: file ", <id>, " does not exist\n"]
+        end
+    end
+
+// external concat-strings-impl(|)
+
+// override concat-strings = concat-strings-impl 
+
+ctree-to-rtree = alltd(SDefCTreeToSDefRTree + ExtSDefCTreeToExtSDefCtree)
+
+SDefCTreeToSDefRTree:
+    SDefT(f, a1, a2, s) -> SDefT(<unmangle>f, a1, a2, <topdown(try(UnmangleSVar))> s) 
+
+ExtSDefCTreeToExtSDefCtree:
+	ExtSDef(f, a1, a2) -> ExtSDef(<unmangle>f, a1, a2)
+
+ensure(s) = with(s => result); !result
+
+direct-compile =
+    with(<set-config> ("JAVA_PLATFORM", ()))
+  ; with(debug(!"input: "))
+  ; ensure(dr-scope-all(
+    	ensure(strc-get-infile)
+      ; ensure(pack-stratego-trm(|<concat>[<strc-dep-name>, <strc-get-include-dirs>] ))
+      ; ensure(tfc1(|"Stratego-Sugar-Cong", "pack"))
+      ; ensure(strc-output-ast)
+      ; ensure(frontend)
+  )
+  ; try(mark-always-needed(|<get-config> "-m", 0, 0))
+  ; strc-optimize
+  ; strc-export-external-defs
+  ; strc-output-frontend
+  )
\ No newline at end of file

Added: strategoxt-javascript-backend/trunk/src/stratego/s2js-options.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js-options.str	Thu Dec  1 14:48:20 2011	(r23671)
@@ -0,0 +1,112 @@
+/**
+ * s2js options
+ *
+ * @see strj-options
+ *
+ * @author Lennart Kats
+ */
+module s2js-options
+
+imports
+  libstrc
+
+  src/stratego/s2js
+
+rules
+  
+  s2js-options = input-option 
+  <+ output-option 
+  <+ s2js-general-options 
+  <+ s2js-library-options
+  
+  s2js-library-options =
+    ArgOption(
+      "-p"
+    , if is-substring(!"/") + is-substring(!"-") then
+        fatal-err(|"Illegal package name")
+      end
+    ; <set-config> ("-p", <id>); !()
+    , !"-p <name>          Set package name <name> (should be unique for each library)"
+    )
+  + ArgOption(
+      "-la"
+    , if is-substring(!"/") + is-substring(!"\\") then
+        warn(|"Ignoring library import: must be a Java package name")
+      else
+        <post-extend-config> ("-la", [<id>]); !()
+      end
+    , !"-la <name>         Include library in package <name>"
+    )
+  + Option(
+      "--library" + "--lib"
+    , <set-config> ("--library", ()); !()
+    , !"--library | --lib  Build a library instead of an application"
+    )
+  + ArgOption(
+      "--xtc-repo"
+    , <conc-strings> ("GetInternalDefaultXtcRepository=\"", <id>, "\"");
+      <post-extend-config> ("-D", [<parse-define-option>]); !()
+    , fail // undocumented/deprecated
+    )
+  s2js-general-options =
+    ArgOption(
+      "-I" + "--Include"
+    , where(<post-extend-config>("-I", ["-I", <id>]))
+    ; !()
+    , !"-I d | --Include d Include modules from directory d"
+    )
+  + ArgOption(
+      "--stacktrace" + "-s"
+    , <set-config> ("--stacktrace", <string-to-int; (0 + 1 + 2)>); !()
+    , <conc-strings> ("--stacktrace i | -s i  Enable stacktracing ",
+                      "(0 = no, 1 = always [default], 2 = only if assertions (java -ea) enabled for a class)")
+    )
+  + ArgOption(
+      "-D"
+    , // TODO: Support prim(<-D constant>) as seen in strc-options
+      <post-extend-config> ("-D", [<parse-define-option>]); !()
+    , !"-D name=value      Define a constant value strategy"
+    )
+  + ArgOption(
+      "-sc"
+    , <set-config> ("-sc", <id>); !()
+    , !"-sc <on|off>       Assume all term constructors are shared (default: on)"
+    )
+  + ArgOption(
+      "-O"
+    , <set-config>("-O", <string-to-int; strc-set-opt-level>);
+      rules(ManuallySetOptimization: _)
+    , !"-O n               Optimization level (0 = no optimization)"
+    )
+  + ArgOption(
+      "--format-check"
+    , if "1" then <warn(|"Format checking not supported; ignored")> "--format-check 1" end
+    , fail // undocumented
+    )    
+  + ArgOption(
+      "-Xcc"
+    , id
+    , fail // undocumented
+    )
+
+  parse-define-option =
+    risky(
+      string-tokenize('=')
+    ; \[name, value] -> (name, value)\
+    | "option -D must be followed by name=value pair")
+  ; risky(
+      (id, read-from-string; trm-explode; raise-in-build; stratego-desugar)
+    ; ?(name, value)
+    ; rules(GetConstantDef: name -> value)
+    | "illegal constant value for option -D"
+    )
+ 
+  s2js-init-options =
+    if not(<get-config> "--stacktrace") then
+      <set-config> ("--stacktrace", 1)
+    end
+	; with(
+		<set-config> ("-I", [])
+	  ; <set-config> ("-O", 0)
+	  ; <set-config> ("--verbose", 7)
+	)

From srabbelier at gmail.com  Thu Dec  1 15:48:22 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:48:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23672 -
	strategoxt-javascript-backend/trunk/tests/awesome
Message-ID: <20111201144822.7CB87CC0E6@mx4.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:48:22 2011
New Revision: 23672
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23672&sc=1

Log:
Add minimal test

Added:
   strategoxt-javascript-backend/trunk/tests/awesome/
   strategoxt-javascript-backend/trunk/tests/awesome/minimal.str

Added: strategoxt-javascript-backend/trunk/tests/awesome/minimal.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/awesome/minimal.str	Thu Dec  1 14:48:22 2011	(r23672)
@@ -0,0 +1,10 @@
+module minimal
+
+imports
+  libstratego-lib
+
+strategies
+
+  main =
+    rules(Foo : _ -> 1)
+    ; Foo

From srabbelier at gmail.com  Thu Dec  1 15:48:24 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:48:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23673 - in
	strategoxt-javascript-backend/trunk: . tests
Message-ID: <20111201144824.52901108C020@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:48:24 2011
New Revision: 23673
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23673&sc=1

Log:
Clean up makefiles

Modified:
   strategoxt-javascript-backend/trunk/Makefile
   strategoxt-javascript-backend/trunk/tests/Makefile

Modified: strategoxt-javascript-backend/trunk/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/Makefile	Thu Dec  1 14:48:22 2011	(r23672)
+++ strategoxt-javascript-backend/trunk/Makefile	Thu Dec  1 14:48:24 2011	(r23673)
@@ -30,9 +30,6 @@
 %.js: $(prefix)%.str s2js.jar
 	java -cp $(SXTJAR):s2js.jar s2js.s2js -i $< -I $(STRLIB) > $@
 
-lib/stratego_strc.js: s2js.jar
-	java -cp $(SXTJAR):s2js.jar s2js.s2js -i $(CTREES)libstrc.ctree -I $(STRSDF) > $@
-
 %.lib.js: %.js
 	cat $< | scripts/wrap-libraries.sh > $@
 

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Thu Dec  1 14:48:22 2011	(r23672)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Thu Dec  1 14:48:24 2011	(r23673)
@@ -1,18 +1,10 @@
 COREFILES  := $(wildcard core/*.str)
 BASICFILES := $(wildcard basic/*.str)
-ERRORFILES := $(wildcard error/*.str)
 TESTFILES  := $(COREFILES) $(BASICFILES)
-#TESTFILES := $(ERRORFILES)
 TESTFILES  := $(wildcard awesome/*.str)
-CTREEFILES := $(subst .str,.ctree,$(TESTFILES))
 JSFILES    := $(subst .str,.js,$(TESTFILES))
 TESTRUNS   := $(subst .str,.run,$(TESTFILES))
 
-SXTJAR=~/.nix-profile/share/strc-java/strategoxt.jar
-CTREES=~/.nix-profile/share/
-STRSDF=~/.nix-profile/share/sdf/stratego-front/
-RTGSDF=~/.nix-profile/share/sdf/stratego-regular/
-
 RUN=java -jar ../lib/js.jar
 RUN=node
 
@@ -26,11 +18,7 @@
 
 all: $(TESTRUNS)
 
-%.ctree : %.str
-	$(QUIET_STRC) strj -S -I testlib -i $< -F -o $@
-	@pp-aterm -i $@ > $*.aterm
-
-%.js : %.ctree
+%.js : %.str
 	$(QUIET_S2JS) $(MAKE) -s -C .. tests/$*.js tests/$*.wrapped.js
 	@mv $*.js $*.raw.js
 	@mv $*.wrapped.js $@
@@ -43,13 +31,10 @@
 
 clean: clean_js clean_testruns
 
-clean_ctree:
-	$(QUIET_RM) rm -f $(CTREEFILES)
-
 clean_js:
 	$(QUIET_RM) rm -f $(JSFILES)
 
 clean_testruns:
 	$(QUIET_RM) rm -f $(TESTRUNS)
 
-.PRECIOUS: $(CTREEFILES) $(JSFILES)
+.PRECIOUS: $(JSFILES)

From srabbelier at gmail.com  Thu Dec  1 15:48:26 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:48:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23674 - in
	strategoxt-javascript-backend/trunk: . src/stratego tests
	tests/awesome
Message-ID: <20111201144826.56330108C02C@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:48:26 2011
New Revision: 23674
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23674&sc=1

Log:
checkpoint (go.str compiles)

Modified:
   strategoxt-javascript-backend/trunk/Makefile
   strategoxt-javascript-backend/trunk/src/stratego/direct.str
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/tests/Makefile
   strategoxt-javascript-backend/trunk/tests/awesome/minimal.str

Modified: strategoxt-javascript-backend/trunk/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/Makefile	Thu Dec  1 14:48:24 2011	(r23673)
+++ strategoxt-javascript-backend/trunk/Makefile	Thu Dec  1 14:48:26 2011	(r23674)
@@ -5,30 +5,30 @@
 SXTJAR=~/.nix-profile/share/strc-java/strategoxt.jar
 STRLIB=~/.nix-profile/share/stratego-lib
 CTREES=~/.nix-profile/share
+XTC=~/.nix-profile/share/xtc
+XTCRTREE=~/.nix-profile/share/xtc/stratego-xtc-posix-xsi.rtree
 STRSDF=~/.nix-profile/share/sdf/stratego-front
 RTGSDF=~/.nix-profile/share/sdf/stratego-regular
+COMPLR=java -jar ../compiler.jar
 
 LIBPATH=src/stratego
 LIBPATH=.
 
 all: s2js.jar
 
-s2js/Main.java: src/stratego/s2js.str
+out/s2js/s2js.java: src/stratego/s2js.str $(wildcard src/stratego/*.str)
+	rm -rf out
+	mkdir -p out
 	strj -I $(LIBPATH) -i $< -o $@ -p s2js $(SLIBS)
 
-s2js/Main.class: s2js/Main.java
-	javac -cp $(SXTJAR) -d . -source 5 s2js/*.java
+out/s2js/s2js.class: out/s2js/s2js.java
+	javac -cp $(SXTJAR) -source 5 out/s2js/*.java
 
-jarme: s2js/Main.class
-	mkdir -p jarme
-	touch jarme
-	cp -r s2js jarme
-
-s2js.jar: jarme
-	fastjar cf s2js.jar -C jarme/ .
+s2js.jar: out/s2js/s2js.class
+	fastjar cf s2js.jar -C out/ .
 
 %.js: $(prefix)%.str s2js.jar
-	java -cp $(SXTJAR):s2js.jar s2js.s2js -i $< -I $(STRLIB) > $@
+	java -cp $(SXTJAR):s2js.jar -ss4m s2js.s2js -O 0 -i $< -I $(STRLIB) -I . -I $(CTREES) -I $(STRSDF) $(I) > $@
 
 %.lib.js: %.js
 	cat $< | scripts/wrap-libraries.sh > $@
@@ -36,9 +36,14 @@
 %.wrapped.js: %.js
 	cat $< | scripts/wrap-libraries.sh | scripts/add-cli-wrapper.sh > $@
 
+%.min.js: %.js
+	$(COMPLR) --js="$<" --js_output_file="$@"
+
+libstratego-xtc.ctree:
+	strj --library -F -I $(CTREES) -I $(XTC) -i $(XTCRTREE) -o $@ -O 1
+
 clean:
-	rm -rf jarme
-	rm -rf s2js
+	rm -rf out
 	rm -f s2js.jar
 
 hack: compiler-hack file-hack

Modified: strategoxt-javascript-backend/trunk/src/stratego/direct.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/direct.str	Thu Dec  1 14:48:24 2011	(r23673)
+++ strategoxt-javascript-backend/trunk/src/stratego/direct.str	Thu Dec  1 14:48:26 2011	(r23674)
@@ -12,6 +12,36 @@
           ; pack-log-include
           ; <ReadFromFile> file => tree
 
+override check-ext-overload-def =
+    ?def{a*}
+    ; DefinitionName
+    ; if ExtDefinition then
+        if !a* => [] then
+          where(sdef-key-to-string
+          ; !def; write-to-string
+          ; debug(!"error: redefining external definition: ")
+          )
+        end
+      else
+        if !a* => [_ | _] then
+          sdef-key-to-string
+          ; debug(!"error: no external definition found: ")
+          ; <exit> 1
+        end
+      end
+
+override JoinDefsExt =
+    where(map(
+      ?ExtSDef(f, <length => i>, <length => j>)
+    + ?ExtSDefInl(f, <length => i>, <length => j>, s)
+    ))
+    ; (fetch-elem(?ExtSDefInl(_,_,_,_)) <+ Hd)
+
+override JoinDefsExt =
+    fetch(?ExtSDef(f,_,_) + ?ExtSDefInl(f,_,_,_))
+    ; fetch-elem(?SDefT(f,_,_,_))
+    ; where(<debug(!"error: redefining external definition: ")> f)
+
 override pack-stratego-parse-stratego =
       ?(IncludeFromPath(<id>), includes)
     ; if has-extension(|"str") then
@@ -51,6 +81,123 @@
         end
     end
 
+override   frontend =
+    ensure(m-transform-no-overlays(id
+; where(<debug(!"")>"1")
+      // add some definitions and constructors
+
+      ; ensure(if-not-lib(m-add-main)
+      ; m-add-anno-cong-def
+      ; where(dr-constructors; map(m-add-constructor)))
+; where(<debug(!"")>"1")
+      // desugar and check constructors
+
+      ; ensure(m-transform-constructors(id
+          ; pre-desugar
+          ; try(DeclareVarToConst)
+	      ; try((TupleDecl <+ QuotedConstrDecl); pre-desugar)
+          ; (GenerateCheckRule <+ dbg(|"GenerateCheckRule fails: "))
+          ; try(where(m-MkCongDef; m-add-def))
+        ))
+; where(<debug(!"")>"1")
+      // desugar and check overlays
+
+      ; ensure(m-transform-overlays(id
+          ; pre-desugar
+          ; check-overlay
+          ; try(DeclareVarToConst)
+        ))
+; where(<debug(!"")>"1")
+      ; ensure(m-transform-overlays(id
+          ; m-variables-to-constructors-in-def
+          ; pre-desugar
+          ; not(def-use-def)
+          ; not(check-where-with)
+          ; raise-annotations
+          ; GenerateCheckRule
+          ; DeclareExpandOverlay
+          ; where(Overlay-to-Congdef; m-add-def)
+        ))
+; where(<debug(!"")>"1")
+      ; ensure(m-transform-overlays(
+          not(check-constructors)
+        ))
+; where(<debug(!"")>"1")
+      // plug in dump of asts
+      ; ensure(if <get-config> "--dump-aterms" then
+          where(
+            <debug> "Going to write to file"
+            ; if <get-config> "-i" then
+                fp := <fopen <+ debug(!"Could not open file")> (<concat-strings> [<get-config> "-i", ".aterm"], "w")
+              else
+                fp := <fopen <+ debug(!"Could not open file")> ("dump.aterm", "w")
+              end
+            ; <fprint <+ debug(!"Could not write to file")> (fp, [<bagof-StrAsts>])
+            ; <fclose> fp
+          )
+        end)
+; where(<debug(!"")>"1")
+      // transform and check local definitions
+
+      ; ensure(m-transform-local-defs(map(id
+          ; m-repair-types
+          ; pre-desugar
+          ; raise-annotations
+        )))
+; where(<debug(!"")>"1")
+      ; ensure(m-lift-dynamic-rules-from-spec)
+; where(<debug(!"")>"1")
+      ; ensure(check-calls)
+; where(<debug(!"")>"1")
+      ; ensure(m-transform-local-defs(
+          map(id
+            ; ensure(stratego-desugar)
+            ; ensure(raise-annotations)
+	        ; ensure(?SDefT("report-area", _, _, _) <+ not(def-use-def)) // XXX: epic hack of doom
+            ; ensure(not(check-constructors))
+            ; ensure(expand-overlays-in-def)
+            ; ensure(rules-to-sdefs-def)
+            ; ensure(desugar-list-matching)
+	        ; ensure(desugar-DefaultVarDec)
+            ; ensure(strename)
+            ; ensure(desugar-def)
+            ; ensure(check-patterns)
+          )
+        ))
+
+; where(<debug(!"")>"1a")
+
+      ; ensure(m-transform-local-defs(id
+; where(<debug(!"")>"1b")
+          ; ![<ensure(joindefs)>]
+; where(<debug(!"")>"1c")
+          ; [ensure(RenameSDef)]
+; where(<debug(!"")>"1d")
+        ))
+; where(<debug(!"")>"2")
+      ; ensure(m-transform-external-defs(id
+          ; if ?[_,_|_] then
+              warn(|"multiple external definitions with same signature")
+	        ; [rules(MySameSigExtDef :+= <id>) | ![]]
+            end
+          ; [RenameSDef
+             ; desugar-DefaultVarDec
+             ; strename
+            ]
+        ))
+; where(<debug(!"")>"3")
+      ; ensure(m-transform-local-defs(
+          [rename-calls
+           ; simplify
+	       ; define-congruences-def
+          ]
+        ))
+; where(<debug(!"")>"4")
+      ; ensure(if-lib(remove-unused-external-defs, remove-unused-defs))
+    )
+; where(<debug(!"")>"5")
+    ; ensure(tfc1(|"Stratego-Core", "fe-cong")))
+
 // external concat-strings-impl(|)
 
 // override concat-strings = concat-strings-impl 
@@ -64,6 +211,7 @@
 	ExtSDef(f, a1, a2) -> ExtSDef(<unmangle>f, a1, a2)
 
 ensure(s) = with(s => result); !result
+ensure-not(s) = with(not(s) => result); !result
 
 direct-compile =
     with(<set-config> ("JAVA_PLATFORM", ()))

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Dec  1 14:48:24 2011	(r23673)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Dec  1 14:48:26 2011	(r23674)
@@ -28,7 +28,12 @@
 
 strategies
 	
-  main = with(s2js-init-options); parse-options(s2js-options); xtc-input(s2js ; echo ; ![])
+  main = id
+	; with(s2js-init-options)
+	; parse-options(s2js-options)
+	; xtc-input(s2js)
+	; echo
+	; ![]
 	
   pp-aterm(msg) = ?x; pp-aterm-box; box2text-string(|80); debug(msg); !x
 	
@@ -38,6 +43,7 @@
       )
 	; log-timed(id
         ; direct-compile
+        ; backend-simplify
       | "Backend preprocessing succeeded", 1
       )
     ; log-timed(id
@@ -146,70 +152,57 @@
  //
 
 rules
+  is-debug-output:
+	(verbose, terse) -> terse
 
   translate-constant-definition = !"" // TODO(karltk)
 	
   translate-outer-definition : 
-    AnnoDef([Extend()], def @ SDefT(x, s*, t*, s)) -> $[
-    	var /* unsupported extend */ [x] = [body];
-    ]
+    AnnoDef([Extend()], def @ SDefT(x, s*, t*, s)) ->
+    $[var /* unsupported extend */ [x] = [body];]
   with
   	body := <translate-definition-body> def   
 
 
   translate-outer-definition : 
-    AnnoDef([Override()], def @ SDefT(x, s*, t*, s)) -> $[
-    	var /* unsupported override */ [x] = [body];
-    ]
+    AnnoDef([Override()], def @ SDefT(x, s*, t*, s)) ->
+    $[var /* unsupported override */ [x] = [body];]
   with
   	body := <translate-definition-body> def   
 
   translate-outer-definition : 
-    AnnoDef([Internal()], def @ SDefT(x, s*, t*, s)) -> $[
-    	var /* unsupported internal */ [x] = [body];
-    ]
+    AnnoDef([Internal()], def @ SDefT(x, s*, t*, s)) ->
+    $[var /* unsupported internal */ [x] = [body];]
   with
   	body := <translate-definition-body> def   
 
   translate-outer-definition :
-  	SDefT(x, s*, t*, s){a*} -> $[
+	SDefT(x, s*, t*, s){a*} -> result
+  with
+	body := <translate-definition-body>;
+	verbose := $[
   		var [x] = [body];
   		c.[x] = [x];
-  	]	
-  with
-  	body := <translate-definition-body>
+	];
+	terse := $[var [x] = c.[x] = [body];
+	];
+	result := <is-debug-output>(verbose, terse)
 
   translate-outer-definition :
     ExtSDef(n, _, _) -> 
-    $[
-    	var [n] = StrategoJS.resolveImport("[n]");
+    $[var [n] = StrategoJS.resolveImport("[n]");
     ]
 
   translate-inner-definition :
-  	SDefT(x, s*, t*, s){a*} -> $[
-  		var [x] = [body];
+	SDefT(x, s*, t*, s){a*} ->
+	$[var [x] = [body];
   	]	
   with
   	body := <translate-definition-body>
   
-  
   translate-definition-body:
-  	SDefT(x, s*, t*, s) ->
-  	$[
-     function(ctx, term [param*]) {
-       trace("[x] : " + (term === undefined ? "undefined" : ctx.factory.prettify(term)));
-       [bstm-init*]
-       if(TRACES_ENABLED) ctx.push("[x]");
-       [feil]: {
-         [bstm]
-         if(TRACES_ENABLED) ctx.popOnSuccess();
-         return term;
-       }
-       if(TRACES_ENABLED) ctx.popOnFailure();
-       return null;
-     }
-  	]
-  with
+	SDefT(x, s*, t*, s) -> result
+	with
   	{| 
   		IsStrategyArg, CurrentLiftedFrame:
 //  		js-CheckBuild, js-CheckBuild, IsLiftedTVar,
@@ -226,7 +219,33 @@
         	end>
   	  ; feil              := <newname> "Fail_"
   	  ; bstm              := <translate-strategy(|"ERROR", feil)> s
-  	|}  	  	
+	|};
+	verbose := $[
+     function(ctx, term [param*]) {
+       trace("[x] : " + (term === undefined ? "undefined" : ctx.factory.prettify(term)));
+       [bstm-init*]
+       if(TRACES_ENABLED) ctx.push("[x]");
+       [feil]: {
+         [bstm]
+         if(TRACES_ENABLED) ctx.popOnSuccess();
+         return term;
+       }
+       if(TRACES_ENABLED) ctx.popOnFailure();
+       return null;
+     }
+	];
+	terse :=
+   $[function(ctx, term [param*]) {
+       [bstm-init*]
+       [feil]: {
+         [bstm]
+         return term;
+       }
+       return null;
+     }
+     ]
+    ;
+	result := <is-debug-output>(verbose, terse)
 
   translate-params = 
   	unzip(translate-param <+ debug(!"Bombed : "))
@@ -278,8 +297,12 @@
   translate-CallT-dynamic(|s,feil) = fail // TODO(karltk)
   
   translate-CallT(|s,feil):
-  	CallT(SVar(x), s*, t*) -> 
-  	$[
+	CallT(SVar(x), s*, t*) -> result
+  with
+      s'* := <map(lift-strategy-to-function)> s*
+	; t'* := <map(js-construct-term(|feil))> t*
+	; args := <js-join-args> (s'*, t'*)
+	; verbose := $[
         term = [x](ctx, term [args]);	
         if(term === null) {
         	trace("[feil] : return from [x]"); 
@@ -288,10 +311,12 @@
         	throw "internal error: call to [x] produced 'undefined' result";
         }
   	]
-  with
-      s'* := <map(lift-strategy-to-function)> s*
-  	; t'* := <map(js-construct-term(|feil))> t*
-  	; args := <js-join-args> (s'*, t'*)
+	; terse := $[term = [x](ctx, term [args]);
+	  if(term === null) {
+		break [feil];
+	  };
+	  ];
+	result := <is-debug-output>(verbose, terse)
   	  
   js-join-args:
  	(s'*, t'*) -> args
@@ -305,11 +330,7 @@
   	
   translate-Build(|s,f) :
   	Build(t) -> <js-check-unbound-args(|t, f)>
-  	$[
-  		[dec*]
-  		[stm*]
-  		term = [e];
-  	]
+	$[[dec*][stm*] term = [e]; ]
   with
   	{| js-CheckBuild : 
   	    e := <js-construct-term(|f)> t
@@ -318,14 +339,17 @@
   	
 
   translate-Seq(|s,f):
-  	Seq(s1, s2) -> $[
-  		[<translate-strategy(|s,f)> s1]
-  		[<translate-strategy(|s,f)> s2]
-  	]
+	Seq(s1, s2) -> $[[s1'][s2']]
+	with s1' := <translate-strategy(|s,f)> s1
+	with s2' := <translate-strategy(|s,f)> s2
   	
   translate-PrimT(|s,feil) :
-    PrimT(f, s*, t*) -> <js-check-unbound-args(|t*, feil)>
-    $[ 
+    PrimT(f, s*, t*) -> <js-check-unbound-args(|t*, feil)>result
+  with
+      s'*  := <map(lift-strategy-to-function)> s*
+    ; t'*  := <map(js-construct-term(|feil))> t*
+    ; args := <js-join-args> (s'*, t'*)
+    ; verbose := $[
       ctx.push("[f]");
       term = StrategoJS.SSL.[f](ctx, term [args]);
       if (term === null) {
@@ -337,24 +361,33 @@
       }
       ctx.popOnSuccess();
     ]
-  with
-      s'*  := <map(lift-strategy-to-function)> s*
-    ; t'*  := <map(js-construct-term(|feil))> t*
-    ; args := <js-join-args> (s'*, t'*)
-        
-
+    ; terse := $[term = StrategoJS.SSL.[f](ctx,term [args]);
+      if(term === null){
+	break [feil];
+      }
+      ]
+    ; result := <is-debug-output>(verbose, terse)
   
   translate-Id(|s,f):
   	Id() -> "/* id */"
   	
   translate-Fail(|s, feil):
-  	Fail() -> $[ {?trace("[feil]"); break [feil]; } ]
+	Fail() -> <is-debug-output>(
+		$[ {?trace("[feil]"); break [feil]; } ],
+		$[ { break [feil]; } ])
   	
   translate-Override(|s,f) = fail // TODO (karltk)
   
   translate-GuardedLChoice-no-left-branch(|s,f):
-  	GuardedLChoice(s1, Id(), s2) -> $[
-  		var [copy] = term;
+	GuardedLChoice(s1, Id(), s2) -> result
+  with
+	  copy := <newname> "term_"
+	; succ := <newname> "Success_"
+	; feil := <newname> "Fail_"
+	; s1'  := <translate-strategy(|succ,feil)> s1
+	; s2'  := <translate-strategy(|succ,f)> s2
+	; verbose := $[
+		var [copy] = term;
   		[succ]: {
   			[feil]: {
   				[s1']
@@ -363,17 +396,30 @@
   			term = [copy]
   			[s2']
   		}
-  	]
-  with
-  	  copy := <newname> "term_"
-  	; succ := <newname> "Success_"
-  	; feil := <newname> "Fail_"
-  	; s1'  := <translate-strategy(|succ,feil)> s1
-  	; s2'  := <translate-strategy(|succ,f)> s2
+	  ]
+	; terse := $[var [copy] = term;
+	  [succ]: {
+		[feil]: {
+			[s1']
+			break [succ];
+		}
+		term = [copy];
+		[s2']
+	  }
+	  ]
+	; result := <is-debug-output>(verbose, terse)
   	  	
   translate-GuardedLChoice(|s,outerfeil):
-  	GuardedLChoice(s1, s2, s3) -> $[
-  		var [copy] = term;
+	GuardedLChoice(s1, s2, s3) -> result
+  with
+	  copy      := <newname> "term_"
+	; succ      := <newname> "Success_"
+	; feil      := <newname> "Fail_"
+	; s1'       := <translate-strategy(|succ,feil)> s1
+	; s2'       := <translate-strategy(|succ,outerfeil)> s2
+    ; s3'       := <translate-strategy(|succ,outerfeil)> s3
+    ; verbose := $[
+	    var [copy] = term;
   		[succ]: {
   			[feil]: {
   				[s1']
@@ -384,31 +430,38 @@
   			[s3']
   		}
   	]
-  with
-  	  copy      := <newname> "term_"
-  	; succ      := <newname> "Success_"
-  	; feil      := <newname> "Fail_"
-  	; s1'       := <translate-strategy(|succ,feil)> s1
-  	; s2'       := <translate-strategy(|succ,outerfeil)> s2
-    ; s3'       := <translate-strategy(|succ,outerfeil)> s3
+	; terse := $[var [copy] = term;
+	  [succ]: {
+		[feil]: {
+			[s1']
+			[s2']
+			break [succ];
+		}
+		term = [copy];
+		[s3']
+	  }
+	  ]
+	; result := <is-debug-output>(verbose, terse)
   	
     translate-Scope(|s,f) : 
-    Scope(vars, body) -> 
-    $[
-      [decl*]
-      [body']
-    ]
+    Scope(vars, body) -> result
     with
       decl*  := <map(to-js-vardecl)> vars
     ; body'  := <translate-strategy(|s,f)> body
+    ; verbose := $[
+      [decl*]
+      [body']
+    ]
+    ; terse := $[[decl*]
+      [body']
+      ]
+    ; result := <is-debug-output>(verbose, terse)
 
   translate-Let(|s,f) : 
-    Let(defs, body) -> $[
-    	{/*let*/
+    Let(defs, body) -> $[{/*let*/
     		[def*]
     		[body']
-    	}/*let*/
-    ]
+	}/*let*/]
   with 
     def* := <map(translate-inner-definition)> defs
   ; body' := <translate-strategy(|s,f)> body
@@ -447,13 +500,9 @@
 //    ; x_constants   := <ConstantContainerClass>
     ; rules(
         IsImported : inputname
-        ConstDecl :+= $[
-          var [x_constant];
-        ]
+        ConstDecl :+= $[var [x_constant];]
         ConstDecl :+= $[]
-        ConstInit :+= $[
-          [x_constant] = StrategoJS.Term.parse("[<write-to-string; NonReqEscape> contents]");
-        ] /*[x_constants],*/
+        ConstInit :+= $[[x_constant] = StrategoJS.Term.parse("[<write-to-string; NonReqEscape> contents]");] /*[x_constants],*/
       )
 
    output-dirname =
@@ -544,18 +593,14 @@
     
  JSDeclareExtConstructor:
  	ExtOpDecl(c, t) ->
- 	$[
- 		/* external constructor [x] */
- 	]
+	$[/* external constructor [x] */]
  	with
  		n := <Arity <+ is-int> t
  	;	x := <js-ConstructorName> (c, n)
     
   JSDeclareConstructor: 
   	OpDecl(c, t) -> 
-  	$[ 
-  		/* constructor [x] */  
-  	]
+	$[/* constructor [x] */]
   where
   	not(OpDecl("", id) + OpDecl("Cons", [id, id]) + OpDecl("Nil", []))
   with
@@ -565,9 +610,8 @@
     
   JSInitConstructorQ:
   	OpDecl(c, t) -> 
-  	$[
-       var [x] = factory.makeCtor("[c']", [<js-mk-int-const> ar]);
-  	 ]
+	$[var [x] = factory.makeCtor("[c']", [<js-mk-int-const> ar]);
+	]
   where
     c' := <string-as-chars(unescape-chars ; un-double-quote-chars)> c
   ; ar := <Arity <+ is-int> t
@@ -575,9 +619,7 @@
     
     
   JSInitConstructor:
-  	OpDecl(c, t) -> $[
-  		var [x] = factory.makeCtor("[c]", [<js-mk-int-const> ar]);
-  	]
+	OpDecl(c, t) -> $[var [x] = factory.makeCtor("[c]", [<js-mk-int-const> ar]);]
   where
   	ar := <Arity <+ is-int> t
   ; x  := <js-ConstructorName> (c, ar)
@@ -595,8 +637,7 @@
   	  ; rules(
           IsLocalOpDecl: (name, arity)
   	      ConstructorDecl :+= $[]
-  	      ConstructorInit :+= $[
-  	      	var [x] = factory.makeCtor("[name]", [<js-mk-int-const> arity]); 
+	      ConstructorInit :+= $[var [x] = factory.makeCtor("[name]", [<js-mk-int-const> arity]);
   	      ]
   	    )
   	end 	    

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Dec  1 14:48:24 2011	(r23673)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Dec  1 14:48:26 2011	(r23674)
@@ -88,11 +88,11 @@
     ; rules(
         js-CheckBuild :+=
           ( $[ var [x]; ]
-          , ${
-               {x} = StrategoJS.SSL.SSL_mkterm(ctx, term, {e_t1}, {e_t2});
-               if ({x} === null)
-                 break {feil};
-            })
+          , $[[x] = StrategoJS.SSL.SSL_mkterm(ctx, term, [e_t1], [e_t2]);
+            if ([x] === null) {
+		break [feil];
+            }
+            ])
       )
   
   js-ConstructTerm(|f) : 
@@ -120,10 +120,9 @@
   ; rules(
       js-CheckBuild :+=
         ( $[ var [x]; ]
-        , $[
-            [x] = StrategoJS.SRTS.checkListTail([e]);
+        , $[[x] = StrategoJS.SRTS.checkListTail([e]);
             if ([x] === null) break [feil];
-          ]
+            ]
         )
     )
     
@@ -132,11 +131,11 @@
   js-check-unbound-args(|t, f) = try(js-CheckUnboundArgs(|t,f))
 
   js-CheckUnboundArgs(|t, feil) :
-  	stm -> $[
-      if ([e])
-        break [feil];
-      [stm]
-    ]
+	stm -> $[if ([e]) {
+		break [feil];
+	}
+	[stm]
+	]
   where
       <collect({?Var(_){t*}; where(<not(["bound"])> t* )})> t
     ; not([])

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Thu Dec  1 14:48:24 2011	(r23673)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Thu Dec  1 14:48:26 2011	(r23674)
@@ -26,14 +26,16 @@
     Match(Wld(), trm) -> ""
 
   translate-Match(|s,f) :
-    Match(As(t1,t2), trm) ->
-    $[ 
-      [match1];
-      [match2];
-    ]
+    Match(As(t1,t2), trm) -> result
     with 
       match1 := <translate-Match(|s,f)> Match(t1,trm)
     ; match2 := <translate-Match(|s,f)> Match(t2,trm)
+    ; verbose := $[
+      [match1];
+      [match2];
+    ]
+    ; terse := $[[match1];[match2];]
+    ; result := <is-debug-output>(verbose, terse)
 
   translate-Match(|s,f) :
     Match(Var(x){"unbound"}, ReadFrom(trm)) -> assign
@@ -41,19 +43,24 @@
       assign := <js-VarToWrite> (x, trm)
 
   translate-Match(|s,feil) :
-    Match(Var(x){"bound"}, ReadFrom(e)) ->
-    $[
+    Match(Var(x){"bound"}, ReadFrom(e)) -> result
+    with
+      e_var := <js-VarToReadRef> Var(x)
+      ; verbose := $[
       if ([e] != [e_var] && !factory.match([e_var],[e])) {
       	trace("[feil]"); 
         break [feil];
       }
      ]
-    with
-      e_var := <js-VarToReadRef> Var(x)
+     ; terse := $[if ([e] != [e_var] && !factory.match([e_var],[e])) { break [feil]; }]
+     ; result := <is-debug-output>(verbose, terse)
 
   translate-Match(|s,feil) :
-    Match(Var(x){"(un)bound"}, ReadFrom(e)) ->
-    $[
+    Match(Var(x){"(un)bound"}, ReadFrom(e)) -> result
+    with
+      e_var      := <js-VarToReadRef> Var(x)
+    ; stm_assign := <js-VarToWrite> (x, e)
+    ; verbose := $[
       if ([e_var] === null) {
         [stm_assign]
       }?else if ([e_var] != [e] && !factory.match([e_var], [e])) {
@@ -61,21 +68,23 @@
         break [feil];
       }
     ]
-    with 
-      e_var      := <js-VarToReadRef> Var(x)
-    ; stm_assign := <js-VarToWrite> (x, e)
+    ; terse := $[if ([e_var] === null) {
+	[stm_assign]
+     }?else if ([e_var] != [e] && !factory.match([e_var], [e])) {
+	break [feil];
+     }
+    ]
+    ; result := <is-debug-output>(verbose, terse)
 
   translate-Match(|s,f) :
     Match(Var(x){}, trm) -> <translate-Match(|s,f)> Match(Var(x){"(un)bound"}, trm)
 
   translate-Match(|s,f) :
     Match(Explode(t1, t2), e') ->
-    ${ 
-      var {x_cons} = StrategoJS.SSL.SSL_get_constructor(ctx, term, {e});
+    ${var {x_cons} = StrategoJS.SSL.SSL_get_constructor(ctx, term, {e});
       {<translate-Match(|s,f)> Match(t1, ReadFrom(x_cons))};
       var {x_args} = StrategoJS.SSL.SSL_get_arguments(ctx, term, {e});
-      {<translate-Match(|s,f)> Match(t2, ReadFrom(x_args))};
-     }
+      {<translate-Match(|s,f)> Match(t2, ReadFrom(x_args))};}
   with
       !e' => ReadFrom(e)
     ; x_cons := <newname> "cons"
@@ -92,11 +101,9 @@
 
   translate-MatchAnno(|s,f) :
     Match(Anno(pt1, pt2), ReadFrom(e)) -> 
-    $[
-      [stm0];
+    $[[stm0];
       var [x] = factory.getAnnotations([e]);
-      [stm1];
-    ]
+      [stm1];]
   where 
       <not(Wld)> pt2
   with
@@ -107,53 +114,55 @@
   // String constants are not cached for comparison,
   // since we do comparison modulo annotations
   translate-Match(|s,feil) :
-    Match(Str(str), e') -> 
-    $[
+    Match(Str(str), e') -> result
+  with
+      !e' => ReadFrom(e)
+    ; e_str := <escape> str
+    ; verbose := $[
       if (factory.termType([e]) !== factory.STRING || "[e_str]" !== factory.stringValue([e])) {
       	trace("[feil]");
         break [feil];
       }
     ]
-  with
-      !e' => ReadFrom(e)
-    ; e_str := <escape> str
+    ; terse := $[if (factory.termType([e]) !== factory.STRING || "[e_str]" !== factory.stringValue([e])) {
+	break [feil];
+    }
+    ]
+    ; result := <is-debug-output>(verbose, terse)
 
   translate-Match(|s,feil) :
-    Match(Int(i), e') -> 
-    $[
+    Match(Int(i), e') -> result
+  with
+      !e' => ReadFrom(e)
+    ; e_int := <js-mk-int-const> i
+    ; verbose := $[
       if (factory.termType([e]) !== factory.INT || [e_int] !== factory.intValue([e])) {
         trace("[feil]");
         break [feil];
       }
     ]
-  with
-      !e' => ReadFrom(e)
-    ; e_int := <js-mk-int-const> i
+    ; terse := $[if (factory.termType([e]) !== factory.INT || [e_int] !== factory.intValue([e])) {break [feil];}]
+    ; result := <is-debug-output>(verbose, terse)
 
   translate-Match(|s,feil) :
-    Match(Real(r), e') -> 
-    $[
+    Match(Real(r), e') -> result
+  with
+      !e' => ReadFrom(e)
+    ; e_real := <try(real-to-string)> r
+    ; verbose := $[
       if (factory.termType([e]) !== factory.REAL || [e_real] !== factory.realValue([e])) {
       	trace("[feil]");
         break [feil];
       }
     ]
-  with
-      !e' => ReadFrom(e)
-    ; e_real := <try(real-to-string)> r
+    ; terse := $[if (factory.termType([e]) !== factory.REAL || [e_real] !== factory.realValue([e])) {break [feil];}]
+    ; result := <is-debug-output>(verbose, terse)
 
   /**
    * Translate a match of an Op, but not a Cons/2 , Nil/0, or tuple.
    */
   translate-Match(|s,feil) :
-    Match(op at Op(c, ts), ReadFrom(e)) ->
-    $[
-      if (factory.termType([e]) !== factory.APPL || [e_nomatch]) {
-      	trace("[feil]");
-        break [feil];
-      }
-      [match-args]
-    ]
+    Match(op at Op(c, ts), ReadFrom(e)) -> result
   where
     <not(is-ListOp + is-TupleOp)> op
   with
@@ -164,24 +173,35 @@
     else
       e_nomatch := $[ !factory.ctorEquals([e_cons], factory.getConstructor([e])) ]
     end
+  ; verbose := $[
+      if (factory.termType([e]) !== factory.APPL || [e_nomatch]) {
+	trace("[feil]");
+        break [feil];
+      }
+      [match-args]
+    ]
+  ; terse := $[if (factory.termType([e]) !== factory.APPL || [e_nomatch]) {break [feil];} [match-args]]
+  ; result := <is-debug-output>(verbose, terse)
 
   /**
    * Translate a match of a tuple.
    */
   translate-Match(|s,feil) :
-    Match(op at Op(c, ts), ReadFrom(e)) ->
-    $[
+    Match(op at Op(c, ts), ReadFrom(e)) -> result
+  where
+    <is-TupleOp> op
+  with
+    i := <write-to-string> <length> ts
+  ; match-args := <translate-Match-args(|s,feil)> (e, ts)
+  ; verbose := $[
       if (factory.termType([e]) !== factory.TUPLE || factory.getSubtermCount([e]) !== [i]) {
       	trace("[feil]");
         break [feil];
       }
       [match-args]
     ]
-  where
-    <is-TupleOp> op
-  with
-    i := <write-to-string> <length> ts
-  ; match-args := <translate-Match-args(|s,feil)> (e, ts)
+  ; terse := $[if (factory.termType([e]) !== factory.TUPLE || factory.getSubtermCount([e]) !== [i]) {break [feil];}[match-args]]
+  ; result := <is-debug-output>(verbose, terse)
   
   translate-Match-args(|s,f) :
     (e, terms) -> bstm_matcharg*
@@ -200,11 +220,7 @@
   	result := <translate-Match(|s,f)> Match(Var(x){t*}, e)
 
   js-MatchArg2(|s,f) : 
-    (t, e') -> 
-    $[
-      [stm1];
-      [stm2];
-    ]
+    (t, e') -> result
   with
     !e' => ReadFrom(e) 
   ; x    := <newname> "arg"
@@ -214,27 +230,44 @@
     else 
      stm1 := $[ var [x] = [e]; ]
     end
+  ; verbose := $[
+      [stm1];
+      [stm2];
+    ]
+  ; terse := $[[stm1];[stm2];]
+  ; result := <is-debug-output>(verbose, terse)
 
   translate-Match(|s,feil) :
-    Match(Op("Nil", []), ReadFrom(e)) ->
-    $[
+    Match(Op("Nil", []), ReadFrom(e)) -> result
+    with verbose := $[
       if(factory.termType([e]) !== factory.LIST || !factory.isEmptyList([e])) {
       	trace("[feil]");
         break [feil];
       }
     ]
+    ; terse := $[if(factory.termType([e]) !== factory.LIST || !factory.isEmptyList([e])) {
+	break [feil];
+      }
+      ]
+    ; result := <is-debug-output>(verbose, terse)
 
   translate-Match(|s,feil) :
-    Match(Op("Cons", [hd, tl]), ReadFrom(e)) ->
-    $[
+    Match(Op("Cons", [hd, tl]), ReadFrom(e)) -> result
+  with
+    match-args :=
+      <map(js-MatchArg1(|s,feil) <+ js-MatchArg2(|s,feil))>
+        [ (hd, ReadFrom($[ factory.head([e]) ]))
+        , (tl, ReadFrom($[ factory.tail([e]) ])) ]
+    ; verbose := $[
       if(factory.termType([e]) !== factory.LIST || factory.isEmptyList([e])) {
       	trace("[feil]");
         break [feil];
       }
       [match-args]
     ]
-  with 
-    match-args := 
-      <map(js-MatchArg1(|s,feil) <+ js-MatchArg2(|s,feil))> 
-        [ (hd, ReadFrom($[ factory.head([e]) ]))
-        , (tl, ReadFrom($[ factory.tail([e]) ])) ]
+    ; terse := $[if(factory.termType([e]) !== factory.LIST || factory.isEmptyList([e])) {
+	break [feil];
+      }
+      [match-args]
+      ]
+    ; result := <is-debug-output>(verbose, terse)

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Thu Dec  1 14:48:24 2011	(r23673)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Thu Dec  1 14:48:26 2011	(r23674)
@@ -18,12 +18,10 @@
 
 all: $(TESTRUNS)
 
-%.js : %.str
+%.wrapped.js : %.str
 	$(QUIET_S2JS) $(MAKE) -s -C .. tests/$*.js tests/$*.wrapped.js
-	@mv $*.js $*.raw.js
-	@mv $*.wrapped.js $@
 
-%.run : %.js
+%.run : %.wrapped.js
 	$(QUIET_RUN) $(RUN) $< | ../scripts/no-fail-check.sh | ../scripts/modulate-verbosity.sh && test 0 -eq $${PIPESTATUS} && touch $@
 	@echo '*** $< ***'
 

Modified: strategoxt-javascript-backend/trunk/tests/awesome/minimal.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/awesome/minimal.str	Thu Dec  1 14:48:24 2011	(r23673)
+++ strategoxt-javascript-backend/trunk/tests/awesome/minimal.str	Thu Dec  1 14:48:26 2011	(r23674)
@@ -6,5 +6,5 @@
 strategies
 
   main =
-    rules(Foo : _ -> 1)
+    rules(Foo := 1)
     ; Foo

From srabbelier at gmail.com  Thu Dec  1 15:48:29 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:48:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23675 -
	strategoxt-javascript-backend/trunk/src/stratego
Message-ID: <20111201144829.116872B8042@mx2.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:48:28 2011
New Revision: 23675
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23675&sc=1

Log:
Remove debug statements

Modified:
   strategoxt-javascript-backend/trunk/src/stratego/direct.str

Modified: strategoxt-javascript-backend/trunk/src/stratego/direct.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/direct.str	Thu Dec  1 14:48:26 2011	(r23674)
+++ strategoxt-javascript-backend/trunk/src/stratego/direct.str	Thu Dec  1 14:48:28 2011	(r23675)
@@ -83,13 +83,11 @@
 
 override   frontend =
     ensure(m-transform-no-overlays(id
-; where(<debug(!"")>"1")
       // add some definitions and constructors
 
       ; ensure(if-not-lib(m-add-main)
       ; m-add-anno-cong-def
       ; where(dr-constructors; map(m-add-constructor)))
-; where(<debug(!"")>"1")
       // desugar and check constructors
 
       ; ensure(m-transform-constructors(id
@@ -99,7 +97,6 @@
           ; (GenerateCheckRule <+ dbg(|"GenerateCheckRule fails: "))
           ; try(where(m-MkCongDef; m-add-def))
         ))
-; where(<debug(!"")>"1")
       // desugar and check overlays
 
       ; ensure(m-transform-overlays(id
@@ -107,7 +104,6 @@
           ; check-overlay
           ; try(DeclareVarToConst)
         ))
-; where(<debug(!"")>"1")
       ; ensure(m-transform-overlays(id
           ; m-variables-to-constructors-in-def
           ; pre-desugar
@@ -118,11 +114,9 @@
           ; DeclareExpandOverlay
           ; where(Overlay-to-Congdef; m-add-def)
         ))
-; where(<debug(!"")>"1")
       ; ensure(m-transform-overlays(
           not(check-constructors)
         ))
-; where(<debug(!"")>"1")
       // plug in dump of asts
       ; ensure(if <get-config> "--dump-aterms" then
           where(
@@ -136,7 +130,6 @@
             ; <fclose> fp
           )
         end)
-; where(<debug(!"")>"1")
       // transform and check local definitions
 
       ; ensure(m-transform-local-defs(map(id
@@ -144,11 +137,8 @@
           ; pre-desugar
           ; raise-annotations
         )))
-; where(<debug(!"")>"1")
       ; ensure(m-lift-dynamic-rules-from-spec)
-; where(<debug(!"")>"1")
       ; ensure(check-calls)
-; where(<debug(!"")>"1")
       ; ensure(m-transform-local-defs(
           map(id
             ; ensure(stratego-desugar)
@@ -165,16 +155,10 @@
           )
         ))
 
-; where(<debug(!"")>"1a")
-
       ; ensure(m-transform-local-defs(id
-; where(<debug(!"")>"1b")
           ; ![<ensure(joindefs)>]
-; where(<debug(!"")>"1c")
           ; [ensure(RenameSDef)]
-; where(<debug(!"")>"1d")
         ))
-; where(<debug(!"")>"2")
       ; ensure(m-transform-external-defs(id
           ; if ?[_,_|_] then
               warn(|"multiple external definitions with same signature")
@@ -185,17 +169,14 @@
              ; strename
             ]
         ))
-; where(<debug(!"")>"3")
       ; ensure(m-transform-local-defs(
           [rename-calls
            ; simplify
 	       ; define-congruences-def
           ]
         ))
-; where(<debug(!"")>"4")
       ; ensure(if-lib(remove-unused-external-defs, remove-unused-defs))
     )
-; where(<debug(!"")>"5")
     ; ensure(tfc1(|"Stratego-Core", "fe-cong")))
 
 // external concat-strings-impl(|)
@@ -215,7 +196,6 @@
 
 direct-compile =
     with(<set-config> ("JAVA_PLATFORM", ()))
-  ; with(debug(!"input: "))
   ; ensure(dr-scope-all(
     	ensure(strc-get-infile)
       ; ensure(pack-stratego-trm(|<concat>[<strc-dep-name>, <strc-get-include-dirs>] ))

From srabbelier at gmail.com  Thu Dec  1 15:48:30 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 01 Dec 2011 14:48:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23676 - in
	strategoxt-javascript-backend/trunk: . src/javascript
	tests/awesome tests/basic
Message-ID: <20111201144830.CEF9E108C020@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Thu Dec  1 14:48:30 2011
New Revision: 23676
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23676&sc=1

Log:
Final changes

Modified:
   strategoxt-javascript-backend/trunk/Makefile
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/tests/awesome/minimal.str
   strategoxt-javascript-backend/trunk/tests/basic/traversal_1.str

Modified: strategoxt-javascript-backend/trunk/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/Makefile	Thu Dec  1 14:48:28 2011	(r23675)
+++ strategoxt-javascript-backend/trunk/Makefile	Thu Dec  1 14:48:30 2011	(r23676)
@@ -28,7 +28,7 @@
 	fastjar cf s2js.jar -C out/ .
 
 %.js: $(prefix)%.str s2js.jar
-	java -cp $(SXTJAR):s2js.jar -ss4m s2js.s2js -O 0 -i $< -I $(STRLIB) -I . -I $(CTREES) -I $(STRSDF) $(I) > $@
+	java -Xmx1536m -cp $(SXTJAR):s2js.jar -ss4m s2js.s2js -O 0 -i $< -I $(STRLIB) -I . -I $(CTREES) -I $(STRSDF) $(I) > $@
 
 %.lib.js: %.js
 	cat $< | scripts/wrap-libraries.sh > $@

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Thu Dec  1 14:48:28 2011	(r23675)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Thu Dec  1 14:48:30 2011	(r23676)
@@ -78,7 +78,7 @@
 	}
 
 	StrategoJS.SSL.SSL_addi = function(ctx, currentTerm, lhs, rhs) {
-		trace("SSL_addi");
+		//trace("SSL_addi");
 		var f = ctx.factory;
 		if(f.termType(lhs) !== f.INT || f.termType(rhs) !== f.INT)
 			return null;
@@ -439,7 +439,7 @@
 
 
 	StrategoJS.SSL.SSL_gti = function(ctx, currentTerm, a, b) {
-		trace("SSL_gti");
+		//trace("SSL_gti");
 		var f = ctx.factory;
 		if(f.termType(a) !== f.INT || f.termType(b) !== f.INT) { 
 			return null;
@@ -448,7 +448,7 @@
 	}
 
 	StrategoJS.SSL.SSL_subti = function(ctx, currentTerm, a, b) {
-		trace("SSL_gti");
+		//trace("SSL_gti");
 		var f = ctx.factory;
 		if(f.termType(a) !== f.INT || f.termType(b) !== f.INT) { 
 			return null;

Modified: strategoxt-javascript-backend/trunk/tests/awesome/minimal.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/awesome/minimal.str	Thu Dec  1 14:48:28 2011	(r23675)
+++ strategoxt-javascript-backend/trunk/tests/awesome/minimal.str	Thu Dec  1 14:48:30 2011	(r23676)
@@ -5,6 +5,10 @@
 
 strategies
 
-  main =
-    rules(Foo := 1)
-    ; Foo
+  x = id
+
+  y = id
+
+  b = id
+
+  main = x <+ y

Modified: strategoxt-javascript-backend/trunk/tests/basic/traversal_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/basic/traversal_1.str	Thu Dec  1 14:48:28 2011	(r23675)
+++ strategoxt-javascript-backend/trunk/tests/basic/traversal_1.str	Thu Dec  1 14:48:30 2011	(r23676)
@@ -1,7 +1,7 @@
 module traversal_1
 
 imports 
-  emu-libstratego-lib
+  libstratego-lib
 
 signature constructors
   Fork : Term * Term -> Term

From L.C.L.Kats at tudelft.nl  Thu Dec  1 16:42:41 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 01 Dec 2011 15:42:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23677 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20111201154241.D38C4108C031@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Dec  1 15:42:41 2011
New Revision: 23677
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23677&sc=1

Log:
fixed regression in test runner (failing tests are errors now)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Thu Dec  1 14:48:30 2011	(r23676)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Thu Dec  1 15:42:41 2011	(r23677)
@@ -65,7 +65,7 @@
     ?tst
   ; test-to-description => name
   ; testlistener-start-testcase(|testsuite, name)
-  ; if errors := <check-warning>tst ; not((id,[])) then
+  ; if errors := <check-error>tst ; not((id,[])) then
       testlistener-finish-testcase(|testsuite, name, False())
     else
       testlistener-finish-testcase(|testsuite, name, True()) 

From M.A.Akhter at student.tudelft.nl  Fri Dec  2 19:00:53 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 02 Dec 2011 18:00:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23678 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang/index
Message-ID: <20111202180053.467F0108C033@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Dec  2 18:00:52 2011
New Revision: 23678
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23678&sc=1

Log:
+ added more exception handling 
+ fine-graining separate compilation

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Thu Dec  1 15:42:41 2011	(r23677)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Dec  2 18:00:52 2011	(r23678)
@@ -52,6 +52,7 @@
 		add(new SPX_index_get_related_files_of_packages(spxIndex));
 		add(new SPX_index_equal_resource_uri(spxIndex));
 		
+
 		// Primitives related to symbol-table - i.e. symbol definition and resolving
 		add(new SPX_symtab_new_scope(spxIndex));
 		add(new SPX_symtab_destroy_scope(spxIndex));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java	Thu Dec  1 15:42:41 2011	(r23677)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java	Fri Dec  2 18:00:52 2011	(r23678)
@@ -12,5 +12,8 @@
 	static final String ON_INIT_CODEGEN_COMMAND_STRING = "ON_INIT_CODEGEN" ;
 	static final String ON_COMPLETE_CODEGEN_COMMAND_STRING = "ON_COMPLETE_CODEGEN" ;
 	
+	static final String ON_INIT_INDEX_UPDATING_COMMAND_STRING = "ON_INIT_INDEX_UPDATING";
+	static final String ON_INDEX_UPDATING_COMPLETED_COMMAND_STRING = "ON_INDEX_UPDATING_COMPLETED";
+	
 	public void run() throws Exception;
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Thu Dec  1 15:42:41 2011	(r23677)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Fri Dec  2 18:00:52 2011	(r23678)
@@ -26,7 +26,7 @@
 	
 	static void ensureFacadeInitialized(SpxSemanticIndexFacade f) throws SpxSymbolTableException {
 		if(f== null) {
-			throw new SpxSymbolTableException("Symbol Table is not initialized for project . Invoke SPX_index_init. ");
+			throw new RuntimeException("Symbol Table is not initialized for project . Invoke SPX_index_init. ");
 		}	
 	}
 	protected void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectName , Object... objects) throws Exception{} ;
@@ -72,10 +72,40 @@
 		if(commandName.equalsIgnoreCase(ON_COMPLETE_CODEGEN_COMMAND_STRING))
 			return onCompleteCodeGenrationCommandInstance(spxSemanticIndex , projectPath, objects);
 		
+		if(commandName.equalsIgnoreCase(ON_INIT_INDEX_UPDATING_COMMAND_STRING))
+			return onInitIndexUpdatingCommandInstance(spxSemanticIndex , projectPath, objects);
+		
+		if(commandName.equalsIgnoreCase(ON_INDEX_UPDATING_COMPLETED_COMMAND_STRING))
+			return onIndexUpdatingCompletedCommandInstance(spxSemanticIndex , projectPath, objects);
+		
 		
 		throw new IllegalArgumentException("Invalid command name :"+ commandName) ;
 	}
-
+	
+	private static IIndexManageCommand onInitIndexUpdatingCommandInstance(
+			final SpxSemanticIndex index, IStrategoString projectPath, Object[] objects) {
+		
+		return new SpxIndexManager(index , projectPath, objects){
+			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
+				SpxSemanticIndexFacade f = idx.getFacadeRegistry().getFacade(projectPath);
+				if(f != null)
+					f.onInitIndexUpdating();
+			}
+		};
+	}
+	
+	private static IIndexManageCommand onIndexUpdatingCompletedCommandInstance(
+			final SpxSemanticIndex index, IStrategoString projectPath, Object[] objects) {
+		
+		return new SpxIndexManager(index , projectPath, objects){
+			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
+				SpxSemanticIndexFacade f = idx.getFacadeRegistry().getFacade(projectPath);
+				if(f != null)
+					f.onIndexUpatingCompleted();
+			}
+		};
+	}
+	
 	private static IIndexManageCommand onInitCodeGenrationCommandInstance(
 			final SpxSemanticIndex index, IStrategoString projectPath,
 			Object[] objects) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Thu Dec  1 15:42:41 2011	(r23677)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Fri Dec  2 18:00:52 2011	(r23678)
@@ -98,7 +98,7 @@
 				}else{
 					_indexId  = _indexId+ "[" + UUID.randomUUID().toString() +"]";
 					this.clearCache();
-					spxSemanticIndexFacade.invalidateSpxCacheDirectories();
+					spxSemanticIndexFacade.tryInvalidatingSpxCacheDirectories();
 					noOfTries--;
 				}
 			}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Thu Dec  1 15:42:41 2011	(r23677)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Fri Dec  2 18:00:52 2011	(r23678)
@@ -427,16 +427,19 @@
 		return _activeNamespace;
 	}
 	
-	long getIntializedOn(){ 
+	//TODO : refactor this time-stamps to a separate class. It is not the right 
+	// place for the following codes.
+	long getIndexLastInitializedOn(){ 
 		Long initializedOn = timestamps.get(INITIALIZED_ON_KEY);
 		
-		if(initializedOn ==null) return System.currentTimeMillis();
+		if(initializedOn ==null) 
+			return 0;
 		
 		return initializedOn;
 	}
 	
-	void setCompileSessionEndedOn(){ 
-		timestamps.put(INITIALIZED_ON_KEY, System.currentTimeMillis());
+	void setIndexUpdatedOn(long timestamp){ 
+		timestamps.put(INITIALIZED_ON_KEY, timestamp);
 	}
 	
 	long getLastCodeGeneratedOn(){ 
@@ -448,7 +451,7 @@
 		return lastCodeGenOn;
 	}
 	
-	void setLastCodeGeneratedOn(long timestap){ 
-		timestamps.put(LAST_CODEGEN_ON_KEY, timestap);
+	void setLastCodeGeneratedOn(long timestamp){ 
+		timestamps.put(LAST_CODEGEN_ON_KEY, timestamp);
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Thu Dec  1 15:42:41 2011	(r23677)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Fri Dec  2 18:00:52 2011	(r23678)
@@ -53,6 +53,7 @@
 	private final SpxConstructors _spxConstructors;
 	
 	private long _currentCodeGenerationStratedOn;
+	private long _currentIndexUpdatingStartedOn;
 
 	
 	/**
@@ -82,8 +83,6 @@
 		_persistenceManager = new SpxPersistenceManager(this);
 		_persistenceManager.initializeSymbolTables(this._projectPath, this);
 		_indexId = _persistenceManager.getIndexId();
-		
-		
 	}
 	
 	protected void finalize() throws Throwable {
@@ -125,12 +124,25 @@
 	 */
 	public ISpxPersistenceManager getPersistenceManager(){	return _persistenceManager; }
 
-	public void onInitCodeGeneration(){
+	
+	
+	synchronized  void onInitIndexUpdating(){
+		this._currentIndexUpdatingStartedOn = System.currentTimeMillis();
+	}
+	
+	synchronized void onIndexUpatingCompleted(){
+		ISpxPersistenceManager manager = this.getPersistenceManager();
+		manager.spxSymbolTable().setIndexUpdatedOn(this._currentIndexUpdatingStartedOn);
+	}
+	
+	synchronized void onInitCodeGeneration(){
 		this._currentCodeGenerationStratedOn = System.currentTimeMillis(); 
 	}
 	
-	public void onCompleteCodeGeneration() { 
-		this.getPersistenceManager().spxSymbolTable().setLastCodeGeneratedOn(this._currentCodeGenerationStratedOn);
+	synchronized void onCompleteCodeGeneration() { 
+		
+		ISpxPersistenceManager manager = this.getPersistenceManager();
+		manager.spxSymbolTable().setLastCodeGeneratedOn(this._currentCodeGenerationStratedOn);
 	}
 	
 	/**
@@ -260,7 +272,7 @@
 	}
 
 	/**
-	 * Stores PackageDeclaration in Symbol Table 
+	 * Stores PackageDeclaration in Symbol-Table 
 	 * 
 	 * @param packageDeclaration
 	 */
@@ -872,7 +884,7 @@
 		long ts = 0;
 	
 		if( getCons().hasEqualConstructor( qualifiedFor , getCons().getToCompileCon()))
-			ts = this.getPersistenceManager().spxSymbolTable().getIntializedOn();
+			ts = this.getPersistenceManager().spxSymbolTable().getIndexLastInitializedOn();
 		else if ( getCons().hasEqualConstructor( qualifiedFor , getCons().getToCodeGenerateCon()))
 			ts = this.getPersistenceManager().spxSymbolTable().getLastCodeGeneratedOn();
 		else
@@ -1036,7 +1048,6 @@
 			if(shouldCommit)
 				persistenceManager.commit();
 			
-			persistenceManager.spxSymbolTable().setCompileSessionEndedOn();
 			persistenceManager.close();
 			persistenceManager = null;
 			
@@ -1052,17 +1063,19 @@
 	 */
 	public void cleanIndexAndSymbolTable() throws Exception {
 		ISpxPersistenceManager manager = getPersistenceManager();
+		
 		if (!isPersistenceManagerClosed()){
-			invalidateSpxCacheDirectories(); //cleaning the SpxCache as well.
+			if(!tryInvalidatingSpxCacheDirectories()){
+				throw new RuntimeException("Failed to clean Spx Cache Directories. Please manually clean it");
+			} 
 			
 			manager.clearCache();
 			manager.clear(); // cleaning persistence manager.
-			
 			manager.commitAndClose();
 		}
 		
 		initializePersistenceManager();
-		printSymbolTable(!Utils.DEBUG, "clean");
+		printSymbolTable(Utils.DEBUG, "clean");
 		
 	}
 
@@ -1070,19 +1083,14 @@
 	 * Deletes the Spx Cache directory configured in Utils. By this way, the Spx cache will 
 	 * be invalidated and all the symbols will be indexed again. 
 	 */
-	void invalidateSpxCacheDirectories() {
-		Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_CACHE_DIRECTORY));
-		Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_SHADOW_DIR));
-	}
-	
-	private void tryCleanupIndexDirectory(){
-		try{
-			Utils.tryDeleteSpxIndexDir( new File( _projectPath + "/" + Utils.SPX_INDEX_DIRECTORY));
-		}catch(Exception ex){
-			// In case of SecurityException , Do nothing
+	boolean tryInvalidatingSpxCacheDirectories() {
+		if(Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_CACHE_DIRECTORY), true)){
+			return Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_SHADOW_DIR) , true);
 		}
+		return false;
 	}
 	
+	
 	public void rollbackChanges() throws IOException{	
 		
 		if (! isPersistenceManagerClosed())

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Thu Dec  1 15:42:41 2011	(r23677)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Fri Dec  2 18:00:52 2011	(r23678)
@@ -41,8 +41,13 @@
 		agent.getWriter(IOAgent.CONST_STDOUT).write( "Initializing at " + Thread.currentThread().getId() + " at process : " + ManagementFactory.getRuntimeMXBean().getName()+"\n\n\n");
 		
 		if ( !containsFacade(projectPath)) {
+		 
 			fac = new SpxSemanticIndexFacade(projectPath, termFactory, agent);
 			fac.initializePersistenceManager();
+			
+			// when facade is first time initializing, it cleans up
+			// index and symbol table so that every thing get re-indexed
+			fac.cleanIndexAndSymbolTable();
 		}	
 		else {
 			fac = _registry.get(projectNameString);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Thu Dec  1 15:42:41 2011	(r23677)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Fri Dec  2 18:00:52 2011	(r23678)
@@ -95,16 +95,20 @@
 	// the cache directory denoted using cacheDir. 
 	// If it fails to delete any Files or Directories
 	// , it returns false. Otherwise, it returns true.
-	static  boolean deleteSpxCacheDir(File cacheDir){
+	static  boolean deleteSpxCacheDir(File cacheDir , boolean isRoot){
 	    if ( cacheDir.exists() &&  cacheDir.isDirectory()) {
 	        String[] children = cacheDir.list();
 	        for (int i=0; i<children.length; i++) {
-	            boolean success = deleteSpxCacheDir(new File(cacheDir, children[i]));
+	            boolean success = deleteSpxCacheDir(new File(cacheDir, children[i]) , false);
 	            if (!success) {
 	                return false;
 	            }
 	        }
 	    }
+	    
+	    if(isRoot)
+	    	return true; // avoid deleting the root directories 
+	    		
 	    return cacheDir.delete();
 	}
 	

From M.A.Akhter at student.tudelft.nl  Fri Dec  2 19:04:02 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 02 Dec 2011 18:04:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23679 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	codegen context utils
Message-ID: <20111202180402.661962B800B@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Dec  2 18:04:01 2011
New Revision: 23679
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23679&sc=1

Log:
- failing if found errors to give user feeback. Better if we could somehow show a message box or something.

- changed the packagename to *.___autogenerated to explicitly indicate that this is something that is autogenerated by spoofaxlang compiler.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Fri Dec  2 18:00:52 2011	(r23678)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Fri Dec  2 18:04:01 2011	(r23679)
@@ -589,7 +589,7 @@
             <arg value="-o"/>
             <arg value="${build.stratego.outputfile}"/>
             <arg value="-p"/> 
-            <arg value="${package.qname}.generated"/>  <!-- Note : added this extra parameter since, java package name does not allow dash unlike the ID is defined-->
+            <arg value="${package.qname}.___autogenerated"/>  <!-- Note : added this extra parameter since, java package name does not allow dash unlike the ID is defined-->
             <arg value="--library"/>
             <arg value="--clean"/>
             <arg line="${build.stratego.args}"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Fri Dec  2 18:00:52 2011	(r23678)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Fri Dec  2 18:04:01 2011	(r23679)
@@ -29,8 +29,8 @@
   		{| 	GetSemanticProblems, Declared:  
 			dbg-compiler(!$[-----------------::new-compile-session::-----------------]);
 			with-spxverify(
-				compile-init  
-		  		; s 
+				compile-init
+				; s 
 		    	; compile-unload
 		    	, !" new compile session failed unexpectedly. "  
 	        )  
@@ -41,16 +41,26 @@
 		
 	// Compiler initialization
 	compile-init =
-		index-init;
+		where (index-init <+ debug(!"Failed to initialize SemanticIndex at this moment. Please try later"));
+		
 		// Getting Source directory to start parsing files if needed.
 		// Otherwise, it reads from the cache
 		where(
 			get-all-spx-sources  => spx-sources
 		);
+		
+		//event to perform oninit activities related to index-updating  
+		on-init-index-updating;
+		
 		//Iterating all the configured source directory
 		<list-loop(parse-spx-sources)> spx-sources;
+		
 		//Initializes global symbols / default primitives
-		init-declarations
+		init-declarations;
+		
+		//event to perform oncompleted activities related to index-updating 
+		on-index-updating-completed 
+		
 	
 	// save state of current compile session
 	compile-save-state = index-save

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Fri Dec  2 18:00:52 2011	(r23678)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Fri Dec  2 18:04:01 2011	(r23679)
@@ -61,7 +61,10 @@
   build-spoofaxlang-jvm:
     current-project-location -> <id>
     where 
+			fail-if-has-errors 
+		where 
     	<debug(!"current-project-directory : ")>current-project-location; 
+    	
     	with-spxverify(	
 	  		editor-init; 						         // cleaning up and initializing editors
 				rules(NoDebugInfo: _);           // HACK: disable origin use for now
@@ -73,6 +76,7 @@
 			<+
 				report-failure-with-stacktrace 
 			);
+			
 			with-spxverify(	
 				<debug>$[Activating Project Configuration : ];
 				initialize-configuration;        	// initializes configuration and setting up enviroment variables
@@ -81,14 +85,17 @@
 			<+
 				report-failure-with-stacktrace 
 			);
+			
 			with-spxverify(
 				<debug>$[SPXLang Build: ];
+				<refresh-workspace-file> current-project-location; // refreshing current project
 				with-spxverify(
 						build-all' //building all the spx files in the sources directory
 						, !"Failed to build all the artifacts"
 				);  
 				<chdir>previous-working-dir; 			// resetting working directory
 				<debug>$[Intermediate artefacts have been generated successfully.]
+				
 			<+
 				report-failure-with-stacktrace 
 			)
@@ -106,10 +113,10 @@
 		 		;initialize-configuration
 		 		, "Failed to initialize editor" 
  		  );
- 		  clean-spx;
-			with-spxverify(
-				abs-path := <concat-strings>[project-path, "/" ,path]
-				;	<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
+	  	clean-spx (| project-path);
+		with-spxverify(
+			abs-path := <concat-strings>[project-path, "/" ,path]
+			;	<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
 	  		; build-all
 	  	)  
 
@@ -124,7 +131,7 @@
   			compile-init 
   			, !$[ Compiler-init is failed.]
   		)
-  		; clean-spx 
+  		; clean-spx (| project-path)
   	where	
   		abs-path := <concat-strings>[project-path, "/" ,path]
 	   	; with-spxverify( 
@@ -151,14 +158,16 @@
 		(selected, position, ast, path, project-path) -> None()
 		where
       compile-init; 
-      clean-spx 
+      clean-spx(|project-path)
 
 rules 
-		clean-spx = 
+		clean-spx(|project-path) = 
 			with-spxverify(
 	  			index-clearall;
+	  			<refresh-workspace-file>project-path;
 	      	<debug>$[------Index Cleanup is done ------]
 	  	)
+	  	
 	
 	
 rules
@@ -166,7 +175,7 @@
 	build-incrementally-service:
 		(selected, position, ast, path, project-path) -> None()
 		where
-			not(HasErrors)
+			fail-if-has-errors 
 		where 
 			with-spxverify(
 				editor-init	
@@ -180,35 +189,29 @@
 	  		; <build-spx-incrementally>(ast, abs-path) 
 	   )
   	  
-	build-incrementally-service:
-		(selected, position, ast, path, project-path) -> None()
-		where
-			HasErrors
-		where 
-			<debug> $[Compilation Failed.Please fix the errors before building the artifacts]		
-			
 	
 	editor-build-all:
 		(selected, position, ast, path, project-path) -> None()
 		where
-			not(HasErrors) 
+			fail-if-has-errors 
 		where
 	 		<debug>$[----------------------------starting compile + build all----------------------------];
 			with-spxverify(	
 				editor-init	
 		 		;rules(ProjectPath := project-path)
 		 		;initialize-configuration
-		 		, "Failed to initialize editor" 
+		 		, !"Failed to initialize editor" 
  		  );
-			with-spxverify(
+		  with-spxverify(
 				abs-path := <concat-strings>[project-path, "/" ,path]
 				;	<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
 	  		; build-all
 	  	)  
 	
-	editor-build-all:
-		(selected, position, ast, path, project-path) -> None()
-		where
-			HasErrors
-		where 
-			<debug> $[Compilation Failed.Please fix the errors before building the artifacts]			  					 
\ No newline at end of file
+				
+			
+	fail-if-has-errors = 
+		with-spxverify(
+			not(HasErrors)
+			, !"Compilation Failed.Please fix the errors before building the artifacts"
+		)	    		  					 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Fri Dec  2 18:00:52 2011	(r23678)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Fri Dec  2 18:04:01 2011	(r23679)
@@ -26,11 +26,11 @@
 
 rules 
   //several events regarding the current compiler session. 
-  with-spxverify(s) = with-verify( s ,  compile-unload <+ fail)  
+  with-spxverify(s) = with-verify( s ,  compile-unload )  
   
   //with-spxverify(s, get-msg) = with-verify( s ,compile-unload<+ fail|msg )
   
-  with-spxverify(s , msg) = with-verify( s ,(compile-unload <+ fail) ,  msg)
+  with-spxverify(s , msg) = with-verify( s , compile-unload ,  msg)
 	
 rules 
 	get-project-path = (ProjectPath <+ project-path)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Fri Dec  2 18:00:52 2011	(r23678)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Fri Dec  2 18:04:01 2011	(r23679)
@@ -78,14 +78,16 @@
   
   //module-annotated-ast-and-location = ?ModuleDef( _ , location,_, _,anno-ast) ; !(anno-ast, location)
      
-rules 
-// Index Manage Commands 
+rules
+	 
+// Index Manage Commands
+// TODO : add this inside with clause. FAIL instantly if init fails 
     
-	index-init      = prim("SPX_exec_index_manage_command"  , <get-project-path> , "INIT")
+	index-init  = prim("SPX_exec_index_manage_command"  , <get-project-path> , "INIT")  
 	  
-	index-close     = prim("SPX_exec_index_manage_command", <get-project-path>,  "CLOSE")
+	index-close = prim("SPX_exec_index_manage_command", <get-project-path>,  "CLOSE")
 	
-	index-save      = prim("SPX_exec_index_manage_command" , <get-project-path>,  "SAVE")
+	index-save  = prim("SPX_exec_index_manage_command" , <get-project-path>,  "SAVE")
 	  
 	index-clearall  = prim("SPX_exec_index_manage_command" , <get-project-path> ,"CLEAR")
       
@@ -96,6 +98,11 @@
 	index-on-init-code-generation     = prim("SPX_exec_index_manage_command" , <get-project-path> , "ON_INIT_CODEGEN")
 	
 	index-on-complete-code-generation = prim("SPX_exec_index_manage_command" , <get-project-path> , "ON_COMPLETE_CODEGEN")
+	
+	on-init-index-updating = prim("SPX_exec_index_manage_command" , <get-project-path> , "ON_INIT_INDEX_UPDATING")
+	
+	on-index-updating-completed = prim("SPX_exec_index_manage_command" , <get-project-path> , "ON_INDEX_UPDATING_COMPLETED")
+	
 	  
 	index-lang-desc =  prim( "SPX_index_language_descriptor" , <get-project-path> , <id>)
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str	Fri Dec  2 18:00:52 2011	(r23678)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str	Fri Dec  2 18:04:01 2011	(r23679)
@@ -12,7 +12,7 @@
   verify-stratego(s,on-fail-exec,message) =
     s
   <+
-    on-fail-exec;
+    try(on-fail-exec);
     log(|Critical(), <as-string(message)>, <id>);
     prim("SSL_stacktrace_get_all_frame_names");
     report-failure

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str	Fri Dec  2 18:00:52 2011	(r23678)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str	Fri Dec  2 18:04:01 2011	(r23679)
@@ -77,7 +77,7 @@
 
 	disable-semantic-analysis-debugging  = where(!DebugSemanticAnalysisFlag() ;  disable-debug-flag)
 
-  dbg-analysis(msg|site, type)  = where(not(<is-debug-enabled>DebugSemanticAnalysisFlag() <+ DebugAll) <+  <debug>$[$[$semantic analysis | [site] | [type] $]$  [<msg>]])
+  dbg-analysis(msg|site, type)  = where(not(<is-debug-enabled>DebugSemanticAnalysisFlag() <+ DebugAll) <+  <debug>$[$[$Analysis| [site] | [type] $]$  [<msg>]])
 
 rules
 
@@ -85,11 +85,11 @@
 
 	disable-compiler-debugging   = where(!DebugCompilerFlag() ;  disable-debug-flag)
 
-  debug-compiler(msg) = where(not(<is-debug-enabled>DebugCompilerFlag() <+ DebugAll)<+   <debug>$[ $[$Compiler $]$ [<msg>]])  
+  	debug-compiler(msg) = where(not(<is-debug-enabled>DebugCompilerFlag() <+ DebugAll)<+   <debug>$[ $[$Compiler$]$ [<msg>]])  
 
 	dbg-compiler(s) = debug-compiler(s)
 	
-	dbg-compiler(msg|site, type) =  where(not(<is-debug-enabled>DebugCompilerFlag() <+ DebugAll)<+   <debug>$[ $[$Compiler | [site] | [type] $]$ [<msg>]])  
+	dbg-compiler(msg|site, type) =  where(not(<is-debug-enabled>DebugCompilerFlag() <+ DebugAll)<+   <debug>$[ $[$Compiler|[site]|[type]$]$ [<msg>]])  
 
 	
 rules

From karltk at strategoxt.org  Mon Dec  5 11:28:09 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 05 Dec 2011 10:28:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23680 -
	strategoxt/trunk/stratego-libraries/lib/spec/system/posix
Message-ID: <20111205102809.430487F8002@mx1.tudelft.nl>

Author: karltk
Date: Mon Dec  5 10:28:07 2011
New Revision: 23680
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23680&sc=1

Log:
Fixed documentation for readdir.

Modified:
   strategoxt/trunk/stratego-libraries/lib/spec/system/posix/file.str

Modified: strategoxt/trunk/stratego-libraries/lib/spec/system/posix/file.str
==============================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/system/posix/file.str	Fri Dec  2 18:04:01 2011	(r23679)
+++ strategoxt/trunk/stratego-libraries/lib/spec/system/posix/file.str	Mon Dec  5 10:28:07 2011	(r23680)
@@ -65,10 +65,10 @@
 strategies
 
  /**
-  * The  readdir()  function  returns  a  pointer  to a dirent
-  * structure representing the next  directory  entry  in  the
-  * directory  stream  pointed  to by dir.  It returns NULL on
-  * reaching the end-of-file or if an error occurred. 
+  * Given a path to a directory, returns a list of files in that directory, 
+  * including the self (.) and parent pointers (..).
+  *
+  * @type String -> List(String)
   */
   readdir = 
     ?dir; prim("SSL_readdir", dir)

From g.h.wachsmuth at tudelft.nl  Tue Dec  6 00:56:57 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Mon, 05 Dec 2011 23:56:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23681 -
	jasmin-spoofax/syntax/lexical
Message-ID: <20111205235657.6D8B3108C00E@mx3.tudelft.nl>

Author: GuidoWachsmuth
Date: Mon Dec  5 23:56:57 2011
New Revision: 23681
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23681&sc=1

Log:


Modified:
   jasmin-spoofax/syntax/lexical/JasminXT-Names.sdf

Modified: jasmin-spoofax/syntax/lexical/JasminXT-Names.sdf
==============================================================================
--- jasmin-spoofax/syntax/lexical/JasminXT-Names.sdf	Mon Dec  5 10:28:07 2011	(r23680)
+++ jasmin-spoofax/syntax/lexical/JasminXT-Names.sdf	Mon Dec  5 23:56:57 2011	(r23681)
@@ -11,6 +11,9 @@
 		
 		[A-Za-z] [A-Za-z0-9]* 	-> Identifier
 		
+		Identifier				-> SQIdentifier
+		"'" Identifier "'"		-> SQIdentifier
+		
 		{Identifier "/"}+ 		-> QualifiedName
 		
 		~[\=\:\.\"\-\ \t\n\r]+	-> LabelName
@@ -29,7 +32,7 @@
 		Identifier		-> MethodName
 		"<init>"		-> MethodName {cons("Init")}
 		
-		Identifier		-> VarName
+		SQIdentifier		-> VarName
 		
 	syntax
 		

From karltk at strategoxt.org  Tue Dec  6 13:26:08 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 06 Dec 2011 12:26:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23682 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj: .
	.settings src/main/java/org/spoofax/interpreter/adapter/ecj
	src/main/java/org/spoofax/interpreter/a...
Message-ID: <20111206122608.44680108C007@mx3.tudelft.nl>

Author: karltk
Date: Tue Dec  6 12:26:07 2011
New Revision: 23682
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23682&sc=1

Log:
Added ecj-type-of to the Stratego part of the FFI. Updated imports in Stratego files to point to new directories. Moving skeleton terms to the .terms package, since it is of general interest. Added editor settings that add src/main/java to the Spoofax edit import path.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.settings/org.strategoxt.imp.editors.stratego.prefs
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/skeleton/
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-ctors.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-typedeclarations.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/just-debug.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/rewrite-return.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-deconstruct.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-id.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath	Tue Dec  6 12:26:07 2011	(r23682)
@@ -4,5 +4,6 @@
 	<classpathentry kind="src" path="src/test/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry exported="true" kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.settings/org.strategoxt.imp.editors.stratego.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.settings/org.strategoxt.imp.editors.stratego.prefs	Tue Dec  6 12:26:07 2011	(r23682)
@@ -0,0 +1 @@
+stratego.include = src/main/stratego

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java	Tue Dec  6 12:26:07 2011	(r23682)
@@ -8,11 +8,11 @@
 package org.spoofax.interpreter.adapter.ecj;
 
 import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.adapter.ecj.skeleton.SkeletonStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.skeleton.SkeletonStrategoAppl;
 
 public abstract class AbstractECJAppl extends SkeletonStrategoAppl {
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Tue Dec  6 12:26:07 2011	(r23682)
@@ -28,7 +28,7 @@
 import org.eclipse.jdt.core.dom.PrimitiveType.Code;
 import org.spoofax.DebugUtil;
 import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.adapter.ecj.skeleton.SkeletonTermFactory;
+import org.spoofax.terms.skeleton.SkeletonTermFactory;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoInt;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Tue Dec  6 12:26:07 2011	(r23682)
@@ -8,7 +8,7 @@
 
 module spoofax/bindings/eclipse/eclipse-compiler-ffi
 imports
-  stratego-lib
+  libstratego-lib
   spoofax/bindings/eclipse/EclipseJava
 
 signature
@@ -385,7 +385,7 @@
   
   /**
    * @param IProject - project
-   * @type Tuple(IProject, String) -> IFile 
+   * @type String -> IFile 
    */
   ecj-project-get-file(|project) =
       ?filename
@@ -398,7 +398,6 @@
       ?file
     ; prim("ECJ_file_exists", file)
 
-  
   /** @type SimpleName -> SimpleName */
   ecj-simplename-of = ?SimpleName(_)
 
@@ -519,6 +518,20 @@
 
 strategies
 
+  /* @type Expr -> ITypeBinding */
+  ecj-type-of = prim("ECJ_type_of_expr", <id>)
+  
+  /* @type Type -> ITypeBinding */
+  ecj-type-of = prim("ECJ_type_of_type", <id>)
+  
+  /* @type TypeDecl -> ITypeBinding */
+  ecj-type-of = prim("ECJ_type_of_typedecl", <id>)
+
+  /* @type TypeParameter -> ITypeBinding */
+  ecj-type-of = prim("ECJ_type_of_typeparameter", <id>) 
+  	
+strategies
+
   /**
    * @type ASTNode -> String
    */

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str	Tue Dec  6 12:26:07 2011	(r23682)
@@ -1,8 +1,8 @@
 module api-open-parse-match-resolve-method-and-type
 imports
-  stratego-lib
-  EclipseJava
-  ecj-adapter
+  libstratego-lib
+  spoofax/bindings/eclipse/EclipseJava
+  spoofax/bindings/eclipse/eclipse-compiler-ffi
 
 strategies
   

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str	Tue Dec  6 12:26:07 2011	(r23682)
@@ -1,8 +1,8 @@
 module api-open-parse-match-resolve-method
 imports
-  stratego-lib
-  spoofax/bindings/ecj/EclipseJava
-  spoofax/bindings/ecj/ecj-adapter
+  libstratego-lib
+  spoofax/bindings/eclipse/EclipseJava
+  spoofax/bindings/eclipse/eclipse-compiler-ffi
 
 strategies
   
@@ -11,7 +11,7 @@
     ;!FILE(<id>)
     ; ecj-parse-and-resolve(|p)
     ; debug
-    ; topdown(try(?MethodDeclaration(_, _, _, _, _, _) 
+    ; topdown(try(?MethodDeclaration(_, _, _, _, _, _, _, _) 
                   ; where(ecj-method-of  ; debug)
                  )
              )

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str	Tue Dec  6 12:26:07 2011	(r23682)
@@ -1,8 +1,8 @@
 module api-open-project-parse-match-resolve-type
 imports
-  stratego-lib
-  spoofax/bindings/ecj/EclipseJava
-  spoofax/bindings/ecj/ecj-adapter
+  libstratego-lib
+  spoofax/bindings/eclipse/EclipseJava
+  spoofax/bindings/eclipse/eclipse-compiler-ffi
 
 strategies
   
@@ -10,7 +10,7 @@
       where(<ecj-open-project> "demo1" => p)
     ;!FILE(<id>)
     ; ecj-parse-and-resolve(|p)
-    ; topdown(try(?TypeDeclaration(_, _, _, _, _, _) 
+    ; topdown(try(?TypeDeclaration(_, _, _, _, _, _, _, _) 
                   ; where(ecj-type-of  ; debug)
                  )
              )

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str	Tue Dec  6 12:26:07 2011	(r23682)
@@ -1,8 +1,8 @@
 module api-parse-then-topdown-match-typedeclaration
 imports
-  stratego-lib
-  spoofax/bindings/ecj/EclipseJava
-  spoofax/bindings/ecj/ecj-adapter
+  libstratego-lib
+  spoofax/bindings/eclipse/EclipseJava
+  spoofax/bindings/eclipse/eclipse-compiler-ffi
 
 strategies
   
@@ -10,5 +10,5 @@
       !FILE(<id>) 
     ; debug 
     ; ecj-parse-only
-    ; topdown(try(?TypeDeclaration(_, _, _, _, _, _) ; debug))
+    ; topdown(try(?TypeDeclaration(_, _, _, _, _, _, _, _) ; debug))
     ) ; !()

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str	Tue Dec  6 12:26:07 2011	(r23682)
@@ -1,6 +1,6 @@
 module build-minimal-cu
 imports
-  stratego-lib
+  libstratego-lib
   spoofax/bindings/eclipse/EclipseJava
   
 strategies

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-ctors.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-ctors.str	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-ctors.str	Tue Dec  6 12:26:07 2011	(r23682)
@@ -1,6 +1,6 @@
 module collect-all-ctors
 imports
-  stratego-lib	  
+  libstratego-lib	  
 strategies
 
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-typedeclarations.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-typedeclarations.str	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-typedeclarations.str	Tue Dec  6 12:26:07 2011	(r23682)
@@ -1,6 +1,6 @@
 module collect-all-typedeclarations
 imports
-  stratego-lib
+  libstratego-lib
   spoofax/bindings/eclipse/EclipseJava
   
 strategies

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/just-debug.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/just-debug.str	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/just-debug.str	Tue Dec  6 12:26:07 2011	(r23682)
@@ -1,6 +1,6 @@
 module just-debug
 imports
-  stratego-lib
+  libstratego-lib
  
 strategies
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/rewrite-return.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/rewrite-return.str	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/rewrite-return.str	Tue Dec  6 12:26:07 2011	(r23682)
@@ -1,7 +1,7 @@
 module rewrite-return
 imports
-  stratego-lib
-  spoofax/bindings/ecj/EclipseJava
+  libstratego-lib
+  spoofax/bindings/eclipse/EclipseJava
   
 strategies
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-deconstruct.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-deconstruct.str	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-deconstruct.str	Tue Dec  6 12:26:07 2011	(r23682)
@@ -1,6 +1,6 @@
 module topdown-deconstruct
 imports
-  stratego-lib
+  libstratego-lib
 
 strategies
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-id.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-id.str	Mon Dec  5 23:56:57 2011	(r23681)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-id.str	Tue Dec  6 12:26:07 2011	(r23682)
@@ -1,6 +1,6 @@
 module topdown-id
 imports
-  stratego-lib	 
+  libstratego-lib	 
    
 strategies
 

From karltk at strategoxt.org  Tue Dec  6 14:20:50 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 06 Dec 2011 13:20:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23683 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter:
	core library/ssl stratego
Message-ID: <20111206132050.53201108C022@mx3.tudelft.nl>

Author: karltk
Date: Tue Dec  6 13:20:49 2011
New Revision: 23683
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23683&sc=1

Log:
Added @Override annotations to all methods overriding a superclass method. Fixed a few more compiler warnings.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_access.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addi.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addr.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_cos.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_divi.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_divr.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_term.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputc.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getenv.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gti.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gtr.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_implode_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int_to_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_int.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_real.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mod.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modi.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modr.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_muli.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mulr.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_printnl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_rand.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string_precision.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sin.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sqrt.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stderr_stream.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdin_stream.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdout_stream.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strcat.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_int.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_real.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strlen.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subti.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subtr.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_taf.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_text.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -8,13 +8,11 @@
 package org.spoofax.interpreter.core;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoReal;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermFactory;
 
 public class Tools {
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_access.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_access.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_access.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -32,6 +32,7 @@
         super("SSL_access", 0, 2);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if (!Tools.isTermString(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addi.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addi.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addi.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_addi", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         
         if(!Tools.isTermInt(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addr.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addr.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addr.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -22,6 +22,7 @@
         super("SSL_addr", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
         double a, b;
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_cos.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_cos.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_cos.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_cos", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if(!(Tools.isTermReal(targs[0])))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_divi.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_divi.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_divi.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_divi", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if(!(Tools.isTermInt(targs[0])))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_divr.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_divr.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_divr.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -15,6 +15,7 @@
         super("SSL_divr", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
         double a, b;
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_string.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_string.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -23,6 +23,7 @@
         super("SSL_explode_string", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
         IStrategoTerm t = tvars[0];
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_term.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_term.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_term.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -19,6 +19,7 @@
         super("SSL_explode_term", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
         SSLLibrary op = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
         op.get("SSL_get_constructor").call(env, svars, tvars);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputc.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputc.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputc.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -25,6 +25,7 @@
         super("SSL_fputc", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if(!(Tools.isTermInt(targs[0])))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getenv.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getenv.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getenv.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -20,6 +20,7 @@
         super("SSL_getenv", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         
         if(!Tools.isTermString(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gti.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gti.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gti.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_gti", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         
         if(!Tools.isTermInt(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gtr.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gtr.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gtr.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_gtr", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         
         if(!Tools.isTermReal(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_hashtable_create", 0, 2);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
             throws InterpreterException {
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -19,6 +19,7 @@
         super("SSL_hashtable_destroy", 0, 1);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
             throws InterpreterException {
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -19,6 +19,7 @@
         super("SSL_hashtable_get", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         if (!(targs[0] instanceof StrategoHashMap))
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -19,6 +19,7 @@
         super("SSL_hashtable_keys", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         if (!(targs[0] instanceof StrategoHashMap))
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -19,6 +19,7 @@
         super("SSL_hashtable_put", 0, 3);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         if (!(targs[0] instanceof StrategoHashMap))
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -19,6 +19,7 @@
         super("SSL_hashtable_remove", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         if (!(targs[0] instanceof StrategoHashMap))
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_implode_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_implode_string.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_implode_string.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -22,6 +22,7 @@
         super("SSL_implode_string", 0, 1);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         IStrategoTerm t = targs[0];

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_indexedSet_create", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if(!(Tools.isTermInt(targs[0])))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -19,6 +19,7 @@
         super("SSL_indexedSet_destroy", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         if(!(targs[0] instanceof StrategoSet))
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -18,6 +18,7 @@
         super("SSL_indexedSet_elements", 0, 1);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) {
         if(!(targs[0] instanceof StrategoSet))
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -18,6 +18,7 @@
         super("SSL_indexedSet_getIndex", 0, 2);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) {
         if(!(targs[0] instanceof StrategoSet))
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -19,6 +19,7 @@
         super("SSL_indexedSet_put", 1, 2);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
             throws InterpreterException {
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -18,6 +18,7 @@
         super("SSL_indexedSet_remove", 0, 2);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) {
         if(!(targs[0] instanceof StrategoSet))
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -18,6 +18,7 @@
         super("SSL_indexedSet_reset", 0, 1);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) {
         if(!(targs[0] instanceof StrategoSet))
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -27,6 +27,7 @@
         super("SSL_int", 0, 1);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
         if(Tools.isTermInt(tvars[0])) {
             env.setCurrent(tvars[0]);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int_to_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int_to_string.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int_to_string.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_int_to_string", 0, 1);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
 
         if(!Tools.isTermInt(tvars[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_int.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_int.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_int.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -20,6 +20,7 @@
         super("SSL_is_int", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
         return Tools.isTermInt(tvars[0]);
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_real.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_real.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_real.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -13,6 +13,7 @@
         super("SSL_is_real", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
         return Tools.isTermReal(tvars[0]);
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_string.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_string.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -20,6 +20,7 @@
         super("SSL_is_string", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         return Tools.isTermString(targs[0]);
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mod.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mod.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mod.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_mod", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if(!(Tools.isTermInt(targs[0])))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modi.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modi.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modi.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_modi", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if(!(Tools.isTermInt(targs[0])))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modr.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modr.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modr.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_modr", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if(!(Tools.isTermReal(targs[0])))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_muli.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_muli.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_muli.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_muli", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         
         if(!Tools.isTermInt(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mulr.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mulr.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mulr.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -22,6 +22,7 @@
         super("SSL_mulr", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] tvars) throws InterpreterException {
         double a, b;
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_printnl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_printnl.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_printnl.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -18,7 +18,6 @@
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.PrettyPrinter;
 import org.spoofax.terms.io.InlinePrinter;
 
 public class SSL_printnl extends AbstractPrimitive {
@@ -27,6 +26,7 @@
         super("SSL_printnl", 0, 2);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         // FIXME this is extremely heavy handed

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_rand.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_rand.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_rand.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -19,6 +19,7 @@
         super("SSL_rand", 0, 0);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         double r = Math.random();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -26,6 +26,7 @@
         super("SSL_real", 0, 1);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
         if(Tools.isTermReal(tvars[0])) {
             env.setCurrent(tvars[0]);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_real_to_string", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if (Tools.isTermInt(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string_precision.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string_precision.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string_precision.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -22,6 +22,7 @@
         super("SSL_real_to_string_precision", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if(!(Tools.isTermReal(targs[0])))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sin.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sin.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sin.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_sin", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if(!(Tools.isTermReal(targs[0])))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sqrt.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sqrt.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sqrt.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_sqrt", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if(!(Tools.isTermReal(targs[0])))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stderr_stream.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stderr_stream.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stderr_stream.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -20,6 +20,7 @@
         super("SSL_stderr_stream", 0, 0);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         
         env.setCurrent(env.getFactory().makeInt(IOAgent.CONST_STDERR));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdin_stream.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdin_stream.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdin_stream.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -20,6 +20,7 @@
         super("SSL_stdin_stream", 0, 0);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         
         env.setCurrent(env.getFactory().makeInt(IOAgent.CONST_STDIN));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdout_stream.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdout_stream.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdout_stream.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -20,6 +20,7 @@
         super("SSL_stdout_stream", 0, 0);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         
         env.setCurrent(env.getFactory().makeInt(IOAgent.CONST_STDOUT));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strcat.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strcat.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strcat.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -20,6 +20,7 @@
         super("SSL_strcat", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if(!Tools.isTermString(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_int.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_int.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_int.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -20,6 +20,7 @@
         super("SSL_string_to_int", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
         
         if(!Tools.isTermString(tvars[0]))
@@ -30,18 +31,22 @@
         
         String s0 = s;
         try {
-            env.setCurrent(env.getFactory().makeInt(new Integer(s0)));
+            env.setCurrent(env.getFactory().makeInt(Integer.parseInt(s0)));
             return true;
         } catch(NumberFormatException e) {
+            // do nothing
         }
+        
         try {
             s0 = s.trim();
             if(s0.length() > 0 && s0.charAt(0) == '+') 
                 s0 = s0.substring(1);
-            env.setCurrent(env.getFactory().makeInt(new Integer(s0)));
+            env.setCurrent(env.getFactory().makeInt(Integer.parseInt(s0)));
             return true;
         } catch (NumberFormatException e) {
+            // do nothing
         }
+        
 //        try {
 //            if(s0.startsWith("0x")) {
 //                env.setCurrent(env.getFactory().makeInt(Integer.parseInt(s0.substring(2), 16)));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_real.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_real.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_real.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -20,6 +20,7 @@
         super("SSL_string_to_real", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         if(!Tools.isTermString(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strlen.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strlen.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strlen.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -20,6 +20,7 @@
         super("SSL_strlen", 0, 1);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         
         if(!Tools.isTermString(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subti.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subti.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subti.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_subti", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         
         if(!Tools.isTermInt(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subtr.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subtr.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subtr.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -21,6 +21,7 @@
         super("SSL_subtr", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
         
         if(!Tools.isTermReal(tvars[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -22,6 +22,7 @@
         this.library = library;
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         env.setCurrent(library.getTableTable());
         return true;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_taf.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_taf.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_taf.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -24,6 +24,7 @@
         super("SSL_write_term_to_stream_taf", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         
         if(!Tools.isTermInt(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_text.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_text.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_text.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -24,6 +24,7 @@
         super("SSL_write_term_to_stream_text", 0, 2);
     }
     
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
         
         if(!Tools.isTermInt(targs[0]))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -203,13 +203,17 @@
 
     private Strategy addHook(Strategy strategy, final boolean isCompiledStrategy, final VarScope oldVarScope) {
         strategy.getHook().push(new Hook() {
-        	public IConstruct onSuccess(IContext env) throws InterpreterException {
+            
+        	@Override
+            public IConstruct onSuccess(IContext env) throws InterpreterException {
                 env.restoreVarScope(oldVarScope);
                 if (!isCompiledStrategy)
                     env.getStackTracer().popOnSuccess();
         		return CallT.this.getHook().pop().onSuccess(env);
         	}
-        	public IConstruct onFailure(IContext env) throws InterpreterException {
+        	
+        	@Override
+            public IConstruct onFailure(IContext env) throws InterpreterException {
         		env.restoreVarScope(oldVarScope);
                 if (!isCompiledStrategy)
                     env.getStackTracer().popOnFailure();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java	Tue Dec  6 12:26:07 2011	(r23682)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java	Tue Dec  6 13:20:49 2011	(r23683)
@@ -48,11 +48,15 @@
         	final Strategy second = children[n].second;
         	Strategy first = children[n].first;
         	first.getHook().push(new Hook(){
-        		public IConstruct onSuccess(IContext env) {
+        		
+        	    @Override
+                public IConstruct onSuccess(IContext env) {
                 	second.getHook().push(getHook().pop());
     				return second;
     			}
-        		public IConstruct onFailure(IContext env) throws InterpreterException {
+        	    
+        		@Override
+                public IConstruct onFailure(IContext env) throws InterpreterException {
     	        	env.setCurrent(oldCurrent);
     	        	env.getVarScope().restoreUnboundVars(bi);    				
     				IConstruct result = eval(env, n+1);

From karltk at strategoxt.org  Tue Dec  6 14:24:53 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 06 Dec 2011 13:24:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23684 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego
Message-ID: <20111206132453.968E0CC11D@mx4.tudelft.nl>

Author: karltk
Date: Tue Dec  6 13:24:53 2011
New Revision: 23684
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23684&sc=1

Log:
Removed a few more compilation warnings due to empty class/interface definitions.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Match.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Match.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Match.java	Tue Dec  6 13:20:49 2011	(r23683)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Match.java	Tue Dec  6 13:24:53 2011	(r23684)
@@ -304,6 +304,7 @@
 
     @SuppressWarnings("serial")
     public static final class Results extends ArrayList<Binding> {
+        // empty
     }
 
     public static final class Binding extends Pair<String, IStrategoTerm> {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java	Tue Dec  6 13:20:49 2011	(r23683)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java	Tue Dec  6 13:24:53 2011	(r23684)
@@ -40,7 +40,9 @@
             return type;
         }
     }
+    
     public interface ArgType {
+        // empty
     }
 
     public static class FunType implements ArgType {

From karltk at strategoxt.org  Tue Dec  6 17:35:02 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 06 Dec 2011 16:35:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23685 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj: .
	META-INF src/main/java/org/spoofax/interpreter/adapter/ecj
	src/main/java/org/spoofax/interpreter/li...
Message-ID: <20111206163502.213D8CC137@mx4.tudelft.nl>

Author: karltk
Date: Tue Dec  6 16:35:01 2011
New Revision: 23685
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23685&sc=1

Log:
Added initial unit test for parsing inside an Eclipse workspace. Copied ProjectUtils from JAxT. Added jdt.launching to the list of dependencies. Made ECJGenericAppl inherit from SkeletonStrategoAppl.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/ProjectUtils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/TestLibrary.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/build.properties
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/META-INF/MANIFEST.MF
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/META-INF/MANIFEST.MF	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/META-INF/MANIFEST.MF	Tue Dec  6 16:35:01 2011	(r23685)
@@ -9,7 +9,8 @@
  org.junit,
  org.spoofax.interpreter.core,
  org.eclipse.text,
- org.spoofax.terms
+ org.spoofax.terms,
+ org.eclipse.jdt.launching;bundle-version="3.6.0"
 Bundle-Vendor: Spoofax.org
 Export-Package: 
  org.spoofax.interpreter.adapter.ecj,

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile	Tue Dec  6 16:35:01 2011	(r23685)
@@ -1,9 +1,10 @@
 wanted := \
 	bin/topdown-id.ctree \
-    bin/topdown-deconstruct.ctree \
+	bin/topdown-deconstruct.ctree \
 	bin/collect-all-ctors.ctree \
-    bin/collect-all-typedeclarations.ctree \
-    bin/build-minimal-cu.ctree
+	bin/collect-all-typedeclarations.ctree \
+	bin/build-minimal-cu.ctree \
+	bin/api-open-parse-match-resolve-method-and-type.ctree
 
 all : $(wanted)
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/build.properties
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/build.properties	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/build.properties	Tue Dec  6 16:35:01 2011	(r23685)
@@ -1,3 +1,3 @@
-source.. = src/
+source.. = src/main/java
 bin.includes = META-INF/,\
                .
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java	Tue Dec  6 16:35:01 2011	(r23685)
@@ -7,10 +7,8 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
-import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.skeleton.SkeletonStrategoAppl;
 
@@ -43,9 +41,4 @@
         }
         return r;
     }
-    
-    @Override
-    public void prettyPrint(ITermPrinter pp) {
-        throw new NotImplementedException();
-    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java	Tue Dec  6 16:35:01 2011	(r23685)
@@ -7,19 +7,15 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
-import java.io.IOException;
-
 import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
-import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.attachments.ITermAttachment;
 import org.spoofax.terms.attachments.TermAttachmentType;
+import org.spoofax.terms.skeleton.SkeletonStrategoAppl;
 
-public class ECJGenericAppl implements IStrategoAppl {
+public class ECJGenericAppl extends SkeletonStrategoAppl {
 
     private static final long serialVersionUID = 1L;
     
@@ -28,21 +24,12 @@
     
 
     ECJGenericAppl(IStrategoConstructor ctor, IStrategoTerm[] kids) {
+        super(TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
         this.ctor = ctor;
         this.kids = kids;
     }
     
     @Override
-    public int getStorageType() {
-        return MUTABLE;
-    }
-    
-    @Override
-    public IStrategoList getAnnotations() {
-    	return TermFactory.EMPTY_LIST;
-    }
-
-    @Override
     public IStrategoConstructor getConstructor() {
         return ctor;
     }
@@ -58,69 +45,11 @@
     }
 
     @Override
-    public int getSubtermCount() {
-        return kids.length;
-    }
-
-    @Override
-    public int getTermType() {
-        return IStrategoTerm.APPL;
-    }
-
-    @Override
-    public boolean match(IStrategoTerm second) {
-        if(!(second instanceof IStrategoAppl))
-            return false;
-        
-        IStrategoAppl snd = (IStrategoAppl)second;
-        
-        if(!snd.getConstructor().equals(getConstructor()))
-            return false;
-        
-        for(int i = 0, sz = getConstructor().getArity(); i < sz; i++) {
-            if(!getSubterm(i).equals(snd.getSubterm(i)))
-                return false;
-        }
-        
-        return true;
-    }
-
-    @Override
-    public void prettyPrint(ITermPrinter pp) {
-        pp.print(ctor.getName());
-        
-        int arity = ctor.getArity();
-        if(arity > 0) {
-            pp.println("(", false);
-            pp.indent(ctor.getName().length() + 1);
-            pp.print("  ");
-            pp.nextIndentOff();
-            getSubterm(0).prettyPrint(pp);
-            pp.println("");
-            for(int i = 1; i < arity; i++) {
-                pp.print(", ");
-                pp.nextIndentOff();
-                getSubterm(i).prettyPrint(pp);
-                pp.println("");
-            }
-            pp.print(")");
-            pp.outdent(ctor.getName().length() + 1);
-            
-        }
-    }
-
-    @Override
     public String toString(int maxDepth) {
         throw new NotImplementedException();
     }
 
     @Override
-    public void writeAsString(Appendable output, int maxDepth)
-            throws IOException {
-        throw new NotImplementedException();
-    }
-
-    @Override
     public <T extends ITermAttachment> T getAttachment(
             TermAttachmentType<T> type) {
         throw new NotImplementedException();
@@ -135,15 +64,4 @@
     public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
         throw new NotImplementedException();
     }
-
-    @Override
-    public boolean isList() {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    public String getName() {
-        throw new NotImplementedException();
-    }
-
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java	Tue Dec  6 16:35:01 2011	(r23685)
@@ -7,10 +7,7 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
-import java.io.IOException;
-
 import org.eclipse.jdt.core.dom.ASTNode;
-import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java	Tue Dec  6 16:35:01 2011	(r23685)
@@ -7,19 +7,17 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.adapter.ecj.skeleton.SkeletonStrategoList;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.attachments.ITermAttachment;
 import org.spoofax.terms.attachments.TermAttachmentType;
+import org.spoofax.terms.skeleton.SkeletonStrategoList;
 
 public class WrappedASTNodeList extends SkeletonStrategoList {
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java	Tue Dec  6 16:35:01 2011	(r23685)
@@ -41,7 +41,8 @@
     	
     }
     
-	private Type signatureStringToType(final AST ast, final String signatureName) {
+	@SuppressWarnings("unchecked")
+    private Type signatureStringToType(final AST ast, final String signatureName) {
 		final String[] args = Signature.getTypeArguments(signatureName);
 		final String qual = Signature.getQualifier(signatureName);
 		final String base = Signature.getSignatureSimpleName(Signature.getTypeErasure(signatureName));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java	Tue Dec  6 16:35:01 2011	(r23685)
@@ -7,7 +7,7 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
 import java.io.IOException;
@@ -94,4 +94,5 @@
         assertTrue(t instanceof WrappedCompilationUnit);
         assertEquals(ASTNode.COMPILATION_UNIT, ((WrappedCompilationUnit)t).getWrappee().getNodeType());
     }
+    
 }

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/ProjectUtils.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/ProjectUtils.java	Tue Dec  6 16:35:01 2011	(r23685)
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1 
+ */
+
+package org.spoofax.interpreter.library.ecj;
+
+import java.io.ByteArrayInputStream;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.eclipse.core.resources.IContainer;
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IFolder;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.IProjectDescription;
+import org.eclipse.core.resources.IWorkspaceRoot;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.jdt.core.IClasspathEntry;
+import org.eclipse.jdt.core.ICompilationUnit;
+import org.eclipse.jdt.core.IJavaElement;
+import org.eclipse.jdt.core.IJavaProject;
+import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.jdt.core.JavaModelException;
+import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.core.dom.ASTParser;
+import org.eclipse.jdt.launching.JavaRuntime;
+
+public class ProjectUtils {
+
+	protected NullProgressMonitor nullProgress = new NullProgressMonitor();
+	protected ASTParser astParser = ASTParser.newParser(AST.JLS3);
+	private int counter = 0;
+
+	protected ICompilationUnit addCompilationUnit(IProject project, final String fileName, final String cu)
+	throws CoreException {
+		final char[] chs = new char[cu.length()];
+		cu.getChars(0, chs.length, chs, 0);
+
+		ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(cu.getBytes()); 
+		IFile file = project.getFile(new Path(fileName));
+		file.create(byteArrayInputStream, true, nullProgress);
+		if(!file.exists())
+			return null;
+
+		return (ICompilationUnit) JavaCore.create(file);
+	}
+
+	public ICompilationUnit createCompilationUnits(IJavaProject javaProject, String[] compilationUnits) throws CoreException {
+		ICompilationUnit icu = null;
+		for(String cu : compilationUnits) {
+			ICompilationUnit c = addCompilationUnit(javaProject.getProject(), "Test" + counter + ".java", cu);
+			counter++;
+			if(icu == null)
+				icu = c;
+		}
+
+		return icu;
+	}
+
+	public IJavaProject createDummyJavaProject() throws CoreException {
+		
+		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
+		IProject project = root.getProject("DummyProject");
+		project.delete(true, nullProgress);
+		project.create(nullProgress);
+		project.open(nullProgress);
+		
+		IProjectDescription description = project.getDescription();
+		String[] natures = description.getNatureIds();
+		String[] newNatures = new String[natures.length + 1];
+		System.arraycopy(natures, 0, newNatures, 0, natures.length);
+		newNatures[natures.length] = JavaCore.NATURE_ID;
+		description.setNatureIds(newNatures);
+		project.setDescription(description, nullProgress);
+		
+		IJavaProject javaProject = JavaCore.create(project);
+		addClasspathEntry(javaProject, JavaRuntime.getDefaultJREContainerEntry());
+		
+		return javaProject;
+	}
+
+	public void addClasspathEntry(IJavaProject javaProject, IClasspathEntry e) throws JavaModelException {
+		Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>();
+		entries.addAll(Arrays.asList(javaProject.getRawClasspath()));
+		entries.add(e);
+		javaProject.setRawClasspath(entries.toArray(new IClasspathEntry[entries.size()]), nullProgress);
+	}
+
+	public ASTParser getParser() {
+		return astParser;
+	}
+
+	public IProgressMonitor getMonitor() {
+		return nullProgress;
+	}
+
+	public IJavaElement createPackage(IJavaProject javaProject, String packageName) throws CoreException {
+		
+		IProject project = javaProject.getProject();
+		IContainer container = project;
+		if(!packageName.equals("")) {
+			String[] xs = packageName.split("\\.");
+			for(int i = 0; i < xs.length; i++) {
+				container = container.getFolder(new Path(xs[i]));	
+				if(!container.exists()) {
+					((IFolder)container).create(true, true, nullProgress);
+				}
+			}
+		}
+		return JavaCore.create(container);
+		
+	}
+
+	public ICompilationUnit createCompilationUnit(IProject project,
+			String fileName, String source) throws CoreException {
+		return addCompilationUnit(project, fileName, source);
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/TestLibrary.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/TestLibrary.java	Tue Dec  6 16:35:01 2011	(r23685)
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+
+package org.spoofax.interpreter.library.ecj;
+
+import static org.junit.Assert.assertTrue;
+
+import java.io.IOException;
+
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.jdt.core.IJavaProject;
+import org.junit.Before;
+import org.junit.Test;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.terms.TermFactory;
+
+/**
+ * Must be run as Eclipse JUnit Plug-in test
+ *
+ */
+public class TestLibrary {
+    
+    private ECJFactory wef;
+    private Interpreter interp;        
+
+    @Before
+    public void setUp() throws IOException, InterpreterException, CoreException {
+        wef = new ECJFactory();
+        interp = new Interpreter(wef, new TermFactory());
+        interp.addOperatorRegistry(new ECJLibrary());
+        interp.load(System.getenv("HOME") + "/.nix-profile/share/stratego-lib/libstratego-lib.ctree");
+        ProjectUtils pu = new ProjectUtils();
+        IJavaProject p = pu.createDummyJavaProject();
+        pu.createCompilationUnit(p.getProject(), "Foo.java", "package src; class Foo {}");
+    }
+    
+    @Test
+    public void open_parse_match_resolve_method_and_type() throws IOException, InterpreterException, CoreException {
+        interp.load(TestLibrary.class.getResourceAsStream("/api-open-parse-match-resolve-method-and-type.ctree"));
+        interp.setCurrent(wef.makeString("Foo.java"));
+        assertTrue(interp.invoke("main_0_0"));
+    }
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str	Tue Dec  6 16:35:01 2011	(r23685)
@@ -7,13 +7,17 @@
 strategies
   
   main =  
-      where(<ecj-open-project> "demo1" => p)
-    ;!FILE(<id>)
+      debug(!"5");
+      where(<ecj-open-project> "DummyProject" => p)
+    ; debug(!"1")
+    ; !FILE(<id>)
+    ; debug(!"2")
     ; ecj-parse-and-resolve(|p)
-    ; debug
+    ; debug(!"3")
     ; topdown(try(?MethodInvocation(_, _, _, _) 
                   ; where(debug ; ecj-method-of ; debug)
                   ; where(debug ; ecj-type-of ; debug)
                  )
              )
+    ; debug(!"4")
     ;!()

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str	Tue Dec  6 16:35:01 2011	(r23685)
@@ -1,6 +1,6 @@
 module api-open-parse-match-resolve-method
 imports
-  libstratego-lib
+  stratego-lib
   spoofax/bindings/eclipse/EclipseJava
   spoofax/bindings/eclipse/eclipse-compiler-ffi
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str	Tue Dec  6 16:35:01 2011	(r23685)
@@ -1,6 +1,6 @@
 module api-open-project-parse-match-resolve-type
 imports
-  libstratego-lib
+  stratego-lib
   spoofax/bindings/eclipse/EclipseJava
   spoofax/bindings/eclipse/eclipse-compiler-ffi
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str	Tue Dec  6 16:35:01 2011	(r23685)
@@ -1,6 +1,6 @@
 module api-parse-then-topdown-match-typedeclaration
 imports
-  libstratego-lib
+  stratego-lib
   spoofax/bindings/eclipse/EclipseJava
   spoofax/bindings/eclipse/eclipse-compiler-ffi
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str	Tue Dec  6 13:24:53 2011	(r23684)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str	Tue Dec  6 16:35:01 2011	(r23685)
@@ -1,6 +1,6 @@
 module build-minimal-cu
 imports
-  libstratego-lib
+  stratego-lib
   spoofax/bindings/eclipse/EclipseJava
   
 strategies

From karltk at strategoxt.org  Tue Dec  6 18:08:17 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 06 Dec 2011 17:08:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23686 - in
	spoofax/trunk/spoofax/org.spoofax.terms: META-INF
	src/org/spoofax/terms src/org/spoofax/terms/attachments
	src/org/spoofax/terms/skeleton
Message-ID: <20111206170817.15EDF2B8038@mx2.tudelft.nl>

Author: karltk
Date: Tue Dec  6 17:08:16 2011
New Revision: 23686
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23686&sc=1

Log:
Added initial support for skeleton terms. Minor compilation warning fixups.

Added:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoAppl.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoList.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonTermFactory.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoString.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/DesugaredOriginAttachment.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/META-INF/MANIFEST.MF
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/META-INF/MANIFEST.MF	Tue Dec  6 16:35:01 2011	(r23685)
+++ spoofax/trunk/spoofax/org.spoofax.terms/META-INF/MANIFEST.MF	Tue Dec  6 17:08:16 2011	(r23686)
@@ -9,4 +9,5 @@
  org.spoofax.terms,
  org.spoofax.terms.attachments,
  org.spoofax.terms.io,
- org.spoofax.terms.io.binary
+ org.spoofax.terms.io.binary,
+ org.spoofax.terms.skeleton

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoString.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoString.java	Tue Dec  6 16:35:01 2011	(r23685)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoString.java	Tue Dec  6 17:08:16 2011	(r23686)
@@ -28,6 +28,10 @@
         initImmutableHashCode();
     }
     
+    protected StrategoString(String value) {
+    	this(value, TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
+    }
+    
     public IStrategoTerm getSubterm(int index) {
         throw new IndexOutOfBoundsException();
     }

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java	Tue Dec  6 16:35:01 2011	(r23685)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java	Tue Dec  6 17:08:16 2011	(r23686)
@@ -10,9 +10,8 @@
  */
 public class StrategoSubList extends StrategoWrapped implements IStrategoList {
 
-
 	private static final long serialVersionUID = -2495148050199572355L;
-
+	
 	private final IStrategoList completeList;
 
 	private int indexStart;

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java	Tue Dec  6 16:35:01 2011	(r23685)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java	Tue Dec  6 17:08:16 2011	(r23686)
@@ -209,7 +209,7 @@
     	}
     }
     
-    public boolean isList() {
+    public final boolean isList() {
     	return getTermType() == LIST;
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/DesugaredOriginAttachment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/DesugaredOriginAttachment.java	Tue Dec  6 16:35:01 2011	(r23685)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/DesugaredOriginAttachment.java	Tue Dec  6 17:08:16 2011	(r23686)
@@ -2,7 +2,6 @@
 
 import org.spoofax.interpreter.terms.ISimpleTerm;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.terms.TermVisitor;
 
 /** 
  * @author Maartje de Jonge

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoAppl.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoAppl.java	Tue Dec  6 17:08:16 2011	(r23686)
@@ -0,0 +1,112 @@
+package org.spoofax.terms.skeleton;
+
+
+import java.io.IOException;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.StrategoTerm;
+
+public abstract class SkeletonStrategoAppl extends StrategoTerm implements IStrategoAppl {
+
+  private static final long serialVersionUID = -2522680523775044390L;
+
+    public SkeletonStrategoAppl(IStrategoList annotations, int storageType) {
+        super(annotations, storageType);
+    }
+    
+    @Deprecated
+    final public IStrategoTerm[] getArguments() {
+        throw new NotImplementedException();
+    }
+
+    final public String getName() {
+        return getConstructor().getName();
+    }
+
+    final public int getSubtermCount() {
+        return getConstructor().getArity();
+    }
+
+    final public int getTermType() {
+        return IStrategoTerm.APPL;
+    }
+
+    @Override
+    final protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        if (second.getTermType() != IStrategoTerm.APPL)
+            return false;
+        IStrategoAppl o = (IStrategoAppl)second;
+        if (getConstructor() != o.getConstructor())
+            return false;
+        
+        IStrategoTerm[] kids = getAllSubterms();
+        IStrategoTerm[] secondKids = o.getAllSubterms();
+        if (kids != secondKids) {
+            for (int i = 0, sz = kids.length; i < sz; i++) {
+                IStrategoTerm kid = kids[i];
+                IStrategoTerm secondKid = secondKids[i];
+                if (kid != secondKid && !kid.match(secondKid)) {
+                    if (commonStorageType == SHARABLE && i != 0)
+                        System.arraycopy(secondKids, 0, kids, 0, i);
+                    return false;
+                }
+            }
+  
+// FIXME should update sharing when possible            
+//            if (commonStorageType == SHARABLE)
+//                this.kids = secondKids;
+        }
+        
+        IStrategoList annotations = getAnnotations();
+        IStrategoList secondAnnotations = second.getAnnotations();
+        if (annotations == secondAnnotations) {
+            return true;
+        } else if (annotations.match(secondAnnotations)) {
+            if (commonStorageType == SHARABLE) internalSetAnnotations(secondAnnotations);
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    final public void writeAsString(Appendable output, int maxDepth) throws IOException {
+        output.append(getName());
+        IStrategoTerm[] kids = getAllSubterms();
+        if(kids.length > 0) {
+            output.append('(');
+            if (maxDepth == 0) {
+            	output.append("...");
+            } else {
+	            kids[0].writeAsString(output, maxDepth - 1);
+	            for(int i = 1; i < kids.length; i++) {
+	                output.append(',');
+	                kids[i].writeAsString(output, maxDepth - 1);
+	            }
+            }
+            output.append(')');
+        }
+        appendAnnotations(output, maxDepth);
+    }
+    
+    @Deprecated
+    public final void prettyPrint(ITermPrinter pp) {
+    	new NotImplementedException();
+    }
+
+    @Override
+    final protected int hashFunction() {
+        long r = getConstructor().hashCode();
+        int accum = 6673;
+        IStrategoTerm[] kids = getAllSubterms();
+        for(int i = 0; i < kids.length; i++) {
+            r += kids[i].hashCode() * accum;
+            accum *= 7703;
+        }
+        return (int)(r >> 12);
+    }
+    
+}

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoList.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoList.java	Tue Dec  6 17:08:16 2011	(r23686)
@@ -0,0 +1,149 @@
+package org.spoofax.terms.skeleton;
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+
+
+import java.io.IOException;
+import java.util.Iterator;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.StrategoListIterator;
+import org.spoofax.terms.StrategoTerm;
+import org.spoofax.terms.TermFactory;
+
+public abstract class SkeletonStrategoList extends StrategoTerm implements IStrategoList, Iterable<IStrategoTerm> {
+    
+    private static final long serialVersionUID = 624120573663698628L;
+
+    private static final int UNKNOWN_SIZE = -1;
+    
+    /**
+     * @see #hashFunction()
+     * @see TermFactory#EMPTY_LIST  The singleton maximally shared empty list instance.
+     */
+    static final int EMPTY_LIST_HASH = 1 * 71 * 71;
+    
+    private IStrategoTerm head;
+    
+    private IStrategoList tail;
+    
+    private int size = UNKNOWN_SIZE;
+
+    /**
+     * Creates a new list.
+     * 
+     * @see #prepend(IStrategoTerm) Adds a new head element to a list.
+     */
+    public SkeletonStrategoList(IStrategoList annotations, int storageType) {
+        super(annotations, storageType);
+    }
+    
+    @Deprecated
+    public IStrategoList prepend(IStrategoTerm prefix) {
+        throw new NotImplementedException();
+    }
+
+    public final IStrategoTerm get(int index) {
+        throw new NotImplementedException();
+    }
+    
+    public final int size() {
+        return getSubtermCount();
+    }
+
+    public final int getTermType() {
+        return IStrategoTerm.LIST;
+    }
+
+    @Override
+    protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        if (second.getTermType() != IStrategoTerm.LIST)
+            return false;
+        
+        final IStrategoList snd = (IStrategoList) second;
+        if (size() != snd.size())
+            return false;
+        
+        if (!isEmpty()) {
+            IStrategoTerm head = head();
+            IStrategoTerm head2 = snd.head();
+            if (head != head2 && !head.match(head2))
+                return false;
+            
+            IStrategoList tail = tail();
+            IStrategoList tail2 = snd.tail();
+        
+            // TODO: test equality of annos on cons nodes (see BasicStrategoList)
+            for (IStrategoList cons = tail, cons2 = tail2; !cons.isEmpty(); cons = cons.tail(), cons2 = cons2.tail()) {
+                IStrategoTerm consHead = cons.head();
+                IStrategoTerm cons2Head = cons2.head();
+                if (consHead != cons2Head && !consHead.match(cons2Head))
+                    return false;
+            }
+            
+            if (commonStorageType == SHARABLE) {
+                this.head = head2;
+                this.tail = tail2;
+            }
+        }
+        
+        IStrategoList annotations = getAnnotations();
+        IStrategoList secondAnnotations = second.getAnnotations();
+        if (annotations == secondAnnotations) {
+            return true;
+        } else if (annotations.match(secondAnnotations)) {
+            if (commonStorageType == SHARABLE) internalSetAnnotations(secondAnnotations);
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public final void prettyPrint(ITermPrinter pp) {
+        throw new NotImplementedException();
+    }
+    
+    public final void writeAsString(Appendable output, int maxDepth) throws IOException {
+        output.append('[');
+        if(!isEmpty()) {
+            if (maxDepth == 0) {
+                output.append("...");
+            } else {
+                IStrategoTerm[] kids = getAllSubterms();
+                kids[0].writeAsString(output, maxDepth - 1);
+                for(int i = 1; i < kids.length; i++) {
+                    output.append(',');
+                    kids[0].writeAsString(output, maxDepth - 1);
+                }
+            }
+        }
+        output.append(']');
+        appendAnnotations(output, maxDepth);
+    }
+
+    @Override
+    public int hashFunction() {
+        /* UNDONE: BasicStrategoTerm hash; should use cons/nil hash instead
+        long hc = 4787;
+        for (IStrategoList cur = this; !cur.isEmpty(); cur = cur.tail()) {
+            hc *= cur.head().hashCode();
+        }
+        return (int)(hc >> 2);
+        */
+        final int prime = 71;
+        int result = 1;
+        result = prime * result + ((head == null) ? 0 : head.hashCode());
+        result = prime * result + ((tail == null) ? 0 : tail.hashCode());
+        return result;
+    }
+
+    public final Iterator<IStrategoTerm> iterator() {
+        return new StrategoListIterator(this);
+    }
+}

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonTermFactory.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonTermFactory.java	Tue Dec  6 17:08:16 2011	(r23686)
@@ -0,0 +1,40 @@
+package org.spoofax.terms.skeleton;
+
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoPlaceholder;
+import org.spoofax.interpreter.terms.IStrategoReal;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.AbstractTermFactory;
+
+public abstract class SkeletonTermFactory extends AbstractTermFactory {
+
+    public SkeletonTermFactory(int defaultStorageType) {
+        super(defaultStorageType);
+    }
+
+    final public ITermFactory getFactoryWithStorageType(int storageType) {
+        throw new NotImplementedException();
+    }
+
+    final public IStrategoPlaceholder makePlaceholder(IStrategoTerm template) {
+        throw new NotImplementedException();
+    }
+
+    final public IStrategoReal makeReal(double d) {
+        throw new NotImplementedException();
+    }
+
+    final public IStrategoTerm annotateTerm(IStrategoTerm term,
+            IStrategoList annotations) {
+        throw new NotImplementedException();
+    }
+
+    final public IStrategoString tryMakeUniqueString(String name) {
+        throw new NotImplementedException();
+    }
+
+}

From karltk at strategoxt.org  Tue Dec  6 20:42:41 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 06 Dec 2011 19:42:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23687 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj
Message-ID: <20111206194241.479A07F803F@mx1.tudelft.nl>

Author: karltk
Date: Tue Dec  6 19:42:41 2011
New Revision: 23687
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23687&sc=1

Log:
ECJGenericList now inherits from SkeletonStrategoList. Improves code reuse. Should improve cons-behavior.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java	Tue Dec  6 17:08:16 2011	(r23686)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java	Tue Dec  6 19:42:41 2011	(r23687)
@@ -7,23 +7,22 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
-import java.io.IOException;
-
 import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.attachments.ITermAttachment;
 import org.spoofax.terms.attachments.TermAttachmentType;
+import org.spoofax.terms.skeleton.SkeletonStrategoList;
 
-public class ECJGenericList implements IStrategoList {
+public class ECJGenericList extends SkeletonStrategoList {
 
     private static final long serialVersionUID = 1L;
     
     private IStrategoTerm[] kids;
 
     ECJGenericList(IStrategoTerm[] kids) {
+        super(TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
         this.kids = kids;
     }
     
@@ -59,42 +58,11 @@
     }
 
     @Override
-    public int getTermType() {
-        return IStrategoTerm.LIST;
-    }
-
-    @Override
-    public int getStorageType() {
-        return IStrategoTerm.IMMUTABLE;
-    }
-
-    @Override
-    public IStrategoList getAnnotations() {
-        return TermFactory.EMPTY_LIST;
-    }
-
-    @Override
-    public boolean match(IStrategoTerm second) {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    public void prettyPrint(ITermPrinter pp) {
-        throw new NotImplementedException();
-    }
-
-    @Override
     public String toString(int maxDepth) {
         throw new NotImplementedException();
     }
 
     @Override
-    public void writeAsString(Appendable output, int maxDepth)
-            throws IOException {
-        throw new NotImplementedException();
-    }
-
-    @Override
     public <T extends ITermAttachment> T getAttachment(
             TermAttachmentType<T> type) {
         throw new NotImplementedException();
@@ -111,28 +79,13 @@
     }
 
     @Override
-    public boolean isList() {
-        return true;
-    }
-
-    @Override
-    public IStrategoTerm get(int index) {
-        return kids[index];
-    }
-
-    @Override
-    public int size() {
-        return kids.length;
-    }
-
-    @Override
     public IStrategoTerm head() {
         return kids[0];
     }
 
     @Override
     public boolean isEmpty() {
-        return false;
+        return kids.length == 0;
     }
 }
 

From karltk at strategoxt.org  Tue Dec  6 20:44:20 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 06 Dec 2011 19:44:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23688 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj: .
	src/main/java/org/spoofax/interpreter/library/ecj
	src/main/stratego/spoofax/bindings/eclipse src/te...
Message-ID: <20111206194420.D6323CC13E@mx4.tudelft.nl>

Author: karltk
Date: Tue Dec  6 19:44:20 2011
New Revision: 23688
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23688&sc=1

Log:
Renamed ecj-parse-only to ecj-parse-file and created a new ecj-parse-only. The latter now works relative to an Eclipse project. Added remaining batch of unit tests. Improved documentation for ecj-parse-* a bit.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_file.java
      - copied, changed from r23681, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_only.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-type.str
      - copied, changed from r23685, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJTools.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_and_resolve.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_only.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_project_get_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/TestLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile	Tue Dec  6 19:42:41 2011	(r23687)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile	Tue Dec  6 19:44:20 2011	(r23688)
@@ -4,7 +4,10 @@
 	bin/collect-all-ctors.ctree \
 	bin/collect-all-typedeclarations.ctree \
 	bin/build-minimal-cu.ctree \
-	bin/api-open-parse-match-resolve-method-and-type.ctree
+	bin/api-open-parse-match-resolve-method-and-type.ctree \
+	bin/api-open-parse-match-resolve-method.ctree \
+	bin/api-open-parse-match-resolve-type.ctree \
+	bin/api-parse-then-topdown-match-typedeclaration.ctree
 
 all : $(wanted)
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java	Tue Dec  6 19:42:41 2011	(r23687)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java	Tue Dec  6 19:44:20 2011	(r23688)
@@ -27,6 +27,7 @@
     }
     
     private void init() {
+        add(new ECJ_parse_file());
         add(new ECJ_parse_only());
         add(new ECJ_parse_and_resolve());
         add(new ECJ_open_project());

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJTools.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJTools.java	Tue Dec  6 19:42:41 2011	(r23687)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJTools.java	Tue Dec  6 19:44:20 2011	(r23688)
@@ -36,7 +36,7 @@
 
 public class ECJTools {
 
-    public static boolean isProject(IStrategoTerm t) {
+    public static boolean isIProject(IStrategoTerm t) {
         return unannotate(t) instanceof WrappedIProject;
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_and_resolve.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_and_resolve.java	Tue Dec  6 19:42:41 2011	(r23687)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_and_resolve.java	Tue Dec  6 19:44:20 2011	(r23688)
@@ -33,7 +33,7 @@
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
 
-        if(!ECJTools.isProject(tvars[0]))
+        if(!ECJTools.isIProject(tvars[0]))
             return false;
         if(!Tools.isTermString(tvars[1]))
             return false;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_file.java (from r23681, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_only.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_only.java	Mon Dec  5 23:56:57 2011	(r23681, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_file.java	Tue Dec  6 19:44:20 2011	(r23688)
@@ -23,10 +23,10 @@
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class ECJ_parse_only extends AbstractPrimitive {
+public class ECJ_parse_file extends AbstractPrimitive {
 
-    protected ECJ_parse_only() {
-        super("ECJ_parse_only", 0, 1);
+    protected ECJ_parse_file() {
+        super("ECJ_parse_file", 0, 1);
     }
 
     private static char[] getBytes(String fileName) throws FileNotFoundException, IOException {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_only.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_only.java	Tue Dec  6 19:42:41 2011	(r23687)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_only.java	Tue Dec  6 19:44:20 2011	(r23688)
@@ -7,61 +7,59 @@
  */
 package org.spoofax.interpreter.library.ecj;
 
-import java.io.BufferedReader;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
-import java.io.IOException;
-
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.jdt.core.ICompilationUnit;
+import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.ASTParser;
 import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.adapter.ecj.WrappedIProject;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class ECJ_parse_only extends AbstractPrimitive {
 
-    protected ECJ_parse_only() {
-        super("ECJ_parse_only", 0, 1);
-    }
-
-    private static char[] getBytes(String fileName) throws FileNotFoundException, IOException {
-
-        BufferedReader r = new BufferedReader(new FileReader(fileName));
-        StringBuilder sb = new StringBuilder();
-        String s = r.readLine();
-        while(s != null) {
-            sb.append(s);
-            s = r.readLine();
-        }
-            
-        return sb.toString().toCharArray();
+    public ECJ_parse_only() {
+        super("ECJ_parse_only", 0, 2);
     }
-    
     @Override
-    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
-         
-        if(!Tools.isTermString(tvars[0]))
-             return false;
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+            throws InterpreterException {
+
+        if(!ECJTools.isIProject(tvars[0]))
+            return false;
+        if(!Tools.isTermString(tvars[1]))
+            return false;
+        
+        String path = ((IStrategoString)tvars[1]).stringValue();
+        
+        IProject project = ((WrappedIProject)tvars[0]).getWrappee();
+        if(project == null)
+            return false;
         
         ASTParser parser = ASTParser.newParser(AST.JLS3);
-        try {
-            parser.setSource(getBytes(Tools.javaString(tvars[0])));
-        } catch(FileNotFoundException e) {
+        IFile file = (IFile) project.findMember(path);
+        if(file == null)
             return false;
-        } catch(IOException e) {
+        
+        ICompilationUnit cu = JavaCore.createCompilationUnitFrom(file);
+        if(cu == null)
             return false;
-        }
         
-        ASTNode ast = parser.createAST(null);
-        ECJFactory f = ((ECJFactory)env.getFactory());
-        IStrategoTerm t = f.parseFromTree(ast);
+        parser.setResolveBindings(false);
+        parser.setSource(cu);
+        ASTNode n = parser.createAST(null);
+        if(n == null)
+            return false;
         
-        env.setCurrent(t);
+        env.setCurrent(ECJFactory.genericWrap(n));
         return true;
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_project_get_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_project_get_file.java	Tue Dec  6 19:42:41 2011	(r23687)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_project_get_file.java	Tue Dec  6 19:44:20 2011	(r23688)
@@ -26,7 +26,7 @@
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
         
-        if(!ECJTools.isProject(tvars[0]))
+        if(!ECJTools.isIProject(tvars[0]))
             return false;
         if(!Tools.isTermString(tvars[1]))
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Tue Dec  6 19:42:41 2011	(r23687)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Tue Dec  6 19:44:20 2011	(r23688)
@@ -13,7 +13,7 @@
 
 signature
   constructors
-  FILE : Term -> FILE
+  FILE           : String -> FILE
   
   Project        : Term -> Project
   Binding        : Int * Int * String -> Binding
@@ -28,20 +28,43 @@
   
 strategies
 
-  /** @type FILE -> ASTNode */
-  ecj-parse-only = ?FILE(name) ; prim("ECJ_parse_only", name)
+  /** Parse a file inside an Eclipse project and return the AST. The file path must be
+    * relative to the project.
+    *
+    * @param IProject
+    * @type FILE -> ASTNode 
+    */
+  ecj-parse-only(|project) = ?FILE(fileName) ; prim("ECJ_parse_only", project, fileName)
+
+  /** Parse a file on disk and return the AST. The file path must be relative to the current
+    * working directory.
+    * 
+    * @type FILE -> ASTNode 
+    */
+  ecj-parse-file = ?FILE(fileName) ; prim("ECJ_parse_file", fileName)
 
   /** @type String -> ECJProject */
   ecj-open-project = ?path ; prim("ECJ_open_project", path)
   
+  /** @type String -> ECJProject */
   ecj-create-project = ?path ; prim("ECJ_create_project", path)
 
+  /** @param IProject 
+    * @type String -> ?success
+    */
   ecj-add-source-folder(|project) = ?path ; prim("ECJ_add_source_folder", project, path)
   
+  /** @param IProject 
+    * @type String -> ?success
+    */
   ecj-add-jar(|project) = ?path ; prim("ECJ_add_jar", path, project)
     
+  /** @param IProject 
+    * @type FILE -> ASTNode 
+    */
   ecj-parse-and-resolve(|project) = ?FILE(name) ; prim("ECJ_parse_and_resolve", project, name) 
   
+  /** @type ASTNode -> ASTNode */
   ecj-is-valid-ast-node = 
        (?t ; prim("ECJ_is_valid_ast_node", t))
     <+ (?t ; prim("ECJ_is_valid_ast_nodelist", t))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/TestLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/TestLibrary.java	Tue Dec  6 19:42:41 2011	(r23687)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/TestLibrary.java	Tue Dec  6 19:44:20 2011	(r23688)
@@ -46,4 +46,25 @@
         assertTrue(interp.invoke("main_0_0"));
     }
 
+    @Test
+    public void open_parse_match_resolve_method() throws IOException, InterpreterException, CoreException {
+        interp.load(TestLibrary.class.getResourceAsStream("/api-open-parse-match-resolve-method.ctree"));
+        interp.setCurrent(wef.makeString("Foo.java"));
+        assertTrue(interp.invoke("main_0_0"));
+    }
+
+    @Test
+    public void open_parse_match_resolve_type() throws IOException, InterpreterException, CoreException {
+        interp.load(TestLibrary.class.getResourceAsStream("/api-open-parse-match-resolve-type.ctree"));
+        interp.setCurrent(wef.makeString("Foo.java"));
+        assertTrue(interp.invoke("main_0_0"));
+    }
+
+    @Test
+    public void open_parse_then_topdown_match_typedeclaration() throws IOException, InterpreterException, CoreException {
+        interp.load(TestLibrary.class.getResourceAsStream("/api-parse-then-topdown-match-typedeclaration.ctree"));
+        interp.setCurrent(wef.makeString("Foo.java"));
+        assertTrue(interp.invoke("main_0_0"));
+    }
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str	Tue Dec  6 19:42:41 2011	(r23687)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str	Tue Dec  6 19:44:20 2011	(r23688)
@@ -7,17 +7,12 @@
 strategies
   
   main =  
-      debug(!"5");
       where(<ecj-open-project> "DummyProject" => p)
-    ; debug(!"1")
     ; !FILE(<id>)
-    ; debug(!"2")
     ; ecj-parse-and-resolve(|p)
-    ; debug(!"3")
     ; topdown(try(?MethodInvocation(_, _, _, _) 
                   ; where(debug ; ecj-method-of ; debug)
                   ; where(debug ; ecj-type-of ; debug)
                  )
              )
-    ; debug(!"4")
     ;!()

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str	Tue Dec  6 19:42:41 2011	(r23687)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str	Tue Dec  6 19:44:20 2011	(r23688)
@@ -1,13 +1,13 @@
 module api-open-parse-match-resolve-method
 imports
-  stratego-lib
+  libstratego-lib
   spoofax/bindings/eclipse/EclipseJava
   spoofax/bindings/eclipse/eclipse-compiler-ffi
 
 strategies
   
   main =  
-      where(<ecj-open-project> "demo1" => p)
+      where(<ecj-open-project> "DummyProject" => p)
     ;!FILE(<id>)
     ; ecj-parse-and-resolve(|p)
     ; debug

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-type.str (from r23685, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str	Tue Dec  6 16:35:01 2011	(r23685, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-type.str	Tue Dec  6 19:44:20 2011	(r23688)
@@ -1,13 +1,13 @@
-module api-open-project-parse-match-resolve-type
+module api-open-parse-match-resolve-type
 imports
-  stratego-lib
+  libstratego-lib
   spoofax/bindings/eclipse/EclipseJava
   spoofax/bindings/eclipse/eclipse-compiler-ffi
 
 strategies
   
   main =  
-      where(<ecj-open-project> "demo1" => p)
+      where(<ecj-open-project> "DummyProject" => p)
     ;!FILE(<id>)
     ; ecj-parse-and-resolve(|p)
     ; topdown(try(?TypeDeclaration(_, _, _, _, _, _, _, _) 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str	Tue Dec  6 19:42:41 2011	(r23687)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str	Tue Dec  6 19:44:20 2011	(r23688)
@@ -1,14 +1,15 @@
 module api-parse-then-topdown-match-typedeclaration
 imports
-  stratego-lib
+  libstratego-lib
   spoofax/bindings/eclipse/EclipseJava
   spoofax/bindings/eclipse/eclipse-compiler-ffi
 
 strategies
   
-  main = where(
-      !FILE(<id>) 
+  main = 
+  	  where(<ecj-open-project> "DummyProject" => p)
+    ; !FILE(<id>) 
     ; debug 
-    ; ecj-parse-only
+    ; ecj-parse-only(|p)
     ; topdown(try(?TypeDeclaration(_, _, _, _, _, _, _, _) ; debug))
-    ) ; !()
+    ; !()

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str	Tue Dec  6 19:42:41 2011	(r23687)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str	Tue Dec  6 19:44:20 2011	(r23688)
@@ -1,6 +1,6 @@
 module build-minimal-cu
 imports
-  stratego-lib
+  libstratego-lib
   spoofax/bindings/eclipse/EclipseJava
   
 strategies

From karltk at strategoxt.org  Tue Dec  6 21:01:00 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 06 Dec 2011 20:01:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23689 -
	spoofax-contrib/spoofax-ecj-examples
	spoofax/trunk/spoofax/spoofax-ecj-examples
Message-ID: <20111206200100.226BB7F8040@mx1.tudelft.nl>

Author: karltk
Date: Tue Dec  6 20:00:59 2011
New Revision: 23689
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23689&sc=1

Log:
Moving this to contrib.

Added:
   spoofax-contrib/spoofax-ecj-examples/   (props changed)
      - copied from r23688, spoofax/trunk/spoofax/spoofax-ecj-examples/
Deleted:
   spoofax/trunk/spoofax/spoofax-ecj-examples/

From karltk at strategoxt.org  Tue Dec  6 21:02:46 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 06 Dec 2011 20:02:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23690 -
	spoofax-experimental
Message-ID: <20111206200246.C9113108C007@mx3.tudelft.nl>

Author: karltk
Date: Tue Dec  6 20:02:46 2011
New Revision: 23690
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23690&sc=1

Log:
Target for various experimental projects related to Spoofax, but that shouldn't be considered as a part of Spoofax proper.

Added:
   spoofax-experimental/

From g.h.wachsmuth at tudelft.nl  Wed Dec  7 09:27:31 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Wed, 07 Dec 2011 08:27:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23691 - in
	jasmin-spoofax: . .externalToolBuilders .settings META-INF
	editor editor/java/org/strategoxt/spoofax/jasminxt
	editor/java/org/strategoxt/spoofax/jasminxt/strate...
Message-ID: <20111207082731.5DA88CC043@mx4.tudelft.nl>

Author: GuidoWachsmuth
Date: Wed Dec  7 08:27:31 2011
New Revision: 23691
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23691&sc=1

Log:


Added:
   jasmin-spoofax/.settings/
   jasmin-spoofax/.settings/org.eclipse.jdt.core.prefs
   jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/JasminXTParseControllerGenerated.java
   jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/
   jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/InteropRegisterer.java
   jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/Main.java
   jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/execute_jasmin_0_0.java
   jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/execute_java_0_1.java
   jasmin-spoofax/lib/refactor-common.generated.str
   jasmin-spoofax/test/HelloWorld.result.aterm
   jasmin-spoofax/trans/analysis/names/environments.str
   jasmin-spoofax/trans/interpreter/
   jasmin-spoofax/trans/interpreter/arithmetics.str
   jasmin-spoofax/trans/interpreter/arrays.str
   jasmin-spoofax/trans/interpreter/constants.str
   jasmin-spoofax/trans/interpreter/desugar.str
   jasmin-spoofax/trans/interpreter/jumps.str
   jasmin-spoofax/trans/interpreter/locals.str
   jasmin-spoofax/trans/interpreter/methods.str
   jasmin-spoofax/trans/interpreter/misc.str
   jasmin-spoofax/trans/interpreter/objects.str
   jasmin-spoofax/trans/interpreter/state.str
Replaced:
   jasmin-spoofax/lib/jasmin.jar
      - copied unchanged from r21494, jasmin-spoofax/lib/jasmin.jar
Deleted:
   jasmin-spoofax/lib/environment.str
   jasmin-spoofax/lib/namespace.str
   jasmin-spoofax/trans/analysis/names/namespaces.str
Modified:
   jasmin-spoofax/.classpath
   jasmin-spoofax/.externalToolBuilders/JasminXT build.main.xml.launch
   jasmin-spoofax/META-INF/MANIFEST.MF
   jasmin-spoofax/build.generated.xml
   jasmin-spoofax/editor/JasminXT-Builders.esv
   jasmin-spoofax/lib/editor-common.generated.str
   jasmin-spoofax/test/ANewArray.j
   jasmin-spoofax/test/AnInterface.j
   jasmin-spoofax/test/Arrays.j
   jasmin-spoofax/trans/analysis/main.str
   jasmin-spoofax/trans/analysis/names/check.str
   jasmin-spoofax/trans/analysis/names/map.str
   jasmin-spoofax/trans/analysis/names/rename.str
   jasmin-spoofax/trans/editor/resolve.str
   jasmin-spoofax/trans/jasminxt.str

Modified: jasmin-spoofax/.classpath
==============================================================================
--- jasmin-spoofax/.classpath	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/.classpath	Wed Dec  7 08:27:31 2011	(r23691)
@@ -1,8 +1,8 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-
+<?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry excluding="trans/**" kind="src" path="editor/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="lib" path="lib/jasmin.jar"/>
 	<classpathentry kind="output" path="bin"/>
-</classpath>
\ No newline at end of file
+</classpath>

Modified: jasmin-spoofax/.externalToolBuilders/JasminXT build.main.xml.launch
==============================================================================
--- jasmin-spoofax/.externalToolBuilders/JasminXT build.main.xml.launch	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/.externalToolBuilders/JasminXT build.main.xml.launch	Wed Dec  7 08:27:31 2011	(r23691)
@@ -14,7 +14,6 @@
 <booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${project_loc}/build.main.xml"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>

Added: jasmin-spoofax/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/.settings/org.eclipse.jdt.core.prefs	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Modified: jasmin-spoofax/META-INF/MANIFEST.MF
==============================================================================
--- jasmin-spoofax/META-INF/MANIFEST.MF	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/META-INF/MANIFEST.MF	Wed Dec  7 08:27:31 2011	(r23691)
@@ -4,7 +4,9 @@
 Bundle-SymbolicName: org.strategoxt.spoofax.jasminxt; singleton:=true
 Bundle-Version: 1.0.0
 Bundle-Activator: org.strategoxt.spoofax.jasminxt.Activator
-Import-Package: org.osgi.framework;version="1.3.0"
+Import-Package: org.osgi.framework;version="1.3.0",
+ org.spoofax.interpreter.terms,
+ org.strategoxt.lang
 Require-Bundle: org.eclipse.core.runtime,
   org.eclipse.core.resources,
   org.eclipse.imp.runtime,

Modified: jasmin-spoofax/build.generated.xml
==============================================================================
--- jasmin-spoofax/build.generated.xml	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/build.generated.xml	Wed Dec  7 08:27:31 2011	(r23691)
@@ -3,27 +3,42 @@
 <project name="build.generated">
 
         <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
-        <target name="spoofaximp.default.ctree" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,sdf2imp,refresh"/>
-        <target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  sdf2imp,refresh"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
+        <available file="${src-gen}/org/strategoxt/spoofax/jasminxt/strategies/Main.java" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la org.strategoxt.spoofax.jasminxt.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
             <isset property="externaldef"/>
         </condition>
-        <condition property="externaljarimport" value=":${externaljar}" else="">
+        <condition property="externaljarimport1" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
+        <condition property="externaljarimport2" value=":${externaljarx}" else="">
+            <isset property="externaljarx"/>
+        </condition>
         <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
             <isset property="eclipse.running"/>
         </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
         </condition>
         <condition property="metasdfmodule.available" value="1">
             <available file="${syntax}/${metasdfmodule}.sdf"/>
         </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
         <mkdir dir="${build}"/>
         <mkdir dir="${src-gen}"/>
         <mkdir dir="${dist}"/>
@@ -31,7 +46,7 @@
         <mkdir dir="${lib}"/>
         <mkdir dir="${syntax}"/>
 
-        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
         
         <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
             <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
@@ -41,9 +56,11 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
@@ -73,6 +90,13 @@
             <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
             <antcall target="check-classpath.helper"/>  
         </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
   
         <target name="check-classpath.helper" unless="check-classpath.available">
             <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
@@ -142,9 +166,12 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${syntax}">
+                <srcfileset dir="${basedir}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
@@ -223,6 +250,43 @@
             </java>
         </target>
         
+        <target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-parenthesize.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper"/>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper.fallback"/>
+        </target>
+
+        <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-parenthesize.str"/>
+                <arg value="--omod"/>
+                <arg value="include/${sdfmodule}-parenthesize"/>
+                <arg value="--main-strategy"/>
+                <arg value="io-${sdfmodule}-parenthesize"/>
+                <arg value="--lang"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--rule-prefix"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--sig-module"/>
+                <arg value="include/${sdfmodule}"/>
+            </java>
+        </target>
+
+    	<target name="sdf2parenthesize.helper.fallback" unless="sdf2parenthesize.available">
+        	<echo file="${include}/${sdfmodule}-parenthesize.str" message="module include/${sdfmodule}-parenthesize rules parenthesize-${sdfmodule} = id"/>
+    	</target>
+        
         <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
@@ -241,9 +305,10 @@
                 <arg value="org.strategoxt.tools.main-ppgen"/>
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
                 <arg value="-o"/>
                 <arg value="${include}/${sdfmodule}.generated.pp.af"/>
-                <arg value="-t"/>
             </java>
             <java classname="run" failonerror="false">
                 <arg value="org.strategoxt.tools.main-pp-pp-table"/>
@@ -287,9 +352,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -309,11 +375,13 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
     
         <!-- Stratego to Java interpreter -->
         <target name="stratego.ctree" depends="rtg2sig">
@@ -321,17 +389,15 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
             <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
             <antcall target="copy-jar"/>
             <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${include}"/>
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
                 <param name="build.stratego.extraargs" value="-F"/>
-                <param name="build.stratego.extension" value="ctree"/>
-                <param name="build.stratego.compiler" value="strc"/>
             </antcall>
         </target>
     
@@ -341,7 +407,7 @@
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
                     <include name="**/*.astr"/>
-                    <exclude name="lib/editor-common.generated.str"/>
+                    <exclude name="lib/*.generated.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
@@ -349,11 +415,10 @@
             <antcall target="copy-jar"/>
             <antcall target="stratego.jar.deletehelper"/>
             <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${src-gen}/trans"/>
-                <param name="build.stratego.extraargs" value="-la java-front"/>
-                <param name="build.stratego.extension" value="java"/>
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
             </antcall>
-            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
             <!-- copy imported terms -->
             <copy todir="${build}/trans">
                 <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
@@ -376,7 +441,7 @@
                 <arg value="-i"/>
                 <arg value="${trans}/${strmodule}.str"/>
                 <arg value="-o"/>
-                <arg value="${build.stratego.outputpath}/${strmodule}.${build.stratego.extension}"/>
+                <arg value="${build.stratego.outputfile}"/>
                 <arg value="-p"/>
                 <arg value="trans"/>
                 <arg value="--library"/>
@@ -385,12 +450,158 @@
                 <arg line="${build.stratego.extraargs}"/>
                 <arg line="${externaljarflags}"/>
                 <arg line="${externaldefimport}"/>
-                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot;  --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
             </java>
             <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
             <mkdir dir="${build}/trans"/>
         </target>
                 
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+        <!-- 
+            if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+            Only used by stratego.jvm.helper.debug 
+        -->
+        <condition property="transformer-output" value="" else="--output-rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- 
+            if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+            if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+            Only used by stratego.jvm.helper.debug
+        -->
+        <condition property="strj.input.file.type" value="str" else="rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- value determines which target will be executed.
+            If the file ".debugmode" can be found in the project root call stratego.jar.debug
+            else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+        
+        <!-- will save the stratego files with debug info in this folder -->
+        <property name="trans-debug" location="trans-debug"/>
+        
+        <!-- this helper target determines what target to call, based on debug.build.enabled -->
+        <target name="stratego.jar.helper">
+            <antcall target="${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar unless debug.build.enabled property is set --> 
+        <target name="call.stratego.jar" depends="stratego.jar">
+            <echo message="call.stratego.jar - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar.debug when debug.build.enabled property is set -->
+        <target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+            <echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- copy stratego runtime jars to utils folder -->
+        <target name="utils-files-debug" depends="utils-files">
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+        </target>
+        
+        <!-- Stratego to Java compiler with debugging capabilities -->
+        <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <!-- compile stratego to java -->
+            <antcall target="stratego.jvm.helper.debug">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <!-- compile java to class -->
+            <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+                <!-- attribute in javac: srcdir="${src-gen}" -->
+                <src path="${src-gen}"/>
+                <!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
+                <classpath>
+                    <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+                    <pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+                    <pathelement location="utils/stratego-debug-runtime-java.jar"/>
+                </classpath>
+                <!-- attribute in javac: includes="trans/**"  -->
+                <include name="trans/**"/>
+            </javac>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <!-- create a jar from the class files -->
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <!-- instrument the stratego program and compile it to java -->
+        <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+            <echo message="generate stratego with debug information"/>
+            <echo message="${basedir}"/>
+            <available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+            <!-- add debug information -->
+              <java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+                   <classpath>
+                    <pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.strategojar}"/>
+                   </classpath>
+                  <arg value="-i"/>
+                  <arg value="${trans}/${strmodule}.str"/>
+                  <arg value="--gen-dir"/>
+                  <arg value="${trans-debug}"/>
+                  <arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+                  <arg value="${basedir}"/>
+                  <!-- "arg line='val'" val should contain space-separated arguments --> 
+                  <arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+                  
+                  <!-- arguments should start with two '-'-characters -->
+                  <!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+                  <!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+                  <!-- <arg value="-output-rtree"/> --> 
+            </java>
+            <!-- now compile instrumented stratego to java -->
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <!-- put strategodebuglib.rtree on the include path -->
+                <arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+                <arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
         <!-- Stratego to C-based native executable -->
         <target name="stratego.c">
             <antcall target="stratego.c.helper">
@@ -420,6 +631,7 @@
         
         <target name="clean" description="clean up">
             <delete dir="${build}"/>
-            <delete file="${src-gen}/trans/Main.java"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete dir="${src-gen}/trans"/>
         </target>
     </project>
\ No newline at end of file

Modified: jasmin-spoofax/editor/JasminXT-Builders.esv
==============================================================================
--- jasmin-spoofax/editor/JasminXT-Builders.esv	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/editor/JasminXT-Builders.esv	Wed Dec  7 08:27:31 2011	(r23691)
@@ -11,13 +11,15 @@
 
 builders
                                                                                                                                
-  provider                  : include/jasminxt.ctree                                                                           
+  provider: include/jasminxt.ctree                                                                           
+  provider: include/jasminxt-java.jar
+  provider: lib/jasmin.jar
                                                                                                                                
-  observer                  : editor-analyse                                                                                   
+  observer: editor-analyse                                                                                   
                                                                                                                                
-  builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder: "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
   
-  builder                   : "Generate class file" = generate-class (source)  
+  builder: "Generate class file" = generate-class (source)  
   
-  builder                   : "Execute" = execute-class (source)  
+  builder: "Execute" = execute-class (source) (openeditor)
                                                                                                                                
\ No newline at end of file

Added: jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/JasminXTParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/JasminXTParseControllerGenerated.java	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,108 @@
+package org.strategoxt.spoofax.jasminxt;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileInputStream;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class JasminXTParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("JasminXT");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    JasminXTParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = JasminXTParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = JasminXTParseControllerGenerated.class.getResourceAsStream(TABLE);
+      boolean filesystem = false;
+      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
+      { 
+        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
+        filesystem = true;
+      }
+      if(table == null && new File("./" + TABLE).exists())
+      { 
+        table = new FileInputStream("./" + TABLE);
+        filesystem = true;
+      }
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
+      descriptor.setAttachmentProvider(JasminXTParseControllerGenerated.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return JasminXTParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/InteropRegisterer.java	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,18 @@
+package org.strategoxt.spoofax.jasminxt.strategies;
+
+       import org.strategoxt.lang.JavaInteropRegisterer;
+       import org.strategoxt.lang.Strategy;
+
+       /**
+        * Helper class for {@link java_strategy_0_0}.
+        */
+       public class InteropRegisterer extends JavaInteropRegisterer {
+
+         public InteropRegisterer() {
+           super(new Strategy[] { 
+        		   execute_java_0_1.instance, 
+        		   execute_jasmin_0_0.instance
+           });
+       
+         }
+       }

Added: jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/Main.java	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,11 @@
+package org.strategoxt.spoofax.jasminxt.strategies;
+
+import org.strategoxt.lang.Context;
+
+public class Main {
+  
+  public static void init(Context context) {
+    // Called when the editor is being initialized
+  }
+
+}

Added: jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/execute_jasmin_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/execute_jasmin_0_0.java	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,119 @@
+package org.strategoxt.spoofax.jasminxt.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Example Java strategy implementation.
+ *
+ * This strategy can be used by editor services and can be called
+ * in Stratego modules by declaring it as an external strategy
+ * as follows:
+ *
+ * <code>
+ *  external java-strategy(|)
+ * </code>
+ *
+ * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+ */
+public class execute_jasmin_0_0 extends Strategy {
+
+	public static execute_jasmin_0_0 instance = new execute_jasmin_0_0();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+	
+//		fname = "/Users/guwac/Documents/EclipseWorkspaces/IN4303/JasminXT/test/HelloWorld.j" ;
+//		cpath = "/Users/guwac/Documents/EclipseWorkspaces/IN4303/JasminXT/test/";
+//		
+//		File out_file = null;
+//        FileOutputStream outp = null;
+//        File file = new File(fname);
+//        ClassFile classFile = new ClassFile();
+//        String iocause = fname + ": file not found";
+//
+//        try {
+//            BufferedReader inp;
+//            
+//              FileInputStream fs = new FileInputStream(fname);
+//              InputStreamReader ir;
+//              ir = new InputStreamReader(fs);
+//              inp = new BufferedReader(ir);
+//            
+//            classFile.readJasmin(inp, file.getName(), false);
+//            inp.close();
+//
+//            // if we got some errors, don't output a file - just return.
+//            if (classFile.errorCount() > 0) {
+//                System.err.println(fname + ": Found "
+//                                    + classFile.errorCount() + " errors");
+//                return null;
+//            }
+//
+//            String class_path[] = (ScannerUtils.splitClassField(
+//                                                classFile.getClassName()));
+//            String class_name = class_path[1];
+//
+//            // determine where to place this class file
+//            String dest_dir = cpath;
+//            if (class_path[0] != null) {
+//                String class_dir = ScannerUtils.convertChars(
+//                                           class_path[0], "./",
+//                                           File.separatorChar);
+//                if (dest_dir != null) {
+//                    dest_dir = dest_dir + File.separator + class_dir;
+//                } else {
+//                    dest_dir = class_dir;
+//                }
+//            }
+//            iocause = class_name + ".class: file can't be created";
+//            if (dest_dir == null) {
+//                out_file = new File(class_name + ".class");
+//            } else {
+//                out_file = new File(dest_dir, class_name + ".class");
+//
+//                // check that dest_dir exists
+//
+//                File dest = new File(dest_dir);
+//                if (!dest.exists()) {
+//                    dest.mkdirs();
+//                }
+//
+//                if (!dest.isDirectory()) {
+//                    throw new IOException("Cannot create directory");
+//                }
+//            }
+//
+//            outp = new FileOutputStream(out_file);
+//            classFile.write(outp);
+//            outp.close();
+//            outp = null; // as marker
+//            System.out.println("Generated: " + out_file.getPath());
+//
+//        } catch (java.io.FileNotFoundException e) {
+//            System.err.println(iocause);
+//            System.exit(-1);
+//        } catch (jasError e) {
+//            classFile.report_error("JAS Error: " + e.getMessage(), e.numTag);
+//        } catch (Exception e) {
+//            if(DEBUG)
+//                e.printStackTrace();
+//            classFile.report_error(fname + ": exception - <" +
+//                              e.getClass().getName() + "> " + e.getMessage() +
+//                              ".");
+//        }
+//        if (classFile.errorCount() > 0) {
+//            System.err.println(fname + ": Found "
+//                               + classFile.errorCount() + " errors");
+//            if (outp != null) {
+//                try {
+//                  outp.close();
+//                  out_file.delete();
+//                } catch(Exception e) {}
+//            }
+//        }
+
+		return current;
+	}
+}

Added: jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/execute_java_0_1.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/editor/java/org/strategoxt/spoofax/jasminxt/strategies/execute_java_0_1.java	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,73 @@
+?package org.strategoxt.spoofax.jasminxt.strategies;
+
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.PrintStream;
+import java.lang.reflect.Method;
+import java.net.URL;
+import java.net.URLClassLoader;
+
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+       
+/**
+ * Example Java strategy implementation.
+ *
+ * This strategy can be used by editor services and can be called
+ * in Stratego modules by declaring it as an external strategy
+ * as follows:
+ *
+ * <code>
+ *  external java-strategy(|)
+ * </code>
+ *
+ * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+ */
+public class execute_java_0_1 extends Strategy {
+
+	public static execute_java_0_1 instance = new execute_java_0_1();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm path) {
+		
+		// remember system streams
+		PrintStream origOut = System.out;
+		PrintStream origErr = System.err;
+		
+		// create temporary streams to collect output
+		ByteArrayOutputStream out = new ByteArrayOutputStream();
+		ByteArrayOutputStream err = new ByteArrayOutputStream();
+		
+		System.setOut(new PrintStream(out));
+		System.setErr(new PrintStream(err));
+		
+		try {
+			// load class
+			File file = new File(((IStrategoString) path).stringValue());
+			URLClassLoader loader = new URLClassLoader(new URL[]{file.toURI().toURL()}); 
+			Class<?> cls = loader.loadClass(((IStrategoString) current).stringValue());
+			
+			// invoke main method
+			Method method = cls.getDeclaredMethod("main", new Class[] {String[].class});
+			method.invoke(null, (Object) new String[0]);
+		} 
+		catch (Exception e) {
+			e.printStackTrace(); 
+		}
+		
+		// reset system streams
+		System.setErr(origErr);
+		System.setOut(origOut);
+
+		// return output collected in both temporary streams
+		ITermFactory factory = context.getFactory();	
+		return factory.makeAppl(
+			factory.makeConstructor("Output", 2), 
+			factory.makeString(out.toString()),
+			factory.makeString(err.toString())
+		);
+	}
+}

Modified: jasmin-spoofax/lib/editor-common.generated.str
==============================================================================
--- jasmin-spoofax/lib/editor-common.generated.str	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/lib/editor-common.generated.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -100,6 +100,8 @@
   project-path = prim("SSL_EXT_projectpath")
   
   plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
 
   is-newer:
     (file1, file2) -> <id>
@@ -141,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Copied: jasmin-spoofax/lib/jasmin.jar (from r21494, jasmin-spoofax/lib/jasmin.jar)
==============================================================================
Binary file (source and/or target). No diff available.

Added: jasmin-spoofax/lib/refactor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/lib/refactor-common.generated.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,67 @@
+module lib/refactor-common.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+
+strategies //transformation
+
+/**
+ * Replaces elements in a list (once, starting from the right)
+ * @param match strategy for partial list
+ * @param new elements List(b)
+ * @type List(a) -> List(a,b)
+ */
+replace-sublist(match-sublist|new-elems): 
+  list -> <
+    at-suffix(match-sublist;!new-elems) <+
+    (
+      init; 
+      replace-sublist(match-sublist|new-elems);
+      at-end(![<last> list])
+    )
+  > list 
+
+/**
+ * Inserts an element at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list element 
+ * @type Term -> Term
+ */
+insert-elem(|pos, elem)=
+  insert-sublist(|pos, [elem])
+
+/**
+ * Inserts a list of elements at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list elements 
+ * @type Term -> Term
+ */	
+insert-sublist(|pos, elems)=
+  at-position(
+    split-at(|<last> pos);
+    ?(prefix, suffix);
+    <concat>[prefix, elems, suffix]
+    |<init> pos
+  )
+
+
+strategies //user-input
+
+/**
+ * Opens an input dialog for one string value that represents an identifier
+ * The language is used to check if the input value matches the identifier pattern
+ * @type (String, String, String, String) -> String
+ */
+input-dialog:
+  (language, title, label, default-value) -> <prim("SSL_EXT_newnamedialog", language, title, label, default-value)>
+  
+input-dialog:
+  (title, label, default-value) -> <input-dialog>("", title, label, default-value)
+
+strategies //pp-table
+	
+get-pp-table=
+  import-term(include/JasminXT.generated.pp.af)
+	

Modified: jasmin-spoofax/test/ANewArray.j
==============================================================================
--- jasmin-spoofax/test/ANewArray.j	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/test/ANewArray.j	Wed Dec  7 08:27:31 2011	(r23691)
@@ -8,9 +8,9 @@
 ; array using anewarray.
 ;
 
-.class public examples/ANewArray
+.class public ANewArray
 .super java/lang/Object
-
+
 .method public <init>()V
    aload_0
    invokenonvirtual java/lang/Object/<init>()V
@@ -20,7 +20,8 @@
 .method public static main([Ljava/lang/String;)V
    .limit stack 4
    .limit locals 2
-
+   .var 1 is 'ret' [Ljava/lang/String; from start to end
+   
     ;
     ; Allocates an array like:
     ;      String x[][] = new String[2][5]
@@ -29,6 +30,7 @@
     ; Allocate spine for array and store it in local var 1
     ; (i.e. String[2][])
 
+    start:
     iconst_2
     anewarray [Ljava/lang/String;
     astore_1
@@ -48,5 +50,6 @@
     aastore
 
     ; done ...
+    end:
     return
 .end method

Modified: jasmin-spoofax/test/AnInterface.j
==============================================================================
--- jasmin-spoofax/test/AnInterface.j	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/test/AnInterface.j	Wed Dec  7 08:27:31 2011	(r23691)
@@ -16,7 +16,7 @@
 ; this interface.
 ;
 
-.interface public examples/AnInterface
+.class public examples/AnInterface
 .super java/lang/Object     
 
 ; (Interfaces should either inherit from Object, or from 

Modified: jasmin-spoofax/test/Arrays.j
==============================================================================
--- jasmin-spoofax/test/Arrays.j	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/test/Arrays.j	Wed Dec  7 08:27:31 2011	(r23691)
@@ -9,7 +9,7 @@
 ; it doesn't actually do anything very interesting with the arrays.
 ;
 
-.class public examples/Arrays
+.class public Arrays
 .super java/lang/Object
 
 ; standard initializer

Added: jasmin-spoofax/test/HelloWorld.result.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/test/HelloWorld.result.aterm	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1 @@
+Output("", "java.lang.ClassNotFoundException: HelloWorld\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:202)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:190)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:247)\n\tat org.strategoxt.spoofax.jasminxt.strategies.execute_java_0_1.invoke(execute_java_0_1.java:51)\n\tat org.strategoxt.lang.Strategy.invokeDynamic(Strategy.java:31)\n\tat org.strategoxt.lang.InteropSDefT.evaluate(InteropSDefT.java:194)\n\tat org.strategoxt.lang.InteropSDefT.evaluate(InteropSDefT.java:185)\n\tat org.strategoxt.lang.InteropSDefT$StrategyBody.evaluate(InteropSDefT.java:247)\n\tat org.strategoxt.lang.InteropSDefT$StrategyBody.eval(InteropSDefT.java:240)\n\tat org.spoofax.interpreter.stratego.Strategy.evaluate(Strategy.java:76)\n\tat org.spoofax.interpreter.core.Interpreter.evaluate(Interpreter.java:1
 06)\n\tat org.spoofax.interpreter.core.Interpreter.invoke(Interpreter.java:80)\n\tat org.strategoxt.HybridInterpreter.invoke(HybridInterpreter.java:379)\n\tat org.strategoxt.imp.debug.core.str.launching.DebuggableHybridInterpreter.invoke(DebuggableHybridInterpreter.java:149)\n\tat org.strategoxt.imp.runtime.Environment$2.invoke(Environment.java:210)\n\tat org.strategoxt.imp.runtime.services.StrategoObserver.invoke(StrategoObserver.java:690)\n\tat org.strategoxt.imp.runtime.services.StrategoObserver.invoke(StrategoObserver.java:658)\n\tat org.strategoxt.imp.runtime.services.StrategoBuilder.invokeObserver(StrategoBuilder.java:305)\n\tat org.strategoxt.imp.runtime.services.StrategoBuilder.execute(StrategoBuilder.java:185)\n\tat org.strategoxt.imp.runtime.services.StrategoBuilder.access$1(StrategoBuilder.java:170)\n\tat org.strategoxt.imp.runtime.services.StrategoBuilder$1.run(StrategoBuilder.java:157)\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\n")
\ No newline at end of file

Modified: jasmin-spoofax/trans/analysis/main.str
==============================================================================
--- jasmin-spoofax/trans/analysis/main.str	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/trans/analysis/main.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -13,7 +13,7 @@
 		
 strategies
 
-	analyse =  origin-track-forced(rename-all ; store-all) 
+	analyse = rename-all; store-all
 
 rules
 	

Modified: jasmin-spoofax/trans/analysis/names/check.str
==============================================================================
--- jasmin-spoofax/trans/analysis/names/check.str	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/trans/analysis/names/check.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -2,29 +2,25 @@
 
 imports
 	lib/environment
-
-imports
 	include/JasminXT
-	
-imports
-	analysis/names/namespaces
+	analysis/names/environments
 	
 rules // undeclared elements
 	
 	editor-error:
 		LabelRef(l) -> (l, $[Lable [l] is not declared.])
-		where not ( <env-has-key(|Labels())> l )
+		where not ( <is-declared(|Labels())> l )
 
 	
 rules // multiple declarations
 	
 	editor-error:
 		JBCLabel(l) -> (l, $[Multiple declarations for label [l].])
-		where not ( <env-lookup-unique(|Labels())> l )
+		where not ( <lookup-unique(|Labels())> l )
 	
 rules // unused declarations
 	
 	editor-warning: 
 		JBCLabel(l) -> (l, $[Label [l] is never used.])
-		where not ( <env-has-element(|Labels())> l )	
+		where not ( <is-referred(|Labels())> l )	
 	
\ No newline at end of file

Added: jasmin-spoofax/trans/analysis/names/environments.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/trans/analysis/names/environments.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,10 @@
+module analysis/names/environments
+
+signature constructors
+	
+	LabelNames: Namespace
+	
+	Classes: Env
+	Methods: ID -> Env	
+	Fields : ID -> Env	
+	Labels : Env

Modified: jasmin-spoofax/trans/analysis/names/map.str
==============================================================================
--- jasmin-spoofax/trans/analysis/names/map.str	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/trans/analysis/names/map.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -1,39 +1,41 @@
 module analysis/names/map
 
 imports
-	lib/environment
-	
-imports	
 	include/JasminXT
-	analysis/names/namespaces
+	lib/environment
+	lib/namespace
 	
+	analysis/names/environments
+		
 strategies
 	
 	store-all = topdown(try(store)) 
 
-rules // declarations
+rules // environments
 	
-	store : d at JBCClass(access, name) -> d where <store-current-class> name
-	
-	store : d at JBCField(access, name, descr, sig, init) -> d where <env-store-mapping(|Fields(<get-current-class>))> ((name, descr), d)
-	
-	store : d at JBCMethod(access, name, descr, stmts) -> d where <env-store-mapping(|Methods(<get-current-class>))> ((name, descr), d)
+	class-name = ?JBCFile(JBCHeader(_, _, JBCClass(_, <id>), _, _, _, _, _), _, _)
+	method-name = ?JBCMethod(_, _, <id>, _)
+		
+rules // declarations
+
+	store: d at JBCClass(_, name) -> d
+		 	
+	store : d at JBCField(access, name, JBCFieldDesc(type), sig, init) -> d
+		where
+			<store-declaration> (name, type)
 	
-	store : d at JBCLabel(label) -> d where <env-store-mapping(|Labels())> (label, d)
+	store : d at JBCMethod(access, name, JBCMethodDesc(ptypes, type), stmts) -> d
+		where 
+			<store-declaration> (name, (ptypes, type))
+			
+	store : d at JBCLabel(label) -> d
+		where 
+			<store-declaration(|Labels())> (label, d)
 	
 rules // references
 	
-	store : r at JBCFieldRef(cname, fname, fdescr) -> r where <env-store-element(|Fields(cname))> (fname, fdescr)
+	store : r at JBCFieldRef(cn, fn, fdescr) -> r where <store-reference(|Fields(cn))> fn
 	
-	store : r at JBCMethodRef(cname, mname, mdescr) -> r where <env-store-element(|Methods(cname))> (mname, mdescr)
+	store : r at JBCMethodRef(cn, mn, mdescr) -> r where <store-reference(|Methods(cn))> mn
 	
-	store : r at LabelRef(l) -> r where <env-store-element(|Labels())> l
-
-rules
-	
-	store-current-class : 
-		name -> name
-		where
-			<env-store-mapping(|Main())> ("current-class", name)
-			
-	get-current-class = <env-lookup-local(|Main())> "current-class"
\ No newline at end of file
+	store : r at LabelRef(label) -> r where <store-reference(|Labels())> label

Modified: jasmin-spoofax/trans/analysis/names/rename.str
==============================================================================
--- jasmin-spoofax/trans/analysis/names/rename.str	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/trans/analysis/names/rename.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -3,25 +3,42 @@
 imports 
 	lib/editor-common.generated
 	lib/namespace
+	lib/environment
 
-imports
 	include/JasminXT
-
-	analysis/names/namespaces
+	analysis/names/environments
 	
 strategies
 
-	rename-all = alltd(rename)
+	rename-all 		= alltd(rename)
+	rename-all-ref	= alltd(rename-ref)
 
 rules 
 	
-	rename: 
-		JBCMethod(access, name, descr, stmts) -> JBCMethod(access, name, descr, stmts')
-		where
-			new-scope(
-				<alltd(rename) ; alltd(rename-ref)> stmts => stmts'
-			)
+	rename: JBCFile(header, fields, methods) -> JBCFile(header, fields', methods')
+		where new-scope (
+			<rename-all> fields => fields' ;
+			<rename-all> methods => methods'
+		)
+ 			
+ 	rename: JBCField(access, name, descr, sig, val) -> JBCField(access, name', descr, sig, val)
+ 		where <annotate-env(field-env)> name => name'
+ 	
+	rename: JBCMethod(access, name, descr, stmts) -> JBCMethod(access, name', descr, stmts')
+		where <annotate-env(method-env)> name => name'
+		where new-scope(
+			<rename-all ; rename-all-ref> stmts => stmts'
+		)
 		
-	rename: JBCLabel(l) -> JBCLabel(<rename-declaration(|Labels())> l)	 
+	rename: JBCLabel(l) -> JBCLabel(<uid-declaration(|LabelNames())> l)	 
+	
+	rename-ref: LabelRef(l) -> LabelRef(<uid-reference(|LabelNames())> l)
+
+rules
+	
+	method-env = !Methods(<class-name>)
+	field-env  = !Fields(<class-name>)
 	
-	rename-ref: LabelRef(l) -> LabelRef(<rename-reference(|Labels())> l)
+	class-name = ?JBCFile(<class-name>, _, _)
+	class-name = ?JBCHeader(_, _, <class-name>, _, _, _, _, _)
+	class-name = ?JBCClass(_, <id>)
\ No newline at end of file

Modified: jasmin-spoofax/trans/editor/resolve.str
==============================================================================
--- jasmin-spoofax/trans/editor/resolve.str	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/trans/editor/resolve.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -2,12 +2,8 @@
 
 imports
 	lib/environment
-
-imports
 	include/JasminXT
-	
-imports
-	analysis/names/namespaces
+	analysis/names/environments
 		
 rules
 
@@ -18,7 +14,7 @@
 		
 rules
 	
-	resolve : JBCFieldRef(cname, fname, fdesc) -> <env-lookup(|Fields(cname))> (fname, fdesc)
-	resolve : JBCMethodRef(cname, mname, mdesc) -> <env-lookup(|Methods(cname))> (mname, mdesc)
+	resolve : JBCFieldRef(cname, fname, fdesc) -> <lookup-first(|Fields(cname))> (fname, fdesc)
+	resolve : JBCMethodRef(cname, mname, mdesc) -> <lookup-first(|Methods(cname))> (mname, mdesc)
 	
-	resolve : LabelRef(l) -> <env-lookup(|Labels())> l
+	resolve : LabelRef(l) -> <lookup-first(|Labels())> l

Added: jasmin-spoofax/trans/interpreter/arithmetics.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/trans/interpreter/arithmetics.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,24 @@
+module arithmetics
+
+imports
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+			
+	step(|state): IADD() -> <pop(|2) ; push(|r) ; next> state
+		where
+			<top(|2)> state => [Int(v1), Int(v2)] ;
+			<addS> (v2, v1) => r 
+
+	step(|state): ISUB() -> <pop(|2) ; push(|r) ; next> state
+		where
+			<top(|2)> state => [Int(v1), Int(v2)] ;
+			<subtS> (v2, v1) => r 
+		
+	step(|state): IMUL() -> <pop(|2) ; push(|r) ; next> state
+		where
+			<top(|2)> state => [Int(v1), Int(v2)] ;
+			<mulS> (v2, v1) => r 
+

Added: jasmin-spoofax/trans/interpreter/arrays.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/trans/interpreter/arrays.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,28 @@
+module arrays
+
+imports
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+		
+	step(|state): IALOAD() -> <pop(|2) ; push(|Int(v)) ; next> state
+		where
+			<top(|2)> state => [Int(i), Ref(r)] ;
+			<resolve(|r)> state => Array(Int(), vs) ;
+			<index> (<string-to-int> i, vs) => Int(v)
+	
+	step(|state): IASTORE() -> <pop(|3) ; update(|r, vs') ; next> state
+		where
+			<top(|2)> state => [Int(v), Int(i), Ref(r)] ;
+			<resolve(|r)> state => Array(Int(), vs) ;
+			<at-index(!Int(v))> (<string-to-int ; inc> i, vs) => vs'  
+			
+	step(|state): ARRAYLENGTH() -> <pop ; push(|Int(l)) ; next> state
+		where
+			<top> state => Ref(ar) ;
+			<resolve(|ar)> state => Array(_, vs) ;
+			<length ; int-to-string> vs => l
+
+	step(|state): NEWARRAY(IntName()) -> <alloc(|Array(Int(), [])) ; next> state
\ No newline at end of file

Added: jasmin-spoofax/trans/interpreter/constants.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/trans/interpreter/constants.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,14 @@
+module constants
+
+imports
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+			
+	step(|state): ICONST_0() -> <push(|Int("0")) ; next> state
+	step(|state): ICONST_1() -> <push(|Int("1")) ; next> state
+	step(|state): LDC(i) -> <push(|Int(i)) ; next> state
+	
+

Added: jasmin-spoofax/trans/interpreter/desugar.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/trans/interpreter/desugar.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,18 @@
+module interpreter/desugar
+
+imports
+	
+	include/JasminXT
+	
+rules
+	
+	desugar: ALOAD_0() -> ALOAD("0")
+	desugar: ALOAD_1() -> ALOAD("1")
+	desugar: ALOAD_2() -> ALOAD("2")
+	desugar: ALOAD_3() -> ALOAD("3")
+	
+	desugar: ILOAD_0() -> ILOAD("0")
+	desugar: ILOAD_1() -> ILOAD("1")
+	desugar: ILOAD_2() -> ILOAD("2")
+	desugar: ILOAD_3() -> ILOAD("3")
+	
\ No newline at end of file

Added: jasmin-spoofax/trans/interpreter/jumps.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/trans/interpreter/jumps.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,133 @@
+module interpreter/jumps
+
+imports 
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+	
+	step(|state): JBCLabel(_) -> <next> state
+			
+	step(|state): GOTO(LabelRef(l)) -> <goto(|l)> state
+	
+rules // comparison with 0
+	
+	step(|state): IFEQ(LabelRef(l)) -> state'
+		where
+			<top> state => Int(v) ;
+			<eq> (v, "0") 
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+			
+	step(|state): IFNE(LabelRef(l)) -> state'
+		where
+			<top> state => Int(v) ;
+			<not(eq)> (v, "0")
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+
+	step(|state): IFGE(LabelRef(l)) -> state'
+		where
+			<top> state => Int(v) ;
+			<geqS> (v, "0") 
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+			
+	step(|state): IFGT(LabelRef(l)) -> state'
+		where
+			<top> state => Int(v) ;
+			<gtS> (v, "0")
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+	
+	step(|state): IFLE(LabelRef(l)) -> state'
+		where
+			<top> state => Int(v) ;
+			<leqS> (v, "0") 
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+			
+	step(|state): IFLT(LabelRef(l)) -> state'
+		where
+			<top> state => Int(v) ;
+			<ltS> (v, "0")
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+
+rules // comparison with null
+	
+	step(|state): IFNULL(LabelRef(l)) -> state'
+		where
+			<top> state => Ref(r) ;
+			<eq> (r, NULL()) 
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+			
+	step(|state): IFNONNULL(LabelRef(l)) -> state'
+		where
+			<top> state => Int(r) ;
+			<not(eq)> (r, NULL())
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+	
+rules // integer comparison
+	
+	step(|state): IF_ICMPEQ(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Int(v1), Int(v2)) ;
+			<eq> (v2, v1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+			
+	step(|state): IF_ICMPNE(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Int(v1), Int(v2)) ;
+			<not(eq)> (v2, v1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+			
+	step(|state): IF_ICMPGE(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Int(v1), Int(v2)) ;
+			<geqS> (v2, v1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+			
+	step(|state): IF_ICMPGT(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Int(v1), Int(v2)) ;
+			<gtS> (v2, v1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+	
+	step(|state): IF_ICMPLE(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Int(v1), Int(v2)) ;
+			<leqS> (v2, v1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+			
+	step(|state): IF_ICMPLT(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Int(v1), Int(v2)) ;
+			<ltS> (v2, v1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+	
+rules // reference comparison
+	
+	step(|state): IF_ACMPEQ(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Ref(r1), Ref(r2)) ;
+			<eq> (r2, r1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+			
+	step(|state): IF_ACMPNE(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Ref(r1), Ref(r2)) ;
+			<not(eq)> (r2, r1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+			

Added: jasmin-spoofax/trans/interpreter/locals.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/trans/interpreter/locals.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,25 @@
+module interpreter/locals
+
+imports
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+	
+	step(|state): ALOAD(n) -> <push(|Ref(r)) ; next> state
+		where
+			<load(|n)> state => Ref(r) 
+			
+	step(|state): ILOAD(n) -> <push(|Int(v)) ; next> state
+		where
+			<load(|n)> state => Int(v)
+			
+	step(|state): ISTORE(n) -> <pop ; store(|n, Int(v)) ; next> state
+		where
+			<top> state => Int(v)
+
+	step(|state): ASTORE(n) -> <pop ; store(|n, Ref(r)) ; next> state
+		where
+			<top> state => Ref(r)
+

Added: jasmin-spoofax/trans/interpreter/methods.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/trans/interpreter/methods.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,18 @@
+module interpreter/methods
+
+imports 
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+	
+	step(|state): RETURN() -> <drop-frame ; next> state
+	
+	step(|state): IRETURN() -> <pop ; drop-frame ; push(|Int(v)) ; next> state
+		where
+			<top> state => Int(v)
+			
+	step(|state): ARETURN() -> <pop ; drop-frame ; push(|Ref(r)) ; next> state
+		where
+			<top> state => Ref(r)
\ No newline at end of file

Added: jasmin-spoofax/trans/interpreter/misc.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/trans/interpreter/misc.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,21 @@
+module interpreter/misc
+
+imports
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+
+	step(|state): NOP() -> <next> state
+		
+	step(|state): DUP() -> <push(|top) ; next> state
+		where
+			<top> state => top
+	
+	step(|state): SWAP() -> <pop(|2) ; push(|v1) ; push(|v2) ; next> state
+		where
+			<top(|2)> state => [v1, v2]
+			
+	step(|state): POP() -> <pop ; next> state
+	
\ No newline at end of file

Added: jasmin-spoofax/trans/interpreter/objects.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/trans/interpreter/objects.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,49 @@
+module interpreter/objects
+
+imports
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+	
+	step(|state): NEW(cn) -> <alloc(|o) ; next> state
+		where
+			<init-object> cn => o
+
+	step(|state): GETFIELD(JBCFieldRef(_, fn, _)) -> <pop; push(|v) ; next> state
+		where
+			<top> state => Ref(r) ;
+			<resolve(|r)> state => Object(_, fields) ;
+			<lookup> (fn, fields) => v
+
+	step(|state): PUTFIELD(JBCFieldRef(_, fn, _)) -> <pop(|2); update(|r, Object(cn, fields')) ; next> state
+		where
+			<top(|2)> state => [v, Ref(r)] ;
+			<resolve(|r)> state => Object(cn, fields) ;
+			<update-key-value(|r, v)> fields => fields'
+
+rules
+	
+	load-class-file = fail
+	
+	init-object: "java/lang/Object" -> Object("java/lang/Object", [])
+	init-object: cn -> Object(cn, slots)
+		where
+			<load-class-file> cn => JBCFile(JBCHeader(_, _, JBCClass(_, cn), JBCSuper(sn), _, _, _, _), fs, _) ;
+			<init-object> sn => Object(_, iss) ;
+			<map(init-slot)> fs => oss ;
+			<conc> (iss, oss) => slots 
+			
+	init-slot: JBCField(_, fn, JBCFieldDesc(t), _, v) -> (fn, <init-value> (t, v))
+	init-slot: JBCExtField(_, fn, JBCFieldDesc(t), v, _) -> (fn, <init-value> (t, v))
+	
+	init-value: (Int(), None()) -> Int("0")
+	init-value: (Int(), v) -> Int(v) where <not(eq)> (None(), v)
+	
+	init-value: (Boolean(), None()) -> Int("0")
+	init-value: (Boolean(), v) -> Int(v) where <not(eq)> (None(), v)
+	
+	init-value: (Array(_), None()) -> Ref(NULL())
+	init-value: (Reference(_), None()) -> Ref(NULL())
+	
\ No newline at end of file

Added: jasmin-spoofax/trans/interpreter/state.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/trans/interpreter/state.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -0,0 +1,61 @@
+module interpreter/state
+
+imports include/JasminXT
+
+signature constructors
+	
+	JBCState	: List(Frame) * Heap -> State	
+	
+	JBCFrame	: MethodRef * List(Instruction) * PC * Stack * Locals -> Frame
+				: Int -> PC
+	
+	JBCStack	: List(Value) -> Stack
+	Int			: String -> Value
+	Ref			: RefValue -> Value
+	NULL		: RefValue
+				: String -> RefValue
+				
+	JBCLocals	: List(Value) -> Locals
+				
+	JBCHeap		: List(HeapEntry) -> Heap
+				: String * HeapElement -> HeapEntry
+				
+	Array		: ComponentType * List(Value) -> HeapElement
+	Object		: ClassName * List(Slot) -> HeapElement
+				: FieldName * Value -> Slot
+							
+strategies // manipulate PC in top-most frame
+	
+	next = JBCState([JBCFrame(id, id, inc, id, id)|id], id)
+	
+	goto(|l) = JBCState([JBCFrame(id, ?is, <getfirst(?(<id>,l))> is, id, id)|id], id)
+	
+strategies // manipulate stack in top-most frame 
+		
+	push(|v) = JBCState([JBCFrame(id, id, id, JBCStack(![v|<id>]), id)|id], id)
+
+	pop(|n) = JBCState([JBCFrame(id, id, id, JBCStack(drop(|n)), id)|id], id)
+
+	pop = pop(|1)
+	
+	top(|n) = ?JBCState([JBCFrame(_, _, _, JBCStack(<take(|n)>), _)|_], _)
+	
+	top = top(|1)
+
+strategies // manipulate local variables in top-most frame
+		
+	load(|n) = ?JBCState([JBCFrame(_, _, _, _, JBCLocals(<at-index(id|<string-to-int> n)>))|_], _) 
+	store(|n, v) = JBCState([JBCFrame(id, id, id, JBCStack(at-index(!v|<string-to-int> n)), id)|id], id)
+	
+strategies // manipulate heap
+	
+	resolve(|r) = ?JBCState(_, JBCHeap(<id>)) ; <lookup> (r, <id>)
+	alloc(|v) = where(<newname> "ref" => r) ; JBCState([JBCFrame(id, id, id, JBCStack(![Ref(r)|<id>]), id)|id], JBCHeap(![(r,v)|<id>]))
+	update(|r, v) = JBCState(id, JBCHeap(update-key-value(|r, v)))
+	
+	update-key-value(|r, v) = fetch(?(r, _) ; !(r, v))
+	
+strategies // manipulate frames
+	
+	drop-frame = not(top) ; JBCState(Tl, id)
+	
\ No newline at end of file

Modified: jasmin-spoofax/trans/jasminxt.str
==============================================================================
--- jasmin-spoofax/trans/jasminxt.str	Tue Dec  6 20:02:46 2011	(r23690)
+++ jasmin-spoofax/trans/jasminxt.str	Wed Dec  7 08:27:31 2011	(r23691)
@@ -10,24 +10,19 @@
 	analysis/main
 	editor/resolve
 	
+strategies
+	
+	external execute-java(|path)
+	external execute-jasmin(|)
+	
 rules // Main editor interface (defined by editor/JasminXT-Builders and -References.esv)
-  
-  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
-  // each a list of (term, message) tuples or simply (message) terms.
-  editor-analyse:
-    (ast, path, project-path) -> (ast, errors, warnings, notes)
-    with
-      editor-init;
-      errors   := <collect-all(fail, conc)> ast;
-      warnings := <collect-all(fail, conc)> ast;
-      notes    := <collect-all(fail, conc)> ast
-  
+    
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       filename := <guarantee-extension(|"aterm")> path;
-      result   := selected // we just return the input term
+      result   := selected 
       
   // Generates the Java class file
   generate-class:
@@ -40,8 +35,10 @@
       <refresh-workspace-file> cfname
       
   execute-class:
-  	(selected, position, ast, path, project-path) -> None()
+  	(selected, position, ast, path, project-path) -> (filename, result)
     with
-      cname := <base-filename ; remove-extension> path;
-      parentdir := <dirname> path ;
-      <try(call)> ("java", ["-cp", parentdir, cname])
\ No newline at end of file
+      filename := <guarantee-extension(|"result.aterm")> path
+    with
+      cname := <base-filename ; remove-extension> path ;
+      cpath := <concat-strings> [project-path, "/", <dirname> path] ;
+      <execute-java(|cpath)> cname => result
\ No newline at end of file

From g.h.wachsmuth at tudelft.nl  Wed Dec  7 09:27:59 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Wed, 07 Dec 2011 08:27:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23692 -
	jasmin-spoofax/lib
Message-ID: <20111207082759.946422B801E@mx2.tudelft.nl>

Author: GuidoWachsmuth
Date: Wed Dec  7 08:27:59 2011
New Revision: 23692
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23692&sc=1

Log:


Added:
   jasmin-spoofax/lib/environment.str
   jasmin-spoofax/lib/namespace.str

Added: jasmin-spoofax/lib/environment.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/lib/environment.str	Wed Dec  7 08:27:59 2011	(r23692)
@@ -0,0 +1,254 @@
+module lib/environment
+
+imports
+	lib/namespace
+
+signature constructors
+	env: Env -> Annotation
+	StandardEnv: Env
+	
+rules // annotate env
+	
+	annotate-env(s) : x -> <set-annos> (x, [env(e)|<get-annos> x]) where project-scope(s) => e
+
+	get-annotated-env = (get-annos ; fetch-elem(?env(<id>))) <+ !StandardEnv()
+	
+	strip-annotated-env = !(<id>, <get-annos ; filter(not(?env(_)))>) ; set-annos
+	
+rules // store declarations and references
+	
+	/**
+	* stores a mapping from a name to a declaration
+	* can distinguish different tables
+	* remembers the mapping by storing a dynamic rule
+	*
+	* @param env
+	* @type (a, b) -> b
+	*/
+	store-declaration(|env) :
+		(x, d) -> d
+		where <strip-annotated-env> x => key
+		where rules( Declared:+ (env, key) -> d )
+		
+	store-declaration = store-declaration(|<Fst ; get-annotated-env>)
+	
+	/**
+	* stores the usage of a reference
+	* can distinguish different namespaces
+	* remembers the reference by storing a dynamic rule
+	*
+	* @param env
+	* @type a -> a
+	*/
+	store-reference(|env) = where (strip-annotated-env => key ; rules ( Referred:+ (env, key) -> key ))
+
+	store-reference = store-reference(|<get-annotated-env>)
+	
+rules // include environments
+	
+	/**
+	*
+	* example: 
+	*     store: Class(c, Parent(p), _, _) -> <id> 
+	*         where 
+	*             <store-declaration(|Classes())> c ; 
+	*             <include-env(|Fields(c))> Fields(p) ;
+	*             <include-env(|Methods(c))> Methods(p) 
+	*/
+	include-env(|env) : 
+		included -> included
+		where 
+			<topdown(strip-annotated-env)> env => env' ;
+			<topdown(strip-annotated-env)> included => included' 
+		where rules (
+			IncludedBy:+ included' -> env'
+			Including:+ env' -> included'
+		)
+				
+strategies // access inclusions
+	
+	get-included-envs  = get-inclusions(bagof-Including)
+	get-including-envs = get-inclusions(bagof-IncludedBy)
+	
+	get-inclusions(s) = ![<id>] ; get-inclusions(s|[]) ; reverse
+	
+	get-inclusions(s|temps): [] -> temps
+	 
+	get-inclusions(s|temps): 
+		[env|envs] -> <get-inclusions(s|temps)> envs
+		where <elem> (env, temps)
+		
+	get-inclusions(s|temps):  
+		[env|envs] -> <get-inclusions(s|[env|temps])> envs'
+		where not (<elem> (env, temps))
+		where <conc> (<s> env, envs) => envs'
+		
+strategies // access declarations
+	
+	/**
+	* maps a name to its declarations
+	* can distinguish different environments
+	* remembers the mapping by calling a dynamic rule
+	*
+	* @param env
+	* 
+	* @type a -> List(b)
+	*/
+	lookup-all-local(|env): key -> <bagof-Declared> (env, <strip-annotated-env> key) 
+	
+	lookup-all-local = lookup-all-local(|<get-annotated-env>)
+
+	/**
+	* maps a name to its declarations
+	* can distinguish different environments
+	* remembers the mapping by calling a dynamic rule
+	*
+	* @param env
+	* 
+	* @type a -> List(b)
+	*/
+	
+	lookup-all(|env): key -> <get-included-envs ; mapconcat(lookup-all-in-env(|key))> env
+	
+	lookup-all-in-env(|key): env -> <lookup-all-local(|env)> key
+	
+	lookup-all = lookup-all(|<get-annotated-env>)
+	
+	/**
+	* succeeds if the current term can be mapped to a declaration
+	* can distinguish different environments
+	* 
+	* @param namespace
+	* 
+	* @type a -> a
+	*/
+	is-declared-local(|env) = where(lookup-all-local(|env) ; ?[_|_])
+
+	is-declared-local = is-declared-local(|<get-annotated-env>)
+
+	/**
+	* succeeds if the current term can be mapped to a declaration
+	* can distinguish different environments
+	* 
+	* @param namespace
+	* 
+	* @type a -> a
+	*/
+	is-declared(|env) = where(lookup-all(|env) ; ?[_|_])
+
+	is-declared = is-declared(|<get-annotated-env>)
+		
+	/**
+	* maps a name to its only declaration
+	* can distinguish different environments
+	* 
+	* @param env
+	*/
+	lookup-unique-local(|env) = lookup-all-local(|env) ; ?[<id>]
+
+	lookup-unique-local = lookup-unique-local(|<get-annotated-env>)
+	
+	/**
+	* maps a name to its only declaration
+	* can distinguish different environments
+	* 
+	* @param env
+	*/
+	lookup-unique(|env) = lookup-all(|env) ; ?[<id>]
+
+	lookup-unique = lookup-unique(|<get-annotated-env>)
+	
+	/**
+	* maps a name to its first declaration
+	* can distinguish different environments
+	* 
+	* @param env
+	*/
+	lookup-first(|env) = lookup-first(id|env) 
+	
+	lookup-first = lookup-first(|<get-annotated-env>)
+
+	/**
+	* maps a name to its first declaration for which strategy s holds
+	* can distinguish different environments
+	* 
+	* @param s: b -> c
+	* @param env
+	* 
+	* @type a -> b
+	*/
+	lookup-first(s|env) = project-first(where(s)|env)
+	
+	/**
+	* maps a name to its declarations for which strategy s holds
+	* can distinguish different environments
+	* 
+	* @param s: b -> c
+	* @param env
+	* 
+	* @type a -> List(b)
+	*/
+	lookup-all(s|env) = project-all(where(s)|env)
+
+strategies // project declarations
+	
+	/**
+	* maps a name to the first projection of its declarations
+	* can distinguish different environments
+	* 
+	* @param s: b -> c
+	* @param env
+	* 
+	* @type a -> c
+	*/
+	project-first(s|env) = lookup-all(|env) ; fetch-elem(s) 
+
+	project-first(s) = project-first(s|<get-annotated-env>)
+
+	/**
+	* maps a name to the projections of its declarations
+	* can distinguish different environments
+	* 
+	* @param s: b -> c
+	* @param env
+	* 
+	* @type a -> List(c)
+	*/
+	project-all(s|env) = lookup-all(|env) ; filter(s) 
+
+	project-all(s) = project-all(s|<get-annotated-env>)
+	
+strategies // access all declarations
+	
+	local-keys: env -> <all-keys-Declared ; filter(?(env, <id>))>
+	
+	all-keys = get-included-envs ; foldr([], union, local-keys) 
+	
+	local-declarations: env -> <local-keys ; mapconcat(lookup-all-local(|env))> env
+		
+	all-declarations: env -> <all-keys ; mapconcat(lookup-all(|env))> env
+
+	local-entries: env -> <local-keys ; map(!(<id>, <lookup-all-local(|env)>))> env
+	
+	all-entries: env -> <all-keys ; map(!(<id>, <lookup-all(|env)>))> env
+			
+strategies // access references
+
+	lookup-all-references-local(|env): key -> <bagof-Referred> (env, <strip-annotated-env> key)
+	
+	lookup-all-references-local = lookup-all-references-local(|<get-annotated-env>)
+	
+	lookup-all-references(|env): key -> <get-including-envs ; mapconcat(lookup-all-refs-in-env(|key))> env
+	
+	lookup-all-references = lookup-all-references(|<get-annotated-env>)
+	
+	lookup-all-refs-in-env(|key): env -> <lookup-all-references-local(|env)> key
+	
+	is-referred-local(|env) = lookup-all-references-local(|env) ; ?[_|_]
+	
+	is-referred-local = is-referred-local(|<get-annotated-env>)
+	
+	is-referred(|env) = lookup-all-references(|env) ; ?[_|_]
+
+	is-referred = is-referred(|<get-annotated-env>)
+	
\ No newline at end of file

Added: jasmin-spoofax/lib/namespace.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ jasmin-spoofax/lib/namespace.str	Wed Dec  7 08:27:59 2011	(r23692)
@@ -0,0 +1,83 @@
+module lib/namespace
+
+signature constructors
+	uid: UID -> Annotation
+	   : String -> UID
+	
+rules // scoped renaming
+	
+	/**
+	* executes the renaming strategy s in a new scope
+	* 
+	* declarations inside the new scope will hide existing declarations outside the new scope
+	* multiple declarations with the same name inside the new scope will be renamed to the same name
+	*
+	* @param renaming strategy s: a -> b
+	* @type a -> b
+	*/
+	new-scope(s) :
+		x -> y
+		where
+			<newname> x => scope ;
+			{| ns-Renamed, ns-RenamedInScope, ns-CurrentScope, ns-Scope:
+				rules (
+					ns-CurrentScope: _ -> scope
+					ns-Scope:+ x -> scope
+				) ;
+				<s> x => y
+			|} 
+			
+	/**
+	* annotates the current term with a fresh name
+	* can distinguish different namespaces
+	* remembers the renaming by storing two dynamic rules
+	* 
+	* multiple calls on the same term inside the same scope will give identical results
+	* calls inside a new scope will hide the results of calls to the same term from outer scopes
+	*
+	* @param namespace 
+	* @type a -> a
+	*/
+	uid-declaration(|namespace) : 
+		x -> x'
+		where 
+			ns-CurrentScope => scope ;
+			(
+				<ns-RenamedInScope> (namespace, scope, x)  <+
+				<set-annos> (x, [uid(<newname> "uid")|<get-annos> x])
+			) => x'
+		where rules(
+			ns-RenamedInScope: (namespace, scope, x) -> x' 
+			ns-Renamed: (namespace, x) -> x'
+		)
+	
+	/**
+	* annotates the current term with a new name
+	* succeeds only if rename-declaration was called before on the same term
+	* will use the same name as rename-declaration (by calling the dynamic rule stored by rename-declaration)
+	*
+	* @param namespace 
+	* @type a -> b
+	*/
+	uid-reference(|namespace) :
+		x -> x'
+		where
+			<ns-Renamed> (namespace, x) => x'
+	
+strategies // access scopes
+	
+	get-scopes = all-keys-ns-Scope
+	
+	get-scopes(s) = get-scopes ; filter(where(s))
+	
+	get-scope(s) = get-scopes ; fetch-elem(where(s))
+	
+	project-scopes(s) = get-scopes ; filter(s)
+	
+	project-scope(s) = get-scopes ; fetch-elem(s)
+	
+	in-scope(s) = where(get-scope(s))
+	
+strategies	
+	
+	get-declarations: namespace -> <all-keys-ns-Renamed ; filter(?(namespace, _) ; ns-Renamed)>

From g.h.wachsmuth at tudelft.nl  Wed Dec  7 09:28:42 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Wed, 07 Dec 2011 08:28:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23693 -
	jasmin-spoofax/test
Message-ID: <20111207082842.129B4CC043@mx4.tudelft.nl>

Author: GuidoWachsmuth
Date: Wed Dec  7 08:28:41 2011
New Revision: 23693
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23693&sc=1

Log:


Deleted:
   jasmin-spoofax/test/HelloWorld.result.aterm

From L.C.L.Kats at tudelft.nl  Wed Dec  7 12:48:02 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 07 Dec 2011 11:48:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23694 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20111207114802.A9ECD108C034@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Dec  7 11:48:02 2011
New Revision: 23694
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23694&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Wed Dec  7 08:28:41 2011	(r23693)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Wed Dec  7 11:48:02 2011	(r23694)
@@ -285,7 +285,7 @@
     SingleAtom(AtomCharacter(Quoted(s))) -> s
   
   is-parse-only-test =
-    SuccessParsing + FailsParsing + ?pattern(_)
+    SuccessParsing + FailsParsing + ?pattern(_) + ?ParseOutput(_)
 
   grab-messages:
     (errors, warnings, notes) -> <write-to-string> // TODO: make nice string?

From g.h.wachsmuth at tudelft.nl  Wed Dec  7 13:32:52 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Wed, 07 Dec 2011 12:32:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23695 - in
	jasmin-spoofax: syntax/lexical test trans trans/analysis
	trans/analysis/names trans/editor
Message-ID: <20111207123252.E6EB17F8006@mx1.tudelft.nl>

Author: GuidoWachsmuth
Date: Wed Dec  7 12:32:52 2011
New Revision: 23695
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23695&sc=1

Log:


Deleted:
   jasmin-spoofax/trans/analysis/names/environments.str
Modified:
   jasmin-spoofax/syntax/lexical/JasminXT-Whitespace.sdf
   jasmin-spoofax/test/HelloWorld.j
   jasmin-spoofax/test/VerifyTest1.j
   jasmin-spoofax/trans/analysis/main.str
   jasmin-spoofax/trans/analysis/names/check.str
   jasmin-spoofax/trans/analysis/names/map.str
   jasmin-spoofax/trans/analysis/names/rename.str
   jasmin-spoofax/trans/editor/resolve.str
   jasmin-spoofax/trans/jasminxt.str

Modified: jasmin-spoofax/syntax/lexical/JasminXT-Whitespace.sdf
==============================================================================
--- jasmin-spoofax/syntax/lexical/JasminXT-Whitespace.sdf	Wed Dec  7 11:48:02 2011	(r23694)
+++ jasmin-spoofax/syntax/lexical/JasminXT-Whitespace.sdf	Wed Dec  7 12:32:52 2011	(r23695)
@@ -4,21 +4,15 @@
 
 	lexical syntax
   
-		[\ \t] 	-> LAYOUT
-		SEP 	-> LAYOUT
-    
-		( [\n\r] | Comment )+ 	-> SEP
-    
-		";" [\n\r] 							-> Comment
-		";" [\ \t] ~[\n\r]* ([\n\r] | EOF) 	-> Comment
+		[\ \t\n\r] 	-> LAYOUT
+		";" [\n\r] 							-> LAYOUT
+		";" [\ \t] ~[\n\r]* ([\n\r] | EOF) 	-> LAYOUT
     
 		-> EOF
   
 	lexical restrictions
     
 		EOF -/- ~[]
-		SEP -/- [\;].[\ \t]
-		SEP -/- [\;].[\n\r]
  
 	context-free restrictions
   

Modified: jasmin-spoofax/test/HelloWorld.j
==============================================================================
--- jasmin-spoofax/test/HelloWorld.j	Wed Dec  7 11:48:02 2011	(r23694)
+++ jasmin-spoofax/test/HelloWorld.j	Wed Dec  7 12:32:52 2011	(r23695)
@@ -1,5 +1,5 @@
 .class public HelloWorld
-    .super java/lang/Object
+.super java/lang/Object
 
     ;
     ; standard initializer (calls java.lang.Object's initializer)

Modified: jasmin-spoofax/test/VerifyTest1.j
==============================================================================
--- jasmin-spoofax/test/VerifyTest1.j	Wed Dec  7 11:48:02 2011	(r23694)
+++ jasmin-spoofax/test/VerifyTest1.j	Wed Dec  7 12:32:52 2011	(r23695)
@@ -30,6 +30,8 @@
 
 .class public examples/VerifyTest1
 .super java/lang/Object
+
+.field public f I
 
 .method public <init>()V
    aload_0

Modified: jasmin-spoofax/trans/analysis/main.str
==============================================================================
--- jasmin-spoofax/trans/analysis/main.str	Wed Dec  7 11:48:02 2011	(r23694)
+++ jasmin-spoofax/trans/analysis/main.str	Wed Dec  7 12:32:52 2011	(r23695)
@@ -15,15 +15,19 @@
 
 	analyse = rename-all; store-all
 
-rules
+	editor-note = fail	
 	
-	editor-analyse:
-		(ast, path, project-path) -> (ast', errors, warnings, notes)
-		with
-			editor-init;
-			<analyse> ast => ast';
-			<collect-all(editor-error, conc)> ast' 		=> errors;
-			<collect-all(editor-warning, conc)> ast' 	=> warnings;
-			<collect-all(editor-note, conc)> ast'		=> notes
-		
-	editor-note = fail
\ No newline at end of file
+rules // projections
+
+	class-name = ?JBCFile(<class-name>, _, _)
+	class-name = ?JBCHeader(_, _, <class-name>, _, _, _, _, _)
+	class-name = ?JBCClass(_, <id>)	
+	
+signature constructors
+	
+	LabelNames: Namespace
+	
+	Classes: Env
+	Methods: ID -> Env	
+	Fields : ID -> Env	
+	Labels : Env

Modified: jasmin-spoofax/trans/analysis/names/check.str
==============================================================================
--- jasmin-spoofax/trans/analysis/names/check.str	Wed Dec  7 11:48:02 2011	(r23694)
+++ jasmin-spoofax/trans/analysis/names/check.str	Wed Dec  7 12:32:52 2011	(r23695)
@@ -3,7 +3,7 @@
 imports
 	lib/environment
 	include/JasminXT
-	analysis/names/environments
+	analysis/main
 	
 rules // undeclared elements
 	

Modified: jasmin-spoofax/trans/analysis/names/map.str
==============================================================================
--- jasmin-spoofax/trans/analysis/names/map.str	Wed Dec  7 11:48:02 2011	(r23694)
+++ jasmin-spoofax/trans/analysis/names/map.str	Wed Dec  7 12:32:52 2011	(r23695)
@@ -1,21 +1,16 @@
 module analysis/names/map
 
 imports
-	include/JasminXT
 	lib/environment
 	lib/namespace
+	include/JasminXT
 	
-	analysis/names/environments
+	analysis/main
 		
 strategies
 	
 	store-all = topdown(try(store)) 
 
-rules // environments
-	
-	class-name = ?JBCFile(JBCHeader(_, _, JBCClass(_, <id>), _, _, _, _, _), _, _)
-	method-name = ?JBCMethod(_, _, <id>, _)
-		
 rules // declarations
 
 	store: d at JBCClass(_, name) -> d

Modified: jasmin-spoofax/trans/analysis/names/rename.str
==============================================================================
--- jasmin-spoofax/trans/analysis/names/rename.str	Wed Dec  7 11:48:02 2011	(r23694)
+++ jasmin-spoofax/trans/analysis/names/rename.str	Wed Dec  7 12:32:52 2011	(r23695)
@@ -6,7 +6,7 @@
 	lib/environment
 
 	include/JasminXT
-	analysis/names/environments
+	analysis/main
 	
 strategies
 
@@ -38,7 +38,3 @@
 	
 	method-env = !Methods(<class-name>)
 	field-env  = !Fields(<class-name>)
-	
-	class-name = ?JBCFile(<class-name>, _, _)
-	class-name = ?JBCHeader(_, _, <class-name>, _, _, _, _, _)
-	class-name = ?JBCClass(_, <id>)
\ No newline at end of file

Modified: jasmin-spoofax/trans/editor/resolve.str
==============================================================================
--- jasmin-spoofax/trans/editor/resolve.str	Wed Dec  7 11:48:02 2011	(r23694)
+++ jasmin-spoofax/trans/editor/resolve.str	Wed Dec  7 12:32:52 2011	(r23695)
@@ -3,7 +3,7 @@
 imports
 	lib/environment
 	include/JasminXT
-	analysis/names/environments
+	analysis/main
 		
 rules
 

Modified: jasmin-spoofax/trans/jasminxt.str
==============================================================================
--- jasmin-spoofax/trans/jasminxt.str	Wed Dec  7 11:48:02 2011	(r23694)
+++ jasmin-spoofax/trans/jasminxt.str	Wed Dec  7 12:32:52 2011	(r23695)
@@ -3,11 +3,10 @@
 imports
 	lib/editor-common.generated
 
-imports
 	include/JasminXT
 
-imports
 	analysis/main
+	analysis/names/check
 	editor/resolve
 	
 strategies
@@ -16,29 +15,38 @@
 	external execute-jasmin(|)
 	
 rules // Main editor interface (defined by editor/JasminXT-Builders and -References.esv)
-    
-  // Prints the abstract syntax ATerm of a selection.
-  generate-aterm:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"aterm")> path;
-      result   := selected 
-      
-  // Generates the Java class file
-  generate-class:
-    (selected, position, ast, path, project-path) -> None()
-    with
-      parentdir := <dirname> path ;
-      <try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], path, "-d", parentdir])
-    where
-      cfname := <guarantee-extension(|"class")> path ;
-      <refresh-workspace-file> cfname
-      
-  execute-class:
-  	(selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"result.aterm")> path
-    with
-      cname := <base-filename ; remove-extension> path ;
-      cpath := <concat-strings> [project-path, "/", <dirname> path] ;
-      <execute-java(|cpath)> cname => result
\ No newline at end of file
+ 
+	editor-analyse:
+		(ast, path, project-path) -> (ast, [], [], [])//(ast', errors, warnings, notes)
+		// with
+		// 	editor-init;
+		// 	<analyse> ast => ast';
+		// 	<collect-all(editor-error, conc)> ast' 		=> errors;
+		// 	<collect-all(editor-warning, conc)> ast' 	=> warnings;
+		// 	<collect-all(editor-note, conc)> ast'		=> notes
+	 
+	// Prints the abstract syntax ATerm of a selection.
+	generate-aterm:
+		(selected, position, ast, path, project-path) -> (filename, result)
+		with
+			filename := <guarantee-extension(|"aterm")> path;
+			result	 := selected 
+			
+	// Generates the Java class file
+	generate-class:
+		(selected, position, ast, path, project-path) -> None()
+		with
+			parentdir := <dirname> path ;
+			<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], path])
+		where
+			cfname := <concat-strings ; guarantee-extension(|"class")> [project-path, "/", <dirname> path, "/", <class-name> ast] ;
+			<refresh-workspace-file> cfname
+			
+	execute-class:
+		(selected, position, ast, path, project-path) -> (filename, result)
+		with
+			filename := <guarantee-extension(|"result.aterm")> path
+		with
+			cname := <class-name ; string-replace(|"/",".")> ast ;
+			cpath := <concat-strings> [project-path, "/", <dirname> path] ;
+			<execute-java(|cpath)> cname => result
\ No newline at end of file

From karltk at strategoxt.org  Wed Dec  7 13:36:35 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 12:36:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23696 -
	spoofax-experimental/frontends spoofax/trunk/spoofax/frontends
Message-ID: <20111207123635.E1C202B8034@mx2.tudelft.nl>

Author: karltk
Date: Wed Dec  7 12:36:35 2011
New Revision: 23696
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23696&sc=1

Log:
Moving away old cruft.

Added:
   spoofax-experimental/frontends/   (props changed)
      - copied from r23695, spoofax/trunk/spoofax/frontends/
Deleted:
   spoofax/trunk/spoofax/frontends/

From g.h.wachsmuth at tudelft.nl  Wed Dec  7 13:37:02 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Wed, 07 Dec 2011 12:37:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23697 - jasmin-spoofax
Message-ID: <20111207123702.2A414CC156@mx4.tudelft.nl>

Author: GuidoWachsmuth
Date: Wed Dec  7 12:37:01 2011
New Revision: 23697
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23697&sc=1

Log:
moved to the contribution directory

Deleted:
   jasmin-spoofax/

From karltk at strategoxt.org  Wed Dec  7 13:37:09 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 12:37:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23698 -
	spoofax-experimental/asm spoofax/trunk/spoofax/protos/asm
Message-ID: <20111207123709.04274108C03E@mx3.tudelft.nl>

Author: karltk
Date: Wed Dec  7 12:37:08 2011
New Revision: 23698
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23698&sc=1

Log:
Moving away old cruft.

Added:
   spoofax-experimental/asm/   (props changed)
      - copied from r23697, spoofax/trunk/spoofax/protos/asm/
Deleted:
   spoofax/trunk/spoofax/protos/asm/

From karltk at strategoxt.org  Wed Dec  7 13:37:53 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 12:37:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23699 -
	spoofax-experimental/rcl spoofax/trunk/spoofax/protos/rcl
Message-ID: <20111207123753.C840E108C03E@mx3.tudelft.nl>

Author: karltk
Date: Wed Dec  7 12:37:53 2011
New Revision: 23699
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23699&sc=1

Log:
Moving away old cruft

Added:
   spoofax-experimental/rcl/   (props changed)
      - copied from r23698, spoofax/trunk/spoofax/protos/rcl/
Deleted:
   spoofax/trunk/spoofax/protos/rcl/

From karltk at strategoxt.org  Wed Dec  7 13:37:56 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 12:37:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23700 -
	spoofax-experimental/metascan spoofax/trunk/spoofax/protos/metascan
Message-ID: <20111207123756.DEB3D108C006@mx3.tudelft.nl>

Author: karltk
Date: Wed Dec  7 12:37:56 2011
New Revision: 23700
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23700&sc=1

Log:
Moving away old cruft

Added:
   spoofax-experimental/metascan/   (props changed)
      - copied from r23699, spoofax/trunk/spoofax/protos/metascan/
Deleted:
   spoofax/trunk/spoofax/protos/metascan/

From karltk at strategoxt.org  Wed Dec  7 13:37:59 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 12:37:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23701 -
	spoofax-experimental/spekla spoofax/trunk/spoofax/protos/spekla
Message-ID: <20111207123759.7F5D3CC074@mx4.tudelft.nl>

Author: karltk
Date: Wed Dec  7 12:37:59 2011
New Revision: 23701
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23701&sc=1

Log:
Moving away old cruft

Added:
   spoofax-experimental/spekla/   (props changed)
      - copied from r23700, spoofax/trunk/spoofax/protos/spekla/
Deleted:
   spoofax/trunk/spoofax/protos/spekla/

From karltk at strategoxt.org  Wed Dec  7 13:38:27 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 12:38:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23702 -
	spoofax/trunk/spoofax/protos
Message-ID: <20111207123827.89C962B8009@mx2.tudelft.nl>

Author: karltk
Date: Wed Dec  7 12:38:27 2011
New Revision: 23702
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23702&sc=1

Log:
Moved. Closing down.

Deleted:
   spoofax/trunk/spoofax/protos/

From g.h.wachsmuth at tudelft.nl  Wed Dec  7 13:40:03 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Wed, 07 Dec 2011 12:40:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23703 - in
	spoofax-contrib/jasmin-spoofax: . trunk
Message-ID: <20111207124003.1CC1F7F802F@mx1.tudelft.nl>

Author: GuidoWachsmuth
Date: Wed Dec  7 12:40:02 2011
New Revision: 23703
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23703&sc=1

Log:
Initial import.

Added:
   spoofax-contrib/jasmin-spoofax/
   spoofax-contrib/jasmin-spoofax/trunk/

From karltk at strategoxt.org  Wed Dec  7 13:44:01 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 12:44:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23704 - in
	spoofax-experimental/asm/src: . org org/spoofax org/spoofax/asm
Message-ID: <20111207124401.67B1A108C006@mx3.tudelft.nl>

Author: karltk
Date: Wed Dec  7 12:44:01 2011
New Revision: 23704
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23704&sc=1

Log:
Added leftover code.

Added:
   spoofax-experimental/asm/src/
   spoofax-experimental/asm/src/org/
   spoofax-experimental/asm/src/org/spoofax/
   spoofax-experimental/asm/src/org/spoofax/asm/
   spoofax-experimental/asm/src/org/spoofax/asm/ClassBridge.java

Added: spoofax-experimental/asm/src/org/spoofax/asm/ClassBridge.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-experimental/asm/src/org/spoofax/asm/ClassBridge.java	Wed Dec  7 12:44:01 2011	(r23704)
@@ -0,0 +1,83 @@
+/*
+ * Created on 17.feb.2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.asm;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+
+import javax.imageio.stream.FileImageInputStream;
+
+import org.objectweb.asm.AnnotationVisitor;
+import org.objectweb.asm.Attribute;
+import org.objectweb.asm.ClassReader;
+import org.objectweb.asm.ClassVisitor;
+import org.objectweb.asm.FieldVisitor;
+import org.objectweb.asm.MethodVisitor;
+
+import aterm.ATerm;
+
+public class ClassBridge {
+
+    ATerm toATerm(String path) throws IOException {
+        ClassReader r = new ClassReader(new FileInputStream(path));
+        ClassVisitor v = new ClassVisitor() {
+
+            public void visit(int arg0, int arg1, String arg2, String arg3, String arg4, String[] arg5) {
+                System.out.println("visit");
+            }
+
+            public void visitSource(String arg0, String arg1) {
+                System.out.println("source");
+            }
+
+            public void visitOuterClass(String arg0, String arg1, String arg2) {
+                System.out.println("outerclass");
+            }
+
+            public AnnotationVisitor visitAnnotation(String arg0, boolean arg1) {
+                System.out.println("annotation");
+                return null;
+            }
+
+            public void visitAttribute(Attribute arg0) {
+                System.out.println("attribute");
+            }
+
+            public void visitInnerClass(String arg0, String arg1, String arg2, int arg3) {
+                System.out.println("innerclass");
+            }
+
+            public FieldVisitor visitField(int arg0, String arg1, String arg2, String arg3, Object arg4) {
+                System.out.println("field");
+                return null;
+            }
+
+            public MethodVisitor visitMethod(int arg0, String arg1, String arg2, String arg3, String[] arg4) {
+                System.out.println("method");
+                return null;
+            }
+
+            public void visitEnd() {
+                System.out.println("end");
+            }
+            
+        };
+        r.accept(v, false);
+        return null;
+    };
+
+    public static void main(String[] args) throws IOException {
+        
+        ClassBridge cb = new ClassBridge();
+        
+        System.out.println(args[0]);
+        System.out.println(cb.toATerm(args[0]));
+        
+        
+    }
+}

From g.h.wachsmuth at tudelft.nl  Wed Dec  7 13:45:04 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Wed, 07 Dec 2011 12:45:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23705 - in
	spoofax-contrib/jasmin-spoofax/trunk: . .externalToolBuilders
	.settings META-INF editor editor/java editor/java/org
	editor/java/org/strategoxt editor/java/org/s...
Message-ID: <20111207124504.B933B7F8027@mx1.tudelft.nl>

Author: GuidoWachsmuth
Date: Wed Dec  7 12:45:04 2011
New Revision: 23705
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23705&sc=1

Log:
moved to the contribution directory

Added:
   spoofax-contrib/jasmin-spoofax/trunk/.classpath
   spoofax-contrib/jasmin-spoofax/trunk/.externalToolBuilders/
   spoofax-contrib/jasmin-spoofax/trunk/.externalToolBuilders/JasminXT build.main.xml.launch
   spoofax-contrib/jasmin-spoofax/trunk/.project
   spoofax-contrib/jasmin-spoofax/trunk/.settings/
   spoofax-contrib/jasmin-spoofax/trunk/.settings/org.eclipse.jdt.core.prefs
   spoofax-contrib/jasmin-spoofax/trunk/META-INF/
   spoofax-contrib/jasmin-spoofax/trunk/META-INF/MANIFEST.MF
   spoofax-contrib/jasmin-spoofax/trunk/build.generated.xml
   spoofax-contrib/jasmin-spoofax/trunk/build.main.xml
   spoofax-contrib/jasmin-spoofax/trunk/build.properties
   spoofax-contrib/jasmin-spoofax/trunk/editor/
   spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Builders.esv
   spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Colorer.esv
   spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Completions.esv
   spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Folding.esv
   spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Outliner.esv
   spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-References.esv
   spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Syntax.esv
   spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT.main.esv
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/Activator.java
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/JasminXTParseController.java
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/JasminXTParseControllerGenerated.java
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/JasminXTValidator.java
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/InteropRegisterer.java
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/Main.java
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/execute_jasmin_0_0.java
   spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/execute_java_0_1.java
   spoofax-contrib/jasmin-spoofax/trunk/lib/
   spoofax-contrib/jasmin-spoofax/trunk/lib/editor-common.generated.str
   spoofax-contrib/jasmin-spoofax/trunk/lib/environment.str
   spoofax-contrib/jasmin-spoofax/trunk/lib/jasmin.jar   (contents, props changed)
   spoofax-contrib/jasmin-spoofax/trunk/lib/namespace.str
   spoofax-contrib/jasmin-spoofax/trunk/lib/refactor-common.generated.str
   spoofax-contrib/jasmin-spoofax/trunk/plugin.xml
   spoofax-contrib/jasmin-spoofax/trunk/syntax/
   spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT-Directives.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT-Fields.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT-Header.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT-Methods.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT.generated.pp
   spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT.pp
   spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/
   spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Arithmetic.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Control.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Conversion.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Exceptions.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Instructions.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-LoadStore.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Methods.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Objects.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Stack.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Synchronisation.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/
   spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Descriptors.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Names.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Numbers.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Signatures.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Strings.sdf
   spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Whitespace.sdf
   spoofax-contrib/jasmin-spoofax/trunk/test/
   spoofax-contrib/jasmin-spoofax/trunk/test/ANewArray.j
   spoofax-contrib/jasmin-spoofax/trunk/test/AnInterface.j
   spoofax-contrib/jasmin-spoofax/trunk/test/Arrays.j
   spoofax-contrib/jasmin-spoofax/trunk/test/Catch.j
   spoofax-contrib/jasmin-spoofax/trunk/test/Checkcast.j
   spoofax-contrib/jasmin-spoofax/trunk/test/Count.j
   spoofax-contrib/jasmin-spoofax/trunk/test/HelloWeb.j
   spoofax-contrib/jasmin-spoofax/trunk/test/HelloWorld.j
   spoofax-contrib/jasmin-spoofax/trunk/test/Implementor.j
   spoofax-contrib/jasmin-spoofax/trunk/test/InvokeInterface.j
   spoofax-contrib/jasmin-spoofax/trunk/test/MultiANewArray.j
   spoofax-contrib/jasmin-spoofax/trunk/test/MultiArrays.j
   spoofax-contrib/jasmin-spoofax/trunk/test/NewArray.j
   spoofax-contrib/jasmin-spoofax/trunk/test/Switch.j
   spoofax-contrib/jasmin-spoofax/trunk/test/Uncaught.j
   spoofax-contrib/jasmin-spoofax/trunk/test/VerifyTest.j
   spoofax-contrib/jasmin-spoofax/trunk/test/VerifyTest1.j
   spoofax-contrib/jasmin-spoofax/trunk/trans/
   spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/
   spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/main.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/names/
   spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/names/check.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/names/map.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/names/rename.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/editor/
   spoofax-contrib/jasmin-spoofax/trunk/trans/editor/resolve.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/
   spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/arithmetics.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/arrays.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/constants.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/desugar.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/jumps.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/locals.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/methods.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/misc.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/objects.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/state.str
   spoofax-contrib/jasmin-spoofax/trunk/trans/jasminxt.str
Modified:
   spoofax-contrib/jasmin-spoofax/trunk/   (props changed)

Added: spoofax-contrib/jasmin-spoofax/trunk/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/.classpath	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry excluding="trans/**" kind="src" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="lib" path="lib/jasmin.jar"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax-contrib/jasmin-spoofax/trunk/.externalToolBuilders/JasminXT build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/.externalToolBuilders/JasminXT build.main.xml.launch	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${project_loc}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${project_loc}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-contrib/jasmin-spoofax/trunk/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/.project	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>org.strategoxt.spoofax.jasminxt</name>
+      <comment></comment>
+      <buildSpec>
+		<buildCommand>
+			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+				<dictionary>
+					<key>LaunchConfigHandle</key>
+					<value>&lt;project&gt;/.externalToolBuilders/JasminXT build.main.xml.launch</value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/.settings/org.eclipse.jdt.core.prefs	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-contrib/jasmin-spoofax/trunk/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/META-INF/MANIFEST.MF	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,23 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: JasminXT Plug-in
+Bundle-SymbolicName: org.strategoxt.spoofax.jasminxt; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: org.strategoxt.spoofax.jasminxt.Activator
+Import-Package: org.osgi.framework;version="1.3.0",
+ org.spoofax.interpreter.terms,
+ org.strategoxt.lang
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.aterm,
+  org.spoofax.jsglr
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: org.strategoxt.spoofax.jasminxt

Added: spoofax-contrib/jasmin-spoofax/trunk/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/build.generated.xml	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,637 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${src-gen}/org/strategoxt/spoofax/jasminxt/strategies/Main.java" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la org.strategoxt.spoofax.jasminxt.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport1" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="externaljarimport2" value=":${externaljarx}" else="">
+            <isset property="externaljarx"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-parenthesize.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper"/>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper.fallback"/>
+        </target>
+
+        <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-parenthesize.str"/>
+                <arg value="--omod"/>
+                <arg value="include/${sdfmodule}-parenthesize"/>
+                <arg value="--main-strategy"/>
+                <arg value="io-${sdfmodule}-parenthesize"/>
+                <arg value="--lang"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--rule-prefix"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--sig-module"/>
+                <arg value="include/${sdfmodule}"/>
+            </java>
+        </target>
+
+    	<target name="sdf2parenthesize.helper.fallback" unless="sdf2parenthesize.available">
+        	<echo file="${include}/${sdfmodule}-parenthesize.str" message="module include/${sdfmodule}-parenthesize rules parenthesize-${sdfmodule} = id"/>
+    	</target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg line="${aster-input}"/>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+        <!-- 
+            if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+            Only used by stratego.jvm.helper.debug 
+        -->
+        <condition property="transformer-output" value="" else="--output-rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- 
+            if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+            if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+            Only used by stratego.jvm.helper.debug
+        -->
+        <condition property="strj.input.file.type" value="str" else="rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- value determines which target will be executed.
+            If the file ".debugmode" can be found in the project root call stratego.jar.debug
+            else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+        
+        <!-- will save the stratego files with debug info in this folder -->
+        <property name="trans-debug" location="trans-debug"/>
+        
+        <!-- this helper target determines what target to call, based on debug.build.enabled -->
+        <target name="stratego.jar.helper">
+            <antcall target="${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar unless debug.build.enabled property is set --> 
+        <target name="call.stratego.jar" depends="stratego.jar">
+            <echo message="call.stratego.jar - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar.debug when debug.build.enabled property is set -->
+        <target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+            <echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- copy stratego runtime jars to utils folder -->
+        <target name="utils-files-debug" depends="utils-files">
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+        </target>
+        
+        <!-- Stratego to Java compiler with debugging capabilities -->
+        <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <!-- compile stratego to java -->
+            <antcall target="stratego.jvm.helper.debug">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <!-- compile java to class -->
+            <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+                <!-- attribute in javac: srcdir="${src-gen}" -->
+                <src path="${src-gen}"/>
+                <!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
+                <classpath>
+                    <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+                    <pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+                    <pathelement location="utils/stratego-debug-runtime-java.jar"/>
+                </classpath>
+                <!-- attribute in javac: includes="trans/**"  -->
+                <include name="trans/**"/>
+            </javac>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <!-- create a jar from the class files -->
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <!-- instrument the stratego program and compile it to java -->
+        <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+            <echo message="generate stratego with debug information"/>
+            <echo message="${basedir}"/>
+            <available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+            <!-- add debug information -->
+              <java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+                   <classpath>
+                    <pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.strategojar}"/>
+                   </classpath>
+                  <arg value="-i"/>
+                  <arg value="${trans}/${strmodule}.str"/>
+                  <arg value="--gen-dir"/>
+                  <arg value="${trans-debug}"/>
+                  <arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+                  <arg value="${basedir}"/>
+                  <!-- "arg line='val'" val should contain space-separated arguments --> 
+                  <arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+                  
+                  <!-- arguments should start with two '-'-characters -->
+                  <!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+                  <!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+                  <!-- <arg value="-output-rtree"/> --> 
+            </java>
+            <!-- now compile instrumented stratego to java -->
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <!-- put strategodebuglib.rtree on the include path -->
+                <arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+                <arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete dir="${src-gen}/trans"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/build.main.xml	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="JasminXT" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="JasminXT"/>
+        <property name="metasdfmodule" value="Stratego-JasminXT"/>
+        <property name="esvmodule" value="JasminXT"/>
+        <property name="strmodule" value="jasminxt"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- External .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/build.properties	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Builders.esv	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,25 @@
+
+module JasminXT-Builders
+
+imports JasminXT-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                                               
+  provider: include/jasminxt.ctree                                                                           
+  provider: include/jasminxt-java.jar
+  provider: lib/jasmin.jar
+                                                                                                                               
+  observer: editor-analyse                                                                                   
+                                                                                                                               
+  builder: "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  
+  builder: "Generate class file" = generate-class (source)  
+  
+  builder: "Execute" = execute-class (source) (openeditor)
+                                                                                                                               
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Colorer.esv	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,12 @@
+module JasminXT-Colorer
+
+imports JasminXT-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+  
+  Instruction: 0 0 128 bold
+  
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Completions.esv	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,11 @@
+module JasminXT-Completions
+
+imports JasminXT-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Folding.esv	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,9 @@
+module JasminXT-Folding
+
+imports JasminXT-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Outliner.esv	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,9 @@
+module JasminXT-Outliner
+
+imports JasminXT-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-References.esv	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,8 @@
+module JasminXT-References
+
+imports JasminXT-References.generated
+
+references
+
+	reference _ : editor-resolve                                     
+ 
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT-Syntax.esv	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,9 @@
+module JasminXT-Syntax
+
+imports JasminXT-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/JasminXT.main.esv	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,16 @@
+module JasminXT.main
+
+imports JasminXT-Builders JasminXT-Colorer JasminXT-Completions JasminXT-Folding JasminXT-Outliner JasminXT-References JasminXT-Syntax
+
+language General properties
+                  
+  name          : JasminXT
+  id            : org.strategoxt.spoofax.jasminxt
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the JasminXT language"
+  url           : http://strategoxt.org
+                  
+  extensions    : j
+  table         : include/JasminXT.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/Activator.java	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,44 @@
+package org.strategoxt.spoofax.jasminxt;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "JasminXT";
+
+  public static final String kLanguageName = "JasminXT";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/JasminXTParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/JasminXTParseController.java	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,89 @@
+package org.strategoxt.spoofax.jasminxt;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class JasminXTParseController extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("JasminXT");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = JasminXTParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = JasminXTParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(JasminXTParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return JasminXTParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/JasminXTParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/JasminXTParseControllerGenerated.java	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,108 @@
+package org.strategoxt.spoofax.jasminxt;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileInputStream;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class JasminXTParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("JasminXT");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    JasminXTParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = JasminXTParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = JasminXTParseControllerGenerated.class.getResourceAsStream(TABLE);
+      boolean filesystem = false;
+      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
+      { 
+        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
+        filesystem = true;
+      }
+      if(table == null && new File("./" + TABLE).exists())
+      { 
+        table = new FileInputStream("./" + TABLE);
+        filesystem = true;
+      }
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
+      descriptor.setAttachmentProvider(JasminXTParseControllerGenerated.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return JasminXTParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/JasminXTValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/JasminXTValidator.java	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,12 @@
+package org.strategoxt.spoofax.jasminxt;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class JasminXTValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return JasminXTParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/InteropRegisterer.java	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,18 @@
+package org.strategoxt.spoofax.jasminxt.strategies;
+
+       import org.strategoxt.lang.JavaInteropRegisterer;
+       import org.strategoxt.lang.Strategy;
+
+       /**
+        * Helper class for {@link java_strategy_0_0}.
+        */
+       public class InteropRegisterer extends JavaInteropRegisterer {
+
+         public InteropRegisterer() {
+           super(new Strategy[] { 
+        		   execute_java_0_1.instance, 
+        		   execute_jasmin_0_0.instance
+           });
+       
+         }
+       }

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/Main.java	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,11 @@
+package org.strategoxt.spoofax.jasminxt.strategies;
+
+import org.strategoxt.lang.Context;
+
+public class Main {
+  
+  public static void init(Context context) {
+    // Called when the editor is being initialized
+  }
+
+}

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/execute_jasmin_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/execute_jasmin_0_0.java	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,119 @@
+package org.strategoxt.spoofax.jasminxt.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Example Java strategy implementation.
+ *
+ * This strategy can be used by editor services and can be called
+ * in Stratego modules by declaring it as an external strategy
+ * as follows:
+ *
+ * <code>
+ *  external java-strategy(|)
+ * </code>
+ *
+ * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+ */
+public class execute_jasmin_0_0 extends Strategy {
+
+	public static execute_jasmin_0_0 instance = new execute_jasmin_0_0();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+	
+//		fname = "/Users/guwac/Documents/EclipseWorkspaces/IN4303/JasminXT/test/HelloWorld.j" ;
+//		cpath = "/Users/guwac/Documents/EclipseWorkspaces/IN4303/JasminXT/test/";
+//		
+//		File out_file = null;
+//        FileOutputStream outp = null;
+//        File file = new File(fname);
+//        ClassFile classFile = new ClassFile();
+//        String iocause = fname + ": file not found";
+//
+//        try {
+//            BufferedReader inp;
+//            
+//              FileInputStream fs = new FileInputStream(fname);
+//              InputStreamReader ir;
+//              ir = new InputStreamReader(fs);
+//              inp = new BufferedReader(ir);
+//            
+//            classFile.readJasmin(inp, file.getName(), false);
+//            inp.close();
+//
+//            // if we got some errors, don't output a file - just return.
+//            if (classFile.errorCount() > 0) {
+//                System.err.println(fname + ": Found "
+//                                    + classFile.errorCount() + " errors");
+//                return null;
+//            }
+//
+//            String class_path[] = (ScannerUtils.splitClassField(
+//                                                classFile.getClassName()));
+//            String class_name = class_path[1];
+//
+//            // determine where to place this class file
+//            String dest_dir = cpath;
+//            if (class_path[0] != null) {
+//                String class_dir = ScannerUtils.convertChars(
+//                                           class_path[0], "./",
+//                                           File.separatorChar);
+//                if (dest_dir != null) {
+//                    dest_dir = dest_dir + File.separator + class_dir;
+//                } else {
+//                    dest_dir = class_dir;
+//                }
+//            }
+//            iocause = class_name + ".class: file can't be created";
+//            if (dest_dir == null) {
+//                out_file = new File(class_name + ".class");
+//            } else {
+//                out_file = new File(dest_dir, class_name + ".class");
+//
+//                // check that dest_dir exists
+//
+//                File dest = new File(dest_dir);
+//                if (!dest.exists()) {
+//                    dest.mkdirs();
+//                }
+//
+//                if (!dest.isDirectory()) {
+//                    throw new IOException("Cannot create directory");
+//                }
+//            }
+//
+//            outp = new FileOutputStream(out_file);
+//            classFile.write(outp);
+//            outp.close();
+//            outp = null; // as marker
+//            System.out.println("Generated: " + out_file.getPath());
+//
+//        } catch (java.io.FileNotFoundException e) {
+//            System.err.println(iocause);
+//            System.exit(-1);
+//        } catch (jasError e) {
+//            classFile.report_error("JAS Error: " + e.getMessage(), e.numTag);
+//        } catch (Exception e) {
+//            if(DEBUG)
+//                e.printStackTrace();
+//            classFile.report_error(fname + ": exception - <" +
+//                              e.getClass().getName() + "> " + e.getMessage() +
+//                              ".");
+//        }
+//        if (classFile.errorCount() > 0) {
+//            System.err.println(fname + ": Found "
+//                               + classFile.errorCount() + " errors");
+//            if (outp != null) {
+//                try {
+//                  outp.close();
+//                  out_file.delete();
+//                } catch(Exception e) {}
+//            }
+//        }
+
+		return current;
+	}
+}

Added: spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/execute_java_0_1.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/editor/java/org/strategoxt/spoofax/jasminxt/strategies/execute_java_0_1.java	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,73 @@
+?package org.strategoxt.spoofax.jasminxt.strategies;
+
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.PrintStream;
+import java.lang.reflect.Method;
+import java.net.URL;
+import java.net.URLClassLoader;
+
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+       
+/**
+ * Example Java strategy implementation.
+ *
+ * This strategy can be used by editor services and can be called
+ * in Stratego modules by declaring it as an external strategy
+ * as follows:
+ *
+ * <code>
+ *  external java-strategy(|)
+ * </code>
+ *
+ * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+ */
+public class execute_java_0_1 extends Strategy {
+
+	public static execute_java_0_1 instance = new execute_java_0_1();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm path) {
+		
+		// remember system streams
+		PrintStream origOut = System.out;
+		PrintStream origErr = System.err;
+		
+		// create temporary streams to collect output
+		ByteArrayOutputStream out = new ByteArrayOutputStream();
+		ByteArrayOutputStream err = new ByteArrayOutputStream();
+		
+		System.setOut(new PrintStream(out));
+		System.setErr(new PrintStream(err));
+		
+		try {
+			// load class
+			File file = new File(((IStrategoString) path).stringValue());
+			URLClassLoader loader = new URLClassLoader(new URL[]{file.toURI().toURL()}); 
+			Class<?> cls = loader.loadClass(((IStrategoString) current).stringValue());
+			
+			// invoke main method
+			Method method = cls.getDeclaredMethod("main", new Class[] {String[].class});
+			method.invoke(null, (Object) new String[0]);
+		} 
+		catch (Exception e) {
+			e.printStackTrace(); 
+		}
+		
+		// reset system streams
+		System.setErr(origErr);
+		System.setOut(origOut);
+
+		// return output collected in both temporary streams
+		ITermFactory factory = context.getFactory();	
+		return factory.makeAppl(
+			factory.makeConstructor("Output", 2), 
+			factory.makeString(out.toString()),
+			factory.makeString(err.toString())
+		);
+	}
+}

Added: spoofax-contrib/jasmin-spoofax/trunk/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/lib/editor-common.generated.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,254 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-jasminxt-file
+  parse-jasminxt-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/JasminXT.tbl)>
+    )
+
+  parse-string = parse-jasminxt-string
+  parse-jasminxt-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/JasminXT.tbl)>
+    )
+  
+  parse-stream = parse-jasminxt-stream
+  parse-jasminxt-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/JasminXT.tbl)>
+    )
+
+  pp-jasminxt-string =
+    ast2abox(|[<import-term(include/JasminXT.generated.pp.af)>,
+               <import-term(include/JasminXT.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "JasminXT", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    ![<id>]; all(s); ?[<id>]
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/jasminxt.str file. These definitions should also be automatically 
+  // generated in the imported include/JasminXT.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-contrib/jasmin-spoofax/trunk/lib/environment.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/lib/environment.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,254 @@
+module lib/environment
+
+imports
+	lib/namespace
+
+signature constructors
+	env: Env -> Annotation
+	StandardEnv: Env
+	
+rules // annotate env
+	
+	annotate-env(s) : x -> <set-annos> (x, [env(e)|<get-annos> x]) where project-scope(s) => e
+
+	get-annotated-env = (get-annos ; fetch-elem(?env(<id>))) <+ !StandardEnv()
+	
+	strip-annotated-env = !(<id>, <get-annos ; filter(not(?env(_)))>) ; set-annos
+	
+rules // store declarations and references
+	
+	/**
+	* stores a mapping from a name to a declaration
+	* can distinguish different tables
+	* remembers the mapping by storing a dynamic rule
+	*
+	* @param env
+	* @type (a, b) -> b
+	*/
+	store-declaration(|env) :
+		(x, d) -> d
+		where <strip-annotated-env> x => key
+		where rules( Declared:+ (env, key) -> d )
+		
+	store-declaration = store-declaration(|<Fst ; get-annotated-env>)
+	
+	/**
+	* stores the usage of a reference
+	* can distinguish different namespaces
+	* remembers the reference by storing a dynamic rule
+	*
+	* @param env
+	* @type a -> a
+	*/
+	store-reference(|env) = where (strip-annotated-env => key ; rules ( Referred:+ (env, key) -> key ))
+
+	store-reference = store-reference(|<get-annotated-env>)
+	
+rules // include environments
+	
+	/**
+	*
+	* example: 
+	*     store: Class(c, Parent(p), _, _) -> <id> 
+	*         where 
+	*             <store-declaration(|Classes())> c ; 
+	*             <include-env(|Fields(c))> Fields(p) ;
+	*             <include-env(|Methods(c))> Methods(p) 
+	*/
+	include-env(|env) : 
+		included -> included
+		where 
+			<topdown(strip-annotated-env)> env => env' ;
+			<topdown(strip-annotated-env)> included => included' 
+		where rules (
+			IncludedBy:+ included' -> env'
+			Including:+ env' -> included'
+		)
+				
+strategies // access inclusions
+	
+	get-included-envs  = get-inclusions(bagof-Including)
+	get-including-envs = get-inclusions(bagof-IncludedBy)
+	
+	get-inclusions(s) = ![<id>] ; get-inclusions(s|[]) ; reverse
+	
+	get-inclusions(s|temps): [] -> temps
+	 
+	get-inclusions(s|temps): 
+		[env|envs] -> <get-inclusions(s|temps)> envs
+		where <elem> (env, temps)
+		
+	get-inclusions(s|temps):  
+		[env|envs] -> <get-inclusions(s|[env|temps])> envs'
+		where not (<elem> (env, temps))
+		where <conc> (<s> env, envs) => envs'
+		
+strategies // access declarations
+	
+	/**
+	* maps a name to its declarations
+	* can distinguish different environments
+	* remembers the mapping by calling a dynamic rule
+	*
+	* @param env
+	* 
+	* @type a -> List(b)
+	*/
+	lookup-all-local(|env): key -> <bagof-Declared> (env, <strip-annotated-env> key) 
+	
+	lookup-all-local = lookup-all-local(|<get-annotated-env>)
+
+	/**
+	* maps a name to its declarations
+	* can distinguish different environments
+	* remembers the mapping by calling a dynamic rule
+	*
+	* @param env
+	* 
+	* @type a -> List(b)
+	*/
+	
+	lookup-all(|env): key -> <get-included-envs ; mapconcat(lookup-all-in-env(|key))> env
+	
+	lookup-all-in-env(|key): env -> <lookup-all-local(|env)> key
+	
+	lookup-all = lookup-all(|<get-annotated-env>)
+	
+	/**
+	* succeeds if the current term can be mapped to a declaration
+	* can distinguish different environments
+	* 
+	* @param namespace
+	* 
+	* @type a -> a
+	*/
+	is-declared-local(|env) = where(lookup-all-local(|env) ; ?[_|_])
+
+	is-declared-local = is-declared-local(|<get-annotated-env>)
+
+	/**
+	* succeeds if the current term can be mapped to a declaration
+	* can distinguish different environments
+	* 
+	* @param namespace
+	* 
+	* @type a -> a
+	*/
+	is-declared(|env) = where(lookup-all(|env) ; ?[_|_])
+
+	is-declared = is-declared(|<get-annotated-env>)
+		
+	/**
+	* maps a name to its only declaration
+	* can distinguish different environments
+	* 
+	* @param env
+	*/
+	lookup-unique-local(|env) = lookup-all-local(|env) ; ?[<id>]
+
+	lookup-unique-local = lookup-unique-local(|<get-annotated-env>)
+	
+	/**
+	* maps a name to its only declaration
+	* can distinguish different environments
+	* 
+	* @param env
+	*/
+	lookup-unique(|env) = lookup-all(|env) ; ?[<id>]
+
+	lookup-unique = lookup-unique(|<get-annotated-env>)
+	
+	/**
+	* maps a name to its first declaration
+	* can distinguish different environments
+	* 
+	* @param env
+	*/
+	lookup-first(|env) = lookup-first(id|env) 
+	
+	lookup-first = lookup-first(|<get-annotated-env>)
+
+	/**
+	* maps a name to its first declaration for which strategy s holds
+	* can distinguish different environments
+	* 
+	* @param s: b -> c
+	* @param env
+	* 
+	* @type a -> b
+	*/
+	lookup-first(s|env) = project-first(where(s)|env)
+	
+	/**
+	* maps a name to its declarations for which strategy s holds
+	* can distinguish different environments
+	* 
+	* @param s: b -> c
+	* @param env
+	* 
+	* @type a -> List(b)
+	*/
+	lookup-all(s|env) = project-all(where(s)|env)
+
+strategies // project declarations
+	
+	/**
+	* maps a name to the first projection of its declarations
+	* can distinguish different environments
+	* 
+	* @param s: b -> c
+	* @param env
+	* 
+	* @type a -> c
+	*/
+	project-first(s|env) = lookup-all(|env) ; fetch-elem(s) 
+
+	project-first(s) = project-first(s|<get-annotated-env>)
+
+	/**
+	* maps a name to the projections of its declarations
+	* can distinguish different environments
+	* 
+	* @param s: b -> c
+	* @param env
+	* 
+	* @type a -> List(c)
+	*/
+	project-all(s|env) = lookup-all(|env) ; filter(s) 
+
+	project-all(s) = project-all(s|<get-annotated-env>)
+	
+strategies // access all declarations
+	
+	local-keys: env -> <all-keys-Declared ; filter(?(env, <id>))>
+	
+	all-keys = get-included-envs ; foldr([], union, local-keys) 
+	
+	local-declarations: env -> <local-keys ; mapconcat(lookup-all-local(|env))> env
+		
+	all-declarations: env -> <all-keys ; mapconcat(lookup-all(|env))> env
+
+	local-entries: env -> <local-keys ; map(!(<id>, <lookup-all-local(|env)>))> env
+	
+	all-entries: env -> <all-keys ; map(!(<id>, <lookup-all(|env)>))> env
+			
+strategies // access references
+
+	lookup-all-references-local(|env): key -> <bagof-Referred> (env, <strip-annotated-env> key)
+	
+	lookup-all-references-local = lookup-all-references-local(|<get-annotated-env>)
+	
+	lookup-all-references(|env): key -> <get-including-envs ; mapconcat(lookup-all-refs-in-env(|key))> env
+	
+	lookup-all-references = lookup-all-references(|<get-annotated-env>)
+	
+	lookup-all-refs-in-env(|key): env -> <lookup-all-references-local(|env)> key
+	
+	is-referred-local(|env) = lookup-all-references-local(|env) ; ?[_|_]
+	
+	is-referred-local = is-referred-local(|<get-annotated-env>)
+	
+	is-referred(|env) = lookup-all-references(|env) ; ?[_|_]
+
+	is-referred = is-referred(|<get-annotated-env>)
+	
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/lib/jasmin.jar
==============================================================================
Binary file. No diff available.

Added: spoofax-contrib/jasmin-spoofax/trunk/lib/namespace.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/lib/namespace.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,83 @@
+module lib/namespace
+
+signature constructors
+	uid: UID -> Annotation
+	   : String -> UID
+	
+rules // scoped renaming
+	
+	/**
+	* executes the renaming strategy s in a new scope
+	* 
+	* declarations inside the new scope will hide existing declarations outside the new scope
+	* multiple declarations with the same name inside the new scope will be renamed to the same name
+	*
+	* @param renaming strategy s: a -> b
+	* @type a -> b
+	*/
+	new-scope(s) :
+		x -> y
+		where
+			<newname> x => scope ;
+			{| ns-Renamed, ns-RenamedInScope, ns-CurrentScope, ns-Scope:
+				rules (
+					ns-CurrentScope: _ -> scope
+					ns-Scope:+ x -> scope
+				) ;
+				<s> x => y
+			|} 
+			
+	/**
+	* annotates the current term with a fresh name
+	* can distinguish different namespaces
+	* remembers the renaming by storing two dynamic rules
+	* 
+	* multiple calls on the same term inside the same scope will give identical results
+	* calls inside a new scope will hide the results of calls to the same term from outer scopes
+	*
+	* @param namespace 
+	* @type a -> a
+	*/
+	uid-declaration(|namespace) : 
+		x -> x'
+		where 
+			ns-CurrentScope => scope ;
+			(
+				<ns-RenamedInScope> (namespace, scope, x)  <+
+				<set-annos> (x, [uid(<newname> "uid")|<get-annos> x])
+			) => x'
+		where rules(
+			ns-RenamedInScope: (namespace, scope, x) -> x' 
+			ns-Renamed: (namespace, x) -> x'
+		)
+	
+	/**
+	* annotates the current term with a new name
+	* succeeds only if rename-declaration was called before on the same term
+	* will use the same name as rename-declaration (by calling the dynamic rule stored by rename-declaration)
+	*
+	* @param namespace 
+	* @type a -> b
+	*/
+	uid-reference(|namespace) :
+		x -> x'
+		where
+			<ns-Renamed> (namespace, x) => x'
+	
+strategies // access scopes
+	
+	get-scopes = all-keys-ns-Scope
+	
+	get-scopes(s) = get-scopes ; filter(where(s))
+	
+	get-scope(s) = get-scopes ; fetch-elem(where(s))
+	
+	project-scopes(s) = get-scopes ; filter(s)
+	
+	project-scope(s) = get-scopes ; fetch-elem(s)
+	
+	in-scope(s) = where(get-scope(s))
+	
+strategies	
+	
+	get-declarations: namespace -> <all-keys-ns-Renamed ; filter(?(namespace, _) ; ns-Renamed)>

Added: spoofax-contrib/jasmin-spoofax/trunk/lib/refactor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/lib/refactor-common.generated.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,67 @@
+module lib/refactor-common.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+
+strategies //transformation
+
+/**
+ * Replaces elements in a list (once, starting from the right)
+ * @param match strategy for partial list
+ * @param new elements List(b)
+ * @type List(a) -> List(a,b)
+ */
+replace-sublist(match-sublist|new-elems): 
+  list -> <
+    at-suffix(match-sublist;!new-elems) <+
+    (
+      init; 
+      replace-sublist(match-sublist|new-elems);
+      at-end(![<last> list])
+    )
+  > list 
+
+/**
+ * Inserts an element at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list element 
+ * @type Term -> Term
+ */
+insert-elem(|pos, elem)=
+  insert-sublist(|pos, [elem])
+
+/**
+ * Inserts a list of elements at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list elements 
+ * @type Term -> Term
+ */	
+insert-sublist(|pos, elems)=
+  at-position(
+    split-at(|<last> pos);
+    ?(prefix, suffix);
+    <concat>[prefix, elems, suffix]
+    |<init> pos
+  )
+
+
+strategies //user-input
+
+/**
+ * Opens an input dialog for one string value that represents an identifier
+ * The language is used to check if the input value matches the identifier pattern
+ * @type (String, String, String, String) -> String
+ */
+input-dialog:
+  (language, title, label, default-value) -> <prim("SSL_EXT_newnamedialog", language, title, label, default-value)>
+  
+input-dialog:
+  (title, label, default-value) -> <input-dialog>("", title, label, default-value)
+
+strategies //pp-table
+	
+get-pp-table=
+  import-term(include/JasminXT.generated.pp.af)
+	

Added: spoofax-contrib/jasmin-spoofax/trunk/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/plugin.xml	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="j" description="JasminXT" language="JasminXT" derivedFrom="DynamicRoot" validator="org.strategoxt.spoofax.jasminxt.JasminXTValidator" validatorClass="org.strategoxt.spoofax.jasminxt.JasminXTValidator"></language>
+       </extension>
+       <extension id="org.strategoxt.spoofax.jasminxt.parser" name="JasminXT Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="org.strategoxt.spoofax.jasminxt.JasminXTParseController" language="JasminXT">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT-Directives.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT-Directives.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,35 @@
+module JasminXT-Directives
+
+imports
+	
+	lexical/JasminXT-Numbers
+	lexical/JasminXT-Descriptors
+	
+exports
+	
+	context-free syntax
+		
+		".limit" "stack" Int 	-> Directive {cons("JBCLimitStack")}		
+		".limit" "locals" Int 	-> Directive {cons("JBCLimitLocals")}	
+		".line" Int				-> Directive {cons("JBCLine")}
+		".throws" ClassName		-> Directive {cons("JBCThrows")}
+		
+		".catch" ClassName "from" LabelRef "to" LabelRef "using" LabelRef 			-> Directive {cons("JBCCatch")}
+		".var" VarRef "is" VarName FieldDescriptor "from" LabelRef "to" LabelRef 	-> Directive {cons("JBCVarDecl")}
+		
+	lexical restrictions
+		
+		".limit" 
+		"stack" 
+		"locals" 	
+		".line" 
+		".throws" 
+		".catch" 
+		"from" 
+		"to" 
+		"using" 
+		".var" 
+		"is" 
+		"from"
+		"to" 	-/- ~[\ \t]
+		
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT-Fields.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT-Fields.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,63 @@
+module JasminXT-Fields
+
+imports
+	
+	lexical/JasminXT-Names
+	lexical/JasminXT-Numbers
+	lexical/JasminXT-Strings
+	lexical/JasminXT-Descriptors
+	lexical/JasminXT-Signatures
+	
+exports
+	
+	context-free syntax
+			
+		".field" 
+		FieldAccess* 
+		FieldName 
+		FieldDescriptor 
+		FieldSignatureSpec
+		InitialValue 		-> Field {cons("JBCField")}
+	
+		".field" 
+		FieldAccess* 
+		FieldName 
+		FieldDescriptor 
+		InitialValue 
+		FieldExt*
+		".end" "field"	-> Field {cons("JBCExtField")}
+		
+		".signature" FieldSignature 	-> FieldExt {cons("JBCSignature")}
+		".deprecated"  					-> FieldExt {cons("JBCDeprecated")}
+		%%TODO add .attribute and .annotation
+
+		"signature" FieldSignature	-> FieldSignatureSpec {cons("FieldSig")}
+									-> FieldSignatureSpec {cons("None")}
+									
+		"=" Constant	-> InitialValue {cons("InitVal")}
+						-> InitialValue {cons("None")}
+		
+			
+ 		"public" 		-> FieldAccess {cons("PUBLIC")}
+ 		"private" 		-> FieldAccess {cons("PRIVATE")}
+ 		"protected" 	-> FieldAccess {cons("PROTECTED")}
+ 		"static" 		-> FieldAccess {cons("STATIC")}
+ 		"final"			-> FieldAccess {cons("FINAL")}
+ 		"volatile"		-> FieldAccess {cons("VOLATILE")}
+ 		"transient"		-> FieldAccess {cons("TRANSIENT")}
+ 		
+ 	lexical restrictions
+			
+		".field" 
+		".end"
+		".signature" 
+		".deprecated"
+		"signature"
+		"public" 	
+ 		"private" 	
+ 		"protected" 
+ 		"static" 	
+ 		"final"		
+ 		"volatile"	
+ 		"transient"	-/- ~[\ \t]
+ 		
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT-Header.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT-Header.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,88 @@
+module JasminXT-Header
+
+imports
+	
+	lexical/JasminXT-Names
+	lexical/JasminXT-Numbers
+	lexical/JasminXT-Strings
+	lexical/JasminXT-Descriptors
+	lexical/JasminXT-Signatures
+		
+exports
+
+	context-free syntax %% header
+			
+		BytecodeSpec 
+		SourceSpec 
+		ClassSpec
+		SuperSpec 
+		ImplementsSpec*
+		SignatureSpec
+		EnclosingSpec
+		DeprecatedSpec
+		%%Annotations
+		%%GenericAttributes
+		%%DebugExtension		
+							-> JasminHeader {cons("JBCHeader")}
+			
+	context-free syntax
+			
+		".bytecode" MajorVersion MinorVersion 	-> BytecodeSpec {cons("JBCVersion")}
+												-> BytecodeSpec {cons("None")}
+		
+		Int 	-> MajorVersion {cons("Major")}
+ 		"." Int	-> MinorVersion {cons("Minor")}
+				-> MinorVersion {cons("None")}
+		
+		".source" String	-> SourceSpec {cons("JBCSource")}
+	%%	".source" Word		-> SourceSpec {cons("Source")}
+							-> SourceSpec {cons("None")}
+								
+	context-free syntax
+		
+		".class"     ClassAccess* ClassName -> ClassSpec {cons("JBCClass")}
+		".interface" ClassAccess* ClassName -> ClassSpec {cons("JBCInterface")}
+		
+		"public" 		-> ClassAccess {cons("PUBLIC")}
+ 		"final" 		-> ClassAccess {cons("FINAL")}
+ 		"interface"		-> ClassAccess {cons("INTERFACE")}
+ 		"abstract" 		-> ClassAccess {cons("ABSTRACT")}
+ 		"super" 		-> ClassAccess {cons("SUPER")}			%% TODO: check this
+  	
+ 		".super" ClassName -> SuperSpec {cons("JBCSuper")}
+
+		".implements" ClassName -> ImplementsSpec {cons("JBCImplements")}
+		
+ 	context-free syntax
+ 								
+		".signature" ClassSignature 	-> SignatureSpec {cons("JBCSignature")}
+										-> SignatureSpec {cons("None")}
+	
+		".enclosing" "method" MethodDescriptor 	-> EnclosingSpec {cons("JBCEnclosing")}
+												-> EnclosingSpec {cons("None")}		
+	
+		".deprecated"	-> DeprecatedSpec {cons("JBCDeprecated")}
+						-> DeprecatedSpec {cons("None")}
+	
+%%		DebugSpec* -> DebugExtension {cons("Debug")}
+		
+%%		".debug" Str -> DebugSpec {cons("Debug")}
+
+	lexical restrictions
+		
+		".bytecode"
+		".source"
+		".class"     
+		".interface" 
+		"public" 
+ 		"final" 
+ 		"interface"
+ 		"abstract" 
+ 		"super" 	
+ 		".super" 		
+		".implements" 		
+		".signature" 
+		".enclosing" 
+		%%"method"
+		".deprecated" -/- ~[\ \t]
+		
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT-Methods.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT-Methods.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,54 @@
+module JasminXT-Methods
+
+imports
+	
+	lexical/JasminXT-Names
+	lexical/JasminXT-Numbers
+	lexical/JasminXT-Strings
+	lexical/JasminXT-Descriptors
+	
+	instructions/JasminXT-Instructions
+	JasminXT-Directives
+	
+exports
+	
+	context-free syntax
+		
+ 		".method" 
+ 		MethodAccess* 
+ 		MethodName 
+ 		MethodDescriptor 
+ 		Statement*
+ 		".end" "method" -> Method {cons("JBCMethod")}
+				
+ 		"public" 		-> MethodAccess {cons("PUBLIC")}
+ 		"private" 		-> MethodAccess {cons("PRIVATE")}
+ 		"protected" 	-> MethodAccess {cons("PROTECTED")}
+ 		"static" 		-> MethodAccess {cons("STATIC")}
+ 		"final"			-> MethodAccess {cons("FINAL")}
+ 		"synchronized"	-> MethodAccess {cons("SYNCHRONIZED")}
+ 		"native"		-> MethodAccess {cons("NATIVE")}
+ 		"abstract"		-> MethodAccess {cons("ABSTRACT")}
+ 		
+ 	context-free syntax %% statements
+ 		
+ 		PCInstruction 	-> Statement
+ 		Directive		-> Statement
+ 	%%	Error			-> Statement
+ 		Label			-> Statement
+ 	
+ 		LabelName ":"	-> Label {cons("JBCLabel")}
+ 		
+ 	lexical restrictions
+ 		
+ 		".method" 
+ 		".end" 
+ 		"public" 
+ 		"private"
+ 		"protected"
+ 		"static" 	
+ 		"final"		
+ 		"synchronized"
+ 		"native"		
+ 		"abstract"		-/- ~[\ \t]
+ 		
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT.generated.pp	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,295 @@
+[
+   JBCLimitStack            -- KW[".limit"] KW["stack"] _1,
+   JBCLimitLocals           -- KW[".limit"] KW["locals"] _1,
+   JBCLine                  -- KW[".line"] _1,
+   JBCThrows                -- KW[".throws"] _1,
+   JBCCatch                 -- KW[".catch"] _1 KW["from"] _2 KW["to"] _3 KW["using"] _4,
+   JBCVarDecl               -- KW[".var"] _1 KW["is"] _2 _3 KW["from"] _4 KW["to"] _5,
+   MONITORENTER             -- KW["monitorenter"],
+   MONITOREXIT              -- KW["monitorexit"],
+   ATHROW                   -- KW["athrow"],
+   INVOKESPECIAL            -- KW["invokenonvirtual"] _1,
+   INVOKEVIRTUAL            -- KW["invokevirtual"] _1,
+   INVOKESTATIC             -- KW["invokestatic"] _1,
+   INVOKEINTERFACE          -- KW["invokeinterface"] _1 _2,
+   RETURN                   -- KW["return"],
+   IRETURN                  -- KW["ireturn"],
+   LRETURN                  -- KW["lreturn"],
+   FRETURN                  -- KW["freturn"],
+   DRETURN                  -- KW["dreturn"],
+   ARETURN                  -- KW["areturn"],
+   Absolute                 -- _1,
+   RelativeFwd              -- KW["$+"] _1,
+   RelativeBwd              -- KW["$-"] _1,
+   IFEQ                     -- KW["ifeq"] _1,
+   IFLT                     -- KW["iflt"] _1,
+   IFLE                     -- KW["ifle"] _1,
+   IFNE                     -- KW["ifne"] _1,
+   IFGT                     -- KW["ifgt"] _1,
+   IFGE                     -- KW["ifge"] _1,
+   IFNULL                   -- KW["ifnull"] _1,
+   IFNONNULL                -- KW["ifnonnull"] _1,
+   IF_ICMPEQ                -- KW["if_icmpeq"] _1,
+   IF_ICMPLT                -- KW["if_icmplt"] _1,
+   IF_ICMPLE                -- KW["if_icmple"] _1,
+   IF_ICMPNE                -- KW["if_icmpne"] _1,
+   IF_ICMPGT                -- KW["if_icmpgt"] _1,
+   IF_ICMPGE                -- KW["if_icmpge"] _1,
+   IF_ACMPEQ                -- KW["if_acmpeq"] _1,
+   IF_ACMPNE                -- KW["if_acmpne"] _1,
+   Table                    -- KW["tableswitch"] _1 _2 KW["default"] KW[":"] _3,
+   Table.2:iter-star        -- _1,
+   Lookup                   -- KW["lookupswitch"] _1 KW["default"] KW[":"] _2,
+   Lookup.1:iter-star       -- _1,
+   Jump                     -- _1,
+   NPAIR                    -- _1 KW[":"] _2,
+   GOTO                     -- KW["goto"] _1,
+   GOTO_W                   -- KW["goto_w"] _1,
+   POP                      -- KW["pop"],
+   POP2                     -- KW["pop2"],
+   DUP                      -- KW["dup"],
+   DUP2                     -- KW["dup2"],
+   DUP_X1                   -- KW["dup_x1"],
+   DUP2_X1                  -- KW["dup2_x1"],
+   DUP_X2                   -- KW["dup_x2"],
+   DUP2_X2                  -- KW["dup2_x2"],
+   SWAP                     -- KW["swap"],
+   NEW                      -- KW["new"] _1,
+   NEWARRAY                 -- KW["newarray"] _1,
+   ANEWARRAY                -- KW["anewarray"] _1,
+   ANEWARRAY                -- KW["anewarray"] _1,
+   MULTIANEWARRAY           -- KW["multianewarray"] _1 _2,
+   GETFIELD                 -- KW["getfield"] _1,
+   PUTFIELD                 -- KW["putfield"] _1,
+   GETSTATIC                -- KW["getstatic"] _1,
+   PUTSTATIC                -- KW["putstatic"] _1,
+   IALOAD                   -- KW["iaload"],
+   LALOAD                   -- KW["laload"],
+   BALOAD                   -- KW["baload"],
+   CALOAD                   -- KW["caload"],
+   SALOAD                   -- KW["saload"],
+   FALOAD                   -- KW["faload"],
+   DALOAD                   -- KW["daload"],
+   AALOAD                   -- KW["aaload"],
+   IASTORE                  -- KW["iastore"],
+   LASTORE                  -- KW["lastore"],
+   BASTORE                  -- KW["bastore"],
+   CASTORE                  -- KW["castore"],
+   SASTORE                  -- KW["sastore"],
+   FASTORE                  -- KW["fastore"],
+   DASTORE                  -- KW["dastore"],
+   AASTORE                  -- KW["aastore"],
+   ARRAYLENGTH              -- KW["arraylength"],
+   CHECKCAST                -- KW["checkcast"] _1,
+   INSTANCEOF               -- KW["instanceof"] _1,
+   I2L                      -- KW["i2l"],
+   I2F                      -- KW["i2f"],
+   I2D                      -- KW["i2d"],
+   L2F                      -- KW["l2f"],
+   L2D                      -- KW["l2d"],
+   F2D                      -- KW["f2d"],
+   I2B                      -- KW["int2byte"],
+   I2S                      -- KW["int2short"],
+   I2C                      -- KW["int2char"],
+   L2I                      -- KW["l2i"],
+   F2I                      -- KW["f2i"],
+   F2L                      -- KW["f2l"],
+   D2I                      -- KW["d2i"],
+   D2L                      -- KW["d2l"],
+   D2F                      -- KW["d2f"],
+   IADD                     -- KW["iadd"],
+   IAND                     -- KW["iand"],
+   IDIV                     -- KW["idiv"],
+   IMUL                     -- KW["imul"],
+   INEG                     -- KW["ineg"],
+   IOR                      -- KW["ior"],
+   IREM                     -- KW["irem"],
+   ISHL                     -- KW["ishl"],
+   ISHR                     -- KW["ishr"],
+   ISUB                     -- KW["isub"],
+   IUSHR                    -- KW["iushr"],
+   IXOR                     -- KW["ixor"],
+   LADD                     -- KW["ladd"],
+   LAND                     -- KW["land"],
+   LDIV                     -- KW["ldiv"],
+   LMUL                     -- KW["lmul"],
+   LNEG                     -- KW["lneg"],
+   LOR                      -- KW["lor"],
+   LREM                     -- KW["lrem"],
+   LSHL                     -- KW["lshl"],
+   LSHR                     -- KW["lshr"],
+   LSUB                     -- KW["lsub"],
+   LUSHR                    -- KW["lushr"],
+   LXOR                     -- KW["lxor"],
+   FADD                     -- KW["fadd"],
+   FDIV                     -- KW["fdiv"],
+   FMUL                     -- KW["fmul"],
+   FNEG                     -- KW["fneg"],
+   FREM                     -- KW["frem"],
+   FSUB                     -- KW["fsub"],
+   DADD                     -- KW["dadd"],
+   DDIV                     -- KW["ddiv"],
+   DMUL                     -- KW["dmul"],
+   DNEG                     -- KW["dneg"],
+   DREM                     -- KW["drem"],
+   DSUB                     -- KW["dsub"],
+   IINC                     -- KW["iinc"] _1 _2,
+   Neg                      -- KW["-"] _1,
+   FCMPG                    -- KW["fcmpg"],
+   FCMPL                    -- KW["fcmpl"],
+   DCMPG                    -- KW["dcmpg"],
+   DCMPL                    -- KW["dcmpl"],
+   LCMP                     -- KW["lcmp"],
+   BIPUSH                   -- KW["bipush"] _1,
+   SIPUSH                   -- KW["sipush"] _1,
+   ICONST_M1                -- KW["iconst_m1"],
+   ICONST_0                 -- KW["iconst_0"],
+   ICONST_1                 -- KW["iconst_1"],
+   ICONST_2                 -- KW["iconst_2"],
+   ICONST_3                 -- KW["iconst_3"],
+   ICONST_4                 -- KW["iconst_4"],
+   ICONST_5                 -- KW["iconst_5"],
+   LCONST_0                 -- KW["lconst_0"],
+   LCONST_1                 -- KW["lconst_1"],
+   FCONST_0                 -- KW["fconst_0"],
+   FCONST_1                 -- KW["fconst_1"],
+   FCONST_2                 -- KW["fconst_2"],
+   DCONST_0                 -- KW["dconst_0"],
+   DCONST_1                 -- KW["dconst_1"],
+   ACONST_NULL              -- KW["aconst_null"],
+   LDC                      -- KW["ldc"] _1,
+   LDC2_W                   -- KW["ldc2_w"] _1,
+   ILOAD                    -- KW["iload"] _1,
+   LLOAD                    -- KW["lload"] _1,
+   FLOAD                    -- KW["fload"] _1,
+   DLOAD                    -- KW["dload"] _1,
+   ALOAD                    -- KW["aload"] _1,
+   ILOAD_0                  -- KW["iload_0"],
+   ILOAD_1                  -- KW["iload_1"],
+   ILOAD_2                  -- KW["iload_2"],
+   ILOAD_3                  -- KW["iload_3"],
+   ALOAD_0                  -- KW["aload_0"],
+   ALOAD_1                  -- KW["aload_1"],
+   ALOAD_2                  -- KW["aload_2"],
+   ALOAD_3                  -- KW["aload_3"],
+   LLOAD_0                  -- KW["lload_0"],
+   LLOAD_1                  -- KW["lload_1"],
+   LLOAD_2                  -- KW["lload_2"],
+   LLOAD_3                  -- KW["lload_3"],
+   DLOAD_0                  -- KW["dload_0"],
+   DLOAD_1                  -- KW["dload_1"],
+   DLOAD_2                  -- KW["dload_2"],
+   DLOAD_3                  -- KW["dload_3"],
+   FLOAD_0                  -- KW["fload_0"],
+   FLOAD_1                  -- KW["fload_1"],
+   FLOAD_2                  -- KW["fload_2"],
+   FLOAD_3                  -- KW["fload_3"],
+   ISTORE                   -- KW["istore"] _1,
+   LSTORE                   -- KW["lstore"] _1,
+   FSTORE                   -- KW["fstore"] _1,
+   DSTORE                   -- KW["dstore"] _1,
+   ASTORE                   -- KW["astore"] _1,
+   ISTORE_0                 -- KW["istore_0"],
+   ISTORE_1                 -- KW["istore_1"],
+   ISTORE_2                 -- KW["istore_2"],
+   ISTORE_3                 -- KW["istore_3"],
+   ASTORE_0                 -- KW["astore_0"],
+   ASTORE_1                 -- KW["astore_1"],
+   ASTORE_2                 -- KW["astore_2"],
+   ASTORE_3                 -- KW["astore_3"],
+   LSTORE_0                 -- KW["lstore_0"],
+   LSTORE_1                 -- KW["lstore_1"],
+   LSTORE_2                 -- KW["lstore_2"],
+   LSTORE_3                 -- KW["lstore_3"],
+   FSTORE_0                 -- KW["fstore_0"],
+   FSTORE_1                 -- KW["fstore_1"],
+   FSTORE_2                 -- KW["fstore_2"],
+   FSTORE_3                 -- KW["fstore_3"],
+   DSTORE_0                 -- KW["dstore_0"],
+   DSTORE_1                 -- KW["dstore_1"],
+   DSTORE_2                 -- KW["dstore_2"],
+   DSTORE_3                 -- KW["dstore_3"],
+   NOP                      -- KW["nop"],
+   BREAKPOINT               -- KW["breakpoint"],
+   PC                       -- _1 KW[":"] _2,
+   JBCMethod                -- KW[".method"] _1 _2 _3 _4 KW[".end"] KW["method"],
+   JBCMethod.1:iter-star    -- _1,
+   JBCMethod.4:iter-star    -- _1,
+   PUBLIC                   -- KW["public"],
+   PRIVATE                  -- KW["private"],
+   PROTECTED                -- KW["protected"],
+   STATIC                   -- KW["static"],
+   FINAL                    -- KW["final"],
+   SYNCHRONIZED             -- KW["synchronized"],
+   NATIVE                   -- KW["native"],
+   ABSTRACT                 -- KW["abstract"],
+   JBCLabel                 -- _1 KW[":"],
+   JBCField                 -- KW[".field"] _1 _2 _3 _4 _5,
+   JBCField.1:iter-star     -- _1,
+   JBCExtField              -- KW[".field"] _1 _2 _3 _4 _5 KW[".end"] KW["field"],
+   JBCExtField.1:iter-star  -- _1,
+   JBCExtField.5:iter-star  -- _1,
+   JBCSignature             -- KW[".signature"] _1,
+   JBCDeprecated            -- KW[".deprecated"],
+   FieldSig                 -- KW["signature"] _1,
+   None                     -- ,
+   InitVal                  -- KW["="] _1,
+   None                     -- ,
+   PUBLIC                   -- KW["public"],
+   PRIVATE                  -- KW["private"],
+   PROTECTED                -- KW["protected"],
+   STATIC                   -- KW["static"],
+   FINAL                    -- KW["final"],
+   VOLATILE                 -- KW["volatile"],
+   TRANSIENT                -- KW["transient"],
+   JBCFieldDesc             -- _1,
+   Void                     -- KW["V"],
+   Byte                     -- KW["B"],
+   Char                     -- KW["C"],
+   Double                   -- KW["D"],
+   Float                    -- KW["F"],
+   Int                      -- KW["I"],
+   Long                     -- KW["J"],
+   Short                    -- KW["S"],
+   Boolean                  -- KW["Z"],
+   Init                     -- KW["<init>"],
+   VarNum                   -- _1,
+   LabelRef                 -- _1,
+   ByteName                 -- KW["byte"],
+   CharName                 -- KW["char"],
+   DoubleName               -- KW["double"],
+   FloatName                -- KW["float"],
+   IntName                  -- KW["int"],
+   LongName                 -- KW["long"],
+   ShortName                -- KW["short"],
+   BooleanName              -- KW["boolean"],
+   JBCHeader                -- _1 _2 _3 _4 _5 _6 _7 _8,
+   JBCHeader.5:iter-star    -- _1,
+   JBCVersion               -- KW[".bytecode"] _1 _2,
+   None                     -- ,
+   Major                    -- _1,
+   Minor                    -- KW["."] _1,
+   None                     -- ,
+   JBCSource                -- KW[".source"] _1,
+   None                     -- ,
+   JBCClass                 -- V  [V vs=2 [KW[".class"] _1] _2],
+   JBCClass.1:iter-star     -- _1,
+   JBCInterface             -- V  [V vs=2 [KW[".interface"] _1] _2],
+   JBCInterface.1:iter-star -- _1,
+   PUBLIC                   -- KW["public"],
+   FINAL                    -- KW["final"],
+   INTERFACE                -- KW["interface"],
+   ABSTRACT                 -- KW["abstract"],
+   SUPER                    -- KW["super"],
+   JBCSuper                 -- KW[".super"] _1,
+   JBCImplements            -- KW[".implements"] _1,
+   JBCSignature             -- KW[".signature"] _1,
+   None                     -- ,
+   JBCEnclosing             -- KW[".enclosing"] KW["method"] _1,
+   None                     -- ,
+   JBCDeprecated            -- KW[".deprecated"],
+   None                     -- ,
+   JBCFile                  -- _1 _2 _3,
+   JBCFile.2:iter-star      -- _1,
+   JBCFile.3:iter-star      -- _1
+]
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT.pp	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,84 @@
+[
+   JBCLimitStack             -- H [KW[".limit"] KW["stack"] _1],
+   JBCLimitLocals            -- H [KW[".limit"] KW["locals"] _1],
+   JBCLine                   -- H [KW[".line"] _1],
+   JBCThrows                 -- H [KW[".throws"] _1],
+   JBCCatch                  -- H [KW[".catch"] _1 KW["from"] _2 KW["to"] _3 KW["using"] _4],
+   JBCVarDecl                -- H [KW[".var"] _1 KW["is"] _2 _3 KW["from"] _4 KW["to"] _5],
+   INVOKESPECIAL             -- H [KW["invokenonvirtual"] _1],
+   INVOKEVIRTUAL             -- H [KW["invokevirtual"] _1],
+   INVOKESTATIC              -- H [KW["invokestatic"] _1],
+   INVOKEINTERFACE           -- H [KW["invokeinterface"] _1 _2],
+   RelativeFwd               -- H [KW["$+"] _1],
+   RelativeBwd               -- H [KW["$-"] _1],
+   IFEQ                      -- H [KW["ifeq"] _1],
+   IFLT                      -- H [KW["iflt"] _1],
+   IFLE                      -- H [KW["ifle"] _1],
+   IFNE                      -- H [KW["ifne"] _1],
+   IFGT                      -- H [KW["ifgt"] _1],
+   IFGE                      -- H [KW["ifge"] _1],
+   IFNULL                    -- H [KW["ifnull"] _1],
+   IFNONNULL                 -- H [KW["ifnonnull"] _1],
+   IF_ICMPEQ                 -- H [KW["if_icmpeq"] _1],
+   IF_ICMPLT                 -- H [KW["if_icmplt"] _1],
+   IF_ICMPLE                 -- H [KW["if_icmple"] _1],
+   IF_ICMPNE                 -- H [KW["if_icmpne"] _1],
+   IF_ICMPGT                 -- H [KW["if_icmpgt"] _1],
+   IF_ICMPGE                 -- H [KW["if_icmpge"] _1],
+   IF_ACMPEQ                 -- H [KW["if_acmpeq"] _1],
+   IF_ACMPNE                 -- H [KW["if_acmpne"] _1],
+   Table                     -- H [KW["tableswitch"] _1 _2 KW["default"] KW[":"] _3],
+   Lookup                    -- H [KW["lookupswitch"] _1 KW["default"] KW[":"] _2],
+   NPAIR                     -- H [_1 KW[":"] _2],
+   GOTO                      -- H [KW["goto"] _1],
+   GOTO_W                    -- H [KW["goto_w"] _1],
+   NEW                       -- H [KW["new"] _1],
+   NEWARRAY                  -- H [KW["newarray"] _1],
+   ANEWARRAY                 -- H [KW["anewarray"] _1],
+   ANEWARRAY                 -- H [KW["anewarray"] _1],
+   MULTIANEWARRAY            -- H [KW["multianewarray"] _1 _2],
+   GETFIELD                  -- H [KW["getfield"] _1],
+   PUTFIELD                  -- H [KW["putfield"] _1],
+   GETSTATIC                 -- H [KW["getstatic"] _1],
+   PUTSTATIC                 -- H [KW["putstatic"] _1],
+   CHECKCAST                 -- H [KW["checkcast"] _1],
+   INSTANCEOF                -- H [KW["instanceof"] _1],
+   IINC                      -- H [KW["iinc"] _1 _2],
+   Neg                       -- H [KW["-"] _1],
+   BIPUSH                    -- H [KW["bipush"] _1],
+   SIPUSH                    -- H [KW["sipush"] _1],
+   LDC                       -- H [KW["ldc"] _1],
+   LDC2_W                    -- H [KW["ldc2_w"] _1],
+   ILOAD                     -- H [KW["iload"] _1],
+   LLOAD                     -- H [KW["lload"] _1],
+   FLOAD                     -- H [KW["fload"] _1],
+   DLOAD                     -- H [KW["dload"] _1],
+   ALOAD                     -- H [KW["aload"] _1],
+   ISTORE                    -- H [KW["istore"] _1],
+   LSTORE                    -- H [KW["lstore"] _1],
+   FSTORE                    -- H [KW["fstore"] _1],
+   DSTORE                    -- H [KW["dstore"] _1],
+   ASTORE                    -- H [KW["astore"] _1],
+   PC                        -- H [_1 KW[":"] _2],
+   JBCMethod                 -- V [V is=4[H [KW[".method"] _1 H hs=0 [_2 _3]] _4] H [KW[".end"] KW["method"]]],
+   JBCLabel                  -- H [_1 KW[":"]],
+   JBCField                  -- H [KW[".field"] _1 _2 _3 _4 _5],
+   JBCExtField               -- KW[".field"] _1 _2 _3 _4 _5 KW[".end"] KW["field"],
+   JBCSignature              -- H [KW[".signature"] _1],
+   FieldSig                  -- H [KW["signature"] _1],
+   JBCMethodDesc             -- H hs=0 [KW["("] _1 KW[")"] _2],
+   Reference                 -- H hs=0[KW["L"] _1 KW[";"]],
+   Array                     -- H hs=0[KW["["] _1],
+   JBCFieldRef               -- H [H hs=0 [_1 KW["/"] _2] _3],
+   JBCMethodRef              -- H hs=0[_1 KW["/"] _2 _3],
+   JBCHeader                 -- V vs=0[_1 _2 _3 _4 _5 _6 _7 _8],
+   JBCVersion                -- H [KW[".bytecode"] _1 _2],
+   JBCSource                 -- H [KW[".source"] _1],
+   JBCClass                  -- H  [H hs=1 [KW[".class"] _1] _2],
+   JBCInterface              -- V  [V vs=2 [KW[".interface"] _1] _2],
+   JBCSuper                  -- H [KW[".super"] _1],
+   JBCImplements             -- H [KW[".implements"] _1],
+   JBCSignature              -- H [KW[".signature"] _1],
+   JBCEnclosing              -- H [KW[".enclosing"] KW["method"] _1],
+   JBCFile                   -- V vs=1[_1 _2 _3]
+]
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/JasminXT.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,22 @@
+module JasminXT
+
+imports
+	
+	lexical/JasminXT-Whitespace
+	JasminXT-Header
+	JasminXT-Fields
+	JasminXT-Methods
+	
+exports
+
+	context-free start-symbols
+		Start
+
+	context-free syntax
+  
+		JasminFile		-> Start 
+		
+		JasminHeader 
+		%%Inners
+		Field* 
+		Method* -> JasminFile {cons("JBCFile")}

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Arithmetic.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Arithmetic.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,68 @@
+module instructions/JasminXT-Arithmetic
+
+imports
+	
+	lexical/JasminXT-Names
+	lexical/JasminXT-Numbers
+	
+exports
+	context-free syntax
+		
+		"iadd" 	-> Instruction {cons("IADD")}
+		"iand" 	-> Instruction {cons("IAND")}
+		"idiv" 	-> Instruction {cons("IDIV")}
+		"imul" 	-> Instruction {cons("IMUL")}
+		"ineg" 	-> Instruction {cons("INEG")}
+		"ior"  	-> Instruction {cons("IOR")}
+		"irem" 	-> Instruction {cons("IREM")}
+		"ishl" 	-> Instruction {cons("ISHL")}
+		"ishr" 	-> Instruction {cons("ISHR")}
+		"isub" 	-> Instruction {cons("ISUB")}
+		"iushr" -> Instruction {cons("IUSHR")}
+		"ixor" 	-> Instruction {cons("IXOR")}
+		
+		"ladd" 	-> Instruction {cons("LADD")}
+		"land" 	-> Instruction {cons("LAND")}
+		"ldiv" 	-> Instruction {cons("LDIV")}
+		"lmul" 	-> Instruction {cons("LMUL")}
+		"lneg" 	-> Instruction {cons("LNEG")}
+		"lor" 	-> Instruction {cons("LOR")}
+		"lrem" 	-> Instruction {cons("LREM")}
+		"lshl" 	-> Instruction {cons("LSHL")}
+		"lshr" 	-> Instruction {cons("LSHR")}
+		"lsub" 	-> Instruction {cons("LSUB")}
+		"lushr" -> Instruction {cons("LUSHR")}
+		"lxor" 	-> Instruction {cons("LXOR")}
+		
+		"fadd" 	-> Instruction {cons("FADD")}
+		"fdiv" 	-> Instruction {cons("FDIV")}
+		"fmul" 	-> Instruction {cons("FMUL")}
+		"fneg" 	-> Instruction {cons("FNEG")}
+		"frem" 	-> Instruction {cons("FREM")}
+		"fsub" 	-> Instruction {cons("FSUB")}
+
+		"dadd" 	-> Instruction {cons("DADD")}
+		"ddiv" 	-> Instruction {cons("DDIV")}
+		"dmul" 	-> Instruction {cons("DMUL")}
+		"dneg" 	-> Instruction {cons("DNEG")}		
+		"drem" 	-> Instruction {cons("DREM")}
+		"dsub" 	-> Instruction {cons("DSUB")}
+		
+		"iinc" VarRef Amount -> Instruction {cons("IINC")}
+    
+    	Int 	-> Amount
+    	"-" Int -> Amount {cons("Neg")}
+    	
+    	"fcmpg" -> Instruction {cons("FCMPG")}
+    	"fcmpl" -> Instruction {cons("FCMPL")}
+    	
+    	"dcmpg" -> Instruction {cons("DCMPG")}
+    	"dcmpl" -> Instruction {cons("DCMPL")}
+    	
+    	"lcmp" 	-> Instruction {cons("LCMP")}
+    	
+    lexical restrictions
+    	
+     	"iinc" -/- ~[\ \t]
+  
+	    
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Control.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Control.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,71 @@
+module instructions/JasminXT-Control
+
+imports
+	lexical/JasminXT-Names
+	lexical/JasminXT-Numbers
+	
+exports
+	
+	context-free syntax
+		
+		Int			-> LabelRef {cons("Absolute")}
+		"$+" Int	-> RelOffset {cons("RelativeFwd")}
+		"$-" Int	-> RelOffset {cons("RelativeBwd")}
+		
+		LabelRef	-> Target
+		RelOffset	-> Target
+		
+	context-free syntax
+		
+		"ifeq" Target 		-> Instruction {cons("IFEQ")} 
+		"iflt" Target 		-> Instruction {cons("IFLT")} 
+		"ifle" Target 		-> Instruction {cons("IFLE")} 
+		"ifne" Target 		-> Instruction {cons("IFNE")} 
+		"ifgt" Target 		-> Instruction {cons("IFGT")} 
+		"ifge" Target 		-> Instruction {cons("IFGE")} 
+		"ifnull" Target 	-> Instruction {cons("IFNULL")} 
+		"ifnonnull" Target 	-> Instruction {cons("IFNONNULL")} 
+		"if_icmpeq" Target 	-> Instruction {cons("IF_ICMPEQ")} 
+		"if_icmplt" Target 	-> Instruction {cons("IF_ICMPLT")} 
+		"if_icmple" Target 	-> Instruction {cons("IF_ICMPLE")} 
+		"if_icmpne" Target 	-> Instruction {cons("IF_ICMPNE")} 
+		"if_icmpgt" Target 	-> Instruction {cons("IF_ICMPGT")} 
+		"if_icmpge" Target 	-> Instruction {cons("IF_ICMPGE")} 
+		"if_acmpeq" Target 	-> Instruction {cons("IF_ACMPEQ")} 
+		"if_acmpne" Target 	-> Instruction {cons("IF_ACMPNE")} 
+		
+		"tableswitch"  Int TableEntry*  "default" ":" LabelRef -> Instruction {cons("Table")}
+		"lookupswitch"     LookupEntry* "default" ":" LabelRef -> Instruction {cons("Lookup")}
+		
+		LabelRef         -> TableEntry {cons("Jump")}
+		Int ":" LabelRef -> LookupEntry {cons("NPAIR")}
+		
+  		"goto" LabelRef   -> Instruction {cons("GOTO")}
+		"goto_w" LabelRef -> Instruction {cons("GOTO_W")}
+			
+	lexical restrictions
+		
+		"ifeq" 
+		"iflt" 
+		"ifle" 
+		"ifne" 
+		"ifgt" 
+		"ifge" 
+		"ifnull" 
+		"ifnonnull" 
+		"if_icmpeq" 
+		"if_icmplt" 
+		"if_icmple" 
+		"if_icmpne" 
+		"if_icmpgt" 
+		"if_icmpge" 
+		"if_acmpeq" 
+		"if_acmpne"
+		"tableswitch"
+		"goto" 	
+		"goto_w"		-/- ~[\ \t]
+		
+
+    	%% jsr  <label>
+	    %% jsr_w  <label>
+	    
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Conversion.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Conversion.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,24 @@
+module instructions/JasminXT-Conversion
+
+exports
+	
+	context-free syntax
+		
+		"i2l" -> Instruction {cons("I2L")}
+		"i2f" -> Instruction {cons("I2F")}
+		"i2d" -> Instruction {cons("I2D")}
+		"l2f" -> Instruction {cons("L2F")}
+		"l2d" -> Instruction {cons("L2D")}
+		"f2d" -> Instruction {cons("F2D")}
+		
+		"int2byte" 	-> Instruction {cons("I2B")} %% TODO: recover i2b, i2s, i2c
+		"int2short" -> Instruction {cons("I2S")}
+		"int2char" 	-> Instruction {cons("I2C")}
+		
+		"l2i" -> Instruction {cons("L2I")}
+		"f2i" -> Instruction {cons("F2I")}
+		"f2l" -> Instruction {cons("F2L")}
+		"d2i" -> Instruction {cons("D2I")}
+		"d2l" -> Instruction {cons("D2L")}
+		"d2f" -> Instruction {cons("D2F")}
+		    
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Exceptions.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Exceptions.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,7 @@
+module instructions/JasminXT-Exceptions
+
+exports
+
+	context-free syntax
+		
+		"athrow" -> Instruction {cons("ATHROW")}

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Instructions.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Instructions.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,22 @@
+module instructions/JasminXT-Instructions
+
+imports
+
+	instructions/JasminXT-LoadStore
+	instructions/JasminXT-Arithmetic
+	instructions/JasminXT-Conversion
+	instructions/JasminXT-Objects
+	instructions/JasminXT-Stack
+	instructions/JasminXT-Control
+	instructions/JasminXT-Methods
+	instructions/JasminXT-Exceptions
+	instructions/JasminXT-Synchronisation
+	
+exports
+	context-free syntax
+		
+		"nop" 		 -> Instruction {cons("NOP")}
+		"breakpoint" -> Instruction {cons("BREAKPOINT")}
+
+		Int ":" Instruction -> PCInstruction {cons("PC")}
+				Instruction -> PCInstruction
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-LoadStore.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-LoadStore.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,112 @@
+module instructions/JasminXT-LoadStore
+
+imports
+	
+	lexical/JasminXT-Names
+	lexical/JasminXT-Numbers
+	lexical/JasminXT-Strings
+	
+exports
+	
+	context-free syntax
+		
+		"bipush" Int -> Instruction {cons("BIPUSH")} %% pushes a byte onto the stack as an integer value
+		"sipush" Int -> Instruction {cons("SIPUSH")} %% pushes a signed integer onto the stack
+		
+		"iconst_m1" -> Instruction {cons("ICONST_M1")} %% loads the int value -1 onto the stack
+		"iconst_0" -> Instruction {cons("ICONST_0")} %% loads the int value 0 onto the stack
+		"iconst_1" -> Instruction {cons("ICONST_1")} %% loads the int value 1 onto the stack
+		"iconst_2" -> Instruction {cons("ICONST_2")} %% loads the int value 2 onto the stack
+		"iconst_3" -> Instruction {cons("ICONST_3")} %% loads the int value 3 onto the stack
+		"iconst_4" -> Instruction {cons("ICONST_4")} %% loads the int value 4 onto the stack
+		"iconst_5" -> Instruction {cons("ICONST_5")} %% loads the int value 5 onto the stack
+		
+		"lconst_0" -> Instruction {cons("LCONST_0")} %% pushes the long 0 onto the stack
+		"lconst_1" -> Instruction {cons("LCONST_1")} %% pushes the long 1 onto the stack
+
+		"fconst_0" -> Instruction {cons("FCONST_0")} %% pushes 0.0f on the stack
+		"fconst_1" -> Instruction {cons("FCONST_1")} %% pushes 1.0f on the stack
+		"fconst_2" -> Instruction {cons("FCONST_2")} %% pushes 2.0f on the stack
+		
+		"dconst_0" -> Instruction {cons("DCONST_0")} %% pushes the constant 0.0 onto the stack
+		"dconst_1" -> Instruction {cons("DCONST_1")} %% pushes the constant 1.0 onto the stack
+		
+		"aconst_null" -> Instruction {cons("ACONST_NULL")} %% pushes a null reference onto the stack
+		
+		"ldc"    Constant -> Instruction {cons("LDC")} %% pushes a constant from a constant pool (String, int or float) onto the stack
+    	"ldc2_w" Constant -> Instruction {cons("LDC2_W")} %% pushes a constant from a constant pool (double or long) onto the stack
+				
+		"iload" VarRef -> Instruction {cons("ILOAD")} %% loads an int value from a local variable
+		"lload" VarRef -> Instruction {cons("LLOAD")} %% loads a long value from a local variable
+		"fload" VarRef -> Instruction {cons("FLOAD")} %% loads a float value from a local variable
+		"dload" VarRef -> Instruction {cons("DLOAD")} %% loads a double value from a local variable
+		"aload" VarRef -> Instruction {cons("ALOAD")} %% loads a reference from a local variable
+		
+		"iload_0" -> Instruction {cons("ILOAD_0")} 
+		"iload_1" -> Instruction {cons("ILOAD_1")} 
+		"iload_2" -> Instruction {cons("ILOAD_2")} 
+		"iload_3" -> Instruction {cons("ILOAD_3")} 
+
+		"aload_0" -> Instruction {cons("ALOAD_0")} 
+		"aload_1" -> Instruction {cons("ALOAD_1")} 
+		"aload_2" -> Instruction {cons("ALOAD_2")} 
+		"aload_3" -> Instruction {cons("ALOAD_3")} 
+		
+		"lload_0" -> Instruction {cons("LLOAD_0")} 
+		"lload_1" -> Instruction {cons("LLOAD_1")} 
+		"lload_2" -> Instruction {cons("LLOAD_2")} 
+		"lload_3" -> Instruction {cons("LLOAD_3")} 
+
+		"dload_0" -> Instruction {cons("DLOAD_0")} 
+		"dload_1" -> Instruction {cons("DLOAD_1")} 
+		"dload_2" -> Instruction {cons("DLOAD_2")} 
+		"dload_3" -> Instruction {cons("DLOAD_3")} 
+		
+		"fload_0" -> Instruction {cons("FLOAD_0")} 
+		"fload_1" -> Instruction {cons("FLOAD_1")} 
+		"fload_2" -> Instruction {cons("FLOAD_2")} 
+		"fload_3" -> Instruction {cons("FLOAD_3")} 
+
+		"istore" VarRef -> Instruction {cons("ISTORE")} %% stores an int value into a local variable
+		"lstore" VarRef -> Instruction {cons("LSTORE")} %% stores a long value into a local variable
+		"fstore" VarRef -> Instruction {cons("FSTORE")} %% stores a float value into a local variable
+		"dstore" VarRef -> Instruction {cons("DSTORE")} %% stores a double value into a local variable
+		"astore" VarRef -> Instruction {cons("ASTORE")} %% stores a reference into a local variable
+
+		"istore_0" -> Instruction {cons("ISTORE_0")} 
+		"istore_1" -> Instruction {cons("ISTORE_1")} 
+		"istore_2" -> Instruction {cons("ISTORE_2")} 
+		"istore_3" -> Instruction {cons("ISTORE_3")} 
+
+		"astore_0" -> Instruction {cons("ASTORE_0")} 
+		"astore_1" -> Instruction {cons("ASTORE_1")} 
+		"astore_2" -> Instruction {cons("ASTORE_2")} 
+		"astore_3" -> Instruction {cons("ASTORE_3")} 
+		
+		"lstore_0" -> Instruction {cons("LSTORE_0")} 
+		"lstore_1" -> Instruction {cons("LSTORE_1")} 
+		"lstore_2" -> Instruction {cons("LSTORE_2")} 
+		"lstore_3" -> Instruction {cons("LSTORE_3")} 
+
+		"fstore_0" -> Instruction {cons("FSTORE_0")} 
+		"fstore_1" -> Instruction {cons("FSTORE_1")} 
+		"fstore_2" -> Instruction {cons("FSTORE_2")} 
+		"fstore_3" -> Instruction {cons("FSTORE_3")} 
+		
+		"dstore_0" -> Instruction {cons("DSTORE_0")} 
+		"dstore_1" -> Instruction {cons("DSTORE_1")} 
+		"dstore_2" -> Instruction {cons("DSTORE_2")} 
+		"dstore_3" -> Instruction {cons("DSTORE_3")} 
+
+	lexical restrictions
+		
+		"iload"
+		"lload"
+		"fload"
+		"dload"
+		"aload"
+		"istore"
+		"lstore"
+		"fstore"
+		"dstore"
+		"astore" -/- ~[\ \t]

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Methods.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Methods.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,30 @@
+module instructions/JasminXT-Methods
+
+imports
+	lexical/JasminXT-Names
+	lexical/JasminXT-Descriptors
+	
+exports
+	context-free syntax
+				
+		"invokenonvirtual" MethodRef		-> Instruction {cons("INVOKESPECIAL")}
+		"invokevirtual"    MethodRef 		-> Instruction {cons("INVOKEVIRTUAL")}
+		"invokestatic"     MethodRef		-> Instruction {cons("INVOKESTATIC")}
+		"invokeinterface"  MethodRef Int	-> Instruction {cons("INVOKEINTERFACE")}
+		
+		"return"  -> Instruction {cons("RETURN")}   
+		"ireturn" -> Instruction {cons("IRETURN")} 
+		"lreturn" -> Instruction {cons("LRETURN")} 
+		"freturn" -> Instruction {cons("FRETURN")} 
+		"dreturn" -> Instruction {cons("DRETURN")} 
+		"areturn" -> Instruction {cons("ARETURN")} 
+
+	lexical restrictions
+		
+		"invokenonvirtual"
+		"invokevirtual"
+		"invokestatic"
+		"invokeinterface" -/- ~[\ \t]
+
+	%% ret <var-num>
+	    

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Objects.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Objects.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,60 @@
+module instructions/JasminXT-Objects
+
+imports
+	
+	lexical/JasminXT-Names
+	lexical/JasminXT-Numbers
+	lexical/JasminXT-Descriptors
+	
+exports
+	context-free syntax
+		
+		"new" ClassName -> Instruction {cons("NEW")}
+		
+		"newarray"       BaseTypeName 	-> Instruction {cons("NEWARRAY")}
+		"anewarray"      ClassName		-> Instruction {cons("ANEWARRAY")}
+		"anewarray"      ArrayType		-> Instruction {cons("ANEWARRAY")}
+		"multianewarray" ArrayType Int	-> Instruction {cons("MULTIANEWARRAY")}
+
+		"getfield"  FieldRef -> Instruction {cons("GETFIELD")}
+		"putfield"  FieldRef -> Instruction {cons("PUTFIELD")}
+		"getstatic" FieldRef -> Instruction {cons("GETSTATIC")}
+		"putstatic" FieldRef -> Instruction {cons("PUTSTATIC")}
+	
+		"iaload" -> Instruction {cons("IALOAD")}
+		"laload" -> Instruction {cons("LALOAD")}
+		"baload" -> Instruction {cons("BALOAD")}
+		"caload" -> Instruction {cons("CALOAD")}
+		"saload" -> Instruction {cons("SALOAD")}
+		"faload" -> Instruction {cons("FALOAD")}
+		"daload" -> Instruction {cons("DALOAD")}
+		"aaload" -> Instruction {cons("AALOAD")}
+
+		"iastore" -> Instruction {cons("IASTORE")}
+		"lastore" -> Instruction {cons("LASTORE")}
+		"bastore" -> Instruction {cons("BASTORE")}
+		"castore" -> Instruction {cons("CASTORE")}
+		"sastore" -> Instruction {cons("SASTORE")}
+		"fastore" -> Instruction {cons("FASTORE")}
+		"dastore" -> Instruction {cons("DASTORE")}
+		"aastore" -> Instruction {cons("AASTORE")}
+		
+		"arraylength" -> Instruction {cons("ARRAYLENGTH")}
+		
+		"checkcast" ClassName  -> Instruction {cons("CHECKCAST")}
+		"instanceof" ClassName -> Instruction {cons("INSTANCEOF")}
+    
+    
+	lexical restrictions
+		
+		"new"
+		"newarray"
+		"anewarray"
+		"multianewarray"
+		"getfield"
+		"putfield"
+		"getstatic"
+		"putstatic"
+		"checkcast"
+		"instanceof"-/- ~[\ \t]
+    
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Stack.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Stack.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,15 @@
+module instructions/JasminXT-Stack
+
+exports
+	
+	context-free syntax
+		
+		"pop"     -> Instruction {cons("POP")}
+		"pop2"    -> Instruction {cons("POP2")}    
+		"dup"     -> Instruction {cons("DUP")}
+		"dup2"    -> Instruction {cons("DUP2")}
+		"dup_x1"  -> Instruction {cons("DUP_X1")}
+		"dup2_x1" -> Instruction {cons("DUP2_X1")}
+		"dup_x2"  -> Instruction {cons("DUP_X2")}
+		"dup2_x2" -> Instruction {cons("DUP2_X2")}
+		"swap"    -> Instruction {cons("SWAP")}

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Synchronisation.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/instructions/JasminXT-Synchronisation.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,8 @@
+module instructions/JasminXT-Synchronisation
+
+exports
+
+	context-free syntax
+		
+		"monitorenter" -> Instruction {cons("MONITORENTER")}
+		"monitorexit"  -> Instruction {cons("MONITOREXIT")}

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Descriptors.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Descriptors.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,40 @@
+module lexical/JasminXT-Descriptors
+
+imports lexical/JasminXT-Names
+
+exports 
+
+	%% Chapter 4	: The class File Format
+	%% Section 4.3	: Descriptors
+	
+	context-free syntax
+		
+		FieldType 	-> FieldDescriptor {cons("JBCFieldDesc")}
+		
+		FieldType	-> ParameterDescriptor
+		
+		FieldType 	-> ReturnDescriptor
+		"V"			-> ReturnDescriptor {cons("Void")}
+
+		BaseType	-> FieldType
+		ObjectType	-> FieldType
+		ArrayType	-> FieldType
+		
+		"B" 	-> BaseType {cons("Byte")}
+		"C" 	-> BaseType {cons("Char")}
+		"D" 	-> BaseType {cons("Double")}
+		"F" 	-> BaseType {cons("Float")}
+		"I" 	-> BaseType {cons("Int")}
+		"J" 	-> BaseType {cons("Long")}
+		"S" 	-> BaseType {cons("Short")}
+		"Z" 	-> BaseType {cons("Boolean")}
+
+	syntax %% avoid whitespaces in method descriptors, reference types, array types
+		
+		"(" <ParameterDescriptor-CF>* ")" <ReturnDescriptor-CF> -> <MethodDescriptor-CF> {cons("JBCMethodDesc")}
+				
+		"L" <ClassName-CF> ";"	-> <ObjectType-CF> {cons("Reference")}
+		
+		"[" <ComponentType-CF> 	-> <ArrayType-CF> {cons("Array")}
+
+		<FieldType-CF> 	-> <ComponentType-CF>
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Names.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Names.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,60 @@
+module lexical/JasminXT-Names
+
+imports 
+	
+	lexical/JasminXT-Numbers
+	lexical/JasminXT-Descriptors
+	
+exports
+	
+	lexical syntax
+		
+		[A-Za-z] [A-Za-z0-9]* 	-> Identifier
+		
+		Identifier				-> SQIdentifier
+		"'" Identifier "'"		-> SQIdentifier
+		
+		{Identifier "/"}+ 		-> QualifiedName
+		
+		~[\=\:\.\"\-\ \t\n\r]+	-> LabelName
+		
+	lexical restrictions
+		
+		Identifier -/- [a-zA-Z0-9]
+		LabelName -/- ~[\=\:\.\"\-\ \t\n\r]
+		
+	context-free syntax
+		
+		QualifiedName 	-> ClassName
+		
+		Identifier		-> FieldName
+		
+		Identifier		-> MethodName
+		"<init>"		-> MethodName {cons("Init")}
+		
+		SQIdentifier		-> VarName
+		
+	syntax
+		
+		<ClassName-CF> "/" <FieldName-CF> <LAYOUT?-CF> <FieldDescriptor-CF>  -> <FieldRef-CF> {cons("JBCFieldRef")}
+			
+		<ClassName-CF> "/" <MethodName-CF> 			   <MethodDescriptor-CF> -> <MethodRef-CF> {cons("JBCMethodRef")}
+
+	context-free syntax
+		
+		%%VarName     -> VarRef	{cons("VarRef")}
+		Int			-> VarRef	{cons("VarNum")}
+		
+		LabelName 	-> LabelRef {cons("LabelRef")}
+		
+		"byte" 				-> BaseTypeName {cons("ByteName")}
+		"char" 				-> BaseTypeName {cons("CharName")}
+		"double" 			-> BaseTypeName {cons("DoubleName")}
+		"float"				-> BaseTypeName {cons("FloatName")}
+		"int" 				-> BaseTypeName {cons("IntName")}
+		"long" 				-> BaseTypeName {cons("LongName")}
+		"short"				-> BaseTypeName {cons("ShortName")}
+		"boolean"			-> BaseTypeName {cons("BooleanName")}
+		
+		
+		
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Numbers.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Numbers.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,15 @@
+module lexical/JasminXT-Numbers
+
+exports
+	
+	lexical syntax
+		
+		[0-9] [0-9]* 	-> Int
+		
+	lexical restrictions
+		
+		Int -/- [0-9]
+
+	context-free syntax
+		
+		Int -> Constant
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Signatures.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Signatures.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,14 @@
+module lexical/JasminXT-Signatures
+
+imports 
+	
+	lexical/JasminXT-Strings
+	lexical/JasminXT-Descriptors
+	
+exports
+	
+	lexical syntax
+		
+		String -> ClassSignature
+		String -> FieldSignature
+		
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Strings.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Strings.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,18 @@
+module lexical/JasminXT-Strings
+
+exports
+	
+	lexical syntax
+		
+		'"' StringChar* '"' 	-> String
+    	
+		~[\"\\\n\r]				-> StringChar
+    	[\\] [nrtfb\"\'\\]		-> StringChar
+    	
+		[\\] 'u' HexDigit HexDigit HexDigit HexDigit	-> StringChar
+	
+		[0-9a-fA-F] -> HexDigit
+		
+	context-free syntax
+		
+		String -> Constant
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Whitespace.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/syntax/lexical/JasminXT-Whitespace.sdf	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,22 @@
+module lexical/JasminXT-Whitespace
+
+exports
+
+	lexical syntax
+  
+		[\ \t\n\r] 	-> LAYOUT
+		";" [\n\r] 							-> LAYOUT
+		";" [\ \t] ~[\n\r]* ([\n\r] | EOF) 	-> LAYOUT
+    
+		-> EOF
+  
+	lexical restrictions
+    
+		EOF -/- ~[]
+ 
+	context-free restrictions
+  
+		LAYOUT? -/- [\ \t\n\r]
+		LAYOUT? -/- [\;].[\ \t]
+		LAYOUT? -/- [\;].[\n\r]
+    

Added: spoofax-contrib/jasmin-spoofax/trunk/test/ANewArray.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/ANewArray.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,55 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/ANewArray.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Shows how to use anewarray instruction
+; -------------------------------------------------------------------------
+;
+; This class demonstrates how to allocate a multidimensional
+; array using anewarray.
+;
+
+.class public ANewArray
+.super java/lang/Object
+
+.method public <init>()V
+   aload_0
+   invokenonvirtual java/lang/Object/<init>()V
+   return
+.end method
+
+.method public static main([Ljava/lang/String;)V
+   .limit stack 4
+   .limit locals 2
+   .var 1 is 'ret' [Ljava/lang/String; from start to end
+   
+    ;
+    ; Allocates an array like:
+    ;      String x[][] = new String[2][5]
+    ;
+
+    ; Allocate spine for array and store it in local var 1
+    ; (i.e. String[2][])
+
+    start:
+    iconst_2
+    anewarray [Ljava/lang/String;
+    astore_1
+
+    ; allocate first array of String[5] and store it in index 0
+    aload_1
+    iconst_0
+    bipush 5
+    anewarray java/lang/String
+    aastore
+
+    ; allocate second array of String[5] and store it in index 1
+    aload_1
+    iconst_1
+    bipush 5
+    anewarray java/lang/String
+    aastore
+
+    ; done ...
+    end:
+    return
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/AnInterface.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/AnInterface.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,31 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/AnInterface.j
+; Author:    Jonathan Meyer, 1 Oct 1996
+; Purpose:   A Java interface written in Jasmin
+; -------------------------------------------------------------------------
+
+;
+; This file shows how to use Jasmin to define an interface. It
+; is like the Java code:
+; 
+; interface public examples.AnInterface {
+;     void foo();
+; }
+;
+; See examples.Implementor for an example of a class that implements
+; this interface.
+;
+
+.class public examples/AnInterface
+.super java/lang/Object     
+
+; (Interfaces should either inherit from Object, or from 
+;  another interface.)
+
+;
+; declare abstract method foo() - note that the method body is empty.
+;
+.method abstract foo()V
+.end method
+
+

Added: spoofax-contrib/jasmin-spoofax/trunk/test/Arrays.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/Arrays.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,53 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/Arrays.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Example using JVM's anewarray and aaload/aastore
+; -------------------------------------------------------------------------
+
+;
+; This illustrates how to use the various JVM array instructions - though
+; it doesn't actually do anything very interesting with the arrays.
+;
+
+.class public Arrays
+.super java/lang/Object
+
+; standard initializer
+.method public <init>()V
+   aload_0
+   invokenonvirtual java/lang/Object/<init>()V
+   return
+.end method
+
+.method public static main([Ljava/lang/String;)V
+   .limit locals 2
+   .limit stack 4
+
+   ; creates a new array of strings,
+   ; like:
+   ;      String[] myarray = new String[2];
+   iconst_2
+   anewarray java/lang/String
+   astore_1  ; stores this in local variable 1
+
+   ; this is like the code:
+   ;      myarray[0] = args[0];
+
+   aload_1     ; push my array on the stack
+   iconst_0
+   aload_0     ; push the array argument to main() on the stack
+   iconst_0
+   aaload      ; get its zero'th entry
+   aastore     ; and store it in my zero'th entry
+
+   ; now print out myarray[0]
+
+   getstatic java/lang/System/out Ljava/io/PrintStream;
+   aload_1
+   iconst_0
+   aaload
+   invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V
+
+   ; done
+   return
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/Catch.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/Catch.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,79 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/Catch.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Catching and throwing exceptions
+; -------------------------------------------------------------------------
+
+;
+; This hows how to throw and catch Exceptions in Jasmin
+;
+
+.class public examples/Catch
+.super java/lang/Object
+
+; standard initializer
+.method public <init>()V
+    aload_0
+    invokenonvirtual java/lang/Object/<init>()V
+    return
+.end method
+
+.method public static main([Ljava/lang/String;)V
+
+    .limit locals 3
+    .limit stack 5
+
+    ; set up a handler to catch subclasses of java.lang.Exception
+    .catch java/lang/Exception from Label1 to Label2 using Handler
+
+    ; store System.out in local variable 1
+    getstatic java/lang/System/out Ljava/io/PrintStream;
+    astore_1
+
+    ; print out a message
+    aload_1
+    ldc " -- Before exception"
+    invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V
+
+    ; construct an instance of Exception, initialize it with a string,
+    ; throw it. This is like the Java statement :
+    ;
+    ;     throw new Exception("My exception");
+    ;
+
+Label1:
+    new java/lang/Exception
+    dup
+    ldc "<my exception>"
+    invokenonvirtual java/lang/Exception/<init>(Ljava/lang/String;)V
+    athrow
+
+Label2:
+    aload_1
+    ldc " -- After exception"
+    invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V
+
+    return
+
+    ; This is the handler for the exception
+
+Handler:
+    ; store the exception in local variable 2
+    astore_2
+
+    ; print out a message
+    aload_1
+    ldc " -- Caught exception: "
+    invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V
+
+    ; call getMessage() to retrieve the message from the Exception...
+    aload_1
+    aload_2
+    invokevirtual java/lang/Throwable/getMessage()Ljava/lang/String;
+    ; ... now print it
+    invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V
+
+    ; return to the code
+    goto Label2
+
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/Checkcast.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/Checkcast.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,35 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/Checkcast.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Catching and throwing exceptions
+; -------------------------------------------------------------------------
+
+
+
+;
+; Simple test for checkcast instruction
+;
+
+.class examples/Checkcast
+.super java/lang/Object
+
+;
+; standard initializer
+.method public <init>()V
+   aload_0
+   invokenonvirtual java/lang/Object/<init>()V
+   return
+.end method
+
+.method public static main()V
+   .limit stack 2
+
+   ; push System.out onto the stack
+   getstatic java/lang/System/out Ljava/io/PrintStream;
+
+   ; check that it is a PrintStream
+   checkcast java/io/PrintStream
+
+   ; done
+   return
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/Count.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/Count.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,56 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/Count.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Counts from 0 to 9, printing out the value
+; -------------------------------------------------------------------------
+
+.class public examples/Count
+.super java/lang/Object
+
+;
+; standard initializer
+.method public <init>()V
+   aload_0
+   invokenonvirtual java/lang/Object/<init>()V
+   return
+.end method
+
+.method public static main([Ljava/lang/String;)V
+       ; set limits used by this method
+       .limit locals 4
+       .limit stack 3
+
+       ; setup local variables:
+
+       ;    1 - the PrintStream object held in java.lang.System.out
+       getstatic java/lang/System/out Ljava/io/PrintStream;
+       astore_1
+
+       ;    2 - the integer 10 - the counter used in the loop
+       bipush 10
+       istore_2
+
+       ; now loop 10 times printing out a number
+
+     Loop:
+
+       ; compute 10 - <local variable 2> ...
+       bipush 10
+       iload_2
+       isub
+       invokestatic java/lang/String/valueOf(I)Ljava/lang/String;
+       astore_3
+       ; ... and print it
+       aload_1    ; push the PrintStream object
+       aload_3    ; push the string we just created - then ...
+       invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V
+
+       ; decrement the counter and loop
+       iinc 2 -1
+       iload_2
+       ifne Loop 
+
+       ; done
+       return
+
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/HelloWeb.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/HelloWeb.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,91 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/HelloWeb.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Demonstration of a Jasmin-created applet
+; -------------------------------------------------------------------------
+; HelloWeb.j
+
+; This demonstrates how you can use Jasmin to create an applet.
+
+; The code below is like the Java code:
+;
+;     import java.applet.*;
+;     import java.awt.*;
+;
+;     public class HelloWeb extends Applet {
+;        private Font font;
+;
+;        public void init() {
+;            font = new Font("Helvetica", Font.BOLD, 48);
+;        }
+;
+;        public void paint(Graphics g) {
+;            g.setFont(font);
+;            g.drawString("Hello World!", 25, 50);
+;        }
+;     }
+
+
+.class public HelloWeb
+.super java/applet/Applet
+
+.field private font Ljava/awt/Font; 
+
+
+; my init() method - allocate a font and assign it to this.font.
+ 
+.method public init()V
+    .limit stack 5
+
+    ; Create a new Font and call its constructor with
+    ; "Helvetica", 1 (i.e. Font.BOLD), and 48.
+
+    new java/awt/Font
+    dup
+    ldc "Helvetica"
+    iconst_1
+    bipush 48
+    invokenonvirtual java/awt/Font/<init>(Ljava/lang/String;II)V
+
+    ; now store the Font on the stack in this.font
+    aload_0
+    swap
+    putfield HelloWeb/font Ljava/awt/Font;
+
+    ; done
+    return
+.end method
+
+; my paint() method - draws the string "Hello World!" using this.font.
+
+.method public paint(Ljava/awt/Graphics;)V
+    .limit stack 4
+    .limit locals 2
+
+    ; local variable 0 holds <this>
+    ; local variable 1 holds the java.awt.Graphics instance ('g').
+
+    ; g.setFont(this.font);
+    aload_1
+    aload_0
+    getfield HelloWeb/font Ljava/awt/Font;
+    invokevirtual java/awt/Graphics/setFont(Ljava/awt/Font;)V
+
+    ; g.drawString("Hello Web!", 25, 50);
+    aload_1
+    ldc "Hello Web!"
+    bipush 25
+    bipush 50
+    invokevirtual java/awt/Graphics/drawString(Ljava/lang/String;II)V
+
+    ; done
+    return
+.end method
+
+
+; standard constructor
+.method public <init>()V
+    aload_0
+    invokenonvirtual java/applet/Applet/<init>()V
+    return
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/HelloWorld.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/HelloWorld.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,30 @@
+.class public HelloWorld
+.super java/lang/Object
+
+    ;
+    ; standard initializer (calls java.lang.Object's initializer)
+    ;
+    .method public <init>()V
+       aload_0
+       invokenonvirtual java/lang/Object/<init>()V
+       return
+    .end method
+
+    ;
+    ; main() - prints out Hello World
+    ;
+    .method public static main([Ljava/lang/String;)V
+       .limit stack 2   ; up to two items can be pushed
+
+       ; push System.out onto the stack
+       getstatic java/lang/System/out Ljava/io/PrintStream;
+
+       ; push a string onto the stack
+       ldc 42
+
+       ; call the PrintStream.println() method.
+       invokevirtual java/io/PrintStream/println(I)V
+	   
+       ; done
+       return
+    .end method
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/test/Implementor.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/Implementor.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,52 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/HelloWorld.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Shows how to define a class that implements an interface
+; -------------------------------------------------------------------------
+
+;
+; This class implements the examples.AnInterface interface - see
+; AnInterface.j
+;
+.class public examples/Implementor
+.super java/lang/Object
+.implements examples/AnInterface
+
+;
+; standard initializer
+;
+.method public <init>()V
+   aload_0
+
+   invokenonvirtual java/lang/Object/<init>()V
+   return
+.end method
+
+;
+; implement the foo()V method - this is an interface method
+;
+.method public foo()V
+   .limit stack 2
+
+   getstatic java/lang/System/out Ljava/io/PrintStream;
+   ldc "Hello Interface"
+   invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V
+
+   ; done
+   return
+.end method
+
+.method public static main([Ljava/lang/String;)V
+    .limit stack 2
+
+    ; create a new one of me
+    new examples/Implementor
+    dup
+    invokenonvirtual examples/Implementor/<init>()V
+   
+    ; now call my interface method foo()
+    invokeinterface examples/AnInterface/foo()V 1
+
+    return
+.end method
+

Added: spoofax-contrib/jasmin-spoofax/trunk/test/InvokeInterface.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/InvokeInterface.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,45 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/InvokeInterface.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Example of using invokeinterface
+; -------------------------------------------------------------------------
+;
+; Demonstrates invoking an interface method
+;
+
+.class public examples/InvokeInterface
+.super java/lang/Object
+
+; standard initializer
+.method public <init>()V
+   aload_0
+   invokenonvirtual java/lang/Object/<init>()V
+   return
+.end method
+
+;
+; This is a rather silly example - since the result of calling the
+; interface method isn't actually used. But it does illustrate how to
+; use invokeinterface.
+;
+
+.method public example(Ljava/util/Enumeration;)V
+    .limit stack 1
+    .limit locals 3
+
+    ; push local variable 1 (the Enumeration object)
+    aload_1
+
+    ; now call the hasMoreElements() interface method.
+    invokeinterface java/util/Enumeration/hasMoreElements()Z 1
+
+    ; store the integer result in local variable 2
+    istore_2
+
+    ; done
+    return
+.end method
+
+.method public static main([Ljava/lang/String;)V
+    return
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/MultiANewArray.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/MultiANewArray.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,37 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/MultiANewArray.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Example of multanewarray instruction
+; -------------------------------------------------------------------------
+;
+; This illustrates how to use multianewarray to allocate
+; an array.
+;
+
+.class public examples/MultiANewArray
+.super java/lang/Object
+
+; standard initializer
+.method public <init>()V
+   aload_0
+   invokenonvirtual java/lang/Object/<init>()V
+   return
+.end method
+
+.method public static main([Ljava/lang/String;)V
+
+   .limit locals 4
+   .limit stack 2
+
+   ;
+   ; This allocates an array like:
+   ;
+   ;      String s[][] = new String[2][5];
+   ;
+   iconst_2
+   iconst_5
+   multianewarray [[Ljava/lang/String; 2
+   astore_1
+
+   return
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/MultiArrays.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/MultiArrays.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,55 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/MultiArrays.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Examples involving multi-dimensional arrays
+; -------------------------------------------------------------------------
+;
+; This illustrates how to use multi-dimensional arrays in the Java VM
+; (though it doesn't actually do anything very interesting with the arrays.)
+;
+
+.class public examples/MultiArrays
+.super java/lang/Object
+
+; standard initializer
+.method public <init>()V
+   aload_0
+   invokenonvirtual java/lang/Object/<init>()V
+   return
+.end method
+
+.method public static main([Ljava/lang/String;)V
+
+   .limit locals 4
+   .limit stack 5
+
+   ; this is like:
+   ;    new int[2][5][]
+   iconst_2
+   iconst_5
+   multianewarray [[[I 2
+
+   ; store the result in local variable 1
+   astore_1
+
+   aload_1
+   iconst_1
+   aaload     ; stack now contains x[0]
+   astore_2   ; store the array in local variable 2
+
+   ; create a new array of 50 ints and store it in x[1][1]
+   aload_2
+   iconst_1
+   bipush 50
+   newarray int
+   aastore
+
+   ; create a new array of 60 ints and store it in x[1][2]
+   aload_2
+   iconst_2
+   bipush 60
+   newarray int
+   aastore
+
+   return
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/NewArray.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/NewArray.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,41 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/NewArray.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Example of newarray
+; -------------------------------------------------------------------------
+;
+; Example showing how to allocate an array using
+; newarray.
+;
+
+.class public examples/NewArray
+.super java/lang/Object
+
+.method public <init>()V
+   aload_0
+   invokenonvirtual java/lang/Object/<init>()V
+   return
+.end method
+
+.method public static main([Ljava/lang/String;)V
+   .limit stack 4
+   .limit locals 2
+
+   ; create an array like:
+   ;
+   ;     boolean b[] = new boolean[2]
+   ;
+   ; (stores it in local var 1)
+
+   iconst_2
+   newarray boolean
+   astore_1
+
+   ; b[0] = true;
+   aload_1
+   iconst_0
+   iconst_1
+   bastore
+
+   return
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/Switch.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/Switch.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,41 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/Switch.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Shows usage of lookupswitch and tableswitch
+; -------------------------------------------------------------------------
+
+;
+; Illustrates lookupswitch and tableswitch syntax for Jasmin
+;
+
+.class public examples/Switch
+.super java/lang/Object
+
+.method public <init>()V
+   aload_0
+   invokenonvirtual java/lang/Object/<init>()V
+   return
+.end method
+
+.method public static main([Ljava/lang/String;)V
+   .limit stack 3
+
+   iconst_1
+   lookupswitch
+	1 : Hello
+	2 : Goodbye
+     default : Foo
+
+   iconst_1
+   tableswitch 0
+	Hello
+	Goodbye
+     default : Foo
+
+Hello:
+Goodbye:
+Foo:
+
+   return
+
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/Uncaught.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/Uncaught.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,36 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/Uncaught.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Throws an exception - doesn't catch it
+; -------------------------------------------------------------------------
+
+;
+; This example class contains a main() method that throws
+; an exception but doesn't catch it -
+;
+.source "Uncaught.j"
+.class public examples/Uncaught
+.super java/lang/Object
+
+; specify the initializer method (as for HelloWorld)
+
+.method public <init>()V
+    ; just call Object's initializer
+    aload_0
+    invokenonvirtual java/lang/Object/<init>()V
+    return
+.end method
+
+; specify the "main" method - this throws an uncaught exception
+
+.method public static main([Ljava/lang/String;)V
+    .limit stack 2
+
+    new java/lang/Exception
+    dup
+    invokenonvirtual java/lang/Exception/<init>()V
+    athrow
+
+    ; without this the verifier might complain ...
+    return
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/VerifyTest.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/VerifyTest.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,41 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/VerifyTest.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Treats an int as an object - should alert the Verifier
+; -------------------------------------------------------------------------
+
+;
+; This code demonstrates the verifier at work. See also VerifyTest1.j.
+;
+; The main() method below tries to clone the integer 100 - this
+; is clearly an error since clone() expects an Object, not an integer.
+;
+; If you run this with no verification on, it is likely to crash the
+; interpreter. Running this with the -verify option produces a
+; Verifier error.
+;
+
+; This is similar to the Java code:
+;
+;    class VerifyTest {
+;        public static void main(String args[]) {
+;            int x = 100;
+;            x.clone();
+;        }
+;     }
+
+
+.class public examples/VerifyTest
+.super java/lang/Object
+
+.method public <init>()V
+   aload_0
+   invokenonvirtual java/lang/Object/<init>()V
+   return
+.end method
+
+.method public static main([Ljava/lang/String;)V
+    bipush 100
+    invokevirtual java/lang/Object/clone()Ljava/lang/Object;  
+    return
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/test/VerifyTest1.j
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/VerifyTest1.j	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,64 @@
+; --- Copyright Jonathan Meyer 1996. All rights reserved. -----------------
+; File:      jasmin/examples/VerifyTest1.j
+; Author:    Jonathan Meyer, 10 July 1996
+; Purpose:   Trys to pull one on the verifier
+; -------------------------------------------------------------------------
+
+; This file illustrates the bytecode verifier at work - the
+; code in the example() method below seems reasonable, but
+; Java's bytecode verifier will fail the code because the two points leading
+; to the Loop label (from the top of the method and from the ifne
+; statement) have different stack states.  Instead, a different approach
+; must be adopted  - e.g. by allocating an array, or simply writing:
+;
+;    aconst_null
+;    aconst_null
+;    aconst_null
+;    aconst_null
+
+; Note that many interpreters will run this code OK if you don't use
+; a verifier. The code itself is well behaved (it doesn't trash the
+; interpreter), but the approach it uses is disallowed by the verifier.
+;
+
+; Compile the example, then run it using:
+;
+;     % java -verify VerifyTest1
+;     VERIFIER ERROR VerifyTest1.example()V:
+;     Inconsistent stack height 1 != 0
+;
+
+.class public examples/VerifyTest1
+.super java/lang/Object
+
+.field public f I
+
+.method public <init>()V
+   aload_0
+   invokenonvirtual java/lang/Object/<init>()V
+   return
+.end method
+
+.method public example()V
+    .limit locals 2
+    .limit stack  10
+
+    ; this tries to push four nulls onto the stack
+    ; using a loop - Java's verifier will fail this program
+
+    iconst_4     ; store 4 in local variable 1 (used as a counter)
+    istore_1
+
+  Loop:
+    aconst_null  ; push null onto the stack
+    iinc 1 -1    ; decrement local variable 4 (the counter variable)
+    iload_1
+    ifne Loop    ; jump back to Loop unless the variable has reached 0
+
+    return
+.end method
+
+.method public static main([Ljava/lang/String;)V
+    ; - do nothing : this is only to illustrate the bytecode verifier at work.
+    return
+.end method

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/main.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/main.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,33 @@
+module analysis/main
+
+imports
+	lib/editor-common.generated
+
+imports	
+	include/JasminXT
+	
+	analysis/names/rename
+	analysis/names/map
+	analysis/names/check
+	
+		
+strategies
+
+	analyse = rename-all; store-all
+
+	editor-note = fail	
+	
+rules // projections
+
+	class-name = ?JBCFile(<class-name>, _, _)
+	class-name = ?JBCHeader(_, _, <class-name>, _, _, _, _, _)
+	class-name = ?JBCClass(_, <id>)	
+	
+signature constructors
+	
+	LabelNames: Namespace
+	
+	Classes: Env
+	Methods: ID -> Env	
+	Fields : ID -> Env	
+	Labels : Env

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/names/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/names/check.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,26 @@
+module analysis/names/check
+
+imports
+	lib/environment
+	include/JasminXT
+	analysis/main
+	
+rules // undeclared elements
+	
+	editor-error:
+		LabelRef(l) -> (l, $[Lable [l] is not declared.])
+		where not ( <is-declared(|Labels())> l )
+
+	
+rules // multiple declarations
+	
+	editor-error:
+		JBCLabel(l) -> (l, $[Multiple declarations for label [l].])
+		where not ( <lookup-unique(|Labels())> l )
+	
+rules // unused declarations
+	
+	editor-warning: 
+		JBCLabel(l) -> (l, $[Label [l] is never used.])
+		where not ( <is-referred(|Labels())> l )	
+	
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/names/map.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/names/map.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,36 @@
+module analysis/names/map
+
+imports
+	lib/environment
+	lib/namespace
+	include/JasminXT
+	
+	analysis/main
+		
+strategies
+	
+	store-all = topdown(try(store)) 
+
+rules // declarations
+
+	store: d at JBCClass(_, name) -> d
+		 	
+	store : d at JBCField(access, name, JBCFieldDesc(type), sig, init) -> d
+		where
+			<store-declaration> (name, type)
+	
+	store : d at JBCMethod(access, name, JBCMethodDesc(ptypes, type), stmts) -> d
+		where 
+			<store-declaration> (name, (ptypes, type))
+			
+	store : d at JBCLabel(label) -> d
+		where 
+			<store-declaration(|Labels())> (label, d)
+	
+rules // references
+	
+	store : r at JBCFieldRef(cn, fn, fdescr) -> r where <store-reference(|Fields(cn))> fn
+	
+	store : r at JBCMethodRef(cn, mn, mdescr) -> r where <store-reference(|Methods(cn))> mn
+	
+	store : r at LabelRef(label) -> r where <store-reference(|Labels())> label

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/names/rename.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/analysis/names/rename.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,40 @@
+module analysis/names/rename
+
+imports 
+	lib/editor-common.generated
+	lib/namespace
+	lib/environment
+
+	include/JasminXT
+	analysis/main
+	
+strategies
+
+	rename-all 		= alltd(rename)
+	rename-all-ref	= alltd(rename-ref)
+
+rules 
+	
+	rename: JBCFile(header, fields, methods) -> JBCFile(header, fields', methods')
+		where new-scope (
+			<rename-all> fields => fields' ;
+			<rename-all> methods => methods'
+		)
+ 			
+ 	rename: JBCField(access, name, descr, sig, val) -> JBCField(access, name', descr, sig, val)
+ 		where <annotate-env(field-env)> name => name'
+ 	
+	rename: JBCMethod(access, name, descr, stmts) -> JBCMethod(access, name', descr, stmts')
+		where <annotate-env(method-env)> name => name'
+		where new-scope(
+			<rename-all ; rename-all-ref> stmts => stmts'
+		)
+		
+	rename: JBCLabel(l) -> JBCLabel(<uid-declaration(|LabelNames())> l)	 
+	
+	rename-ref: LabelRef(l) -> LabelRef(<uid-reference(|LabelNames())> l)
+
+rules
+	
+	method-env = !Methods(<class-name>)
+	field-env  = !Fields(<class-name>)

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/editor/resolve.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/editor/resolve.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,20 @@
+module editor/resolve
+
+imports
+	lib/environment
+	include/JasminXT
+	analysis/main
+		
+rules
+
+	editor-resolve: 
+		(node, position, ast, path, project-path) -> elem
+		where 
+			<resolve> node => elem
+		
+rules
+	
+	resolve : JBCFieldRef(cname, fname, fdesc) -> <lookup-first(|Fields(cname))> (fname, fdesc)
+	resolve : JBCMethodRef(cname, mname, mdesc) -> <lookup-first(|Methods(cname))> (mname, mdesc)
+	
+	resolve : LabelRef(l) -> <lookup-first(|Labels())> l

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/arithmetics.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/arithmetics.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,24 @@
+module arithmetics
+
+imports
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+			
+	step(|state): IADD() -> <pop(|2) ; push(|r) ; next> state
+		where
+			<top(|2)> state => [Int(v1), Int(v2)] ;
+			<addS> (v2, v1) => r 
+
+	step(|state): ISUB() -> <pop(|2) ; push(|r) ; next> state
+		where
+			<top(|2)> state => [Int(v1), Int(v2)] ;
+			<subtS> (v2, v1) => r 
+		
+	step(|state): IMUL() -> <pop(|2) ; push(|r) ; next> state
+		where
+			<top(|2)> state => [Int(v1), Int(v2)] ;
+			<mulS> (v2, v1) => r 
+

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/arrays.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/arrays.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,28 @@
+module arrays
+
+imports
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+		
+	step(|state): IALOAD() -> <pop(|2) ; push(|Int(v)) ; next> state
+		where
+			<top(|2)> state => [Int(i), Ref(r)] ;
+			<resolve(|r)> state => Array(Int(), vs) ;
+			<index> (<string-to-int> i, vs) => Int(v)
+	
+	step(|state): IASTORE() -> <pop(|3) ; update(|r, vs') ; next> state
+		where
+			<top(|2)> state => [Int(v), Int(i), Ref(r)] ;
+			<resolve(|r)> state => Array(Int(), vs) ;
+			<at-index(!Int(v))> (<string-to-int ; inc> i, vs) => vs'  
+			
+	step(|state): ARRAYLENGTH() -> <pop ; push(|Int(l)) ; next> state
+		where
+			<top> state => Ref(ar) ;
+			<resolve(|ar)> state => Array(_, vs) ;
+			<length ; int-to-string> vs => l
+
+	step(|state): NEWARRAY(IntName()) -> <alloc(|Array(Int(), [])) ; next> state
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/constants.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/constants.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,14 @@
+module constants
+
+imports
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+			
+	step(|state): ICONST_0() -> <push(|Int("0")) ; next> state
+	step(|state): ICONST_1() -> <push(|Int("1")) ; next> state
+	step(|state): LDC(i) -> <push(|Int(i)) ; next> state
+	
+

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/desugar.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/desugar.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,18 @@
+module interpreter/desugar
+
+imports
+	
+	include/JasminXT
+	
+rules
+	
+	desugar: ALOAD_0() -> ALOAD("0")
+	desugar: ALOAD_1() -> ALOAD("1")
+	desugar: ALOAD_2() -> ALOAD("2")
+	desugar: ALOAD_3() -> ALOAD("3")
+	
+	desugar: ILOAD_0() -> ILOAD("0")
+	desugar: ILOAD_1() -> ILOAD("1")
+	desugar: ILOAD_2() -> ILOAD("2")
+	desugar: ILOAD_3() -> ILOAD("3")
+	
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/jumps.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/jumps.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,133 @@
+module interpreter/jumps
+
+imports 
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+	
+	step(|state): JBCLabel(_) -> <next> state
+			
+	step(|state): GOTO(LabelRef(l)) -> <goto(|l)> state
+	
+rules // comparison with 0
+	
+	step(|state): IFEQ(LabelRef(l)) -> state'
+		where
+			<top> state => Int(v) ;
+			<eq> (v, "0") 
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+			
+	step(|state): IFNE(LabelRef(l)) -> state'
+		where
+			<top> state => Int(v) ;
+			<not(eq)> (v, "0")
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+
+	step(|state): IFGE(LabelRef(l)) -> state'
+		where
+			<top> state => Int(v) ;
+			<geqS> (v, "0") 
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+			
+	step(|state): IFGT(LabelRef(l)) -> state'
+		where
+			<top> state => Int(v) ;
+			<gtS> (v, "0")
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+	
+	step(|state): IFLE(LabelRef(l)) -> state'
+		where
+			<top> state => Int(v) ;
+			<leqS> (v, "0") 
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+			
+	step(|state): IFLT(LabelRef(l)) -> state'
+		where
+			<top> state => Int(v) ;
+			<ltS> (v, "0")
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+
+rules // comparison with null
+	
+	step(|state): IFNULL(LabelRef(l)) -> state'
+		where
+			<top> state => Ref(r) ;
+			<eq> (r, NULL()) 
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+			
+	step(|state): IFNONNULL(LabelRef(l)) -> state'
+		where
+			<top> state => Int(r) ;
+			<not(eq)> (r, NULL())
+				< <pop ; goto(|l)> state => state' 
+				+ <pop ; next> state => state'
+	
+rules // integer comparison
+	
+	step(|state): IF_ICMPEQ(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Int(v1), Int(v2)) ;
+			<eq> (v2, v1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+			
+	step(|state): IF_ICMPNE(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Int(v1), Int(v2)) ;
+			<not(eq)> (v2, v1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+			
+	step(|state): IF_ICMPGE(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Int(v1), Int(v2)) ;
+			<geqS> (v2, v1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+			
+	step(|state): IF_ICMPGT(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Int(v1), Int(v2)) ;
+			<gtS> (v2, v1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+	
+	step(|state): IF_ICMPLE(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Int(v1), Int(v2)) ;
+			<leqS> (v2, v1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+			
+	step(|state): IF_ICMPLT(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Int(v1), Int(v2)) ;
+			<ltS> (v2, v1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+	
+rules // reference comparison
+	
+	step(|state): IF_ACMPEQ(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Ref(r1), Ref(r2)) ;
+			<eq> (r2, r1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+			
+	step(|state): IF_ACMPNE(LabelRef(l)) -> state'
+		where
+			<top(|2)> state => (Ref(r1), Ref(r2)) ;
+			<not(eq)> (r2, r1) 
+				< <pop(|2) ; goto(|l)> state => state' 
+				+ <pop(|2) ; next> state => state'
+			

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/locals.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/locals.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,25 @@
+module interpreter/locals
+
+imports
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+	
+	step(|state): ALOAD(n) -> <push(|Ref(r)) ; next> state
+		where
+			<load(|n)> state => Ref(r) 
+			
+	step(|state): ILOAD(n) -> <push(|Int(v)) ; next> state
+		where
+			<load(|n)> state => Int(v)
+			
+	step(|state): ISTORE(n) -> <pop ; store(|n, Int(v)) ; next> state
+		where
+			<top> state => Int(v)
+
+	step(|state): ASTORE(n) -> <pop ; store(|n, Ref(r)) ; next> state
+		where
+			<top> state => Ref(r)
+

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/methods.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/methods.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,18 @@
+module interpreter/methods
+
+imports 
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+	
+	step(|state): RETURN() -> <drop-frame ; next> state
+	
+	step(|state): IRETURN() -> <pop ; drop-frame ; push(|Int(v)) ; next> state
+		where
+			<top> state => Int(v)
+			
+	step(|state): ARETURN() -> <pop ; drop-frame ; push(|Ref(r)) ; next> state
+		where
+			<top> state => Ref(r)
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/misc.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/misc.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,21 @@
+module interpreter/misc
+
+imports
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+
+	step(|state): NOP() -> <next> state
+		
+	step(|state): DUP() -> <push(|top) ; next> state
+		where
+			<top> state => top
+	
+	step(|state): SWAP() -> <pop(|2) ; push(|v1) ; push(|v2) ; next> state
+		where
+			<top(|2)> state => [v1, v2]
+			
+	step(|state): POP() -> <pop ; next> state
+	
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/objects.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/objects.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,49 @@
+module interpreter/objects
+
+imports
+	
+	include/JasminXT
+	interpreter/state
+	
+rules
+	
+	step(|state): NEW(cn) -> <alloc(|o) ; next> state
+		where
+			<init-object> cn => o
+
+	step(|state): GETFIELD(JBCFieldRef(_, fn, _)) -> <pop; push(|v) ; next> state
+		where
+			<top> state => Ref(r) ;
+			<resolve(|r)> state => Object(_, fields) ;
+			<lookup> (fn, fields) => v
+
+	step(|state): PUTFIELD(JBCFieldRef(_, fn, _)) -> <pop(|2); update(|r, Object(cn, fields')) ; next> state
+		where
+			<top(|2)> state => [v, Ref(r)] ;
+			<resolve(|r)> state => Object(cn, fields) ;
+			<update-key-value(|r, v)> fields => fields'
+
+rules
+	
+	load-class-file = fail
+	
+	init-object: "java/lang/Object" -> Object("java/lang/Object", [])
+	init-object: cn -> Object(cn, slots)
+		where
+			<load-class-file> cn => JBCFile(JBCHeader(_, _, JBCClass(_, cn), JBCSuper(sn), _, _, _, _), fs, _) ;
+			<init-object> sn => Object(_, iss) ;
+			<map(init-slot)> fs => oss ;
+			<conc> (iss, oss) => slots 
+			
+	init-slot: JBCField(_, fn, JBCFieldDesc(t), _, v) -> (fn, <init-value> (t, v))
+	init-slot: JBCExtField(_, fn, JBCFieldDesc(t), v, _) -> (fn, <init-value> (t, v))
+	
+	init-value: (Int(), None()) -> Int("0")
+	init-value: (Int(), v) -> Int(v) where <not(eq)> (None(), v)
+	
+	init-value: (Boolean(), None()) -> Int("0")
+	init-value: (Boolean(), v) -> Int(v) where <not(eq)> (None(), v)
+	
+	init-value: (Array(_), None()) -> Ref(NULL())
+	init-value: (Reference(_), None()) -> Ref(NULL())
+	
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/state.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/interpreter/state.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,61 @@
+module interpreter/state
+
+imports include/JasminXT
+
+signature constructors
+	
+	JBCState	: List(Frame) * Heap -> State	
+	
+	JBCFrame	: MethodRef * List(Instruction) * PC * Stack * Locals -> Frame
+				: Int -> PC
+	
+	JBCStack	: List(Value) -> Stack
+	Int			: String -> Value
+	Ref			: RefValue -> Value
+	NULL		: RefValue
+				: String -> RefValue
+				
+	JBCLocals	: List(Value) -> Locals
+				
+	JBCHeap		: List(HeapEntry) -> Heap
+				: String * HeapElement -> HeapEntry
+				
+	Array		: ComponentType * List(Value) -> HeapElement
+	Object		: ClassName * List(Slot) -> HeapElement
+				: FieldName * Value -> Slot
+							
+strategies // manipulate PC in top-most frame
+	
+	next = JBCState([JBCFrame(id, id, inc, id, id)|id], id)
+	
+	goto(|l) = JBCState([JBCFrame(id, ?is, <getfirst(?(<id>,l))> is, id, id)|id], id)
+	
+strategies // manipulate stack in top-most frame 
+		
+	push(|v) = JBCState([JBCFrame(id, id, id, JBCStack(![v|<id>]), id)|id], id)
+
+	pop(|n) = JBCState([JBCFrame(id, id, id, JBCStack(drop(|n)), id)|id], id)
+
+	pop = pop(|1)
+	
+	top(|n) = ?JBCState([JBCFrame(_, _, _, JBCStack(<take(|n)>), _)|_], _)
+	
+	top = top(|1)
+
+strategies // manipulate local variables in top-most frame
+		
+	load(|n) = ?JBCState([JBCFrame(_, _, _, _, JBCLocals(<at-index(id|<string-to-int> n)>))|_], _) 
+	store(|n, v) = JBCState([JBCFrame(id, id, id, JBCStack(at-index(!v|<string-to-int> n)), id)|id], id)
+	
+strategies // manipulate heap
+	
+	resolve(|r) = ?JBCState(_, JBCHeap(<id>)) ; <lookup> (r, <id>)
+	alloc(|v) = where(<newname> "ref" => r) ; JBCState([JBCFrame(id, id, id, JBCStack(![Ref(r)|<id>]), id)|id], JBCHeap(![(r,v)|<id>]))
+	update(|r, v) = JBCState(id, JBCHeap(update-key-value(|r, v)))
+	
+	update-key-value(|r, v) = fetch(?(r, _) ; !(r, v))
+	
+strategies // manipulate frames
+	
+	drop-frame = not(top) ; JBCState(Tl, id)
+	
\ No newline at end of file

Added: spoofax-contrib/jasmin-spoofax/trunk/trans/jasminxt.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/jasminxt.str	Wed Dec  7 12:45:04 2011	(r23705)
@@ -0,0 +1,52 @@
+module jasminxt
+
+imports
+	lib/editor-common.generated
+
+	include/JasminXT
+
+	analysis/main
+	analysis/names/check
+	editor/resolve
+	
+strategies
+	
+	external execute-java(|path)
+	external execute-jasmin(|)
+	
+rules // Main editor interface (defined by editor/JasminXT-Builders and -References.esv)
+ 
+	editor-analyse:
+		(ast, path, project-path) -> (ast, [], [], [])//(ast', errors, warnings, notes)
+		// with
+		// 	editor-init;
+		// 	<analyse> ast => ast';
+		// 	<collect-all(editor-error, conc)> ast' 		=> errors;
+		// 	<collect-all(editor-warning, conc)> ast' 	=> warnings;
+		// 	<collect-all(editor-note, conc)> ast'		=> notes
+	 
+	// Prints the abstract syntax ATerm of a selection.
+	generate-aterm:
+		(selected, position, ast, path, project-path) -> (filename, result)
+		with
+			filename := <guarantee-extension(|"aterm")> path;
+			result	 := selected 
+			
+	// Generates the Java class file
+	generate-class:
+		(selected, position, ast, path, project-path) -> None()
+		with
+			parentdir := <dirname> path ;
+			<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], path])
+		where
+			cfname := <concat-strings ; guarantee-extension(|"class")> [project-path, "/", <dirname> path, "/", <class-name> ast] ;
+			<refresh-workspace-file> cfname
+			
+	execute-class:
+		(selected, position, ast, path, project-path) -> (filename, result)
+		with
+			filename := <guarantee-extension(|"result.aterm")> path
+		with
+			cname := <class-name ; string-replace(|"/",".")> ast ;
+			cpath := <concat-strings> [project-path, "/", <dirname> path] ;
+			<execute-java(|cpath)> cname => result
\ No newline at end of file

From karltk at strategoxt.org  Wed Dec  7 13:49:05 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 12:49:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23706 -
	spoofax-experimental/spoofax-sigtools
	spoofax/trunk/spoofax/spoofax-sigtools
Message-ID: <20111207124905.A617D108C007@mx3.tudelft.nl>

Author: karltk
Date: Wed Dec  7 12:49:05 2011
New Revision: 23706
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23706&sc=1

Log:
Moving old cruft.

Added:
   spoofax-experimental/spoofax-sigtools/   (props changed)
      - copied from r23705, spoofax/trunk/spoofax/spoofax-sigtools/
Deleted:
   spoofax/trunk/spoofax/spoofax-sigtools/

From karltk at strategoxt.org  Wed Dec  7 14:17:24 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 13:17:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23707 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse
Message-ID: <20111207131724.60E972B8016@mx2.tudelft.nl>

Author: karltk
Date: Wed Dec  7 13:17:24 2011
New Revision: 23707
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23707&sc=1

Log:
Extended the API to deal with qualified names, erased names, primitive names, bindings for method declarations and improved the rewriting call a bit.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Wed Dec  7 12:49:05 2011	(r23706)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Wed Dec  7 13:17:24 2011	(r23707)
@@ -18,6 +18,7 @@
   Project        : Term -> Project
   Binding        : Int * Int * String -> Binding
   TypeBinding    : List(String) * String * List(TypeBinding) * TypeBinding * List(TypeBinding) * Int * ITypeBinding -> TypeBinding
+  MethodBinding  : TypeBinding * Name * Type * List(TypeBinding) -> MethodBinding
   TypeParameter  : List(String) -> TypeParameter
   ITypeParameter : String * List(String) -> ITypeParameter
   DottedName     : String -> DottedName
@@ -107,6 +108,12 @@
     ; ?expr
     ; prim("ECJ_type_of_expr", expr)
 
+  /** @type MethodDeclaration -> MethodBinding */
+  ecj-binding-of = 
+      ecj-is-MethodDeclaration
+    ; ?md
+    ; prim("ECJ_binding_of_methoddecl", md)
+    
 
 strategies
 
@@ -307,9 +314,9 @@
     ; prim("ECJ_rewrite_compilation_unit", s | cu)
 
   /** @type IFile -> IFile */
-  ecj-rewrite-file(s) = 
+  ecj-rewrite-file(typerw, importrw) = 
     ?cu
-    ; prim("ECJ_rewrite_file", s | cu)
+    ; prim("ECJ_rewrite_file", typerw, importrw | cu)
     
 strategies
 
@@ -356,7 +363,10 @@
   ecj-name-of = ?IType(<id>, _, _, _, _, _) ; ecj-as-qualified-name
   
   /** @type ParameterizedType -> SimpleName / QualifiedName */
-  ecj-name-of = ?ParameterizedType(<id>, _)
+  ecj-name-of = ?ParameterizedType(<ecj-name-of>, _)
+
+  /** @type SimpleName -> SimpleName */
+  ecj-name-of = ?SimpleName(_) 
   
   /**
    * Computes the dotted name of an AST node, if this is possible
@@ -393,10 +403,22 @@
    * @type Type -> Name 
    */
   ecj-qualified-name-of = 
-      ecj-binding-of 
+      not(ecj-is-TypeBinding)
+    ; ecj-binding-of 
     ; ecj-dotted-name-of 
+    ; ecj-erased-name-of
     ; ecj-as-qualified-name
   
+  /** @type TypeBinding -> Name */
+  ecj-qualified-name-of =
+      ecj-is-TypeBinding
+    ; ecj-dotted-name-of
+    ; ecj-as-qualified-name
+    
+  /** @type DottedName -> DottedName */
+  ecj-erased-name-of =
+      DottedName(explode-string ; take-until(?'<') ; implode-string) 
+      
 strategies
   
   /**
@@ -453,6 +475,9 @@
       end
     ; not(is-int)
 
+  /** @type String -> String */
+  ecj-is-primitive-type-name = ?"int" + ?"float" + ?"double" + ?"void" + ?"byte" + ?"char"
+  
   /**
    * Returns true iff the supplied Type is a primitive type
    * @type ASTNode -> PrimitiveType
@@ -576,4 +601,4 @@
   FinalMod     = Modifier(ModifierKeyword(16))
   TransientMod = Modifier(ModifierKeyword(128))
   
-  
\ No newline at end of file
+  

From tobivollebregt at gmail.com  Wed Dec  7 16:43:41 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 07 Dec 2011 15:43:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23708 - in
	spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections:
	. src/org/strategoxt/imp/runtime/dynamicloading
	src/org/strategoxt/imp/runtime/parser
Message-ID: <20111207154341.EB50C108C04D@mx3.tudelft.nl>

Author: tvo
Date: Wed Dec  7 15:43:41 2011
New Revision: 23708
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23708&sc=1

Log:
merge

Modified:
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/   (props changed)
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Wed Dec  7 13:17:24 2011	(r23707)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Wed Dec  7 15:43:41 2011	(r23708)
@@ -30,6 +30,7 @@
 import org.eclipse.imp.parser.IParseController;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.terms.Term;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.RuntimeActivator;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
@@ -313,6 +314,11 @@
 		}
 	}
 	
+	public boolean isUnicodeFlattened() {
+		ArrayList<IStrategoAppl> flattened = TermReader.collectTerms(document, "FlattenUnicode");
+		return !flattened.isEmpty() && !"False".equals(Term.tryGetName(flattened.get(0).getSubterm(0)));
+	}
+	
 	public void setDynamicallyLoaded(boolean dynamicallyLoaded) {
 		this.dynamicallyLoaded = dynamicallyLoaded;
 	}

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Wed Dec  7 13:17:24 2011	(r23707)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Wed Dec  7 15:43:41 2011	(r23708)
@@ -5,6 +5,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.UnsupportedEncodingException;
 import java.util.Iterator;
 import java.util.concurrent.locks.ReentrantLock;
 
@@ -281,6 +282,8 @@
 			processMetaFile();
 			
 			if (monitor.isCanceled()) return null;
+			if (Environment.getDescriptor(language).isUnicodeFlattened())
+				input = flattenUnicode(input);
 			currentTokenizer = new NullTokenizer(input, filename);
 			IStrategoTerm result = doParse(input, filename);
 			currentTokenizer = getTokenizer(result);
@@ -326,6 +329,14 @@
 		return monitor.isCanceled() ? null : currentAst;
 	}
 	
+	private static String flattenUnicode(String s) {
+		try {
+			return new String(s.getBytes("UTF-8"), "ISO-8859-1");
+		} catch (UnsupportedEncodingException e) {
+			throw new RuntimeException(e);
+		} 
+	}
+	
 	public void scheduleParserUpdate(long delay, boolean abortFirst) {
 		if (abortFirst && parseLock.isLocked()) {
 			isAborted = true;

From karltk at strategoxt.org  Wed Dec  7 17:27:33 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 16:27:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23709 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj
Message-ID: <20111207162733.CC07D108C00F@mx3.tudelft.nl>

Author: karltk
Date: Wed Dec  7 16:27:33 2011
New Revision: 23709
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23709&sc=1

Log:
Added a little bit of robustness when loading source from classfiles or compilation units.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_unbacked_compilation_unit_for_type.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_unbacked_compilation_unit_for_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_unbacked_compilation_unit_for_type.java	Wed Dec  7 15:43:41 2011	(r23708)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_unbacked_compilation_unit_for_type.java	Wed Dec  7 16:27:33 2011	(r23709)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU Lesser Public License, v2.1
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 
@@ -23,20 +23,23 @@
     public ECJ_unbacked_compilation_unit_for_type() {
         super("ECJ_unbacked_compilation_unit_for_type", 0, 1);
     }
-    
+
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
 
     	if(!ECJTools.isIType(tvars[0]))
             return false;
-        
+
         try {
             final IType t = ECJTools.asIType(tvars[0]);
             final ECJLibrary ecj = (ECJLibrary) env.getOperatorRegistry(ECJLibrary.REGISTRY_NAME);
             final ASTParser parser = ecj.getParser();
+            final String src = t.getCompilationUnit() == null ? t.getClassFile().getSource() : t.getCompilationUnit().getSource();
             parser.setResolveBindings(true);
-			parser.setSource(t.getSource().toCharArray());
+			parser.setSource(src.toCharArray());
+			parser.setProject(ecj.getCurrentJavaProject());
+			parser.setUnitName(t.getElementName());
 	        CompilationUnit cu = (CompilationUnit)parser.createAST(null);
 	        env.setCurrent(ECJFactory.wrap(cu));
 	        return true;

From karltk at strategoxt.org  Wed Dec  7 17:31:36 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 16:31:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23710 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj
Message-ID: <20111207163136.357B8CC155@mx4.tudelft.nl>

Author: karltk
Date: Wed Dec  7 16:31:35 2011
New Revision: 23710
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23710&sc=1

Log:
Added support for extracting bindings from method declarations.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_binding_of_methoddecl.java

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_binding_of_methoddecl.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_binding_of_methoddecl.java	Wed Dec  7 16:31:35 2011	(r23710)
@@ -0,0 +1,42 @@
+/*
+ * Created on 29. may. 2009
+ *
+ * Copyright (c) 2009-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.ecj;
+
+import org.eclipse.jdt.core.dom.IMethodBinding;
+import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class ECJ_binding_of_methoddecl extends AbstractPrimitive {
+
+    public ECJ_binding_of_methoddecl() {
+        super("ECJ_binding_of_methoddecl", 0, 1);
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+            throws InterpreterException {
+
+        if(!ECJTools.isMethodDeclaration(tvars[0]))
+            return false;
+
+        MethodDeclaration t = ECJTools.asMethodDeclaration(tvars[0]);
+
+        IMethodBinding tb = t.resolveBinding();
+        if(tb == null)
+            return false;
+
+        env.setCurrent(ECJFactory.wrap(tb));
+        return true;
+    }
+
+}

From karltk at strategoxt.org  Wed Dec  7 17:34:42 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 16:34:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23711 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj
Message-ID: <20111207163442.0AF1ECC166@mx4.tudelft.nl>

Author: karltk
Date: Wed Dec  7 16:34:41 2011
New Revision: 23711
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23711&sc=1

Log:
We use different rewriting strategies for the imports and the body (the types) now, to improve layout preservation.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java	Wed Dec  7 16:31:35 2011	(r23710)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java	Wed Dec  7 16:34:41 2011	(r23711)
@@ -1,3 +1,8 @@
+/*
+ * Copyright (c) 2007-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser Public License, v2.1
+ */
 package org.spoofax.interpreter.library.ecj;
 
 import java.util.ArrayList;
@@ -9,28 +14,32 @@
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.ASTParser;
 import org.eclipse.jdt.core.dom.CompilationUnit;
+import org.eclipse.jdt.core.dom.ImportDeclaration;
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jface.text.BadLocationException;
 import org.eclipse.jface.text.Document;
 import org.eclipse.text.edits.TextEdit;
 import org.spoofax.interpreter.adapter.ecj.ECJFactory;
 import org.spoofax.interpreter.adapter.ecj.WrappedASTNode;
+import org.spoofax.interpreter.adapter.ecj.WrappedImportDeclaration;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.CallT;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class ECJ_rewrite_file extends AbstractPrimitive {
 
 	public ECJ_rewrite_file() {
-		super("ECJ_rewrite_file", 1, 1);
+		super("ECJ_rewrite_file", 2, 1);
 	}
 
-	@SuppressWarnings({ "unchecked", "rawtypes" })
+	@SuppressWarnings("unchecked")
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 	throws InterpreterException {
@@ -71,13 +80,39 @@
 					if(term instanceof WrappedASTNode)
 						newTds.add(((WrappedASTNode)term).getWrappee());
 					else 
-						ecj.log("Rewriting resulted in an invalid tree");
+						ecj.log("Rewriting types resulted in an invalid tree");
 				} else {
 					newTds.add(td);
 				}
 			}
 			root.types().clear();
 			root.types().addAll(newTds);
+			
+			List newImports = new ArrayList();
+			env.setCurrent(ECJFactory.wrap(root.imports()));
+			CallT s = (CallT)svars[1];
+			if(s.evaluate(env)) {
+				final IStrategoTerm term = env.current();
+				if(term instanceof IStrategoList) {
+					for(IStrategoTerm t : ((IStrategoList)term).getAllSubterms()) {
+						if(t instanceof WrappedImportDeclaration) {
+							ImportDeclaration id = ((WrappedImportDeclaration)t).getWrappee();
+							// FIXME should this be handled elsewhere?
+							if(id.getAST() != root.getAST()) {
+								id = (ImportDeclaration) ASTNode.copySubtree(root.getAST(), id);
+							}
+							newImports.add(id);
+						} else {
+							ecj.log("Rewriting import did not give an ImportDeclaration");
+						}
+					}
+				} else {
+					ecj.log("Rewriting imports did not give a list");
+				}
+			}
+			root.imports().clear();
+			root.imports().addAll(newImports);
+			
 			//System.out.println("after: " + root);
 			TextEdit te = root.rewrite(document, cu.getJavaProject().getOptions(true));
 			te.apply(document);

From karltk at strategoxt.org  Wed Dec  7 17:36:26 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 16:36:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23712 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj
Message-ID: <20111207163626.C3383CC162@mx4.tudelft.nl>

Author: karltk
Date: Wed Dec  7 16:36:26 2011
New Revision: 23712
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23712&sc=1

Log:
Added is/as for method declarations.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJTools.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJTools.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJTools.java	Wed Dec  7 16:34:41 2011	(r23711)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJTools.java	Wed Dec  7 16:36:26 2011	(r23712)
@@ -1,9 +1,9 @@
 /*
  * Created on 10. okt.. 2006
  *
- * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU Lesser Public License, v2.1
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 
@@ -17,6 +17,7 @@
 import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.ITypeBinding;
+import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.Name;
 import org.eclipse.jdt.core.dom.Type;
 import org.spoofax.interpreter.adapter.ecj.ECJAnnoWrapper;
@@ -30,6 +31,7 @@
 import org.spoofax.interpreter.adapter.ecj.WrappedIProject;
 import org.spoofax.interpreter.adapter.ecj.WrappedIType;
 import org.spoofax.interpreter.adapter.ecj.WrappedITypeBinding;
+import org.spoofax.interpreter.adapter.ecj.WrappedMethodDeclaration;
 import org.spoofax.interpreter.adapter.ecj.WrappedName;
 import org.spoofax.interpreter.adapter.ecj.WrappedType;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -139,4 +141,15 @@
 		return ((WrappedType)unannotate(term)).getWrappee();
 	}
 
+	public static boolean isMethodDeclaration(IStrategoTerm term) {
+		return unannotate(term) instanceof WrappedMethodDeclaration;
+	}
+
+	public static MethodDeclaration asMethodDeclaration(
+			IStrategoTerm term) {
+		return ((WrappedMethodDeclaration)unannotate(term)).getWrappee();
+	}
+	
+	
+
 }

From karltk at strategoxt.org  Wed Dec  7 17:41:07 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 16:41:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23713 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse
Message-ID: <20111207164107.317CC7F8029@mx1.tudelft.nl>

Author: karltk
Date: Wed Dec  7 16:41:06 2011
New Revision: 23713
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23713&sc=1

Log:
Improved signature of QualifiedName.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/EclipseJava.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/EclipseJava.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/EclipseJava.str	Wed Dec  7 16:36:26 2011	(r23712)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/EclipseJava.str	Wed Dec  7 16:41:06 2011	(r23713)
@@ -92,7 +92,7 @@
     PrefixExpression                : Term * Term -> Expression
     PrefixExpressionOperator        : Term -> Term
     PrimitiveType                   : Term -> Term
-    QualifiedName                   : Term * Term -> Term
+    QualifiedName                   : QualifiedName * SimpleName -> QualifiedName
     QualifiedType                   : Term * Term -> Term
     ReturnStatement                 : Expression -> Statement
     SimpleName                      : Term -> Term 
@@ -125,4 +125,4 @@
 overlays
 
     Interface = 1
-    Class = 0
\ No newline at end of file
+    Class = 0

From karltk at strategoxt.org  Wed Dec  7 20:32:19 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 19:32:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23714 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj
Message-ID: <20111207193219.25CDE108C034@mx3.tudelft.nl>

Author: karltk
Date: Wed Dec  7 19:32:17 2011
New Revision: 23714
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23714&sc=1

Log:
Added ECJ_binding_of_methoddecl to ECJ library.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java	Wed Dec  7 16:41:06 2011	(r23713)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java	Wed Dec  7 19:32:17 2011	(r23714)
@@ -67,6 +67,7 @@
         add(new ECJ_create_package());
         add(new ECJ_signature_to_type());
         add(new ECJ_search_for_supertype_type_refs_no_generics());
+        add(new ECJ_binding_of_methoddecl());
     }
     
     public IProject getCurrentProject() {

From karltk at strategoxt.org  Wed Dec  7 21:55:45 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 20:55:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23715 -
	spoofax/trunk/spoofax
Message-ID: <20111207205545.19DB1108C034@mx3.tudelft.nl>

Author: karltk
Date: Wed Dec  7 20:55:43 2011
New Revision: 23715
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23715&sc=1

Log:
Dropped outdated ChangeLog and old Ivy-based build files.

Deleted:
   spoofax/trunk/spoofax/ChangeLog
   spoofax/trunk/spoofax/common.xml
   spoofax/trunk/spoofax/ivysettings.xml

From karltk at strategoxt.org  Wed Dec  7 21:58:07 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 07 Dec 2011 20:58:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23716 - in
	spoofax/trunk/spoofax: _attic/deploy deploy
Message-ID: <20111207205807.0B9BC2B800B@mx2.tudelft.nl>

Author: karltk
Date: Wed Dec  7 20:58:06 2011
New Revision: 23716
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23716&sc=1

Log:
Moved old Eclipse-based deployment system.

Added:
   spoofax/trunk/spoofax/_attic/deploy/
      - copied from r23714, spoofax/trunk/spoofax/deploy/
Deleted:
   spoofax/trunk/spoofax/deploy/

From M.A.Akhter at student.tudelft.nl  Thu Dec  8 10:32:05 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 08 Dec 2011 09:32:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23717 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax:
	editor/java/org/strategoxt/imp/editors/spoofax trans/codegen
	trans/context trans/utils
Message-ID: <20111208093205.8164F108C013@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Dec  8 09:32:05 2011
New Revision: 23717
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23717&sc=1

Log:
fixed issues regarding marking errors and warning in other inactive spx files

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxLangParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/parse-adapter.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxLangParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxLangParseController.java	Wed Dec  7 20:58:06 2011	(r23716)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxLangParseController.java	Thu Dec  8 09:32:05 2011	(r23717)
@@ -1,89 +1,4 @@
 package org.strategoxt.imp.editors.spoofax;
 
-import java.io.InputStream;
-import java.io.IOException;
-import org.eclipse.imp.parser.IParseController;
-import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
-import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
-import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
-import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
-
-public class SpoofaxLangParseController extends DynamicParseController 
-{ 
-  public static final String LANGUAGE = new String("SpoofaxLang");
-
-  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
-
-  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
-
-  private static volatile Descriptor descriptor;
-
-  private static Throwable notLoadingCause;
-
-  public static synchronized Descriptor getDescriptor()
-  { 
-    if(notLoadingCause != null)
-      throw new RuntimeException(notLoadingCause);
-    if(descriptor == null)
-      createDescriptor();
-    return descriptor;
-  }
-
-  private static void createDescriptor()
-  { 
-    try
-    { 
-      InputStream descriptorStream = SpoofaxLangParseController.class.getResourceAsStream(DESCRIPTOR);
-      InputStream table = SpoofaxLangParseController.class.getResourceAsStream(TABLE);
-      if(descriptorStream == null)
-        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
-      if(table == null)
-        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
-      descriptor = DescriptorFactory.load(descriptorStream, table, null);
-      descriptor.setAttachmentProvider(SpoofaxLangParseController.class);
-    }
-    catch(BadDescriptorException exc)
-    { 
-      notLoadingCause = exc;
-      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
-      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
-    }
-    catch(IOException exc)
-    { 
-      notLoadingCause = exc;
-      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
-      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
-    }
-  }
-
-  private static String getPluginLocation()
-  { 
-    return SpoofaxLangParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
-  }
-
-  @Override public IParseController getWrapped()
-  { 
-    if(!isInitialized())
-    { 
-      if(notLoadingCause != null)
-        throw new RuntimeException(notLoadingCause);
-      try
-      { 
-        initialize(this, getDescriptor().getLanguage());
-      }
-      catch(BadDescriptorException exc)
-      { 
-        notLoadingCause = exc;
-        throw new RuntimeException(exc);
-      }
-    }
-    return super.getWrapped();
-  }
-
-  @Override protected void setNotLoadingCause(Throwable value)
-  { 
-    notLoadingCause = value;
-    super.setNotLoadingCause(value);
-  }
-}
\ No newline at end of file
+public class SpoofaxLangParseController extends SpoofaxLangParseControllerGenerated 
+{ }
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Wed Dec  7 20:58:06 2011	(r23716)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Dec  8 09:32:05 2011	(r23717)
@@ -90,24 +90,29 @@
 				; mark-issues-of-file
 			)
 	
-	compile-packages-of: (ast, file-abs-path) -> <compile-packages-of(fail, id , id)>(ast, file-abs-path) 
+	compile-packages-of: (ast, file-abs-path) -> <compile-packages-of(fail, fail , id)>(ast, file-abs-path) 
 		 	
 	// compiles all the packages stored at the filepath specified
-	compile-packages-of(should-compile-forward-refs, get-forward-references, generate-code): 
+	compile-packages-of (should-compile-forward-refs, get-forward-references, generate-code): 
 		(ast, file-abs-path) -> (ast', issues*)
 		where
 			new-compile-session(
 			 	<get-declared-packages-qname> file-abs-path => list-of-package-qname 
 				; <compile-internal>list-of-package-qname // Compiling
+			  ; dbg-compiler(!$[----compile-packages-of:: compiling and error analysis is done.])
 				; <get-semantic-problmes-by-file>file-abs-path => issues*// getting list of errors
+				; dbg-compiler(!$[----compile-packages-of:: get semantic problems of current file .])
 				; if not(<fail-if-has-errors>issues*) then
-				  	// if there is error, setting flag that foud errors 
+				  	dbg-compiler(!$[----compile-packages-of:: found errors .]);
+				  	// if there is error, setting flag that found errors 
 				  	with-spxverify ( 
 				  		rules(HasErrors :=  True())
+							, !"Failed to set HasErrors to True()"
 						);
 						additional-qnames* := [];
-						<debug(!"----Errors in current AST: ")>issues* 	  // get errors for this file only
-				else
+						dbg-compiler(!$[----Errors in current AST: [<print-as-string>issues*]])	  // get errors for this file only
+				  else
+						dbg-compiler(!$[----compile-packages-of:: No errors found.]);
 						// compiling additional packages 
 						// where current packages are imported to ( forward references) 
 						// Lazy/Incremental compilation is employed.
@@ -121,10 +126,13 @@
 							additional-qnames* := []	
 						end	
 				end
+				; dbg-compiler(!$[----compile-packages-of:: getting analyzed AST to mark errors .])
 				; <get-analyzed-ast>ast => ast'
 				; <get-related-files-of-packages><conc>(list-of-package-qname , additional-qnames*)
-				; mark-issues-of-file
+				; debug-time( mark-issues-of-file | " -- marking issues of file")
+	  		; dbg-compiler(!$[----compile-packages-of:: error marking is done.])  
 				; generate-code		
+			  ; dbg-compiler(!$[----compile-packages-of:: code is generated as well.])
 				; <debug>$[ ------------------------------------------------
 		    ]  
   
@@ -161,12 +169,19 @@
 								  )
 						end
 					; spx-compilation-unit-ast := <get-indexed-compilation-unit> file-path 
-	  			; !(spx-compilation-unit-ast ,  e, w, n)
-	  			;	set-markers(|spx-compilation-unit-ast) 	 //setting error markers	
-		  	}	
+				 	;	( <set-spoofax-markers(|file-path)>(spx-compilation-unit-ast,  e, w, n) 
+				 		<+
+			 				<debug(!"Failed to set Error Markers for ")>file-path;
+			 				fail
+		 				) 
+	  		}	
 			)	
-
 	
+	// Set markers for a given spoofax file
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // file-path: path of the spoofax compilation unit
+  set-spoofax-markers(|file-path) = prim("SSL_EXT_set_markers", file-path)
+
 rules
 	compile-main =
 		? list-of-package-qnames

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Wed Dec  7 20:58:06 2011	(r23716)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Thu Dec  8 09:32:05 2011	(r23717)
@@ -27,28 +27,6 @@
 
 rules 
 		
-	build-spoofax-console:
-		arg  -> "" // local directory path is specified 
-		where 
-			xtc-io-wrap(
-		    ?FILE(input);
-				editor-init; 						         // cleaning up and initializing editors
-				rules(NoDebugInfo: _);           // HACK: disable origin use for now
-				rules(ProjectPath := input);
-				<chdir>input;
-				initialize-configuration;        // initializes configuration and setting up enviroment variables
-				// Overriding spx.config configured source directory. 
-				// Comment this line if sources configured in the spx.config should be activated
-				//<override-configured-source-directories><abspath>arg;
-				enable-command-line-mode;  
-				<show-configuration;debug>();     //show configuration for this spx project
-				build-all;                     //building all the spx files in the sources directory
-				<debug>$["----------------------Build-all succeeds----------------------"];
-				!FILE($[[input]/.shadowdir/Globals/Signatures.str])	 //HACK : just to ensure this strategy is not failing ...
-			<+
-				prim("SSL_stacktrace_get_all_frame_names") ; report-failure
-		)
-	
 	report-failure-with-stacktrace = prim("SSL_stacktrace_get_all_frame_names") ; report-failure
 	
 	editor-build-spoofaxlang-jvm :
@@ -56,18 +34,14 @@
 		where
 			 <build-spoofaxlang-jvm>project-path
 			 
-			 
-	//TODO : Improve error reporting. 
   build-spoofaxlang-jvm:
     current-project-location -> <id>
     where 
-			fail-if-has-errors 
+			verify-if-has-errors 
 		where 
     	<debug(!"current-project-directory : ")>current-project-location; 
-    	
     	with-spxverify(	
 	  		editor-init; 						         // cleaning up and initializing editors
-				rules(NoDebugInfo: _);           // HACK: disable origin use for now
 				previous-working-dir := <getcwd>;
 				rules(
 					ProjectPath := current-project-location
@@ -85,15 +59,9 @@
 			<+
 				report-failure-with-stacktrace 
 			);
-			
 			with-spxverify(
 				<debug>$[SPXLang Build: ];
-				<refresh-workspace-file> current-project-location; // refreshing current project
-				with-spxverify(
-						build-all' //building all the spx files in the sources directory
-						, !"Failed to build all the artifacts"
-				);  
-				<chdir>previous-working-dir; 			// resetting working directory
+				build-all';  //building all the spx files in the sources directory
 				<debug>$[Intermediate artefacts have been generated successfully.]
 				
 			<+
@@ -153,13 +121,14 @@
 					; <compile-all>(abs-path , ast)
 					, !"compile-spx failed due to error in complile-all"
 				 )
-	
+
 	editor-clean-spx:  
 		(selected, position, ast, path, project-path) -> None()
 		where
       compile-init; 
       clean-spx(|project-path)
 
+	
 rules 
 		clean-spx(|project-path) = 
 			with-spxverify(
@@ -167,15 +136,20 @@
 	  			<refresh-workspace-file>project-path;
 	      	<debug>$[------Index Cleanup is done ------]
 	  	)
-	  	
-	
-	
+
 rules
 	
 	build-incrementally-service:
 		(selected, position, ast, path, project-path) -> None()
 		where
-			fail-if-has-errors 
+			HasErrors;
+			<debug>$[Compilation Failed.Please fix the errors before building the artifacts : [<print-as-string>path]]
+			
+			
+	build-incrementally-service:
+		(selected, position, ast, path, project-path) -> None()
+		where
+			not(HasErrors)
 		where 
 			with-spxverify(
 				editor-init	
@@ -185,7 +159,7 @@
 	  		);
 			with-spxverify(
   			abs-path := <concat-strings>[project-path, "/" ,path]
-			; <store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
+				; <store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
 	  		; <build-spx-incrementally>(ast, abs-path) 
 	   )
   	  
@@ -193,7 +167,7 @@
 	editor-build-all:
 		(selected, position, ast, path, project-path) -> None()
 		where
-			fail-if-has-errors 
+			verify-if-has-errors  
 		where
 	 		<debug>$[----------------------------starting compile + build all----------------------------];
 			with-spxverify(	
@@ -210,8 +184,9 @@
 	
 				
 			
-	fail-if-has-errors = 
-		with-spxverify(
+	verify-if-has-errors = 
 			not(HasErrors)
-			, !"Compilation Failed.Please fix the errors before building the artifacts"
-		)	    		  					 
\ No newline at end of file
+		<+
+			debug(! "Compilation Failed.Please fix the errors before building the artifacts");
+			fail
+		
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/parse-adapter.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/parse-adapter.str	Wed Dec  7 20:58:06 2011	(r23716)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/parse-adapter.str	Thu Dec  8 09:32:05 2011	(r23717)
@@ -65,6 +65,10 @@
 				)
 			end
 
+rules 
+	  
+	get-spxcompilation-unit =  verify(is-string|<id>, "Full-path String @get-compilation-unit"); parse-spoofaxlang-file
+
 
 rules
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Wed Dec  7 20:58:06 2011	(r23716)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Thu Dec  8 09:32:05 2011	(r23717)
@@ -491,6 +491,7 @@
    */     
   get-indexed-compilation-unit =  verify(is-string|<id>, "Full-path String @get-indexed-compilation-unit"); prim("SPX_index_get_compilation_unit" , <get-project-path> , <id>)
   
+  
   /**
    * Gets PackageDeclaration indexed by the packageId. It also returns all the
    * absolute path where the Package is declared.     

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str	Wed Dec  7 20:58:06 2011	(r23716)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str	Thu Dec  8 09:32:05 2011	(r23717)
@@ -30,7 +30,7 @@
 		  if <is-newer> (cache-path, path) ; not(<get-currently-analyzing-ast-from-cache> full-path)then
       	// spx-compilation-unit := <ReadFromFile> cache-path;
       	dbg-compiler(! $[Cache | Already updated . Hence, doing nothing]) 
-      	// since cache is updated , it is assumed that index is updated as well
+      	// since cache is updated , it implies that index is updated as well
       else
         
         //1. getting the cached AST to precompile it due to the recent changes.
@@ -38,26 +38,24 @@
           dbg-compiler(! $[Cache | Reading it from actual source!]) ;
           spx-compilation-unit := <parse-file> full-path
         else
-          dbg-compiler(! $[Cache | Reading it from cached source(or currently analzing ast)]) 
+          dbg-compiler(! $[Cache | Reading it from cached source(i.e. the currently analzing ast)]) 
         end;
-        
         //2. precomiling it so update the index and related artifacts 
         {| currently-precompiling-spx-abspath:
             rules ( 
               currently-precompiling-spx-abspath := path'  
             ); 
-            dbg-compiler(! $[Cache | Precompiling [path']]);
+            dbg-compiler(! $[Precompiling [path']]);
             // precompiling modified source to update the cache 
             <precompile <+ throw-precompile-exception>spx-compilation-unit  
         |};
-        
         //3. precomile is successful . Hence updating the existing cache. 
-        //   cache acts as a market to indicate whether compilation and 
+        //   cache acts as a marker to indicate whether compilation and 
         //   code generation is needed. 
         //   if it is in cache it means the precompilation is not needed.
         if <file-exists>full-path then
-          // updating cache if on filesystem (e.g., ignore libstratego-lib)
-          <WriteToBinaryFile> (cache-path, spx-compilation-unit);
+          // updating markers in cache if on filesystem (e.g., ignore libstratego-lib)
+          <WriteToBinaryFile> (cache-path, cache-path);
           dbg-compiler(!$[Caching |Updating cache for following CompilationUnit: [<print-as-string>full-path]])
         end;
         <index-modified-compilation-units-path> path'

From M.A.Akhter at student.tudelft.nl  Thu Dec  8 10:33:30 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 08 Dec 2011 09:33:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23718 - in
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling:
	building wizards
Message-ID: <20111208093330.AFC90CC07B@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Dec  8 09:33:30 2011
New Revision: 23718
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23718&sc=1

Log:
-minor changes in project wizard

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizard.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java	Thu Dec  8 09:32:05 2011	(r23717)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java	Thu Dec  8 09:33:30 2011	(r23718)
@@ -65,7 +65,7 @@
 		final IResource file = EditorIOAgent.getResource(new File(workingDirectoryArg));
 
 		Environment.getStrategoLock().lock();
-		try {
+			try {
 			if (!isActive())
 			{
 				active = true;
@@ -85,8 +85,6 @@
 						System.err.println("Build failed; see error log.");
 						System.exit(1);
 					}
-
-
 				} finally {
 					active = false;
 				}
@@ -97,6 +95,7 @@
 		}
 	}
 
+	
 	public static boolean generateArtefacts(IResource file, IProgressMonitor monitor , EditorIOAgent agent) {
 		
 		IPath location = file.getLocation();
@@ -116,6 +115,7 @@
 				try {
 					System.out.println("Compiling SPX files and generating intermediate artefacts.");
 					System.out.println("Invoking build-spoofaxlang-jvm.");
+				
 					build_spoofaxlang_jvm_0_0.instance.invoke( contextSpoofaxLang , input);
 					System.out.println("Intermediate artefacts have been generated successfully.");
 					

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizard.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizard.java	Thu Dec  8 09:32:05 2011	(r23717)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizard.java	Thu Dec  8 09:33:30 2011	(r23718)
@@ -5,6 +5,7 @@
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 
+import org.eclipse.core.resources.IFolder;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IWorkspace;
@@ -25,21 +26,15 @@
 import org.eclipse.ui.INewWizard;
 import org.eclipse.ui.IWorkbench;
 import org.spoofax.interpreter.core.Interpreter;
-import org.spoofax.interpreter.terms.IStrategoString;
-import org.strategoxt.imp.spoofax.generator.SpoofaxGenerator;
-import org.strategoxt.imp.metatooling.building.AntSpxGenerateArtefacts;
-import org.strategoxt.imp.metatooling.loading.DynamicDescriptorLoader;
 import org.strategoxt.imp.runtime.EditorState;
-import org.strategoxt.imp.editors.spoofax.*;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
+import org.strategoxt.imp.spoofax.generator.SpoofaxGenerator;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoErrorExit;
 import org.strategoxt.lang.StrategoException;
 import org.strategoxt.lang.StrategoExit;
 import org.strategoxt.permissivegrammars.make_permissive;
-import org.strategoxt.stratego_lib.dr_scope_all_end_0_0;
-import org.strategoxt.stratego_lib.dr_scope_all_start_0_0;
 
 /**
  * A wizard for creating new Spoofax/IMP projects using SPX Language .
@@ -150,10 +145,20 @@
 						+ agent.getLog(), e);
 			}
 		}
-		AntSpxGenerateArtefacts.generateArtefacts(project , monitor, agent);
+		monitor.worked(8);
 		
-		monitor.worked(3);
-		refreshProject(project);
+		if ( !project.isSynchronized(DEPTH_INFINITE))
+		{
+			project.refreshLocal(DEPTH_INFINITE, new NullProgressMonitor());
+			
+			IFolder srcFolder = project.getFolder("src");
+			srcFolder.touch(new NullProgressMonitor());
+			srcFolder.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
+			
+		}
+		
+		//AntSpxGenerateArtefacts.generateArtefacts(project , monitor, agent);
+		//project.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
 		
 		monitor.setTaskName("Acquiring workspace lock"); // need root lock for builder
 		IWorkspaceRoot root = project.getWorkspace().getRoot();
@@ -169,6 +174,7 @@
 				
 				monitor.worked(1);
 				
+				
 				monitor.setTaskName("Building and loading example editor");
 				project.build(IncrementalProjectBuilder.FULL_BUILD, null);
 				monitor.worked(6);
@@ -180,10 +186,9 @@
 				//IResource descriptor = project.findMember("include/" + languageName + ".packed.esv");
 				//DynamicDescriptorLoader.getInstance().forceUpdate(descriptor);
 				monitor.worked(2);
-
 				project.refreshLocal(DEPTH_INFINITE, new NullProgressMonitor());
 				monitor.worked(1);
-			
+				
 			} finally {
 				Environment.getStrategoLock().unlock();
 			}
@@ -191,19 +196,21 @@
 			Job.getJobManager().endRule(root);
 		}
 
-		monitor.setTaskName("Opening editor tabs");
+		monitor.setTaskName("Opening editor tabs. Please rebuild the whole project.");
 		Display display = getShell().getDisplay();
 		EditorState.asyncOpenEditor(display, project.getFile("/src/" + (languageName+"-descriptor").toLowerCase() +  ".spx"), true);
 		monitor.worked(2);
 		EditorState.asyncOpenEditor(display, project.getFile("/src/" + (languageName+"-definitions").toLowerCase() +  ".spx"), true);
-		monitor.worked(1);
+		monitor.worked(2);
 		EditorState.asyncOpenEditor(display, project.getFile("/test/example." + extensions.split(",")[0]), false);
 		refreshProject(project);
 	
+		monitor.worked(2);
+	
 		monitor.done();
 	}
-
-	private static void refreshProject(final IProject project) {
+ 	
+ 	private static void refreshProject(final IProject project) {
 		// We schedule a project refresh to make all ".generated" files readable
 		Job job = new Job("Refreshing project") {
 			@Override
@@ -227,6 +234,7 @@
  		return Interpreter.cify(languageName.toLowerCase()).replace('-', '_');
  	}
 
+ 	
 	/*
 	private void throwCoreException(String message) throws CoreException {
 		IStatus status =

From M.A.Akhter at student.tudelft.nl  Thu Dec  8 10:44:08 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 08 Dec 2011 09:44:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23719 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <20111208094408.907B97F8008@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Dec  8 09:44:08 2011
New Revision: 23719
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23719&sc=1

Log:
modification in SetMarkersPrimitive so that it still works in case of missing SourceAttachment in that root node. It tries to get the resource location from the provided tvars

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SetMarkersPrimitive.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SetMarkersPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SetMarkersPrimitive.java	Thu Dec  8 09:33:30 2011	(r23718)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SetMarkersPrimitive.java	Thu Dec  8 09:44:08 2011	(r23719)
@@ -1,13 +1,18 @@
 package org.strategoxt.imp.runtime.stratego;
 
+import java.io.File;
+
 import org.eclipse.core.resources.IResource;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.services.StrategoAnalysisJob;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
 
@@ -20,14 +25,16 @@
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 			throws InterpreterException {
-
-		IResource resource = SourceAttachment.getResource(tvars[0]);
+		
+		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
+		if (!(agent instanceof EditorIOAgent)) 
+			return false;
+	
+		IResource resource = getResource(tvars);
 		if (resource == null)
 			return false;
-
-		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
-		if (!(agent instanceof EditorIOAgent)) return false;
-
+	
+		
 		StrategoAnalysisJob job = ((EditorIOAgent)agent).getJob();
 
 		StrategoObserver observer = job.getObserver();
@@ -41,4 +48,27 @@
 		return true;
 	}
 
+	/**
+	 * @param tvars
+	 * @param resource
+	 * @return
+	 */
+	private static IResource getResource(IStrategoTerm[] tvars) {
+		IResource resource = null;
+		if( tvars[0] instanceof IStrategoString){
+			// HACK : often Source Attachment is missing in the root node.
+			// Hence, providing the path to the resource instead of getting 
+			// it from the SourceAttachment 
+			try{
+				resource = EditorIOAgent.getResource(new File(Tools.asJavaString(tvars[0])));
+			}catch(Exception e){
+				Environment.logException("Invalid resource path is provided : "+ tvars[0] , e);
+			}
+		}
+		else{
+			resource = SourceAttachment.getResource(tvars[0]);
+		}
+		return resource;
+	}
+
 }

From M.A.Akhter at student.tudelft.nl  Thu Dec  8 10:44:57 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 08 Dec 2011 09:44:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23720 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments
Message-ID: <20111208094457.A5877108C017@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Dec  8 09:44:57 2011
New Revision: 23720
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23720&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java	Thu Dec  8 09:44:08 2011	(r23719)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java	Thu Dec  8 09:44:57 2011	(r23720)
@@ -39,9 +39,11 @@
 				while (attachment != null) {
 					if (attachment.getAttachmentType().isSerializationSupported()) {
 						
-						IStrategoTerm result = attachment.getAttachmentType().toTerm(factory, attachment);
+						//IStrategoTerm result = tryConvertAttachmentTypeToTerm(factory, attachment);
+						
+						IStrategoTerm result =  attachment.getAttachmentType().toTerm(factory, attachment);
 						if (results == null) results = term.getAnnotations();
-						results = factory.makeListCons(result, results);
+						results = (result ==null) ? results : factory.makeListCons(result, results);
 					}
 					attachment = attachment.getNext();
 				}
@@ -52,10 +54,18 @@
 		}.transform(term);
 	}
 	
+	static IStrategoTerm  tryConvertAttachmentTypeToTerm( ITermFactory factory , ITermAttachment attachment ){
+		try{
+			return attachment.getAttachmentType().toTerm(factory, attachment);
+		}catch(Exception e){
+			//do nothing
+		}
+		return null;
+	}
 	public IStrategoTerm fromAnnotations(IStrategoTerm term, final boolean mutableOperations) {
 		final TermAttachmentType<?>[] types = TermAttachmentType.getKnownTypes();
 		
-		return new TermTransformer(factory, false) {
+		return new TermTransformer(factory, true) {
 			@Override
 			public IStrategoTerm preTransform(IStrategoTerm term) {
 				IStrategoTerm origin = OriginAttachment.getOrigin(term); 

From M.A.Akhter at student.tudelft.nl  Thu Dec  8 10:48:41 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 08 Dec 2011 09:48:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23721 - in
	spoofax/trunk/spoofax:
	org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index
	org.spoofax.jsglr/src/org/spoofax/jsg...
Message-ID: <20111208094841.2BA06108C003@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Dec  8 09:48:40 2011
New Revision: 23721
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23721&sc=1

Log:
updating the implementation of LanguageDescription & ImploderAttachment to avoid NLE...

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Thu Dec  8 09:44:57 2011	(r23720)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Thu Dec  8 09:48:40 2011	(r23721)
@@ -79,7 +79,7 @@
 		// instantiating a new SpxCompilationUnitInfo object with the newly created resID
 		// and storing it in infomap
 		SpxCompilationUnitInfo newResInfo = new SpxCompilationUnitInfo(absPath,resID);
-		String key = newResInfo.getAbsPathString();
+		String key = newResInfo.getAbsPathString(); 
 		
 		_infoMap.put(key, newResInfo);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Thu Dec  8 09:44:57 2011	(r23720)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Thu Dec  8 09:48:40 2011	(r23721)
@@ -2,8 +2,10 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 
 import jdbm.PrimaryHashMap;
 import jdbm.RecordListener;
@@ -58,6 +60,7 @@
 		String tableName = SRC+ "_"+ manager.getIndexId();
 
 		assert manager != null;
+		
 		_manager = manager;
 		_moduleLookupMap = manager.loadHashMap(tableName+ "._lookupModuleMap.idx");
 
@@ -337,7 +340,7 @@
 		if(foundModuleDecls  != null)
 		{
 			for ( IStrategoList l: foundModuleDecls)
-				ret.add(_moduleByFileAbsPath.getPrimaryValue(l));
+				ret.add(_moduleLookupMap.get(l));
 		}
 		
 		return ret;
@@ -518,7 +521,19 @@
 	 * @return
 	 */
 	public Iterable<IStrategoList> getModuleIdsByLangaugeName(String langaugeName) {
-		return this._modulesByLangaugeName.get(langaugeName);
+		Set<IStrategoList> mIds = new HashSet<IStrategoList>();
+		
+		Iterable<LanguageDescriptor> lDescs = this._modulesByLangaugeName.getPrimaryValues(langaugeName);
+		
+		if(lDescs != null)
+		{
+			for(LanguageDescriptor l:lDescs){ 
+				mIds.add(l.getId());
+			}
+		}
+		
+		return mIds;
+	
 	}
 	
 	public Iterable<IStrategoList> getModuleIdsByLangaugeName(IStrategoString langaugeName) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Thu Dec  8 09:44:57 2011	(r23720)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Thu Dec  8 09:48:40 2011	(r23721)
@@ -59,7 +59,7 @@
 		assert spxSemanticIndexFacade != null : "SpxSemanticIndexFacade is expected to be nonnull" ;
 
 		this._agent = spxSemanticIndexFacade.getIOAgent();
-		this._indexId = spxSemanticIndexFacade.indexId() ;
+		this._indexId = spxSemanticIndexFacade.getIndexId() ;
 		
 		BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX = spxSemanticIndexFacade.getProjectPath()+ "/" + Utils.SPX_INDEX_DIRECTORY+ "/" + _indexId + ".idx";
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Thu Dec  8 09:44:57 2011	(r23720)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Thu Dec  8 09:48:40 2011	(r23721)
@@ -37,24 +37,28 @@
 import org.spoofax.terms.attachments.TermAttachmentSerializer;
 import org.spoofax.terms.attachments.TermAttachmentStripper;
 
-//TODO :  refactor this class  to multiple facades one for package, one for modules 
-//TODO FIXME : combine symbol table and index
 public class SpxSemanticIndexFacade {
 	
+	// TODO : Implement SRP i.e., refactor this class  to multiple facades one for package, one for modules 
+	// FIXME : Eliminate additional index used for symbol-table. Reuse Symboltable for that. 
+	
 	private ISpxPersistenceManager _persistenceManager;
+	private final SpxConstructors _spxConstructors;
 	
-	private final String _projectPath ;
 	private String _indexId;
+	private final String _projectPath ;
+	
+	
+	// Time-stamps for sliding/incremental compilation 
+	private long _currentCodeGenerationStratedOn;
+	private long _currentIndexUpdatingStartedOn;
+
+	
 	private final ITermFactory _termFactory;
 	private final IOAgent _agent;
 	private final TermAttachmentStripper _stripper;
 	private final TermAttachmentSerializer _termAttachmentSerializer;
 	private final TermConverter _converter;
-	private final SpxConstructors _spxConstructors;
-	
-	private long _currentCodeGenerationStratedOn;
-	private long _currentIndexUpdatingStartedOn;
-
 	
 	/**
 	 * Initialises the factory for the semantic index
@@ -79,6 +83,10 @@
 		_spxConstructors = new SpxConstructors(_termFactory);
 	}
 	
+	/**
+	 * Initializes Persistence Manager 
+	 * @throws Exception
+	 */
 	public synchronized void initializePersistenceManager() throws Exception {
 		_persistenceManager = new SpxPersistenceManager(this);
 		_persistenceManager.initializeSymbolTables(this._projectPath, this);
@@ -101,11 +109,8 @@
 		return _termAttachmentSerializer;
 	}
 	
-	public String indexId() {return _indexId; }
-	/**
-	 * Returns the TermFactory 
-	 * @return
-	 */
+	public String getIndexId() {return _indexId; }
+	
 	public ITermFactory getTermFactory() { return _termFactory; }
 
 	public TermConverter getTermConverter() {return _converter ; }
@@ -161,8 +166,9 @@
 		
 		IStrategoAppl term = (IStrategoAppl)table.get(this, resUri);
 		
-		if ( term != null)
+		if ( term != null){
 			retTerm = forceImploderAttachment(term, resUri);
+		}
 		
 		logMessage("SpxSemanticIndexFacade.getCompilationUnit :  Returning Following APPL for uri " + resUri +  " : "+ retTerm);
 		
@@ -1030,7 +1036,7 @@
 		ISpxPersistenceManager persistenceManager = this.getPersistenceManager();
 		if (printIfDebug){
 			try {
-				persistenceManager.spxSymbolTable().printSymbols(this, stageName, this.getProjectPath(), this.indexId());
+				persistenceManager.spxSymbolTable().printSymbols(this, stageName, this.getProjectPath(), this.getIndexId());
 			} catch (SpxSymbolTableException e) {
 			}
 		}

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java	Thu Dec  8 09:44:57 2011	(r23720)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java	Thu Dec  8 09:48:40 2011	(r23721)
@@ -29,8 +29,11 @@
 			protected IStrategoTerm[] toSubterms(ITermFactory f, ImploderAttachment attachment) {
 				IToken left = attachment.getLeftToken();
 				IToken right = attachment.getRightToken();
+				
+				String fileName = left.getTokenizer().getFilename()  == null ? "" :left.getTokenizer().getFilename();
+				
 				return new IStrategoTerm[] {
-					f.makeString(left.getTokenizer().getFilename()),
+					f.makeString(fileName),
 					f.makeInt(left.getLine()),
 					f.makeInt(left.getColumn()),
 					f.makeInt(left.getStartOffset()),
@@ -40,8 +43,11 @@
 
 			@Override
 			protected ImploderAttachment fromSubterms(IStrategoTerm[] subterms) {
-				return createCompactPositionAttachment(asJavaString(subterms[0]), asJavaInt(subterms[1]),
+				String fileName = asJavaString(subterms[0]).equals("") ? null :asJavaString(subterms[0]);
+				
+				return createCompactPositionAttachment(fileName, asJavaInt(subterms[1]),
 						asJavaInt(subterms[2]), asJavaInt(subterms[3]), asJavaInt(subterms[4]));
+				
 			}
 		
 		};

From g.h.wachsmuth at tudelft.nl  Thu Dec  8 12:08:07 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Thu, 08 Dec 2011 11:08:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23722 - in
	spoofax-contrib/jasmin-spoofax/trunk: test trans
Message-ID: <20111208110807.6E0F2CC055@mx4.tudelft.nl>

Author: GuidoWachsmuth
Date: Thu Dec  8 11:08:06 2011
New Revision: 23722
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23722&sc=1

Log:


Modified:
   spoofax-contrib/jasmin-spoofax/trunk/test/HelloWorld.j
   spoofax-contrib/jasmin-spoofax/trunk/trans/jasminxt.str

Modified: spoofax-contrib/jasmin-spoofax/trunk/test/HelloWorld.j
==============================================================================
--- spoofax-contrib/jasmin-spoofax/trunk/test/HelloWorld.j	Thu Dec  8 09:48:40 2011	(r23721)
+++ spoofax-contrib/jasmin-spoofax/trunk/test/HelloWorld.j	Thu Dec  8 11:08:06 2011	(r23722)
@@ -1,4 +1,4 @@
-.class public HelloWorld
+.class public example/HelloWorld
 .super java/lang/Object
 
     ;

Modified: spoofax-contrib/jasmin-spoofax/trunk/trans/jasminxt.str
==============================================================================
--- spoofax-contrib/jasmin-spoofax/trunk/trans/jasminxt.str	Thu Dec  8 09:48:40 2011	(r23721)
+++ spoofax-contrib/jasmin-spoofax/trunk/trans/jasminxt.str	Thu Dec  8 11:08:06 2011	(r23722)
@@ -37,7 +37,7 @@
 		(selected, position, ast, path, project-path) -> None()
 		with
 			parentdir := <dirname> path ;
-			<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], path])
+			<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], "-d", parentdir, path])
 		where
 			cfname := <concat-strings ; guarantee-extension(|"class")> [project-path, "/", <dirname> path, "/", <class-name> ast] ;
 			<refresh-workspace-file> cfname
@@ -45,8 +45,17 @@
 	execute-class:
 		(selected, position, ast, path, project-path) -> (filename, result)
 		with
-			filename := <guarantee-extension(|"result.aterm")> path
+			filename := <guarantee-extension(|"result.txt")> path
 		with
 			cname := <class-name ; string-replace(|"/",".")> ast ;
 			cpath := <concat-strings> [project-path, "/", <dirname> path] ;
-			<execute-java(|cpath)> cname => result
\ No newline at end of file
+			<execute-java(|cpath) ; process-output> cname => result
+			
+	process-output: Output(result, "") -> result
+	process-output: Output(result, error) -> $[[result] Runtime error: [error]]
+	
+		where not (<""> error)
+		
+signature constructors
+	
+	Output: String * String -> Term
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Thu Dec  8 13:57:14 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 08 Dec 2011 12:57:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23723 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.spoofax/trans
	org.strategoxt.imp.editors.spoofax/trans/codegen
	org.strategoxt.imp.metatooling/src/org/strategoxt/i...
Message-ID: <20111208125714.95ABE2B800E@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Dec  8 12:57:13 2011
New Revision: 23723
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23723&sc=1

Log:
changes in the build files- added a ant target to invoke clean build

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/lib/spoofaxgenerator.jar
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Thu Dec  8 11:08:06 2011	(r23722)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Thu Dec  8 12:57:13 2011	(r23723)
@@ -35,12 +35,12 @@
 			 <build-spoofaxlang-jvm>project-path
 			 
   build-spoofaxlang-jvm:
-    current-project-location -> <id>
+    (current-project-location, build-opt) -> <id>
     where 
-			verify-if-has-errors 
+			verify-if-has-errors;
+			<debug> $[-- Invoking Spoofaxlang Bulid with following arguments [<print-as-string>]] 
 		where 
-    	<debug(!"current-project-directory : ")>current-project-location; 
-    	with-spxverify(	
+			with-spxverify(	
 	  		editor-init; 						         // cleaning up and initializing editors
 				previous-working-dir := <getcwd>;
 				rules(
@@ -49,21 +49,26 @@
 				<chdir>current-project-location				// setting current directory to the project location
 			<+
 				report-failure-with-stacktrace 
-			);
-			
-			with-spxverify(	
-				<debug>$[Activating Project Configuration : ];
+			)
+		where 
+  		with-spxverify(	
+				<debug>$[-- Activating following Project Configuration : ];
 				initialize-configuration;        	// initializes configuration and setting up enviroment variables
-				enable-command-line-mode;  
+				enable-command-line-mode;
 				<show-configuration;debug>()     //show configuration for this spx project
 			<+
 				report-failure-with-stacktrace 
-			);
+			);	
 			with-spxverify(
-				<debug>$[SPXLang Build: ];
+				<debug>$[-- SPXLang Build: ];
+				if <equal-strings>(build-opt , "-c")  then
+					index-clearall;
+					<debug>$[-- Initializing clean build.]
+				else
+					<debug>$[-- Initializing Incremental Build.]
+				end;  
 				build-all';  //building all the spx files in the sources directory
-				<debug>$[Intermediate artefacts have been generated successfully.]
-				
+				<debug>$[-- Intermediate artefacts have been generated successfully.]
 			<+
 				report-failure-with-stacktrace 
 			)
@@ -187,6 +192,6 @@
 	verify-if-has-errors = 
 			not(HasErrors)
 		<+
-			debug(! "Compilation Failed.Please fix the errors before building the artifacts");
+			debug(! "Build Failed.Please fix the errors before building the artifacts");
 			fail
 		
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Thu Dec  8 11:08:06 2011	(r23722)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Thu Dec  8 12:57:13 2011	(r23723)
@@ -39,17 +39,30 @@
 	
 	package-qname-to-string : Package(untyped-qname) ->  <convert-qname(|".");string-replace(|"-", ".")> 	untyped-qname
 	
-strategies 
+	
+rules 
 	
 	ppterm = pp-aterm-box ; box2text-string(|100)
 
 	print-as-string = is-string <+ write-to-string
 
-strategies
-	/*internal*/ require(s) = not(s)
+rules
+		/*internal*/ require(s) = not(s)
 
-strategies 
-	
+rules 
+	equal-strings = 
+		?(str1 , str2); 
+		where( 
+			exploded-str1 := <explode-string>str1;
+			exploded-str2 := <explode-string>str2;
+			expected-ret-value := 0
+		);	
+		where(	
+			<strcmp>(exploded-str1 , exploded-str2);
+			?expected-ret-value
+		) 
+		 
+rules	
 	//After ensuring result is unique i.e. list contains only one element, it returns the unique result
 	ensure-is-unique = ?[<id>] <+ dbg-symboltable(!$[SymbolTable| Failed to resolve unique declaration.] | "ensure-is-unique" , "Info");fail
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java	Thu Dec  8 11:08:06 2011	(r23722)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java	Thu Dec  8 12:57:13 2011	(r23723)
@@ -61,11 +61,16 @@
 		if (args == null || args.length == 0)
 			throw new IllegalArgumentException("Project Work Directory is missing. ");
 
+		
 		final String workingDirectoryArg = args[0];
 		final IResource file = EditorIOAgent.getResource(new File(workingDirectoryArg));
-
+		String buildStrategy = "-i"; 
+		
+		if (args.length >1)
+			buildStrategy = args[1];
+		
 		Environment.getStrategoLock().lock();
-			try {
+		try {
 			if (!isActive())
 			{
 				active = true;
@@ -80,7 +85,7 @@
 					agent.setAlwaysActivateConsole(true);
 					agent.setWorkingDir(file.getLocation().toOSString());
 
-					boolean success = generateArtefacts(file, new NullProgressMonitor() , agent);
+					boolean success = generateArtefacts(file, new NullProgressMonitor() , agent,buildStrategy);
 					if (!success) {
 						System.err.println("Build failed; see error log.");
 						System.exit(1);
@@ -96,7 +101,7 @@
 	}
 
 	
-	public static boolean generateArtefacts(IResource file, IProgressMonitor monitor , EditorIOAgent agent) {
+	public static boolean generateArtefacts(IResource file, IProgressMonitor monitor , EditorIOAgent agent,  String buildStrategy) {
 		
 		IPath location = file.getLocation();
 		if (location == null) return false;
@@ -110,13 +115,16 @@
 				spoofaxlang.init(contextSpoofaxLang);
 				
 				IStrategoString input = contextSpoofaxLang.getFactory().makeString(file.getLocation().toOSString());
+				IStrategoString buildStrategyTerm = contextSpoofaxLang.getFactory().makeString(buildStrategy);
+				
+				
 				dr_scope_all_start_0_0.instance.invoke(contextSpoofaxLang, input);
 				
 				try {
 					System.out.println("Compiling SPX files and generating intermediate artefacts.");
 					System.out.println("Invoking build-spoofaxlang-jvm.");
 				
-					build_spoofaxlang_jvm_0_0.instance.invoke( contextSpoofaxLang , input);
+					build_spoofaxlang_jvm_0_0.instance.invoke( contextSpoofaxLang , contextSpoofaxLang.getFactory().makeTuple(input, buildStrategyTerm));
 					System.out.println("Intermediate artefacts have been generated successfully.");
 					
 				} catch (StrategoErrorExit e) {
@@ -129,8 +137,7 @@
 								+ agent.getLog(), e);
 					}
 				}
-				finally 
-				{
+				finally {
 					dr_scope_all_end_0_0.instance.invoke(contextSpoofaxLang, input);
 				}
 				

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/lib/spoofaxgenerator.jar
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-build-xml.str	Thu Dec  8 11:08:06 2011	(r23722)
+++ spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-build-xml.str	Thu Dec  8 12:57:13 2011	(r23723)
@@ -46,26 +46,30 @@
   <import file=".build/build.spx.main.generated.xml" optional = "true"/>
   
   <!-- Compiles and Generates Artefacts. Internally it calls build-spoofaxlang-jvm strategy -->
- 	<target name="buildinit">
+ 	<target name="generate-incrementally">
   	<java classname="org.strategoxt.imp.metatooling.building.AntSpxGenerateArtefacts" failonerror="true">
 		 	<arg value="${basedir}"/>
+		 	<arg value="-i"/> <!-- Incremental Build -->
 	  </java>
   </target>
   
-  <target name="refresh-src" if="eclipse.running">        
-		<eclipse.convertPath fileSystemPath="${basedir}" 			property="projectdir"/>
-        <eclipse.convertPath fileSystemPath="${basedir}/src"  		property="projectdir.src"/>
+  <target name="generate-all">
+  	<java classname="org.strategoxt.imp.metatooling.building.AntSpxGenerateArtefacts" failonerror="true">
+		 	<arg value="${basedir}"/>
+		 	<arg value="-c"/> <!-- clean Build -->
+	  </java>
+  </target>
   
-        <eclipse.refreshLocal resource="${projectdir}"     depth="infinite"/>
-        <eclipse.refreshLocal resource="${projectdir.src}" depth="infinite"/>
+  <target name="build-incrementally" depends="generate-incrementally">
+  	<antcall target = "build-spx-packages"/>
   </target>
-
-
-  <!-- Main target -->
-  <target name="all" depends="buildinit">
-  	<antcall target = "refresh-src"/>
+  
+  <target name="build-clean" depends="generate-all">
   	<antcall target = "build-spx-packages"/>
   </target>
+  
+  <!-- Main target -->
+  <target name = "all" depends = "build-incrementally"/>
 </project>]
 	end
 

From m.dejonge at tudelft.nl  Thu Dec  8 15:53:53 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 08 Dec 2011 14:53:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23724 - in
	sglr-recovery/trunk/ErrorScenarios/src: evaluation_runs
	fileprocessing
Message-ID: <20111208145353.AEBDC7F8023@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Dec  8 14:53:52 2011
New Revision: 23724
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23724&sc=1

Log:
erroneous constructs

Modified:
   sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Classification.java
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ClassificationRun.java
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ErrorClassifier.java
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FileProcessing.java

Modified: sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Classification.java
==============================================================================
--- sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Classification.java	Thu Dec  8 12:57:13 2011	(r23723)
+++ sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Classification.java	Thu Dec  8 14:53:52 2011	(r23724)
@@ -23,29 +23,48 @@
 		
 		//final String sourceDirName = "unclassified_test";
 		//final String sourceDirName = "unclassified_researchers";
-		final String sourceDirName = "unclassified_students";
+		//final String sourceDirName = "unclassified_students";
+		//final String sourceDirName = "unclassified_generated_data";
+		//final String resultName = "Generated_Data_2";
+
+		final String sourceDirName = "unclassified_random_sample";
+		final String resultName = "Random";
+		final String langDir = "stratego";
+		final String ptName = "Stratego-Sugar";
+
+		/*
+		final String sourceDirName = "unclassified";
+		final String resultName = "SDF-Researchers";
+		final String langDir = "sdf";
+		final String ptName = "SDF";
+		*/
 		
-		ClassificationRun noErrorRun = new ClassificationRun("stratego");
-		noErrorRun.addClassifier(sourceDirName, "1_NoErrors", "Stratego-Sugar.tbl", ParserSetting.NO_ERRORS, false);
-		//noErrorRun.classifyEditScenarios("NoError_students");
+		ClassificationRun noErrorRun = new ClassificationRun(langDir);
+		noErrorRun.addClassifier(sourceDirName, "1_NoErrors", ptName + ".tbl", ParserSetting.NO_ERRORS, false);
+		//noErrorRun.classifyEditScenarios("NoError_" + resultName);
 
-		ClassificationRun completionRun = new ClassificationRun("stratego");
-		completionRun.addClassifier(sourceDirName, "_Completion", "Stratego-Sugar-Completion.tbl", ParserSetting.COMPLETION, true);
-		//completionRun.classifyEditScenarios("Completion_students");
+		ClassificationRun completionRun = new ClassificationRun(langDir);
+		completionRun.addClassifier(sourceDirName, "_Completion", ptName + "-Completion.tbl", ParserSetting.COMPLETION, true);
+		//completionRun.classifyEditScenarios("Completion_" + resultName);
 		
+		ClassificationRun sglrRun = new ClassificationRun(langDir);
+		sglrRun.addClassifier(sourceDirName, "_Completion", ptName + "-Multiple.tbl", ParserSetting.MULTIPLE_ERRORS_HEURISTIC, true);
+		sglrRun.classifyEditScenarios("SGLR_" + resultName);
 
-		ClassificationRun run = new ClassificationRun("stratego");
-		//run.addClassifier("unclassified", "1_NoErrors", "Stratego-Sugar.tbl", ParserSetting.NO_ERRORS, false);
-		//run.addClassifier("unclassified", "_Completion", "Stratego-Sugar-Completion.tbl", ParserSetting.COMPLETION, true);
-		//run.addClassifier(sourceDirName, "2_Insert_Terminal", "Stratego-Sugar-Insert_Terminal.tbl", ParserSetting.SINGLE_ERROR, false);
-		//run.addClassifier(sourceDirName, "3_Insert_ID", "Stratego-Sugar-Insert_ID.tbl", ParserSetting.SINGLE_ERROR, false);
-		//run.addClassifier(sourceDirName, "4_Delete_Terminal", "Stratego-Sugar-Delete_Terminal.tbl", ParserSetting.SINGLE_ERROR, false);
-		//run.addClassifier(sourceDirName, "5_Delete_ID", "Stratego-Sugar-Delete_ID.tbl", ParserSetting.SINGLE_ERROR, false);
-		//run.addClassifier(sourceDirName, "6_Replace_Terminal", "Stratego-Sugar-Replace_Terminal.tbl", ParserSetting.SINGLE_ERROR, false);
-		//run.addClassifier(sourceDirName, "7_Multiple", "Stratego-Sugar-Multiple.tbl", ParserSetting.MULTIPLE_ERRORS, false);
-		run.addClassifier(sourceDirName, "8_Single", "Stratego-Sugar-Multiple.tbl", ParserSetting.MULTIPLE_ERRORS_HEURISTIC, false);
-		//run.addClassifier(sourceDirName, "_Completion", "Stratego-Sugar-Completion.tbl", ParserSetting.COMPLETION, false);
-		//run.addClassifier(sourceDirName, sourceDirName, null, ParserSetting.ACCEPT_ALL, true); //unclassified category in classification statistics
-		run.classifyEditScenarios("ErrorCategories_students_Single");
+		/*
+		ClassificationRun run = new ClassificationRun(langDir);
+		run.addClassifier(sourceDirName, "2_Insert_Terminal", ptName + "-Insert_Terminal.tbl", ParserSetting.SINGLE_ERROR, false);
+		run.addClassifier(sourceDirName, "3_Insert_ID", ptName + "-Insert_ID.tbl", ParserSetting.SINGLE_ERROR, false);
+		run.addClassifier(sourceDirName, "4_Delete_Terminal", ptName + "-Delete_Terminal.tbl", ParserSetting.SINGLE_ERROR, false);
+		run.addClassifier(sourceDirName, "5_Delete_ID", ptName + "-Delete_ID.tbl", ParserSetting.SINGLE_ERROR, false);
+		run.addClassifier(sourceDirName, "6_Replace_Terminal", ptName + "-Replace_Terminal.tbl", ParserSetting.SINGLE_ERROR, false);
+		run.addClassifier(sourceDirName, "7_Multiple", ptName + "-Multiple.tbl", ParserSetting.MULTIPLE_ERRORS, false);
+		run.addClassifier(sourceDirName, "7_Multiple", ptName + "-Multiple.tbl", ParserSetting.MULTIPLE_ERRORS_HEURISTIC, false);
+
+		
+		//run.addClassifier(sourceDirName, "_Completion", ptName + "-Completion.tbl", ParserSetting.COMPLETION, false);
+		run.addClassifier(sourceDirName, sourceDirName, null, ParserSetting.ACCEPT_ALL, true); //unclassified category in classification statistics
+		run.classifyEditScenarios("ErrorCategories_" + resultName);
+		*/
 	}
 }

Modified: sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ClassificationRun.java
==============================================================================
--- sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ClassificationRun.java	Thu Dec  8 12:57:13 2011	(r23723)
+++ sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ClassificationRun.java	Thu Dec  8 14:53:52 2011	(r23724)
@@ -5,6 +5,10 @@
 import java.io.PrintStream;
 import java.text.DecimalFormat;
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Dictionary;
+import java.util.Hashtable;
+
 import org.spoofax.jsglr.client.InvalidParseTableException;
 
 public class ClassificationRun {
@@ -144,6 +148,12 @@
 			prsErrorMessages.println("- " + errorClassifier.getCategoryName());
 			prsErrorMessages.println(errorClassifier.getErrorMessages());
 		}
-	
+		
+		PrintStream prsErrorConstructs = new PrintStream(getPathToSuiteDir() + nameOfRun + "_error_constructs");
+		for (ErrorClassifier errorClassifier : classifiers) {
+			prsErrorConstructs.println("- " + errorClassifier.getCategoryName());
+			prsErrorConstructs.println(errorClassifier.getErrorConstructs());
+		}
+		prsErrorConstructs.println("- " + "TOTAL: ");
 	}
 }

Modified: sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ErrorClassifier.java
==============================================================================
--- sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ErrorClassifier.java	Thu Dec  8 12:57:13 2011	(r23723)
+++ sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ErrorClassifier.java	Thu Dec  8 14:53:52 2011	(r23724)
@@ -19,15 +19,18 @@
 import org.spoofax.jsglr.client.ParseException;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.ITokenizer;
-import org.spoofax.jsglr.client.imploder.Token;
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.spoofax.jsglr.shared.SGLRException;
 import org.spoofax.jsglr.shared.TokenExpectedException;
+import org.strategoxt.imp.runtime.stratego.StrategoTermPath;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.*;
+import static org.spoofax.terms.attachments.ParentAttachment.getParent;
+
 import fileprocessing.ClassificationRun.ParserSetting;
 
 public class ErrorClassifier {
 		
-	private static final int CLUSTER_WIDTH_IN_TOKEN_DISTANCE = 50;
+	private static final int CLUSTER_WIDTH_IN_LINE_DISTANCE = 10;
 	private final String parseTablePath;
 	private final ParserSetting settings;
 	
@@ -37,11 +40,7 @@
 
 	private final String targetDir;
 	private final String sourceDir;
-	private final Dictionary<String, Integer> errorMessages;
 	
-	public Dictionary<String, Integer> getErrorMessages() {
-		return errorMessages;
-	}
 
 	public String getTargetDir() {
 		return targetDir;
@@ -51,6 +50,7 @@
 
 	private int numberOfProcessedFiles;
 	private int numberOfClassifiedFiles;
+
 	private ArrayList<Integer> distancesToCursor;
 	private ArrayList<Integer> distancesToCursorTokens;
 	private ArrayList<Integer> distancesToNearbyFailure;
@@ -61,6 +61,27 @@
 	private ArrayList<Integer> nrsOfIsolatedErrorsPerFile;
 	private ArrayList<Integer> clusterWidths;
 	private ArrayList<Integer> recoveryCounts;
+	private final Dictionary<String, Integer> errorMessages;
+	private final Dictionary<String, Integer> errorConstructs;
+
+	private final static Dictionary<String, Integer> errorConstructsTotal = new Hashtable<String, Integer>();
+
+	public static Dictionary<String, Integer> getErrorconstructstotal() {
+		return errorConstructsTotal;
+	}
+
+	//TODO: separate collection and analysis of data
+	private ArrayList<IToken> errorTokens;
+	private ArrayList<IToken> failureTokens;
+	private IToken cursorToken;
+
+	public Dictionary<String, Integer> getErrorMessages() {
+		return errorMessages;
+	}
+
+	public Dictionary<String, Integer> getErrorConstructs() {
+		return errorConstructs;
+	}
 
 	public ArrayList<Integer> getDistancesBetweenErrors() {
 		return distancesBetweenErrors;
@@ -127,6 +148,7 @@
 		this.sourceDir = sourceDir;
 		this.keepSourceFile = keepSourceFiles;
 		this.errorMessages = new Hashtable<String, Integer>();
+		this.errorConstructs = new Hashtable<String, Integer>();
 		init();
 	}
 
@@ -143,8 +165,55 @@
 		this.nrsOfIsolatedErrorsPerFile = new ArrayList<Integer>();
 		this.clusterWidths = new ArrayList<Integer>();
 		this.recoveryCounts = new ArrayList<Integer>();
+		
+		this.errorTokens = new ArrayList<IToken>();
+		this.failureTokens = new ArrayList<IToken>();
+		this.cursorToken = null;
 	}
-	
+	/*
+	public void analyzeEditSequence() throws FileNotFoundException, IOException, InvalidParseTableException{
+		init();
+		ArrayList<TestFile> testcases = getEditScenarios();
+		FileProcessing fp = getFileProcessing();		
+		long timeStart = System.currentTimeMillis();
+		for (TestFile test : testcases) {
+			if(new File(test.getPathToErrorFile()).exists()){
+				int cursorLoc = getCursorLocation(test.getFilename());
+				if(settings == ParserSetting.COMPLETION){
+					fp.setNoRecovery();
+					fp.setCompletionParse(cursorLoc);
+				}
+				IStrategoTerm parseResult = null;
+				try{
+					//if(test.getFilename().contains("edit_00002_err_1_dist_1_cursor_1284"))
+					parseResult = fp.parseNoOutput(test, test.getPathToErrorFile());
+				}
+				catch (Error e) {
+					System.err.println(e.getMessage());
+					System.err.println(e.getStackTrace());
+					System.err.println(test.getFilename());					
+				}
+				catch (Exception e) {
+					System.err.println(e.getMessage());
+					System.err.println(e.getStackTrace());
+					System.err.println(test.getFilename());					
+				}
+				if(test.isRecoverySucceeded() && checkRecoverCount(test)){
+					locateErrorsFailureAndCursor(parseResult, cursorLoc, test.getFailureLocations());
+					analyzeSequenceData(cursorLoc, test.getRecoverCount()>0);
+					resetData();
+				}
+			}
+		}
+	}*/
+
+
+	/*
+	private void analyzeSequenceData(int cursorOffset, boolean isErroneous) {
+		int cursorTokenIndex = cursorToken.getIndex();
+		int cursorLine = cursorToken.getTokenizer().getLineAtOffset(cursorOffset);
+	}*/
+
 	public void classifyEditScenarios() throws FileNotFoundException, IOException, InvalidParseTableException{
 		init();
 		ArrayList<TestFile> testcases = getEditScenarios();
@@ -171,8 +240,18 @@
 						parseResult = fp.parseNoOutput(test, test.getPathToErrorFile());
 					}
 					catch (StackOverflowError e) {
-						FileUtils.copyFile(test.getPathToErrorFile(), getPathToStackOverFlowFile(test));
-						new File(test.getPathToErrorFile()).delete();
+						System.err.println(e.getMessage());
+						System.err.println(e.getStackTrace());
+						System.err.println(test.getFilename());
+						//FileUtils.copyFile(test.getPathToErrorFile(), getPathToStackOverFlowFile(test));
+						//new File(test.getPathToErrorFile()).delete();
+					}
+					catch (Error e) {
+						System.err.println(e.getMessage());
+						System.err.println(e.getStackTrace());
+						System.err.println(test.getFilename());
+						//FileUtils.copyFile(test.getPathToErrorFile(), getPathToStackOverFlowFile(test));
+						//new File(test.getPathToErrorFile()).delete();
 					}
 					if(test.isRecoverySucceeded() && checkRecoverCount(test)){
 						if(settings == ParserSetting.COMPLETION){
@@ -180,7 +259,9 @@
 						}
 						else
 							recoveryCounts.add(test.getRecoverCount());
-						locateErrors(parseResult, cursorLoc, test.getFailureLocations());
+						locateErrorsFailureAndCursor(parseResult, cursorLoc, test.getFailureLocations());
+						analyzeData(test.getFailureLocations());
+						resetData();
 						handleClassifiedFile(test);
 					}
 				}
@@ -205,6 +286,12 @@
 		System.out.println();
 	}
 
+	private void resetData() {
+		errorTokens.clear();
+		failureTokens.clear();
+		cursorToken = null;
+	}
+
 	private FileProcessing getFileProcessing() throws FileNotFoundException,
 			IOException, InvalidParseTableException {
 		FileProcessing fp = new FileProcessing(parseTablePath);
@@ -274,12 +361,6 @@
 		return -1;
 	}
 
-	private String getPathToStackOverFlowFile(TestFile test) {
-		String dir = targetDir + File.separator + "STACK_OVERFLOW";
-		if(!new File(dir).exists()) {new File(dir).mkdir();}
-		return dir + File.separator + test.getFilename();
-	}
-
 	private String getPathToClassifiedErrorFile(TestFile t) {
 		return targetDir + File.separator + t.getFilename();
 	}
@@ -287,7 +368,7 @@
 	/**
 	 * Find error location 
 	 */
-	public void locateErrors(IStrategoTerm top, int cursorLoc, ArrayList<Integer> failureLocs) {
+	private void locateErrorsFailureAndCursor(IStrategoTerm top, int cursorLoc, ArrayList<Integer> failureLocs) {
 		//System.err.println("-----------------");
 		if(top == null){
 			return;
@@ -300,85 +381,78 @@
 		//ArrayList<Point> errorLocations = new ArrayList<Point>();
 		String prevErrorMessage = "xxx";
 		int prevErrorEndLine = -1;
-		int count = distancesToCursor.size();
-		int tokenIndexPreviousError = -1;
-		int nrOfClusters = 0;
-		int nrOfIsolatedErrors = 0;
-		int clusterWidth = 0;
-		boolean clusterDetected = false;
-		for (int i = 0, max = tokenizer.getTokenCount(); i < max; i++) {
+		for (int i = 0;  i < tokenizer.getTokenCount()-1; i++) {				
 			IToken token = tokenizer.getTokenAt(i);
+			if (token.getStartOffset() <= cursorLoc && cursorLoc <= token.getEndOffset())
+				cursorToken = token;
+			for (Integer failureLoc : failureLocs) {
+				if (token.getStartOffset() <= failureLoc && failureLoc <= token.getEndOffset())
+					failureTokens.add(token);				
+			}
 			String error = token.getError();
-			if (error != null) {
-				if (!error.startsWith(ITokenizer.ERROR_WARNING_PREFIX)) {	
-					//System.err.println(error);
-					if(token.getLine() > prevErrorEndLine || !error.equals(prevErrorMessage)){ //Different Error
-						countErrorMessage(error);
-						if(tokenIndexPreviousError == -1){
-							tokenIndexPreviousError = i;
-							clusterWidth = 1;
-						}
-						else {
-							int wsCount = countWhitespaceTokens(tokenizer, i, tokenIndexPreviousError);
-							int tokenDistanceWithPrevError = i - tokenIndexPreviousError - wsCount;
-							this.distancesBetweenErrorsTokens.add(tokenDistanceWithPrevError);
-							int lineDistanceWithPrevErr = 
-								tokenizer.getTokenAt(i).getLine()-tokenizer.getTokenAt(tokenIndexPreviousError).getLine();
-							this.distancesBetweenErrors.add(lineDistanceWithPrevErr);
-							if(tokenDistanceWithPrevError > CLUSTER_WIDTH_IN_TOKEN_DISTANCE){
-								if(!clusterDetected){
-									nrOfIsolatedErrors +=1;
-								}
-								assert(clusterWidth < recoveryCounts.get(recoveryCounts.size()-1));
-								clusterWidths.add(clusterWidth);
-								clusterWidth = 1;
-								clusterDetected = false;
-							}
-							else{
-								clusterDetected = true;
-								clusterWidth +=1;
-								nrOfClusters +=1;
-							}
-						}
-						if(settings == ParserSetting.COMPLETION){ // multiple tokens (prefix) involved, but we know the error location
-							distancesToCursor.add(0);
-							distancesToCursorTokens.add(0);
-							//failure locations: no failure location set. (location where parser stack does not contain paths without recover anno)
-						}
-						else {
-							setDistancesToFailure(tokenizer, failureLocs, token);
-							//if(failureLocs.size() == 1)
-							setDistancesToCursor(cursorLoc,	tokenizer, token);
-						}
-						prevErrorEndLine = token.getEndLine();
-						prevErrorMessage = error;
-					}
+			if (error != null && !error.startsWith(ITokenizer.ERROR_WARNING_PREFIX)) {
+				if(token.getLine() > prevErrorEndLine || !error.equals(prevErrorMessage)){ //Different Error
+					errorTokens.add(token);					
 				}
 			}
 		}
-		if(clusterWidth > 0){
-			clusterWidths.add(clusterWidth);
+		if(cursorToken == null){
+			if(cursorLoc <= 0)
+				cursorToken = tokenizer.getTokenAt(0);
+			if(cursorLoc > tokenizer.getTokenAt(tokenizer.getTokenCount()-1).getEndOffset())
+				cursorToken = tokenizer.getTokenAt(tokenizer.getTokenCount()-1);
 		}
-		if(!clusterDetected){
-			nrOfIsolatedErrors +=1;
+	}
+	
+	private void analyzeData(ArrayList<Integer> failureLocs){
+		//find parent construct of all errors and cursor
+		countErrorConstructs();
+		
+		//error messages and distance to cursor
+		for (IToken errorToken : this.errorTokens) {
+			countErrorMessage(errorToken.getError());			
+			this.distancesToCursorTokens.add(errorToken.getIndex() - cursorToken.getIndex());
+			this.distancesToCursor.add(errorToken.getLine() - cursorToken.getLine());
+			setDistancesToFailure(errorToken.getTokenizer(), failureLocs, errorToken);
 		}
-		if(settings == ParserSetting.COMPLETION && nrOfClusters > 1){
-			nrOfClusters = 1;
+		
+		//clustering
+		if(errorTokens.size() >= 1){
+			int numberOfErrorsInCluster = 0;
+			int nrOfClusters = 0;
+			int nrOfIsolatedErrors = 0;
+			for (int i = 1; i < errorTokens.size(); i++) {
+				IToken errorToken = errorTokens.get(i);
+				IToken prevErrorToken = errorTokens.get(i-1);
+				this.distancesBetweenErrorsTokens.add(errorToken.getIndex() - prevErrorToken.getIndex());
+				this.distancesBetweenErrors.add(errorToken.getLine() - prevErrorToken.getEndLine());
+				if(errorToken.getLine() - prevErrorToken.getLine() <= CLUSTER_WIDTH_IN_LINE_DISTANCE){
+					numberOfErrorsInCluster +=1;
+				}
+				else{
+					this.clusterWidths.add(numberOfErrorsInCluster);
+					if(numberOfErrorsInCluster == 1){
+						nrOfIsolatedErrors +=1;
+					}
+					else{
+						nrOfClusters += 1;
+					}
+					numberOfErrorsInCluster = 1;
+				}
+			}
+			if(numberOfErrorsInCluster == 1){
+				nrOfIsolatedErrors += 1;
+			}
+			if(numberOfErrorsInCluster >= 1){
+				nrOfClusters += 1;
+			}
+			this.clusterWidths.add(numberOfErrorsInCluster);
+			this.nrsOfIsolatedErrorsPerFile.add(nrOfIsolatedErrors);
+			this.nrsOfErrorClustersPerFile.add(nrOfClusters);
 		}
-		this.nrsOfErrorClustersPerFile.add(nrOfClusters);
-		this.nrsOfIsolatedErrorsPerFile.add(nrOfIsolatedErrors);
-		/*
-		if(
-			distancesToCursor.size()==count && 
-			settings != ParserSetting.NO_ERRORS && 
-			settings != ParserSetting.COMPLETION
-		){
-			distancesToCursor.add(Integer.MAX_VALUE); //error with unknown location
-			System.out.println("unknown location?!");
-		}*/
 	}
 
-	protected void countErrorMessage(String error) {
+	private void countErrorMessage(String error) {
 		Integer oldValue = errorMessages.get(error);
 		if(oldValue == null || oldValue.intValue() <=0){
 			oldValue = 0;
@@ -387,31 +461,45 @@
 			errorMessages.put(error, oldValue + 1);
 	}
 
-	public void setDistancesToCursor(int cursorLoc, ITokenizer tokenizer, IToken token) {
-		int lineDistance = getLineDistance(tokenizer, token, cursorLoc);
-		//set line and token relative locations
-		if(token.getStartOffset() <= cursorLoc){
-			distancesToCursor.add(-1*lineDistance);
-			distancesToCursorTokens.add(-1*getTokenDistance(tokenizer, token, cursorLoc));
-		}
-		else {
-			distancesToCursor.add(lineDistance);
-			distancesToCursorTokens.add(getTokenDistance(tokenizer, token, cursorLoc));
+	private void countErrorConstructs() {
+		IStrategoTerm common = (IStrategoTerm) cursorToken.getAstNode();
+		for (IToken errorToken : this.errorTokens) {
+			IStrategoTerm errorNode = (IStrategoTerm) errorToken.getAstNode();
+			common = StrategoTermPath.findCommonAncestor(common, errorNode);
 		}
-	}
+		while (getParent(common) != null && onSingleLine(getParent(common))) {
+			common = getParent(common);
+		}
+		String sort = getSort(common);
+		/*
+		int lineCount = getRightToken(common).getEndLine() - getLeftToken(common).getLine();
+		String lineCountString = "" + lineCount;
+		if(1 < lineCount && lineCount <= 5)
+			lineCountString = "2-5";
+		if(1 < lineCount && lineCount > 5)
+			lineCountString = ">5";
+		String key = "\n" + sort + " [lc = " + lineCountString + "] ";
+		*/
+		String key = "\n" + sort;
+		Integer oldValue = errorConstructs.get(key);
+		if(oldValue == null || oldValue.intValue() <=0){
+			oldValue = 0;
+		}
+		this.errorConstructs.put(key, oldValue + 1);  //TODO: nr of lines?
 
-	private int countWhitespaceTokens(ITokenizer tokenizer, int errorTokenIndex, int cursorTokenIndex) { 
-		int wsCount = 0;
-		int min = Math.min(errorTokenIndex, cursorTokenIndex);
-		int max = Math.max(errorTokenIndex, cursorTokenIndex);
-		for (int i = min; i <= max; i++) {
-			if(Token.isWhiteSpace(tokenizer.getTokenAt(i))){
-				wsCount++;
-			}
+		Integer oldValueTotal = errorConstructsTotal.get(key);
+		if(oldValueTotal == null || oldValueTotal.intValue() <=0){
+			oldValueTotal = 0;
 		}
-		return wsCount;
+		errorConstructsTotal.put(key, oldValueTotal + 1);  //TODO: nr of lines?
+
+	}
+
+	private boolean onSingleLine(IStrategoTerm common) {
+		return getLeftToken(common).getLine() == getRightToken(common).getEndLine();
 	}
 
+
 	private void setDistancesToFailure(ITokenizer tokens, ArrayList<Integer> failureLocs, IToken token) {
 		assert(failureLocs.size() > 0);
 		
@@ -448,18 +536,18 @@
 		distancesToNearbyFailureTokens.add(locRelativeToFailureTokens);
 	}
 
-	public int getTokenDistance(ITokenizer tokens, IToken token, int offset) {
+	private int getTokenDistance(ITokenizer tokens, IToken token, int offset) {
 		int tokenIndexAtOffset = tokens.getTokenCount()-1;
 		if(tokens.getTokenAt(tokenIndexAtOffset).getStartOffset() > offset){
 			tokenIndexAtOffset = tokens.getTokenAtOffset(offset).getIndex();
 		}
 		int errorTokenIndex = token.getIndex();
-		int loTokenCount = countWhitespaceTokens(tokens, errorTokenIndex, tokenIndexAtOffset);
-		int dTokens = Math.abs(errorTokenIndex-tokenIndexAtOffset)-loTokenCount;
+		//int loTokenCount = countWhitespaceTokens(tokens, errorTokenIndex, tokenIndexAtOffset);
+		int dTokens = Math.abs(errorTokenIndex-tokenIndexAtOffset); //-loTokenCount;
 		return dTokens;
 	}
 
-	public int getLineDistance(ITokenizer tokens, IToken errorToken, int offset) {
+	private int getLineDistance(ITokenizer tokens, IToken errorToken, int offset) {
 		int errorLine = errorToken.getLine();
 		int errorEndLine = errorToken.getEndLine();
 		int lineAtOffset;
@@ -472,7 +560,7 @@
 		return Math.min(Math.abs(lineAtOffset-errorLine), Math.abs(lineAtOffset-errorEndLine));
 	}
 
-	public String getCategoryName() {
+	String getCategoryName() {
 		return new File(targetDir).getName();
 	}
 	
@@ -484,7 +572,7 @@
 			throw new IOException("Directory: " + dir + "does not exist");
 		String[] children = dir.list(FilenameFilters.getFilterAll());
 		Arrays.sort(children);
-		for (int i = children.length - 1; i >= 0; i--) {
+		for (int i = 0; i < children.length; i++) {
 			String fileName = children[i];
 			String editScenario = sourceDir + File.separator + fileName;
 			TestFile t = new TestFile(fileName, editScenario, null);

Modified: sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FileProcessing.java
==============================================================================
--- sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FileProcessing.java	Thu Dec  8 12:57:13 2011	(r23723)
+++ sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FileProcessing.java	Thu Dec  8 14:53:52 2011	(r23724)
@@ -200,6 +200,7 @@
 	public IStrategoTerm parseNoOutput(TestFile test, String fname) throws FileNotFoundException, IOException, TokenExpectedException, BadTokenException, ParseException, SGLRException{
 		String inputChars = FileTools.loadFileAsString(new BufferedReader(new FileReader(fname)));
 		try{
+			sglr.getTreeBuilder().reset(); //???
 			Object t = sglr.parse(inputChars, fname, null, completionMode, cursorLocation);
 			setRecoveryResults(test);
 			return (IStrategoTerm) t;

From karltk at strategoxt.org  Thu Dec  8 15:59:25 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 08 Dec 2011 14:59:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23725 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src:
	java/org main main/java main/java/org
	main/java/org/spoofax/interpreter main/java/org/spoofax/interpre...
Message-ID: <20111208145925.BF29ECC066@mx4.tudelft.nl>

Author: karltk
Date: Thu Dec  8 14:59:25 2011
New Revision: 23725
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23725&sc=1

Log:
Temporarily reviving the interpreter as a place of experimenting with interpreting Stratego expressions.

Added:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/
      - copied from r23714, spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/java/org/
Deleted:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/java/org/
Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/java/org/spoofax/interpreter/ConcreteInterpreter.java	Wed Dec  7 19:32:17 2011	(r23714)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Thu Dec  8 14:59:25 2011	(r23725)
@@ -1,30 +1,22 @@
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk at strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter;
 
-/* Obsolete; replaced by whatever
 import java.io.IOException;
 
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.jsglr.client.InvalidParseTableException;
-import org.spoofax.compiler.Compiler;
 
 public class ConcreteInterpreter extends Interpreter {
-	private Compiler compiler;
 
 	public ConcreteInterpreter() throws IOException, InterpreterException, InvalidParseTableException
 	{
-		super(new WrappedATermFactory());
-		compiler = new Compiler(Compiler.sharePath(), this.getFactory());
 	}
 	
     public void loadConcrete(String file, String[] path, boolean lib) throws IOException, InterpreterException {
-        load(compiler.compile(file, path, lib));
     }
-    
-    @Override
-    public WrappedATermFactory getFactory() {
-    	return (WrappedATermFactory)super.getFactory();
-    }
-}
-*/
\ No newline at end of file
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/java/org/spoofax/interpreter/cli/Main.java	Wed Dec  7 19:32:17 2011	(r23714)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Thu Dec  8 14:59:25 2011	(r23725)
@@ -1,6 +1,11 @@
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk at strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.cli;
 
-/* Replaced by org.strategoxt.HybridInterpreter
+
 import java.io.IOException;
 import java.util.LinkedList;
 import java.util.List;
@@ -60,5 +65,4 @@
 			
 		}
 	}
-}
-*/
\ No newline at end of file
+}
\ No newline at end of file

From karltk at strategoxt.org  Thu Dec  8 16:00:32 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 08 Dec 2011 15:00:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23726 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter: . src/java
Message-ID: <20111208150032.0E58B2B800E@mx2.tudelft.nl>

Author: karltk
Date: Thu Dec  8 15:00:31 2011
New Revision: 23726
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23726&sc=1

Log:
Added src/main/java to .classpath. Dropped src/java directory.

Deleted:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/java/
Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath	Thu Dec  8 14:59:25 2011	(r23725)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath	Thu Dec  8 15:00:31 2011	(r23726)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="src/java"/>
+	<classpathentry kind="src" path="src/main/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="output" path="bin"/>

From tobivollebregt at gmail.com  Fri Dec  9 12:02:59 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 09 Dec 2011 11:02:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23727 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax
Message-ID: <20111209110259.CDFD4108C0E6@mx3.tudelft.nl>

Author: tvo
Date: Fri Dec  9 11:02:57 2011
New Revision: 23727
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23727&sc=1

Log:
svn:ignore generated java files

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/   (props changed)

From tobivollebregt at gmail.com  Fri Dec  9 12:04:55 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 09 Dec 2011 11:04:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23728 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor
Message-ID: <20111209110455.22BF3CC034@mx4.tudelft.nl>

Author: tvo
Date: Fri Dec  9 11:04:54 2011
New Revision: 23728
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23728&sc=1

Log:
builder doesn't exist anymore

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Fri Dec  9 11:02:57 2011	(r23727)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Fri Dec  9 11:04:54 2011	(r23728)
@@ -38,10 +38,4 @@
     test-resolving-symbol (openeditor) (realtime) (meta)
   */
 
-  builder : "Test TemplateLang" = run-templatelang-tests (meta)
-  
-  
   on save		: build-incrementally-service
-
-
-

From M.A.Akhter at student.tudelft.nl  Sat Dec 10 02:11:26 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 10 Dec 2011 01:11:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23729 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str
	spoofax/trunk/spoofax/org...
Message-ID: <20111210011126.62EB8108C00E@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Dec 10 01:11:24 2011
New Revision: 23729
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23729&sc=1

Log:
- few bug fixes + changes in jdbm lib
- added support for viewing current state of symbol-table in CSV File
- made overriding symbols a explicit property 
- fixed bug related to stratego rules's checking when it is defined in a esv section

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/signature-generator.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTree.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HashBucket.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordHeader.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/NamespaceUri.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxBaseSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolTableEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Sat Dec 10 01:11:24 2011	(r23729)
@@ -11,7 +11,8 @@
 imports	
 	utils/sourcedir
  	utils/debug
- 	utils/contract
+ 	utils/contract
+ 	utils/annotations
  	common 
 	config 
 imports 
@@ -21,8 +22,9 @@
 	spoofaxlang  
 
 rules 
-	verify-declared-stratego = 
-		verify(String | <id> , "String @is-declared-stratego"); 
+	verify-declared-stratego = 
+		remove-annotations;
+	 	verify(String | <id> , "String @is-declared-stratego"); 
 		<verify-symbol-exists>(<id> , STRSignature())
 	<+
     dbg-analysis(! $[Failed verify-declared-stratego  id [<print-as-string>]] 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/signature-generator.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/signature-generator.str	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/signature-generator.str	Sat Dec 10 01:11:24 2011	(r23729)
@@ -2,10 +2,11 @@
 
 imports 
 	include/SpoofaxLang
-	utils/contract
+	utils/contract
+	utils/annotations
 imports
 	lib/editor-common.generated
-
+	
 rules
   		
 	signature-of:
@@ -66,11 +67,12 @@
 rules 
   
   signature-to-declaration-id = 
-      ?(<id> ,_ ,_)
-    + ?(<id> ,_ )  
-    + ?<id>
+    (  ?(<id> ,_ ,_)
+    <+ ?(<id> ,_ )  
+    <+ ?<id>)
+    ; remove-annotations
     ; verify(String | <id> , "String @signature-to-declaration-id")     
-  
+  	
   
   signature-to-str-args-length = 
     ?(_ ,<id> ,_)    <+  !0

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Sat Dec 10 01:11:24 2011	(r23729)
@@ -38,7 +38,7 @@
   
 
   constructors
-    SymbolDef : Namespace * Term * Type   * Term -> Def
+    SymbolDef : Namespace * Term * Type   * Term * SymbolSort -> Def
     
     //TODO : when the problem with the serialization of IstrategoAppl solved, 
     //move Import Symbol in the respective the scoped Symbols
@@ -46,9 +46,12 @@
   constructors 
     ToCodeGenerate : SymTableCommand
 
-    ToCompile  : SymTableCommand
-
-    
+    ToCompile      : SymTableCommand
+	
+		OverridableSymbol : SymbolSort
+		
+		UniqueSymbol      : SymbolSort
+		
 rules 
     // constant terms 
     ALL = !"*"    
@@ -125,7 +128,7 @@
 
 rules
     
-  project-from-symboldef-to-symbol: SymbolDef(_,_ ,_, symbol) -> symbol
+  project-from-symboldef-to-symbol: SymbolDef(_,_ ,_, symbol,_) -> symbol
   
   resolve-all-symbol-definitions-with-duplicates: (scoped-symbol-key , typeCtor) -> <resolve-all-symbol-definitions(project-from-symboldef-to-symbol |<ALL_WITH_DUPLICATES>) >(scoped-symbol-key , typeCtor)
      
@@ -265,6 +268,9 @@
     where
       dbg-symboltable(!$[Found following symbols: [<print-as-string>undefined-symbols]]|"undefine-symbol-definitions" , "info")  
         
+  // TODO : refactor index-symbol-definition and index-unique-symbol-definition      
+  // It has almost all the common logic . Only diff is the provided argument : 
+  // UniqueSymbol() or OverridableSymbol().      
   index-symbol-definition:
   	(symbol-key , symbol-type , symbol) -> <id>
     where
@@ -286,11 +292,39 @@
         ; dbg-symboltable(!$[Invoking SPX_index_symbol_definition with : [<print-as-string>(namespace, key , symbol-type , symbol)]]|"index-symbol-definition" , "info")    
       where
         with-spxverify(
-          !SymbolDef(namespace , key , symbol-type  , symbol);
+          !OverridableSymbol() => symbol-sort;
+          !SymbolDef( namespace , key , symbol-type  , symbol ,  symbol-sort);
           prim( "SPX_symtab_define_symbol" , <get-project-path> , <id>)
       	 	, !"Index Symbol failed."
         )          
- 
+		
+		index-unique-symbol-definition:
+			(symbol-key , symbol-type , symbol) -> <id>
+    	where
+        dbg-symboltable(!$[with: [<print-as-string>(symbol-key , symbol-type , symbol)].]|"index-unique-symbol-definition" , "info")
+    	where
+	    	with-spxverify(
+	        if CurrentScope then 
+	          namespace := <CurrentScope>
+	        else  
+	          namespace := <get-current-scope>
+	        end
+	        , !"Failed to retrieve current namespace identifier."  
+	      )
+      where    
+        with-spxverify(
+          (<remove-scope-from-symbol <+ id >symbol-key ) => key
+          , !"Failed to get the symbol-key."
+        )
+        ; dbg-symboltable(!$[Invoking SPX_index_symbol_definition with : [<print-as-string>(namespace, key , symbol-type , symbol)]]|"index-symbol-definition" , "info")    
+      where
+        with-spxverify(
+          !UniqueSymbol() => symbol-sort;
+          !SymbolDef( namespace , key , symbol-type  , symbol ,  symbol-sort);
+          prim( "SPX_symtab_define_symbol" , <get-project-path> , <id>)
+      	 	, !"Index Symbol failed."
+        )     
+                		
 rules
   
   enable-scope-with-spx-verify( s ) = with-spxverify(s)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTree.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTree.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/btree/BTree.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -403,7 +403,7 @@
 	            _height -= 1;
 	            dirty = true;
 	
-	            // TODO:  check contract for BPages to be removed from recman.
+	            _recman.delete(_root);
 	            if ( _height == 0 ) {
 	                _root = 0;
 	            } else {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HashBucket.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HashBucket.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/htree/HashBucket.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -236,7 +236,7 @@
 
     	LongPacker.packInt(out, _depth);
 
-        ArrayList keys = _keys;
+        ArrayList keys = (ArrayList) _keys.clone();;
         //write keys
         if(tree.keySerializer!=null){
             for(int i = 0;i<_keys.size();i++){

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordFile.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordFile.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordFile.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -20,14 +20,10 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.RandomAccessFile;
-import java.nio.ByteBuffer;
-import java.nio.channels.FileChannel;
 import java.nio.channels.OverlappingFileLockException;
 import java.util.ArrayList;
 import java.util.Iterator;
 
-import jdbm.RecordManager;
-import jdbm.RecordManagerOptions;
 import jdbm.helper.LongHashMap;
 
 /**
@@ -38,470 +34,440 @@
  *  The set of dirty records on the in-use list constitutes a transaction.
  *  Later on, we will send these records to some recovery thingy.
  *<p>
- *  RecordFile is splited between more files, each with max size 1GB.
- *  <P>
- *  Updates : RecordFile can be configured with the relative path where
- *  the files are stored. By default it is specified statically using 
- *  RecordManager.DEFAULT_RELATIVE_PATH_INDEX.
- *  </p> 
+ *  RecordFile is splited between more files, each with max size 1GB. 
  */
 final class RecordFile {
-    final TransactionManager txnMgr;
+	private String indexDirRelativePath ; 
+
+	final TransactionManager txnMgr;
+
+	// Todo: reorganize in hashes and fifos as necessary.
+	// free -> inUse -> dirty -> inTxn -> free
+	// free is a cache, thus a FIFO. The rest are hashes.
+	private final LongHashMap<BlockIo> free = new LongHashMap<BlockIo>();
+	/**
+	 * Blocks currently locked for read/update ops. When released the block goes
+	 * to the dirty or clean list, depending on a flag.  The file header block is
+	 * normally locked plus the block that is currently being read or modified.
+	 * 
+	 * @see BlockIo#isDirty()
+	 */
+	private final LongHashMap<BlockIo> inUse = new LongHashMap<BlockIo>();
+
+	/**
+	 * Blocks whose state is dirty.
+	 */
+	private final LongHashMap<BlockIo> dirty = new LongHashMap<BlockIo>();
+	/**
+	 * Blocks in a <em>historical</em> transaction(s) that have been written
+	 * onto the log but which have not yet been committed to the database.
+	 */
+	private final LongHashMap<BlockIo> inTxn = new LongHashMap<BlockIo>();
+
+
+	// transactions disabled?
+	private boolean transactionsDisabled = false;
+
+	static final int DEFAULT_BLOCK_SIZE = 4096;
+
+	//    /** The length of a single block. */
+	final int BLOCK_SIZE ;//= 8192;//4096;
+	//    /** maximal file size not rounded to block size */
+	private final static long _FILESIZE = 1000000000l;
+	private final long MAX_FILE_SIZE;// = _FILESIZE - _FILESIZE%BLOCK_SIZE;
+
+
+	/** A block of clean data to wipe clean pages. */
+	final byte[] cleanData;
+
+	private ArrayList<RandomAccessFile> rafs = new ArrayList<RandomAccessFile>();
+	private final String fileName;
+
+	RecordFile(String fileName) throws IOException {
+		this(fileName,DEFAULT_BLOCK_SIZE);
+	}
+
+	/**
+	 *  Creates a new object on the indicated filename. The file is
+	 *  opened in read/write mode.
+	 *
+	 *  @param fileName the name of the file to open or create, without
+	 *         an extension.
+	 *  @throws IOException whenever the creation of the underlying
+	 *          RandomAccessFile throws it.
+	 */
+	RecordFile(String fileName, int blockSize) throws IOException {
+		this (fileName , blockSize, BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX); // default relative directory is set to .index
+	}
+
+	RecordFile(String fileName, int blockSize, String relativePathStr) throws IOException 
+	{
+		if ( relativePathStr != null && !relativePathStr.equals(new String()) )
+			indexDirRelativePath = relativePathStr ;
+
 
-    // Todo: reorganize in hashes and fifos as necessary.
-    // free -> inUse -> dirty -> inTxn -> free
-    // free is a cache, thus a FIFO. The rest are hashes.
-    private final LongHashMap<BlockIo> free = new LongHashMap<BlockIo>();
-    /**
-     * Blocks currently locked for read/update ops. When released the block goes
-     * to the dirty or clean list, depending on a flag.  The file header block is
-     * normally locked plus the block that is currently being read or modified.
-     * 
-     * @see BlockIo#isDirty()
-     */
-    private final LongHashMap<BlockIo> inUse = new LongHashMap<BlockIo>();
-   
-    /**
-     * Blocks whose state is dirty.
-     */
-    private final LongHashMap<BlockIo> dirty = new LongHashMap<BlockIo>();
-    /**
-     * Blocks in a <em>historical</em> transaction(s) that have been written
-     * onto the log but which have not yet been committed to the database.
-     */
-    private final LongHashMap<BlockIo> inTxn = new LongHashMap<BlockIo>();
-    
-
-    // transactions disabled?
-    private boolean transactionsDisabled = false;
-    
-    private String indexDirRelativePath ; 
-    
-    static final int DEFAULT_BLOCK_SIZE = 4096;
-
-//    /** The length of a single block. */
-    final int BLOCK_SIZE ;//= 8192;//4096;
-//    /** maximal file size not rounded to block size */
-    private final static long _FILESIZE = 1000000000l;
-    private final long MAX_FILE_SIZE;// = _FILESIZE - _FILESIZE%BLOCK_SIZE;
-
-
-    /** A block of clean data to wipe clean pages. */
-    final byte[] cleanData;
-
-    private ArrayList<FileChannel> fileChannels = new ArrayList<FileChannel>();
-    private ArrayList<RandomAccessFile> rafs = new ArrayList<RandomAccessFile>();
-    private final String fileName;
-    
-    RecordFile(String fileName) throws IOException {
-    	this(fileName,DEFAULT_BLOCK_SIZE);
-    }
-
-    /**
-     *  Creates a new object on the indicated filename. The file is
-     *  opened in read/write mode.
-     *
-     *  @param fileName the name of the file to open or create, without
-     *         an extension.
-     *  @throws IOException whenever the creation of the underlying
-     *          RandomAccessFile throws it.
-     */
-    RecordFile(String fileName, int blockSize)  throws IOException{
-    	this (fileName , blockSize, BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX); // default relative directory is set to .index
-    }
-
-    RecordFile(String fileName, int blockSize, String relativePathStr) throws IOException 
-    {
-    	if ( relativePathStr != null && !relativePathStr.equals(new String()) )
-    		indexDirRelativePath = relativePathStr ;
-		
 		this.BLOCK_SIZE = blockSize;
-    	MAX_FILE_SIZE =  _FILESIZE - _FILESIZE%BLOCK_SIZE;
-    	cleanData = new byte[BLOCK_SIZE];
-        this.fileName = fileName;
-//        file0 = new RandomAccessFile(fileName + extension, "rw"); 
-//        file = file0.getChannel();
-        //make sure first file can be opened
-        FileChannel f0 = getChannel(0);
-        //lock it
-        try{
-        	f0.tryLock();
-        }catch(IOException e){
-        	throw new IOException("Could not lock DB file: "+fileName);
-        }catch(OverlappingFileLockException e){
-            throw new IOException("Could not lock DB file: "+fileName);
-        }
-        txnMgr = new TransactionManager(this);
-	}
-
-	FileChannel getChannel(long offset) throws IOException {
-    	int fileNumber = (int) (offset/MAX_FILE_SIZE);
-    
-   		//increase capacity of array lists if needed
-   		for(int i = fileChannels.size();i<=fileNumber;i++){
-   			fileChannels.add(null);
-   			rafs.add(null);
-    	}
-    	
-		FileChannel ret = fileChannels.get(fileNumber);
+		MAX_FILE_SIZE =  _FILESIZE - _FILESIZE%BLOCK_SIZE;
+		cleanData = new byte[BLOCK_SIZE];
+		this.fileName = fileName;
+		//make sure first file can be opened
+		//lock it
+		try{
+			getRaf(0).getChannel().tryLock();
+		}catch(IOException e){
+			throw new IOException("Could not lock DB file: "+fileName);
+		}catch(OverlappingFileLockException e){
+			throw new IOException("Could not lock DB file: "+fileName);
+		}
+
+		txnMgr = new TransactionManager(this);
+	}
+
+	RandomAccessFile getRaf(long offset) throws IOException {
+		int fileNumber = (int) (offset/MAX_FILE_SIZE);
+
+		//increase capacity of array lists if needed
+		for(int i = rafs.size();i<=fileNumber;i++){
+			rafs.add(null);
+		}
+
+		RandomAccessFile ret = rafs.get(fileNumber);
 		if(ret == null){
 			String name = fileName+"."+fileNumber;
-			RandomAccessFile f = new RandomAccessFile(getIndexDirectoryPath()+"/" + name, "rw");
-			rafs.set(fileNumber, f);
-			ret = f.getChannel();			
-			fileChannels.set(fileNumber, ret);		
+			ret = new RandomAccessFile(getIndexDirectoryPath()+"/" + name, "rw");
+			rafs.set(fileNumber, ret);
 		}
 		return ret;
 	}
 
-    public String getIndexDirectoryPath() {
+
+	public String getIndexDirectoryPath() {
 		File newDirectory = new File( indexDirRelativePath  );
-    	
-    	if (!newDirectory.exists())
-    		newDirectory.mkdirs();
-    	
+
+		if (!newDirectory.exists())
+			newDirectory.mkdirs();
+
 		return newDirectory.getAbsolutePath();
 	}
 
+
+
+	/**
+	 *  Returns the file name.
+	 */
+	String getFileName() {
+		return fileName;
+	}
+
+	/**
+	 *  Disables transactions: doesn't sync and doesn't use the
+	 *  transaction manager.
+	 */
+	void disableTransactions() {
+		transactionsDisabled = true;
+	}
+
+	/**
+	 *  Gets a block from the file. The returned byte array is
+	 *  the in-memory copy of the record, and thus can be written
+	 *  (and subsequently released with a dirty flag in order to
+	 *  write the block back).
+	 *
+	 *  @param blockid The record number to retrieve.
+	 */
+	BlockIo get(long blockid) throws IOException {
+
+		// try in transaction list, dirty list, free list
+		BlockIo node =  inTxn.get(blockid);
+		if (node != null) {
+			inTxn.remove(blockid);
+			inUse.put(blockid, node);
+			return node;
+		}
+		node =  dirty.get(blockid);
+		if (node != null) {
+			dirty.remove(blockid);
+			inUse.put(blockid, node);
+			return node;
+		}
+
+		BlockIo cur = free.get(blockid);
+		if(cur!=null){
+			node = cur;
+			free.remove(blockid);
+			inUse.put(blockid, node);
+			return node;          
+		}
+
+		// sanity check: can't be on in use list
+		if (inUse.get(blockid) != null) {
+			throw new Error("double get for block " + blockid );
+		}
+
+		// get a new node and read it from the file
+		node = getNewNode(blockid);
+		long offset = blockid * BLOCK_SIZE;
+		RandomAccessFile file = getRaf(offset);
+
+		read(file, offset%MAX_FILE_SIZE, node.getData(), BLOCK_SIZE);   
+
+		inUse.put(blockid, node);
+		node.setClean();
+		return node;
+	}
+
+
+	/**
+	 *  Releases a block.
+	 *
+	 *  @param blockid The record number to release.
+	 *  @param isDirty If true, the block was modified since the get().
+	 */
+	void release(long blockid, boolean isDirty) throws IOException {
+		BlockIo node = inUse.get(blockid);
+		if (node == null)
+			throw new IOException("bad blockid " + blockid + " on release");
+		if (!node.isDirty() && isDirty)
+			node.setDirty();
+		release(node);
+	}
+
+	/**
+	 *  Releases a block.
+	 *
+	 *  @param block The block to release.
+	 */
+	void release(BlockIo block) {
+		final long key =block.getBlockId();
+		inUse.remove(key);
+		if (block.isDirty()) {
+			// System.out.println( "Dirty: " + key + block );
+			dirty.put(key, block);
+		} else {
+			if (!transactionsDisabled && block.isInTransaction()) {
+				inTxn.put(key, block);
+			} else {
+				free.put(key,block);
+			}
+		}
+	}
+
+	/**
+	 *  Discards a block (will not write the block even if it's dirty)
+	 *
+	 *  @param block The block to discard.
+	 */
+	void discard(BlockIo block) {
+		long key = block.getBlockId();
+		inUse.remove(key);
+
+		// note: block not added to free list on purpose, because
+		//       it's considered invalid
+	}
+
 	/**
-     *  Returns the file name.
-     */
-    String getFileName() {
-        return fileName;
-    }
-
-    /**
-     *  Disables transactions: doesn't sync and doesn't use the
-     *  transaction manager.
-     */
-    void disableTransactions() {
-        transactionsDisabled = true;
-    }
-
-    /**
-     *  Gets a block from the file. The returned byte array is
-     *  the in-memory copy of the record, and thus can be written
-     *  (and subsequently released with a dirty flag in order to
-     *  write the block back).
-     *
-     *  @param blockid The record number to retrieve.
-     */
-     BlockIo get(long blockid) throws IOException {
-
-         // try in transaction list, dirty list, free list
-         BlockIo node =  inTxn.get(blockid);
-         if (node != null) {
-             inTxn.remove(blockid);
-             inUse.put(blockid, node);
-             return node;
-         }
-         node =  dirty.get(blockid);
-         if (node != null) {
-             dirty.remove(blockid);
-             inUse.put(blockid, node);
-             return node;
-         }
-         
-         BlockIo cur = free.get(blockid);
-         if(cur!=null){
-           node = cur;
-           free.remove(blockid);
-           inUse.put(blockid, node);
-           return node;        	 
-         }
-
-         // sanity check: can't be on in use list
-         if (inUse.get(blockid) != null) {
-             throw new Error("double get for block " + blockid );
-         }
-
-         // get a new node and read it from the file
-         node = getNewNode(blockid);
-         long offset = blockid * BLOCK_SIZE;
-         FileChannel file = getChannel(offset);
-//         long fileSize = file.size();
-//         if (fileSize > 0 && offset%MAX_FILE_SIZE <= fileSize) {
-//             read(file, offset%MAX_FILE_SIZE, node.getData(), BLOCK_SIZE);
-//         } else {
-//             System.arraycopy(cleanData, 0, node.getData(), 0, BLOCK_SIZE);
-//         }
-         
-         read(file, offset%MAX_FILE_SIZE, node.getData(), BLOCK_SIZE);   
-         
-         inUse.put(blockid, node);
-         node.setClean();
-         return node;
-     }
-
-     
-    /**
-     *  Releases a block.
-     *
-     *  @param blockid The record number to release.
-     *  @param isDirty If true, the block was modified since the get().
-     */
-    void release(long blockid, boolean isDirty) throws IOException {
-        BlockIo node = inUse.get(blockid);
-        if (node == null)
-            throw new IOException("bad blockid " + blockid + " on release");
-        if (!node.isDirty() && isDirty)
-            node.setDirty();
-        release(node);
-    }
-
-    /**
-     *  Releases a block.
-     *
-     *  @param block The block to release.
-     */
-    void release(BlockIo block) {
-        final long key =block.getBlockId();
-        inUse.remove(key);
-        if (block.isDirty()) {
-            // System.out.println( "Dirty: " + key + block );
-            dirty.put(key, block);
-        } else {
-            if (!transactionsDisabled && block.isInTransaction()) {
-                inTxn.put(key, block);
-            } else {
-                free.put(key,block);
-            }
-        }
-    }
-
-    /**
-     *  Discards a block (will not write the block even if it's dirty)
-     *
-     *  @param block The block to discard.
-     */
-    void discard(BlockIo block) {
-        long key = block.getBlockId();
-        inUse.remove(key);
-
-        // note: block not added to free list on purpose, because
-        //       it's considered invalid
-    }
-
-    /**
-     *  Commits the current transaction by flushing all dirty buffers
-     *  to disk.
-     */
-    void commit() throws IOException {
-        // debugging...
-        if (!inUse.isEmpty() && inUse.size() > 1) {
-            showList(inUse.valuesIterator());
-            throw new Error("in use list not empty at commit time ("
-                            + inUse.size() + ")");
-        }
-
-        //  System.out.println("committing...");
-
-        if ( dirty.size() == 0 ) {
-            // if no dirty blocks, skip commit process
-            return;
-        }
-
-        if (!transactionsDisabled) {
-            txnMgr.start();
-        }
-
-        for (Iterator<BlockIo> i = dirty.valuesIterator(); i.hasNext(); ) {
-            BlockIo node =  i.next();
-            i.remove();
-            // System.out.println("node " + node + " map size now " + dirty.size());
-            if (transactionsDisabled) {
-                long offset = node.getBlockId() * BLOCK_SIZE;
-                FileChannel file = getChannel(offset);
-                file.position(offset % MAX_FILE_SIZE);
-                file.write(ByteBuffer.wrap(node.getData()));
-                node.setClean();
-                free.put(node.getBlockId(),node);
-            }
-            else {
-                txnMgr.add(node);
-                inTxn.put(node.getBlockId(), node);
-            }
-        }
-        if (!transactionsDisabled) {
-            txnMgr.commit();
-        }
-    }
-
-    /**
-     *  Rollback the current transaction by discarding all dirty buffers
-     */
-    void rollback() throws IOException {
-        // debugging...
-        if (!inUse.isEmpty()) {
-            showList(inUse.valuesIterator());
-            throw new Error("in use list not empty at rollback time ("
-                            + inUse.size() + ")");
-        }
-        //  System.out.println("rollback...");
-        dirty.clear();
-
-        txnMgr.synchronizeLogFromDisk();
-
-        if (!inTxn.isEmpty()) {
-            showList(inTxn.valuesIterator());
-            throw new Error("in txn list not empty at rollback time ("
-                            + inTxn.size() + ")");
-        };
-    }
-
-    /**
-     *  Commits and closes file.
-     */
-    void close() throws IOException {
-        if (!dirty.isEmpty()) {
-            commit();
-        }
-        txnMgr.shutdown();
-
-        if (!inTxn.isEmpty()) {
-            showList(inTxn.valuesIterator());
-            throw new Error("In transaction not empty");
-        }
-
-        // these actually ain't that bad in a production release
-        if (!dirty.isEmpty()) {
-            System.out.println("ERROR: dirty blocks at close time");
-            showList(dirty.valuesIterator());
-            throw new Error("Dirty blocks at close time");
-        }
-        if (!inUse.isEmpty()) {
-            System.out.println("ERROR: inUse blocks at close time");
-            showList(inUse.valuesIterator());
-            throw new Error("inUse blocks at close time");
-        }
-
-        // debugging stuff to keep an eye on the free list
-        // System.out.println("Free list size:" + free.size());
-        for(FileChannel buf : fileChannels){
-        	if(buf!=null){
-        		buf.close();
-        	}
-        }
-        fileChannels = null;
-        for(RandomAccessFile f :rafs){
-        	if(f!=null)
-        		f.close();
-        }
-        rafs = null;      
-        
-    }
-
-
-    /**
-     * Force closing the file and underlying transaction manager.
-     * Used for testing purposed only.
-     */
-    void forceClose() throws IOException {
-      txnMgr.forceClose();
-      for(FileChannel buf : fileChannels){
-      	if(buf!=null)
-      		buf.close();
-      }
-      fileChannels = null;
-      for(RandomAccessFile f :rafs){
-      	if(f!=null)
-      		f.close();
-      }
-      rafs = null;  
-    }
-
-    /**
-     *  Prints contents of a list
-     */
-    private void showList(Iterator<BlockIo> i) {
-        int cnt = 0;
-        while (i.hasNext()) {
-            System.out.println("elem " + cnt + ": " + i.next());
-            cnt++;
-        }
-    }
-
-
-    /**
-     *  Returns a new node. The node is retrieved (and removed)
-     *  from the released list or created new.
-     */
-    private BlockIo getNewNode(long blockid)
-    throws IOException {
-
-        BlockIo retval = null;
-        if (!free.isEmpty()) {
-        	Iterator<BlockIo> it = free.valuesIterator();
-        	retval = it.next();
-        	it.remove();
-        }
-        if (retval == null)
-            retval = new BlockIo(0, new byte[BLOCK_SIZE]);
-
-        retval.setBlockId(blockid);
-        retval.setView(null);
-        return retval;
-    }
-
-    /**
-     *  Synchs a node to disk. This is called by the transaction manager's
-     *  synchronization code.
-     */
-    void synch(BlockIo node) throws IOException {
-        byte[] data = node.getData();
-        if (data != null) {
-            long offset = node.getBlockId() * BLOCK_SIZE;
-            FileChannel file = getChannel(offset);
-            file.position(offset % MAX_FILE_SIZE);
-            file.write(ByteBuffer.wrap(data));
-        }
-    }
-
-    /**
-     *  Releases a node from the transaction list, if it was sitting
-     *  there.
-     *
-     *  @param recycle true if block data can be reused
-     */
-    void releaseFromTransaction(BlockIo node, boolean recycle)
-    throws IOException {
-        long key = node.getBlockId();
-        if ((inTxn.remove(key) != null) && recycle) {
-            free.put(key,node);
-        }
-    }
-
-    /**
-     *  Synchronizes the file.
-     */
-    void sync() throws IOException {
-    	for(FileChannel file:fileChannels)
-    		if(file!=null)
-    			file.force(true);
-    }
-
-
-    /**
-     * Utility method: Read a block from a RandomAccessFile
-     */
-    private void read(FileChannel file, long offset,
-                             byte[] buffer, int nBytes) throws IOException {
-        file.position(offset);
-        int remaining = nBytes;
-        int pos = 0;
-        while (remaining > 0) {
-        	ByteBuffer b = ByteBuffer.wrap(buffer, pos, remaining);
-        	int read = file.read(b);
-        	while(read!=-1 && b.hasRemaining() )
-        		read = file.read(b);
-            
-            if (read == -1) {
-                System.arraycopy(cleanData, 0, buffer, pos, remaining);
-                break;
-            }
-            remaining -= read;
-            pos += read;
-        }
-    }
+	 *  Commits the current transaction by flushing all dirty buffers
+	 *  to disk.
+	 */
+	void commit() throws IOException {
+		// debugging...
+		if (!inUse.isEmpty() && inUse.size() > 1) {
+			showList(inUse.valuesIterator());
+			throw new Error("in use list not empty at commit time ("
+					+ inUse.size() + ")");
+		}
+
+		//  System.out.println("committing...");
+
+		if ( dirty.size() == 0 ) {
+			// if no dirty blocks, skip commit process
+			return;
+		}
+
+		if (!transactionsDisabled) {
+			txnMgr.start();
+		}
+
+		for (Iterator<BlockIo> i = dirty.valuesIterator(); i.hasNext(); ) {
+			BlockIo node =  i.next();
+			i.remove();
+			// System.out.println("node " + node + " map size now " + dirty.size());
+			if (transactionsDisabled) {
+				long offset = node.getBlockId() * BLOCK_SIZE;
+				RandomAccessFile file = getRaf(offset);
+				file.seek(offset % MAX_FILE_SIZE);
+				file.write(node.getData());
+				node.setClean();
+				free.put(node.getBlockId(),node);
+			}
+			else {
+				txnMgr.add(node);
+				inTxn.put(node.getBlockId(), node);
+			}
+		}
+		if (!transactionsDisabled) {
+			txnMgr.commit();
+		}
+	}
+
+	/**
+	 *  Rollback the current transaction by discarding all dirty buffers
+	 */
+	void rollback() throws IOException {
+		// debugging...
+		if (!inUse.isEmpty()) {
+			showList(inUse.valuesIterator());
+			throw new Error("in use list not empty at rollback time ("
+					+ inUse.size() + ")");
+		}
+		//  System.out.println("rollback...");
+		dirty.clear();
+
+		txnMgr.synchronizeLogFromDisk();
+
+		if (!inTxn.isEmpty()) {
+			showList(inTxn.valuesIterator());
+			throw new Error("in txn list not empty at rollback time ("
+					+ inTxn.size() + ")");
+		};
+	}
+
+	/**
+	 *  Commits and closes file.
+	 */
+	void close() throws IOException {
+		if (!dirty.isEmpty()) {
+			commit();
+		}
+		txnMgr.shutdown();
+
+		if (!inTxn.isEmpty()) {
+			showList(inTxn.valuesIterator());
+			throw new Error("In transaction not empty");
+		}
+
+		// these actually ain't that bad in a production release
+		if (!dirty.isEmpty()) {
+			System.out.println("ERROR: dirty blocks at close time");
+			showList(dirty.valuesIterator());
+			throw new Error("Dirty blocks at close time");
+		}
+		if (!inUse.isEmpty()) {
+			System.out.println("ERROR: inUse blocks at close time");
+			showList(inUse.valuesIterator());
+			throw new Error("inUse blocks at close time");
+		}
+
+		for(RandomAccessFile f :rafs){
+			if(f!=null)
+				f.close();
+		}
+		rafs = null;      
+
+	}
+
+
+	/**
+	 * Force closing the file and underlying transaction manager.
+	 * Used for testing purposed only.
+	 */
+	void forceClose() throws IOException {
+		txnMgr.forceClose();
+		for(RandomAccessFile f :rafs){
+			if(f!=null)
+				f.close();
+		}
+		rafs = null;  
+	}
+
+	/**
+	 *  Prints contents of a list
+	 */
+	private void showList(Iterator<BlockIo> i) {
+		int cnt = 0;
+		while (i.hasNext()) {
+			System.out.println("elem " + cnt + ": " + i.next());
+			cnt++;
+		}
+	}
+
+
+	/**
+	 *  Returns a new node. The node is retrieved (and removed)
+	 *  from the released list or created new.
+	 */
+	private BlockIo getNewNode(long blockid)
+	throws IOException {
+
+		BlockIo retval = null;
+		if (!free.isEmpty()) {
+			Iterator<BlockIo> it = free.valuesIterator();
+			retval = it.next();
+			it.remove();
+		}
+		if (retval == null)
+			retval = new BlockIo(0, new byte[BLOCK_SIZE]);
+
+		retval.setBlockId(blockid);
+		retval.setView(null);
+		return retval;
+	}
+
+	/**
+	 *  Synchs a node to disk. This is called by the transaction manager's
+	 *  synchronization code.
+	 */
+	void synch(BlockIo node) throws IOException {
+		byte[] data = node.getData();
+		if (data != null) {
+			long offset = node.getBlockId() * BLOCK_SIZE;
+			RandomAccessFile file = getRaf(offset);
+			file.seek(offset % MAX_FILE_SIZE);
+			file.write(data);
+		}
+	}
+
+	/**
+	 *  Releases a node from the transaction list, if it was sitting
+	 *  there.
+	 *
+	 *  @param recycle true if block data can be reused
+	 */
+	void releaseFromTransaction(BlockIo node, boolean recycle)
+	throws IOException {
+		long key = node.getBlockId();
+		if ((inTxn.remove(key) != null) && recycle) {
+			free.put(key,node);
+		}
+	}
+
+	/**
+	 *  Synchronizes the file.
+	 */
+	void sync() throws IOException {
+		for(RandomAccessFile file:rafs)
+			if(file!=null)
+				file.getFD().sync();
+	}
+
+
+	/**
+	 * Utility method: Read a block from a RandomAccessFile
+	 */
+	private void read(RandomAccessFile file, long offset,
+			byte[] buffer, int nBytes) throws IOException {
+		file.seek(offset);
+		int remaining = nBytes;
+		int pos = 0;
+		while (remaining > 0) {
+			int read = file.read(buffer, pos, remaining);
+			if (read == -1) {
+				System.arraycopy(cleanData, 0, buffer, pos, remaining);
+				break;
+			}
+			remaining -= read;
+			pos += read;
+		}
+	}
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordHeader.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordHeader.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/RecordHeader.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -23,6 +23,10 @@
  *  can be bigger than the former, which allows the record to grow without
  *  needing to be moved and which allows the system to put small records
  *  in larger free spots.
+ *	<p/> 
+ *  In JDBM 1.0 both values were stored as four-byte integers. This was very wastefull.
+ *  Now available size is stored in two bytes, it is compressed, so maximal value is up to 120 MB (not sure with exact number)
+ *  rrent size is stored as two-byte-unsigned-short difference from Available Size. 
  */
 final class RecordHeader {
     // offsets
@@ -60,7 +64,7 @@
     /** Returns the available size */
     static int getAvailableSize(final BlockIo block, final short pos) {
         int val  = block.readUnsignedshort(pos + O_AVAILABLESIZE);
-        return deconvert(val);
+        return deconvertAvailSize(val);
     }
     
     /** Sets the available size */
@@ -69,50 +73,50 @@
 //    		throw new IllegalArgumentException("value is not rounded");
     	int oldCurrSize = getCurrentSize(block,pos);
         	
-        block.writeUnsignedShort(pos + O_AVAILABLESIZE, convert(value));
+        block.writeUnsignedShort(pos + O_AVAILABLESIZE, convertAvailSize(value));
         setCurrentSize(block,pos,oldCurrSize);
     }
     
-    private static int convert(final int value){
+    private static int convertAvailSize(final int recordSize){
     	int multiplyer = 0;
     	int counter = 0;
-    	if(value<=base1){
+    	if(recordSize<=base1){
     		multiplyer = 0;
-    		counter = value / multi0;
-    	}else if(value<base2){
+    		counter = recordSize / multi0;
+    	}else if(recordSize<base2){
     		multiplyer = 1 <<14;
-    		int val2 = value -base1;
+    		int val2 = recordSize -base1;
     		counter = val2/multi1;
     		if(val2 %multi1 != 0)
     			counter++;
-    	}else if(value<base3){
+    	}else if(recordSize<base3){
     		multiplyer = 2 <<14;
-    		int val2 = value -base2;
+    		int val2 = recordSize -base2;
     		counter = val2/multi2;
     		if(val2 %multi2 != 0)
     			counter++;
     	}else{
     		multiplyer = 3 <<14;
-    		int val2 = value -base3;
+    		int val2 = recordSize -base3;
     		counter = val2/multi3;
     		if(val2 %multi3 != 0)
     			counter++;    	
     	}
     	if(counter>=(1<<14))
-    		throw new InternalError(""+value);
+    		throw new InternalError(""+recordSize);
     	
     	return  multiplyer + counter;
     }
     
-    private static int deconvert(int val){
-        int multiplier = (val & sizeMask) >>14;
-        int counter = val - (val &sizeMask);
+    private static int deconvertAvailSize(int recordSize){
+        int multiplier = (recordSize & sizeMask) >>14;
+        int counter = recordSize - (recordSize &sizeMask);
         switch (multiplier){
         	case 0: return counter * multi0;
         	case 1: return base1 + counter * multi1;
         	case 2: return base2 + counter * multi2;
         	case 3: return base3 + counter * multi3;
-        	default: throw new InternalError("error deconverting: "+val);
+        	default: throw new InternalError("error deconverting: "+recordSize);
         }
     }
     
@@ -136,7 +140,7 @@
     static int roundAvailableSize(int value){
     	if(value>MAX_RECORD_SIZE && MAX_RECORD_SIZE!=0)    		
     		new InternalError("Maximal record size ("+MAX_RECORD_SIZE+") exceeded: "+value);
-    	return deconvert(convert(value));
+    	return deconvertAvailSize(convertAvailSize(value));
     }
     
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -12,6 +12,7 @@
 	public static final String REGISTRY_NAME = "LANGUAGE";
 
 	public LanguageLibrary() {
+		
 		SemanticIndex index = new SemanticIndex();
 		add(new LANG_index_add(index));
 		add(new LANG_index_clear_all(index));
@@ -25,6 +26,15 @@
 		add(new LANG_index_setup(index));
 		add(new LANG_get_all_projects_in_Workspace());
 		
+		
+		addSpxIndexPrimitives();
+	}
+
+	/**
+	 * Primitives related to the Symbol-Table and Index
+	 * of Spoofax-lang
+	 */
+	private void addSpxIndexPrimitives() {
 		SpxSemanticIndex spxIndex= new SpxSemanticIndex();
 		add(new SPX_exec_index_manage_command(spxIndex));
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -38,7 +38,7 @@
 	 * Stores all the symbols from the current namespace. 
 	 * @serialField
 	 */
-	protected HashMap<SpxSymbolKey, List<SpxSymbol>> symbols;
+	protected Map<SpxSymbolKey, List<SpxSymbol>> symbols;
 
 	public NamespaceUri namespaceUri() {return _currentNamespaceId;}
 	
@@ -67,16 +67,46 @@
 		return this;
 	}
 	
+	/**
+	 * Defines symbol in this Namespace. Define does not replace  
+	 * old symbol mapped using the key with the new one. It just adds the 
+	 * new symbol at the end of the multi-value hashmap. 
+	 * 
+	 * @param key - The key that the symbol will be mapped to .
+	 * @param symbol - The symbol to store. 
+	 */
+	private void defineSymbol(SpxSymbolTableEntry entry){
+		
+		List<SpxSymbol> values = new ArrayList<SpxSymbol>();	
+		
+		if (!symbols.containsKey(entry.key)){
+			values.add(entry.value);	
+		}else{
+			values = symbols.get(entry.key);
+	
+			if( entry.key.isOverridable())
+				values.add(entry.value);
+			else{
+				assert values.size() == 1;
+				values.set(0, entry.value);
+			}
+		}
+		symbols.put(entry.key, values);
+	}
+	
 	public Set<SpxSymbol> undefineSymbols(IStrategoTerm searchingFor, IStrategoTerm type , SpxSemanticIndexFacade  facade){
-		SpxSymbolKey key = new SpxSymbolKey(searchingFor);
+		assert type instanceof IStrategoConstructor : "type is expected to be a IStrategoConstructor" ;
+	
+		SpxSymbolKey key = new SpxSymbolKey(searchingFor , (IStrategoConstructor)type);
 		Set<SpxSymbol> undefinedSymbols = new HashSet<SpxSymbol>();
 		
 		if(this.symbols.containsKey(key)){
 			// Found following symbols indexed by key 
 			List<SpxSymbol> foundSymbols  = getMembers().get(key);
 			
-			// filtering symbols by type to retrieve the list of symbols to undefine
-			List<SpxSymbol> symbolsToDelete  = SpxSymbol.filterByType((IStrategoConstructor)type, foundSymbols);
+			//cloning the symbols to the be deleted
+			List<SpxSymbol> symbolsToDelete  =  new ArrayList<SpxSymbol>();
+			for(SpxSymbol s:foundSymbols){ symbolsToDelete.add(s);}
 			
 			// deleting the symbols to be undefined
 			for ( SpxSymbol s : symbolsToDelete){
@@ -87,29 +117,10 @@
 			}
 			this.symbols.put(key, foundSymbols);
 		}
-		
-		//facade.persistenceManager().spxSymbolTable().commit();
 		return undefinedSymbols;
 	}
-	/**
-	 * Defines symbol in this Namespace. Define does not replace  
-	 * old symbol mapped using the key with the new one. It just adds the 
-	 * new symbol at the end of the multi-value hashmap. 
-	 * 
-	 * @param key - The key that the symbol will be mapped to .
-	 * @param symbol - The symbol to store. 
-	 */
-	private void defineSymbol(SpxSymbolTableEntry entry){
-		SpxSymbolKey key = entry.key;
-		
-		if (symbols.containsKey(key)){
-			symbols.get(key).add(entry.value);
-		}else{
-			List<SpxSymbol> values = new ArrayList<SpxSymbol>(); 
-			values.add(entry.value);
-			symbols.put( key , values );
-		}
-	}
+	
+	
 	private static List<SpxSymbol> appendSymbols( List<SpxSymbol> origin , List<SpxSymbol> symbols){
 		if(symbols != null){
 			origin.addAll(symbols);
@@ -120,7 +131,7 @@
 	/**
 	 * Returns all the symbols matching the search-criteria specified as the argument. In addition,
 	 * it also accepts *(ALL) as an argument and returns all the symbols of a particular type  
-	 * from this namespace and the namespace visible in this namespace. 
+	 * from this namespace and the namespace visible from this namespace. 
 	 * 
 	 * @param members Symbol-Table contains all the members/symbols of this current Namespace
 	 * @param id  Symbol-ID
@@ -130,27 +141,36 @@
 	protected static List<SpxSymbol> lookupSymbols(Map<SpxSymbolKey, List<SpxSymbol>> members, IStrategoTerm id, IStrategoTerm type){
 		assert type instanceof IStrategoConstructor : "type is expected to be a IStrategoConstructor" ;
 	
-		SpxSymbolKey key = new SpxSymbolKey(id);
+		SpxSymbolKey key = new SpxSymbolKey(id , (IStrategoConstructor)type);
+		
 		List<SpxSymbol> resolvedSymbols  = new ArrayList<SpxSymbol>();
 		
 		if(key.getId().equalsIgnoreCase(Utils.All_SYMBOLS)){
 			// Found * in the ID. 
 			// Hence returning ALL symbols of  a particular type specified in the argument.
 			for (Entry<SpxSymbolKey, List<SpxSymbol>> entry : members.entrySet()) {
-				resolvedSymbols = appendSymbols(resolvedSymbols, SpxSymbol.filterByType((IStrategoConstructor)type, members.get(entry.getKey())));
+				
+				if(SpxSymbolKey.equalSignature((IStrategoConstructor)type, entry.getKey())){
+					resolvedSymbols = appendSymbols(resolvedSymbols, members.get(entry.getKey()));
+				}
+				//resolvedSymbols = appendSymbols(resolvedSymbols, SpxSymbol.filterByType((IStrategoConstructor)type, members.get(entry.getKey())));
 			}
 		}
 		else{
-			resolvedSymbols = appendSymbols(resolvedSymbols, SpxSymbol.filterByType( (IStrategoConstructor)type, members.get(key)));
+			//resolvedSymbols = appendSymbols(resolvedSymbols, SpxSymbol.filterByType( (IStrategoConstructor)type, members.get(key)));
+			resolvedSymbols = appendSymbols(resolvedSymbols, members.get(key));
+			
 		}
 		
 		return resolvedSymbols ; 
 	}
 	
 	protected  static SpxSymbol lookupSymbol(Map<SpxSymbolKey, List<SpxSymbol>> members,  IStrategoTerm id , IStrategoTerm type){
+		assert type instanceof IStrategoConstructor : "type is expected to be a IStrategoConstructor" ;
+	
 		List<SpxSymbol> resolvedSymbols = lookupSymbols( members , id , type); 
 	 	if(resolvedSymbols.size() >0 )
-			return resolvedSymbols.get(resolvedSymbols.size()-1);
+			return resolvedSymbols.get(resolvedSymbols.size()-1); // returning last symbol of the list
 		return null;
 	}
 	
@@ -266,6 +286,6 @@
 	 */
 	@Override
 	public String toString() {
-		return "namespace : "+ src + "";
+		return "Namespace { "+ src + "}";
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -23,7 +23,7 @@
 	private void initKnownConstructors(){
 		ConstructorDef.newInstance("ModuleDef"  ,5).index(_knownCons, _termFactory);
 		ConstructorDef.newInstance("ModuleDecl" ,3).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("SymbolDef"  ,4).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("SymbolDef"  ,5).index(_knownCons, _termFactory);
 
 		ConstructorDef.newInstance("PackageDecl",2).index(_knownCons, _termFactory);
 		ConstructorDef.newInstance("ImportDecl" ,2).index(_knownCons, _termFactory);
@@ -41,6 +41,9 @@
 		
 		ConstructorDef.newInstance("ToCompile"  , 0).index(_knownCons, _termFactory);
 		ConstructorDef.newInstance("ToCodeGenerate" , 0).index(_knownCons, _termFactory);
+		
+		ConstructorDef.newInstance("OverridableSymbol"  , 0).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("UniqueSymbol" , 0).index(_knownCons, _termFactory);
 	}
 	
 	IStrategoConstructor indexConstructor(IStrategoConstructor ctor){
@@ -132,7 +135,11 @@
 	
 	public IStrategoConstructor getModuleNamespaceTypeCon() {return getConstructor("Module",0);}
 	
-	public IStrategoConstructor getSymbolTableEntryDefCon() {return getConstructor("SymbolDef",4);}
+	public IStrategoConstructor getOverridableSymbolTypeCon() {return getConstructor("OverridableSymbol" , 0); }
+	
+	public IStrategoConstructor getUniqueSymbolTypeCon() {return getConstructor("UniqueSymbol" , 0); }
+	
+	public IStrategoConstructor getSymbolTableEntryDefCon() {return getConstructor("SymbolDef",5);}
 	
 	public IStrategoConstructor getLocalNamespaceTypeCon() { return getConstructor("Locals",1);  }
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -335,66 +335,6 @@
 			this.namespaces.put(_activeNamespace.namespaceUri(), _activeNamespace);
 		}
 	}
-		
-	/**
-	 * Printing all the symbols current hashmap 
-	 * 
-	 * @throws IOException
-	 * @throws SpxSymbolTableException 
-	 */
-	public void printSymbols(SpxSemanticIndexFacade f, String state , String projectPath , String indexId) throws IOException, SpxSymbolTableException{
-		new File(projectPath + "/.log").mkdirs();
-		FileWriter fstream = new FileWriter(projectPath + "/.log/"+indexId+"_symbols_"+Utils.now("yyyy-MM-dd HH.mm.ss")+".txt" , true);
-		BufferedWriter out = new BufferedWriter(fstream);
-		out.write("---Logging [" +state+ "] state of Symbol-Table at :" + Utils.now("yyyy-MM-dd HH.mm.ss")+":----\n");
-		try
-		{	
-			if(namespaces != null){
-				for(INamespace ns : namespaces.values()){
-					out.write("[" + ns +"]\n\n");
-					logEntries(f, ns,out) ;
-				}
-			}
-		}catch(IOException ex){ //ignore 
-			
-		}
-		finally{out.close();}
-	}
-
-	private static  void logEntries(SpxSemanticIndexFacade f,  INamespace namespace , BufferedWriter logger) throws IOException, SpxSymbolTableException{
-		Map<SpxSymbolKey , List<SpxSymbol>> members = namespace.getMembers();
-		if( namespace instanceof PackageNamespace){
-			PackageNamespace ns = (PackageNamespace)namespace;
-			ns.ensureEnclosedNamespaceUrisLoaded(f);
-			ns.ensureImportedNamespaceUrisLoaded(f);
-			
-			logger.write("\t" + "Enclosed Namespace Uris"+"\n");
-			for(NamespaceUri uri : ns.enclosedNamespaceUris ){
-				logger.write( "\t\t"+uri +"\n");
-			}
-			logger.write("---------------------------\n");
-			
-
-			logger.write("\tImported Namespace Uris"+"\n");
-			for(NamespaceUri uri : ns.importedNamespaceUris ){
-				logger.write("\t\t"+uri +"\n");
-			}
-			logger.write("---------------------------\n");
-		}
-		
-		if( namespace instanceof ModuleNamespace){
-			logger.write("\t\tParent Namespace :"+ ((ModuleNamespace) namespace).enclosingNamespaceUri()+"\n" );
-		}
-		
-		for( SpxSymbolKey k : members.keySet()) {
-			logger.write("\t\t"+k.toString()  + "  ----> \t");
-			for( SpxSymbol s : members.get(k) ){
-				logger.write( s.printSymbol());
-			}
-			logger.write("\n");
-		}
-		logger.write("\n");
-	}
 	
 	private void ensureActiveNamespaceUnloaded(INamespace namespace){
 		if(namespace!=null)
@@ -454,4 +394,36 @@
 	void setLastCodeGeneratedOn(long timestamp){ 
 		timestamps.put(LAST_CODEGEN_ON_KEY, timestamp);
 	}
+	
+	
+	
+	/**
+	 * Printing all the symbols current hashmap 
+	 * 
+	 * @throws IOException
+	 * @throws SpxSymbolTableException 
+	 */
+	public void printSymbols(SpxSemanticIndexFacade f, String state , String projectPath , String indexId) throws IOException, SpxSymbolTableException{
+		new File(projectPath + "/.log").mkdirs();
+		
+		FileWriter fstream = new FileWriter(projectPath + "/.log/"+indexId+"_symbols_"+Utils.now("yyyy-MM-dd HH.mm.ss.SSS")+".csv" , true);
+		BufferedWriter out = new BufferedWriter(fstream);
+		out.write(", , ,------------- Logging [" +state+ "] state of Symbol-Table at :" + Utils.now("yyyy-MM-dd HH.mm.ss")+"-------------\n");
+		try
+		{	
+			if(namespaces != null){
+				for(INamespace ns : namespaces.values()){
+					out.write("\n, --- "+ Utils.getCsvFormatted(ns.toString()) +"--- \n");
+					Utils.logEntries(f, ns,out) ;
+				}
+			}
+		}catch(IOException ex){ //ignore 
+			
+		}
+		finally{out.close();}
+	}
+
+	
+	
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -348,12 +348,16 @@
 		return _termFactory.makeAppl(getCons().getLocalNamespaceTypeCon(), deletedLocalNs.namespaceUri().id());
 	}
 	
-	// SymbolDef : namespace * id * type *  value -> Def  
+	// SymbolDef :  namespace * id * type *  value * unique/overridable -> Def  
 	public void indexSymbol(IStrategoAppl symbolDefinition) throws SpxSymbolTableException, IOException{	
+		
 		final int NAMESPACE_ID_INDEX  = 0;
+		
 		verifyConstructor(symbolDefinition.getConstructor(), getCons().getSymbolTableEntryDefCon(), "Illegal SymbolDefinition argument");
-		IStrategoConstructor typeCtor = null;
 		
+		
+		//TODO : refactor following logic of retrieving the known constructor
+		IStrategoConstructor typeCtor = null;
 		try{
 			typeCtor = verifyKnownContructorExists((IStrategoAppl)symbolDefinition.getSubterm(SpxSymbolTableEntry.TYPE_INDEX));
 		}catch(IllegalArgumentException ex){
@@ -363,20 +367,26 @@
 			typeCtor = _spxConstructors.indexConstructor(ctor);
 		}
 		
-		// Constructing Spx Symbol-Table Entry from the provided symbolDefinition argument.  
+		// Constructing SPX Symbol-Table Entry from the provided symbolDefinition argument.  
 		// Note: TermAttachment or Annotation are stripped from the ID Term since, in symbol-table, term attachments 
 		// is not require and will make the equals operation a bit complicated. 
-		SpxSymbolTableEntry entry = 
+		SpxSymbolTableEntry.EntryBuilder entryBuilder = 
 			SpxSymbolTableEntry.newEntry()
 						  .with(
 								  strip(symbolDefinition.getSubterm(SpxSymbolTableEntry.SYMBOL_ID_INDEX))
 						   )
 						  .instanceOf(typeCtor)	
 					      .uses(this._termAttachmentSerializer)
-					      .data(symbolDefinition.getSubterm(SpxSymbolTableEntry.DATA_INDEX))
-					      .build();
-					   		
+					      .data(symbolDefinition.getSubterm(SpxSymbolTableEntry.DATA_INDEX));
+					      
 		
+
+		IStrategoConstructor symbolSort = ((IStrategoAppl)symbolDefinition.getSubterm(SpxSymbolTableEntry.OVERRIDE_PROPERTY_INDEX)).getConstructor();
+		if(symbolSort == getCons().getUniqueSymbolTypeCon()){
+			entryBuilder = entryBuilder.isUnique();
+		}
+			
+		SpxSymbolTableEntry entry =  entryBuilder.build();
 		SpxPrimarySymbolTable  symbolTable = getPersistenceManager().spxSymbolTable();
 		symbolTable.defineSymbol(getNamespaceId((IStrategoAppl)symbolDefinition.getSubterm(NAMESPACE_ID_INDEX)), entry);
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -1,13 +1,20 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
+import java.io.BufferedWriter;
 import java.io.File;
 import java.io.IOException;
 import java.net.URI;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
+import java.util.List;
+import java.util.Map;
 
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.spxlang.index.data.IdentifiableConstruct;
+import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolKey;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
@@ -116,8 +123,12 @@
 		if(t == null) return null;
 		IStrategoTerm annotatedTerm = serializer.toAnnotations(t);
 		
+		return termToString(annotatedTerm);
+	}
+	
+	public static String termToString(IStrategoTerm t) throws IOException{
 		StringBuilder sb = new StringBuilder();
-		annotatedTerm.writeAsString(sb ,Integer.MAX_VALUE);
+		t.writeAsString(sb ,Integer.MAX_VALUE);
 		
 		return sb.toString();
 	}
@@ -131,5 +142,53 @@
 		return deserializedAterm;
 	}
 	
+	public static String getCsvFormatted(String text){
+		if(text ==null) return "";
+		
+		return text.replace(",", "__");
+	}
 	
+	static  void logEntries(SpxSemanticIndexFacade f,  INamespace namespace , BufferedWriter logger) throws IOException, SpxSymbolTableException{
+		Map<SpxSymbolKey , List<SpxSymbol>> members = namespace.getMembers();
+		if( namespace instanceof PackageNamespace){
+			PackageNamespace ns = (PackageNamespace)namespace;
+			ns.ensureEnclosedNamespaceUrisLoaded(f);
+			ns.ensureImportedNamespaceUrisLoaded(f);
+			
+			logger.write("Enclosed Namespace Uris:\n");
+			for(NamespaceUri uri : ns.enclosedNamespaceUris ){
+				logger.write( Utils.getCsvFormatted(uri.toString()) +"\n");
+			}
+			logger.write("\n");
+			
+				
+			logger.write("Imported Namespace Uris:\n");
+			for(NamespaceUri uri : ns.importedNamespaceUris ){
+				logger.write(Utils.getCsvFormatted(uri.toString())+"\n");
+			}
+			
+			logger.write("\n");
+		}
+		
+		
+		if( namespace instanceof ModuleNamespace){
+			logger.write("Parent Namespace = "+ ((ModuleNamespace) namespace).enclosingNamespaceUri()+"\n" );
+		}
+		
+		logger.write("\n");
+		if(members.keySet().size() >0)
+		{	
+			logger.write("Key, Type , Symbol\n");
+			for( SpxSymbolKey k : members.keySet()) {
+				for( SpxSymbol s : members.get(k) ){
+					logger.write(Utils.getCsvFormatted(k.printSymbolKey())+ ",");
+					logger.write( s.printSymbol(f) + "\n");
+				}
+			}
+		}
+		else
+			logger.write("No Symbols\n");
+		
+		logger.write("\n");
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/NamespaceUri.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/NamespaceUri.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/NamespaceUri.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -75,4 +75,6 @@
 	public String toString() {
 		return "NamespaceId [ID =" + _id + "]";
 	}
+	
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxBaseSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxBaseSymbol.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxBaseSymbol.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -9,7 +9,7 @@
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 
-abstract class SpxBaseSymbol implements Serializable{
+public abstract class SpxBaseSymbol implements Serializable{
 
 	private static final long serialVersionUID = 3160588874266553126L;
 	
@@ -18,8 +18,10 @@
 	/**
 	 *  @serial
 	 */
-	private String _idString;
-	
+	private final String _idString;
+	private final String _signatureString;
+	private final boolean _isOverridable;
+
 	/**
 	 * Returns String representation of ID
 	 * 
@@ -27,11 +29,26 @@
 	 */
 	public String getId(){  return _idString ; }
 	
-	public SpxBaseSymbol(IStrategoTerm id){
-		_id = id ;
-		_idString = id.toString(Integer.MAX_VALUE);
+	public String getSignatureString() {
+		assert _signatureString != null : "Non-Null Signature is expected. ";
+		return _signatureString; 
+	}
+
+	/**
+	 * @return the isOverridable
+	 */
+	public boolean isOverridable() {
+		return _isOverridable;
 	}
 	
+
+	public SpxBaseSymbol(IStrategoTerm id, IStrategoConstructor signature,boolean isOveridable){
+		this._id = id ;
+		
+		this._idString = id.toString(Integer.MAX_VALUE);
+		this._signatureString = signature.getName();
+		this._isOverridable = isOveridable;
+	}
 	
 	public IStrategoTerm Id(ITermFactory _fac ){
 		if (_id == null){
@@ -40,8 +57,6 @@
 		return _id;
 	}
 	
-	void setId(IStrategoTerm id){_id = id;}
-	
 	public static boolean verifyEquals(IStrategoConstructor ctor1 , IStrategoConstructor ctor2){
 		if( (ctor1.getArity() == ctor2.getArity()) && (ctor1.getName().equals(ctor2.getName()))){
 			return true;
@@ -98,7 +113,24 @@
 			}
 		}
 		return retValue;
-	}		
+	}	
+	
+	/**
+	 * @param expectedType
+	 * @param s
+	 * @return
+	 */
+	public static boolean equalSignature(IStrategoConstructor expectedType,	SpxBaseSymbol s) {
+		return (expectedType==null) ||  s.equalSignature(expectedType);
+	}
+	
+	
+	// TODO FIX : bring the singature to the base class 
+	public boolean equalSignature (IStrategoConstructor term) { 
+		return _signatureString.equals(term.getName()); 
+	}
+	
+	
 
 	/* (non-Javadoc)
 	 * @see java.lang.Object#hashCode()
@@ -108,7 +140,9 @@
 		final int prime = 31;
 		int result = 1;
 		result = prime * result + ((_idString == null) ? 0 : _idString.hashCode());
-		//result = prime * result + ((_idString == null) ? 0 : _id.hashCode());
+		result = prime * result
+		+ ((_signatureString == null) ? 0 : _signatureString.hashCode());
+
 		return result;
 	}
 
@@ -124,18 +158,17 @@
 		if (getClass() != obj.getClass())
 			return false;
 		SpxBaseSymbol other = (SpxBaseSymbol) obj;
-//		if (_id == null) {
-//			if (other._id != null)
-//				return false;
-//		}else if(!verifyEquals(this._id, other._id)){ 
-//			return false;
-//		}
 		if (_idString == null) {
 			if (other._idString != null)
 				return false;
 		}else if( !this._idString.equals(other._idString ) ){
 			return false;
 		}
+		if (_signatureString == null) {
+			if (other._signatureString != null)
+				return false;
+		} else if (!_signatureString.equals(other._signatureString))
+			return false;
 		return true;
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -8,6 +8,7 @@
 import java.util.Set;
 import java.util.UUID;
 
+import org.spoofax.interpreter.library.language.spxlang.index.SpxPrimarySymbolTable;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
 import org.spoofax.interpreter.library.language.spxlang.index.Utils;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -22,27 +23,17 @@
 	private static final long serialVersionUID = -5293805213473800423L;
 	
 	private String _data;
-	private String _type;
 	private NamespaceUri _namespace; // refer to the namespace uri . 
 	
-	public SpxSymbol (IStrategoTerm id){super(id);}
+	//TODO : consider to add arity of the signature in the SPX Symbol . Currently
+	// all the signature used in Spoofaxlang has arity 0;
 	
-	public SpxSymbol (IStrategoTerm id , String type){ 
-		this(id) ;
-		_type = type;
-	}
-	
-	public String type() {
-		assert _type != null : "Non-Null _type is expected. ";
-		return _type; 
-	}
-
+	public SpxSymbol (IStrategoTerm id, IStrategoConstructor signature,boolean isOverridable){super(id,signature,isOverridable);}
+		
 	public String getDataString () {return _data;}
 	
 	public NamespaceUri namespaceUri() { return _namespace; }
 	
-	void setType(String type) {	_type = type; }
-
 	IStrategoTerm deserializedDataToTerm(ITermFactory fac , TermAttachmentSerializer serializer){ 
 		return Utils.deserializeToTerm(fac, serializer, _data);
 	}
@@ -52,15 +43,11 @@
 }
 	
 	public IStrategoConstructor typeCons(SpxSemanticIndexFacade facade){
-		return facade.getCons().getConstructor( type() , 0);
+		return facade.getCons().getConstructor( getSignatureString() , 0);
 	}
 	
 	public void setNamespace(NamespaceUri id){ _namespace = id;}
 	
-	public boolean equalType (IStrategoConstructor term) { 
-		return _type.equals(term.getName()); 
-	}
-	
 	/**
 	 * Return symbols that has type equals expectedType. In case of expectedType equals null,
 	 * it returns all the symbols.
@@ -73,12 +60,12 @@
 		List<SpxSymbol> retSymbols = new ArrayList<SpxSymbol>();
 		if( symbols != null){
 			for(SpxSymbol s : symbols){
-				if( (expectedType==null) ||  s.equalType(expectedType) ){ retSymbols.add(s) ;}
+				if(SpxBaseSymbol.equalSignature(expectedType, s) ){ retSymbols.add(s) ;}
 			}
 		}
 		return retSymbols;
 	}
-	
+
 	public IStrategoTerm toTerm (SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
 		final ITermFactory termFactory = facade.getTermFactory();
 		
@@ -96,11 +83,16 @@
 		//ID/Key 
 		IStrategoTerm id = this.Id(termFactory); //TODO : It might require term conversion.
 
-		return (IStrategoTerm)termFactory.makeAppl( facade.getCons().getSymbolTableEntryDefCon(),
-				nsQNameAppl,  //ns qname 
-				spxTypeCtorAppl,  // type
-				id,			  //id	
-				deserializedDataToTerm )	;
+		IStrategoConstructor symbolSortCtor = this.isOverridable()? facade.getCons().getOverridableSymbolTypeCon() 
+													              : facade.getCons().getUniqueSymbolTypeCon();
+				
+		return (IStrategoTerm) termFactory.makeAppl(
+				facade.getCons().getSymbolTableEntryDefCon(), 
+				nsQNameAppl, // ns qname
+				spxTypeCtorAppl, // signature
+				id, // id
+				deserializedDataToTerm, 
+				termFactory.makeAppl(symbolSortCtor));
 	}
 	
 	public static IStrategoTerm toTerms(SpxSemanticIndexFacade facade , Collection<SpxSymbol> symbols) throws SpxSymbolTableException{
@@ -126,7 +118,6 @@
 		result = prime * result + ((_data == null) ? 0 : _data.hashCode());
 		result = prime * result
 				+ ((_namespace == null) ? 0 : _namespace.hashCode());
-		result = prime * result + ((_type == null) ? 0 : _type.hashCode());
 		return result;
 	}
 
@@ -152,11 +143,6 @@
 				return false;
 		} else if (!_namespace.equals(other._namespace))
 			return false;
-		if (_type == null) {
-			if (other._type != null)
-				return false;
-		} else if (!_type.equals(other._type))
-			return false;
 		return true;
 	}
 
@@ -165,11 +151,13 @@
 	 */
 	@Override
 	public String toString() {
-		return "SpxSymbol [ Id : " + this.getId() + " Type= " + _type + ", Namespace=" + _namespace + "value = "+ this._data +"]";
+		return "SpxSymbol [ Id : " + this.getId() + " Type= " + this.getSignatureString() + ", Namespace=" + _namespace + "value = "+ this._data +"]";
 	}
 	
-	public String printSymbol(){
-		return "\t\tId =  " + this.getId() + "| Type = " + _type + "| value = "+ this._data +"\n";
+	public String printSymbol(SpxSemanticIndexFacade f) throws IOException{
+		return  Utils.getCsvFormatted(this.getSignatureString()) 
+				+ ", "
+				+ Utils.getCsvFormatted( Utils.termToString(this.deserializedDataToTerm(f.getTermFactory(), f.getTermAttachmentSerializer()) ));
 	}
 	
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -2,16 +2,33 @@
 
 import java.io.Serializable;
 
+import org.spoofax.interpreter.library.language.spxlang.index.Utils;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SpxSymbolKey extends SpxBaseSymbol implements Serializable{
 	
 	private static final long serialVersionUID = 7804281029276443583L;
+
+	public SpxSymbolKey(IStrategoTerm id, IStrategoConstructor signature){ this(id, signature, true); }
 	
-	public SpxSymbolKey(IStrategoTerm id){ super(id); }
+	public SpxSymbolKey(IStrategoTerm id, IStrategoConstructor signature, boolean isOveridable){ 
+		super(id,signature,isOveridable);
+	}
 
 	@Override
 	public String toString() {
-		return "Key = [" + this.getId() +"]";
+		String keyStr = "Key = [" + this.getId() +"] ";
+		if (isOverridable()){ 
+			return "Overridable-"+keyStr; 
+		}
+		return keyStr;
+	}
+	
+	public String printSymbolKey(){
+		String toRet =  Utils.getCsvFormatted(this.getId().toString()) ;
+		
+		if(isOverridable()) {return toRet+"{overridable}" ;}
+		return toRet;
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolTableEntry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolTableEntry.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolTableEntry.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -6,8 +6,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.attachments.TermAttachmentSerializer;
 
-// consider making it an internal class of 
-// SpxPrimarySymbolTable
+
 public final class SpxSymbolTableEntry
 {
 	public SpxSymbolKey key;
@@ -16,6 +15,7 @@
 	public static final int SYMBOL_ID_INDEX = 1;
 	public static final int TYPE_INDEX = 2;
 	public static final int DATA_INDEX = 3;
+	public static final int OVERRIDE_PROPERTY_INDEX = 4;
 	
     public SpxSymbolTableEntry(SpxSymbolKey paramK, SpxSymbol paramV) {
       this.key = paramK;
@@ -26,9 +26,9 @@
     
     public static class EntryBuilder{
     	private IStrategoTerm _spoofaxkey ;
-    	private IStrategoConstructor _type ;
+    	private IStrategoConstructor _signatureCtr ;
     	private IStrategoTerm _data;
-    	
+    	private boolean _overridable = true;
     	// Instance of TermAttachmentSerializer to serialize terms
     	private TermAttachmentSerializer _serializer;
     	
@@ -38,7 +38,7 @@
     	}
     	
     	public EntryBuilder instanceOf(IStrategoConstructor type){
-    		_type = type;
+    		_signatureCtr = type;
     		return this;
     	}
     	
@@ -52,14 +52,17 @@
     		return this;
     	}
     	
+    	public EntryBuilder isUnique(){
+    		_overridable = false;
+    		return this;
+    	}
+    	
     	public SpxSymbolTableEntry build() throws IOException {
     		
-    		SpxSymbolKey key = new SpxSymbolKey( _spoofaxkey );
-    		
+    		SpxSymbolKey key = new SpxSymbolKey( _spoofaxkey , _signatureCtr, _overridable);
     		
-    		SpxSymbol symbol = new SpxSymbol(_spoofaxkey) ;
+    		SpxSymbol symbol = new SpxSymbol(_spoofaxkey,_signatureCtr,_overridable) ;
     		symbol.serializerDataString(_serializer, _data);
-    		symbol.setType(_type.getName());
     		
     		return new SpxSymbolTableEntry(key , symbol );
 		}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -423,7 +423,7 @@
 		assertEquals(1, resolvedSymbols.size());
 		
 		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0];
-		assertEquals("SDFDef", actual.type());
+		assertEquals("SDFDef", actual.getSignatureString());
 		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
 		assertTrue( SpxSymbol.verifyEquals( currentAppl.getSubterm(0).getSubterm(0) , actual.namespaceUri().id()) );
 	}
@@ -493,7 +493,7 @@
 		assertEquals(1, resolvedSymbols.size());
 		
 		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0];
-		assertEquals("SDFDef", actual.type());
+		assertEquals("SDFDef", actual.getSignatureString());
 		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
 		assertTrue( SpxSymbol.verifyEquals( internalModuleAppl.getSubterm(0).getSubterm(0) , actual.namespaceUri().id()) );
 	}
@@ -575,7 +575,7 @@
 		assertEquals(1, resolvedSymbols.size());
 		
 		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0];
-		assertEquals("ModuleDef", actual.type());
+		assertEquals("ModuleDef", actual.getSignatureString());
 		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
 	}
@@ -614,7 +614,7 @@
 		assertEquals(1, resolvedSymbols.size());
 		
 		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0]; // resolved from the current namespace - Module 1 of Package 1 
-		assertEquals("ModuleDef", actual.type());
+		assertEquals("ModuleDef", actual.getSignatureString());
 		assertTrue(SpxSymbol.verifyEquals(symbolId3, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP1M1.getId() , actual.namespaceUri().id()) );
 	}
@@ -650,7 +650,7 @@
 		
 		assertEquals(1, resolvedSymbols.size());
 		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0]; // Resolved from the imported namespace - Module 1 of Package 3
-		assertEquals("ModuleDef", actual.type());
+		assertEquals("ModuleDef", actual.getSignatureString());
 		assertTrue(SpxSymbol.verifyEquals(symbolId3, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP3M1.getId() , actual.namespaceUri().id()) );
 	}
@@ -808,7 +808,7 @@
 		assertEquals(1, resolvedSymbols.size());
 		
 		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0];// resolved from the current namespace - Module 1 of Package 1 
-		assertEquals("ModuleDef", actual.type());
+		assertEquals("ModuleDef", actual.getSignatureString());
 		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP1M1.getId() , actual.namespaceUri().id()) );
 	
@@ -833,7 +833,7 @@
 		assertEquals(1, resolvedSymbols.size());
 		
 		actual = (SpxSymbol)resolvedSymbols.toArray()[0]; // resolved from the current namespace - Module 1 of Package 1 
-		assertEquals("SDFDef", actual.type());
+		assertEquals("SDFDef", actual.getSignatureString());
 		assertTrue(SpxSymbol.verifyEquals(symbolId2, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( GlobalNamespace.getGlobalNamespaceId(_facade) , actual.namespaceUri().id()) );
 	
@@ -873,7 +873,7 @@
 		assertEquals(1, resolvedSymbols.size());
 		
 		SpxSymbol actual = (SpxSymbol)resolvedSymbols.toArray()[0];// resolved from the current local namespace
-		assertEquals("ModuleDef", actual.type());
+		assertEquals("ModuleDef", actual.getSignatureString());
 		assertTrue(SpxSymbol.verifyEquals(symbolId1, actual.Id(_facade.getTermFactory())));
 		assertTrue(SpxSymbol.verifyEquals( (IStrategoList)nsAppl.getSubterm(0) , actual.namespaceUri().id()) );
 		
@@ -927,18 +927,18 @@
 		assertEquals(2, resolvedSymbols.size());
 		
 		for( SpxSymbol sym : resolvedSymbols) {
-			assertTrue(sym.equalType(typeAppl1.getConstructor())); 
+			assertTrue(sym.equalSignature(typeAppl1.getConstructor())); 
 		}
 		
 		List<SpxSymbol> resolvedSymbols1 = tfacade.getPersistenceManager().spxSymbolTable()
 				.resolveNamespace(this.moduleDeclarationP1M1.getId())
 				.getMembers()
-				.get(new SpxSymbolKey(symbolId1));
+				.get(new SpxSymbolKey(symbolId1,typeAppl2.getConstructor()));
 		
 		assertEquals(1, resolvedSymbols1.size());
 		
 		for( SpxSymbol sym : resolvedSymbols1) {
-			assertTrue(sym.equalType(typeAppl2.getConstructor())); 
+			assertTrue(sym.equalSignature(typeAppl2.getConstructor())); 
 		}
 	}
 	
@@ -993,7 +993,7 @@
 		assertEquals(1, resolvedSymbols.size());
 		
 		for( SpxSymbol sym : resolvedSymbols) {
-			assertTrue(sym.equalType(typeAppl1.getConstructor())); 
+			assertTrue(sym.equalSignature(typeAppl1.getConstructor())); 
 		}
 		
 		//-------------------------Resolving Symbol in Package 1--------------------------------------------
@@ -1009,7 +1009,7 @@
 		assertEquals(2, resolvedSymbols.size());
 		
 		for( SpxSymbol sym : resolvedSymbols) {
-			assertTrue(sym.equalType(typeAppl1.getConstructor())); 
+			assertTrue(sym.equalSignature(typeAppl1.getConstructor())); 
 		}
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java	Fri Dec  9 11:04:54 2011	(r23728)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java	Sat Dec 10 01:11:24 2011	(r23729)
@@ -56,7 +56,7 @@
 		
 		assertTrue(entry.value != null);
 		assertTrue(entry.value.namespaceUri() == null);
-		assertEquals(_facade.getCons().getGlobalNamespaceTypeCon().getName() , entry.value.type());
+		assertEquals(_facade.getCons().getGlobalNamespaceTypeCon().getName() , entry.value.getSignatureString());
 		assertEquals(_facade.getCons().getGlobalNamespaceTypeCon(), entry.value.typeCons(_facade));
 		assertTrue(entry.key != null);
 	}

From M.A.Akhter at student.tudelft.nl  Sat Dec 10 02:46:34 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 10 Dec 2011 01:46:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23730 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index
Message-ID: <20111210014634.50F76CC1A6@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Dec 10 01:46:34 2011
New Revision: 23730
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23730&sc=1

Log:
disabling CSV generation during Committing changes. It would be simply turned on by setting Utils.Debug = true. The generated CSV files can be found in .log sub-directory.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Sat Dec 10 01:11:24 2011	(r23729)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Sat Dec 10 01:46:34 2011	(r23730)
@@ -61,13 +61,14 @@
 		this._agent = spxSemanticIndexFacade.getIOAgent();
 		this._indexId = spxSemanticIndexFacade.getIndexId() ;
 		
-		BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX = spxSemanticIndexFacade.getProjectPath()+ "/" + Utils.SPX_INDEX_DIRECTORY+ "/" + _indexId + ".idx";
+		//BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX = spxSemanticIndexFacade.getProjectPath()+ "/" + Utils.SPX_INDEX_DIRECTORY+ "/" + _indexId + ".idx";
 
+		final String relPath = spxSemanticIndexFacade.getProjectPath()+ "/" + Utils.SPX_INDEX_DIRECTORY+ "/" + _indexId + ".idx";
 		if( options  == null)
 			options = new Properties();// Creating empty properties collection if it is null
 		
 		//setting properties of RecordManager
-		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX);
+		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, relPath);
 		options.put(RecordManagerOptions.CACHE_TYPE, "soft");
 		options.put(RecordManagerOptions.DISABLE_TRANSACTIONS, "false");
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Sat Dec 10 01:11:24 2011	(r23729)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Sat Dec 10 01:46:34 2011	(r23730)
@@ -404,9 +404,9 @@
 	 * @throws SpxSymbolTableException 
 	 */
 	public void printSymbols(SpxSemanticIndexFacade f, String state , String projectPath , String indexId) throws IOException, SpxSymbolTableException{
-		new File(projectPath + "/.log").mkdirs();
+		new File(projectPath +"/"+Utils.SPX_INDEX_DIRECTORY+ "/.log").mkdirs();
 		
-		FileWriter fstream = new FileWriter(projectPath + "/.log/"+indexId+"_symbols_"+Utils.now("yyyy-MM-dd HH.mm.ss.SSS")+".csv" , true);
+		FileWriter fstream = new FileWriter(projectPath +"/"+ Utils.SPX_INDEX_DIRECTORY+ "/.log/"+indexId+"_symbols_"+Utils.now("yyyy-MM-dd HH.mm.ss.SSS")+".csv" , true);
 		BufferedWriter out = new BufferedWriter(fstream);
 		out.write(", , ,------------- Logging [" +state+ "] state of Symbol-Table at :" + Utils.now("yyyy-MM-dd HH.mm.ss")+"-------------\n");
 		try

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Sat Dec 10 01:11:24 2011	(r23729)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Sat Dec 10 01:46:34 2011	(r23730)
@@ -325,10 +325,4 @@
 		public abstract <U> U resolve(IStrategoString projectPath , IStrategoTerm term) throws Exception ;
 	}
 
-
-
-	
-
-	
-
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sat Dec 10 01:11:24 2011	(r23729)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sat Dec 10 01:46:34 2011	(r23730)
@@ -1038,8 +1038,7 @@
 	public void commitChanges() throws IOException {
 		ISpxPersistenceManager persistenceManager = this.getPersistenceManager();
 		persistenceManager.commit();
-		printSymbolTable(!Utils.DEBUG, "commit");
-		//printSymbolTable(true, "commit");
+		printSymbolTable(Utils.DEBUG, "commit");
 	}	
 
 	private void printSymbolTable(boolean printIfDebug, String stageName) throws IOException {

From karltk at strategoxt.org  Sun Dec 11 21:31:21 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:31:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23731 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
Message-ID: <20111211203121.1ACCD108C007@mx3.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:31:20 2011
New Revision: 23731
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23731&sc=1

Log:
Exposed var and svar listing and removal for the shell.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java	Sat Dec 10 01:46:34 2011	(r23730)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java	Sun Dec 11 20:31:20 2011	(r23731)
@@ -1,14 +1,15 @@
 /*
  * Created on 26.jun.2005
  *
- * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.core;
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -42,6 +43,11 @@
 
         if(DebugUtil.isDebugging()) {
             Context.debug(DebugUtil.buildIndent(DebugUtil.INDENT_STEP), "lookup : ", name, " = ", t);
+            VarScope vs = this;
+            while(vs != null) {
+                Context.debug(DebugUtil.buildIndent(DebugUtil.INDENT_STEP), vs);
+                vs = vs.parent;
+            }
         }
 
         return t;
@@ -76,6 +82,10 @@
         }
     }
 
+    public Collection<String> getVars() {
+        return Collections.unmodifiableCollection(vars.keySet());
+    }
+
     public String printVars() {
         StringBuilder sb = new StringBuilder("");
         Iterator<String> it = vars.keySet().iterator();
@@ -137,12 +147,12 @@
     private void debug(Object... s) {
         DebugUtil.debug(s);
     }
-    
+
     public void clear() {
         vars.clear();
         svars.clear();
     }
-    
+
     public List<BindingInfo> saveUnboundVars() {
         return saveUnboundVars(new ArrayList<BindingInfo>());
     }
@@ -152,10 +162,10 @@
             if (vars.get(k) == null)
                 results.add(new BindingInfo(this, k));
         }
-        
+
         if (parent != null)
             return parent.saveUnboundVars(results);
-        
+
         return results;
     }
 
@@ -164,7 +174,7 @@
             binding.value = binding.scope.overrideVar(binding.name, null);
         }
     }
-    
+
     public void setBoundVarsAfterBacktracking(List<BindingInfo> bindings) {
         for (BindingInfo binding : bindings) {
             String name = binding.name;
@@ -182,4 +192,16 @@
     public Collection<SDefT> getStrategyDefinitions() {
         return svars.values();
     }
+
+    public boolean removeVar(String varName) {
+        return vars.remove(varName) != null;
+    }
+
+    public boolean removeSVar(String svarName) {
+        return svars.remove(svarName) != null;
+    }
+
+    public void removeAllVars() {
+        vars.clear();
+    }
 }

From karltk at strategoxt.org  Sun Dec 11 21:31:59 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:31:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23732 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter:
	core stratego
Message-ID: <20111211203159.F19C0CC07E@mx4.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:31:59 2011
New Revision: 23732
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23732&sc=1

Log:
Added strategy name as a field to the UndefinedStrategyException, to improve error feedback in the shell.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java	Sun Dec 11 20:31:20 2011	(r23731)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java	Sun Dec 11 20:31:59 2011	(r23732)
@@ -5,18 +5,21 @@
  */
 public class UndefinedStrategyException extends InterpreterException {
 
-    private static final long serialVersionUID = 6886950665182075267L;
+    private static final long serialVersionUID = 6886950665182075268L;
+    private final String strategyName;
 
-    public UndefinedStrategyException(String message, Throwable cause) {
-        super(message, cause);
-    }
-
-    public UndefinedStrategyException(String message) {
+    public UndefinedStrategyException(String message, String strategyName) {
         super(message);
+        this.strategyName = strategyName;
     }
 
-    public UndefinedStrategyException(Exception cause) {
+    public UndefinedStrategyException(Exception cause, String strategyName) {
         super(cause);
+        this.strategyName = strategyName;
+    }
+
+    public String getStrategyName() {
+        return strategyName;
     }
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	Sun Dec 11 20:31:20 2011	(r23731)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	Sun Dec 11 20:31:59 2011	(r23732)
@@ -1,9 +1,9 @@
 /*
  * Created on 07.aug.2005
  *
- * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt.org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 
@@ -43,7 +43,7 @@
     	SDefT sdef = env.lookupSVar(name);
     	
         if (sdef == null)
-            throw new UndefinedStrategyException("Not found '" + name + "'");
+            throw new UndefinedStrategyException("Not found '" + name + "'", name);
         
         boolean isCompiledStrategy = sdef.isCompiledStrategy();
         if (!isCompiledStrategy)
@@ -130,10 +130,10 @@
         }
 
         SDefT sdef = env.lookupSVar(name); //getsdef(env);
-    	
+
         if (sdef == null)
-            throw new UndefinedStrategyException("Not found '" + name + "'");
-        
+            throw new UndefinedStrategyException("Not found '" + name + "'", name);
+
         boolean isCompiledStrategy = sdef.isCompiledStrategy();
         if (!isCompiledStrategy)
             env.getStackTracer().push(name);

From karltk at strategoxt.org  Sun Dec 11 21:32:35 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:32:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23733 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
Message-ID: <20111211203235.4EA687F8016@mx1.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:32:35 2011
New Revision: 23733
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23733&sc=1

Log:
Copyright update.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	Sun Dec 11 20:31:59 2011	(r23732)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	Sun Dec 11 20:32:35 2011	(r23733)
@@ -1,13 +1,13 @@
 
-/*
- * Created on 07.aug.2005
- *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
- *
- * Licensed under the GNU General Public License, v2
- */
-package org.spoofax.interpreter.core;
-
+/*
+ * Created on 07.aug.2005
+ *
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.core;
+
 import java.io.IOException;
 import java.io.InputStream;
 
@@ -30,54 +30,54 @@
  * 
  * @author Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class Interpreter {
-
-    private final Context context;
-    private final StrategoCoreLoader loader;
-
-    public Interpreter() {
-        this(new TermFactory());
-    }
-
-    public Interpreter(ITermFactory factory) {
-        this(factory, factory);
-    }
-
-    public Interpreter(ITermFactory termFactory, ITermFactory programFactory) {        
-        Context.indentation = 0;
-        context = createContext(termFactory, programFactory);
-        
-        loader = new StrategoCoreLoader(context);
-    }
-
-    /**
-     * Invokes a strategy.
-     * 
-     * @param name
-     *            The name of the strategy to invoke, using its regular
-     *            Stratego-based name (e.g., "strategy-name").
-     *            If this fails, the strategy is looked up using C-based
-     *            naming conventions (e.g., strategy_name_0_0").
-     * 
-     * @throws InterpreterExit
-     *             If the interpreter is exited.
-     * @throws InterpreterException
+ */
+public class Interpreter {
+
+    protected final Context context;
+    protected final StrategoCoreLoader loader;
+
+    public Interpreter() {
+        this(new TermFactory());
+    }
+
+    public Interpreter(ITermFactory factory) {
+        this(factory, factory);
+    }
+
+    public Interpreter(ITermFactory termFactory, ITermFactory programFactory) {        
+        Context.indentation = 0;
+        context = createContext(termFactory, programFactory);
+        
+        loader = new StrategoCoreLoader(context);
+    }
+
+    /**
+     * Invokes a strategy.
+     * 
+     * @param name
+     *            The name of the strategy to invoke, using its regular
+     *            Stratego-based name (e.g., "strategy-name").
+     *            If this fails, the strategy is looked up using C-based
+     *            naming conventions (e.g., strategy_name_0_0").
+     * 
+     * @throws InterpreterExit
+     *             If the interpreter is exited.
+     * @throws InterpreterException
      *             In case of an internal error or other interpreter exception.
      *             
      * @see #setCurrent(IStrategoTerm)
-     *             Sets the input term for the invoked strategy.
-     */
+     *             Sets the input term for the invoked strategy.
+     */
     public boolean invoke(String name)
             throws InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
-        
-        SDefT def = lookupUncifiedSVar(name);
-
-        if (def == null) {
-            throw new UndefinedStrategyException("Definition '" + name + "' not found");
-        }
-        
-        return evaluate(def);
+        
+        SDefT def = lookupUncifiedSVar(name);
+
+        if (def == null) {
+            throw new UndefinedStrategyException("Definition '" + name + "' not found", name);
+        }
+        
+        return evaluate(def);
     }
     
     /**
@@ -88,10 +88,10 @@
      */
     public boolean evaluate(IStrategoAppl s)
             throws InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
-        
+
         final ITermFactory factory = getFactory();
         final IStrategoConstructor sdefT = factory.makeConstructor("SDefT", 4);
-        
+
         if (s.getConstructor() != sdefT)
             s = factory.makeAppl(sdefT, factory.makeString("interpreter_evaluate_dummy_0_0"), factory.makeList(), factory.makeList(), s);
 
@@ -102,7 +102,7 @@
     private boolean evaluate(SDefT def) throws InterpreterException {
         StackTracer stackTracer = getContext().getStackTracer();
         stackTracer.push(def.getName());
-        
+
         try {
             boolean success = def.getBody().evaluate(context);
         
@@ -121,111 +121,111 @@
 
     public SDefT lookupUncifiedSVar(String name) {
         try {
-            SDefT def = context.lookupSVar(cify(name) + "_0_0");
-            
-            if (def == null) {
-                def = context.lookupSVar(name);
+            SDefT def = context.lookupSVar(cify(name) + "_0_0");
+            
+            if (def == null) {
+                def = context.lookupSVar(name);
             }
             return def;
         } catch (InterpreterException e) {
             return null;
         }
-    }
-    
-    /**
-     * Rewrite a strategy name based on the C naming conventions,
-     * following the stratego-lib term/string/cify strategy.
-     */
-    public static String cify(String input) {
-        return input
-            .replace("_", "__")
-            .replace("-", "_")
-            .replace("'", "_p_")
-            .replace("\"", "_q_")
-            .replace("\\", "_b_");
-    }
-
-    public IContext getContext() {
-        return context;
-    }
-    
-    protected Context createContext(ITermFactory termFactory, ITermFactory programFactory) {
-       return new Context(termFactory, programFactory);
-    }
-
-
-    public void setCurrent(IStrategoTerm inp) {
-        context.setCurrent(inp);
-    }
-
-    public IStrategoTerm current() {
-        return context.current();
-    }
-    
-    public IOAgent getIOAgent() {
-        SSLLibrary op = (SSLLibrary) getContext().getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        return op.getIOAgent();
-    }
-    
-    public void setIOAgent(IOAgent ioAgent) {
-        SSLLibrary op = (SSLLibrary) getContext().getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+    }
+    
+    /**
+     * Rewrite a strategy name based on the C naming conventions,
+     * following the stratego-lib term/string/cify strategy.
+     */
+    public static String cify(String input) {
+        return input
+            .replace("_", "__")
+            .replace("-", "_")
+            .replace("'", "_p_")
+            .replace("\"", "_q_")
+            .replace("\\", "_b_");
+    }
+
+    public IContext getContext() {
+        return context;
+    }
+    
+    protected Context createContext(ITermFactory termFactory, ITermFactory programFactory) {
+       return new Context(termFactory, programFactory);
+    }
+
+
+    public void setCurrent(IStrategoTerm inp) {
+        context.setCurrent(inp);
+    }
+
+    public IStrategoTerm current() {
+        return context.current();
+    }
+    
+    public IOAgent getIOAgent() {
+        SSLLibrary op = (SSLLibrary) getContext().getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+        return op.getIOAgent();
+    }
+    
+    public void setIOAgent(IOAgent ioAgent) {
+        SSLLibrary op = (SSLLibrary) getContext().getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
         op.setIOAgent(ioAgent);
-        getContext().getStackTracer().setIOAgent(ioAgent);
-    }
-    
-    /**
-     * Resets the state of this interpreter.
-     */
-    public void reset() {
-        // TODO: better way to reset the interpreter state?
-        //       the comment at SSLLibrary.init() talks about scoping this?     
-        SSLLibrary op = (SSLLibrary) getContext().getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        op.init();
-    }
-
-    public String prettyPrint() throws InterpreterException {
-        StupidFormatter sf = new StupidFormatter();
-        SDefT s = context.lookupSVar("main_0_0");
-        s.prettyPrint(sf);
-        return sf.toString();
-    }
-
-    public void shutdown() {
-        //todo perf: this takes 2 secs overall
-        //if(DebugUtil.cleanupInShutdown) {
-        //    context.cleanup();
-        //}
-    }
-
-    public ITermFactory getFactory() {
-        return context.getFactory();
+        getContext().getStackTracer().setIOAgent(ioAgent);
+    }
+    
+    /**
+     * Resets the state of this interpreter.
+     */
+    public void reset() {
+        // TODO: better way to reset the interpreter state?
+        //       the comment at SSLLibrary.init() talks about scoping this?     
+        SSLLibrary op = (SSLLibrary) getContext().getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+        op.init();
+    }
+
+    public String prettyPrint() throws InterpreterException {
+        StupidFormatter sf = new StupidFormatter();
+        SDefT s = context.lookupSVar("main_0_0");
+        s.prettyPrint(sf);
+        return sf.toString();
+    }
+
+    public void shutdown() {
+        //todo perf: this takes 2 secs overall
+        //if(DebugUtil.cleanupInShutdown) {
+        //    context.cleanup();
+        //}
+    }
+
+    public ITermFactory getFactory() {
+        return context.getFactory();
     }
     
     public ITermFactory getProgramFactory() {
         return context.getProgramFactory();
-    }
-
-    public final void load(InputStream stream) throws IOException, InterpreterException {
+    }
+
+    public final void load(InputStream stream) throws IOException, InterpreterException {
         if (stream == null)
             throw new IOException("Could not load Stratego core input from null stream");
             
-       load(new TermReader(context.getProgramFactory()).parseFromStream(stream));
-    }
-    
-    public final void load(String file) throws IOException, InterpreterException {
-        load(new TermReader(context.getProgramFactory()).parseFromFile(file));
-    }
-
-	public void load(IStrategoTerm term) throws InterpreterException {
-		loader.load(term);
-	}
-
-    @Deprecated
-    public void addOperatorRegistry(String domainName, IOperatorRegistry or) {
-        context.addOperatorRegistry(domainName, or);
-    }
-
-    public void addOperatorRegistry(IOperatorRegistry or) {
-        context.addOperatorRegistry(or);
-    }
-}
+       load(new TermReader(context.getProgramFactory()).parseFromStream(stream));
+    }
+    
+    public final void load(String file) throws IOException, InterpreterException {
+        load(new TermReader(context.getProgramFactory()).parseFromFile(file));
+    }
+
+	public void load(IStrategoTerm term) throws InterpreterException {
+		loader.load(term);
+	}
+
+    @Deprecated
+    public void addOperatorRegistry(String domainName, IOperatorRegistry or) {
+        context.addOperatorRegistry(domainName, or);
+    }
+
+    public void addOperatorRegistry(IOperatorRegistry or) {
+        context.addOperatorRegistry(or);
+    }
+}

From karltk at strategoxt.org  Sun Dec 11 21:33:04 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:33:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23734 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton
Message-ID: <20111211203304.8E07FCC07E@mx4.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:33:04 2011
New Revision: 23734
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23734&sc=1

Log:
Removed unused field size.

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoList.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoList.java	Sun Dec 11 20:32:35 2011	(r23733)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoList.java	Sun Dec 11 20:33:04 2011	(r23734)
@@ -32,8 +32,6 @@
     private IStrategoTerm head;
     
     private IStrategoList tail;
-    
-    private int size = UNKNOWN_SIZE;
 
     /**
      * Creates a new list.

From karltk at strategoxt.org  Sun Dec 11 21:51:21 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23735 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter: .
	src/test src/test/java src/test/java/org src/test/java/org/spoofax
	src/test/java/org/spoofax/interpreter
Message-ID: <20111211205121.BD8D12B800D@mx2.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:21 2011
New Revision: 23735
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23735&sc=1

Log:
Initial import.

Added:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.hgignore
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java
Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath	Sun Dec 11 20:33:04 2011	(r23734)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath	Sun Dec 11 20:51:21 2011	(r23735)
@@ -4,4 +4,8 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="output" path="bin"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.library.jsglr"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.jsglr"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
+	<classpathentry kind="output" path="bin"/>
 </classpath>

Added: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.hgignore
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.hgignore	Sun Dec 11 20:51:21 2011	(r23735)
@@ -0,0 +1,3 @@
+syntax:glob
+bin
+.svn

Added: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:21 2011	(r23735)
@@ -0,0 +1,5 @@
+package org.spoofax.interpreter;
+
+public class TestConcreteInterpreter {
+
+}

From karltk at strategoxt.org  Sun Dec 11 21:51:24 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23736 -
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf
Message-ID: <20111211205124.23013108C00C@mx3.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:23 2011
New Revision: 23736
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23736&sc=1

Log:
Added grammar for shell where the Strategy production is an acceptable start symbol.

Added:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf/
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf/Stratego-Shell.sdf

Added: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf/Stratego-Shell.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf/Stratego-Shell.sdf	Sun Dec 11 20:51:23 2011	(r23736)
@@ -0,0 +1,9 @@
+module Stratego-Shell
+
+imports
+	Stratego-Sugar
+	
+exports
+	
+	context-free start-symbols
+		Strategy	
\ No newline at end of file

From karltk at strategoxt.org  Sun Dec 11 21:51:26 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23737 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src:
	main/java/org/spoofax/interpreter
	main/java/org/spoofax/interpreter/cli main/stratego
	main/stratego/sp...
Message-ID: <20111211205126.C0AAC2B8003@mx2.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:26 2011
New Revision: 23737
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23737&sc=1

Log:
Extended desugaring to work with strategy invocations (not higher order yet). This means we can now evaluate id, fail, the combinators and strategy invocations from the library.

Added:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/desugar.str
Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Sun Dec 11 20:51:23 2011	(r23736)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Sun Dec 11 20:51:26 2011	(r23737)
@@ -5,18 +5,128 @@
  */
 package org.spoofax.interpreter;
 
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.io.InputStream;
 
 import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.InterpreterExit;
+import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.ParseException;
+import org.spoofax.jsglr.client.ParseTable;
+import org.spoofax.jsglr.client.SGLR;
+import org.spoofax.jsglr.client.imploder.TreeBuilder;
+import org.spoofax.jsglr.io.ParseTableManager;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+import org.spoofax.terms.ParseError;
 
 public class ConcreteInterpreter extends Interpreter {
 
-	public ConcreteInterpreter() throws IOException, InterpreterException, InvalidParseTableException
-	{
+	private final ParseTable sugarTable;
+	private final SGLR sugarParser;
+
+	public ConcreteInterpreter() {
+		try {
+			load(findLibrary("stratego-lib/libstratego-lib.ctree"));
+			load(findLibrary("libstrc.ctree"));
+			load(new FileInputStream("desugar.ctree"));
+			// load(findLibrary("libstratego-aterm.ctree"));
+			// load(findLibrary("libstratego-gpp.ctree"));
+			// load(findLibrary("libstratego-rtg.ctree"));
+			// load(findLibrary("libstratego-sdf.ctree"));
+			// load(findLibrary("libstratego-sglr.ctree"));
+			// load(findLibrary("libstratego-tool-doc.ctree"));
+
+			ParseTableManager ptm = new ParseTableManager();
+			sugarTable = ptm
+					.loadFromStream(new FileInputStream("bin/Stratego-Shell.tbl"));
+			sugarParser = new SGLR(new TreeBuilder(), sugarTable);
+			sugarParser.setUseStructureRecovery(false);
+		} catch (IOException e) {
+			throw new RuntimeException(e);
+		} catch (InterpreterException e) {
+			throw new RuntimeException(e);
+		} catch (ParseError e) {
+			throw new RuntimeException(e);
+		} catch (InvalidParseTableException e) {
+			throw new RuntimeException(e);
+		}
+
+	}
+
+	private InputStream findLibrary(String libraryPath) {
+		String shareDir = System.getProperty("user.home")
+				+ "/.nix-profile/share/";
+		File file = new File(shareDir + "/" + libraryPath);
+		if (file.exists()) {
+			try {
+				return new FileInputStream(file);
+			} catch (FileNotFoundException e) {
+				throw new RuntimeException(e);
+			}
+		}
+		throw new RuntimeException("Failed to find Stratego library " + file.getAbsolutePath());
+	}
+
+	private InputStream findSyntax(String syntaxFile) {
+		String shareDir = System.getProperty("user.home")
+				+ "/.nix-profile/share/";
+		File file = new File(shareDir + "/" + syntaxFile);
+		if (file.exists()) {
+			try {
+				return new FileInputStream(file);
+			} catch (FileNotFoundException e) {
+				throw new RuntimeException(e);
+			}
+		}
+		throw new RuntimeException("Failed to find syntax table " + file.getAbsolutePath());
+	}
+
+	public void loadConcrete(String file, String[] path, boolean lib)
+			throws IOException, InterpreterException {
+	}
+
+	public boolean parseAndInvoke(String codeAsString) {
+		try {
+			IStrategoTerm tree = (IStrategoTerm) sugarParser.parse(codeAsString, "stdin", "Strategy");
+			System.out.println(tree);
+			IStrategoTerm old = current();
+			setCurrent(tree);
+			invoke("spoofax_concrete_desugar_0_0");
+			IStrategoAppl program = (IStrategoAppl) current();
+			setCurrent(old);
+			System.out.println(program);
+			if(program != null)
+				return evaluate(program);
+			else
+				throw new RuntimeException(new InterpreterException("Failed to compile fragment"));
+		} catch (ParseError e) {
+			throw new RuntimeException(e);
+		} catch (TokenExpectedException e) {
+			throw new RuntimeException(e);
+		} catch (BadTokenException e) {
+			throw new RuntimeException(e);
+		} catch (ParseException e) {
+			throw new RuntimeException(e);
+		} catch (SGLRException e) {
+			throw new RuntimeException(e);
+		} catch (InterpreterErrorExit e) {
+			throw new RuntimeException(e);
+		} catch (InterpreterExit e) {
+			throw new RuntimeException(e);
+		} catch (UndefinedStrategyException e) {
+			throw new RuntimeException(e);
+		} catch (InterpreterException e) {
+			throw new RuntimeException(e);
+		}
 	}
-	
-    public void loadConcrete(String file, String[] path, boolean lib) throws IOException, InterpreterException {
-    }
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:23 2011	(r23736)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:26 2011	(r23737)
@@ -54,7 +54,6 @@
         	System.err.println("No files to compile");
         	return;
         }
-        includes.add(System.getProperty("user.home") + ".nix-profile/share/");
         
         intp.load(System.getProperty("share.dir") + "/libstratego-lib.ctree");
 		intp.loadConcrete(toCompile, includes.toArray(new String[0]), false);

Added: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/desugar.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/desugar.str	Sun Dec 11 20:51:26 2011	(r23737)
@@ -0,0 +1,33 @@
+module spoofax/interpreter/desugar
+imports
+	libstratego-lib
+	libstrc
+
+strategies
+	
+	spoofax-concrete-desugar = 
+		pre-desugar
+      ; desugar-list-matching
+      ; desugar
+      ; raise-annotations
+      ; simplify
+      ; debug(!"Z")
+      ; spoofax-rename-calls
+    
+    spoofax-RenameVar:
+      (varName, (n, m)) -> varName'
+    where
+	   varName' := <concat-strings> [<cify> varName, "_", <int-to-string> n, "_", <int-to-string> m]
+    
+    spoofax-HoArg = fail
+    
+    spoofax-RenameCall :
+    CallT(SVar(x), ss, ts) -> CallT(SVar(y), ss, ts)
+    where <length> ss => n
+        ; <length> ts => m
+        ; ( <spoofax-RenameVar> (x,(n,m)) => y <+ <spoofax-HoArg> x => y )
+
+    spoofax-rename-calls =
+      topdown(try(spoofax-RenameCall))
+    
+    main = !CallNoArgs(SVar("inc")) ; spoofax-concrete-desugar
\ No newline at end of file

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:23 2011	(r23736)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:26 2011	(r23737)
@@ -1,5 +1,27 @@
 package org.spoofax.interpreter;
 
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoInt;
+
 public class TestConcreteInterpreter {
 
+	@Test
+	public void load_and_exec_id() {
+		ConcreteInterpreter ci = new ConcreteInterpreter();
+		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
+		assertTrue(ci.parseAndInvoke("id <+ fail"));
+		
+	}
+
+	@Test
+	public void load_and_exec_inc() {
+		ConcreteInterpreter ci = new ConcreteInterpreter();
+		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
+		assertTrue(ci.parseAndInvoke("inc"));
+		assertEquals(new StrategoInt(11, IStrategoTerm.IMMUTABLE), ci.current());
+	}
+
 }

From karltk at strategoxt.org  Sun Dec 11 21:51:30 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23738 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src:
	main/java/org/spoofax/interpreter main/sdf
	main/stratego/spoofax/interpreter test/java/org/spoofax/int...
Message-ID: <20111211205130.4E7362B800D@mx2.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:30 2011
New Revision: 23738
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23738&sc=1

Log:
Added first cut of strategy definition parsing, corification and evaluation. Renamed desugar to frontend, since it's really a mini-frontend.

Added:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str
Deleted:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/desugar.str
Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf/Stratego-Shell.sdf
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Sun Dec 11 20:51:26 2011	(r23737)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Sun Dec 11 20:51:30 2011	(r23738)
@@ -16,6 +16,7 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.stratego.SDefT;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.InvalidParseTableException;
@@ -38,7 +39,7 @@
 		try {
 			load(findLibrary("stratego-lib/libstratego-lib.ctree"));
 			load(findLibrary("libstrc.ctree"));
-			load(new FileInputStream("desugar.ctree"));
+			load(new FileInputStream("frontend.ctree"));
 			// load(findLibrary("libstratego-aterm.ctree"));
 			// load(findLibrary("libstratego-gpp.ctree"));
 			// load(findLibrary("libstratego-rtg.ctree"));
@@ -95,16 +96,39 @@
 			throws IOException, InterpreterException {
 	}
 
+	private IStrategoAppl parseAndDesugar(String codeAsString, String startSymbol) throws TokenExpectedException, BadTokenException, ParseException, SGLRException, InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
+		IStrategoTerm tree = (IStrategoTerm) sugarParser.parse(codeAsString, "stdin", startSymbol);
+		System.out.println(tree);
+		IStrategoTerm old = current();
+		setCurrent(tree);
+		invoke("spoofax_concrete_desugar_0_0");
+		IStrategoAppl ret = (IStrategoAppl) current();
+		setCurrent(old);
+		System.out.println(ret);
+		return ret;
+	}
+	
+	public void parseAndLoad(String codeAsString) {
+        try {
+        	IStrategoAppl program = parseAndDesugar(codeAsString, "Def");
+            SDefT def = loader.parseSDefT(program);
+            context.addSVar(def.getName(), def);
+        } catch(InterpreterException e) {
+        	throw new RuntimeException(e);
+        } catch (TokenExpectedException e) {
+        	throw new RuntimeException(e);
+		} catch (BadTokenException e) {
+        	throw new RuntimeException(e);
+		} catch (ParseException e) {
+        	throw new RuntimeException(e);
+		} catch (SGLRException e) {
+        	throw new RuntimeException(e);
+		}
+	}
+	
 	public boolean parseAndInvoke(String codeAsString) {
 		try {
-			IStrategoTerm tree = (IStrategoTerm) sugarParser.parse(codeAsString, "stdin", "Strategy");
-			System.out.println(tree);
-			IStrategoTerm old = current();
-			setCurrent(tree);
-			invoke("spoofax_concrete_desugar_0_0");
-			IStrategoAppl program = (IStrategoAppl) current();
-			setCurrent(old);
-			System.out.println(program);
+			IStrategoAppl program = parseAndDesugar(codeAsString, "Strategy");	
 			if(program != null)
 				return evaluate(program);
 			else

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf/Stratego-Shell.sdf
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf/Stratego-Shell.sdf	Sun Dec 11 20:51:26 2011	(r23737)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf/Stratego-Shell.sdf	Sun Dec 11 20:51:30 2011	(r23738)
@@ -6,4 +6,5 @@
 exports
 	
 	context-free start-symbols
-		Strategy	
\ No newline at end of file
+		Strategy	
+		Def
\ No newline at end of file

Added: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str	Sun Dec 11 20:51:30 2011	(r23738)
@@ -0,0 +1,34 @@
+module spoofax/interpreter/frontend
+imports
+	libstratego-lib
+	libstrc
+
+strategies
+	
+	spoofax-concrete-desugar = 
+		pre-desugar
+      ; desugar-list-matching
+      ; desugar
+      ; raise-annotations
+      ; simplify
+      ; debug(!"Z")
+      ; try(RenameSDef)
+      ; spoofax-rename-calls
+    
+    spoofax-RenameVar:
+      (varName, (n, m)) -> varName'
+    where
+	   varName' := <concat-strings> [<cify> varName, "_", <int-to-string> n, "_", <int-to-string> m]
+    
+    spoofax-HoArg = fail
+    
+    spoofax-RenameCall :
+    CallT(SVar(x), ss, ts) -> CallT(SVar(y), ss, ts)
+    where <length> ss => n
+        ; <length> ts => m
+        ; ( <spoofax-RenameVar> (x,(n,m)) => y <+ <spoofax-HoArg> x => y )
+
+    spoofax-rename-calls =
+      topdown(try(spoofax-RenameCall))
+    
+    main = !SDefT("zz",[],[],CallT(SVar("inc"),[],[])) ; spoofax-concrete-desugar
\ No newline at end of file

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:26 2011	(r23737)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:30 2011	(r23738)
@@ -24,4 +24,13 @@
 		assertEquals(new StrategoInt(11, IStrategoTerm.IMMUTABLE), ci.current());
 	}
 
+	@Test
+	public void load_and_exec_a_def() {
+		ConcreteInterpreter ci = new ConcreteInterpreter();
+		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
+		ci.parseAndLoad("zz = inc");
+		assertTrue(ci.parseAndInvoke("zz"));
+		assertEquals(new StrategoInt(11, IStrategoTerm.IMMUTABLE), ci.current());
+	}
+
 }

From karltk at strategoxt.org  Sun Dec 11 21:51:33 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23739 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src:
	main/java/org/spoofax/interpreter main/stratego/spoofax/interpreter
	test/java/org/spoofax/interpreter
Message-ID: <20111211205133.CC4DBCC118@mx4.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:33 2011
New Revision: 23739
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23739&sc=1

Log:
Replaced references to desugar with references to frontend. Expanded upon frontend calls fro sdefs, so that higher order functions work. Split frontend strategy into one for expressions and one for sdefs. Added fixup to catch cify-renamings missed by the libstrc rename-calls strategy (it needs access to the global scope of sdefs, which we don't have atm).

Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Sun Dec 11 20:51:30 2011	(r23738)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Sun Dec 11 20:51:33 2011	(r23739)
@@ -96,12 +96,12 @@
 			throws IOException, InterpreterException {
 	}
 
-	private IStrategoAppl parseAndDesugar(String codeAsString, String startSymbol) throws TokenExpectedException, BadTokenException, ParseException, SGLRException, InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
+	private IStrategoAppl parseAndCompile(String codeAsString, String frontendStrategy, String startSymbol) throws TokenExpectedException, BadTokenException, ParseException, SGLRException, InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
 		IStrategoTerm tree = (IStrategoTerm) sugarParser.parse(codeAsString, "stdin", startSymbol);
 		System.out.println(tree);
 		IStrategoTerm old = current();
 		setCurrent(tree);
-		invoke("spoofax_concrete_desugar_0_0");
+		invoke(frontendStrategy);
 		IStrategoAppl ret = (IStrategoAppl) current();
 		setCurrent(old);
 		System.out.println(ret);
@@ -110,7 +110,7 @@
 	
 	public void parseAndLoad(String codeAsString) {
         try {
-        	IStrategoAppl program = parseAndDesugar(codeAsString, "Def");
+        	IStrategoAppl program = parseAndCompile(codeAsString, "spoofax_frontend_for_def_0_0", "Def");
             SDefT def = loader.parseSDefT(program);
             context.addSVar(def.getName(), def);
         } catch(InterpreterException e) {
@@ -128,7 +128,7 @@
 	
 	public boolean parseAndInvoke(String codeAsString) {
 		try {
-			IStrategoAppl program = parseAndDesugar(codeAsString, "Strategy");	
+			IStrategoAppl program = parseAndCompile(codeAsString, "spoofax_frontend_for_expr_0_0", "Strategy");	
 			if(program != null)
 				return evaluate(program);
 			else

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str	Sun Dec 11 20:51:30 2011	(r23738)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str	Sun Dec 11 20:51:33 2011	(r23739)
@@ -1,34 +1,54 @@
 module spoofax/interpreter/frontend
 imports
-	libstratego-lib
-	libstrc
+    libstratego-lib
+    libstrc
 
 strategies
-	
-	spoofax-concrete-desugar = 
-		pre-desugar
+
+    fake-main = spoofax-frontend-for-def ; spoofax-frontend-for-expr
+
+    spoofax-frontend-for-expr = 
+        pre-desugar
       ; desugar-list-matching
       ; desugar
       ; raise-annotations
       ; simplify
-      ; debug(!"Z")
-      ; try(RenameSDef)
-      ; spoofax-rename-calls
-    
+      ; spoofax-fixup-rename-calls
+
+    spoofax-frontend-for-def =
+        stratego-desugar
+      ; raise-annotations
+      ; desugar-list-matching
+      ; rules-to-sdefs-def 
+      ; desugar-DefaultVarDec
+      ; strename
+      ; desugar-def
+      ; rename-sdef
+      ; spoofax-fixup-rename-calls
+
     spoofax-RenameVar:
       (varName, (n, m)) -> varName'
     where
-	   varName' := <concat-strings> [<cify> varName, "_", <int-to-string> n, "_", <int-to-string> m]
-    
+      varName' := <concat-strings> [<cify> varName, "_", <int-to-string> n, "_", <int-to-string> m]
+
     spoofax-HoArg = fail
-    
+
+    spoofax-ends-with-arity =
+        ?x
+      ; trim-chars(is-num)
+      ; where(<not(eq)> (x, <id>))
+      ; string-ends-with(|"_")
+
     spoofax-RenameCall :
     CallT(SVar(x), ss, ts) -> CallT(SVar(y), ss, ts)
-    where <length> ss => n
-        ; <length> ts => m
-        ; ( <spoofax-RenameVar> (x,(n,m)) => y <+ <spoofax-HoArg> x => y )
+    where 
+      <not(spoofax-ends-with-arity)> x
+    with 
+        <length> ss => n
+      ; <length> ts => m
+      ; ( <spoofax-RenameVar> (x,(n,m)) => y <+ <spoofax-HoArg> x => y )
 
-    spoofax-rename-calls =
+    spoofax-fixup-rename-calls =
       topdown(try(spoofax-RenameCall))
-    
-    main = !SDefT("zz",[],[],CallT(SVar("inc"),[],[])) ; spoofax-concrete-desugar
\ No newline at end of file
+
+    main = !SDefT("zz",[],[],CallT(SVar("inc"),[],[])) ; spoofax-frontend-for-def
\ No newline at end of file

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:30 2011	(r23738)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:33 2011	(r23739)
@@ -25,7 +25,7 @@
 	}
 
 	@Test
-	public void load_and_exec_a_def() {
+	public void load_and_exec_a_strategy_def() {
 		ConcreteInterpreter ci = new ConcreteInterpreter();
 		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
 		ci.parseAndLoad("zz = inc");
@@ -33,4 +33,23 @@
 		assertEquals(new StrategoInt(11, IStrategoTerm.IMMUTABLE), ci.current());
 	}
 
+	@Test
+	public void load_and_exec_a_higher_order_strategy_def() {
+		ConcreteInterpreter ci = new ConcreteInterpreter();
+		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
+		ci.parseAndLoad("zz(s) = s");
+		assertTrue(ci.parseAndInvoke("zz(inc)"));
+		assertEquals(new StrategoInt(11, IStrategoTerm.IMMUTABLE), ci.current());
+	}
+
+
+	@Test
+	public void load_and_exec_a_build() {
+		ConcreteInterpreter ci = new ConcreteInterpreter();
+		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
+		assertTrue(ci.parseAndInvoke("!Foo(1,2,3)"));
+		assertEquals(IStrategoTerm.APPL, ci.current().getTermType());
+		System.out.println(ci.current());
+	}
+
 }

From karltk at strategoxt.org  Sun Dec 11 21:51:37 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23740 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter: . lib
	src/main/java/org/spoofax/interpreter
	src/main/java/org/spoofax/interpreter/cli src/test/java/org/sp...
Message-ID: <20111211205137.6D13B2B803F@mx2.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:37 2011
New Revision: 23740
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23740&sc=1

Log:
Added dependency to jline. Added the beginnings of an interactive command line console with tab completion.

Added:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/lib/
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/lib/jline-1.0.jar   (contents, props changed)
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/SpoofaxCompletor.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java
Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath	Sun Dec 11 20:51:33 2011	(r23739)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath	Sun Dec 11 20:51:37 2011	(r23740)
@@ -7,5 +7,6 @@
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.library.jsglr"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.jsglr"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
+	<classpathentry kind="lib" path="lib/jline-1.0.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Added: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/lib/jline-1.0.jar
==============================================================================
Binary file. No diff available.

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Sun Dec 11 20:51:33 2011	(r23739)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Sun Dec 11 20:51:37 2011	(r23740)
@@ -39,7 +39,7 @@
 		try {
 			load(findLibrary("stratego-lib/libstratego-lib.ctree"));
 			load(findLibrary("libstrc.ctree"));
-			load(new FileInputStream("frontend.ctree"));
+			load(new FileInputStream("share/frontend.ctree"));
 			// load(findLibrary("libstratego-aterm.ctree"));
 			// load(findLibrary("libstratego-gpp.ctree"));
 			// load(findLibrary("libstratego-rtg.ctree"));
@@ -49,9 +49,10 @@
 
 			ParseTableManager ptm = new ParseTableManager();
 			sugarTable = ptm
-					.loadFromStream(new FileInputStream("bin/Stratego-Shell.tbl"));
+					.loadFromStream(new FileInputStream("share/Stratego-Shell.tbl"));
 			sugarParser = new SGLR(new TreeBuilder(), sugarTable);
 			sugarParser.setUseStructureRecovery(false);
+			setCurrent(getFactory().makeList());
 		} catch (IOException e) {
 			throw new RuntimeException(e);
 		} catch (InterpreterException e) {
@@ -78,79 +79,31 @@
 		throw new RuntimeException("Failed to find Stratego library " + file.getAbsolutePath());
 	}
 
-	private InputStream findSyntax(String syntaxFile) {
-		String shareDir = System.getProperty("user.home")
-				+ "/.nix-profile/share/";
-		File file = new File(shareDir + "/" + syntaxFile);
-		if (file.exists()) {
-			try {
-				return new FileInputStream(file);
-			} catch (FileNotFoundException e) {
-				throw new RuntimeException(e);
-			}
-		}
-		throw new RuntimeException("Failed to find syntax table " + file.getAbsolutePath());
-	}
-
 	public void loadConcrete(String file, String[] path, boolean lib)
 			throws IOException, InterpreterException {
 	}
 
 	private IStrategoAppl parseAndCompile(String codeAsString, String frontendStrategy, String startSymbol) throws TokenExpectedException, BadTokenException, ParseException, SGLRException, InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
 		IStrategoTerm tree = (IStrategoTerm) sugarParser.parse(codeAsString, "stdin", startSymbol);
-		System.out.println(tree);
 		IStrategoTerm old = current();
 		setCurrent(tree);
 		invoke(frontendStrategy);
 		IStrategoAppl ret = (IStrategoAppl) current();
 		setCurrent(old);
-		System.out.println(ret);
 		return ret;
 	}
 	
-	public void parseAndLoad(String codeAsString) {
-        try {
-        	IStrategoAppl program = parseAndCompile(codeAsString, "spoofax_frontend_for_def_0_0", "Def");
-            SDefT def = loader.parseSDefT(program);
-            context.addSVar(def.getName(), def);
-        } catch(InterpreterException e) {
-        	throw new RuntimeException(e);
-        } catch (TokenExpectedException e) {
-        	throw new RuntimeException(e);
-		} catch (BadTokenException e) {
-        	throw new RuntimeException(e);
-		} catch (ParseException e) {
-        	throw new RuntimeException(e);
-		} catch (SGLRException e) {
-        	throw new RuntimeException(e);
-		}
+	public void parseAndLoad(String codeAsString) throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
+		IStrategoAppl program = parseAndCompile(codeAsString, "spoofax_frontend_for_def_0_0", "Def");
+		SDefT def = loader.parseSDefT(program);
+		context.addSVar(def.getName(), def);
 	}
 	
-	public boolean parseAndInvoke(String codeAsString) {
-		try {
-			IStrategoAppl program = parseAndCompile(codeAsString, "spoofax_frontend_for_expr_0_0", "Strategy");	
-			if(program != null)
-				return evaluate(program);
-			else
-				throw new RuntimeException(new InterpreterException("Failed to compile fragment"));
-		} catch (ParseError e) {
-			throw new RuntimeException(e);
-		} catch (TokenExpectedException e) {
-			throw new RuntimeException(e);
-		} catch (BadTokenException e) {
-			throw new RuntimeException(e);
-		} catch (ParseException e) {
-			throw new RuntimeException(e);
-		} catch (SGLRException e) {
-			throw new RuntimeException(e);
-		} catch (InterpreterErrorExit e) {
-			throw new RuntimeException(e);
-		} catch (InterpreterExit e) {
-			throw new RuntimeException(e);
-		} catch (UndefinedStrategyException e) {
-			throw new RuntimeException(e);
-		} catch (InterpreterException e) {
-			throw new RuntimeException(e);
-		}
+	public boolean parseAndInvoke(String codeAsString) throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
+		IStrategoAppl program = parseAndCompile(codeAsString, "spoofax_frontend_for_expr_0_0", "Strategy");	
+		if(program != null)
+			return evaluate(program);
+		else
+			throw new InterpreterException("Failed to compile fragment");
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:33 2011	(r23739)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:37 2011	(r23740)
@@ -5,63 +5,108 @@
  */
 package org.spoofax.interpreter.cli;
 
-
 import java.io.IOException;
+import java.io.PrintWriter;
 import java.util.LinkedList;
 import java.util.List;
 
+import javax.swing.text.StyledEditorKit.UnderlineAction;
+
+import jline.ConsoleReader;
+
+import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.ConcreteInterpreter;
+import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.InterpreterExit;
+import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.ParseException;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
 
 public class Main {
 
-	public static void main(String[] args) throws IOException, InterpreterException, InvalidParseTableException {
-	    
+	public static void main(String[] args) throws IOException  {
+
 		ConcreteInterpreter intp = new ConcreteInterpreter();
-		
-        List<String> includes = new LinkedList<String>();
-        String toCompile = null;
-        String outFile = null;
-        int skip = 0;
-        
-        for(int i = 0; i < args.length; i++) {
-            if(skip > 0) {
-                skip--;
-                continue;
-            }
-            final String arg = args[i];
-            if(arg.equals("-I")) {
-                skip++;
-                includes.add(args[i+1]);
-            } else if(arg.equals("-i")) {
-                toCompile = args[i+1];
-                skip++;
-            } else if(args.equals("-o")) {
-                outFile = args[i+1];
-                skip++;
-            }
-            else if(arg.startsWith("-")) {
-                System.err.println("Unknown option " + arg);
-                System.exit(-12);
-            } else {
-                
-            }
-            
-        }
-        
-        if(toCompile == null) {
-        	System.err.println("No files to compile");
-        	return;
-        }
-        
-        intp.load(System.getProperty("share.dir") + "/libstratego-lib.ctree");
-		intp.loadConcrete(toCompile, includes.toArray(new String[0]), false);
-		intp.setCurrent(intp.getFactory().makeList());
-		intp.invoke("main_0_0");
-		
-		if(outFile != null) {
-			
+
+		List<String> includes = new LinkedList<String>();
+		List<String> toCompile = new LinkedList<String>();
+		String outFile = null;
+		int skip = 0;
+
+		for (int i = 0; i < args.length; i++) {
+			if (skip > 0) {
+				skip--;
+				continue;
+			}
+			final String arg = args[i];
+			if (arg.equals("-I")) {
+				skip++;
+				includes.add(args[i + 1]);
+			} else if (arg.equals("-i")) {
+				toCompile.add(args[i + 1]);
+				skip++;
+			} else if (args.equals("-o")) {
+				outFile = args[i + 1];
+				skip++;
+			} else if (arg.startsWith("-")) {
+				System.err.println("Unknown option " + arg);
+				System.exit(-12);
+			} else {
+				throw new NotImplementedException();
+			}
+		}
+
+		if (toCompile.size() == 0) {
+			PrintWriter out = new PrintWriter(System.out);
+			ConsoleReader consoleReader = new ConsoleReader();
+			consoleReader.setBellEnabled(false);
+			consoleReader.addCompletor(new SpoofaxCompletor(intp.getContext()));
+			String line;
+			while ((line = consoleReader.readLine("stratego> ")) != null) {
+				if (line.equals(":quit"))
+					break;
+				IStrategoTerm old = intp.current();
+				try {
+					if (intp.parseAndInvoke(line)) {
+						out.println(intp.current());
+						out.flush();
+					} else {
+						intp.setCurrent(old);
+						out.println("command failed");
+						out.flush();
+					}
+				} catch (UndefinedStrategyException e) {
+					handleUndefinedStrategyException(out, e);
+				} catch (TokenExpectedException e) {
+					e.printStackTrace(out);
+				} catch (BadTokenException e) {
+					e.printStackTrace(out);
+				} catch (ParseException e) {
+					e.printStackTrace(out);
+				} catch (SGLRException e) {
+					e.printStackTrace(out);
+				} catch (InterpreterErrorExit e) {
+					e.printStackTrace(out);
+				} catch (InterpreterExit e) {
+					e.printStackTrace(out);
+				} catch (InterpreterException e) {
+					if(e.getCause() instanceof UndefinedStrategyException) {
+						handleUndefinedStrategyException(out, (UndefinedStrategyException)e.getCause());
+					}
+				}
+				out.flush();
+			}
 		}
 	}
+	
+	private static void handleUndefinedStrategyException(PrintWriter out,
+			UndefinedStrategyException e) {
+		out.println("undefined strategy "
+				+ SpoofaxCompletor.uncify(e.getStrategyName()));
+	}
 }
\ No newline at end of file

Added: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/SpoofaxCompletor.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/SpoofaxCompletor.java	Sun Dec 11 20:51:37 2011	(r23740)
@@ -0,0 +1,51 @@
+package org.spoofax.interpreter.cli;
+
+import java.util.List;
+import java.util.SortedSet;
+import java.util.TreeSet;
+
+import org.spoofax.interpreter.core.IContext;
+
+import jline.Completor;
+
+public class SpoofaxCompletor implements Completor {
+
+	private final IContext context;
+	private final SortedSet<String> strategies = new TreeSet<String>();
+
+	public SpoofaxCompletor(IContext context) {
+		this.context = context;
+		refreshStrategies();
+	}
+
+	@SuppressWarnings({ "rawtypes", "unchecked" })
+	public int complete(String prefix, int index, List alternatives) {
+		//System.out.println(prefix + "/" + index + "/" + alternatives);
+		
+		for(String name : strategies.tailSet(prefix)) {
+			if(name.startsWith(prefix))
+				alternatives.add(name);
+		}
+		return alternatives.size() == 0 ? -1 : 0;
+	}
+	
+	public void refreshStrategies() {
+		strategies.clear();
+		for(String s : context.getStrategyNames()) {
+			strategies.add(uncify(s));
+		}
+	}
+
+	public static String uncify(String name) {
+		int underlineCount = 0;
+		int i;
+		for(i = name.length() - 1; i >= 0; i--) {
+			if(name.charAt(i) == '_')
+				underlineCount++;
+			if(underlineCount == 2)
+				break;
+		}
+		return name.substring(0, i).replace("_p_", "'").replace('_', '-');
+	}
+
+}

Added: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java	Sun Dec 11 20:51:37 2011	(r23740)
@@ -0,0 +1,12 @@
+package org.spoofax.interpreter;
+
+import org.junit.Test;
+import org.spoofax.interpreter.cli.SpoofaxCompletor;
+
+public class TestCompletor {
+
+	@Test
+	public void test_uncify() {
+		System.out.println(SpoofaxCompletor.uncify("znip_foo_p__p__1_2"));
+	}
+}

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:33 2011	(r23739)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:37 2011	(r23740)
@@ -3,13 +3,21 @@
 import static org.junit.Assert.*;
 
 import org.junit.Test;
+import org.spoofax.interpreter.core.InterpreterErrorExit;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.InterpreterExit;
+import org.spoofax.interpreter.core.UndefinedStrategyException;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.ParseException;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
 import org.spoofax.terms.StrategoInt;
 
 public class TestConcreteInterpreter {
 
 	@Test
-	public void load_and_exec_id() {
+	public void load_and_exec_id() throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
 		ConcreteInterpreter ci = new ConcreteInterpreter();
 		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
 		assertTrue(ci.parseAndInvoke("id <+ fail"));
@@ -17,7 +25,7 @@
 	}
 
 	@Test
-	public void load_and_exec_inc() {
+	public void load_and_exec_inc() throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
 		ConcreteInterpreter ci = new ConcreteInterpreter();
 		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
 		assertTrue(ci.parseAndInvoke("inc"));
@@ -25,7 +33,7 @@
 	}
 
 	@Test
-	public void load_and_exec_a_strategy_def() {
+	public void load_and_exec_a_strategy_def() throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
 		ConcreteInterpreter ci = new ConcreteInterpreter();
 		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
 		ci.parseAndLoad("zz = inc");
@@ -34,7 +42,7 @@
 	}
 
 	@Test
-	public void load_and_exec_a_higher_order_strategy_def() {
+	public void load_and_exec_a_higher_order_strategy_def() throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
 		ConcreteInterpreter ci = new ConcreteInterpreter();
 		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
 		ci.parseAndLoad("zz(s) = s");
@@ -44,7 +52,7 @@
 
 
 	@Test
-	public void load_and_exec_a_build() {
+	public void load_and_exec_a_build() throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
 		ConcreteInterpreter ci = new ConcreteInterpreter();
 		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
 		assertTrue(ci.parseAndInvoke("!Foo(1,2,3)"));

From karltk at strategoxt.org  Sun Dec 11 21:51:40 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23741 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src:
	main/java/org/spoofax/interpreter/cli
	test/java/org/spoofax/interpreter
Message-ID: <20111211205140.E277DCC118@mx4.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:40 2011
New Revision: 23741
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23741&sc=1

Log:
Current term is printed in colors. Prompt shows ok/fail and counter. :vars shows global variables. :strategies shows all available strategies. Completor understands <(+; and places cursor correctly inside expressions. :clear clears the screen, with a minor double-prompt bug.

Added:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java
Deleted:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/SpoofaxCompletor.java
Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:37 2011	(r23740)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:40 2011	(r23741)
@@ -9,9 +9,10 @@
 import java.io.PrintWriter;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.SortedSet;
+import java.util.TreeSet;
 
-import javax.swing.text.StyledEditorKit.UnderlineAction;
-
+import jline.ANSIBuffer;
 import jline.ConsoleReader;
 
 import org.spoofax.NotImplementedException;
@@ -20,8 +21,13 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoReal;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.jsglr.client.ParseException;
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.spoofax.jsglr.shared.SGLRException;
@@ -29,7 +35,7 @@
 
 public class Main {
 
-	public static void main(String[] args) throws IOException  {
+	public static void main(String[] args) throws IOException {
 
 		ConcreteInterpreter intp = new ConcreteInterpreter();
 
@@ -64,49 +70,121 @@
 		if (toCompile.size() == 0) {
 			PrintWriter out = new PrintWriter(System.out);
 			ConsoleReader consoleReader = new ConsoleReader();
+
 			consoleReader.setBellEnabled(false);
-			consoleReader.addCompletor(new SpoofaxCompletor(intp.getContext()));
+			consoleReader
+					.addCompletor(new StrategyCompletor(intp.getContext()));
 			String line;
-			while ((line = consoleReader.readLine("stratego> ")) != null) {
-				if (line.equals(":quit"))
+			int promptCount = 0;
+			boolean lastWasGood = true;
+			while ((line = consoleReader.readLine(makePrompt(lastWasGood,
+					promptCount))) != null) {
+				final String code = line.trim();
+				if (":quit".equals(code))
 					break;
+				else if (":clear".equals(code)) {
+					consoleReader.clearScreen();
+				} else if (":vars".equals(code)) {
+					for (String var : intp.getContext().getVarScope().getVars())
+						out.println(var);
+				} else if (":strategies".equals(code)) {
+					SortedSet<String> sorted = new TreeSet<String>();
+					for (String strategy : intp.getContext().getStrategyNames()) {
+						sorted.add(StrategyCompletor.uncify(strategy));
+					}
+					for (String s : sorted)
+						out.println(s);
+					out.flush();
+				}
+				if (code.equals("") || code.startsWith(":"))
+					continue;
+				promptCount++;
 				IStrategoTerm old = intp.current();
 				try {
-					if (intp.parseAndInvoke(line)) {
-						out.println(intp.current());
+					if (intp.parseAndInvoke(code)) {
+						lastWasGood = true;
+						ANSIBuffer ab = new ANSIBuffer();
+						out.println(colorize(ab, intp.current()));
 						out.flush();
 					} else {
+						lastWasGood = false;
 						intp.setCurrent(old);
-						out.println("command failed");
-						out.flush();
 					}
 				} catch (UndefinedStrategyException e) {
 					handleUndefinedStrategyException(out, e);
 				} catch (TokenExpectedException e) {
 					e.printStackTrace(out);
+					out.println(e.getClass());
 				} catch (BadTokenException e) {
-					e.printStackTrace(out);
+					out.println(new ANSIBuffer().red(e.getMessage()).toString());
 				} catch (ParseException e) {
 					e.printStackTrace(out);
+					out.println(e.getClass());
 				} catch (SGLRException e) {
 					e.printStackTrace(out);
+					out.println(e.getClass());
 				} catch (InterpreterErrorExit e) {
 					e.printStackTrace(out);
+					out.println(e.getClass());
 				} catch (InterpreterExit e) {
 					e.printStackTrace(out);
+					out.println(e.getClass());
 				} catch (InterpreterException e) {
-					if(e.getCause() instanceof UndefinedStrategyException) {
-						handleUndefinedStrategyException(out, (UndefinedStrategyException)e.getCause());
+					if (e.getCause() instanceof UndefinedStrategyException) {
+						handleUndefinedStrategyException(out,
+								(UndefinedStrategyException) e.getCause());
 					}
 				}
 				out.flush();
 			}
 		}
 	}
-	
+
+	private static ANSIBuffer colorize(ANSIBuffer ab, IStrategoTerm current) {
+		if (current instanceof IStrategoInt || current instanceof IStrategoReal) {
+			ab.yellow(current.toString());
+		} else if (current instanceof IStrategoTuple) {
+			printSequence(ab, "(", ")", current);
+		} else if (current instanceof IStrategoString) {
+			ab.green(current.toString());
+		} else if (current instanceof IStrategoList) {
+			printSequence(ab, "[", "]", current);
+		} else if (current instanceof IStrategoAppl) {
+			ab.append(((IStrategoAppl) current).getName());
+			printSequence(ab, "(", ")", current);
+		}
+		return ab;
+	}
+
+	private static void printSequence(ANSIBuffer ab, String open, String close,
+			IStrategoTerm current) {
+		ab.bold(open);
+		IStrategoTerm[] ts = current.getAllSubterms();
+		if (ts.length > 1)
+			colorize(ab, ts[0]);
+		for (int i = 1; i < ts.length; i++) {
+			ab.bold(",");
+			colorize(ab, ts[i]);
+		}
+		ab.bold(close);
+	}
+
+	private static String makePrompt(boolean success, int promptCount) {
+		ANSIBuffer ab = new ANSIBuffer();
+		ab.bold(promptCount + "");
+		ab.append("/");
+		if (success)
+			ab.green("ok");
+		else
+			ab.red("fail");
+		ab.blue(">");
+		ab.append(" ");
+		return ab.toString();
+	}
+
 	private static void handleUndefinedStrategyException(PrintWriter out,
 			UndefinedStrategyException e) {
 		out.println("undefined strategy "
-				+ SpoofaxCompletor.uncify(e.getStrategyName()));
+				+ StrategyCompletor.uncify(e.getStrategyName()));
 	}
 }
\ No newline at end of file

Added: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java	Sun Dec 11 20:51:40 2011	(r23741)
@@ -0,0 +1,62 @@
+package org.spoofax.interpreter.cli;
+
+import java.util.List;
+import java.util.SortedSet;
+import java.util.TreeSet;
+
+import jline.Completor;
+
+import org.spoofax.interpreter.core.IContext;
+
+public class StrategyCompletor implements Completor {
+
+	private final IContext context;
+	private final SortedSet<String> strategies = new TreeSet<String>();
+
+	public StrategyCompletor(IContext context) {
+		this.context = context;
+		refreshStrategies();
+	}
+
+	@SuppressWarnings({ "rawtypes", "unchecked" })
+	public int complete(String lookup, int index, List alternatives) {
+		// System.out.println(lookup + "/" + index + "/" + alternatives);
+
+		String sep = "<;([+";
+		int start = -1;
+		for (int i = lookup.length() - 1; i >= 0; i--)
+			if (sep.indexOf(lookup.charAt(i)) != -1)
+				start = i;
+		String prefix = lookup.substring(start + 1);
+		// System.out.println('|' + prefix + '|');
+
+		for (String name : strategies.tailSet(prefix)) {
+			if (name.startsWith(prefix))
+				alternatives.add(name);
+		}
+
+		return alternatives.size() == 0 ? -1 : start + 1;
+	}
+
+	public void refreshStrategies() {
+		strategies.clear();
+		for (String s : context.getStrategyNames()) {
+			strategies.add(uncify(s));
+		}
+	}
+
+	public static String uncify(String name) {
+		int underlineCount = 0;
+		int i;
+		for (i = name.length() - 1; i >= 0; i--) {
+			if (name.charAt(i) == '_')
+				underlineCount++;
+			if (underlineCount == 2)
+				break;
+		}
+		// FIXME make this cleaner!
+		return name.substring(0, i).replace("_p_", "'").replace("__", "+")
+				.replace('_', '-').replace("+", "_");
+	}
+
+}

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java	Sun Dec 11 20:51:37 2011	(r23740)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java	Sun Dec 11 20:51:40 2011	(r23741)
@@ -1,12 +1,12 @@
 package org.spoofax.interpreter;
 
 import org.junit.Test;
-import org.spoofax.interpreter.cli.SpoofaxCompletor;
+import org.spoofax.interpreter.cli.StrategyCompletor;
 
 public class TestCompletor {
 
 	@Test
 	public void test_uncify() {
-		System.out.println(SpoofaxCompletor.uncify("znip_foo_p__p__1_2"));
+		System.out.println(StrategyCompletor.uncify("znip_foo_p__p__1_2"));
 	}
 }

From karltk at strategoxt.org  Sun Dec 11 21:51:44 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23742 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter:
	. cli
Message-ID: <20111211205144.30DEA2B803F@mx2.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:43 2011
New Revision: 23742
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23742&sc=1

Log:
Added :forget [variable name*], :forget _ and :vars.

Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Sun Dec 11 20:51:40 2011	(r23741)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Sun Dec 11 20:51:43 2011	(r23742)
@@ -101,9 +101,9 @@
 	
 	public boolean parseAndInvoke(String codeAsString) throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
 		IStrategoAppl program = parseAndCompile(codeAsString, "spoofax_frontend_for_expr_0_0", "Strategy");	
-		if(program != null)
+		if(program != null) {
 			return evaluate(program);
-		else
+		} else
 			throw new InterpreterException("Failed to compile fragment");
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:40 2011	(r23741)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:43 2011	(r23742)
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk at strategoxt dot org>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
  * Licensed under the GNU Lesser General Public License, v2.1
  */
@@ -21,6 +21,7 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.core.VarScope;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -85,8 +86,13 @@
 				else if (":clear".equals(code)) {
 					consoleReader.clearScreen();
 				} else if (":vars".equals(code)) {
-					for (String var : intp.getContext().getVarScope().getVars())
-						out.println(var);
+					VarScope vs = intp.getContext().getVarScope();
+					for(String v : vs.getVars()) {
+						IStrategoTerm t = vs.lookup(v);
+						ANSIBuffer ab = new ANSIBuffer();
+						out.println(" " + v + " = " + colorize(ab, t).toString());
+					}
+					out.flush();
 				} else if (":strategies".equals(code)) {
 					SortedSet<String> sorted = new TreeSet<String>();
 					for (String strategy : intp.getContext().getStrategyNames()) {
@@ -95,6 +101,17 @@
 					for (String s : sorted)
 						out.println(s);
 					out.flush();
+				} else if(code.startsWith(":forget ")) {
+					String[] els = code.split(" ");
+					VarScope vs = intp.getContext().getVarScope();
+					for(int i = 1 ; i < els.length; i++) {
+						if("_".equals(els[i])) {
+							vs.removeAllVars();
+							break;
+						} else {
+							vs.removeVar(els[i]);
+						}
+					}
 				}
 				if (code.equals("") || code.startsWith(":"))
 					continue;

From karltk at strategoxt.org  Sun Dec 11 21:51:46 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23743 -
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli
Message-ID: <20111211205146.68F842B803F@mx2.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:46 2011
New Revision: 23743
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23743&sc=1

Log:
Added two-column layout to :strategies. Added a short help page.

Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:43 2011	(r23742)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:46 2011	(r23743)
@@ -7,6 +7,7 @@
 
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.SortedSet;
@@ -92,15 +93,12 @@
 						ANSIBuffer ab = new ANSIBuffer();
 						out.println(" " + v + " = " + colorize(ab, t).toString());
 					}
-					out.flush();
 				} else if (":strategies".equals(code)) {
 					SortedSet<String> sorted = new TreeSet<String>();
 					for (String strategy : intp.getContext().getStrategyNames()) {
 						sorted.add(StrategyCompletor.uncify(strategy));
 					}
-					for (String s : sorted)
-						out.println(s);
-					out.flush();
+					consoleReader.printColumns(sorted);
 				} else if(code.startsWith(":forget ")) {
 					String[] els = code.split(" ");
 					VarScope vs = intp.getContext().getVarScope();
@@ -112,9 +110,13 @@
 							vs.removeVar(els[i]);
 						}
 					}
+				} else if(code.startsWith(":")) {
+					usage(out);
 				}
-				if (code.equals("") || code.startsWith(":"))
+				if (code.equals("") || code.startsWith(":")) {
+					out.flush();
 					continue;
+				}
 				promptCount++;
 				IStrategoTerm old = intp.current();
 				try {
@@ -122,7 +124,6 @@
 						lastWasGood = true;
 						ANSIBuffer ab = new ANSIBuffer();
 						out.println(colorize(ab, intp.current()));
-						out.flush();
 					} else {
 						lastWasGood = false;
 						intp.setCurrent(old);
@@ -186,6 +187,15 @@
 		ab.bold(close);
 	}
 
+	private static void usage(PrintWriter out) {
+		out.println(new ANSIBuffer().yellow(" :help                       ").append("-- print this page"));
+		out.println(new ANSIBuffer().yellow(" :forget ").append("var1 var2 ... varN  -- forget global variables"));
+		out.println(new ANSIBuffer().yellow(" :forget ").append("_                   -- forget all global variables"));
+		out.println(new ANSIBuffer().yellow(" :vars                       ").append("-- show all global variables"));
+		out.println(new ANSIBuffer().yellow(" :strategies                 ").append("-- show all global strategies"));
+	}
+	
+	
 	private static String makePrompt(boolean success, int promptCount) {
 		ANSIBuffer ab = new ANSIBuffer();
 		ab.bold(promptCount + "");

From karltk at strategoxt.org  Sun Dec 11 21:51:48 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23744 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src:
	main/java/org/spoofax/interpreter/cli
	test/java/org/spoofax/interpreter
Message-ID: <20111211205148.B1086CC11E@mx4.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:48 2011
New Revision: 23744
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23744&sc=1

Log:
Added :arity that shows basic arity information for strategy definition names.

Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:46 2011	(r23743)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:48 2011	(r23744)
@@ -7,6 +7,7 @@
 
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
@@ -110,6 +111,20 @@
 							vs.removeVar(els[i]);
 						}
 					}
+				} else if(code.startsWith(":arity ")) {
+					String[] els = code.split(" ");
+					Collection<String> interesting = new LinkedList<String>();
+					for(int i = 0; i < els.length; i++) {
+						for(String s : intp.getContext().getStrategyNames()) {
+							String uncifyName = StrategyCompletor.uncify(s);
+							if(els[i].equals(uncifyName)) {
+									interesting.add(s);
+							}
+						}
+					}
+					for(String s : interesting) {
+						out.println(StrategyCompletor.uncifyComplete(s));
+					}
 				} else if(code.startsWith(":")) {
 					usage(out);
 				}
@@ -189,10 +204,11 @@
 
 	private static void usage(PrintWriter out) {
 		out.println(new ANSIBuffer().yellow(" :help                       ").append("-- print this page"));
-		out.println(new ANSIBuffer().yellow(" :forget ").append("var1 var2 ... varN  -- forget global variables"));
+		out.println(new ANSIBuffer().yellow(" :forget ").append("var1 var2 ... varN  -- forget specific global variables"));
 		out.println(new ANSIBuffer().yellow(" :forget ").append("_                   -- forget all global variables"));
-		out.println(new ANSIBuffer().yellow(" :vars                       ").append("-- show all global variables"));
+		out.println(new ANSIBuffer().yellow(" :arity ").append("strategy              -- show arity for a strategy"));
 		out.println(new ANSIBuffer().yellow(" :strategies                 ").append("-- show all global strategies"));
+		out.println(new ANSIBuffer().yellow(" :vars                       ").append("-- show all global variables"));
 	}
 	
 	

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java	Sun Dec 11 20:51:46 2011	(r23743)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java	Sun Dec 11 20:51:48 2011	(r23744)
@@ -45,7 +45,16 @@
 		}
 	}
 
+	private static String unescape(String name) {
+		return name.replace("_p_", "'").replace("__", "+")
+		.replace('_', '-').replace("+", "_");
+	}
+
 	public static String uncify(String name) {
+		return unescape(name.substring(0, indexOfArity(name)));
+	}
+
+	private static int indexOfArity(String name) {
 		int underlineCount = 0;
 		int i;
 		for (i = name.length() - 1; i >= 0; i--) {
@@ -54,9 +63,19 @@
 			if (underlineCount == 2)
 				break;
 		}
-		// FIXME make this cleaner!
-		return name.substring(0, i).replace("_p_", "'").replace("__", "+")
-				.replace('_', '-').replace("+", "_");
+		return i;
+	}
+
+	public static String uncifyComplete(String s) {
+		int aritySplit = indexOfArity(s);
+		int i = aritySplit + 1;
+		for(; i < s.length(); i++) {
+			if(!Character.isDigit(s.charAt(i)))
+				break;	
+		}
+		String sarity = s.substring(aritySplit + 1, i);
+		String tarity = s.substring(i + 1, s.length());
+		return unescape(s.substring(0, aritySplit)) + "/(" + sarity + "," + tarity + ")";
 	}
 
 }

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java	Sun Dec 11 20:51:46 2011	(r23743)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java	Sun Dec 11 20:51:48 2011	(r23744)
@@ -1,12 +1,30 @@
 package org.spoofax.interpreter;
 
+import static org.junit.Assert.*;
+
 import org.junit.Test;
 import org.spoofax.interpreter.cli.StrategyCompletor;
 
 public class TestCompletor {
 
 	@Test
-	public void test_uncify() {
-		System.out.println(StrategyCompletor.uncify("znip_foo_p__p__1_2"));
+	public void test_uncify_arity_and_tick() {
+		assertEquals("znip-foo''", StrategyCompletor.uncify("znip_foo_p__p__1_2"));
+	}
+
+	@Test
+	public void test_uncify_underline() {
+		assertEquals("F_OK", StrategyCompletor.uncify("F__OK_0_0"));
 	}
+
+	@Test
+	public void test_uncifyComplete_0_0() {
+		assertEquals("F_OK/(0,0)", StrategyCompletor.uncifyComplete("F__OK_0_0"));
+	}
+
+	@Test
+	public void test_uncifyComplete_3_4() {
+		assertEquals("F_OK/(3,4)", StrategyCompletor.uncifyComplete("F__OK_3_4"));
+	}
+
 }

From karltk at strategoxt.org  Sun Dec 11 21:51:52 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23745 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src:
	main/java/org/spoofax/interpreter
	main/java/org/spoofax/interpreter/cli main/sdf
	main/stratego/spoofax...
Message-ID: <20111211205152.14FFC2B8003@mx2.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:51 2011
New Revision: 23745
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23745&sc=1

Log:
Changed shell grammar to accept both Strategy and Def at new Toplevel production. Changed frontend to deal with this and do proper desugaring of both exprs and sdefs. This finally makes it possible to define strategies on the toplevel in the shell.

Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf/Stratego-Shell.sdf
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Sun Dec 11 20:51:48 2011	(r23744)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Sun Dec 11 20:51:51 2011	(r23745)
@@ -93,17 +93,16 @@
 		return ret;
 	}
 	
-	public void parseAndLoad(String codeAsString) throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
-		IStrategoAppl program = parseAndCompile(codeAsString, "spoofax_frontend_for_def_0_0", "Def");
-		SDefT def = loader.parseSDefT(program);
-		context.addSVar(def.getName(), def);
-	}
-	
 	public boolean parseAndInvoke(String codeAsString) throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
-		IStrategoAppl program = parseAndCompile(codeAsString, "spoofax_frontend_for_expr_0_0", "Strategy");	
-		if(program != null) {
-			return evaluate(program);
-		} else
+		IStrategoAppl program = parseAndCompile(codeAsString, "spx_shell_frontend_0_0", "Toplevel");
+		if(program == null) {
 			throw new InterpreterException("Failed to compile fragment");
+		} else if(program.getName().equals("SDefT")) {
+			SDefT def = loader.parseSDefT(program);
+			context.addSVar(def.getName(), def);
+			return true;
+		} else {
+			return evaluate(program);
+		} 
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:48 2011	(r23744)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:51 2011	(r23745)
@@ -8,7 +8,6 @@
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.SortedSet;
@@ -206,7 +205,7 @@
 		out.println(new ANSIBuffer().yellow(" :help                       ").append("-- print this page"));
 		out.println(new ANSIBuffer().yellow(" :forget ").append("var1 var2 ... varN  -- forget specific global variables"));
 		out.println(new ANSIBuffer().yellow(" :forget ").append("_                   -- forget all global variables"));
-		out.println(new ANSIBuffer().yellow(" :arity ").append("strategy              -- show arity for a strategy"));
+		out.println(new ANSIBuffer().yellow(" :arity ").append("strategy             -- show arity for a strategy"));
 		out.println(new ANSIBuffer().yellow(" :strategies                 ").append("-- show all global strategies"));
 		out.println(new ANSIBuffer().yellow(" :vars                       ").append("-- show all global variables"));
 	}

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf/Stratego-Shell.sdf
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf/Stratego-Shell.sdf	Sun Dec 11 20:51:48 2011	(r23744)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/sdf/Stratego-Shell.sdf	Sun Dec 11 20:51:51 2011	(r23745)
@@ -1,10 +1,14 @@
 module Stratego-Shell
 
 imports
-	Stratego-Sugar
-	
+    Stratego-Sugar
+
 exports
-	
-	context-free start-symbols
-		Strategy	
-		Def
\ No newline at end of file
+
+    context-free syntax
+
+        Strategy -> Toplevel
+        Def      -> Toplevel
+
+    context-free start-symbols
+        Toplevel

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str	Sun Dec 11 20:51:48 2011	(r23744)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str	Sun Dec 11 20:51:51 2011	(r23745)
@@ -5,17 +5,26 @@
 
 strategies
 
-    fake-main = spoofax-frontend-for-def ; spoofax-frontend-for-expr
+    fake-main = spx-shell-frontend
 
-    spoofax-frontend-for-expr = 
+    spx-shell-frontend :
+        x -> x'
+    with
+        x' := <spx-shell-is-strategy < spx-shell-frontend-for-def + spx-shell-frontend-for-expr> x
+
+    spx-shell-is-strategy : x at SDefT(_, _, _, _) -> x
+    spx-shell-is-strategy : x at SDef(_, _, _) -> x
+    spx-shell-is-strategy : x at SDefNoArgs(_, _) -> x
+
+    spx-shell-frontend-for-expr = 
         pre-desugar
       ; desugar-list-matching
       ; desugar
       ; raise-annotations
       ; simplify
-      ; spoofax-fixup-rename-calls
+      ; spx-shell-fixup-rename-calls
 
-    spoofax-frontend-for-def =
+    spx-shell-frontend-for-def =
         stratego-desugar
       ; raise-annotations
       ; desugar-list-matching
@@ -24,31 +33,33 @@
       ; strename
       ; desugar-def
       ; rename-sdef
-      ; spoofax-fixup-rename-calls
+      ; spx-shell-fixup-rename-calls
 
-    spoofax-RenameVar:
+    spx-shell-RenameVar:
       (varName, (n, m)) -> varName'
     where
       varName' := <concat-strings> [<cify> varName, "_", <int-to-string> n, "_", <int-to-string> m]
 
-    spoofax-HoArg = fail
+    spx-shell-HoArg = fail
 
-    spoofax-ends-with-arity =
+    spx-shell-ends-with-arity =
         ?x
       ; trim-chars(is-num)
       ; where(<not(eq)> (x, <id>))
       ; string-ends-with(|"_")
 
-    spoofax-RenameCall :
+    spx-shell-RenameCall :
     CallT(SVar(x), ss, ts) -> CallT(SVar(y), ss, ts)
     where 
-      <not(spoofax-ends-with-arity)> x
+      <not(spx-shell-ends-with-arity)> x
     with 
         <length> ss => n
       ; <length> ts => m
-      ; ( <spoofax-RenameVar> (x,(n,m)) => y <+ <spoofax-HoArg> x => y )
+      ; ( <spx-shell-RenameVar> (x,(n,m)) => y <+ <spx-shell-HoArg> x => y )
+
+    spx-shell-fixup-rename-calls =
+      topdown(try(spx-shell-RenameCall))
 
-    spoofax-fixup-rename-calls =
-      topdown(try(spoofax-RenameCall))
+    pain = !SDefT("zz",[],[],CallT(SVar("inc"),[],[])) ; spx-shell-frontend
 
-    main = !SDefT("zz",[],[],CallT(SVar("inc"),[],[])) ; spoofax-frontend-for-def
\ No newline at end of file
+    main = !SDef("zz",[DefaultVarDec("s")],CallNoArgs(SVar("s"))) ; spx-shell-frontend
\ No newline at end of file

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:48 2011	(r23744)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:51 2011	(r23745)
@@ -36,7 +36,7 @@
 	public void load_and_exec_a_strategy_def() throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
 		ConcreteInterpreter ci = new ConcreteInterpreter();
 		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
-		ci.parseAndLoad("zz = inc");
+		ci.parseAndInvoke("zz = inc");
 		assertTrue(ci.parseAndInvoke("zz"));
 		assertEquals(new StrategoInt(11, IStrategoTerm.IMMUTABLE), ci.current());
 	}
@@ -45,7 +45,7 @@
 	public void load_and_exec_a_higher_order_strategy_def() throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
 		ConcreteInterpreter ci = new ConcreteInterpreter();
 		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
-		ci.parseAndLoad("zz(s) = s");
+		ci.parseAndInvoke("zz(s) = s");
 		assertTrue(ci.parseAndInvoke("zz(inc)"));
 		assertEquals(new StrategoInt(11, IStrategoTerm.IMMUTABLE), ci.current());
 	}

From karltk at strategoxt.org  Sun Dec 11 21:51:55 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23746 -
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter
Message-ID: <20111211205155.4456A2B8003@mx2.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:55 2011
New Revision: 23746
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23746&sc=1

Log:
Slightly more accurate checking of return term of load_and_check_a_build.

Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:51 2011	(r23745)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:51:55 2011	(r23746)
@@ -7,6 +7,7 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.ParseException;
 import org.spoofax.jsglr.shared.BadTokenException;
@@ -57,7 +58,7 @@
 		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));
 		assertTrue(ci.parseAndInvoke("!Foo(1,2,3)"));
 		assertEquals(IStrategoTerm.APPL, ci.current().getTermType());
-		System.out.println(ci.current());
+		assertEquals("Foo", ((IStrategoAppl)ci.current()).getName());
 	}
 
 }

From karltk at strategoxt.org  Sun Dec 11 21:51:57 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:51:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23747 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src:
	main/java/org/spoofax/interpreter/cli
	test/java/org/spoofax/interpreter
Message-ID: <20111211205157.75A39CC0EF@mx4.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:51:57 2011
New Revision: 23747
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23747&sc=1

Log:
Added :forget s/(m,n) for forgetting global strategies.

Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:55 2011	(r23746)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:57 2011	(r23747)
@@ -106,8 +106,12 @@
 						if("_".equals(els[i])) {
 							vs.removeAllVars();
 							break;
-						} else {
+						} else if (els[i].indexOf("/") == -1){
 							vs.removeVar(els[i]);
+						} else {
+							String name = StrategyCompletor.cify(els[i]);
+							if(!vs.removeSVar(name))
+								out.print(new ANSIBuffer().red("Strategy '" + name + "' unknown"));
 						}
 					}
 				} else if(code.startsWith(":arity ")) {
@@ -204,6 +208,7 @@
 	private static void usage(PrintWriter out) {
 		out.println(new ANSIBuffer().yellow(" :help                       ").append("-- print this page"));
 		out.println(new ANSIBuffer().yellow(" :forget ").append("var1 var2 ... varN  -- forget specific global variables"));
+		out.println(new ANSIBuffer().yellow(" :forget ").append("strat/(n,m)         -- forget strategy with arity (n, m), e.g :forget zip/(1,0)"));
 		out.println(new ANSIBuffer().yellow(" :forget ").append("_                   -- forget all global variables"));
 		out.println(new ANSIBuffer().yellow(" :arity ").append("strategy             -- show arity for a strategy"));
 		out.println(new ANSIBuffer().yellow(" :strategies                 ").append("-- show all global strategies"));

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java	Sun Dec 11 20:51:55 2011	(r23746)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java	Sun Dec 11 20:51:57 2011	(r23747)
@@ -78,4 +78,16 @@
 		return unescape(s.substring(0, aritySplit)) + "/(" + sarity + "," + tarity + ")";
 	}
 
+	public static String cify(String s) {
+		int aritySplit = s.indexOf("/");
+		int i = s.indexOf(',', aritySplit);
+		String sarity = s.substring(aritySplit + 2, i);
+		String tarity = s.substring(i + 1, s.length() - 1);
+		return escape(s.substring(0, aritySplit)) + "_" + sarity + "_" + tarity;
+	}
+
+	private static String escape(String s) {
+		return s.replace("_", "__").replace("-", "_").replace("'", "_p_");
+	}
+
 }

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java	Sun Dec 11 20:51:55 2011	(r23746)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestCompletor.java	Sun Dec 11 20:51:57 2011	(r23747)
@@ -27,4 +27,19 @@
 		assertEquals("F_OK/(3,4)", StrategyCompletor.uncifyComplete("F__OK_3_4"));
 	}
 
+	@Test
+	public void test_cify_0_0() {
+		assertEquals("foo_p__0_0", StrategyCompletor.cify("foo'/(0,0)"));
+	}
+
+	@Test
+	public void test_cify_tick_0_0() {
+		assertEquals("foo_p__0_0", StrategyCompletor.cify("foo'/(0,0)"));
+	}
+
+	@Test
+	public void test_cify_hyphen_underline_1_2() {
+		assertEquals("bar_foo___1_2", StrategyCompletor.cify("bar-foo_/(1,2)"));
+	}
+
 }

From karltk at strategoxt.org  Sun Dec 11 21:52:00 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:52:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23748 -
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli
Message-ID: <20111211205200.9B5537F8047@mx1.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:52:00 2011
New Revision: 23748
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23748&sc=1

Log:
Added support for remembing history across sessions, using the same file as the old stratego-shell.

Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:51:57 2011	(r23747)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:52:00 2011	(r23748)
@@ -5,6 +5,7 @@
  */
 package org.spoofax.interpreter.cli;
 
+import java.io.File;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.Collection;
@@ -72,7 +73,11 @@
 		if (toCompile.size() == 0) {
 			PrintWriter out = new PrintWriter(System.out);
 			ConsoleReader consoleReader = new ConsoleReader();
-
+			
+			File historyFile = new File(System.getProperty("user.home") + "/.stratego-shell-history");
+			if(historyFile.canRead() && historyFile.canWrite())
+				consoleReader.getHistory().setHistoryFile(historyFile);
+			
 			consoleReader.setBellEnabled(false);
 			consoleReader
 					.addCompletor(new StrategyCompletor(intp.getContext()));

From karltk at strategoxt.org  Sun Dec 11 21:52:07 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:52:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23751 - in
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src:
	main/java/org/spoofax/interpreter/cli
	main/stratego/spoofax/interpreter test/java/org/spoofax/interpreter
Message-ID: <20111211205207.2A8467F8047@mx1.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:52:06 2011
New Revision: 23751
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23751&sc=1

Log:
Added support for defining top-level rewrite rules.

Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:52:04 2011	(r23750)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:52:06 2011	(r23751)
@@ -176,8 +176,8 @@
 					}
 				} finally {
 					intp.setCurrent(old);
+					out.flush();
 				}
-				out.flush();
 			}
 		}
 	}

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str	Sun Dec 11 20:52:04 2011	(r23750)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str	Sun Dec 11 20:52:06 2011	(r23751)
@@ -15,6 +15,9 @@
     spx-shell-is-strategy : x at SDefT(_, _, _, _) -> x
     spx-shell-is-strategy : x at SDef(_, _, _) -> x
     spx-shell-is-strategy : x at SDefNoArgs(_, _) -> x
+    spx-shell-is-strategy : x at RDefT(_, _, _, _) -> x
+    spx-shell-is-strategy : x at RDef(_, _, _) -> x
+    spx-shell-is-strategy : x at RDefNoArgs(_, _) -> x
 
     spx-shell-frontend-for-expr = 
         pre-desugar
@@ -62,4 +65,4 @@
 
     pain = !SDefT("zz",[],[],CallT(SVar("inc"),[],[])) ; spx-shell-frontend
 
-    main = !SDef("zz",[DefaultVarDec("s")],CallNoArgs(SVar("s"))) ; spx-shell-frontend
\ No newline at end of file
+    main = !RDefT("R",[],[],Rule(Anno(Int("0"),Wld()),Anno(Int("1"),Op("Nil",[])),Id())) ; spx-shell-frontend
\ No newline at end of file

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:52:04 2011	(r23750)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/test/java/org/spoofax/interpreter/TestConcreteInterpreter.java	Sun Dec 11 20:52:06 2011	(r23751)
@@ -43,6 +43,15 @@
 	}
 
 	@Test
+	public void load_and_exec_a_rule_def() throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
+		ConcreteInterpreter ci = new ConcreteInterpreter();
+		ci.setCurrent(new StrategoInt(0, IStrategoTerm.IMMUTABLE));
+		ci.parseAndInvoke("R : 0 -> 1");
+		assertTrue(ci.parseAndInvoke("R"));
+		assertEquals(new StrategoInt(1, IStrategoTerm.IMMUTABLE), ci.current());
+	}
+
+	@Test
 	public void load_and_exec_a_higher_order_strategy_def() throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
 		ConcreteInterpreter ci = new ConcreteInterpreter();
 		ci.setCurrent(new StrategoInt(10, IStrategoTerm.IMMUTABLE));

From karltk at strategoxt.org  Sun Dec 11 21:52:04 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:52:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23750 -
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli
Message-ID: <20111211205204.ED2F52B800D@mx2.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:52:04 2011
New Revision: 23750
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23750&sc=1

Log:
Added red color to undefined strategy error. Current term now properly is restored if the parser/interpreter/compiler throws an error while trying to handle a line.

Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:52:02 2011	(r23749)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:52:04 2011	(r23750)
@@ -142,14 +142,13 @@
 				}
 				promptCount++;
 				IStrategoTerm old = intp.current();
+				lastWasGood = false;
 				try {
 					if (intp.parseAndInvoke(code)) {
 						lastWasGood = true;
 						ANSIBuffer ab = new ANSIBuffer();
 						out.println(colorize(ab, intp.current()));
-					} else {
-						lastWasGood = false;
-						intp.setCurrent(old);
+						old = intp.current();
 					}
 				} catch (UndefinedStrategyException e) {
 					handleUndefinedStrategyException(out, e);
@@ -175,6 +174,8 @@
 						handleUndefinedStrategyException(out,
 								(UndefinedStrategyException) e.getCause());
 					}
+				} finally {
+					intp.setCurrent(old);
 				}
 				out.flush();
 			}
@@ -236,7 +237,7 @@
 
 	private static void handleUndefinedStrategyException(PrintWriter out,
 			UndefinedStrategyException e) {
-		out.println("undefined strategy "
-				+ StrategyCompletor.uncify(e.getStrategyName()));
+		out.println(new ANSIBuffer().red("Undefined strategy "
+				+ StrategyCompletor.uncify(e.getStrategyName())));
 	}
 }
\ No newline at end of file

From karltk at strategoxt.org  Sun Dec 11 21:52:02 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 11 Dec 2011 20:52:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23749 -
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli
Message-ID: <20111211205202.C1DBA108C00A@mx3.tudelft.nl>

Author: karltk
Date: Sun Dec 11 20:52:02 2011
New Revision: 23749
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23749&sc=1

Log:
Clarified :arity in help page.

Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:52:00 2011	(r23748)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Sun Dec 11 20:52:02 2011	(r23749)
@@ -215,7 +215,7 @@
 		out.println(new ANSIBuffer().yellow(" :forget ").append("var1 var2 ... varN  -- forget specific global variables"));
 		out.println(new ANSIBuffer().yellow(" :forget ").append("strat/(n,m)         -- forget strategy with arity (n, m), e.g :forget zip/(1,0)"));
 		out.println(new ANSIBuffer().yellow(" :forget ").append("_                   -- forget all global variables"));
-		out.println(new ANSIBuffer().yellow(" :arity ").append("strategy             -- show arity for a strategy"));
+		out.println(new ANSIBuffer().yellow(" :arity ").append("strategy             -- show available arities for a strategy"));
 		out.println(new ANSIBuffer().yellow(" :strategies                 ").append("-- show all global strategies"));
 		out.println(new ANSIBuffer().yellow(" :vars                       ").append("-- show all global variables"));
 	}

From karltk at strategoxt.org  Mon Dec 12 12:12:09 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 11:12:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23752 -
	spoofax/trunk/spoofax/_attic/org.spoofax.interpreter
Message-ID: <20111212111209.8BF2ECC04D@mx4.tudelft.nl>

Author: karltk
Date: Mon Dec 12 11:12:09 2011
New Revision: 23752
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23752&sc=1

Log:
Temporarily added external project dependencies.

Modified:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath

Modified: spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath
==============================================================================
--- spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath	Sun Dec 11 20:52:06 2011	(r23751)
+++ spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/.classpath	Mon Dec 12 11:12:09 2011	(r23752)
@@ -1,8 +1,14 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="src" path="src/main/java"/>
+	<classpathentry kind="src" path="src/test/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.core"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.library.jsglr"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.jsglr"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
+	<classpathentry kind="lib" path="lib/jline-1.0.jar"/>
 	<classpathentry kind="output" path="bin"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.library.jsglr"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.jsglr"/>

From karltk at strategoxt.org  Mon Dec 12 12:15:45 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 11:15:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23753 - in
	spoofax/trunk/spoofax: _attic/org.spoofax.interpreter
	org.spoofax.interpreter
Message-ID: <20111212111545.1D32D2B800A@mx2.tudelft.nl>

Author: karltk
Date: Mon Dec 12 11:15:44 2011
New Revision: 23753
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23753&sc=1

Log:
Moved interpreter down from the attic, since it's now actually starting to work a bit.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter/
      - copied from r23752, spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/
Deleted:
   spoofax/trunk/spoofax/_attic/org.spoofax.interpreter/

From karltk at strategoxt.org  Mon Dec 12 12:17:00 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 11:17:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23754 -
	spoofax/trunk/spoofax/org.spoofax.interpreter
Message-ID: <20111212111700.B7E667F801E@mx1.tudelft.nl>

Author: karltk
Date: Mon Dec 12 11:17:00 2011
New Revision: 23754
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23754&sc=1

Log:
Removing old Ivy files.

Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter/build.ivy.xml
   spoofax/trunk/spoofax/org.spoofax.interpreter/ivy.xml

From karltk at strategoxt.org  Mon Dec 12 12:20:30 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 11:20:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23755 -
	spoofax/trunk/spoofax/org.spoofax.interpreter
Message-ID: <20111212112030.75D46108C033@mx3.tudelft.nl>

Author: karltk
Date: Mon Dec 12 11:20:29 2011
New Revision: 23755
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23755&sc=1

Log:
Fixed import duplicates.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter/.classpath

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter/.classpath	Mon Dec 12 11:17:00 2011	(r23754)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter/.classpath	Mon Dec 12 11:20:29 2011	(r23755)
@@ -5,14 +5,6 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.core"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.library.jsglr"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.jsglr"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
-	<classpathentry kind="lib" path="lib/jline-1.0.jar"/>
-	<classpathentry kind="output" path="bin"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.library.jsglr"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.jsglr"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
 	<classpathentry kind="lib" path="lib/jline-1.0.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

From karltk at strategoxt.org  Mon Dec 12 16:23:53 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 15:23:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23756 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr
Message-ID: <20111212152353.92AA5108C013@mx3.tudelft.nl>

Author: karltk
Date: Mon Dec 12 15:23:53 2011
New Revision: 23756
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23756&sc=1

Log:
Updated headers.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/Activator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_open_parsetable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_stratego.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_string_pt.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/Activator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/Activator.java	Mon Dec 12 11:20:29 2011	(r23755)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/Activator.java	Mon Dec 12 15:23:53 2011	(r23756)
@@ -1,3 +1,8 @@
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.library.jsglr;
 
 import org.eclipse.ui.plugin.AbstractUIPlugin;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRLibrary.java	Mon Dec 12 11:20:29 2011	(r23755)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRLibrary.java	Mon Dec 12 15:23:53 2011	(r23756)
@@ -1,3 +1,8 @@
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.library.jsglr;
 
 import java.util.HashMap;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRPrimitive.java	Mon Dec 12 11:20:29 2011	(r23755)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLRPrimitive.java	Mon Dec 12 15:23:53 2011	(r23756)
@@ -1,3 +1,8 @@
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.library.jsglr;
 
 import org.spoofax.interpreter.core.IContext;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_open_parsetable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_open_parsetable.java	Mon Dec 12 11:20:29 2011	(r23755)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_open_parsetable.java	Mon Dec 12 15:23:53 2011	(r23756)
@@ -1,3 +1,8 @@
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.library.jsglr;
 
 import java.util.WeakHashMap;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_stratego.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_stratego.java	Mon Dec 12 11:20:29 2011	(r23755)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_stratego.java	Mon Dec 12 15:23:53 2011	(r23756)
@@ -1,3 +1,8 @@
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.library.jsglr;
 
 import java.io.BufferedInputStream;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_string_pt.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_string_pt.java	Mon Dec 12 11:20:29 2011	(r23755)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_parse_string_pt.java	Mon Dec 12 15:23:53 2011	(r23756)
@@ -1,3 +1,8 @@
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.library.jsglr;
 
 import static org.spoofax.interpreter.core.Tools.asJavaInt;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java	Mon Dec 12 11:20:29 2011	(r23755)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_recover_parse_string.java	Mon Dec 12 15:23:53 2011	(r23756)
@@ -1,3 +1,8 @@
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.library.jsglr;
 
 import static org.spoofax.interpreter.core.Tools.asJavaString;

From karltk at strategoxt.org  Mon Dec 12 16:56:31 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 15:56:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23757 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.java
Message-ID: <20111212155631.DAB98CC0EE@mx4.tudelft.nl>

Author: karltk
Date: Mon Dec 12 15:56:31 2011
New Revision: 23757
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23757&sc=1

Log:
Starting new project for Java-specific foreign functions for the interpreter.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/

From karltk at strategoxt.org  Mon Dec 12 17:28:14 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 16:28:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23758 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.java: .
	.settings src src/main src/main/java src/main/java/org
	src/main/java/org/spoofax src/main/java/org...
Message-ID: <20111212162814.05213108C047@mx3.tudelft.nl>

Author: karltk
Date: Mon Dec 12 16:28:13 2011
New Revision: 23758
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23758&sc=1

Log:
Added some file channel and bytebuffer thunks for the Java foreign functions library. We should probably make these strj-style Strategies instead, eventually.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.project
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.settings/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.settings/org.eclipse.jdt.core.prefs
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/GenericWrappedTerm.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFILibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_close_file_channel_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_flip_byte_buffer_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_make_byte_buffer_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_open_file_channel_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_read_from_file_channel_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_write_to_file_channel_0_0.java

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.classpath	Mon Dec 12 16:28:13 2011	(r23758)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src/main/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.core"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
+	<classpathentry kind="output" path="build/classes"/>
+</classpath>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.project	Mon Dec 12 16:28:13 2011	(r23758)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.spoofax.interpreter.library.java</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.settings/org.eclipse.jdt.core.prefs	Mon Dec 12 16:28:13 2011	(r23758)
@@ -0,0 +1,12 @@
+#Mon Dec 12 16:50:14 CET 2011
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.6
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.6

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/GenericWrappedTerm.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/GenericWrappedTerm.java	Mon Dec 12 16:28:13 2011	(r23758)
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoAppl;
+import org.spoofax.terms.StrategoConstructor;
+import org.spoofax.terms.StrategoInt;
+
+class GenericWrappedTerm extends StrategoAppl {
+
+	private static final long serialVersionUID = -305297606780539827L;
+	
+	private final Object wrappee;
+
+	public GenericWrappedTerm(String name, Object object) {
+		super(new StrategoConstructor("FileChannel", 1),
+				new IStrategoTerm[] { new StrategoInt(
+						System.identityHashCode(object),
+						IStrategoTerm.IMMUTABLE) }, null,
+				IStrategoTerm.IMMUTABLE);
+		this.wrappee = object;
+	}
+
+	public Object getWrappee() {
+		return wrappee;
+	}
+
+	@Override
+	protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+		if (second == null)
+			return false;
+		if (!(second instanceof GenericWrappedTerm))
+			return false;
+		GenericWrappedTerm other = (GenericWrappedTerm) second;
+		if (wrappee == null) {
+			if (other.wrappee == null)
+				return true;
+			return false;
+		}
+		return wrappee.equals(other.wrappee);
+	}
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFILibrary.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFILibrary.java	Mon Dec 12 16:28:13 2011	(r23758)
@@ -0,0 +1,60 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.io.IOException;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+
+public class JFILibrary extends AbstractStrategoOperatorRegistry {
+	
+	public static final String REGISTRY_NAME = "JFI";
+	
+	public JFILibrary() {
+		add(new JFI_close_file_channel_0_0());
+		add(new JFI_flip_byte_buffer_0_0());
+		add(new JFI_make_byte_buffer_0_0());
+		add(new JFI_open_file_channel_0_0());
+		add(new JFI_read_from_file_channel_0_0());
+		add(new JFI_write_to_file_channel_0_0());
+	}
+	
+	@Override
+	public String getOperatorRegistryName() {
+		return REGISTRY_NAME;
+	}
+
+	public static boolean invokeExceptionHandler(IContext ctx, IOException e) {
+		throw new NotImplementedException();
+	}
+
+	@SuppressWarnings("unchecked")
+	public static <T> T fromTupleWrapped(IStrategoTerm current, int index, Class<T> clazz) {
+
+		if(!(current instanceof IStrategoTuple))
+			return null;
+		
+		IStrategoTuple tuple = (IStrategoTuple) current;
+		
+		if(index >= tuple.getSubtermCount())
+			return null;
+		
+		if(!(tuple.get(index) instanceof GenericWrappedTerm))
+			return null;
+		
+		GenericWrappedTerm wrapper = (GenericWrappedTerm) tuple.get(index);
+		
+		if(wrapper.getWrappee().getClass().equals(clazz))
+			return null;
+		
+		return (T) wrapper.getWrappee();
+		
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_close_file_channel_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_close_file_channel_0_0.java	Mon Dec 12 16:28:13 2011	(r23758)
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.io.IOException;
+import java.nio.channels.FileChannel;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFI_close_file_channel_0_0 extends AbstractPrimitive {
+	
+	public JFI_close_file_channel_0_0() {
+		super("JFI_close_file_channel", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext context, Strategy[] svars, IStrategoTerm[] tvars) {
+		
+		IStrategoTerm current = context.current();
+		
+		if(!(current instanceof GenericWrappedTerm))
+			return false;
+		
+		GenericWrappedTerm t = (GenericWrappedTerm) current;
+		
+		if(!(t.getWrappee() instanceof FileChannel))
+			return false;
+		
+		FileChannel c = (FileChannel) t.getWrappee();
+		
+		try {
+			c.close();
+		} catch (IOException e) {
+			JFILibrary.invokeExceptionHandler(context, e);
+		}
+		return true;
+	}
+
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_flip_byte_buffer_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_flip_byte_buffer_0_0.java	Mon Dec 12 16:28:13 2011	(r23758)
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.nio.ByteBuffer;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFI_flip_byte_buffer_0_0 extends AbstractPrimitive {
+
+	public JFI_flip_byte_buffer_0_0() {
+		super("JFI_flip_byte_buffer", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext context, Strategy[] svars, IStrategoTerm[] tvars) {
+
+		IStrategoTerm current = context.current();
+		
+		if (!(current instanceof GenericWrappedTerm))
+			return false;
+
+		GenericWrappedTerm wrapper = (GenericWrappedTerm) current;
+		
+		if(!(wrapper.getWrappee() instanceof ByteBuffer))
+			return true;
+		
+		ByteBuffer buf = (ByteBuffer) wrapper.getWrappee();
+		
+		buf.flip();
+		
+		return false;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_make_byte_buffer_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_make_byte_buffer_0_0.java	Mon Dec 12 16:28:13 2011	(r23758)
@@ -0,0 +1,60 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.nio.ByteBuffer;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+
+public class JFI_make_byte_buffer_0_0 extends AbstractPrimitive {
+
+
+	public JFI_make_byte_buffer_0_0() {
+		super("JFI_make_byte_buffer", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext context, Strategy[] svars, IStrategoTerm[] tvars) {
+
+		IStrategoTerm current = context.current();
+		
+		if (!(current instanceof IStrategoTuple))
+			return false;
+
+		IStrategoTuple t = (IStrategoTuple) current;
+
+		if (t.getSubtermCount() < 2)
+			return false;
+		if (t.getSubtermCount() < 2)
+			return false;
+
+		if (!(t.get(0) instanceof IStrategoInt))
+			return false;
+
+		IStrategoInt bufferSize = (IStrategoInt) t.get(0);
+
+		if (!(t.get(1) instanceof IStrategoInt))
+			return false;
+
+		IStrategoInt direct = (IStrategoInt) t.get(1);
+
+		ByteBuffer buf = null;
+		
+		if (direct.intValue() == 1)
+			buf = ByteBuffer.allocateDirect(bufferSize.intValue());
+		else
+			buf = ByteBuffer.allocate(bufferSize.intValue());
+		
+		context.setCurrent(new GenericWrappedTerm("ByteBuffer", buf));
+		return true;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_open_file_channel_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_open_file_channel_0_0.java	Mon Dec 12 16:28:13 2011	(r23758)
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+
+public class JFI_open_file_channel_0_0 extends AbstractPrimitive {
+	
+	public JFI_open_file_channel_0_0() {
+		super("JFI_open_file_channel", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext context, Strategy[] svars, IStrategoTerm[] tvars) {
+		
+		IStrategoTerm current = context.current();
+		
+		if(!(current instanceof IStrategoTuple))
+			return false;
+		
+		IStrategoTuple t = (IStrategoTuple) current;
+
+		if(t.getSubtermCount() < 2)
+			return false;
+		
+		if(!(t.get(0) instanceof IStrategoString))
+			return false;
+		
+		IStrategoString fileName = (IStrategoString) t.get(0);
+
+		if(!(t.get(1) instanceof IStrategoString))
+			return false;
+
+		IStrategoString mode = (IStrategoString) t.get(1);
+
+		try {
+			RandomAccessFile raf = new RandomAccessFile(new File(fileName.stringValue()), mode.stringValue());
+			context.setCurrent(new GenericWrappedTerm("FileChannel", raf.getChannel()));
+			return true;
+		} catch(IOException e) {
+			return JFILibrary.invokeExceptionHandler(context, e);
+		}
+	}
+
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_read_from_file_channel_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_read_from_file_channel_0_0.java	Mon Dec 12 16:28:13 2011	(r23758)
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.channels.FileChannel;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFI_read_from_file_channel_0_0 extends AbstractPrimitive {
+	
+	public JFI_read_from_file_channel_0_0() {
+		super("JFI_read_from_file_channel", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext context, Strategy[] svars, IStrategoTerm[] tvars) {
+
+		IStrategoTerm current = context.current();
+		
+		FileChannel c = JFILibrary.fromTupleWrapped(current, 0, FileChannel.class);
+		ByteBuffer buf = JFILibrary.fromTupleWrapped(current, 1, ByteBuffer.class);
+		
+		if(c == null || buf == null)
+			return false;
+		
+		try {
+			c.read(buf);
+		} catch(IOException e) {
+			return JFILibrary.invokeExceptionHandler(context, e);
+		}
+		
+		return true;
+	}
+
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_write_to_file_channel_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_write_to_file_channel_0_0.java	Mon Dec 12 16:28:13 2011	(r23758)
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.channels.FileChannel;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFI_write_to_file_channel_0_0 extends AbstractPrimitive {
+	
+	public JFI_write_to_file_channel_0_0() {
+		super("JFI_write_to_file_channel", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext context, Strategy[] svars, IStrategoTerm[] tvars) {
+		
+		IStrategoTerm current = context.current();
+		
+		FileChannel c = JFILibrary.fromTupleWrapped(current, 0, FileChannel.class);
+		ByteBuffer buf = JFILibrary.fromTupleWrapped(current, 1, ByteBuffer.class);
+		
+		if(c == null || buf == null)
+			return true;
+		
+		try {
+			c.write(buf);
+		} catch(IOException e) {
+			return JFILibrary.invokeExceptionHandler(context, e);
+		}
+		
+		return true;
+	}
+
+
+}

From karltk at strategoxt.org  Mon Dec 12 17:32:00 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 16:32:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23759 - in
	spoofax/trunk/spoofax:
	org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java
	org.spoofax.interpreter.library.java/src/main/java/org/spoofax...
Message-ID: <20111212163200.E223F2B8048@mx2.tudelft.nl>

Author: karltk
Date: Mon Dec 12 16:32:00 2011
New Revision: 23759
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23759&sc=1

Log:
Moving JFF library embedded in org.spoofax.interpreter.core to a separate FFI library, org.spoofax.interpreter.library.java.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_find_class.java   (props changed)
      - copied unchanged from r23758, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_find_class.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_find_class.java

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_find_class.java (from r23758, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_find_class.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_find_class.java	Mon Dec 12 16:32:00 2011	(r23759, copy of r23758, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_find_class.java)
@@ -0,0 +1,36 @@
+package org.spoofax.interpreter.library.java;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFF_find_class extends AbstractPrimitive {
+
+	JFF_find_class() {
+		super("JFF_find_class", 0, 1);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		
+		if (!Tools.isTermString(tvars[0]))
+            return false;
+		
+		
+		try {
+			Class<?> c = Class.forName(Tools.asJavaString(tvars[0]));
+			JFFLibrary lib = JFFLibrary.instance(env);
+			env.setCurrent(lib.wrapObject(c));
+		} catch (ClassNotFoundException e) {
+			return false;
+		}
+		
+		
+		return true;
+	}
+
+}

From karltk at strategoxt.org  Mon Dec 12 17:32:57 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 16:32:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23760 - in
	spoofax/trunk/spoofax:
	org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java
	org.spoofax.interpreter.library.java/src/main/java/org/spoofax...
Message-ID: <20111212163257.808E8108C045@mx3.tudelft.nl>

Author: karltk
Date: Mon Dec 12 16:32:57 2011
New Revision: 23760
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23760&sc=1

Log:
Moving JFF library embedded in org.spoofax.interpreter.core to a separate FFI library, org.spoofax.interpreter.library.java.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_find_primitive_type.java   (props changed)
      - copied unchanged from r23759, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_find_primitive_type.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_find_primitive_type.java

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_find_primitive_type.java (from r23759, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_find_primitive_type.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_find_primitive_type.java	Mon Dec 12 16:32:57 2011	(r23760, copy of r23759, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_find_primitive_type.java)
@@ -0,0 +1,47 @@
+package org.spoofax.interpreter.library.java;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFF_find_primitive_type extends AbstractPrimitive {
+
+	protected JFF_find_primitive_type() {
+		super("JFF_find_primitive_type", 0, 1);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		if(!Tools.isTermString(tvars[0]))
+			return false;
+		
+		JFFLibrary lib = JFFLibrary.instance(env);
+		
+		final String typeName = Tools.asJavaString(tvars[0]);
+		
+		if("int".equals(typeName)) {
+			env.setCurrent(lib.wrapObject(Integer.TYPE));
+		} else if("float".equals(typeName)) {
+			env.setCurrent(lib.wrapObject(Float.TYPE));
+		} else if("double".equals(typeName)) {
+			env.setCurrent(lib.wrapObject(Double.TYPE));
+		} else if("char".equals(typeName)) {
+			env.setCurrent(lib.wrapObject(Character.TYPE));
+		} else if("byte".equals(typeName)) {
+			env.setCurrent(lib.wrapObject(Byte.TYPE));
+		} else if("long".equals(typeName)) {
+			env.setCurrent(lib.wrapObject(Long.TYPE));
+		} else if("short".equals(typeName)) {
+			env.setCurrent(lib.wrapObject(Short.TYPE));
+		} else {
+			return false;
+		}
+			
+		return true;
+	}
+
+}

From karltk at strategoxt.org  Mon Dec 12 17:33:15 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 16:33:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23761 - in
	spoofax/trunk/spoofax:
	org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java
	org.spoofax.interpreter.library.java/src/main/java/org/spoofax...
Message-ID: <20111212163315.D177A7F807A@mx1.tudelft.nl>

Author: karltk
Date: Mon Dec 12 16:33:15 2011
New Revision: 23761
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23761&sc=1

Log:
Moving JFF library embedded in org.spoofax.interpreter.core to a separate FFI library, org.spoofax.interpreter.library.java.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_get_constructor.java   (props changed)
      - copied unchanged from r23760, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_get_constructor.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_get_constructor.java

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_get_constructor.java (from r23760, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_get_constructor.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_get_constructor.java	Mon Dec 12 16:33:15 2011	(r23761, copy of r23760, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_get_constructor.java)
@@ -0,0 +1,60 @@
+package org.spoofax.interpreter.library.java;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFF_get_constructor extends AbstractPrimitive {
+
+	protected JFF_get_constructor() {
+		super("JFF_get_constructor", 0, 2);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		
+		if(!Tools.isTermAppl(tvars[0]))
+			return false;
+		if(!Tools.isTermList(tvars[1]))
+			return false;
+		
+		JFFLibrary lib = JFFLibrary.instance(env);
+		
+		Object o = lib.unwrapObject((IStrategoAppl)tvars[0]);
+		
+		if(o == null || !(o instanceof Class))
+			return false;
+		
+		Class<?> c = (Class<?>)o;
+		
+		IStrategoTerm[] ls = ((IStrategoList)tvars[1]).getAllSubterms(); 
+		Class<?>[] args = new Class<?>[ls.length];
+		for(int i = 0; i < ls.length; i++) {
+			 Object x = lib.unpackTerm(ls[i]);
+			 if(x instanceof Class)
+				 args[i] = (Class<?>) x;
+			 else
+				 return false;
+		}
+		
+		try {
+			Object x = c.getConstructor(args);
+			env.setCurrent(lib.wrapObject(x));
+		} catch (SecurityException e) {
+			e.printStackTrace();
+			return false;
+		} catch (NoSuchMethodException e) {
+			e.printStackTrace();
+			return false;
+		}
+		
+		return true;
+	}
+
+}

From karltk at strategoxt.org  Mon Dec 12 17:33:35 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 16:33:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23762 - in
	spoofax/trunk/spoofax:
	org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java
	org.spoofax.interpreter.library.java/src/main/java/org/spoofax...
Message-ID: <20111212163335.1BFF47F8073@mx1.tudelft.nl>

Author: karltk
Date: Mon Dec 12 16:33:34 2011
New Revision: 23762
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23762&sc=1

Log:
Moving JFF library embedded in org.spoofax.interpreter.core to a separate FFI library, org.spoofax.interpreter.library.java.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_get_method.java   (props changed)
      - copied unchanged from r23761, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_get_method.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_get_method.java

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_get_method.java (from r23761, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_get_method.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_get_method.java	Mon Dec 12 16:33:34 2011	(r23762, copy of r23761, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_get_method.java)
@@ -0,0 +1,60 @@
+package org.spoofax.interpreter.library.java;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFF_get_method extends AbstractPrimitive {
+
+	protected JFF_get_method() {
+		super("JFF_get_method", 0, 3);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		
+		if(!Tools.isTermString(tvars[0]))
+			return false;
+		if(!Tools.isTermAppl(tvars[0]))
+			return false;
+		if(!Tools.isTermList(tvars[1]))
+			return false;
+		
+		JFFLibrary lib = JFFLibrary.instance(env);
+		
+		Object o = lib.unwrapObject((IStrategoAppl)tvars[1]);
+		if(o == null || !(o instanceof Class))
+			return false;
+		
+		Class<?> clazz = (Class<?>)o;
+		
+		IStrategoTerm[] ls = ((IStrategoList)tvars[2]).getAllSubterms();
+		Class<?>[] argtypes = new Class<?>[ls.length];
+		for(int i = 0; i < ls.length; i++) {
+			Object x = lib.unpackTerm(ls[i]);
+			if(!(x instanceof Class))
+				return false;
+			argtypes[i] = (Class<?>)x;
+		}
+
+		try {
+			Object x = clazz.getMethod(Tools.asJavaString(tvars[0]), argtypes);
+			env.setCurrent(lib.wrapObject(x)); 
+		} catch (SecurityException e) {
+			e.printStackTrace();
+			return false;
+		} catch (NoSuchMethodException e) {
+			e.printStackTrace();
+			return false;
+		}
+		
+		return true;
+	}
+
+}

From karltk at strategoxt.org  Mon Dec 12 17:33:51 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 16:33:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23763 - in
	spoofax/trunk/spoofax:
	org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java
	org.spoofax.interpreter.library.java/src/main/java/org/spoofax...
Message-ID: <20111212163351.221F42B8046@mx2.tudelft.nl>

Author: karltk
Date: Mon Dec 12 16:33:50 2011
New Revision: 23763
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23763&sc=1

Log:
Moving JFF library embedded in org.spoofax.interpreter.core to a separate FFI library, org.spoofax.interpreter.library.java.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_invoke_method.java   (props changed)
      - copied unchanged from r23762, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_invoke_method.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_invoke_method.java

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_invoke_method.java (from r23762, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_invoke_method.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_invoke_method.java	Mon Dec 12 16:33:50 2011	(r23763, copy of r23762, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_invoke_method.java)
@@ -0,0 +1,69 @@
+package org.spoofax.interpreter.library.java;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFF_invoke_method extends AbstractPrimitive {
+
+	JFF_invoke_method() {
+		super("JFF_invoke_method", 0, 3);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+	throws InterpreterException {
+		
+		if(!Tools.isTermAppl(tvars[0]))
+			return false;
+		if(!Tools.isTermAppl(tvars[1]))
+			return false;
+		if(!Tools.isTermList(tvars[2]))
+			return false;
+
+		JFFLibrary lib = JFFLibrary.instance(env);
+		
+		Object callable = lib.unwrapObject((IStrategoAppl)tvars[0]);
+		Object obj = lib.unwrapObject((IStrategoAppl)tvars[0]);
+		
+		if(callable == null || obj == null)
+			return false;
+		
+		if(!(callable instanceof Method))
+			return false;
+		
+		IStrategoList ls = (IStrategoList)tvars[2];
+		Object[] args = new Object[ls.size()];
+		int idx = 0;
+		for(IStrategoTerm t : ls.getAllSubterms()) {
+			args[idx++] = lib.unpackTerm(t);
+		}
+
+		Method meth = (Method) callable;
+		
+		Object o;
+		try {
+			o = meth.invoke(obj, args);
+		} catch (IllegalArgumentException e) {
+			e.printStackTrace();
+			return false;
+		} catch (IllegalAccessException e) {
+			e.printStackTrace();
+			return false;
+		} catch (InvocationTargetException e) {
+			e.printStackTrace();
+			return false;
+		}
+
+		env.setCurrent(lib.wrapObject(o));
+		return true;
+		}
+}

From karltk at strategoxt.org  Mon Dec 12 17:34:05 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 16:34:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23764 - in
	spoofax/trunk/spoofax:
	org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java
	org.spoofax.interpreter.library.java/src/main/java/org/spoofax...
Message-ID: <20111212163405.D0325108C047@mx3.tudelft.nl>

Author: karltk
Date: Mon Dec 12 16:34:05 2011
New Revision: 23764
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23764&sc=1

Log:
Moving JFF library embedded in org.spoofax.interpreter.core to a separate FFI library, org.spoofax.interpreter.library.java.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_new_instance.java   (props changed)
      - copied unchanged from r23763, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_new_instance.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_new_instance.java

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_new_instance.java (from r23763, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_new_instance.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_new_instance.java	Mon Dec 12 16:34:05 2011	(r23764, copy of r23763, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/JFF_new_instance.java)
@@ -0,0 +1,71 @@
+package org.spoofax.interpreter.library.java;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFF_new_instance extends AbstractPrimitive {
+
+	JFF_new_instance() {
+			super("JFF_new_instance", 0, 2);
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		
+		if(!Tools.isTermAppl(tvars[0]))
+			return false;
+		if(!Tools.isTermList(tvars[1]))
+			return false;
+
+		JFFLibrary lib = JFFLibrary.instance(env);
+		
+		Object callable = lib.unwrapObject((IStrategoAppl)tvars[0]);
+		Object obj = lib.unwrapObject((IStrategoAppl)tvars[0]);
+		
+		if(callable == null || obj == null)
+			return false;
+		
+		if(!(callable instanceof Constructor))
+			return false;
+		
+		IStrategoList ls = (IStrategoList)tvars[1];
+		Object[] args = new Object[ls.size()];
+		int idx = 0;
+		for(IStrategoTerm t : ls.getAllSubterms()) {
+			args[idx++] = lib.unpackTerm(t);
+		}
+
+		Constructor<?> ctor = (Constructor<?>) callable;
+		
+		Object o;
+		try {
+			o = ctor.newInstance(args);
+		} catch (IllegalArgumentException e) {
+			e.printStackTrace();
+			return false;
+		} catch (InstantiationException e) {
+			e.printStackTrace();
+			return false;
+		} catch (IllegalAccessException e) {
+			e.printStackTrace();
+			return false;
+		} catch (InvocationTargetException e) {
+			e.printStackTrace();
+			return false;
+		}
+
+		env.setCurrent(lib.wrapObject(o));
+		return true;
+	}
+
+}

From karltk at strategoxt.org  Mon Dec 12 17:39:20 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 16:39:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23765 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter:
	core library/java
Message-ID: <20111212163920.24F582B8044@mx2.tudelft.nl>

Author: karltk
Date: Mon Dec 12 16:39:19 2011
New Revision: 23765
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23765&sc=1

Log:
Removing the JFF library from .core. It is not in .library.java.

Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/java/
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/BindingInfo.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/BindingInfo.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/BindingInfo.java	Mon Dec 12 16:34:05 2011	(r23764)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/BindingInfo.java	Mon Dec 12 16:39:19 2011	(r23765)
@@ -1,9 +1,7 @@
 /*
- * Created on 30.jul.2005
- *
- * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.core;
 

From karltk at strategoxt.org  Mon Dec 12 17:40:05 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 16:40:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23766 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
Message-ID: <20111212164005.76B58108C05F@mx3.tudelft.nl>

Author: karltk
Date: Mon Dec 12 16:40:05 2011
New Revision: 23766
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23766&sc=1

Log:
Forgot a few references when removing the JFF library.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java	Mon Dec 12 16:39:19 2011	(r23765)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java	Mon Dec 12 16:40:05 2011	(r23766)
@@ -18,7 +18,6 @@
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.IOperatorRegistry;
-import org.spoofax.interpreter.library.java.JFFLibrary;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Match.Binding;
 import org.spoofax.interpreter.stratego.Match.Results;
@@ -62,10 +61,9 @@
         varScope = new VarScope(null);
         strategoSignature = new StrategoSignature(programFactory);
         operatorRegistries = new LinkedHashMap<String, IOperatorRegistry>();
-        
+
         if (!skipStandardLibraries) {
            addOperatorRegistry(new SSLLibrary());
-           addOperatorRegistry(new JFFLibrary(factory));
            stackTracer.setIOAgent(getIOAgent());
         }
     }

From karltk at strategoxt.org  Mon Dec 12 17:42:29 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 16:42:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23767 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java
Message-ID: <20111212164229.06C4D7F8065@mx1.tudelft.nl>

Author: karltk
Date: Mon Dec 12 16:42:28 2011
New Revision: 23767
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23767&sc=1

Log:
Normalized registry name on JFF.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFFLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_close_file_channel_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_flip_byte_buffer_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_make_byte_buffer_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_open_file_channel_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_read_from_file_channel_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_write_to_file_channel_0_0.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFILibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_close_file_channel_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_flip_byte_buffer_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_make_byte_buffer_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_open_file_channel_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_read_from_file_channel_0_0.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFI_write_to_file_channel_0_0.java

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFFLibrary.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFFLibrary.java	Mon Dec 12 16:42:28 2011	(r23767)
@@ -0,0 +1,129 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import static org.spoofax.terms.Term.isTermInt;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoReal;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+public class JFFLibrary extends AbstractStrategoOperatorRegistry {
+	
+	public static final String REGISTRY_NAME = "JFI";
+	
+	private Map<Integer, Object> objectWrappers;
+	private int objectCounter;
+	private IStrategoConstructor objWrapCtor;
+	private ITermFactory termFactory; 
+
+	
+	public JFFLibrary() {
+		add(new JFF_close_file_channel_0_0());
+		add(new JFF_flip_byte_buffer_0_0());
+		add(new JFF_make_byte_buffer_0_0());
+		add(new JFF_open_file_channel_0_0());
+		add(new JFF_read_from_file_channel_0_0());
+		add(new JFF_write_to_file_channel_0_0());
+		add(new JFF_find_class());
+		add(new JFF_find_primitive_type());
+		add(new JFF_get_constructor());
+		add(new JFF_get_method());
+		add(new JFF_invoke_method());
+		add(new JFF_new_instance());
+		
+		init();
+	}
+	
+	@Override
+	public String getOperatorRegistryName() {
+		return REGISTRY_NAME;
+	}
+
+	public static boolean invokeExceptionHandler(IContext ctx, IOException e) {
+		throw new NotImplementedException();
+	}
+
+	@SuppressWarnings("unchecked")
+	public static <T> T fromTupleWrapped(IStrategoTerm current, int index, Class<T> clazz) {
+
+		if(!(current instanceof IStrategoTuple))
+			return null;
+		
+		IStrategoTuple tuple = (IStrategoTuple) current;
+		
+		if(index >= tuple.getSubtermCount())
+			return null;
+		
+		if(!(tuple.get(index) instanceof GenericWrappedTerm))
+			return null;
+		
+		GenericWrappedTerm wrapper = (GenericWrappedTerm) tuple.get(index);
+		
+		if(wrapper.getWrappee().getClass().equals(clazz))
+			return null;
+		
+		return (T) wrapper.getWrappee();
+		
+	}
+	
+	public void init() {
+		
+		objectCounter = 0;
+		if(objectWrappers != null) {
+			objectWrappers.clear();
+		} else {
+			objectWrappers = new HashMap<Integer, Object>();
+		}
+		
+		objWrapCtor = termFactory.makeConstructor("ObjWrap", 1);
+	}
+	
+    public static JFFLibrary instance(IContext env) {
+        return (JFFLibrary)env.getOperatorRegistry(REGISTRY_NAME);
+    }
+
+	public IStrategoTerm wrapObject(Object obj) {
+		int idx = objectCounter++;
+		objectWrappers.put(idx, obj);
+		return termFactory.makeAppl(objWrapCtor, termFactory.makeInt(idx));
+	}
+
+	public Object unwrapObject(IStrategoAppl term) {
+		IStrategoTerm t = term.getSubterm(0);
+		if(!(isTermInt(t)))
+			return null;
+		return objectWrappers.get(((IStrategoInt)t).intValue());
+	}
+
+
+	public Object unpackTerm(IStrategoTerm term) {
+		switch(term.getTermType()) {
+		case IStrategoTerm.INT:
+			return ((IStrategoInt)term).intValue();
+		case IStrategoTerm.REAL:
+			return ((IStrategoReal)term).realValue();
+		case IStrategoTerm.STRING:
+			return ((IStrategoString)term).stringValue();
+		case IStrategoTerm.APPL:
+			return unwrapObject((IStrategoAppl)term);
+		default:
+			return null;
+		}
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_close_file_channel_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_close_file_channel_0_0.java	Mon Dec 12 16:42:28 2011	(r23767)
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.io.IOException;
+import java.nio.channels.FileChannel;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFF_close_file_channel_0_0 extends AbstractPrimitive {
+	
+	public JFF_close_file_channel_0_0() {
+		super("JFI_close_file_channel", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext context, Strategy[] svars, IStrategoTerm[] tvars) {
+		
+		IStrategoTerm current = context.current();
+		
+		if(!(current instanceof GenericWrappedTerm))
+			return false;
+		
+		GenericWrappedTerm t = (GenericWrappedTerm) current;
+		
+		if(!(t.getWrappee() instanceof FileChannel))
+			return false;
+		
+		FileChannel c = (FileChannel) t.getWrappee();
+		
+		try {
+			c.close();
+		} catch (IOException e) {
+			JFFLibrary.invokeExceptionHandler(context, e);
+		}
+		return true;
+	}
+
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_flip_byte_buffer_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_flip_byte_buffer_0_0.java	Mon Dec 12 16:42:28 2011	(r23767)
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.nio.ByteBuffer;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFF_flip_byte_buffer_0_0 extends AbstractPrimitive {
+
+	public JFF_flip_byte_buffer_0_0() {
+		super("JFI_flip_byte_buffer", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext context, Strategy[] svars, IStrategoTerm[] tvars) {
+
+		IStrategoTerm current = context.current();
+		
+		if (!(current instanceof GenericWrappedTerm))
+			return false;
+
+		GenericWrappedTerm wrapper = (GenericWrappedTerm) current;
+		
+		if(!(wrapper.getWrappee() instanceof ByteBuffer))
+			return true;
+		
+		ByteBuffer buf = (ByteBuffer) wrapper.getWrappee();
+		
+		buf.flip();
+		
+		return false;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_make_byte_buffer_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_make_byte_buffer_0_0.java	Mon Dec 12 16:42:28 2011	(r23767)
@@ -0,0 +1,60 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.nio.ByteBuffer;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+
+public class JFF_make_byte_buffer_0_0 extends AbstractPrimitive {
+
+
+	public JFF_make_byte_buffer_0_0() {
+		super("JFI_make_byte_buffer", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext context, Strategy[] svars, IStrategoTerm[] tvars) {
+
+		IStrategoTerm current = context.current();
+		
+		if (!(current instanceof IStrategoTuple))
+			return false;
+
+		IStrategoTuple t = (IStrategoTuple) current;
+
+		if (t.getSubtermCount() < 2)
+			return false;
+		if (t.getSubtermCount() < 2)
+			return false;
+
+		if (!(t.get(0) instanceof IStrategoInt))
+			return false;
+
+		IStrategoInt bufferSize = (IStrategoInt) t.get(0);
+
+		if (!(t.get(1) instanceof IStrategoInt))
+			return false;
+
+		IStrategoInt direct = (IStrategoInt) t.get(1);
+
+		ByteBuffer buf = null;
+		
+		if (direct.intValue() == 1)
+			buf = ByteBuffer.allocateDirect(bufferSize.intValue());
+		else
+			buf = ByteBuffer.allocate(bufferSize.intValue());
+		
+		context.setCurrent(new GenericWrappedTerm("ByteBuffer", buf));
+		return true;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_open_file_channel_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_open_file_channel_0_0.java	Mon Dec 12 16:42:28 2011	(r23767)
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+
+public class JFF_open_file_channel_0_0 extends AbstractPrimitive {
+	
+	public JFF_open_file_channel_0_0() {
+		super("JFI_open_file_channel", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext context, Strategy[] svars, IStrategoTerm[] tvars) {
+		
+		IStrategoTerm current = context.current();
+		
+		if(!(current instanceof IStrategoTuple))
+			return false;
+		
+		IStrategoTuple t = (IStrategoTuple) current;
+
+		if(t.getSubtermCount() < 2)
+			return false;
+		
+		if(!(t.get(0) instanceof IStrategoString))
+			return false;
+		
+		IStrategoString fileName = (IStrategoString) t.get(0);
+
+		if(!(t.get(1) instanceof IStrategoString))
+			return false;
+
+		IStrategoString mode = (IStrategoString) t.get(1);
+
+		try {
+			RandomAccessFile raf = new RandomAccessFile(new File(fileName.stringValue()), mode.stringValue());
+			context.setCurrent(new GenericWrappedTerm("FileChannel", raf.getChannel()));
+			return true;
+		} catch(IOException e) {
+			return JFFLibrary.invokeExceptionHandler(context, e);
+		}
+	}
+
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_read_from_file_channel_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_read_from_file_channel_0_0.java	Mon Dec 12 16:42:28 2011	(r23767)
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.channels.FileChannel;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFF_read_from_file_channel_0_0 extends AbstractPrimitive {
+	
+	public JFF_read_from_file_channel_0_0() {
+		super("JFI_read_from_file_channel", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext context, Strategy[] svars, IStrategoTerm[] tvars) {
+
+		IStrategoTerm current = context.current();
+		
+		FileChannel c = JFFLibrary.fromTupleWrapped(current, 0, FileChannel.class);
+		ByteBuffer buf = JFFLibrary.fromTupleWrapped(current, 1, ByteBuffer.class);
+		
+		if(c == null || buf == null)
+			return false;
+		
+		try {
+			c.read(buf);
+		} catch(IOException e) {
+			return JFFLibrary.invokeExceptionHandler(context, e);
+		}
+		
+		return true;
+	}
+
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_write_to_file_channel_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFF_write_to_file_channel_0_0.java	Mon Dec 12 16:42:28 2011	(r23767)
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.java;
+
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.channels.FileChannel;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JFF_write_to_file_channel_0_0 extends AbstractPrimitive {
+	
+	public JFF_write_to_file_channel_0_0() {
+		super("JFI_write_to_file_channel", 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext context, Strategy[] svars, IStrategoTerm[] tvars) {
+		
+		IStrategoTerm current = context.current();
+		
+		FileChannel c = JFFLibrary.fromTupleWrapped(current, 0, FileChannel.class);
+		ByteBuffer buf = JFFLibrary.fromTupleWrapped(current, 1, ByteBuffer.class);
+		
+		if(c == null || buf == null)
+			return true;
+		
+		try {
+			c.write(buf);
+		} catch(IOException e) {
+			return JFFLibrary.invokeExceptionHandler(context, e);
+		}
+		
+		return true;
+	}
+
+
+}

From karltk at strategoxt.org  Mon Dec 12 18:03:06 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 17:03:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23768 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/stratego:
	. spoofax spoofax/bindings
Message-ID: <20111212170306.CB5C4108C088@mx3.tudelft.nl>

Author: karltk
Date: Mon Dec 12 17:03:06 2011
New Revision: 23768
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23768&sc=1

Log:
Added strategies for the FFI calls.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/stratego/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/stratego/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/stratego/spoofax/bindings/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/stratego/spoofax/bindings/java.str

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/stratego/spoofax/bindings/java.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/stratego/spoofax/bindings/java.str	Mon Dec 12 17:03:06 2011	(r23768)
@@ -0,0 +1,20 @@
+/*
+ * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1 
+ */
+module spoofax/bindings/java
+
+strategies
+
+    /* @type String -> Class */
+    java-find-class = ?name ; prim("JFF_find_class", name)
+
+    /* @type Constructor, List(Object) -> Object */
+    java-new-instance = ?(ctor, args) ; prim("JFF_new_instance", ctor, args)
+
+    /* @type Object, List(Class) -> Constructor */
+    java-get-constructor = ?(obj, argtypes) ; prim("JFF_get_constructor", obj, argtypes)
+
+    /* @type Method, Object, List(Object) -> Object */
+    java-invoke-method = ?(meth, obj, args) ; prim("JFF_invoke_method", meth, obj, args)

From karltk at strategoxt.org  Mon Dec 12 21:50:19 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 12 Dec 2011 20:50:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23769 - in
	spoofax/trunk/spoofax: org.spoofax.interpreter.library.jline
	org.spoofax.interpreter.library.jline/lib
	org.spoofax.interpreter/lib
Message-ID: <20111212205019.69F882B8018@mx2.tudelft.nl>

Author: karltk
Date: Mon Dec 12 20:50:19 2011
New Revision: 23769
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23769&sc=1

Log:
Moved jline jar (which shouldn't be in the repo in the first place) to a separate project, .library.jline.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/lib/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/lib/jline-1.0.jar
      - copied unchanged from r23767, spoofax/trunk/spoofax/org.spoofax.interpreter/lib/jline-1.0.jar
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter/lib/jline-1.0.jar

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/lib/jline-1.0.jar (from r23767, spoofax/trunk/spoofax/org.spoofax.interpreter/lib/jline-1.0.jar)
==============================================================================
Binary file (source and/or target). No diff available.

From karltk at strategoxt.org  Wed Dec 14 15:00:56 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 14 Dec 2011 14:00:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23770 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline:
	. .settings src src/main src/main/java src/main/java/org
	src/main/java/org/spoofax src/main/java/or...
Message-ID: <20111214140056.7D31A7F809E@mx1.tudelft.nl>

Author: karltk
Date: Wed Dec 14 14:00:55 2011
New Revision: 23770
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23770&sc=1

Log:
Initial Java code for jline bindings; work in progress.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.project
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.settings/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.settings/org.eclipse.jdt.core.prefs
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/bindings/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/bindings/jline.str

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath	Wed Dec 14 14:00:55 2011	(r23770)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src/main/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.core"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
+	<classpathentry kind="lib" path="lib/jline-1.0.jar"/>
+	<classpathentry kind="output" path="build/classes"/>
+</classpath>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.project	Wed Dec 14 14:00:55 2011	(r23770)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.spoofax.interpreter.library.jline</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.settings/org.eclipse.jdt.core.prefs	Wed Dec 14 14:00:55 2011	(r23770)
@@ -0,0 +1,12 @@
+#Mon Dec 12 15:49:12 CET 2011
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.6
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.6

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java	Wed Dec 14 14:00:55 2011	(r23770)
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.jline;
+
+import java.io.IOException;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+
+public class JLINELibrary extends AbstractStrategoOperatorRegistry {
+
+	public static final String REGISTRY_NAME = "JLINE";
+
+	public JLINELibrary() {
+		add(new JLINE_make_console());
+	}
+	
+	@Override
+	public String getOperatorRegistryName() {
+		return REGISTRY_NAME;
+	}
+
+	public static void reportException(IContext env, IOException e) {
+		// TODO Auto-generated method stub
+		
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java	Wed Dec 14 14:00:55 2011	(r23770)
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.jline;
+
+import java.io.IOException;
+
+import jline.ConsoleReader;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JLINE_make_console extends AbstractPrimitive {
+
+	public JLINE_make_console() {
+		super("JLINE_make_console", 0, 0);
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		try {
+			new ConsoleReader();
+		} catch(IOException e) {
+			JLINELibrary.reportException(env, e);
+			return false;
+		}
+
+		return false;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/bindings/jline.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/bindings/jline.str	Wed Dec 14 14:00:55 2011	(r23770)
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+module spoofax/bindings/jline
+signature
+  constructors
+      Red     : String -> ANSI
+      Green   : String -> ANSI
+      Blue    : String -> ANSI
+      Bold    : String -> ANSI
+      Cyan    : String -> ANSI
+      Magenta : String -> ANSI
+      Yellow  : String -> ANSI
+
+strategies
+
+    /** @type Console -> Console */
+    jline-repl(exec) = ?console ; prim("JLINE_repl", exec|console)
+
+    /** @type _ -> Console */
+    jline-make-console(completer) = prim("JLINE_make_console", completer|)
+
+    /** @type Console -> Console */
+    jline-clear-screen = ?console ; prim("JLINE_clear_screen", console)
+
+    /** @type List(String | ANSI) -> _ */
+    jline-println(|console) = ?stuff ; prim("JLINE_println", console, stuff) 

From karltk at strategoxt.org  Wed Dec 14 15:00:59 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 14 Dec 2011 14:00:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23771 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline:
	. src/main/java/org/spoofax/interpreter/library/jline
Message-ID: <20111214140059.7EC647F80B1@mx1.tudelft.nl>

Author: karltk
Date: Wed Dec 14 14:00:59 2011
New Revision: 23771
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23771&sc=1

Log:
Added dependency to .library.java for generic wrap/unwrap code. Fixed make_console to use this. Added clear_console.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_clear_screen.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath	Wed Dec 14 14:00:55 2011	(r23770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath	Wed Dec 14 14:00:59 2011	(r23771)
@@ -5,5 +5,6 @@
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.core"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
 	<classpathentry kind="lib" path="lib/jline-1.0.jar"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.library.java"/>
 	<classpathentry kind="output" path="build/classes"/>
 </classpath>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_clear_screen.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_clear_screen.java	Wed Dec 14 14:00:59 2011	(r23771)
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.jline;
+
+import java.io.IOException;
+
+import jline.ConsoleReader;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.java.JFFLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JLINE_clear_screen extends AbstractPrimitive {
+
+	public JLINE_clear_screen() {
+		super("JLINE_clear_screen", 0, 0);
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		try {
+			ConsoleReader consoleReader = JFFLibrary.unwrap(tvars, 0, ConsoleReader.class);
+			consoleReader.clearScreen();
+		} catch(IOException e) {
+			JLINELibrary.reportException(env, e);
+			return false;
+		}
+
+		return false;
+	}
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java	Wed Dec 14 14:00:55 2011	(r23770)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java	Wed Dec 14 14:00:59 2011	(r23771)
@@ -12,6 +12,7 @@
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.java.GenericWrappedTerm;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
@@ -25,7 +26,7 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 			throws InterpreterException {
 		try {
-			new ConsoleReader();
+			env.setCurrent(new GenericWrappedTerm("ConsoleReader", new ConsoleReader()));
 		} catch(IOException e) {
 			JLINELibrary.reportException(env, e);
 			return false;

From karltk at strategoxt.org  Wed Dec 14 15:01:03 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 14 Dec 2011 14:01:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23772 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline:
	. src/main/java/org/spoofax/interpreter/library/jline
	src/main/stratego/spoofax/bindings src/test s...
Message-ID: <20111214140103.A8DBCCC153@mx4.tudelft.nl>

Author: karltk
Date: Wed Dec 14 14:01:03 2011
New Revision: 23772
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23772&sc=1

Log:
Added first cut of JLINE_repl. Started adding some smoke tests for this. Work in progress.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_repl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/bindings/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/bindings/test-jline.str
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_clear_screen.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/bindings/jline.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath	Wed Dec 14 14:00:59 2011	(r23771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath	Wed Dec 14 14:01:03 2011	(r23772)
@@ -1,10 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="src" path="src/main/java"/>
+	<classpathentry kind="src" path="src/test/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.core"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
 	<classpathentry kind="lib" path="lib/jline-1.0.jar"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.library.java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
 	<classpathentry kind="output" path="build/classes"/>
 </classpath>

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java	Wed Dec 14 14:00:59 2011	(r23771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java	Wed Dec 14 14:01:03 2011	(r23772)
@@ -16,6 +16,8 @@
 
 	public JLINELibrary() {
 		add(new JLINE_make_console());
+		add(new JLINE_clear_screen());
+		add(new JLINE_repl());
 	}
 	
 	@Override
@@ -23,9 +25,8 @@
 		return REGISTRY_NAME;
 	}
 
-	public static void reportException(IContext env, IOException e) {
-		// TODO Auto-generated method stub
-		
+	public static boolean reportException(IContext env, IOException e) {
+		return false;
 	}
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_clear_screen.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_clear_screen.java	Wed Dec 14 14:00:59 2011	(r23771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_clear_screen.java	Wed Dec 14 14:01:03 2011	(r23772)
@@ -19,7 +19,7 @@
 public class JLINE_clear_screen extends AbstractPrimitive {
 
 	public JLINE_clear_screen() {
-		super("JLINE_clear_screen", 0, 0);
+		super("JLINE_clear_screen", 0, 1);
 	}
 	
 	@Override
@@ -27,6 +27,8 @@
 			throws InterpreterException {
 		try {
 			ConsoleReader consoleReader = JFFLibrary.unwrap(tvars, 0, ConsoleReader.class);
+			if(consoleReader == null)
+				return false;
 			consoleReader.clearScreen();
 		} catch(IOException e) {
 			JLINELibrary.reportException(env, e);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java	Wed Dec 14 14:00:59 2011	(r23771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java	Wed Dec 14 14:01:03 2011	(r23772)
@@ -6,7 +6,9 @@
 package org.spoofax.interpreter.library.jline;
 
 import java.io.IOException;
+import java.util.List;
 
+import jline.Completor;
 import jline.ConsoleReader;
 
 import org.spoofax.interpreter.core.IContext;
@@ -14,20 +16,59 @@
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.java.GenericWrappedTerm;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
 
 public class JLINE_make_console extends AbstractPrimitive {
 
 	public JLINE_make_console() {
-		super("JLINE_make_console", 0, 0);
+		super("JLINE_make_console", 1, 0);
 	}
-	
+
 	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
-			throws InterpreterException {
+	public boolean call(final IContext env, Strategy[] svars,
+			IStrategoTerm[] tvars) throws InterpreterException {
 		try {
-			env.setCurrent(new GenericWrappedTerm("ConsoleReader", new ConsoleReader()));
-		} catch(IOException e) {
+			final Strategy completer = svars[0];
+			ConsoleReader console = new ConsoleReader();
+			console.addCompletor(new Completor() {
+
+				@SuppressWarnings("unchecked")
+				@Override
+				public int complete(String line, int cursorPos,
+						@SuppressWarnings("rawtypes") List suggestions) {
+					IStrategoTerm old = env.current();
+					try {
+						ITermFactory f = env.getFactory();
+						env.setCurrent(f.makeTuple(f.makeString(line), f.makeInt(cursorPos)));
+						try {
+							completer.evaluate(env);
+						} catch (InterpreterException e) {
+							return -1;
+						}
+						IStrategoTerm r = env.current();
+						if (r.getTermType() == IStrategoTerm.TUPLE
+								&& r.getSubtermCount() == 2
+								&& r.getSubterm(0).getTermType() == IStrategoTerm.INT
+								&& r.getSubterm(1).getTermType() == IStrategoTerm.LIST) {
+							IStrategoList list = (IStrategoList) r.getSubterm(1);
+							for (IStrategoTerm t : list.getAllSubterms()) {
+								if (t.getTermType() == IStrategoTerm.STRING)
+									suggestions.add(((IStrategoString) t).stringValue());
+							}
+							return ((IStrategoInt) r.getSubterm(0)).intValue();
+						}
+						return -1;
+					} finally {
+						env.setCurrent(old);
+					}
+				}
+			});
+			env.setCurrent(new GenericWrappedTerm("ConsoleReader", console));
+		} catch (IOException e) {
 			JLINELibrary.reportException(env, e);
 			return false;
 		}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_repl.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_repl.java	Wed Dec 14 14:01:03 2011	(r23772)
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.jline;
+
+import java.io.IOException;
+
+import jline.ConsoleReader;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.java.JFFLibrary;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+public class JLINE_repl extends AbstractPrimitive {
+
+	public JLINE_repl() {
+		super("JLINE_repl", 2, 1);
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		try {
+			ConsoleReader consoleReader = JFFLibrary.unwrap(tvars, 0, ConsoleReader.class);
+			if(consoleReader == null)
+				return false;
+			final Strategy promptStrategy = svars[0];
+			final Strategy evalStrategy = svars[1];
+			final ITermFactory factory = env.getFactory();
+			do {
+				IStrategoTerm cur = env.current();
+				if(!promptStrategy.evaluate(env))
+					return false;
+				IStrategoTerm prompt = env.current();
+				if(prompt.getSubtermCount() == 2 && 
+						prompt.getSubterm(0).getTermType() == IStrategoTerm.STRING) {
+					cur = Tools.termAt(prompt, 1);
+					prompt = Tools.stringAt(prompt, 0);
+				} else if (prompt.getTermType() != IStrategoTerm.STRING) { 
+					return false;
+				}
+				final String line = consoleReader.readLine(((IStrategoString) prompt).stringValue());
+				env.setCurrent(factory.makeTuple(factory.makeString(line), cur));
+				if(!evalStrategy.evaluate(env))
+					return false;
+			} while(true);
+		} catch(IOException e) {
+			return JFFLibrary.invokeExceptionHandler(env, e);
+		}
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/bindings/jline.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/bindings/jline.str	Wed Dec 14 14:00:59 2011	(r23771)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/bindings/jline.str	Wed Dec 14 14:01:03 2011	(r23772)
@@ -16,8 +16,14 @@
 
 strategies
 
-    /** @type Console -> Console */
-    jline-repl(exec) = ?console ; prim("JLINE_repl", exec|console)
+    /** Generic interpreter REPL for the Unix/Linux/Windows command line. 
+      *
+      * @param prompter : a -> (String, a)
+      * @param evaluator : a -> a
+      * @type a -> a 
+      */
+    jline-repl(prompter, evaluator | console) = 
+      prim("JLINE_repl", prompter, evaluator|console)
 
     /** @type _ -> Console */
     jline-make-console(completer) = prim("JLINE_make_console", completer|)

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java	Wed Dec 14 14:01:03 2011	(r23772)
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.jline;
+
+import static org.junit.Assert.*;
+
+import java.io.IOException;
+
+import org.junit.Test;
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
+
+public class TestJLINE {
+
+	@Test
+	public void test_jline_repl() throws IOException, InterpreterException {
+		Interpreter intp = new Interpreter();
+		intp.addOperatorRegistry(new JLINELibrary());
+		intp.load("jline-test.ctree");
+		intp.setCurrent(intp.getFactory().makeTuple());
+		assertTrue("Strategy failed", intp.invoke("main_0_0"));
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/bindings/test-jline.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/bindings/test-jline.str	Wed Dec 14 14:01:03 2011	(r23772)
@@ -0,0 +1,20 @@
+module spoofax/bindings/test-jline
+imports
+    spoofax/bindings/jline
+    libstratego-lib
+
+signature
+  constructors
+      State : Int -> State
+
+strategies
+
+    test-prompter : state -> (<format> [<?State(<id>)> state , "/ok"])
+
+    test-eval : (line, state) -> state
+
+    test-repl = <jline-repl(test-prompter, test-eval | <jline-make-console(fail)> )> State(0)
+
+    format = map(try(int-to-string)) ; concat-strings
+
+    main = test-repl
\ No newline at end of file

From karltk at strategoxt.org  Wed Dec 14 15:01:06 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 14 Dec 2011 14:01:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23773 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src:
	main/java/org/spoofax/interpreter/library/jline
	test/java/org/spoofax/interpreter/library/jline...
Message-ID: <20111214140106.D648D7F809E@mx1.tudelft.nl>

Author: karltk
Date: Wed Dec 14 14:01:06 2011
New Revision: 23773
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23773&sc=1

Log:
Moved interpreter setup into separate method. jline-make-console should return true, not false, when it succeeds.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/bindings/test-jline.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java	Wed Dec 14 14:01:03 2011	(r23772)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_make_console.java	Wed Dec 14 14:01:06 2011	(r23773)
@@ -73,7 +73,7 @@
 			return false;
 		}
 
-		return false;
+		return true;
 	}
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java	Wed Dec 14 14:01:03 2011	(r23772)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java	Wed Dec 14 14:01:06 2011	(r23773)
@@ -15,12 +15,26 @@
 
 public class TestJLINE {
 
-	@Test
-	public void test_jline_repl() throws IOException, InterpreterException {
+	private Interpreter makeInterpreter() throws IOException, InterpreterException {
 		Interpreter intp = new Interpreter();
 		intp.addOperatorRegistry(new JLINELibrary());
+		intp.load(System.getProperty("user.home") + "/.nix-profile/share/stratego-lib/libstratego-lib.ctree");
 		intp.load("jline-test.ctree");
 		intp.setCurrent(intp.getFactory().makeTuple());
-		assertTrue("Strategy failed", intp.invoke("main_0_0"));
+		return intp;
+	}
+
+	@Test
+	public void test_jline_make_console() throws IOException, InterpreterException {
+		Interpreter intp = makeInterpreter();
+		System.out.println(intp.current());
+		assertTrue("Strategy failed", intp.invoke("test_make_console_0_0"));
+	}
+
+	@Test
+	public void test_jline_repl() throws IOException, InterpreterException {
+		Interpreter intp = makeInterpreter();
+		intp.setCurrent(intp.getFactory().makeTuple());
+		assertTrue("Strategy failed", intp.invoke("test_repl_0_0"));
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/bindings/test-jline.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/bindings/test-jline.str	Wed Dec 14 14:01:03 2011	(r23772)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/bindings/test-jline.str	Wed Dec 14 14:01:06 2011	(r23773)
@@ -17,4 +17,6 @@
 
     format = map(try(int-to-string)) ; concat-strings
 
-    main = test-repl
\ No newline at end of file
+    test-make-console = jline-make-console(fail)
+
+    main = test-repl ; test-make-console
\ No newline at end of file

From karltk at strategoxt.org  Wed Dec 14 18:04:16 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 14 Dec 2011 17:04:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23774 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src:
	main/java/org/spoofax/interpreter/library/jline
	main/stratego/spoofax/bindings test/java/org/sp...
Message-ID: <20111214170416.D604F108C043@mx3.tudelft.nl>

Author: karltk
Date: Wed Dec 14 17:04:15 2011
New Revision: 23774
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23774&sc=1

Log:
Added println and format that supports ANSI color codes, including some (rather useless) unit tests.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_format.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_println.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/bindings/jline.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/bindings/test-jline.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java	Wed Dec 14 14:01:06 2011	(r23773)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java	Wed Dec 14 17:04:15 2011	(r23774)
@@ -18,6 +18,8 @@
 		add(new JLINE_make_console());
 		add(new JLINE_clear_screen());
 		add(new JLINE_repl());
+		add(new JLINE_println());
+		add(new JLINE_format());
 	}
 	
 	@Override

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_format.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_format.java	Wed Dec 14 17:04:15 2011	(r23774)
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.jline;
+
+import jline.ANSIBuffer;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JLINE_format extends AbstractPrimitive {
+
+	public JLINE_format() {
+		super("JLINE_format", 0, 0);
+	}
+
+	@Override
+	public boolean call(final IContext env, Strategy[] svars,
+			IStrategoTerm[] tvars) throws InterpreterException {
+		ANSIBuffer buf = makeANSIBuffer(env);
+		if(buf == null)
+			return false;
+		env.setCurrent(env.getFactory().makeString(buf.toString()));
+		return true;
+	}
+
+	static ANSIBuffer makeANSIBuffer(final IContext env) {
+		if(env.current().getTermType() != IStrategoTerm.LIST)
+			return null;
+		ANSIBuffer buf = new ANSIBuffer();
+		for(IStrategoTerm t : env.current().getAllSubterms()) {
+			if(t.getTermType() == IStrategoTerm.STRING) {
+				buf.append(((IStrategoString) t).stringValue());
+			} else if(t.getTermType() == IStrategoTerm.APPL) {
+				String ctor = ((IStrategoAppl) t).getName();
+				if(!"ANSIFragment".equals(ctor))
+					return null;
+				if(t.getSubterm(0).getTermType() != IStrategoTerm.INT)
+					return null;
+				if(t.getSubterm(1).getTermType() != IStrategoTerm.STRING)
+					return null;
+				int code = ((IStrategoInt) t.getSubterm(0)).intValue();
+				String str = ((IStrategoString) t.getSubterm(1)).stringValue();
+				buf.attrib(str, code);
+			}
+		}
+		return buf;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_println.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINE_println.java	Wed Dec 14 17:04:15 2011	(r23774)
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.library.jline;
+
+import jline.ANSIBuffer;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class JLINE_println extends AbstractPrimitive {
+
+	public JLINE_println() {
+		super("JLINE_println", 0, 0);
+	}
+
+	@Override
+	public boolean call(final IContext env, Strategy[] svars,
+			IStrategoTerm[] tvars) throws InterpreterException {
+		ANSIBuffer buf = JLINE_format.makeANSIBuffer(env);
+		if(buf == null)
+			return false;
+		System.out.println(buf);
+		return true;
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/bindings/jline.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/bindings/jline.str	Wed Dec 14 14:01:06 2011	(r23773)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/stratego/spoofax/bindings/jline.str	Wed Dec 14 17:04:15 2011	(r23774)
@@ -6,13 +6,20 @@
 module spoofax/bindings/jline
 signature
   constructors
-      Red     : String -> ANSI
-      Green   : String -> ANSI
-      Blue    : String -> ANSI
-      Bold    : String -> ANSI
-      Cyan    : String -> ANSI
-      Magenta : String -> ANSI
-      Yellow  : String -> ANSI
+      ANSIFragment : Int * String -> ANSIFragment
+
+overlays
+
+      Bold(str)    = ANSIFragment(1, str)
+      Reverse(str) = ANSIFragment(7, str)
+      Black(str)   = ANSIFragment(30, str)
+      Red(str)     = ANSIFragment(31, str)
+      Green(str)   = ANSIFragment(32, str)
+      Yellow(str)  = ANSIFragment(33, str)
+      Blue(str)    = ANSIFragment(34, str)
+      Magenta(str) = ANSIFragment(35, str)
+      Cyan(str)    = ANSIFragment(36, str)
+      White(str)   = ANSIFragment(37, str)
 
 strategies
 
@@ -32,4 +39,7 @@
     jline-clear-screen = ?console ; prim("JLINE_clear_screen", console)
 
     /** @type List(String | ANSI) -> _ */
-    jline-println(|console) = ?stuff ; prim("JLINE_println", console, stuff) 
+    jline-println = prim("JLINE_println")
+
+    /** @type List(String | ANSI) -> String */
+    jline-format = prim("JLINE_format")

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java	Wed Dec 14 14:01:06 2011	(r23773)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java	Wed Dec 14 17:04:15 2011	(r23774)
@@ -25,6 +25,13 @@
 	}
 
 	@Test
+	public void test_jline_printnl() throws IOException, InterpreterException {
+		Interpreter intp = makeInterpreter();
+		intp.setCurrent(intp.getFactory().makeTuple());
+		assertTrue("Strategy failed", intp.invoke("test_println_0_0"));
+	}
+
+	@Test
 	public void test_jline_make_console() throws IOException, InterpreterException {
 		Interpreter intp = makeInterpreter();
 		System.out.println(intp.current());

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/bindings/test-jline.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/bindings/test-jline.str	Wed Dec 14 14:01:06 2011	(r23773)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/stratego/spoofax/bindings/test-jline.str	Wed Dec 14 17:04:15 2011	(r23774)
@@ -9,9 +9,9 @@
 
 strategies
 
-    test-prompter : state -> (<format> [<?State(<id>)> state , "/ok"])
+    test-prompter : state -> (<jline-format> [<?State(<id>)> state , "/", Green("ok"), "> "])
 
-    test-eval : (line, state) -> state
+    test-eval : (line, State(n)) -> State(<inc> n)
 
     test-repl = <jline-repl(test-prompter, test-eval | <jline-make-console(fail)> )> State(0)
 
@@ -19,4 +19,6 @@
 
     test-make-console = jline-make-console(fail)
 
-    main = test-repl ; test-make-console
\ No newline at end of file
+    test-println = <jline-println> [ "foo" , Green("bar"), Bold("baz") ] 
+
+    main = test-repl ; test-make-console ; test-println
\ No newline at end of file

From karltk at strategoxt.org  Thu Dec 15 18:00:02 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 17:00:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23775 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter: . META-INF
	src/main/java/org/spoofax/interpreter
	src/main/java/org/spoofax/interpreter/cli src/main/stratego/spoo...
Message-ID: <20111215170003.00CD8108C009@mx3.tudelft.nl>

Author: karltk
Date: Thu Dec 15 17:00:02 2011
New Revision: 23775
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23775&sc=1

Log:
Added support for compiling as an Eclipse plugin. Fixed plugin imports/exports. Removed .classpath refs to jline.jar (which is now in .library.jline)

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
   spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter/.classpath	Wed Dec 14 17:04:15 2011	(r23774)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter/.classpath	Thu Dec 15 17:00:02 2011	(r23775)
@@ -5,6 +5,5 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.core"/>
-	<classpathentry kind="lib" path="lib/jline-1.0.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter/META-INF/MANIFEST.MF
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter/META-INF/MANIFEST.MF	Wed Dec 14 17:04:15 2011	(r23774)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter/META-INF/MANIFEST.MF	Thu Dec 15 17:00:02 2011	(r23775)
@@ -1,14 +1,16 @@
 Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
-Bundle-Name: Stratego Interpreter
+Bundle-Name: Stratego/J Interpreter
 Bundle-SymbolicName: org.spoofax.interpreter
-Bundle-Version: 0.3.11.qualifier
+Bundle-Version: 0.4.0.qualifier
 Bundle-Localization: plugin
 Require-Bundle: org.junit,
  org.spoofax.interpreter.core,
- org.spoofax.compiler,
- org.spoofax.jsglr;bundle-version="0.3.0",
+ org.spoofax.interpreter.library.jline,
+ org.spoofax.jsglr
+Export-Package: org.spoofax.interpreter,
+ org.spoofax.interpreter.core
+ org.spoofax.interpreter.terms
  org.spoofax.terms
-Export-Package: org.spoofax.interpreter
-Eclipse-LazyStart: true
+Eclipse-LazyStart: false
 Bundle-Vendor: Spoofax.org

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Wed Dec 14 17:04:15 2011	(r23774)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Thu Dec 15 17:00:02 2011	(r23775)
@@ -1,6 +1,6 @@
 /*
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk at strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter;
@@ -19,6 +19,7 @@
 import org.spoofax.interpreter.stratego.SDefT;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.InvalidParseTableException;
 import org.spoofax.jsglr.client.ParseException;
 import org.spoofax.jsglr.client.ParseTable;
@@ -29,6 +30,7 @@
 import org.spoofax.jsglr.shared.SGLRException;
 import org.spoofax.jsglr.shared.TokenExpectedException;
 import org.spoofax.terms.ParseError;
+import org.spoofax.terms.TermFactory;
 
 public class ConcreteInterpreter extends Interpreter {
 
@@ -36,10 +38,15 @@
 	private final SGLR sugarParser;
 
 	public ConcreteInterpreter() {
+		this(new TermFactory());
+	}
+
+	public ConcreteInterpreter(ITermFactory termFactory) {
+		super(termFactory, new TermFactory());
 		try {
 			load(findLibrary("stratego-lib/libstratego-lib.ctree"));
 			load(findLibrary("libstrc.ctree"));
-			load(new FileInputStream("share/frontend.ctree"));
+			load(findLocalLibrary("share/frontend.ctree"));
 			// load(findLibrary("libstratego-aterm.ctree"));
 			// load(findLibrary("libstratego-gpp.ctree"));
 			// load(findLibrary("libstratego-rtg.ctree"));
@@ -49,7 +56,7 @@
 
 			ParseTableManager ptm = new ParseTableManager();
 			sugarTable = ptm
-					.loadFromStream(new FileInputStream("share/Stratego-Shell.tbl"));
+					.loadFromStream(findLocalLibrary("/share/Stratego-Shell.tbl"));
 			sugarParser = new SGLR(new TreeBuilder(), sugarTable);
 			sugarParser.setUseStructureRecovery(false);
 			setCurrent(getFactory().makeList());
@@ -65,7 +72,14 @@
 
 	}
 
-	private InputStream findLibrary(String libraryPath) {
+	private InputStream findLocalLibrary(String path) throws IOException {
+		InputStream ins = ConcreteInterpreter.class.getClassLoader().getResourceAsStream(path);
+		if(ins == null)
+			throw new IOException("Failed to load internal library " + path);
+		return ins;
+	}
+
+	protected InputStream findLibrary(String libraryPath) throws IOException {
 		String shareDir = System.getProperty("user.home")
 				+ "/.nix-profile/share/";
 		File file = new File(shareDir + "/" + libraryPath);
@@ -76,7 +90,7 @@
 				throw new RuntimeException(e);
 			}
 		}
-		throw new RuntimeException("Failed to find Stratego library " + file.getAbsolutePath());
+		throw new IOException("Failed to find Stratego library " + file.getAbsolutePath());
 	}
 
 	public void loadConcrete(String file, String[] path, boolean lib)
@@ -92,7 +106,7 @@
 		setCurrent(old);
 		return ret;
 	}
-	
+
 	public boolean parseAndInvoke(String codeAsString) throws TokenExpectedException, InterpreterErrorExit, BadTokenException, ParseException, InterpreterExit, UndefinedStrategyException, SGLRException, InterpreterException {
 		IStrategoAppl program = parseAndCompile(codeAsString, "spx_shell_frontend_0_0", "Toplevel");
 		if(program == null) {
@@ -103,6 +117,6 @@
 			return true;
 		} else {
 			return evaluate(program);
-		} 
+		}
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Wed Dec 14 17:04:15 2011	(r23774)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/Main.java	Thu Dec 15 17:00:02 2011	(r23775)
@@ -1,6 +1,6 @@
 /*
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.cli;
@@ -73,11 +73,11 @@
 		if (toCompile.size() == 0) {
 			PrintWriter out = new PrintWriter(System.out);
 			ConsoleReader consoleReader = new ConsoleReader();
-			
+
 			File historyFile = new File(System.getProperty("user.home") + "/.stratego-shell-history");
 			if(historyFile.canRead() && historyFile.canWrite())
 				consoleReader.getHistory().setHistoryFile(historyFile);
-			
+
 			consoleReader.setBellEnabled(false);
 			consoleReader
 					.addCompletor(new StrategyCompletor(intp.getContext()));
@@ -220,8 +220,8 @@
 		out.println(new ANSIBuffer().yellow(" :strategies                 ").append("-- show all global strategies"));
 		out.println(new ANSIBuffer().yellow(" :vars                       ").append("-- show all global variables"));
 	}
-	
-	
+
+
 	private static String makePrompt(boolean success, int promptCount) {
 		ANSIBuffer ab = new ANSIBuffer();
 		ab.bold(promptCount + "");

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java	Wed Dec 14 17:04:15 2011	(r23774)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/cli/StrategyCompletor.java	Thu Dec 15 17:00:02 2011	(r23775)
@@ -1,3 +1,8 @@
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.cli;
 
 import java.util.List;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str	Wed Dec 14 17:04:15 2011	(r23774)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/stratego/spoofax/interpreter/frontend.str	Thu Dec 15 17:00:02 2011	(r23775)
@@ -1,3 +1,8 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 module spoofax/interpreter/frontend
 imports
     libstratego-lib

From karltk at strategoxt.org  Thu Dec 15 18:03:13 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 17:03:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23776 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF
Message-ID: <20111215170313.1CF642B805D@mx2.tudelft.nl>

Author: karltk
Date: Thu Dec 15 17:03:11 2011
New Revision: 23776
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23776&sc=1

Log:
Trimmed the re-exports a bit, to avoid exporting dead classes.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF/MANIFEST.MF

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF/MANIFEST.MF	Thu Dec 15 17:00:02 2011	(r23775)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF/MANIFEST.MF	Thu Dec 15 17:03:11 2011	(r23776)
@@ -1,10 +1,9 @@
 Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
-Bundle-Name: Stratego Interpreter Core
+Bundle-Name: Stratego/J Interpreter Core
 Bundle-SymbolicName: org.spoofax.interpreter.core;singleton=true
-Bundle-Version: 0.4.0.qualifier
-Require-Bundle: org.junit,
- org.junit4,
+Bundle-Version: 0.4.1.qualifier
+Require-Bundle: org.junit4,
  org.spoofax.terms
 Eclipse-LazyStart: false
 Export-Package: org.spoofax,
@@ -13,6 +12,5 @@
  org.spoofax.interpreter.library.ssl,
  org.spoofax.interpreter.stratego,
  org.spoofax.interpreter.terms,
- org.spoofax.interpreter.terms.saf,
- org.spoofax.interpreter.test
+ org.spoofax.terms
 Bundle-Vendor: Spoofax.org

From karltk at strategoxt.org  Thu Dec 15 18:03:31 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 17:03:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23777 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter:
	core library
Message-ID: <20111215170331.82C307F8012@mx1.tudelft.nl>

Author: karltk
Date: Thu Dec 15 17:03:31 2011
New Revision: 23777
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23777&sc=1

Log:
Copyright and whitespace fixes.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/DefScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IContext.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterErrorExit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterException.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Main.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Pair.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoCoreLoader.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoSignature.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOperatorRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,9 +1,9 @@
 /*
  * Created on 07.aug.2005
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.core;
 
@@ -30,7 +30,7 @@
 public class Context implements IContext {
 
     public static int indentation = 0; // TODO should this be non static?
-    
+
     private final StackTracer stackTracer;
 
     private final ITermFactory programFactory;
@@ -40,7 +40,7 @@
     private final Map<String, OpDecl> opdecls;
 
     private final StrategoSignature strategoSignature;
-    
+
     private ITermFactory factory;
 
     private IStrategoTerm current;
@@ -75,16 +75,16 @@
     public void setCurrent(IStrategoTerm term) {
         current = term;
     }
-    
+
     public StackTracer getStackTracer() {
         return stackTracer;
     }
-    
+
     public IOAgent getIOAgent() {
         SSLLibrary op = (SSLLibrary) getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
         return op == null ? null : op.getIOAgent();
     }
-    
+
     public void setIOAgent(IOAgent ioAgent) {
         SSLLibrary op = (SSLLibrary) getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
         if (op == null) throw new IllegalStateException("No SSL library");
@@ -111,7 +111,7 @@
         if (asyncCancelled) cancel();
         return factory;
     }
-    
+
     public void setFactory(ITermFactory factory) {
         this.factory = factory;
     }
@@ -178,7 +178,7 @@
         return operatorRegistries.get(domain);
     }
 
-    public AbstractPrimitive lookupOperator(String name) {        
+    public AbstractPrimitive lookupOperator(String name) {
         if (asyncCancelled) cancel();
         for(IOperatorRegistry or : operatorRegistries.values()) {
             AbstractPrimitive t = or.get(name);
@@ -199,9 +199,9 @@
 
     public Collection<String> getStrategyNames() {
         VarScope v = getVarScope();
-        while(v.getParent() != null) 
+        while(v.getParent() != null)
             v = v.getParent();
-        
+
         Collection<String> r = new HashSet<String>();
         for(SDefT s : v.getStrategyDefinitions())
             r.add(s.getName());

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/DefScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/DefScope.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/DefScope.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,9 +1,9 @@
 /*
  * Created on 30.jul.2005
  *
- * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2
  */
 package org.spoofax.interpreter.core;
 
@@ -24,21 +24,21 @@
 
         sdefs = new HashMap<String, SDefT>();
     }
-    
+
     public SDefT lookupSDefT(String name) {
 
         SDefT sdef = sdefs.get(name);
-        
+
         if(sdef == null && parent != null)
             return parent.lookupSDefT(name);
-        
+
         return sdef;
     }
 
     public void add(String name, SDefT sdef) {
         sdefs.put(name, sdef);
-    }    
-    
+    }
+
     public DefScope getParent() {
         return parent;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IConstruct.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IConstruct.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,9 +1,9 @@
 /*
  * Created on 07.aug.2005
  *
- * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IContext.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IContext.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IContext.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,9 +1,9 @@
 /*
  * Created on 07.aug.2005
  *
- * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2
  */
 package org.spoofax.interpreter.core;
 
@@ -37,10 +37,10 @@
 
     public void popVarScope();
     public void restoreVarScope(VarScope anotherVarScope);
-    
+
     public StrategoSignature getStrategoSignature();
     public AbstractPrimitive lookupOperator(String name);
     public Collection<String> getStrategyNames();
-    
+
     public StackTracer getStackTracer();
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,4 +1,3 @@
-
 /*
  * Created on 07.aug.2005
  *
@@ -25,9 +24,9 @@
 
 /**
  * A Stratego interpreter.
- * 
+ *
  * @see org.strategoxt.HybridInterpreter   For an efficient hybrid compiler/interpreter.
- * 
+ *
  * @author Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * @author Lennart Kats <lennart add lclnet.nl>
  */
@@ -44,46 +43,46 @@
         this(factory, factory);
     }
 
-    public Interpreter(ITermFactory termFactory, ITermFactory programFactory) {        
+    public Interpreter(ITermFactory termFactory, ITermFactory programFactory) {
         Context.indentation = 0;
         context = createContext(termFactory, programFactory);
-        
+
         loader = new StrategoCoreLoader(context);
     }
 
     /**
      * Invokes a strategy.
-     * 
+     *
      * @param name
      *            The name of the strategy to invoke, using its regular
      *            Stratego-based name (e.g., "strategy-name").
      *            If this fails, the strategy is looked up using C-based
      *            naming conventions (e.g., strategy_name_0_0").
-     * 
+     *
      * @throws InterpreterExit
      *             If the interpreter is exited.
      * @throws InterpreterException
      *             In case of an internal error or other interpreter exception.
-     *             
+     *
      * @see #setCurrent(IStrategoTerm)
      *             Sets the input term for the invoked strategy.
      */
     public boolean invoke(String name)
             throws InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
-        
+
         SDefT def = lookupUncifiedSVar(name);
 
         if (def == null) {
             throw new UndefinedStrategyException("Definition '" + name + "' not found", name);
         }
-        
+
         return evaluate(def);
     }
-    
+
     /**
      * Evaluates a stratego expression. Must be fully desugared,
      * using C names in SDefTs and SCallTs.
-     * 
+     *
      * @see org.strategoxt.HybridInterpreter#evaluate  A variant of evaluate() with desugaring support.
      */
     public boolean evaluate(IStrategoAppl s)
@@ -105,10 +104,10 @@
 
         try {
             boolean success = def.getBody().evaluate(context);
-        
+
             if (success) stackTracer.popOnSuccess();
             else stackTracer.popOnFailure();
-            
+
             return success;
         } catch (InterpreterException e) {
             stackTracer.popOnExit(false);
@@ -122,7 +121,7 @@
     public SDefT lookupUncifiedSVar(String name) {
         try {
             SDefT def = context.lookupSVar(cify(name) + "_0_0");
-            
+
             if (def == null) {
                 def = context.lookupSVar(name);
             }
@@ -131,7 +130,7 @@
             return null;
         }
     }
-    
+
     /**
      * Rewrite a strategy name based on the C naming conventions,
      * following the stratego-lib term/string/cify strategy.
@@ -148,7 +147,7 @@
     public IContext getContext() {
         return context;
     }
-    
+
     protected Context createContext(ITermFactory termFactory, ITermFactory programFactory) {
        return new Context(termFactory, programFactory);
     }
@@ -161,24 +160,24 @@
     public IStrategoTerm current() {
         return context.current();
     }
-    
+
     public IOAgent getIOAgent() {
         SSLLibrary op = (SSLLibrary) getContext().getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
         return op.getIOAgent();
     }
-    
+
     public void setIOAgent(IOAgent ioAgent) {
         SSLLibrary op = (SSLLibrary) getContext().getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
         op.setIOAgent(ioAgent);
         getContext().getStackTracer().setIOAgent(ioAgent);
     }
-    
+
     /**
      * Resets the state of this interpreter.
      */
     public void reset() {
         // TODO: better way to reset the interpreter state?
-        //       the comment at SSLLibrary.init() talks about scoping this?     
+        //       the comment at SSLLibrary.init() talks about scoping this?
         SSLLibrary op = (SSLLibrary) getContext().getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
         op.init();
     }
@@ -200,7 +199,7 @@
     public ITermFactory getFactory() {
         return context.getFactory();
     }
-    
+
     public ITermFactory getProgramFactory() {
         return context.getProgramFactory();
     }
@@ -208,10 +207,10 @@
     public final void load(InputStream stream) throws IOException, InterpreterException {
         if (stream == null)
             throw new IOException("Could not load Stratego core input from null stream");
-            
+
        load(new TermReader(context.getProgramFactory()).parseFromStream(stream));
     }
-    
+
     public final void load(String file) throws IOException, InterpreterException {
         load(new TermReader(context.getProgramFactory()).parseFromFile(file));
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterErrorExit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterErrorExit.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterErrorExit.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,3 +1,6 @@
+/*
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.core;
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -8,9 +11,9 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class InterpreterErrorExit extends InterpreterExit {
-    
+
     private static final long serialVersionUID = -1230869980986338311L;
-    
+
     private final IStrategoTerm term;
 
     public InterpreterErrorExit(String message, IStrategoTerm term) {
@@ -21,11 +24,11 @@
         super(1, message, cause);
         this.term = term;
     }
-    
+
     public IStrategoTerm getTerm() {
         return term;
     }
-    
+
     @Override
     public String getLocalizedMessage() { // used for toString() and stacktraces
         return getMessage() + (getTerm() == null ? "" : "\n\t" + getTerm());

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterException.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterException.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterException.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,16 +1,16 @@
 /*
  * Created on 04.jul.2005
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.core;
 
 public class InterpreterException extends Exception {
 
     private static final long serialVersionUID = -3622131518420023392L;
-    
+
     public InterpreterException(String message, Throwable cause) {
         super(message, cause);
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,39 +1,39 @@
 /*
  * Created on 15. jan.. 2007
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
+ * Copyright (c) 2007-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.core;
 
 public class InterpreterExit extends InterpreterException {
-    
+
     private static final long serialVersionUID = 7198021396619788526L;
-    
+
     public static final int SUCCESS = 0;
-    
+
     private final int value;
-    
+
     public InterpreterExit(int value) {
         this(value, (Throwable) null);
     }
-    
+
     public InterpreterExit(int value, Throwable cause) {
         super("Legal exit: return code " + value, cause);
         this.value = value;
     }
-    
+
     public InterpreterExit(int value, String message) {
         super(message);
         this.value = value;
     }
-    
+
     public InterpreterExit(int value, String message, Throwable cause) {
         super(message, cause);
         this.value = value;
     }
-    
+
     public int getValue() {
         return value;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Main.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Main.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Main.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,3 +1,8 @@
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.core;
 
 import java.io.IOException;
@@ -16,12 +21,12 @@
     public static void main(String args[]) throws IOException {
 
         String[] files = null;
-        String factoryName = null; 
+        String factoryName = null;
         boolean waitForProfiler = false;
         boolean inProgramArgs = false;
         final List<String> programArgs = new LinkedList<String>();
         final List<String> libraryArgs = new LinkedList<String>();
-        
+
         for (int i = 0; i < args.length; i++) {
         	if(inProgramArgs) {
         		programArgs.add(args[i]);
@@ -44,7 +49,7 @@
 
         final Interpreter itp = createInterpreter(factoryName);
         loadLibraries(itp, libraryArgs, itp.getFactory());
-        
+
         try {
 //            long loadTime = System.nanoTime();
             for(String fn : files) {
@@ -62,14 +67,14 @@
 //            long runTime = System.nanoTime();
         	final IStrategoTerm[] as = new IStrategoTerm[programArgs.size()];
         	final ITermFactory factory = itp.getFactory();
-        	for(int i = 0; i < as.length; i++) 
+        	for(int i = 0; i < as.length; i++)
         		as[i] = factory.makeString(programArgs.get(i));
             itp.setCurrent(itp.getFactory().makeList(as));
-            
+
             boolean r = itp.invoke("main_0_0");
-            
+
 //            System.out.println("Run time: " + (System.nanoTime() - runTime)/1000/1000 + "ms");
-            
+
             if(r) {
                 System.out.println("" + itp.current());
             } else {
@@ -81,7 +86,7 @@
         } catch (InterpreterException e) {
             e.printStackTrace();
         }
-        
+
         if(waitForProfiler)
             System.in.read();
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Pair.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Pair.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Pair.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,9 +1,9 @@
 /*
  * Created on 17.jul.2005
  *
- * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.core;
 
@@ -14,9 +14,9 @@
         this.first = first;
         this.second = second;
     }
-    
+
     @Override
     public String toString() {
-        return "<" + first.toString() + "," + second.toString() + ">"; 
+        return "<" + first.toString() + "," + second.toString() + ">";
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoCoreLoader.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoCoreLoader.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoCoreLoader.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,9 +1,9 @@
 /*
  * Created on 3. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
+ * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.core;
 
@@ -28,14 +28,14 @@
 import org.spoofax.interpreter.stratego.OpDecl;
 import org.spoofax.interpreter.stratego.PrimT;
 import org.spoofax.interpreter.stratego.SDefT;
-import org.spoofax.interpreter.stratego.Scope;
-import org.spoofax.interpreter.stratego.Seq;
-import org.spoofax.interpreter.stratego.Some;
-import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.stratego.SDefT.ArgType;
 import org.spoofax.interpreter.stratego.SDefT.ConstType;
 import org.spoofax.interpreter.stratego.SDefT.FunType;
 import org.spoofax.interpreter.stratego.SDefT.SVar;
+import org.spoofax.interpreter.stratego.Scope;
+import org.spoofax.interpreter.stratego.Seq;
+import org.spoofax.interpreter.stratego.Some;
+import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -46,11 +46,11 @@
 public class StrategoCoreLoader {
 
     private Context context;
-    
+
     StrategoCoreLoader(Context context) {
         this.context = context;
     }
-    
+
     private ExtSDef parseExtSDef(IStrategoAppl t) {
 
         String name = Tools.javaStringAt(t, 0);
@@ -176,7 +176,7 @@
         if (DebugUtil.isDebugging()) {
             DebugUtil.debug(" tvars : ", tvars);
         }
-        
+
         String[] realtvars = makeVars(tvars);
         if (DebugUtil.isDebugging()) {
             DebugUtil.debug(" tvars : ", realtvars);
@@ -334,7 +334,7 @@
     private Seq parseSeq(IStrategoAppl t) throws InterpreterException {
     	LinkedList<Strategy> s = new LinkedList<Strategy>();
         StrategoSignature sign = context.getStrategoSignature();
-    	
+
     	while (t.getConstructor().equals(sign.getSeq())) {
           s.add(parseStrategy(Tools.applAt(t, 0)));
           t = Tools.applAt(t, 1);
@@ -363,22 +363,22 @@
         IStrategoAppl u = Tools.applAt(t, 0);
         return new Build(u);
     }
-    
+
     @Deprecated
     public void load(String path) throws IOException, InterpreterException {
         doLoad(new TermReader(context.getProgramFactory()).parseFromFile(path));
     }
-    
+
     public void load(IStrategoTerm prg) throws InterpreterException {
     	doLoad(prg);
     }
 
     private void doLoad(IStrategoTerm prg) throws InterpreterException {
-        
+
 //        PrettyPrinter pp = new PrettyPrinter();
 //        prg.prettyPrint(pp);
 //        System.out.println(pp.getString());
-        
+
         IStrategoAppl sign = Tools.applAt(Tools.listAt(prg, 0), 0);
         IStrategoAppl strats = Tools.applAt(Tools.listAt(prg, 0), 1);
 
@@ -392,8 +392,8 @@
 
     private void loadConstructors(IStrategoList list) {
         for (int i = 0; i < list.size(); i++) {
-         // TODO Added the ExtOpDeclInj here, not sure this should be handled differently, 
-         //      but this extra check will at least prevent the class cast exception otherwise 
+         // TODO Added the ExtOpDeclInj here, not sure this should be handled differently,
+         //      but this extra check will at least prevent the class cast exception otherwise
          //      thrown and allow the loading to recover.
         	if (!Tools.applAt(list, i).getConstructor().getName().equals("OpDeclInj") &&
         	    !Tools.applAt(list, i).getConstructor().getName().equals("ExtOpDeclInj")  ) {
@@ -425,7 +425,7 @@
     public void load(InputStream stream) throws InterpreterException, IOException {
         if (stream == null)
             throw new IOException("Could not load Stratego core input from null stream");
-            
+
         doLoad(new TermReader(context.getProgramFactory()).parseFromStream(stream));
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoSignature.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoSignature.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoSignature.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,3 +1,8 @@
+/*
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.core;
 
 import org.spoofax.interpreter.terms.IStrategoConstructor;
@@ -87,7 +92,7 @@
         CTOR_ExtSDef = factory.makeConstructor("ExtSDefT", 3);
         CTOR_Scope = factory.makeConstructor("Scope", 2);
         CTOR_Seq = factory.makeConstructor("Seq", 2);
-        
+
         CTOR_GuardedLChoice = factory.makeConstructor("GuardedLChoice", 3);
         CTOR_CallT = factory.makeConstructor("CallT", 3);
         CTOR_Fail = factory.makeConstructor("Fail", 0);
@@ -97,7 +102,7 @@
         CTOR_PrimT = factory.makeConstructor("PrimT", 3);
 
         CTOR_ImportTerm = factory.makeConstructor("ImportTerm", 1);
-        
+
         CTOR_All = factory.makeConstructor("All", 1);
         CTOR_Some = factory.makeConstructor("Some", 1);
         CTOR_One = factory.makeConstructor("One", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,9 +1,9 @@
 /*
  * Created on 24.jun.2005
  *
- * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.core;
 
@@ -39,9 +39,9 @@
     /*
     public IStrategoTerm implode(ITermFactory factory, IStrategoAppl t) throws InterpreterException {
         IStrategoConstructor ctor = t.getConstructor();
-        // TODO get an instance of the Stratego signature from the interpreter instance. 
+        // TODO get an instance of the Stratego signature from the interpreter instance.
         StrategoSignature sign = null;
-        
+
         if (ctor == sign.getAnno()) {
             return implode(factory, applAt(t, 0));
         } else if (ctor == sign.getOp()) {
@@ -183,7 +183,7 @@
     public static String javaStringAt(IStrategoList t, int i) {
         return Tools.stringAt(t, i).stringValue();
     }
-    
+
     public static int javaIntAt(IStrategoTerm t, int i) {
         IStrategoInt result = intAt(t, i);
         return result.intValue();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,3 +1,6 @@
+/*
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.core;
 
 /**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,9 +1,9 @@
 /*
- * Created on 9. okt.. 2006
+ * Created on 9. okt. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
+ * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library;
 
@@ -13,11 +13,11 @@
 public abstract class AbstractStrategoOperatorRegistry implements IOperatorRegistry {
 
     private final Map<String, AbstractPrimitive> registry;
-    
+
     protected AbstractStrategoOperatorRegistry() {
         this(16);
     }
-    
+
     protected AbstractStrategoOperatorRegistry(int initialCapacity) {
         registry = new HashMap<String, AbstractPrimitive>(initialCapacity);
     }
@@ -26,7 +26,7 @@
     protected Map<String, AbstractPrimitive> getRegistry() {
         return registry;
     }
-    
+
     // FIXME kill - this is superflouse
     @Deprecated
     protected void add(String name, AbstractPrimitive prim) {
@@ -36,7 +36,7 @@
     public void add(AbstractPrimitive prim) {
         registry.put(prim.getName(), prim);
     }
-    
+
     public AbstractPrimitive get(String name) {
         return registry.get(name);
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,3 +1,6 @@
+/*
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.library;
 
 import java.io.BufferedReader;
@@ -28,43 +31,43 @@
 /**
  * The IOAgent class provides access to filesystem from Stratego programs,
  * handles the notion of a current directory, and may be overridden
- * to redirect console or file I/O streams. 
- * 
+ * to redirect console or file I/O streams.
+ *
  * @author Lennart Kats <lennart add lclnet.nl>
  * @author Karl Trygve Kalleberg <karltk near strategoxt.org>
  */
 public class IOAgent {
-    
+
     public final static int CONST_STDIN = 0;
-    
+
     public final static int CONST_STDOUT = 1;
-    
+
     public final static int CONST_STDERR = 2;
-    
+
     private final static String FILE_ENCODING = "UTF-8";
-    
+
     private final static Charset FILE_CHARSET = Charset.forName(FILE_ENCODING);
-    
+
     private final Map<Integer, FileHandle> openFiles = new HashMap<Integer, FileHandle>();
-    
+
     private final Writer stdoutWriter = new PrintStreamWriter(System.out);
-    
+
     private final Writer stderrWriter = new PrintStreamWriter(System.err);
-    
+
     private final Reader stdinReader = new InputStreamReader(System.in, FILE_CHARSET);
-    
+
     private final OutputStream stdout = System.out;
-    
+
     private final OutputStream stderr = System.err;
-    
+
     private final InputStream stdin = System.in;
-    
+
     private String workingDir;
-    
+
     private String definitionDir;
-    
+
     private int fileCounter = 3;
-    
+
     public IOAgent() {
         try {
             String dir = System.getProperty("user.dir");
@@ -75,21 +78,21 @@
             throw new RuntimeException(e);
         }
     }
-    
+
     // DIRECTORIES AND PATHS
-    
+
     public String getWorkingDir() {
         return workingDir;
     }
-    
+
     public String getDefinitionDir() {
         return definitionDir;
     }
-    
+
     public String getTempDir() {
         return System.getProperty("java.io.tmpdir");
     }
-    
+
     public void setWorkingDir(String workingDir) throws FileNotFoundException, IOException {
         File workingDirFile = new File(getAbsolutePath(getWorkingDir(), workingDir));
         if (!workingDirFile.exists() || !workingDirFile.isDirectory()) {
@@ -97,7 +100,7 @@
         }
         this.workingDir = workingDirFile.getCanonicalPath();
     }
-    
+
     public void setDefinitionDir(String definitionDir) throws FileNotFoundException {
         File definitionDirFile = new File(getAbsolutePath(getDefinitionDir(), definitionDir));
         if (!definitionDirFile.exists() || !definitionDirFile.isDirectory()) {
@@ -105,12 +108,12 @@
         }
         this.definitionDir = definitionDirFile.getAbsolutePath();
     }
-    
+
     @Deprecated // use getAbsolutePath instead
     protected String adaptFilePath(String fn) {
         return getAbsolutePath(getWorkingDir(), fn);
     }
-    
+
     /**
      * Converts a path relative to a given directory
      * to an absolute path.
@@ -121,9 +124,9 @@
             ? f.getAbsolutePath()
             : new File(dir, fn).getAbsolutePath();
     }
-    
+
     // OPENING, MANIPULATING FILES
-    
+
     /**
      * Gets the writer for a file.
      * Should not be used together with getReader() for the same file.
@@ -146,7 +149,7 @@
             return file.writer;
         }
     }
-    
+
     /**
      * Gets the output stream for a file.
      * Should not be used together with getWriter() for the same file.
@@ -165,7 +168,7 @@
             return file.outputStream;
         }
     }
-    
+
     /**
      * Write a single byte character to a file,
      * trying not to allocate a new Writer object.
@@ -187,7 +190,7 @@
     public boolean closeRandomAccessFile(int fd) throws InterpreterException {
         if (fd == CONST_STDOUT || fd == CONST_STDERR || fd == CONST_STDIN)
             return true;
-        
+
         FileHandle file = openFiles.remove(fd);
         if(file == null)
             return true; // already closed: be forgiving
@@ -200,7 +203,7 @@
         }
         return true;
     }
-    
+
     public void closeAllFiles() {
         for (FileHandle file : openFiles.values()) {
             try {
@@ -230,7 +233,7 @@
         RandomAccessFile file = new RandomAccessFile(getAbsolutePath(getWorkingDir(), fn), writeMode ? "rw" : "r");
         if (clearFile) file.setLength(0);
         openFiles.put(fileCounter, new FileHandle(file));
-        
+
         return fileCounter++;
     }
 
@@ -262,7 +265,7 @@
         }
     }
     */
-    
+
     /**
      * Gets the reader for a file.
      * Should not be used together with getInputStream() for the same file.
@@ -279,7 +282,7 @@
         }
         return file.reader;
     }
-    
+
     public String readString(int fd) throws IOException {
         char[] buffer = new char[2048];
         StringBuilder result = new StringBuilder();
@@ -288,10 +291,10 @@
             result.append(buffer, 0, read);
         return result.toString();
     }
-    
+
     /**
      * Opens an input stream given a file path.
-     * 
+     *
      * @param isDefinitionFile
      *            Indicates the path is relative to the Stratego source tree or
      *            imports, e.g., a .pp.af file included by import-term.
@@ -300,11 +303,11 @@
         String dir = isDefinitionFile ? getDefinitionDir() : getWorkingDir();
         return new FileInputStream(getAbsolutePath(dir, fn));
     }
-    
+
     public final InputStream openInputStream(String fn) throws FileNotFoundException {
         return openInputStream(fn, false);
     }
-    
+
     public void printError(String error) {
         try {
             getWriter(CONST_STDERR).write(error + "\n");
@@ -312,19 +315,19 @@
             // Like System.err.println, we swallow excpetions
         }
     }
-    
+
     public OutputStream openFileOutputStream(String fn) throws FileNotFoundException {
         return new FileOutputStream(getAbsolutePath(getWorkingDir(), fn));
     }
-    
+
     public File openFile(String fn) {
         return new File(getAbsolutePath(getWorkingDir(), fn));
     }
-    
+
     public String createTempFile(String prefix) throws IOException {
         return File.createTempFile(prefix, null).getPath();
     }
-    
+
     public String createTempDir(String prefix) throws IOException {
         File result;
         do {
@@ -334,19 +337,19 @@
         result.deleteOnExit();
         return result.getPath();
     }
-    
+
     public boolean mkdir(String fn) {
         return openFile(fn).mkdir();
     }
-    
+
     @Deprecated // this is not a Stratego primitive; use mkdir instead
     public boolean mkDirs(String fn) {
         return openFile(fn).mkdirs();
     }
-    
+
     /**
      * An open file handle.
-     * 
+     *
      * @author Lennart Kats <lennart add lclnet.nl>
      */
     private static class FileHandle {
@@ -355,21 +358,21 @@
         Writer writer;
         InputStream inputStream;
         OutputStream outputStream;
-        
+
         FileHandle(RandomAccessFile file) {
             this.file = file;
         }
     }
-    
+
     /**
      * A class for writing to a PrintStream.
-     * 
+     *
      * @author Lennart Kats <lennart add lclnet.nl>
      */
     private static class PrintStreamWriter extends Writer {
-        
+
         private final PrintStream stream;
-        
+
         PrintStreamWriter(PrintStream stream) {
             this.stream = stream;
         }
@@ -391,11 +394,11 @@
             else
                 stream.append(CharBuffer.wrap(cbuf, off, len));
         }
-        
+
         @Override
         public void write(String str, int off, int len) throws IOException {
             stream.append(str, off, len);
         }
-        
+
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOperatorRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOperatorRegistry.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOperatorRegistry.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
+ * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java	Thu Dec 15 17:03:11 2011	(r23776)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java	Thu Dec 15 17:03:31 2011	(r23777)
@@ -1,3 +1,6 @@
+/*
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.library;
 
 import java.io.ByteArrayOutputStream;
@@ -9,33 +12,33 @@
 
 /**
  * An IO Agent class that logs all console output.
- * 
+ *
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class LoggingIOAgent extends IOAgent {
-    
+
     private final LoggingOutputStream stdoutLog = new LoggingOutputStream(System.out);
-    
+
     private final LoggingOutputStream stderrLog = new LoggingOutputStream(System.err);
-    
+
     private final PrintStream stdout = new PrintStream(stdoutLog, true);
-    
+
     private final PrintStream stderr = new PrintStream(stderrLog, true);
-    
+
     private final OutputStreamWriter stdoutWriter = new OutputStreamWriter(stdoutLog);
-    
+
     private final OutputStreamWriter stderrWriter = new OutputStreamWriter(stderrLog);
-    
+
     final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
-    
+
     public String getLog() {
     	return bytes.toString();
     }
-    
+
     public void clearLog() {
         bytes.reset();
     }
-    
+
     @Override
     public OutputStream internalGetOutputStream(int fd) {
         switch (fd) {
@@ -49,7 +52,7 @@
                 return super.internalGetOutputStream(fd);
         }
     }
-    
+
     @Override
     public Writer getWriter(int fd) {
         switch (fd) {
@@ -63,37 +66,37 @@
                 return super.getWriter(fd);
         }
     }
-    
+
     private class LoggingOutputStream extends OutputStream {
         OutputStream stream;
-        
+
         public LoggingOutputStream(OutputStream stream) {
             this.stream = stream;
         }
-        
+
         @Override
         public void write(int b) throws IOException {
             stream.write(b);
-            bytes.write(b); 
+            bytes.write(b);
         }
-        
+
         @Override
         public void write(byte[] b) throws IOException {
             stream.write(b);
             bytes.write(b);
         }
-        
+
         @Override
         public void write(byte[] b, int off, int len) throws IOException {
             stream.write(b, off, len);
             bytes.write(b, off, len);
         }
-        
+
         @Override
         public void flush() throws IOException {
             stream.flush();
         }
-        
+
         @Override
         public void close() throws IOException {
             // UNDONE: closing console streams is asking for trouble


From karltk at strategoxt.org  Thu Dec 15 20:15:40 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 19:15:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23778 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse:
	. scripts/org/spoofax src/main src/main/java
	src/main/java/org src/main/java/org/spoofax/interpre...
Message-ID: <20111215191540.933467F8025@mx1.tudelft.nl>

Author: karltk
Date: Thu Dec 15 19:15:40 2011
New Revision: 23778
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23778&sc=1

Log:
Replaced EFILibrary constructor with factory method. Rearranged directory layout to Apache-style.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/java/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/java/org/
      - copied from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/org/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/stratego/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/stratego/spoofax/
      - copied from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/scripts/org/spoofax/
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/scripts/org/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/org/
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/build.properties
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/java/org/spoofax/interpreter/library/eclipse/EFILibrary.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/.classpath	Thu Dec 15 17:03:31 2011	(r23777)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/.classpath	Thu Dec 15 19:15:40 2011	(r23778)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
+	<classpathentry kind="src" path="src/main/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/build.properties
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/build.properties	Thu Dec 15 17:03:31 2011	(r23777)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/build.properties	Thu Dec 15 19:15:40 2011	(r23778)
@@ -1,4 +1,4 @@
-source.. = src/
+source.. = src/main/java
 output.. = bin/
 bin.includes = META-INF/,\
                .

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/java/org/spoofax/interpreter/library/eclipse/EFILibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/org/spoofax/interpreter/library/eclipse/EFILibrary.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/java/org/spoofax/interpreter/library/eclipse/EFILibrary.java	Thu Dec 15 19:15:40 2011	(r23778)
@@ -1,27 +1,33 @@
 /*
- * Created on 25. feb.. 2007
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.eclipse;
 
+import java.io.IOException;
+
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
 
 public class EFILibrary extends AbstractStrategoOperatorRegistry {
 
     public static final String REGISTRY_NAME = "EFI";
 
-    public EFILibrary() {
+    private EFILibrary() {
         init();
     }
-    
+
     private void init() {
         add(new EFI_ui_show_popup());
     }
-    
+
     public String getOperatorRegistryName() {
         return REGISTRY_NAME;
     }
+
+    public static void attach(Interpreter intp) throws IOException, InterpreterException {
+        attach(intp, new EFILibrary(), "/shared/efi-library.ctree");
+    }
 }

From karltk at strategoxt.org  Thu Dec 15 20:16:37 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 19:16:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23779 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/scripts/org
Message-ID: <20111215191637.50B1E108C054@mx3.tudelft.nl>

Author: karltk
Date: Thu Dec 15 19:16:37 2011
New Revision: 23779
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23779&sc=1

Log:
Removed scripts.

Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/scripts/org/

From karltk at strategoxt.org  Thu Dec 15 22:13:35 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 21:13:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23780 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj: .
	src/main/java/org/spoofax/ecjadapter
	src/main/java/org/spoofax/interpreter/adapter/ecj src/main/jav...
Message-ID: <20111215211335.436E77F801D@mx1.tudelft.nl>

Author: karltk
Date: Thu Dec 15 21:13:34 2011
New Revision: 23780
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23780&sc=1

Log:
Added create-project, create-java-project, delete-project and list-projects. Library must now be instantiated using a factory method.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_java_project.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_delete_project.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_list_projects.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/build.properties
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/Main.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_binding_of_methoddecl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_package.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_project.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_current_java_project.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_open_project.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/TestECJAdapter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/RecursiveScriptTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/ProjectUtils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/TestLibrary.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath	Thu Dec 15 21:13:34 2011	(r23780)
@@ -4,6 +4,5 @@
 	<classpathentry kind="src" path="src/test/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry exported="true" kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/build.properties
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/build.properties	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/build.properties	Thu Dec 15 21:13:34 2011	(r23780)
@@ -1,3 +1,4 @@
 source.. = src/main/java
-bin.includes = META-INF/,\
-               .
\ No newline at end of file
+bin.includes = META-INF/, .
+src.excludes = src/test/java/
+jre.compilation.profile = JavaSE-1.6

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/Main.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/Main.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/Main.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -2,7 +2,7 @@
  * Created on 27. jan.. 2007
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.ecjadapter;
@@ -25,10 +25,10 @@
 public class Main {
 
     public static void main(String[] args) throws IOException, InterpreterException {
-        
+
         String[] files = null;
         List<String> actualArgs = new LinkedList<String>();
-        
+
         for (int i = 0; i < args.length; i++) {
             if (args[i].equals("--debug")) {
                 DebugUtil.setDebug(true);
@@ -45,20 +45,20 @@
             System.err.println("Usage: ecj-shell [--debug] -i program.ctree");
             System.exit(2);
         }
-        
+
         ITermFactory data = new ECJFactory();
         ITermFactory program = new TermFactory();
         Interpreter intp = new Interpreter(data, program);
-        intp.addOperatorRegistry(new ECJLibrary());
+        ECJLibrary.attach(intp);
         for(String f : files)
             intp.load(f);
-        
+
         // Compute parameters
         IStrategoTerm[] finalArgs = new IStrategoTerm[actualArgs.size()];
         for(int i = 0; i < actualArgs.size(); i++)
             finalArgs[i] = data.makeString(actualArgs.get(i));
         intp.setCurrent(data.makeList(finalArgs));
-        
+
         if(!intp.invoke("main_0_0")) {
             System.err.println("Rewriting failed");
             System.exit(2);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -1,8 +1,8 @@
 /*
- * Created on 27. sep.. 2006
+ * Created on 27. sep. 2006
+ *
+ * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
  * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
@@ -28,7 +28,6 @@
 import org.eclipse.jdt.core.dom.PrimitiveType.Code;
 import org.spoofax.DebugUtil;
 import org.spoofax.NotImplementedException;
-import org.spoofax.terms.skeleton.SkeletonTermFactory;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoInt;
@@ -38,6 +37,7 @@
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.terms.StrategoConstructor;
 import org.spoofax.terms.StrategoList;
+import org.spoofax.terms.skeleton.SkeletonTermFactory;
 
 public class ECJFactory extends SkeletonTermFactory {
 
@@ -137,21 +137,21 @@
     private static final int ANONYMOUS_CLASS_DECLARATION = 94;
     private static final int ASSIGNMENT_OPERATOR = 95;
 	private static ASTMatcher astMatcher;
-        
+
     private Map<String,Integer> ctorNameToIndexMap;
     private AST ast;
-    
+
     public ECJFactory(AST ast) {
         super(IStrategoTerm.IMMUTABLE);
         this.ast = ast;
         initCtorMap();
     }
-    
+
     public ECJFactory() {
         super(IStrategoTerm.IMMUTABLE);
         initCtorMap();
     }
-    
+
     private void initCtorMap() {
         ctorNameToIndexMap = new HashMap<String,Integer>();
         ctorNameToIndexMap.put("ArrayAccess", ARRAY_ACCESS);
@@ -272,7 +272,7 @@
         return ((WrappedJavadoc)term).getWrappee();
     }
 
-    /*    
+    /*
     @Override
     public IStrategoTerm annotateTerm(IStrategoTerm term, IStrategoList annotations) {
     	if(term instanceof ECJAnnoWrapper) {
@@ -296,7 +296,7 @@
                 for(int i = 0; i < kids.length; i++) {
                     if(kids[i] instanceof WrappedASTNodeList) {
                         WrappedASTNodeList l = (WrappedASTNodeList)kids[i];
-                        if(!l.isEmpty()) 
+                        if(!l.isEmpty())
                             System.err.println("  [" + l.getSubterm(0) + "]");
                         else
                             System.err.println("  " + l + " - empty");
@@ -315,8 +315,8 @@
         switch(index) {
         case ANNOTATION_TYPE_DECLARATION: {
             if((!isJavadoc(kids[0]) && !isNone(kids[0]))
-                    || !isExtendedModifierList(kids[1]) 
-                    || !isSimpleName(kids[2]) 
+                    || !isExtendedModifierList(kids[1])
+                    || !isSimpleName(kids[2])
                     || !isBodyDeclarationList(kids[3]))
                 return null;
             AnnotationTypeDeclaration x = ast.newAnnotationTypeDeclaration();
@@ -331,9 +331,9 @@
         }
         case ANNOTATION_TYPE_MEMBER_DECLARATION: {
             if((!isJavadoc(kids[0]) && !isNone(kids[0]))
-                    || !isModifierList(kids[1]) 
-                    || !isType(kids[2]) 
-                    || !isSimpleName(kids[3]) 
+                    || !isModifierList(kids[1])
+                    || !isType(kids[2])
+                    || !isSimpleName(kids[3])
                     || (!isExpression(kids[4]) && !isNone(kids[4])))
                 return null;
             AnnotationTypeMemberDeclaration x = ast.newAnnotationTypeMemberDeclaration();
@@ -354,7 +354,7 @@
             x.bodyDeclarations().addAll(asBodyDeclarationList(kids[0]));
             return wrap(x);
         }
-        case ARRAY_ACCESS: { 
+        case ARRAY_ACCESS: {
             if(!isExpression(kids[0]) || !isExpression(kids[1]))
                 return null;
             ArrayAccess x = ast.newArrayAccess();
@@ -363,8 +363,8 @@
             return wrap(x);
         }
         case ARRAY_CREATION: {
-            if(!isArrayType(kids[0]) 
-                    || !isExpressionList(kids[1]) 
+            if(!isArrayType(kids[0])
+                    || !isExpressionList(kids[1])
                     || (!isArrayInitializer(kids[2]) && !isNone(kids[2])))
                 return null;
             ArrayCreation x = ast.newArrayCreation();
@@ -384,8 +384,8 @@
             return wrap(x);
         }
         case ARRAY_TYPE: {
-            if(!isType(kids[0]) 
-                    || !isInt(kids[1]) 
+            if(!isType(kids[0])
+                    || !isInt(kids[1])
                     || !isType(kids[2]))
                 return null;
             ArrayType x = ast.newArrayType(asType(kids[2]), asInt(kids[1]));
@@ -399,13 +399,13 @@
             x.setExpression(asExpression(kids[0]));
             if(isNone(kids[1]))
             	x.setMessage(null);
-            else 
+            else
             	x.setMessage(asExpression(kids[1]));
             return wrap(x);
         }
         case ASSIGNMENT: {
             if(!isAssignmentOperator(kids[0])
-            		|| !isExpression(kids[1]) 
+            		|| !isExpression(kids[1])
             		|| !isExpression(kids[2]))
                 return null;
             Assignment x = ast.newAssignment();
@@ -475,15 +475,15 @@
             return wrap(x);
         }
         case CLASS_INSTANCE_CREATION: {
-            if((!isExpression(kids[0]) && !isNone(kids[0])) 
-                    || !isType(kids[1]) 
-                    || (!isAnonymousClassDeclaration(kids[2]) && !isNone(kids[2]))  
+            if((!isExpression(kids[0]) && !isNone(kids[0]))
+                    || !isType(kids[1])
+                    || (!isAnonymousClassDeclaration(kids[2]) && !isNone(kids[2]))
                     || !isExpressionList(kids[3]))
                 return null;
             ClassInstanceCreation x = ast.newClassInstanceCreation();
-            if(isNone(kids[0])) 
+            if(isNone(kids[0]))
                 x.setExpression(null);
-            else 
+            else
                 x.setExpression(asExpression(kids[0]));
             x.setType(asType(kids[1]));
             if(isNone(kids[2]))
@@ -494,22 +494,22 @@
             return wrap(x);
         }
         case COMPILATION_UNIT: {
-            if((!isPackageDeclaration(kids[0]) && !isNone(kids[0])) 
-                    || !isImportDeclarationList(kids[1]) 
+            if((!isPackageDeclaration(kids[0]) && !isNone(kids[0]))
+                    || !isImportDeclarationList(kids[1])
                     || !isAbstractTypeDeclarationList(kids[2]))
                 return null;
             CompilationUnit x = ast.newCompilationUnit();
             if(isNone(kids[0]))
                 x.setPackage(null);
-            else 
+            else
                 x.setPackage(asPackageDeclaration(kids[0]));
             x.imports().addAll(asImportDeclarationList(kids[1]));
             x.types().addAll(asAbstractTypeDeclarationList(kids[2]));
             return wrap(x);
         }
         case CONDITIONAL_EXPRESSION: {
-            if(!isExpression(kids[0]) 
-                    || !isExpression(kids[1]) 
+            if(!isExpression(kids[0])
+                    || !isExpression(kids[1])
                     || !isExpression(kids[2]))
                 return null;
             ConditionalExpression x = ast.newConditionalExpression();
@@ -548,7 +548,7 @@
             return wrap(ast.newEmptyStatement());
         }
         case ENHANCED_FOR_STATEMENT: {
-            if(!isSingleVariableDeclaration(kids[0]) 
+            if(!isSingleVariableDeclaration(kids[0])
                     || !isExpression(kids[1])
                     || !isStatement(kids[2]))
                 return null;
@@ -560,9 +560,9 @@
         }
         case ENUM_CONSTANT_DECLARATION: {
             if((!isJavadoc(kids[0]) && !isNone(kids[0]))
-                    || !isModifierList(kids[1]) 
-                    || !isSimpleName(kids[2]) 
-                    || !isExpressionList(kids[3]) 
+                    || !isModifierList(kids[1])
+                    || !isSimpleName(kids[2])
+                    || !isExpressionList(kids[3])
                     || !isAnonymousClassDeclaration(kids[4]))
                 return null;
             EnumConstantDeclaration x = ast.newEnumConstantDeclaration();
@@ -630,7 +630,7 @@
             return wrap(ast.newPrimitiveType(PrimitiveType.FLOAT));
         }
         case FOR_STATEMENT: {
-            if(!isExpressionList(kids[0]) 
+            if(!isExpressionList(kids[0])
                     || (!isExpression(kids[1]) && !isNone(kids[1]))
                     || !isExpressionList(kids[2])
                     || !isStatement(kids[3]))
@@ -687,7 +687,7 @@
             Initializer x = ast.newInitializer();
             x.setBody(asBlock(kids[0]));
             return wrap(x);
-            
+
         }
         case INSTANCEOF_EXPRESSION: {
             if(!isExpression(kids[0])
@@ -709,7 +709,7 @@
             return wrap(x);
         }
         case LABELED_STATEMENT: {
-            if(!isSimpleName(kids[0]) 
+            if(!isSimpleName(kids[0])
                     || !isStatement(kids[1]))
                 return null;
             LabeledStatement x = ast.newLabeledStatement();
@@ -730,7 +730,7 @@
             MarkerAnnotation x = ast.newMarkerAnnotation();
             x.setTypeName(asName(kids[0]));
             return wrap(x);
-            
+
         }
         case MEMBER_REF: {
             if(!isSimpleName(kids[0]) || !isName(kids[1]))
@@ -788,7 +788,7 @@
             MethodInvocation x = ast.newMethodInvocation();
             if(isNone(kids[0]))
                 x.setExpression(null);
-            else 
+            else
                 x.setExpression(asExpression(kids[0]));
             x.setName(asSimpleName(kids[1]));
             x.typeArguments().addAll(asTypeList(kids[2]));
@@ -851,7 +851,7 @@
                     || !isAnnotations(kids[1])
                     || !isName(kids[2]))
                 return null;
-            
+
             PackageDeclaration pd = ast.newPackageDeclaration();
             if(isNone(kids[0]))
                 pd.setJavadoc(null);
@@ -922,7 +922,7 @@
             ReturnStatement x = ast.newReturnStatement();
             if(isNone(kids[0]))
             	x.setExpression(null);
-            else 
+            else
             	x.setExpression(asExpression(kids[0]));
             return wrap(x);
         }
@@ -956,7 +956,7 @@
             x.setType(asType(kids[1]));
             x.setName(asSimpleName(kids[2]));
             x.setExtraDimensions(asInt(kids[3]));
-            if(isNone(kids[4])) 
+            if(isNone(kids[4]))
                 x.setInitializer(null);
             else
                 x.setInitializer(asExpression(kids[4]));
@@ -970,8 +970,8 @@
             return wrap(x);
         }
         case SUPER_CONSTRUCTOR_INVOCATION: {
-            if((!isExpression(kids[0]) && !isNone(kids[0])) 
-                    || !isTypeList(kids[1]) 
+            if((!isExpression(kids[0]) && !isNone(kids[0]))
+                    || !isTypeList(kids[1])
                     || !isExpressionList(kids[2]))
                 return null;
             SuperConstructorInvocation x = ast.newSuperConstructorInvocation();
@@ -984,7 +984,7 @@
             return wrap(x);
         }
         case SUPER_FIELD_ACCESS: {
-            if((!isName(kids[0]) && !isNone(kids[0])) 
+            if((!isName(kids[0]) && !isNone(kids[0]))
                     || !isSimpleName(kids[1]))
                 return null;
             SuperFieldAccess x = ast.newSuperFieldAccess();
@@ -996,7 +996,7 @@
             return wrap(x);
         }
         case SUPER_METHOD_INVOCATION: {
-            if((!isName(kids[0]) && !isNone(kids[0])) 
+            if((!isName(kids[0]) && !isNone(kids[0]))
                     || !isTypeList(kids[1])
                     || !isSimpleName(kids[2])
                     || !isExpressionList(kids[3]))
@@ -1040,13 +1040,13 @@
             return wrap(x);
         }
         case TAG_ELEMENT: {
-            if((!isString(kids[0]) && !isNone(kids[0])) 
+            if((!isString(kids[0]) && !isNone(kids[0]))
                     || !isASTNodeList(kids[1]))
                 return null;
             TagElement x = ast.newTagElement();
             if(isNone(kids[0]))
                 x.setTagName(null);
-            else 
+            else
                 x.setTagName(asString(kids[0]));
             x.fragments().addAll(asASTNodeList(kids[1]));
             return wrap(x);
@@ -1064,7 +1064,7 @@
             ThisExpression x = ast.newThisExpression();
             if(isNone(kids[0]))
                 x.setQualifier(null);
-            else 
+            else
                 x.setQualifier(asName(kids[0]));
             return wrap(x);
         }
@@ -1076,8 +1076,8 @@
             return wrap(x);
         }
         case TRY_STATEMENT: {
-            if(!isBlock(kids[0]) 
-                    || !isCatchClauseList(kids[1]) 
+            if(!isBlock(kids[0])
+                    || !isCatchClauseList(kids[1])
                     || (!isBlock(kids[2]) && !isNone(kids[2])))
                 return null;
             TryStatement x = ast.newTryStatement();
@@ -1085,7 +1085,7 @@
             x.catchClauses().addAll(asCatchClauseList(kids[1]));
             if(isNone(kids[2]))
                 x.setFinally(null);
-            else 
+            else
                 x.setFinally(asBlock(kids[2]));
             return wrap(x);
         }
@@ -1107,9 +1107,9 @@
             x.modifiers().addAll(asModifierList(kids[1]));
             x.setName(asSimpleName(kids[2]));
             x.typeParameters().addAll(asTypeParameterList(kids[3]));
-            if(isNone(kids[4])) 
+            if(isNone(kids[4]))
                 x.setSuperclassType(null);
-            else 
+            else
                 x.setSuperclassType(asType(kids[4]));
             x.superInterfaceTypes().addAll(asTypeList(kids[5]));
             x.bodyDeclarations().addAll(asBodyDeclarationList(kids[6]));
@@ -1137,8 +1137,8 @@
             return wrap(x);
         }
         case VARIABLE_DECLARATION_EXPRESSION: {
-            if(!isModifierList(kids[0]) 
-                    || !isType(kids[1]) 
+            if(!isModifierList(kids[0])
+                    || !isType(kids[1])
                     || !isNonEmptyVariableDeclarationFragmentList(kids[2]))
                 return null;
             List y = asFragmentList(kids[2]);
@@ -1149,8 +1149,8 @@
             return wrap(x);
         }
         case VARIABLE_DECLARATION_FRAGMENT: {
-            if(!isSimpleName(kids[0]) 
-                    || !isInt(kids[1]) 
+            if(!isSimpleName(kids[0])
+                    || !isInt(kids[1])
                     || (!isExpression(kids[2]) && !isNone(kids[2])))
                 return null;
             VariableDeclarationFragment x = ast.newVariableDeclarationFragment();
@@ -1163,8 +1163,8 @@
             return wrap(x);
         }
         case VARIABLE_DECLARATION_STATEMENT: {
-            if(!isModifierList(kids[0]) 
-                    || !isType(kids[1]) 
+            if(!isModifierList(kids[0])
+                    || !isType(kids[1])
                     || !isNonEmptyVariableDeclarationFragmentList(kids[2]))
                 return null;
             List y = asFragmentList(kids[2]);
@@ -1209,7 +1209,7 @@
         for(IStrategoTerm k : kids) {
             r.add(asExtendedModifier(k));
         }
-        return r;    
+        return r;
     }
 
     private IExtendedModifier asExtendedModifier(IStrategoTerm term) {
@@ -1217,14 +1217,14 @@
     	final ASTNode an = ((ASTNode)x);
     	if(an.getParent() == null && an.getAST() == ast)
     		return x;
-    	else 
+    	else
     		return (IExtendedModifier)ASTNode.copySubtree(ast, an);
     }
 
     private boolean isExtendedModifierList(IStrategoTerm term) {
         if(term instanceof IStrategoList) {
             IStrategoList list = (IStrategoList)term;
-            if(list.size() > 0) 
+            if(list.size() > 0)
                 return isExtendedModifier(list.head());
             return true;
         }
@@ -1242,7 +1242,7 @@
         for(IStrategoTerm k : kids) {
             r.add(asTypeParameter(k));
         }
-        return r;    
+        return r;
     }
 
     private TypeParameter asTypeParameter(IStrategoTerm term) {
@@ -1257,12 +1257,12 @@
         for(IStrategoTerm k : kids) {
             r.add(asTagElement(k));
         }
-        return r;    
+        return r;
     }
 
 
     private TagElement asTagElement(IStrategoTerm term) {
-    	TagElement x = ((WrappedTagElement)term).getWrappee(); 
+    	TagElement x = ((WrappedTagElement)term).getWrappee();
         return x.getParent() == null && x.getAST() == ast ? x : (TagElement)ASTNode.copySubtree(ast, x);
     }
 
@@ -1273,8 +1273,8 @@
         for(IStrategoTerm k : kids) {
             r.add(asAbstractTypeDeclaration(k));
         }
-        return r;    
-        
+        return r;
+
     }
 
     private Operator asOperator(IStrategoTerm term) {
@@ -1290,7 +1290,7 @@
         for(IStrategoTerm k : kids) {
             r.add(asName(k));
         }
-        return r;    
+        return r;
     }
 
     @SuppressWarnings({ "unchecked", "rawtypes" })
@@ -1300,7 +1300,7 @@
         for(IStrategoTerm k : kids) {
             r.add(asSingleVariableDeclaration(k));
         }
-        return r;    
+        return r;
     }
 
     private AbstractTypeDeclaration asAbstractTypeDeclaration(IStrategoTerm term) {
@@ -1315,7 +1315,7 @@
         for(IStrategoTerm k : kids) {
             r.add(asMethodRefParameter(k));
         }
-        return r;    
+        return r;
     }
 
     @SuppressWarnings({ "unchecked", "rawtypes" })
@@ -1325,7 +1325,7 @@
         for(IStrategoTerm k : kids) {
             r.add(asImportDeclaration(k));
         }
-        return r;    
+        return r;
     }
 
     private ImportDeclaration asImportDeclaration(IStrategoTerm term) {
@@ -1346,7 +1346,7 @@
         for(IStrategoTerm k : kids) {
             r.add(asEnumConstantDeclaration(k));
         }
-        return r;    
+        return r;
     }
 
     private EnumConstantDeclaration asEnumConstantDeclaration(IStrategoTerm term) {
@@ -1362,7 +1362,7 @@
         for(IStrategoTerm k : kids) {
             r.add(asASTNode(k));
         }
-        return r;    
+        return r;
     }
 
     private ASTNode asASTNode(IStrategoTerm term) {
@@ -1382,7 +1382,7 @@
         for(IStrategoTerm k : kids) {
             r.add(asMemberValuePair(k));
         }
-        return r;    
+        return r;
     }
 
     private MemberValuePair asMemberValuePair(IStrategoTerm term) {
@@ -1410,7 +1410,7 @@
         for(IStrategoTerm k : kids) {
             r.add(asCatchClause(k));
         }
-        return r;    
+        return r;
     }
 
     private AbstractTypeDeclaration asTypeDecl(IStrategoTerm term) {
@@ -1425,7 +1425,7 @@
         for(IStrategoTerm k : kids) {
             r.add(asVariableDeclarationFragment(k));
         }
-        return r;    
+        return r;
     }
 
     private ArrayInitializer asArrayInitializer(IStrategoTerm term) {
@@ -1464,7 +1464,7 @@
         for(IStrategoTerm k : kids) {
             r.add(asType(k));
         }
-        return r;    
+        return r;
     }
 
     @SuppressWarnings({ "unchecked", "rawtypes" })
@@ -1550,7 +1550,7 @@
 
     private Statement asStatement(IStrategoTerm term) {
         Statement x = ((WrappedStatement)term).getWrappee();
-        return x.getParent() == null && x.getAST() == ast ? x : (Statement)ASTNode.copySubtree(ast, x); 
+        return x.getParent() == null && x.getAST() == ast ? x : (Statement)ASTNode.copySubtree(ast, x);
     }
 
     private boolean isAbstractTypeDeclarationList(IStrategoTerm term) {
@@ -1588,7 +1588,7 @@
     private boolean isMethodRefParameterList(IStrategoTerm term) {
         if(term instanceof IStrategoList) {
             IStrategoTerm[] kids = ((IStrategoList)term).getAllSubterms();
-            for(IStrategoTerm k : kids) { 
+            for(IStrategoTerm k : kids) {
                 if(!isMethodRefParameter(k))
                     return false;
             }
@@ -1604,7 +1604,7 @@
     private boolean isNameList(IStrategoTerm term) {
         if(term instanceof IStrategoList) {
             IStrategoList list = (IStrategoList)term;
-            if(list.size() > 0) 
+            if(list.size() > 0)
                 return isName(list.head());
             return true;
         }
@@ -1614,7 +1614,7 @@
     private boolean isSingleVariableDeclarationList(IStrategoTerm term) {
         if(term instanceof IStrategoList) {
             IStrategoList list = (IStrategoList)term;
-            if(list.size() > 0) 
+            if(list.size() > 0)
                 return isSingleVariableDeclaration(list.head());
             return true;
         }
@@ -1624,7 +1624,7 @@
     private boolean isTypeParameterList(IStrategoTerm term) {
         if(term instanceof IStrategoList) {
             IStrategoList list = (IStrategoList)term;
-            if(list.size() > 0) 
+            if(list.size() > 0)
                 return isTypeParameter(list.head());
             return true;
         }
@@ -1650,14 +1650,14 @@
     }
 
     private boolean isOperator(IStrategoTerm term) {
-        return term instanceof IStrategoString 
+        return term instanceof IStrategoString
         && InfixExpression.Operator.toOperator(((IStrategoString)term).stringValue()) != null;
     }
 
     private boolean isEnumConstantDeclarationList(IStrategoTerm term) {
         if(term instanceof IStrategoList) {
             IStrategoList list = (IStrategoList)term;
-            if(list.size() > 0) 
+            if(list.size() > 0)
                 return isEnumConstantDeclaration(list.head());
             return true;
         }
@@ -1671,7 +1671,7 @@
     private boolean isImportDeclarationList(IStrategoTerm term) {
         if(term instanceof IStrategoList) {
             IStrategoList list = (IStrategoList)term;
-            if(list.size() > 0) 
+            if(list.size() > 0)
                 return isImportDeclaration(list.head());
             return true;
         }
@@ -1689,7 +1689,7 @@
     private boolean isMemberValuePairList(IStrategoTerm term) {
         if(term instanceof IStrategoList) {
             IStrategoList list = (IStrategoList)term;
-            if(list.size() > 0) 
+            if(list.size() > 0)
                 return isMemberValuePair(list.head());
             return true;
         }
@@ -1699,7 +1699,7 @@
     private boolean isMemberValuePair(IStrategoTerm term) {
         return term instanceof WrappedMemberValuePair;
     }
-   
+
     private boolean isModifierKeyword(IStrategoTerm term) {
         return term instanceof WrappedModifierKeyword;
     }
@@ -1715,7 +1715,7 @@
     private boolean isCatchClauseList(IStrategoTerm term) {
         if(term instanceof IStrategoList) {
             IStrategoList list = (IStrategoList)term;
-            if(list.size() > 0) 
+            if(list.size() > 0)
                 return isCatchClause(list.head());
             return true;
         }
@@ -1748,7 +1748,7 @@
             if(list.size() < 0)
                 return false;
             return isVariableDeclarationFragment(list.head());
-            
+
         }
         return false;
     }
@@ -1795,7 +1795,7 @@
     private boolean isStatementList(IStrategoTerm term) {
         if(term instanceof IStrategoList) {
             IStrategoList list = (IStrategoList)term;
-            for(IStrategoTerm t : list.getAllSubterms()) { 
+            for(IStrategoTerm t : list.getAllSubterms()) {
                 if(!isStatement(t))
                     return false;
             }
@@ -1888,31 +1888,31 @@
 
     /*
 */
-    
+
     @SuppressWarnings({ "unchecked", "rawtypes" })
     @Override
     public IStrategoList makeList(IStrategoTerm[] terms, IStrategoList annotations) {
-        
+
         if(annotations != null && !annotations.isEmpty())
             throw new UnsupportedOperationException("Cannot make list with annos");
-        
+
         boolean mustUseGeneric = false;
         for(IStrategoTerm t : terms)
             if(!(t instanceof WrappedASTNode))
                 mustUseGeneric = true;
-        
+
         if(mustUseGeneric) {
             return new ECJGenericList(terms);
         }
-        
+
         List<ASTNode> r = new ArrayList();
         for(IStrategoTerm t : terms)
             r.add(((WrappedASTNode)t).getWrappee());
         return new WrappedASTNodeList(r);
     }
-    
-    
-    
+
+
+
     @Override
     public IStrategoList makeListCons(IStrategoTerm head, IStrategoList tail, IStrategoList annos) {
         if(tail instanceof WrappedASTNodeList && head instanceof WrappedASTNode) {
@@ -1937,7 +1937,7 @@
         return new ECJString(s);
     }
 
-    
+
     @Override
     public IStrategoInt makeInt(int value) {
         return new ECJInt(value);
@@ -1964,15 +1964,15 @@
     }
 
     static IStrategoTerm wrapName(Name name) {
-        
+
         if(name == null)
             return None.INSTANCE;
-        
+
         if(name instanceof QualifiedName)
             return wrap((QualifiedName) name);
         if(name instanceof SimpleName)
             return wrap((SimpleName) name);
-        
+
         throw new NotImplementedException("Unknown Name type: " + name.getClass());
     }
 
@@ -1992,7 +1992,7 @@
 
 	@SuppressWarnings("rawtypes")
     public static IStrategoTerm genericWrap(ASTNode node) {
-        
+
         if(node instanceof ImportDeclaration)
             return wrap((ImportDeclaration) node);
         if(node instanceof Name)
@@ -2021,7 +2021,7 @@
             return wrapBody((BodyDeclaration) node);
         if(node instanceof CatchClause)
             return wrap((CatchClause) node);
-        if(node instanceof Comment) 
+        if(node instanceof Comment)
             return wrapComment((Comment) node);
         if(node instanceof MemberRef)
             return wrap((MemberRef) node);
@@ -2047,10 +2047,10 @@
             return wrap((TypeParameter) node);
         if(node instanceof VariableDeclaration)
             return wrapVarDecl((VariableDeclaration) node);
-        
+
         if(node == null)
             return None.INSTANCE;
-        
+
         throw new NotImplementedException("Unknown ASTNode type" + node.getClass());
     }
 
@@ -2059,7 +2059,7 @@
             return wrap((SingleVariableDeclaration) decl);
         if(decl instanceof VariableDeclarationFragment)
             return wrap((VariableDeclarationFragment) decl);
-        
+
         throw new NotImplementedException();
     }
 
@@ -2070,7 +2070,7 @@
             return wrap((Javadoc) comment);
         if(comment instanceof LineComment)
             return wrap((LineComment) comment);
-        
+
         throw new NotImplementedException();
     }
 
@@ -2089,7 +2089,7 @@
     }
 
     private static IStrategoTerm wrapBody(BodyDeclaration decl) {
-       
+
         if(decl instanceof AbstractTypeDeclaration)
             return wrapTypeDecl((AbstractTypeDeclaration) decl);
         if(decl instanceof AnnotationTypeMemberDeclaration)
@@ -2102,7 +2102,7 @@
             return wrap((Initializer) decl);
         if(decl instanceof MethodDeclaration)
             return wrap((MethodDeclaration) decl);
-        
+
         throw new NotImplementedException();
     }
 
@@ -2156,10 +2156,10 @@
     }
 
     static IStrategoTerm wrapStatement(Statement stat) {
-        
+
         if(stat == null)
             return None.INSTANCE;
-        
+
         if(stat instanceof ExpressionStatement)
             return wrap((ExpressionStatement) stat);
         if(stat instanceof VariableDeclarationStatement)
@@ -2217,14 +2217,14 @@
 
     private static IStrategoAppl wrap(SuperConstructorInvocation invocation) {
         if(invocation == null)
-            return None.INSTANCE; 
+            return None.INSTANCE;
         else
             return new WrappedSuperConstructorInvocation(invocation);
     }
 
     private static IStrategoAppl wrap(SwitchCase switchcase) {
         if(switchcase == null)
-            return None.INSTANCE; 
+            return None.INSTANCE;
         else
             return new WrappedSwitchCase(switchcase);
     }
@@ -2299,7 +2299,7 @@
             return new WrappedEnhancedForStatement(statement);
     }
 
-    private static IStrategoAppl wrap(EmptyStatement statement) {   
+    private static IStrategoAppl wrap(EmptyStatement statement) {
         if(statement == null)
             return None.INSTANCE;
         else
@@ -2540,12 +2540,12 @@
             return wrap((TypeLiteral) expr);
         if(expr instanceof VariableDeclarationExpression)
             return wrap((VariableDeclarationExpression) expr);
-        
+
         throw new NotImplementedException("Unknown Expression Type:" + expr.getClass());
     }
 
     private static IStrategoTerm wrapAnnotation(Annotation anno) {
-        
+
         if(anno instanceof MarkerAnnotation)
             return wrap((MarkerAnnotation) anno);
         if(anno instanceof NormalAnnotation)
@@ -2571,7 +2571,7 @@
     }
 
     private static IStrategoAppl wrap(MarkerAnnotation annotation) {
-        if(annotation == null) 
+        if(annotation == null)
             return None.INSTANCE;
         else
             return new WrappedMarkerAnnotation(annotation);
@@ -2613,7 +2613,7 @@
     }
 
     private static IStrategoAppl wrap(StringLiteral literal) {
-        if(literal == null) 
+        if(literal == null)
             return None.INSTANCE;
         else
             return new WrappedStringLiteral(literal);
@@ -2669,7 +2669,7 @@
     }
 
     private static IStrategoAppl wrap(InfixExpression expression) {
-        
+
         if(expression == null)
             return None.INSTANCE;
         else
@@ -2677,18 +2677,18 @@
 
 /*
         InfixExpression.Operator op = expression.getOperator();
-        
+
         if(op == InfixExpression.Operator.PLUS)
-            return new WrappedPlus(expression); 
+            return new WrappedPlus(expression);
         if(op == InfixExpression.Operator.MINUS)
-            return new WrappedMinus(expression); 
+            return new WrappedMinus(expression);
         if(op == InfixExpression.Operator.TIMES)
-            return new WrappedTimes(expression); 
+            return new WrappedTimes(expression);
         if(op == InfixExpression.Operator.DIVIDE)
-            return new WrappedDivide(expression); 
+            return new WrappedDivide(expression);
 
         throw new NotImplementedException("Unknown InfixExpression Operator " + expression.getO);
-*/  
+*/
     }
 
     private static IStrategoAppl wrap(FieldAccess access) {
@@ -2743,7 +2743,7 @@
     private static IStrategoAppl wrap(ArrayInitializer initializer) {
         if(initializer == null)
             return None.INSTANCE;
-        else 
+        else
             return new WrappedArrayInitializer(initializer);
     }
 
@@ -2762,7 +2762,7 @@
     }
 
     public static IStrategoTerm wrapType(Type type) {
-        
+
         if(type instanceof ArrayType)
             return wrap((ArrayType) type);
         if(type instanceof ParameterizedType)
@@ -2775,10 +2775,10 @@
             return wrap((SimpleType) type);
         if(type instanceof WildcardType)
             return wrap((WildcardType) type);
-        
+
         if(type == null)
             return None.INSTANCE;
-        
+
         throw new NotImplementedException(" " + type.getClass());
     }
 
@@ -2804,7 +2804,7 @@
     }
 
     private static IStrategoAppl wrap(PrimitiveType type) {
-        
+
         if(type == null)
             return None.INSTANCE;
         else
@@ -2822,7 +2822,7 @@
             return new WrappedByteType(type);
         if(type.getPrimitiveTypeCode() == PrimitiveType.LONG)
             return new WrappedLongType(type);
-        
+
         throw new NotImplementedException();
         */
     }
@@ -2831,13 +2831,13 @@
         if(type == null)
             return None.INSTANCE;
         else
-            return new WrappedParameterizedType(type); 
+            return new WrappedParameterizedType(type);
     }
 
     public static IStrategoAppl wrap(ModifierKeyword keyword) {
         if(keyword == null)
             return None.INSTANCE;
-        else 
+        else
             return new WrappedModifierKeyword(keyword);
     }
 
@@ -2862,7 +2862,7 @@
             return wrap((EnumDeclaration) decl);
         if(decl instanceof TypeDeclaration)
             return wrap((TypeDeclaration) decl);
-        
+
         throw new NotImplementedException();
     }
 
@@ -2900,7 +2900,7 @@
             terms[i] = ECJFactory.wrap(parameters[i]);
         return new ECJGenericList(terms);
     }
-    
+
     public static IStrategoTerm wrap(IField[] fields) {
         IStrategoTerm[] terms = new IStrategoTerm[fields.length];
         for(int i = 0, sz = fields.length; i < sz; i++)
@@ -2930,6 +2930,13 @@
             return new WrappedIProject(proj);
     }
 
+    public static IStrategoTerm wrap(IProject[] projects) {
+        IStrategoTerm[] terms = new IStrategoTerm[projects.length];
+        for(int i = 0, sz = projects.length; i < sz; i++)
+            terms[i] = ECJFactory.wrap(projects[i]);
+        return new ECJGenericList(terms);
+    }
+
     public static IStrategoTerm wrap(String[] strs) {
         IStrategoTerm[] r = new IStrategoTerm[strs.length];
         for(int i = 0; i < r.length; i++)
@@ -2947,12 +2954,12 @@
     public void setAST(AST ast) {
         this.ast = ast;
     }
-/*    
+/*
     @Deprecated
     public IStrategoAppl replaceAppl(IStrategoConstructor constructor, IStrategoTerm[] kids, IStrategoTerm old) {
         return replaceAppl(constructor, kids, (IStrategoAppl)old);
     }
-    
+
     public IStrategoAppl replaceAppl(IStrategoConstructor constructor, IStrategoTerm[] kids, IStrategoAppl old) {
         final IStrategoAppl r = makeAppl(constructor, kids);
         // FIXME None should be in a different hierarchy than other WrappedASTNodes
@@ -2970,12 +2977,12 @@
     public IStrategoTuple replaceTuple(IStrategoTerm[] kids, IStrategoTuple old) {
         return makeTuple(kids);
     }
-    
+
     public IStrategoList replaceList(IStrategoTerm[] kids, IStrategoList old) {
         return makeList(kids);
     }
 */
-    
+
     public static IStrategoTerm wrap(IType t) {
         if(t == null)
             return None.INSTANCE;
@@ -3028,14 +3035,14 @@
 	public static IStrategoTerm wrapAmbName(String name) {
 		if(name == null)
 			return None.INSTANCE;
-		else 
+		else
 			return new AmbName(name);
 	}
 
 	public static IStrategoTerm wrapDottedName(String name) {
 		if(name == null)
 			return None.INSTANCE;
-		else 
+		else
 			return new DottedName(name);
 	}
 
@@ -3050,7 +3057,7 @@
 			return genericWrap((ASTNode)o);
 		if(o instanceof IType)
 			return wrap((IType)o);
-		
+
 		throw new NotImplementedException(" " + o.getClass());
 	}
 
@@ -3070,7 +3077,7 @@
 			return None.INSTANCE;
 		else
 			return new WrappedActualTypeSignature(s);
-		
+
 	}
 
 	public static IStrategoTerm wrapSignatures(String[] signatures) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -18,17 +18,17 @@
 public class ECJGenericAppl extends SkeletonStrategoAppl {
 
     private static final long serialVersionUID = 1L;
-    
+
     private IStrategoConstructor ctor;
     private IStrategoTerm[] kids;
-    
+
 
     ECJGenericAppl(IStrategoConstructor ctor, IStrategoTerm[] kids) {
         super(TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
         this.ctor = ctor;
         this.kids = kids;
     }
-    
+
     @Override
     public IStrategoConstructor getConstructor() {
         return ctor;
@@ -38,7 +38,7 @@
     public IStrategoTerm getSubterm(int index) {
         return kids[index];
     }
-    
+
     @Override
     public IStrategoTerm[] getAllSubterms() {
         return kids;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -1,8 +1,8 @@
 /*
- * Created on 4. okt.. 2006
+ * Created on 4. okt. 2006
+ *
+ * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
  * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
@@ -18,24 +18,24 @@
 public class ECJGenericList extends SkeletonStrategoList {
 
     private static final long serialVersionUID = 1L;
-    
+
     private IStrategoTerm[] kids;
 
     ECJGenericList(IStrategoTerm[] kids) {
         super(TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
         this.kids = kids;
     }
-    
+
     @Override
     public IStrategoList tail() {
         return new ECJGenericList(doTail());
     }
-    
+
     @Override
     public IStrategoList prepend(IStrategoTerm prefix) {
-        throw new NotImplementedException(); 
+        throw new NotImplementedException();
     }
-    
+
     private IStrategoTerm[] doTail() {
         IStrategoTerm[] tail = new IStrategoTerm[kids.length - 1];
         System.arraycopy(kids, 1, tail, 0, tail.length);
@@ -58,11 +58,6 @@
     }
 
     @Override
-    public String toString(int maxDepth) {
-        throw new NotImplementedException();
-    }
-
-    @Override
     public <T extends ITermAttachment> T getAttachment(
             TermAttachmentType<T> type) {
         throw new NotImplementedException();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -1,17 +1,22 @@
 /*
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 
+import java.io.IOException;
+
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.jdt.core.IJavaProject;
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTParser;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
 
 public class ECJLibrary extends AbstractStrategoOperatorRegistry {
@@ -21,11 +26,12 @@
     private IJavaProject currentJavaProject;
 	private ASTParser astParser = null;
 	private NullProgressMonitor nullProgressMonitor;
+	private ProjectUtils projectUtils;
 
-    public ECJLibrary() {
+    private ECJLibrary() {
         init();
     }
-    
+
     private void init() {
         add(new ECJ_parse_file());
         add(new ECJ_parse_only());
@@ -68,12 +74,15 @@
         add(new ECJ_signature_to_type());
         add(new ECJ_search_for_supertype_type_refs_no_generics());
         add(new ECJ_binding_of_methoddecl());
+        add(new ECJ_create_java_project());
+        add(new ECJ_delete_project());
+        add(new ECJ_list_projects());
     }
-    
+
     public IProject getCurrentProject() {
         return currentProject;
     }
-    
+
     public void setCurrentProject(IProject currentProject) {
         this.currentProject = currentProject;
     }
@@ -81,7 +90,7 @@
     public IJavaProject getCurrentJavaProject() {
         return currentJavaProject;
     }
-    
+
     public void setCurrentJavaProject(IJavaProject currentJavaProject) {
         this.currentJavaProject = currentJavaProject;
     }
@@ -105,4 +114,23 @@
 	public String getOperatorRegistryName() {
 		return REGISTRY_NAME;
 	}
+
+    public static void attach(Interpreter intp) throws IOException, InterpreterException {
+        attach(intp, new ECJLibrary(), "/share/ecj-library.ctree");
+    }
+
+    ProjectUtils getProjectUtils() {
+        if(projectUtils == null) {
+            projectUtils = new ProjectUtils(getNullProgressMonitor());
+        }
+        return projectUtils;
+    }
+
+    static ECJLibrary registry(IContext env) {
+        return (ECJLibrary) env.getOperatorRegistry(REGISTRY_NAME);
+    }
+
+    public static boolean invokeExceptionHandler(IContext env, Exception e) {
+        return false;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -22,7 +22,7 @@
  * Created on 27. sep.. 2006
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser Public License, v2.1
  */
 
@@ -43,20 +43,20 @@
 
         ECJFactory wef = new ECJFactory();
         Interpreter itp = new Interpreter(wef);
-        itp.addOperatorRegistry(new ECJLibrary());
+        ECJLibrary.attach(itp);
         itp.load(prg);
         IStrategoTerm t = wef.parseFromTree(n);
         itp.setCurrent(t);
         itp.invoke("main_0_0");
 
     }
-    
-    
+
+
     public static void main(String[] args) throws FileNotFoundException, IOException, InterpreterException, CoreException {
        if(args.length > 1)
             parse(args[0], args[1]);
         else
             parse("str/parse-and-dump.rtree", args[0]);
     }
-    
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseFile.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseFile.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseFile.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -16,7 +16,7 @@
  * Created on 27. sep.. 2006
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser Public License, v2.1
  */
 
@@ -31,14 +31,14 @@
             sb.append(s);
             s = r.readLine();
         }
-            
+
         return sb.toString().toCharArray();
     }
 
     static void parse(String prg, String file) throws FileNotFoundException, IOException, InterpreterException {
 
         Interpreter itp = new Interpreter(new ECJFactory());
-        itp.addOperatorRegistry(new ECJLibrary());
+        ECJLibrary.attach(itp);
         itp.load(prg);
         ASTParser parser = ASTParser.newParser(AST.JLS3);
         parser.setSource(getBytes(file));
@@ -50,13 +50,13 @@
         itp.invoke("main_0_0");
 
     }
-    
-    
+
+
     public static void main(String[] args) throws FileNotFoundException, IOException, InterpreterException {
        if(args.length > 1)
             parse(args[0], args[1]);
         else
             parse("str/parse-and-dump.rtree", args[0]);
     }
-    
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseTest.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseTest.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -17,7 +17,7 @@
  * Created on 27. sep.. 2006
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser Public License, v2.1
  */
 
@@ -32,14 +32,14 @@
             sb.append(s);
             s = r.readLine();
         }
-            
+
         return sb.toString().toCharArray();
     }
 
     static void parse(String file) throws FileNotFoundException, IOException, InterpreterException {
 
         Interpreter itp = new Interpreter(new ECJFactory());
-        itp.addOperatorRegistry(new ECJLibrary());
+        ECJLibrary.attach(itp);
         itp.load("deconstructor.rtree");
         ASTParser parser = ASTParser.newParser(AST.JLS3);
         parser.setSource(getBytes(file));
@@ -51,7 +51,7 @@
         itp.invoke("main_0_0");
 
     }
-    
+
     static void recurse(File base) throws FileNotFoundException, IOException, InterpreterException {
         for(String s : base.list()) {
             if(s.endsWith(".java"))
@@ -63,14 +63,14 @@
             }
             //System.out.println(s);
         }
-        
+
     }
-    
+
     public static void main(String[] args) throws FileNotFoundException, IOException, InterpreterException {
         File f = new File(args[0]);
-        
+
         recurse(f);
         System.out.println("Finished");
     }
-    
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_binding_of_methoddecl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_binding_of_methoddecl.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_binding_of_methoddecl.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -16,9 +16,9 @@
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class ECJ_binding_of_methoddecl extends AbstractPrimitive {
+class ECJ_binding_of_methoddecl extends AbstractPrimitive {
 
-    public ECJ_binding_of_methoddecl() {
+    ECJ_binding_of_methoddecl() {
         super("ECJ_binding_of_methoddecl", 0, 1);
     }
 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_java_project.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_java_project.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -0,0 +1,42 @@
+/*
+ * Created on 15. des. 2011
+ *
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser Public License, v2.1
+ */
+package org.spoofax.interpreter.library.ecj;
+
+import org.eclipse.core.runtime.CoreException;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+class ECJ_create_java_project extends AbstractPrimitive {
+
+    ECJ_create_java_project() {
+        super("ECJ_create_java_project", 0, 1);
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+            throws InterpreterException {
+        ECJLibrary lib = ECJLibrary.registry(env);
+        ProjectUtils pu = lib.getProjectUtils();
+        if(!Tools.isTermString(tvars[0]))
+            return false;
+        IStrategoString s = (IStrategoString) tvars[0];
+        try {
+            env.setCurrent(ECJFactory.wrap(pu.createJavaProject(s.stringValue(), false)));
+        } catch(CoreException e) {
+            return ECJLibrary.invokeExceptionHandler(env, e);
+        }
+        return true;
+    }
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_package.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_package.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_package.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -2,7 +2,7 @@
  * Created on 9. okt.. 2006
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
@@ -20,9 +20,9 @@
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class ECJ_create_package extends ECJPrimitive {
+class ECJ_create_package extends ECJPrimitive {
 
-    public ECJ_create_package() {
+    ECJ_create_package() {
         super("ECJ_create_package", 0, 2);
     }
 
@@ -39,18 +39,18 @@
         final String baseName = Tools.asJavaString(tvars[0]);
         IProject project = getLibrary(env).getCurrentProject();
         IContainer container = baseName.length() == 0 ? project : project.getFolder(baseName);
-        
+
         try {
         	if(!packageName.equals("")) {
         		String[] xs = packageName.split("\\.");
         		for(int i = 0; i < xs.length; i++) {
-        			container = container.getFolder(new Path(xs[i]));	
+        			container = container.getFolder(new Path(xs[i]));
         			if(!container.exists()) {
         				((IFolder)container).create(true, true, getLibrary(env).getNullProgressMonitor());
         			}
         		}
         		env.setCurrent(ECJFactory.wrap(JavaCore.create(container)));
-        	} 
+        	}
         } catch(CoreException e) {
         	e.printStackTrace();
         	return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_project.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_project.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_project.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -2,16 +2,19 @@
  * Created on 9. okt.. 2006
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 
-import org.spoofax.NotImplementedException;
+import org.eclipse.core.runtime.CoreException;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class ECJ_create_project extends AbstractPrimitive {
@@ -23,8 +26,17 @@
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
-        // TODO Auto-generated method stub
-        throw new NotImplementedException();
+        ECJLibrary lib = ECJLibrary.registry(env);
+        ProjectUtils pu = lib.getProjectUtils();
+        if(!Tools.isTermString(tvars[0]))
+            return false;
+        IStrategoString s = (IStrategoString) tvars[0];
+        try {
+            env.setCurrent(ECJFactory.wrap(pu.createProject(s.stringValue(), false)));
+        } catch(CoreException e) {
+            return ECJLibrary.invokeExceptionHandler(env, e);
+        }
+        return true;
     }
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_current_java_project.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_current_java_project.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_current_java_project.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -2,7 +2,7 @@
  * Created on 9. okt.. 2006
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
@@ -19,14 +19,14 @@
     public ECJ_current_java_project() {
         super("ECJ_current_java_project", 0, 0);
     }
-    
+
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
         ECJLibrary ecj = (ECJLibrary) env.getOperatorRegistry(ECJLibrary.REGISTRY_NAME);
         if(ecj == null)
             return false;
-        
+
         env.setCurrent(ECJFactory.wrap(ecj.getCurrentJavaProject()));
         return true;
     }

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_delete_project.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_delete_project.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -0,0 +1,37 @@
+/*
+ * Created on 15. des. 2011
+ *
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser Public License, v2.1
+ */
+package org.spoofax.interpreter.library.ecj;
+
+import org.eclipse.core.runtime.CoreException;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+class ECJ_delete_project extends AbstractPrimitive {
+
+    ECJ_delete_project() {
+        super("ECJ_delete_project", 0, 1);
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+            throws InterpreterException {
+        ECJLibrary lib = ECJLibrary.registry(env);
+        ProjectUtils pu = lib.getProjectUtils();
+        if(!ECJTools.isIProject(tvars[0]))
+            return false;
+        try {
+            return pu.deleteProject(ECJTools.asIProject(tvars[0]));
+        } catch(CoreException e) {
+            return ECJLibrary.invokeExceptionHandler(env, e);
+        }
+    }
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_list_projects.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_list_projects.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -0,0 +1,37 @@
+/*
+ * Created on 15. des. 2011
+ *
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser Public License, v2.1
+ */
+package org.spoofax.interpreter.library.ecj;
+
+import org.eclipse.core.runtime.CoreException;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+class ECJ_list_projects extends AbstractPrimitive {
+
+    ECJ_list_projects() {
+        super("ECJ_list_projects", 0, 0);
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+            throws InterpreterException {
+        final ECJLibrary lib = ECJLibrary.registry(env);
+        final ProjectUtils pu = lib.getProjectUtils();
+        try {
+            env.setCurrent(ECJFactory.wrap(pu.listProjects()));
+        } catch(CoreException e) {
+            return ECJLibrary.invokeExceptionHandler(env, e);
+        }
+        return true;
+    }
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_open_project.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_open_project.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_open_project.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -1,8 +1,8 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
  * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
@@ -24,19 +24,20 @@
     public ECJ_open_project() {
         super("ECJ_open_project", 0, 1);
     }
+
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
-        
-        if(!Tools.isTermString(tvars[0]))
+
+        if (!Tools.isTermString(tvars[0]))
             return false;
-        
+
         String name = Tools.javaString(tvars[0]);
-        
+
         IWorkspace workspace = ResourcesPlugin.getWorkspace();
         IWorkspaceRoot root = workspace.getRoot();
         IProject proj = root.getProject(name);
-        if(proj == null)
+        if (proj == null)
             return false;
         env.setCurrent(ECJFactory.wrap(proj));
         return true;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -69,7 +69,8 @@
 
 			//System.out.println("before: " + root);
 			root.recordModifications();
-			List newTds = new ArrayList();
+			@SuppressWarnings("rawtypes")
+            List newTds = new ArrayList();
 			for(Object ob : root.types()) {
 				TypeDeclaration td = (TypeDeclaration) ob;
 
@@ -79,7 +80,7 @@
 					final IStrategoTerm term = env.current();
 					if(term instanceof WrappedASTNode)
 						newTds.add(((WrappedASTNode)term).getWrappee());
-					else 
+					else
 						ecj.log("Rewriting types resulted in an invalid tree");
 				} else {
 					newTds.add(td);
@@ -87,8 +88,9 @@
 			}
 			root.types().clear();
 			root.types().addAll(newTds);
-			
-			List newImports = new ArrayList();
+
+			@SuppressWarnings("rawtypes")
+            List newImports = new ArrayList();
 			env.setCurrent(ECJFactory.wrap(root.imports()));
 			CallT s = (CallT)svars[1];
 			if(s.evaluate(env)) {
@@ -112,7 +114,7 @@
 			}
 			root.imports().clear();
 			root.imports().addAll(newImports);
-			
+
 			//System.out.println("after: " + root);
 			TextEdit te = root.rewrite(document, cu.getJavaProject().getOptions(true));
 			te.apply(document);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -2,7 +2,7 @@
  * Created on 9. sep. 2008
  *
  * Copyright (c) 2005-2008, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
@@ -28,9 +28,9 @@
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class ECJ_search_for_supertype_type_refs_no_generics extends AbstractPrimitive {
+class ECJ_search_for_supertype_type_refs_no_generics extends AbstractPrimitive {
 
-	public ECJ_search_for_supertype_type_refs_no_generics() {
+	ECJ_search_for_supertype_type_refs_no_generics() {
 		super("ECJ_search_for_supertype_type_refs_no_generics", 0, 2);
 	}
 
@@ -43,7 +43,7 @@
 		if(!Tools.isTermString(tvars[1]))
 			return false;
 
-		// TODO: This only works in 3.4, what to do for other versions? 
+		// TODO: This only works in 3.4, what to do for other versions?
 
 		// FIXME this method will currently only return exact type matches.
 		//       it is unclear whether searches for the supertype Foo<Object>
@@ -52,13 +52,13 @@
 
 		final String className = Tools.asJavaString(tvars[1]).replaceAll("*", "[^,]+");
 		final SearchPattern sp = SearchPattern.createPattern(
-				className, 
-				IJavaSearchConstants.TYPE, 
-				IJavaSearchConstants.IMPLEMENTORS, //SUPERTYPE_TYPE_REFERENCE, 
+				className,
+				IJavaSearchConstants.TYPE,
+				IJavaSearchConstants.IMPLEMENTORS, //SUPERTYPE_TYPE_REFERENCE,
 				SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);
 
 
-		try { 
+		try {
 			final IJavaSearchScope ss = SearchEngine.createHierarchyScope(ECJTools.asIType(tvars[0]));
 			final Collection<IType> results = new LinkedList<IType>();
 			final SearchRequestor requestor = new SearchRequestor() {
@@ -83,9 +83,9 @@
 	        final ECJLibrary ecj = (ECJLibrary)env.getOperatorRegistry(ECJLibrary.REGISTRY_NAME);
 
 
-			se.search(sp, 
+			se.search(sp,
 					new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() },
-					ss, 
+					ss,
 					requestor,
 					ecj.getNullProgressMonitor());
 			final IStrategoTerm[] r = new IStrategoTerm[results.size()];

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -2,7 +2,7 @@
  * Created on 9. okt.. 2006
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
@@ -19,28 +19,28 @@
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class ECJ_signature_to_type extends ECJPrimitive {
+class ECJ_signature_to_type extends ECJPrimitive {
 
-    public ECJ_signature_to_type() {
+    ECJ_signature_to_type() {
         super("ECJ_signature_to_type", 0, 1);
     }
-    
+
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
-    	
+
     	if(!Tools.isTermString(tvars[0]))
     		return false;
-    	
+
     	final ECJFactory factory = (ECJFactory)env.getFactory();
     	final Type t = signatureStringToType(
-    			factory.getAST(), 
+    			factory.getAST(),
     			Signature.createTypeSignature(Tools.asJavaString(tvars[0]), false));
     	env.setCurrent(ECJFactory.wrapType(t));
     	return true;
-    	
+
     }
-    
+
 	@SuppressWarnings("unchecked")
     private Type signatureStringToType(final AST ast, final String signatureName) {
 		final String[] args = Signature.getTypeArguments(signatureName);
@@ -49,7 +49,7 @@
 		final Name n = qual.length() == 0 ? ast.newName(base) : ast.newName(qual + "." + base);
 
 		final Type bt = ast.newSimpleType(n);
-		if(args.length == 0) 
+		if(args.length == 0)
 			return bt;
 		else {
 			ParameterizedType pt = ast.newParameterizedType(bt);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/TestECJAdapter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/TestECJAdapter.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/TestECJAdapter.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -2,7 +2,7 @@
  * Created on 9. okt.. 2006
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
@@ -24,7 +24,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class TestECJAdapter extends TestCase {
-    
+
     protected InputStream findFile(String name) throws CoreException {
         IWorkspace workspace = ResourcesPlugin.getWorkspace();
         IWorkspaceRoot root = workspace.getRoot();
@@ -34,7 +34,7 @@
         IFile file = (IFile) project.findMember("str/" + name + ".rtree");
         return file.getContents();
     }
-    
+
     public void testTest1() throws IOException, InterpreterException, CoreException {
         interpTest("test1", "()", "()");
     }
@@ -74,7 +74,7 @@
     protected void interpTestFail(String string, String in) throws IOException, InterpreterException {
         ECJFactory f = new ECJFactory();
         Interpreter itp = new Interpreter(f);
-        itp.addOperatorRegistry(new ECJLibrary());
+        ECJLibrary.attach(itp);
         itp.load("str/" + string + ".rtree");
         IStrategoTerm inTerm = f.parseFromString(in);
         itp.setCurrent(inTerm);
@@ -85,7 +85,7 @@
         ECJFactory f = new ECJFactory();
         Interpreter itp = new Interpreter(f);
         //DebugUtil.debugging = true;
-        itp.addOperatorRegistry(new ECJLibrary());
+        ECJLibrary.attach(itp);
         itp.load(findFile(string));
         IStrategoTerm inTerm = f.parseFromString(in);
         IStrategoTerm outTerm = f.parseFromString(out);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Thu Dec 15 21:13:34 2011	(r23780)
@@ -14,7 +14,7 @@
 signature
   constructors
   FILE           : String -> FILE
-  
+
   Project        : Term -> Project
   Binding        : Int * Int * String -> Binding
   TypeBinding    : List(String) * String * List(TypeBinding) * TypeBinding * List(TypeBinding) * Int * ITypeBinding -> TypeBinding
@@ -26,7 +26,7 @@
   ITypeHierarchy : IType * List(IType) -> ITypeHierarchy
   PrimitiveName  : String -> Name
   ActualTypeSignature : String * String * String * ActualTypeSignature -> ActualTypeSignature
-  
+
 strategies
 
   /** Parse a file inside an Eclipse project and return the AST. The file path must be
@@ -44,27 +44,36 @@
     */
   ecj-parse-file = ?FILE(fileName) ; prim("ECJ_parse_file", fileName)
 
+  /** @type _ -> List(ECJProject) */
+  ecj-list-projects = prim("ECJ_list_projects")
+
+  /** @type ECJProject -> ? */
+  ecj-delete-project = ?proj ; prim("ECJ_delete_project", proj)
+
   /** @type String -> ECJProject */
   ecj-open-project = ?path ; prim("ECJ_open_project", path)
-  
-  /** @type String -> ECJProject */
+
+  /** @type String -> IProject */
   ecj-create-project = ?path ; prim("ECJ_create_project", path)
 
+  /** @type String -> IJavaProject */
+  ecj-create-java-project = ?path ; prim("ECJ_create_java_cd ..project", path)
+
   /** @param IProject 
     * @type String -> ?success
     */
   ecj-add-source-folder(|project) = ?path ; prim("ECJ_add_source_folder", project, path)
-  
+
   /** @param IProject 
     * @type String -> ?success
     */
   ecj-add-jar(|project) = ?path ; prim("ECJ_add_jar", path, project)
-    
+
   /** @param IProject 
     * @type FILE -> ASTNode 
     */
   ecj-parse-and-resolve(|project) = ?FILE(name) ; prim("ECJ_parse_and_resolve", project, name) 
-  
+
   /** @type ASTNode -> ASTNode */
   ecj-is-valid-ast-node = 
        (?t ; prim("ECJ_is_valid_ast_node", t))
@@ -77,7 +86,7 @@
      ecj-is-Name
    ; ?name
    ; prim("ECJ_binding_of_name", name)
-   
+
   /** @type Name -> TypeBinding */
   ecj-binding-of = 
      ecj-is-TypeDeclaration
@@ -113,7 +122,6 @@
       ecj-is-MethodDeclaration
     ; ?md
     ; prim("ECJ_binding_of_methoddecl", md)
-    
 
 strategies
 
@@ -133,7 +141,6 @@
      ?source
    ; prim("ECJ_is_subtype_compatible", target, source)
 
-    
 strategies
 
   /** @type MethodInvocation -> MethodBinding */
@@ -153,16 +160,16 @@
       ?SuperConstructorInvocation(_, _, _)
     ; ?meth
     ; prim("ECJ_method_of_superctorinvoc", meth)
-    
+
 strategies
 
   ecj-is-TypeDeclaration = 
       ?AnnotationTypeDeclaration(_, _, _, _)
     + ?EnumDeclaration(_, _, _, _, _, _)
     + ?TypeDeclaration(_, _, _, _, _, _ ,_,_)
-      
+
   ecj-is-IType = ?"IType"#(_)
-  
+
   ecj-is-Type = 
       ?ArrayType(_, _, _)
     + ?ParameterizedType(_, _)
@@ -175,7 +182,7 @@
       ?SimpleName(_)
     + ?QualifiedName(_, _)
     + ?PrimitiveName(_)
-   
+
   ecj-is-Expression =
       ?MarkerAnnotation(_)
     + ?NormalAnnotation(_,_)
@@ -209,17 +216,17 @@
   ecj-is-CompilationUnit = ?CompilationUnit(_, _, _)
 
   ecj-is-DottedName = ?DottedName(_)
-  
+
   ecj-is-MethodDeclaration = ?MethodDeclaration(_, _, _, _, _, _, _, _)
 
   ecj-is-FieldDeclaration = ?FieldDeclaration(_, _, _, _)
 
   ecj-is-SimpleName = ?SimpleName(_)    
-  
+
   ecj-is-Javadoc = ?Javadoc(_)
-  
+
   ecj-is-TypeBinding = ?TypeBinding(_, _, _, _, _, _, _)
-  
+
 strategies
 
   /** @type Term -> ECJProject */
@@ -287,7 +294,7 @@
   ecj-hierarchy-for-type = 
     ?type
     ; prim("ECJ_hierarchy_for_type", type)
-    
+
   /** @type IType -> ICompilationUnit */    
   ecj-icompilation-unit-for-type =
     ?type
@@ -317,7 +324,7 @@
   ecj-rewrite-file(typerw, importrw) = 
     ?cu
     ; prim("ECJ_rewrite_file", typerw, importrw | cu)
-    
+
 strategies
 
   /** 
@@ -334,7 +341,7 @@
 
   /** @type PrimitiveName -> String */
   ecj-as-dotted-string = ?PrimitiveName(<id>)
-  
+
   /** @type _ -> SimpleName / QualifiedName */
   ecj-name-of = ?TypeDeclaration(_, _, <id>, _, _, _, _, _)   
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/RecursiveScriptTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/RecursiveScriptTest.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/RecursiveScriptTest.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -2,7 +2,7 @@
  * Created on 24. jan.. 2007
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
@@ -16,7 +16,6 @@
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTParser;
 import org.eclipse.jdt.core.dom.CompilationUnit;
-import org.spoofax.interpreter.adapter.ecj.ECJFactory;
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.ecj.ECJLibrary;
@@ -34,7 +33,7 @@
             sb.append(s);
             s = r.readLine();
         }
-            
+
         return sb.toString().toCharArray();
     }
 
@@ -56,10 +55,10 @@
         //to.prettyPrint(pp);
         //System.out.println(to.getClass());
         //System.out.println(pp.getString());
-        
+
         //System.out.println(((WrappedASTNode)to).getWrappee().toString());
     }
-    
+
     void recurse(File base) throws FileNotFoundException, IOException, InterpreterException {
         for(String s : base.list()) {
             if(s.endsWith(".java"))
@@ -71,9 +70,9 @@
             }
             //System.out.println(s);
         }
-        
+
     }
-    
+
     public static void main(String[] args) throws FileNotFoundException, IOException, InterpreterException {
         RecursiveScriptTest rst = new RecursiveScriptTest("scripts/for-check.ctree");
         rst.recurse(new File(args[0]));
@@ -83,13 +82,13 @@
     private ECJFactory dataFactory;
     private TermFactory programFactory;
     private Interpreter interp;
-    private ASTParser parser; 
-    
-    RecursiveScriptTest(String script) {
+    private ASTParser parser;
+
+    RecursiveScriptTest(String script) throws IOException, InterpreterException {
         programFactory = new TermFactory();
         dataFactory = new ECJFactory();
         interp = new Interpreter(dataFactory, programFactory);
-        interp.addOperatorRegistry(new ECJLibrary());
+        ECJLibrary.attach(interp);
         parser = ASTParser.newParser(AST.JLS3);
         try {
             interp.load(script);
@@ -99,5 +98,5 @@
             e.printStackTrace();
         }
     }
-    
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/ProjectUtils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/ProjectUtils.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/ProjectUtils.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -1,7 +1,7 @@
 /*
  * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
- * Licensed under the GNU Lesser General Public License, v2.1 
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 
 package org.spoofax.interpreter.library.ecj;
@@ -28,99 +28,129 @@
 import org.eclipse.jdt.core.IJavaProject;
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.JavaModelException;
-import org.eclipse.jdt.core.dom.AST;
-import org.eclipse.jdt.core.dom.ASTParser;
 import org.eclipse.jdt.launching.JavaRuntime;
 
 public class ProjectUtils {
 
-	protected NullProgressMonitor nullProgress = new NullProgressMonitor();
-	protected ASTParser astParser = ASTParser.newParser(AST.JLS3);
-	private int counter = 0;
-
-	protected ICompilationUnit addCompilationUnit(IProject project, final String fileName, final String cu)
-	throws CoreException {
-		final char[] chs = new char[cu.length()];
-		cu.getChars(0, chs.length, chs, 0);
-
-		ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(cu.getBytes()); 
-		IFile file = project.getFile(new Path(fileName));
-		file.create(byteArrayInputStream, true, nullProgress);
-		if(!file.exists())
-			return null;
-
-		return (ICompilationUnit) JavaCore.create(file);
-	}
-
-	public ICompilationUnit createCompilationUnits(IJavaProject javaProject, String[] compilationUnits) throws CoreException {
-		ICompilationUnit icu = null;
-		for(String cu : compilationUnits) {
-			ICompilationUnit c = addCompilationUnit(javaProject.getProject(), "Test" + counter + ".java", cu);
-			counter++;
-			if(icu == null)
-				icu = c;
-		}
-
-		return icu;
-	}
-
-	public IJavaProject createDummyJavaProject() throws CoreException {
-		
-		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
-		IProject project = root.getProject("DummyProject");
-		project.delete(true, nullProgress);
-		project.create(nullProgress);
-		project.open(nullProgress);
-		
-		IProjectDescription description = project.getDescription();
-		String[] natures = description.getNatureIds();
-		String[] newNatures = new String[natures.length + 1];
-		System.arraycopy(natures, 0, newNatures, 0, natures.length);
-		newNatures[natures.length] = JavaCore.NATURE_ID;
-		description.setNatureIds(newNatures);
-		project.setDescription(description, nullProgress);
-		
-		IJavaProject javaProject = JavaCore.create(project);
-		addClasspathEntry(javaProject, JavaRuntime.getDefaultJREContainerEntry());
-		
-		return javaProject;
-	}
-
-	public void addClasspathEntry(IJavaProject javaProject, IClasspathEntry e) throws JavaModelException {
-		Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>();
-		entries.addAll(Arrays.asList(javaProject.getRawClasspath()));
-		entries.add(e);
-		javaProject.setRawClasspath(entries.toArray(new IClasspathEntry[entries.size()]), nullProgress);
-	}
-
-	public ASTParser getParser() {
-		return astParser;
-	}
-
-	public IProgressMonitor getMonitor() {
-		return nullProgress;
-	}
-
-	public IJavaElement createPackage(IJavaProject javaProject, String packageName) throws CoreException {
-		
-		IProject project = javaProject.getProject();
-		IContainer container = project;
-		if(!packageName.equals("")) {
-			String[] xs = packageName.split("\\.");
-			for(int i = 0; i < xs.length; i++) {
-				container = container.getFolder(new Path(xs[i]));	
-				if(!container.exists()) {
-					((IFolder)container).create(true, true, nullProgress);
-				}
-			}
-		}
-		return JavaCore.create(container);
-		
-	}
-
-	public ICompilationUnit createCompilationUnit(IProject project,
-			String fileName, String source) throws CoreException {
-		return addCompilationUnit(project, fileName, source);
-	}
+    protected final IProgressMonitor nullProgress;
+    private int counter = 0;
+
+    public ProjectUtils(IProgressMonitor progressMonitor) {
+        nullProgress = progressMonitor;
+    }
+
+    public ProjectUtils() {
+        this(new NullProgressMonitor());
+    }
+
+    protected ICompilationUnit addCompilationUnit(IProject project,
+            final String fileName, final String cu) throws CoreException {
+        final char[] chs = new char[cu.length()];
+        cu.getChars(0, chs.length, chs, 0);
+
+        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(
+                cu.getBytes());
+        IFile file = project.getFile(new Path(fileName));
+        file.create(byteArrayInputStream, true, nullProgress);
+        if (!file.exists())
+            return null;
+
+        return (ICompilationUnit) JavaCore.create(file);
+    }
+
+    public ICompilationUnit createCompilationUnits(IJavaProject javaProject,
+            String[] compilationUnits) throws CoreException {
+        ICompilationUnit icu = null;
+        for (String cu : compilationUnits) {
+            ICompilationUnit c = addCompilationUnit(javaProject.getProject(),
+                    "Test" + counter + ".java", cu);
+            counter++;
+            if (icu == null)
+                icu = c;
+        }
+
+        return icu;
+    }
+
+    @Deprecated
+    public IJavaProject createDummyJavaProject() throws CoreException {
+        return createJavaProject("DummyProject", true);
+    }
+
+    public IJavaProject createJavaProject(String projectName, boolean wipe)
+            throws CoreException {
+        IProject project = createProject(projectName, wipe);
+
+        IProjectDescription description = project.getDescription();
+        String[] natures = description.getNatureIds();
+        String[] newNatures = new String[natures.length + 1];
+        System.arraycopy(natures, 0, newNatures, 0, natures.length);
+        newNatures[natures.length] = JavaCore.NATURE_ID;
+        description.setNatureIds(newNatures);
+        project.setDescription(description, nullProgress);
+
+        IJavaProject javaProject = JavaCore.create(project);
+        addClasspathEntry(javaProject,
+                JavaRuntime.getDefaultJREContainerEntry());
+
+        return javaProject;
+    }
+
+    public IProject createProject(String projectName, boolean wipe)
+            throws CoreException {
+        IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
+        IProject project = root.getProject(projectName);
+        if (wipe) {
+            project.delete(true, nullProgress);
+        }
+        project.create(nullProgress);
+        project.open(nullProgress);
+        return project;
+    }
+
+    public IProject[] listProjects() throws CoreException {
+        IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
+        return root.getProjects();
+    }
+
+    public void addClasspathEntry(IJavaProject javaProject, IClasspathEntry e)
+            throws JavaModelException {
+        Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>();
+        entries.addAll(Arrays.asList(javaProject.getRawClasspath()));
+        entries.add(e);
+        javaProject.setRawClasspath(
+                entries.toArray(new IClasspathEntry[entries.size()]),
+                nullProgress);
+    }
+
+    public IProgressMonitor getMonitor() {
+        return nullProgress;
+    }
+
+    public IJavaElement createPackage(IJavaProject javaProject,
+            String packageName) throws CoreException {
+        IProject project = javaProject.getProject();
+        IContainer container = project;
+        if (!packageName.equals("")) {
+            String[] xs = packageName.split("\\.");
+            for (int i = 0; i < xs.length; i++) {
+                container = container.getFolder(new Path(xs[i]));
+                if (!container.exists()) {
+                    ((IFolder) container).create(true, true, nullProgress);
+                }
+            }
+        }
+        return JavaCore.create(container);
+    }
+
+    public ICompilationUnit createCompilationUnit(IProject project,
+            String fileName, String source) throws CoreException {
+        return addCompilationUnit(project, fileName, source);
+    }
+
+    public boolean deleteProject(IProject project) throws CoreException {
+        project.delete(true, nullProgress);
+        return !project.exists();
+    }
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/TestLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/TestLibrary.java	Thu Dec 15 19:16:37 2011	(r23779)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/TestLibrary.java	Thu Dec 15 21:13:34 2011	(r23780)
@@ -1,6 +1,6 @@
 /*
  * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser General Public License, v2.1
  */
 
@@ -24,21 +24,21 @@
  *
  */
 public class TestLibrary {
-    
+
     private ECJFactory wef;
-    private Interpreter interp;        
+    private Interpreter interp;
 
     @Before
     public void setUp() throws IOException, InterpreterException, CoreException {
         wef = new ECJFactory();
         interp = new Interpreter(wef, new TermFactory());
-        interp.addOperatorRegistry(new ECJLibrary());
+        ECJLibrary.attach(interp);
         interp.load(System.getenv("HOME") + "/.nix-profile/share/stratego-lib/libstratego-lib.ctree");
         ProjectUtils pu = new ProjectUtils();
         IJavaProject p = pu.createDummyJavaProject();
         pu.createCompilationUnit(p.getProject(), "Foo.java", "package src; class Foo {}");
     }
-    
+
     @Test
     public void open_parse_match_resolve_method_and_type() throws IOException, InterpreterException, CoreException {
         interp.load(TestLibrary.class.getResourceAsStream("/api-open-parse-match-resolve-method-and-type.ctree"));


From karltk at strategoxt.org  Thu Dec 15 22:14:33 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 21:14:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23781 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library:
	. ssl
Message-ID: <20111215211433.BA3D8108C05C@mx3.tudelft.nl>

Author: karltk
Date: Thu Dec 15 21:14:33 2011
New Revision: 23781
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23781&sc=1

Log:
Added generic library factory method. The idea is to load both the native parts and the ctree into the interpreter at the same time.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java	Thu Dec 15 21:13:34 2011	(r23780)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java	Thu Dec 15 21:14:33 2011	(r23781)
@@ -7,9 +7,14 @@
  */
 package org.spoofax.interpreter.library;
 
+import java.io.IOException;
+import java.io.InputStream;
 import java.util.HashMap;
 import java.util.Map;
 
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
+
 public abstract class AbstractStrategoOperatorRegistry implements IOperatorRegistry {
 
     private final Map<String, AbstractPrimitive> registry;
@@ -40,4 +45,14 @@
     public AbstractPrimitive get(String name) {
         return registry.get(name);
     }
+
+    protected static void attach(Interpreter intp, AbstractStrategoOperatorRegistry op, String ctreeFile) throws IOException, InterpreterException {
+        InputStream ins = op.getClass().getClassLoader().getResourceAsStream(ctreeFile);
+        if(ins == null) {
+            throw new IOException("Failed to load internal library " + ctreeFile);
+        }
+        intp.load(ins);
+        intp.addOperatorRegistry(op);
+    }
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	Thu Dec 15 21:13:34 2011	(r23780)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	Thu Dec 15 21:14:33 2011	(r23781)
@@ -1,9 +1,9 @@
 /*
  * Created on 08.aug.2005
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2
  */
 package org.spoofax.interpreter.library.ssl;
 
@@ -19,7 +19,7 @@
     public static final String REGISTRY_NAME = "SSL";
 
     // FIXME: Move these into environment
-    
+
     private IOAgent ioAgent = new IOAgent();
 
     private StrategoHashMap dynamicRuleTable;
@@ -30,11 +30,11 @@
         initRegistry();
         init();
     }
-    
+
     public String getOperatorRegistryName() {
         return REGISTRY_NAME;
     }
-    
+
     private void initRegistry() {
         add(new SSL_is_int());
         add(new SSL_is_real());
@@ -172,11 +172,11 @@
             tableTable = new StrategoHashMap(128, 75);
         return tableTable;
     }
-    
+
     public IOAgent getIOAgent() {
         return ioAgent;
     }
-    
+
     public void setIOAgent(IOAgent ioAgent) {
         this.ioAgent = ioAgent;
     }
@@ -185,5 +185,5 @@
         return (SSLLibrary)env.getOperatorRegistry(REGISTRY_NAME);
     }
 
-    
+
 }

From karltk at strategoxt.org  Thu Dec 15 22:15:26 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 21:15:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23782 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main:
	java/org/spoofax/interpreter/library/eclipse
	stratego/spoofax/bindings/eclipse
Message-ID: <20111215211526.887212B804C@mx2.tudelft.nl>

Author: karltk
Date: Thu Dec 15 21:15:26 2011
New Revision: 23782
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23782&sc=1

Log:
Changed library instantiation to use factory method instead, so that the ctree is loaded at the same time.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/java/org/spoofax/interpreter/library/eclipse/EFILibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/stratego/spoofax/bindings/eclipse/eclipse-ui.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/java/org/spoofax/interpreter/library/eclipse/EFILibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/java/org/spoofax/interpreter/library/eclipse/EFILibrary.java	Thu Dec 15 21:14:33 2011	(r23781)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/java/org/spoofax/interpreter/library/eclipse/EFILibrary.java	Thu Dec 15 21:15:26 2011	(r23782)
@@ -28,6 +28,6 @@
     }
 
     public static void attach(Interpreter intp) throws IOException, InterpreterException {
-        attach(intp, new EFILibrary(), "/shared/efi-library.ctree");
+        attach(intp, new EFILibrary(), "/share/efi-library.ctree");
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/stratego/spoofax/bindings/eclipse/eclipse-ui.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/stratego/spoofax/bindings/eclipse/eclipse-ui.str	Thu Dec 15 21:14:33 2011	(r23781)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.eclipse/src/main/stratego/spoofax/bindings/eclipse/eclipse-ui.str	Thu Dec 15 21:15:26 2011	(r23782)
@@ -4,12 +4,12 @@
  *
  * Licensed under the GNU Lesser General Public License, v2.1
  *
- * @author Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * @author Karl Trygve Kalleberg <karltk at boblycat dot org>
  */
 
-module org/spoofax/bindings/eclipse/eclipse-ui
+module spoofax/bindings/eclipse/eclipse-ui
 imports
-  stratego-lib
+  libstratego-lib
 strategies
 
   eclipse-ui-show-popup = 

From karltk at strategoxt.org  Thu Dec 15 22:16:33 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 21:16:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23783 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.java: .
	src/main/java/org/spoofax/interpreter/library/java
	src/main/stratego/spoofax/bindings
Message-ID: <20111215211633.1ABB6CC13C@mx4.tudelft.nl>

Author: karltk
Date: Thu Dec 15 21:16:32 2011
New Revision: 23783
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23783&sc=1

Log:
Added generic unwrapping. Added library factory method.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.project
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/GenericWrappedTerm.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFFLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/stratego/spoofax/bindings/java.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.classpath	Thu Dec 15 21:15:26 2011	(r23782)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.classpath	Thu Dec 15 21:16:32 2011	(r23783)
@@ -2,7 +2,6 @@
 <classpath>
 	<classpathentry kind="src" path="src/main/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.core"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="output" path="build/classes"/>
 </classpath>

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.project
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.project	Thu Dec 15 21:15:26 2011	(r23782)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/.project	Thu Dec 15 21:16:32 2011	(r23783)
@@ -10,8 +10,19 @@
 			<arguments>
 			</arguments>
 		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
 	</buildSpec>
 	<natures>
 		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.pde.PluginNature</nature>
 	</natures>
 </projectDescription>

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/GenericWrappedTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/GenericWrappedTerm.java	Thu Dec 15 21:15:26 2011	(r23782)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/GenericWrappedTerm.java	Thu Dec 15 21:16:32 2011	(r23783)
@@ -10,7 +10,7 @@
 import org.spoofax.terms.StrategoConstructor;
 import org.spoofax.terms.StrategoInt;
 
-class GenericWrappedTerm extends StrategoAppl {
+public class GenericWrappedTerm extends StrategoAppl {
 
 	private static final long serialVersionUID = -305297606780539827L;
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFFLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFFLibrary.java	Thu Dec 15 21:15:26 2011	(r23782)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/java/org/spoofax/interpreter/library/java/JFFLibrary.java	Thu Dec 15 21:16:32 2011	(r23783)
@@ -1,6 +1,6 @@
 /*
  * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.java;
@@ -13,6 +13,8 @@
 
 import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
@@ -24,16 +26,17 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 
 public class JFFLibrary extends AbstractStrategoOperatorRegistry {
-	
+
 	public static final String REGISTRY_NAME = "JFI";
-	
-	private Map<Integer, Object> objectWrappers;
+
+	private final ITermFactory termFactory;
+	private final Map<Integer, Object> objectWrappers = new HashMap<Integer, Object>();
 	private int objectCounter;
 	private IStrategoConstructor objWrapCtor;
-	private ITermFactory termFactory; 
 
-	
-	public JFFLibrary() {
+	private JFFLibrary(ITermFactory termFactory) {
+		this.termFactory = termFactory;
+
 		add(new JFF_close_file_channel_0_0());
 		add(new JFF_flip_byte_buffer_0_0());
 		add(new JFF_make_byte_buffer_0_0());
@@ -46,16 +49,16 @@
 		add(new JFF_get_method());
 		add(new JFF_invoke_method());
 		add(new JFF_new_instance());
-		
+
 		init();
 	}
-	
+
 	@Override
 	public String getOperatorRegistryName() {
 		return REGISTRY_NAME;
 	}
 
-	public static boolean invokeExceptionHandler(IContext ctx, IOException e) {
+	public static boolean invokeExceptionHandler(IContext ctx, Exception e) {
 		throw new NotImplementedException();
 	}
 
@@ -64,36 +67,32 @@
 
 		if(!(current instanceof IStrategoTuple))
 			return null;
-		
+
 		IStrategoTuple tuple = (IStrategoTuple) current;
-		
+
 		if(index >= tuple.getSubtermCount())
 			return null;
-		
+
 		if(!(tuple.get(index) instanceof GenericWrappedTerm))
 			return null;
-		
+
 		GenericWrappedTerm wrapper = (GenericWrappedTerm) tuple.get(index);
-		
+
 		if(wrapper.getWrappee().getClass().equals(clazz))
 			return null;
-		
+
 		return (T) wrapper.getWrappee();
-		
+
 	}
-	
+
 	public void init() {
-		
+
 		objectCounter = 0;
-		if(objectWrappers != null) {
-			objectWrappers.clear();
-		} else {
-			objectWrappers = new HashMap<Integer, Object>();
-		}
-		
+		objectWrappers.clear();
+
 		objWrapCtor = termFactory.makeConstructor("ObjWrap", 1);
 	}
-	
+
     public static JFFLibrary instance(IContext env) {
         return (JFFLibrary)env.getOperatorRegistry(REGISTRY_NAME);
     }
@@ -126,4 +125,22 @@
 			return null;
 		}
 	}
+
+	@SuppressWarnings("unchecked")
+	public static <T> T unwrap(IStrategoTerm[] tvars, int index,
+			Class<T> clazz) {
+		if(index >= tvars.length)
+			return null;
+		if(!(tvars[index] instanceof GenericWrappedTerm))
+			return null;
+		GenericWrappedTerm t = (GenericWrappedTerm) tvars[index];
+		if(!t.getWrappee().getClass().equals(clazz))
+			return null;
+		return (T) t.getWrappee();
+	}
+
+
+	public static void attach(Interpreter intp) throws IOException, InterpreterException {
+		attach(intp, new JFFLibrary(intp.getFactory()), "/share/jff-library.ctree");
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/stratego/spoofax/bindings/java.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/stratego/spoofax/bindings/java.str	Thu Dec 15 21:15:26 2011	(r23782)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/src/main/stratego/spoofax/bindings/java.str	Thu Dec 15 21:16:32 2011	(r23783)
@@ -4,6 +4,8 @@
  * Licensed under the GNU Lesser General Public License, v2.1 
  */
 module spoofax/bindings/java
+imports
+    libstratego-lib
 
 strategies
 

From karltk at strategoxt.org  Thu Dec 15 22:17:23 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 21:17:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23784 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20111215211723.ED04BCC12E@mx4.tudelft.nl>

Author: karltk
Date: Thu Dec 15 21:17:23 2011
New Revision: 23784
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23784&sc=1

Log:
Drop unused import

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java	Thu Dec 15 21:16:32 2011	(r23783)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java	Thu Dec 15 21:17:23 2011	(r23784)
@@ -1,23 +1,22 @@
 /*
  * Created on 04.des.2005
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
  * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.jsglr.client;
 
 import java.io.Serializable;
 import java.util.ArrayList;
-import java.util.List;
 
 import org.spoofax.jsglr.shared.Tools;
 
 
 public class Frame implements Serializable {
-    
+
     private static final long serialVersionUID = -4757644376472129935L;
-            
+
     public static int framesCreated =0; //MJ: for testing
 
     public final State state;
@@ -25,8 +24,8 @@
     // Using a Vector and regular iteration takes parsing of file-test from 1100ms (min) to 2020ms (max)!
     // TODO: Just use an ArrayList for Frame.steps?
     //       which should have better performance than the obsolete, synchronized Vector classs
-    
-    
+
+
 
     private Link[] steps;
     private int stepsCount;
@@ -38,15 +37,15 @@
         state = s;
         steps = new Link[20];
         stepsCount = 0;
-        framesCreated +=1; //MJ: for testing 
-        
+        framesCreated +=1; //MJ: for testing
+
     }
 
     public boolean allLinksRejected() {
         if(Tools.tracing) {
             SGLR.TRACE("SG_Rejected() - " + state.stateNumber);
         }
-        
+
         if (stepsCount == 0)
             return false;
 
@@ -67,7 +66,7 @@
     }
 
     private void doComputePathsToRoot(PooledPathList pool, Path node, int arity, int parentCount, int length) {
-        
+
     	if(Tools.tracing) {
             SGLR.TRACE("SG_FindAllPaths() - " + arity + ", " + length);
         }
@@ -77,10 +76,10 @@
             if(Tools.tracing) {
                 SGLR.TRACE("SG_NewPath() - " + state.stateNumber + ", " + length);
             }
-        } else { 
+        } else {
             for (int i = 1; i <= stepsCount; i++) {
                 Link link = steps[stepsCount - i];
-                
+
                 Path n = pool.makePath(node, link, this, link.getLength(), parentCount);
                 link.parent.doComputePathsToRoot(pool, n, arity - 1, parentCount + 1, length + link.getLength());
             }
@@ -99,15 +98,15 @@
         if(Tools.tracing) {
             SGLR.TRACE("SG_FindDirectLink() - [" + state.stateNumber + ", " + st0.state.stateNumber + "]");
         }
-        
+
         for (int i = 0; i < stepsCount; i++) {
             if (steps[i].parent == st0)
                 return steps[i];
         }
-        
+
         return null;
-    }   
-    
+    }
+
     /**
      * @deprecated Use the primitive types (or an iterator) to just iterate over the links.
      */
@@ -115,13 +114,13 @@
         ArrayList<Link> links=new ArrayList<Link>();
         for (int i = 0; i < stepsCount; i++) {
             links.add(steps[i]);
-        }        
+        }
         return links;
-    }   
-    
+    }
+
 
 //    static public int[] counter = new int[1000];
-    
+
     public Link addLink(Frame st0, AbstractParseNode n, int length) {
         if(Tools.tracing) {
             SGLR.TRACE("SG_AddLink() - " + state.stateNumber + ", " + st0.state.stateNumber + ", " + length);
@@ -130,9 +129,9 @@
             resizeSteps();
         }
 //        counter[stepsCount]++;
-        return steps[stepsCount++] = new Link(st0, n, length); 
+        return steps[stepsCount++] = new Link(st0, n, length);
     }
-    
+
     public Link addLink(Link ln) {
         if(Tools.tracing) {
             SGLR.TRACE("SG_AddLink() - " + state.stateNumber + " (recover node) ");
@@ -141,7 +140,7 @@
             resizeSteps();
         }
 //        counter[stepsCount]++;
-        return steps[stepsCount++] = ln; 
+        return steps[stepsCount++] = ln;
     }
 
     private void resizeSteps() {
@@ -223,9 +222,9 @@
             SGLR.TRACE("SG_FindLimitedPaths() - " + arity + ", " + l.getLength() + ", " + l.parent.state.stateNumber);
             TRACE_DumpLinks(steps);
         }
-        if(findLink(arity, l)) { 
+        if(findLink(arity, l)) {
             doComputePathsToRoot(pool, null, l, false, arity, 0, 0);
-        } 
+        }
     }
 
     private void TRACE_DumpLinks(Link[] st) {
@@ -242,7 +241,7 @@
             SGLR.TRACE("SG_FindLink() - " + arity);
             SGLR.TRACE("SG_ - links: " + stepsCount);
         }
-        
+
         if(arity > 0) {
             for(int i = 0; i < stepsCount; i++) {
                 Link l1 = steps[stepsCount - i - 1];
@@ -294,7 +293,7 @@
             this.stepsCount = 0;
         }
     }
-    
+
     /*mj debug info function
     public int minAvoidValue()
     {
@@ -303,11 +302,11 @@
             if(i==0){
                 result = steps[i].recoverWeight;
             result = Math.min(result, steps[i].recoverWeight);
-            }            
+            }
         }
         return result;
     }
-    
+
     //mj debug info function
     public List<String> getStackPaths(String frontEnd, boolean avoidFree)
     {
@@ -322,14 +321,14 @@
             List<String> childColl;
             if(ln.recoverWeight ==0 || (avoidFree==false)) {
                 if(ln.recoverWeight ==0)
-                    childColl= ln.parent.getStackPaths(" - "+front, avoidFree); 
+                    childColl= ln.parent.getStackPaths(" - "+front, avoidFree);
                 else {
                     String frnt = "-$"+ ln.recoverWeight +"$-" + front;
                     childColl=ln.parent.getStackPaths(frnt, avoidFree);
                 }
                 stackStrings.addAll(childColl);
-            }            
-        }            
+            }
+        }
         return stackStrings;
     }
 
@@ -337,5 +336,5 @@
     public String[] getStackRepresentation(boolean avoidFree){
         List<String> stackStrings=this.getStackPaths("", avoidFree);
         return stackStrings.toArray(new String[stackStrings.size()]);
-    }*/      
+    }*/
 }

From karltk at strategoxt.org  Thu Dec 15 22:17:58 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 21:17:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23785 - in
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms:
	. skeleton
Message-ID: <20111215211758.2D28C7F8046@mx1.tudelft.nl>

Author: karltk
Date: Thu Dec 15 21:17:57 2011
New Revision: 23785
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23785&sc=1

Log:
Close down toString() for skeleton lists.

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoList.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Thu Dec 15 21:17:23 2011	(r23784)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Thu Dec 15 21:17:57 2011	(r23785)
@@ -134,7 +134,7 @@
     public IStrategoString makeString(String s) {
     	if (s.length() > MAX_POOLED_STRING_LENGTH)
     		return new StrategoString(s, null, defaultStorageType);
-    	
+
     	synchronized (TermFactory.class) {
 	    	WeakReference<StrategoString> resultRef = asyncStringPool.get(s);
 	    	StrategoString result = resultRef == null ? null : resultRef.get();

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoList.java	Thu Dec 15 21:17:23 2011	(r23784)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/skeleton/SkeletonStrategoList.java	Thu Dec 15 21:17:57 2011	(r23785)
@@ -1,10 +1,9 @@
-package org.spoofax.terms.skeleton;
 /*
- * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ *
  * Licensed under the GNU Lesser General Public License, v2.1
  */
-
+package org.spoofax.terms.skeleton;
 
 import java.io.IOException;
 import java.util.Iterator;
@@ -18,30 +17,28 @@
 import org.spoofax.terms.TermFactory;
 
 public abstract class SkeletonStrategoList extends StrategoTerm implements IStrategoList, Iterable<IStrategoTerm> {
-    
+
     private static final long serialVersionUID = 624120573663698628L;
 
-    private static final int UNKNOWN_SIZE = -1;
-    
     /**
      * @see #hashFunction()
      * @see TermFactory#EMPTY_LIST  The singleton maximally shared empty list instance.
      */
     static final int EMPTY_LIST_HASH = 1 * 71 * 71;
-    
+
     private IStrategoTerm head;
-    
+
     private IStrategoList tail;
 
     /**
      * Creates a new list.
-     * 
+     *
      * @see #prepend(IStrategoTerm) Adds a new head element to a list.
      */
     public SkeletonStrategoList(IStrategoList annotations, int storageType) {
         super(annotations, storageType);
     }
-    
+
     @Deprecated
     public IStrategoList prepend(IStrategoTerm prefix) {
         throw new NotImplementedException();
@@ -50,7 +47,7 @@
     public final IStrategoTerm get(int index) {
         throw new NotImplementedException();
     }
-    
+
     public final int size() {
         return getSubtermCount();
     }
@@ -63,20 +60,20 @@
     protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
         if (second.getTermType() != IStrategoTerm.LIST)
             return false;
-        
+
         final IStrategoList snd = (IStrategoList) second;
         if (size() != snd.size())
             return false;
-        
+
         if (!isEmpty()) {
             IStrategoTerm head = head();
             IStrategoTerm head2 = snd.head();
             if (head != head2 && !head.match(head2))
                 return false;
-            
+
             IStrategoList tail = tail();
             IStrategoList tail2 = snd.tail();
-        
+
             // TODO: test equality of annos on cons nodes (see BasicStrategoList)
             for (IStrategoList cons = tail, cons2 = tail2; !cons.isEmpty(); cons = cons.tail(), cons2 = cons2.tail()) {
                 IStrategoTerm consHead = cons.head();
@@ -84,13 +81,13 @@
                 if (consHead != cons2Head && !consHead.match(cons2Head))
                     return false;
             }
-            
+
             if (commonStorageType == SHARABLE) {
                 this.head = head2;
                 this.tail = tail2;
             }
         }
-        
+
         IStrategoList annotations = getAnnotations();
         IStrategoList secondAnnotations = second.getAnnotations();
         if (annotations == secondAnnotations) {
@@ -106,7 +103,7 @@
     public final void prettyPrint(ITermPrinter pp) {
         throw new NotImplementedException();
     }
-    
+
     public final void writeAsString(Appendable output, int maxDepth) throws IOException {
         output.append('[');
         if(!isEmpty()) {
@@ -144,4 +141,9 @@
     public final Iterator<IStrategoTerm> iterator() {
         return new StrategoListIterator(this);
     }
+
+    @Override
+    public final String toString(int maxDepth) {
+    	return super.toString(maxDepth);
+    }
 }

From karltk at strategoxt.org  Thu Dec 15 22:18:51 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 21:18:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23786 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline:
	. .settings META-INF
Message-ID: <20111215211851.A7D9E7F8025@mx1.tudelft.nl>

Author: karltk
Date: Thu Dec 15 21:18:51 2011
New Revision: 23786
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23786&sc=1

Log:
Added code to build this library as an Eclipse plugin. Added proper Spoofax include paths.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.settings/org.strategoxt.imp.editors.stratego.prefs
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/META-INF/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/build.properties
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.project

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath	Thu Dec 15 21:17:57 2011	(r23785)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath	Thu Dec 15 21:18:51 2011	(r23786)
@@ -8,5 +8,6 @@
 	<classpathentry kind="lib" path="lib/jline-1.0.jar"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.library.java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="output" path="build/classes"/>
 </classpath>

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.project
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.project	Thu Dec 15 21:17:57 2011	(r23785)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.project	Thu Dec 15 21:18:51 2011	(r23786)
@@ -10,8 +10,19 @@
 			<arguments>
 			</arguments>
 		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
 	</buildSpec>
 	<natures>
 		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.pde.PluginNature</nature>
 	</natures>
 </projectDescription>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.settings/org.strategoxt.imp.editors.stratego.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.settings/org.strategoxt.imp.editors.stratego.prefs	Thu Dec 15 21:18:51 2011	(r23786)
@@ -0,0 +1 @@
+stratego.include = src/main/stratego

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/META-INF/MANIFEST.MF	Thu Dec 15 21:18:51 2011	(r23786)
@@ -0,0 +1,11 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: JLine Bindings for Stratego/J
+Bundle-SymbolicName: org.spoofax.interpreter.library.jline;singleton:=true
+Bundle-Version: 0.1.0.qualifier
+Bundle-ClassPath: jline.jar,
+ lib/jline-1.0.jar
+Bundle-Vendor: Spoofax.org
+Bundle-RequiredExecutionEnvironment: JavaSE-1.6
+Export-Package: jline,
+ org.spoofax.interpreter.library.jline

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/build.properties	Thu Dec 15 21:18:51 2011	(r23786)
@@ -0,0 +1,5 @@
+source.jline.jar = src/main/java/,\
+                   src/test/java/
+bin.includes = META-INF/,\
+               lib/jline-1.0.jar,\
+               jline.jar

From karltk at strategoxt.org  Thu Dec 15 22:18:53 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 15 Dec 2011 21:18:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23787 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline:
	. META-INF src/main/java/org/spoofax/interpreter/library/jline
	src/test/java/org/spoofax/interprete...
Message-ID: <20111215211853.C93FA108C042@mx3.tudelft.nl>

Author: karltk
Date: Thu Dec 15 21:18:53 2011
New Revision: 23787
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23787&sc=1

Log:
Package jline-1.0.jar as part of bundle. Fixed imports/exports. Changed to factory method for library instantiation.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath	Thu Dec 15 21:18:51 2011	(r23786)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/.classpath	Thu Dec 15 21:18:53 2011	(r23787)
@@ -5,9 +5,9 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.core"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
-	<classpathentry kind="lib" path="lib/jline-1.0.jar"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.interpreter.library.java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry exported="true" kind="lib" path="lib/jline-1.0.jar"/>
 	<classpathentry kind="output" path="build/classes"/>
 </classpath>

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/META-INF/MANIFEST.MF
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/META-INF/MANIFEST.MF	Thu Dec 15 21:18:51 2011	(r23786)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/META-INF/MANIFEST.MF	Thu Dec 15 21:18:53 2011	(r23787)
@@ -1,10 +1,10 @@
 Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
 Bundle-Name: JLine Bindings for Stratego/J
-Bundle-SymbolicName: org.spoofax.interpreter.library.jline;singleton:=true
+Bundle-SymbolicName: org.spoofax.interpreter.library.jline
 Bundle-Version: 0.1.0.qualifier
 Bundle-ClassPath: jline.jar,
- lib/jline-1.0.jar
+ jline-1.0.jar
 Bundle-Vendor: Spoofax.org
 Bundle-RequiredExecutionEnvironment: JavaSE-1.6
 Export-Package: jline,

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java	Thu Dec 15 21:18:51 2011	(r23786)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/main/java/org/spoofax/interpreter/library/jline/JLINELibrary.java	Thu Dec 15 21:18:53 2011	(r23787)
@@ -1,6 +1,6 @@
 /*
  * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.jline;
@@ -8,20 +8,22 @@
 import java.io.IOException;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
 
 public class JLINELibrary extends AbstractStrategoOperatorRegistry {
 
 	public static final String REGISTRY_NAME = "JLINE";
 
-	public JLINELibrary() {
+	private JLINELibrary() {
 		add(new JLINE_make_console());
 		add(new JLINE_clear_screen());
 		add(new JLINE_repl());
 		add(new JLINE_println());
 		add(new JLINE_format());
 	}
-	
+
 	@Override
 	public String getOperatorRegistryName() {
 		return REGISTRY_NAME;
@@ -31,4 +33,8 @@
 		return false;
 	}
 
+    public static void attach(Interpreter intp) throws IOException, InterpreterException {
+    	attach(intp, new JLINELibrary(), "/shared/jline-library.ctree");
+    }
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java	Thu Dec 15 21:18:51 2011	(r23786)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jline/src/test/java/org/spoofax/interpreter/library/jline/TestJLINE.java	Thu Dec 15 21:18:53 2011	(r23787)
@@ -1,11 +1,11 @@
 /*
  * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
- * 
+ *
  * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.jline;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertTrue;
 
 import java.io.IOException;
 
@@ -17,7 +17,7 @@
 
 	private Interpreter makeInterpreter() throws IOException, InterpreterException {
 		Interpreter intp = new Interpreter();
-		intp.addOperatorRegistry(new JLINELibrary());
+		JLINELibrary.attach(intp);
 		intp.load(System.getProperty("user.home") + "/.nix-profile/share/stratego-lib/libstratego-lib.ctree");
 		intp.load("jline-test.ctree");
 		intp.setCurrent(intp.getFactory().makeTuple());

From L.C.L.Kats at tudelft.nl  Fri Dec 16 14:51:03 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 16 Dec 2011 13:51:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23788 -
	spoofax-imp/branches/spoofax-imp-release
Message-ID: <20111216135103.E6028CC13D@mx4.tudelft.nl>

Author: LennartKats
Date: Fri Dec 16 13:51:03 2011
New Revision: 23788
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23788&sc=1

Log:
added a release branch based on r23779

Added:
   spoofax-imp/branches/spoofax-imp-release/
      - copied from r23779, spoofax-imp/trunk/

From L.C.L.Kats at tudelft.nl  Fri Dec 16 15:50:49 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 16 Dec 2011 14:50:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23789 -
	spoofax-imp/trunk/org.strategoxt.imp.feature
Message-ID: <20111216145049.4C2752B8077@mx2.tudelft.nl>

Author: LennartKats
Date: Fri Dec 16 14:50:49 2011
New Revision: 23789
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23789&sc=1

Log:
interpreter core version bump

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Fri Dec 16 13:51:03 2011	(r23788)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Fri Dec 16 14:50:49 2011	(r23789)
@@ -101,7 +101,7 @@
          id="org.spoofax.interpreter.core"
          download-size="0"
          install-size="0"
-         version="0.4.0.qualifier"
+         version="0.4.1.qualifier"
          unpack="false"/>
 
    <plugin

From L.C.L.Kats at tudelft.nl  Fri Dec 16 16:05:26 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 16 Dec 2011 15:05:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23790 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library
Message-ID: <20111216150526.61C26CC181@mx4.tudelft.nl>

Author: LennartKats
Date: Fri Dec 16 15:05:26 2011
New Revision: 23790
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23790&sc=1

Log:
write individual characters using a (buffered) Writer

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java	Fri Dec 16 14:50:49 2011	(r23789)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java	Fri Dec 16 15:05:26 2011	(r23790)
@@ -170,20 +170,13 @@
     }
 
     /**
-     * Write a single byte character to a file,
-     * trying not to allocate a new Writer object.
+     * Write a single byte character to a file, using a Writer.
      */
     public void writeChar(int fd, int c) throws IOException {
         if (fd == CONST_STDOUT || fd == CONST_STDERR) {
             getWriter(fd).append((char) c);
         } else {
-            FileHandle file = openFiles.get(fd);
-            if (file.writer == null) {
-                if (file.outputStream == null) internalGetOutputStream(fd);
-                file.outputStream.write(c);
-            } else {
-                file.writer.append((char) c);
-            }
+            getWriter(fd).append((char) c);
         }
     }
 

From L.C.L.Kats at tudelft.nl  Fri Dec 16 17:01:11 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 16 Dec 2011 16:01:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23791 - in
	spoofax-imp/branches/spoofax-imp-release: .
	org.strategoxt.imp.editors.stratego/.externalToolBuilders
	org.strategoxt.imp.editors.stratego/editor/java/org/strate...
Message-ID: <20111216160111.73F2CCC170@mx4.tudelft.nl>

Author: LennartKats
Date: Fri Dec 16 16:01:11 2011
New Revision: 23791
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23791&sc=1

Log:
interpreter core version bump

Modified:
   spoofax-imp/branches/spoofax-imp-release/   (props changed)
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.main.xml.launch   (props changed)
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/StrategoSugarParseController.java   (props changed)
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.generator/.externalToolBuilders/   (props changed)
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.generator/.externalToolBuilders/Makefile for Spoofax-IMP generator.launch   (props changed)
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.testing.test/.externalToolBuilders/TestingTesting build.main.xml.launch   (props changed)

Modified: spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml	Fri Dec 16 15:05:26 2011	(r23790)
+++ spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml	Fri Dec 16 16:01:11 2011	(r23791)
@@ -101,7 +101,7 @@
          id="org.spoofax.interpreter.core"
          download-size="0"
          install-size="0"
-         version="0.4.0.qualifier"
+         version="0.4.1.qualifier"
          unpack="false"/>
 
    <plugin

From M.A.Akhter at student.tudelft.nl  Fri Dec 16 22:59:40 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 16 Dec 2011 21:59:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23792 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. index index/data index/tests
Message-ID: <20111216215940.32AE92B802D@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Dec 16 21:59:38 2011
New Revision: 23792
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23792&sc=1

Log:
* added support for configuring symboltable lookup. Lookup levels can be specified so that enduser can restrict lookup to local symbols.
* now INamespace can also return the physical location of the namespace. It is particularly important for the module namesapce.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexConfiguration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexUtils.java
      - copied, changed from r23729, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_equal_resource_uri.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_equal_resource_uri.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_equal_resource_uri.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_equal_resource_uri.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -4,7 +4,7 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
-import org.spoofax.interpreter.library.language.spxlang.index.Utils;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxIndexUtils;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -34,8 +34,8 @@
 		String resUri1 = Tools.asJavaString(Tools.stringAt(resTuple, 0)).trim();
 		String resUri2 = Tools.asJavaString(Tools.stringAt(resTuple, 1)).trim();
 		
-		String absPath1 =  Utils.getAbsolutePathString(resUri1, agent);
-		String absPath2 =  Utils.getAbsolutePathString(resUri2, agent);
+		String absPath1 =  SpxIndexUtils.getAbsolutePathString(resUri1, agent);
+		String absPath2 =  SpxIndexUtils.getAbsolutePathString(resUri2, agent);
 		
 		return absPath1.equalsIgnoreCase(absPath2);
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -42,7 +42,7 @@
 
 	public NamespaceUri namespaceUri() {return _currentNamespaceId;}
 	
-	protected NamespaceUri enclosingNamespaceUri() { return _enclosingNamespaceId ; } 
+	public NamespaceUri enclosingNamespaceUri() { return _enclosingNamespaceId ; } 
 	
 	public abstract IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade);
 	
@@ -145,7 +145,7 @@
 		
 		List<SpxSymbol> resolvedSymbols  = new ArrayList<SpxSymbol>();
 		
-		if(key.getId().equalsIgnoreCase(Utils.All_SYMBOLS)){
+		if(key.getId().equalsIgnoreCase(SpxIndexUtils.All_SYMBOLS)){
 			// Found * in the ID. 
 			// Hence returning ALL symbols of  a particular type specified in the argument.
 			for (Entry<SpxSymbolKey, List<SpxSymbol>> entry : members.entrySet()) {
@@ -153,13 +153,10 @@
 				if(SpxSymbolKey.equalSignature((IStrategoConstructor)type, entry.getKey())){
 					resolvedSymbols = appendSymbols(resolvedSymbols, members.get(entry.getKey()));
 				}
-				//resolvedSymbols = appendSymbols(resolvedSymbols, SpxSymbol.filterByType((IStrategoConstructor)type, members.get(entry.getKey())));
 			}
 		}
 		else{
-			//resolvedSymbols = appendSymbols(resolvedSymbols, SpxSymbol.filterByType( (IStrategoConstructor)type, members.get(key)));
 			resolvedSymbols = appendSymbols(resolvedSymbols, members.get(key));
-			
 		}
 		
 		return resolvedSymbols ; 
@@ -174,7 +171,7 @@
 		return null;
 	}
 	
-	public SpxSymbol resolve(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException{
+	public SpxSymbol resolve(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade  facade, int lookupDepth) throws SpxSymbolTableException{
 		facade.getPersistenceManager().logMessage(this.src, "resolve | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + searchingFor + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
 		assert type instanceof IStrategoConstructor : "Type is expected to be IStrategoConstructor" ;
@@ -190,14 +187,14 @@
 		INamespace namespace = getEnclosingNamespace(facade.getPersistenceManager().spxSymbolTable());
 		if( namespace  != null) {
 			//checks whether searching to the enclosing scope is allowed.
-			if( shouldSearchInEnclosingNamespace( searchedBy))
-				return namespace.resolve(searchingFor, type, this, facade);
+			if( shouldSearchInEnclosingNamespace( searchedBy , lookupDepth))
+				return namespace.resolve(searchingFor, type, this, facade, lookupDepth-1);
 		}	 
 		
 		return null; // symbol is not found
 	}
 	
-	public Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade  facade, IStrategoTerm searchingFor, IStrategoTerm ofType, INamespace searchedBy, boolean returnDuplicate) throws SpxSymbolTableException {
+	public Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade  facade, IStrategoTerm searchingFor, IStrategoTerm ofType, INamespace searchedBy, int lookupDepth, boolean returnDuplicate) throws SpxSymbolTableException {
 		
 		facade.getPersistenceManager().logMessage(this.src, "resolveAll(Base) | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + searchingFor + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
@@ -213,13 +210,14 @@
 		retResult.addAll(lookupResult);
 		
 		INamespace namespace = getEnclosingNamespace(facade.getPersistenceManager().spxSymbolTable());
+		
 		//checking whether resolved namespace is Null. In that case, all the scopes are covered.
 		//also checking that the resolved namespace is not equal to the current namespace 
 		//that we already have searched - to avoid any cycle in the hierarchy.
 		if( namespace  != null && !namespace.equals(this)){
 			//checks whether searching to the enclosing scope is allowed.
-			if( shouldSearchInEnclosingNamespace(searchedBy)){	
-				Collection<SpxSymbol> parentResults  = namespace.resolveAll(facade, searchingFor, ofType ,this, false);
+			if( shouldSearchInEnclosingNamespace(searchedBy,lookupDepth)){	
+				Collection<SpxSymbol> parentResults  = namespace.resolveAll(facade, searchingFor, ofType ,this, lookupDepth, false);
 				retResult.addAll(parentResults);
 			}
 		}	 
@@ -234,8 +232,8 @@
 	 * (non-Javadoc)
 	 * @see org.spoofax.interpreter.library.language.spxlang.INamespace#resolveAll(org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
 	 */
-	public Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade spxFacade, IStrategoTerm searchingFor, IStrategoTerm ofType, boolean retrunDuplicate) throws SpxSymbolTableException{
-		return resolveAll(spxFacade, searchingFor,  ofType, this, retrunDuplicate);
+	public Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade spxFacade, IStrategoTerm searchingFor, IStrategoTerm ofType, int lookupDepth, boolean retrunDuplicate) throws SpxSymbolTableException{
+		return resolveAll(spxFacade, searchingFor,  ofType, this, lookupDepth, retrunDuplicate);
 	}
 	
 	public Map<SpxSymbolKey, List<SpxSymbol>> getMembers(){
@@ -250,9 +248,9 @@
 			this.symbols.clear();
 	}
 
-	/* 
+	/** 
 	 * Returns the enclosing scope of the current scope.
-	 * */
+	 */
 	public INamespace getEnclosingNamespace(INamespaceResolver rs) throws SpxSymbolTableException { 
 		return (_enclosingNamespaceId != null) 
 					? _enclosingNamespaceId.resolve(rs) 
@@ -263,22 +261,21 @@
 	
 	public boolean isInternalNamespace() { return false;  }
 	
-	protected boolean shouldSearchInInternalNamespace( INamespace searchedBy) {
-		// If searchedBy Namespace is enclosingNamespace of CurrentNamespace 
-		// Search for internal symbol scopes as well
-		return searchedBy.namespaceUri().equals(this.enclosingNamespaceUri()) || searchedBy.namespaceUri().equals(this.namespaceUri());  
-	}
-	
 	/**
 	 * Base Condition of the lookup : 
 	 * Allow search enclosing Namespace only if searchedBy is not enclosing Namespace. 
+	 * It actually disable lookup in global namespace multiple times.  
 	 *  
 	 * @param searchedBy
 	 * @return True if enclosing Namespace != searachedBy  ; otherwise false.
 	 */
-	protected boolean shouldSearchInEnclosingNamespace(INamespace searchedBy) {
-		// search enclosing Namesapce only if searchedBy is not enclosing Namespace
-		return !(searchedBy.namespaceUri().equals(this.enclosingNamespaceUri())); 
+	protected boolean shouldSearchInEnclosingNamespace(INamespace searchedBy, int lookupDepth) {
+		// Search enclosing Namesapce only if searchedBy is not enclosing Namespace
+		return !(searchedBy.namespaceUri().equals(this.enclosingNamespaceUri())) && verifyIsValidForLookup(lookupDepth); 
+	}
+	
+	protected boolean verifyIsValidForLookup( int lookupDepth){
+		return (lookupDepth > 0);
 	}
 
 	/* (non-Javadoc)
@@ -288,4 +285,8 @@
 	public String toString() {
 		return "Namespace { "+ src + "}";
 	}
+	
+	public String getAbosoluteFilePath(){
+		return null;
+	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -20,23 +20,27 @@
 
 	INamespace getCurrentNamespace(INamespaceResolver resolver) throws SpxSymbolTableException;
 	
-	public INamespace define(SpxSymbolTableEntry entry, SpxSemanticIndexFacade f);
+	INamespace define(SpxSymbolTableEntry entry, SpxSemanticIndexFacade f);
 	
 	Set<SpxSymbol> undefineSymbols(IStrategoTerm searchingFor, IStrategoTerm type , SpxSemanticIndexFacade  facade) ;
     
-	SpxSymbol resolve(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
+	SpxSymbol resolve(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade, int lookupDepth) throws SpxSymbolTableException;
     
-	Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade spxFacade, IStrategoTerm searchingFor, IStrategoTerm type, boolean retrunDuplicate) throws SpxSymbolTableException;
+	Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade spxFacade, IStrategoTerm searchingFor, IStrategoTerm type, int lookupDepth, boolean retrunDuplicate) throws SpxSymbolTableException;
 	
-	Collection<SpxSymbol>  resolveAll(SpxSemanticIndexFacade spxFacade, IStrategoTerm searchingFor, IStrategoTerm ofType , INamespace searchedByNamepsace, boolean returnDuplicate) throws SpxSymbolTableException;
+	Collection<SpxSymbol>  resolveAll(SpxSemanticIndexFacade spxFacade, IStrategoTerm searchingFor, IStrategoTerm ofType , INamespace searchedByNamepsace, int lookupDepth, boolean returnDuplicate) throws SpxSymbolTableException;
 	
 	Map<SpxSymbolKey, List<SpxSymbol>> getMembers();
 	
 	NamespaceUri namespaceUri();
 	
+	NamespaceUri enclosingNamespaceUri(); 
+	
 	boolean isInternalNamespace() ;
 	
-	public IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade);
+	String getAbosoluteFilePath();
+	
+	IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade);
 
 	void clear();	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -47,4 +47,9 @@
 
 		return (IStrategoList) localAnonymousId;
 	}
+	
+	@Override
+	public String getAbosoluteFilePath(){
+		return super.getAbosoluteFilePath();
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -36,17 +36,20 @@
 	/**
 	 * Creates an instance of GlobalScope. Point of caution : GlobalScope is valid  
 	 * for the current project. 
-	 * 
 	 * @param facade
+	 * @param moduleFilePath TODO
+	 * 
 	 * @return
 	 */
-	public static INamespace createInstance(NamespaceUri id, NamespaceUri enclosingNamespaceId, SpxSemanticIndexFacade facade) {
+	public static INamespace createInstance(NamespaceUri id, NamespaceUri enclosingNamespaceId, SpxSemanticIndexFacade facade, String moduleFilePath) {
 		SpxPrimarySymbolTable  symbol_table = facade.getPersistenceManager().spxSymbolTable();
 		INamespace ns = symbol_table.resolveNamespace(id); 
-		if(ns != null)
-			return ns;
-		else
-			return new ModuleNamespace(id, facade.getCons().getModuleNamespaceTypeCon(), enclosingNamespaceId, facade.getPersistenceManager());
+		if(ns == null)
+		{	
+			ns = new ModuleNamespace(id, facade.getCons().getModuleNamespaceTypeCon(), enclosingNamespaceId, facade.getPersistenceManager());
+			((ModuleNamespace)ns).setAbosoluteFilePath(moduleFilePath);
+		}
+		return ns;
 	}
 
 	@Override
@@ -54,5 +57,14 @@
 		return ModuleDeclaration.toModuleQNameAppl(facade, this.namespaceUri().id());
 	}
 	
+	protected String moduleFilePath;
 	
+	void setAbosoluteFilePath(String filePath){
+		moduleFilePath = filePath;
+	}
+
+	@Override
+	public String getAbosoluteFilePath(){
+		return moduleFilePath;
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -67,7 +67,7 @@
 			enclosedNamespaceUris = new HashSet<NamespaceUri>();
 			
 			//add internal Module's namespace uri  
-			packageInternalNamespace(this.namespaceUri() , facade);
+			enclosedNamespaceUris.add(packageInternalNamespace(this.namespaceUri() , facade));
 			
 			Iterable<ModuleDeclaration> mDecls = facade.getModuleDeclarations( this.namespaceUri().id());
 			if(mDecls !=null){
@@ -130,7 +130,7 @@
 	 * @see org.spoofax.interpreter.library.language.spxlang.BaseNamespace#resolve(org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.library.language.spxlang.INamespace, org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
 	 */
 	@Override
-	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade facade) throws SpxSymbolTableException {
+	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade facade, int lookupDepth) throws SpxSymbolTableException {
 		facade.getPersistenceManager().logMessage(this.src, "resolve | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + id + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
 		ensureEnclosedNamespaceUrisLoaded(facade);
@@ -139,10 +139,10 @@
 		if (retSymbol == null) {
 			// Searching in package's local symbols. If not found, search
 			// in the enclosing namespaces i.e. in Global Namespace
-			retSymbol = super.resolve(id, type, searchedBy, facade);
+			retSymbol = super.resolve(id, type, searchedBy, facade, lookupDepth);
 
 			if (retSymbol == null) {
-				if ( !isTransitiveImportLookup(facade , searchedBy)) {
+				if ( shouldSearchInImportedNamespace(facade , searchedBy , lookupDepth)) {
 					// try to resolve in the imported namespaces
 					ensureImportedNamespaceUrisLoaded(facade);
 					retSymbol = resolveSymbolinNamespaces(this.importedNamespaceUris, id, type, searchedBy, facade);
@@ -158,7 +158,7 @@
 	 * @see org.spoofax.interpreter.library.language.spxlang.BaseNamespace#resolveAll(org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.library.language.spxlang.INamespace, org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
 	 */
 	@Override
-	public Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade facade,IStrategoTerm key, IStrategoTerm type, INamespace originNamespace, boolean returnDuplicate) throws SpxSymbolTableException{
+	public Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade facade,IStrategoTerm key, IStrategoTerm type, INamespace originNamespace, int lookupDepth, boolean returnDuplicate) throws SpxSymbolTableException{
 		facade.getPersistenceManager().logMessage(this.src, "resolveAll | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + key + " origin Namespace: " + originNamespace.namespaceUri().id() );
 		
 		Collection<SpxSymbol> retResult = null;
@@ -173,21 +173,24 @@
 		retResult.addAll(resolveAllSymbolsInNamespaces(this.enclosedNamespaceUris, key, type, originNamespace, facade , returnDuplicate)) ;
 		
 		//searching in the current scope and its enclosing scope
-		retResult.addAll(super.resolveAll(facade, key, type, originNamespace, returnDuplicate));
+		retResult.addAll(super.resolveAll(facade, key, type, originNamespace, lookupDepth, returnDuplicate));
 		
 		
 		//searching in the imported namespaces. Also  detect transitive and cyclic import references.  
-		if ( !isTransitiveImportLookup(facade , originNamespace)) {
+		if ( shouldSearchInImportedNamespace(facade , originNamespace , lookupDepth)) {
 			ensureImportedNamespaceUrisLoaded(facade);
 			retResult.addAll(resolveAllSymbolsInNamespaces(this.importedNamespaceUris, key, type, originNamespace, facade, returnDuplicate)) ;
 		}
 		//returning the result 
 		return retResult;
 	}
-
+	protected boolean shouldSearchInImportedNamespace( SpxSemanticIndexFacade facade , INamespace originNamespace, int lookupDepth) throws SpxSymbolTableException{
+		return !isTransitiveImportLookup(facade , originNamespace) && verifyIsValidForLookup(lookupDepth) ;
+	}
+	
 	@Override
-	protected boolean shouldSearchInEnclosingNamespace(INamespace searchedBy) {
-		boolean retValue =  super.shouldSearchInEnclosingNamespace(searchedBy);
+	protected boolean shouldSearchInEnclosingNamespace(INamespace searchedBy,int lookupDepth ) {
+		boolean retValue =  super.shouldSearchInEnclosingNamespace(searchedBy,lookupDepth);
 		if(retValue) {
 			// Primary goal of this extra check is to prune search tree. 
 			// Only allowing Searching in the global namespace if search started in one of the 
@@ -225,7 +228,7 @@
 				continue;
 			}
 			
-			retSymbol = thisNamespace.resolve(key, type, this, facade) ;
+			retSymbol = thisNamespace.resolve(key, type, this, facade, Integer.MAX_VALUE) ;
 			if(retSymbol != null)
 				break;
 		}
@@ -254,20 +257,39 @@
 				// hence, ignoring it.
 				continue;
 			}
-			retSymbol.addAll((Set<SpxSymbol>)thisNamespace.resolveAll(facade, key, ofType, this, false));
+			retSymbol.addAll((Set<SpxSymbol>)thisNamespace.resolveAll(facade, key, ofType, this, Integer.MAX_VALUE, false));
 		}
 		
 		return retSymbol;
 	}
 	
-	private boolean disallowLookupIn( INamespace namespace , INamespace originNamespace){
+	protected boolean shouldSearchInInternalNamespace( INamespace namespaceToSearchIn , INamespace searchedBy) {
+		// If searchedBy's enclosing namespace uri  is CurrentNamespace 
+		// or searchBy is indeed this Namespace 
+		// then , searching _internal Namespace 
+		if ( namespaceToSearchIn.enclosingNamespaceUri().equals(this.namespaceUri()))
+			return searchedBy.enclosingNamespaceUri().equals(this.namespaceUri())   
+				|| searchedBy.namespaceUri().equals(this.namespaceUri());   
 		
-		boolean resolveInCurrentNamespaceIsNotAllowed = namespace.isInternalNamespace() && !shouldSearchInInternalNamespace(originNamespace) ;
-		boolean currentNamespaceIsSearchedOrigin = namespace.namespaceUri() == originNamespace.namespaceUri();  // disallowing repeatative resolve of the namespace from where search originated.
-		
-		return resolveInCurrentNamespaceIsNotAllowed || currentNamespaceIsSearchedOrigin;
+		return false;
+	}
 	
+	private boolean disallowLookupIn( INamespace namespaceToSearchIn , INamespace originNamespace){
+		
+		// checking whether searching in Internal Namespace is allowed
+		// Rule : if namespaceToSearchIn is an internal namespace 
+		boolean resolveInCurrentNamespaceIsNotAllowed = namespaceToSearchIn.isInternalNamespace() && !shouldSearchInInternalNamespace( namespaceToSearchIn , originNamespace) ;
+		
+		
+		// checks whether we are searching nameapceToSearchIn multiple times
+		// if search origin is NamespaceToSearchIn, then we already searched namespaceToSearchIn namespace
+		boolean currentNamespaceIsSearchedOrigin = namespaceToSearchIn.namespaceUri() == originNamespace.namespaceUri();  // disallowing repeatative resolve of the namespace from where search originated.
+		
+		
+		// if either one condition is true, lookup in namespaceToSearchIn is avoided. 
+		return resolveInCurrentNamespaceIsNotAllowed ||  currentNamespaceIsSearchedOrigin;
 	}
+	
 	/**
 	 * Creates an instance of PackageScope. Also creates internal symbol scopes
 	 * 
@@ -307,7 +329,7 @@
 		INamespace ns = table.resolveNamespace(internalNamespaceUri) ;
 		
 		if(ns == null) {	
-			ns = (ModuleNamespace)ModuleNamespace.createInstance(internalNamespaceUri, enclosingNamespaceId, facade);
+			ns = (ModuleNamespace)ModuleNamespace.createInstance(internalNamespaceUri, enclosingNamespaceId, facade, null);
 			((ModuleNamespace)ns).isInternalNamespace = true;
 		}
 		return ns;
@@ -316,10 +338,9 @@
 	/**
 	 * @param enclosingNamespaceId
 	 * @param idxFacade
-	 * @return
+	 * @return NamespaceUri
 	 */
-	public static NamespaceUri packageInternalNamespace(
-			NamespaceUri enclosingNamespaceId, SpxSemanticIndexFacade idxFacade) {
+	public static NamespaceUri packageInternalNamespace(NamespaceUri enclosingNamespaceId, SpxSemanticIndexFacade idxFacade) {
 		
 		SpxPrimarySymbolTable  table =  idxFacade.getPersistenceManager().spxSymbolTable() ;
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -53,7 +53,7 @@
 	 */
 	public void define(SpxSemanticIndexFacade facade , URI absPath, IStrategoTerm compilationUnitRTree) throws IOException
 	{	
-		String abspathString = Utils.uriToAbsPathString(absPath);
+		String abspathString = SpxIndexUtils.uriToAbsPathString(absPath);
 		
 		if ( _infoMap.containsKey(abspathString))
 			this.update(facade , absPath, compilationUnitRTree); //URI is already there in the symbol table . Hence updating the table
@@ -72,7 +72,7 @@
 	 */
 	private void add(SpxSemanticIndexFacade facade , URI absPath , IStrategoTerm compilationUnitAST) throws IOException {
 		
-		String serializedTerm = Utils.serializeToString(facade.getTermAttachmentSerializer(), compilationUnitAST);
+		String serializedTerm = SpxIndexUtils.serializeToString(facade.getTermAttachmentSerializer(), compilationUnitAST);
 		
 		long resID = _spxUnitStoreMap.putValue(serializedTerm); // Adding Compilation Unit to the storemap
 		
@@ -105,19 +105,19 @@
 	 */
 	private void update(SpxSemanticIndexFacade facade ,  URI absPath , IStrategoTerm compilationUnitAterm) throws IOException {	
 		
-		SpxCompilationUnitInfo oldValue = _infoMap.get(Utils.uriToAbsPathString(absPath));
+		SpxCompilationUnitInfo oldValue = _infoMap.get(SpxIndexUtils.uriToAbsPathString(absPath));
 		SpxCompilationUnitInfo newValue = SpxCompilationUnitInfo.newInstance(oldValue);
 		newValue.incrVersion();
 		
 		_infoMap.put(newValue.getAbsPathString(), newValue);
 		
-		String serializedTerm = Utils.serializeToString(facade.getTermAttachmentSerializer(), compilationUnitAterm);
+		String serializedTerm = SpxIndexUtils.serializeToString(facade.getTermAttachmentSerializer(), compilationUnitAterm);
 		
 		_spxUnitStoreMap.put(newValue.getRecId(), serializedTerm);
 	
 		if(!recordListeners.isEmpty()){	
 			for(RecordListener<String, SpxCompilationUnitInfo> r:recordListeners){
-				r.recordUpdated(Utils.uriToAbsPathString(absPath), oldValue , newValue);
+				r.recordUpdated(SpxIndexUtils.uriToAbsPathString(absPath), oldValue , newValue);
 			}
 		}
 	}
@@ -129,7 +129,7 @@
 	 * @throws IOException 
 	 */
 	public void remove(URI absPathUri) throws IOException{
-		String key =  Utils.uriToAbsPathString(absPathUri); 
+		String key =  SpxIndexUtils.uriToAbsPathString(absPathUri); 
 		
 		remove(key);
 	}
@@ -177,14 +177,14 @@
 		SpxCompilationUnitInfo retUnitData= getInfo(f, absPath);
 		
 		String serializedString = _spxUnitStoreMap.get(retUnitData.getRecId());
-		IStrategoTerm deserializedTerm = Utils.deserializeToTerm(f.getTermFactory(), f.getTermAttachmentSerializer(), serializedString);
+		IStrategoTerm deserializedTerm = SpxIndexUtils.deserializeToTerm(f.getTermFactory(), f.getTermAttachmentSerializer(), serializedString);
 		
 		return deserializedTerm ;
 	}
 	
 	
 	public SpxCompilationUnitInfo getInfo(SpxSemanticIndexFacade f, URI absPath){
-		String key = Utils.uriToAbsPathString(absPath);
+		String key = SpxIndexUtils.uriToAbsPathString(absPath);
 		
 		return  _infoMap.get(key);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -44,6 +44,9 @@
 		
 		ConstructorDef.newInstance("OverridableSymbol"  , 0).index(_knownCons, _termFactory);
 		ConstructorDef.newInstance("UniqueSymbol" , 0).index(_knownCons, _termFactory);
+		
+		ConstructorDef.newInstance("LookupLocalScope" , 0).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("LookupAllScope" , 0).index(_knownCons, _termFactory);
 	}
 	
 	IStrategoConstructor indexConstructor(IStrategoConstructor ctor){
@@ -147,6 +150,11 @@
 	
 	public IStrategoConstructor getToCodeGenerateCon(){return getConstructor("ToCodeGenerate", 0);}
 	
+	public IStrategoConstructor getToLookupTypeAll(){return getConstructor("LookupAllScope", 0);}
+	
+	public IStrategoConstructor getToLookupTypeLocal(){return getConstructor("LookupLocalScope", 0);}
+	
+	
 	public IStrategoConstructor getConstructor(String symbolTypeCons, int arity) {
 		return _knownCons.get(ConstructorDef.newInstance(symbolTypeCons ,arity));
 	}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexConfiguration.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexConfiguration.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -0,0 +1,25 @@
+package org.spoofax.interpreter.library.language.spxlang.index;
+
+public final  class SpxIndexConfiguration {
+
+	private SpxIndexConfiguration() {
+	}
+	public static final int NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER = 1;
+	private static final boolean LOG_SYMBOLS = true;
+	private static boolean DEBUG = false;
+	private static String CSVDelimiter = " __ ";  
+	
+	public static boolean shouldLogSymbols() {return LOG_SYMBOLS;}
+	
+	public static boolean shouldPrintDebugInfo() {return DEBUG;}
+	
+	public synchronized static void turnOnTracing() { DEBUG  = true;}
+	
+	public synchronized  static void turnOffTracing() { DEBUG  = true;}
+	
+	public static String getCSVDelimiter() { return CSVDelimiter; }
+	public static final String SPX_CACHE_DIRECTORY = ".spxcache";
+	public static final String SPX_INDEX_DIRECTORY = ".spxindex";
+	public static final String SPX_SHADOW_DIR = ".shadowdir";
+	
+}

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexUtils.java (from r23729, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Sat Dec 10 01:11:24 2011	(r23729, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexUtils.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -20,28 +20,19 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.terms.attachments.TermAttachmentSerializer;
 
-public final class Utils {
-	private Utils() {
+public final class SpxIndexUtils {
+	private SpxIndexUtils() {
 		
 	}
-	public static final int NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER = 1;
 	
 	public static final String AllWithDuplicates = "**";
+
 	public static final String All = "*";
 	public static final String DIRTY = "-";
-	public static final String CURRENT = ".";
 	public static final String ONLY_ONE= ".";
 	
 	public static final String All_SYMBOLS = "\"*\"";
 	
-	
-	public static final String SPX_CACHE_DIRECTORY = ".spxcache";
-	public static final String SPX_INDEX_DIRECTORY = ".spxindex";
-	public static final String SPX_SHADOW_DIR = ".shadowdir";
-	
-	
-	static boolean DEBUG = false;
-	
 	/**
 	 * Constructs {@link IStrategoList} from {@code decls}  
 	 * 
@@ -145,7 +136,7 @@
 	public static String getCsvFormatted(String text){
 		if(text ==null) return "";
 		
-		return text.replace(",", "__");
+		return text.replace(",", SpxIndexConfiguration.getCSVDelimiter() );
 	}
 	
 	static  void logEntries(SpxSemanticIndexFacade f,  INamespace namespace , BufferedWriter logger) throws IOException, SpxSymbolTableException{
@@ -157,14 +148,14 @@
 			
 			logger.write("Enclosed Namespace Uris:\n");
 			for(NamespaceUri uri : ns.enclosedNamespaceUris ){
-				logger.write( Utils.getCsvFormatted(uri.toString()) +"\n");
+				logger.write( SpxIndexUtils.getCsvFormatted(uri.toString()) +"\n");
 			}
 			logger.write("\n");
 			
 				
 			logger.write("Imported Namespace Uris:\n");
 			for(NamespaceUri uri : ns.importedNamespaceUris ){
-				logger.write(Utils.getCsvFormatted(uri.toString())+"\n");
+				logger.write(SpxIndexUtils.getCsvFormatted(uri.toString())+"\n");
 			}
 			
 			logger.write("\n");
@@ -181,7 +172,7 @@
 			logger.write("Key, Type , Symbol\n");
 			for( SpxSymbolKey k : members.keySet()) {
 				for( SpxSymbol s : members.get(k) ){
-					logger.write(Utils.getCsvFormatted(k.printSymbolKey())+ ",");
+					logger.write(SpxIndexUtils.getCsvFormatted(k.printSymbolKey())+ ",");
 					logger.write( s.printSymbol(f) + "\n");
 				}
 			}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -215,13 +215,13 @@
 	}
 	
 	private SpxModuleLookupTable addModuleDefinition(SpxSemanticIndexFacade f, IStrategoList id, IStrategoAppl moduleDefinition) throws IOException{	
-		_moduleDefinition.put(id, Utils.serializeToString(f.getTermAttachmentSerializer(), moduleDefinition));
+		_moduleDefinition.put(id, SpxIndexUtils.serializeToString(f.getTermAttachmentSerializer(), moduleDefinition));
 		return this;
 	}
 	
 	//TODO : save it as binary serialized format
 	private SpxModuleLookupTable addAnalyzedModuleDefinition(SpxSemanticIndexFacade f, IStrategoList id, IStrategoAppl moduleDefinition) throws IOException{
-		_moduleAnalyzedDefinition.put(id, Utils.serializeToString(f.getTermAttachmentSerializer(), moduleDefinition));
+		_moduleAnalyzedDefinition.put(id, SpxIndexUtils.serializeToString(f.getTermAttachmentSerializer(), moduleDefinition));
 		
 		return this;
 	}
@@ -303,7 +303,7 @@
 	 * @return
 	 */
 	public IStrategoAppl getModuleDefinition(SpxSemanticIndexFacade facade, IStrategoList id){
-		IStrategoTerm deserializedTerm = Utils.deserializeToTerm(facade.getTermFactory(), facade.getTermAttachmentSerializer(), this._moduleDefinition.get(id));
+		IStrategoTerm deserializedTerm = SpxIndexUtils.deserializeToTerm(facade.getTermFactory(), facade.getTermAttachmentSerializer(), this._moduleDefinition.get(id));
 		assert deserializedTerm instanceof IStrategoAppl : "Expected IStrategoAppl" ;  
 		
 		return (IStrategoAppl)deserializedTerm;
@@ -318,7 +318,7 @@
 	 */
 	public IStrategoAppl getAnalyzedModuleDefinition(SpxSemanticIndexFacade f, IStrategoList id)
 	{
-		IStrategoTerm deserializedTerm = Utils.deserializeToTerm(f.getTermFactory(), f.getTermAttachmentSerializer(), this._moduleAnalyzedDefinition.get(id));
+		IStrategoTerm deserializedTerm = SpxIndexUtils.deserializeToTerm(f.getTermFactory(), f.getTermAttachmentSerializer(), this._moduleAnalyzedDefinition.get(id));
 		assert deserializedTerm instanceof IStrategoAppl : "Expected IStrategoAppl" ;  
 		
 		return (IStrategoAppl)deserializedTerm; 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -63,7 +63,7 @@
 		
 		//BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX = spxSemanticIndexFacade.getProjectPath()+ "/" + Utils.SPX_INDEX_DIRECTORY+ "/" + _indexId + ".idx";
 
-		final String relPath = spxSemanticIndexFacade.getProjectPath()+ "/" + Utils.SPX_INDEX_DIRECTORY+ "/" + _indexId + ".idx";
+		final String relPath = spxSemanticIndexFacade.getProjectPath()+ "/" + SpxIndexConfiguration.SPX_INDEX_DIRECTORY+ "/" + _indexId + ".idx";
 		if( options  == null)
 			options = new Properties();// Creating empty properties collection if it is null
 		
@@ -85,7 +85,7 @@
 	 * @throws IOException
 	 */
 	private void tryInitRecordManager(SpxSemanticIndexFacade spxSemanticIndexFacade, Properties options) throws IOException {
-		int noOfTries = Utils.NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER;
+		int noOfTries = SpxIndexConfiguration.NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER;
 		
 		while(true){
 			try {
@@ -238,7 +238,7 @@
 	 * @see org.spoofax.interpreter.library.language.spxlang.ISpxPersistenceManager#logMessage(java.lang.String, java.lang.String)
 	 */
 	public void logMessage(String origin, String message) {
-		if(Utils.DEBUG){		
+		if(SpxIndexConfiguration.shouldPrintDebugInfo()){		
 			try {
 				_agent.getWriter(IOAgent.CONST_STDOUT).write(
 						"[" + this._indexId + "." + origin + "]   " + message

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -212,23 +212,23 @@
 	}
 	
 	
-	public Collection<SpxSymbol> resolveSymbols(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType, boolean returnDuplicates) throws SpxSymbolTableException {
+	public Collection<SpxSymbol> resolveSymbols(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType, int lookupDepth, boolean returnDuplicates) throws SpxSymbolTableException {
 		persistenceManager().logMessage(SRC, "resolveSymbols | Resolving symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + " of Type : "+ symbolType.getName());
 		
 		INamespace namespace = activateNamespace(namespaceId);
-		Collection<SpxSymbol> resolvedSymbols = namespace.resolveAll(_facade, symbolId ,symbolType, returnDuplicates);
+		Collection<SpxSymbol> resolvedSymbols = namespace.resolveAll(_facade, symbolId ,symbolType, lookupDepth, returnDuplicates);
 		
 		persistenceManager().logMessage(SRC, "resolveSymbols | Resolved Symbols : " + resolvedSymbols);
 		return resolvedSymbols;
 	}
 	
 	
-	public SpxSymbol resolveSymbol(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType) throws SpxSymbolTableException {
+	public SpxSymbol resolveSymbol(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType, int lookupDepth ) throws SpxSymbolTableException {
 		persistenceManager().logMessage(SRC, "resolveSymbol | Resolving symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
 		
 		INamespace namespace =  activateNamespace(namespaceId);
 		
-		SpxSymbol  resolvedSymbol = namespace.resolve(symbolId, symbolType ,_activeNamespace ,_facade);
+		SpxSymbol  resolvedSymbol = namespace.resolve(symbolId, symbolType ,_activeNamespace ,_facade, lookupDepth);
 		
 		persistenceManager().logMessage(SRC, "resolveSymbol | Resolved Symbol : " + resolvedSymbol );
 		
@@ -404,17 +404,17 @@
 	 * @throws SpxSymbolTableException 
 	 */
 	public void printSymbols(SpxSemanticIndexFacade f, String state , String projectPath , String indexId) throws IOException, SpxSymbolTableException{
-		new File(projectPath +"/"+Utils.SPX_INDEX_DIRECTORY+ "/.log").mkdirs();
+		new File(projectPath +"/"+SpxIndexConfiguration.SPX_INDEX_DIRECTORY+ "/.log").mkdirs();
 		
-		FileWriter fstream = new FileWriter(projectPath +"/"+ Utils.SPX_INDEX_DIRECTORY+ "/.log/"+indexId+"_symbols_"+Utils.now("yyyy-MM-dd HH.mm.ss.SSS")+".csv" , true);
+		FileWriter fstream = new FileWriter(projectPath +"/"+ SpxIndexConfiguration.SPX_INDEX_DIRECTORY+ "/.log/"+indexId+"_symbols_"+SpxIndexUtils.now("yyyy-MM-dd HH.mm.ss.SSS")+".csv" , true);
 		BufferedWriter out = new BufferedWriter(fstream);
-		out.write(", , ,------------- Logging [" +state+ "] state of Symbol-Table at :" + Utils.now("yyyy-MM-dd HH.mm.ss")+"-------------\n");
+		out.write(", , ,------------- Logging [" +state+ "] state of Symbol-Table at :" + SpxIndexUtils.now("yyyy-MM-dd HH.mm.ss")+"-------------\n");
 		try
 		{	
 			if(namespaces != null){
 				for(INamespace ns : namespaces.values()){
-					out.write("\n, --- "+ Utils.getCsvFormatted(ns.toString()) +"--- \n");
-					Utils.logEntries(f, ns,out) ;
+					out.write("\n, --- "+ SpxIndexUtils.getCsvFormatted(ns.toString()) +"--- \n");
+					SpxIndexUtils.logEntries(f, ns,out) ;
 				}
 			}
 		}catch(IOException ex){ //ignore 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -119,7 +119,7 @@
 	 * Gets the project name as String
 	 * @return
 	 */
-	public String getProjectPath(){ return Utils.toAbsPathString(_projectPath); }
+	public String getProjectPath(){ return SpxIndexUtils.toAbsPathString(_projectPath); }
 	
 	public String getProjectName(){ return new File(_projectPath).getName(); }
 
@@ -176,7 +176,7 @@
 	}
 	
 	public SpxCompilationUnitInfo getCompilationUnitInfo(String absUriPath){
-		URI resUri = Utils.getAbsolutePathUri(absUriPath ,_agent);
+		URI resUri = SpxIndexUtils.getAbsolutePathUri(absUriPath ,_agent);
 		
 		SpxCompilationUnitTable table = this.getPersistenceManager().spxCompilcationUnitTable();
 		return table.getInfo(this, resUri);
@@ -396,20 +396,12 @@
 			throw new IllegalArgumentException(" verifySymbolExists | Illegal symbolLookupTerm Argument ; expected 4 subterms. Found : " + searchCriteria.getSubtermCount());
 		
 		IStrategoAppl typeAppl =  (IStrategoAppl)searchCriteria.getSubterm(2);
-		IStrategoConstructor typeCtor = null; 
-		try{
-			typeCtor = verifyKnownContructorExists(typeAppl);
-		}catch(IllegalArgumentException ex){
-			// It seems like the constructor does not exist in local type declarations. 
-			// Hence, defining it to be used further.
-			IStrategoConstructor ctor = (IStrategoConstructor)typeAppl.getConstructor();
-			typeCtor = _spxConstructors.indexConstructor(ctor);
-		}
+		IStrategoConstructor typeCtor = getVerifiedStrategoConstructor(typeAppl);
 		
 		IStrategoList namespaceID = this.getNamespaceId((IStrategoAppl)searchCriteria.get(0));
 		SpxPrimarySymbolTable  symbolTable = getPersistenceManager().spxSymbolTable();
 		
-		return symbolTable.resolveSymbol(namespaceID, strip(searchCriteria.get(1)), typeCtor);
+		return symbolTable.resolveSymbol(namespaceID, strip(searchCriteria.get(1)), typeCtor, Integer.MAX_VALUE);
 	}
 	
 	// (namespace * idTolookupFor * type constructor)
@@ -417,28 +409,32 @@
 		if (searchCriteria.getSubtermCount() != 4)
 			throw new IllegalArgumentException(" resolveSymbols | Illegal symbolLookupTerm Argument ; expected 4 subterms. Found : " + searchCriteria.getSubtermCount());
 		
-		String searchMode = asJavaString(searchCriteria.get(3)).trim();
+		IStrategoTuple lookupConfiguration = (IStrategoTuple)searchCriteria.get(3);
 		
+		// lookup configuration 
+		IStrategoAppl lookupType  = (IStrategoAppl)lookupConfiguration.getSubterm(0);
+		IStrategoConstructor lookupTypeCtor = getVerifiedStrategoConstructor(lookupType);
+		String searchMode = asJavaString(lookupConfiguration.getSubterm(1)).trim();
+		
+		// type constructor 
 		IStrategoAppl typeAppl =  (IStrategoAppl)searchCriteria.getSubterm(2);
-		IStrategoConstructor typeCtor = null; 
-		try{
-			typeCtor = verifyKnownContructorExists(typeAppl);
-		}catch(IllegalArgumentException ex){
-			// It seems like the constructor does not exist in local type declarations. 
-			// Hence, defining it to be used further.
-			IStrategoConstructor ctor = (IStrategoConstructor)typeAppl.getConstructor();
-			typeCtor = _spxConstructors.indexConstructor(ctor);
+		IStrategoConstructor typeCtor = getVerifiedStrategoConstructor(typeAppl);
+		
+		int lookupDepth = Integer.MAX_VALUE; // unbounded Depth search during lookup => could search all the enclosing scope
+		
+		if(_spxConstructors.isEqualConstructor(lookupTypeCtor, _spxConstructors.getToLookupTypeLocal())){
+			lookupDepth = 0; // can only search the current namesapce 
 		}
 		
 		Collection<SpxSymbol> spxSymbols = null;
 		if (typeCtor != null) {
-			if(searchMode.equalsIgnoreCase(Utils.AllWithDuplicates)){
-				spxSymbols = resolveSymbols( (IStrategoAppl)searchCriteria.get(0), searchCriteria.get(1),typeCtor, true);
+			if(searchMode.equalsIgnoreCase(SpxIndexUtils.AllWithDuplicates)){
+				spxSymbols = resolveSymbols( (IStrategoAppl)searchCriteria.get(0), searchCriteria.get(1),typeCtor, lookupDepth, true);
 			}
-			else if(searchMode.equalsIgnoreCase(Utils.All)){
-				spxSymbols = resolveSymbols( (IStrategoAppl)searchCriteria.get(0), searchCriteria.get(1),typeCtor, false);
-			}else if(searchMode.equalsIgnoreCase(Utils.ONLY_ONE)){
-				spxSymbols = resolveSymbol( (IStrategoAppl)searchCriteria.get(0), searchCriteria.get(1),typeCtor);
+			else if(searchMode.equalsIgnoreCase(SpxIndexUtils.All)){
+				spxSymbols = resolveSymbols( (IStrategoAppl)searchCriteria.get(0), searchCriteria.get(1),typeCtor, lookupDepth, false);
+			}else if(searchMode.equalsIgnoreCase(SpxIndexUtils.ONLY_ONE)){
+				spxSymbols = resolveSymbol( (IStrategoAppl)searchCriteria.get(0), searchCriteria.get(1),typeCtor , lookupDepth);
 			}
 			else{
 				throw new IllegalArgumentException(" Illegal symbolLookupTerm searchMode Argument ; expected * or . . Found : " + searchMode);
@@ -448,6 +444,24 @@
 		
 		return SpxSymbol.toTerms(this, spxSymbols);
 	}
+
+	/**
+	 * @param typeAppl
+	 * @return
+	 */
+	private IStrategoConstructor getVerifiedStrategoConstructor(
+			IStrategoAppl typeAppl) {
+		IStrategoConstructor typeCtor = null; 
+		try{
+			typeCtor = verifyKnownContructorExists(typeAppl);
+		}catch(IllegalArgumentException ex){
+			// It seems like the constructor does not exist in local type declarations. 
+			// Hence, defining it to be used further.
+			IStrategoConstructor ctor = (IStrategoConstructor)typeAppl.getConstructor();
+			typeCtor = _spxConstructors.indexConstructor(ctor);
+		}
+		return typeCtor;
+	}
 	
 	public IStrategoTerm undefineSymbols (IStrategoTuple searchCriteria) throws SpxSymbolTableException{
 	    if (searchCriteria.getSubtermCount() != 3)
@@ -457,15 +471,7 @@
 	    IStrategoList namespaceID = this.getNamespaceId(Tools.applAt(searchCriteria, 0));
 	    IStrategoTerm symbolID = Tools.termAt(searchCriteria, 1);
 	    IStrategoAppl typeAppl =  Tools.applAt(searchCriteria, 2);
-	    IStrategoConstructor typeCtor = null; 
-		try{
-			typeCtor = verifyKnownContructorExists(typeAppl);
-		}catch(IllegalArgumentException ex){
-			// It seems like the constructor does not exist in local type declarations. 
-			// Hence, defining it to be used further.
-			IStrategoConstructor ctor = (IStrategoConstructor)typeAppl.getConstructor();
-			typeCtor = _spxConstructors.indexConstructor(ctor);
-		}
+	    IStrategoConstructor typeCtor = getVerifiedStrategoConstructor(typeAppl);
 		
 	    Set<SpxSymbol> spxSymbols = this.getPersistenceManager().spxSymbolTable()
 	    					.undefineSymbols(namespaceID, 
@@ -494,22 +500,22 @@
 	 * 
 	 * @throws SpxSymbolTableException
 	 */
-	public Collection<SpxSymbol> resolveSymbols(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType, boolean returnDuplicates) throws SpxSymbolTableException {
+	public Collection<SpxSymbol> resolveSymbols(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType, int lookupDepth, boolean returnDuplicates) throws SpxSymbolTableException {
 		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
 
 		SpxPrimarySymbolTable  symbolTable = getPersistenceManager().spxSymbolTable();
 		
-		Collection<SpxSymbol> resolvedSymbols = symbolTable.resolveSymbols(namespaceID, strip(symbolId), symbolType, returnDuplicates);
+		Collection<SpxSymbol> resolvedSymbols = symbolTable.resolveSymbols(namespaceID, strip(symbolId), symbolType, lookupDepth, returnDuplicates);
 		return resolvedSymbols;
 	}
 	
-	public Set<SpxSymbol> resolveSymbol(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType) throws SpxSymbolTableException {
+	public Set<SpxSymbol> resolveSymbol(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType,int lookupDepth) throws SpxSymbolTableException {
 		Set<SpxSymbol> resolvedSymbols= new HashSet<SpxSymbol>();
 		
 		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
 		SpxPrimarySymbolTable  symbolTable = getPersistenceManager().spxSymbolTable();
 		
-		SpxSymbol sym = symbolTable.resolveSymbol(namespaceID, strip(symbolId), symbolType);
+		SpxSymbol sym = symbolTable.resolveSymbol(namespaceID, strip(symbolId), symbolType, lookupDepth);
 		if(sym != null)
 			resolvedSymbols.add(sym) ;
 		
@@ -741,7 +747,7 @@
 		String filepathString = asJavaString(filePath);
 		
 		Set<PackageDeclaration> decls; 
-		if(Utils.All == filepathString) {
+		if(SpxIndexUtils.All == filepathString) {
 			decls = table.getPackageDeclarations();  //returning all the package declarations found in the current project
 		}else{
 			String absFilePath = toAbsulatePath(filePath);
@@ -749,7 +755,7 @@
 			decls = table.packageDeclarationsByUri(absFilePath);
 		}
 		
-		IStrategoList result =  Utils.toTerm(this, decls);
+		IStrategoList result =  SpxIndexUtils.toTerm(this, decls);
 		logMessage("getPackageDeclarationsByUri | Returning IStrategoList : " + result );
 
 		return result;
@@ -831,9 +837,9 @@
 		
 		if(Tools.isTermAppl(res))
 		{	
-			if( Utils.DIRTY  == asJavaString(queryType)) {
+			if( SpxIndexUtils.DIRTY  == asJavaString(queryType)) {
 				retValue  = this.getDirtyModuleDeclarations((IStrategoAppl)res , (IStrategoAppl)searchQueryTuple.getSubterm(2)) ;
-			}else if (Utils.All == asJavaString(queryType)){
+			}else if (SpxIndexUtils.All == asJavaString(queryType)){
 				retValue  = this.getModuleDeclarations((IStrategoAppl)res);
 			}else
 				throw new IllegalArgumentException("Unknown queryType argument in getModuleDeclarationOf: " + queryType);
@@ -853,7 +859,7 @@
 		String filepathString = asJavaString(filePath);
 		
 		Iterable<ModuleDeclaration> decls; 
-		if(Utils.All == filepathString) {
+		if(SpxIndexUtils.All == filepathString) {
 			decls = table.getModuleDeclarations();  //returning all the package declarations found in the current project
 		}else{	
 			String absFilePath = toAbsulatePath(filePath);
@@ -861,7 +867,7 @@
 			decls = table.getModuleDeclarationsByUri(absFilePath);
 		}
 		
-		IStrategoList result =  Utils.toTerm(this, decls);
+		IStrategoList result =  SpxIndexUtils.toTerm(this, decls);
 		logMessage("getModuleDeclarations | Returning IStrategoList : " + result );
 		return result;
 	}
@@ -881,7 +887,7 @@
 		Iterable<ModuleDeclaration> decls = getModuleDeclarations(packageID);
 		logMessage("getModuleDeclarations | Found following result from SymbolTable : " + decls);
 		
-		IStrategoList result =  Utils.toTerm(this, decls);
+		IStrategoList result =  SpxIndexUtils.toTerm(this, decls);
 		logMessage("getModuleDeclarations | Returning IStrategoList : " + result );
 		
 		return result;
@@ -912,7 +918,7 @@
 				dirtyModuleDeclarations.add(decl);
 			}
 		}
-		IStrategoList result =  Utils.toTerm(this, dirtyModuleDeclarations);
+		IStrategoList result =  SpxIndexUtils.toTerm(this, dirtyModuleDeclarations);
 		logMessage("getDirtyModuleDeclarations | Returning IStrategoList : " + result );
 		
 		return result;
@@ -1038,9 +1044,10 @@
 	public void commitChanges() throws IOException {
 		ISpxPersistenceManager persistenceManager = this.getPersistenceManager();
 		persistenceManager.commit();
-		printSymbolTable(Utils.DEBUG, "commit");
+		printSymbolTable(SpxIndexConfiguration.shouldLogSymbols(), "commit");
 	}	
 
+	
 	private void printSymbolTable(boolean printIfDebug, String stageName) throws IOException {
 		ISpxPersistenceManager persistenceManager = this.getPersistenceManager();
 		if (printIfDebug){
@@ -1090,7 +1097,7 @@
 		}
 		
 		initializePersistenceManager();
-		printSymbolTable(Utils.DEBUG, "clean");
+		printSymbolTable(SpxIndexConfiguration.shouldPrintDebugInfo(), "clean");
 		
 	}
 
@@ -1099,8 +1106,8 @@
 	 * be invalidated and all the symbols will be indexed again. 
 	 */
 	boolean tryInvalidatingSpxCacheDirectories() {
-		if(Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_CACHE_DIRECTORY), true)){
-			return Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_SHADOW_DIR) , true);
+		if(SpxIndexUtils.deleteSpxCacheDir( new File(  _projectPath +"/" + SpxIndexConfiguration.SPX_CACHE_DIRECTORY), true)){
+			return SpxIndexUtils.deleteSpxCacheDir( new File(  _projectPath +"/" + SpxIndexConfiguration.SPX_SHADOW_DIR) , true);
 		}
 		return false;
 	}
@@ -1142,9 +1149,9 @@
 	 * @param uri URI of the Resource. 
 	 * @return Absolute Path represented by the URI  
 	 */
-	public String toAbsulatePath( IStrategoString uri){ return Utils.uriToAbsPathString(toFileURI(uri)); }
+	public String toAbsulatePath( IStrategoString uri){ return SpxIndexUtils.uriToAbsPathString(toFileURI(uri)); }
 
-	private URI toFileURI(IStrategoTerm filePath) {	return Utils.getAbsolutePathUri(Tools.asJavaString(filePath) ,_agent); }
+	private URI toFileURI(IStrategoTerm filePath) {	return SpxIndexUtils.getAbsolutePathUri(Tools.asJavaString(filePath) ,_agent); }
 
 	/**
 	 * Verify type of declaration . 
@@ -1190,9 +1197,9 @@
 	}
 	
 	public static IStrategoAppl forceImploderAttachment(IStrategoTerm id, IStrategoAppl term , URI file) {
-		
 		ImploderAttachment attach = ImploderAttachment.get(id);
 		if (attach != null) {
+			
 			ImploderAttachment.putImploderAttachment(term, false, attach.getSort(), attach.getLeftToken(), attach.getRightToken());
 		} else {
 			String fn = file == null ? null : file.toString();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -36,10 +36,8 @@
 	public synchronized SpxSemanticIndexFacade initFacade(IStrategoTerm projectPath , ITermFactory termFactory , IOAgent agent) throws Exception
 	{	
 		SpxSemanticIndexFacade fac = null;
-		String projectNameString  =  Utils.toAbsPathString(asJavaString(projectPath));
-		
-		agent.getWriter(IOAgent.CONST_STDOUT).write( "Initializing at " + Thread.currentThread().getId() + " at process : " + ManagementFactory.getRuntimeMXBean().getName()+"\n\n\n");
-		
+		String projectNameString  =  SpxIndexUtils.toAbsPathString(asJavaString(projectPath));
+
 		if ( !containsFacade(projectPath)) {
 		 
 			fac = new SpxSemanticIndexFacade(projectPath, termFactory, agent);
@@ -77,7 +75,7 @@
 	 * @throws Exception 
 	 */
 	public SpxSemanticIndexFacade getFacade(IStrategoTerm projectPath) throws Exception{
-		String key = Utils.toAbsPathString(asJavaString(projectPath));		
+		String key = SpxIndexUtils.toAbsPathString(asJavaString(projectPath));		
 		SpxSemanticIndexFacade facade =  _registry.get(key);
 		
 		if(facade == null) {
@@ -91,7 +89,7 @@
 
 	public synchronized void clearAll() throws IOException{
 		for(String fname : _registry.keySet())
-			removeFacade(Utils.toAbsPathString(fname));
+			removeFacade(SpxIndexUtils.toAbsPathString(fname));
 	}
 	
 	private SpxSemanticIndexFacade closePersistenceManager(String projectPath) throws IOException{
@@ -105,7 +103,7 @@
 	}
 	
 	public SpxSemanticIndexFacade closePersistenceManager(IStrategoTerm projectPathTerm) throws IOException {
-		return closePersistenceManager(Utils.toAbsPathString(asJavaString(projectPathTerm)));
+		return closePersistenceManager(SpxIndexUtils.toAbsPathString(asJavaString(projectPathTerm)));
 	}
 
 	private SpxSemanticIndexFacade removeFacade(String projectPath) throws IOException {
@@ -115,7 +113,7 @@
 	
 	
 	public boolean containsFacade(IStrategoTerm projectPath){
-		String key = Utils.toAbsPathString(asJavaString(projectPath));
+		String key = SpxIndexUtils.toAbsPathString(asJavaString(projectPath));
 		
 		return _registry.containsKey(key);
 	}	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -99,7 +99,7 @@
 		NamespaceUri namespaceUri = table.toNamespaceUri(id) ;
 		NamespaceUri packageUri = table.toNamespaceUri(enclosingPackageID) ;
 		
-		namespaces.add(ModuleNamespace.createInstance(namespaceUri, packageUri,idxFacade));
+		namespaces.add(ModuleNamespace.createInstance(namespaceUri, packageUri,idxFacade, getFileLocation()));
 		
 		return namespaces; 
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -1,5 +1,8 @@
 package org.spoofax.interpreter.library.language.spxlang.index.data;
 
+import static org.spoofax.interpreter.core.Tools.isTermTuple;
+
+import java.beans.DesignMode;
 import java.io.IOException;
 import java.io.Serializable;
 import java.util.ArrayList;
@@ -8,14 +11,17 @@
 import java.util.Set;
 import java.util.UUID;
 
+import org.spoofax.interpreter.library.language.spxlang.index.INamespace;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxPrimarySymbolTable;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
-import org.spoofax.interpreter.library.language.spxlang.index.Utils;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxIndexUtils;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.jsglr.client.imploder.Token;
 import org.spoofax.terms.attachments.TermAttachmentSerializer;
 
 public class SpxSymbol extends SpxBaseSymbol implements Serializable{
@@ -35,11 +41,11 @@
 	public NamespaceUri namespaceUri() { return _namespace; }
 	
 	IStrategoTerm deserializedDataToTerm(ITermFactory fac , TermAttachmentSerializer serializer){ 
-		return Utils.deserializeToTerm(fac, serializer, _data);
+		return SpxIndexUtils.deserializeToTerm(fac, serializer, _data);
 	}
 	
 	void serializerDataString(TermAttachmentSerializer serializer, IStrategoTerm data) throws IOException { 
-		_data  = Utils.serializeToString(serializer , data);
+		_data  = SpxIndexUtils.serializeToString(serializer , data);
 }
 	
 	public IStrategoConstructor typeCons(SpxSemanticIndexFacade facade){
@@ -73,12 +79,14 @@
 		IStrategoConstructor spxTypeCtor = this.typeCons(facade);
 		IStrategoAppl spxTypeCtorAppl = termFactory.makeAppl(spxTypeCtor); 
 		
+		//Enclosing Namespace 
+		INamespace symbolNamespace = this.namespaceUri().resolve(facade.getPersistenceManager().spxSymbolTable());
+		IStrategoAppl nsQNameAppl = symbolNamespace.toTypedQualifiedName(facade);
+		
 		//Data
 		IStrategoTerm deserializedDataToTerm = this.deserializedDataToTerm(termFactory, facade.getTermAttachmentSerializer());
+		//deserializedDataToTerm = forceImploderAttachment( deserializedDataToTerm , symbolNamespace.getAbosoluteFilePath());
 		
-		//Enclosing Namespace 
-		IStrategoConstructor qnameCons = facade.getCons().getQNameCon();
-		IStrategoAppl nsQNameAppl = this.namespaceUri().resolve(facade.getPersistenceManager().spxSymbolTable()).toTypedQualifiedName(facade);
 		
 		//ID/Key 
 		IStrategoTerm id = this.Id(termFactory); //TODO : It might require term conversion.
@@ -95,6 +103,25 @@
 				termFactory.makeAppl(symbolSortCtor));
 	}
 	
+	private IStrategoTerm forceImploderAttachment ( IStrategoTerm term  , String uri){
+		
+		ImploderAttachment attach = ImploderAttachment.get(term);
+		
+		if( attach != null){
+			term.removeAttachment(ImploderAttachment.TYPE);
+			ImploderAttachment.putImploderAttachment(term, isListOrTuple(term), attach.getSort(), attach.getLeftToken(), attach.getRightToken());
+		}
+		else
+		{	
+			term.putAttachment(ImploderAttachment.createCompactPositionAttachment(uri, 0, 0, 0, -1));
+		}
+		return term;
+	}
+	
+	private static boolean isListOrTuple(IStrategoTerm term) {
+		return term.isList() || isTermTuple(term);
+	}
+	
 	public static IStrategoTerm toTerms(SpxSemanticIndexFacade facade , Collection<SpxSymbol> symbols) throws SpxSymbolTableException{
 		IStrategoList result = facade.getTermFactory().makeList();
 		
@@ -155,9 +182,9 @@
 	}
 	
 	public String printSymbol(SpxSemanticIndexFacade f) throws IOException{
-		return  Utils.getCsvFormatted(this.getSignatureString()) 
+		return  SpxIndexUtils.getCsvFormatted(this.getSignatureString()) 
 				+ ", "
-				+ Utils.getCsvFormatted( Utils.termToString(this.deserializedDataToTerm(f.getTermFactory(), f.getTermAttachmentSerializer()) ));
+				+ SpxIndexUtils.getCsvFormatted( SpxIndexUtils.termToString(this.deserializedDataToTerm(f.getTermFactory(), f.getTermAttachmentSerializer()) ));
 	}
 	
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -2,7 +2,7 @@
 
 import java.io.Serializable;
 
-import org.spoofax.interpreter.library.language.spxlang.index.Utils;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxIndexUtils;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
@@ -26,7 +26,7 @@
 	}
 	
 	public String printSymbolKey(){
-		String toRet =  Utils.getCsvFormatted(this.getId().toString()) ;
+		String toRet =  SpxIndexUtils.getCsvFormatted(this.getId().toString()) ;
 		
 		if(isOverridable()) {return toRet+"{overridable}" ;}
 		return toRet;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Fri Dec 16 16:01:11 2011	(r23791)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Fri Dec 16 21:59:38 2011	(r23792)
@@ -12,10 +12,11 @@
 import org.spoofax.interpreter.library.language.spxlang.index.GlobalNamespace;
 import org.spoofax.interpreter.library.language.spxlang.index.INamespace;
 import org.spoofax.interpreter.library.language.spxlang.index.PackageNamespace;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxIndexConfiguration;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxPrimarySymbolTable;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacadeRegistry;
-import org.spoofax.interpreter.library.language.spxlang.index.Utils;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxIndexUtils;
 import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
 import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
@@ -32,7 +33,7 @@
 
 public class SpxPrimarySymbolTableTest extends AbstractInterpreterTest{
 	
-	private final String _projectName = ".test-symbol-table_10";
+	private final String _projectName = ".test-symbol-table_12";
 	
 	private IStrategoString projectNameTerm; 
 	private SpxSemanticIndexFacade _facade;
@@ -250,7 +251,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId,
-				namespaceAppl.getConstructor(), false
+				namespaceAppl.getConstructor(), Integer.MAX_VALUE,false
 				);
 		
 		assertEquals( 1 , resolvedSymbols.size());
@@ -273,11 +274,13 @@
 		// Indexing Symbol
 		_facade.indexSymbol(symbolDef);
 	
-	// Resolving Symbol 
+		// Resolving Symbol 
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId,
-				namespaceAppl.getConstructor(), false
+				namespaceAppl.getConstructor(),
+				Integer.MAX_VALUE,
+				false
 				);
 		
 		assertEquals( 1 , resolvedSymbols.size());
@@ -288,7 +291,9 @@
 		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId,
-				namespaceAppl.getConstructor(), false
+				namespaceAppl.getConstructor(),
+				Integer.MAX_VALUE,
+				false
 				);
 		
 		assertEquals( 0 , resolvedSymbols.size());
@@ -357,7 +362,9 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
-				_facade.getCons().getConstructor("SDFDef", 0), false 
+				_facade.getCons().getConstructor("SDFDef", 0),
+				Integer.MAX_VALUE,
+				false 
 				);
 		
 		assertEquals(2 , resolvedSymbols.size());
@@ -366,7 +373,9 @@
 		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbol( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
-				_facade.getCons().getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0),
+				Integer.MAX_VALUE
+				
 				);
 		
 		assertEquals(1 , resolvedSymbols.size());
@@ -374,7 +383,9 @@
 		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
-				_facade.getCons().getConstructor("STRDef", 0), false 
+				_facade.getCons().getConstructor("STRDef", 0),
+				Integer.MAX_VALUE,
+				false 
 				);
 		
 		assertEquals( 1 , resolvedSymbols.size());
@@ -397,7 +408,9 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolUnknownId,
-				_facade.getCons().getConstructor("SDFDef", 0), false 
+				_facade.getCons().getConstructor("SDFDef", 0),
+				Integer.MAX_VALUE,
+				false 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -417,7 +430,9 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
-				_facade.getCons().getConstructor("SDFDef", 0), false 
+				_facade.getCons().getConstructor("SDFDef", 0),
+				Integer.MAX_VALUE,
+				false 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -442,13 +457,168 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, this.moduleDeclarationP2M1),
 				symbolId1,
-				_facade.getCons().getConstructor("SDFDef", 0), false 
+				_facade.getCons().getConstructor("SDFDef", 0),
+				Integer.MAX_VALUE,
+				false 
+				);
+		
+		assertEquals(0, resolvedSymbols.size());
+	}
+	
+	
+	
+	public void test_ShouldFind_GlobalSymbol_from_InternalScope() throws IOException, SpxSymbolTableException{
+		setupScopeTree();
+
+		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getCons().getGlobalNamespaceTypeCon());// defining a composite key 
+		IStrategoTerm symbolId = termFactory().makeTuple( namespaceAppl , termFactory().makeString("TestId"));// defining following composite ID :  (Global() , "TestId")
+	 	IStrategoTerm data = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade); // defining Data
+		IStrategoAppl typeAppl = namespaceAppl ;// setting Type to Global() 
+		
+		// Defining Symbol-Table entry 
+		IStrategoAppl symbolDef = createEntry(namespaceAppl , symbolId , typeAppl  , data);
+		
+		// Indexing Symbol
+		_facade.indexSymbol(symbolDef);
+	
+		
+		IStrategoAppl internalModuleAppl = ModuleDeclaration.toModuleQNameAppl( _facade, 
+				PackageNamespace.packageInternalModuleId(
+						this.packageDeclaration2.getId(), 
+						_facade)
+				);
+		
+		// Resolving Symbol 
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
+				internalModuleAppl,
+				symbolId,
+				namespaceAppl.getConstructor(),
+				Integer.MAX_VALUE,
+				false
+			);
+			
+		assertEquals( 1 , resolvedSymbols.size());
+	}
+	
+	
+	public void test_ShouldResolveModuleInternalSymbols_from_Module_in_same_Package() throws IOException, SpxSymbolTableException{
+		
+		setupScopeTree();
+		
+		IStrategoAppl internalModuleAppl = ModuleDeclaration.toModuleQNameAppl( _facade, 
+				PackageNamespace.packageInternalModuleId(
+						this.packageDeclaration2.getId(), 
+						_facade)
+				);
+		IStrategoTerm symbolId1 = termFactory().makeTuple(internalModuleAppl , termFactory().makeString("1")); // defining following composite ID :  (Global() , "1") 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("SDFDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(internalModuleAppl , symbolId1 , typeAppl1  , data1));
+		boolean returnDuplicates = false;
+		
+		// searching from a module name 
+		Set<SpxSymbol>  resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade, this.moduleDeclarationP2M1.getId()),
+				symbolId1,
+				_facade.getCons().getConstructor("SDFDef", 0),
+				Integer.MAX_VALUE,
+				returnDuplicates
+				);
+		
+		assertEquals(1, resolvedSymbols.size());
+	}
+	
+	
+	public void test_ShouldResolveModuleInternalSymbols_From_Internal_Module_of_same_Package() throws IOException, SpxSymbolTableException{
+		
+		setupScopeTree();
+		
+		IStrategoAppl internalModuleAppl = ModuleDeclaration.toModuleQNameAppl( _facade, 
+				PackageNamespace.packageInternalModuleId(
+						this.packageDeclaration2.getId(), 
+						_facade)
+				);
+		IStrategoTerm symbolId1 = termFactory().makeTuple(internalModuleAppl , termFactory().makeString("1")); // defining following composite ID :  (Global() , "1") 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("SDFDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(internalModuleAppl , symbolId1 , typeAppl1  , data1));
+		boolean returnDuplicates = false;
+		
+		// searching from a module name 
+		Set<SpxSymbol>  resolvedSymbols = null;
+		
+		// trivial : searching from the internal namespace 
+		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
+				internalModuleAppl,
+				symbolId1,
+				_facade.getCons().getConstructor("SDFDef", 0),
+				Integer.MAX_VALUE,
+				returnDuplicates
+				);
+		
+		assertEquals(1, resolvedSymbols.size());
+	}
+	
+	
+	public void test_Should_NOT_ResolveModuleInternalSymbols_from_Other_Scope() throws IOException, SpxSymbolTableException{
+		
+		setupScopeTree();
+		
+		IStrategoAppl internalModuleAppl = ModuleDeclaration.toModuleQNameAppl( _facade, 
+				PackageNamespace.packageInternalModuleId(
+						this.packageDeclaration2.getId(), 
+						_facade)
+				);
+		IStrategoTerm symbolId1 = termFactory().makeTuple(internalModuleAppl , termFactory().makeString("1")); // defining following composite ID :  (Global() , "1") 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("SDFDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(internalModuleAppl , symbolId1 , typeAppl1  , data1));
+		boolean returnDuplicates = false;
+		
+		// searching from a module name 
+		Set<SpxSymbol>  resolvedSymbols = null;
+		
+		//TRY1 : from other package , symbol lookup should fail
+		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
+				PackageDeclaration.toPackageQNameAppl(_facade, this.packageDeclaration1.getId()),
+				symbolId1,
+				_facade.getCons().getConstructor("SDFDef", 0), 
+				Integer.MAX_VALUE,
+				returnDuplicates
+				);
+		
+		assertEquals(0, resolvedSymbols.size());
+		
+		//TRY2 : from other package , symbol lookup should fail
+		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade, this.moduleDeclarationP1M2.getId()),
+				symbolId1,
+				_facade.getCons().getConstructor("SDFDef", 0),
+				Integer.MAX_VALUE,
+				returnDuplicates
+				);
+		
+		assertEquals(0, resolvedSymbols.size());
+		
+		
+		//TRY3 : from other package's internal scope , symbol lookup should fail
+		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl( _facade, 
+						PackageNamespace.packageInternalModuleId(
+								this.packageDeclaration1.getId(), 
+								_facade)
+						),
+				symbolId1,
+				_facade.getCons().getConstructor("SDFDef", 0), Integer.MAX_VALUE, returnDuplicates
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
 	}
 	
-	public void testShouldNotResolveModuleInternalSymbolsFromPackage() throws IOException, SpxSymbolTableException{
+	public void test_ShouldResolveModuleInternalSymbols_from_same_Package() throws IOException, SpxSymbolTableException{
 		setupScopeTree();
 		
 		IStrategoAppl internalModuleAppl = ModuleDeclaration.toModuleQNameAppl( _facade, 
@@ -461,17 +631,20 @@
 		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("SDFDef", 0)); // setting Type  
 		
 		_facade.indexSymbol(createEntry(internalModuleAppl , symbolId1 , typeAppl1  , data1));
+		boolean returnDuplicates = false;
 		
+		//searching from a package 
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade, this.packageDeclaration2.getId()),
 				symbolId1,
-				_facade.getCons().getConstructor("SDFDef", 0), false 
+				_facade.getCons().getConstructor("SDFDef", 0), Integer.MAX_VALUE,returnDuplicates
 				);
 		
-		assertEquals(0, resolvedSymbols.size());
+		assertEquals(1, resolvedSymbols.size());
+		
 	}
 	
-	public void testShouldResolveModuleInternalSymbolsFromModule() throws IOException, SpxSymbolTableException{
+	public void test_Should_ResolveModuleInternalSymbols_from_Module() throws IOException, SpxSymbolTableException{
 		setupScopeTree();
 		IStrategoAppl internalModuleAppl = ModuleDeclaration.toModuleQNameAppl( _facade, 
 				PackageNamespace.packageInternalModuleId(
@@ -487,7 +660,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				internalModuleAppl,
 				symbolId1,
-				_facade.getCons().getConstructor("SDFDef", 0), false 
+				_facade.getCons().getConstructor("SDFDef", 0),Integer.MAX_VALUE, false 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -516,7 +689,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()),
 				symbolId1,
-				_facade.getCons().getConstructor("ModuleDef", 0), false 
+				_facade.getCons().getConstructor("ModuleDef", 0), Integer.MAX_VALUE,false 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -535,7 +708,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()),
 				symbolId1,
-				_facade.getCons().getConstructor("ModuleDef", 0), false 
+				_facade.getCons().getConstructor("ModuleDef", 0),Integer.MAX_VALUE, false 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -561,7 +734,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()),
 				symbolId1,
-				_facade.getCons().getConstructor("ModuleDef", 0), false 
+				_facade.getCons().getConstructor("ModuleDef", 0),Integer.MAX_VALUE, false 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -569,7 +742,7 @@
 		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId()),
 				symbolId1,
-				_facade.getCons().getConstructor("ModuleDef", 0), false 
+				_facade.getCons().getConstructor("ModuleDef", 0),Integer.MAX_VALUE, false 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -607,7 +780,7 @@
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()), // search origin
 				symbolId3,	//looking for 
 				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
-, false
+,Integer.MAX_VALUE, false
 				);
 		
 		
@@ -645,7 +818,7 @@
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId()), // search origin
 				symbolId3, // loooking for 
 				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
-, false
+,Integer.MAX_VALUE, false
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -686,7 +859,7 @@
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
 				symbolId3, // loooking for 
 				tfacade.getCons().getConstructor("ModuleDef", 0) // with type 
-, false
+, Integer.MAX_VALUE,false
 				);
 		
 		// current import chain is as following : p1-> p2 ->p3->p1
@@ -702,7 +875,8 @@
 		resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbol(
 				ModuleDeclaration.toModuleQNameAppl(tfacade,this.moduleDeclarationP3M1.getId()), // search origin
 				symbolId3, // loooking for 
-				tfacade.getCons().getConstructor("ModuleDef", 0) // with type 
+				tfacade.getCons().getConstructor("ModuleDef", 0) , // with type 
+				Integer.MAX_VALUE
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -770,6 +944,7 @@
 				nsAppl, // search origin
 				symbolId1,	//looking for 
 				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
+				, Integer.MAX_VALUE
 				, true
 				);
 		
@@ -801,7 +976,7 @@
 				nsAppl, // search origin
 				symbolId1,	//looking for 
 				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
-, false
+, Integer.MAX_VALUE, false
 				);
 		
 		
@@ -826,7 +1001,7 @@
 				nsAppl, // search origin
 				symbolId2,	//looking for 
 				_facade.getCons().getConstructor("SDFDef", 0) // with type 
-, false
+, Integer.MAX_VALUE, false
 				);
 		
 		
@@ -866,7 +1041,7 @@
 				nsAppl, // search origin
 				symbolId1,	//looking for 
 				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
-, false
+,Integer.MAX_VALUE, false
 				);
 		
 		
@@ -942,6 +1117,212 @@
 		}
 	}
 	
+	
+	public void test_Resolve_Depth_Zero_ShouldOnlyResolve_LocalSymbol() throws Exception{
+		final int resolveDepth = 0;
+		
+		createExtendedScopeTree();
+		
+		IStrategoAppl globalNamespaceAppl = termFactory().makeAppl(_facade.getCons().getGlobalNamespaceTypeCon());
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+		IStrategoAppl moduleQnameAppl2 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M2.getId());
+		
+		// Defining Symbol1 in P1.M1
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		
+		
+		// Defining Symbol1 in P1.M2
+		IStrategoTerm symbolId2 = moduleQnameAppl2;   
+	 	IStrategoAppl typeAppl2 = typeAppl1; 
+	 	IStrategoTerm data2 = data1; 
+	 	
+	 	
+	 	// 	Defining Symbol1 in Global
+		IStrategoTerm symbolId3 = moduleQnameAppl1;  // both symbol has same ID 
+	 	IStrategoTerm data3 = data1; 
+	 	IStrategoAppl typeAppl3 = typeAppl1;
+		
+	 	_facade.indexSymbol(createEntry(moduleQnameAppl2 , symbolId2 , typeAppl2  , data2));
+		_facade.indexSymbol(createEntry(globalNamespaceAppl , symbolId3 , typeAppl3  , data3));
+		_facade.commitChanges();
+	
+		_registry.closePersistenceManager(this.projectNameTerm);
+		_registry.initFacade(projectNameTerm, termFactory(), ioAgent());
+		
+		// loading Index Facade again
+		SpxSemanticIndexFacade tfacade = _registry.getFacade(this.projectNameTerm);
+		
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbol(
+				moduleQnameAppl1, // search origin
+				symbolId2,   // ID
+				typeAppl1.getConstructor(), // of Type 
+				resolveDepth
+			);
+		
+		assertEquals(0, resolvedSymbols.size());
+		
+		
+		resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbol(
+				moduleQnameAppl1, // search origin
+				symbolId2,   // ID
+				typeAppl1.getConstructor(), // of Type 
+				Integer.MAX_VALUE
+			);
+		
+		assertEquals(1, resolvedSymbols.size());
+	}	
+	
+	public void test_Resolve_Depth_Zero_ShouldOnlyResolve_LocalSymbols() throws Exception{
+		final int resolveDepth = 0;
+		
+		createExtendedScopeTree();
+		
+		IStrategoAppl globalNamespaceAppl = termFactory().makeAppl(_facade.getCons().getGlobalNamespaceTypeCon());
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+		IStrategoAppl moduleQnameAppl2 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M2.getId());
+		IStrategoAppl moduleQnameAppl3 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId());
+		
+		// Defining Symbol1 in P1.M1
+		IStrategoTerm symbolId1 = moduleQnameAppl1; 
+	 	IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		
+		
+		// Defining Symbol1 in P1.M2
+		IStrategoTerm symbolId2 = moduleQnameAppl1;  // both symbol has same ID 
+	 	IStrategoAppl typeAppl2 = typeAppl1; 
+	 	IStrategoTerm data2 = data1; 
+	 	
+	 	
+	 	// 	Defining Symbol1 in Global
+		IStrategoTerm symbolId3 = moduleQnameAppl1;  // both symbol has same ID 
+	 	IStrategoTerm data3 = data1; 
+	 	IStrategoAppl typeAppl3 = typeAppl1;
+	 	
+ 		//	 	Defining Symbol1 in imported Namespace e.g., P2.M1
+		IStrategoTerm symbolId4 = moduleQnameAppl1;  // both symbol has same ID 
+	 	IStrategoTerm data4 = data1; 
+	 	IStrategoAppl typeAppl4 = typeAppl1;
+	 	
+		
+	 	_facade.indexSymbol(createEntry(moduleQnameAppl1 , symbolId1 , typeAppl1  , data1));
+		_facade.indexSymbol(createEntry(moduleQnameAppl2 , symbolId2 , typeAppl2  , data2));
+		_facade.indexSymbol(createEntry(globalNamespaceAppl , symbolId3 , typeAppl3  , data3));
+		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId4 , typeAppl4  , data4));
+		
+		_facade.commitChanges();
+	
+		// closing persistence manager
+		_registry.closePersistenceManager(this.projectNameTerm);
+		_registry.initFacade(projectNameTerm, termFactory(), ioAgent());
+		
+		// loading Index Facade again
+		SpxSemanticIndexFacade tfacade = _registry.getFacade(this.projectNameTerm);
+		
+		//Test 1 : Should return Only 1 symbol 
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbols(
+				moduleQnameAppl1, // search origin
+				symbolId1,   // ID
+				typeAppl1.getConstructor(), // of Type 
+				resolveDepth, 
+				false
+			);
+		
+		// Test 2 : should only return one symbol from the Module P1M1. It should not resolve symbol from P1M2
+		assertEquals(1, resolvedSymbols.size());
+		
+		for( SpxSymbol sym : resolvedSymbols) {
+			assertTrue(SpxSymbol.verifyEquals(symbolId1, sym.Id(_facade.getTermFactory())));
+			assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP1M1.getId() , sym.namespaceUri().id()) );
+			
+			assertTrue(sym.equalSignature(typeAppl1.getConstructor())); 
+		}
+		
+		
+		//Test 3 : Should return 2 symbols as Package contain two Symbol with the provided ID & Type
+		resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbols(
+				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()), // search origin
+				symbolId1,   // ID
+				typeAppl1.getConstructor(), // of Type 
+				resolveDepth, 
+				false
+			);
+		
+		assertEquals(2, resolvedSymbols.size());
+		
+		for( SpxSymbol sym : resolvedSymbols) {
+			assertTrue(SpxSymbol.verifyEquals(symbolId1, sym.Id(_facade.getTermFactory())));
+			assertTrue(sym.equalSignature(typeAppl1.getConstructor())); 
+		}
+		
+		//Test 4 : Should return all the symbol with the specified ID and Type. 
+		resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbols(
+				moduleQnameAppl1, // search origin
+				symbolId1,   // ID
+				typeAppl1.getConstructor(), // of Type 
+				Integer.MAX_VALUE, 
+				false
+			);
+		
+		assertEquals(4, resolvedSymbols.size());
+		
+		for( SpxSymbol sym : resolvedSymbols) {
+			assertTrue(SpxSymbol.verifyEquals(symbolId1, sym.Id(_facade.getTermFactory())));
+			assertTrue(sym.equalSignature(typeAppl1.getConstructor())); 
+		}
+		
+	}	
+	
+	public void test_Resolve_Depth_Zero_ShouldOnlyResolve_LocalSymbols2() throws Exception{
+		final int resolveDepth = 0;
+		
+		createExtendedScopeTree();
+		
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+		
+		// Defining Symbol1 in P1.M1
+		IStrategoTerm symbolId1 = moduleQnameAppl1; 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl1 , symbolId1 , typeAppl1  , data1));
+		
+		
+		IStrategoAppl moduleQnameAppl2 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M2.getId());
+		
+		// Defining Symbol1 in P1.M2
+		IStrategoTerm symbolId2 = moduleQnameAppl1; 
+	 	IStrategoTerm data2 = (IStrategoAppl)moduleDeclarationP1M2.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl2 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef__", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl2 , symbolId2 , typeAppl2  , data2));
+		
+		
+		_facade.commitChanges();
+	
+		// closing persistence manager
+		_registry.closePersistenceManager(this.projectNameTerm);
+		_registry.initFacade(projectNameTerm, termFactory(), ioAgent());
+		
+		// loading tfacade again
+		SpxSemanticIndexFacade tfacade = _registry.getFacade(this.projectNameTerm);
+		
+
+		//Test 0 : Should not return any symbol as Module does not have any symbol with ID = symbolId1
+		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbols(
+				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
+				symbolId1,   // ID
+				typeAppl1.getConstructor(), // of Type 
+				resolveDepth, 
+				false
+			);
+		
+		assertEquals(0, resolvedSymbols.size());
+		
+		
+	}
+	
 	public void testResolveShouldReturnAllSymbolsOfaType() throws Exception{
 		createExtendedScopeTree();
 		
@@ -985,10 +1366,10 @@
 		//--------------------------------------------------------------------------------------------------
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
-				termFactory().makeString(Utils.All), // loooking for * symbols 
-				typeAppl1.getConstructor() // of Type 
-, false
-				);
+				termFactory().makeString(SpxIndexUtils.All), // loooking for * symbols 
+				typeAppl1.getConstructor(), // of Type 
+				Integer.MAX_VALUE, false
+			);
 		
 		assertEquals(1, resolvedSymbols.size());
 		
@@ -1001,9 +1382,10 @@
 		//--------------------------------------------------------------------------------------------------
 		resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()), // search origin
-				termFactory().makeString(Utils.All), // loooking for * symbols 
-				typeAppl1.getConstructor() // of Type 
-, false
+				termFactory().makeString(SpxIndexUtils.All), // loooking for * symbols 
+				typeAppl1.getConstructor(), // of Type 
+				Integer.MAX_VALUE, 
+				false
 				);
 		
 		assertEquals(2, resolvedSymbols.size());
@@ -1057,7 +1439,7 @@
 	private IStrategoAppl createEntry(IStrategoAppl namespaceAppl , IStrategoTerm id , IStrategoAppl typeAppl, IStrategoTerm data){
 		
 		IStrategoConstructor ctor = _facade.getCons().getSymbolTableEntryDefCon();
-		IStrategoAppl symbolEntryAppl = (IStrategoAppl)termFactory().makeAppl(ctor, namespaceAppl , id , typeAppl,data);
+		IStrategoAppl symbolEntryAppl = (IStrategoAppl)termFactory().makeAppl(ctor, namespaceAppl , id , typeAppl,data , termFactory().makeAppl( _facade.getCons().getOverridableSymbolTypeCon()));
 		return symbolEntryAppl;
 	}
 	


From M.A.Akhter at student.tudelft.nl  Fri Dec 16 23:02:24 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 16 Dec 2011 22:02:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23793 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang
Message-ID: <20111216220224.E94B6CC125@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Dec 16 22:02:24 2011
New Revision: 23793
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23793&sc=1

Log:
added origin equality check. it is extended version of the original origin equal which only checks reference equality of the imploderattachment. however, in this primitive , not only references , but also the values of ImploderAttachment are checked ( in case, reference equality failed). This is particularly important in the context of spoofaxlang due to serialzation of symbols along with its  attachments.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_verify_symbols_have_equal_origin.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Dec 16 21:59:38 2011	(r23792)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Dec 16 22:02:24 2011	(r23793)
@@ -70,6 +70,8 @@
 		add(new SPX_symtab_resolve_symbols(spxIndex));
 		add(new SPX_symtab_verify_symbol_exists(spxIndex));
 		add(new SPX_symtab_undefine_symbols(spxIndex));
+		add(new SPX_symtab_verify_symbols_have_equal_origin(spxIndex));
+		
 	}
 
 	public String getOperatorRegistryName() {

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_verify_symbols_have_equal_origin.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_verify_symbols_have_equal_origin.java	Fri Dec 16 22:02:24 2011	(r23793)
@@ -0,0 +1,109 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import static org.spoofax.terms.attachments.OriginAttachment.tryGetOrigin;
+
+import java.io.File;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+
+/**
+ * Primitive to verify whether the provided two Spx Symbol has equal origin
+ * 
+ * @author Md. Adil Akhter
+ */
+public class SPX_symtab_verify_symbols_have_equal_origin extends AbstractPrimitive {
+	private static String NAME = "SPX_symtab_verify_symbols_have_equal_origin";
+	private final static int NO_ARGS = 2;
+	
+	public SPX_symtab_verify_symbols_have_equal_origin(SpxSemanticIndex index) {
+		super(NAME, 0, NO_ARGS);
+	}
+	
+	
+	@Override
+	public final boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		IStrategoTerm tvar1 = tvars[0];
+		IStrategoTerm tvar2 = tvars[1];
+		
+		return equal(tvar1, tvar2);
+		
+	}
+	
+	private static boolean equal(IStrategoTerm t1, IStrategoTerm t2) {
+		ImploderAttachment origin1 = ImploderAttachment.get(tryGetOrigin(t1));
+		if (origin1 == null) return false;
+		if (t1 == t2) return true;
+		
+		ImploderAttachment origin2 = ImploderAttachment.get(tryGetOrigin(t2));
+		return verifyOriginsAreEqual(origin1, origin2);
+	}
+	
+	/**
+	 * Verify the ImploderAttachment provided as arguments and return true 
+	 * if they are valid and if they contain same origin info. Thus, if both attachments 
+	 * are null, it is returning false.
+	 * 
+	 * @param attachment First Attachment as argument 
+	 * @param otherAttachment Second Attachment 
+	 * @return true if the provided attachments are valid and contain same origin info, e.g. Line No , Column No , Start Offset and End Offset are same.
+	 */
+	private static boolean verifyOriginsAreEqual( ImploderAttachment attachment , ImploderAttachment otherAttachment ){
+		if(attachment == otherAttachment) 
+			return true;	
+		else
+		{	
+			if (attachment == null || otherAttachment == null) {
+				return false;
+			} else {
+				IToken leftToken = attachment.getLeftToken();
+				IToken otherLeftToken = otherAttachment.getLeftToken();
+
+				if (leftToken == null || otherLeftToken == null) {
+					return false;
+				}
+				if ((leftToken.getLine() != otherLeftToken.getLine())
+						|| (leftToken.getColumn() != otherLeftToken.getColumn())
+						|| (leftToken.getStartOffset() != otherLeftToken
+								.getStartOffset()))
+					return false;
+
+				IToken rightToken = attachment.getRightToken();
+				IToken otherRightToken = otherAttachment.getRightToken();
+
+				if (rightToken == null || otherRightToken == null) {
+					return false;
+				}
+				if (rightToken.getEndOffset() != otherRightToken.getEndOffset())
+					return false;
+
+				String fileLocation = leftToken.getTokenizer().getFilename();
+				String otherFileLocation = otherLeftToken.getTokenizer()
+						.getFilename();
+
+				if (fileLocation != null) {
+					if (otherFileLocation == null) {
+						return false;
+					}
+				} else if (otherFileLocation != null) {
+					return false;
+				}
+
+				if (fileLocation == null && otherFileLocation == null) {
+					return false;
+				} else if (!(new File(fileLocation))
+						.getAbsolutePath()
+						.equalsIgnoreCase(
+								(new File(otherFileLocation)).getAbsolutePath()))
+					return false;
+			}
+		}
+	
+		return true;
+	}
+}

From M.A.Akhter at student.tudelft.nl  Fri Dec 16 23:03:47 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 16 Dec 2011 22:03:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23794 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	analyze/str codegen codegen/esv codegen/sdf codegen/str
	context context/sdf context/str editor/com...
Message-ID: <20111216220347.A14FF7F8005@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Dec 16 22:03:47 2011
New Revision: 23794
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23794&sc=1

Log:
- fixed error checking of Signature Constructors. Now it would also show the artity as following CTOR(_ , _) ...

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-globals.str
      - copied, changed from r23769, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-locals.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-utils.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/completion/to-stratego-proposals.str
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-contracts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -11,9 +11,9 @@
   utils/debug 
 imports  
   context/sdf/declare-signature
-  context/str/declare
-  context/str/signature-generator
-
+  context/str/-
+  context/symboltable
+	
 rules
   analyze-section: 
     STRSection(ast) -> ( errors, warnings, [])
@@ -23,7 +23,7 @@
 			       {|IsNoConflict
 			       : errors   := <collect-all(stratego-global-constraint-error + stratego-constraint-error, conc)> ast
 			       ; warnings := <collect-all(stratego-constraint-warning, conc)> ast 
-			       |}
+			        |}
 	       )
 	     
 rules 
@@ -90,9 +90,7 @@
          <resolve-str-declaration> cookie => SDefT(_, _, _, _)
       <+ IsNoConflict
       )
-	
-	
-	//signature-of => str-sig ; is-declared-stratego(?str-sig)
+			//signature-of => str-sig ; is-declared-stratego(?str-sig)
 	
 	
   // FIXME: name sdefs after constructors to fix constructor conflict errors 
@@ -129,6 +127,8 @@
   stratego-constraint-error:
     Rule(t, _, _) -> <stratego-constraint-error-bad-match> t
 
+	stratego-constraint-error = stratego-constraint-error-bad-build
+	 
   stratego-constraint-error-bad-build:
     t -> matches
     where
@@ -145,19 +145,33 @@
       map(!(<id>, "Build symbol in match pattern")) => builds;
       require([])
   
+ 
   //TODO FIX : origin-equal
-  /*
   stratego-constraint-warning:
     a at Assign(v @ Var(x), _) -> (x, $[Variable '[x]' may be bound already])
-    where
+		where
       Var(x') := <declaration-of> v;
-      require(<origin-equal(|x)> x');
-    */
-	
-  stratego-constraint-warning:
-    Var(x) -> (x, $[Unparenthesized constructor: use '[x]()' instead])
-    where
-      require(not(is-constructor))
+    	require(<spx-origin-equal(|x)> x')
+ 
+ 
+ stratego-constraint-warning:
+    Var(x) -> (x, $[Unparenthesized constructor: use '[x]( [args] )' instead])
+    where
+      require(not(<get-declared-signature>Var(x) => (opname, arity)))  
+    where   
+      ![];
+      get-underscored-string-list(|arity);
+      separate-by(|",");
+      concat-strings;
+      ?args 
+      
+  get-underscored-string-list(|arity) =
+  	?lst;     
+  	if !arity => 0 then 
+  		!lst
+  	else
+  		<get-underscored-string-list( | <subti> (arity,1))> [" _ " | lst]
+  	end		 
 
   stratego-constraint-warning:
     CallT(SVar(<"debug" + "say">), [t], []) -> (s, $[Should be '![s]'])

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -41,8 +41,11 @@
 		
 	// Compiler initialization
 	compile-init =
-		where (index-init <+ debug(!"Failed to initialize SemanticIndex at this moment. Please try later"));
-		
+		where (
+			index-init 
+		<+ 
+			debug(! $[Failed to initialize SemanticIndex for [<get-project-path>] at this moment...."])
+		);
 		// Getting Source directory to start parsing files if needed.
 		// Otherwise, it reads from the cache
 		where(

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -61,9 +61,9 @@
 		module-qname'* -> <id>
 		where
 			with-spxverify(	
-		 		project-path             := <ProjectPath>
-		 		; Package(package-qname)   := <GetEnclosingPackageName>
-		 		, !" Failed to get current-project-path or enclosing package name @generate-esv-main"
+		 		project-path             := <ProjectPath>;
+		 		Package(package-qname)   := <GetEnclosingPackageName>,
+		 		!" Failed to get current-project-path or enclosing package name @generate-esv-main"
 		 	)
  			; dbg-compiler(!$[CodeGen | ESV | Generate-esv-main  : [<print-as-string>package-qname]])
 			; with-spxverify(

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -24,6 +24,7 @@
 	
 // TODO : generalize several  strategies that are doing a common function 	
 rules
+	
 	to-signature-as-rtree = parse-stratego-string
 	
 	ensure-valid-generated-signature-relative-path(|project-path):
@@ -38,7 +39,7 @@
 
 	get-global-signatures = 
 		activate-global-scope(
-			<resolve-all-symbol-definitions-by-type>OperationDeclaration() => result*
+			<resolve-all-of-current-scope-by-type>OperationDeclaration() => result*
 		);
 		!result*;
 		operation-decl-to-string
@@ -47,7 +48,7 @@
 	get-all-enclosed-module-signature =
 		verify(?m at Module(QName(_)) | <id> , "Module(QName(_)) @get-all-signatures "); 
 		activate-scope(
-			<resolve-all-symbol-definitions-by-type>OperationDeclaration() => result*
+			<resolve-all-of-current-scope-by-type>OperationDeclaration() => result*
 			| m
 		);
 		! result*;
@@ -109,18 +110,18 @@
 		where 
 			dbg-compiler(! $[Codegen | SDF | Generating deafult signatures])			
 			; generated-signatures-string :=  <get-signature-contents(|sig-file-name,"")><get-global-signatures>
-			; signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
+			; signatures-as-aterm-string  := <to-signature-as-rtree >generated-signatures-string
 		where  
-			 autogen-dir := $[[project-path]/[<get-autogenerated-artifacts-dir>]]
-			;output-path-str 		:=   $[[autogen-dir]/[sig-file-name].str]
-			;output-path-rtree 		:= $[[autogen-dir]/[sig-file-name].rtree]
-			;<ensure-path-exists>(project-path, $[[<get-autogenerated-artifacts-dir>]/Globals]) 
-			;chdir-to-project-path  
+			autogen-dir := $[[project-path]/[<get-autogenerated-artifacts-dir>]]
+			; output-path-str 		:=   $[[autogen-dir]/[sig-file-name].str]
+			; output-path-rtree 		:= $[[autogen-dir]/[sig-file-name].rtree]
+			; <ensure-path-exists>(project-path, $[[<get-autogenerated-artifacts-dir>]/Globals]) 
+			; chdir-to-project-path  
 		where
 			<save-to-file>( output-path-str, generated-signatures-string)
-			;<WriteToBinaryFile>(output-path-rtree, signatures-as-aterm-string)
-			;<refresh-file>output-path-str
-			;<refresh-file>output-path-rtree
+			; <WriteToBinaryFile>(output-path-rtree, signatures-as-aterm-string)
+			; <refresh-file>output-path-str
+			; <refresh-file>output-path-rtree
 			; dbg-compiler(! $[ Codegen | SDF | Finishing generation of default signature])
 	
 rules 
@@ -187,14 +188,16 @@
 				  Globals/Signatures
 			  ]
 			; generated-signatures-string :=  <get-signature-contents(|sig-file-name,imports-string)> <get-all-enclosed-module-signature> module-typed-qname
-			; signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
+			; signatures-as-aterm-string  :=  <to-signature-as-rtree >generated-signatures-string
 		where  
 			with-spxverify(
+	
 				<save-artifact(
 					save-to-file| 
 					package-untyped-qname, 
 					root-directory, 
 					<get-output-path(|"signature", "str")>(root-directory, module-untyped-qname))> generated-signatures-string;
+	
 			  <save-artifact(
 			  	WriteToBinaryFile| 
 			  	package-untyped-qname, 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-contracts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-contracts.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-contracts.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -2,7 +2,7 @@
 imports 
   libstrc
   lib/editor-common.generated
-  context/str/declare
+  context/str/-
   include/SpoofaxLang 
   common
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -2,7 +2,7 @@
 
 imports
 	context/sdf/declare
-	context/str/declare
+	context/str/-
 	context/esv/declare
 	context/template/declare
 	context/sdf/declare-signature

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -5,7 +5,7 @@
 	lib/editor-common.generated
 imports 
 	context/-
-	context/str/declare
+	context/str/-
 	context/template/declare
 imports  
   	normalize/signatures

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -22,6 +22,10 @@
 // TODO : write a pretty printer to convert Get-Operation-Declaration to Signatures' Aterm
 rules 
 	  
+  get-declared-signature = 
+  	? Var(x)
+  	; <verify-declared-construction-by-name> x 
+  
   is-declared-signature(|actual-arity)=
     one(
         ( ?<id>
@@ -29,8 +33,21 @@
         ; verify-declared-constructor(|actual-arity)
     )
 
-  verify-declared-constructor(| arity) = 
-  	?opName
+	verify-declared-construction-by-name = 
+		? opName;
+		where (
+			candidate-op-signatures := <getOperationSignatures>opName
+		 	; rec x( 
+		 	  	[?(opName ,arity) | id] 
+				<+
+	  		   [id | x]	
+	  		 )
+		);
+		!(opName ,arity) 
+		  
+		  	
+  verify-declared-constructor(|arity) = 
+  	? opName
   	;	candidate-op-signatures := <getOperationSignatures>opName
     ;	dbg-analysis(! $[operation name : [<print-as-string>opName] . Associated Signatures Found :  [<print-as-string> candidate-op-signatures]] | "verify-declared-constructor" , <debug-level-WARNING>)
     ;	<assert-eq-opname-arity(|opName, arity)>candidate-op-signatures

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -1,10 +1,4 @@
 module context/signatures
-
-// signature visibility 
-
-// Importing depth > 1 => visibility is internal
-// IDEA : how to implement this depth
-// build a tree and during resolving search in only one level up 
  
 signature constructors
 	Public	:	 Visibility
@@ -12,7 +6,11 @@
 	Internal:  Visibility	
 
 
-//Signature scopes	
+	InternalScope : ScopeType
+	GlobalScope   : ScopeType
+	PublicScope   : ScopeType
+	
+	
 signature constructors
 	Modules										: ScopedSymbol
 	Packages			 						: ScopedSymbol
@@ -31,8 +29,8 @@
 
 signature constructors 
 
-    OperationSignature : Type 
-    OperationDeclaration : Type 
+  OperationSignature   : Type 
+  OperationDeclaration : Type 
     
  
 signature constructors
@@ -48,6 +46,7 @@
 	
 	
 	STRDef                    : Type
+	RenamedSDefT              : Type
 	STRCookie                 : Type
 	STRSignature              : Type
 	SortDeclaration           : Type
@@ -58,15 +57,19 @@
 	//templatelang 
 	TemplateOptions   : Type
 	CanNotBeBlankFlag : Type   
-	
+
+signature constructors 
+		
 	BooleanType : Type
 	True : BooleanType
 	False : BooleanType
 	
-	Flag : Type  
-
+	
+	
 signature constructors 
 
+	Flag : Type  
+
 	CompileFlag : Flag 
 	
 	CurrentlyCompilingFlag : CompileFlag

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-globals.str (from r23769, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Mon Dec 12 20:50:19 2011	(r23769, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-globals.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -1,4 +1,4 @@
-module context/str/declare
+module context/str/declare-globals
 
 imports
 	libstrc		
@@ -18,177 +18,17 @@
 imports 
 	context/-
 	normalize/-
-	context/str/signature-generator
+	context/str/-
 	spoofaxlang  
 
 rules 
-	verify-declared-stratego = 
-		remove-annotations;
-	 	verify(String | <id> , "String @is-declared-stratego"); 
-		<verify-symbol-exists>(<id> , STRSignature())
-	<+
-    dbg-analysis(! $[Failed verify-declared-stratego  id [<print-as-string>]] 
-                      | "STR|verify-declared-stratego" , "Warning" )  
-    ; fail
-	
-	is-declared-stratego(s) = 	
-		 one(
-        ( ?<id>
-        + ?SVar(<id>))
-        ; resolve-str-signatures
-        ; filter(s)
-        ; is-not-empty-list  
-     )
- 
-rules 
-	//TODO fix : also check derieved signatures 
-	is-constructor =
-    (?(_, _); resolve-str-cookie; resolve-str-declaration <+ declaration-of);
-    (?OpDecl(_, _) + ?ExtOpDecl(_, _))
-    
-    //TODO FIX: 
-    //<+ ?(name, #of arguments) ; gets signature contructor from declare - signature ; verify it has the same arity 
-  
-  is-congruence-signature:
-    (x, s, 0) -> (x, s, [])
-    where
-      <resolve-str-cookie> (x, s)   
-  
-  declare-cookie-of =
-    signature-of
-    ; resolve-str-cookie
-    
-  declaration-of =
-    signature-of 
-    ; (  ?_{<resolve-str-declaration>} 
-  	 	<+ ?(_{<resolve-str-declaration>}, _) 
-  	 	<+ ?(_{<resolve-str-declaration>}, _, _)
- 	  )
- 	 
- 
-rules 
-  
-  // TODO : get-rid of scoping symbol as it is automatically handle in new symboltable structure  
-  declare-definition:
-    def -> cookie
-    with
-      sig := <signature-of>
-      ; scoped-sig    :=<to-scoped-symbol> sig
-      ; if not(<DeclareCookie>scoped-sig  <+ <resolve-str-cookie> sig) then
-          cookie := <newterm>
-          ; scoped-cookie :=<to-scoped-symbol> cookie
-          ; rules(
-              DeclareCookie:  scoped-sig  -> cookie
-              STRDeclaration: scoped-cookie  -> def
-            )
-		      ; dbg-declaration(! $[Storing DeclareCookie : [<print-as-string>scoped-sig] -> [<print-as-string>cookie]]
-		                        | "STR|declare-definition" , <debug-level-INFO> ) 
-				  ; dbg-declaration(! $[Storing STRDeclaration : [<print-as-string>scoped-cookie] -> [<print-as-string>def]]  
-				    								| "STR|declare-definition" , <debug-level-INFO> )      
-      else
-       	  cookie := <resolve-str-cookie> sig 
-      end
-		
-
-  redeclare-definition:
-    def -> cookie
-    with sig := <signature-of>
-      ; cookie := <newterm>
-      ; scoped-cookie :=<to-scoped-symbol> cookie
-      ; scoped-sig    :=<to-scoped-symbol> sig
-      ; rules(
-         DeclareCookie:  scoped-sig    -> cookie
-         STRDeclaration: scoped-cookie -> def
-       )
-   where
-   	dbg-declaration(! $[Storing DeclareCookie : [<print-as-string>scoped-sig] ->    [<print-as-string>cookie]]  
-				    								| "STR|redeclare-definition" , <debug-level-INFO> )
-		; dbg-declaration(! $[Storing STRDeclaration : [<print-as-string>scoped-cookie] -> [<print-as-string>def]]  
-				    								| "STR|redeclare-definition" , <debug-level-INFO> )
-				    										    						       
-  
   external SRTS-EXT-newint(|)
-
-
-rules 
-  
-  index-str-declarations = 
-    dbg-declaration(! $[indexing Stratego Declarations : [<print-as-string><all-keys-STRDeclaration>]]  
-    								| "STR|index-str-declarations " , <debug-level-INFO> );
-		<list-loop(
-        { 
-          ?cookie
-          // Indexing (cookie, STRDef) -> StrDefinition
-          ; dbg-declaration(! $[Indexing: [<print-as-string>cookie] -> STRDef()  ->  [<print-as-string><STRDeclaration>cookie]] | "STR|index-str-declarations " , <debug-level-INFO> ) 
-          ; <index-symbol-definition>(cookie, STRDef() ,  <STRDeclaration>cookie)
-        } 
-      )><all-keys-STRDeclaration>
-      
-  
-  //TODO FIX : strip all the scope . Better not to enclode it with scope.
-  index-str-cookies =      
-  	dbg-declaration(! $[indexing Stratego cookies  : [<print-as-string><all-keys-DeclareCookie>]]  
-    								| "STR|index-str-cookies" , <debug-level-INFO> );
-    <list-loop(
-	    { ?sig
-	      // Indexing (sig, StrCookie) -> cookie 
-	      ; dbg-declaration(! $[Indexing: [<print-as-string>sig] -> STRCookie() ->  [<print-as-string><DeclareCookie>sig]] | "STR|index-str-cookies" , <debug-level-INFO>)  
-	      ; <index-symbol-definition>(sig, STRCookie() ,  <DeclareCookie>sig)
-	      ; <remove-scope-from-symbol; ?sig'; signature-to-declaration-id>sig => str-id
-	      ; dbg-declaration(! $[Indexing: [<print-as-string>str-id] -> STRSignature() ->  [<print-as-string>sig]] | "STR|index-str-cookies" , <debug-level-INFO>)
-        ; <index-symbol-definition>(str-id, STRSignature() , sig')  
-	    }
-    )><all-keys-DeclareCookie>  
  
-  resolve-str-declaration =
-    ? cookie
-  	; ( <STRDeclaration> <to-scoped-symbol> cookie
-	  	<+
-    		<resolve-symbol-definition>( <id>, STRDef())
-    		; dbg-declaration(!$[[<print-as-string>cookie] -> STRDef() ->  [<print-as-string><id>]] | "STR|resolve-str-declaration" , <debug-level-INFO> )
-    	)	   
-  <+
-    dbg-declaration(!$[Failed to retrive STRDef for cookie [<print-as-string><to-scoped-symbol>]]| "STR|resolve-str-declaration" , "Warning" ) 
-    ; fail
-    
-  resolve-str-cookie =
-    ?sig ;
-    (	<DeclareCookie> <to-scoped-symbol> sig 
-    	<+	
-    	<resolve-symbol-definition>( <id>, STRCookie())
-    	; dbg-declaration(! $[resolve-str-cookie: [<print-as-string>sig] -> STRCookie() ->  [<print-as-string><id>]] | "STR|resolve-str-cookie" , <debug-level-INFO>)
-    )  
-  <+
-    dbg-declaration(!$[Failed to retrive STRCookie for signature [<print-as-string><to-scoped-symbol>]]| "STR|resolve-str-cookie" , "Warning") 
-    ; fail
-  
-  resolve-str-signatures =
-    ?key
-    ; verify(String | key , "String @resolve-str-signatures")
-    ; <resolve-all-symbol-definitions>( <id>, STRSignature())
-    ; dbg-declaration(! $[[<print-as-string>key] -> STRSignature() ->  [<print-as-string><id>]] 
-                      | "STR|resolve-str-signatures" , <debug-level-INFO> )
-  <+
-    dbg-declaration(! $[Failed to retrive STRSignatures* for id [<print-as-string><to-scoped-symbol>]] 
-                      | "STR|resolve-str-signatures" , "Warning" )
-    ; fail
-      
-  resolve-str-signature =
-    ?key
-    ; verify(String | key , "String @resolve-str-signatures")
-		; <resolve-symbol-definition>( <id>, STRSignature())
-  	; dbg-declaration(! $[resolve-str-signature: [<print-as-string>key] -> STRSignature() ->  [<print-as-string><id>]] 
-	                      | "STR|resolve-str-signature" , <debug-level-INFO> )  
-  <+
-    dbg-declaration(! $[Failed to retrive STRSignature for id [<print-as-string><to-scoped-symbol>]] 
-                      | "STR|resolve-str-signature" , "Warning" )  
-    ; fail 
-  
 rules
-  declare-legacy-str-imports = 
-    activate-global-scope(
-      declare-rules(declare-stratego-globals-top)
-    )
+	// All the legacy symbol are stored in global scope despite of what current scope is .
+	// Hence, after we are overriding current scope to global scope
+	// and then, we are indexing the symbolsl.
+  declare-legacy-str-imports =  activate-global-scope( declare-rules(declare-stratego-globals-top) )
      
   // declare all the strategy the rule definition inside 
   // current rules or strategies block. 
@@ -209,12 +49,12 @@
   // it actually overrides current module scope and activate 
   // internal scope to store internal strategies and rules 
   activate-stratego-internal-scope(s) =
-	activate-internal-scope( 
-    	declare-rules(s)
+		activate-internal-scope( 
+	    	declare-rules(s)
   	) 
+
       
 strategies 
-	
 	declare-stratego-globals-top = alltd(declare-str-definition) 
    
 rules
@@ -245,49 +85,75 @@
 rules
   
   declare-str-definition:
-    SDefT(x, s*, t*, s) -> SDefT(x', s*, t*, s')
-    with
+    sdef at SDefT(x, s*, t*, s) -> SDefT(x', s*, t*, s')
+    where with-spxverify(
     	x' := x{<declare-definition>};
       s' := <topdown(try(declare-dynrule))> s
-	
+    )
+   	where 
+   		with-spxverify(
+	  		if GetScopeType => InternalScope() then 
+		    	with-spxverify(
+		    		sdeftId := <remove-annotations>x ;
+		    		package-qname-string := <package-qname-to-string> <GetEnclosingPackageName> ;
+		    		new-name := <concat-strings>["__internal" , "_",package-qname-string  , "_" , <print-as-string>sdeftId];
+		    		<index-unique-symbol-definition>(sdeftId , RenamedSDefT() , (<signature-of>sdef , new-name))
+		    	, ! $[Failed to index renamed SDefT...]	
+		    	)	
+	    	end
+	    )	
+
+  
 	declare-str-definition:
-    OpDecl(x, t) -> OpDecl(x', t)
-    with
-      cookie := <redeclare-definition>;
-      x'     := x{cookie}
-    with
-      // Declare congruence
-      (x'', n) := <signature-of>;
-      sig'     := (x'', n, 0);
-      scoped-sig'  :=<to-scoped-symbol> sig';
-      rules(
-        DeclareCookie: scoped-sig' -> cookie
+    o at OpDecl(x, t) -> OpDecl(x', t)
+    where 
+    	with-spxverify(
+	      cookie := <redeclare-definition>;
+	      x'     := x{cookie}
+	      , !$[Failed to redeclare cookie @declare-str-definition with [<print-as-string>o]]
+      );
+      with-spxverify(
+	      // Declare congruence
+	      (x'', n) := <signature-of>;
+	      sig'     := (x'', n, 0);
+	      scoped-sig'  :=<to-scoped-symbol> sig';
+	      rules(
+	        DeclareCookie: scoped-sig' -> cookie
+	      )
+	      , !$[Failed to declare cookie @declare-str-definition with [<print-as-string>o]]
       )
     where
     	dbg-declaration(! $[declare-str-definition [<print-as-string>]| Storing DeclareCookie : [<print-as-string>scoped-sig'] -> [<print-as-string>cookie]] | "STR" , <debug-level-INFO> )  
   
    declare-str-definition:
     ExtSDef(x, s*, t*) -> <id>
-    with
-      redeclare-definition
+    where  
+    	with-spxverify(
+      	redeclare-definition
+    	)
 	
   declare-str-definition:
     ExtOpDecl(x, t) -> <id>
-    with
-     redeclare-definition
+    where  
+    	with-spxverify(
+   			redeclare-definition
+   		)
 	
   declare-str-definition:
     Overlay(x, t, d) -> Overlay(x', t, d)
-    with
-      cookie := <redeclare-definition>;
-      x'     := x{cookie}
-    with
-      // Declare congruence
-      (x'', n)     := <signature-of>;
-      sig'         := (x'', n, 0);
-      scoped-sig'  :=<to-scoped-symbol> sig';
-      rules(
-        DeclareCookie: scoped-sig'   -> cookie
+    where  
+    	with-spxverify(
+	      cookie := <redeclare-definition>;
+	      x'     := x{cookie}
+  		);
+    	with-spxverify(
+	      // Declare congruence
+	      (x'', n)     := <signature-of>;
+	      sig'         := (x'', n, 0);
+	      scoped-sig'  :=<to-scoped-symbol> sig';
+	      rules(
+	        DeclareCookie: scoped-sig'   -> cookie
+	      )
       )
     where
     	dbg-declaration(!$[declare-str-definition [<print-as-string>] | Storing DeclareCookie : [<print-as-string>scoped-sig'] -> [<print-as-string>cookie]] | "STR" , <debug-level-INFO> )
@@ -297,7 +163,7 @@
     dec @ RDecT(x, s*, t*) -> RDecT(x', s*, t*)
     where
       not(!x => COMPLETION(_))
-    with
+    where with-spxverify(
     	x' := x{<declare-cookie-of>}
     <+
       cookie := <newterm>;
@@ -326,7 +192,8 @@
         ["fold", "bigfold"];
       <map(declare-dr-rule(|x, cookie, s'*, t'*))>
         ["once", "bagof", "bigbagof", "all-keys", "innermost-scope", "break", "break-bp", "continue", "chain", "bigchain"]
-
+		)
+   
    declare-dr-rule(|x,cookie,s,t) =
    	?prefix
     ; sig := ($[[prefix]-[x]], s, t)
@@ -334,455 +201,3 @@
     ; rules(DeclareCookie: scoped-sig -> cookie)
 		; dbg-declaration(! $[declare-dr-rule [<print-as-string>prefix]| Storing DeclareCookie : [<print-as-string>scoped-sig] -> [<print-as-string>cookie]]
 		                  | "STR" , <debug-level-INFO> )  
-  
-strategies 
-  
-  // Declarations inside definition bodies , i.e., analyzing strategies local declarations
-  declare-str-local-definition-main =  declare-bodies-top 
-  
-  declare-bodies-top = alltd(declare-bodies)
-
-rules
-    
-  declare-bodies: 
-    InternalRules(str-defs*) -> InternalRules(analyzed-str-defs*)
-    where 
-      <activate-stratego-internal-scope(
-          declare-bodies-top
-        )
-      >str-defs*  =>analyzed-str-defs*
-       
-
-  declare-bodies: 
-    InternalStrategies(str-defs*) -> InternalStrategies(analyzed-str-defs*)
-    where
-	    <activate-stratego-internal-scope(
-          declare-bodies-top
-        )
-      >str-defs*  =>analyzed-str-defs*
-             
-  declare-bodies: 
-    Rules(str-defs*) -> Rules(analyzed-str-defs*)
-    where 
-      <declare-rules(declare-bodies-top)>str-defs*  =>analyzed-str-defs* 
-
-  declare-bodies: 
-    Strategies(str-defs*) -> Strategies(analyzed-str-defs*)
-    where 
-      <declare-rules(declare-bodies-top)>str-defs*  =>analyzed-str-defs*
-
-rules
-        
-  declare-bodies:
-    SDefT(x, s*, t*, s) -> SDefT(x, s'*, t'*, s')
-    with
-      {| DeclareCookie:
-        s'* := <map(declare-svar)> s*;
-        t'* := <map(declare-tvar)> t*;
-        s'  := <declare-bodies-top> s
-      |}
-
-  declare-bodies:
-    Let(d*, b) -> Rec(d'*, b')
-    with
-      dr-scope-declare-cookies(
-        !d*
-      ,
-        d'* := <map(declare-let-definition)> d*;
-        b'  := <declare-bodies-top> b
-      )
-
-  declare-let-definition:
-    SDefT(x, s*, t*, s) -> SDefT(x', s'*, t'*, s')
-    with
-      dr-scope-declare-cookies(
-        ![s*, t*]
-      ,
-        x'  := x{<redeclare-definition>};
-        s'* := <map(declare-svar)> s*;
-        t'* := <map(declare-tvar)> t*;
-        s'  := <declare-bodies-top> s
-      )
-
-  declare-bodies:
-    rec @ Rec(r, b) -> Rec(r', b')
-    with
-      dr-scope-declare-cookies(
-        ![rec]
-      ,
-        r' := r {<redeclare-definition> rec};
-        b' := <declare-bodies-top> b
-      )
-
-  declare-bodies:
-    Overlay(x, t*, d) -> Overlay(x, t'*, d')
-    with
-      {| DeclareCookie:
-        t'* := <map(declare-tvar)> t*;
-        d'  := <declare-bodies-top> d 
-      |}
-
-  declare-bodies:
-    ScopeDefault(s) -> ScopeDefault(s')
-    with
-      {| DeclareCookie:
-        with(
-          tvars;
-          list-loop(
-            {
-              sig := (<id>, 0)
-              ; scoped-sig := <to-scoped-symbol>sig
-              ; rules(DeclareCookie :- scoped-sig)
-            }
-          )
-        );
-        s' := <declare-bodies-top> s
-      |}
-
-  declare-bodies:
-    Scope(v*, s) -> Scope(v*, s')
-    with
-      {| DeclareCookie:
-        <list-loop(
-	          { 
-	            sig := (<id>, 0)
-	            ; scoped-sig:=<to-scoped-symbol> sig
-	            ; rules(DeclareCookie :- scoped-sig)
-	          }
-          )> v*
-          ;s' := <declare-bodies-top> s
-      |}
-        
-  declare-bodies:
-    Match(t) -> Match(t')
-    with
-      t' := <declare-match> t
-
-  declare-bodies:
-    Rule(t1, t2, w) -> Rule(t1', t2', w')
-    with
-      t1' := <declare-match> t1;
-      w'  := <declare-bodies-top> w;
-      t2' := <declare-bodies-top> t2 
-
-  declare-bodies:
-    LRule(r) -> LRule(r')
-    with
-      {| DeclareCookie: // acts as a non-blanking scope
-        r' := <declare-bodies-top> r
-      |}
-
-  declare-bodies:
-    SetDynRule(x, r) -> SetDynRule(x', r')
-    with
-      {| DeclareCookie: // acts as a non-blanking scope
-        x' := <declare-bodies-top> x;
-        r' := <declare-bodies-top> r
-      |}
-
-  declare-bodies:
-    DynRuleScopeId(x) -> DynRuleScopeId(x')
-    where
-      x' := x{<declare-cookie-of>} 
-
-  declare-bodies:
-    LabeledDynRuleScopeId(x, t) -> LabeledDynRuleScopeId(x', t')
-    where
-      x' := x{<signature-of; resolve-str-cookie>}; 
-      t' := <declare-bodies-top> t
-
-  declare-bodies:
-    Assign(t1, t2) -> Assign(t1', t2')
-    with
-      t2' := <declare-bodies-top> t2;
-      t1' := <declare-match> t1
-
-  declare-bodies:
-    AM(s, t) -> AM(s', t')
-    with
-      s' := <declare-bodies-top> s;
-      t' := <declare-match> t
-
-  declare-match =
-    alltd(?Var(_); declare-var + ?App(_, _) + ?RootApp(_));
-    declare-bodies-top
-
-  declare-bodies:
-    GuardedLChoice(c, s1, s2) -> GuardedLChoice(c', s1', s2')
-    with
-      ( c' := <declare-bodies-top> c;
-        s1' := <declare-bodies-top> s1)
-    \DeclareCookie/
-      s2' := <declare-bodies-top> s2
-
-  declare-svar:
-    dec @ VarDec(x, t) -> VarDec(x', t)
-    with
-      cookie := <newterm>;
-      x'     := x{cookie};
-      scoped-cookie := <to-scoped-symbol> cookie;
-      scoped-sig    := <to-scoped-symbol><signature-of>x;   
-      rules(
-	    	DeclareCookie:   scoped-sig -> cookie
-	      STRDeclaration:  scoped-cookie  -> dec
-	    );
-	    // HACK: a higher-order strategy can be passed as an argument, 
-      // as in s1(s2), where s2 has arguments.
-      // We overwrite (in local scope) global strategies with signature ?(x,_,_)
-      // Fixes Bug: a{1} = fail; foo(a{2}) = a{2} //NOT a{1}
-      <resolve-str-signatures> x; 
-      filter(declare-svar-signatures(|cookie, x))
-    
-  
-  declare-svar-signatures(|cookie, svar-name):
-    key@(svar-name,_ ,_) -> key
-    where 
-      scoped-sig    := <to-scoped-symbol>key
-    where
-      rules (DeclareCookie: scoped-sig -> cookie)
-   
-	    
-  declare-tvar:
-    x -> x'
-    where
-      <is-string> x
-    with
-      x' := x{<declare-definition> Var(x)}
-
-  declare-tvar:
-    VarDec(x, t) -> VarDec(x', t)
-    with
-      x' := x{<declare-definition>}
-  
-  declare-var:
-    Var(x) -> Var(x')
-    with
-      x' := x{<declare-definition>}
-
-  declare-bodies:
-    Var(x{}) -> Var(x')
-    where
-      x' := x{<declare-cookie-of>}
-rules 
-  // Uses inside definition bodies
-  declare-bodies:
-    CallT(SVar(x), s*, t*) -> CallT(SVar(x'), s'*, t'*)
-    with
-      x' := x{<declare-cookie-of>}
-    <+
-      x' := x
-    with
-      t'* := <declare-bodies-top> t*;
-      s'* := <map(declare-bodies-svar <+ declare-bodies-top)> s*
-
-  declare-bodies-svar:
-    CallT(SVar(x), [], []) -> CallT(SVar(x'), [], [])
-    where
-      x' := x{<declare-cookie-of>}
-    <+
-      // HACK: a higher-order strategy can be passed as an argument, 
-      // as in s1(s2), where s2 has arguments. We can only check if there
-      // is a strategy called s2, independent of the number of
-      // (strategy/term) arguments to s2.
-      // map(to-java) => Call(SVar("map"), [CallNoArgs(SVar("to-java"))])
-      <resolve-str-signatures>x
-      ; filter(?(x,_,_))
-      ; fetch-elem(\key@(x, s*, t*) -> <resolve-str-cookie>\)
-      ; x' := x{<id>}
-      
-
-  declare-bodies:
-    Op(x, t*) -> Op(x', t'*)
-    where
-      x' := x{<declare-cookie-of>}
-    with
-      t'* := <declare-bodies-top> t*
-
-rules 
-  dr-scope-declare-cookies(defs, s):
-    t -> t'
-    with
-      defs        := <defs>;
-      old-cookies := <map(!(<signature-of>, <declare-cookie-of <+ !()>))>;
-      t'          := <s> t;
-      <list-loop(
-        { ?(sig, cookie);
-          if !cookie => () then
-            scoped-sig    :=<to-scoped-symbol> sig;
-            rules(DeclareCookie :- scoped-sig)
-          else
-            scoped-sig    :=<to-scoped-symbol> sig;
-            rules(DeclareCookie : scoped-sig -> cookie)
-          end
-        })
-      >old-cookies
-rules 
-
-	// TODO IMPLEMENT IMPORT handling => needs to be moved to the compile-legacy-artifacts
-	// and declare them in GLobal Scope for the furthur analysis
-  open-import(to-signatures):
-    full-path -> ast
-    with
-      ast := <id>
-  
-  //TODO fix : remove obsolete constructs imports . In legacy str , we dont support transitive imports
-  //hence, in declare str , we dont require to handle imports .
-  declare-str-definition:
-    Import(x) -> Import(x)
- 	with
-	  	if (!x => Name(mName)) then
-  			moduleName := mName 
-  		else
-  			moduleName :=  x 
-  		end
-  	with 
-  		<open-import(resolve-import-decl, read-stratego-signatures, declare-stratego-globals-top)> moduleName
-    <+
-      rules(IsImportedFailed: moduleName)
- 
-  declare-str-definition:
-    ImportWildcard(x) -> ImportWildcard(x)
-   	with
-	  	if (!x => Name(mName)) then
-  			moduleName := mName 
-  		else
-  			moduleName :=  x 
-  		end
-  	with 
-  	  <open-wildcard-import(file-exists <+ resolve-import-path, read-stratego-signatures, declare-stratego-globals-top, has-extension(|"str") + has-extension(|"rtree"))> x
-    <+
-      rules(IsImportedFailed: x)
-
-   
-   resolve-import-decl:
-     x -> full-path
-     where
-       fetch-library-ast; 
-       full-path := x 
-     <+
-       full-path := <resolve-import-path> $[[x].spx]
-     <+
-       full-path := <resolve-import-path> $[[x].str]
-     <+
-       full-path := <resolve-import-path> $[[x].rtree]
-
-   resolve-import-path:
-     x -> full-path
-     where
-        // FIXME: fetch true import paths from someplace
-   			full-path := <file-exists> $[[<get-project-path>]/[x]]
-     <+ full-path := <file-exists> $[[<get-project-path>]/trans/[x]]
-     <+ full-path := <file-exists> $[[<get-project-path>]/lib/[x]]
-     <+ full-path := <file-exists> $[[<get-project-path>]/src/[x]]
-     <+ full-path := <file-exists> $[[<get-project-path>]/syntax/[x]]
-     <+ full-path := <file-exists> $[[<get-project-path>]/syn/[x]]
-     <+ full-path := <file-exists> $[[<get-project-path>]/src/syntax/[x]]
- 
-  fetch-library-ast:
-    x -> <pack-stratego-parse-stratego> (IncludeFromPath(x), [])
-
-	
-  read-stratego-signatures:
-    str -> <to-signatures> file
-    where
-      file := <fetch-library-ast>str
-    <+
-      rtree := <guarantee-extension(|"rtree")>;
-      if <is-newer> (rtree, str) + not(<file-exists> str) + <has-extension(|"rtree")> str then
-        file := <file-exists; ReadFromFile> rtree
-      else
-        file := <parse-stratego-file> str
-      end
-	
-	to-signatures =
-    basic-stratego-desugar-top;
-    topdown(try(remove-stratego-bodies))
-
-
-  remove-stratego-bodies:
-    SDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s')
-    with
-      s' := <collect-all(?RDecT(_, _, _))> s
-   
-  remove-stratego-bodies:
-    Import(_) -> ()
-   
-  remove-stratego-bodies:
-    ImportWildcard(_) -> ()
-
-
-rules 
-
-	// Content completion
-  propose-completion:
-    completion -> proposals
-    where
-      signature-of; one(?COMPLETION(prefix)) <+ one(?COMPLETION(prefix))
-    with
-      all-signatures := <filter-by-prefix(|prefix)> <all-keys-DeclareCookie>;
-      switch !completion
-        case ?Var(_):
-          all-signatures' := <try(filter(?(_, _)); not([]))> all-signatures
-        case ?SVar(_):
-          all-signatures' := <filter(?(_, _, _))> all-signatures
-        case ?DynRuleScopeId(_):
-          all-signatures' := <filter(?(_, _, _); not(is-congruence-signature))> all-signatures
-        case ?Import(_):
-          all-signatures' := []
-        otherwise: // unknown context
-          all-signatures' := <filter(not(is-congruence-signature))> all-signatures
-      end;
-      proposals := <map(signature-to-proposal)> all-signatures'
-  
-  propose-completion:
-    Rule(lhs, rhs @ Var(COMPLETION(_)), _) -> proposals
-    where
-      <not(oncetd(?RootApp(_) + ?App(_, _)))> lhs
-    with
-      lhs'      := <topdown(try(\As(_, e) -> e\))> lhs;
-      proposals := [([<pp-stratego-string> lhs'], "") | <propose-completion> rhs]
-      
-  
-  filter-by-prefix(|prefix) =
-    filter(one(string-starts-with(|prefix); not(?"")))
-  
-  //TODO fix for spoofaxlang
-  
-  signature-to-proposal:
-    (x, 0) -> [x | parentheses]
-    with
-      if is-constructor then
-        parentheses := ["()"]
-      else
-        parentheses := []
-      end
-
-  signature-to-proposal:
-    (x, n) -> [x, "(", t*, ")"]
-    where
-      <gt> (n, 0)
-    with
-      t* := <separate-by(|", ")> <copy> (n, "t") // TODO: number (Spoofax/231)
-
-  signature-to-proposal:
-    (x, 0, 0) -> [x, ""]
-
-  signature-to-proposal:
-    (x, n, 0) -> [x, "(", t*, ")"]
-    where
-      <gt> (n, 0)
-    with
-      t* := <separate-by(|", ")> <copy> (n, "s")
-
-  signature-to-proposal:
-    (x, n, m) -> [x, "(", s*, "|", t*, ")"]
-    where
-      <gt> (m, 0)
-    with
-      s* := <separate-by(|", ")> <copy> (n, "s");
-      t* := <separate-by(|", ")> <copy> (m, "t")
-
-  signature-to-proposal:
-    (x, [DR_DUMMY()], [DR_DUMMY()]) -> x // strategy param (wildcard arity)
-
-	
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-locals.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-locals.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -0,0 +1,423 @@
+ module context/str/declare-locals
+
+imports
+	libstrc		
+	libstratego-lib
+ 	libstratego-gpp
+	libstratego-aterm
+imports
+	lib/editor-common.generated
+	include/SpoofaxLang
+imports	
+	utils/sourcedir
+ 	utils/debug
+ 	utils/contract
+ 	utils/annotations
+ 	common 
+	config 
+imports 
+	context/-
+	normalize/-
+	context/str/-
+	spoofaxlang  
+	
+strategies 
+  
+  // Declarations inside definition bodies , i.e., analyzing strategies local declarations
+  declare-str-local-definition-main =  declare-bodies-top 
+  
+  declare-bodies-top = alltd(declare-bodies)
+
+rules
+    
+  declare-bodies: 
+    InternalRules(str-defs*) -> InternalRules(analyzed-str-defs*)
+    where 
+    	// activate-stratego-internal-scope automatically calls declare-rules
+      <activate-stratego-internal-scope(declare-bodies-top)>str-defs*  
+      => analyzed-str-defs*
+       
+
+  declare-bodies: 
+    InternalStrategies(str-defs*) -> InternalStrategies(analyzed-str-defs*)
+    where
+	    <activate-stratego-internal-scope( declare-bodies-top ) >str-defs*  
+	    => analyzed-str-defs*
+             
+  declare-bodies: 
+    Rules(str-defs*) -> Rules(analyzed-str-defs*)
+    where 
+      <declare-rules(
+      		declare-bodies-top
+    		)
+  		>str-defs*  =>analyzed-str-defs* 
+
+  declare-bodies: 
+    Strategies(str-defs*) -> Strategies(analyzed-str-defs*)
+    where 
+      <declare-rules(declare-bodies-top)>str-defs*  =>analyzed-str-defs*
+
+rules
+        
+  declare-bodies:
+    SDefT(x, s*, t*, s) -> SDefT(x, s'*, t'*, s')
+    where 
+    	with-spxverify(
+	      {| DeclareCookie:
+	        s'* := <map(declare-svar)> s*;
+	        t'* := <map(declare-tvar)> t*;
+	        s'  := <declare-bodies-top> s
+	      |}
+   		) 
+
+  declare-bodies:
+    Let(d*, b) -> Rec(d'*, b')
+    where with-spxverify(
+      dr-scope-declare-cookies(
+        !d*
+      ,
+        d'* := <map(declare-let-definition)> d*;
+        b'  := <declare-bodies-top> b
+      )
+    )
+
+  declare-let-definition:
+    SDefT(x, s*, t*, s) -> SDefT(x', s'*, t'*, s')
+    where with-spxverify(
+      dr-scope-declare-cookies(
+        ![s*, t*]
+      ,
+        x'  := x{<redeclare-definition>};
+        s'* := <map(declare-svar)> s*;
+        t'* := <map(declare-tvar)> t*;
+        s'  := <declare-bodies-top> s
+      )
+    )
+
+  declare-bodies:
+    rec @ Rec(r, b) -> Rec(r', b')
+    where with-spxverify(
+      dr-scope-declare-cookies(
+        ![rec]
+      ,
+        r' := r {<redeclare-definition> rec};
+        b' := <declare-bodies-top> b
+      )
+    )
+
+  declare-bodies:
+    Overlay(x, t*, d) -> Overlay(x, t'*, d')
+    where with-spxverify(
+      {| DeclareCookie:
+        t'* := <map(declare-tvar)> t*;
+        d'  := <declare-bodies-top> d 
+      |}
+    )
+
+  declare-bodies:
+    ScopeDefault(s) -> ScopeDefault(s')
+    where with-spxverify(
+      {| DeclareCookie:
+        with-spxverify(
+          tvars;
+          list-loop(
+            {
+              sig := (<id>, 0)
+              ; scoped-sig := <to-scoped-symbol>sig
+              ; rules(DeclareCookie :- scoped-sig)
+            }
+          )
+        );
+        s' := <declare-bodies-top> s
+      |}
+    )
+
+  declare-bodies:
+    Scope(v*, s) -> Scope(v*, s')
+    where with-spxverify(
+      {| DeclareCookie:
+        <list-loop(
+	          { 
+	            sig := (<id>, 0)
+	            ; scoped-sig:=<to-scoped-symbol> sig
+	            ; rules(DeclareCookie :- scoped-sig)
+	          }
+          )> v*
+          ;s' := <declare-bodies-top> s
+      |}
+    )
+        
+  declare-bodies:
+    Match(t) -> Match(t')
+    where with-spxverify(
+      t' := <declare-match> t
+		)
+  declare-bodies:
+    Rule(t1, t2, w) -> Rule(t1', t2', w')
+    where with-spxverify(
+      t1' := <declare-match> t1;
+      w'  := <declare-bodies-top> w;
+      t2' := <declare-bodies-top> t2 
+		)
+  declare-bodies:
+    LRule(r) -> LRule(r')
+    where with-spxverify(
+      {| DeclareCookie: // acts as a non-blanking scope
+        r' := <declare-bodies-top> r
+      |}
+    )
+
+  declare-bodies:
+    SetDynRule(x, r) -> SetDynRule(x', r')
+    where with-spxverify(
+      {| DeclareCookie: // acts as a non-blanking scope
+        x' := <declare-bodies-top> x;
+        r' := <declare-bodies-top> r
+      |}
+    )
+
+  declare-bodies:
+    DynRuleScopeId(x) -> DynRuleScopeId(x')
+    where
+      x' := x{<declare-cookie-of>} 
+
+  declare-bodies:
+    LabeledDynRuleScopeId(x, t) -> LabeledDynRuleScopeId(x', t')
+    where
+      x' := x{<signature-of; resolve-str-cookie>}; 
+      t' := <declare-bodies-top> t
+
+  declare-bodies:
+    Assign(t1, t2) -> Assign(t1', t2')
+    where with-spxverify(
+      t2' := <declare-bodies-top> t2;
+      t1' := <declare-match> t1
+    )
+
+  declare-bodies:
+    AM(s, t) -> AM(s', t')
+    where with-spxverify(
+      s' := <declare-bodies-top> s;
+      t' := <declare-match> t
+    )
+
+  declare-match =
+    alltd(?Var(_); declare-var + ?App(_, _) + ?RootApp(_));
+    declare-bodies-top
+
+  declare-bodies:
+    GuardedLChoice(c, s1, s2) -> GuardedLChoice(c', s1', s2')
+    where with-spxverify(
+      ( c' := <declare-bodies-top> c;
+        s1' := <declare-bodies-top> s1)
+    \DeclareCookie/
+      s2' := <declare-bodies-top> s2
+    )
+
+  declare-svar:
+    dec @ VarDec(x, t) -> VarDec(x', t)
+    where with-spxverify(
+      cookie := <newterm>;
+      x'     := x{cookie};
+      scoped-cookie := <to-scoped-symbol> cookie;
+      scoped-sig    := <to-scoped-symbol><signature-of>x;   
+      rules(
+	    	DeclareCookie:   scoped-sig -> cookie
+	      STRDeclaration:  scoped-cookie  -> dec
+	    );
+	    // HACK: a higher-order strategy can be passed as an argument, 
+      // as in s1(s2), where s2 has arguments.
+      // We overwrite (in local scope) global strategies with signature ?(x,_,_)
+      // Fixes Bug: a{1} = fail; foo(a{2}) = a{2} //NOT a{1}
+      <resolve-str-signatures> x; 
+      filter(declare-svar-signatures(|cookie, x))
+    )
+  
+  declare-svar-signatures(|cookie, svar-name):
+    key@(svar-name,_ ,_) -> key
+    where 
+      scoped-sig    := <to-scoped-symbol>key
+    where
+      rules (DeclareCookie: scoped-sig -> cookie)
+   
+	    
+  declare-tvar:
+    x -> x'
+    where
+      <is-string> x
+    where with-spxverify(
+      x' := x{<declare-definition> Var(x)}
+		)
+		
+  declare-tvar:
+    VarDec(x, t) -> VarDec(x', t)
+    where with-spxverify(
+      x' := x{<declare-definition>}
+  	)
+  	
+  declare-var:
+    Var(x) -> Var(x')
+    where with-spxverify(
+      x' := x{<declare-definition>}
+		)
+		
+  declare-bodies:
+    Var(x{}) -> Var(x')
+    where
+      x' := x{<declare-cookie-of>}
+rules 
+  // Uses inside definition bodies
+  declare-bodies:
+    CallT(SVar(x), s*, t*) -> CallT(SVar(x'), s'*, t'*)
+    where with-spxverify(
+      x' := x{<declare-cookie-of>}
+    <+
+      x' := x
+    )
+    where with-spxverify(
+      t'* := <declare-bodies-top> t*;
+      s'* := <map(declare-bodies-svar <+ declare-bodies-top)> s*
+		)
+		
+  declare-bodies-svar:
+    CallT(SVar(x), [], []) -> CallT(SVar(x'), [], [])
+    where
+      x' := x{<declare-cookie-of>}
+    <+
+      // HACK: a higher-order strategy can be passed as an argument, 
+      // as in s1(s2), where s2 has arguments. We can only check if there
+      // is a strategy called s2, independent of the number of
+      // (strategy/term) arguments to s2.
+      // map(to-java) => Call(SVar("map"), [CallNoArgs(SVar("to-java"))])
+      <resolve-str-signatures>x
+      ; filter(?(x,_,_))
+      ; fetch-elem(\key@(x, s*, t*) -> <resolve-str-cookie>\)
+      ; x' := x{<id>}
+      
+
+  declare-bodies:
+    Op(x, t*) -> Op(x', t'*)
+    where
+      x' := x{<declare-cookie-of>}
+    where with-spxverify(
+      t'* := <declare-bodies-top> t*
+		)
+rules 
+  dr-scope-declare-cookies(defs, s):
+    t -> t'
+    where with-spxverify(
+      defs        := <defs>;
+      old-cookies := <map(!(<signature-of>, <declare-cookie-of <+ !()>))>;
+      t'          := <s> t;
+      <list-loop(
+        { ?(sig, cookie);
+          if !cookie => () then
+            scoped-sig    :=<to-scoped-symbol> sig;
+            rules(DeclareCookie :- scoped-sig)
+          else
+            scoped-sig    :=<to-scoped-symbol> sig;
+            rules(DeclareCookie : scoped-sig -> cookie)
+          end
+        })
+      >old-cookies
+  	)
+  	
+rules 
+
+	// TODO IMPLEMENT IMPORT handling => needs to be moved to the compile-legacy-artifacts
+	// and declare them in GLobal Scope for the furthur analysis
+  open-import(to-signatures):
+    full-path -> ast
+    where with-spxverify(
+      ast := <id>
+    )
+  
+  //TODO fix : remove obsolete constructs imports . In legacy str , we dont support transitive imports
+  //hence, in declare str , we dont require to handle imports .
+  declare-str-definition:
+    Import(x) -> Import(x)
+ 		where with-spxverify(
+	  	if (!x => Name(mName)) then
+  			moduleName := mName 
+  		else
+  			moduleName :=  x 
+  		end
+  	)	
+  	where with-spxverify( 
+  		<open-import(resolve-import-decl, read-stratego-signatures, declare-stratego-globals-top)> moduleName
+    <+
+      rules(IsImportedFailed: moduleName)
+ 		)
+ 		
+  declare-str-definition:
+    ImportWildcard(x) -> ImportWildcard(x)
+   	where with-spxverify(
+	  	if (!x => Name(mName)) then
+  			moduleName := mName 
+  		else
+  			moduleName :=  x 
+  		end
+  	)	
+  	where with-spxverify( 
+  	  <open-wildcard-import(file-exists <+ resolve-import-path, read-stratego-signatures, declare-stratego-globals-top, has-extension(|"str") + has-extension(|"rtree"))> x
+    <+
+      rules(IsImportedFailed: x)
+		)
+   
+   resolve-import-decl:
+     x -> full-path
+     where
+       fetch-library-ast; 
+       full-path := x 
+     <+
+       full-path := <resolve-import-path> $[[x].spx]
+     <+
+       full-path := <resolve-import-path> $[[x].str]
+     <+
+       full-path := <resolve-import-path> $[[x].rtree]
+
+   resolve-import-path:
+     x -> full-path
+     where
+        // FIXME: fetch true import paths from someplace
+   			full-path := <file-exists> $[[<get-project-path>]/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/trans/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/lib/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/src/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/syntax/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/syn/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/src/syntax/[x]]
+ 
+  fetch-library-ast:
+    x -> <pack-stratego-parse-stratego> (IncludeFromPath(x), [])
+
+	
+  read-stratego-signatures:
+    str -> <to-signatures> file
+    where
+      file := <fetch-library-ast>str
+    <+
+      rtree := <guarantee-extension(|"rtree")>;
+      if <is-newer> (rtree, str) + not(<file-exists> str) + <has-extension(|"rtree")> str then
+        file := <file-exists; ReadFromFile> rtree
+      else
+        file := <parse-stratego-file> str
+      end
+	
+	to-signatures =
+    basic-stratego-desugar-top;
+    topdown(try(remove-stratego-bodies))
+
+
+  remove-stratego-bodies:
+    SDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s')
+    where with-spxverify(
+      s' := <collect-all(?RDecT(_, _, _))> s
+   	)
+   	
+  remove-stratego-bodies:
+    Import(_) -> ()
+   
+  remove-stratego-bodies:
+    ImportWildcard(_) -> ()
+

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-utils.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-utils.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -0,0 +1,192 @@
+module context/str/declare-utils
+
+imports
+	libstrc		
+	libstratego-lib
+ 	libstratego-gpp
+	libstratego-aterm
+imports
+	lib/editor-common.generated
+	include/SpoofaxLang
+imports	
+	utils/sourcedir
+ 	utils/debug
+ 	utils/contract
+ 	utils/annotations
+ 	common 
+	config 
+imports 
+	context/-
+	normalize/-
+	context/str/-
+	spoofaxlang  
+	
+rules 
+	verify-declared-stratego = 
+		remove-annotations;
+	 	verify(String | <id> , "String @is-declared-stratego"); 
+		<verify-symbol-exists>(<id> , STRSignature())
+	<+
+    dbg-analysis(! $[Failed verify-declared-stratego  id [<print-as-string>]] | "STR|verify-declared-stratego" , "Warning" );
+    fail
+	
+	
+	is-declared-stratego(s) = 	
+		 one(
+        ( ?<id>
+        + ?SVar(<id>))
+        ; resolve-str-signatures
+        ; filter(s)
+        ; is-not-empty-list  
+     )
+rules 
+	is-constructor =
+    ?(_, _); 
+    (
+    	resolve-str-cookie; 
+    	resolve-str-declaration 
+    <+ 
+    	declaration-of
+    );
+    (?OpDecl(_, _) + ?ExtOpDecl(_, _))
+  
+  
+ 
+  //TODO FIX: 
+  //<+ ?(name, #of arguments) ; gets signature contructor from declare - signature ; verify it has the same arity 
+  
+  is-congruence-signature:
+    (x, s, 0) -> (x, s, [])
+    where
+      <resolve-str-cookie> (x, s)   
+  
+  declare-cookie-of =
+    signature-of
+    ; resolve-str-cookie
+    
+  declaration-of =
+    signature-of 
+    ; (  ?_{<resolve-str-declaration>} 
+  	 	<+ ?(_{<resolve-str-declaration>}, _) 
+  	 	<+ ?(_{<resolve-str-declaration>}, _, _)
+ 	  )
+ 	 
+ 
+rules 
+  
+  // TODO : get-rid of scoping symbol as it is automatically handle in new symboltable structure  
+  declare-definition:
+    def -> cookie
+    where with-spxverify(
+      sig := <signature-of>
+      ; scoped-sig    :=<to-scoped-symbol> sig
+      ; if not(<DeclareCookie>scoped-sig  <+ <resolve-str-cookie> sig) then
+          cookie := <newterm>
+          ; scoped-cookie :=<to-scoped-symbol> cookie
+          ; rules(
+              DeclareCookie:  scoped-sig  -> cookie
+              STRDeclaration: scoped-cookie  -> def
+            )
+		      ; dbg-declaration(! $[Storing DeclareCookie : [<print-as-string>scoped-sig] -> [<print-as-string>cookie]]  | "STR|declare-definition" , <debug-level-INFO> ) 
+				  ; dbg-declaration(! $[Storing STRDeclaration : [<print-as-string>scoped-cookie] -> [<print-as-string>def]] | "STR|declare-definition" , <debug-level-INFO> )      
+      else
+       	  cookie := <resolve-str-cookie> sig 
+      end
+    )
+		
+
+  redeclare-definition:
+    def -> cookie
+    where with-spxverify( 
+    	sig := <signature-of>
+      ; cookie := <newterm>
+      ; scoped-cookie :=<to-scoped-symbol> cookie
+      ; scoped-sig    :=<to-scoped-symbol> sig
+      ; rules(
+         DeclareCookie:  scoped-sig    -> cookie
+         STRDeclaration: scoped-cookie -> def
+       )
+      , ! "Failed at redeclare-definition" 
+   	)
+   	where
+   		dbg-declaration(! $[Storing DeclareCookie : [<print-as-string>scoped-sig] ->    [<print-as-string>cookie]] | "STR|redeclare-definition" , <debug-level-INFO> );
+ 	  	dbg-declaration(! $[Storing STRDeclaration : [<print-as-string>scoped-cookie] -> [<print-as-string>def]]  | "STR|redeclare-definition" , <debug-level-INFO> )
+		
+  
+  external SRTS-EXT-newint(|)
+
+
+rules 
+  
+  index-str-declarations = 
+    dbg-declaration(! $[indexing Stratego Declarations : [<print-as-string><all-keys-STRDeclaration>]]  
+    								| "STR|index-str-declarations " , <debug-level-INFO> );
+		<list-loop(
+        { 
+          ?cookie
+          // cookie  ---> STRDeclaration Mapping 
+          ; dbg-declaration(! $[Indexing: [<print-as-string>cookie] -> STRDef()  ->  [<print-as-string><STRDeclaration>cookie]] | "STR|index-str-declarations " , <debug-level-INFO> ) 
+          ; <index-symbol-definition>(cookie, STRDef() ,  <STRDeclaration>cookie)
+        } 
+      )><all-keys-STRDeclaration>
+      
+  
+  //TODO FIX : strip all the scope . Better not to enclode it with scope.
+  index-str-cookies =      
+  	dbg-declaration(! $[indexing Stratego cookies  : [<print-as-string><all-keys-DeclareCookie>]]  
+    								| "STR|index-str-cookies" , <debug-level-INFO> );
+    <list-loop(
+	    { ?sig
+	      ; dbg-declaration(! $[Indexing: [<print-as-string>sig] -> STRCookie() ->  [<print-as-string><DeclareCookie>sig]] | "STR|index-str-cookies" , <debug-level-INFO>)  
+	      // Signature -------> Cookie Mapping 
+	      ; <index-symbol-definition>(sig, STRCookie() ,  <DeclareCookie>sig)
+	      ; <remove-scope-from-symbol; ?sig'; signature-to-declaration-id>sig => str-id
+	      ;  dbg-declaration(! $[Indexing: [<print-as-string>str-id] -> STRSignature() ->  [<print-as-string>sig]] | "STR|index-str-cookies" , <debug-level-INFO>)
+        // Stratego ID  -------> Signature Mapping 
+        ; <index-symbol-definition>(str-id, STRSignature() , sig')  
+	    }
+    )><all-keys-DeclareCookie>  
+ 
+  resolve-str-declaration =
+    ? cookie
+  	; ( <STRDeclaration> <to-scoped-symbol> cookie
+	  	<+
+    		<resolve-symbol-definition>( <id>, STRDef())
+    		; dbg-declaration(!$[[<print-as-string>cookie] -> STRDef() ->  [<print-as-string><id>]] | "STR|resolve-str-declaration" , <debug-level-INFO> )
+    	)	   
+  <+
+    dbg-declaration(!$[Failed to retrive STRDef for cookie [<print-as-string><to-scoped-symbol>]]| "STR|resolve-str-declaration" , "Warning" ) 
+    ; fail
+    
+  resolve-str-cookie =
+    ?sig ;
+    (	<DeclareCookie> <to-scoped-symbol> sig 
+    	<+	
+    	<resolve-symbol-definition>( <id>, STRCookie())
+    	; dbg-declaration(! $[resolve-str-cookie: [<print-as-string>sig] -> STRCookie() ->  [<print-as-string><id>]] | "STR|resolve-str-cookie" , <debug-level-INFO>)
+    )  
+  <+
+    dbg-declaration(!$[Failed to retrive STRCookie for signature [<print-as-string><to-scoped-symbol>]]| "STR|resolve-str-cookie" , "Warning") 
+    ; fail
+  
+  resolve-str-signatures =
+    ?key
+    ; verify(String | key , "String @resolve-str-signatures")
+    ; <resolve-all-symbol-definitions>( <id>, STRSignature())
+    ; dbg-declaration(! $[[<print-as-string>key] -> STRSignature() ->  [<print-as-string><id>]] 
+                      | "STR|resolve-str-signatures" , <debug-level-INFO> )
+  <+
+    dbg-declaration(! $[Failed to retrive STRSignatures* for id [<print-as-string><to-scoped-symbol>]] 
+                      | "STR|resolve-str-signatures" , "Warning" )
+    ; fail
+      
+  resolve-str-signature =
+    ?key
+    ; verify(String | key , "String @resolve-str-signatures")
+		; <resolve-symbol-definition>( <id>, STRSignature())
+  	; dbg-declaration(! $[resolve-str-signature: [<print-as-string>key] -> STRSignature() ->  [<print-as-string><id>]] 
+	                      | "STR|resolve-str-signature" , <debug-level-INFO> )  
+  <+
+    dbg-declaration(! $[Failed to retrive STRSignature for id [<print-as-string><to-scoped-symbol>]] 
+                      | "STR|resolve-str-signature" , "Warning" )  
+    ; fail 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -52,11 +52,15 @@
 		
 		UniqueSymbol      : SymbolSort
 		
+	constructors
+		LookupLocalScope : LookupType // only looks up in current scope 
+	 	LookupAllScope   : LookupType // only looks up in All Scopes 
+		
 rules 
     // constant terms 
-    ALL = !"*"    
+    ALL_AS_SET = !"*"    
     
-    ALL_WITH_DUPLICATES = !"**"   
+    ALL_AS_SEQUENCE = !"**"   
     
     ONLY_ONE   = !"."
 		
@@ -105,10 +109,10 @@
 	on-init-index-updating = prim("SPX_exec_index_manage_command" , <get-project-path> , "ON_INIT_INDEX_UPDATING")
 	
 	on-index-updating-completed = prim("SPX_exec_index_manage_command" , <get-project-path> , "ON_INDEX_UPDATING_COMPLETED")
-	
 	  
 	index-lang-desc =  prim( "SPX_index_language_descriptor" , <get-project-path> , <id>)
-
+	
+	spx-origin-equal(|t) = prim("SPX_symtab_verify_symbols_have_equal_origin", <id>, t) 
 	
   index-language-descriptor:
   	l at LanguageDescriptor(Module(QName(_)) ,_ ,_,_,_) -> <id>
@@ -130,28 +134,45 @@
     
   project-from-symboldef-to-symbol: SymbolDef(_,_ ,_, symbol,_) -> symbol
   
-  resolve-all-symbol-definitions-with-duplicates: (scoped-symbol-key , typeCtor) -> <resolve-all-symbol-definitions(project-from-symboldef-to-symbol |<ALL_WITH_DUPLICATES>) >(scoped-symbol-key , typeCtor)
+  resolve-all-of-current-scope-by-type:  
+  	typeCtor 
+	  -> <resolve-all-symbol-definitions( 
+					project-from-symboldef-to-symbol 
+				| ( LookupLocalScope() , <ALL_AS_SET>)
+				)
+			 >(<ALL_AS_SET> ,  typeCtor)
+  
+  resolve-all-symbol-definitions-by-type:  
+  	typeCtor 
+  	-> <resolve-all-symbol-definitions> (<ALL_AS_SET> ,  typeCtor)
      
-  resolve-all-symbol-definitions: (scoped-symbol-key , typeCtor) -> <resolve-all-symbol-definitions(project-from-symboldef-to-symbol |<ALL>) >(scoped-symbol-key , typeCtor) 
-  
-  resolve-all-symbol-definitions-by-type:  typeCtor -> <resolve-all-symbol-definitions>( <ALL> ,  typeCtor)  
-  
-  resolve-symbol-definition:(scoped-symbol-key , typeCtor) -> <resolve-symbol-definition(project-from-symboldef-to-symbol)>(scoped-symbol-key , typeCtor)
-  
-  
+  resolve-all-symbol-definitions: 
+  	(scoped-symbol-key , typeCtor) 
+  	-> <resolve-all-symbol-definitions( project-from-symboldef-to-symbol | (LookupAllScope() ,<ALL_AS_SET>) ) >(scoped-symbol-key , typeCtor) 
+  
+  resolve-all-symbol-definitions-with-duplicates: 
+  	(scoped-symbol-key , typeCtor) 
+  	-> <resolve-all-symbol-definitions(project-from-symboldef-to-symbol | ( LookupAllScope() ,<ALL_AS_SEQUENCE>)) >(scoped-symbol-key , typeCtor)
+  
+  resolve-symbol-definition:
+  	(scoped-symbol-key , typeCtor) 
+  	-> <resolve-symbol-definition(project-from-symboldef-to-symbol)>(scoped-symbol-key , typeCtor)
+
+
   // Resolving all symbol definition with the specified search criteria
   // Following Strategy try to find all the symbol definitions that 
   // have the same properties as the specified search criteria. 
   // It also resolves symbol from the imported scopes/namespace. Please
   // note that: during symbol resolve in the imported scopes, Internal 
   // scopes are avoided due to visibility rules
-  resolve-all-symbol-definitions(post-processor | filter-type): 
+  resolve-all-symbol-definitions(post-processor | lookup-config): 
     (symbol-key , typeCtor) -> result 
     where
       dbg-symboltable(!$[with following search criteria: [<print-as-string>(symbol-key , typeCtor) ]]|"resolve-all-symbol-definitions(s)" ,<debug-level-INFO>)
     where
       with-spxverify(
-        result' := <resolve-symbol-definitions-internal>  ( symbol-key , typeCtor , filter-type)
+        //lookup-config  := ( LookupAllScope() , filter-type);
+        result' := <resolve-symbol-definitions-internal>  ( symbol-key , typeCtor , lookup-config)
         , !"Error occured at symboltable.resolve-all-symbol-definitions(post-processor)"
       )
     where
@@ -162,6 +183,7 @@
     where
       dbg-symboltable(!$[Found following symbols: [<print-as-string>result]]|"resolve-all-symbol-definitions(s)" , <debug-level-INFO>)
 
+
   // Resolving symbol definition with the specified search criteria
   // Following Strategy try to find only one symbol definition 
   // if multiple symbols exists with the specified criteria
@@ -171,7 +193,8 @@
       dbg-symboltable(!$[with following search criteria: [<print-as-string>(symbol-key , typeCtor) ]]|"resolve-symbol-definition" , <debug-level-INFO>)
     where
       with-spxverify(
-        result' := <resolve-symbol-definitions-internal>  ( symbol-key , typeCtor , <ONLY_ONE>)
+      	lookup-config  := ( LookupAllScope() , <ONLY_ONE>);
+        result' := <resolve-symbol-definitions-internal>  ( symbol-key , typeCtor , lookup-config  )
       )
     where
     	<map(post-processor) 
@@ -209,7 +232,7 @@
   
   
   resolve-symbol-definitions-internal:
-    (symbol-key , typeCtor, search-mode) -> resolved-symbols
+    (symbol-key , typeCtor, lookup-config ) -> resolved-symbols
     where
       with-spxverify(
         if CurrentScope then 
@@ -228,9 +251,9 @@
         , !"Failed to get the symbol-key."
       )
     where 
-      dbg-symboltable(!$[ with : [<print-as-string>(namespace, key,typeCtor,search-mode)]] |"resolve-symbol-definitions-internal" ,<debug-level-INFO>)
+      dbg-symboltable(!$[ with : [<print-as-string>(namespace, key,typeCtor, lookup-config)]] |"resolve-symbol-definitions-internal" ,<debug-level-INFO>)
     where
-      !(namespace, key,typeCtor,search-mode)
+      !(namespace, key, typeCtor, lookup-config)
       ; with-spxverify(
         	prim( "SPX_symtab_resolve_symbols" , <get-project-path> , <id>)
       	; ?resolved-symbols
@@ -298,7 +321,7 @@
       	 	, !"Index Symbol failed."
         )          
 		
-		index-unique-symbol-definition:
+	index-unique-symbol-definition:
 			(symbol-key , symbol-type , symbol) -> <id>
     	where
         dbg-symboltable(!$[with: [<print-as-string>(symbol-key , symbol-type , symbol)].]|"index-unique-symbol-definition" , "info")
@@ -335,7 +358,7 @@
         dbg-symboltable(!$[Entering new-internal-scope [<print-as-string> x].]|"activate-internal-scope(s)" , "info")
     where
       with-spxverify(
-         {| CurrentScope :
+         {| CurrentScope,GetScopeType:
               with-spxverify(
                 if not(GetEnclosingPackageName) then
                   fail 
@@ -343,8 +366,8 @@
               , !$[ Could not find any enclosing package to create an internal scope]  
               )
               ; scope_id :=  <get_internal_module_qtname><GetEnclosingPackageName> 
-              ; rules (CurrentScope: _ -> scope_id) 
-              
+              ; rules (CurrentScope : _ -> scope_id)
+              ; rules (GetScopeType := InternalScope()) 
               ; <s>x => y // performing transformation
         |}
         , !$[Failed to create an internal scope.]  
@@ -356,14 +379,17 @@
   activate-global-scope(s):
     x -> y 
     where 
-    	dbg-symboltable(!$[enter global-scope with [<print-as-string>x].]|"activate-global-scope(s)" , "info")
+  		dbg-symboltable(!$[enter global-scope with [<print-as-string>x].]|"activate-global-scope(s)" , "info")
     where
     	with-spxverify(
-        activate-scope(s|Globals()) => y 
-        , !"Failed to activate global scope"
-      )
+    		{| GetScopeType:
+    			    rules (GetScopeType := GlobalScope()); 
+  						activate-scope(s | Globals()) => y 
+       	|}
+     		, !"Failed to activate global scope"
+     	)		
     where 
-        dbg-symboltable(!$[exit global-scope [<print-as-string> x].]|"activate-global-scope(s)" , "info") 
+    	dbg-symboltable(!$[exit global-scope [<print-as-string> x].]|"activate-global-scope(s)" , "info") 
         
   	
    activate-scope(s|scope):
@@ -555,7 +581,7 @@
   *
   * @type _ -> List(PackageDeclaration) 
   */  
-  get-all-indexed-package-declarations = prim("SPX_index_get_package_declarations_of", <get-project-path> , <ALL>)
+  get-all-indexed-package-declarations = prim("SPX_index_get_package_declarations_of", <get-project-path> , <ALL_AS_SET>)
   
   /**
   * Returns all related files of the specified package 
@@ -588,7 +614,7 @@
   
   get-indexed-module-declarations = verify(List| <id> , "List @get-indexed-module-declarations"); mapconcat(get-indexed-module-declarations)
   
-  get-all-indexed-module-declarations =  ALL ; get-indexed-module-declarations
+  get-all-indexed-module-declarations =  ALL_AS_SET ; get-indexed-module-declarations
   
   get-indexed-module-declarations' = prim("SPX_index_get_module_declarations_of", <get-project-path> , <id> )
   	; verify(
@@ -601,7 +627,7 @@
   		String
   		|<id> , "String @get-indexed-module-declarations"
   		)
-  	; !(<id> , <ALL>) 
+  	; !(<id> , <ALL_AS_SET>) 
   	; get-indexed-module-declarations'   
   	  
   get-indexed-module-declarations = 
@@ -609,7 +635,7 @@
   		?Package(QName(_)) 
   		| <id> , "Package(QName(_)) @get-indexed-module-declarations"
   		)
-		; !(<id> , <ALL>) 
+		; !(<id> , <ALL_AS_SET>) 
   	; get-indexed-module-declarations'   
 
   get-indexed-dirty-module-declaration = 

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/completion/to-stratego-proposals.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/completion/to-stratego-proposals.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -0,0 +1,95 @@
+module context/str/to-stratego-proposals
+
+imports
+	libstrc		
+	libstratego-lib
+ 	libstratego-gpp
+	libstratego-aterm
+imports
+	lib/editor-common.generated
+	include/SpoofaxLang
+imports	
+	utils/sourcedir
+ 	utils/debug
+ 	utils/contract
+ 	utils/annotations
+ 	common 
+	config 
+imports 
+	context/-
+	normalize/-
+	context/str/-
+	spoofaxlang  
+rules 
+
+	// Content completion
+  propose-completion:
+    completion -> proposals
+    where
+      signature-of; one(?COMPLETION(prefix)) <+ one(?COMPLETION(prefix))
+    with
+      all-signatures := <filter-by-prefix(|prefix)> <all-keys-DeclareCookie>;
+      switch !completion
+        case ?Var(_):
+          all-signatures' := <try(filter(?(_, _)); not([]))> all-signatures
+        case ?SVar(_):
+          all-signatures' := <filter(?(_, _, _))> all-signatures
+        case ?DynRuleScopeId(_):
+          all-signatures' := <filter(?(_, _, _); not(is-congruence-signature))> all-signatures
+        case ?Import(_):
+          all-signatures' := []
+        otherwise: // unknown context
+          all-signatures' := <filter(not(is-congruence-signature))> all-signatures
+      end;
+      proposals := <map(signature-to-proposal)> all-signatures'
+  
+  propose-completion:
+    Rule(lhs, rhs @ Var(COMPLETION(_)), _) -> proposals
+    where
+      <not(oncetd(?RootApp(_) + ?App(_, _)))> lhs
+    with
+      lhs'      := <topdown(try(\As(_, e) -> e\))> lhs;
+      proposals := [([<pp-stratego-string> lhs'], "") | <propose-completion> rhs]
+      
+  
+  filter-by-prefix(|prefix) =
+    filter(one(string-starts-with(|prefix); not(?"")))
+  
+  //TODO fix for spoofaxlang
+  
+  signature-to-proposal:
+    (x, 0) -> [x | parentheses]
+    with
+      if is-constructor then
+        parentheses := ["()"]
+      else
+        parentheses := []
+      end
+
+  signature-to-proposal:
+    (x, n) -> [x, "(", t*, ")"]
+    where
+      <gt> (n, 0)
+    with
+      t* := <separate-by(|", ")> <copy> (n, "t") // TODO: number (Spoofax/231)
+
+  signature-to-proposal:
+    (x, 0, 0) -> [x, ""]
+
+  signature-to-proposal:
+    (x, n, 0) -> [x, "(", t*, ")"]
+    where
+      <gt> (n, 0)
+    with
+      t* := <separate-by(|", ")> <copy> (n, "s")
+
+  signature-to-proposal:
+    (x, n, m) -> [x, "(", s*, "|", t*, ")"]
+    where
+      <gt> (m, 0)
+    with
+      s* := <separate-by(|", ")> <copy> (n, "s");
+      t* := <separate-by(|", ")> <copy> (m, "t")
+
+  signature-to-proposal:
+    (x, [DR_DUMMY()], [DR_DUMMY()]) -> x // strategy param (wildcard arity)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -24,7 +24,8 @@
 
 rules 
 	 normalize:
-    (selected, position, ast, path, project-path) -> (filename, result)
+    (selected, position, ast, path, project-path) 
+    -> (filename, result)
     with 
     {| currently-precompiling-spx-abspath :
     			current-spx-file-path := <concat-strings> [project-path , "/" , path];
@@ -37,12 +38,14 @@
 rules
 	
 	desugar-compilation-unit:
-		CompilationUnit(moduledef*) -> 	<desugar-compilation-unit>CompilationUnit([] , [appended-default-package-declaration])
+		CompilationUnit(moduledef*) 
+		-> 	<desugar-compilation-unit>CompilationUnit([] , [appended-default-package-declaration])
 		where
 			 appended-default-package-declaration :=  Package(Name(<default_package_name>) , moduledef*)
 
 	desugar-compilation-unit:
-		c at CompilationUnit(import* , package*) -> 	CompilationUnit( import* , modified-packages)
+		c at CompilationUnit(import* , package*) 
+		-> 	CompilationUnit( import* , modified-packages)
 		where 
 				with-spxverify(
 					<index-compilation-unit>(<currently-precompiling-spx-abspath>, c)
@@ -54,8 +57,9 @@
 						<alltd(origin-track-forced(desugar-spx-package))> package* => modified-packages
 			|}
 
+
 	//TODO Implement : update desugared compilation unit in the index . 
-	// TODO  FIX : mark deprecated. remove it from existing implementation
+	//TODO  FIX : mark deprecated. remove it from existing implementation
 	desugar-imports:
 		i at Imports(import*) -> i
 		where	
@@ -133,7 +137,7 @@
 				
 rules
 
-	//Desugaring SDF Sections
+	// Desugaring SDF Sections
 	desugar-spx : 
 		SDFSection ( sectionDef ) -> <add-annotation(|<GetEnclosingModuleName>)> SDFSection( sectionDef' )
 		where

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -15,7 +15,7 @@
 imports
   analyze/sdf/check
   context/sdf/declare
-  context/str/declare
+  context/str/-
 imports
 	codegen/buildscripts
 	codegen/compile

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -15,7 +15,7 @@
 imports  
   analyze/sdf/check
   context/sdf/declare
-  context/str/declare
+  context/str/-
 imports
   codegen/buildscripts
 	codegen/compile

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Fri Dec 16 22:02:24 2011	(r23793)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Fri Dec 16 22:03:47 2011	(r23794)
@@ -9,6 +9,7 @@
 	utils/debug
 	include/SpoofaxLang
 	spoofaxlang
+	normalize/signatures
 
 rules 
 		get-normalized-path = string-replace(|"\\", "/")			
@@ -32,7 +33,9 @@
 	qname-to-path = 	convert-qname(|"/")
 	
 	qname-to-string =	convert-qname(|"-")
-		
+	
+	package-qname-to-string =  ?Package(QName(<id>)) ; convert-qname(|".") 
+		 	
 	convert-qname(|seperator) =
 		?QName(qname-parts*)
 		;<separate-by(|seperator);concat-strings>qname-parts*

From M.A.Akhter at student.tudelft.nl  Fri Dec 16 23:06:13 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 16 Dec 2011 22:06:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23795 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str
Message-ID: <20111216220613.75D9C2B8019@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Dec 16 22:06:13 2011
New Revision: 23795
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23795&sc=1

Log:
fixed orgin-equal for the spxlang symbols

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str	Fri Dec 16 22:03:47 2011	(r23794)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str	Fri Dec 16 22:06:13 2011	(r23795)
@@ -145,8 +145,6 @@
       map(!(<id>, "Build symbol in match pattern")) => builds;
       require([])
   
- 
-  //TODO FIX : origin-equal
   stratego-constraint-warning:
     a at Assign(v @ Var(x), _) -> (x, $[Variable '[x]' may be bound already])
 		where

From M.A.Akhter at student.tudelft.nl  Fri Dec 16 23:29:17 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 16 Dec 2011 22:29:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23796 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder
Message-ID: <20111216222917.3A57ECC15F@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Dec 16 22:29:16 2011
New Revision: 23796
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23796&sc=1

Log:
- included Sort type of ImploderAttachment during serialization  to terms

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java	Fri Dec 16 22:06:13 2011	(r23795)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/ImploderAttachment.java	Fri Dec 16 22:29:16 2011	(r23796)
@@ -23,30 +23,34 @@
 	private static final long serialVersionUID = -578795745164445689L;
 
 	public static final TermAttachmentType<ImploderAttachment> TYPE =
-		new TermAttachmentType<ImploderAttachment>(ImploderAttachment.class, "ImploderAttachment", 5) {
+		new TermAttachmentType<ImploderAttachment>(ImploderAttachment.class, "ImploderAttachment", 6) {
 
 			@Override
 			protected IStrategoTerm[] toSubterms(ITermFactory f, ImploderAttachment attachment) {
 				IToken left = attachment.getLeftToken();
 				IToken right = attachment.getRightToken();
 				
+				String sortType = attachment.getSort() == null ? "" : attachment.getSort() ;
 				String fileName = left.getTokenizer().getFilename()  == null ? "" :left.getTokenizer().getFilename();
 				
+				
 				return new IStrategoTerm[] {
 					f.makeString(fileName),
 					f.makeInt(left.getLine()),
 					f.makeInt(left.getColumn()),
 					f.makeInt(left.getStartOffset()),
-					f.makeInt(right.getEndOffset())
+					f.makeInt(right.getEndOffset()),
+					f.makeString( sortType )
 				};
 			}
 
 			@Override
 			protected ImploderAttachment fromSubterms(IStrategoTerm[] subterms) {
-				String fileName = asJavaString(subterms[0]).equals("") ? null :asJavaString(subterms[0]);
+				String fileName =  asJavaString(subterms[0]).equals("") ? null :asJavaString(subterms[0]);
+				String sortType =  asJavaString(subterms[0]).equals("") ? null :asJavaString(subterms[5]);
 				
 				return createCompactPositionAttachment(fileName, asJavaInt(subterms[1]),
-						asJavaInt(subterms[2]), asJavaInt(subterms[3]), asJavaInt(subterms[4]));
+						asJavaInt(subterms[2]), asJavaInt(subterms[3]), asJavaInt(subterms[4]) , sortType);
 				
 			}
 		
@@ -196,13 +200,22 @@
 		return createCompactPositionAttachment(filename, left.getLine(), left.getColumn(), left.getStartOffset(), right.getEndOffset());
 	}
 	
+	
+	
 	public static ImploderAttachment createCompactPositionAttachment(
 			String filename, int line, int column, int startOffset, int endOffset) {
+		return createCompactPositionAttachment(filename, line, column, startOffset, endOffset, null);
+	}
+	
+	
+	public static ImploderAttachment createCompactPositionAttachment(
+			String filename, int line, int column, int startOffset, int endOffset, String sortType) {
 		Token token = new Token(null, 0, line, column, startOffset, endOffset, TK_UNKNOWN);
-		NullTokenizer newTokenizer = new NullTokenizer(null, filename, token);
+		NullTokenizer newTokenizer = new NullTokenizer(sortType, filename, token);
 		token.setTokenizer(newTokenizer);
 		return new ImploderAttachment(null, token, token);
 	}
+	
 
 	/**
 	 * @param isAnonymousSequence  True if the term is an unnamed sequence like a list or tuple.

From M.A.Akhter at student.tudelft.nl  Sat Dec 17 00:01:03 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 16 Dec 2011 23:01:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23797 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index:
	. tests
Message-ID: <20111216230103.E20D7CC17B@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Dec 16 23:01:03 2011
New Revision: 23797
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23797&sc=1

Log:
added a base test case class. thus, dependencies on AbstractInterpreterTest is no longer there (reason of the build failure). with the moved printing symbols as csv to util class

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxIndexBaseTestCase.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/JdbmApiTests.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexConfiguration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexUtils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexConfiguration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexConfiguration.java	Fri Dec 16 22:29:16 2011	(r23796)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexConfiguration.java	Fri Dec 16 23:01:03 2011	(r23797)
@@ -4,22 +4,24 @@
 
 	private SpxIndexConfiguration() {
 	}
+	
 	public static final int NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER = 1;
-	private static final boolean LOG_SYMBOLS = true;
+	private static boolean LOG_SYMBOLS = true;
 	private static boolean DEBUG = false;
 	private static String CSVDelimiter = " __ ";  
 	
-	public static boolean shouldLogSymbols() {return LOG_SYMBOLS;}
-	
-	public static boolean shouldPrintDebugInfo() {return DEBUG;}
-	
-	public synchronized static void turnOnTracing() { DEBUG  = true;}
-	
-	public synchronized  static void turnOffTracing() { DEBUG  = true;}
 	
 	public static String getCSVDelimiter() { return CSVDelimiter; }
 	public static final String SPX_CACHE_DIRECTORY = ".spxcache";
 	public static final String SPX_INDEX_DIRECTORY = ".spxindex";
 	public static final String SPX_SHADOW_DIR = ".shadowdir";
 	
+	
+	public static boolean shouldLogSymbols() {return LOG_SYMBOLS;}
+	public static boolean shouldPrintDebugInfo() {return DEBUG;}
+	
+	
+	
+	public static void setLoggingSymbols(boolean shouldLogSymbolsAsCSV) {LOG_SYMBOLS = shouldLogSymbolsAsCSV;}
+	public static void setTracing(boolean shouldWriteTraceInfo) { DEBUG  = shouldWriteTraceInfo;}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexUtils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexUtils.java	Fri Dec 16 22:29:16 2011	(r23796)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexUtils.java	Fri Dec 16 23:01:03 2011	(r23797)
@@ -182,4 +182,14 @@
 		
 		logger.write("\n");
 	}
+	
+	static void printSymbolTable(SpxSemanticIndexFacade f, boolean printIfDebug, String stageName) throws IOException {
+		ISpxPersistenceManager persistenceManager = f.getPersistenceManager();
+		if (printIfDebug){
+			try {
+				persistenceManager.spxSymbolTable().printSymbols(f, stageName, f.getProjectPath(), f.getIndexId());
+			} catch (SpxSymbolTableException e) {
+			}
+		}
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Fri Dec 16 22:29:16 2011	(r23796)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Fri Dec 16 23:01:03 2011	(r23797)
@@ -1044,19 +1044,11 @@
 	public void commitChanges() throws IOException {
 		ISpxPersistenceManager persistenceManager = this.getPersistenceManager();
 		persistenceManager.commit();
-		printSymbolTable(SpxIndexConfiguration.shouldLogSymbols(), "commit");
+		SpxIndexUtils.printSymbolTable(this, SpxIndexConfiguration.shouldLogSymbols(), "commit");
 	}	
 
 	
-	private void printSymbolTable(boolean printIfDebug, String stageName) throws IOException {
-		ISpxPersistenceManager persistenceManager = this.getPersistenceManager();
-		if (printIfDebug){
-			try {
-				persistenceManager.spxSymbolTable().printSymbols(this, stageName, this.getProjectPath(), this.getIndexId());
-			} catch (SpxSymbolTableException e) {
-			}
-		}
-	}
+	
 	/**
 	 * Closes any underlying open connection. 
 	 * @param shouldCommit TODO
@@ -1097,7 +1089,7 @@
 		}
 		
 		initializePersistenceManager();
-		printSymbolTable(SpxIndexConfiguration.shouldPrintDebugInfo(), "clean");
+		SpxIndexUtils.printSymbolTable(this,SpxIndexConfiguration.shouldPrintDebugInfo(), "clean");
 		
 	}
 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxIndexBaseTestCase.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxIndexBaseTestCase.java	Fri Dec 16 23:01:03 2011	(r23797)
@@ -0,0 +1,33 @@
+package org.spoofax.interpreter.library.language.spxlang.index.tests;
+
+
+import junit.framework.TestCase;
+
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxIndexConfiguration;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+public abstract class SpxIndexBaseTestCase extends TestCase {
+
+    protected Interpreter itp;
+    protected ITermFactory factory;
+    protected String basePath;
+
+    protected void setUp() throws Exception {
+    	super.setUp();
+    	
+    	SpxIndexConfiguration.setLoggingSymbols(false);
+    	SpxIndexConfiguration.setTracing(false);
+        
+    	itp = new Interpreter();
+        factory = itp.getFactory();
+     }
+    
+    @Override
+    protected void tearDown() throws Exception {
+        itp.shutdown();
+        itp = null;
+        factory = null;
+        super.tearDown();
+    }
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Fri Dec 16 22:29:16 2011	(r23796)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Fri Dec 16 23:01:03 2011	(r23797)
@@ -22,9 +22,8 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
-import org.spoofax.interpreter.test.AbstractInterpreterTest;
 
-public class SpxLookupTableUnitTests  extends AbstractInterpreterTest{
+public class SpxLookupTableUnitTests  extends SpxIndexBaseTestCase{
 	
 	private final String _projectName = "test-sybol-table_2";
 	private IStrategoString projectNameTerm;
@@ -57,7 +56,7 @@
 	
 	@Override 
 	protected void setUp() throws Exception {
-		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
+		super.setUp();
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
 		_registry = new SpxSemanticIndexFacadeRegistry();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Fri Dec 16 22:29:16 2011	(r23796)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Fri Dec 16 23:01:03 2011	(r23797)
@@ -13,10 +13,10 @@
 import org.spoofax.interpreter.library.language.spxlang.index.INamespace;
 import org.spoofax.interpreter.library.language.spxlang.index.PackageNamespace;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxIndexConfiguration;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxIndexUtils;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxPrimarySymbolTable;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacadeRegistry;
-import org.spoofax.interpreter.library.language.spxlang.index.SpxIndexUtils;
 import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.index.data.NamespaceUri;
 import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
@@ -29,9 +29,8 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
-import org.spoofax.interpreter.test.AbstractInterpreterTest;
 
-public class SpxPrimarySymbolTableTest extends AbstractInterpreterTest{
+public class SpxPrimarySymbolTableTest extends SpxIndexBaseTestCase{
 	
 	private final String _projectName = ".test-symbol-table_12";
 	
@@ -50,7 +49,8 @@
 	
 	@Override
 	protected void setUp() throws Exception {
-		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
+		
+		super.setUp();
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
 		_registry = new SpxSemanticIndexFacadeRegistry();
@@ -62,6 +62,8 @@
 		_facade.cleanIndexAndSymbolTable();
 		
 		
+		
+		
 		symbol_table = _facade.getPersistenceManager().spxSymbolTable();
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Fri Dec 16 22:29:16 2011	(r23796)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Fri Dec 16 23:01:03 2011	(r23797)
@@ -14,9 +14,8 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
-import org.spoofax.interpreter.test.AbstractInterpreterTest;
 
-public class SpxSemanticIndexFacadeTest extends AbstractInterpreterTest{
+public class SpxSemanticIndexFacadeTest extends SpxIndexBaseTestCase{
 	
 	private final String _projectName = "test-sybol-table_1";
 	
@@ -35,7 +34,7 @@
 	
 	@Override
 	protected void setUp() throws Exception {
-		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
+		super.setUp();
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		_registry = new SpxSemanticIndexFacadeRegistry();
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java	Fri Dec 16 22:29:16 2011	(r23796)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java	Fri Dec 16 23:01:03 2011	(r23797)
@@ -11,9 +11,8 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
-import org.spoofax.interpreter.test.AbstractInterpreterTest;
 
-public class SpxSymbolTableEntryTests extends AbstractInterpreterTest{
+public class SpxSymbolTableEntryTests extends SpxIndexBaseTestCase{
 	private final String _projectName = "test-sybol-table";
 	
 	private IStrategoString projectNameTerm; 
@@ -30,7 +29,7 @@
 	
 	@Override
 	protected void setUp() throws Exception {
-		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
+		super.setUp();
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
 		projectNameTerm = termFactory().makeString(_projectName);

From M.A.Akhter at student.tudelft.nl  Sat Dec 17 01:37:00 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 17 Dec 2011 00:37:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23798 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF
Message-ID: <20111217003700.08437108C005@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Dec 17 00:36:59 2011
New Revision: 23798
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23798&sc=1

Log:
build failing due to errors in org.spoofax.interpreter.library.xml for missing "org.spoofax.interpreter.test" (exported) package

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF/MANIFEST.MF

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF/MANIFEST.MF	Fri Dec 16 23:01:03 2011	(r23797)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF/MANIFEST.MF	Sat Dec 17 00:36:59 2011	(r23798)
@@ -12,5 +12,6 @@
  org.spoofax.interpreter.library.ssl,
  org.spoofax.interpreter.stratego,
  org.spoofax.interpreter.terms,
+ org.spoofax.interpreter.test,
  org.spoofax.terms
 Bundle-Vendor: Spoofax.org

From L.C.L.Kats at tudelft.nl  Mon Dec 19 15:34:51 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 19 Dec 2011 14:34:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23799 - in
	spoofax-imp/branches/spoofax-imp-release:
	org.strategoxt.imp.feature org.strategoxt.imp.updatesite
Message-ID: <20111219143451.CB19BCC040@mx4.tudelft.nl>

Author: LennartKats
Date: Mon Dec 19 14:34:51 2011
New Revision: 23799
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23799&sc=1

Log:
version bump

Modified:
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml	Sat Dec 17 00:36:59 2011	(r23798)
+++ spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml	Mon Dec 19 14:34:51 2011	(r23799)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.6.1.4"
+      version="0.7"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">
@@ -20,11 +20,10 @@
       This software is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-full license text for more details.
-Most Spoofax/IMP code is licensed under the Eclipse Public License.
-Some runtime components are licensed under the GNU Lesser General
-Public License or the GNU General Public License; external
-components may be covered by different licences.
+full license texts for more details.
+Most Spoofax/IMP code is licensed under the GNU Lesser General
+Public License (LGPL). Runtime components related to the IMP library are
+licensed under the Eclipse Public License (EPL).
    </license>
 
    <url>

Modified: spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml	Sat Dec 17 00:36:59 2011	(r23798)
+++ spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml	Mon Dec 19 14:34:51 2011	(r23799)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.6.1.4.jar" id="org.strategoxt.imp" version="0.6.1.4">
+   <feature url="features/org.strategoxt.imp_0.7.jar" id="org.strategoxt.imp" version="0.7">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From L.C.L.Kats at tudelft.nl  Mon Dec 19 15:39:19 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 19 Dec 2011 14:39:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23800 -
	spoofax/branches/spoofax-release
Message-ID: <20111219143919.D3977108C00A@mx3.tudelft.nl>

Author: LennartKats
Date: Mon Dec 19 14:39:19 2011
New Revision: 23800
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23800&sc=1

Log:
release branch

Added:
   spoofax/branches/spoofax-release/
      - copied from r23799, spoofax/trunk/

From karltk at strategoxt.org  Mon Dec 19 20:05:43 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 19 Dec 2011 19:05:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23801 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj
Message-ID: <20111219190543.9A47D108C022@mx3.tudelft.nl>

Author: karltk
Date: Mon Dec 19 19:05:43 2011
New Revision: 23801
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23801&sc=1

Log:
Removed old Ivy build files.

Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/build.ivy.xml
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/ivy.xml
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/ivysettings.xml

From karltk at strategoxt.org  Mon Dec 19 20:08:22 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 19 Dec 2011 19:08:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23802 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj
Message-ID: <20111219190822.231BD7F8020@mx1.tudelft.nl>

Author: karltk
Date: Mon Dec 19 19:08:21 2011
New Revision: 23802
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23802&sc=1

Log:
Fixed copyrights. Removed more Ivy build files.

Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/version.properties
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/ecj-parse-java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/ecj-shell

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/ecj-parse-java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/ecj-parse-java	Mon Dec 19 19:05:43 2011	(r23801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/ecj-parse-java	Mon Dec 19 19:08:21 2011	(r23802)
@@ -1,8 +1,8 @@
 #! /bin/bash
 #
-#  Copyright (c) 2006-2007, Karl Trygve Kalleberg <karltk at ii.uib.no>
+#  Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
 #
-#  Licensed under the GNU General Public License, v2
+#  Licensed under the GNU Lesser General Public License, v2.1
 
 jars="
 jjtraveler-0.4.3.jar

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/ecj-shell
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/ecj-shell	Mon Dec 19 19:05:43 2011	(r23801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/ecj-shell	Mon Dec 19 19:08:21 2011	(r23802)
@@ -1,8 +1,8 @@
 #! /bin/bash
 #
-#  Copyright (c) 2006-2007, Karl Trygve Kalleberg <karltk at ii.uib.no>
+#  Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
 #
-#  Licensed under the GNU General Public License, v2
+#  Licensed under the GNU Lesser General Public License, v2.1
 
 jars="
 jdtcore-3.2.0.v_658.jar                                   org.eclipse.equinox.registry_3.2.1.R32x_v20060814.jar

From karltk at strategoxt.org  Mon Dec 19 20:09:34 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 19 Dec 2011 19:09:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23803 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse
Message-ID: <20111219190934.AB5567F801C@mx1.tudelft.nl>

Author: karltk
Date: Mon Dec 19 19:09:34 2011
New Revision: 23803
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23803&sc=1

Log:
Removed spelling error in prim name.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Mon Dec 19 19:08:21 2011	(r23802)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Mon Dec 19 19:09:34 2011	(r23803)
@@ -57,7 +57,7 @@
   ecj-create-project = ?path ; prim("ECJ_create_project", path)
 
   /** @type String -> IJavaProject */
-  ecj-create-java-project = ?path ; prim("ECJ_create_java_cd ..project", path)
+  ecj-create-java-project = ?path ; prim("ECJ_create_java_project", path)
 
   /** @param IProject 
     * @type String -> ?success

From karltk at strategoxt.org  Mon Dec 19 20:21:45 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 19 Dec 2011 19:21:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23804 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.ui
Message-ID: <20111219192145.1D604CC049@mx4.tudelft.nl>

Author: karltk
Date: Mon Dec 19 19:21:44 2011
New Revision: 23804
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23804&sc=1

Log:
Creating Eclipse plugin for interpreter.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/

From karltk at strategoxt.org  Mon Dec 19 20:22:52 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 19 Dec 2011 19:22:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23805 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.ui: . .settings
	META-INF src src/main src/main/java src/main/java/org
	src/main/java/org/spoofax src/main/java/org/...
Message-ID: <20111219192252.8C4362B8027@mx2.tudelft.nl>

Author: karltk
Date: Mon Dec 19 19:22:52 2011
New Revision: 23805
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23805&sc=1

Log:
Initial import of interactive Eclipse console for Stratego.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/.project
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/.settings/
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/.settings/org.eclipse.jdt.core.prefs
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/META-INF/
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/build.properties
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/plugin.xml
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/InterpreterPlugin.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/StrategoConsole.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/StrategoInterpreter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/actions/
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/actions/NewConsoleAction.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/stratego/

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.ui/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.ui/.classpath	Mon Dec 19 19:22:52 2011	(r23805)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src/main/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.ui/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.ui/.project	Mon Dec 19 19:22:52 2011	(r23805)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.spoofax.interpreter.ui</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.pde.PluginNature</nature>
+	</natures>
+</projectDescription>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.ui/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.ui/.settings/org.eclipse.jdt.core.prefs	Mon Dec 19 19:22:52 2011	(r23805)
@@ -0,0 +1,12 @@
+#Mon Dec 19 20:10:56 CET 2011
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.6
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.6

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.ui/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.ui/META-INF/MANIFEST.MF	Mon Dec 19 19:22:52 2011	(r23805)
@@ -0,0 +1,15 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: Ui
+Bundle-SymbolicName: org.spoofax.interpreter.ui;singleton:=true
+Bundle-Version: 0.6.0.qualifier
+Require-Bundle: org.eclipse.ui,
+ org.eclipse.ui.console;bundle-version="3.5.100",
+ org.spoofax.interpreter.core,
+ org.spoofax.interpreter,
+ org.spoofax.jsglr,
+ org.spoofax.terms,
+ org.spoofax.interpreter.adapter.ecj,
+ org.spoofax.interpreter.library.eclipse,
+ org.spoofax.interpreter.library.jsglr,
+ org.spoofax.interpreter.library.java

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.ui/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.ui/build.properties	Mon Dec 19 19:22:52 2011	(r23805)
@@ -0,0 +1,3 @@
+source.. = src/
+bin.includes = META-INF/,\
+               .

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.ui/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.ui/plugin.xml	Mon Dec 19 19:22:52 2011	(r23805)
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?eclipse version="3.4"?>
+<plugin>
+   <extension
+         point="org.eclipse.ui.actionSets">
+      <actionSet
+            id="org.spoofax.interpreter.ui.actionSet"
+            label="Stratego Action Set"
+            visible="true">
+         <menu
+               id="strategoMenu"
+               label="Stratego">
+            <separator
+                  name="strategoGroup">
+            </separator>
+         </menu>
+         <action
+               class="org.spoofax.interpreter.ui.actions.NewConsoleAction"
+               icon="icons/sample.gif"
+               id="org.spoofax.interpreter.ui.actions.NewConsoleAction"
+               label="New Console"
+               menubarPath="strategoMenu/strategoGroup"
+               toolbarPath="strategoGroup"
+               tooltip="Open Stratego console">
+         </action>
+      </actionSet>
+   </extension>
+
+</plugin>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/InterpreterPlugin.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/InterpreterPlugin.java	Mon Dec 19 19:22:52 2011	(r23805)
@@ -0,0 +1,20 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk at strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.ui;
+
+import org.eclipse.ui.plugin.AbstractUIPlugin;
+
+public class InterpreterPlugin extends AbstractUIPlugin {
+
+	private static InterpreterPlugin instance;
+
+	public static InterpreterPlugin instance() {
+		if(instance == null) {
+			instance = new InterpreterPlugin();
+		}
+		return instance;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/StrategoConsole.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/StrategoConsole.java	Mon Dec 19 19:22:52 2011	(r23805)
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk at strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.ui;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.PrintWriter;
+import java.io.Writer;
+
+import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.ui.console.IOConsole;
+import org.eclipse.ui.console.IOConsoleOutputStream;
+import org.spoofax.interpreter.library.IOAgent;
+
+public class StrategoConsole extends IOConsole implements Runnable {
+
+	public static class ConsoleIOAgent extends IOAgent {
+
+		final PrintWriter out;
+		final PrintWriter err;
+
+		public ConsoleIOAgent(IOConsoleOutputStream out,
+				IOConsoleOutputStream err) {
+			this.out = new PrintWriter(out);
+			this.err = new PrintWriter(err);
+		}
+
+		@Override
+		public Writer getWriter(int fd) {
+			if (fd == CONST_STDERR) {
+				return err;
+			} else if(fd == CONST_STDOUT) {
+				return out;
+			}
+			return super.getWriter(fd);
+		}
+
+	}
+
+	public StrategoConsole() {
+		super("Stratego Console", ImageDescriptor.getMissingImageDescriptor());
+		Thread t = new Thread(this);
+		t.start();
+	}
+
+	@Override
+	public String getName() {
+		return "Stratego Console";
+	}
+
+	@Override
+	public void run() {
+		System.out.println("Running console");
+		IOConsoleOutputStream err = newOutputStream();
+		IOConsoleOutputStream out = newOutputStream();
+		IOConsoleOutputStream prompt = newOutputStream();
+		err.setColor(new Color(null, 255, 0, 0));
+		out.setColor(new Color(null, 234,123,195));
+		prompt.setColor(new Color(null, 95, 200, 23));
+		ConsoleIOAgent ioAgent = new ConsoleIOAgent(out, err);
+		StrategoInterpreter intp = new StrategoInterpreter(ioAgent);
+		BufferedReader br = new BufferedReader(new InputStreamReader(getInputStream()));
+		for(;;) {
+			try {
+				prompt.write("> ");
+				prompt.flush();
+				String line = br.readLine();
+				if(!intp.eval(line))
+					break;
+			} catch (IOException e) {
+				// do nothing
+			}
+		}
+	}
+
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/StrategoInterpreter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/StrategoInterpreter.java	Mon Dec 19 19:22:52 2011	(r23805)
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk at strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.ui;
+
+import java.io.IOException;
+
+import org.spoofax.interpreter.ConcreteInterpreter;
+import org.spoofax.interpreter.core.InterpreterErrorExit;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.InterpreterExit;
+import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.library.eclipse.EFILibrary;
+import org.spoofax.interpreter.library.java.JFFLibrary;
+import org.spoofax.interpreter.ui.StrategoConsole.ConsoleIOAgent;
+import org.spoofax.jsglr.client.ParseException;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+
+public class StrategoInterpreter {
+
+	private final ConcreteInterpreter interpreter;
+	private final ConsoleIOAgent ioAgent;
+
+	public StrategoInterpreter(ConsoleIOAgent ioAgent) {
+		this.ioAgent = ioAgent;
+		interpreter = new ConcreteInterpreter(); //new ECJFactory());
+		try {
+			JFFLibrary.attach(interpreter);
+			EFILibrary.attach(interpreter);
+			interpreter.setIOAgent(ioAgent);
+		} catch(IOException e) {
+			throw new RuntimeException(e);
+		} catch(InterpreterException e) {
+			throw new RuntimeException(e);
+		}
+
+	}
+
+	public boolean eval(String line) {
+		try {
+			System.out.println("EVAL " + line);
+			if(!interpreter.parseAndInvoke(line)) {
+				ioAgent.err.println("command failed");
+			} else {
+				ioAgent.out.println(interpreter.current().toString());
+			}
+		} catch (TokenExpectedException e) {
+			ioAgent.err.println(e.getMessage());
+		} catch (InterpreterErrorExit e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (BadTokenException e) {
+			ioAgent.err.println(e.getMessage());
+		} catch (ParseException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (InterpreterExit e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (UndefinedStrategyException e) {
+			ioAgent.err.println(e.getMessage());
+		} catch (SGLRException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (InterpreterException e) {
+			if(e.getCause() != null)
+				ioAgent.err.println(e.getCause().getMessage());
+			else
+				ioAgent.err.println(e.getMessage());
+		} finally {
+			ioAgent.out.flush();
+			ioAgent.err.flush();
+		}
+		return true;
+	}
+
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/actions/NewConsoleAction.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.ui/src/main/java/org/spoofax/interpreter/ui/actions/NewConsoleAction.java	Mon Dec 19 19:22:52 2011	(r23805)
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) 2011, Karl Trygve Kalleberg <karltk at strategoxt dot org>
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.ui.actions;
+
+import org.eclipse.jface.action.IAction;
+import org.eclipse.jface.viewers.ISelection;
+import org.eclipse.ui.IWorkbenchWindow;
+import org.eclipse.ui.IWorkbenchWindowActionDelegate;
+import org.eclipse.ui.console.ConsolePlugin;
+import org.eclipse.ui.console.IConsole;
+import org.spoofax.interpreter.ui.StrategoConsole;
+
+public class NewConsoleAction implements IWorkbenchWindowActionDelegate {
+
+	@Override
+	public void run(IAction action) {
+		StrategoConsole console = new StrategoConsole();
+		ConsolePlugin.getDefault().getConsoleManager()
+				.addConsoles(new IConsole[] { console });
+		ConsolePlugin.getDefault().getConsoleManager().showConsoleView(console);
+	}
+
+	@Override
+	public void selectionChanged(IAction action, ISelection selection) {
+	}
+
+	@Override
+	public void dispose() {
+	}
+
+	@Override
+	public void init(IWorkbenchWindow window) {
+	}
+}
\ No newline at end of file

From tobivollebregt at gmail.com  Mon Dec 19 20:50:56 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 19 Dec 2011 19:50:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23806 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: editor
	trans trans/codegen/template
Message-ID: <20111219195056.39C952B8003@mx2.tudelft.nl>

Author: tvo
Date: Mon Dec 19 19:50:55 2011
New Revision: 23806
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23806&sc=1

Log:
TemplateLang: pretty printer that uses modified BOX as back end

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Mon Dec 19 19:22:52 2011	(r23805)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Mon Dec 19 19:50:55 2011	(r23806)
@@ -38,4 +38,8 @@
     test-resolving-symbol (openeditor) (realtime) (meta)
   */
 
+  // builder : "TemplateLang: show syntax definition"    = build-templatelang-sdf (openeditor) (realtime) (meta) (source)
+  // builder : "TemplateLang: show completion templates" = build-templatelang-esv (openeditor) (realtime) (meta) (source)
+  builder : "TemplateLang: show pretty printer"       = build-templatelang-str (openeditor) (realtime) (meta) (source)
+
   on save		: build-incrementally-service

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Mon Dec 19 19:22:52 2011	(r23805)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Mon Dec 19 19:50:55 2011	(r23806)
@@ -1,13 +1,3 @@
-// FIXME: Refactor to use lists, and separate-by(|"\n") to insert newlines.
-//        Then we can get rid of the four (!) pp-ih-* strategies.
-//        [Layout, Placeholder] could just generate an empty tuple for an
-//        empty substitute, which could be filtered out later on...
-//
-// 1. template-line-to-stratego
-// 2. filter(not(?()))
-// 3. separate-by(|"\n")
-// 4. concat
-
 module to-str
 
 imports
@@ -21,7 +11,7 @@
   utils/attributes
   utils/sdf2conflicts
   utils/templatelang
-	common
+  common
 
 strategies
 
@@ -41,35 +31,43 @@
     parse-stratego-string;
     alltd(try(un-double-quote); unescape)
 
+  build-templatelang-str:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    where with-spxverify(
+    	filename := <guarantee-extension(|"generated.str")> path;
+    	result := <collect-all(?TemplateProduction(_, _, _) + ?TemplateProductionWithCons(_, _, _));
+    	           ![TemplateSection(<id>)];
+    	           template-sections-to-stratego-string> selected
+     )
+
   template-sections-to-stratego-string:
     section* ->
     ${module prettyprinter
       imports
+        libstratego-gpp
         libstratego-lib
 
+      signature constructors
+        Z : S-OPTIONS * BOX-LIST -> BOX
+        I : S-OPTIONS * BOX -> BOX
+
+      overlays
+        H0(xs) = H([SOpt(HS(), "0")], xs)
+
       strategies
 
-        pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
-        pp-list(s|t) = map(s); separate-by(|t); concat-strings
- 				// ih = indent helper, t = indent string
-        pp-ih-0(|t) = ?"" <+ prefix-lines(|t)
-        pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
-        pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
-        pp-ih-3(|t) = ?"" <+ prefix-lines-except-first(|t)
-
-        all-lines-except-first(s) =
-            is-string
-          ; string-tokenize-keep-empty(|['\n'])
-          ; at-last( \ [""] -> [] \  // Do not run s on a final empty line.
-                   < where(!["\n"] => laststring) // ... but remember that the second last line was delimited by a newline
-                   + where(![] => laststring))    // ... or not.
-          ; ([id | map(s)] + [])
-          ; <separate-by> ("\n", <id>)
-          ; <conc> (<id>, laststring) // Restore the final newline, if there was one.
-          ; concat-strings
+        pp-one-V(s) = !V([], <s>)
+        pp-one-Z(s) = !Z([], <s>)
+
+        pp-option(s) = \None() -> []\ + \Some(t) -> <s> t\
+
+        pp-v-list(s)   = ?[] <+ !V([], <map(pp-one-V(s))>)
+        pp-v-list(s|t) = ?[] <+ !V([SOpt(VS(), t)], <map(pp-one-V(s))>)
 
-        prefix-lines-except-first(|p) =
-          all-lines-except-first(<conc-strings> (p, <id>))
+        pp-indent(|t) = ?[] <+ !I([SOpt(IS(), t)], H0(<id>))
+
+        pp-h-list(s)   = ?[] <+ !H([], <map(pp-one-Z(s))>)
+        pp-h-list(s|t) = ?[] <+ !H0(<map(pp-one-Z(s)); separate-by(|S(t))>)
 
       {section''*}
 
@@ -77,20 +75,20 @@
 
         {strategy*}}
     where
-    	with-spxverify(
-	      section'*  := <templatelang-desugar-top> section*;
-	      section''* := <filter(template-section-to-stratego-string);
-	                     separate-by(|"\n\n")> section'*
-     		, !"Failed to desugar "
-     	);
-    	with-spxverify(
-	      // All sorts used in pp minus all sorts for which a pp strategy has been
-	      // created will get a `prettyprint-sort = is-string' default strategy.
-	      sorts-used-in-pp := <collect-om(sort-used-in-prettyprinting); nub> section'*; // FIXME: global data
- 	      sorts-decl-in-pp := <collect-om(sort-decl-in-prettyprinting); nub> section'*; // FIXME: global data
+      with-spxverify(
+        section'*  := <templatelang-desugar-top> section*;
+        section''* := <filter(template-section-to-stratego-string);
+                       separate-by(|"\n\n")> section'*
+         , !"Failed to desugar "
+       );
+      with-spxverify(
+        // All sorts used in pp minus all sorts for which a pp strategy has been
+        // created will get a `prettyprint-sort = is-string' default strategy.
+        sorts-used-in-pp := <collect-om(sort-used-in-prettyprinting); nub> section'*; // FIXME: global data
+         sorts-decl-in-pp := <collect-om(sort-decl-in-prettyprinting); nub> section'*; // FIXME: global data
               sorts-without-pp := <diff> (sorts-used-in-pp, sorts-decl-in-pp);
-	      strategy* := <map(sort-to-prettyprint-strategy); separate-by(|"\n\n")> sorts-without-pp
-	      , !"Failed to generate sort-to-pretty-print strategy"
+        strategy* := <map(sort-to-prettyprint-strategy); separate-by(|"\n\n")> sorts-without-pp
+        , !"Failed to generate sort-to-pretty-print strategy"
       )
 
   template-section-to-stratego-string:
@@ -98,118 +96,40 @@
     $[strategies
 
         [strategy*]]
-    where 
-    	with-spxverify(
-	      strategy* := <declare-template-definition-main;
-	                    map(template-to-prettyprint-strategy);
-	                    separate-by(|"\n\n")> prod*
-      	, !"Failed to pretty-print template to strategy"
+    where
+      with-spxverify(
+        strategy* := <declare-template-definition-main;
+                      map(template-to-prettyprint-strategy);
+                      separate-by(|"\n\n")> prod*
+        , !"Failed to pretty-print template to strategy"
       )
 
 /*internal*/ strategies
 
   sort-to-prettyprint-strategy:
-    sort -> $[prettyprint-[sort] = is-string]
+    sort -> ${prettyprint-{sort} = ![S(<is-string>)]}
 
   sort-decl-in-prettyprinting:
-	  TemplateProduction(sort, _, _) -> sort
+    TemplateProduction(sort, _, _) -> sort
 
   sort-used-in-prettyprinting:
     Placeholder(sort(sort), _, _) -> sort
 
 rules
 
- // Single line template with only Layout and String elements.
-  template-to-prettyprint-strategy:
-    TemplateProduction(sort, SingleLineTemplate(elem*), attrs) ->
-    $[prettyprint-[sort]:
-        [cons]() -> "[<templatelang-escape> t]"]
-    where
-      [String(t)] := <map(\Layout(t) -> String(t)\ + ?String(_));
-                      concatenate-consecutive-strings> elem*;
-      cons := <fetch-cons-name> attrs
-
-  // Template with only a placeholder. (i.e., injection)
-  // The placeholder is at the start AND at the end of the template!
-  template-to-prettyprint-strategy:
-    TemplateProduction(sort, template, attrs) ->
-    $[prettyprint-[sort]:
-        [input] -> a'
-        where
-          [<template-element-to-prettyprint> p{"a"}]]
-    where
-      < ?SingleLineTemplate([p @ Placeholder(_, _, _)])
-      + ?Template([Line([Layout(_), p @ Placeholder(_, _, _)])]) > template
-    where
-    	with-spxverify(
-	      if cons := <fetch-cons-name> attrs then
-	        input := $[[cons](a)]
-	      else
-	        input := "a"
-	      end
-      )
-
-  // Generalized injection: a list of placeholder lines only.
-  // This means that there is no place where
-  template-to-prettyprint-strategy:
-    TemplateProduction(sort, Template(line*), attrs) ->
-    $[prettyprint-[sort]:
-        [input] -> zz
-        where
-          [let'*]]
-    where
-      <all(?Line([Layout(_), Placeholder(_, _, _)]))> line*;
-      not(!line* => [_]) // normal injection
-    where
-      with-spxverify(
-        (line'*, _)    := <thread-map(rename-template-line)> (line*, 0);
-        (line''*, _)   := <thread-map(template-line-to-stratego)> (line'*, -1);
-        arg*           := <mapconcat(template-line-to-cons-arg)> line'*;
-        let*           := <mapconcat(template-line-to-prettyprint)> line'*;
-        (input, let'*) := <template-common> (let*, <separate-by(|["\"\\n\""]); concat> line''*, attrs, arg*)
-      )
-
   template-to-prettyprint-strategy:
     TemplateProduction(sort, SingleLineTemplate(elem*), attrs) ->
-    $[prettyprint-[sort]:
-        [input] -> zz
-        where
-          [let'*]]
-    where
-      not(<map(?Layout(_) + ?String(_))> elem*);
-      not(!elem* => [Placeholder(_, _, _)])
-    where
-      with-spxverify(
-	      (elem'*, _)    := <thread-map(try(rename-template-element))> (elem*, 0);
-	      elem''*        := <map(template-element-to-stratego(|""))> elem'*;
-	      arg*           := <filter(template-element-to-cons-arg)> elem'*;
-	      let*           := <filter(template-element-to-prettyprint)> elem'*;
-	      (input, let'*) := <template-common> (let*, elem''*, attrs, arg*)
-      )
+      <template-to-prettyprint-strategy> TemplateProduction(sort, Template([Line(elem*)]), attrs)
 
   template-to-prettyprint-strategy:
     TemplateProduction(sort, Template(line*), attrs) ->
-    $[prettyprint-[sort]:
-        [input] -> zz
-        where
-          [let'*]]
+    ${prettyprint-{sort}:
+        {input} -> [{output}]}
     where with-spxverify(
       (line'*, _)    := <thread-map(rename-template-line)> (line*, 0);
-      (line''*, _)   := <thread-map(template-line-to-stratego)> (line'*, 0);
+      line''*        := <map(template-line-to-stratego <+ fail)> line'*;
       arg*           := <mapconcat(template-line-to-cons-arg)> line'*;
-      let*           := <mapconcat(template-line-to-prettyprint)> line'*;
-      (input, let'*) := <template-common> (let*, <concat> line''*, attrs, arg*)
-    )
-
-  template-common:
-    (let*, elem*, attrs, arg*) -> (input, let'*)
-    where
-      part*  := <concatenate-consecutive-strings;
-                 map(try(?String(<templatelang-escape; double-quote>)));
-                 separate-by(|",")> elem*;
-      result := <concat-strings>["zz := <concat-strings> [", part*, "]"];
-      let'*  := <separate-by(|";\n")> [let*, result]
-    where
+      output         := <separate-by(|",\n")> line''*;
       if cons := <fetch-cons-name> attrs then
         input := $[[cons]([<separate-by(|",")> arg*])]
       else
@@ -218,45 +138,25 @@
         else
           input := $[([<separate-by(|",")> arg*])]
         end
-      end
-
-  // FIXME
-  // Production without cons but with bracket annotation
-  // (cons + bracket -> no need to parenthesize)
-  // template-to-prettyprint-strategy:
-  //   TemplateProduction(sort, Template(elem*), attrs) ->
-  //   ${parenthesize-{sort}(not-allowed) =
-  //       if not-allowed then
-  //         <concat-strings> ["{open}", <prettyprint-{sort}>, "{close}"]
-  //       else
-  //         prettyprint-{sort}
-  //       end}
-  //   where
-  //     not(<fetch-cons-name> attrs);
-  //     FIXME <getfirst(?bracket())> attr*
-  //   where
-  //     <length> <filter(?Placeholder(_, _, _))> elem* => 1
-  //     <+ debug(!"Bracket production must have exactly one placeholder: "); fail
-  //   with
-  //     (before, placeholder, after) := <split-fetch-keep(?Placeholder(_, _, _))> elem*
-  //   where
-  //     [String(open)]  := <map(template-element-to-stratego'); concatenate-consecutive-strings> before;
-  //     [String(close)] := <map(template-element-to-stratego'); concatenate-consecutive-strings> after
-  //     <+ debug(!"Bracket production must have text before and after the placeholder: "); fail
+      end,
+      !"Failed to pretty-print template" 
+    )
 
 rules
 
   rename-template-line:
     (Line(elem*), index) -> (Line(elem'*), index')
     where with-spxverify(
-      (elem'*, index') := <thread-map(try(rename-template-element))> (elem*, index)
+      (elem'*, index') := <thread-map(try(rename-template-element))> (elem*, index),
+      !"Failed to rename template elements"
     )
 
   rename-template-element:
     (Placeholder(a, b, c), index) -> (Placeholder(a, b, c){name'}, index')
     where with-spxverify(
       name'  := <implode-string> [<addi> ('a', index)];
-      index' := <inc> index
+      index' := <inc> index,
+      !"Failed to rename template element" 
     )
 
 rules
@@ -269,75 +169,117 @@
 
 rules
 
-  // template-line-to-stratego is to be used with thread map.
-  // The thread starts at 0 and is set to 1 once we passed the first line.
-  // It is used to determine whether we already generated the initial newline.
-
-  // Or: it is set to -1 and stays at -1, this means there are only
-  //     placeholders in the template, so none needs to add a newline.
-
-  template-line-to-stratego:
-    (Line([Layout(indent), Placeholder(_, _, _){name}]), -1) ->
-      ([$[<pp-ih-0(|"[indent]")> [name]']], -1)
-
   template-line-to-stratego:
-    (Line([Layout(indent), Placeholder(_, _, _){name}]), 0) ->
-      ([$[<pp-ih-1(|"[indent]")> [name]']], 0)
-
-  template-line-to-stratego:
-    (Line([Layout(indent) | elem*]), 0) -> (elem'*, 1)
+    Line([Layout(indent) | elem*]) ->
+      ${<pp-indent(|"{<string-length> indent}")> [{elem'*}]}
     where
-      not(!elem* => [Placeholder(_, _, _)]);
-      elem'* := <map(template-element-to-stratego(|indent))> elem*
+      not(!indent => "");
+      elem'* := <template-line-elements-to-stratego> elem*
 
   template-line-to-stratego:
-    (Line([Layout(indent), Placeholder(_, _, _){name}]), 1) ->
-      ([$[<pp-ih-2(|"[indent]")> [name]']], 1)
-
-  template-line-to-stratego:
-    (Line([Layout(indent) | elem*]), 1) -> ([String("\n") | elem'*], 1)
+    Line(elem*) -> ${H0([{elem'*}])}
     where
-      not(!elem* => [Placeholder(_, _, _)]);
-      elem'* := <map(template-element-to-stratego(|indent))> elem*
+      not(!elem* => [Layout(<not("")>) | _]);
+      elem'* := <template-line-elements-to-stratego> elem*
+
+  template-line-elements-to-stratego =
+    // 1. Map template elements to strings of Stratego code and String cons.
+  	map(template-element-to-stratego);
+  	// 2. Collapse consecutive String cons into one String cons.
+  	// (Optional, improves readability and performance of generated code.)
+  	concatenate-consecutive-strings;
+  	// 3. Convert String cons to Stratego code, while removing empty strings.
+  	// (The latter is necessary to prevent spurious blank lines:
+  	// BOX removes empty lists, but not empty string elements.)
+  	filter(
+  		\String(t) -> $[S([<templatelang-escape; double-quote> t])]\
+  		<+ not(?String(""))
+		);
+		// 4. Insert commas.
+  	separate-by(|",")
 
-  template-element-to-stratego(|indent):
+  template-element-to-stratego:
     String(t) -> <id>
 
-  template-element-to-stratego(|indent):
+  template-element-to-stratego:
     Layout(t) -> String(t)
 
-  template-element-to-stratego(|indent):
-    Placeholder(_, _, _){name} -> $[[s][name]']
-      where
-        if !indent => "" then
-          s := ""
-        else
-          s := $[<pp-ih-3(|"[indent]")> ]
-        end
-
-rules
+  template-element-to-stratego:
+    Placeholder(sort(x), None(), _){name}
+      -> $[<[s]> [name]]
+    where with-spxverify(
+      placeholder-to-pp-one => s,
+      !"Failed to determine placeholder type"
+    )
 
-  template-line-to-prettyprint:
-    Line(elem*) -> <filter(template-element-to-prettyprint)> elem*
+  template-element-to-stratego:
+    Placeholder(sort(x), Option(), _){name} ->
+      $[<pp-option([s])> [name]]
+    where with-spxverify(
+      placeholder-to-pp-one => s,
+      !"Failed to determine placeholder type (option)"
+    )
 
-  template-element-to-prettyprint:
-    Placeholder(sort(x), None(), _){name} -> $[[name]' := <prettyprint-[x]> [name]]
+  placeholder-to-pp-one:
+    Placeholder(sort(x), _, option*) ->
+      $[pp-one-[v-or-z](prettyprint-[x])]
+    where with-spxverify(
+      <getfirst(?Anchor()) < !"V" + !"Z"> option* => v-or-z,
+      !"Failed to determine placeholder box type (V or Z)"
+    )
 
-  template-element-to-prettyprint:
-    Placeholder(sort(x), <Star() + Plus()>, option*){name} -> t
+  template-element-to-stratego:
+    Placeholder(sort(x), <Star() + Plus()>, option*){name}
+      -> $[<[s]> [name]]
     where with-spxverify(
-      if sep := <getfirst(?Separator(<id>))> option* then
-        t := $[[name]' := <pp-list(prettyprint-[x]|"[<templatelang-escape> sep]")> [name]]
+      if <getfirst(?Separator(<id>))> option* => sep then
+        <explode-string; filter(?'\n'); length; dec> sep => vs;
+        if !vs => -1 then
+          // separator without line breaks => horizontal box
+          s := $[pp-h-list(prettyprint-[x]|"[<templatelang-escape> sep]")]
+        else
+          // TODO: Support separators with mixed line breaks and literals. 
+          if !vs => 0 then
+            // separator with one line break => vertical box
+            s := $[pp-v-list(prettyprint-[x])]
+          else
+            // separator with multiple line breaks => vertical box with vs option
+            s := $[pp-v-list(prettyprint-[x]|"[vs]")]
+          end
+        end
       else
-        t := $[[name]' := <pp-list(prettyprint-[x]|" ")> [name]]
-      end
-   )   
-
-  template-element-to-prettyprint:
-    Placeholder(sort(x), Option(), _){name} -> $[[name]' := <pp-option(prettyprint-[x])> [name]]
+        // no separator => horizontal box
+        s := $[pp-h-list(prettyprint-[x])]
+      end,
+      !"Failed to convert list placeholder"
+   )
 
 rules
 
+  // FIXME
+  // Production without cons but with bracket annotation
+  // (cons + bracket -> no need to parenthesize)
+  // template-to-prettyprint-strategy:
+  //   TemplateProduction(sort, Template(elem*), attrs) ->
+  //   ${parenthesize-{sort}(not-allowed) =
+  //       if not-allowed then
+  //         <concat-strings> ["{open}", <prettyprint-{sort}>, "{close}"]
+  //       else
+  //         prettyprint-{sort}
+  //       end}
+  //   where
+  //     not(<fetch-cons-name> attrs);
+  //     FIXME <getfirst(?bracket())> attr*
+  //   where
+  //     <length> <filter(?Placeholder(_, _, _))> elem* => 1
+  //     <+ debug(!"Bracket production must have exactly one placeholder: "); fail
+  //   with
+  //     (before, placeholder, after) := <split-fetch-keep(?Placeholder(_, _, _))> elem*
+  //   where
+  //     [String(open)]  := <map(template-element-to-stratego'); concatenate-consecutive-strings> before;
+  //     [String(close)] := <map(template-element-to-stratego'); concatenate-consecutive-strings> after
+  //     <+ debug(!"Bracket production must have text before and after the placeholder: "); fail
+
 //   template-element-to-parenthesize(|conflicts):
 //     (i0, Placeholder(sort(x), None(), _){name}) -> $[[name]' := <parenthesize-[x]([na])> [name]]
 //     where

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Mon Dec 19 19:22:52 2011	(r23805)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Mon Dec 19 19:50:55 2011	(r23806)
@@ -71,12 +71,34 @@
 
 strategies
 
-  //testing only
   main =
+  	// Builders
     editor-analyze;
+    editor-compile-spx-all-incrementally;
+    editor-clean-and-compile-spx-all ;
+    editor-build-all;
+    editor-build-all-after-cleanup;
+    editor-clean-spx;
+    show-configuration;
     generate-aterm;
+    normalize;
+    generate-name-analysis;
+    build-incrementally-service;
+    // Completions
+    editor-complete;
+    // References
+    editor-resolve;
+    editor-hover;
+    // meta tooling
+    build-spoofaxlang-jvm;
+    // testing
     test-templatelang-to-esv;
     test-templatelang-to-sdf;
     test-templatelang-to-str;
-    build-spoofaxlang-jvm;
-    editor-clean-and-compile-spx-all
+    build-templatelang-sdf;
+    build-templatelang-esv;
+    build-templatelang-str
+
+  build-templatelang-sdf = fail
+  build-templatelang-esv = fail
+  build-templatelang-str = fail

From tobivollebregt at gmail.com  Mon Dec 19 20:52:37 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 19 Dec 2011 19:52:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23807 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20111219195237.9CE3E2B8003@mx2.tudelft.nl>

Author: tvo
Date: Mon Dec 19 19:52:37 2011
New Revision: 23807
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23807&sc=1

Log:
Fix NPE when editing code for which no single line comment prefix is defined

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java	Mon Dec 19 19:50:55 2011	(r23806)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java	Mon Dec 19 19:52:37 2011	(r23807)
@@ -587,9 +587,12 @@
 	 * Dumb stripping of comments and layout, ignoring string literals and the like.
 	 */
 	private String stripCommentsAndLayout(String line) {
-		int lineCommentStart = line.indexOf(syntax.getSingleLineCommentPrefix());
-		if (lineCommentStart != -1)
-			line = line.substring(0, lineCommentStart);
+		final String singleLineCommentPrefix = syntax.getSingleLineCommentPrefix();
+		if (singleLineCommentPrefix != null) {
+			int lineCommentStart = line.indexOf(singleLineCommentPrefix);
+			if (lineCommentStart != -1)
+				line = line.substring(0, lineCommentStart);
+		}
 		// TODO: strip block comments
 		return line.trim();
 	}

From karltk at strategoxt.org  Mon Dec 19 20:53:19 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 19 Dec 2011 19:53:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23808 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.java: .
	META-INF
Message-ID: <20111219195319.6E3122B802A@mx2.tudelft.nl>

Author: karltk
Date: Mon Dec 19 19:53:19 2011
New Revision: 23808
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23808&sc=1

Log:
Converted to PDE project.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/META-INF/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/build.properties

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/META-INF/MANIFEST.MF	Mon Dec 19 19:53:19 2011	(r23808)
@@ -0,0 +1,8 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: Java Bindings for Stratego/J
+Bundle-SymbolicName: org.spoofax.interpreter.library.java
+Bundle-Version: 0.1.0.qualifier
+Export-Package: org.spoofax.interpreter.library.java
+Bundle-Vendor: Spoofax.org
+Require-Bundle: org.spoofax.interpreter.core;bundle-version="0.4.1"

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.java/build.properties	Mon Dec 19 19:53:19 2011	(r23808)
@@ -0,0 +1,3 @@
+source.. = src/main/java/
+bin.includes = META-INF/,\
+               .

From tobivollebregt at gmail.com  Mon Dec 19 20:55:03 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 19 Dec 2011 19:55:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23809 - in
	spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections:
	. src/org/strategoxt/imp/runtime/services
	src/org/strategoxt/imp/runtime/stratego
Message-ID: <20111219195503.CC92C7F8021@mx1.tudelft.nl>

Author: tvo
Date: Mon Dec 19 19:55:03 2011
New Revision: 23809
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23809&sc=1

Log:
merge

Modified:
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/   (props changed)
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/SetMarkersPrimitive.java

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java	Mon Dec 19 19:53:19 2011	(r23808)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/AutoEditStrategy.java	Mon Dec 19 19:55:03 2011	(r23809)
@@ -587,9 +587,12 @@
 	 * Dumb stripping of comments and layout, ignoring string literals and the like.
 	 */
 	private String stripCommentsAndLayout(String line) {
-		int lineCommentStart = line.indexOf(syntax.getSingleLineCommentPrefix());
-		if (lineCommentStart != -1)
-			line = line.substring(0, lineCommentStart);
+		final String singleLineCommentPrefix = syntax.getSingleLineCommentPrefix();
+		if (singleLineCommentPrefix != null) {
+			int lineCommentStart = line.indexOf(singleLineCommentPrefix);
+			if (lineCommentStart != -1)
+				line = line.substring(0, lineCommentStart);
+		}
 		// TODO: strip block comments
 		return line.trim();
 	}

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/SetMarkersPrimitive.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/SetMarkersPrimitive.java	Mon Dec 19 19:53:19 2011	(r23808)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/SetMarkersPrimitive.java	Mon Dec 19 19:55:03 2011	(r23809)
@@ -1,13 +1,18 @@
 package org.strategoxt.imp.runtime.stratego;
 
+import java.io.File;
+
 import org.eclipse.core.resources.IResource;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.services.StrategoAnalysisJob;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
 
@@ -20,14 +25,16 @@
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 			throws InterpreterException {
-
-		IResource resource = SourceAttachment.getResource(tvars[0]);
+		
+		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
+		if (!(agent instanceof EditorIOAgent)) 
+			return false;
+	
+		IResource resource = getResource(tvars);
 		if (resource == null)
 			return false;
-
-		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
-		if (!(agent instanceof EditorIOAgent)) return false;
-
+	
+		
 		StrategoAnalysisJob job = ((EditorIOAgent)agent).getJob();
 
 		StrategoObserver observer = job.getObserver();
@@ -41,4 +48,27 @@
 		return true;
 	}
 
+	/**
+	 * @param tvars
+	 * @param resource
+	 * @return
+	 */
+	private static IResource getResource(IStrategoTerm[] tvars) {
+		IResource resource = null;
+		if( tvars[0] instanceof IStrategoString){
+			// HACK : often Source Attachment is missing in the root node.
+			// Hence, providing the path to the resource instead of getting 
+			// it from the SourceAttachment 
+			try{
+				resource = EditorIOAgent.getResource(new File(Tools.asJavaString(tvars[0])));
+			}catch(Exception e){
+				Environment.logException("Invalid resource path is provided : "+ tvars[0] , e);
+			}
+		}
+		else{
+			resource = SourceAttachment.getResource(tvars[0]);
+		}
+		return resource;
+	}
+
 }

From tobivollebregt at gmail.com  Mon Dec 19 21:23:50 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 19 Dec 2011 20:23:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23810 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template
Message-ID: <20111219202350.69874108C029@mx3.tudelft.nl>

Author: tvo
Date: Mon Dec 19 20:23:50 2011
New Revision: 23810
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23810&sc=1

Log:
TemplateLang: temporarily generate BOX "monkey patches" as part of pretty printer

+ convert some tabs to spaces

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Mon Dec 19 19:55:03 2011	(r23809)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Mon Dec 19 20:23:50 2011	(r23810)
@@ -34,10 +34,10 @@
   build-templatelang-str:
     (selected, position, ast, path, project-path) -> (filename, result)
     where with-spxverify(
-    	filename := <guarantee-extension(|"generated.str")> path;
-    	result := <collect-all(?TemplateProduction(_, _, _) + ?TemplateProductionWithCons(_, _, _));
-    	           ![TemplateSection(<id>)];
-    	           template-sections-to-stratego-string> selected
+      filename := <guarantee-extension(|"generated.str")> path;
+      result := <collect-all(?TemplateProduction(_, _, _) + ?TemplateProductionWithCons(_, _, _));
+                 ![TemplateSection(<id>)];
+                 template-sections-to-stratego-string> selected
      )
 
   template-sections-to-stratego-string:
@@ -51,6 +51,62 @@
         Z : S-OPTIONS * BOX-LIST -> BOX
         I : S-OPTIONS * BOX -> BOX
 
+      strategies
+
+        box2text-string'(|width) =
+          abox2text'(|width)
+          ; (is-string <+ flatten-list; concat-strings)
+
+        abox2text'(|width) =
+            rules( GppIndent := 0 )
+          ; let local-abox2text(|pos) =
+                  abox2text'(local-abox2text | pos, width)
+
+             in local-abox2text(|0)
+            end
+          ; Fst
+
+        abox2text'(rec : t * t -> t | xpos, width) =
+          abox2text-HV(rec | xpos, width)
+          + abox2text-H(rec | xpos, width)
+          + abox2text-V(rec | xpos, width)
+          + abox2text-I(rec | xpos, width)
+          + abox2text-Z(rec | xpos, width)
+          + abox2text-A(rec | xpos, width)
+          + abox2text-R(rec | xpos, width)
+          + abox2text-S(rec | xpos, width)
+          + abox2text-C(rec | xpos, width)
+          + abox2text-FBOX(rec | xpos, width)
+          + abox2text-R(rec | xpos, width)
+          + abox2text-ALT(rec | xpos, width)
+          + abox2text-list(rec | xpos, width)
+
+        // `I is=N b' is equivalent to `H hs=N [S(""), b]'
+        // NOTE: this I box is not context sensitive!
+        // NOTE: this I box takes a single box as argument, not a list of boxes!
+        abox2text-I(rec : t * t -> t | xpos, width) =
+          ?I(sopt, bs)
+
+          ; {"{|"}GppIndent:
+                <add> (xpos, <gpp-is-length> sopt) => left-xpos
+              ; rules( GppIndent := left-xpos )
+              ; <fetch-elem(?SOpt(IS(), <id>)) <+ !"0"> sopt => value
+              ; <rec(|xpos)> H([SOpt(HS(), value)], [S(""), bs])
+            {"|}"}
+
+        abox2text-Z(rec : t * t -> t | xpos, width) =
+          ?Z(sopt, bs)
+
+          ; GppIndent => indent
+          ; <add> (indent, <gpp-is-length> sopt) => left-xpos
+          ; <filter(gpp-is-real-vbox)> bs
+          ; if ?[] then
+              !([], xpos)
+            else
+              gpp-do-vbox-children(rec | xpos, left-xpos)
+              ; gpp-format-vbox(|sopt, indent)
+            end
+
       overlays
         H0(xs) = H([SOpt(HS(), "0")], xs)
 
@@ -139,7 +195,7 @@
           input := $[([<separate-by(|",")> arg*])]
         end
       end,
-      !"Failed to pretty-print template" 
+      !"Failed to pretty-print template"
     )
 
 rules
@@ -156,7 +212,7 @@
     where with-spxverify(
       name'  := <implode-string> [<addi> ('a', index)];
       index' := <inc> index,
-      !"Failed to rename template element" 
+      !"Failed to rename template element"
     )
 
 rules
@@ -184,19 +240,19 @@
 
   template-line-elements-to-stratego =
     // 1. Map template elements to strings of Stratego code and String cons.
-  	map(template-element-to-stratego);
-  	// 2. Collapse consecutive String cons into one String cons.
-  	// (Optional, improves readability and performance of generated code.)
-  	concatenate-consecutive-strings;
-  	// 3. Convert String cons to Stratego code, while removing empty strings.
-  	// (The latter is necessary to prevent spurious blank lines:
-  	// BOX removes empty lists, but not empty string elements.)
-  	filter(
-  		\String(t) -> $[S([<templatelang-escape; double-quote> t])]\
-  		<+ not(?String(""))
-		);
-		// 4. Insert commas.
-  	separate-by(|",")
+    map(template-element-to-stratego);
+    // 2. Collapse consecutive String cons into one String cons.
+    // (Optional, improves readability and performance of generated code.)
+    concatenate-consecutive-strings;
+    // 3. Convert String cons to Stratego code, while removing empty strings.
+    // (The latter is necessary to prevent spurious blank lines:
+    // BOX removes empty lists, but not empty string elements.)
+    filter(
+      \String(t) -> $[S([<templatelang-escape; double-quote> t])]\
+      <+ not(?String(""))
+    );
+    // 4. Insert commas.
+    separate-by(|",")
 
   template-element-to-stratego:
     String(t) -> <id>
@@ -238,7 +294,7 @@
           // separator without line breaks => horizontal box
           s := $[pp-h-list(prettyprint-[x]|"[<templatelang-escape> sep]")]
         else
-          // TODO: Support separators with mixed line breaks and literals. 
+          // TODO: Support separators with mixed line breaks and literals.
           if !vs => 0 then
             // separator with one line break => vertical box
             s := $[pp-v-list(prettyprint-[x])]

From tobivollebregt at gmail.com  Mon Dec 19 21:38:18 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 19 Dec 2011 20:38:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23811 -
	strategoxt/trunk/stratego-libraries/gpp/lib/stratego/gpp
Message-ID: <20111219203818.50E83CC08C@mx4.tudelft.nl>

Author: tvo
Date: Mon Dec 19 20:38:18 2011
New Revision: 23811
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23811&sc=1

Log:
BOX: try HV boxes only once

Modified:
   strategoxt/trunk/stratego-libraries/gpp/lib/stratego/gpp/BoxToText.str

Modified: strategoxt/trunk/stratego-libraries/gpp/lib/stratego/gpp/BoxToText.str
==============================================================================
--- strategoxt/trunk/stratego-libraries/gpp/lib/stratego/gpp/BoxToText.str	Mon Dec 19 20:23:50 2011	(r23810)
+++ strategoxt/trunk/stratego-libraries/gpp/lib/stratego/gpp/BoxToText.str	Mon Dec 19 20:38:18 2011	(r23811)
@@ -52,7 +52,6 @@
    */
   abox2text(rec : t * t -> t | xpos, width) =
       abox2text-HV(rec | xpos, width)
-    + abox2text-HV(rec | xpos, width)
     + abox2text-H(rec | xpos, width)
     + abox2text-V(rec | xpos, width)
     + abox2text-A(rec | xpos, width)

From srabbelier at gmail.com  Tue Dec 20 05:13:24 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Tue, 20 Dec 2011 04:13:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23812 -
	strategoxt-javascript-backend/trunk/scripts
Message-ID: <20111220041324.9E26E2B8030@mx2.tudelft.nl>

Author: SverreRabbelier
Date: Tue Dec 20 04:13:22 2011
New Revision: 23812
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23812&sc=1

Log:
Add scripts

Added:
   strategoxt-javascript-backend/trunk/scripts/modulate-verbosity.sh   (contents, props changed)
   strategoxt-javascript-backend/trunk/scripts/wrap-libraries.sh   (contents, props changed)

Added: strategoxt-javascript-backend/trunk/scripts/modulate-verbosity.sh
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/scripts/modulate-verbosity.sh	Tue Dec 20 04:13:22 2011	(r23812)
@@ -0,0 +1,27 @@
+#! /bin/bash
+
+VERBOSE=${VERBOSE:-0}
+QUIET=${QUIET:-0}
+
+f="/tmp/strjs.exec.trace"
+
+# echo "V=$VERBOSE, Q=$QUIET"
+
+if test "$VERBOSE" -gt 2
+then
+	tee # passthrough
+elif test "$VERBOSE" -gt 1
+then
+	egrep "^(ERROR|INFO|TRACE)[:+] "
+elif test "$VERBOSE" -eq 1
+then
+	egrep "^(ERROR|INFO)[:+] "
+elif test "$QUIET" -eq 1
+then
+	true
+else
+	egrep "^ERROR[:+] "
+fi
+
+x=$(tail -n 29 $f | egrep "rewriting failed|uncaught")
+[ "$x" == "" ]

Added: strategoxt-javascript-backend/trunk/scripts/wrap-libraries.sh
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/scripts/wrap-libraries.sh	Tue Dec 20 04:13:22 2011	(r23812)
@@ -0,0 +1,9 @@
+#! /bin/bash
+
+bp=$(dirname $0)
+cat \
+	${bp}/../src/javascript/strategojs.js \
+	${bp}/../src/javascript/terms.js \
+	${bp}/../src/javascript/srts.js \
+	${bp}/../src/javascript/ssl.js \
+	-

From karltk at strategoxt.org  Tue Dec 20 12:52:52 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 20 Dec 2011 11:52:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23813 -
	spoofax-contrib/separate-compilation-examples
Message-ID: <20111220115252.4DE7F108C00D@mx3.tudelft.nl>

Author: karltk
Date: Tue Dec 20 11:52:51 2011
New Revision: 23813
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23813&sc=1

Log:
Separate compilation examples.

Added:
   spoofax-contrib/separate-compilation-examples/

From L.C.L.Kats at tudelft.nl  Tue Dec 20 13:07:21 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 20 Dec 2011 12:07:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23814 - in
	spoofax-imp/branches/spoofax-imp-release:
	org.strategoxt.imp.feature org.strategoxt.imp.updatesite
Message-ID: <20111220120722.02547CC0BE@mx4.tudelft.nl>

Author: LennartKats
Date: Tue Dec 20 12:07:21 2011
New Revision: 23814
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23814&sc=1

Log:
set version to 0.7.0.0

Modified:
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml	Tue Dec 20 11:52:51 2011	(r23813)
+++ spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml	Tue Dec 20 12:07:21 2011	(r23814)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.7"
+      version="0.7.0.0"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml	Tue Dec 20 11:52:51 2011	(r23813)
+++ spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml	Tue Dec 20 12:07:21 2011	(r23814)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.7.jar" id="org.strategoxt.imp" version="0.7">
+   <feature url="features/org.strategoxt.imp_0.7.0.0.jar" id="org.strategoxt.imp" version="0.7.0.0">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From karltk at strategoxt.org  Tue Dec 20 13:40:11 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 20 Dec 2011 12:40:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23815 - in
	spoofax-contrib/separate-compilation-examples/entity-with-aspects:
	. .externalToolBuilders .settings META-INF editor editor/java
	editor/java/NamingExperiment ed...
Message-ID: <20111220124011.C376A7F8033@mx1.tudelft.nl>

Author: karltk
Date: Tue Dec 20 12:40:10 2011
New Revision: 23815
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23815&sc=1

Log:
Initial import of entity language with aspects.

Added:
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/.classpath
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/.externalToolBuilders/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/.externalToolBuilders/NamingExperiment build.main.xml.launch
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/.project
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/.settings/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/.settings/org.eclipse.jdt.core.prefs
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/META-INF/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/META-INF/MANIFEST.MF
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.generated.xml
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.main.xml
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.properties
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Builders.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Builders.generated.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Colorer.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Colorer.generated.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Completions.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Completions.generated.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Folding.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Folding.generated.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Outliner.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Outliner.generated.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-References.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-References.generated.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Syntax.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Syntax.generated.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment.main.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/Activator.java
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/NamingExperimentParseController.java
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/NamingExperimentParseControllerGenerated.java
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/NamingExperimentValidator.java
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/strategies/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/strategies/InteropRegisterer.java
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/strategies/Main.java
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/strategies/java_strategy_0_0.java
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/plugin.xml
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/Common.sdf
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/NamingExperiment.generated.pp
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/NamingExperiment.pp
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/NamingExperiment.sdf
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/SPX.spx
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/.gitignore
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/CRM/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/CRM/Location.java
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/CRM/Person.java
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/example.nam
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/printer.nam
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/simple.aterm
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/simple.nam
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/analysis-generated.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/analysis-imports.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/analysis-library.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/analysis-manual.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/aspects.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/check.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/checksum.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-incremental.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-simple.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/namingexperiment.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/prettyprint.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/refactorings.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/types.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/util.str

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/.classpath	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry excluding="trans/**" kind="src" path="editor/java"/>
+	<classpathentry kind="src" path=".shadowdir/SPX"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/.externalToolBuilders/NamingExperiment build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/.externalToolBuilders/NamingExperiment build.main.xml.launch	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,27 @@
+?<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/NamingExperiment/build.main.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/NamingExperiment/build.main.xml}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS" value="-verbose"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/NamingExperiment}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/.project	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>entity-with-aspects</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/NamingExperiment build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/.settings/org.eclipse.jdt.core.prefs	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/META-INF/MANIFEST.MF	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,21 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: NamingExperiment Plug-in
+Bundle-SymbolicName: NamingExperiment; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: NamingExperiment.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: NamingExperiment

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.generated.xml	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,637 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${src-gen}/NamingExperiment/strategies/Main.java" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la NamingExperiment.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport1" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="externaljarimport2" value=":${externaljarx}" else="">
+            <isset property="externaljarx"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-parenthesize.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper"/>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper.fallback"/>
+        </target>
+
+        <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-parenthesize.str"/>
+                <arg value="--omod"/>
+                <arg value="include/${sdfmodule}-parenthesize"/>
+                <arg value="--main-strategy"/>
+                <arg value="io-${sdfmodule}-parenthesize"/>
+                <arg value="--lang"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--rule-prefix"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--sig-module"/>
+                <arg value="include/${sdfmodule}"/>
+            </java>
+        </target>
+
+    	<target name="sdf2parenthesize.helper.fallback" unless="sdf2parenthesize.available">
+        	<echo file="${include}/${sdfmodule}-parenthesize.str" message="module include/${sdfmodule}-parenthesize rules parenthesize-${sdfmodule} = id"/>
+    	</target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg line="${aster-input}"/>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+        <!-- 
+            if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+            Only used by stratego.jvm.helper.debug 
+        -->
+        <condition property="transformer-output" value="" else="--output-rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- 
+            if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+            if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+            Only used by stratego.jvm.helper.debug
+        -->
+        <condition property="strj.input.file.type" value="str" else="rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- value determines which target will be executed.
+            If the file ".debugmode" can be found in the project root call stratego.jar.debug
+            else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+        
+        <!-- will save the stratego files with debug info in this folder -->
+        <property name="trans-debug" location="trans-debug"/>
+        
+        <!-- this helper target determines what target to call, based on debug.build.enabled -->
+        <target name="stratego.jar.helper">
+            <antcall target="${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar unless debug.build.enabled property is set --> 
+        <target name="call.stratego.jar" depends="stratego.jar">
+            <echo message="call.stratego.jar - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar.debug when debug.build.enabled property is set -->
+        <target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+            <echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- copy stratego runtime jars to utils folder -->
+        <target name="utils-files-debug" depends="utils-files">
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+        </target>
+        
+        <!-- Stratego to Java compiler with debugging capabilities -->
+        <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <!-- compile stratego to java -->
+            <antcall target="stratego.jvm.helper.debug">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <!-- compile java to class -->
+            <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+                <!-- attribute in javac: srcdir="${src-gen}" -->
+                <src path="${src-gen}"/>
+                <!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
+                <classpath>
+                    <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+                    <pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+                    <pathelement location="utils/stratego-debug-runtime-java.jar"/>
+                </classpath>
+                <!-- attribute in javac: includes="trans/**"  -->
+                <include name="trans/**"/>
+            </javac>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <!-- create a jar from the class files -->
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <!-- instrument the stratego program and compile it to java -->
+        <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+            <echo message="generate stratego with debug information"/>
+            <echo message="${basedir}"/>
+            <available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+            <!-- add debug information -->
+              <java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+                   <classpath>
+                    <pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.strategojar}"/>
+                   </classpath>
+                  <arg value="-i"/>
+                  <arg value="${trans}/${strmodule}.str"/>
+                  <arg value="--gen-dir"/>
+                  <arg value="${trans-debug}"/>
+                  <arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+                  <arg value="${basedir}"/>
+                  <!-- "arg line='val'" val should contain space-separated arguments --> 
+                  <arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+                  
+                  <!-- arguments should start with two '-'-characters -->
+                  <!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+                  <!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+                  <!-- <arg value="-output-rtree"/> --> 
+            </java>
+            <!-- now compile instrumented stratego to java -->
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <!-- put strategodebuglib.rtree on the include path -->
+                <arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+                <arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete dir="${src-gen}/trans"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.main.xml	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="NamingExperiment" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="NamingExperiment"/>
+        <property name="metasdfmodule" value="Stratego-NamingExperiment"/>
+        <property name="esvmodule" value="NamingExperiment"/>
+        <property name="strmodule" value="namingexperiment"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.properties	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Builders.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,31 @@
+
+module NamingExperiment-Builders
+
+imports NamingExperiment-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                              
+  provider : include/namingexperiment.ctree                                                                   
+  provider : include/namingexperiment-java.jar                                                                
+                                                                                                              
+  observer : editor-analyze                                                                                   
+                                                                                                              
+  builder  : "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder  : "Show analyzed syntax" = generate-analyzed (openeditor) (realtime) (source)
+  builder  : "Show weaved analyzed syntax" = generate-analyzed-weaved (openeditor) (realtime) (source)                      
+  builder  : "Generate java code (simple)" = generate-java-simple (openeditor) (realtime) (source)
+  builder  : "Generate java files (incremental)" = generate-java-files-incremental (openeditor) (realtime) (source)       
+  builder  : "Generate java files (full)" = generate-java-files-full (openeditor) (realtime) (source)                                                                                                     
+
+refactorings
+                                                                                                                        
+  pretty-print              : prettyprint                                         
+                                                                                  
+  refactoring ID            : "Rename Entity"  = rename-entity (source) (cursor)
+  refactoring Property *    : "Extract Entity" = extract-entity (source)
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Builders.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Builders.generated.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,67 @@
+
+module NamingExperiment-Builders.generated
+
+builders
+                                                                                                                    
+  // Building and analysis is defined in Stratego program or programs:                                              
+  //                                                                                                                
+  //   provider : stratego-program.ctree                                                                            
+  //   provider : stratego-library.jar                                                                              
+  //                                                                                                                
+  // Analysis is carried out by a Stratego rule that can be selected as follows:                                    
+  //                                                                                                                
+  //   observer : analysis-rule                                                                                     
+  //                                                                                                                
+  // Any dynamic rules set in the analysis may be used by other semantic services,                                  
+  // such as reference resolving or the builders.                                                                   
+  //                                                                                                                
+  // Builders may carry out custom transformations on a file or selection.                                          
+  // (At run-time, they can be accessed using the toolbar button with the star icon.)                               
+  // Builders can be specified as follows:                                                                          
+  //                                                                                                                
+  //   builder : "Generate Java code" = generate-java (openeditor) (persistent) (realtime)                          
+  //                                                                                                                
+  // In this example, the caption "Generate Java code" is used in the build button dropdown menu,                   
+  // and the generate-java rule is used to carry out the tranformation.                                             
+  // Builder definitions can also specify any combination of the following annotations:                             
+  //                                                                                                                
+  //   (cursor)      The builder should always transform the tree node at the cursor.                               
+  //   (meta)        Indicates the builder should only be available to meta-programmers                             
+  //                 (i.e., not when the plugin is deployed to end-users).                                          
+  //   (openeditor)  Indicates an editor should be opened with the result.                                          
+  //   (persistent)  Indicates that the resulting file should be saved to disk.                                     
+  //   (realtime)    Indicates that the resulting editor should be updated in real-time                             
+  //                 as the source file is edited.                                                                  
+  //   (source)      Always apply this builder to the source AST, not to the AST                                    
+  //                 after it has been analyzed/desugared by the observer.                                          
+  //                                                                                                                
+  // Refactorings are used for transformations that modify the original source code,                                
+  // while preserving the layout and syntactic sugar.                                                               
+  // A custom pretty-print strategy (T -> String) is used to format newly inserted nodes,                           
+  // a parenthesize strategy (T -> T) surrounds subterms with "Parenthetical(T)" when brackets are required,        
+  // resugar rules are required for desugarings that are not local-to-local or desugarings that duplicate terms     
+  // as the 'l' in \l -> []\ => {l: ( l -> [] )}.                                                                   
+  // Finally, text-reconstruction can be overruled with a strategy (T-old, T-new) -> <try(custom-pp)> T-new,        
+  // the resulting text will be indented according to its location.                                                 
+  // This is sometimes needed in case the node text can not be reconstructed by replacing child texts               
+  // in the original formatting.                                                                                    
+  //                                                                                                                
+  // Refactorings can be specified as shown below, whereby Property* indicates on which constructs the              
+  // refactoring is specified (<sort>.<constructor>).                                                               
+  //                                                                                                                
+  // refactorings                                                                                                   
+  //                                                                                                                
+  //   pretty-print: prettyprint                                                                                    
+  //   parenthesize: parenthesize                                                                                   
+  //   resugar: resugar-node                                                                                        
+  //   override reconstruction: disallow-reconstruction                                                             
+  //                                                                                                                
+  //   refactoring Property*: "Extract Entity" =  extract-entity (source)                                           
+  //     shortcut: Shift+Alt+M                                                                                      
+  //     input                                                                                                      
+  //       identifier: "entity name" = ""                                                                           
+  //       identifier: "property name" = ""                                                                         
+  //                                                                                                                
+  // The 'on save' handler can be used  to generate code as files are saved:                                        
+  //                                                                                                                
+  //   on save : generate-java                                                                                      
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Colorer.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,9 @@
+module NamingExperiment-Colorer
+
+imports NamingExperiment-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Colorer.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Colorer.generated.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,46 @@
+module NamingExperiment-Colorer.generated
+
+colorer
+                                                                                             
+  // Sort-based highlighting with background color                                           
+  //   Id: yellow green                                                                      
+  //                                                                                         
+  // Sort- and constructor-based highlighting                                                
+  //   ClassBodyDec.MethodDec: yellow                                                        
+  //                                                                                         
+  // Constructor-based highlighting                                                          
+  //   _.MethodDec: 255 0 0                                                                  
+  //                                                                                         
+  // Example: background colors for ToMetaExpr/FromMetaExpr, if supported by the grammar     
+  //   environment _.ToMetaExpr:   _ 220 230 200                                             
+  //   environment _.FromMetaExpr: _ white                                                   
+
+colorer Default, token-based highlighting
+                                  
+  keyword    : 127 0 85 bold      
+  identifier : default            
+  string     : blue               
+  number     : darkgreen          
+  var        : 255 0 100 italic   
+  operator   : 0 0 128            
+  layout     : 63 127 95 italic   
+
+colorer System colors
+                            
+  darkred   = 128 0 0       
+  red       = 255 0 0       
+  darkgreen = 0 128 0       
+  green     = 0 255 0       
+  darkblue  = 0 0 128       
+  blue      = 0 0 255       
+  cyan      = 0 255 255     
+  magenta   = 255 0 255     
+  yellow    = 255 255 0     
+  white     = 255 255 255   
+  black     = 0 0 0         
+  gray      = 128 128 128   
+  grey      = gray          
+  orange    = 255 165 0     
+  pink      = 255 105 180   
+  brown     = 139 69 19     
+  default   = _             
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Completions.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,28 @@
+module NamingExperiment-Completions
+
+imports NamingExperiment-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                                                 
+  // Syntax completion:                                          
+                                                                 
+  completion template : Start =      "module " <m> (blank)       
+                                                                 
+  completion template : Definition = "entity " <e> " {}" (blank) 
+                                                                 
+  completion template : Property =   <x> " : " <T> (blank)       
+                                                                 
+
+completions
+  // Semantic (identifier) completion:   
+                                         
+  completion proposer                  : editor-complete
+                                         
+  completion trigger                   : ":"
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Completions.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Completions.generated.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,51 @@
+module NamingExperiment-Completions.generated
+
+completions
+                                                                                          
+  // Syntactic content completion can be defined as follows:                              
+  //                                                                                      
+  //   completion keyword  : "keyword"                                                    
+  //   completion template : "if " <e> " then\n\t" <s> "\nend"                            
+  //                                                                                      
+  // This defines keyword completion for "keyword" and                                    
+  // a template completion for the "if" keyword (note the use of \n, \t, and spaces).     
+  // In this template, the text selection expands to the "e" placeholder identifier       
+  // enclosed in <> brackets.                                                             
+  //                                                                                      
+  // Use the (blank) annotation if you want a template completion only to                 
+  // appear on blank lines:                                                               
+  //                                                                                      
+  //   completion template: "section " <title> "\n\t" (blank)                             
+  //                                                                                      
+  // You can specify a specific SDF sort for which a completion                           
+  // rule should trigger as follows:                                                      
+  //                                                                                      
+  //   completion template Section :                                                      
+  //     "section " <title> "\n\t" (blank)                                                
+  //                                                                                      
+  // Finally, you can override the prefix of the completion:                              
+  //                                                                                      
+  //   completion template Statement : "assignment" =                                     
+  //     <x> " = " <y> (blank)                                                            
+  //                                                                                      
+  // Semantic content completion can be defined as follows:                               
+  //                                                                                      
+  //   completion proposer : completion-function-call                                     
+  //   completion trigger  : "\."                                                         
+  //                                                                                      
+  // This sets completion-function-call as the completion strategy,                       
+  // and declares that [A-Za-z0-9_]+ may be used as a lexical pattern                     
+  // to parse identifiers (used to set the text selection with suggestions).              
+  // The completion trigger uses a regular expression to specify that                     
+  // completions should be proposed as the user types ".".                                
+  //                                                                                      
+  // Completions make use of the identifier lexical defined in YourLanguage-Syntax.esv    
+  // to select identifiers in completion suggestions.                                     
+  //                                                                                      
+  // Semantic completion uses the semantic provider defined in YourLanguage-Builders.esv  
+  // All semantic services may make use of the dynamic rules created by the observer.     
+
+completions
+                                     
+  // Derived completions may follow  
+                                     
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Folding.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,9 @@
+module NamingExperiment-Folding
+
+imports NamingExperiment-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Folding.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Folding.generated.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,28 @@
+module NamingExperiment-Folding.generated
+
+folding Default folding definitions
+  
+  // Folding rules indicate which syntactic constructs can be folded,
+  // and take one of the following forms:
+  //
+  //   <sort>.<constructor>
+  //
+  //   <sort>._
+  //
+  //   _.<constructor>
+  //
+  // To indicate that an element should always be folded, add
+  // a (folded) annotation:
+  //
+  //   _.Imports (folded)
+  //
+  // To disable a folding rule defined elsewhere, add a (disabled) annotation:
+  //
+  //   Definition._ (disabled)
+  
+  Start.Module
+  Definition.Entity
+  Member.Function
+  Definition.Aspect
+  AspectMember.Pointcut
+  AspectMember.Advice
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Outliner.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,9 @@
+module NamingExperiment-Outliner
+
+imports NamingExperiment-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Outliner.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Outliner.generated.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,21 @@
+module NamingExperiment-Outliner.generated
+
+outliner Default outliner        
+  
+  
+  // Outliner rules indicate which syntactic constructs should be shown in the outline
+  // and quick outline views, and take one of the following forms:
+  //
+  //   <sort>.<constructor>
+  //
+  //   <sort>._
+  //
+  //   _.<constructor>
+  
+  Start.Module
+  Definition.Entity
+  Member.Function
+  Exp.Call
+  Definition.Aspect
+  AspectMember.Pointcut
+  AspectMember.Advice
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-References.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,15 @@
+module NamingExperiment-References
+
+imports NamingExperiment-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  hover _     : editor-hover
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-References.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-References.generated.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,19 @@
+
+module NamingExperiment-References.generated
+
+references
+                                                                                          
+  // Reference resolving rules can specify the syntax constructors for which              
+  // a reference resolving function is available:                                         
+  //                                                                                      
+  //   reference FunctionCall : resolve-function-call                                     
+  //                                                                                      
+  // This defines that for each FunctionCall, resolve-function-call                       
+  // will retrieve the AST node that declares it.                                         
+  //                                                                                      
+  // Likewise, hover help can be specified as follows:                                    
+  //                                                                                      
+  //   hover FunctionCall : hover-help-function-call                                      
+  //                                                                                      
+  // Reference resolving uses the semantic provider defined in YourLanguage-Builders.esv  
+  // All semantic services may make use of the dynamic rules created by the observer.     
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Syntax.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,9 @@
+module NamingExperiment-Syntax
+
+imports NamingExperiment-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Syntax.generated.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment-Syntax.generated.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,21 @@
+module NamingExperiment-Syntax.generated
+
+language Syntax properties (static defaults)
+                                           
+  // Comment constructs:                   
+  line comment                           : "//"
+  block comment                          : "/*" * "*/"
+                                           
+  // Fences (used for matching,            
+  // inserting, indenting brackets):       
+  fences                                 : [ ]
+                                           ( )
+                                           { }
+                                           
+  // Automatic indent hints                
+  // (indent after these tokens):          
+  indent after                           : "="
+                                           ":"
+                                           
+  // Regular expression for identifiers:   
+  identifier lexical                     : "[A-Za-z0-9_]+"
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/NamingExperiment.main.esv	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,17 @@
+
+module NamingExperiment.main
+
+imports NamingExperiment-Builders NamingExperiment-Colorer NamingExperiment-Completions NamingExperiment-Folding NamingExperiment-Outliner NamingExperiment-References NamingExperiment-Syntax
+
+language General properties
+                  
+  name          : NamingExperiment
+  id            : NamingExperiment
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the NamingExperiment language"
+  url           : http://strategoxt.org
+                  
+  extensions    : nam
+  table         : include/NamingExperiment.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/Activator.java	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,44 @@
+package NamingExperiment;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "NamingExperiment";
+
+  public static final String kLanguageName = "NamingExperiment";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/NamingExperimentParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/NamingExperimentParseController.java	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,4 @@
+package NamingExperiment;
+
+public class NamingExperimentParseController extends NamingExperimentParseControllerGenerated 
+{ }
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/NamingExperimentParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/NamingExperimentParseControllerGenerated.java	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,108 @@
+package NamingExperiment;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileInputStream;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class NamingExperimentParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("NamingExperiment");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    NamingExperimentParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = NamingExperimentParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = NamingExperimentParseControllerGenerated.class.getResourceAsStream(TABLE);
+      boolean filesystem = false;
+      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
+      { 
+        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
+        filesystem = true;
+      }
+      if(table == null && new File("./" + TABLE).exists())
+      { 
+        table = new FileInputStream("./" + TABLE);
+        filesystem = true;
+      }
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
+      descriptor.setAttachmentProvider(NamingExperimentParseControllerGenerated.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return NamingExperimentParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/NamingExperimentValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/NamingExperimentValidator.java	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,12 @@
+package NamingExperiment;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class NamingExperimentValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return NamingExperimentParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/strategies/InteropRegisterer.java	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,14 @@
+package NamingExperiment.strategies;
+
+       import org.strategoxt.lang.JavaInteropRegisterer;
+       import org.strategoxt.lang.Strategy;
+
+       /**
+        * Helper class for {@link java_strategy_0_0}.
+        */
+       public class InteropRegisterer extends JavaInteropRegisterer {
+
+         public InteropRegisterer() {
+           super(new Strategy[] { java_strategy_0_0.instance });
+         }
+       }

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/strategies/Main.java	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,11 @@
+package NamingExperiment.strategies;
+
+       import org.strategoxt.lang.Context;
+       
+       public class Main {
+         
+         public static void init(Context context) {
+           // Called when the editor is being initialized
+         }
+       
+       }

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/NamingExperiment/strategies/java_strategy_0_0.java	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,32 @@
+package NamingExperiment.strategies;
+
+       import org.spoofax.interpreter.terms.IStrategoTerm;
+       import org.spoofax.interpreter.terms.ITermFactory;
+       import org.strategoxt.lang.Context;
+       import org.strategoxt.lang.Strategy;
+       
+       /**
+        * Example Java strategy implementation.
+        *
+        * This strategy can be used by editor services and can be called
+        * in Stratego modules by declaring it as an external strategy
+        * as follows:
+        *
+        * <code>
+        *  external java-strategy(|)
+        * </code>
+        *
+        * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+        */
+       public class java_strategy_0_0 extends Strategy {
+         
+         public static java_strategy_0_0 instance = new java_strategy_0_0();
+       
+         @Override
+         public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+           context.getIOAgent().printError("Input for java-strategy: " + current);
+           ITermFactory factory = context.getFactory();
+           return factory.makeString("Regards from java-strategy");
+         }
+       
+       }

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/plugin.xml	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="nam" description="NamingExperiment" language="NamingExperiment" derivedFrom="DynamicRoot" validator="NamingExperiment.NamingExperimentValidator" validatorClass="NamingExperiment.NamingExperimentValidator"></language>
+       </extension>
+       <extension id="NamingExperiment.parser" name="NamingExperiment Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="NamingExperiment.NamingExperimentParseController" language="NamingExperiment">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/Common.sdf	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,47 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9]* -> ID
+    "-"? [0-9]+          -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]
+    
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/NamingExperiment.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/NamingExperiment.generated.pp	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,34 @@
+[
+   Module                   -- KW["module"] _1 _2,
+   Module.2:iter-star       -- _1,
+   Entity                   -- KW["entity"] _1 KW["{"] _2 KW["}"],
+   Entity.2:iter-star       -- _1,
+   Import                   -- KW["import"] _1,
+   Aspect                   -- KW["aspect"] _1 KW["{"] _2 KW["}"],
+   Aspect.2:iter-star       -- _1,
+   Pointcut                 -- KW["pointcut"] _1 KW["("] _2 KW[")"] KW[":"] _3,
+   Pointcut.2:iter-star-sep -- _1 KW[","],
+   Advice                   -- KW["advice"] _1 KW["("] _2 KW[")"] KW[":"] _3 KW["("] _4 KW[")"] _5,
+   Advice.2:iter-star-sep   -- _1 KW[","],
+   Advice.4:iter-star-sep   -- _1 KW[","],
+   Before                   -- KW["before"],
+   After                    -- KW["after"],
+   Assigned                 -- KW["assigned"] KW["("] _1 KW[")"],
+   Property                 -- _1 KW[":"] _2,
+   Function                 -- _1 KW["("] _2 KW[")"] _3,
+   Function.2:iter-star-sep -- _1 KW[","],
+   Param                    -- _1 KW[":"] _2,
+   VarDecl                  -- KW["var"] _1 KW[":"] _2,
+   VarDeclInit              -- KW["var"] _1 KW[":"] _2 KW["="] _3,
+   Assign                   -- _1 KW["="] _2,
+   Block                    -- V  [V vs=2 [KW["{"] _1] KW["}"]],
+   Block.1:iter-star        -- _1,
+   Print                    -- KW["print"] _1,
+   Call                     -- _1 KW["("] _2 KW[")"],
+   Call.2:iter-star-sep     -- _1 KW[","],
+   Var                      -- _1,
+   PropAccess               -- _1 KW["."] _2,
+   Type                     -- _1,
+   StringType               -- KW["String"],
+   IntType                  -- KW["Int"]
+]
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/NamingExperiment.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/NamingExperiment.pp	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also NamingExperiment.generated.pp)
+[]

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/NamingExperiment.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/NamingExperiment.sdf	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,51 @@
+module NamingExperiment
+
+imports Common 
+
+exports
+    
+context-free start-symbols
+
+  Start
+
+context-free syntax
+
+    %% Constructs
+    "module" ID Definition*         -> Start {cons("Module"), scope}
+    "entity" ID "{" Member* "}"     -> Definition {cons("Entity"), scope}
+    "import" STRING                 -> Definition {cons("Import")}
+    
+    %% Aspect weaving
+    "aspect" ID "{" AspectMember* "}"                                               -> Definition {cons("Aspect"), scope}
+    "pointcut" ID "(" { Param "," }* ")" ":" JoinPoint                              -> AspectMember {cons("Pointcut"), scope}
+    "advice" AdviceType "(" { Param "," }* ")" ":" ID "(" {Exp ","}* ")" Stm        -> AspectMember {cons("Advice"), scope}
+    
+    "before"    -> AdviceType {cons("Before")}
+    "after"     -> AdviceType {cons("After")}
+    
+    "assigned" "(" Type ")"     -> JoinPoint {cons("Assigned")}
+    
+    %% Properties
+    ID ":" Type                     -> Member {cons("Property")}
+
+    %% Functions
+    ID "(" { Param "," }* ")" Stm   -> Member {cons("Function"), scope}
+    ID ":" Type                     -> Param {cons("Param")}
+    
+    %% Statements
+    "var" ID ":" Type               -> Stm {cons("VarDecl")}
+    "var" ID ":" Type "=" Exp       -> Stm {cons("VarDeclInit")}
+    ID "=" Exp                      -> Stm {cons("Assign")}
+    "{" Stm* "}"                    -> Stm {cons("Block"), scope(Var)}
+    "print" Exp                     -> Stm {cons("Print")}
+    
+    %% Expressions
+    ID "(" {Exp ","}* ")"           -> Exp {cons("Call")}
+    ID                              -> Exp {cons("Var")}
+    Exp "." ID                      -> Exp {cons("PropAccess"), left}
+    
+    %% Types
+    ID                              -> Type {cons("Type")}
+    "String"                        -> Type {cons("StringType"), prefer}
+    "Int"                           -> Type {cons("IntType"), prefer}
+    
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/SPX.spx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/SPX.spx	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,45 @@
+package SPX
+
+module example2
+
+context-free syntax
+    
+    %% Constructs
+    "module" Module@=ID Definition*         -> Start {"Module", scope(Entity, Module, Aspect)}
+    "entity" Entity@=ID "{" Member* "}"     -> Definition {"Entity", scope(Property, Function)}
+    "import" Module at STRING                  -> Definition {"Import"}
+    
+    %% Aspect weaving
+    "aspect" Aspect@=ID "{" AspectMember* "}"                                               -> Definition {"Aspect", scope(Pointcut)}
+    "pointcut" Pointcut@=ID "(" { Param "," }* ")" ":" { JoinPoint "," }+                   -> AspectMember {"Pointcut", scope(Var)}
+    "advice" AdviceType "(" { Param "," }* ")" ":" Pointcut at ID "(" {Exp ","}* ")" Stm       -> AspectMember {"Advice", scope(Var)}
+    
+    "before"    -> AdviceType {"Before"}
+    "after"     -> AdviceType {"After"}
+    
+    "assigned" "(" Type ")"     -> JoinPoint {"Assigned"}
+    
+    %% Properties
+    Property@=ID ":" Type       -> Member {"Property"}
+    
+    %% Functions
+    Function@=ID "(" { Param "," }* ")" Stm     -> Member {"Function", scope(Var)}
+    Var@=ID ":" Type                            -> Param {"Param"}
+    
+    %% Statements
+    "var" Var@=ID ":" Type              -> Stm {"VarDecl"}
+    "var" Var@=ID ":" Type "=" Exp      -> Stm {"VarDeclInit"}
+    Var at ID "=" Exp                      -> Stm {"Assign"}
+    "{" Stm* "}"                        -> Stm {"Block", scope(Var)}
+    "print" Exp                         -> Stm {"Print"}
+    
+    %% Expressions
+    Function at ID "(" {Exp ","}* ")"  -> Exp {"Call"}        %% or, could be an Entity 
+    Var at ID                          -> Exp {"Var"}         %% or, could be a Property!
+    Exp "." Property at ID             -> Exp {"PropAccess"}
+    
+    %% Types
+    Entity at ID   -> Type {"Type"}
+    "String"    -> Type {"StringType", prefer}
+    "Int"       -> Type {"IntType", prefer}
+    
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/.gitignore
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/.gitignore	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,2 @@
+*.aterm
+*.java
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/CRM/Location.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/CRM/Location.java	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,63 @@
+package CRM;
+
+class Location 
+{
+    private String mCity;
+    
+    public String get_mCity 
+    {
+        return mCity;
+    }
+    
+    public void set_mCity(String mCity) 
+    {
+        this.mCity = mCity;    
+    }
+    
+    private String mAddress;
+    
+    public String get_mAddress 
+    {
+        return mAddress;
+    }
+    
+    public void set_mAddress(String mAddress) 
+    {
+        this.mAddress = mAddress;    
+    }
+    
+    private int mNumber;
+    
+    public int get_mNumber 
+    {
+        return mNumber;
+    }
+    
+    public void set_mNumber(int mNumber) 
+    {
+        this.mNumber = mNumber;    
+    }
+    
+    public void Set(String city, String address, int number)
+    {
+        {
+            System.out.println(city);
+            mCity = city;
+            
+        }
+        {
+            System.out.println(address);
+            mAddress = address;
+            
+        }
+        {
+            mNumber = number;
+            System.out.println(number);
+            
+        }
+        
+    }
+        
+    
+}
+

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/CRM/Person.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/CRM/Person.java	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,41 @@
+package CRM;
+
+class Person 
+{
+    private String mName;
+    
+    public String get_mName 
+    {
+        return mName;
+    }
+    
+    public void set_mName(String mName) 
+    {
+        this.mName = mName;    
+    }
+    
+    private Location mLocation;
+    
+    public Location get_mLocation 
+    {
+        return mLocation;
+    }
+    
+    public void set_mLocation(Location mLocation) 
+    {
+        this.mLocation = mLocation;    
+    }
+    
+    public void Print(Location location)
+    {
+        String adr = location.mAddress;
+        String num = location.mNumber;
+        System.out.println(adr);
+        System.out.println(num);
+        System.out.println(location.mCity);
+        
+    }
+        
+    
+}
+

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/example.nam
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/example.nam	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,14 @@
+module M
+
+entity A {
+  x : B
+}
+
+entity B {
+  y : A
+  f(a : A) {
+      var v : A = y.x.y.x.y.x
+      v = y
+      v = f(v)
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/printer.nam
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/printer.nam	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,12 @@
+module Printer
+
+aspect Printer {
+    pointcut StringChanged(s : String): assigned(String)
+    pointcut IntChanged(i : Int): assigned(Int)
+    
+    advice before(s : String): StringChanged(s)
+        print s
+        
+    advice before(i : Int): IntChanged(i)
+        print i
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/simple.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/simple.aterm	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,59 @@
+Module(
+  "CRM"
+, [ Entity(
+      "Location"
+    , [ Property("mCity", StringType())
+      , Property("mAddress", StringType())
+      , Property("mNumber", IntType())
+      , Function(
+          "Set"
+        , [Param("city", StringType()), Param("address", StringType()), Param("number", IntType())]
+        , Block(
+            [ Assign("mCity", Var("city"))
+            , Assign("mAddress", Var("address"))
+            , Assign("mNumber", Var("number"))
+            ]
+          )
+        )
+      ]
+    )
+  , Entity(
+      "Person"
+    , [ Property("mName", StringType())
+      , Property("mLocation", Type("Location"))
+      , Function(
+          "Print"
+        , [Param("location", Type("Location"))]
+        , Block(
+            [ VarDeclInit("adr", StringType(), PropAccess(Var("location"), "mAddress"))
+            , VarDeclInit("num", StringType(), PropAccess(Var("location"), "mNumber"))
+            , Print(Var("adr"))
+            , Print(Var("num"))
+            , Print(PropAccess(Var("location"), "mCity"))
+            ]
+          )
+        )
+      ]
+    )
+  , Aspect(
+      "Printer"
+    , [ Pointcut("StringChanged", [Param("s", StringType())], Assigned(StringType()))
+      , Pointcut("IntChanged", [Param("i", IntType())], Assigned(IntType()))
+      , Advice(
+          Before()
+        , [Param("s", StringType())]
+        , "StringChanged"
+        , [Var("s")]
+        , Print(Var("s"))
+        )
+      , Advice(
+          After()
+        , [Param("i", IntType())]
+        , "IntChanged"
+        , [Var("i")]
+        , Print(Var("i"))
+        )
+      ]
+    )
+  ]
+)
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/simple.nam
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/test/simple.nam	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,42 @@
+module CRM
+
+// Project wide resolving is not working yet :(
+//import "Printer"
+
+entity Location {
+	mCity : String
+	mAddress : String
+	mNumber : Int
+	
+	Set(city : String, address : String, number : Int) {
+        mCity = city
+		mAddress = address
+		mNumber = number
+	}
+}
+
+entity Person {
+	mName : String
+	mLocation : Location
+	
+	Print(location : Location) {
+		var adr : String = location.mAddress
+		var num : String = location.mNumber
+		
+		print adr
+		print num
+		print location.mCity 
+		
+	}
+}
+
+aspect Printer {
+    pointcut StringChanged(s : String): assigned(String)
+    pointcut IntChanged(i : Int): assigned(Int)
+    
+    advice before(s : String): StringChanged(s)
+        print s
+        
+    advice after(i : Int): IntChanged(i)
+        print i
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/analysis-generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/analysis-generated.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,180 @@
+module analysis-generated
+
+imports
+  include/NamingExperiment
+  analysis-library
+
+signature
+  constructors
+    Module   : Namespace
+    Aspect   : Namespace
+    Pointcut : Namespace
+    Function : Namespace
+    Var      : Namespace
+    Property : Namespace
+    Entity   : Namespace
+
+
+rules
+
+  nam-get-scope-types :
+    Module(_, _) -> [ Entity()
+                    , Module()
+                    , Aspect()
+                    ]
+
+  nam-get-scope-types :
+    Entity(_, _) -> [Property(), Function()]
+
+  nam-get-scope-types :
+    Aspect(_, _) -> [Pointcut()]
+
+  nam-get-scope-types :
+    Pointcut(_, _, _) -> [Var()]
+
+  nam-get-scope-types :
+    Advice(_, _, _, _, _) -> [Var()]
+
+  nam-get-scope-types :
+    Function(_, _, _) -> [Var()]
+
+  nam-get-scope-types :
+    Block(_) -> [Var()]
+
+  nam-get-definition-key :
+    Module(x, _) -> x
+
+  nam-get-definition :
+    Module(x, _) -> <nam-get-def(|Module())> x
+
+  nam-get-definition-key :
+    Entity(x, _) -> x
+
+  nam-get-definition :
+    Entity(x, _) -> <nam-get-def(|Entity())> x
+
+  nam-get-definition-key :
+    Aspect(x, _) -> x
+
+  nam-get-definition :
+    Aspect(x, _) -> <nam-get-def(|Aspect())> x
+
+  nam-get-definition-key :
+    Pointcut(x, _, _) -> x
+
+  nam-get-definition :
+    Pointcut(x, _, _) -> <nam-get-def(|Pointcut())> x
+
+  nam-get-definition-key :
+    Property(x, _) -> x
+
+  nam-get-definition :
+    Property(x, _) -> <nam-get-def(|Property())> x
+
+  nam-get-definition-key :
+    Function(x, _, _) -> x
+
+  nam-get-definition :
+    Function(x, _, _) -> <nam-get-def(|Function())> x
+
+  nam-get-definition-key :
+    Param(x, _) -> x
+
+  nam-get-definition :
+    Param(x, _) -> <nam-get-def(|Var())> x
+
+  nam-get-definition-key :
+    VarDecl(x, _) -> x
+
+  nam-get-definition :
+    VarDecl(x, _) -> <nam-get-def(|Var())> x
+
+  nam-get-definition-key :
+    VarDeclInit(x, _, _) -> x
+
+  nam-get-definition :
+    VarDeclInit(x, _, _) -> <nam-get-def(|Var())> x
+
+  nam-annotate-names(|def-path):
+    Module(y_7765, z_7765) -> Module(y_7765{def-path}, z_7765)
+
+  nam-annotate-names(|def-path):
+    Entity(w_7765, x_7765) -> Entity(w_7765{def-path}, x_7765)
+
+  nam-annotate-names(|def-path):
+    Import(v_7765) -> Import(<nam-annotate-use(|Module())> v_7765)
+
+  nam-annotate-names(|def-path):
+    Aspect(t_7765, u_7765) -> Aspect(t_7765{def-path}, u_7765)
+
+  nam-annotate-names(|def-path):
+    Pointcut(q_7765, r_7765, s_7765) -> Pointcut(q_7765{def-path}, r_7765, s_7765)
+
+  nam-annotate-names(|def-path):
+    Advice(l_7765, m_7765, n_7765, o_7765, p_7765) -> Advice(
+                                                        l_7765
+                                                      , m_7765
+                                                      , <nam-annotate-use(|Pointcut())> n_7765
+                                                      , o_7765
+                                                      , p_7765
+                                                      )
+
+  nam-annotate-names(|def-path):
+    Before() -> Before()
+
+  nam-annotate-names(|def-path):
+    After() -> After()
+
+  nam-annotate-names(|def-path):
+    Assigned(k_7765) -> Assigned(k_7765)
+
+  nam-annotate-names(|def-path):
+    Property(i_7765, j_7765) -> Property(i_7765{def-path}, j_7765)
+
+  nam-annotate-names(|def-path):
+    Function(f_7765, g_7765, h_7765) -> Function(f_7765{def-path}, g_7765, h_7765)
+
+  nam-annotate-names(|def-path):
+    Param(d_7765, e_7765) -> Param(d_7765{def-path}, e_7765)
+
+  nam-annotate-names(|def-path):
+    VarDecl(b_7765, c_7765) -> VarDecl(b_7765{def-path}, c_7765)
+
+  nam-annotate-names(|def-path):
+    VarDeclInit(y_7764, z_7764, a_7765) -> VarDeclInit(y_7764{def-path}, z_7764, a_7765)
+
+  nam-annotate-names(|def-path):
+    Assign(w_7764, x_7764) -> Assign(
+                                <nam-annotate-use(|Var())> w_7764
+                              , x_7764
+                              )
+
+  nam-annotate-names(|def-path):
+    Block(v_7764) -> Block(v_7764)
+
+  nam-annotate-names(|def-path):
+    Print(u_7764) -> Print(u_7764)
+
+  nam-annotate-names(|def-path):
+    Call(s_7764, t_7764) -> Call(
+                              <nam-annotate-use(|Function())> s_7764
+                            , t_7764
+                            )
+
+  nam-annotate-names(|def-path):
+    Var(r_7764) -> Var(<nam-annotate-use(|Var())> r_7764)
+
+  nam-annotate-names(|def-path):
+    PropAccess(p_7764, q_7764) -> PropAccess(
+                                    p_7764
+                                  , <nam-annotate-use(|Property())> q_7764
+                                  )
+
+  nam-annotate-names(|def-path):
+    Type(o_7764) -> Type(<nam-annotate-use(|Entity())> o_7764)
+
+  nam-annotate-names(|def-path):
+    StringType() -> StringType()
+
+  nam-annotate-names(|def-path):
+    IntType() -> IntType()
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/analysis-imports.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/analysis-imports.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,33 @@
+module analysis-imports
+
+imports
+  include/NamingExperiment
+  analysis-generated
+  analysis-library
+
+signature constructors
+  
+  Imports : DefDataType
+
+rules
+
+  // TODO: imports; consider project directory and so-called "referenced projects"
+  //       requires runtime support a project-wide index
+
+  adjust-index-def-data(store-results |namespace, path):
+    Module(m, defs) -> <store-results> DefData([namespace | path], Imports(), import*)
+    where
+      import* := <filter(get-import-name)> defs
+
+  get-import-name:
+    Import(name) -> name
+
+  import-name-to-uri(|namespace):
+    name -> [namespace, name]
+
+  adjust-index-lookup(is-use |namespace, path):
+    Module(self, _) -> all-uris
+    where
+      !namespace => Entity();
+      import*  := <index-get-data(|Imports())>;
+      all-uris := <map(import-name-to-uri(|namespace))> import* 

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/analysis-library.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/analysis-library.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,390 @@
+module analysis-library
+
+imports
+  libstratego-lib
+  types
+  checksum
+  aspects
+  lib/editor-common.generated
+
+signature constructors
+
+  // Index elements:
+  Def     : List(UriPart) -> Summary
+  Use     : List(UriPart) * List(UriPart) -> Summary
+  BadUse  : List(UriPart) -> Summary
+  DefData : List(UriPart) * DefDataType * Term -> Summary
+
+  // TODO: add a new constructor for URI header/path separation?
+  
+  // URI header:
+  Namespace      : UriPart
+  Unresolved     : Namespace -> UriPart
+  INTERNAL_ERROR : UriPart
+  
+  // Remainder of URI:
+  String : UriPart
+  Anon   : Int -> UriPart
+  Anon   : UriPart
+
+rules // extension points
+  
+  // Should return list of Def(_) and/or [namespace | path]
+  adjust-index-lookup(is-use |namespace, path) = fail
+  
+  // adjust-index-select(|namespace, path, use) = fail // (e.g., for imports)
+  
+  // Should call <store-results> on a (list of) DefData 
+  adjust-index-def-data(store-results |namespace, path) = fail
+  
+  // Should return a path
+  adjust-index-path(is-def |namespace, path) = fail
+  
+  // adjust-index-path-from-filesystem(|project-path, path)
+
+rules // analysis traversals
+   
+  analyze-top:
+    (ast, path, project-path) -> (ast5, defs, uses, data)
+    with
+      {| CurrentAnalysisAst:
+        rules(
+          CurrentAnalysisAst := ast
+        );
+        // HACK: use Some() constructor to force origin tracking...
+        (Some(ast2), defs) := <analyze-defs(|Anon(), Anon())> Some(ast);
+        full-path    := $[[project-path]/[path]];
+        prim("LANG_index_setup", $[[project-path]/.cache/index], $[project-path], [], []);
+        prim("LANG_index_clear_file", full-path);
+        <index-summary-parts(|full-path)> defs;
+        ast3         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast2;
+        <index-tree-terms> ast3;
+        data         := <origin-track-forced(analyze-tree-data)> ast3;
+        <index-summary-parts(|full-path)> data;
+        // TODO: resolve any URIs in index data at this point? or re-index data after uses analysis?
+        (ast4, uses) := <analyze-uses> ast3;
+        ast5         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast4
+      |}
+  
+  /**
+   * Identifies all definitions in the tree
+   * and annotates them with their URI.
+   * Also annotates uses with a preliminary "Unresolved(_)" URI.
+   */
+  analyze-defs(|head-scope, head-scope-ns):
+    ast -> (ast', defs')
+    with
+      if def := <nam-get-definition> ast then
+        Def(def-path)                     := def;
+        [head-scope-ns', head-scope' | _] := def-path
+      else
+        def-path       := INTERNAL_ERROR();
+        head-scope-ns' := head-scope-ns;
+        head-scope'    := head-scope
+      end;
+      if scope-types := <nam-get-scope-types> ast then
+        {| IndexPath:
+          <list-loop(update-index-path(|head-scope', head-scope-ns', ast))> scope-types;
+          // <balanced-update-path> head-scope';
+          (ast', defs) := <analyze-defs-recurse(|Anon(), Anon(), def-path)> ast
+        |}
+      else
+        (ast', defs) := <analyze-defs-recurse(|head-scope', head-scope-ns', def-path)> ast
+      end;
+      defs' := <![def | defs] <+ !defs>
+  
+  analyze-defs-recurse(|head-scope, head-scope-ns, def-path):
+    ast -> (ast'', defs)
+    where
+      analyzed      := <all(analyze-defs(|head-scope, head-scope-ns))> ast;
+      (ast', defs)  := <unzip-analyzed> analyzed;
+      ast''         := <try(nam-annotate-names(|def-path))> ast'
+  
+  update-index-path(|head-scope, head-scope-ns, ast):
+    scope-type -> scope-type
+    where
+      if !head-scope-ns => Anon() then
+        path  := <IndexPath <+ ![]> scope-type;
+        path' := <do-adjusted-index-path(|scope-type, path, Anon(<new>))> ast
+      else
+        path  := <IndexPath <+ ![]> head-scope-ns;
+        path' := <do-adjusted-index-path(|scope-type, path, head-scope)> ast
+      end;
+      rules(IndexPath: scope-type -> path')
+  
+  /* TODO: consider using simple-update-def-path
+   *       which uses "balanced" path scopes
+   *       e.g. when Entity doesn't scope Function
+   *       then it's hard to access properties from a function
+  balanced-update-index-path:
+    head-scope -> head-scope
+    where
+      if !head-scope => Anon() then
+        head-scope' := Anon(<new>)
+      else
+        head-scope' := head-scope
+      end;
+      (something with do-adjust-path)
+      rules(IndexPath := [head-scope' | <IndexPath <+ ![]> ()])
+  */
+  
+  /**
+   * Analyze all uses, changing their preliminary
+   * "Unresolve(_)" URI to a definite URI of their definition. 
+   */
+  analyze-uses:
+    ast -> (ast'', uses')
+    with
+      analyzed     := <all(analyze-uses)> ast;
+      (ast', uses) := <unzip-analyzed> analyzed;
+      if !ast' => _{unresolved@[Unresolved(namespace), x | path]} then
+        if Def(path') := <index-lookup(id |namespace, path)> ast' then
+          ast'' := ast{path'};
+          uses' := [Use([namespace | path], path') | uses]
+        else
+          ast'' := ast';
+          uses' := [BadUse(unresolved) | uses]
+        end
+      else
+        ast'' := ast';
+        uses' := uses
+      end
+  
+  /**
+   * Collects all index data (e.g., types of definitions).
+   */
+  analyze-tree-data:
+    tree -> data
+    where
+      set := <new-iset>;
+      <topdown(analyze-tree-data-part(|set))> tree;
+      data := <iset-elements> set
+  
+  analyze-tree-data-part(|set):
+    tree -> tree
+    where
+      if def-term := <nam-get-definition-key> then
+        _{[namespace | path]} := def-term;
+        if result := <adjust-index-def-data(store-index-data-results(|set) |namespace, path)> tree then
+          <fatal-err(|"Unexpected result from adjust-index-def-data; should call <store-results>")> result
+        end
+      end
+  
+  store-index-data-results(|set):
+    t -> <fail>
+    where
+      if is-list then
+        <iset-addlist(|t)> set
+      else
+        <iset-add(|t)> set
+      end
+  
+  /**
+   * Transforms a term C( (a1, [b1]), (a2, [b2, b3]) )
+   * to a tuple (C(a1, a2), [b1, b2, b3]).
+   */
+  unzip-analyzed:
+    appl -> (appl', unzipped-parts)
+    with
+      appl'          := <all(\(a, _) -> a\)> appl;
+      unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl
+
+rules // index construction
+  
+  // TODO: optimize: use hashtables instead of dynamic rules
+    
+  index-summary-parts(|file) =
+    list-loop(with(prim("LANG_index_add", <id>, file)))
+
+  index-tree-terms:
+    tree -> tree
+    where
+      if def-term{uri} := <nam-get-definition-key> then
+        def := Def(uri);
+        rules(
+          IndexedTerm: uri -> tree
+        )
+      end;
+      <all(index-tree-terms)> tree
+
+rules // index API
+
+  /** @deprecated */
+  index-get-term:
+    <with(?Def(uri) | "Def expected")> -> <IndexedTerm> uri
+  
+  index-get-data(|kind):
+    <with(?Def(uri) | "Def expected")> -> data
+    where
+      prim("LANG_index_get", DefData(uri, kind, [])) => [DefData(_, _, data) | _]
+  
+  index-get-data-all(|kind):
+    <with(?Def(uri) | "Def expected")> -> datas'
+    where
+      datas  := <prim("LANG_index_get", DefData(uri, kind, []))>;
+      datas' := <map(\DefData(_, _, d) -> d\)> datas
+
+  index-namespace:
+    x{[namespace | path]} -> <index-namespace-unwrap> namespace
+
+  index-path:
+    x{[namespace | path]} -> path'
+    where
+      if !namespace => Unresolved(namespace) then
+        Def(path') := <index-lookup> 
+      else
+        path' := path
+      end
+
+  index-lookup:
+    x{[namespace | path]} -> <index-lookup(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup-all:
+    x{[namespace | path]} -> <index-lookup-all(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup(is-adjust-lookup-enabled |namespace, path):
+    x -> def
+    where
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      def        := <index-select(|namespace, path, x)>
+    <+
+      // TODO: optimize: try not to call do-adjust-index-lookup from here
+      [_ | path'] := path;
+      def         := <index-lookup(is-adjust-lookup-enabled |namespace, path')> x
+
+  index-lookup-all(is-adjust-lookup-enabled |namespace, path):
+    x -> defs'
+    where
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      defs       := <index-select-all(|namespace, path, x)>;
+      // TODO: optimize: try not to call do-adjust-index-lookup from here
+      if [_ | path'] := path then
+        defs2 := <index-lookup-all(is-adjust-lookup-enabled |namespace, path')> x;
+        defs' := <conc> (defs, defs2)
+      else
+        defs' := defs
+      end
+
+  index-lookup-outermost:
+    x{[namespace | path]} -> <index-lookup-outermost(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup-outermost(is-adjust-lookup-enabled |namespace, path):
+    x -> def
+    where
+      // TODO: optimize: just like index-lookup
+      [_ | path'] := path;
+      def         := <index-lookup-outermost(is-adjust-lookup-enabled |namespace, path')> x
+    <+
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      def        := <index-select(|namespace, path, x)>
+
+  index-lookup-one-level:
+    x{[namespace | path]} -> <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
+  
+  index-lookup-one-level(is-adjusted-lookup-enabled |namespace, path):
+    x -> defs
+    with
+      is-adjusted-lookup-enabled;
+      do-adjusted-index-lookup(|namespace, path, x);
+      mapconcat(\d at Def(p) -> [d]\
+          <+ \[namespace' | path'] -> <index-lookup-one-level(fail |namespace', path')> x\
+          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
+      ?defs
+    <+
+      defs := <prim("LANG_index_get_children", Def([namespace | path]))>
+
+  index-lookup-all-levels:
+    x{[namespace | path]} -> <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
+  
+  index-lookup-all-levels(is-adjust-lookup-enabled |namespace, path):
+    x -> all-defs
+    with
+      is-adjust-lookup-enabled;
+      do-adjusted-index-lookup(|namespace, path, x);
+      mapconcat(\d at Def(p) -> [d]\
+          <+ \[namespace' | path'] -> <index-lookup-all-levels(fail |namespace', path')> x\
+          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
+      ?all-defs
+    <+
+      one-level := <prim("LANG_index_get_children", Def([namespace | path]))>;
+      if [_ | path'] := path then
+        all-defs := <concat> [one-level, <index-lookup-all-levels(fail |namespace, path')> x]
+      else
+        all-defs := one-level
+      end
+
+  index-lookup-contained(|namespace):
+    x{[ns | path]} -> defs
+    with
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-one-level(id|namespace, def-path)> x 
+      else
+        defs := <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
+      end
+
+  index-lookup-contained-all-levels(|namespace):
+    x{[ns | path]} -> defs
+    with
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-all-levels(id|namespace, def-path)> x
+      else
+        defs := <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
+      end
+  
+  index-lookup-container(|namespace):
+    x{[ns | path]} -> def
+    with
+      def := ();
+      fatal-err(|"Not implemented") // TODO: index-lookup-container
+
+  index-namespace-unwrap =
+    \Unresolved(n) -> n\ <+ id
+  
+  do-adjusted-index-lookup(|namespace, path, use) =
+    // UNDONE: try(origin-term);
+    repeat-until(
+      prim("SSL_EXT_get_parent", <id>)
+    , adjust-index-lookup(origin-equal(|use) |namespace, path)
+    )
+
+  index-select(|namespace, path, use) =
+    getfirst(
+      where(
+        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
+      )
+    )
+
+  index-select-all(|namespace, path, use) =
+    filter(
+      where(
+        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
+      )
+    )
+  
+  do-adjusted-index-path(|namespace, path, def) =
+    adjust-index-path(origin-equal(|def) |namespace, path)
+  <+
+    ![def | path]
+  
+  index-eq(|namespace, expected) =
+    where(
+      ?Def([_, name | _]);
+      <SRTS-EXT-eq-ignore-annos(|expected)> name
+    )
+  
+  external SRTS-EXT-eq-ignore-annos(|t)
+
+rules // interface for generated code
+  
+  nam-get-def(|namespace):
+    x -> Def([namespace, x | <IndexPath <+ ![]> namespace])
+    
+  nam-annotate-use(|namespace):
+    t -> t{[Unresolved(namespace), t | <IndexPath <+ ![]> namespace]}
+    
+  nam-get-scope-types = fail
+  nam-get-definition = fail
+  nam-get-definition-key = fail
+  nam-annotate-names(|def-path) = fail

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/analysis-manual.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/analysis-manual.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,51 @@
+module analysis-manual
+
+imports
+  include/NamingExperiment
+  analysis-generated
+  analysis-library
+  types
+
+rules
+  
+  // Adjust the URI of the Module element
+  //adjust-index-path(is-def |namespace, path):
+  //  Module(<is-def>, _) -> ["ROOT"]
+  
+  // Adjust the lookup behavior for properties,
+  // overriding the lookup with a list of property Defs
+  adjust-index-lookup(is-use |namespace, path):
+    PropAccess(e, <is-use>) -> p*
+    with
+	  if TYPE(e-type) := <type-of> e then
+        p* := <index-lookup-contained(|Property())> e-type
+        //or: p* := [[namespace | <index-path> e-type]]
+      else
+        p* := []
+      end
+
+  // Adjust the lookup behavior for variables,
+  // overriding the lookup with a list of URIs
+  adjust-index-lookup(is-use |namespace, path):
+    Var(<is-use>) -> [[Var() | path], [Property() | path]]
+    
+  // Why is this needed? shouldn't the Var() adjust handle this?
+  // Adjust the lookup behavior for assignments,
+  // overriding the lookup with a list of URIs
+  adjust-index-lookup(is-use |namespace, path):
+    Assign(<is-use>, _) -> [[Var() | path], [Property() | path]]
+
+  // Adjust the lookup behavior for types (TODO: Add built-in types),
+  // overriding the lookup with a list of URIs
+  adjust-index-lookup(is-use |namespace, path): 
+    Type(<is-use>) -> [[Entity() | path]]
+
+  // Adjust the lookup behavior for function calls,
+  // selecting a function with matching parameter types
+  // (if this fails, the normal lookup behavior is used!)
+  adjust-index-lookup(is-use |namespace, path):
+    Call(<is-use>, args) -> def
+    where
+      arg-types := <map(type-of)> args;
+      all-defs  := <index-lookup-all-levels(fail |namespace, path)>;
+      def       := <getfirst(is-params-compatible(|arg-types))>

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/aspects.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/aspects.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,76 @@
+module aspects
+
+imports
+    
+    libstratego-lib
+    include/NamingExperiment
+    lib/editor-common.generated
+    analysis-library
+    types
+    util
+    
+signature constructors
+
+    ADVICE  	: Advice -> AdviceType
+    Advice    	: DefDataKind
+    
+rules // Aspect weaving using DefData
+	
+	adjust-index-def-data(store-results |namespace, path):
+        Advice(beforeafter, params, pointcutName, args, statements) -> <id>
+        where pointcut := <index-get-term> pointcutName
+        where <store-results> DefData([namespace | path], Advice(), ADVICE(Advice(beforeafter, params, pointcut, args, statements)))
+    
+rules // Aspect weaving pre processing step
+    
+    // Weave aspects into entities.
+    apply-aspects: 
+        Module(name, units) -> Module(name, entities')
+        where entities := <filter(?Entity(_, _))> units
+        where aspects := <filter(?Aspect(_, _))> units
+        where entities' := <map-passon(apply-aspect)> (aspects, entities)
+        
+    // Apply every advice to all entities.
+    apply-aspect:
+        (Aspect(name, members), entities) -> entities'
+        where pointcuts := <filter(?Pointcut(_, _, _))> members
+        where advices := <filter(?Advice(_, _, _, _, _))> members
+        where advices' := <map(replace-pointcuts(|pointcuts))> advices
+        where entities' := <map-passon(apply-advice)> (advices', entities)
+        
+    // Replace pointcut names in advices with the actual pointcut construct.
+    replace-pointcuts(|pointcuts):
+        Advice(type, params, pointcutName, args, statement) ->  Advice(type, params, pointcut, args, statement)
+        where pointcut := <fetch-elem(?Pointcut(pointcutName, _, _))> pointcuts
+    
+    // Apply an advice to the contents of entities. This rule applies advices with an Assigned pointcut.
+    apply-advice:
+    	(Advice(beforeafter, adviceParams, Pointcut(_, pointcutParams, Assigned(type)), args, statement), entities) -> entities'
+    	where entities' := <try(sometd(apply-advice-assigned(|beforeafter, type, adviceParams, statement)))> entities
+    	 
+    // Apply advice with an Assigned pointcut.
+    apply-advice-assigned(|beforeafter, type, adviceParams, statement):
+        assign at Assign(name, exp) -> newStatements
+        where Param(paramName, _) := <get-first> adviceParams
+        where var := Var(paramName)
+        where statement' := <try(sometd(aspect-replace-var(|var, exp)))> statement
+        where newStatements := <aspect-add-statement> (assign, statement', beforeafter)
+        where <eq> (<aspect-convert-type> <type-of> exp, type)
+        
+    // Converts types from <type-of> to actual type constructs.
+    aspect-convert-type:
+        TYPE("String") -> StringType()
+    aspect-convert-type:
+        TYPE("Int") -> IntType()
+       
+    // Prepends or appends new statements to existing statements. 
+    aspect-add-statement: 
+    	(statements, newStatements, Before()) -> Block([newStatements, statements])
+    aspect-add-statement: 
+    	(statements, newStatements, After()) -> Block([statements, newStatements])
+            
+    // Replace a certain variable with given expression.
+    aspect-replace-var(|var, exp):
+        item -> exp
+        where <?var> item
+        
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/check.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,54 @@
+module check
+
+imports
+  libstratego-lib
+  include/NamingExperiment
+  lib/editor-common.generated
+  analysis-library
+  analysis-generated
+  types
+
+rules
+
+  // TODO: don't use index-get-term, but store offsets in the index
+
+  constraint-error:
+    x{[Unresolved(t) | _]} ->
+    (x, $[Unable to resolve.])
+  
+  constraint-error:
+    x -> (x, $[Use before definition])
+    where
+      namespace := <index-namespace> x;
+      <is-ordered-namespace> namespace
+    where
+      def  := <index-lookup> x;
+      def' := <index-get-term> def
+    where
+      <gt> (<origin-offset> def', <origin-offset> x)
+  
+  constraint-error:
+    def -> (def, $[Duplicate definition])
+    where
+      def-child  := <nam-get-definition-key> def;
+      def'       := <index-get-term> <index-lookup-outermost> def-child;
+      not(<origin-equal(|def)> def')
+  
+  is-ordered-namespace:
+    Var() -> Var()
+    
+  constraint-error:
+    Call(f, a*) -> (f, $[Illegal argument types, expected [<strip-annos; write-to-string> param-types] not [<strip-annos; write-to-string> arg-types]])
+    where
+      arg-types   := <map(type-of)> a*;
+      def         := <index-lookup> f;
+      param-types := <index-get-data(|ParamTypes())> def;
+      not(
+        <is-params-compatible(|arg-types)> def
+      )
+  
+  constraint-warning = fail
+  constraint-note = fail
+
+  origin-offset =
+    prim("SSL_EXT_origin_offset", <id>) => (<id>, _)
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/checksum.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/checksum.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,18 @@
+module checksum
+
+imports
+    
+    include/NamingExperiment
+    analysis-library
+
+signature constructors
+
+    CHECKSUM    : STRING -> Hash
+    Checksum    : DefDataKind
+    
+rules // Store checksum of entity members
+    
+    adjust-index-def-data(store-results |namespace, path):
+        Entity(name, members) -> <id>
+        // Strip annotations because these can contain random characters like anonymous namespaces.
+        where <store-results> DefData([namespace | path], Checksum(), CHECKSUM(<checksum> <strip-annos> members))
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-incremental.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-incremental.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,79 @@
+module generate-incremental
+
+imports
+    
+    libstratego-lib
+    libstratego-gpp
+    libstratego-aterm
+    include/NamingExperiment
+    lib/editor-common.generated
+    analysis-library
+    analysis-generated
+    generate-simple
+    checksum
+    
+rules // File writing
+	
+	// Writes an entity to a Java file.
+	// TODO: What about imports?
+    entity-tofile(|moduleName, path):
+        entity at Entity(name, _) -> <id>
+        where <java-tofile(|moduleName, path, name)> <to-java-simple> Module(moduleName, [entity])
+        
+    // Writes a string of Java code to a Java file.
+    java-tofile(|moduleName, path, name): 
+        javaString -> <id>
+        where dir := <abspath> $[[<dirname> path]/[moduleName]/]
+        where <debug> $[Writing java class [name] to [dir][name].java.]
+        where try (<mkdir> dir)
+        where <fclose> <fputs> ( javaString, <fopen> ( $[[dir][name].java], "w" ) )
+    
+strategies // Incremental compilation
+	
+	// Try to incrementally compile given analyzed program, otherwise do a full compilation.
+    to-java-incremental(|path) = to-java-incremental-changed(|path) <+ to-java-incremental-full(|path)
+    
+    // Force full compilation of given analyzed program.
+    to-java-incremental-force(|path) = to-java-incremental-full(|path)
+    
+rules // Incremental compilation
+    
+    // Module has not been compiled before yet, do a full compile.
+    to-java-incremental-full(|path): 
+        (Module(name, entities), defs, uses, data) -> <id>
+        where <debug> "Full compilation of Java files."
+        where cachepath := <to-java-incremental-cachepath> name
+        where checksums := <filter(?DefData(_, Checksum(), _))> data
+        where <map(entity-tofile(|name, path))> entities
+        where <WriteToTextFile> (cachepath, checksums)
+        
+    // Module has been compiled before, compare checksums and only compile entities that were changed.
+    to-java-incremental-changed(|path): 
+        (Module(name, entities), defs, uses, data) -> <id>
+        where <debug> "Incremental compilation of Java files."
+        where cachepath := <to-java-incremental-cachepath> name
+        where <file-exists> cachepath
+        where checksums := <filter(?DefData(_, Checksum(), _))> data
+        where oldChecksums := <ReadFromFile> cachepath
+        // TODO: Check for added or removed entities.
+        // TODO: Make sure that both lists match up. Have to match URI's and not zip the lists.
+        where changedEntityDefs := <to-java-compare-checksums> (checksums, oldChecksums)
+        where <map(index-get-term; entity-tofile(|name, path))> changedEntityDefs
+        where <WriteToTextFile> (cachepath, checksums)
+        
+    // Gets the import cache path for given module name.
+    // TODO: This should also contain the path where the module resides to make it unique.
+    to-java-incremental-cachepath = import-cache-path
+    
+    // Compare 2 lists of checksums and only return entities with changed checksums.
+    to-java-compare-checksums:
+        (checksums, oldChecksums) -> changedEntityDefs
+        where changedEntityDefs := <filter(?Def(_))> <zip(to-java-compare-checksums-combine)> (checksums, oldChecksums)
+    // Return Def construct with uri of changed entitiy in it.
+    to-java-compare-checksums-combine:
+        (DefData(uri, Checksum(), CHECKSUM(checksum1)), DefData(uri, Checksum(), CHECKSUM(checksum2))) -> Def(uri)
+        where not(<eq> (checksum1, checksum2))
+    // Return empty Checksum construct, these are filtered out.
+    to-java-compare-checksums-combine:
+        (DefData(uri, Checksum(), CHECKSUM(checksum1)), DefData(uri, Checksum(), CHECKSUM(checksum2))) -> Checksum()
+        where <eq> (checksum1, checksum2)
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-simple.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-simple.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,72 @@
+module generate-simple
+
+imports
+    
+    libstratego-lib
+    libstratego-gpp
+    libstratego-aterm
+    include/NamingExperiment
+    lib/editor-common.generated
+
+rules
+	
+    // Constructs
+    to-java-simple: Module(name, entities) ->
+	    $[package [name];
+
+	      [<map(to-java-simple)> entities]]
+	to-java-simple: Aspect(_, _) -> "" // Aspects are ignored in simple code generation, they should already be handled.
+    to-java-simple: Entity(name, members) ->
+	    $[class [name] 
+	      {
+	          [<map(to-java-simple)> members]
+	      }
+	      
+	      ]
+    to-java-simple: Property(name, type) -> 
+        $[private [typename] [name];
+	      
+	      public [typename] get_[name] 
+	      {
+	          return [name];
+	      }
+	      
+	      public void set_[name]([typename] [name]) 
+	      {
+	          this.[name] = [name];    
+	      }
+	      
+	      ]
+        where typename := <to-java-simple> type
+    to-java-simple: Function(name, params, statement) ->
+        $[public void [name]([<params-to-java-simple> params])
+          [<to-java-simple> statement]    
+        ]
+    to-java-simple: Param(name, type) -> $[[<to-java-simple> type] [name]]
+    params-to-java-simple: [Param(name, type)|rest] -> $[[<to-java-simple> type] [name][<params-to-java-simple2> rest]]
+    params-to-java-simple: [Param(name, type)|[]] -> $[[<to-java-simple> type] [name]]
+    params-to-java-simple2: [Param(name, type)|rest] -> $[, [<to-java-simple> type] [name][<params-to-java-simple2> rest]]
+    params-to-java-simple2: [Param(name, type)|[]] -> $[, [<to-java-simple> type] [name]]
+    
+    // Statements
+    to-java-simple: Block(statements) ->
+        $[{
+              [<map(to-java-simple)> statements]
+          }
+        ]
+    to-java-simple: Assign(name, exp) -> $[[name] = [<to-java-simple> exp];
+    ]
+    to-java-simple: VarDeclInit(name, type, exp) -> $[[<to-java-simple> type] [name] = [<to-java-simple> exp];
+    ]
+    to-java-simple: Print(exp) -> $[System.out.println([<to-java-simple> exp]);
+    ]
+    
+    // Expressions
+    to-java-simple: Var(name) -> name
+    to-java-simple: PropAccess(exp, name) -> $[[<to-java-simple> exp].[name]]
+    to-java-simple: Call(name, args) -> $[[name]([<map(to-java-simple)> args])]
+    
+    // Types
+    to-java-simple: Type(type) -> type
+    to-java-simple: StringType() -> "String"
+    to-java-simple: IntType() -> "int"
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/namingexperiment.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/namingexperiment.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,115 @@
+module namingexperiment
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/NamingExperiment
+  lib/editor-common.generated
+  check
+  aspects
+  generate-simple
+  generate-incremental
+  prettyprint
+  refactorings
+  analysis-manual
+  analysis-generated
+  analysis-library
+
+rules // Main editor interface (defined by editor/NamingExperiment-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast', errors, warnings, notes)
+    with
+      editor-init;
+      (ast', defs, uses, data) := <analyze-top>;
+      errors   := <collect-all(constraint-error, conc)> ast';
+      warnings := <collect-all(constraint-warning, conc)> ast';
+      notes    := <collect-all(constraint-note, conc)> ast'
+  
+  // Transforms a selection to Java
+  generate-java-simple:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      (analyzed, _, _, _) := <analyze-top> (selected, path, project-path);
+      result   := <to-java-simple> <apply-aspects> analyzed
+      
+  // Transforms a selection to Java files incrementally.
+  generate-java-files-incremental:
+    (selected, position, ast, path, project-path) -> None()
+    with
+      (analyzed, _, _, _) := <analyze-top> (selected, path, project-path);
+      aspectsWeaved := <strip-annos> <apply-aspects> analyzed;
+      result   := <to-java-incremental(|path)> <analyze-top> (aspectsWeaved, path, project-path) // Analyzing twice is bad!
+      
+  // Transforms a selection to Java files not incrementally.
+  generate-java-files-full:
+    (selected, position, ast, path, project-path) -> None()
+    with
+      (analyzed, _, _, _) := <analyze-top> (selected, path, project-path);
+      aspectsWeaved := <strip-annos> <apply-aspects> analyzed;
+      result   := <to-java-incremental-force(|path)> <analyze-top> (aspectsWeaved, path, project-path) // Analyzing twice is bad!
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected
+  
+  // Prints the analyzed abstract syntax ATerm of a selection.
+  generate-analyzed:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      editor-init;
+      filename := <guarantee-extension(|"analyzed.aterm")> path;
+      result   := <analyze-top> (selected, path, project-path)
+  
+  // Prints the analyzed and apsect weaved abstract syntax ATerm of a selection.
+  generate-analyzed-weaved:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      editor-init;
+      filename := <guarantee-extension(|"analyzed.weaved.aterm")> path;
+      (analyzed, _, _, _) := <analyze-top> (selected, path, project-path);
+      aspectsWeaved := <strip-annos> <apply-aspects> analyzed;
+      result   := <analyze-top> (aspectsWeaved, path, project-path) // Analyzing twice is bad!
+  
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
+    where
+      // TODO: shouldn't work on parent node?
+      !node => <one(?subnode) <+ ?subnode>;
+      def     := <index-lookup> node;
+      target  := /*<index-get-term>*/ def
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[[def-path'']]
+    where
+      // FIXME: this only works for definition paths
+      //<debug(!2)> target;
+      def-term           := <nam-get-definition-key> target;
+      _{[ns | def-path]} := def-term;
+      def-path'  := <take-until(?Anon())> def-path;
+      def-path'' := <reverse; separate-by(|".")> def-path'
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) -> proposals'
+    where
+      editor-init;
+      (ast', _, _, _) := <analyze-top> (ast, path, project-path);
+      x              := <collect-one(?COMPLETION(_))> ast';
+      proposals      := <index-lookup-all-levels> x;
+      proposals'     := <map(def-to-name)> proposals
+
+  def-to-name:
+    Def([namespace, name | _]) -> name

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/prettyprint.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/prettyprint.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,28 @@
+module prettyprint
+
+imports
+  include/NamingExperiment
+
+strategies //custom strategy for code formatting
+  
+prettyprint:
+  Module(x, y) ->
+  $[module [x]
+  	
+    [<map(prettyprint); separate-by(|"\n\n"); concat-strings> y]]
+    
+prettyprint:
+  Entity(x, y) ->
+  $[entity [x]{
+      [<map(prettyprint); separate-by(|"\n"); concat-strings> y]
+    }]
+    
+prettyprint:
+  Property(x, y) -> $[[x] : [<prettyprint> y]]
+  
+prettyprint:
+  Type(t) -> $[[t]]
+	
+prettyprint=
+  where(is-string <+ is-num)
+

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/refactorings.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/refactorings.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,48 @@
+module refactorings
+
+imports
+  lib/refactor-common.generated
+  include/NamingExperiment
+  lib/editor-common.generated  
+
+strategies //renaming
+ 
+rename-entity:
+  (selected, position, ast, path, project-path) -> (ast, new-ast)
+  with  	
+    old-name:=<get-selected-name(|position)> ast;
+    new-name:=<input-dialog>("rename", "Rename Entity:", ""); 
+    new-ast:=<topdown(try(rename-type(|old-name, new-name)))> ast
+
+get-selected-name(|position):
+  ast -> name
+    where
+	  <term-at-position(|position); ?Type(name)> ast <+
+	  <parent-at-position(|position); ?Entity(name, _)> ast 
+
+rename-type(|old-name, new-name):
+  Entity(old-name, y) -> Entity(new-name, y)
+
+rename-type(|old-name, new-name):
+  Type(old-name) -> Type(new-name)
+	
+  
+strategies //extraction
+
+extract-entity:
+  (selected, position, ast, path, project-path) -> (ast, new-ast)
+  with
+    if <is-list> selected then
+  	  properties:= selected;
+  	  insert-position:=<init; at-last(map(inc))> position
+    else //single property selected
+  	  properties:=<![selected]>;
+  	  insert-position:=<init; init; at-last(map(inc))> position
+    end;
+    entity-name:=<input-dialog>("extract", "Extract Entity:", "<Entity Name>");
+    prop-name:=<lower-case> entity-name;
+    new-ast:=<
+      alltd(replace-sublist(?properties|[Property(prop-name, entity-name)]));
+      insert-elem(|insert-position, Entity(entity-name, properties))
+    > ast	
+

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/types.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/types.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,77 @@
+module types
+
+imports
+  include/NamingExperiment
+  analysis-library
+
+signature constructors
+
+  TYPE     		: STRING -> Type
+  Type       	: DefDataKind
+  ParamTypes 	: DefDataKind
+
+rules // type projections
+
+  type-of:
+    Property(_, x) -> <type-of> x
+  
+  type-of:
+    Entity(x, _) -> TYPE(x)
+  
+  type-of:
+    VarDecl(_, x) -> <type-of> x
+  
+  type-of:
+    VarDeclInit(_, x, _) -> <type-of> x
+  
+  type-of:
+    Param(_, x) -> <type-of> x
+    
+  type-of:
+  	Type(x) -> TYPE(x)
+  	
+  type-of:
+  	StringType() -> TYPE("String")
+  	
+  type-of:
+  	IntType() -> TYPE("Int")
+  
+  type-of:
+    Var(v) -> <type-of> <index-lookup> v
+  
+  type-of:
+    PropAccess(e, p) -> <type-of> <index-lookup> p
+    
+  type-of:
+    Assign(_, x) -> <type-of> x
+
+  type-of:
+    Def(uri) -> <index-get-data(|Type())> Def(uri)
+
+rules // utility
+
+  is-params-compatible(|arg-types):
+    Def(uri) -> <id>
+    with
+      param-types := <index-get-data(|ParamTypes())>
+    where
+      <eq> (<length> arg-types, <length> param-types);
+      <zip(is-assignable-to)> (arg-types, param-types)
+
+  is-assignable-to:
+    (to-type, from-type) -> to-type
+    where
+      <eq> (from-type, to-type)
+
+
+rules // store definition and parameter types
+    
+  adjust-index-def-data(store-results |namespace, path):
+    def -> <store-results> DefData([namespace | path], Type(), type)
+    where
+      type := <type-of> def
+  
+  adjust-index-def-data(store-results |namespace, path):
+    Function(_, params, _) -> <store-results> DefData([namespace | path], ParamTypes(), types)
+    with
+      types := <map(type-of)> params

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/util.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/util.str	Tue Dec 20 12:40:10 2011	(r23815)
@@ -0,0 +1,18 @@
+module util
+
+rules
+    
+    // Applies a strategy to all items in given list with given secondary item and passes the 
+    // result on as the secondary item.
+    map-passon(s): 
+        ([item1|rest], item2) -> <map-passon(s)> (rest, <s> (item1, item2))
+        where not(<?[]> rest)
+    map-passon(s): 
+        ([item1|[]], item2) -> <s> (item1, item2)
+    map-passon(s): 
+        ([], item2) -> item2
+        
+    // Returns first item in a list.
+    get-first: 
+        [first|_] -> first
+        
\ No newline at end of file

From karltk at strategoxt.org  Tue Dec 20 13:59:54 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 20 Dec 2011 12:59:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23816 - in
	spoofax-contrib/separate-compilation-examples/csharp-partial-classses:
	. .externalToolBuilders .settings META-INF editor editor/java
	editor/java/csharppartialcl...
Message-ID: <20111220125954.8BE592B8008@mx2.tudelft.nl>

Author: karltk
Date: Tue Dec 20 12:59:54 2011
New Revision: 23816
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23816&sc=1

Log:
Initial import of CSharp partial classes experiment.

Added:
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.classpath
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.externalToolBuilders/
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.externalToolBuilders/CSharpPartialClassses build.main.xml.launch
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.project
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.settings/
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.settings/org.eclipse.jdt.core.prefs
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/META-INF/
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/META-INF/MANIFEST.MF
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.generated.xml
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.main.xml
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.properties
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Colorer.esv
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Completions.esv
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Folding.esv
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Outliner.esv
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-References.esv
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Syntax.esv
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses.main.esv
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/Activator.java
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/CSharpPartialClasssesParseController.java
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/CSharpPartialClasssesParseControllerGenerated.java
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/CSharpPartialClasssesValidator.java
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/strategies/
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/strategies/InteropRegisterer.java
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/strategies/Main.java
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/strategies/java_strategy_0_0.java
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/plugin.xml
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.generated.pp
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.pp
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.sdf
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/Common.sdf
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.aterm
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.csh
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/test-example.spt
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/check.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/generate.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/refactor.str

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.classpath	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.externalToolBuilders/CSharpPartialClassses build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.externalToolBuilders/CSharpPartialClassses build.main.xml.launch	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/csharp-partial-classses/build.main.xml}"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/csharp-partial-classses}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.project	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>csharp-partial-classses</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/CSharpPartialClassses build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.settings/org.eclipse.jdt.core.prefs	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/META-INF/MANIFEST.MF	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,21 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: CSharpPartialClassses Plug-in
+Bundle-SymbolicName: csharppartialclassses; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: csharppartialclassses.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: csharppartialclassses

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.generated.xml	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,637 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${src-gen}/csharppartialclassses/strategies/Main.java" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la csharppartialclassses.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport1" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="externaljarimport2" value=":${externaljarx}" else="">
+            <isset property="externaljarx"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-parenthesize.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper"/>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper.fallback"/>
+        </target>
+
+        <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-parenthesize.str"/>
+                <arg value="--omod"/>
+                <arg value="include/${sdfmodule}-parenthesize"/>
+                <arg value="--main-strategy"/>
+                <arg value="io-${sdfmodule}-parenthesize"/>
+                <arg value="--lang"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--rule-prefix"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--sig-module"/>
+                <arg value="include/${sdfmodule}"/>
+            </java>
+        </target>
+
+    	<target name="sdf2parenthesize.helper.fallback" unless="sdf2parenthesize.available">
+        	<echo file="${include}/${sdfmodule}-parenthesize.str" message="module include/${sdfmodule}-parenthesize rules parenthesize-${sdfmodule} = id"/>
+    	</target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg line="${aster-input}"/>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+        <!-- 
+            if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+            Only used by stratego.jvm.helper.debug 
+        -->
+        <condition property="transformer-output" value="" else="--output-rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- 
+            if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+            if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+            Only used by stratego.jvm.helper.debug
+        -->
+        <condition property="strj.input.file.type" value="str" else="rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- value determines which target will be executed.
+            If the file ".debugmode" can be found in the project root call stratego.jar.debug
+            else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+        
+        <!-- will save the stratego files with debug info in this folder -->
+        <property name="trans-debug" location="trans-debug"/>
+        
+        <!-- this helper target determines what target to call, based on debug.build.enabled -->
+        <target name="stratego.jar.helper">
+            <antcall target="${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar unless debug.build.enabled property is set --> 
+        <target name="call.stratego.jar" depends="stratego.jar">
+            <echo message="call.stratego.jar - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar.debug when debug.build.enabled property is set -->
+        <target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+            <echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- copy stratego runtime jars to utils folder -->
+        <target name="utils-files-debug" depends="utils-files">
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+        </target>
+        
+        <!-- Stratego to Java compiler with debugging capabilities -->
+        <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <!-- compile stratego to java -->
+            <antcall target="stratego.jvm.helper.debug">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <!-- compile java to class -->
+            <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+                <!-- attribute in javac: srcdir="${src-gen}" -->
+                <src path="${src-gen}"/>
+                <!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
+                <classpath>
+                    <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+                    <pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+                    <pathelement location="utils/stratego-debug-runtime-java.jar"/>
+                </classpath>
+                <!-- attribute in javac: includes="trans/**"  -->
+                <include name="trans/**"/>
+            </javac>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <!-- create a jar from the class files -->
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <!-- instrument the stratego program and compile it to java -->
+        <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+            <echo message="generate stratego with debug information"/>
+            <echo message="${basedir}"/>
+            <available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+            <!-- add debug information -->
+              <java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+                   <classpath>
+                    <pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.strategojar}"/>
+                   </classpath>
+                  <arg value="-i"/>
+                  <arg value="${trans}/${strmodule}.str"/>
+                  <arg value="--gen-dir"/>
+                  <arg value="${trans-debug}"/>
+                  <arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+                  <arg value="${basedir}"/>
+                  <!-- "arg line='val'" val should contain space-separated arguments --> 
+                  <arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+                  
+                  <!-- arguments should start with two '-'-characters -->
+                  <!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+                  <!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+                  <!-- <arg value="-output-rtree"/> --> 
+            </java>
+            <!-- now compile instrumented stratego to java -->
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <!-- put strategodebuglib.rtree on the include path -->
+                <arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+                <arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete dir="${src-gen}/trans"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.main.xml	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="CSharpPartialClassses" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="CSharpPartialClassses"/>
+        <property name="metasdfmodule" value="Stratego-CSharpPartialClassses"/>
+        <property name="esvmodule" value="CSharpPartialClassses"/>
+        <property name="strmodule" value="csharppartialclassses"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.properties	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,31 @@
+module CSharpPartialClassses-Builders
+
+imports CSharpPartialClassses-Builders.generated
+
+builders
+                                                                                   
+  // This file can be used for custom analysis, builder and refactoring rules.     
+  //                                                                               
+  // See the imported file for a brief introduction and examples.                  
+
+builders
+                                                                                                              
+  provider : include/csharppartialclassses.ctree                                                              
+  provider : include/csharppartialclassses-java.jar                                                           
+                                                                                                              
+  observer : editor-analyze                                                                                   
+                                                                                                              
+  builder  : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
+  builder  : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+                                                                                                              
+
+refactorings
+
+  pretty-print : pp-csharppartialclassses-string
+
+  refactoring ID : "Rename Entity" = rename-entity (source) (cursor)
+    shortcut : "org.eclipse.jdt.ui.edit.text.java.rename.element"
+    input
+      identifier : "new name" = ""
+
+  // on save: generate-java
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Colorer.esv	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,9 @@
+module CSharpPartialClassses-Colorer
+
+imports CSharpPartialClassses-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Completions.esv	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,31 @@
+module CSharpPartialClassses-Completions
+
+imports CSharpPartialClassses-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                             
+  // Syntax completion:                      
+                                             
+  completion template Start :
+    "module " <m> (blank)  
+                                             
+  completion template Definition :
+    "entity " <e> " {" (cursor) "}" (blank)  
+                                             
+  completion template Property : "property : Type" =
+    <x> " : " <T> (blank)  
+                                             
+
+completions
+  // Semantic (identifier) completion:   
+                                         
+  completion proposer                  : editor-complete
+                                         
+  completion trigger                   : ":"
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Folding.esv	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,9 @@
+module CSharpPartialClassses-Folding
+
+imports CSharpPartialClassses-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Outliner.esv	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,9 @@
+module CSharpPartialClassses-Outliner
+
+imports CSharpPartialClassses-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-References.esv	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,15 @@
+module CSharpPartialClassses-References
+
+imports CSharpPartialClassses-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  hover _     : editor-hover
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Syntax.esv	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,9 @@
+module CSharpPartialClassses-Syntax
+
+imports CSharpPartialClassses-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses.main.esv	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,17 @@
+
+module CSharpPartialClassses.main
+
+imports CSharpPartialClassses-Builders CSharpPartialClassses-Colorer CSharpPartialClassses-Completions CSharpPartialClassses-Folding CSharpPartialClassses-Outliner CSharpPartialClassses-References CSharpPartialClassses-Syntax
+
+language General properties
+                  
+  name          : CSharpPartialClassses
+  id            : csharppartialclassses
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the CSharpPartialClassses language"
+  url           : http://strategoxt.org
+                  
+  extensions    : csh
+  table         : include/CSharpPartialClassses.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/Activator.java	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,44 @@
+package csharppartialclassses;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "CSharpPartialClassses";
+
+  public static final String kLanguageName = "CSharpPartialClassses";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/CSharpPartialClasssesParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/CSharpPartialClasssesParseController.java	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,4 @@
+package csharppartialclassses;
+
+public class CSharpPartialClasssesParseController extends CSharpPartialClasssesParseControllerGenerated 
+{ }
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/CSharpPartialClasssesParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/CSharpPartialClasssesParseControllerGenerated.java	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,108 @@
+package csharppartialclassses;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileInputStream;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class CSharpPartialClasssesParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("CSharpPartialClassses");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    CSharpPartialClasssesParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = CSharpPartialClasssesParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = CSharpPartialClasssesParseControllerGenerated.class.getResourceAsStream(TABLE);
+      boolean filesystem = false;
+      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
+      { 
+        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
+        filesystem = true;
+      }
+      if(table == null && new File("./" + TABLE).exists())
+      { 
+        table = new FileInputStream("./" + TABLE);
+        filesystem = true;
+      }
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
+      descriptor.setAttachmentProvider(CSharpPartialClasssesParseControllerGenerated.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return CSharpPartialClasssesParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/CSharpPartialClasssesValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/CSharpPartialClasssesValidator.java	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,12 @@
+package csharppartialclassses;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class CSharpPartialClasssesValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return CSharpPartialClasssesParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/strategies/InteropRegisterer.java	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,14 @@
+package csharppartialclassses.strategies;
+
+import org.strategoxt.lang.JavaInteropRegisterer;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Helper class for {@link java_strategy_0_0}.
+ */
+public class InteropRegisterer extends JavaInteropRegisterer {
+
+  public InteropRegisterer() {
+    super(new Strategy[] { java_strategy_0_0.instance });
+  }
+}

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/strategies/Main.java	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,11 @@
+package csharppartialclassses.strategies;
+
+import org.strategoxt.lang.Context;
+
+public class Main {
+  
+  public static void init(Context context) {
+    // Called when the editor is being initialized
+  }
+
+}

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/csharppartialclassses/strategies/java_strategy_0_0.java	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,32 @@
+package csharppartialclassses.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Example Java strategy implementation.
+ *
+ * This strategy can be used by editor services and can be called
+ * in Stratego modules by declaring it as an external strategy
+ * as follows:
+ *
+ * <code>
+ *  external java-strategy(|)
+ * </code>
+ *
+ * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+ */
+public class java_strategy_0_0 extends Strategy {
+  
+  public static java_strategy_0_0 instance = new java_strategy_0_0();
+
+  @Override
+  public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+    context.getIOAgent().printError("Input for java-strategy: " + current);
+    ITermFactory factory = context.getFactory();
+    return factory.makeString("Regards from java-strategy");
+  }
+
+}

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/plugin.xml	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="csh" description="CSharpPartialClassses" language="CSharpPartialClassses" derivedFrom="DynamicRoot" validator="csharppartialclassses.CSharpPartialClasssesValidator" validatorClass="csharppartialclassses.CSharpPartialClasssesValidator"></language>
+       </extension>
+       <extension id="csharppartialclassses.parser" name="CSharpPartialClassses Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="csharppartialclassses.CSharpPartialClasssesParseController" language="CSharpPartialClassses">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.generated.pp	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,14 @@
+[
+   Module                   -- _1,
+   Module.1:iter-star       -- _1,
+   PartialClass             -- KW["partial"] KW["class"] _1 KW["{"] _2 KW["}"],
+   PartialClass.2:iter-star -- _1,
+   Class                    -- KW["class"] _1 KW["{"] _2 KW["}"],
+   Class.2:iter-star        -- _1,
+   Field                    -- _1 _2 KW[";"],
+   Method                   -- _1 _2 KW["("] KW[")"] KW["{"] _3 KW["}"],
+   Method.3:iter-star       -- _1,
+   Type                     -- _1,
+   Return                   -- KW["return"] _1 KW[";"],
+   VarRef                   -- _1
+]
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.pp	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also CSharpPartialClassses.generated.pp)
+[]

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.sdf	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,24 @@
+module CSharpPartialClassses
+
+imports Common
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+  
+    Definition*                                 -> Start {cons("Module")}
+    
+    "partial" "class" ID "{" ClassBodyDecl* "}" -> Definition {cons("PartialClass")}
+    "class" ID "{" ClassBodyDecl* "}"      -> Definition {cons("Class")}
+    
+    Type ID ";"                                 -> ClassBodyDecl {cons("Field")}
+    Type ID "(" ")" "{" Stmt* "}"    -> ClassBodyDecl {cons("Method")} 
+    
+    ID                                          -> Type {cons("Type")}
+    
+     "return" Expr ";"                          -> Stmt{cons("Return")}
+     
+     ID                                         -> Expr{cons("VarRef")}

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/Common.sdf	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9]* -> ID
+    "-"? [0-9]+          -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.aterm	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,19 @@
+Module(
+  [ Class(
+      "User"
+    , [ Field(Type("string"), "name")
+      , Field(Type("string"), "password")
+      , Field(Type("URL"), "homepage")
+      ]
+    )
+  , Class(
+      "BlogPosting"
+    , [Field(Type("User"), "poster"), Field(Type("string"), "body")]
+    )
+  , PartialClass("URL", [Field(Type("string"), "location")])
+  , PartialClass(
+      "URL"
+    , [Method(Type("void"), "Reverse", [Return(VarRef("location"))])]
+    )
+  ]
+)
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.csh
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.csh	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,21 @@
+class User {
+  string name; 
+  string password; 
+  URL homepage; 
+}
+
+class BlogPosting {
+  User poster; 
+  string body; 
+}
+
+partial class URL {
+  string location; 
+}
+
+partial class URL {
+	
+	void Reverse() {
+		return location;
+	}
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/test-example.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/test-example.spt	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,22 @@
+/**
+* Unit tests for the CSharpPartialClassses language.
+*/
+module test-example
+
+language CSharpPartialClassses
+
+setup Common [[
+  module example
+]]
+
+test Simple entity [[
+  entity User {
+    name : String
+  }
+]] 0 errors
+
+test Entity with reference to non-existing entity [[
+  entity User {
+    name : Strin
+  }
+]] 1 error

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/check.str	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,51 @@
+module check
+
+imports
+  libstratego-lib
+  include/CSharpPartialClassses
+  lib/editor-common.generated
+
+rules
+
+  // Analysis: does a topdown traversal of the tree,
+  // and tries to apply the record-entity rule.
+  analyze:
+    t -> t
+    with
+      <topdown(try(record-entity))> t
+
+  // Records the definition of an entity in a dynamic rule GetEntity.
+  record-entity:
+    Entity(x, body) -> Entity(x, body)
+    with
+      // For a name 'x', GetEntity will return the original 'x' tree node
+      rules(
+        GetEntity :+ x -> x
+      )
+rules
+    
+  // Reports an error if a property type is undefined.
+  // This error is reported on the type name 'type'.
+  constraint-error:
+    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
+    where
+      not(!type => "String"); // String and Int are built-in types
+      not(!type => "Int");
+      not(<GetEntity> type) // no entity for this type
+  
+  // Reports an error if an entity is defined more than once.
+  // This constraint is implemented by testing if the "bag" of
+  // all entities x is not a singleton list.
+  constraint-error:
+    Entity(x, _) -> (x, $[Duplicate entity name])
+    where
+      not(<bagof-GetEntity> x => [_])
+  
+  constraint-warning:
+    Entity(x, _) -> (x, $[Entity names must start with a capital])
+    where
+      not(<string-starts-with-capital> x)
+  
+  constraint-note:
+    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
+                                      (this note is defined in trans/check.str) ])

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,62 @@
+module csharppartialclassses
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/CSharpPartialClassses
+  lib/editor-common.generated
+  check
+  generate
+  refactor
+
+rules // Main editor interface (defined by editor/CSharpPartialClassses-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast;
+      notes    := <collect-all(constraint-note, conc)> ast
+  
+  // Transforms a selection to Java
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
+    where
+      <debug(!"Resolve: ")> node; 
+      Type(type) := node; 
+      target     := <GetEntity> type
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) ->
+    ["String", "Int" | proposals]
+    where
+      if !node => Type(COMPLETION(prefix)) then
+        proposals := <all-keys-GetEntity>
+      end

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/generate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/generate.str	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,47 @@
+module generate
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/CSharpPartialClassses
+  lib/editor-common.generated
+
+rules
+
+  to-java:
+    Module(x, d*) ->
+    $[ package [x];
+       
+       [d'*]
+     ]
+    with
+      d'* := <to-java> d*
+  
+  to-java:
+    Entity(x, p*) ->
+    $[ class [x] {
+           [p'*]
+       }
+     ]
+    with
+      p'* := <to-java> p*
+
+  to-java:
+    Property(x, Type(t)) -> $[
+      private [t] [x];
+      
+      public [t] get_[x] {
+          return [x];
+      }
+      
+      public void set_[x] ([t] [x]) {
+          this.[x] = [x];    
+      }
+  ]
+  
+  to-java:
+    Type(t) -> t
+
+  to-java:
+    t* -> <map(to-java)> t*

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/refactor.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/refactor.str	Tue Dec 20 12:59:54 2011	(r23816)
@@ -0,0 +1,28 @@
+module refactor
+
+imports
+  lib/refactor-common.generated
+  include/CSharpPartialClassses
+  lib/editor-common.generated  
+  csharppartialclassses
+
+rules
+ 
+  rename-entity:
+    (newname, selected-name, position, ast, path, project-path) -> ([(ast, new-ast)], fatal-errors, errors, warnings)
+    with
+      new-ast  := <topdown(try(rename-type(|selected-name, newname)))> ast; 
+      (errors, warnings) := <semantic-constraint-issues> (ast, new-ast);
+      fatal-errors := []
+
+  rename-type(|old-name, new-name):
+    Entity(old-name, y) -> Entity(new-name, y)
+
+  rename-type(|old-name, new-name):
+    Type(old-name) -> Type(new-name)
+    
+  semantic-constraint-issues:
+    (ast, new-ast) -> (<diff>(new-errors, errors), <diff>(new-warnings, warnings))
+    where
+    	(_, errors, warnings, _) := <editor-analyze> (ast, "", "");
+    	(_, new-errors, new-warnings, _) := <editor-analyze> (new-ast, "", "")

From karltk at strategoxt.org  Tue Dec 20 14:10:37 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 20 Dec 2011 13:10:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23817 -
	spoofax-contrib/separate-compilation-examples/csharp-partial-classses/lib
Message-ID: <20111220131037.13A937F8039@mx1.tudelft.nl>

Author: karltk
Date: Tue Dec 20 13:10:36 2011
New Revision: 23817
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23817&sc=1

Log:
Added missing generated files.

Added:
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/lib/
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/lib/editor-common.generated.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/lib/refactor-common.generated.str

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/lib/editor-common.generated.str	Tue Dec 20 13:10:36 2011	(r23817)
@@ -0,0 +1,255 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-csharppartialclassses-file
+  parse-csharppartialclassses-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/CSharpPartialClassses.tbl)>
+    )
+
+  parse-string = parse-csharppartialclassses-string
+  parse-csharppartialclassses-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/CSharpPartialClassses.tbl)>
+    )
+  
+  parse-stream = parse-csharppartialclassses-stream
+  parse-csharppartialclassses-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/CSharpPartialClassses.tbl)>
+    )
+
+  pp-csharppartialclassses-string =
+    ast2abox(|[<import-term(include/CSharpPartialClassses.generated.pp.af)>,
+               <import-term(include/CSharpPartialClassses.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-offset    = prim("SSL_EXT_origin_offset", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "CSharpPartialClassses", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    ![<id>]; all(s); ?[<id>]
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/csharppartialclassses.str file. These definitions should also be automatically 
+  // generated in the imported include/CSharpPartialClassses.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/lib/refactor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/lib/refactor-common.generated.str	Tue Dec 20 13:10:36 2011	(r23817)
@@ -0,0 +1,67 @@
+module lib/refactor-common.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+
+strategies //transformation
+
+/**
+ * Replaces elements in a list (once, starting from the right)
+ * @param match strategy for partial list
+ * @param new elements List(b)
+ * @type List(a) -> List(a,b)
+ */
+replace-sublist(match-sublist|new-elems): 
+  list -> <
+    at-suffix(match-sublist;!new-elems) <+
+    (
+      init; 
+      replace-sublist(match-sublist|new-elems);
+      at-end(![<last> list])
+    )
+  > list 
+
+/**
+ * Inserts an element at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list element 
+ * @type Term -> Term
+ */
+insert-elem(|pos, elem)=
+  insert-sublist(|pos, [elem])
+
+/**
+ * Inserts a list of elements at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list elements 
+ * @type Term -> Term
+ */	
+insert-sublist(|pos, elems)=
+  at-position(
+    split-at(|<last> pos);
+    ?(prefix, suffix);
+    <concat>[prefix, elems, suffix]
+    |<init> pos
+  )
+
+
+strategies //user-input
+
+/**
+ * Opens an input dialog for one string value that represents an identifier
+ * The language is used to check if the input value matches the identifier pattern
+ * @type (String, String, String, String) -> String
+ */
+input-dialog:
+  (language, title, label, default-value) -> <prim("SSL_EXT_newnamedialog", language, title, label, default-value)>
+  
+input-dialog:
+  (title, label, default-value) -> <input-dialog>("", title, label, default-value)
+
+strategies //pp-table
+	
+get-pp-table=
+  import-term(include/CSharpPartialClassses.generated.pp.af)
+	

From karltk at strategoxt.org  Tue Dec 20 15:02:46 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 20 Dec 2011 14:02:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23818 - in
	spoofax/trunk: org.spoofax.jssglr spoofax/org.spoofax.jssglr
Message-ID: <20111220140246.87EABCC0DA@mx4.tudelft.nl>

Author: karltk
Date: Tue Dec 20 14:02:46 2011
New Revision: 23818
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23818&sc=1

Log:
Moved to the neighbourhood of JSGLR.

Added:
   spoofax/trunk/spoofax/org.spoofax.jssglr/   (props changed)
      - copied from r23817, spoofax/trunk/org.spoofax.jssglr/
Deleted:
   spoofax/trunk/org.spoofax.jssglr/

From tobivollebregt at gmail.com  Tue Dec 20 15:22:42 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 20 Dec 2011 14:22:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23819 -
	strategoxt/trunk/stratego-libraries/gpp/lib/stratego/gpp
Message-ID: <20111220142242.EDBBC2B8008@mx2.tudelft.nl>

Author: tvo
Date: Tue Dec 20 14:22:42 2011
New Revision: 23819
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23819&sc=1

Log:
BOX:
* Implement @todo Substract last hspace from xpos
  (fixes position accounting after HV box)
* Remove @todo Handle vs and is options, it worked already
* Filter unreal boxes in HV, consistent with what H and V do

Modified:
   strategoxt/trunk/stratego-libraries/gpp/lib/stratego/gpp/BoxToText.str

Modified: strategoxt/trunk/stratego-libraries/gpp/lib/stratego/gpp/BoxToText.str
==============================================================================
--- strategoxt/trunk/stratego-libraries/gpp/lib/stratego/gpp/BoxToText.str	Tue Dec 20 14:02:46 2011	(r23818)
+++ strategoxt/trunk/stratego-libraries/gpp/lib/stratego/gpp/BoxToText.str	Tue Dec 20 14:22:42 2011	(r23819)
@@ -1,4 +1,4 @@
-/** 
+/**
  * This is a simple Box to text converter.
  * It formats H, HV, A/R and ALT boxes.
  *
@@ -72,8 +72,6 @@
   /**
    * HV
    *
-   * @todo Handle vs and is options
-   * @todo Substract last hspace from xpos
    * @type (Box, Int) -> (Strs, Int)
    */
   abox2text-HV(rec : t * t -> t | xpos, width) =
@@ -84,15 +82,21 @@
     ; <gpp-vs-text> sopt => vs
     ; <length> hs-chars => hsl
     ; <add> (xpos, <gpp-is-length> sopt) => left-xpos
-
-    ; !(bs, [([], xpos)])
-    ; foldl(
-        gpp-hv-add-to-hbox(rec | hsl, width)
-        <+ gpp-hv-in-new-vbox(rec | hsl, left-xpos, width)
-      )
-    ; reverse; map((reverse, id))
-    ; map((<separate-by> (hs, <id>), id))
-    ; gpp-format-vbox(|sopt, xpos)
+    ; <filter(gpp-is-real-vbox)> bs
+    ; if ?[] then
+        !([], xpos)
+      else
+        !(<id>, [([], xpos)])
+        ; foldl(
+            gpp-hv-add-to-hbox(rec | hsl, width)
+            <+ gpp-hv-in-new-vbox(rec | hsl, left-xpos, width)
+          )
+          // Substract last hspace from xpos
+        ; [(id, <subt> (<id>, hsl)) | id]
+        ; reverse; map((reverse, id))
+        ; map((<separate-by> (hs, <id>), id))
+        ; gpp-format-vbox(|sopt, xpos)
+      end
 
   /**
    * @type Box * [Int * [String]] -> [Int * [String]]
@@ -102,7 +106,7 @@
     where
       <rec(|xpos)> box => (str, new-xpos)
       ; (<leq> (new-xpos, width) + (!width => 0))
-        
+
   gpp-hv-in-new-vbox(rec : t * t -> t | hsl, left-xpos, width) :
     (box, vbs) -> [([str], <add> (new-xpos, hsl)) | vbs]
     where
@@ -114,7 +118,7 @@
    * H
    *
    * @type (Box, Int) -> (Strs, Int)
-   */       
+   */
   abox2text-H(rec : t * t -> t | xpos, width) =
     ?H(sopt, bs)
 
@@ -169,7 +173,7 @@
 
   /**
    * A
-   * 
+   *
    * The first two rules are to handle empty alignment operators, i.e., A
    * boxses with [] or [[]] as third argument.
    * Without subboxes ([] as third argument)
@@ -236,7 +240,7 @@
    */
   gpp-to-matrix(|nr-cols) =
     map(gpp-FitToMax(|nr-cols))
-  
+
   gpp-FitToMax(|nr-cols) =
     ?lst
     ; where(length => my-length)
@@ -277,7 +281,7 @@
 
   abox2text-R(rec : t * t -> t | xpos, width) :
     R(sopt, bs) -> <rec(|xpos)> HV(sopt, bs)
-      
+
   abox2text-ALT(rec : t * t -> t | xpos, width) =
     ?ALT(a1, a2)
     ; <rec(|xpos)> a1 => r1@(s, xpos2)
@@ -286,7 +290,7 @@
       else
         <rec(|xpos)> a2
       end
-         
+
   abox2text-list(rec : t * t -> t | xpos, width) :
     [b] -> <rec(|xpos)> b
 

From tobivollebregt at gmail.com  Tue Dec 20 15:32:14 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 20 Dec 2011 14:32:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23820 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.pp/editor
Message-ID: <20111220143214.BBA882B8010@mx2.tudelft.nl>

Author: tvo
Date: Tue Dec 20 14:32:14 2011
New Revision: 23820
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23820&sc=1

Log:
Fix ctrl+/ in PP editor

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.pp/editor/BoxPP-Syntax.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.pp/editor/BoxPP-Syntax.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.pp/editor/BoxPP-Syntax.esv	Tue Dec 20 14:22:42 2011	(r23819)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.pp/editor/BoxPP-Syntax.esv	Tue Dec 20 14:32:14 2011	(r23820)
@@ -1,9 +1,25 @@
 module BoxPP-Syntax
 
-imports BoxPP-Syntax.generated
+// imports BoxPP-Syntax.generated
 
 language
-                                                                   
-  // This file can be used for custom syntax rules.                
-  //                                                               
-  // See the imported file for a brief introduction and examples.  
\ No newline at end of file
+
+  // This file can be used for custom syntax rules.
+  //
+  // See the imported file for a brief introduction and examples.
+
+  // Comment constructs:
+  line comment                           : "%%"
+
+  // Fences (used for matching,
+  // inserting, indenting brackets):
+  fences                                 : [ ]
+                                           ( )
+                                           { }
+
+  // Automatic indent hints
+  // (indent after these tokens):
+  indent after                           : "--"
+
+  // Regular expression for identifiers:
+  identifier lexical                     : "[A-Za-z0-9_]+"

From karltk at strategoxt.org  Tue Dec 20 15:41:08 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 20 Dec 2011 14:41:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23822 - in
	spoofax-contrib/separate-compilation-examples/c-without-macros:
	. .externalToolBuilders .settings META-INF editor editor/java
	editor/java/cwithoutmacros editor/...
Message-ID: <20111220144108.4817FCC05F@mx4.tudelft.nl>

Author: karltk
Date: Tue Dec 20 14:41:08 2011
New Revision: 23822
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23822&sc=1

Log:
Initial import of C without macros test language.

Added:
   spoofax-contrib/separate-compilation-examples/c-without-macros/
   spoofax-contrib/separate-compilation-examples/c-without-macros/.classpath
   spoofax-contrib/separate-compilation-examples/c-without-macros/.externalToolBuilders/
   spoofax-contrib/separate-compilation-examples/c-without-macros/.externalToolBuilders/C-without-macros build.main.xml.launch
   spoofax-contrib/separate-compilation-examples/c-without-macros/.project
   spoofax-contrib/separate-compilation-examples/c-without-macros/.settings/
   spoofax-contrib/separate-compilation-examples/c-without-macros/.settings/org.eclipse.jdt.core.prefs
   spoofax-contrib/separate-compilation-examples/c-without-macros/META-INF/
   spoofax-contrib/separate-compilation-examples/c-without-macros/META-INF/MANIFEST.MF
   spoofax-contrib/separate-compilation-examples/c-without-macros/build.generated.xml
   spoofax-contrib/separate-compilation-examples/c-without-macros/build.main.xml
   spoofax-contrib/separate-compilation-examples/c-without-macros/build.properties
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Colorer.esv
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Completions.esv
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Folding.esv
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Outliner.esv
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-References.esv
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Syntax.esv
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros.main.esv
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/Activator.java
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/CwithoutmacrosParseController.java
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/CwithoutmacrosParseControllerGenerated.java
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/CwithoutmacrosValidator.java
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/strategies/
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/strategies/InteropRegisterer.java
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/strategies/Main.java
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/strategies/java_strategy_0_0.java
   spoofax-contrib/separate-compilation-examples/c-without-macros/lib/
   spoofax-contrib/separate-compilation-examples/c-without-macros/lib/editor-common.generated.str
   spoofax-contrib/separate-compilation-examples/c-without-macros/lib/refactor-common.generated.str
   spoofax-contrib/separate-compilation-examples/c-without-macros/plugin.xml
   spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/
   spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.generated.pp
   spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.pp
   spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.sdf
   spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/Common.sdf
   spoofax-contrib/separate-compilation-examples/c-without-macros/test/
   spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.aterm
   spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.cwi
   spoofax-contrib/separate-compilation-examples/c-without-macros/test/test-example.spt
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/check.str
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/generate.str
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/refactor.str

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/.classpath	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/.externalToolBuilders/C-without-macros build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/.externalToolBuilders/C-without-macros build.main.xml.launch	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/c-without-macros/build.main.xml}"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/c-without-macros}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/.project	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>c-without-macros</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/C-without-macros build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/.settings/org.eclipse.jdt.core.prefs	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/META-INF/MANIFEST.MF	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,21 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: Cwithoutmacros Plug-in
+Bundle-SymbolicName: cwithoutmacros; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: cwithoutmacros.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: cwithoutmacros

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/build.generated.xml	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,637 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${src-gen}/cwithoutmacros/strategies/Main.java" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la cwithoutmacros.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport1" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="externaljarimport2" value=":${externaljarx}" else="">
+            <isset property="externaljarx"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-parenthesize.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper"/>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper.fallback"/>
+        </target>
+
+        <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-parenthesize.str"/>
+                <arg value="--omod"/>
+                <arg value="include/${sdfmodule}-parenthesize"/>
+                <arg value="--main-strategy"/>
+                <arg value="io-${sdfmodule}-parenthesize"/>
+                <arg value="--lang"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--rule-prefix"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--sig-module"/>
+                <arg value="include/${sdfmodule}"/>
+            </java>
+        </target>
+
+    	<target name="sdf2parenthesize.helper.fallback" unless="sdf2parenthesize.available">
+        	<echo file="${include}/${sdfmodule}-parenthesize.str" message="module include/${sdfmodule}-parenthesize rules parenthesize-${sdfmodule} = id"/>
+    	</target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg line="${aster-input}"/>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+        <!-- 
+            if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+            Only used by stratego.jvm.helper.debug 
+        -->
+        <condition property="transformer-output" value="" else="--output-rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- 
+            if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+            if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+            Only used by stratego.jvm.helper.debug
+        -->
+        <condition property="strj.input.file.type" value="str" else="rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- value determines which target will be executed.
+            If the file ".debugmode" can be found in the project root call stratego.jar.debug
+            else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+        
+        <!-- will save the stratego files with debug info in this folder -->
+        <property name="trans-debug" location="trans-debug"/>
+        
+        <!-- this helper target determines what target to call, based on debug.build.enabled -->
+        <target name="stratego.jar.helper">
+            <antcall target="${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar unless debug.build.enabled property is set --> 
+        <target name="call.stratego.jar" depends="stratego.jar">
+            <echo message="call.stratego.jar - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar.debug when debug.build.enabled property is set -->
+        <target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+            <echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- copy stratego runtime jars to utils folder -->
+        <target name="utils-files-debug" depends="utils-files">
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+        </target>
+        
+        <!-- Stratego to Java compiler with debugging capabilities -->
+        <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <!-- compile stratego to java -->
+            <antcall target="stratego.jvm.helper.debug">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <!-- compile java to class -->
+            <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+                <!-- attribute in javac: srcdir="${src-gen}" -->
+                <src path="${src-gen}"/>
+                <!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
+                <classpath>
+                    <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+                    <pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+                    <pathelement location="utils/stratego-debug-runtime-java.jar"/>
+                </classpath>
+                <!-- attribute in javac: includes="trans/**"  -->
+                <include name="trans/**"/>
+            </javac>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <!-- create a jar from the class files -->
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <!-- instrument the stratego program and compile it to java -->
+        <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+            <echo message="generate stratego with debug information"/>
+            <echo message="${basedir}"/>
+            <available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+            <!-- add debug information -->
+              <java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+                   <classpath>
+                    <pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.strategojar}"/>
+                   </classpath>
+                  <arg value="-i"/>
+                  <arg value="${trans}/${strmodule}.str"/>
+                  <arg value="--gen-dir"/>
+                  <arg value="${trans-debug}"/>
+                  <arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+                  <arg value="${basedir}"/>
+                  <!-- "arg line='val'" val should contain space-separated arguments --> 
+                  <arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+                  
+                  <!-- arguments should start with two '-'-characters -->
+                  <!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+                  <!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+                  <!-- <arg value="-output-rtree"/> --> 
+            </java>
+            <!-- now compile instrumented stratego to java -->
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <!-- put strategodebuglib.rtree on the include path -->
+                <arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+                <arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete dir="${src-gen}/trans"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/build.main.xml	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="C-without-macros" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="C-without-macros"/>
+        <property name="metasdfmodule" value="Stratego-C-without-macros"/>
+        <property name="esvmodule" value="C-without-macros"/>
+        <property name="strmodule" value="c_without_macros"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/build.properties	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,31 @@
+module C-without-macros-Builders
+
+imports C-without-macros-Builders.generated
+
+builders
+                                                                                   
+  // This file can be used for custom analysis, builder and refactoring rules.     
+  //                                                                               
+  // See the imported file for a brief introduction and examples.                  
+
+builders
+                                                                                                              
+  provider : include/c_without_macros.ctree                                                                   
+  provider : include/c_without_macros-java.jar                                                                
+                                                                                                              
+  observer : editor-analyze                                                                                   
+                                                                                                              
+  builder  : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
+  builder  : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+                                                                                                              
+
+refactorings
+
+  pretty-print : pp-c_without_macros-string
+
+  refactoring ID : "Rename Entity" = rename-entity (source) (cursor)
+    shortcut : "org.eclipse.jdt.ui.edit.text.java.rename.element"
+    input
+      identifier : "new name" = ""
+
+  // on save: generate-java
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Colorer.esv	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,9 @@
+module C-without-macros-Colorer
+
+imports C-without-macros-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Completions.esv	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,31 @@
+module C-without-macros-Completions
+
+imports C-without-macros-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                             
+  // Syntax completion:                      
+                                             
+  completion template Start :
+    "module " <m> (blank)  
+                                             
+  completion template Definition :
+    "entity " <e> " {" (cursor) "}" (blank)  
+                                             
+  completion template Property : "property : Type" =
+    <x> " : " <T> (blank)  
+                                             
+
+completions
+  // Semantic (identifier) completion:   
+                                         
+  completion proposer                  : editor-complete
+                                         
+  completion trigger                   : ":"
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Folding.esv	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,9 @@
+module C-without-macros-Folding
+
+imports C-without-macros-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Outliner.esv	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,9 @@
+module C-without-macros-Outliner
+
+imports C-without-macros-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-References.esv	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,15 @@
+module C-without-macros-References
+
+imports C-without-macros-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  hover _     : editor-hover
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Syntax.esv	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,9 @@
+module C-without-macros-Syntax
+
+imports C-without-macros-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros.main.esv	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,17 @@
+
+module C-without-macros.main
+
+imports C-without-macros-Builders C-without-macros-Colorer C-without-macros-Completions C-without-macros-Folding C-without-macros-Outliner C-without-macros-References C-without-macros-Syntax
+
+language General properties
+
+  name          : C-without-macros
+  id            : cwithoutmacros
+  extends       : Root
+
+  description   : "Spoofax/IMP-generated editor for the C-without-macros language"
+  url           : http://strategoxt.org
+
+  extensions    : cwi
+  table         : include/C-without-macros.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/Activator.java	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,44 @@
+package cwithoutmacros;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "Cwithoutmacros";
+
+  public static final String kLanguageName = "Cwithoutmacros";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/CwithoutmacrosParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/CwithoutmacrosParseController.java	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,4 @@
+package cwithoutmacros;
+
+public class CwithoutmacrosParseController extends CwithoutmacrosParseControllerGenerated 
+{ }
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/CwithoutmacrosParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/CwithoutmacrosParseControllerGenerated.java	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,108 @@
+package cwithoutmacros;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileInputStream;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class CwithoutmacrosParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("C-without-macros");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    CwithoutmacrosParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = CwithoutmacrosParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = CwithoutmacrosParseControllerGenerated.class.getResourceAsStream(TABLE);
+      boolean filesystem = false;
+      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
+      { 
+        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
+        filesystem = true;
+      }
+      if(table == null && new File("./" + TABLE).exists())
+      { 
+        table = new FileInputStream("./" + TABLE);
+        filesystem = true;
+      }
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
+      descriptor.setAttachmentProvider(CwithoutmacrosParseControllerGenerated.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return CwithoutmacrosParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/CwithoutmacrosValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/CwithoutmacrosValidator.java	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,12 @@
+package cwithoutmacros;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class CwithoutmacrosValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return CwithoutmacrosParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/strategies/InteropRegisterer.java	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,14 @@
+package cwithoutmacros.strategies;
+
+import org.strategoxt.lang.JavaInteropRegisterer;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Helper class for {@link java_strategy_0_0}.
+ */
+public class InteropRegisterer extends JavaInteropRegisterer {
+
+  public InteropRegisterer() {
+    super(new Strategy[] { java_strategy_0_0.instance });
+  }
+}

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/strategies/Main.java	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,11 @@
+package cwithoutmacros.strategies;
+
+import org.strategoxt.lang.Context;
+
+public class Main {
+  
+  public static void init(Context context) {
+    // Called when the editor is being initialized
+  }
+
+}

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/cwithoutmacros/strategies/java_strategy_0_0.java	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,32 @@
+package cwithoutmacros.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Example Java strategy implementation.
+ *
+ * This strategy can be used by editor services and can be called
+ * in Stratego modules by declaring it as an external strategy
+ * as follows:
+ *
+ * <code>
+ *  external java-strategy(|)
+ * </code>
+ *
+ * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+ */
+public class java_strategy_0_0 extends Strategy {
+  
+  public static java_strategy_0_0 instance = new java_strategy_0_0();
+
+  @Override
+  public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+    context.getIOAgent().printError("Input for java-strategy: " + current);
+    ITermFactory factory = context.getFactory();
+    return factory.makeString("Regards from java-strategy");
+  }
+
+}

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/lib/editor-common.generated.str	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,255 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-c_without_macros-file
+  parse-c_without_macros-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/C-without-macros.tbl)>
+    )
+
+  parse-string = parse-c_without_macros-string
+  parse-c_without_macros-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/C-without-macros.tbl)>
+    )
+  
+  parse-stream = parse-c_without_macros-stream
+  parse-c_without_macros-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/C-without-macros.tbl)>
+    )
+
+  pp-c_without_macros-string =
+    ast2abox(|[<import-term(include/C-without-macros.generated.pp.af)>,
+               <import-term(include/C-without-macros.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-offset    = prim("SSL_EXT_origin_offset", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "C-without-macros", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    ![<id>]; all(s); ?[<id>]
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/c_without_macros.str file. These definitions should also be automatically 
+  // generated in the imported include/C-without-macros.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/lib/refactor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/lib/refactor-common.generated.str	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,67 @@
+module lib/refactor-common.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+
+strategies //transformation
+
+/**
+ * Replaces elements in a list (once, starting from the right)
+ * @param match strategy for partial list
+ * @param new elements List(b)
+ * @type List(a) -> List(a,b)
+ */
+replace-sublist(match-sublist|new-elems): 
+  list -> <
+    at-suffix(match-sublist;!new-elems) <+
+    (
+      init; 
+      replace-sublist(match-sublist|new-elems);
+      at-end(![<last> list])
+    )
+  > list 
+
+/**
+ * Inserts an element at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list element 
+ * @type Term -> Term
+ */
+insert-elem(|pos, elem)=
+  insert-sublist(|pos, [elem])
+
+/**
+ * Inserts a list of elements at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list elements 
+ * @type Term -> Term
+ */	
+insert-sublist(|pos, elems)=
+  at-position(
+    split-at(|<last> pos);
+    ?(prefix, suffix);
+    <concat>[prefix, elems, suffix]
+    |<init> pos
+  )
+
+
+strategies //user-input
+
+/**
+ * Opens an input dialog for one string value that represents an identifier
+ * The language is used to check if the input value matches the identifier pattern
+ * @type (String, String, String, String) -> String
+ */
+input-dialog:
+  (language, title, label, default-value) -> <prim("SSL_EXT_newnamedialog", language, title, label, default-value)>
+  
+input-dialog:
+  (title, label, default-value) -> <input-dialog>("", title, label, default-value)
+
+strategies //pp-table
+	
+get-pp-table=
+  import-term(include/C-without-macros.generated.pp.af)
+	

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/plugin.xml	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="cwi" description="C-without-macros" language="C-without-macros" derivedFrom="DynamicRoot" validator="cwithoutmacros.CwithoutmacrosValidator" validatorClass="cwithoutmacros.CwithoutmacrosValidator"></language>
+       </extension>
+       <extension id="cwithoutmacros.parser" name="C-without-macros Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="cwithoutmacros.CwithoutmacrosParseController" language="C-without-macros">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.generated.pp	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,30 @@
+[
+   Module                  -- _1,
+   Module.1:iter-star      -- _1,
+   FunDecl                 -- _1 _2 KW["("] _3 KW[")"] KW["{"] _4 KW["}"],
+   FunDecl.3:iter-star-sep -- _1 KW[","],
+   FunDecl.4:iter-star     -- _1,
+   Param                   -- _1 _2,
+   TypeDecl                -- _1 KW[";"],
+   TypeDef                 -- KW["typedef"] _1 _2,
+   TypeDef                 -- KW["typedef"] _1 _2,
+   StructDecl              -- KW["struct"] _1 KW["{"] _2 KW["}"],
+   StructDecl.2:iter-star  -- _1,
+   Field                   -- _1 _2 KW[";"],
+   VarDecl                 -- _1 _2 KW[";"],
+   Expr                    -- _1 KW[";"],
+   Assign                  -- _1 KW["="] _2 KW[";"],
+   Return                  -- KW["return"] _1 KW[";"],
+   StrLit                  -- _1,
+   Call                    -- _1 KW["("] _2 KW[")"],
+   Call.2:iter-star-sep    -- _1 KW[","],
+   SizeOf                  -- KW["sizeof"] KW["("] _1 KW[")"],
+   Deref                   -- _1 KW["."] _2,
+   VarRef                  -- _1,
+   Type                    -- _1,
+   Char                    -- KW["char"],
+   Int                     -- KW["int"],
+   Void                    -- KW["void"],
+   Pointer                 -- _1 KW["*"],
+   StructRef               -- KW["struct"] _1
+]
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.pp	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also C-without-macros.generated.pp)
+[]

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.sdf	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,42 @@
+module C-without-macros
+
+imports Common
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+
+    Definition*                                 -> Start {cons("Module")}
+
+    Type ID "(" {Param "," }* ")" "{" Stmt* "}" -> Definition {cons("FunDecl")}
+
+    Type ID                                     -> Param{cons("Param")}
+
+    TypeDecl ";"                                -> Definition {cons("TypeDecl")}
+
+    "typedef" Type ID                           -> TypeDecl {cons("TypeDef")}
+    "typedef" TypeDecl ID                       -> TypeDecl {cons("TypeDef")} 
+    "struct" ID "{" Field* "}"                  -> TypeDecl {cons("StructDecl")}
+
+    Type ID ";"                                 -> Field {cons("Field")}
+
+    Type ID ";"                                 -> Stmt {cons("VarDecl")}
+    Expr ";"                                    -> Stmt {cons("Expr")}
+    Expr "=" Expr ";"                           -> Stmt {cons("Assign")}
+    "return" Expr ";"                           -> Stmt {cons("Return")}
+
+    STRING                                      -> Expr {cons("StrLit")}
+    ID "(" {Expr ","}* ")"                      -> Expr {cons("Call"),avoid}
+    "sizeof" "(" Type ")"                       -> Expr {cons("SizeOf")}
+    Expr "." ID                                 -> Expr {cons("Deref")}
+    ID                                          -> Expr {cons("VarRef")}
+
+    ID          -> Type{cons("Type"), avoid}
+    "char"      -> Type{cons("Char")} 
+    "int"       -> Type{cons("Int")}
+    "void"      -> Type{cons("Void")}
+    Type "*"    -> Type{cons("Pointer"), left}
+    "struct" ID -> Type{cons("StructRef")}

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/Common.sdf	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+
+    [a-zA-Z][a-zA-Z0-9\_]* -> ID
+    "-"? [0-9]+          -> INT
+
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+
+    [\ \t\n\r] -> LAYOUT
+
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+
+    -> EOF
+
+  lexical restrictions
+
+    %% Ensure greedy matching for lexicals
+
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+
+    %% EOF may not be followed by any char
+
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.aterm	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,31 @@
+Module(
+  [ TypeDecl(
+      TypeDef(
+        StructDecl(
+          "blog"
+        , [Field(Pointer(Char()), "posterName"), Field(Int(), "postCount")]
+        )
+      , "blog_t"
+      )
+    )
+  , FunDecl(
+      Pointer(Char())
+    , "foo"
+    , [Param(Pointer(Type("blog_t")), "b")]
+    , [Return(Deref(VarRef("b"), "posterName"))]
+    )
+  , FunDecl(
+      Int()
+    , "main"
+    , []
+    , [ VarDecl(Pointer(Type("blot_t")), "b")
+      , Assign(
+          VarRef("b")
+        , Call("malloc", [SizeOf(Type("blog_t"))])
+        )
+      , Assign(Deref(VarRef("b"), "posterName"), StrLit("\"Frodo\""))
+      , Expr(Call("foo", [VarRef("b")]))
+      ]
+    )
+  ]
+)
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.cwi
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.cwi	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,15 @@
+typedef struct blog {
+    char *posterName;
+    int postCount;
+} blog_t;
+
+char *foo(blog_t* b) { 
+    return b.posterName; 
+}
+
+int main() { 
+    blot_t* b;
+    b = malloc(sizeof(blog_t));
+    b.posterName = "Frodo";
+    foo(b);
+}

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/test/test-example.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/test/test-example.spt	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,22 @@
+module test-example
+
+language C-without-macros
+
+setup Common [[ ]]
+
+test struct [[
+  struct Foo { 
+    char *name;
+  };
+]] parse to Module([TypeDecl(StructDecl(_, _))])
+
+test fields [[
+  struct User {
+    [[char name;]]
+  };
+]] build generate-aterm to [Field(_, _)]
+
+test fundecl [[
+  int foo() { return b.posterName; } 
+]] 0 errors
+

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,62 @@
+module c_without_macros
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/C-without-macros
+  lib/editor-common.generated
+  check
+  generate
+  refactor
+
+rules // Main editor interface (defined by editor/C-without-macros-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast;
+      notes    := <collect-all(constraint-note, conc)> ast
+  
+  // Transforms a selection to Java
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
+    where
+      <debug(!"Resolve: ")> node; 
+      Type(type) := node; 
+      target     := <GetEntity> type
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) ->
+    ["String", "Int" | proposals]
+    where
+      if !node => Type(COMPLETION(prefix)) then
+        proposals := <all-keys-GetEntity>
+      end

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/check.str	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,51 @@
+module check
+
+imports
+  libstratego-lib
+  include/C-without-macros
+  lib/editor-common.generated
+
+rules
+
+  // Analysis: does a topdown traversal of the tree,
+  // and tries to apply the record-entity rule.
+  analyze:
+    t -> t
+    with
+      <topdown(try(record-entity))> t
+
+  // Records the definition of an entity in a dynamic rule GetEntity.
+  record-entity:
+    Entity(x, body) -> Entity(x, body)
+    with
+      // For a name 'x', GetEntity will return the original 'x' tree node
+      rules(
+        GetEntity :+ x -> x
+      )
+rules
+    
+  // Reports an error if a property type is undefined.
+  // This error is reported on the type name 'type'.
+  constraint-error:
+    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
+    where
+      not(!type => "String"); // String and Int are built-in types
+      not(!type => "Int");
+      not(<GetEntity> type) // no entity for this type
+  
+  // Reports an error if an entity is defined more than once.
+  // This constraint is implemented by testing if the "bag" of
+  // all entities x is not a singleton list.
+  constraint-error:
+    Entity(x, _) -> (x, $[Duplicate entity name])
+    where
+      not(<bagof-GetEntity> x => [_])
+  
+  constraint-warning:
+    Entity(x, _) -> (x, $[Entity names must start with a capital])
+    where
+      not(<string-starts-with-capital> x)
+  
+  constraint-note:
+    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
+                                      (this note is defined in trans/check.str) ])

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/generate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/generate.str	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,47 @@
+module generate
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/C-without-macros
+  lib/editor-common.generated
+
+rules
+
+  to-java:
+    Module(x, d*) ->
+    $[ package [x];
+       
+       [d'*]
+     ]
+    with
+      d'* := <to-java> d*
+  
+  to-java:
+    Entity(x, p*) ->
+    $[ class [x] {
+           [p'*]
+       }
+     ]
+    with
+      p'* := <to-java> p*
+
+  to-java:
+    Property(x, Type(t)) -> $[
+      private [t] [x];
+      
+      public [t] get_[x] {
+          return [x];
+      }
+      
+      public void set_[x] ([t] [x]) {
+          this.[x] = [x];    
+      }
+  ]
+  
+  to-java:
+    Type(t) -> t
+
+  to-java:
+    t* -> <map(to-java)> t*

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/refactor.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/refactor.str	Tue Dec 20 14:41:08 2011	(r23822)
@@ -0,0 +1,28 @@
+module refactor
+
+imports
+  lib/refactor-common.generated
+  include/C-without-macros
+  lib/editor-common.generated  
+  c_without_macros
+
+rules
+ 
+  rename-entity:
+    (newname, selected-name, position, ast, path, project-path) -> ([(ast, new-ast)], fatal-errors, errors, warnings)
+    with
+      new-ast  := <topdown(try(rename-type(|selected-name, newname)))> ast; 
+      (errors, warnings) := <semantic-constraint-issues> (ast, new-ast);
+      fatal-errors := []
+
+  rename-type(|old-name, new-name):
+    Entity(old-name, y) -> Entity(new-name, y)
+
+  rename-type(|old-name, new-name):
+    Type(old-name) -> Type(new-name)
+    
+  semantic-constraint-issues:
+    (ast, new-ast) -> (<diff>(new-errors, errors), <diff>(new-warnings, warnings))
+    where
+    	(_, errors, warnings, _) := <editor-analyze> (ast, "", "");
+    	(_, new-errors, new-warnings, _) := <editor-analyze> (new-ast, "", "")


From karltk at strategoxt.org  Tue Dec 20 15:42:09 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 20 Dec 2011 14:42:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23823 -
	spoofax-contrib/separate-compilation-examples/c-without-macros/editor
Message-ID: <20111220144209.9D08C108C040@mx3.tudelft.nl>

Author: karltk
Date: Tue Dec 20 14:42:09 2011
New Revision: 23823
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23823&sc=1

Log:
Added ignores.

Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/   (props changed)

From karltk at strategoxt.org  Tue Dec 20 15:44:26 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 20 Dec 2011 14:44:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23824 -
	spoofax-contrib/separate-compilation-examples/c-without-macros
Message-ID: <20111220144426.10E61108C01A@mx3.tudelft.nl>

Author: karltk
Date: Tue Dec 20 14:44:25 2011
New Revision: 23824
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23824&sc=1

Log:
Ignores

Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/   (props changed)

From karltk at strategoxt.org  Tue Dec 20 15:46:08 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 20 Dec 2011 14:46:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23825 - in
	spoofax-contrib/separate-compilation-examples/entity-with-aspects:
	. lib
Message-ID: <20111220144608.7DE1A7F8033@mx1.tudelft.nl>

Author: karltk
Date: Tue Dec 20 14:46:08 2011
New Revision: 23825
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23825&sc=1

Log:
Added missing generated files in lib/

Added:
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/lib/
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/lib/editor-common.generated.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/lib/refactor-common.generated.str
Modified:
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/   (props changed)

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/lib/editor-common.generated.str	Tue Dec 20 14:46:08 2011	(r23825)
@@ -0,0 +1,255 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-namingexperiment-file
+  parse-namingexperiment-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/NamingExperiment.tbl)>
+    )
+
+  parse-string = parse-namingexperiment-string
+  parse-namingexperiment-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/NamingExperiment.tbl)>
+    )
+  
+  parse-stream = parse-namingexperiment-stream
+  parse-namingexperiment-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/NamingExperiment.tbl)>
+    )
+
+  pp-namingexperiment-string =
+    ast2abox(|[<import-term(include/NamingExperiment.generated.pp.af)>,
+               <import-term(include/NamingExperiment.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-offset    = prim("SSL_EXT_origin_offset", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "NamingExperiment", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    ![<id>]; all(s); ?[<id>]
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/namingexperiment.str file. These definitions should also be automatically 
+  // generated in the imported include/NamingExperiment.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-contrib/separate-compilation-examples/entity-with-aspects/lib/refactor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/lib/refactor-common.generated.str	Tue Dec 20 14:46:08 2011	(r23825)
@@ -0,0 +1,67 @@
+module lib/refactor-common.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+
+strategies //transformation
+
+/**
+ * Replaces elements in a list (once, starting from the right)
+ * @param match strategy for partial list
+ * @param new elements List(b)
+ * @type List(a) -> List(a,b)
+ */
+replace-sublist(match-sublist|new-elems): 
+  list -> <
+    at-suffix(match-sublist;!new-elems) <+
+    (
+      init; 
+      replace-sublist(match-sublist|new-elems);
+      at-end(![<last> list])
+    )
+  > list 
+
+/**
+ * Inserts an element at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list element 
+ * @type Term -> Term
+ */
+insert-elem(|pos, elem)=
+  insert-sublist(|pos, [elem])
+
+/**
+ * Inserts a list of elements at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list elements 
+ * @type Term -> Term
+ */	
+insert-sublist(|pos, elems)=
+  at-position(
+    split-at(|<last> pos);
+    ?(prefix, suffix);
+    <concat>[prefix, elems, suffix]
+    |<init> pos
+  )
+
+
+strategies //user-input
+
+/**
+ * Opens an input dialog for one string value that represents an identifier
+ * The language is used to check if the input value matches the identifier pattern
+ * @type (String, String, String, String) -> String
+ */
+input-dialog:
+  (language, title, label, default-value) -> <prim("SSL_EXT_newnamedialog", language, title, label, default-value)>
+  
+input-dialog:
+  (title, label, default-value) -> <input-dialog>("", title, label, default-value)
+
+strategies //pp-table
+	
+get-pp-table=
+  import-term(include/NamingExperiment.generated.pp.af)
+	

From karltk at strategoxt.org  Tue Dec 20 15:49:56 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 20 Dec 2011 14:49:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23826 -
	spoofax-contrib/separate-compilation-examples/entity-with-aspects/.externalToolBuilders
Message-ID: <20111220144956.86A6DCC0E5@mx4.tudelft.nl>

Author: karltk
Date: Tue Dec 20 14:49:56 2011
New Revision: 23826
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23826&sc=1

Log:
Renamed NamingExperiment to entity-with-aspects.

Modified:
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/.externalToolBuilders/NamingExperiment build.main.xml.launch

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/.externalToolBuilders/NamingExperiment build.main.xml.launch
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/.externalToolBuilders/NamingExperiment build.main.xml.launch	Tue Dec 20 14:46:08 2011	(r23825)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/.externalToolBuilders/NamingExperiment build.main.xml.launch	Tue Dec 20 14:49:56 2011	(r23826)
@@ -3,7 +3,7 @@
 <stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
 <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
-<listEntry value="/NamingExperiment/build.main.xml"/>
+<listEntry value="/entity-with-aspects/build.main.xml"/>
 </listAttribute>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
 <listEntry value="1"/>
@@ -19,9 +19,9 @@
 <stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/NamingExperiment/build.main.xml}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/entity-with-aspects/build.main.xml}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS" value="-verbose"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/NamingExperiment}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/entity-with-aspects}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>
\ No newline at end of file

From gabrielkonat at gmail.com  Tue Dec 20 17:03:27 2011
From: gabrielkonat at gmail.com (Gabriël Konat)
Date: Tue, 20 Dec 2011 16:03:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23827 - in
	spoofax-contrib/separate-compilation-examples: .
	c-without-macros c-without-macros/editor
	c-without-macros/syntax c-without-macros/test c-without-macros/trans
Message-ID: <20111220160327.754ABCC102@mx4.tudelft.nl>

Author: gkonat
Date: Tue Dec 20 16:03:27 2011
New Revision: 23827
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23827&sc=1

Log:
Added simple editor services to C-Without-Macros experiment using the analysis-library.

Added:
   spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/SPX.spx
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-generated.str
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-library.str
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-manual.str
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/types.str
Deleted:
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/generate.str
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/refactor.str
Modified:
   spoofax-contrib/separate-compilation-examples/   (props changed)
   spoofax-contrib/separate-compilation-examples/c-without-macros/   (props changed)
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv
   spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.sdf
   spoofax-contrib/separate-compilation-examples/c-without-macros/test/   (props changed)
   spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.aterm
   spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.cwi
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/check.str

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv	Tue Dec 20 14:49:56 2011	(r23826)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv	Tue Dec 20 16:03:27 2011	(r23827)
@@ -15,17 +15,10 @@
                                                                                                               
   observer : editor-analyze                                                                                   
                                                                                                               
-  builder  : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
-  builder  : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder  : "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder  : "Show analyzed syntax" = generate-analyzed (openeditor) (realtime) (meta) (source)   
                                                                                                               
 
 refactorings
 
-  pretty-print : pp-c_without_macros-string
-
-  refactoring ID : "Rename Entity" = rename-entity (source) (cursor)
-    shortcut : "org.eclipse.jdt.ui.edit.text.java.rename.element"
-    input
-      identifier : "new name" = ""
-
-  // on save: generate-java
\ No newline at end of file
+  pretty-print : pp-c_without_macros-string
\ No newline at end of file

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.sdf
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.sdf	Tue Dec 20 14:49:56 2011	(r23826)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.sdf	Tue Dec 20 16:03:27 2011	(r23827)
@@ -5,38 +5,31 @@
 exports
 
   context-free start-symbols
+  
     Start
 
   context-free syntax
 
-    Definition*                                 -> Start {cons("Module")}
-
-    Type ID "(" {Param "," }* ")" "{" Stmt* "}" -> Definition {cons("FunDecl")}
-
-    Type ID                                     -> Param{cons("Param")}
-
-    TypeDecl ";"                                -> Definition {cons("TypeDecl")}
-
-    "typedef" Type ID                           -> TypeDecl {cons("TypeDef")}
-    "typedef" TypeDecl ID                       -> TypeDecl {cons("TypeDef")} 
-    "struct" ID "{" Field* "}"                  -> TypeDecl {cons("StructDecl")}
-
-    Type ID ";"                                 -> Field {cons("Field")}
-
-    Type ID ";"                                 -> Stmt {cons("VarDecl")}
-    Expr ";"                                    -> Stmt {cons("Expr")}
-    Expr "=" Expr ";"                           -> Stmt {cons("Assign")}
-    "return" Expr ";"                           -> Stmt {cons("Return")}
-
-    STRING                                      -> Expr {cons("StrLit")}
-    ID "(" {Expr ","}* ")"                      -> Expr {cons("Call"),avoid}
-    "sizeof" "(" Type ")"                       -> Expr {cons("SizeOf")}
-    Expr "." ID                                 -> Expr {cons("Deref")}
-    ID                                          -> Expr {cons("VarRef")}
-
-    ID          -> Type{cons("Type"), avoid}
-    "char"      -> Type{cons("Char")} 
-    "int"       -> Type{cons("Int")}
-    "void"      -> Type{cons("Void")}
-    Type "*"    -> Type{cons("Pointer"), left}
-    "struct" ID -> Type{cons("StructRef")}
+    Definition*                                -> Start      {cons("Module"), scope}
+    Type ID "(" {Param ","}* ")" "{" Stmt* "}" -> Definition {cons("FunDecl"), scope}
+    Type ID                                    -> Param      {cons("Param")}
+    TypeDecl ";"                               -> Definition {cons("TypeDecl")}
+    "typedef" Type ID                          -> TypeDecl   {cons("TypeDef")}
+    "typedef" TypeDecl ID                      -> TypeDecl   {cons("TypeDef")}
+    "struct" ID "{" Field* "}"                 -> TypeDecl   {cons("StructDecl"), scope}
+    Type ID ";"                                -> Field      {cons("Field")}
+    Type ID ";"                                -> Stmt       {cons("VarDecl")}
+    Expr ";"                                   -> Stmt       {cons("Expr")}
+    Expr "=" Expr ";"                          -> Stmt       {cons("Assign")}
+    "return" Expr ";"                          -> Stmt       {cons("Return"), prefer}
+    STRING                                     -> Expr       {cons("StrLit")}
+    ID "(" {Expr ","}* ")"                     -> Expr       {cons("Call"), avoid}
+    "sizeof" "(" Type ")"                      -> Expr       {cons("SizeOf")}
+    Expr "." ID                                -> Expr       {cons("Deref")}
+    ID                                         -> Expr       {cons("VarRef")}
+    ID                                         -> Type       {cons("Type"), avoid}
+    "char"                                     -> Type       {cons("Char"), prefer}
+    "int"                                      -> Type       {cons("Int"), prefer}
+    "void"                                     -> Type       {cons("Void"), prefer}
+    Type "*"                                   -> Type       {cons("Pointer"), left}
+    "struct" ID                                -> Type       {cons("StructRef")}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/SPX.spx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/SPX.spx	Tue Dec 20 16:03:27 2011	(r23827)
@@ -0,0 +1,37 @@
+package SPX
+
+module C-without-macros
+
+context-free syntax
+    
+    Definition*                                 -> Start {"Module", scope(Function, Struct)}
+
+    Type Function@=ID "(" {Param "," }* ")" "{" Stmt* "}" -> Definition {"FunDecl", scope(Var)}
+
+    Type Var@=ID                                -> Param {"Param"}
+
+    TypeDecl ";"                                -> Definition {"TypeDecl"}
+
+    "typedef" Type Type@=ID                     -> TypeDecl {"TypeDef"}
+    "typedef" TypeDecl Type@=ID                 -> TypeDecl {"TypeDef"} 
+    "struct" Struct@=ID "{" Field* "}"          -> TypeDecl {"StructDecl", scope(Field)}
+
+    Type Field@=ID ";"                          -> Field {"Field"}
+
+    Type Var@=ID ";"                            -> Stmt {"VarDecl"}
+    Expr ";"                                    -> Stmt {"Expr"}
+    Expr "=" Expr ";"                           -> Stmt {"Assign"}
+    "return" Expr ";"                           -> Stmt {"Return", prefer}
+
+    STRING                                      -> Expr {"StrLit"}
+    Function at ID "(" {Expr ","}* ")"             -> Expr {"Call", avoid}
+    "sizeof" "(" Type ")"                       -> Expr {"SizeOf"}
+    Expr "." Field at ID                           -> Expr {"Deref"}
+    Var at ID                                      -> Expr {"VarRef"}
+
+    Type at ID                                     -> Type {"Type", avoid}
+    "char"                                      -> Type {"Char", prefer} 
+    "int"                                       -> Type {"Int", prefer}
+    "void"                                      -> Type {"Void", prefer}
+    Type "*"                                    -> Type {"Pointer", left}
+    "struct" Struct at ID                          -> Type {"StructRef"}
\ No newline at end of file

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.aterm
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.aterm	Tue Dec 20 14:49:56 2011	(r23826)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.aterm	Tue Dec 20 16:03:27 2011	(r23827)
@@ -18,7 +18,7 @@
       Int()
     , "main"
     , []
-    , [ VarDecl(Pointer(Type("blot_t")), "b")
+    , [ VarDecl(Pointer(Type("blog_t")), "b")
       , Assign(
           VarRef("b")
         , Call("malloc", [SizeOf(Type("blog_t"))])

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.cwi
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.cwi	Tue Dec 20 14:49:56 2011	(r23826)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/test/example.cwi	Tue Dec 20 16:03:27 2011	(r23827)
@@ -7,8 +7,12 @@
     return b.posterName; 
 }
 
+void *malloc(int size) {
+    return size;
+}
+
 int main() { 
-    blot_t* b;
+    blog_t* b;
     b = malloc(sizeof(blog_t));
     b.posterName = "Frodo";
     foo(b);

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-generated.str	Tue Dec 20 16:03:27 2011	(r23827)
@@ -0,0 +1,136 @@
+module analysis-generated
+
+imports
+  include/C-without-macros
+  analysis-library
+  
+signature
+  constructors
+    Function : Namespace
+    Field    : Namespace
+    Var      : Namespace
+    Type     : Namespace
+    Struct   : Namespace
+
+
+rules
+
+  nam-get-scope-types :
+    Module(_) -> [Function(), Struct()]
+
+  nam-get-scope-types :
+    FunDecl(_, _, _, _) -> [Var()]
+
+  nam-get-scope-types :
+    StructDecl(_, _) -> [Field()]
+
+  nam-get-definition-key :
+    FunDecl(_, x, _, _) -> x
+
+  nam-get-definition :
+    FunDecl(_, x, _, _) -> <nam-get-def(|Function())> x
+
+  nam-get-definition-key :
+    Param(_, x) -> x
+
+  nam-get-definition :
+    Param(_, x) -> <nam-get-def(|Var())> x
+
+  nam-get-definition-key :
+    TypeDef(_, x) -> x
+
+  nam-get-definition :
+    TypeDef(_, x) -> <nam-get-def(|Type())> x
+
+  nam-get-definition-key :
+    StructDecl(x, _) -> x
+
+  nam-get-definition :
+    StructDecl(x, _) -> <nam-get-def(|Struct())> x
+
+  nam-get-definition-key :
+    Field(_, x) -> x
+
+  nam-get-definition :
+    Field(_, x) -> <nam-get-def(|Field())> x
+
+  nam-get-definition-key :
+    VarDecl(_, x) -> x
+
+  nam-get-definition :
+    VarDecl(_, x) -> <nam-get-def(|Var())> x
+
+  nam-annotate-names(|def-path):
+    Module(e_26815) -> Module(e_26815)
+
+  nam-annotate-names(|def-path):
+    FunDecl(a_26815, b_26815, c_26815, d_26815) -> FunDecl(a_26815, b_26815{def-path}, c_26815, d_26815)
+
+  nam-annotate-names(|def-path):
+    Param(y_26814, z_26814) -> Param(y_26814, z_26814{def-path})
+
+  nam-annotate-names(|def-path):
+    TypeDecl(x_26814) -> TypeDecl(x_26814)
+
+  nam-annotate-names(|def-path):
+    TypeDef(v_26814, w_26814) -> TypeDef(v_26814, w_26814{def-path})
+
+  nam-annotate-names(|def-path):
+    TypeDef(t_26814, u_26814) -> TypeDef(t_26814, u_26814{def-path})
+
+  nam-annotate-names(|def-path):
+    StructDecl(r_26814, s_26814) -> StructDecl(r_26814{def-path}, s_26814)
+
+  nam-annotate-names(|def-path):
+    Field(p_26814, q_26814) -> Field(p_26814, q_26814{def-path})
+
+  nam-annotate-names(|def-path):
+    VarDecl(n_26814, o_26814) -> VarDecl(n_26814, o_26814{def-path})
+
+  nam-annotate-names(|def-path):
+    Expr(m_26814) -> Expr(m_26814)
+
+  nam-annotate-names(|def-path):
+    Assign(k_26814, l_26814) -> Assign(k_26814, l_26814)
+
+  nam-annotate-names(|def-path):
+    Return(j_26814) -> Return(j_26814)
+
+  nam-annotate-names(|def-path):
+    StrLit(i_26814) -> StrLit(i_26814)
+
+  nam-annotate-names(|def-path):
+    Call(g_26814, h_26814) -> Call(
+                                <nam-annotate-use(|Function())> g_26814
+                              , h_26814
+                              )
+
+  nam-annotate-names(|def-path):
+    SizeOf(f_26814) -> SizeOf(f_26814)
+
+  nam-annotate-names(|def-path):
+    Deref(d_26814, e_26814) -> Deref(
+                                 d_26814
+                               , <nam-annotate-use(|Field())> e_26814
+                               )
+
+  nam-annotate-names(|def-path):
+    VarRef(c_26814) -> VarRef(<nam-annotate-use(|Var())> c_26814)
+
+  nam-annotate-names(|def-path):
+    Type(b_26814) -> Type(<nam-annotate-use(|Type())> b_26814)
+
+  nam-annotate-names(|def-path):
+    Char() -> Char()
+
+  nam-annotate-names(|def-path):
+    Int() -> Int()
+
+  nam-annotate-names(|def-path):
+    Void() -> Void()
+
+  nam-annotate-names(|def-path):
+    Pointer(a_26814) -> Pointer(a_26814)
+
+  nam-annotate-names(|def-path):
+    StructRef(z_26813) -> StructRef(<nam-annotate-use(|Struct())> z_26813)
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-library.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-library.str	Tue Dec 20 16:03:27 2011	(r23827)
@@ -0,0 +1,389 @@
+module analysis-library
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  analysis-manual
+  types
+
+signature constructors
+
+  // Index elements:
+  Def     : List(UriPart) -> Summary
+  Use     : List(UriPart) * List(UriPart) -> Summary
+  BadUse  : List(UriPart) -> Summary
+  DefData : List(UriPart) * DefDataType * Term -> Summary
+
+  // TODO: add a new constructor for URI header/path separation?
+  
+  // URI header:
+  Namespace      : UriPart
+  Unresolved     : Namespace -> UriPart
+  INTERNAL_ERROR : UriPart
+  
+  // Remainder of URI:
+  String : UriPart
+  Anon   : Int -> UriPart
+  Anon   : UriPart
+
+rules // extension points
+  
+  // Should return list of Def(_) and/or [namespace | path]
+  adjust-index-lookup(is-use |namespace, path) = fail
+  
+  // adjust-index-select(|namespace, path, use) = fail // (e.g., for imports)
+  
+  // Should call <store-results> on a (list of) DefData 
+  adjust-index-def-data(store-results |namespace, path) = fail
+  
+  // Should return a path
+  adjust-index-path(is-def |namespace, path) = fail
+  
+  // adjust-index-path-from-filesystem(|project-path, path)
+
+rules // analysis traversals
+   
+  analyze-top:
+    (ast, path, project-path) -> (ast5, defs, uses, data)
+    with
+      {| CurrentAnalysisAst:
+        rules(
+          CurrentAnalysisAst := ast
+        );
+        // HACK: use Some() constructor to force origin tracking...
+        (Some(ast2), defs) := <analyze-defs(|Anon(), Anon())> Some(ast);
+        full-path    := $[[project-path]/[path]];
+        prim("LANG_index_setup", $[[project-path]/.cache/index], $[project-path], [], []);
+        prim("LANG_index_clear_file", full-path);
+        <index-summary-parts(|full-path)> defs;
+        ast3         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast2;
+        <index-tree-terms> ast3;
+        data         := <origin-track-forced(analyze-tree-data)> ast3;
+        <index-summary-parts(|full-path)> data;
+        // TODO: resolve any URIs in index data at this point? or re-index data after uses analysis?
+        (ast4, uses) := <analyze-uses> ast3;
+        ast5         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast4
+      |}
+  
+  /**
+   * Identifies all definitions in the tree
+   * and annotates them with their URI.
+   * Also annotates uses with a preliminary "Unresolved(_)" URI.
+   */
+  analyze-defs(|head-scope, head-scope-ns):
+    ast -> (ast', defs')
+    with
+      if def := <nam-get-definition> ast then
+        Def(def-path)                     := def;
+        [head-scope-ns', head-scope' | _] := def-path
+      else
+        def-path       := INTERNAL_ERROR();
+        head-scope-ns' := head-scope-ns;
+        head-scope'    := head-scope
+      end;
+      if scope-types := <nam-get-scope-types> ast then
+        {| IndexPath:
+          <list-loop(update-index-path(|head-scope', head-scope-ns', ast))> scope-types;
+          // <balanced-update-path> head-scope';
+          (ast', defs) := <analyze-defs-recurse(|Anon(), Anon(), def-path)> ast
+        |}
+      else
+        (ast', defs) := <analyze-defs-recurse(|head-scope', head-scope-ns', def-path)> ast
+      end;
+      defs' := <![def | defs] <+ !defs>
+  
+  analyze-defs-recurse(|head-scope, head-scope-ns, def-path):
+    ast -> (ast'', defs)
+    where
+      analyzed      := <all(analyze-defs(|head-scope, head-scope-ns))> ast;
+      (ast', defs)  := <unzip-analyzed> analyzed;
+      ast''         := <try(nam-annotate-names(|def-path))> ast'
+  
+  update-index-path(|head-scope, head-scope-ns, ast):
+    scope-type -> scope-type
+    where
+      if !head-scope-ns => Anon() then
+        path  := <IndexPath <+ ![]> scope-type;
+        path' := <do-adjusted-index-path(|scope-type, path, Anon(<new>))> ast
+      else
+        path  := <IndexPath <+ ![]> head-scope-ns;
+        path' := <do-adjusted-index-path(|scope-type, path, head-scope)> ast
+      end;
+      rules(IndexPath: scope-type -> path')
+  
+  /* TODO: consider using simple-update-def-path
+   *       which uses "balanced" path scopes
+   *       e.g. when Entity doesn't scope Function
+   *       then it's hard to access properties from a function
+  balanced-update-index-path:
+    head-scope -> head-scope
+    where
+      if !head-scope => Anon() then
+        head-scope' := Anon(<new>)
+      else
+        head-scope' := head-scope
+      end;
+      (something with do-adjust-path)
+      rules(IndexPath := [head-scope' | <IndexPath <+ ![]> ()])
+  */
+  
+  /**
+   * Analyze all uses, changing their preliminary
+   * "Unresolve(_)" URI to a definite URI of their definition. 
+   */
+  analyze-uses:
+    ast -> (ast'', uses')
+    with
+      analyzed     := <all(analyze-uses)> ast;
+      (ast', uses) := <unzip-analyzed> analyzed;
+      if !ast' => _{unresolved@[Unresolved(namespace), x | path]} then
+        if Def(path') := <index-lookup(id |namespace, path)> ast' then
+          ast'' := ast{path'};
+          uses' := [Use([namespace | path], path') | uses]
+        else
+          ast'' := ast';
+          uses' := [BadUse(unresolved) | uses]
+        end
+      else
+        ast'' := ast';
+        uses' := uses
+      end
+  
+  /**
+   * Collects all index data (e.g., types of definitions).
+   */
+  analyze-tree-data:
+    tree -> data
+    where
+      set := <new-iset>;
+      <topdown(analyze-tree-data-part(|set))> tree;
+      data := <iset-elements> set
+  
+  analyze-tree-data-part(|set):
+    tree -> tree
+    where
+      if def-term := <nam-get-definition-key> then
+        _{[namespace | path]} := def-term;
+        if result := <adjust-index-def-data(store-index-data-results(|set) |namespace, path)> tree then
+          <fatal-err(|"Unexpected result from adjust-index-def-data; should call <store-results>")> result
+        end
+      end
+  
+  store-index-data-results(|set):
+    t -> <fail>
+    where
+      if is-list then
+        <iset-addlist(|t)> set
+      else
+        <iset-add(|t)> set
+      end
+  
+  /**
+   * Transforms a term C( (a1, [b1]), (a2, [b2, b3]) )
+   * to a tuple (C(a1, a2), [b1, b2, b3]).
+   */
+  unzip-analyzed:
+    appl -> (appl', unzipped-parts)
+    with
+      appl'          := <all(\(a, _) -> a\)> appl;
+      unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl
+
+rules // index construction
+  
+  // TODO: optimize: use hashtables instead of dynamic rules
+    
+  index-summary-parts(|file) =
+    list-loop(with(prim("LANG_index_add", <id>, file)))
+
+  index-tree-terms:
+    tree -> tree
+    where
+      if def-term{uri} := <nam-get-definition-key> then
+        def := Def(uri);
+        rules(
+          IndexedTerm: uri -> tree
+        )
+      end;
+      <all(index-tree-terms)> tree
+
+rules // index API
+
+  /** @deprecated */
+  index-get-term:
+    <with(?Def(uri) | "Def expected")> -> <IndexedTerm> uri
+  
+  index-get-data(|kind):
+    <with(?Def(uri) | "Def expected")> -> data
+    where
+      prim("LANG_index_get", DefData(uri, kind, [])) => [DefData(_, _, data) | _]
+  
+  index-get-data-all(|kind):
+    <with(?Def(uri) | "Def expected")> -> datas'
+    where
+      datas  := <prim("LANG_index_get", DefData(uri, kind, []))>;
+      datas' := <map(\DefData(_, _, d) -> d\)> datas
+
+  index-namespace:
+    x{[namespace | path]} -> <index-namespace-unwrap> namespace
+
+  index-path:
+    x{[namespace | path]} -> path'
+    where
+      if !namespace => Unresolved(namespace) then
+        Def(path') := <index-lookup> 
+      else
+        path' := path
+      end
+
+  index-lookup:
+    x{[namespace | path]} -> <index-lookup(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup-all:
+    x{[namespace | path]} -> <index-lookup-all(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup(is-adjust-lookup-enabled |namespace, path):
+    x -> def
+    where
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      def        := <index-select(|namespace, path, x)>
+    <+
+      // TODO: optimize: try not to call do-adjust-index-lookup from here
+      [_ | path'] := path;
+      def         := <index-lookup(is-adjust-lookup-enabled |namespace, path')> x
+
+  index-lookup-all(is-adjust-lookup-enabled |namespace, path):
+    x -> defs'
+    where
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      defs       := <index-select-all(|namespace, path, x)>;
+      // TODO: optimize: try not to call do-adjust-index-lookup from here
+      if [_ | path'] := path then
+        defs2 := <index-lookup-all(is-adjust-lookup-enabled |namespace, path')> x;
+        defs' := <conc> (defs, defs2)
+      else
+        defs' := defs
+      end
+
+  index-lookup-outermost:
+    x{[namespace | path]} -> <index-lookup-outermost(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup-outermost(is-adjust-lookup-enabled |namespace, path):
+    x -> def
+    where
+      // TODO: optimize: just like index-lookup
+      [_ | path'] := path;
+      def         := <index-lookup-outermost(is-adjust-lookup-enabled |namespace, path')> x
+    <+
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      def        := <index-select(|namespace, path, x)>
+
+  index-lookup-one-level:
+    x{[namespace | path]} -> <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
+  
+  index-lookup-one-level(is-adjusted-lookup-enabled |namespace, path):
+    x -> defs
+    with
+      is-adjusted-lookup-enabled;
+      do-adjusted-index-lookup(|namespace, path, x);
+      mapconcat(\d at Def(p) -> [d]\
+          <+ \[namespace' | path'] -> <index-lookup-one-level(fail |namespace', path')> x\
+          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
+      ?defs
+    <+
+      defs := <prim("LANG_index_get_children", Def([namespace | path]))>
+
+  index-lookup-all-levels:
+    x{[namespace | path]} -> <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
+  
+  index-lookup-all-levels(is-adjust-lookup-enabled |namespace, path):
+    x -> all-defs
+    with
+      is-adjust-lookup-enabled;
+      do-adjusted-index-lookup(|namespace, path, x);
+      mapconcat(\d at Def(p) -> [d]\
+          <+ \[namespace' | path'] -> <index-lookup-all-levels(fail |namespace', path')> x\
+          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
+      ?all-defs
+    <+
+      one-level := <prim("LANG_index_get_children", Def([namespace | path]))>;
+      if [_ | path'] := path then
+        all-defs := <concat> [one-level, <index-lookup-all-levels(fail |namespace, path')> x]
+      else
+        all-defs := one-level
+      end
+
+  index-lookup-contained(|namespace):
+    x{[ns | path]} -> defs
+    with
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-one-level(id|namespace, def-path)> x 
+      else
+        defs := <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
+      end
+
+  index-lookup-contained-all-levels(|namespace):
+    x{[ns | path]} -> defs
+    with
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-all-levels(id|namespace, def-path)> x
+      else
+        defs := <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
+      end
+  
+  index-lookup-container(|namespace):
+    x{[ns | path]} -> def
+    with
+      def := ();
+      fatal-err(|"Not implemented") // TODO: index-lookup-container
+
+  index-namespace-unwrap =
+    \Unresolved(n) -> n\ <+ id
+  
+  do-adjusted-index-lookup(|namespace, path, use) =
+    // UNDONE: try(origin-term);
+    repeat-until(
+      prim("SSL_EXT_get_parent", <id>)
+    , adjust-index-lookup(origin-equal(|use) |namespace, path)
+    )
+
+  index-select(|namespace, path, use) =
+    getfirst(
+      where(
+        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
+      )
+    )
+
+  index-select-all(|namespace, path, use) =
+    filter(
+      where(
+        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
+      )
+    )
+  
+  do-adjusted-index-path(|namespace, path, def) =
+    adjust-index-path(origin-equal(|def) |namespace, path)
+  <+
+    ![def | path]
+  
+  index-eq(|namespace, expected) =
+    where(
+      ?Def([_, name | _]);
+      <SRTS-EXT-eq-ignore-annos(|expected)> name
+    )
+  
+  external SRTS-EXT-eq-ignore-annos(|t)
+
+rules // interface for generated code
+  
+  nam-get-def(|namespace):
+    x -> Def([namespace, x | <IndexPath <+ ![]> namespace])
+    
+  nam-annotate-use(|namespace):
+    t -> t{[Unresolved(namespace), t | <IndexPath <+ ![]> namespace]}
+    
+  nam-get-scope-types = fail
+  nam-get-definition = fail
+  nam-get-definition-key = fail
+  nam-annotate-names(|def-path) = fail

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-manual.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-manual.str	Tue Dec 20 16:03:27 2011	(r23827)
@@ -0,0 +1,26 @@
+module analysis-manual
+
+imports
+  include/C-without-macros
+  analysis-generated
+  analysis-library
+  types
+
+rules
+  
+  // Adjust the lookup behavior for properties,
+  // overriding the lookup with a list of property Defs
+  adjust-index-lookup(is-use |namespace, path):
+    Deref(e, <is-use>) -> p*
+    with
+	  if TYPE(e-type) := <type-of> e then
+        p* := <index-lookup-contained(|Field())> e-type
+        //or: p* := [[namespace | <index-path> e-type]]
+      else
+        p* := []
+      end
+
+  // Adjust the lookup behavior for variables,
+  // overriding the lookup with a list of URIs
+  adjust-index-lookup(is-use |namespace, path):
+    VarRef(<is-use>) -> [[Var() | path], [Field() | path]]

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Tue Dec 20 14:49:56 2011	(r23826)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Tue Dec 20 16:03:27 2011	(r23827)
@@ -6,57 +6,69 @@
   libstratego-aterm
   include/C-without-macros
   lib/editor-common.generated
+  analysis-library
   check
-  generate
-  refactor
 
 rules // Main editor interface (defined by editor/C-without-macros-Builders and -References.esv)
   
-  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+    // Analyzes the current program, returning a tuple with errors, warnings, and notes;
   // each a list of (term, message) tuples or simply (message) terms.
   editor-analyze:
-    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
       editor-init;
-      analyze;
-      errors   := <collect-all(constraint-error, conc)> ast;
-      warnings := <collect-all(constraint-warning, conc)> ast;
-      notes    := <collect-all(constraint-note, conc)> ast
-  
-  // Transforms a selection to Java
-  generate-java:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"java")> path;
-      result   := <to-java> selected
+      (ast', defs, uses, data) := <analyze-top>;
+      errors   := <collect-all(constraint-error, conc)> ast';
+      warnings := <collect-all(constraint-warning, conc)> ast';
+      notes    := <collect-all(constraint-note, conc)> ast'
   
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       filename := <guarantee-extension(|"aterm")> path;
-      result   := selected // we just return the input term
-  
+      result   := selected
+      
+  // Prints the analyzed and apsect weaved abstract syntax ATerm of a selection.
+  generate-analyzed:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      editor-init;
+      filename := <guarantee-extension(|"analyzed.aterm")> path;
+      result   := <analyze-top> (selected, path, project-path)
+
   // Resolves a reference when the user control-clicks or presses F3 in the editor.
   // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
   editor-resolve:
     (node, position, ast, path, project-path) -> target
     where
-      <debug(!"Resolve: ")> node; 
-      Type(type) := node; 
-      target     := <GetEntity> type
+      // TODO: shouldn't work on parent node?
+      !node => <one(?subnode) <+ ?subnode>;
+      def     := <index-lookup> node;
+      target  := /*<index-get-term>*/ def
 
   // Returns "hover help" information for a particular node in the editor.
   // For references, this rule is invoked using the resolved term.
   editor-hover:
-    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+    (target, position, ast, path, project-path) -> $[[def-path'']]
+    where
+      // FIXME: this only works for definition paths
+      //<debug(!2)> target;
+      def-term           := <nam-get-definition-key> target;
+      _{[ns | def-path]} := def-term;
+      def-path'  := <take-until(?Anon())> def-path;
+      def-path'' := <reverse; separate-by(|".")> def-path'
 
   // Completes an identifier when the user presses control-space
   // (the completion identifier in the AST provides additional context information)
   editor-complete:
-    (node, position, ast, path, project-path) ->
-    ["String", "Int" | proposals]
+    (node, position, ast, path, project-path) -> proposals'
     where
-      if !node => Type(COMPLETION(prefix)) then
-        proposals := <all-keys-GetEntity>
-      end
+      editor-init;
+      (ast', _, _, _) := <analyze-top> (ast, path, project-path);
+      x              := <collect-one(?COMPLETION(_))> ast';
+      proposals      := <index-lookup-all-levels> x;
+      proposals'     := <map(def-to-name)> proposals
+      
+  def-to-name:
+    Def([namespace, name | _]) -> name
\ No newline at end of file

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/check.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/trans/check.str	Tue Dec 20 14:49:56 2011	(r23826)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/check.str	Tue Dec 20 16:03:27 2011	(r23827)
@@ -4,48 +4,40 @@
   libstratego-lib
   include/C-without-macros
   lib/editor-common.generated
+  analysis-library
+  analysis-generated
 
 rules
 
-  // Analysis: does a topdown traversal of the tree,
-  // and tries to apply the record-entity rule.
-  analyze:
-    t -> t
-    with
-      <topdown(try(record-entity))> t
+  // TODO: don't use index-get-term, but store offsets in the index
 
-  // Records the definition of an entity in a dynamic rule GetEntity.
-  record-entity:
-    Entity(x, body) -> Entity(x, body)
-    with
-      // For a name 'x', GetEntity will return the original 'x' tree node
-      rules(
-        GetEntity :+ x -> x
-      )
-rules
-    
-  // Reports an error if a property type is undefined.
-  // This error is reported on the type name 'type'.
   constraint-error:
-    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
-    where
-      not(!type => "String"); // String and Int are built-in types
-      not(!type => "Int");
-      not(<GetEntity> type) // no entity for this type
+    x{[Unresolved(t) | _]} ->
+    (x, $[Unable to resolve.])
   
-  // Reports an error if an entity is defined more than once.
-  // This constraint is implemented by testing if the "bag" of
-  // all entities x is not a singleton list.
   constraint-error:
-    Entity(x, _) -> (x, $[Duplicate entity name])
+    x -> (x, $[Use before definition])
+    where
+      namespace := <index-namespace> x;
+      <is-ordered-namespace> namespace
+    where
+      def  := <index-lookup> x;
+      def' := <index-get-term> def
     where
-      not(<bagof-GetEntity> x => [_])
+      <gt> (<origin-offset> def', <origin-offset> x)
   
-  constraint-warning:
-    Entity(x, _) -> (x, $[Entity names must start with a capital])
+  constraint-error:
+    def -> (def, $[Duplicate definition])
     where
-      not(<string-starts-with-capital> x)
+      def-child  := <nam-get-definition-key> def;
+      def'       := <index-get-term> <index-lookup-outermost> def-child;
+      not(<origin-equal(|def)> def')
+  
+  is-ordered-namespace:
+    Var() -> Var()
   
-  constraint-note:
-    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
-                                      (this note is defined in trans/check.str) ])
+  constraint-warning = fail
+  constraint-note = fail
+
+  origin-offset =
+    prim("SSL_EXT_origin_offset", <id>) => (<id>, _)
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/types.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/types.str	Tue Dec 20 16:03:27 2011	(r23827)
@@ -0,0 +1,78 @@
+module types
+
+imports
+  include/C-without-macros
+  analysis-library
+
+signature constructors
+
+  TYPE     		: STRING -> Type
+  Type       	: DefDataKind
+  ParamTypes 	: DefDataKind
+
+rules // type projections
+
+  type-of:
+    Field(_, x) -> <type-of> x
+  
+  type-of:
+    StructDecl(x, _) -> TYPE($[Struct__[x]])
+  
+  type-of:
+    VarDecl(_, x) -> <type-of> x
+  
+  type-of:
+    Param(_, x) -> <type-of> x
+    
+  type-of:
+  	Type(x) -> TYPE(x)
+  	
+  type-of:
+  	Char() -> TYPE("Char")
+  	
+  type-of:
+  	Int() -> TYPE("Int")
+  	
+  type-of:
+    Void() -> TYPE("Void")
+  
+  type-of:
+    VarRef(v) -> <type-of> <index-lookup> v
+  
+  type-of:
+    Deref(e, p) -> <type-of> <index-lookup> p
+    
+  type-of:
+    Assign(_, x) -> <type-of> x
+
+  type-of:
+    Def(uri) -> <index-get-data(|Type())> Def(uri)
+
+rules // utility
+
+  is-params-compatible(|arg-types):
+    Def(uri) -> <id>
+    with
+      param-types := <index-get-data(|ParamTypes())>
+    where
+      <eq> (<length> arg-types, <length> param-types);
+      <zip(is-assignable-to)> (arg-types, param-types)
+
+  is-assignable-to:
+    (to-type, from-type) -> to-type
+    where
+      <eq> (from-type, to-type)
+
+
+rules // store definition and parameter types
+    
+  adjust-index-def-data(store-results |namespace, path):
+    def -> <store-results> DefData([namespace | path], Type(), type)
+    where
+      type := <type-of> def
+  
+  // TODO: Function call parameter checks?
+  /*adjust-index-def-data(store-results |namespace, path):
+    FunDecl(_, _, params, _) -> <store-results> DefData([namespace | path], ParamTypes(), types)
+    with
+      types := <map(type-of)> params*/


From tobivollebregt at gmail.com  Tue Dec 20 17:04:15 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 20 Dec 2011 16:04:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23828 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template
Message-ID: <20111220160415.91A4E108C00D@mx3.tudelft.nl>

Author: tvo
Date: Tue Dec 20 16:04:15 2011
New Revision: 23828
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23828&sc=1

Log:
TemplateLang: wrap, anchor

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Tue Dec 20 16:03:27 2011	(r23827)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Tue Dec 20 16:04:15 2011	(r23828)
@@ -48,8 +48,9 @@
         libstratego-lib
 
       signature constructors
-        Z : S-OPTIONS * BOX-LIST -> BOX
-        I : S-OPTIONS * BOX -> BOX
+        HZ : S-OPTIONS * BOX-LIST -> BOX
+        Z  : S-OPTIONS * BOX-LIST -> BOX
+        I  : S-OPTIONS * BOX -> BOX
 
       strategies
 
@@ -68,10 +69,11 @@
 
         abox2text'(rec : t * t -> t | xpos, width) =
           abox2text-HV(rec | xpos, width)
+          + abox2text-HZ(rec | xpos, width)
           + abox2text-H(rec | xpos, width)
           + abox2text-V(rec | xpos, width)
-          + abox2text-I(rec | xpos, width)
           + abox2text-Z(rec | xpos, width)
+          + abox2text-I(rec | xpos, width)
           + abox2text-A(rec | xpos, width)
           + abox2text-R(rec | xpos, width)
           + abox2text-S(rec | xpos, width)
@@ -107,8 +109,33 @@
               ; gpp-format-vbox(|sopt, indent)
             end
 
+        abox2text-HZ(rec : t * t -> t | xpos, width) =
+          ?HZ(sopt, bs)
+
+          ; <gpp-hs-chars> sopt => hs-chars
+          ; <implode-string> hs-chars => hs
+          ; <gpp-vs-text> sopt => vs
+          ; <length> hs-chars => hsl
+          ; GppIndent => indent
+          ; <add> (indent, <gpp-is-length> sopt) => left-xpos
+          ; <filter(gpp-is-real-vbox)> bs
+          ; if ?[] then
+              !([], xpos)
+            else
+              !(<id>, [([], xpos)])
+              ; foldl(
+                  gpp-hv-add-to-hbox(rec | hsl, width)
+                  <+ gpp-hv-in-new-vbox(rec | hsl, left-xpos, width)
+                )
+                // Substract last hspace from xpos
+              ; [(id, <subt> (<id>, hsl)) | id]
+              ; reverse; map((reverse, id))
+              ; map((<separate-by> (hs, <id>), id))
+              ; gpp-format-vbox(|sopt, indent)
+            end
+
       overlays
-        H0(xs) = H([SOpt(HS(), "0")], xs)
+        Line(xs) = H([SOpt(HS(), "0")], xs)
 
       strategies
 
@@ -120,10 +147,16 @@
         pp-v-list(s)   = ?[] <+ !V([], <map(pp-one-V(s))>)
         pp-v-list(s|t) = ?[] <+ !V([SOpt(VS(), t)], <map(pp-one-V(s))>)
 
-        pp-indent(|t) = ?[] <+ !I([SOpt(IS(), t)], H0(<id>))
+        pp-indent(|t) = ?[] <+ !I([SOpt(IS(), t)], Line(<id>))
 
         pp-h-list(s)   = ?[] <+ !H([], <map(pp-one-Z(s))>)
-        pp-h-list(s|t) = ?[] <+ !H0(<map(pp-one-Z(s)); separate-by(|S(t))>)
+        pp-h-list(s|t) = ?[] <+ !Line(<map(pp-one-Z(s)); separate-by(|S(t))>)
+
+        pp-hv-list(s)   = ?[] <+ !HV([SOpt(HS(), "0")], <map(pp-one-Z(s))>)
+        pp-hv-list(s|t) = ?[] <+ !HV([SOpt(HS(), "0")], <map(pp-one-Z(s)); separate-by(|S(t))>)
+
+        pp-hz-list(s)   = ?[] <+ !HZ([SOpt(HS(), "0")], <map(pp-one-Z(s))>)
+        pp-hz-list(s|t) = ?[] <+ !HZ([SOpt(HS(), "0")], <map(pp-one-Z(s)); separate-by(|S(t))>)
 
       {section''*}
 
@@ -233,7 +266,7 @@
       elem'* := <template-line-elements-to-stratego> elem*
 
   template-line-to-stratego:
-    Line(elem*) -> ${H0([{elem'*}])}
+    Line(elem*) -> ${Line([{elem'*}])}
     where
       not(!elem* => [Layout(<not("")>) | _]);
       elem'* := <template-line-elements-to-stratego> elem*
@@ -280,7 +313,7 @@
     Placeholder(sort(x), _, option*) ->
       $[pp-one-[v-or-z](prettyprint-[x])]
     where with-spxverify(
-      <getfirst(?Anchor()) < !"V" + !"Z"> option* => v-or-z,
+      <one(?Anchor()) < !"V" + !"Z"> option* => v-or-z,
       !"Failed to determine placeholder box type (V or Z)"
     )
 
@@ -288,11 +321,13 @@
     Placeholder(sort(x), <Star() + Plus()>, option*){name}
       -> $[<[s]> [name]]
     where with-spxverify(
+      h-or-hv-or-hz := <one(?Wrap()) <
+             (one(?Anchor()) < !"hv" + !"hz") + !"h"> option*;
       if <getfirst(?Separator(<id>))> option* => sep then
         <explode-string; filter(?'\n'); length; dec> sep => vs;
         if !vs => -1 then
           // separator without line breaks => horizontal box
-          s := $[pp-h-list(prettyprint-[x]|"[<templatelang-escape> sep]")]
+          s := $[pp-[h-or-hv-or-hz]-list(prettyprint-[x]|"[<templatelang-escape> sep]")]
         else
           // TODO: Support separators with mixed line breaks and literals.
           if !vs => 0 then
@@ -305,7 +340,7 @@
         end
       else
         // no separator => horizontal box
-        s := $[pp-h-list(prettyprint-[x])]
+        s := $[pp-[h-or-hv-or-hz]-list(prettyprint-[x])]
       end,
       !"Failed to convert list placeholder"
    )

From g.d.p.konat at student.tudelft.nl  Tue Dec 20 15:38:39 2011
From: g.d.p.konat at student.tudelft.nl (Gabriël Konat)
Date: Tue, 20 Dec 2011 14:38:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23821 - in
	spoofax-contrib/separate-compilation-examples/csharp-partial-classses:
	. editor syntax test trans
Message-ID: <20111220143839.47ED32B8046@mx2.tudelft.nl>

Author: gkonat
Date: Tue Dec 20 14:38:38 2011
New Revision: 23821
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23821&sc=1

Log:
Added basic editor services to the CSharpPartialClasses experiment using the 
analysis-library.

Added:
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/SPX.spx
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/analysis-generated.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/analysis-library.str
Deleted:
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.aterm
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/test-example.spt
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/generate.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/refactor.str
Modified:
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/   (props changed)
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.classpath
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/   (props changed)
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.generated.pp
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.sdf
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/   (props changed)
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.csh
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/check.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.classpath
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.classpath	Tue Dec 20 14:32:14 2011	(r23820)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/.classpath	Tue Dec 20 14:38:38 2011	(r23821)
@@ -1,9 +1,9 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-
+<?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry excluding="trans/**" kind="src" path="editor/java"/>
+	<classpathentry kind="src" path=".shadowdir"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
 	<classpathentry kind="output" path="bin"/>
-</classpath>
\ No newline at end of file
+</classpath>

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv	Tue Dec 20 14:32:14 2011	(r23820)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv	Tue Dec 20 14:38:38 2011	(r23821)
@@ -14,9 +14,9 @@
   provider : include/csharppartialclassses-java.jar                                                           
                                                                                                               
   observer : editor-analyze                                                                                   
-                                                                                                              
-  builder  : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
-  builder  : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+                                                                                                                         
+  builder  : "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder  : "Show analyzed syntax" = generate-analyzed (openeditor) (realtime) (meta) (source)  
                                                                                                               
 
 refactorings

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.generated.pp
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.generated.pp	Tue Dec 20 14:32:14 2011	(r23820)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.generated.pp	Tue Dec 20 14:38:38 2011	(r23821)
@@ -9,6 +9,9 @@
    Method                   -- _1 _2 KW["("] KW[")"] KW["{"] _3 KW["}"],
    Method.3:iter-star       -- _1,
    Type                     -- _1,
+   StringType               -- KW["string"],
+   IntType                  -- KW["int"],
+   VoidType                 -- KW["void"],
    Return                   -- KW["return"] _1 KW[";"],
-   VarRef                   -- _1
+   FieldRef                 -- _1
 ]
\ No newline at end of file

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.sdf
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.sdf	Tue Dec 20 14:32:14 2011	(r23820)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.sdf	Tue Dec 20 14:38:38 2011	(r23821)
@@ -5,20 +5,19 @@
 exports
 
   context-free start-symbols
+  
     Start
 
   context-free syntax
-  
-    Definition*                                 -> Start {cons("Module")}
-    
-    "partial" "class" ID "{" ClassBodyDecl* "}" -> Definition {cons("PartialClass")}
-    "class" ID "{" ClassBodyDecl* "}"      -> Definition {cons("Class")}
-    
+      
+    Definition*                                 -> Start         {cons("Module"), scope}
+    "partial" "class" ID "{" ClassBodyDecl* "}" -> Definition    {cons("PartialClass"), scope}
+    "class" ID "{" ClassBodyDecl* "}"           -> Definition    {cons("Class"), scope}
     Type ID ";"                                 -> ClassBodyDecl {cons("Field")}
-    Type ID "(" ")" "{" Stmt* "}"    -> ClassBodyDecl {cons("Method")} 
-    
-    ID                                          -> Type {cons("Type")}
-    
-     "return" Expr ";"                          -> Stmt{cons("Return")}
-     
-     ID                                         -> Expr{cons("VarRef")}
+    Type ID "(" ")" "{" Stmt* "}"               -> ClassBodyDecl {cons("Method")}
+    ID                                          -> Type          {cons("Type")}
+    "string"                                    -> Type          {cons("StringType"), prefer}
+    "int"                                       -> Type          {cons("IntType"), prefer}
+    "void"                                      -> Type          {cons("VoidType"), prefer}
+    "return" Expr ";"                           -> Stmt          {cons("Return")}
+    ID                                          -> Expr          {cons("FieldRef")}
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/SPX.spx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/SPX.spx	Tue Dec 20 14:38:38 2011	(r23821)
@@ -0,0 +1,26 @@
+package SPX
+
+module CSharpPartialClasses
+
+context-free syntax
+	
+	%% Constructs
+    Definition*											-> Start {"Module", scope(Class)}
+    "partial" "class" Class@=ID "{" ClassBodyDecl* "}" 	-> Definition {"PartialClass", scope(Field, Method)}
+    "class" Class@=ID "{" ClassBodyDecl* "}"      		-> Definition {"Class", scope(Field, Method)}
+    
+    %% Class members
+    Type Field@=ID ";"                                 	-> ClassBodyDecl {"Field"}
+    Type Method@=ID "(" ")" "{" Stmt* "}"    			-> ClassBodyDecl {"Method"} 
+    
+    %% Types
+    Class at ID                                    		-> Type {"Type"}
+    "string"    										-> Type {"StringType", prefer}
+    "int"       										-> Type {"IntType", prefer}
+    "void"                                              -> Type {"VoidType", prefer}
+    
+    %% Statements
+    "return" Expr ";"                          			-> Stmt {"Return"}
+     
+    %% Expressions
+    Field at ID                                         	-> Expr {"FieldRef"}
\ No newline at end of file

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.csh
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.csh	Tue Dec 20 14:32:14 2011	(r23820)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.csh	Tue Dec 20 14:38:38 2011	(r23821)
@@ -1,21 +1,20 @@
+partial class URL {
+  string location;
+}
+
+partial class URL {
+    void Reverse() {
+        return location;
+    }
+}
+
 class User {
   string name; 
   string password; 
-  URL homepage; 
+  URL homepage;
 }
 
 class BlogPosting {
   User poster; 
   string body; 
-}
-
-partial class URL {
-  string location; 
-}
-
-partial class URL {
-	
-	void Reverse() {
-		return location;
-	}
 }
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/analysis-generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/analysis-generated.str	Tue Dec 20 14:38:38 2011	(r23821)
@@ -0,0 +1,81 @@
+module analysis-generated
+
+imports
+  include/CSharpPartialClassses
+  analysis-library
+
+
+signature
+  constructors
+    Method : Namespace
+    Class  : Namespace
+    Field  : Namespace
+
+
+rules
+
+  nam-get-scope-types :
+    Module(_) -> [Class()]
+
+  nam-get-scope-types :
+    PartialClass(_, _) -> [Field(), Method()]
+
+  nam-get-scope-types :
+    Class(_, _) -> [Field(), Method()]
+
+  nam-get-definition-key :
+    PartialClass(x, _) -> x
+
+  nam-get-definition :
+    PartialClass(x, _) -> <nam-get-def(|Class())> x
+
+  nam-get-definition-key :
+    Class(x, _) -> x
+
+  nam-get-definition :
+    Class(x, _) -> <nam-get-def(|Class())> x
+
+  nam-get-definition-key :
+    Field(_, x) -> x
+
+  nam-get-definition :
+    Field(_, x) -> <nam-get-def(|Field())> x
+
+  nam-get-definition-key :
+    Method(_, x, _) -> x
+
+  nam-get-definition :
+    Method(_, x, _) -> <nam-get-def(|Method())> x
+
+  nam-annotate-names(|def-path):
+    Module(k_18073) -> Module(k_18073)
+
+  nam-annotate-names(|def-path):
+    PartialClass(i_18073, j_18073) -> PartialClass(i_18073{def-path}, j_18073)
+
+  nam-annotate-names(|def-path):
+    Class(g_18073, h_18073) -> Class(g_18073{def-path}, h_18073)
+
+  nam-annotate-names(|def-path):
+    Field(e_18073, f_18073) -> Field(e_18073, f_18073{def-path})
+
+  nam-annotate-names(|def-path):
+    Method(b_18073, c_18073, d_18073) -> Method(b_18073, c_18073{def-path}, d_18073)
+
+  nam-annotate-names(|def-path):
+    Type(a_18073) -> Type(<nam-annotate-use(|Class())> a_18073)
+
+  nam-annotate-names(|def-path):
+    StringType() -> StringType()
+
+  nam-annotate-names(|def-path):
+    IntType() -> IntType()
+
+  nam-annotate-names(|def-path):
+    VoidType() -> VoidType()
+
+  nam-annotate-names(|def-path):
+    Return(z_18072) -> Return(z_18072)
+
+  nam-annotate-names(|def-path):
+    FieldRef(y_18072) -> FieldRef(<nam-annotate-use(|Field())> y_18072)
\ No newline at end of file

Added: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/analysis-library.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/analysis-library.str	Tue Dec 20 14:38:38 2011	(r23821)
@@ -0,0 +1,387 @@
+module analysis-library
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+
+signature constructors
+
+  // Index elements:
+  Def     : List(UriPart) -> Summary
+  Use     : List(UriPart) * List(UriPart) -> Summary
+  BadUse  : List(UriPart) -> Summary
+  DefData : List(UriPart) * DefDataType * Term -> Summary
+
+  // TODO: add a new constructor for URI header/path separation?
+  
+  // URI header:
+  Namespace      : UriPart
+  Unresolved     : Namespace -> UriPart
+  INTERNAL_ERROR : UriPart
+  
+  // Remainder of URI:
+  String : UriPart
+  Anon   : Int -> UriPart
+  Anon   : UriPart
+
+rules // extension points
+  
+  // Should return list of Def(_) and/or [namespace | path]
+  adjust-index-lookup(is-use |namespace, path) = fail
+  
+  // adjust-index-select(|namespace, path, use) = fail // (e.g., for imports)
+  
+  // Should call <store-results> on a (list of) DefData 
+  adjust-index-def-data(store-results |namespace, path) = fail
+  
+  // Should return a path
+  adjust-index-path(is-def |namespace, path) = fail
+  
+  // adjust-index-path-from-filesystem(|project-path, path)
+
+rules // analysis traversals
+   
+  analyze-top:
+    (ast, path, project-path) -> (ast5, defs, uses, data)
+    with
+      {| CurrentAnalysisAst:
+        rules(
+          CurrentAnalysisAst := ast
+        );
+        // HACK: use Some() constructor to force origin tracking...
+        (Some(ast2), defs) := <analyze-defs(|Anon(), Anon())> Some(ast);
+        full-path    := $[[project-path]/[path]];
+        prim("LANG_index_setup", $[[project-path]/.cache/index], $[project-path], [], []);
+        prim("LANG_index_clear_file", full-path);
+        <index-summary-parts(|full-path)> defs;
+        ast3         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast2;
+        <index-tree-terms> ast3;
+        data         := <origin-track-forced(analyze-tree-data)> ast3;
+        <index-summary-parts(|full-path)> data;
+        // TODO: resolve any URIs in index data at this point? or re-index data after uses analysis?
+        (ast4, uses) := <analyze-uses> ast3;
+        ast5         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast4
+      |}
+  
+  /**
+   * Identifies all definitions in the tree
+   * and annotates them with their URI.
+   * Also annotates uses with a preliminary "Unresolved(_)" URI.
+   */
+  analyze-defs(|head-scope, head-scope-ns):
+    ast -> (ast', defs')
+    with
+      if def := <nam-get-definition> ast then
+        Def(def-path)                     := def;
+        [head-scope-ns', head-scope' | _] := def-path
+      else
+        def-path       := INTERNAL_ERROR();
+        head-scope-ns' := head-scope-ns;
+        head-scope'    := head-scope
+      end;
+      if scope-types := <nam-get-scope-types> ast then
+        {| IndexPath:
+          <list-loop(update-index-path(|head-scope', head-scope-ns', ast))> scope-types;
+          // <balanced-update-path> head-scope';
+          (ast', defs) := <analyze-defs-recurse(|Anon(), Anon(), def-path)> ast
+        |}
+      else
+        (ast', defs) := <analyze-defs-recurse(|head-scope', head-scope-ns', def-path)> ast
+      end;
+      defs' := <![def | defs] <+ !defs>
+  
+  analyze-defs-recurse(|head-scope, head-scope-ns, def-path):
+    ast -> (ast'', defs)
+    where
+      analyzed      := <all(analyze-defs(|head-scope, head-scope-ns))> ast;
+      (ast', defs)  := <unzip-analyzed> analyzed;
+      ast''         := <try(nam-annotate-names(|def-path))> ast'
+  
+  update-index-path(|head-scope, head-scope-ns, ast):
+    scope-type -> scope-type
+    where
+      if !head-scope-ns => Anon() then
+        path  := <IndexPath <+ ![]> scope-type;
+        path' := <do-adjusted-index-path(|scope-type, path, Anon(<new>))> ast
+      else
+        path  := <IndexPath <+ ![]> head-scope-ns;
+        path' := <do-adjusted-index-path(|scope-type, path, head-scope)> ast
+      end;
+      rules(IndexPath: scope-type -> path')
+  
+  /* TODO: consider using simple-update-def-path
+   *       which uses "balanced" path scopes
+   *       e.g. when Entity doesn't scope Function
+   *       then it's hard to access properties from a function
+  balanced-update-index-path:
+    head-scope -> head-scope
+    where
+      if !head-scope => Anon() then
+        head-scope' := Anon(<new>)
+      else
+        head-scope' := head-scope
+      end;
+      (something with do-adjust-path)
+      rules(IndexPath := [head-scope' | <IndexPath <+ ![]> ()])
+  */
+  
+  /**
+   * Analyze all uses, changing their preliminary
+   * "Unresolve(_)" URI to a definite URI of their definition. 
+   */
+  analyze-uses:
+    ast -> (ast'', uses')
+    with
+      analyzed     := <all(analyze-uses)> ast;
+      (ast', uses) := <unzip-analyzed> analyzed;
+      if !ast' => _{unresolved@[Unresolved(namespace), x | path]} then
+        if Def(path') := <index-lookup(id |namespace, path)> ast' then
+          ast'' := ast{path'};
+          uses' := [Use([namespace | path], path') | uses]
+        else
+          ast'' := ast';
+          uses' := [BadUse(unresolved) | uses]
+        end
+      else
+        ast'' := ast';
+        uses' := uses
+      end
+  
+  /**
+   * Collects all index data (e.g., types of definitions).
+   */
+  analyze-tree-data:
+    tree -> data
+    where
+      set := <new-iset>;
+      <topdown(analyze-tree-data-part(|set))> tree;
+      data := <iset-elements> set
+  
+  analyze-tree-data-part(|set):
+    tree -> tree
+    where
+      if def-term := <nam-get-definition-key> then
+        _{[namespace | path]} := def-term;
+        if result := <adjust-index-def-data(store-index-data-results(|set) |namespace, path)> tree then
+          <fatal-err(|"Unexpected result from adjust-index-def-data; should call <store-results>")> result
+        end
+      end
+  
+  store-index-data-results(|set):
+    t -> <fail>
+    where
+      if is-list then
+        <iset-addlist(|t)> set
+      else
+        <iset-add(|t)> set
+      end
+  
+  /**
+   * Transforms a term C( (a1, [b1]), (a2, [b2, b3]) )
+   * to a tuple (C(a1, a2), [b1, b2, b3]).
+   */
+  unzip-analyzed:
+    appl -> (appl', unzipped-parts)
+    with
+      appl'          := <all(\(a, _) -> a\)> appl;
+      unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl
+
+rules // index construction
+  
+  // TODO: optimize: use hashtables instead of dynamic rules
+    
+  index-summary-parts(|file) =
+    list-loop(with(prim("LANG_index_add", <id>, file)))
+
+  index-tree-terms:
+    tree -> tree
+    where
+      if def-term{uri} := <nam-get-definition-key> then
+        def := Def(uri);
+        rules(
+          IndexedTerm: uri -> tree
+        )
+      end;
+      <all(index-tree-terms)> tree
+
+rules // index API
+
+  /** @deprecated */
+  index-get-term:
+    <with(?Def(uri) | "Def expected")> -> <IndexedTerm> uri
+  
+  index-get-data(|kind):
+    <with(?Def(uri) | "Def expected")> -> data
+    where
+      prim("LANG_index_get", DefData(uri, kind, [])) => [DefData(_, _, data) | _]
+  
+  index-get-data-all(|kind):
+    <with(?Def(uri) | "Def expected")> -> datas'
+    where
+      datas  := <prim("LANG_index_get", DefData(uri, kind, []))>;
+      datas' := <map(\DefData(_, _, d) -> d\)> datas
+
+  index-namespace:
+    x{[namespace | path]} -> <index-namespace-unwrap> namespace
+
+  index-path:
+    x{[namespace | path]} -> path'
+    where
+      if !namespace => Unresolved(namespace) then
+        Def(path') := <index-lookup> 
+      else
+        path' := path
+      end
+
+  index-lookup:
+    x{[namespace | path]} -> <index-lookup(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup-all:
+    x{[namespace | path]} -> <index-lookup-all(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup(is-adjust-lookup-enabled |namespace, path):
+    x -> def
+    where
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      def        := <index-select(|namespace, path, x)>
+    <+
+      // TODO: optimize: try not to call do-adjust-index-lookup from here
+      [_ | path'] := path;
+      def         := <index-lookup(is-adjust-lookup-enabled |namespace, path')> x
+
+  index-lookup-all(is-adjust-lookup-enabled |namespace, path):
+    x -> defs'
+    where
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      defs       := <index-select-all(|namespace, path, x)>;
+      // TODO: optimize: try not to call do-adjust-index-lookup from here
+      if [_ | path'] := path then
+        defs2 := <index-lookup-all(is-adjust-lookup-enabled |namespace, path')> x;
+        defs' := <conc> (defs, defs2)
+      else
+        defs' := defs
+      end
+
+  index-lookup-outermost:
+    x{[namespace | path]} -> <index-lookup-outermost(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup-outermost(is-adjust-lookup-enabled |namespace, path):
+    x -> def
+    where
+      // TODO: optimize: just like index-lookup
+      [_ | path'] := path;
+      def         := <index-lookup-outermost(is-adjust-lookup-enabled |namespace, path')> x
+    <+
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      def        := <index-select(|namespace, path, x)>
+
+  index-lookup-one-level:
+    x{[namespace | path]} -> <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
+  
+  index-lookup-one-level(is-adjusted-lookup-enabled |namespace, path):
+    x -> defs
+    with
+      is-adjusted-lookup-enabled;
+      do-adjusted-index-lookup(|namespace, path, x);
+      mapconcat(\d at Def(p) -> [d]\
+          <+ \[namespace' | path'] -> <index-lookup-one-level(fail |namespace', path')> x\
+          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
+      ?defs
+    <+
+      defs := <prim("LANG_index_get_children", Def([namespace | path]))>
+
+  index-lookup-all-levels:
+    x{[namespace | path]} -> <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
+  
+  index-lookup-all-levels(is-adjust-lookup-enabled |namespace, path):
+    x -> all-defs
+    with
+      is-adjust-lookup-enabled;
+      do-adjusted-index-lookup(|namespace, path, x);
+      mapconcat(\d at Def(p) -> [d]\
+          <+ \[namespace' | path'] -> <index-lookup-all-levels(fail |namespace', path')> x\
+          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
+      ?all-defs
+    <+
+      one-level := <prim("LANG_index_get_children", Def([namespace | path]))>;
+      if [_ | path'] := path then
+        all-defs := <concat> [one-level, <index-lookup-all-levels(fail |namespace, path')> x]
+      else
+        all-defs := one-level
+      end
+
+  index-lookup-contained(|namespace):
+    x{[ns | path]} -> defs
+    with
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-one-level(id|namespace, def-path)> x 
+      else
+        defs := <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
+      end
+
+  index-lookup-contained-all-levels(|namespace):
+    x{[ns | path]} -> defs
+    with
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-all-levels(id|namespace, def-path)> x
+      else
+        defs := <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
+      end
+  
+  index-lookup-container(|namespace):
+    x{[ns | path]} -> def
+    with
+      def := ();
+      fatal-err(|"Not implemented") // TODO: index-lookup-container
+
+  index-namespace-unwrap =
+    \Unresolved(n) -> n\ <+ id
+  
+  do-adjusted-index-lookup(|namespace, path, use) =
+    // UNDONE: try(origin-term);
+    repeat-until(
+      prim("SSL_EXT_get_parent", <id>)
+    , adjust-index-lookup(origin-equal(|use) |namespace, path)
+    )
+
+  index-select(|namespace, path, use) =
+    getfirst(
+      where(
+        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
+      )
+    )
+
+  index-select-all(|namespace, path, use) =
+    filter(
+      where(
+        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
+      )
+    )
+  
+  do-adjusted-index-path(|namespace, path, def) =
+    adjust-index-path(origin-equal(|def) |namespace, path)
+  <+
+    ![def | path]
+  
+  index-eq(|namespace, expected) =
+    where(
+      ?Def([_, name | _]);
+      <SRTS-EXT-eq-ignore-annos(|expected)> name
+    )
+  
+  external SRTS-EXT-eq-ignore-annos(|t)
+
+rules // interface for generated code
+  
+  nam-get-def(|namespace):
+    x -> Def([namespace, x | <IndexPath <+ ![]> namespace])
+    
+  nam-annotate-use(|namespace):
+    t -> t{[Unresolved(namespace), t | <IndexPath <+ ![]> namespace]}
+    
+  nam-get-scope-types = fail
+  nam-get-definition = fail
+  nam-get-definition-key = fail
+  nam-annotate-names(|def-path) = fail

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/check.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/check.str	Tue Dec 20 14:32:14 2011	(r23820)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/check.str	Tue Dec 20 14:38:38 2011	(r23821)
@@ -4,48 +4,39 @@
   libstratego-lib
   include/CSharpPartialClassses
   lib/editor-common.generated
+  analysis-library
+  analysis-generated
 
 rules
 
-  // Analysis: does a topdown traversal of the tree,
-  // and tries to apply the record-entity rule.
-  analyze:
-    t -> t
-    with
-      <topdown(try(record-entity))> t
+  // TODO: don't use index-get-term, but store offsets in the index
 
-  // Records the definition of an entity in a dynamic rule GetEntity.
-  record-entity:
-    Entity(x, body) -> Entity(x, body)
-    with
-      // For a name 'x', GetEntity will return the original 'x' tree node
-      rules(
-        GetEntity :+ x -> x
-      )
-rules
-    
-  // Reports an error if a property type is undefined.
-  // This error is reported on the type name 'type'.
   constraint-error:
-    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
+    x{[Unresolved(t) | _]} ->
+    (x, $[Unable to resolve.])
+  
+  /*constraint-error:
+    x -> (x, $[Use before definition])
+    where
+      def  := <index-lookup> x;
+      def' := <index-get-term> def
     where
-      not(!type => "String"); // String and Int are built-in types
-      not(!type => "Int");
-      not(<GetEntity> type) // no entity for this type
+        not(<?PartialClass(_, _)> x);
+        not(<?PartialClass(_, _)> def')
+    where
+      <gt> (<origin-offset> def', <origin-offset> x)*/
   
-  // Reports an error if an entity is defined more than once.
-  // This constraint is implemented by testing if the "bag" of
-  // all entities x is not a singleton list.
   constraint-error:
-    Entity(x, _) -> (x, $[Duplicate entity name])
+    def -> (def, $[Duplicate definition])
     where
-      not(<bagof-GetEntity> x => [_])
-  
-  constraint-warning:
-    Entity(x, _) -> (x, $[Entity names must start with a capital])
+      not(<?PartialClass(_, _)> def)
     where
-      not(<string-starts-with-capital> x)
+      def-child  := <nam-get-definition-key> def;
+      def'       := <index-get-term> <index-lookup-outermost> def-child;
+      not(<origin-equal(|def)> def')
   
-  constraint-note:
-    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
-                                      (this note is defined in trans/check.str) ])
+  constraint-warning = fail
+  constraint-note = fail
+
+  origin-offset =
+    prim("SSL_EXT_origin_offset", <id>) => (<id>, _)
\ No newline at end of file

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Tue Dec 20 14:32:14 2011	(r23820)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Tue Dec 20 14:38:38 2011	(r23821)
@@ -6,57 +6,69 @@
   libstratego-aterm
   include/CSharpPartialClassses
   lib/editor-common.generated
+  analysis-library
   check
-  generate
-  refactor
 
 rules // Main editor interface (defined by editor/CSharpPartialClassses-Builders and -References.esv)
   
   // Analyzes the current program, returning a tuple with errors, warnings, and notes;
   // each a list of (term, message) tuples or simply (message) terms.
   editor-analyze:
-    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
       editor-init;
-      analyze;
-      errors   := <collect-all(constraint-error, conc)> ast;
-      warnings := <collect-all(constraint-warning, conc)> ast;
-      notes    := <collect-all(constraint-note, conc)> ast
-  
-  // Transforms a selection to Java
-  generate-java:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"java")> path;
-      result   := <to-java> selected
+      (ast', defs, uses, data) := <analyze-top>;
+      errors   := <collect-all(constraint-error, conc)> ast';
+      warnings := <collect-all(constraint-warning, conc)> ast';
+      notes    := <collect-all(constraint-note, conc)> ast'
   
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       filename := <guarantee-extension(|"aterm")> path;
-      result   := selected // we just return the input term
-  
+      result   := selected
+      
+  // Prints the analyzed and apsect weaved abstract syntax ATerm of a selection.
+  generate-analyzed:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      editor-init;
+      filename := <guarantee-extension(|"analyzed.aterm")> path;
+      result   := <analyze-top> (selected, path, project-path)
+
   // Resolves a reference when the user control-clicks or presses F3 in the editor.
   // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
   editor-resolve:
     (node, position, ast, path, project-path) -> target
     where
-      <debug(!"Resolve: ")> node; 
-      Type(type) := node; 
-      target     := <GetEntity> type
+      // TODO: shouldn't work on parent node?
+      !node => <one(?subnode) <+ ?subnode>;
+      def     := <index-lookup> node;
+      target  := /*<index-get-term>*/ def
 
   // Returns "hover help" information for a particular node in the editor.
   // For references, this rule is invoked using the resolved term.
   editor-hover:
-    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+    (target, position, ast, path, project-path) -> $[[def-path'']]
+    where
+      // FIXME: this only works for definition paths
+      //<debug(!2)> target;
+      def-term           := <nam-get-definition-key> target;
+      _{[ns | def-path]} := def-term;
+      def-path'  := <take-until(?Anon())> def-path;
+      def-path'' := <reverse; separate-by(|".")> def-path'
 
   // Completes an identifier when the user presses control-space
   // (the completion identifier in the AST provides additional context information)
   editor-complete:
-    (node, position, ast, path, project-path) ->
-    ["String", "Int" | proposals]
+    (node, position, ast, path, project-path) -> proposals'
     where
-      if !node => Type(COMPLETION(prefix)) then
-        proposals := <all-keys-GetEntity>
-      end
+      editor-init;
+      (ast', _, _, _) := <analyze-top> (ast, path, project-path);
+      x              := <collect-one(?COMPLETION(_))> ast';
+      proposals      := <index-lookup-all-levels> x;
+      proposals'     := <map(def-to-name)> proposals
+      
+  def-to-name:
+    Def([namespace, name | _]) -> name

From richard at vogelij.nl  Wed Dec 21 00:17:30 2011
From: richard at vogelij.nl (Richard Vogelij)
Date: Tue, 20 Dec 2011 23:17:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23829 - in
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/util:
	. concurrent
Message-ID: <20111220231730.914BF108C02E@mx3.tudelft.nl>

Author: rvogelij
Date: Tue Dec 20 23:17:30 2011
New Revision: 23829
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23829&sc=1

Log:
Fixed the org.spoofax.terms project to be compilable in GWT again.
- Added an emulated version of the CopyOnWriteArraySet which is only used in GWT

Added:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/util/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/util/concurrent/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/util/concurrent/CopyOnWriteArraySet.java

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/util/concurrent/CopyOnWriteArraySet.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/util/concurrent/CopyOnWriteArraySet.java	Tue Dec 20 23:17:30 2011	(r23829)
@@ -0,0 +1,122 @@
+/**
+ * @author Richard Vogelij
+ * The CopyOnWriteArraySet<T> does not work in GWT.
+ * Therefore this replacement class which implements the same methods.
+ */
+
+package java.util.concurrent;
+
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+
+public class CopyOnWriteArraySet<E> implements Set<E> {
+	
+	private final Set<E> al;
+
+	public CopyOnWriteArraySet() {
+		al = new HashSet<E>();
+	}
+
+	public CopyOnWriteArraySet(Collection<? extends E> c) {
+		al = new HashSet<E>();
+		al.addAll(c);
+	}
+
+	public int size() {
+		return al.size();
+	}
+
+	public boolean isEmpty() {
+		return al.isEmpty();
+	}
+
+	public boolean contains(Object o) {
+		return al.contains(o);
+	}
+	public Object[] toArray() {
+		return al.toArray();
+	}
+
+	public <T> T[] toArray(T[] a) {
+		return al.toArray(a);
+	}
+
+	public void clear() {
+		al.clear();
+	}
+
+	public boolean remove(Object o) {
+		return al.remove(o);
+	}
+
+	public boolean add(E e) {
+		return al.add(e);
+	}
+
+	public boolean containsAll(Collection<?> c) {
+		return al.containsAll(c);
+	}
+
+	
+	public boolean addAll(Collection<? extends E> c) {
+		return al.addAll(c);
+	}
+
+	
+	public boolean removeAll(Collection<?> c) {
+		return al.removeAll(c);
+	}
+
+	public boolean retainAll(Collection<?> c) {
+		return al.retainAll(c);
+	}
+
+	public Iterator<E> iterator() {
+		return al.iterator();
+	}
+
+	@Override
+	public boolean equals(Object o) {
+		if (o == this)
+			return true;
+		if (!(o instanceof Set))
+			return false;
+		Set<?> set = (Set<?>) (o);
+		Iterator<?> it = set.iterator();
+
+		// Uses O(n^2) algorithm that is only appropriate
+		// for small sets, which CopyOnWriteArraySets should be.
+
+		// Use a single snapshot of underlying array
+		Object[] elements = al.toArray();
+		int len = elements.length;
+		// Mark matched elements to avoid re-checking
+		boolean[] matched = new boolean[len];
+		int k = 0;
+		outer: while (it.hasNext()) {
+			if (++k > len)
+				return false;
+			Object x = it.next();
+			for (int i = 0; i < len; ++i) {
+				if (!matched[i] && eq(x, elements[i])) {
+					matched[i] = true;
+					continue outer;
+				}
+			}
+			return false;
+		}
+		return k == len;
+	}
+
+	@Override
+	public int hashCode() {
+		// TODO Auto-generated method stub
+		return super.hashCode();
+	}
+
+	private static boolean eq(Object o1, Object o2) {
+		return (o1 == null ? o2 == null : o1.equals(o2));
+	}
+}

From richard at vogelij.nl  Wed Dec 21 01:11:16 2011
From: richard at vogelij.nl (Richard Vogelij)
Date: Wed, 21 Dec 2011 00:11:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23830 - in
	strategoxt-javascript-backend/trunk: . src/javascript src/stratego
Message-ID: <20111221001116.99CA6CC056@mx4.tudelft.nl>

Author: rvogelij
Date: Wed Dec 21 00:11:15 2011
New Revision: 23830
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23830&sc=1

Log:
- Fixed a problem where the resulting javascript file would have non-ascii characters prepended in else-if statements
- Added some unimplemented primitives to ssl (*_to_string, concat)

Modified:
   strategoxt-javascript-backend/trunk/Makefile
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str

Modified: strategoxt-javascript-backend/trunk/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/Makefile	Tue Dec 20 23:17:30 2011	(r23829)
+++ strategoxt-javascript-backend/trunk/Makefile	Wed Dec 21 00:11:15 2011	(r23830)
@@ -14,6 +14,9 @@
 LIBPATH=src/stratego
 LIBPATH=.
 
+#use this directive to pass a spoofax project's home dir. (to fix missing lib/include residing file errors)
+OPTSPOOFAXHOMEDIR=-I .
+
 all: s2js.jar
 
 out/s2js/s2js.java: src/stratego/s2js.str $(wildcard src/stratego/*.str)
@@ -28,7 +31,7 @@
 	fastjar cf s2js.jar -C out/ .
 
 %.js: $(prefix)%.str s2js.jar
-	java -Xmx1536m -cp $(SXTJAR):s2js.jar -ss4m s2js.s2js -O 0 -i $< -I $(STRLIB) -I . -I $(CTREES) -I $(STRSDF) $(I) > $@
+	java -Xmx1536m -cp $(SXTJAR):s2js.jar -ss4m s2js.s2js -O 0 -i $< -I $(STRLIB) -I . -I $(CTREES) -I $(STRSDF) $(OPTSPOOFAXHOMEDIR) $(I) > $@
 
 %.lib.js: %.js
 	cat $< | scripts/wrap-libraries.sh > $@

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Tue Dec 20 23:17:30 2011	(r23829)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Wed Dec 21 00:11:15 2011	(r23830)
@@ -484,6 +484,24 @@
 		trace("SSL_is_int");
 		return ctx.factory.termType(currentTerm) === ctx.factory.INT;
 	}
+	
+	StrategoJS.SSL.SSL_int_to_string = function(ctx, currentTerm, intValue)
+	{
+		trace("SSL_int_to_string");
+		if(ctx.factory.termType(intValue) !== ctx.factory.INT)
+			return null;
+		return intValue.toString(10);
+	}
+
+	StrategoJS.SSL.SSL_real_to_string = function(ctx, currentTerm, realValue)
+	{
+		trace("SSL_real_to_string");
+		if(ctx.factory.termType(realValue) !== ctx.factory.REAL)
+			return null;
+		return realValue.toString();
+	}
+
+
 
 	return true;
 }();

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Tue Dec 20 23:17:30 2011	(r23829)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Wed Dec 21 00:11:15 2011	(r23830)
@@ -1,643 +1,643 @@
-/*
- * JavaScript backend for Stratego.
- *
- * @author Karl Trygve Kalleberg <karltk at strategoxt.org>
- * @author Lennart Kats
- */
-module s2js
-imports
-  libstratego-lib
-  libstrc
-
-	libstratego-aterm
-	libstratego-gpp
-	libstratego-xtc
-
-
-  src/stratego/s2js-options 
-  src/stratego/backend-simplify 
-  src/stratego/lib/dr-scoping
-  src/stratego/signatures
-  src/stratego/term-construction
-  src/stratego/term-deconstruction
-  src/stratego/utils
-  src/stratego/variable-access
-  src/stratego/variable-lifting
-
-  src/stratego/direct
-
-strategies
-	
-  main = id
-	; with(s2js-init-options)
-	; parse-options(s2js-options)
-	; xtc-input(s2js)
-	; echo
-	; ![]
-	
-  pp-aterm(msg) = ?x; pp-aterm-box; box2text-string(|80); debug(msg); !x
-	
-  s2js =
-      with(
-        record-main-closurename
-      )
-	; log-timed(id
-        ; direct-compile
-        ; backend-simplify
-      | "Backend preprocessing succeeded", 1
-      )
-    ; log-timed(id
-        ; dr-scope-all-verbose(js-compile-spec)
-      | "Backend transformation succeeded", 1
-      )
-
-
-
-rules
-	
-  js-compile-spec:
-    Specification([Signature([Constructors(ops)]), Strategies(defs)]) ->
-    $[
-       StrategoJS.[closure-name] = function() {
-         var SRTS = StrategoJS.SRTS;
-         var c = {};
-         var trace = StrategoJS.trace;
-         var error = StrategoJS.error;
-         var info = StrategoJS.info;
-         var rootCtx = SRTS.initContext();
-         var factory = rootCtx.factory;
-         var TRACES_ENABLED = true;
-         var _Fail = StrategoJS.resolveImport("SSL_fail");
-         var _Id = StrategoJS.resolveImport("SSL_id");
-         var SRTS_one = StrategoJS.resolveImport("SRTS_one");
-         var SRTS_all = StrategoJS.resolveImport("SRTS_all");
-         var SRTS_some = StrategoJS.resolveImport("SRTS_some");
-         /*
-         [import*]
-         */
-         [ctor-decl*]
-         [ctor-init*]
-         [const-decl*]
-         [const-init*]
-         [function-def*]
-         [lifted-def*]
-         [main-method]
-         return c;
-       };
-    ]
-  with
-  	alltd(JSTranslate)
-  ; import*      := <js-imports>
-  ; closure-name := <MainClosureName>
-  ; import-init* := <js-init-imports>
-  ; register*    := <js-register-method> defs
-  ; constant*    := <js-constant-methods>
-  ; main-method  := <js-main-method>
-  with
-  	rules(
-  		CurrentLiftedFrame := None()
-  	)
-  ; function-def* := <map(translate-outer-definition <+ debug(!"bombed "))> defs
-  ; add-default-constructors
-  ; constant-def* := <map(translate-constant-definition)> defs
-  ; lifted-def*   := "" // TODO <bagof-LiftedDef>
-  ; ctor-decl*    := <bagof-ConstructorDecl>
-  ; ctor-init*    := <bagof-ConstructorInit>
-  ; def-init*     := "" // TODO <bagof-DefInit>
-  ; const-decl*   := <bagof-ConstDecl>
-  ; const-init*   := <bagof-ConstInit>
-
-  js-imports = <get-config> "-la" ; map(js-import) <+ ![]    
-    
-  js-import: x -> $[import([<with(jsify)> x])]
-
-  js-init-imports = <get-config> "-la" ; map(js-init-import) <+ ![]
-
-  js-init-import: x -> $[[<with(jsify)> x].Main.init(context);]
-  
-  js-register-method = !"" // TODO(karltk)
-  js-constant-methods = !"" // TODO(karltk) 
-     	
-strategies
-	
-  record-main-closurename =
-  	(<get-config> "-o" <+ strc-getoutfile(!"") <+ !"init")
-  ; base-filename
-  ; jsify
-  ; remove-extension
-  ; rules(
-    	MainClosureName := <id>
-    )
-  	
-  	
-  js-main-method =
-  	!$[
-  		c.main = function(term) {
-  			try {
-  				var t = main_0_0(rootCtx, SRTS.cliArgumentsToList(term, factory));
-  				if(t != null) {
-  					info(factory.prettify(t));
-  					return t;
-  				}
-			} catch(e) {
-				error("Stratego/JS internal exception :" + e);
-			}
-			rootCtx.printStackTrace();
-  			return null;
-  		}
-  	]	
-
- //
- // Strategy and rule definitions
- //
-
-rules
-  is-debug-output:
-	(verbose, terse) -> terse
-
-  translate-constant-definition = !"" // TODO(karltk)
-	
-  translate-outer-definition : 
-    AnnoDef([Extend()], def @ SDefT(x, s*, t*, s)) ->
-    $[var /* unsupported extend */ [x] = [body];]
-  with
-  	body := <translate-definition-body> def   
-
-
-  translate-outer-definition : 
-    AnnoDef([Override()], def @ SDefT(x, s*, t*, s)) ->
-    $[var /* unsupported override */ [x] = [body];]
-  with
-  	body := <translate-definition-body> def   
-
-  translate-outer-definition : 
-    AnnoDef([Internal()], def @ SDefT(x, s*, t*, s)) ->
-    $[var /* unsupported internal */ [x] = [body];]
-  with
-  	body := <translate-definition-body> def   
-
-  translate-outer-definition :
-	SDefT(x, s*, t*, s){a*} -> result
-  with
-	body := <translate-definition-body>;
-	verbose := $[
-  		var [x] = [body];
-  		c.[x] = [x];
-	];
-	terse := $[var [x] = c.[x] = [body];
-	];
-	result := <is-debug-output>(verbose, terse)
-
-  translate-outer-definition :
-    ExtSDef(n, _, _) -> 
-    $[var [n] = StrategoJS.resolveImport("[n]");
-    ]
-
-  translate-inner-definition :
-	SDefT(x, s*, t*, s){a*} ->
-	$[var [x] = [body];
-  	]	
-  with
-  	body := <translate-definition-body>
-  
-  translate-definition-body:
-	SDefT(x, s*, t*, s) -> result
-	with
-  	{| 
-  		IsStrategyArg, CurrentLiftedFrame:
-//  		js-CheckBuild, js-CheckBuild, IsLiftedTVar,
-//  		IsLiftedSVar, LiftedTVars, LiftedSVars:
-  		
-  	    (s'*, [])         := <translate-params> s*
-  	  ; (t'*, bstm-init*) := <translate-params> t*
-  	  ; formal*           := <conc> (s'*, t'*)
-      ; param*            := < 
-        	if !formal* => "" then
-        		!""
-        	else 
-        		<string-join(|",")> ["" | formal*]
-        	end>
-  	  ; feil              := <newname> "Fail_"
-  	  ; bstm              := <translate-strategy(|"ERROR", feil)> s
-	|};
-	verbose := $[
-     function(ctx, term [param*]) {
-       trace("[x] : " + (term === undefined ? "undefined" : ctx.factory.prettify(term)));
-       [bstm-init*]
-       if(TRACES_ENABLED) ctx.push("[x]");
-       [feil]: {
-         [bstm]
-         if(TRACES_ENABLED) ctx.popOnSuccess();
-         return term;
-       }
-       if(TRACES_ENABLED) ctx.popOnFailure();
-       return null;
-     }
-	];
-	terse :=
-   $[function(ctx, term [param*]) {
-       [bstm-init*]
-       [feil]: {
-         [bstm]
-         return term;
-       }
-       return null;
-     }
-     ]
-    ;
-	result := <is-debug-output>(verbose, terse)
-
-  translate-params = 
-  	unzip(translate-param <+ debug(!"Bombed : "))
-  ; (id, concat)
-    
-  translate-param: 
-  	VarDec(x{}, ConstType(_)) -> ($[[x]], [])
-  	
-  translate-param:
-  	VarDec(x{Offset(_), Escapes()}, ConstType(_)) -> ($[[x]], []) //($[[x']], [$[var ref_[x] = termRef([x']);]])
-  with
-  	x' := <conc-strings> ("ref_", x)
-  	
-  translate-param:
-  	VarDec(x, FunType(_, _)) -> ($[[x]], [])
-  with
-  	 frame := <CurrentLiftedFrame>
-   ; rules(IsStrategyArg: (frame, x))
-  
- //
- //  Strategies
- //
- 
-strategies
-
-	
-  // TODO (karltk) replace s,f with dynrules? do we really need s at all?
-  translate-strategy(|s,f) = 
-  	 (
-  	 	translate-CallT-dynamic(|s,f)
-  	 <+ translate-CallT(|s,f)
-  	 <+ translate-Build(|s,f)
-  	 <+ translate-Seq(|s,f)
-  	 <+ translate-PrimT(|s,f)
-  	 <+ translate-Id(|s,f)
-  	 <+ translate-Fail(|s,f)
-  	 <+ translate-Override(|s,f)
-  	 <+ translate-GuardedLChoice-no-left-branch(|s,f)
-  	 <+ translate-GuardedLChoice(|s,f)
-  	 <+ translate-Scope(|s,f)
-  	 <+ translate-Match(|s,f)
-  	 <+ translate-Let(|s,f)
-  	 <+ translate-ImportTerm(|s,f)
-  	 <+ translate-Escape(|s,f)
-  	 <+ fatal-err(|"translate-strategy failed ")
-  	 ) 
-  	
-
-  translate-CallT-dynamic(|s,feil) = fail // TODO(karltk)
-  
-  translate-CallT(|s,feil):
-	CallT(SVar(x), s*, t*) -> result
-  with
-      s'* := <map(lift-strategy-to-function)> s*
-	; t'* := <map(js-construct-term(|feil))> t*
-	; args := <js-join-args> (s'*, t'*)
-	; verbose := $[
-        term = [x](ctx, term [args]);	
-        if(term === null) {
-        	trace("[feil] : return from [x]"); 
-            break [feil];
-        } else if(term === undefined) {
-        	throw "internal error: call to [x] produced 'undefined' result";
-        }
-  	]
-	; terse := $[term = [x](ctx, term [args]);
-	  if(term === null) {
-		break [feil];
-	  };
-	  ];
-	result := <is-debug-output>(verbose, terse)
-  	  
-  js-join-args:
- 	(s'*, t'*) -> args
-  with 
-  	arg* := <conc> (s'*, t'*)
-  ; if !arg* => [] then
-      args := ""
-  	else
-  	  args := <string-join(|",")> ["" | arg*]
-  	end
-  	
-  translate-Build(|s,f) :
-  	Build(t) -> <js-check-unbound-args(|t, f)>
-	$[[dec*][stm*] term = [e]; ]
-  with
-  	{| js-CheckBuild : 
-  	    e := <js-construct-term(|f)> t
-  	  ; (dec*, stm*) := <bagof-js-CheckBuild ; unzip> e    
-  	|}
-  	
-
-  translate-Seq(|s,f):
-	Seq(s1, s2) -> $[[s1'][s2']]
-	with s1' := <translate-strategy(|s,f)> s1
-	with s2' := <translate-strategy(|s,f)> s2
-  	
-  translate-PrimT(|s,feil) :
-    PrimT(f, s*, t*) -> <js-check-unbound-args(|t*, feil)>result
-  with
-      s'*  := <map(lift-strategy-to-function)> s*
-    ; t'*  := <map(js-construct-term(|feil))> t*
-    ; args := <js-join-args> (s'*, t'*)
-    ; verbose := $[
-      ctx.push("[f]");
-      term = StrategoJS.SSL.[f](ctx, term [args]);
-      if (term === null) {
-      	ctx.popOnFailure();
-      	trace("[feil]");
-      	break [feil];
-      } else if(term === undefined) {
-      	throw "internal error: call to SSL.[f] gave undefined term"; 
-      }
-      ctx.popOnSuccess();
-    ]
-    ; terse := $[term = StrategoJS.SSL.[f](ctx,term [args]);
-      if(term === null){
-	break [feil];
-      }
-      ]
-    ; result := <is-debug-output>(verbose, terse)
-  
-  translate-Id(|s,f):
-  	Id() -> "/* id */"
-  	
-  translate-Fail(|s, feil):
-	Fail() -> <is-debug-output>(
-		$[ {?trace("[feil]"); break [feil]; } ],
-		$[ { break [feil]; } ])
-  	
-  translate-Override(|s,f) = fail // TODO (karltk)
-  
-  translate-GuardedLChoice-no-left-branch(|s,f):
-	GuardedLChoice(s1, Id(), s2) -> result
-  with
-	  copy := <newname> "term_"
-	; succ := <newname> "Success_"
-	; feil := <newname> "Fail_"
-	; s1'  := <translate-strategy(|succ,feil)> s1
-	; s2'  := <translate-strategy(|succ,f)> s2
-	; verbose := $[
-		var [copy] = term;
-  		[succ]: {
-  			[feil]: {
-  				[s1']
-  				break [succ];
-  			} 
-  			term = [copy]
-  			[s2']
-  		}
-	  ]
-	; terse := $[var [copy] = term;
-	  [succ]: {
-		[feil]: {
-			[s1']
-			break [succ];
-		}
-		term = [copy];
-		[s2']
-	  }
-	  ]
-	; result := <is-debug-output>(verbose, terse)
-  	  	
-  translate-GuardedLChoice(|s,outerfeil):
-	GuardedLChoice(s1, s2, s3) -> result
-  with
-	  copy      := <newname> "term_"
-	; succ      := <newname> "Success_"
-	; feil      := <newname> "Fail_"
-	; s1'       := <translate-strategy(|succ,feil)> s1
-	; s2'       := <translate-strategy(|succ,outerfeil)> s2
-    ; s3'       := <translate-strategy(|succ,outerfeil)> s3
-    ; verbose := $[
-	    var [copy] = term;
-  		[succ]: {
-  			[feil]: {
-  				[s1']
-				[s2']
-  				break [succ];
-  			}
-  			term = [copy];
-  			[s3']
-  		}
-  	]
-	; terse := $[var [copy] = term;
-	  [succ]: {
-		[feil]: {
-			[s1']
-			[s2']
-			break [succ];
-		}
-		term = [copy];
-		[s3']
-	  }
-	  ]
-	; result := <is-debug-output>(verbose, terse)
-  	
-    translate-Scope(|s,f) : 
-    Scope(vars, body) -> result
-    with
-      decl*  := <map(to-js-vardecl)> vars
-    ; body'  := <translate-strategy(|s,f)> body
-    ; verbose := $[
-      [decl*]
-      [body']
-    ]
-    ; terse := $[[decl*]
-      [body']
-      ]
-    ; result := <is-debug-output>(verbose, terse)
-
-  translate-Let(|s,f) : 
-    Let(defs, body) -> $[{/*let*/
-    		[def*]
-    		[body']
-	}/*let*/]
-  with 
-    def* := <map(translate-inner-definition)> defs
-  ; body' := <translate-strategy(|s,f)> body
-  
-
-  NonReqEscape =
-      NonReqEscape-backslash ; NonReqEscape-double-quote ; NonReqEscape-linefeed ; NonReqEscape-carriage-return
-
-  NonReqEscape-backslash = string-replace(|"\\", "\\\\")
-
-  /** @internal */
-  NonReqEscape-double-quote = string-replace(|"\"",  "\\\"")
-  
-  /** @internal */
-  NonReqEscape-single-quote = string-replace(|"'","\\'")
-  
-  /** @internal */
-  
-  /** @internal */
-  NonReqEscape-linefeed = string-replace(|"\n", "\\n")
-  
-  NonReqEscape-carriage-return = string-replace(|"\r", "\\r")
-  /** @internal */
-
-
-  translate-ImportTerm(|s,f) :
-    ImportTerm(file) -> $[ term = /*x_constants.*/[x_constant]; ]
-  with
-      inputfile  := <find-import-term-file> file // (exits on error)
-    ; contents   := <ReadFromFile> inputfile
-  with
-      inputname     := <file-name-to-identifier> inputfile
-    ; inputname'    := <not(IsImported) <+ newname> inputname
-    ; x_constant    := <conc-strings> ("const", inputname')
-    ; x_getconstant := <conc-strings> ("get",   inputname')
-//    ; x_constants   := <ConstantContainerClass>
-    ; rules(
-        IsImported : inputname
-        ConstDecl :+= $[var [x_constant];]
-        ConstDecl :+= $[]
-        ConstInit :+= $[[x_constant] = StrategoJS.Term.parse("[<write-to-string; NonReqEscape> contents]");] /*[x_constants],*/
-      )
-
-   output-dirname =
-     OutputDirName
-   <+
-     <get-config> "-o"
-   ; if has-extension(|"java") + has-extension(|"ctree") then
-       dirname
-     end
-   ; try(file-exists <+ mkdir <+ fatal-err(|"Output directory does not exist"))
-   ; rules(OutputDirName := <id>)
-   <+
-     strc-getoutfile(!"")
-   ; dirname
-   ; try(file-exists <+ mkdir)
-   ; rules(OutputDirName := <id>)
-
-  file-name-to-identifier =
-    base-filename
-  ; string-as-chars(
-      listtd(try(['.', to-upper | id]))
-    ; filter(is-alphanum)
-    ; [to-upper | id]
-    )
-
-  find-import-term-file :
-    file -> file'
-  with
-      pack-stratego-options-wrap(
-        pack-include-path
-      ; getfirst(pack-find-from-dir(|file)) => file'
-      <+
-        basefile := <base-filename> file
-      ; pack-include-path
-      ; getfirst(pack-find-from-dir(|basefile)) => file'
-      )
-    <+
-      file' := <file-exists> file
-    <+
-      fatal-err(|["file ", file, " for imported term not found"])
-      
-  pack-stratego-options-wrap(s) =
-    finally(
-      with(
-        include* := <get-config <+ ![]> "-I"
-      ; <set-config> ("-I", [])
-      ; <parse-options(pack-stratego-options, system-usage, id)> [<whoami>, include*, "-I", "."]
-      )
-    ; s
-    , <set-config> ("-I", include*)
-    )
-
-  
-  translate-Escape(|s,f) = fail // TODO (karltk)
-  
-  
- //
- //  Lifting 
- //  
-
-strategies
-	
-  lift-strategy-to-function =
-  	   lift-call-to-function
-  	<+ lift-other-to-function
-
-  lift-call-to-function:
-    CallT(SVar(x), _, _) -> x
-  
-  lift-other-to-function:
-  	s -> fun 
-  with 
-  	fun := <translate-definition-body> SDefT(<newname => x> "jslifted", [], [], <id>)
-   	  	
-rules
-	
-  JSTranslate = 
-    ?OpDecl(c, t)
-  ; rules(
-      ConstructorDecl :+= <JSDeclareConstructor>
-      ConstructorInit :+= <JSInitConstructorQ <+ JSInitConstructor>  
-    )
-    
-  JSTranslate =
-  	?ExtOpDecl(c, t)
-  ; !OpDecl(c, t)	
-  ; JSTranslate
-    
- JSDeclareExtConstructor:
- 	ExtOpDecl(c, t) ->
-	$[/* external constructor [x] */]
- 	with
- 		n := <Arity <+ is-int> t
- 	;	x := <js-ConstructorName> (c, n)
-    
-  JSDeclareConstructor: 
-  	OpDecl(c, t) -> 
-	$[/* constructor [x] */]
-  where
-  	not(OpDecl("", id) + OpDecl("Cons", [id, id]) + OpDecl("Nil", []))
-  with
-  	n := <Arity <+ is-int> t
-  ; x := <js-ConstructorName> (c, n)
-  ; rules(IsLocalOpDecl : (c, n))
-    
-  JSInitConstructorQ:
-  	OpDecl(c, t) -> 
-	$[var [x] = factory.makeCtor("[c']", [<js-mk-int-const> ar]);
-	]
-  where
-    c' := <string-as-chars(unescape-chars ; un-double-quote-chars)> c
-  ; ar := <Arity <+ is-int> t
-  ; x  := <js-ConstructorName> (c, ar)
-    
-    
-  JSInitConstructor:
-	OpDecl(c, t) -> $[var [x] = factory.makeCtor("[c]", [<js-mk-int-const> ar]);]
-  where
-  	ar := <Arity <+ is-int> t
-  ; x  := <js-ConstructorName> (c, ar)
-    
-  add-default-constructors = 
-  	with(
-  		add-ctor(|"Some", 1)
-  	  ; add-ctor(|"None", 0)
-  	  ; add-ctor(|"Conc", 2)
-  	)
-  	
-  add-ctor(|name, arity) =
-  	if not(<IsLocalOpDecl> (name, arity)) then
-  		x := <js-ConstructorName> (name, arity)
-  	  ; rules(
-          IsLocalOpDecl: (name, arity)
-  	      ConstructorDecl :+= $[]
-	      ConstructorInit :+= $[var [x] = factory.makeCtor("[name]", [<js-mk-int-const> arity]);
-  	      ]
-  	    )
-  	end 	    
+/*
+ * JavaScript backend for Stratego.
+ *
+ * @author Karl Trygve Kalleberg <karltk at strategoxt.org>
+ * @author Lennart Kats
+ */
+module s2js
+imports
+  libstratego-lib
+  libstrc
+
+	libstratego-aterm
+	libstratego-gpp
+	libstratego-xtc
+
+
+  src/stratego/s2js-options 
+  src/stratego/backend-simplify 
+  src/stratego/lib/dr-scoping
+  src/stratego/signatures
+  src/stratego/term-construction
+  src/stratego/term-deconstruction
+  src/stratego/utils
+  src/stratego/variable-access
+  src/stratego/variable-lifting
+
+  src/stratego/direct
+
+strategies
+	
+  main = id
+	; with(s2js-init-options)
+	; parse-options(s2js-options)
+	; xtc-input(s2js)
+	; echo
+	; ![]
+	
+  pp-aterm(msg) = ?x; pp-aterm-box; box2text-string(|80); debug(msg); !x
+	
+  s2js =
+      with(
+        record-main-closurename
+      )
+	; log-timed(id
+        ; direct-compile
+        ; backend-simplify
+      | "Backend preprocessing succeeded", 1
+      )
+    ; log-timed(id
+        ; dr-scope-all-verbose(js-compile-spec)
+      | "Backend transformation succeeded", 1
+      )
+
+
+
+rules
+	
+  js-compile-spec:
+    Specification([Signature([Constructors(ops)]), Strategies(defs)]) ->
+    $[
+       StrategoJS.[closure-name] = function() {
+         var SRTS = StrategoJS.SRTS;
+         var c = {};
+         var trace = StrategoJS.trace;
+         var error = StrategoJS.error;
+         var info = StrategoJS.info;
+         var rootCtx = SRTS.initContext();
+         var factory = rootCtx.factory;
+         var TRACES_ENABLED = true;
+         var _Fail = StrategoJS.resolveImport("SSL_fail");
+         var _Id = StrategoJS.resolveImport("SSL_id");
+         var SRTS_one = StrategoJS.resolveImport("SRTS_one");
+         var SRTS_all = StrategoJS.resolveImport("SRTS_all");
+         var SRTS_some = StrategoJS.resolveImport("SRTS_some");
+         /*
+         [import*]
+         */
+         [ctor-decl*]
+         [ctor-init*]
+         [const-decl*]
+         [const-init*]
+         [function-def*]
+         [lifted-def*]
+         [main-method]
+         return c;
+       };
+    ]
+  with
+  	alltd(JSTranslate)
+  ; import*      := <js-imports>
+  ; closure-name := <MainClosureName>
+  ; import-init* := <js-init-imports>
+  ; register*    := <js-register-method> defs
+  ; constant*    := <js-constant-methods>
+  ; main-method  := <js-main-method>
+  with
+  	rules(
+  		CurrentLiftedFrame := None()
+  	)
+  ; function-def* := <map(translate-outer-definition <+ debug(!"bombed "))> defs
+  ; add-default-constructors
+  ; constant-def* := <map(translate-constant-definition)> defs
+  ; lifted-def*   := "" // TODO <bagof-LiftedDef>
+  ; ctor-decl*    := <bagof-ConstructorDecl>
+  ; ctor-init*    := <bagof-ConstructorInit>
+  ; def-init*     := "" // TODO <bagof-DefInit>
+  ; const-decl*   := <bagof-ConstDecl>
+  ; const-init*   := <bagof-ConstInit>
+
+  js-imports = <get-config> "-la" ; map(js-import) <+ ![]    
+    
+  js-import: x -> $[import([<with(jsify)> x])]
+
+  js-init-imports = <get-config> "-la" ; map(js-init-import) <+ ![]
+
+  js-init-import: x -> $[[<with(jsify)> x].Main.init(context);]
+  
+  js-register-method = !"" // TODO(karltk)
+  js-constant-methods = !"" // TODO(karltk) 
+     	
+strategies
+	
+  record-main-closurename =
+  	(<get-config> "-o" <+ strc-getoutfile(!"") <+ !"init")
+  ; base-filename
+  ; jsify
+  ; remove-extension
+  ; rules(
+    	MainClosureName := <id>
+    )
+  	
+  	
+  js-main-method =
+  	!$[
+  		c.main = function(term) {
+  			try {
+  				var t = main_0_0(rootCtx, SRTS.cliArgumentsToList(term, factory));
+  				if(t != null) {
+  					info(factory.prettify(t));
+  					return t;
+  				}
+			} catch(e) {
+				error("Stratego/JS internal exception :" + e);
+			}
+			rootCtx.printStackTrace();
+  			return null;
+  		}
+  	]	
+
+ //
+ // Strategy and rule definitions
+ //
+
+rules
+  is-debug-output:
+	(verbose, terse) -> terse
+
+  translate-constant-definition = !"" // TODO(karltk)
+	
+  translate-outer-definition : 
+    AnnoDef([Extend()], def @ SDefT(x, s*, t*, s)) ->
+    $[var /* unsupported extend */ [x] = [body];]
+  with
+  	body := <translate-definition-body> def   
+
+
+  translate-outer-definition : 
+    AnnoDef([Override()], def @ SDefT(x, s*, t*, s)) ->
+    $[var /* unsupported override */ [x] = [body];]
+  with
+  	body := <translate-definition-body> def   
+
+  translate-outer-definition : 
+    AnnoDef([Internal()], def @ SDefT(x, s*, t*, s)) ->
+    $[var /* unsupported internal */ [x] = [body];]
+  with
+  	body := <translate-definition-body> def   
+
+  translate-outer-definition :
+	SDefT(x, s*, t*, s){a*} -> result
+  with
+	body := <translate-definition-body>;
+	verbose := $[
+  		var [x] = [body];
+  		c.[x] = [x];
+	];
+	terse := $[var [x] = c.[x] = [body];
+	];
+	result := <is-debug-output>(verbose, terse)
+
+  translate-outer-definition :
+    ExtSDef(n, _, _) -> 
+    $[var [n] = StrategoJS.resolveImport("[n]");
+    ]
+
+  translate-inner-definition :
+	SDefT(x, s*, t*, s){a*} ->
+	$[var [x] = [body];
+  	]	
+  with
+  	body := <translate-definition-body>
+  
+  translate-definition-body:
+	SDefT(x, s*, t*, s) -> result
+	with
+  	{| 
+  		IsStrategyArg, CurrentLiftedFrame:
+//  		js-CheckBuild, js-CheckBuild, IsLiftedTVar,
+//  		IsLiftedSVar, LiftedTVars, LiftedSVars:
+  		
+  	    (s'*, [])         := <translate-params> s*
+  	  ; (t'*, bstm-init*) := <translate-params> t*
+  	  ; formal*           := <conc> (s'*, t'*)
+      ; param*            := < 
+        	if !formal* => "" then
+        		!""
+        	else 
+        		<string-join(|",")> ["" | formal*]
+        	end>
+  	  ; feil              := <newname> "Fail_"
+  	  ; bstm              := <translate-strategy(|"ERROR", feil)> s
+	|};
+	verbose := $[
+     function(ctx, term [param*]) {
+       trace("[x] : " + (term === undefined ? "undefined" : ctx.factory.prettify(term)));
+       [bstm-init*]
+       if(TRACES_ENABLED) ctx.push("[x]");
+       [feil]: {
+         [bstm]
+         if(TRACES_ENABLED) ctx.popOnSuccess();
+         return term;
+       }
+       if(TRACES_ENABLED) ctx.popOnFailure();
+       return null;
+     }
+	];
+	terse :=
+   $[function(ctx, term [param*]) {
+       [bstm-init*]
+       [feil]: {
+         [bstm]
+         return term;
+       }
+       return null;
+     }
+     ]
+    ;
+	result := <is-debug-output>(verbose, terse)
+
+  translate-params = 
+  	unzip(translate-param <+ debug(!"Bombed : "))
+  ; (id, concat)
+    
+  translate-param: 
+  	VarDec(x{}, ConstType(_)) -> ($[[x]], [])
+  	
+  translate-param:
+  	VarDec(x{Offset(_), Escapes()}, ConstType(_)) -> ($[[x]], []) //($[[x']], [$[var ref_[x] = termRef([x']);]])
+  with
+  	x' := <conc-strings> ("ref_", x)
+  	
+  translate-param:
+  	VarDec(x, FunType(_, _)) -> ($[[x]], [])
+  with
+  	 frame := <CurrentLiftedFrame>
+   ; rules(IsStrategyArg: (frame, x))
+  
+ //
+ //  Strategies
+ //
+ 
+strategies
+
+	
+  // TODO (karltk) replace s,f with dynrules? do we really need s at all?
+  translate-strategy(|s,f) = 
+  	 (
+  	 	translate-CallT-dynamic(|s,f)
+  	 <+ translate-CallT(|s,f)
+  	 <+ translate-Build(|s,f)
+  	 <+ translate-Seq(|s,f)
+  	 <+ translate-PrimT(|s,f)
+  	 <+ translate-Id(|s,f)
+  	 <+ translate-Fail(|s,f)
+  	 <+ translate-Override(|s,f)
+  	 <+ translate-GuardedLChoice-no-left-branch(|s,f)
+  	 <+ translate-GuardedLChoice(|s,f)
+  	 <+ translate-Scope(|s,f)
+  	 <+ translate-Match(|s,f)
+  	 <+ translate-Let(|s,f)
+  	 <+ translate-ImportTerm(|s,f)
+  	 <+ translate-Escape(|s,f)
+  	 <+ fatal-err(|"translate-strategy failed ")
+  	 ) 
+  	
+
+  translate-CallT-dynamic(|s,feil) = fail // TODO(karltk)
+  
+  translate-CallT(|s,feil):
+	CallT(SVar(x), s*, t*) -> result
+  with
+      s'* := <map(lift-strategy-to-function)> s*
+	; t'* := <map(js-construct-term(|feil))> t*
+	; args := <js-join-args> (s'*, t'*)
+	; verbose := $[
+        term = [x](ctx, term [args]);	
+        if(term === null) {
+        	trace("[feil] : return from [x]"); 
+            break [feil];
+        } else if(term === undefined) {
+        	throw "internal error: call to [x] produced 'undefined' result";
+        }
+  	]
+	; terse := $[term = [x](ctx, term [args]);
+	  if(term === null) {
+		break [feil];
+	  };
+	  ];
+	result := <is-debug-output>(verbose, terse)
+  	  
+  js-join-args:
+ 	(s'*, t'*) -> args
+  with 
+  	arg* := <conc> (s'*, t'*)
+  ; if !arg* => [] then
+      args := ""
+  	else
+  	  args := <string-join(|",")> ["" | arg*]
+  	end
+  	
+  translate-Build(|s,f) :
+  	Build(t) -> <js-check-unbound-args(|t, f)>
+	$[[dec*][stm*] term = [e]; ]
+  with
+  	{| js-CheckBuild : 
+  	    e := <js-construct-term(|f)> t
+  	  ; (dec*, stm*) := <bagof-js-CheckBuild ; unzip> e    
+  	|}
+  	
+
+  translate-Seq(|s,f):
+	Seq(s1, s2) -> $[[s1'][s2']]
+	with s1' := <translate-strategy(|s,f)> s1
+	with s2' := <translate-strategy(|s,f)> s2
+  	
+  translate-PrimT(|s,feil) :
+    PrimT(f, s*, t*) -> <js-check-unbound-args(|t*, feil)>result
+  with
+      s'*  := <map(lift-strategy-to-function)> s*
+    ; t'*  := <map(js-construct-term(|feil))> t*
+    ; args := <js-join-args> (s'*, t'*)
+    ; verbose := $[
+      ctx.push("[f]");
+      term = StrategoJS.SSL.[f](ctx, term [args]);
+      if (term === null) {
+      	ctx.popOnFailure();
+      	trace("[feil]");
+      	break [feil];
+      } else if(term === undefined) {
+      	throw "internal error: call to SSL.[f] gave undefined term"; 
+      }
+      ctx.popOnSuccess();
+    ]
+    ; terse := $[term = StrategoJS.SSL.[f](ctx,term [args]);
+      if(term === null){
+	break [feil];
+      }
+      ]
+    ; result := <is-debug-output>(verbose, terse)
+  
+  translate-Id(|s,f):
+  	Id() -> "/* id */"
+  	
+  translate-Fail(|s, feil):
+	Fail() -> <is-debug-output>(
+		$[ { trace("[feil]"); break [feil]; } ],
+		$[ { break [feil]; } ])
+  	
+  translate-Override(|s,f) = fail // TODO (karltk)
+  
+  translate-GuardedLChoice-no-left-branch(|s,f):
+	GuardedLChoice(s1, Id(), s2) -> result
+  with
+	  copy := <newname> "term_"
+	; succ := <newname> "Success_"
+	; feil := <newname> "Fail_"
+	; s1'  := <translate-strategy(|succ,feil)> s1
+	; s2'  := <translate-strategy(|succ,f)> s2
+	; verbose := $[
+		var [copy] = term;
+  		[succ]: {
+  			[feil]: {
+  				[s1']
+  				break [succ];
+  			} 
+  			term = [copy]
+  			[s2']
+  		}
+	  ]
+	; terse := $[var [copy] = term;
+	  [succ]: {
+		[feil]: {
+			[s1']
+			break [succ];
+		}
+		term = [copy];
+		[s2']
+	  }
+	  ]
+	; result := <is-debug-output>(verbose, terse)
+  	  	
+  translate-GuardedLChoice(|s,outerfeil):
+	GuardedLChoice(s1, s2, s3) -> result
+  with
+	  copy      := <newname> "term_"
+	; succ      := <newname> "Success_"
+	; feil      := <newname> "Fail_"
+	; s1'       := <translate-strategy(|succ,feil)> s1
+	; s2'       := <translate-strategy(|succ,outerfeil)> s2
+    ; s3'       := <translate-strategy(|succ,outerfeil)> s3
+    ; verbose := $[
+	    var [copy] = term;
+  		[succ]: {
+  			[feil]: {
+  				[s1']
+				[s2']
+  				break [succ];
+  			}
+  			term = [copy];
+  			[s3']
+  		}
+  	]
+	; terse := $[var [copy] = term;
+	  [succ]: {
+		[feil]: {
+			[s1']
+			[s2']
+			break [succ];
+		}
+		term = [copy];
+		[s3']
+	  }
+	  ]
+	; result := <is-debug-output>(verbose, terse)
+  	
+    translate-Scope(|s,f) : 
+    Scope(vars, body) -> result
+    with
+      decl*  := <map(to-js-vardecl)> vars
+    ; body'  := <translate-strategy(|s,f)> body
+    ; verbose := $[
+      [decl*]
+      [body']
+    ]
+    ; terse := $[[decl*]
+      [body']
+      ]
+    ; result := <is-debug-output>(verbose, terse)
+
+  translate-Let(|s,f) : 
+    Let(defs, body) -> $[{/*let*/
+    		[def*]
+    		[body']
+	}/*let*/]
+  with 
+    def* := <map(translate-inner-definition)> defs
+  ; body' := <translate-strategy(|s,f)> body
+  
+
+  NonReqEscape =
+      NonReqEscape-backslash ; NonReqEscape-double-quote ; NonReqEscape-linefeed ; NonReqEscape-carriage-return
+
+  NonReqEscape-backslash = string-replace(|"\\", "\\\\")
+
+  /** @internal */
+  NonReqEscape-double-quote = string-replace(|"\"",  "\\\"")
+  
+  /** @internal */
+  NonReqEscape-single-quote = string-replace(|"'","\\'")
+  
+  /** @internal */
+  
+  /** @internal */
+  NonReqEscape-linefeed = string-replace(|"\n", "\\n")
+  
+  NonReqEscape-carriage-return = string-replace(|"\r", "\\r")
+  /** @internal */
+
+
+  translate-ImportTerm(|s,f) :
+    ImportTerm(file) -> $[ term = /*x_constants.*/[x_constant]; ]
+  with
+      inputfile  := <find-import-term-file> file // (exits on error)
+    ; contents   := <ReadFromFile> inputfile
+  with
+      inputname     := <file-name-to-identifier> inputfile
+    ; inputname'    := <not(IsImported) <+ newname> inputname
+    ; x_constant    := <conc-strings> ("const", inputname')
+    ; x_getconstant := <conc-strings> ("get",   inputname')
+//    ; x_constants   := <ConstantContainerClass>
+    ; rules(
+        IsImported : inputname
+        ConstDecl :+= $[var [x_constant];]
+        ConstDecl :+= $[]
+        ConstInit :+= $[[x_constant] = StrategoJS.Term.parse("[<write-to-string; NonReqEscape> contents]");] /*[x_constants],*/
+      )
+
+   output-dirname =
+     OutputDirName
+   <+
+     <get-config> "-o"
+   ; if has-extension(|"java") + has-extension(|"ctree") then
+       dirname
+     end
+   ; try(file-exists <+ mkdir <+ fatal-err(|"Output directory does not exist"))
+   ; rules(OutputDirName := <id>)
+   <+
+     strc-getoutfile(!"")
+   ; dirname
+   ; try(file-exists <+ mkdir)
+   ; rules(OutputDirName := <id>)
+
+  file-name-to-identifier =
+    base-filename
+  ; string-as-chars(
+      listtd(try(['.', to-upper | id]))
+    ; filter(is-alphanum)
+    ; [to-upper | id]
+    )
+
+  find-import-term-file :
+    file -> file'
+  with
+      pack-stratego-options-wrap(
+        pack-include-path
+      ; getfirst(pack-find-from-dir(|file)) => file'
+      <+
+        basefile := <base-filename> file
+      ; pack-include-path
+      ; getfirst(pack-find-from-dir(|basefile)) => file'
+      )
+    <+
+      file' := <file-exists> file
+    <+
+      fatal-err(|["file ", file, " for imported term not found"])
+      
+  pack-stratego-options-wrap(s) =
+    finally(
+      with(
+        include* := <get-config <+ ![]> "-I"
+      ; <set-config> ("-I", [])
+      ; <parse-options(pack-stratego-options, system-usage, id)> [<whoami>, include*, "-I", "."]
+      )
+    ; s
+    , <set-config> ("-I", include*)
+    )
+
+  
+  translate-Escape(|s,f) = fail // TODO (karltk)
+  
+  
+ //
+ //  Lifting 
+ //  
+
+strategies
+	
+  lift-strategy-to-function =
+  	   lift-call-to-function
+  	<+ lift-other-to-function
+
+  lift-call-to-function:
+    CallT(SVar(x), _, _) -> x
+  
+  lift-other-to-function:
+  	s -> fun 
+  with 
+  	fun := <translate-definition-body> SDefT(<newname => x> "jslifted", [], [], <id>)
+   	  	
+rules
+	
+  JSTranslate = 
+    ?OpDecl(c, t)
+  ; rules(
+      ConstructorDecl :+= <JSDeclareConstructor>
+      ConstructorInit :+= <JSInitConstructorQ <+ JSInitConstructor>  
+    )
+    
+  JSTranslate =
+  	?ExtOpDecl(c, t)
+  ; !OpDecl(c, t)	
+  ; JSTranslate
+    
+ JSDeclareExtConstructor:
+ 	ExtOpDecl(c, t) ->
+	$[/* external constructor [x] */]
+ 	with
+ 		n := <Arity <+ is-int> t
+ 	;	x := <js-ConstructorName> (c, n)
+    
+  JSDeclareConstructor: 
+  	OpDecl(c, t) -> 
+	$[/* constructor [x] */]
+  where
+  	not(OpDecl("", id) + OpDecl("Cons", [id, id]) + OpDecl("Nil", []))
+  with
+  	n := <Arity <+ is-int> t
+  ; x := <js-ConstructorName> (c, n)
+  ; rules(IsLocalOpDecl : (c, n))
+    
+  JSInitConstructorQ:
+  	OpDecl(c, t) -> 
+	$[var [x] = factory.makeCtor("[c']", [<js-mk-int-const> ar]);
+	]
+  where
+    c' := <string-as-chars(unescape-chars ; un-double-quote-chars)> c
+  ; ar := <Arity <+ is-int> t
+  ; x  := <js-ConstructorName> (c, ar)
+    
+    
+  JSInitConstructor:
+	OpDecl(c, t) -> $[var [x] = factory.makeCtor("[c]", [<js-mk-int-const> ar]);]
+  where
+  	ar := <Arity <+ is-int> t
+  ; x  := <js-ConstructorName> (c, ar)
+    
+  add-default-constructors = 
+  	with(
+  		add-ctor(|"Some", 1)
+  	  ; add-ctor(|"None", 0)
+  	  ; add-ctor(|"Conc", 2)
+  	)
+  	
+  add-ctor(|name, arity) =
+  	if not(<IsLocalOpDecl> (name, arity)) then
+  		x := <js-ConstructorName> (name, arity)
+  	  ; rules(
+          IsLocalOpDecl: (name, arity)
+  	      ConstructorDecl :+= $[]
+	      ConstructorInit :+= $[var [x] = factory.makeCtor("[name]", [<js-mk-int-const> arity]);
+  	      ]
+  	    )
+  	end 	    

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Tue Dec 20 23:17:30 2011	(r23829)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Wed Dec 21 00:11:15 2011	(r23830)
@@ -1,273 +1,273 @@
-/**
- *
- * @author Lennart Kats
- * @author Karl Trygve Kalleberg
- */
-
-module term-deconstruction
-imports
- libstrc
-
- src/stratego/term-construction 
- src/stratego/variable-access
- 
-signature
- constructors
- 	ReadFrom: Str -> Term
- 	 
-strategies
-	
-  translate-Match(|s,f) :
-    Match(t) -> result
-    with
-      result := <translate-Match(|s,f)> Match(t, ReadFrom("term"))
-
-  translate-Match(|s,f) :
-    Match(Wld(), trm) -> ""
-
-  translate-Match(|s,f) :
-    Match(As(t1,t2), trm) -> result
-    with 
-      match1 := <translate-Match(|s,f)> Match(t1,trm)
-    ; match2 := <translate-Match(|s,f)> Match(t2,trm)
-    ; verbose := $[
-      [match1];
-      [match2];
-    ]
-    ; terse := $[[match1];[match2];]
-    ; result := <is-debug-output>(verbose, terse)
-
-  translate-Match(|s,f) :
-    Match(Var(x){"unbound"}, ReadFrom(trm)) -> assign
-    with
-      assign := <js-VarToWrite> (x, trm)
-
-  translate-Match(|s,feil) :
-    Match(Var(x){"bound"}, ReadFrom(e)) -> result
-    with
-      e_var := <js-VarToReadRef> Var(x)
-      ; verbose := $[
-      if ([e] != [e_var] && !factory.match([e_var],[e])) {
-      	trace("[feil]"); 
-        break [feil];
-      }
-     ]
-     ; terse := $[if ([e] != [e_var] && !factory.match([e_var],[e])) { break [feil]; }]
-     ; result := <is-debug-output>(verbose, terse)
-
-  translate-Match(|s,feil) :
-    Match(Var(x){"(un)bound"}, ReadFrom(e)) -> result
-    with
-      e_var      := <js-VarToReadRef> Var(x)
-    ; stm_assign := <js-VarToWrite> (x, e)
-    ; verbose := $[
-      if ([e_var] === null) {
-        [stm_assign]
-      }?else if ([e_var] != [e] && !factory.match([e_var], [e])) {
-      	trace("[feil]");
-        break [feil];
-      }
-    ]
-    ; terse := $[if ([e_var] === null) {
-	[stm_assign]
-     }?else if ([e_var] != [e] && !factory.match([e_var], [e])) {
-	break [feil];
-     }
-    ]
-    ; result := <is-debug-output>(verbose, terse)
-
-  translate-Match(|s,f) :
-    Match(Var(x){}, trm) -> <translate-Match(|s,f)> Match(Var(x){"(un)bound"}, trm)
-
-  translate-Match(|s,f) :
-    Match(Explode(t1, t2), e') ->
-    ${var {x_cons} = StrategoJS.SSL.SSL_get_constructor(ctx, term, {e});
-      {<translate-Match(|s,f)> Match(t1, ReadFrom(x_cons))};
-      var {x_args} = StrategoJS.SSL.SSL_get_arguments(ctx, term, {e});
-      {<translate-Match(|s,f)> Match(t2, ReadFrom(x_args))};}
-  with
-      !e' => ReadFrom(e)
-    ; x_cons := <newname> "cons"
-    ; x_args := <newname> "args"
-
-  translate-Match(|s,f) =
-       ( translate-MatchNoAnno(|s,f)
-      <+ translate-MatchAnno(|s,f) )
-
-  translate-MatchNoAnno(|s,f) :
-    Match(Anno(pt1, Wld()), e) -> result
-  with
-  	result := <translate-Match(|s,f)> Match(pt1, e)
-
-  translate-MatchAnno(|s,f) :
-    Match(Anno(pt1, pt2), ReadFrom(e)) -> 
-    $[[stm0];
-      var [x] = factory.getAnnotations([e]);
-      [stm1];]
-  where 
-      <not(Wld)> pt2
-  with
-      x    := <newname> "annos"
-    ; stm0 := <translate-Match(|s,f)> Match(pt1, ReadFrom(e))
-    ; stm1 := <translate-Match(|s,f)> Match(pt2, ReadFrom(x))
-
-  // String constants are not cached for comparison,
-  // since we do comparison modulo annotations
-  translate-Match(|s,feil) :
-    Match(Str(str), e') -> result
-  with
-      !e' => ReadFrom(e)
-    ; e_str := <escape> str
-    ; verbose := $[
-      if (factory.termType([e]) !== factory.STRING || "[e_str]" !== factory.stringValue([e])) {
-      	trace("[feil]");
-        break [feil];
-      }
-    ]
-    ; terse := $[if (factory.termType([e]) !== factory.STRING || "[e_str]" !== factory.stringValue([e])) {
-	break [feil];
-    }
-    ]
-    ; result := <is-debug-output>(verbose, terse)
-
-  translate-Match(|s,feil) :
-    Match(Int(i), e') -> result
-  with
-      !e' => ReadFrom(e)
-    ; e_int := <js-mk-int-const> i
-    ; verbose := $[
-      if (factory.termType([e]) !== factory.INT || [e_int] !== factory.intValue([e])) {
-        trace("[feil]");
-        break [feil];
-      }
-    ]
-    ; terse := $[if (factory.termType([e]) !== factory.INT || [e_int] !== factory.intValue([e])) {break [feil];}]
-    ; result := <is-debug-output>(verbose, terse)
-
-  translate-Match(|s,feil) :
-    Match(Real(r), e') -> result
-  with
-      !e' => ReadFrom(e)
-    ; e_real := <try(real-to-string)> r
-    ; verbose := $[
-      if (factory.termType([e]) !== factory.REAL || [e_real] !== factory.realValue([e])) {
-      	trace("[feil]");
-        break [feil];
-      }
-    ]
-    ; terse := $[if (factory.termType([e]) !== factory.REAL || [e_real] !== factory.realValue([e])) {break [feil];}]
-    ; result := <is-debug-output>(verbose, terse)
-
-  /**
-   * Translate a match of an Op, but not a Cons/2 , Nil/0, or tuple.
-   */
-  translate-Match(|s,feil) :
-    Match(op at Op(c, ts), ReadFrom(e)) -> result
-  where
-    <not(is-ListOp + is-TupleOp)> op
-  with
-    e_cons     := <js-ConstructorName-expr> (c, <length> ts)
-  ; match-args := <translate-Match-args(|s,feil)> (e, ts)
-  ; if not(<get-config> "-sc" => "off") then
-      e_nomatch := $[ !factory.ctorEquals([e_cons], factory.getConstructor([e])) ]
-    else
-      e_nomatch := $[ !factory.ctorEquals([e_cons], factory.getConstructor([e])) ]
-    end
-  ; verbose := $[
-      if (factory.termType([e]) !== factory.APPL || [e_nomatch]) {
-	trace("[feil]");
-        break [feil];
-      }
-      [match-args]
-    ]
-  ; terse := $[if (factory.termType([e]) !== factory.APPL || [e_nomatch]) {break [feil];} [match-args]]
-  ; result := <is-debug-output>(verbose, terse)
-
-  /**
-   * Translate a match of a tuple.
-   */
-  translate-Match(|s,feil) :
-    Match(op at Op(c, ts), ReadFrom(e)) -> result
-  where
-    <is-TupleOp> op
-  with
-    i := <write-to-string> <length> ts
-  ; match-args := <translate-Match-args(|s,feil)> (e, ts)
-  ; verbose := $[
-      if (factory.termType([e]) !== factory.TUPLE || factory.getSubtermCount([e]) !== [i]) {
-      	trace("[feil]");
-        break [feil];
-      }
-      [match-args]
-    ]
-  ; terse := $[if (factory.termType([e]) !== factory.TUPLE || factory.getSubtermCount([e]) !== [i]) {break [feil];}[match-args]]
-  ; result := <is-debug-output>(verbose, terse)
-  
-  translate-Match-args(|s,f) :
-    (e, terms) -> bstm_matcharg*
-    with
-      (bstm_matcharg*, _) :=
-        <thread-map(\ (t,i) -> (
-               <js-MatchArg1(|s,f) <+ js-MatchArg2(|s,f)> 
-                  (t, ReadFrom($[ factory.getSubterm([e], [<js-mk-int-const> i]) ]))
-             , <add>(i, 1)
-             )
-           \ )> (terms,0)
-
-  js-MatchArg1(|s,f) : 
-    (Var(x){t*}, e) -> result
-  with
-  	result := <translate-Match(|s,f)> Match(Var(x){t*}, e)
-
-  js-MatchArg2(|s,f) : 
-    (t, e') -> result
-  with
-    !e' => ReadFrom(e) 
-  ; x    := <newname> "arg"
-  ; stm2 := <translate-Match(|s,f)> Match(t, ReadFrom(x))
-  ; if !stm2 => "" then
-     stm1 := ""
-    else 
-     stm1 := $[ var [x] = [e]; ]
-    end
-  ; verbose := $[
-      [stm1];
-      [stm2];
-    ]
-  ; terse := $[[stm1];[stm2];]
-  ; result := <is-debug-output>(verbose, terse)
-
-  translate-Match(|s,feil) :
-    Match(Op("Nil", []), ReadFrom(e)) -> result
-    with verbose := $[
-      if(factory.termType([e]) !== factory.LIST || !factory.isEmptyList([e])) {
-      	trace("[feil]");
-        break [feil];
-      }
-    ]
-    ; terse := $[if(factory.termType([e]) !== factory.LIST || !factory.isEmptyList([e])) {
-	break [feil];
-      }
-      ]
-    ; result := <is-debug-output>(verbose, terse)
-
-  translate-Match(|s,feil) :
-    Match(Op("Cons", [hd, tl]), ReadFrom(e)) -> result
-  with
-    match-args :=
-      <map(js-MatchArg1(|s,feil) <+ js-MatchArg2(|s,feil))>
-        [ (hd, ReadFrom($[ factory.head([e]) ]))
-        , (tl, ReadFrom($[ factory.tail([e]) ])) ]
-    ; verbose := $[
-      if(factory.termType([e]) !== factory.LIST || factory.isEmptyList([e])) {
-      	trace("[feil]");
-        break [feil];
-      }
-      [match-args]
-    ]
-    ; terse := $[if(factory.termType([e]) !== factory.LIST || factory.isEmptyList([e])) {
-	break [feil];
-      }
-      [match-args]
-      ]
-    ; result := <is-debug-output>(verbose, terse)
+/**
+ *
+ * @author Lennart Kats
+ * @author Karl Trygve Kalleberg
+ */
+
+module term-deconstruction
+imports
+ libstrc
+
+ src/stratego/term-construction 
+ src/stratego/variable-access
+ 
+signature
+ constructors
+ 	ReadFrom: Str -> Term
+ 	 
+strategies
+	
+  translate-Match(|s,f) :
+    Match(t) -> result
+    with
+      result := <translate-Match(|s,f)> Match(t, ReadFrom("term"))
+
+  translate-Match(|s,f) :
+    Match(Wld(), trm) -> ""
+
+  translate-Match(|s,f) :
+    Match(As(t1,t2), trm) -> result
+    with 
+      match1 := <translate-Match(|s,f)> Match(t1,trm)
+    ; match2 := <translate-Match(|s,f)> Match(t2,trm)
+    ; verbose := $[
+      [match1];
+      [match2];
+    ]
+    ; terse := $[[match1];[match2];]
+    ; result := <is-debug-output>(verbose, terse)
+
+  translate-Match(|s,f) :
+    Match(Var(x){"unbound"}, ReadFrom(trm)) -> assign
+    with
+      assign := <js-VarToWrite> (x, trm)
+
+  translate-Match(|s,feil) :
+    Match(Var(x){"bound"}, ReadFrom(e)) -> result
+    with
+      e_var := <js-VarToReadRef> Var(x)
+      ; verbose := $[
+      if ([e] != [e_var] && !factory.match([e_var],[e])) {
+      	trace("[feil]"); 
+        break [feil];
+      }
+     ]
+     ; terse := $[if ([e] != [e_var] && !factory.match([e_var],[e])) { break [feil]; }]
+     ; result := <is-debug-output>(verbose, terse)
+
+  translate-Match(|s,feil) :
+    Match(Var(x){"(un)bound"}, ReadFrom(e)) -> result
+    with
+      e_var      := <js-VarToReadRef> Var(x)
+    ; stm_assign := <js-VarToWrite> (x, e)
+    ; verbose := $[
+      if ([e_var] === null) {
+        [stm_assign]
+      } else if ([e_var] != [e] && !factory.match([e_var], [e])) {
+      	trace("[feil]");
+        break [feil];
+      }
+    ]
+    ; terse := $[if ([e_var] === null) {
+	[stm_assign]
+     } else if ([e_var] != [e] && !factory.match([e_var], [e])) {
+	break [feil];
+     }
+    ]
+    ; result := <is-debug-output>(verbose, terse)
+
+  translate-Match(|s,f) :
+    Match(Var(x){}, trm) -> <translate-Match(|s,f)> Match(Var(x){"(un)bound"}, trm)
+
+  translate-Match(|s,f) :
+    Match(Explode(t1, t2), e') ->
+    ${var {x_cons} = StrategoJS.SSL.SSL_get_constructor(ctx, term, {e});
+      {<translate-Match(|s,f)> Match(t1, ReadFrom(x_cons))};
+      var {x_args} = StrategoJS.SSL.SSL_get_arguments(ctx, term, {e});
+      {<translate-Match(|s,f)> Match(t2, ReadFrom(x_args))};}
+  with
+      !e' => ReadFrom(e)
+    ; x_cons := <newname> "cons"
+    ; x_args := <newname> "args"
+
+  translate-Match(|s,f) =
+       ( translate-MatchNoAnno(|s,f)
+      <+ translate-MatchAnno(|s,f) )
+
+  translate-MatchNoAnno(|s,f) :
+    Match(Anno(pt1, Wld()), e) -> result
+  with
+  	result := <translate-Match(|s,f)> Match(pt1, e)
+
+  translate-MatchAnno(|s,f) :
+    Match(Anno(pt1, pt2), ReadFrom(e)) -> 
+    $[[stm0];
+      var [x] = factory.getAnnotations([e]);
+      [stm1];]
+  where 
+      <not(Wld)> pt2
+  with
+      x    := <newname> "annos"
+    ; stm0 := <translate-Match(|s,f)> Match(pt1, ReadFrom(e))
+    ; stm1 := <translate-Match(|s,f)> Match(pt2, ReadFrom(x))
+
+  // String constants are not cached for comparison,
+  // since we do comparison modulo annotations
+  translate-Match(|s,feil) :
+    Match(Str(str), e') -> result
+  with
+      !e' => ReadFrom(e)
+    ; e_str := <escape> str
+    ; verbose := $[
+      if (factory.termType([e]) !== factory.STRING || "[e_str]" !== factory.stringValue([e])) {
+      	trace("[feil]");
+        break [feil];
+      }
+    ]
+    ; terse := $[if (factory.termType([e]) !== factory.STRING || "[e_str]" !== factory.stringValue([e])) {
+	break [feil];
+    }
+    ]
+    ; result := <is-debug-output>(verbose, terse)
+
+  translate-Match(|s,feil) :
+    Match(Int(i), e') -> result
+  with
+      !e' => ReadFrom(e)
+    ; e_int := <js-mk-int-const> i
+    ; verbose := $[
+      if (factory.termType([e]) !== factory.INT || [e_int] !== factory.intValue([e])) {
+        trace("[feil]");
+        break [feil];
+      }
+    ]
+    ; terse := $[if (factory.termType([e]) !== factory.INT || [e_int] !== factory.intValue([e])) {break [feil];}]
+    ; result := <is-debug-output>(verbose, terse)
+
+  translate-Match(|s,feil) :
+    Match(Real(r), e') -> result
+  with
+      !e' => ReadFrom(e)
+    ; e_real := <try(real-to-string)> r
+    ; verbose := $[
+      if (factory.termType([e]) !== factory.REAL || [e_real] !== factory.realValue([e])) {
+      	trace("[feil]");
+        break [feil];
+      }
+    ]
+    ; terse := $[if (factory.termType([e]) !== factory.REAL || [e_real] !== factory.realValue([e])) {break [feil];}]
+    ; result := <is-debug-output>(verbose, terse)
+
+  /**
+   * Translate a match of an Op, but not a Cons/2 , Nil/0, or tuple.
+   */
+  translate-Match(|s,feil) :
+    Match(op at Op(c, ts), ReadFrom(e)) -> result
+  where
+    <not(is-ListOp + is-TupleOp)> op
+  with
+    e_cons     := <js-ConstructorName-expr> (c, <length> ts)
+  ; match-args := <translate-Match-args(|s,feil)> (e, ts)
+  ; if not(<get-config> "-sc" => "off") then
+      e_nomatch := $[ !factory.ctorEquals([e_cons], factory.getConstructor([e])) ]
+    else
+      e_nomatch := $[ !factory.ctorEquals([e_cons], factory.getConstructor([e])) ]
+    end
+  ; verbose := $[
+      if (factory.termType([e]) !== factory.APPL || [e_nomatch]) {
+	trace("[feil]");
+        break [feil];
+      }
+      [match-args]
+    ]
+  ; terse := $[if (factory.termType([e]) !== factory.APPL || [e_nomatch]) {break [feil];} [match-args]]
+  ; result := <is-debug-output>(verbose, terse)
+
+  /**
+   * Translate a match of a tuple.
+   */
+  translate-Match(|s,feil) :
+    Match(op at Op(c, ts), ReadFrom(e)) -> result
+  where
+    <is-TupleOp> op
+  with
+    i := <write-to-string> <length> ts
+  ; match-args := <translate-Match-args(|s,feil)> (e, ts)
+  ; verbose := $[
+      if (factory.termType([e]) !== factory.TUPLE || factory.getSubtermCount([e]) !== [i]) {
+      	trace("[feil]");
+        break [feil];
+      }
+      [match-args]
+    ]
+  ; terse := $[if (factory.termType([e]) !== factory.TUPLE || factory.getSubtermCount([e]) !== [i]) {break [feil];}[match-args]]
+  ; result := <is-debug-output>(verbose, terse)
+  
+  translate-Match-args(|s,f) :
+    (e, terms) -> bstm_matcharg*
+    with
+      (bstm_matcharg*, _) :=
+        <thread-map(\ (t,i) -> (
+               <js-MatchArg1(|s,f) <+ js-MatchArg2(|s,f)> 
+                  (t, ReadFrom($[ factory.getSubterm([e], [<js-mk-int-const> i]) ]))
+             , <add>(i, 1)
+             )
+           \ )> (terms,0)
+
+  js-MatchArg1(|s,f) : 
+    (Var(x){t*}, e) -> result
+  with
+  	result := <translate-Match(|s,f)> Match(Var(x){t*}, e)
+
+  js-MatchArg2(|s,f) : 
+    (t, e') -> result
+  with
+    !e' => ReadFrom(e) 
+  ; x    := <newname> "arg"
+  ; stm2 := <translate-Match(|s,f)> Match(t, ReadFrom(x))
+  ; if !stm2 => "" then
+     stm1 := ""
+    else 
+     stm1 := $[ var [x] = [e]; ]
+    end
+  ; verbose := $[
+      [stm1];
+      [stm2];
+    ]
+  ; terse := $[[stm1];[stm2];]
+  ; result := <is-debug-output>(verbose, terse)
+
+  translate-Match(|s,feil) :
+    Match(Op("Nil", []), ReadFrom(e)) -> result
+    with verbose := $[
+      if(factory.termType([e]) !== factory.LIST || !factory.isEmptyList([e])) {
+      	trace("[feil]");
+        break [feil];
+      }
+    ]
+    ; terse := $[if(factory.termType([e]) !== factory.LIST || !factory.isEmptyList([e])) {
+	break [feil];
+      }
+      ]
+    ; result := <is-debug-output>(verbose, terse)
+
+  translate-Match(|s,feil) :
+    Match(Op("Cons", [hd, tl]), ReadFrom(e)) -> result
+  with
+    match-args :=
+      <map(js-MatchArg1(|s,feil) <+ js-MatchArg2(|s,feil))>
+        [ (hd, ReadFrom($[ factory.head([e]) ]))
+        , (tl, ReadFrom($[ factory.tail([e]) ])) ]
+    ; verbose := $[
+      if(factory.termType([e]) !== factory.LIST || factory.isEmptyList([e])) {
+      	trace("[feil]");
+        break [feil];
+      }
+      [match-args]
+    ]
+    ; terse := $[if(factory.termType([e]) !== factory.LIST || factory.isEmptyList([e])) {
+	break [feil];
+      }
+      [match-args]
+      ]
+    ; result := <is-debug-output>(verbose, terse)

From L.C.L.Kats at tudelft.nl  Wed Dec 21 16:35:12 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 21 Dec 2011 15:35:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23831 -
	spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite
Message-ID: <20111221153512.2A59BCC137@mx4.tudelft.nl>

Author: LennartKats
Date: Wed Dec 21 15:35:11 2011
New Revision: 23831
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23831&sc=1

Log:
new update site

Modified:
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml	Wed Dec 21 00:11:15 2011	(r23830)
+++ spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml	Wed Dec 21 15:35:11 2011	(r23831)
@@ -1,14 +1,14 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <site>
-   <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
-      Spoofax/IMP update site
+   <description name="Spoofax/IMP" url="http://download.spoofax.org/update/stable/">
+      Spoofax update site
    </description>
    <feature url="features/org.strategoxt.imp_0.7.0.0.jar" id="org.strategoxt.imp" version="0.7.0.0">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">
       <description>
-         The Spoofax/IMP language workbench.
+         The Spoofax language workbench.
       </description>
    </category-def>
 </site>

From L.C.L.Kats at tudelft.nl  Wed Dec 21 16:38:14 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 21 Dec 2011 15:38:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23832 -
	spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.metatooling
Message-ID: <20111221153814.953317F8059@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Dec 21 15:38:14 2011
New Revision: 23832
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23832&sc=1

Log:
disabled SpoofaxLang wizard for now

Modified:
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.metatooling/plugin.xml

Modified: spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.metatooling/plugin.xml
==============================================================================
--- spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.metatooling/plugin.xml	Wed Dec 21 15:35:11 2011	(r23831)
+++ spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.metatooling/plugin.xml	Wed Dec 21 15:38:14 2011	(r23832)
@@ -32,6 +32,7 @@
             project="true">
       </wizard>
    </extension>
+   <!-- disabled for release version
    <extension
          point="org.eclipse.ui.newWizards">
       <primaryWizard
@@ -45,6 +46,7 @@
             project="true">
       </wizard>
    </extension>
+   -->
    <extension
          point="org.eclipse.ant.core.antProperties">
       <antProperty

From L.C.L.Kats at tudelft.nl  Wed Dec 21 16:39:02 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 21 Dec 2011 15:39:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23833 -
	spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite
Message-ID: <20111221153902.75B42108C05A@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Dec 21 15:39:02 2011
New Revision: 23833
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23833&sc=1

Log:
teh version bump 1 0 1 0

Modified:
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml	Wed Dec 21 15:38:14 2011	(r23832)
+++ spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml	Wed Dec 21 15:39:02 2011	(r23833)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://download.spoofax.org/update/stable/">
       Spoofax update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.7.0.0.jar" id="org.strategoxt.imp" version="0.7.0.0">
+   <feature url="features/org.strategoxt.imp_1.0.1.0.jar" id="org.strategoxt.imp" version="1.0.1.0">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From M.A.Akhter at student.tudelft.nl  Wed Dec 21 16:42:20 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 21 Dec 2011 15:42:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23834 -
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
Message-ID: <20111221154220.C4A53CC139@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Dec 21 15:42:20 2011
New Revision: 23834
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23834&sc=1

Log:
loading imp library for the context used by Ant

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java	Wed Dec 21 15:39:02 2011	(r23833)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java	Wed Dec 21 15:42:20 2011	(r23834)
@@ -2,6 +2,7 @@
 
 import java.io.File;
 import java.io.FileNotFoundException;
+import java.io.IOException;
 
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IPath;
@@ -10,11 +11,18 @@
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.imp.language.Language;
+import org.eclipse.imp.language.LanguageRegistry;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.strategoxt.imp.editors.spoofax.generated.build_spoofaxlang_jvm_0_0;
 import org.strategoxt.imp.editors.spoofax.generated.spoofaxlang;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.parser.SGLRParseController;
+import org.strategoxt.imp.runtime.services.StrategoObserver;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
+import org.strategoxt.imp.runtime.stratego.IMPLibrary;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoErrorExit;
 import org.strategoxt.lang.StrategoException;
@@ -58,17 +66,18 @@
 	}
 	
 	public static void main(String[] args) throws Exception{
+		
 		if (args == null || args.length == 0)
 			throw new IllegalArgumentException("Project Work Directory is missing. ");
 
-		
 		final String workingDirectoryArg = args[0];
 		final IResource file = EditorIOAgent.getResource(new File(workingDirectoryArg));
 		String buildStrategy = "-i"; 
-		
+
 		if (args.length >1)
 			buildStrategy = args[1];
-		
+
+
 		Environment.getStrategoLock().lock();
 		try {
 			if (!isActive())
@@ -80,12 +89,11 @@
 						System.err.println("Build failed: could not find  project at following location :" + file.getLocation());
 						System.exit(1);
 					}
+					IPath absolutePath = file.getLocation();
+					//StrategoObserver observer = newStrategoObserverOf(SpoofaxLangParseController.LANGUAGE);
 
-					EditorIOAgent agent = new EditorIOAgent();
-					agent.setAlwaysActivateConsole(true);
-					agent.setWorkingDir(file.getLocation().toOSString());
+					boolean success = generateArtefacts(file, new NullProgressMonitor() , newEditorIOAgent(absolutePath, null), buildStrategy);
 
-					boolean success = generateArtefacts(file, new NullProgressMonitor() , agent,buildStrategy);
 					if (!success) {
 						System.err.println("Build failed; see error log.");
 						System.exit(1);
@@ -99,21 +107,51 @@
 			refresh(file);
 		}
 	}
+	
+	private static  StrategoObserver newStrategoObserverOf(String languageName) throws BadDescriptorException{
+		// Get descriptor
+		Language lang = LanguageRegistry.findLanguage(languageName);
+		Descriptor descriptor = Environment.getDescriptor(lang); 
+					
+		// Get parse controller
+		SGLRParseController parseController = descriptor.createService(SGLRParseController.class, null);
+		StrategoObserver observer = descriptor.createService(StrategoObserver.class, parseController);
+
+		return observer;
+	}
+	
+	private  static EditorIOAgent newEditorIOAgent(IPath location , StrategoObserver observer) throws FileNotFoundException, IOException{
+	
+		EditorIOAgent agent = new EditorIOAgent();
+		agent.setAlwaysActivateConsole(true);
+		agent.setWorkingDir(location.toOSString());
+		agent.setProjectPath(location.toOSString());
+		
 
+		//  TODO FIX : imploder attachment is while project is built from ant script.
+		//  hence, adding an stratego observer is not adding any value
+		
+		//	observer.getRuntime().setIOAgent(agent);
+		//	((EditorIOAgent)observer.getRuntime().getIOAgent()).setJob(new StrategoObserverUpdateJob(observer));
+
+		return agent;
+	}
 	
 	public static boolean generateArtefacts(IResource file, IProgressMonitor monitor , EditorIOAgent agent,  String buildStrategy) {
 		
-		IPath location = file.getLocation();
-		if (location == null) return false;
+		IPath absoluteProjectLocation = file.getLocation();
+		if (absoluteProjectLocation == null) return false;
 	
 		try {
 			monitor.setTaskName("Generating artefacts for following spx project:  " + file.getName());
 			
 			if (file.exists() ) {
+				
 				Context contextSpoofaxLang = new Context(Environment.getTermFactory(), agent);
-				contextSpoofaxLang.registerClassLoader(spoofaxlang.class.getClassLoader());
+				contextSpoofaxLang.addOperatorRegistry(new IMPLibrary());
 				spoofaxlang.init(contextSpoofaxLang);
 				
+				
 				IStrategoString input = contextSpoofaxLang.getFactory().makeString(file.getLocation().toOSString());
 				IStrategoString buildStrategyTerm = contextSpoofaxLang.getFactory().makeString(buildStrategy);
 				

From tobivollebregt at gmail.com  Wed Dec 21 16:42:55 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 21 Dec 2011 15:42:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23835 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: editor
	syntax trans/codegen/template
Message-ID: <20111221154255.E21F3108C04D@mx3.tudelft.nl>

Author: tvo
Date: Wed Dec 21 15:42:55 2011
New Revision: 23835
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23835&sc=1

Log:
TemplateLang: work in progress

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Wed Dec 21 15:42:20 2011	(r23834)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Wed Dec 21 15:42:55 2011	(r23835)
@@ -40,6 +40,7 @@
 
   // builder : "TemplateLang: show syntax definition"    = build-templatelang-sdf (openeditor) (realtime) (meta) (source)
   // builder : "TemplateLang: show completion templates" = build-templatelang-esv (openeditor) (realtime) (meta) (source)
-  builder : "TemplateLang: show pretty printer"       = build-templatelang-str (openeditor) (realtime) (meta) (source)
+  builder : "TemplateLang: show pretty printer"       = build-templatelang-str (openeditor) (realtime) (source)
+  builder : "TemplateLang: inline placeholders"       = build-expand-template (openeditor) (realtime)
 
   on save		: build-incrementally-service

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Wed Dec 21 15:42:20 2011	(r23834)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Wed Dec 21 15:42:55 2011	(r23835)
@@ -69,10 +69,11 @@
                                  -> PlaceholderOptions {cons("NoOptions")}
     ";" {PlaceholderOption ","}+ -> PlaceholderOptions {cons("Options")}
 
+    "hide"                 -> PlaceholderOption {cons("Hide")}
     "wrap"                 -> PlaceholderOption {cons("Wrap")}
     "anchor"               -> PlaceholderOption {cons("Anchor")}
     "separator" "=" STRING -> PlaceholderOption {cons("Separator")}
-    "text" "=" STRING      -> PlaceholderOption {cons("Placeholder")}
+    "text" "=" STRING      -> PlaceholderOption {cons("Text")}
 
   syntax
     %% template parts

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Wed Dec 21 15:42:20 2011	(r23834)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Wed Dec 21 15:42:55 2011	(r23835)
@@ -11,11 +11,11 @@
   utils/attributes
   utils/contract
   utils/templatelang
-	common
-	context/symboltable
-	context/sdf/declare
-	context/declare 
-	
+  common
+  context/symboltable
+  context/sdf/declare
+  context/declare
+
 strategies
 
   test-templatelang-to-esv:
@@ -42,14 +42,14 @@
     where with-spxverify(
       verify(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion* , "ListOf(?CompletionTemplateEx(_, _, _, _))  ::template-module-to-esv")
     )
-    
+
   /** @type TemplateSection -> List(CompletionTemplate) */
   template-section-to-esv:
     TemplateSection(prod*) -> completion*
-    where 
-    	with-spxverify(
+    where
+      with-spxverify(
         verify( ListOf(?TemplateProduction(_, _, _) + ?TemplateProductionWithCons(_, _, _)) | prod* , "ListOf(?TemplateProduction(_, _, _) + ?TemplateProductionWithCons(_, _, _))  ::template-section-to-esv")
-    	)
+      )
     where with-spxverify(
       // FIXME: desugaring should have been performed before the current strategy is invoked.
       // FIXME: declaring is here for unit testing only ???
@@ -59,7 +59,7 @@
     )
     where with-spxverify(
       verify(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion* , "ListOf(?CompletionTemplateEx(_, _, _, _))  ::template-section-to-esv")
-   	)  
+     )
 
   template-section-to-esv:
     SDFSection(lexical-syntax(prod*)) ->
@@ -74,24 +74,24 @@
     where with-spxverify(
         // FIXME: remove SdfProduction/3 and SdfProductionWithCons/3 when desugaring is performed before code generation.
         verify(ListOf(?prod(_, _, _) + ?SdfProduction(_, _, _) + ?SdfProductionWithCons(_, _, _)) | prod* , "ListOf(?prod(_, _, _) + ?SdfProduction(_, _, _) + ?SdfProductionWithCons(_, _, _))  ::sdf-productions-to-completion-templates")
-    )  
-   where 
-   	with-spxverify(
+    )
+   where
+     with-spxverify(
       // FIXME: desugaring should have been performed before the current strategy is invoked.
       // FIXME: declaring is here for unit testing only ???
       completion* := <templatelang-desugar-sdf-top;
                       declare-sdf-definition-main;
                       filter(sdf-production-to-template;
                              template-to-completion-template)> prod*
-		 )
-		where with-spxverify(
-			verify(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion* , "ListOf(?CompletionTemplateEx(_, _, _, _))  ::sdf-productions-to-completion-templates " )
-    )  
+     )
+    where with-spxverify(
+      verify(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion* , "ListOf(?CompletionTemplateEx(_, _, _, _))  ::sdf-productions-to-completion-templates " )
+    )
 
 /*internal*/ strategies
 
   sdf-production-to-template:
-    prod([lit(text)], sort(sort), attrs) -> 
+    prod([lit(text)], sort(sort), attrs) ->
       TemplateProduction(sort, SingleLineTemplate([String(<un-double-quote> text)]), attrs)
 
   template-to-completion-template:
@@ -99,13 +99,13 @@
       |[ completion template ~sort : ~prefix = ~*part* ]|
     where
       not(<is-deprecated + is-reject> attrs)
-    where with-spxverify( 
-    	{|Expanded:
-      	part* := <map(template-element-to-esv);
-                template-to-completion-template-helper> elem*;
-      	prefix := <build-prefix> part*
-    	|}
-    )	
+    where with-spxverify(
+      {|Expanded:
+        part* := <filter(template-element-to-esv);
+                  template-to-completion-template-helper> elem*;
+        prefix := <build-prefix> part*
+      |}
+    )
     where
       <accept-template-parts(|sort)> part*
 
@@ -114,16 +114,15 @@
       |[ completion template ~sort : ~prefix = ~*part* (blank) ]|
     where
       not(<is-deprecated + is-reject> attrs)
-    where with-spxverify( 
-    	{|Expanded:
-      	part* := <map(template-line-to-esv);
-                try(\[[_, Cursor()] | tail] -> tail\); // HACK for Mobl <MetaAnno*>
-                remove-cursor-except-first;
-                separate-by(|String("\n"));
-                template-to-completion-template-helper> line*;
-      	prefix := <build-prefix> part*
-    	|}
-  	)
+    where with-spxverify(
+      {|Expanded:
+        part* := <filter(template-line-to-esv);
+                  remove-cursor-except-first;
+                  separate-by(|String("\n"));
+                  template-to-completion-template-helper> line*;
+        prefix := <build-prefix> part*
+      |}
+    )
     where
       <accept-template-parts(|sort)> part*
 
@@ -152,17 +151,17 @@
     Line([Layout(x), Placeholder(_, <Option() + Star()>, option*)]) ->
       <spaces-to-tabs> [String(x), Cursor()]
       where
-        <not(one(?Placeholder(_)))> option*
+        <not(one(?Text(_) + ?Hide()))> option*
 
   template-line-to-esv:
     line @ Line([Layout(_), Placeholder(_, <None() + Plus()>, option*)]) ->
       // ?t and not(?t) are cycle breaker
-      <?t; expand-template-line; not(?t); map(template-line-to-esv)> [line]
+      <?t; expand-template-line; not(?t); filter(template-line-to-esv); is-not-empty-list> [line]
       where
-        <not(one(?Placeholder(_)))> option*
+        <not(one(?Text(_) + ?Hide()))> option*
 
   template-line-to-esv:
-    Line(elem*) -> <map(template-element-to-esv); spaces-to-tabs> elem*
+    Line(elem*) -> <filter(template-element-to-esv); is-not-empty-list; spaces-to-tabs> elem*
 
   spaces-to-tabs =
     try([String(string-replace(|"  ", "\t")) | id])
@@ -172,14 +171,14 @@
     Placeholder(sort(sort), _, option*) ->
       PlaceholderWithSort($[<[text]:], sort)
       where
-        <one(?Placeholder(text))> option*
+        <one(?Text(text)); not(one(?Hide()))> option*
 
   // A and A+ result in a placeholder containing the shortest expansion of A.
   template-element-to-esv:
     placeholder @ Placeholder(sort(sort), <None() + Plus()>, option*) ->
       PlaceholderWithSort($[<[text]:], sort)
     where
-      <not(one(?Placeholder(_)))> option*
+      <not(one(?Text(_) + ?Hide()))> option*
     where
       text := <expand-template-element;
                map(template-element-to-string);
@@ -188,8 +187,10 @@
 
   // A? and A* result in a 0-length placeholder.
   template-element-to-esv:
-    Placeholder(sort(sort), <Option() + Star()>, _) ->
+    Placeholder(sort(sort), <Option() + Star()>, option*) ->
       PlaceholderWithSort("<:", sort)
+    where
+      <not(one(?Text(_) + ?Hide()))> option*
 
   template-element-to-esv:
     Layout(x) -> String(x)
@@ -208,17 +209,22 @@
   template-element-to-string:
     Placeholder(_, _, option*) -> text
     where
-      <one(?Placeholder(text))> option*
+      <one(?Text(text))> option*
 
   template-element-to-string:
     Placeholder(sort(sort), <None() + Plus()>, option*) -> sort
     where
-      <not(one(?Placeholder(_)))> option*
+      <not(one(?Text(_) + ?Hide()))> option*
 
   template-element-to-string:
     Placeholder(_, <Option() + Star()>, option*) -> ""
     where
-      <not(one(?Placeholder(_)))> option*
+      <not(one(?Text(_) + ?Hide()))> option*
+
+  template-element-to-string:
+    Placeholder(_, _, option*) -> ""
+    where
+      <one(?Hide())> option*
 
   template-element-to-string:
     Placeholder(t) -> t
@@ -237,6 +243,27 @@
 
 strategies // Template expansion
 
+  //builder for testing
+  build-expand-template:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    where with-spxverify(
+      filename := <guarantee-extension(|"generated.aterm")> path;
+      result := <templatelang-desugar-top;
+                 collect-all(?TemplateProduction(_, _, _));
+                 filter(expand-multi-line-template-production)> selected
+     )
+
+strategies
+
+  // Many of the following strategies fail if a placeholder is encountered
+  // that has been expanded before (i.e., a cycle).
+  // The failure propagates up and is handled by the filter strategy in
+  // get-template-lines / get-template-elements, so that placeholders that
+  // would lead to infinite recursion are never expanded.
+
+  /**
+   * @type TemplateProduction ->? List(template-line)
+   */
   expand-multi-line-template-production:
     TemplateProduction(sort, SingleLineTemplate(elem*), a) ->
       <memo(expand-template-production)> TemplateProduction(sort, Template([Line(elem*)]), a)
@@ -247,16 +274,22 @@
   expand-multi-line-template-production:
     prod(_, _, _) -> <memo(expand-template-production)>
 
+  /**
+   * @type TemplateProduction ->? List(template-element)
+   */
   expand-single-line-template-production:
     TemplateProduction(_, SingleLineTemplate(_), _) -> <memo(expand-template-production)>
 
   expand-single-line-template-production:
     prod(_, _, _) -> <memo(expand-template-production)>
 
+  /**
+   * @type TemplateProduction ->? List(template-line) | List(template-element)
+   */
   expand-template-production:
     TemplateProduction(sort, template, attrs) -> result{score}
     where
-    	<not(is-reject)> attrs;
+      <not(is-reject)> attrs;
       <not(Expanded)> sort
     where {|Expanded:
       rules( Expanded: sort -> sort );
@@ -267,6 +300,9 @@
   expand-template-production:
     prod(_, _, _) -> <sdf-production-to-template; expand-template-production>
 
+  /**
+   * @type template-attributes -> Int
+   */
   determine-score:
     attrs -> <sum> [depr', prefer', avoid']
     where
@@ -274,16 +310,25 @@
       prefer' := <is-completion-prefer < !50 + !0> attrs;
       avoid'  := <is-completion-avoid < !-50 + !0> attrs
 
+  /**
+   * @type SingleLineTemplate ->? List(template-element)
+   */
   expand-template:
     t @ SingleLineTemplate(elem*) -> elem'*
     where
       elem'* := <listbu(expand-template-element)> elem*
 
+  /**
+   * @type Template ->? List(template-line)
+   */
   expand-template:
     t @ Template(line*) -> line'*
     where
       line'* := <listbu(expand-template-line)> line*
 
+  /**
+   * @type Placeholder ->? Placeholder
+   */
   is-template-placeholder:
     Placeholder(sort(x), _, _) -> <id>
     where
@@ -294,36 +339,68 @@
     where
       <setof-Declaration ; one(?TemplateProduction(_, _, _))> x
 
-  // expand-template-line covers exactly all valid input terms except:
-  //  Line([indent @ Layout(_), Placeholder(sort(x), <None() + Plus()>, _)]) where <Expanded> x
-
+  /**
+   * @type List(template-line) ->? List(template-line)
+   *
+   * expand-template-line covers exactly all valid input terms except:
+   *  Line([indent @ Layout(_), Placeholder(sort(x), <None() + Plus()>, _)]) where <Expanded> x
+   */
   expand-template-line:
-    [t @ Line([indent @ Layout(_), Placeholder(sort(x), <None() + Plus()>, _)]) | tail] -> [line* | tail]
+    [t @ Line([indent @ Layout(_), Placeholder(sort(x), <None() + Plus()>, option*)]) | tail] -> [line* | tail]
     where
-      <not(Expanded)> x
+      <not(Expanded)> x;
+      <not(one(?Hide()))> option*
     where
       line* := <get-template-lines(|indent) <+ ![t]> x
 
+  // Do not touch option/star placeholders.
+  expand-template-line:
+    [t @ Line([Layout(_), Placeholder(_, <Option() + Star()>, option*)]) | tail] -> [t | tail]
+    where
+      <not(one(?Hide()))> option*
+
+  // Remove line with hidden placeholder.
+  expand-template-line:
+    [Line([Layout(_), Placeholder(_, _, option*)]) | tail] -> tail
+    where
+      <one(?Hide())> option*
+
   expand-template-line:
     [t @ Line(elem*) | tail] -> [Line(elem'*) | tail]
     where
       not(!elem* => [Layout(_), Placeholder(_, <None() + Plus()>, _)])
     where
-      elem'* := <listbu(expand-template-element)> elem*
+      elem'* := <listbu(expand-template-element); is-not-empty-list> elem*
 
   expand-template-line:
     [] -> <id>
 
-  // expand-template-element covers exactly all valid input terms except:
-  //  Placeholder(sort(x), <None() + Plus()>, _) where <Expanded> x
-
+  /**
+   * @type List(template-element) ->? List(template-element)
+   *
+   * expand-template-element covers exactly all valid input terms except:
+   *  Placeholder(sort(x), <None() + Plus()>, _) where <Expanded> x
+   */
   expand-template-element:
-    [t @ Placeholder(sort(x), <None() + Plus()>, _) | tail] -> [elem* | tail]
+    [t @ Placeholder(sort(x), <None() + Plus()>, option*) | tail] -> [elem* | tail]
     where
-      <not(Expanded)> x
+      <not(Expanded)> x;
+      <not(one(?Hide()))> option*
     where
       elem* := <get-template-elements <+ ![t]> x
 
+  // Do not touch option/star placeholders.
+  expand-template-element:
+    [t @ Placeholder(_, <Option() + Star()>, option*) | tail] -> [t | tail]
+    where
+      <not(one(?Hide()))> option*
+
+  // Remove hidden placeholder.
+  expand-template-element:
+    [Placeholder(_, _, option*) | tail] -> tail
+    where
+      <one(?Hide())> option*
+
   expand-template-element:
     [t | tail] -> [t | tail]
     where
@@ -332,14 +409,20 @@
   expand-template-element:
     [] -> <id>
 
-  // helpers
+strategies  // helpers
 
+  /**
+   * @type String -> List(template-line)
+   */
   get-template-lines(|indent) =
     setof-Declaration ;
     filter(expand-multi-line-template-production);
     choose-one-expansion;
     map(Line(![indent | <id>]))
 
+  /**
+   * @type String -> List(template-element)
+   */
   get-template-elements =
     setof-Declaration ;
     filter(expand-single-line-template-production);
@@ -352,7 +435,11 @@
     <+
        Hd
 
-  // prefer least amount of literal characters
+  /**
+   * @type Any{Int} * Any{Int} -> Any
+   *
+   * The expansion with the least amount of literal characters is preferred.
+   */
   template-compare:
     (x{x-score}, y{y-score}) -> <id>
     where
@@ -367,12 +454,14 @@
     <+ ?Placeholder(<string-length>)
     <+ crush(!0, addi, template-character-count)
 
+  // lower than (does not exist in library)
   lti = not(gti)
 
-
   setof-Declaration =
-  	activate-scope(
-  		setof-sdf-declarations 
-  		|<GetEnclosingPackageName>
-  	);
-    is-not-empty-list
\ No newline at end of file
+    // debug(!"getting declarations of: ");
+    activate-scope(
+      setof-sdf-declarations
+      |<GetEnclosingPackageName>
+    );
+    // debug(!"declarations: ");
+    is-not-empty-list

From M.A.Akhter at student.tudelft.nl  Thu Dec 22 01:00:56 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 22 Dec 2011 00:00:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23836 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. index index/data index/tests
Message-ID: <20111222000056.8658CCC138@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Dec 22 00:00:55 2011
New Revision: 23836
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23836&sc=1

Log:
refactoring / forward reference resolving
refactoring / minor changes in exception handling

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Wed Dec 21 15:42:55 2011	(r23835)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Thu Dec 22 00:00:55 2011	(r23836)
@@ -49,21 +49,22 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws InterpreterException {
 		boolean successStatement = false;
 		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
+		String projectPath = Tools.asJavaString(getProjectPath(tvars));
+		
 		try {
 			validateArguments(env, svars, tvars);
 			successStatement = executePrimitive(env, svars, tvars) ;
 		}
 		catch (Exception ex) {
-			
 			if (!( ex instanceof SpxSymbolTableException)) 
-				logException(agent , ex);
+				logException(projectPath , agent , ex);
 			
 			if( ex instanceof IOException ||  ex instanceof IllegalStateException){
 				tryCleanupResources( index.getFacadeRegistry() ,  getProjectPath(tvars) , agent);
 			}
 		}
 		catch (Error e) {
-			logException(agent , e);
+			logException(projectPath, agent , e);
 			tryCleanupResources( index.getFacadeRegistry() ,  getProjectPath(tvars) , agent);
 			throw e;
 		}
@@ -92,15 +93,15 @@
 		agent.printError("[" + this.getName() + "] " + message);
 	}
 		
-	void logException(IOAgent agent , Throwable ex){
-		agent.printError("[" + this.getName() + "]  Invocation failed . "
+	void logException(String projectPath , IOAgent agent , Throwable ex){
+		agent.printError("[" + this.getName() + "]  Invocation failed for following project : "+ projectPath +". "
 									+ ex.getClass().getSimpleName()
 									+ " | error message: " + ex.getMessage()
 									+ " | stack track : "+ getStackTrace(ex));
 	}
 	
 	
-	 public static String getStackTrace(Throwable aThrowable) {
+	public static String getStackTrace(Throwable aThrowable) {
 		    final Writer result = new StringWriter();
 		    final PrintWriter printWriter = new PrintWriter(result);
 		    if(aThrowable == null) 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Wed Dec 21 15:42:55 2011	(r23835)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Thu Dec 22 00:00:55 2011	(r23836)
@@ -116,7 +116,7 @@
 		
 		PackageDeclaration	assiciatedPackageDeclaration = facade.lookupPackageDecl(this.namespaceUri().id());
 		
-		Set<IStrategoList> importedToPackages = assiciatedPackageDeclaration.getImortedToPackageReferences();
+		Set<IStrategoList> importedToPackages = facade.getPersistenceManager().spxPackageTable().getImportedToReferencesOf(assiciatedPackageDeclaration.getId());
 		
 		return importedToPackages.contains(searchOrigin.namespaceUri().id());
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Wed Dec 21 15:42:55 2011	(r23835)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Thu Dec 22 00:00:55 2011	(r23836)
@@ -170,8 +170,7 @@
 			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
 				SpxSemanticIndexFacade idxFacade = idx.getFacadeRegistry().getFacade(projectPath);
 				if(idxFacade!= null){
-					idxFacade.commitChanges();
-					idxFacade.close(false);
+					idxFacade.close(true); // also commiting if the persistence manager is still open
 				} 	
 			}
 		};

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Wed Dec 21 15:42:55 2011	(r23835)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Thu Dec 22 00:00:55 2011	(r23836)
@@ -221,6 +221,7 @@
 	
 	//TODO : save it as binary serialized format
 	private SpxModuleLookupTable addAnalyzedModuleDefinition(SpxSemanticIndexFacade f, IStrategoList id, IStrategoAppl moduleDefinition) throws IOException{
+		
 		_moduleAnalyzedDefinition.put(id, SpxIndexUtils.serializeToString(f.getTermAttachmentSerializer(), moduleDefinition));
 		
 		return this;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java	Wed Dec 21 15:42:55 2011	(r23835)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java	Thu Dec 22 00:00:55 2011	(r23836)
@@ -2,11 +2,13 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 
+import jdbm.InverseHashView;
 import jdbm.PrimaryHashMap;
 import jdbm.RecordListener;
 import jdbm.SecondaryHashMap;
@@ -30,7 +32,9 @@
 	// Symbol table that stores package declarations
 	private final PrimaryHashMap<IStrategoList, PackageDeclaration> _packageLookupTable;
 	private final SecondaryHashMap<String, IStrategoList, PackageDeclaration> _uriMap;
-
+	private final SecondaryHashMap<IStrategoList, IStrategoList, PackageDeclaration> _importedToReferences;
+	
+	
 	private final String SRC = this.getClass().getSimpleName();
 	private final ISpxPersistenceManager _manager;
 
@@ -54,10 +58,20 @@
 		String tableName = SRC + "_" + manager.getIndexId();
 
 		_manager = manager;
-		_packageLookupTable = manager.loadHashMap(manager.getIndexId()
-				+ "._lookupPackageMap.idx");
+		_packageLookupTable = manager.loadHashMap(manager.getIndexId()	+ "._lookupPackageMap.idx");
 
-		// readonly secondary view of the the lookup table .
+			// readonly secondary views of the  primary lookup table .
+		_importedToReferences = _packageLookupTable.secondaryHashMapManyToOne(
+				tableName + "._importedToReferences.idx", 
+				new SecondaryKeyExtractor<Iterable<IStrategoList>, IStrategoList, PackageDeclaration>() {
+					public Iterable<IStrategoList> extractSecondaryKey(IStrategoList key, PackageDeclaration value) {
+						
+						Set<IStrategoList> values = new HashSet<IStrategoList>();
+						values.addAll(value.getImportReferneces());
+						return values;
+					}
+				});
+				
 		_uriMap = _packageLookupTable.secondaryHashMapManyToOne(
 						tableName + "._urimap.idx",
 						new SecondaryKeyExtractor<Iterable<String>, IStrategoList, PackageDeclaration>() {
@@ -78,6 +92,7 @@
 							}
 						});
 
+		
 		initListeners();		
 	}
 
@@ -195,19 +210,7 @@
 			throw new IllegalArgumentException("Unknown PackageID : "+ pId);
 		
 	}
-
-	void removeImportedToReferences(PackageDeclaration decl) {
-		assert decl != null;
-		PackageDeclaration packageDecl;
-
-		for (IStrategoList id : decl.getImortedToPackageReferences()) {
-			packageDecl = this.getPackageDeclaration(id);
-			if (packageDecl != null) {
-				packageDecl.removeImportedToPackageReference(decl);
-			}
-		}
-	}
-
+	
 	public PackageDeclaration getPackageDeclaration(IStrategoList id) { return _packageLookupTable.get(id); }
 
 	public Set<PackageDeclaration> getPackageDeclarations() {
@@ -232,8 +235,6 @@
 
 		PackageDeclaration decl = _packageLookupTable.remove(id);
 		
-		this.removeImportedToReferences(decl);
-		
 		_manager.logMessage(SRC + ".remove", "Removed Package " + id + " from symbol table.");
 		return decl;
 	}
@@ -356,5 +357,19 @@
 	public void removeRecordListener( final IPackageDeclarationRecordListener rl){
 		this.recordListeners.remove(rl.getPackageDeclarationRecordListener());
 	}
+	
+	public Set<IStrategoList> getImportedToReferencesOf(IStrategoList packageId) {
+		Set<IStrategoList> pIds = new HashSet<IStrategoList>();
+		
+		Iterable<PackageDeclaration> pDecs = this._importedToReferences.getPrimaryValues(packageId);
+		
+		if(pDecs != null)
+		{
+			for(PackageDeclaration p:pDecs){ 
+				pIds.add(p.getId());
+			}
+		}
+		return pIds;
+	}
 }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Wed Dec 21 15:42:55 2011	(r23835)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Thu Dec 22 00:00:55 2011	(r23836)
@@ -595,12 +595,13 @@
 	public void indexImportReferences(IStrategoAppl importReferences) throws SpxSymbolTableException{
 		verifyConstructor(importReferences.getConstructor(), getCons().getImportDeclCon(), "Illegal ImportDeclaration Constructor encountered.");
 		
+		ISpxPersistenceManager manager = getPersistenceManager();
 		IStrategoAppl namespaceId = (IStrategoAppl) importReferences.getSubterm(0);
 		IStrategoList imports = (IStrategoList) importReferences.getSubterm(1);
 		IStrategoList packageId; 
 		
 		if (namespaceId.getConstructor() == getCons().getModuleQNameCon()) {
-			packageId = getPersistenceManager()
+			packageId = manager
 					.spxModuleTable()
 					.packageId(ModuleDeclaration.getModuleId(this, namespaceId));
 			
@@ -612,8 +613,10 @@
 
 		PackageDeclaration packageDeclaration= this.lookupPackageDecl(packageId);
 		
-		packageDeclaration.addImportRefernces(this, imports);
-		getPersistenceManager().spxPackageTable().definePackageDeclaration(packageDeclaration);
+		PackageDeclaration newDecl = PackageDeclaration.newInstance(packageDeclaration);
+		newDecl.addImportRefernces(this, imports);
+
+		manager.spxPackageTable().definePackageDeclaration(newDecl);
 	}
 	
 	
@@ -674,8 +677,9 @@
 	public IStrategoTerm getImportedToReferences(IStrategoAppl namespaceId) throws SpxSymbolTableException {
 		PackageDeclaration ns; 
 
+		ISpxPersistenceManager manager  = getPersistenceManager();
 		if (namespaceId.getConstructor() == getCons().getModuleQNameCon()) {
-			IStrategoList packageId = getPersistenceManager()
+			IStrategoList packageId = manager  
 					.spxModuleTable()
 					.packageId(ModuleDeclaration.getModuleId(this, namespaceId));
 			ns = lookupPackageDecl(packageId);
@@ -684,7 +688,16 @@
 		} else
 			throw new IllegalArgumentException("Unknown Namespace "	+ namespaceId.toString());
 		
-		return ns.getImportedToReferences(this);
+		Set<IStrategoList> importedTos = manager.spxPackageTable().getImportedToReferencesOf(ns.getId());
+		
+		
+		//Converting to terms 
+		IStrategoList result = this.getTermFactory().makeList();
+		for (IStrategoTerm t: importedTos){
+			result = this.getTermFactory().makeListCons(PackageDeclaration.tranformToSpxImport(this,t), result);
+		}
+		
+		return result ; 
 	}
 	
 	/**
@@ -1060,7 +1073,7 @@
 			logMessage("close | closing underlying persistence manager instance.");
 			ISpxPersistenceManager persistenceManager = this.getPersistenceManager();
 			if(shouldCommit)
-				persistenceManager.commit();
+				commitChanges();
 			
 			persistenceManager.close();
 			persistenceManager = null;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Wed Dec 21 15:42:55 2011	(r23835)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Thu Dec 22 00:00:55 2011	(r23836)
@@ -61,18 +61,15 @@
 		IStrategoAppl packageRef = (IStrategoAppl)i;
 		if( packageRef.getConstructor() ==  idxFacade.getCons().getPackageQNameCon()){
 			IStrategoList id = PackageDeclaration.getPackageId(idxFacade, packageRef);
-			PackageDeclaration decl = idxFacade.lookupPackageDecl(id);
-			if((decl != null) && (!SpxSymbol.verifyEquals(this.id, id))){	
+			if(!SpxSymbol.verifyEquals(this.id, id)){	
 				this.importReferences.add(id);
-				decl.addImportedTo(this.getId());
-				idxFacade.getPersistenceManager().spxPackageTable().definePackageDeclaration(decl);
 			}
 		}
 		else 
 			throw new NotImplementedException("Unknown Import Reference. Not implemented for : " + packageRef.toString());
 	}
 	
-	protected IStrategoTerm tranformToSpxImport(SpxSemanticIndexFacade idxFacade, IStrategoTerm i){
+	public static IStrategoTerm tranformToSpxImport(SpxSemanticIndexFacade idxFacade, IStrategoTerm i){
 		IStrategoTerm retTerm = i ; 
 		if( i instanceof IStrategoList)
 			retTerm = PackageDeclaration.toPackageQNameAppl(idxFacade, (IStrategoList)i);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java	Wed Dec 21 15:42:55 2011	(r23835)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java	Thu Dec 22 00:00:55 2011	(r23836)
@@ -23,7 +23,6 @@
 	public static final int SPX_COMPILATION_UNIT_PATH = 1;
 	
 	private final Set<String> resourceAbsPaths = new HashSet<String>();
-	private final Set<IStrategoList> importedToReferences = new HashSet<IStrategoList>();
 	
 	public PackageDeclaration(String resourceAbsPath, IStrategoList id) {
 		super(id);
@@ -40,37 +39,13 @@
 		super(id);
 	}
 	
-	public Set<IStrategoList> getImortedToPackageReferences(){return importedToReferences;}
-	
-	public void removeImportedToPackageReference(PackageDeclaration decl) {
-		this.importedToReferences.remove(decl.getId());
-	}
 	
 	public void addFileUri(String resAbsolutePath){
 		resourceAbsPaths.add(resAbsolutePath);
 	}
 	
-	public void addImportedTo(IStrategoList packageId){
-		importedToReferences.add(packageId);
-	}
-	
-	
-
-	public IStrategoTerm getImportedToReferences(
-			SpxSemanticIndexFacade idxFacade) {
-		ITermFactory termFactory = idxFacade.getTermFactory();
-		TermConverter termConverter = idxFacade.getTermConverter();
-		
-		HashSet<IStrategoTerm> importedTo = new HashSet<IStrategoTerm>();
-		importedTo.addAll(this.importedToReferences);
 		
-		IStrategoList result = termFactory.makeList();
-		for (IStrategoTerm t: importedTo){
-			result = idxFacade.getTermFactory().makeListCons(tranformToSpxImport(idxFacade,t), result);
-		}	
-		return termConverter.convert(result);
-	
-	}
+
 	
 	/* (non-Javadoc)
 	 * @see java.lang.Object#equals(java.lang.Object)
@@ -179,7 +154,6 @@
 		for( String str : decl.getAllFilePaths())
 			newDecl.addFileUri(str); 
 		
-		newDecl.importedToReferences.addAll(decl.importedToReferences);
 		newDecl.importReferences.addAll(decl.importReferences);
 		newDecl.legacyImportReferences.addAll(decl.legacyImportReferences);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Wed Dec 21 15:42:55 2011	(r23835)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Thu Dec 22 00:00:55 2011	(r23836)
@@ -194,9 +194,62 @@
 
 		PackageDeclaration decl =  _facade.lookupPackageDecl(pQnameAppl1);
 		
-		assertEquals(1, decl.getImortedToPackageReferences().size());
+		assertEquals(1, _facade.getPersistenceManager().spxPackageTable().getImportedToReferencesOf(decl.getId()).size());
 	}
 	
+	
+	public void testIndexingImportToReferences() throws SpxSymbolTableException, IOException
+	{
+
+		String packageName1 =  	"\"languages\", \"entitylang1\"" ;
+		String packageName2 =  	"\"languages\", \"entitylang2\"" ;
+		
+		IStrategoAppl pQnameAppl1 = indexTestPackageDecl(packageName1, absPathString1);
+		IStrategoAppl pQnameAppl2 = indexTestPackageDecl(packageName2, absPathString1);
+		
+		String packageName3 =  	"\"languages\", \"entitylang3\"" ;
+		IStrategoAppl pQnameAppl3 = indexTestPackageDecl(packageName3, absPathString1);
+		
+		
+		
+		// p3 imports p1
+		IStrategoAppl importDecl1 = this.termFactory().makeAppl(_facade.getCons().getImportDeclCon(), pQnameAppl3,  
+																this.termFactory().makeList(pQnameAppl1) );
+		this._facade.indexImportReferences(importDecl1);
+		
+		
+		//p3 imports p2
+		importDecl1 = this.termFactory().makeAppl(_facade.getCons().getImportDeclCon(), pQnameAppl3,  
+				this.termFactory().makeList(pQnameAppl2) );
+		this._facade.indexImportReferences(importDecl1);
+
+			
+		IStrategoList actuals = null;
+		
+		actuals = (IStrategoList) _facade.getImportReferences(pQnameAppl1);
+		assertEquals(0, actuals.size());
+		
+		
+		//following invocation should return both the import reference of itself and enclosing
+		//modules' import references. 
+		//Hence, it will return both pQnameAppl1 and pQnameAppl2
+		actuals = (IStrategoList) _facade.getImportReferences( pQnameAppl3 );
+		assertEquals(2, actuals.size());
+
+		PackageDeclaration decl =  _facade.lookupPackageDecl(pQnameAppl1);
+		
+		assertEquals(1, _facade.getPersistenceManager().spxPackageTable().getImportedToReferencesOf(decl.getId()).size());
+		
+		
+		_facade.removePackageDeclaration(this.termFactory().makeString(absPathString1), pQnameAppl1);
+		indexTestPackageDecl(packageName1, absPathString1);
+		decl =  _facade.lookupPackageDecl(pQnameAppl1);
+		
+		
+		assertEquals(1, _facade.getPersistenceManager().spxPackageTable().getImportedToReferencesOf(decl.getId()).size());
+	}
+	
+	
 	public void testIndexModuleDeclaration() throws IllegalArgumentException, SpxSymbolTableException, IOException 
 	{
 		ITermFactory f = termFactory() ;

From M.A.Akhter at student.tudelft.nl  Thu Dec 22 01:01:27 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 22 Dec 2011 00:01:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23837 -
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
Message-ID: <20111222000129.DBD40108C004@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Dec 22 00:01:27 2011
New Revision: 23837
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23837&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java	Thu Dec 22 00:00:55 2011	(r23836)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java	Thu Dec 22 00:01:27 2011	(r23837)
@@ -128,7 +128,7 @@
 		agent.setProjectPath(location.toOSString());
 		
 
-		//  TODO FIX : imploder attachment is while project is built from ant script.
+		//  TODO FIX : imploder attachment is null while project is built from ant script.
 		//  hence, adding an stratego observer is not adding any value
 		
 		//	observer.getRuntime().setIOAgent(agent);

From richard at vogelij.nl  Thu Dec 22 02:10:59 2011
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 22 Dec 2011 01:10:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23839 - in
	spoofax/trunk/spoofax/org.spoofax.jssglr: . .settings src/ace
Message-ID: <20111222011059.D45672B8018@mx2.tudelft.nl>

Author: rvogelij
Date: Thu Dec 22 01:10:59 2011
New Revision: 23839
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23839&sc=1

Log:
- Added a makefile to automate generation of jssglr.js for use in ACE
- Fixed a few combatibility issues in firefox and google chrome

Added:
   spoofax/trunk/spoofax/org.spoofax.jssglr/Makefile
   spoofax/trunk/spoofax/org.spoofax.jssglr/src/ace/
   spoofax/trunk/spoofax/org.spoofax.jssglr/src/ace/requirejsappend.js
   spoofax/trunk/spoofax/org.spoofax.jssglr/src/ace/requirejsprepend.js
Modified:
   spoofax/trunk/spoofax/org.spoofax.jssglr/.settings/com.google.gwt.eclipse.core.prefs

Modified: spoofax/trunk/spoofax/org.spoofax.jssglr/.settings/com.google.gwt.eclipse.core.prefs
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jssglr/.settings/com.google.gwt.eclipse.core.prefs	Thu Dec 22 00:17:10 2011	(r23838)
+++ spoofax/trunk/spoofax/org.spoofax.jssglr/.settings/com.google.gwt.eclipse.core.prefs	Thu Dec 22 01:10:59 2011	(r23839)
@@ -1,5 +1,5 @@
-#Thu Apr 21 14:34:58 CEST 2011
+#Thu Dec 22 01:20:18 CET 2011
 eclipse.preferences.version=1
 entryPointModules=
 filesCopiedToWebInfLib=gwt-servlet.jar
-gwtCompileSettings=PGd3dC1jb21waWxlLXNldHRpbmdzPjxsb2ctbGV2ZWw+SU5GTzwvbG9nLWxldmVsPjxvdXRwdXQtc3R5bGU+T0JGVVNDQVRFRDwvb3V0cHV0LXN0eWxlPjxleHRyYS1hcmdzPjwhW0NEQVRBWy1YZGlzYWJsZUNsYXNzTWV0YWRhdGEgLVhkaXNhYmxlQ2FzdENoZWNraW5nIC1vcHRpbWl6ZSA5XV0+PC9leHRyYS1hcmdzPjx2bS1hcmdzPjwhW0NEQVRBWy1YbXg1MTJtXV0+PC92bS1hcmdzPjwvZ3d0LWNvbXBpbGUtc2V0dGluZ3M+
+gwtCompileSettings=PGd3dC1jb21waWxlLXNldHRpbmdzPjxsb2ctbGV2ZWw+SU5GTzwvbG9nLWxldmVsPjxvdXRwdXQtc3R5bGU+T0JGVVNDQVRFRDwvb3V0cHV0LXN0eWxlPjxleHRyYS1hcmdzPjwhW0NEQVRBWy1YZGlzYWJsZUNsYXNzTWV0YWRhdGEgLVhkaXNhYmxlQ2FzdENoZWNraW5nIC1vcHRpbWl6ZSA5XV0+PC9leHRyYS1hcmdzPjx2bS1hcmdzPjwhW0NEQVRBWy1YbXg1MTJtXV0+PC92bS1hcmdzPjxlbnRyeS1wb2ludC1tb2R1bGU+b3JnLnNwb29mYXguanNzZ2xyLldvcmtlcjwvZW50cnktcG9pbnQtbW9kdWxlPjwvZ3d0LWNvbXBpbGUtc2V0dGluZ3M+

Added: spoofax/trunk/spoofax/org.spoofax.jssglr/Makefile
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.jssglr/Makefile	Thu Dec 22 01:10:59 2011	(r23839)
@@ -0,0 +1,34 @@
+worker_exists := $(wildcard ./war/jssglrWorker/*.cache.js)
+
+all: tbltojs jssglr-ace
+
+jssglr-ace:
+ifeq ($(strip $(worker_exists)),) 
+	echo "Compile the project first using GWT. (make sure a *.cache.js is generated)"
+else
+	rm -rf bin
+	mkdir -p bin
+	echo Making the GWT compiled file ready for use in ACE...
+	cp ./war/jssglrWorker/*.cache.js ./bin/tmp.js
+	cat \
+	./src/ace/requirejsprepend.js \
+	./bin/tmp.js \
+	./src/ace/requirejsappend.js > ./bin/jssglr.js
+	rm ./bin/tmp.js
+endif
+
+	
+
+
+tbltojs:
+	rm tbltojs* || strc \
+	-m main-to-js \
+	-i ./trans/to-js.str \
+	-o tbltojs \
+	-la stratego-lib \
+	-la stratego-xtc \
+	-la stratego-sglr
+
+clean:
+	rm -f tbltojs*
+	rm -rf bin

Added: spoofax/trunk/spoofax/org.spoofax.jssglr/src/ace/requirejsappend.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.jssglr/src/ace/requirejsappend.js	Thu Dec 22 01:10:59 2011	(r23839)
@@ -0,0 +1,7 @@
+
+	var load = function() {
+	    gwtOnLoad(undefined, 'jssglrWorker', '', 0);
+	}
+
+	exports.load = load;
+});

Added: spoofax/trunk/spoofax/org.spoofax.jssglr/src/ace/requirejsprepend.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.jssglr/src/ace/requirejsprepend.js	Thu Dec 22 01:10:59 2011	(r23839)
@@ -0,0 +1,13 @@
+define('ace/jssglr', ['require', 'exports', 'module' ], function(require, exports, module) {
+
+$stats = function(){};
+$self = self;
+$sessionId = null;
+$wnd = {};
+$doc = {}; //firefox fix
+$wnd.XMLHttpRequest = XMLHttpRequest;
+$wnd.setTimeout = function() { setTimeout.apply(self, arguments) };
+$wnd.clearTimeout = function() { clearTimeout.apply(self, arguments) };
+$wnd.clearInterval = function() { clearInterval.apply(self, arguments) };
+$wnd.alert = function(x) { }; //chrome fix
+

From tobivollebregt at gmail.com  Thu Dec 22 11:50:20 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 22 Dec 2011 10:50:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23840 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	editor unit-tests/templatelang
Message-ID: <20111222105020.B74647F8007@mx1.tudelft.nl>

Author: tvo
Date: Thu Dec 22 10:50:17 2011
New Revision: 23840
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23840&sc=1

Log:
SpoofaxLang: temporarily fix some tests by disabling editor-analyze for .spt files

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Thu Dec 22 01:10:59 2011	(r23839)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Thu Dec 22 10:50:17 2011	(r23840)
@@ -38,6 +38,8 @@
 	
 	editor-analyze: 
  		(ast, path, project-path) -> (analyzed-ast, errors, warnings, infos)
+    where
+      not(<string-ends-with(|".spt")> path)
  		where
 	    	with-spxverify(
 					editor-init
@@ -62,4 +64,8 @@
 	    	, !"Failed to compile-package-of"
 	    );  
 		  !issues => ( errors, warnings, infos)
-		  
\ No newline at end of file
+
+  editor-analyze: 
+    (ast, path, project-path) -> (ast, [], [], [])
+    where
+      <string-ends-with(|".spt")> path

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt	Thu Dec 22 01:10:59 2011	(r23839)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt	Thu Dec 22 10:50:17 2011	(r23840)
@@ -39,4 +39,4 @@
 parse to Template([Line([Placeholder(_, _, Options([Wrap()]))])])
 
 test parse text option [[ <<X; text="x y">> ]]
-parse to Template([Line([Placeholder(_, _, Options([Placeholder("\"x y\"")]))])])
+parse to Template([Line([Placeholder(_, _, Options([Text("\"x y\"")]))])])

From L.C.L.Kats at tudelft.nl  Thu Dec 22 13:58:43 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 22 Dec 2011 12:58:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23841 -
	spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature
Message-ID: <20111222125843.2AF32108C016@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Dec 22 12:58:42 2011
New Revision: 23841
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23841&sc=1

Log:
updated feature description

Modified:
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml

Modified: spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml	Thu Dec 22 10:50:17 2011	(r23840)
+++ spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.feature/feature.xml	Thu Dec 22 12:58:42 2011	(r23841)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.7.0.0"
+      version="1.0.1.0"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">
@@ -12,11 +12,11 @@
 Change log: http://strategoxt.org/Spoofax/ChangeLog
    </description>
 
-   <copyright url="http://www.lclnet.nl/software/spoofax-imp/">
+   <copyright url="http://www.spoofax.org/">
       Copyright (c) Lennart C. L. Kats 2010
    </copyright>
 
-   <license url="http://strategoxt.org/Stratego/Spoofax-IMP">
+   <license url="http://www.spoofax.org/">
       This software is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
@@ -27,7 +27,7 @@
    </license>
 
    <url>
-      <update label="Spoofax/IMP updates" url="http://www.lclnet.nl/update/"/>
+      <update label="Spoofax/IMP updates" url="http://download.spoofax.org/update/stable/"/>
    </url>
 
    <requires>

From L.C.L.Kats at tudelft.nl  Thu Dec 22 15:20:07 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 22 Dec 2011 14:20:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23842 -
	spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite
Message-ID: <20111222142007.ACF73108C016@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Dec 22 14:20:07 2011
New Revision: 23842
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23842&sc=1

Log:
bump

Modified:
   spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml	Thu Dec 22 12:58:42 2011	(r23841)
+++ spoofax-imp/branches/spoofax-imp-release/org.strategoxt.imp.updatesite/site.xml	Thu Dec 22 14:20:07 2011	(r23842)
@@ -12,3 +12,4 @@
       </description>
    </category-def>
 </site>
+

From md.adilakhter at gmail.com  Thu Dec 22 01:17:11 2011
From: md.adilakhter at gmail.com (Md Adil Akhter)
Date: Thu, 22 Dec 2011 00:17:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23838 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	analyze analyze/str codegen context context/str editor normalize
Message-ID: <20111222001711.1FC3D7F8074@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Dec 22 00:17:10 2011
New Revision: 23838
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23838&sc=1

Log:
changes/build from ant 
refactor/deleted unused codes regarding renaming

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-globals.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-utils.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/stratego.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -81,7 +81,7 @@
 		where 
 			
 			if not(<is-a-analyzed-module>module-typed-qname) then
-				<get-module-definition-with-location>module-typed-qname => (module-decl,location);
+				<get-module-definition-with-location> module-typed-qname => (module-decl,location);
 				{| GetEnclosingModuleName
 			   : rules( GetEnclosingModuleName := module-typed-qname)
 				 ; <analyze-module-definition>module-decl
@@ -106,7 +106,7 @@
 			  ) 
 		  => problems-at-modules*
 		where	
-			get-declared-packages-qname
+			<get-declared-packages-qname>file-abs-path
 			; get-semantic-problems(
 					get-semantic-problmes-at-package-level
 				) 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -25,7 +25,6 @@
 			       ; warnings := <collect-all(stratego-constraint-warning, conc)> ast 
 			        |}
 	       )
-	     
 rules 
   is-declared =
       one(?_{cookie} + ?SVar(_{cookie}))
@@ -127,9 +126,7 @@
   stratego-constraint-error:
     Rule(t, _, _) -> <stratego-constraint-error-bad-match> t
 
-	stratego-constraint-error = stratego-constraint-error-bad-build
-	 
-  stratego-constraint-error-bad-build:
+	stratego-constraint-error-bad-build:
     t -> matches
     where
       collect(?RootApp(_) + ?App(_, _) + Wld + ?As(_, _) + ?BuildDefault(_) + ?BuildDefaultPT(_));

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -29,11 +29,11 @@
   		{| 	GetSemanticProblems, Declared:  
 			dbg-compiler(!$[-----------------::new-compile-session::-----------------]);
 			with-spxverify(
-				compile-init
+				where(compile-init)
 				; s 
-		    	; compile-unload
-		    	, !" new compile session failed unexpectedly. "  
-	        )  
+	    	; compile-unload
+	    	, !" new compile session failed unexpectedly. "  
+        )  
 	   |}
 
 rules				
@@ -44,7 +44,7 @@
 		where (
 			index-init 
 		<+ 
-			debug(! $[Failed to initialize SemanticIndex for [<get-project-path>] at this moment...."])
+			debug(! $[Failed to initialize SemanticIndex for [<get-project-path>] at this moment."])
 		);
 		// Getting Source directory to start parsing files if needed.
 		// Otherwise, it reads from the cache
@@ -85,15 +85,16 @@
 	
 	// compiling all the package 
 	compile-all =
-		? (file-abs-path, ast)
-		; new-compile-session(
-		  	get-package-list => list-of-package-qname  
-				; <compile-internal>list-of-package-qname
+		 new-compile-session(
+		  	p* := <get-package-list>  
+		  	; <compile-internal> p*
 				; <get-all-analyzed-modules-locations>()
 				; mark-issues-of-file
 			)
 	
-	compile-packages-of: (ast, file-abs-path) -> <compile-packages-of(fail, fail , id)>(ast, file-abs-path) 
+	compile-packages-of: 
+		(ast, file-abs-path) -> 
+		<compile-packages-of(fail, fail , id)>(ast, file-abs-path) 
 		 	
 	// compiles all the packages stored at the filepath specified
 	compile-packages-of (should-compile-forward-refs, get-forward-references, generate-code): 
@@ -101,9 +102,10 @@
 		where
 			new-compile-session(
 			 	<get-declared-packages-qname> file-abs-path => list-of-package-qname 
+				; dbg-compiler(!$[----compile-packages-of:: compiling following packages [<print-as-string>list-of-package-qname] .])
 				; <compile-internal>list-of-package-qname // Compiling
-			  ; dbg-compiler(!$[----compile-packages-of:: compiling and error analysis is done.])
-				; <get-semantic-problmes-by-file>file-abs-path => issues*// getting list of errors
+			  
+			  ; <get-semantic-problmes-by-file>file-abs-path => issues*// getting list of errors
 				; dbg-compiler(!$[----compile-packages-of:: get semantic problems of current file .])
 				; if not(<fail-if-has-errors>issues*) then
 				  	dbg-compiler(!$[----compile-packages-of:: found errors .]);
@@ -170,20 +172,22 @@
 					  		; with-spxverify ( 
 				  				 rules(HasErrors :=  True() )
 								  )
-						end
-					; spx-compilation-unit-ast := <get-indexed-compilation-unit> file-path 
-				 	;	( <set-spoofax-markers(|file-path)>(spx-compilation-unit-ast,  e, w, n) 
-				 		<+
-			 				<debug(!"Failed to set Error Markers for ")>file-path;
-			 				fail
-		 				) 
+						end;
+						if not(is-in-command-line-mode) then 
+							spx-compilation-unit-ast := <get-indexed-compilation-unit> file-path 
+				 			;	( <set-spoofax-markers(|file-path)>(spx-compilation-unit-ast,  e, w, n)	 
+			 				<+
+			 					<debug(!"Failed to set Error Markers for ")>file-path;
+				 				fail
+			 				)
+			 			end	 
 	  		}	
 			)	
 	
 	// Set markers for a given spoofax file
   // Current term: (ast-desugared, errors, warnings, notes) tuple
   // file-path: path of the spoofax compilation unit
-  set-spoofax-markers(|file-path) = prim("SSL_EXT_set_markers", file-path)
+  set-spoofax-markers(|file-path) =  is-in-command-line-mode < id + prim("SSL_EXT_set_markers", file-path)
 
 rules
 	compile-main =
@@ -224,11 +228,13 @@
 			  	// Start Compiling the dependent Spx Artifacts
 				; <list-loop(compile-depending-spx)>depending-typedqname*
 				;{| GetEnclosingPackageName 
-				  : 	<declare-current-package-scope> package-typed-qname
+				  : 	
+				  	<declare-current-package-scope> package-typed-qname
 						// Now, since all the depending-on artifacts are compiled
 						// start compiling the enclosing modules of this package.
 						// Note: currently we are not considering any nested packages.
-						; modules-to-compile* := <get-enclosed-dirty-modules>package-typed-qname
+						; modules-to-compile* := <get-enclosed-dirty-modules; debug(!"compiling following modules :  ")>package-typed-qname
+						  
 						; dbg-compiler(!$[--Compiling SPX Packages:: compiling following modules(dirty) : [<print-as-string>modules-to-compile*]])
 						; <declare-spx-global-symbols>modules-to-compile* 
 						; <list-loop(compile-spx-module)>modules-to-compile*

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -23,26 +23,28 @@
 	utils/cache
 	analyze/main
 	codegen/generate
+	context/symboltable
 	
 
 rules
-	build-all' = 
-		?current-term		
-		; build-all
-		; if HasErrors then 
-		  	error-msg := $[Build Failed! ];
-				fatal-err-msg(|error-msg )
-			end  	
-		; !current-term //restoring current term to avoid side effects
-		 
 	build-all = 
 		new-compile-session(
-				list-of-package-qname* := <get-package-list> 
-				; <compile-internal> list-of-package-qname*
-				; generate-spx-artifacts
-		)
+	  	get-package-list
+			; compile-internal
+			; <get-all-analyzed-modules-locations>()
+			; mark-issues-of-file
+			; if HasErrors 
+			  then 
+		  		<debug> $[Error during Compilation. Build Failed. Please fix the errors first.];
+		  		index-close;
+		  		fail
+		  	else
+		  		<debug> $[No Error during Compilation. Generating artefacts.];
+		  		generate-spx-artifacts		
+		 		end
+	 )
 	
-	should-compile-forward-references = id
+	should-compile-forward-references = fail
 	
 	build-spx-incrementally =
 		verify(?(ast, abs-path) |<id> , "?(ast, abs-path) ::build-spx-incrementally" );   
@@ -54,22 +56,22 @@
 	
 	generate-spx-artifacts = 
 		if not(HasErrors) then
-			list-of-package-qname* := <get-package-list>
+			packages := <get-package-list>
 	 		; debug-time( 
 			  	new-code-generate-session(
  					  init-code-generation
 	 				  ; debug-time(
 		  			  	<list-loop(
-			  					generate-spx-package)>list-of-package-qname*
+			  					generate-spx-package)>packages
 				  	  | $[--Generating the artifacts for all the modified spx])
 					  ;<filter(
-					    		has-language-name-configured)>list-of-package-qname*
+					    		has-language-name-configured)>packages
 		    		; emit-build-script 
 					)
 	  		| "--Code Generation done"
- 		  	) 
+	  		) 
 		else
-			<debug>$[Compilation Failed.Please fix the errors before building the artifacts.]		
+			<debug>$[---------------- Compilation Failed.Please fix the errors before building the artifacts -----------------------]		
 		end			
 					
 rules 
@@ -77,12 +79,12 @@
   	dbg-compiler(!$[-----------------::new-code-generate-session::-----------------]);
 		with-spxverify(
 			index-on-init-code-generation;
-  			s;
-  			index-on-complete-code-generation 
-    		, !" new code generated session failed unexpectedly. "  
+  		s;
+  		index-on-complete-code-generation 
+    	, !" new code generated session failed unexpectedly. "  
     )  
 	
-	refresh-file = is-in-command-line-mode  < id + refresh-workspace-file 
+	refresh-file = refresh-workspace-file 
 
 	//TODO: OPTIMIZE : get the imports and resue it in all the generation phase rather traversing to find it out each time. 
 	//TODO: OPTIMIZE : DR can be used to construct this imports  

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -51,28 +51,27 @@
 				report-failure-with-stacktrace 
 			)
 		where 
-  		with-spxverify(	
+			with-spxverify(	
 				<debug>$[-- Activating following Project Configuration : ];
 				initialize-configuration;        	// initializes configuration and setting up enviroment variables
-				enable-command-line-mode;
 				<show-configuration;debug>()     //show configuration for this spx project
 			<+
-				report-failure-with-stacktrace 
-			);	
+				<debug>$[-- Failed to initialize configuration. ];
+				fail
+		  )	
+		where
 			with-spxverify(
-				<debug>$[-- SPXLang Build: ];
+				<debug>$[-- SPXLang Build: build option : [build-opt]];
+				enable-command-line-mode;
 				if <equal-strings>(build-opt , "-c")  then
-					index-clearall;
+					(index-clearall <+ <debug>$[-- Index cleanup failed . Please clean index by invoking builder from the transform menu before building again.]; fail);
 					<debug>$[-- Initializing clean build.]
 				else
 					<debug>$[-- Initializing Incremental Build.]
 				end;  
-				build-all';  //building all the spx files in the sources directory
+				build-all;  //building all the spx files in the sources directory
 				<debug>$[-- Intermediate artefacts have been generated successfully.]
-			<+
-				report-failure-with-stacktrace 
 			)
-
 			
 rules
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -69,7 +69,6 @@
 	// Verifies that the current term is not a empty list 
 	is-not-empty-list = ?[_|_] 
 	
-rules 
 	save-to-file:(fileName, fileContent) -> None()  
   	where
     	not(<eq>("", fileContent))
@@ -82,70 +81,4 @@
       ;<fputs>(fileContent , filedescr)
       ;<fclose>filedescr	
        
-       
- rules // scoped renaming
-	
-	/**
-	* executes the renaming strategy s in a new scope
-	* 
-	* declarations inside the new scope will hide existing declarations outside the new scope
-	* multiple declarations with the same name inside the new scope will be renamed to the same name
-	*
-	* @param renaming strategy s: a -> b
-	* @type a -> b
-	*/
-	new-scope(s) :
-		x -> y
-		where 
-			dbg-compiler(!$[Entering scope [<print-as-string> x].])
-		where
-			<newname> x => scope ;
-			{| Renamed, RenamedInScope, CurrentScope:
-				rules (CurrentScope: _ -> scope) ;
-				<s> x => y
-			|} 
-		where 
-			dbg-compiler(!$[Leaving scope [<print-as-string> x].])
-			
-	/**
-	* annotates the current term with a fresh name
-	* can distinguish different namespaces
-	* remembers the renaming by storing two dynamic rules
-	* 
-	* multiple calls on the same term inside the same scope will give identical results
-	* calls inside a new scope will hide the results of calls to the same term from outer scopes
-	*
-	* @param namespace 
-	* @type a -> a
-	*/
-	rename-declaration(|namespace) : 
-		x -> x'
-		where 
-			CurrentScope => scope ;
-			(
-				<RenamedInScope> (namespace, scope, x) => x' <+
-				x' := x{<newname> x}
-			)
-		where rules(
-			RenamedInScope: (namespace, scope, x) -> x' 
-			Renamed: (namespace, x) -> x'
-		)
-		where 
-			dbg-compiler(!$[Renamed declaration [<print-as-string> x] to [<print-as-string> x'] in namespace [<print-as-string> namespace].])
-	
-	/**
-	* annotates the current term with a new name
-	* succeeds only if rename-declaration was called before on the same term
-	* will use the same name as rename-declaration (by calling the dynamic rule stored by rename-declaration)
-	*
-	* @param namespace 
-	* @type a -> b
-	*/
-	rename-reference(|namespace) :
-			x -> x'
-		where
-			<Renamed> (namespace, x) => x'
-		where 
-			dbg-compiler(!$[Renamed reference [<print-as-string> x] to [<print-as-string> x'] in namespace [<print-as-string> namespace].])
-
- 			 
\ No newline at end of file
+ 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -54,7 +54,8 @@
 			 <get-annotation(get-package-annotation)>modname => Package( package-qname)
 			  ; mId := <get-module-typed-qname>(package-qname, modname)
 			  ; <index-update-existing-module-definition>(mId  ,  annotated-moduleDef)
-    	  )  
+  	  )
+  	    
 	
 rules 
 	declare-spxmodules-all(s):
@@ -163,4 +164,21 @@
 			 < has-extension(|"str") 
 			 + has-extension(|"rtree")
 			 > resolved-path
-		   ; <declare-legacy-str-imports> legacy-content
\ No newline at end of file
+		   ; <declare-legacy-str-imports> legacy-content
+		     
+rules 
+	
+	rename-id(|namespace) = 
+		?x;
+		namespace-qname-string := <package-qname-to-string> namespace;
+	 	<concat-strings>["__internal" , "_", namespace-qname-string  , "_" , <print-as-string>x] 
+	
+	newDefData:	
+		(scope at Package(QName(_)) , type, x) -> DefData(scope,  type, Internal() , x , x)
+		
+	newDefData(rename): 
+ 	(scope at Package(QName(_)) , type, x) -> defData   
+	 where 
+	 		x'  := <rename(|scope)>x;
+	 		defData  := DefData(scope,  type, Internal() , x , x')
+		     
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -58,12 +58,14 @@
 
 rules
   get-declared-packages-qname = 	
-  		dbg-symboltable(! $[Index | get-all-declared-packages-qname [<print-as-string>]] | "get-declared-packages-qname" , <debug-level-INFO>);  
+  		verify( String | <id> "String expected @get-declared-packages-qname ");
+  		dbg-symboltable(! $[Index | get-declared-packages-qname by file [<print-as-string>]] | "get-declared-packages-qname" , <debug-level-INFO>);  
 			project-package-declarations(package-typed-qname)   
   
   get-all-declared-packages-qname =   
   		dbg-symboltable(! $[Index | get-all-declared-packages-qname [<print-as-string>]] | "get-all-declared-packages-qname" , <debug-level-INFO>);
   		project-all-package-declarations(package-typed-qname)
+  		
 
 rules 
 	get-package-declaration = where(?Package(QName(_))) ; get-indexed-package-declaration
@@ -80,7 +82,7 @@
   * @param None()
   * @returns List of Packages' Typed-QName , i.e. , Package(QName(_))
   */              
-  get-package-list = get-all-declared-packages-qname
+  get-package-list = get-all-declared-packages-qname 
   
 rules 
 
@@ -98,6 +100,7 @@
   * @type module-qname-> Module(_,SPXModuleName(_),_)
   */              
   get-desugared-module-ast  = (get-cached-annotated-module-ast <+ get-indexed-module-definition(module-annotated-ast)); verify(?Module(_,SPXModuleName(_),_) | <id> , "Module(_,SPXModuleName(_),_)  @get-desugared-module-ast" )
+  
   /**
   * Returns the original module ast given module qualified name. For the provided   
   * module qualified name as the current term, it tires to resolve in the local cache. If not found 
@@ -106,7 +109,10 @@
   * @param None()
   * @type module-qname-> Module(_,SPXModuleName(_),_)
   */              
+  
   get-module-ast  = (get-cached-module-ast <+ get-indexed-module-definition(module-original-ast)); verify(?Module(_,SPXModuleName(_),_) | <id> , "Module(_,SPXModuleName(_),_) @get-module-ast")
+  
+  
   // TODO : rename it to get-initial-module-definition 
   /**
   * Returns the original module definition for the given module qualified name.  

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -2,7 +2,6 @@
  
 signature constructors
 	Public	:	 Visibility
-	Private	:	 Visibility
 	Internal:  Visibility	
 
 
@@ -11,6 +10,11 @@
 	PublicScope   : ScopeType
 	
 	
+	DefData : Package * Type* Visibility * ID * InternalID  -> DefData 
+	
+	InternalID : ID
+
+		
 signature constructors
 	Modules										: ScopedSymbol
 	Packages			 						: ScopedSymbol
@@ -18,13 +22,12 @@
 	
 	ScopeSymbol								: Symbol 
 	
-	//consider declaring the following 
 	STRSection								: Symbol
 	ESVSection								: Symbol
 	SDFSection								: Symbol
 	
 	Unresolved								: Symbol
-	Resolved								: Symbol
+	Resolved								  : Symbol
 
 
 signature constructors 
@@ -65,7 +68,6 @@
 	False : BooleanType
 	
 	
-	
 signature constructors 
 
 	Flag : Type  

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-globals.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-globals.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-globals.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -85,24 +85,28 @@
 rules
   
   declare-str-definition:
-    sdef at SDefT(x, s*, t*, s) -> SDefT(x', s*, t*, s')
+    def at SDefT(x, s*, t*, s) -> SDefT(x', s*, t*, s')
     where with-spxverify(
     	x' := x{<declare-definition>};
       s' := <topdown(try(declare-dynrule))> s
     )
-   	where 
-   		with-spxverify(
-	  		if GetScopeType => InternalScope() then 
-		    	with-spxverify(
-		    		sdeftId := <remove-annotations>x ;
-		    		package-qname-string := <package-qname-to-string> <GetEnclosingPackageName> ;
-		    		new-name := <concat-strings>["__internal" , "_",package-qname-string  , "_" , <print-as-string>sdeftId];
-		    		<index-unique-symbol-definition>(sdeftId , RenamedSDefT() , (<signature-of>sdef , new-name))
-		    	, ! $[Failed to index renamed SDefT...]	
-		    	)	
-	    	end
-	    )	
-
+   	/*
+   	where
+   		!x' =>  sdefId{cookie};
+ 			if GetScopeType => InternalScope() 
+ 			then 
+	    	with-spxverify(
+	    		defData := <newDefData(rename-id)>(<GetEnclosingPackageName> , STRDef() , sdefId);
+	    		internalId := <?DefData(_,_,_,_,<id>)>defData ;
+	    		<debug(!"index unique symbol: ")> (cookie , RenamedSDefT() , (<signature-of>def , internalId));
+	    		<index-unique-symbol-definition>(cookie , RenamedSDefT() , (<signature-of>def , internalId))
+	    	, ! $[Failed to index renamed SDefT]	
+	    	)	
+	    else
+	    	defData := <newDefData>(<GetEnclosingPackageName> , STRDef() , sdefId)	
+    	end ;
+    	<add-annotation(|defData)> x'  => x-with-defData
+	 */
   
 	declare-str-definition:
     o at OpDecl(x, t) -> OpDecl(x', t)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-utils.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-utils.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-utils.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -74,13 +74,13 @@
  
 rules 
   
-  // TODO : get-rid of scoping symbol as it is automatically handle in new symboltable structure  
   declare-definition:
     def -> cookie
     where with-spxverify(
       sig := <signature-of>
       ; scoped-sig    :=<to-scoped-symbol> sig
       ; if not(<DeclareCookie>scoped-sig  <+ <resolve-str-cookie> sig) then
+          // declaring a new cookie 
           cookie := <newterm>
           ; scoped-cookie :=<to-scoped-symbol> cookie
           ; rules(
@@ -90,6 +90,7 @@
 		      ; dbg-declaration(! $[Storing DeclareCookie : [<print-as-string>scoped-sig] -> [<print-as-string>cookie]]  | "STR|declare-definition" , <debug-level-INFO> ) 
 				  ; dbg-declaration(! $[Storing STRDeclaration : [<print-as-string>scoped-cookie] -> [<print-as-string>def]] | "STR|declare-definition" , <debug-level-INFO> )      
       else
+       	  // using existing cookie 
        	  cookie := <resolve-str-cookie> sig 
       end
     )
@@ -148,8 +149,8 @@
     )><all-keys-DeclareCookie>  
  
   resolve-str-declaration =
-    ? cookie
-  	; ( <STRDeclaration> <to-scoped-symbol> cookie
+    ? cookie
+   	; ( <STRDeclaration> <to-scoped-symbol> cookie
 	  	<+
     		<resolve-symbol-definition>( <id>, STRDef())
     		; dbg-declaration(!$[[<print-as-string>cookie] -> STRDef() ->  [<print-as-string><id>]] | "STR|resolve-str-declaration" , <debug-level-INFO> )

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -528,7 +528,7 @@
 	  ; with-spxverify(rules(SPXModuleAST:(OriginalModuleAST(),mid) -> ast))
 	
 	cache-annotated-module-ast	= 
-		verify( ?(mQname at Module(QName(_)), annotatedAst)| <id> , "(Module(QName(_)), _)@cache-annotated-module-ast"); 
+		verify( ?(mQname at Module(QName(_)), annotatedAst)| <id> , "(Module(QName(_)), _)@cache-annotated-module-ast");
 		with-spxverify(
 			rules(SPXModuleAST:(AnnotatedModuleAST(),mQname) -> annotatedAst)
 		)  
@@ -541,6 +541,7 @@
 	get-cached-annotated-module-ast = 
 		verify(?mid at Module(QName(_)) | <id> , "Module(QName(_))  @get-cached-annotated-module-ast" )
 		; <SPXModuleAST>(AnnotatedModuleAST() , mid)
+	  
 
 rules
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -10,6 +10,8 @@
 	utils/debug
 	editor/resolve/-
 	normalize/main
+	codegen/-
+	context/-
 
 rules
 	// Resolves a reference when the user control-clicks or presses F3 in the editor.
@@ -49,8 +51,14 @@
 			  	Compiling following SPX file: [<print-as-string>abs-path]
 		  	]); 
 			with-spxverify(
-	    	<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path  , ast);
-	    	<compile-packages-of> (ast, abs-path)  => (analyzed-ast , issues)
+	    	<store-currently-analyzing-ast> (
+	    		<string-replace(|"\\", "/")>abs-path  , ast
+  			);
+    		<compile-packages-of(
+					should-compile-forward-references, 
+					get-used-by, 
+					id )
+				> (ast, abs-path) => (analyzed-ast , issues)
 	    	, !"Failed to compile-package-of"
 	    );  
 		  !issues => ( errors, warnings, infos)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/stratego.str	Thu Dec 22 00:01:27 2011	(r23837)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/stratego.str	Thu Dec 22 00:17:10 2011	(r23838)
@@ -7,11 +7,12 @@
 imports
   libstratego-lib
   libstrc
-
+	lib/editor-common.generated
+	
 rules
-  basic-stratego-desugar-top =
-    topdown(try(basic-desugar))
-
+  basic-stratego-desugar-top =
+	 	topdown(try(origin-track-forced(basic-desugar)))
+  
   basic-desugar:
     SDef(x, a*, s) -> SDefT(x, a*, [], s)
 

From tobivollebregt at gmail.com  Thu Dec 22 19:46:43 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 22 Dec 2011 18:46:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23843 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen/template normalize
Message-ID: <20111222184643.260FD2B8006@mx2.tudelft.nl>

Author: tvo
Date: Thu Dec 22 18:46:42 2011
New Revision: 23843
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23843&sc=1

Log:
TemplateLang: hide placeholders from completion templates using hide option

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Thu Dec 22 14:20:07 2011	(r23842)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Thu Dec 22 18:46:42 2011	(r23843)
@@ -95,33 +95,31 @@
       TemplateProduction(sort, SingleLineTemplate([String(<un-double-quote> text)]), attrs)
 
   template-to-completion-template:
-    TemplateProduction(sort, SingleLineTemplate(elem* @ [_ | _]), attrs) ->
+    prod @ TemplateProduction(sort, SingleLineTemplate(_), attrs) ->
       |[ completion template ~sort : ~prefix = ~*part* ]|
     where
       not(<is-deprecated + is-reject> attrs)
     where with-spxverify(
-      {|Expanded:
-        part* := <filter(template-element-to-esv);
-                  template-to-completion-template-helper> elem*;
-        prefix := <build-prefix> part*
-      |}
+      elem* := <expand-single-line-template-production> prod;
+      part* := <filter(template-element-to-esv);
+                template-to-completion-template-helper> elem*;
+      prefix := <build-prefix> part*
     )
     where
       <accept-template-parts(|sort)> part*
-
-  template-to-completion-template:
-    TemplateProduction(sort, Template(line* @ [_ | _]), attrs) ->
+
+  template-to-completion-template:
+    prod @ TemplateProduction(sort, Template(_), attrs) ->
       |[ completion template ~sort : ~prefix = ~*part* (blank) ]|
     where
       not(<is-deprecated + is-reject> attrs)
     where with-spxverify(
-      {|Expanded:
-        part* := <filter(template-line-to-esv);
-                  remove-cursor-except-first;
-                  separate-by(|String("\n"));
-                  template-to-completion-template-helper> line*;
-        prefix := <build-prefix> part*
-      |}
+      line* := <expand-multi-line-template-production> prod;
+      part* := <filter(template-line-to-esv);
+                remove-cursor-except-first;
+                separate-by(|String("\n"));
+                template-to-completion-template-helper> line*;
+      prefix := <build-prefix> part*
     )
     where
       <accept-template-parts(|sort)> part*
@@ -151,17 +149,10 @@
     Line([Layout(x), Placeholder(_, <Option() + Star()>, option*)]) ->
       <spaces-to-tabs> [String(x), Cursor()]
       where
-        <not(one(?Text(_) + ?Hide()))> option*
-
-  template-line-to-esv:
-    line @ Line([Layout(_), Placeholder(_, <None() + Plus()>, option*)]) ->
-      // ?t and not(?t) are cycle breaker
-      <?t; expand-template-line; not(?t); filter(template-line-to-esv); is-not-empty-list> [line]
-      where
-        <not(one(?Text(_) + ?Hide()))> option*
+        <not(one(?Text(_)))> option*
 
   template-line-to-esv:
-    Line(elem*) -> <filter(template-element-to-esv); is-not-empty-list; spaces-to-tabs> elem*
+    Line(elem*) -> <filter(template-element-to-esv); not(?[]); spaces-to-tabs> elem*
 
   spaces-to-tabs =
     try([String(string-replace(|"  ", "\t")) | id])
@@ -171,7 +162,7 @@
     Placeholder(sort(sort), _, option*) ->
       PlaceholderWithSort($[<[text]:], sort)
       where
-        <one(?Text(text)); not(one(?Hide()))> option*
+        <one(?Text(text))> option*
 
   // A and A+ result in a placeholder containing the shortest expansion of A.
   template-element-to-esv:
@@ -190,7 +181,7 @@
     Placeholder(sort(sort), <Option() + Star()>, option*) ->
       PlaceholderWithSort("<:", sort)
     where
-      <not(one(?Text(_) + ?Hide()))> option*
+      <not(one(?Text(_)))> option*
 
   template-element-to-esv:
     Layout(x) -> String(x)
@@ -257,6 +248,7 @@
 
   // Many of the following strategies fail if a placeholder is encountered
   // that has been expanded before (i.e., a cycle).
+
   // The failure propagates up and is handled by the filter strategy in
   // get-template-lines / get-template-elements, so that placeholders that
   // would lead to infinite recursion are never expanded.
@@ -332,12 +324,7 @@
   is-template-placeholder:
     Placeholder(sort(x), _, _) -> <id>
     where
-      <setof-Declaration ; one(?TemplateProduction(_, _, _))> x
-
-  is-template-placeholder:
-    PlaceholderWithSort(_, x) -> <id>
-    where
-      <setof-Declaration ; one(?TemplateProduction(_, _, _))> x
+      <get-declarations; one(?TemplateProduction(_, _, _))> x
 
   /**
    * @type List(template-line) ->? List(template-line)
@@ -353,6 +340,12 @@
     where
       line* := <get-template-lines(|indent) <+ ![t]> x
 
+  // Do not touch already expanded placeholders.
+  expand-template-line:
+    [t @ Line([Layout(_), Placeholder(sort(x), <None() + Plus()>, _)]) | tail] -> [t | tail]
+    where
+      <Expanded> x
+
   // Do not touch option/star placeholders.
   expand-template-line:
     [t @ Line([Layout(_), Placeholder(_, <Option() + Star()>, option*)]) | tail] -> [t | tail]
@@ -366,11 +359,11 @@
       <one(?Hide())> option*
 
   expand-template-line:
-    [t @ Line(elem*) | tail] -> [Line(elem'*) | tail]
+    [t @ Line(elem*) | tail] -> t'
     where
       not(!elem* => [Layout(_), Placeholder(_, <None() + Plus()>, _)])
     where
-      elem'* := <listbu(expand-template-element); is-not-empty-list> elem*
+      t' := <![Line(<listbu(expand-template-element); not(?[])>) | tail] <+ !tail> elem*
 
   expand-template-line:
     [] -> <id>
@@ -382,12 +375,21 @@
    *  Placeholder(sort(x), <None() + Plus()>, _) where <Expanded> x
    */
   expand-template-element:
-    [t @ Placeholder(sort(x), <None() + Plus()>, option*) | tail] -> [elem* | tail]
+    [t @ Placeholder(sort(x), m @ <None() + Plus()>, option*) | tail] ->
+      // [elem* | tail]
+      [Placeholder(sort(x), m, [Text(text) | option*]) | tail]
     where
       <not(Expanded)> x;
       <not(one(?Hide()))> option*
     where
-      elem* := <get-template-elements <+ ![t]> x
+      elem* := <get-template-elements <+ ![t]> x;
+      text := <map(template-element-to-string); concat-strings> elem*
+
+  // Do not touch already expanded placeholders.
+  expand-template-element:
+    [t @ Placeholder(sort(x), <None() + Plus()>, _) | tail] -> [t | tail]
+    where
+      <Expanded> x
 
   // Do not touch option/star placeholders.
   expand-template-element:
@@ -415,7 +417,8 @@
    * @type String -> List(template-line)
    */
   get-template-lines(|indent) =
-    setof-Declaration ;
+    get-declarations;
+    not(?[]);
     filter(expand-multi-line-template-production);
     choose-one-expansion;
     map(Line(![indent | <id>]))
@@ -424,7 +427,8 @@
    * @type String -> List(template-element)
    */
   get-template-elements =
-    setof-Declaration ;
+    get-declarations;
+    not(?[]);
     filter(expand-single-line-template-production);
     choose-one-expansion
 
@@ -451,17 +455,14 @@
   template-character-count =
     ?String(<string-length>)
     <+ ?Layout(<string-length>)
-    <+ ?Placeholder(<string-length>)
+    <+ ?Text(<string-length>)
     <+ crush(!0, addi, template-character-count)
 
   // lower than (does not exist in library)
   lti = not(gti)
 
-  setof-Declaration =
-    // debug(!"getting declarations of: ");
+  get-declarations =
     activate-scope(
       setof-sdf-declarations
       |<GetEnclosingPackageName>
-    );
-    // debug(!"declarations: ");
-    is-not-empty-list
+    )

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str	Thu Dec 22 14:20:07 2011	(r23842)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str	Thu Dec 22 18:46:42 2011	(r23843)
@@ -127,7 +127,7 @@
     Separator(x) -> Separator(<origin-track-forced(un-double-quote; unescape)> x)
 
   templatelang-option-desugar:
-    Placeholder(x) -> Placeholder(<origin-track-forced(un-double-quote; unescape)> x)
+    Text(x) -> Text(<origin-track-forced(un-double-quote; unescape)> x)
 
   templatelang-element-desugar:
     Escape(t) -> String(t')

From M.A.Akhter at student.tudelft.nl  Wed Dec 28 02:10:26 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 28 Dec 2011 01:10:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23844 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax
Message-ID: <20111228011026.D56EC7F80C2@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Dec 28 01:10:25 2011
New Revision: 23844
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23844&sc=1

Log:
- excluding generated java from src. 
- added java builder in project

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.classpath	Thu Dec 22 18:46:42 2011	(r23843)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.classpath	Wed Dec 28 01:10:25 2011	(r23844)
@@ -3,6 +3,6 @@
 	<classpathentry exported="true" kind="lib" path="include/spoofaxlang.jar"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="src" path="editor/java"/>
+	<classpathentry kind="src" excluding="org/strategoxt/imp/editors/spoofax/generated/**" path="editor/java"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project	Thu Dec 22 18:46:42 2011	(r23843)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project	Wed Dec 28 01:10:25 2011	(r23844)
@@ -16,6 +16,11 @@
 			</arguments>
 		</buildCommand>
 		<buildCommand>
+      <name>org.eclipse.jdt.core.javabuilder</name>
+      <arguments>
+	    </arguments>
+    </buildCommand>
+		<buildCommand>
 			<name>org.eclipse.pde.ManifestBuilder</name>
 			<arguments>
 			</arguments>

From M.A.Akhter at student.tudelft.nl  Wed Dec 28 02:12:37 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 28 Dec 2011 01:12:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23845 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src:
	jdbm/recman org/spoofax/interpreter/library/language/spxlang/index
Message-ID: <20111228011237.EA72B7F80C2@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Dec 28 01:12:37 2011
New Revision: 23845
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23845&sc=1

Log:
- bug fix : relative path of index.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java	Wed Dec 28 01:10:25 2011	(r23844)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/recman/BaseRecordManager.java	Wed Dec 28 01:12:37 2011	(r23845)
@@ -252,22 +252,21 @@
     }
 
 	private void reopen() throws IOException {
-		_physFileFree = new RecordFile(_filename + DBF, FREE_BLOCK_SIZE,
-				_indexDirRelativePathString);
+		_physFileFree = new RecordFile(_filename + DBF, FREE_BLOCK_SIZE, _indexDirRelativePathString);
 
 		_physPagemanFree = new PageManager(_physFileFree);
-		_physFile = new RecordFile(_filename + DBR, DATA_BLOCK_SIZE);
+		_physFile = new RecordFile(_filename + DBR, DATA_BLOCK_SIZE, _indexDirRelativePathString);
 		_physPageman = new PageManager(_physFile);
 		_physMgr = new PhysicalRowIdManager(_physFile, _physPageman,
 				new FreePhysicalRowIdPageManager(_physFileFree,
 						_physPagemanFree, appendToEnd));
 
-		_logicFileFree = new RecordFile(_filename + IDF, FREE_BLOCK_SIZE);
+		_logicFileFree = new RecordFile(_filename + IDF, FREE_BLOCK_SIZE, _indexDirRelativePathString);
 		_logicPagemanFree = new PageManager(_logicFileFree);
 		if (TRANS_BLOCK_SIZE > 256 * 8)
 			throw new InternalError(); // to big page, slot number would not fit
 										// into page
-		_logicFile = new RecordFile(_filename + IDR, TRANS_BLOCK_SIZE);
+		_logicFile = new RecordFile(_filename + IDR, TRANS_BLOCK_SIZE, _indexDirRelativePathString);
 		_logicPageman = new PageManager(_logicFile);
 		_logicMgr = new LogicalRowIdManager(_logicFile, _logicPageman,
 				new FreeLogicalRowIdPageManager(_logicFileFree,

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Wed Dec 28 01:10:25 2011	(r23844)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Wed Dec 28 01:12:37 2011	(r23845)
@@ -61,14 +61,11 @@
 		this._agent = spxSemanticIndexFacade.getIOAgent();
 		this._indexId = spxSemanticIndexFacade.getIndexId() ;
 		
-		//BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX = spxSemanticIndexFacade.getProjectPath()+ "/" + Utils.SPX_INDEX_DIRECTORY+ "/" + _indexId + ".idx";
-
-		final String relPath = spxSemanticIndexFacade.getProjectPath()+ "/" + SpxIndexConfiguration.SPX_INDEX_DIRECTORY+ "/" + _indexId + ".idx";
 		if( options  == null)
 			options = new Properties();// Creating empty properties collection if it is null
 		
 		//setting properties of RecordManager
-		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, relPath);
+		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, spxSemanticIndexFacade.getProjectPath()+ "/" + SpxIndexConfiguration.SPX_INDEX_DIRECTORY+ "/" );
 		options.put(RecordManagerOptions.CACHE_TYPE, "soft");
 		options.put(RecordManagerOptions.DISABLE_TRANSACTIONS, "false");
 		

From L.C.L.Kats at tudelft.nl  Wed Dec 28 12:44:08 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 28 Dec 2011 11:44:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23846 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.updatesite
Message-ID: <20111228114408.4BE62108C002@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Dec 28 11:44:06 2011
New Revision: 23846
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23846&sc=1

Log:
updated release info for new version

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Dec 28 01:12:37 2011	(r23845)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Dec 28 11:44:06 2011	(r23846)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.6.1.4"
+      version="1.0.2.0"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">
@@ -12,23 +12,22 @@
 Change log: http://strategoxt.org/Spoofax/ChangeLog
    </description>
 
-   <copyright url="http://www.lclnet.nl/software/spoofax-imp/">
+   <copyright url="http://www.spoofax.org/">
       Copyright (c) Lennart C. L. Kats 2010
    </copyright>
 
-   <license url="http://strategoxt.org/Stratego/Spoofax-IMP">
+   <license url="http://www.spoofax.org/">
       This software is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-full license text for more details.
-Most Spoofax/IMP code is licensed under the Eclipse Public License.
-Some runtime components are licensed under the GNU Lesser General
-Public License or the GNU General Public License; external
-components may be covered by different licences.
+full license texts for more details.
+Most Spoofax/IMP code is licensed under the GNU Lesser General
+Public License (LGPL). Runtime components related to the IMP library are
+licensed under the Eclipse Public License (EPL).
    </license>
 
    <url>
-      <update label="Spoofax/IMP updates" url="http://www.lclnet.nl/update/"/>
+      <update label="Spoofax/IMP updates" url="http://spoofax.org/update/stable/"/>
    </url>
 
    <requires>

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Dec 28 01:12:37 2011	(r23845)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Dec 28 11:44:06 2011	(r23846)
@@ -1,14 +1,15 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <site>
-   <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
-      Spoofax/IMP update site
+   <description name="Spoofax/IMP" url="http://spoofax.org/update/stable/">
+      Spoofax update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.6.1.4.jar" id="org.strategoxt.imp" version="0.6.1.4">
+   <feature url="features/org.strategoxt.imp_1.0.2.0.jar" id="org.strategoxt.imp" version="1.0.2.0">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">
       <description>
-         The Spoofax/IMP language workbench.
+         The Spoofax language workbench.
       </description>
    </category-def>
 </site>
+

From richard at vogelij.nl  Thu Dec 29 12:36:18 2011
From: richard at vogelij.nl (Richard Vogelij)
Date: Thu, 29 Dec 2011 11:36:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23847 - in
	strategoxt-javascript-backend/trunk: scripts src/javascript
	src/javascript/jssglr src/stratego
Message-ID: <20111229113618.961E9108C007@mx3.tudelft.nl>

Author: rvogelij
Date: Thu Dec 29 11:36:16 2011
New Revision: 23847
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23847&sc=1

Log:
- fixed string concat functions like $[foo[var]bar] and $<foo<strategy>bar> to work
- added jssglr + prepend and append files. Properly updated the wrapper scripts
- js-backend: <import-term()> strategy now imports the optimized (methods rather than a large string) version of a parsetable

Added:
   strategoxt-javascript-backend/trunk/src/javascript/jssglr/
   strategoxt-javascript-backend/trunk/src/javascript/jssglr/generated.jssglr.js
   strategoxt-javascript-backend/trunk/src/javascript/jssglr/jssglr_append.js
   strategoxt-javascript-backend/trunk/src/javascript/jssglr/jssglr_prepend.js
   strategoxt-javascript-backend/trunk/src/stratego/tbl-to-jssglr.str
Modified:
   strategoxt-javascript-backend/trunk/scripts/wrap-libraries.sh
   strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/src/javascript/terms.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str

Modified: strategoxt-javascript-backend/trunk/scripts/wrap-libraries.sh
==============================================================================
--- strategoxt-javascript-backend/trunk/scripts/wrap-libraries.sh	Wed Dec 28 11:44:06 2011	(r23846)
+++ strategoxt-javascript-backend/trunk/scripts/wrap-libraries.sh	Thu Dec 29 11:36:16 2011	(r23847)
@@ -6,4 +6,7 @@
 	${bp}/../src/javascript/terms.js \
 	${bp}/../src/javascript/srts.js \
 	${bp}/../src/javascript/ssl.js \
+	${bp}/../src/javascript/jssglr/jssglr_prepend.js \
+	${bp}/../src/javascript/jssglr/generated.jssglr.js \
+	${bp}/../src/javascript/jssglr/jssglr_append.js \
 	-

Modified: strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Wed Dec 28 11:44:06 2011	(r23846)
+++ strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Thu Dec 29 11:36:16 2011	(r23847)
@@ -1,5 +1,6 @@
 StrategoJS.registerLibrary(StrategoJS.SSL);
 StrategoJS.registerLibrary(StrategoJS.SRTS);
 StrategoJS.registerLibrary(StrategoJS.StrategoLib);
+StrategoJS.registerLibrary(StrategoJS.JSSGLR);
 StrategoJS.init().main(["./program"].concat(
 typeof(process) === 'undefined' ? arguments : process.argv.slice(2)));

Added: strategoxt-javascript-backend/trunk/src/javascript/jssglr/generated.jssglr.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/javascript/jssglr/generated.jssglr.js	Thu Dec 29 11:36:16 2011	(r23847)
@@ -0,0 +1,10922 @@
+var _, P0_longLit = {l:0, m:0, h:0}, P12df_longLit = {l:4831, m:0, h:0}, Q$Object = 0, Q$String = 1, Q$JavaScriptException = 2, Q$RequestException = 3, Q$LongLibBase$LongEmul = 4, Q$UmbrellaException = 5, Q$Serializable = 6, Q$Boolean = 7, Q$CharSequence = 8, Q$Comparable = 9, Q$Integer = 10, Q$Iterable = 11, Q$Number = 12, Q$RuntimeException = 13, Q$StackTraceElement = 14, Q$Throwable = 15, Q$List = 16, Q$Map = 17, Q$Map$Entry = 18, Q$Set = 19, Q$ISimpleTerm = 20, Q$IStrategoAppl = 21, Q$IStrategoInt = 22, Q$IStrategoNamed = 23, Q$IStrategoTerm = 24, Q$AbstractParseNode = 25, Q$Action = 26, Q$ActionItem = 27, Q$Associativity = 28, Q$Goto = 29, Q$InvalidParseTableException = 30, Q$Label = 31, Q$Link = 32, Q$ParseException = 33, Q$ParseNode = 34, Q$ParseProductionNode = 35, Q$Path = 36, Q$Priority = 37, Q$Production = 38, Q$RangeList = 39, Q$Reduce = 40, Q$Shift = 41, Q$State = 42, Q$TaskCancellationException = 43, Q$BadTokenException = 44, Q$SGLRException = 45, Q$TokenExpect
 edException = 46, Q$StrategoAnnotation = 47, Q$StrategoTerm = 48;
+function makeCastMap(a){
+  var result = {};
+  for (var i = 0, c = a.length; i < c; ++i) {
+    result[a[i]] = 1;
+  }
+  return result;
+}
+
+function nullMethod(){
+}
+
+function $clone(this$static){
+  var r = {};
+  getHashCode(r);
+  var o = this$static;
+  for (var i in o) {
+    !(i in r) && (r[i] = o[i]);
+  }
+  return r;
+}
+
+function Object_0(){
+}
+
+_ = Object_0.prototype = {};
+_.equals$ = function equals(other){
+  return this === other;
+}
+;
+_.getClass$ = function getClass_0(){
+  return Ljava_lang_Object_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_0(){
+  return getHashCode(this);
+}
+;
+_.toString$ = function toString_0(){
+  return this.getClass$().typeName + '@' + toPowerOfTwoString(this.hashCode$());
+}
+;
+_.toString = function(){
+  return this.toString$();
+}
+;
+_.typeMarker$ = nullMethod;
+_.castableTypeMap$ = {};
+function $initCause(this$static, cause){
+  if (this$static.cause) {
+    throw new IllegalStateException_1("Can't overwrite cause");
+  }
+  if (cause == this$static) {
+    throw new IllegalArgumentException_1('Self-causation not permitted');
+  }
+  this$static.cause = cause;
+  return this$static;
+}
+
+function $printStackTrace(this$static){
+  var causeMessage, currentCause, msg;
+  msg = new StringBuffer_0;
+  currentCause = this$static;
+  while (currentCause) {
+    causeMessage = currentCause.getMessage();
+    currentCause != this$static && (msg.impl.string += 'Caused by: ' , msg);
+    $append_2(msg, currentCause.getClass$().typeName);
+    msg.impl.string += ': ';
+    $append_1(msg.impl, causeMessage == null?'(No exception detail)':causeMessage);
+    msg.impl.string += '\n';
+    currentCause = currentCause.getCause();
+  }
+}
+
+function $setStackTrace(stackTrace){
+  var c, copy, i;
+  copy = initDim(_3Ljava_lang_StackTraceElement_2_classLit, makeCastMap([Q$Serializable]), Q$StackTraceElement, stackTrace.length, 0);
+  for (i = 0 , c = stackTrace.length; i < c; ++i) {
+    if (!stackTrace[i]) {
+      throw new NullPointerException_0;
+    }
+    copy[i] = stackTrace[i];
+  }
+}
+
+function Throwable(){
+}
+
+_ = Throwable.prototype = new Object_0;
+_.getCause = function getCause(){
+  return this.cause;
+}
+;
+_.getClass$ = function getClass_1(){
+  return Ljava_lang_Throwable_2_classLit;
+}
+;
+_.getMessage = function getMessage(){
+  return this.detailMessage;
+}
+;
+_.toString$ = function toString_1(){
+  var className, msg;
+  className = this.getClass$().typeName;
+  msg = this.getMessage();
+  return msg != null?className + ': ' + msg:className;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Throwable]);
+_.cause = null;
+_.detailMessage = null;
+function Exception_0(message){
+  $fillInStackTrace();
+  this.detailMessage = message;
+}
+
+function Exception_1(message, cause){
+  $fillInStackTrace();
+  this.cause = cause;
+  this.detailMessage = message;
+}
+
+function Exception(){
+}
+
+_ = Exception.prototype = new Throwable;
+_.getClass$ = function getClass_2(){
+  return Ljava_lang_Exception_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Throwable]);
+function RuntimeException_0(){
+  $fillInStackTrace();
+}
+
+function RuntimeException_1(message){
+  Exception_0.call(this, message);
+}
+
+function RuntimeException_2(cause){
+  Exception_1.call(this, 'One or more exceptions caught, see full set in UmbrellaException#getCauses', cause);
+}
+
+function RuntimeException(){
+}
+
+_ = RuntimeException_1.prototype = RuntimeException_0.prototype = RuntimeException.prototype = new Exception;
+_.getClass$ = function getClass_3(){
+  return Ljava_lang_RuntimeException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function JavaScriptException_0(e){
+  $fillInStackTrace();
+  this.e = e;
+  $createStackTrace(this);
+}
+
+function getDescription(e){
+  return instanceOfJso(e)?e == null?null:e.message:e + '';
+}
+
+function getName(e){
+  return e == null?'null':instanceOfJso(e)?e == null?null:e.name:instanceOf(e, Q$String)?'String':getClass__devirtual$(e).typeName;
+}
+
+function getProperties(e){
+  return instanceOfJso(e)?$getProperties(e):'';
+}
+
+function JavaScriptException(){
+}
+
+_ = JavaScriptException_0.prototype = JavaScriptException.prototype = new RuntimeException;
+_.getClass$ = function getClass_4(){
+  return Lcom_google_gwt_core_client_JavaScriptException_2_classLit;
+}
+;
+_.getMessage = function getMessage_0(){
+  return this.message_0 == null && (this.name_0 = getName(this.e) , this.description = getDescription(this.e) , this.message_0 = '(' + this.name_0 + '): ' + this.description + getProperties(this.e) , undefined) , this.message_0;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$JavaScriptException, Q$Serializable, Q$RuntimeException, Q$Throwable]);
+_.description = null;
+_.e = null;
+_.message_0 = null;
+_.name_0 = null;
+function equals__devirtual$(this$static, other){
+  var maybeJsoInvocation;
+  return maybeJsoInvocation = this$static , isJavaObject(maybeJsoInvocation)?maybeJsoInvocation.equals$(other):maybeJsoInvocation === other;
+}
+
+function getClass__devirtual$(this$static){
+  var maybeJsoInvocation;
+  return maybeJsoInvocation = this$static , isJavaObject(maybeJsoInvocation)?maybeJsoInvocation.getClass$():Lcom_google_gwt_core_client_JavaScriptObject_2_classLit;
+}
+
+function hashCode__devirtual$(this$static){
+  var maybeJsoInvocation;
+  return maybeJsoInvocation = this$static , isJavaObject(maybeJsoInvocation)?maybeJsoInvocation.hashCode$():getHashCode(maybeJsoInvocation);
+}
+
+function $push(this$static, value){
+  this$static[this$static.length] = value;
+}
+
+function Scheduler(){
+}
+
+_ = Scheduler.prototype = new Object_0;
+_.getClass$ = function getClass_5(){
+  return Lcom_google_gwt_core_client_Scheduler_2_classLit;
+}
+;
+function apply(jsFunction, thisObj, arguments_0){
+  return jsFunction.apply(thisObj, arguments_0);
+  var __0;
+}
+
+function enter(){
+  if (entryDepth++ == 0) {
+    $flushEntryCommands(($clinit_SchedulerImpl() , INSTANCE));
+    return true;
+  }
+  return false;
+}
+
+function entry_0(jsFunction){
+  return function(){
+    try {
+      return entry0(jsFunction, this, arguments);
+    }
+     catch (e) {
+      throw e;
+    }
+  }
+  ;
+}
+
+function entry0(jsFunction, thisObj, arguments_0){
+  var initialEntry;
+  initialEntry = enter();
+  try {
+    return apply(jsFunction, thisObj, arguments_0);
+  }
+   finally {
+    initialEntry && $flushFinallyCommands(($clinit_SchedulerImpl() , INSTANCE));
+    --entryDepth;
+  }
+}
+
+function getHashCode(o){
+  return o.$H || (o.$H = ++sNextHashId);
+}
+
+var entryDepth = 0, sNextHashId = 0;
+function $clinit_SchedulerImpl(){
+  $clinit_SchedulerImpl = nullMethod;
+  INSTANCE = new SchedulerImpl_0;
+}
+
+function $flushEntryCommands(this$static){
+  var oldQueue, rescheduled;
+  if (this$static.entryCommands) {
+    rescheduled = null;
+    do {
+      oldQueue = this$static.entryCommands;
+      this$static.entryCommands = null;
+      rescheduled = runScheduledTasks(oldQueue, rescheduled);
+    }
+     while (this$static.entryCommands);
+    this$static.entryCommands = rescheduled;
+  }
+}
+
+function $flushFinallyCommands(this$static){
+  var oldQueue, rescheduled;
+  if (this$static.finallyCommands) {
+    rescheduled = null;
+    do {
+      oldQueue = this$static.finallyCommands;
+      this$static.finallyCommands = null;
+      rescheduled = runScheduledTasks(oldQueue, rescheduled);
+    }
+     while (this$static.finallyCommands);
+    this$static.finallyCommands = rescheduled;
+  }
+}
+
+function SchedulerImpl_0(){
+}
+
+function push(queue, task){
+  !queue && (queue = []);
+  $push(queue, task);
+  return queue;
+}
+
+function runScheduledTasks(tasks, rescheduled){
+  var $e0, i, j, t;
+  for (i = 0 , j = tasks.length; i < j; ++i) {
+    t = tasks[i];
+    try {
+      t[1]?t[0].nullMethod() && (rescheduled = push(rescheduled, t)):t[0].nullMethod();
+    }
+     catch ($e0) {
+      $e0 = caught($e0);
+      if (!instanceOf($e0, Q$RuntimeException))
+        throw $e0;
+    }
+  }
+  return rescheduled;
+}
+
+function SchedulerImpl(){
+}
+
+_ = SchedulerImpl_0.prototype = SchedulerImpl.prototype = new Scheduler;
+_.getClass$ = function getClass_6(){
+  return Lcom_google_gwt_core_client_impl_SchedulerImpl_2_classLit;
+}
+;
+_.entryCommands = null;
+_.finallyCommands = null;
+var INSTANCE;
+function extractNameFromToString(fnToString){
+  var index, start, toReturn;
+  toReturn = '';
+  fnToString = $trim(fnToString);
+  index = fnToString.indexOf('(');
+  if (index != -1) {
+    start = fnToString.indexOf('function') == 0?8:0;
+    toReturn = $trim(fnToString.substr(start, index - start));
+  }
+  return toReturn.length > 0?toReturn:'anonymous';
+}
+
+function splice(arr, length_0){
+  arr.length >= length_0 && arr.splice(0, length_0);
+  return arr;
+}
+
+function $createStackTrace(e){
+  var i, j, stack, stackTrace;
+  stack = $inferFrom(instanceOfJso(e.e)?e.e:null);
+  stackTrace = initDim(_3Ljava_lang_StackTraceElement_2_classLit, makeCastMap([Q$Serializable]), Q$StackTraceElement, stack.length, 0);
+  for (i = 0 , j = stackTrace.length; i < j; ++i) {
+    stackTrace[i] = new StackTraceElement_0(stack[i]);
+  }
+  $setStackTrace(stackTrace);
+}
+
+function $fillInStackTrace(){
+  var i, j, stack, stackTrace;
+  stack = splice($inferFrom($makeException()), 2);
+  stackTrace = initDim(_3Ljava_lang_StackTraceElement_2_classLit, makeCastMap([Q$Serializable]), Q$StackTraceElement, stack.length, 0);
+  for (i = 0 , j = stackTrace.length; i < j; ++i) {
+    stackTrace[i] = new StackTraceElement_0(stack[i]);
+  }
+  $setStackTrace(stackTrace);
+}
+
+function $getProperties(e){
+  var result = '';
+  try {
+    for (var prop in e) {
+      if (prop != 'name' && prop != 'message' && prop != 'toString') {
+        try {
+          result += '\n ' + prop + ': ' + e[prop];
+        }
+         catch (ignored) {
+        }
+      }
+    }
+  }
+   catch (ignored) {
+  }
+  return result;
+}
+
+function $makeException(){
+  try {
+    null.a();
+  }
+   catch (e) {
+    return e;
+  }
+}
+
+function $inferFrom(e){
+  var i, j, stack;
+  stack = e && e.stack?e.stack.split('\n'):[];
+  for (i = 0 , j = stack.length; i < j; ++i) {
+    stack[i] = extractNameFromToString(stack[i]);
+  }
+  return stack;
+}
+
+function StringBufferImpl(){
+}
+
+_ = StringBufferImpl.prototype = new Object_0;
+_.getClass$ = function getClass_7(){
+  return Lcom_google_gwt_core_client_impl_StringBufferImpl_2_classLit;
+}
+;
+function $append(this$static, x){
+  this$static.string += x;
+}
+
+function $append_0(this$static, x){
+  this$static.string += x;
+}
+
+function $append_1(this$static, x){
+  this$static.string += x;
+}
+
+function $appendNonNull(this$static, x){
+  this$static.string += x;
+}
+
+function $replace(this$static, start, end){
+  this$static.string = $substring_0(this$static.string, 0, start) + ']' + $substring(this$static.string, end);
+}
+
+function StringBufferImplAppend_0(){
+}
+
+function StringBufferImplAppend(){
+}
+
+_ = StringBufferImplAppend_0.prototype = StringBufferImplAppend.prototype = new StringBufferImpl;
+_.getClass$ = function getClass_8(){
+  return Lcom_google_gwt_core_client_impl_StringBufferImplAppend_2_classLit;
+}
+;
+_.string = '';
+function Event_0(){
+}
+
+_ = Event_0.prototype = new Object_0;
+_.getClass$ = function getClass_9(){
+  return Lcom_google_web_bindery_event_shared_Event_2_classLit;
+}
+;
+_.toString$ = function toString_2(){
+  return 'An event type';
+}
+;
+_.source = null;
+function $overrideSource(this$static, source){
+  this$static.source = source;
+}
+
+function GwtEvent(){
+}
+
+_ = GwtEvent.prototype = new Event_0;
+_.getClass$ = function getClass_10(){
+  return Lcom_google_gwt_event_shared_GwtEvent_2_classLit;
+}
+;
+_.dead = false;
+function CloseEvent_0(){
+}
+
+function fire(source){
+  var event_0;
+  if (TYPE) {
+    event_0 = new CloseEvent_0;
+    $fireEvent(source, event_0);
+  }
+}
+
+function CloseEvent(){
+}
+
+_ = CloseEvent_0.prototype = CloseEvent.prototype = new GwtEvent;
+_.dispatch = function dispatch(handler){
+  $onClose();
+}
+;
+_.getAssociatedType = function getAssociatedType(){
+  return TYPE;
+}
+;
+_.getClass$ = function getClass_11(){
+  return Lcom_google_gwt_event_logical_shared_CloseEvent_2_classLit;
+}
+;
+var TYPE = null;
+function Event$Type(){
+}
+
+_ = Event$Type.prototype = new Object_0;
+_.getClass$ = function getClass_12(){
+  return Lcom_google_web_bindery_event_shared_Event$Type_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_1(){
+  return this.index_0;
+}
+;
+_.toString$ = function toString_3(){
+  return 'Event type';
+}
+;
+_.index_0 = 0;
+var nextHashCode = 0;
+function GwtEvent$Type_0(){
+  this.index_0 = ++nextHashCode;
+}
+
+function GwtEvent$Type(){
+}
+
+_ = GwtEvent$Type_0.prototype = GwtEvent$Type.prototype = new Event$Type;
+_.getClass$ = function getClass_13(){
+  return Lcom_google_gwt_event_shared_GwtEvent$Type_2_classLit;
+}
+;
+function $addHandler(this$static, type, handler){
+  return new LegacyHandlerWrapper_0($doAdd(this$static.eventBus, type, handler));
+}
+
+function $fireEvent(this$static, event_0){
+  var $e0, e, oldSource;
+  !event_0.dead || (event_0.dead = false , event_0.source = null);
+  oldSource = event_0.source;
+  $overrideSource(event_0, this$static.source);
+  try {
+    $doFire(this$static.eventBus, event_0);
+  }
+   catch ($e0) {
+    $e0 = caught($e0);
+    if (instanceOf($e0, Q$UmbrellaException)) {
+      e = $e0;
+      throw new UmbrellaException_2(e.causes);
+    }
+     else 
+      throw $e0;
+  }
+   finally {
+    oldSource == null?(event_0.dead = true , event_0.source = null):(event_0.source = oldSource);
+  }
+}
+
+function HandlerManager(){
+}
+
+_ = HandlerManager.prototype = new Object_0;
+_.getClass$ = function getClass_14(){
+  return Lcom_google_gwt_event_shared_HandlerManager_2_classLit;
+}
+;
+_.eventBus = null;
+_.source = null;
+function EventBus(){
+}
+
+_ = EventBus.prototype = new Object_0;
+_.getClass$ = function getClass_15(){
+  return Lcom_google_web_bindery_event_shared_EventBus_2_classLit;
+}
+;
+function $defer(this$static, command){
+  !this$static.deferredDeltas && (this$static.deferredDeltas = new ArrayList_0);
+  $add(this$static.deferredDeltas, command);
+}
+
+function $doAdd(this$static, type, handler){
+  if (!type) {
+    throw new NullPointerException_1('Cannot add a handler with a null type');
+  }
+  if (!handler) {
+    throw new NullPointerException_1('Cannot add a null handler');
+  }
+  this$static.firingDepth > 0?$defer(this$static, new SimpleEventBus$2_0(this$static, type, handler)):$doAddNow(this$static, type, null, handler);
+  return new SimpleEventBus$1_0;
+}
+
+function $doAddNow(this$static, type, source, handler){
+  var l_0;
+  l_0 = $ensureHandlerList(this$static, type, source);
+  l_0.add(handler);
+}
+
+function $doFire(this$static, event_0){
+  var $e0, causes, e, handler, handlers, it;
+  if (!event_0) {
+    throw new NullPointerException_1('Cannot fire null event');
+  }
+  try {
+    ++this$static.firingDepth;
+    handlers = $getDispatchList(this$static, event_0.getAssociatedType());
+    causes = null;
+    it = this$static.isReverseOrder?handlers.listIterator_0(handlers.size_0()):handlers.listIterator();
+    while (this$static.isReverseOrder?it.i > 0:it.i < it.this$0_0.size_0()) {
+      handler = this$static.isReverseOrder?$previous(it):$next(it);
+      try {
+        event_0.dispatch(handler);
+      }
+       catch ($e0) {
+        $e0 = caught($e0);
+        if (instanceOf($e0, Q$Throwable)) {
+          e = $e0;
+          !causes && (causes = new HashSet_0);
+          $add_1(causes, e);
+        }
+         else 
+          throw $e0;
+      }
+    }
+    if (causes) {
+      throw new UmbrellaException_1(causes);
+    }
+  }
+   finally {
+    --this$static.firingDepth;
+    this$static.firingDepth == 0 && $handleQueuedAddsAndRemoves(this$static);
+  }
+}
+
+function $ensureHandlerList(this$static, type, source){
+  var handlers, sourceMap;
+  sourceMap = this$static.map.get(type);
+  if (!sourceMap) {
+    sourceMap = new HashMap_0;
+    this$static.map.put(type, sourceMap);
+  }
+  handlers = sourceMap.get(source);
+  if (!handlers) {
+    handlers = new ArrayList_0;
+    sourceMap.put(source, handlers);
+  }
+  return handlers;
+}
+
+function $getDispatchList(this$static, type){
+  var directHandlers;
+  directHandlers = $getHandlerList(this$static, type);
+  return directHandlers;
+}
+
+function $getHandlerList(this$static, type){
+  var handlers, sourceMap;
+  sourceMap = this$static.map.get(type);
+  if (!sourceMap) {
+    return $clinit_Collections() , $clinit_Collections() , EMPTY_LIST;
+  }
+  handlers = sourceMap.get(null);
+  if (!handlers) {
+    return $clinit_Collections() , $clinit_Collections() , EMPTY_LIST;
+  }
+  return handlers;
+}
+
+function $handleQueuedAddsAndRemoves(this$static){
+  var c, c$iterator;
+  if (this$static.deferredDeltas) {
+    try {
+      for (c$iterator = new AbstractList$IteratorImpl_0(this$static.deferredDeltas); c$iterator.i < c$iterator.this$0_0.size_0();) {
+        c = $next(c$iterator);
+        $doAddNow(c.this$0, c.val$type, c.val$source, c.val$handler);
+      }
+    }
+     finally {
+      this$static.deferredDeltas = null;
+    }
+  }
+}
+
+function SimpleEventBus(){
+}
+
+_ = SimpleEventBus.prototype = new EventBus;
+_.getClass$ = function getClass_16(){
+  return Lcom_google_web_bindery_event_shared_SimpleEventBus_2_classLit;
+}
+;
+_.deferredDeltas = null;
+_.firingDepth = 0;
+_.isReverseOrder = false;
+function HandlerManager$Bus_0(){
+  this.map = new HashMap_0;
+  this.isReverseOrder = false;
+}
+
+function HandlerManager$Bus(){
+}
+
+_ = HandlerManager$Bus_0.prototype = HandlerManager$Bus.prototype = new SimpleEventBus;
+_.getClass$ = function getClass_17(){
+  return Lcom_google_gwt_event_shared_HandlerManager$Bus_2_classLit;
+}
+;
+function LegacyHandlerWrapper_0(){
+}
+
+function LegacyHandlerWrapper(){
+}
+
+_ = LegacyHandlerWrapper_0.prototype = LegacyHandlerWrapper.prototype = new Object_0;
+_.getClass$ = function getClass_18(){
+  return Lcom_google_gwt_event_shared_LegacyHandlerWrapper_2_classLit;
+}
+;
+function UmbrellaException_1(causes){
+  RuntimeException_2.call(this, causes.size_0() == 0?null:causes.toArray(initDim(_3Ljava_lang_Throwable_2_classLit, makeCastMap([Q$Serializable]), Q$Throwable, 0, 0))[0]);
+  this.causes = causes;
+}
+
+function UmbrellaException_0(){
+}
+
+_ = UmbrellaException_1.prototype = UmbrellaException_0.prototype = new RuntimeException;
+_.getClass$ = function getClass_19(){
+  return Lcom_google_web_bindery_event_shared_UmbrellaException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$UmbrellaException, Q$Serializable, Q$RuntimeException, Q$Throwable]);
+_.causes = null;
+function UmbrellaException_2(causes){
+  UmbrellaException_1.call(this, causes);
+}
+
+function UmbrellaException(){
+}
+
+_ = UmbrellaException_2.prototype = UmbrellaException.prototype = new UmbrellaException_0;
+_.getClass$ = function getClass_20(){
+  return Lcom_google_gwt_event_shared_UmbrellaException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$UmbrellaException, Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function $cancel(this$static){
+  var xmlHttp;
+  if (this$static.xmlHttpRequest) {
+    xmlHttp = this$static.xmlHttpRequest;
+    this$static.xmlHttpRequest = null;
+    $clearOnReadyStateChange(xmlHttp);
+    xmlHttp.abort();
+    !!this$static.timer && $cancel_0(this$static.timer);
+  }
+}
+
+function $fireOnResponseReceived(this$static, callback){
+  var errorMsg, exception, response, xhr;
+  if (!this$static.xmlHttpRequest) {
+    return;
+  }
+  !!this$static.timer && $cancel_0(this$static.timer);
+  xhr = this$static.xmlHttpRequest;
+  this$static.xmlHttpRequest = null;
+  errorMsg = $getBrowserSpecificFailure(xhr);
+  if (errorMsg != null) {
+    exception = new RuntimeException_1(errorMsg);
+    callback.this$0.tableLoaded = true;
+    logToConsole("Could not load parse table at: '" + callback.val$parseTableURL + "' due to: " + exception.getMessage());
+  }
+   else {
+    response = new Request$1_0(xhr);
+    $onResponseReceived(callback, response);
+  }
+}
+
+function $fireOnTimeout(this$static, callback){
+  if (!this$static.xmlHttpRequest) {
+    return;
+  }
+  $cancel(this$static);
+  $onError(callback, new RequestTimeoutException_0(this$static.timeoutMillis));
+}
+
+function $getBrowserSpecificFailure(xhr){
+  try {
+    if (xhr.status === undefined) {
+      return 'XmlHttpRequest.status == undefined, please see Safari bug http://bugs.webkit.org/show_bug.cgi?id=3810 for more details';
+    }
+    return null;
+  }
+   catch (e) {
+    return 'Unable to read XmlHttpRequest.status; likely causes are a networking error or bad cross-domain request. Please see https://bugzilla.mozilla.org/show_bug.cgi?id=238559 for more details';
+  }
+}
+
+function Request_0(xmlHttpRequest, timeoutMillis, callback){
+  if (!xmlHttpRequest) {
+    throw new NullPointerException_0;
+  }
+  if (!callback) {
+    throw new NullPointerException_0;
+  }
+  if (timeoutMillis < 0) {
+    throw new IllegalArgumentException_0;
+  }
+  this.timeoutMillis = timeoutMillis;
+  this.xmlHttpRequest = xmlHttpRequest;
+  if (timeoutMillis > 0) {
+    this.timer = new Request$3_0(this, callback);
+    $schedule(this.timer, timeoutMillis);
+  }
+   else {
+    this.timer = null;
+  }
+}
+
+function Request(){
+}
+
+_ = Request_0.prototype = Request.prototype = new Object_0;
+_.getClass$ = function getClass_21(){
+  return Lcom_google_gwt_http_client_Request_2_classLit;
+}
+;
+_.timeoutMillis = 0;
+_.timer = null;
+_.xmlHttpRequest = null;
+function Response(){
+}
+
+_ = Response.prototype = new Object_0;
+_.getClass$ = function getClass_22(){
+  return Lcom_google_gwt_http_client_Response_2_classLit;
+}
+;
+function Request$1_0(val$xmlHttpRequest){
+  this.val$xmlHttpRequest = val$xmlHttpRequest;
+}
+
+function Request$1(){
+}
+
+_ = Request$1_0.prototype = Request$1.prototype = new Response;
+_.getClass$ = function getClass_23(){
+  return Lcom_google_gwt_http_client_Request$1_2_classLit;
+}
+;
+_.val$xmlHttpRequest = null;
+function $clinit_Timer(){
+  $clinit_Timer = nullMethod;
+  timers = new ArrayList_0;
+  addCloseHandler(new Timer$1_0);
+}
+
+function $cancel_0(this$static){
+  this$static.isRepeating?clearInterval_0(this$static.timerId):clearTimeout_0(this$static.timerId);
+  $remove_0(timers, this$static);
+}
+
+function $schedule(this$static, delayMillis){
+  if (delayMillis <= 0) {
+    throw new IllegalArgumentException_1('must be positive');
+  }
+  this$static.isRepeating?clearInterval_0(this$static.timerId):clearTimeout_0(this$static.timerId);
+  $remove_0(timers, this$static);
+  this$static.isRepeating = false;
+  this$static.timerId = createTimeout(this$static, delayMillis);
+  $add(timers, this$static);
+}
+
+function clearInterval_0(id){
+  $wnd.clearInterval(id);
+}
+
+function clearTimeout_0(id){
+  $wnd.clearTimeout(id);
+}
+
+function createTimeout(timer, delay){
+  return $wnd.setTimeout($entry(function(){
+    timer.fire();
+  }
+  ), delay);
+}
+
+function Timer(){
+}
+
+_ = Timer.prototype = new Object_0;
+_.fire = function fire_0(){
+  this.isRepeating || $remove_0(timers, this);
+  $fireOnTimeout(this.this$0, this.val$callback);
+}
+;
+_.getClass$ = function getClass_24(){
+  return Lcom_google_gwt_user_client_Timer_2_classLit;
+}
+;
+_.isRepeating = false;
+_.timerId = 0;
+var timers;
+function Request$3_0(this$0, val$callback){
+  $clinit_Timer();
+  this.this$0 = this$0;
+  this.val$callback = val$callback;
+}
+
+function Request$3(){
+}
+
+_ = Request$3_0.prototype = Request$3.prototype = new Timer;
+_.getClass$ = function getClass_25(){
+  return Lcom_google_gwt_http_client_Request$3_2_classLit;
+}
+;
+_.this$0 = null;
+_.val$callback = null;
+function $clinit_RequestBuilder(){
+  $clinit_RequestBuilder = nullMethod;
+  new RequestBuilder$Method_0('DELETE');
+  GET = new RequestBuilder$Method_0('GET');
+  new RequestBuilder$Method_0('HEAD');
+  new RequestBuilder$Method_0('POST');
+  new RequestBuilder$Method_0('PUT');
+}
+
+function $doSend(this$static, callback){
+  var $e0, e, request, requestPermissionException, xmlHttpRequest;
+  xmlHttpRequest = create_0();
+  try {
+    $open(xmlHttpRequest, this$static.httpMethod, this$static.url);
+  }
+   catch ($e0) {
+    $e0 = caught($e0);
+    if (instanceOf($e0, Q$JavaScriptException)) {
+      e = $e0;
+      requestPermissionException = new RequestPermissionException_0(this$static.url);
+      $initCause(requestPermissionException, new RequestException_0(e.getMessage()));
+      throw requestPermissionException;
+    }
+     else 
+      throw $e0;
+  }
+  xmlHttpRequest.setRequestHeader('Content-Type', 'text/plain; charset=utf-8');
+  request = new Request_0(xmlHttpRequest, this$static.timeoutMillis, callback);
+  $setOnReadyStateChange(xmlHttpRequest, new RequestBuilder$1_0(request, callback));
+  try {
+    xmlHttpRequest.send(null);
+  }
+   catch ($e0) {
+    $e0 = caught($e0);
+    if (instanceOf($e0, Q$JavaScriptException)) {
+      e = $e0;
+      throw new RequestException_0(e.getMessage());
+    }
+     else 
+      throw $e0;
+  }
+  return request;
+}
+
+function $sendRequest(this$static, callback){
+  throwIfNull('callback', callback);
+  return $doSend(this$static, callback);
+}
+
+function RequestBuilder_0(httpMethod, url){
+  $clinit_RequestBuilder();
+  RequestBuilder_1.call(this, !httpMethod?null:httpMethod.name_0, url);
+}
+
+function RequestBuilder_1(httpMethod, url){
+  throwIfEmptyOrNull('httpMethod', httpMethod);
+  throwIfEmptyOrNull('url', url);
+  this.httpMethod = httpMethod;
+  this.url = url;
+}
+
+function RequestBuilder(){
+}
+
+_ = RequestBuilder_0.prototype = RequestBuilder.prototype = new Object_0;
+_.getClass$ = function getClass_26(){
+  return Lcom_google_gwt_http_client_RequestBuilder_2_classLit;
+}
+;
+_.httpMethod = null;
+_.timeoutMillis = 0;
+_.url = null;
+var GET;
+function RequestBuilder$1_0(val$request, val$callback){
+  this.val$request = val$request;
+  this.val$callback = val$callback;
+}
+
+function RequestBuilder$1(){
+}
+
+_ = RequestBuilder$1_0.prototype = RequestBuilder$1.prototype = new Object_0;
+_.getClass$ = function getClass_27(){
+  return Lcom_google_gwt_http_client_RequestBuilder$1_2_classLit;
+}
+;
+_.onReadyStateChange = function onReadyStateChange(xhr){
+  if (xhr.readyState == 4) {
+    $clearOnReadyStateChange(xhr);
+    $fireOnResponseReceived(this.val$request, this.val$callback);
+  }
+}
+;
+_.val$callback = null;
+_.val$request = null;
+function RequestBuilder$Method_0(name_0){
+  this.name_0 = name_0;
+}
+
+function RequestBuilder$Method(){
+}
+
+_ = RequestBuilder$Method_0.prototype = RequestBuilder$Method.prototype = new Object_0;
+_.getClass$ = function getClass_28(){
+  return Lcom_google_gwt_http_client_RequestBuilder$Method_2_classLit;
+}
+;
+_.toString$ = function toString_4(){
+  return this.name_0;
+}
+;
+_.name_0 = null;
+function RequestException_0(message){
+  Exception_0.call(this, message);
+}
+
+function RequestException(){
+}
+
+_ = RequestException_0.prototype = RequestException.prototype = new Exception;
+_.getClass$ = function getClass_29(){
+  return Lcom_google_gwt_http_client_RequestException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$RequestException, Q$Serializable, Q$Throwable]);
+function RequestPermissionException_0(url){
+  $fillInStackTrace();
+  this.detailMessage = 'The URL ' + url + ' is invalid or violates the same-origin security restriction';
+}
+
+function RequestPermissionException(){
+}
+
+_ = RequestPermissionException_0.prototype = RequestPermissionException.prototype = new RequestException;
+_.getClass$ = function getClass_30(){
+  return Lcom_google_gwt_http_client_RequestPermissionException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$RequestException, Q$Serializable, Q$Throwable]);
+function RequestTimeoutException_0(timeoutMillis){
+  $fillInStackTrace();
+  this.detailMessage = 'A request timeout has expired after ' + timeoutMillis + ' ms';
+}
+
+function RequestTimeoutException(){
+}
+
+_ = RequestTimeoutException_0.prototype = RequestTimeoutException.prototype = new RequestException;
+_.getClass$ = function getClass_31(){
+  return Lcom_google_gwt_http_client_RequestTimeoutException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$RequestException, Q$Serializable, Q$Throwable]);
+function throwIfEmptyOrNull(name_0, value){
+  throwIfNull(name_0, value);
+  if (0 == $trim(value).length) {
+    throw new IllegalArgumentException_1(name_0 + ' cannot be empty');
+  }
+}
+
+function throwIfNull(name_0, value){
+  if (null == value) {
+    throw new NullPointerException_1(name_0 + ' cannot be null');
+  }
+}
+
+function Array_1(){
+}
+
+function cloneSubrange(array, fromIndex, toIndex){
+  var a, result;
+  a = array;
+  result = a.slice(fromIndex, toIndex);
+  initValues(a.arrayClass$, a.castableTypeMap$, a.queryId$, result);
+  return result;
+}
+
+function createFrom(array, length_0){
+  var a, result;
+  a = array;
+  result = createFromSeed(0, length_0);
+  initValues(a.arrayClass$, a.castableTypeMap$, a.queryId$, result);
+  return result;
+}
+
+function createFromSeed(seedType, length_0){
+  var array = new Array(length_0);
+  if (seedType == 3) {
+    for (var i = 0; i < length_0; ++i) {
+      var value = new Object;
+      value.l = value.m = value.h = 0;
+      array[i] = value;
+    }
+  }
+   else if (seedType > 0) {
+    var value = [null, 0, false][seedType];
+    for (var i = 0; i < length_0; ++i) {
+      array[i] = value;
+    }
+  }
+  return array;
+}
+
+function initDim(arrayClass, castableTypeMap, queryId, length_0, seedType){
+  var result;
+  result = createFromSeed(seedType, length_0);
+  initValues(arrayClass, castableTypeMap, queryId, result);
+  return result;
+}
+
+function initValues(arrayClass, castableTypeMap, queryId, array){
+  $clinit_Array$ExpandoWrapper();
+  wrapArray(array, expandoNames_0, expandoValues_0);
+  array.arrayClass$ = arrayClass;
+  array.castableTypeMap$ = castableTypeMap;
+  array.queryId$ = queryId;
+  return array;
+}
+
+function setCheck(array, index, value){
+  if (value != null) {
+    if (array.queryId$ > 0 && !canCastUnsafe(value, array.queryId$)) {
+      throw new ArrayStoreException_0;
+    }
+    if (array.queryId$ < 0 && (value.typeMarker$ == nullMethod || canCast(value, 1))) {
+      throw new ArrayStoreException_0;
+    }
+  }
+  return array[index] = value;
+}
+
+function Array_0(){
+}
+
+_ = Array_1.prototype = Array_0.prototype = new Object_0;
+_.getClass$ = function getClass_32(){
+  return this.arrayClass$;
+}
+;
+_.arrayClass$ = null;
+_.queryId$ = 0;
+function $clinit_Array$ExpandoWrapper(){
+  $clinit_Array$ExpandoWrapper = nullMethod;
+  expandoNames_0 = [];
+  expandoValues_0 = [];
+  initExpandos(new Array_1, expandoNames_0, expandoValues_0);
+}
+
+function initExpandos(protoType, expandoNames, expandoValues){
+  var i = 0, value;
+  for (var name_0 in protoType) {
+    if (value = protoType[name_0]) {
+      expandoNames[i] = name_0;
+      expandoValues[i] = value;
+      ++i;
+    }
+  }
+}
+
+function wrapArray(array, expandoNames, expandoValues){
+  $clinit_Array$ExpandoWrapper();
+  for (var i = 0, c = expandoNames.length; i < c; ++i) {
+    array[expandoNames[i]] = expandoValues[i];
+  }
+}
+
+var expandoNames_0, expandoValues_0;
+function canCast(src, dstId){
+  return src.castableTypeMap$ && !!src.castableTypeMap$[dstId];
+}
+
+function canCastUnsafe(src, dstId){
+  return src.castableTypeMap$ && src.castableTypeMap$[dstId];
+}
+
+function charToString(x){
+  return String.fromCharCode(x);
+}
+
+function instanceOf(src, dstId){
+  return src != null && canCast(src, dstId);
+}
+
+function instanceOfJso(src){
+  return src != null && src.typeMarker$ != nullMethod && !canCast(src, 1);
+}
+
+function isJavaObject(src){
+  return src.typeMarker$ == nullMethod || canCast(src, 1);
+}
+
+function maskUndefined(src){
+  return src == null?null:src;
+}
+
+function round_int(x){
+  return ~~Math.max(Math.min(x, 2147483647), -2147483648);
+}
+
+function init(){
+  var runtimeValue;
+  !!$stats && onModuleStart('com.google.gwt.user.client.UserAgentAsserter');
+  runtimeValue = $getRuntimeValue();
+  $equals('gecko1_8', runtimeValue) || ($wnd.alert('ERROR: Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (gecko1_8) does not match the runtime user.agent value (' + runtimeValue + '). Expect more errors.\n') , undefined);
+  !!$stats && onModuleStart('com.google.gwt.user.client.DocumentModeAsserter');
+  $onModuleLoad();
+  !!$stats && onModuleStart('org.spoofax.jssglr.client.Worker');
+  $onModuleLoad_0(new Worker_0);
+}
+
+function caught(e){
+  if (instanceOf(e, Q$Throwable)) {
+    return e;
+  }
+  return new JavaScriptException_0(e);
+}
+
+function create(value){
+  var a0, a1, a2;
+  a0 = value & 4194303;
+  a1 = value >> 22 & 4194303;
+  a2 = value < 0?1048575:0;
+  return create0(a0, a1, a2);
+}
+
+function create0(l_0, m_0, h_0){
+  return _ = new LongLibBase$LongEmul_0 , _.l = l_0 , _.m = m_0 , _.h = h_0 , _;
+}
+
+function add(a, b){
+  var sum0, sum1, sum2;
+  sum0 = a.l + b.l;
+  sum1 = a.m + b.m + (sum0 >> 22);
+  sum2 = a.h + b.h + (sum1 >> 22);
+  return create0(sum0 & 4194303, sum1 & 4194303, sum2 & 1048575);
+}
+
+function fromDouble(value){
+  var a0, a1, a2, negative, result, neg0, neg1, neg2;
+  if (isNaN(value)) {
+    return $clinit_LongLib$Const() , ZERO;
+  }
+  if (value < -9223372036854775808) {
+    return $clinit_LongLib$Const() , MIN_VALUE;
+  }
+  if (value >= 9223372036854775807) {
+    return $clinit_LongLib$Const() , MAX_VALUE;
+  }
+  negative = false;
+  if (value < 0) {
+    negative = true;
+    value = -value;
+  }
+  a2 = 0;
+  if (value >= 17592186044416) {
+    a2 = round_int(value / 17592186044416);
+    value -= a2 * 17592186044416;
+  }
+  a1 = 0;
+  if (value >= 4194304) {
+    a1 = round_int(value / 4194304);
+    value -= a1 * 4194304;
+  }
+  a0 = round_int(value);
+  result = create0(a0, a1, a2);
+  negative && (neg0 = ~result.l + 1 & 4194303 , neg1 = ~result.m + (neg0 == 0?1:0) & 4194303 , neg2 = ~result.h + (neg0 == 0 && neg1 == 0?1:0) & 1048575 , result.l = neg0 , result.m = neg1 , result.h = neg2 , undefined);
+  return result;
+}
+
+function fromInt(value){
+  var rebase, result;
+  if (value > -129 && value < 128) {
+    rebase = value + 128;
+    boxedValues == null && (boxedValues = initDim(_3Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit, makeCastMap([Q$Serializable]), Q$LongLibBase$LongEmul, 256, 0));
+    result = boxedValues[rebase];
+    !result && (result = boxedValues[rebase] = create(value));
+    return result;
+  }
+  return create(value);
+}
+
+function gt(a, b){
+  var signa, signb;
+  signa = a.h >> 19;
+  signb = b.h >> 19;
+  return signa == 0?signb != 0 || a.h > b.h || a.h == b.h && a.m > b.m || a.h == b.h && a.m == b.m && a.l > b.l:!(signb == 0 || a.h < b.h || a.h == b.h && a.m < b.m || a.h == b.h && a.m == b.m && a.l <= b.l);
+}
+
+function lte(a, b){
+  return !gt(a, b);
+}
+
+function mul(a, b){
+  var a0, a1, a2, a3, a4, b0, b1, b2, b3, b4, c0, c00, c01, c1, c10, c11, c12, c13, c2, c22, c23, c24, p0, p1, p2, p3, p4;
+  a0 = a.l & 8191;
+  a1 = a.l >> 13 | (a.m & 15) << 9;
+  a2 = a.m >> 4 & 8191;
+  a3 = a.m >> 17 | (a.h & 255) << 5;
+  a4 = (a.h & 1048320) >> 8;
+  b0 = b.l & 8191;
+  b1 = b.l >> 13 | (b.m & 15) << 9;
+  b2 = b.m >> 4 & 8191;
+  b3 = b.m >> 17 | (b.h & 255) << 5;
+  b4 = (b.h & 1048320) >> 8;
+  p0 = a0 * b0;
+  p1 = a1 * b0;
+  p2 = a2 * b0;
+  p3 = a3 * b0;
+  p4 = a4 * b0;
+  if (b1 != 0) {
+    p1 += a0 * b1;
+    p2 += a1 * b1;
+    p3 += a2 * b1;
+    p4 += a3 * b1;
+  }
+  if (b2 != 0) {
+    p2 += a0 * b2;
+    p3 += a1 * b2;
+    p4 += a2 * b2;
+  }
+  if (b3 != 0) {
+    p3 += a0 * b3;
+    p4 += a1 * b3;
+  }
+  b4 != 0 && (p4 += a0 * b4);
+  c00 = p0 & 4194303;
+  c01 = (p1 & 511) << 13;
+  c0 = c00 + c01;
+  c10 = p0 >> 22;
+  c11 = p1 >> 9;
+  c12 = (p2 & 262143) << 4;
+  c13 = (p3 & 31) << 17;
+  c1 = c10 + c11 + c12 + c13;
+  c22 = p2 >> 18;
+  c23 = p3 >> 5;
+  c24 = (p4 & 4095) << 8;
+  c2 = c22 + c23 + c24;
+  c1 += c0 >> 22;
+  c0 &= 4194303;
+  c2 += c1 >> 22;
+  c1 &= 4194303;
+  c2 &= 1048575;
+  return create0(c0, c1, c2);
+}
+
+function shr(a, n){
+  var a2, negative, res0, res1, res2;
+  n &= 63;
+  a2 = a.h;
+  negative = (a2 & 524288) != 0;
+  negative && (a2 |= -1048576);
+  if (n < 22) {
+    res2 = a2 >> n;
+    res1 = a.m >> n | a2 << 22 - n;
+    res0 = a.l >> n | a.m << 22 - n;
+  }
+   else if (n < 44) {
+    res2 = negative?1048575:0;
+    res1 = a2 >> n - 22;
+    res0 = a.m >> n - 22 | a2 << 44 - n;
+  }
+   else {
+    res2 = negative?1048575:0;
+    res1 = negative?4194303:0;
+    res0 = a2 >> n - 44;
+  }
+  return create0(res0 & 4194303, res1 & 4194303, res2 & 1048575);
+}
+
+function sub(a, b){
+  var sum0, sum1, sum2;
+  sum0 = a.l - b.l;
+  sum1 = a.m - b.m + (sum0 >> 22);
+  sum2 = a.h - b.h + (sum1 >> 22);
+  return create0(sum0 & 4194303, sum1 & 4194303, sum2 & 1048575);
+}
+
+function toInt(a){
+  return a.l | a.m << 22;
+}
+
+var boxedValues = null;
+function $clinit_LongLib$Const(){
+  $clinit_LongLib$Const = nullMethod;
+  MAX_VALUE = create0(4194303, 4194303, 524287);
+  MIN_VALUE = create0(0, 0, 524288);
+  fromInt(1);
+  fromInt(2);
+  ZERO = fromInt(0);
+}
+
+var MAX_VALUE, MIN_VALUE, ZERO;
+function LongLibBase$LongEmul_0(){
+}
+
+function LongLibBase$LongEmul(){
+}
+
+_ = LongLibBase$LongEmul_0.prototype = LongLibBase$LongEmul.prototype = new Object_0;
+_.getClass$ = function getClass_33(){
+  return Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$LongLibBase$LongEmul]);
+function onModuleStart(mainClassName){
+  return $stats({moduleName:$moduleName, sessionId:$sessionId, subSystem:'startup', evtGroup:'moduleStartup', millis:(new Date).getTime(), type:'onModuleLoadStart', className:mainClassName});
+}
+
+function $onModuleLoad(){
+  var allowedModes, currentMode, i;
+  currentMode = $doc.compatMode;
+  allowedModes = initValues(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable]), Q$String, ['CSS1Compat']);
+  for (i = 0; i < allowedModes.length; ++i) {
+    if ($equals(allowedModes[i], currentMode)) {
+      return;
+    }
+  }
+  allowedModes.length == 1 && $equals('CSS1Compat', allowedModes[0]) && $equals('BackCompat', currentMode)?"GWT no longer supports Quirks Mode (document.compatMode=' BackCompat').<br>Make sure your application's host HTML page has a Standards Mode (document.compatMode=' CSS1Compat') doctype,<br>e.g. by using &lt;!doctype html&gt; at the start of your application's HTML page.<br><br>To continue using this unsupported rendering mode and risk layout problems, suppress this message by adding<br>the following line to your*.gwt.xml module file:<br>&nbsp;&nbsp;&lt;extend-configuration-property name=\"document.compatMode\" value=\"" + currentMode + '"/&gt;':"Your *.gwt.xml module configuration prohibits the use of the current doucment rendering mode (document.compatMode=' " + currentMode + "').<br>Modify your application's host HTML page doctype, or update your custom 'document.compatMode' configuration property settings.";
+}
+
+function $onClose(){
+  while (($clinit_Timer() , timers).size > 0) {
+    $cancel_0($get(timers, 0));
+  }
+}
+
+function Timer$1_0(){
+}
+
+function Timer$1(){
+}
+
+_ = Timer$1_0.prototype = Timer$1.prototype = new Object_0;
+_.getClass$ = function getClass_34(){
+  return Lcom_google_gwt_user_client_Timer$1_2_classLit;
+}
+;
+function $getRuntimeValue(){
+  var ua = navigator.userAgent.toLowerCase();
+  var makeVersion = function(result){
+    return parseInt(result[1]) * 1000 + parseInt(result[2]);
+  }
+  ;
+  if (function(){
+    return ua.indexOf('opera') != -1;
+  }
+  ())
+    return 'opera';
+  if (function(){
+    return ua.indexOf('webkit') != -1 || function(){
+      if (ua.indexOf('chromeframe') != -1) {
+        return true;
+      }
+      if (typeof window['ActiveXObject'] != 'undefined') {
+        try {
+          var obj = new ActiveXObject('ChromeTab.ChromeFrame');
+          if (obj) {
+            obj.registerBhoIfNeeded();
+            return true;
+          }
+        }
+         catch (e) {
+        }
+      }
+      return false;
+    }
+    ();
+  }
+  ())
+    return 'safari';
+  if (function(){
+    return ua.indexOf('msie') != -1 && $doc.documentMode >= 9;
+  }
+  ())
+    return 'ie9';
+  if (function(){
+    return ua.indexOf('msie') != -1 && $doc.documentMode >= 8;
+  }
+  ())
+    return 'ie8';
+  if (function(){
+    var result = /msie ([0-9]+)\.([0-9]+)/.exec(ua);
+    if (result && result.length == 3)
+      return makeVersion(result) >= 6000;
+  }
+  ())
+    return 'ie6';
+  if (function(){
+    return ua.indexOf('gecko') != -1;
+  }
+  ())
+    return 'gecko1_8';
+  return 'unknown';
+}
+
+function addCloseHandler(handler){
+  maybeInitializeCloseHandlers();
+  return addHandler(TYPE?TYPE:(TYPE = new GwtEvent$Type_0), handler);
+}
+
+function addHandler(type, handler){
+  return $addHandler((!handlers_0 && (handlers_0 = new Window$WindowHandlers_0) , handlers_0), type, handler);
+}
+
+function maybeInitializeCloseHandlers(){
+  if (!closeHandlersInitialized) {
+    $initWindowCloseHandler();
+    closeHandlersInitialized = true;
+  }
+}
+
+function onClosing_0(){
+  var event_0;
+  if (closeHandlersInitialized) {
+    event_0 = new Window$ClosingEvent_0;
+    !!handlers_0 && $fireEvent(handlers_0, event_0);
+    return null;
+  }
+  return null;
+}
+
+var closeHandlersInitialized = false, handlers_0 = null;
+function $clinit_Window$ClosingEvent(){
+  $clinit_Window$ClosingEvent = nullMethod;
+  TYPE_0 = new GwtEvent$Type_0;
+}
+
+function Window$ClosingEvent_0(){
+  $clinit_Window$ClosingEvent();
+}
+
+function Window$ClosingEvent(){
+}
+
+_ = Window$ClosingEvent_0.prototype = Window$ClosingEvent.prototype = new GwtEvent;
+_.dispatch = function dispatch_0(handler){
+  null.nullMethod();
+}
+;
+_.getAssociatedType = function getAssociatedType_0(){
+  return TYPE_0;
+}
+;
+_.getClass$ = function getClass_35(){
+  return Lcom_google_gwt_user_client_Window$ClosingEvent_2_classLit;
+}
+;
+var TYPE_0;
+function Window$WindowHandlers_0(){
+  this.eventBus = new HandlerManager$Bus_0;
+  this.source = null;
+}
+
+function Window$WindowHandlers(){
+}
+
+_ = Window$WindowHandlers_0.prototype = Window$WindowHandlers.prototype = new HandlerManager;
+_.getClass$ = function getClass_36(){
+  return Lcom_google_gwt_user_client_Window$WindowHandlers_2_classLit;
+}
+;
+function $initWindowCloseHandler(){
+  var oldOnBeforeUnload = $wnd.onbeforeunload;
+  var oldOnUnload = $wnd.onunload;
+  $wnd.onbeforeunload = function(evt){
+    var ret, oldRet;
+    try {
+      ret = $entry(onClosing_0)();
+    }
+     finally {
+      oldRet = oldOnBeforeUnload && oldOnBeforeUnload(evt);
+    }
+    if (ret != null) {
+      return ret;
+    }
+    if (oldRet != null) {
+      return oldRet;
+    }
+  }
+  ;
+  $wnd.onunload = $entry(function(evt){
+    try {
+      closeHandlersInitialized && fire((!handlers_0 && (handlers_0 = new Window$WindowHandlers_0) , handlers_0));
+    }
+     finally {
+      oldOnUnload && oldOnUnload(evt);
+      $wnd.onresize = null;
+      $wnd.onscroll = null;
+      $wnd.onbeforeunload = null;
+      $wnd.onunload = null;
+    }
+  }
+  );
+}
+
+function $onModuleLoad_0(this$static){
+  this$static.factory_0 = new NativeTermFactory_0;
+  this$static.jsfactory = $exposeFactory(this$static.factory_0, this$static.factory_0);
+  $nativeOnWorkerLoad(this$static);
+}
+
+function DedicatedWorkerEntryPoint(){
+}
+
+_ = DedicatedWorkerEntryPoint.prototype = new Object_0;
+_.getClass$ = function getClass_37(){
+  return Lcom_google_gwt_webworker_client_DedicatedWorkerEntryPoint_2_classLit;
+}
+;
+function $clearOnReadyStateChange(this$static){
+  var self_0 = this$static;
+  $wnd.setTimeout(function(){
+    self_0.onreadystatechange = new Function;
+  }
+  , 0);
+}
+
+function $open(this$static, httpMethod, url){
+  this$static.open(httpMethod, url, true);
+}
+
+function $setOnReadyStateChange(this$static, handler){
+  var _this = this$static;
+  this$static.onreadystatechange = $entry(function(){
+    handler.onReadyStateChange(_this);
+  }
+  );
+}
+
+function create_0(){
+  if ($wnd.XMLHttpRequest) {
+    return new $wnd.XMLHttpRequest;
+  }
+   else {
+    try {
+      return new $wnd.ActiveXObject('MSXML2.XMLHTTP.3.0');
+    }
+     catch (e) {
+      return new $wnd.ActiveXObject('Microsoft.XMLHTTP');
+    }
+  }
+}
+
+function SimpleEventBus$1_0(){
+}
+
+function SimpleEventBus$1(){
+}
+
+_ = SimpleEventBus$1_0.prototype = SimpleEventBus$1.prototype = new Object_0;
+_.getClass$ = function getClass_38(){
+  return Lcom_google_web_bindery_event_shared_SimpleEventBus$1_2_classLit;
+}
+;
+function SimpleEventBus$2_0(this$0, val$type, val$handler){
+  this.this$0 = this$0;
+  this.val$type = val$type;
+  this.val$source = null;
+  this.val$handler = val$handler;
+}
+
+function SimpleEventBus$2(){
+}
+
+_ = SimpleEventBus$2_0.prototype = SimpleEventBus$2.prototype = new Object_0;
+_.getClass$ = function getClass_39(){
+  return Lcom_google_web_bindery_event_shared_SimpleEventBus$2_2_classLit;
+}
+;
+_.this$0 = null;
+_.val$handler = null;
+_.val$source = null;
+_.val$type = null;
+function ArrayStoreException_0(){
+  $fillInStackTrace();
+}
+
+function ArrayStoreException_1(message){
+  RuntimeException_1.call(this, message);
+}
+
+function ArrayStoreException(){
+}
+
+_ = ArrayStoreException_1.prototype = ArrayStoreException_0.prototype = ArrayStoreException.prototype = new RuntimeException;
+_.getClass$ = function getClass_40(){
+  return Ljava_lang_ArrayStoreException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function $clinit_Boolean(){
+  $clinit_Boolean = nullMethod;
+  FALSE = new Boolean_1(false);
+  TRUE = new Boolean_1(true);
+}
+
+function Boolean_1(value){
+  this.value = value;
+}
+
+function Boolean_0(){
+}
+
+_ = Boolean_1.prototype = Boolean_0.prototype = new Object_0;
+_.compareTo$ = function compareTo(other){
+  return this.value == other.value?0:this.value?1:-1;
+}
+;
+_.equals$ = function equals_0(o){
+  return instanceOf(o, Q$Boolean) && o.value == this.value;
+}
+;
+_.getClass$ = function getClass_41(){
+  return Ljava_lang_Boolean_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_2(){
+  return this.value?1231:1237;
+}
+;
+_.toString$ = function toString_5(){
+  return this.value?'true':'false';
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Boolean, Q$Comparable]);
+_.value = false;
+var FALSE, TRUE;
+function digit(c){
+  if (c >= 48 && c < 58) {
+    return c - 48;
+  }
+  if (c >= 97 && c < 97) {
+    return c - 97 + 10;
+  }
+  if (c >= 65 && c < 65) {
+    return c - 65 + 10;
+  }
+  return -1;
+}
+
+function isDigit(c){
+  return null != String.fromCharCode(c).match(/\d/);
+}
+
+function isLetter(c){
+  return null != String.fromCharCode(c).match(/[A-Z]/i);
+}
+
+function Class_0(){
+}
+
+function createForArray(seedName, componentType){
+  var clazz;
+  clazz = new Class_0;
+  clazz.typeName = 'Class$' + (seedName != null?seedName:'' + getHashCode(clazz));
+  clazz.modifiers = 4;
+  clazz.componentType = componentType;
+  return clazz;
+}
+
+function createForClass(seedName){
+  var clazz;
+  clazz = new Class_0;
+  clazz.typeName = 'Class$' + (seedName != null?seedName:'' + getHashCode(clazz));
+  return clazz;
+}
+
+function createForInterface(){
+  var clazz;
+  clazz = new Class_0;
+  clazz.typeName = 'Class$' + getHashCode(clazz);
+  clazz.modifiers = 2;
+  return clazz;
+}
+
+function createForPrimitive(seedName){
+  var clazz;
+  clazz = new Class_0;
+  clazz.typeName = 'Class$' + (seedName != null?seedName:'' + getHashCode(clazz));
+  clazz.modifiers = 1;
+  return clazz;
+}
+
+function Class(){
+}
+
+_ = Class_0.prototype = Class.prototype = new Object_0;
+_.getClass$ = function getClass_42(){
+  return Ljava_lang_Class_2_classLit;
+}
+;
+_.toString$ = function toString_6(){
+  return ((this.modifiers & 2) != 0?'interface ':(this.modifiers & 1) != 0?'':'class ') + this.typeName;
+}
+;
+_.componentType = null;
+_.modifiers = 0;
+_.typeName = null;
+function __parseAndValidateDouble(s){
+  var toReturn;
+  toReturn = __parseDouble(s);
+  if (isNaN(toReturn)) {
+    throw new NumberFormatException_0('For input string: "' + s + '"');
+  }
+  return toReturn;
+}
+
+function __parseAndValidateInt(s){
+  var i, length_0, startIndex, toReturn;
+  if (s == null) {
+    throw new NumberFormatException_0('null');
+  }
+  length_0 = s.length;
+  startIndex = length_0 > 0 && s.charCodeAt(0) == 45?1:0;
+  for (i = startIndex; i < length_0; ++i) {
+    if (digit(s.charCodeAt(i)) == -1) {
+      throw new NumberFormatException_0('For input string: "' + s + '"');
+    }
+  }
+  toReturn = parseInt(s, 10);
+  if (isNaN(toReturn)) {
+    throw new NumberFormatException_0('For input string: "' + s + '"');
+  }
+   else if (toReturn < -2147483648 || toReturn > 2147483647) {
+    throw new NumberFormatException_0('For input string: "' + s + '"');
+  }
+  return toReturn;
+}
+
+function __parseDouble(str){
+  var floatRegex = floatRegex_0;
+  !floatRegex && (floatRegex = floatRegex_0 = /^\s*[+-]?((\d+\.?\d*)|(\.\d+))([eE][+-]?\d+)?[dDfF]?\s*$/i);
+  if (floatRegex.test(str)) {
+    return parseFloat(str);
+  }
+   else {
+    return Number.NaN;
+  }
+}
+
+function Number_0(){
+}
+
+_ = Number_0.prototype = new Object_0;
+_.getClass$ = function getClass_43(){
+  return Ljava_lang_Number_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Number]);
+var floatRegex_0 = null;
+function IllegalArgumentException_0(){
+  $fillInStackTrace();
+}
+
+function IllegalArgumentException_1(message){
+  RuntimeException_1.call(this, message);
+}
+
+function IllegalArgumentException(){
+}
+
+_ = IllegalArgumentException_1.prototype = IllegalArgumentException_0.prototype = IllegalArgumentException.prototype = new RuntimeException;
+_.getClass$ = function getClass_44(){
+  return Ljava_lang_IllegalArgumentException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function IllegalStateException_0(){
+  $fillInStackTrace();
+}
+
+function IllegalStateException_1(s){
+  RuntimeException_1.call(this, s);
+}
+
+function IllegalStateException(){
+}
+
+_ = IllegalStateException_1.prototype = IllegalStateException_0.prototype = IllegalStateException.prototype = new RuntimeException;
+_.getClass$ = function getClass_45(){
+  return Ljava_lang_IllegalStateException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function IndexOutOfBoundsException_0(){
+  $fillInStackTrace();
+}
+
+function IndexOutOfBoundsException_1(message){
+  RuntimeException_1.call(this, message);
+}
+
+function IndexOutOfBoundsException(){
+}
+
+_ = IndexOutOfBoundsException_1.prototype = IndexOutOfBoundsException_0.prototype = IndexOutOfBoundsException.prototype = new RuntimeException;
+_.getClass$ = function getClass_46(){
+  return Ljava_lang_IndexOutOfBoundsException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function Integer_0(value){
+  this.value = value;
+}
+
+function toPowerOfTwoString(value){
+  var buf, digits, pos;
+  buf = initDim(_3C_classLit, makeCastMap([Q$Serializable]), -1, 8, 1);
+  digits = ($clinit_Number$__Digits() , digits_0);
+  pos = 7;
+  if (value >= 0) {
+    while (value > 15) {
+      buf[pos--] = digits[value & 15];
+      value >>= 4;
+    }
+  }
+   else {
+    while (pos > 0) {
+      buf[pos--] = digits[value & 15];
+      value >>= 4;
+    }
+  }
+  buf[pos] = digits[value & 15];
+  return __valueOf(buf, pos, 8);
+}
+
+function valueOf(i){
+  var rebase, result;
+  if (i > -129 && i < 128) {
+    rebase = i + 128;
+    result = ($clinit_Integer$BoxedValues() , boxedValues_0)[rebase];
+    !result && (result = boxedValues_0[rebase] = new Integer_0(i));
+    return result;
+  }
+  return new Integer_0(i);
+}
+
+function Integer(){
+}
+
+_ = Integer_0.prototype = Integer.prototype = new Number_0;
+_.compareTo$ = function compareTo_0(b){
+  return this.value < b.value?-1:this.value > b.value?1:0;
+}
+;
+_.equals$ = function equals_1(o){
+  return instanceOf(o, Q$Integer) && o.value == this.value;
+}
+;
+_.getClass$ = function getClass_47(){
+  return Ljava_lang_Integer_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_3(){
+  return this.value;
+}
+;
+_.toString$ = function toString_7(){
+  return '' + this.value;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Comparable, Q$Integer, Q$Number]);
+_.value = 0;
+function $clinit_Integer$BoxedValues(){
+  $clinit_Integer$BoxedValues = nullMethod;
+  boxedValues_0 = initDim(_3Ljava_lang_Integer_2_classLit, makeCastMap([Q$Serializable]), Q$Integer, 256, 0);
+}
+
+var boxedValues_0;
+function max_0(x, y){
+  return x > y?x:y;
+}
+
+function min(x, y){
+  return x < y?x:y;
+}
+
+function NullPointerException_0(){
+  $fillInStackTrace();
+}
+
+function NullPointerException_1(message){
+  RuntimeException_1.call(this, message);
+}
+
+function NullPointerException(){
+}
+
+_ = NullPointerException_1.prototype = NullPointerException_0.prototype = NullPointerException.prototype = new RuntimeException;
+_.getClass$ = function getClass_48(){
+  return Ljava_lang_NullPointerException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function $clinit_Number$__Digits(){
+  $clinit_Number$__Digits = nullMethod;
+  digits_0 = initValues(_3C_classLit, makeCastMap([Q$Serializable]), -1, [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]);
+}
+
+var digits_0;
+function NumberFormatException_0(message){
+  IllegalArgumentException_1.call(this, message);
+}
+
+function NumberFormatException(){
+}
+
+_ = NumberFormatException_0.prototype = NumberFormatException.prototype = new IllegalArgumentException;
+_.getClass$ = function getClass_49(){
+  return Ljava_lang_NumberFormatException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function StackTraceElement_0(methodName){
+  this.className = 'Unknown';
+  this.methodName = methodName;
+  this.lineNumber = -1;
+}
+
+function StackTraceElement(){
+}
+
+_ = StackTraceElement_0.prototype = StackTraceElement.prototype = new Object_0;
+_.getClass$ = function getClass_50(){
+  return Ljava_lang_StackTraceElement_2_classLit;
+}
+;
+_.toString$ = function toString_8(){
+  return this.className + '.' + this.methodName + '(Unknown Source' + (this.lineNumber >= 0?':' + this.lineNumber:'') + ')';
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$StackTraceElement]);
+_.className = null;
+_.lineNumber = 0;
+_.methodName = null;
+function $charAt(this$static, index){
+  return this$static.charCodeAt(index);
+}
+
+function $endsWith(this$static, suffix){
+  return this$static.lastIndexOf(suffix) != -1 && this$static.lastIndexOf(suffix) == this$static.length - suffix.length;
+}
+
+function $equals(this$static, other){
+  if (!instanceOf(other, Q$String)) {
+    return false;
+  }
+  return String(this$static) == other;
+}
+
+function $getChars(this$static, srcEnd, dst, dstBegin){
+  var srcIdx;
+  for (srcIdx = 0; srcIdx < srcEnd; ++srcIdx) {
+    dst[dstBegin++] = this$static.charCodeAt(srcIdx);
+  }
+}
+
+function $indexOf(this$static, str){
+  return this$static.indexOf(str);
+}
+
+function $replace_0(this$static, from, to){
+  var regex, replacement;
+  regex = $replaceAll(from, '([/\\\\\\.\\*\\+\\?\\|\\(\\)\\[\\]\\{\\}$^])', '\\\\$1');
+  replacement = $replaceAll($replaceAll(to, '\\\\', '\\\\\\\\'), '\\$', '\\\\$');
+  return $replaceAll(this$static, regex, replacement);
+}
+
+function $replaceAll(this$static, regex, replace){
+  replace = __translateReplaceString(replace);
+  return this$static.replace(RegExp(regex, 'g'), replace);
+}
+
+function $split(this$static, regex, maxMatch){
+  var compiled = new RegExp(regex, 'g');
+  var out = [];
+  var count = 0;
+  var trail = this$static;
+  var lastTrail = null;
+  while (true) {
+    var matchObj = compiled.exec(trail);
+    if (matchObj == null || trail == '' || count == maxMatch - 1 && maxMatch > 0) {
+      out[count] = trail;
+      break;
+    }
+     else {
+      out[count] = trail.substring(0, matchObj.index);
+      trail = trail.substring(matchObj.index + matchObj[0].length, trail.length);
+      compiled.lastIndex = 0;
+      if (lastTrail == trail) {
+        out[count] = trail.substring(0, 1);
+        trail = trail.substring(1);
+      }
+      lastTrail = trail;
+      count++;
+    }
+  }
+  if (maxMatch == 0 && this$static.length > 0) {
+    var lastNonEmpty = out.length;
+    while (lastNonEmpty > 0 && out[lastNonEmpty - 1] == '') {
+      --lastNonEmpty;
+    }
+    lastNonEmpty < out.length && out.splice(lastNonEmpty, out.length - lastNonEmpty);
+  }
+  var jr = __createArray(out.length);
+  for (var i = 0; i < out.length; ++i) {
+    jr[i] = out[i];
+  }
+  return jr;
+}
+
+function $substring(this$static, beginIndex){
+  return this$static.substr(beginIndex, this$static.length - beginIndex);
+}
+
+function $substring_0(this$static, beginIndex, endIndex){
+  return this$static.substr(beginIndex, endIndex - beginIndex);
+}
+
+function $trim(this$static){
+  if (this$static.length == 0 || this$static[0] > ' ' && this$static[this$static.length - 1] > ' ') {
+    return this$static;
+  }
+  var r1 = this$static.replace(/^(\s*)/, '');
+  var r2 = r1.replace(/\s*$/, '');
+  return r2;
+}
+
+function __createArray(numElements){
+  return initDim(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable]), Q$String, numElements, 0);
+}
+
+function __translateReplaceString(replaceStr){
+  var pos;
+  pos = 0;
+  while (0 <= (pos = replaceStr.indexOf('\\', pos))) {
+    replaceStr.charCodeAt(pos + 1) == 36?(replaceStr = replaceStr.substr(0, pos - 0) + '$' + $substring(replaceStr, ++pos)):(replaceStr = replaceStr.substr(0, pos - 0) + $substring(replaceStr, ++pos));
+  }
+  return replaceStr;
+}
+
+function __valueOf(x, start, end){
+  x = x.slice(start, end);
+  return String.fromCharCode.apply(null, x);
+}
+
+function compareTo_1(thisStr, otherStr){
+  thisStr = String(thisStr);
+  if (thisStr == otherStr) {
+    return 0;
+  }
+  return thisStr < otherStr?-1:1;
+}
+
+_ = String.prototype;
+_.compareTo$ = function compareTo_2(other){
+  return compareTo_1(this, other);
+}
+;
+_.equals$ = function equals_2(other){
+  return $equals(this, other);
+}
+;
+_.getClass$ = function getClass_51(){
+  return Ljava_lang_String_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_4(){
+  return getHashCode_0(this);
+}
+;
+_.toString$ = function toString_9(){
+  return this;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$String, Q$Serializable, Q$CharSequence, Q$Comparable]);
+function $clinit_String$HashCache(){
+  $clinit_String$HashCache = nullMethod;
+  back_0 = {};
+  front = {};
+}
+
+function compute(str){
+  var hashCode, i, n, nBatch;
+  hashCode = 0;
+  n = str.length;
+  nBatch = n - 4;
+  i = 0;
+  while (i < nBatch) {
+    hashCode = str.charCodeAt(i + 3) + 31 * (str.charCodeAt(i + 2) + 31 * (str.charCodeAt(i + 1) + 31 * (str.charCodeAt(i) + 31 * hashCode))) | 0;
+    i += 4;
+  }
+  while (i < n) {
+    hashCode = hashCode * 31 + $charAt(str, i++);
+  }
+  return hashCode | 0;
+}
+
+function getHashCode_0(str){
+  $clinit_String$HashCache();
+  var key = ':' + str;
+  var result = front[key];
+  if (result != null) {
+    return result;
+  }
+  result = back_0[key];
+  result == null && (result = compute(str));
+  increment();
+  return front[key] = result;
+}
+
+function increment(){
+  if (count_0 == 256) {
+    back_0 = front;
+    front = {};
+    count_0 = 0;
+  }
+  ++count_0;
+}
+
+var back_0, count_0 = 0, front;
+function $append_2(this$static, x){
+  $append_1(this$static.impl, x);
+  return this$static;
+}
+
+function StringBuffer_0(){
+  this.impl = new StringBufferImplAppend_0;
+}
+
+function StringBuffer(){
+}
+
+_ = StringBuffer_0.prototype = StringBuffer.prototype = new Object_0;
+_.append_0 = function append(x){
+  return $append_0(this.impl, x) , this;
+}
+;
+_.append = function append_0(x){
+  return $appendNonNull(this.impl, String.fromCharCode(x)) , this;
+}
+;
+_.getClass$ = function getClass_52(){
+  return Ljava_lang_StringBuffer_2_classLit;
+}
+;
+_.toString$ = function toString_10(){
+  return this.impl.string;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$CharSequence]);
+function $append_3(this$static, x){
+  $appendNonNull(this$static.impl, String.fromCharCode(x));
+  return this$static;
+}
+
+function $append_4(this$static, x){
+  $append(this$static.impl, x);
+  return this$static;
+}
+
+function $append_5(this$static, x){
+  $append_0(this$static.impl, x);
+  return this$static;
+}
+
+function $append_6(this$static, x){
+  $append_1(this$static.impl, x);
+  return this$static;
+}
+
+function $replace_1(this$static, start, end){
+  $replace(this$static.impl, start, end);
+  return this$static;
+}
+
+function StringBuilder_0(){
+  this.impl = new StringBufferImplAppend_0;
+}
+
+function StringBuilder(){
+}
+
+_ = StringBuilder_0.prototype = StringBuilder.prototype = new Object_0;
+_.append_0 = function append_1(x){
+  return $append_0(this.impl, x) , this;
+}
+;
+_.append = function append_2(x){
+  return $appendNonNull(this.impl, String.fromCharCode(x)) , this;
+}
+;
+_.getClass$ = function getClass_53(){
+  return Ljava_lang_StringBuilder_2_classLit;
+}
+;
+_.toString$ = function toString_11(){
+  return this.impl.string;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$CharSequence]);
+function arraycopy(src, srcOfs, dest, destOfs, len){
+  var destComp, destEnd, destType, destlen, srcComp, srcType, srclen;
+  if (src == null || dest == null) {
+    throw new NullPointerException_0;
+  }
+  srcType = src.getClass$();
+  destType = dest.getClass$();
+  if ((srcType.modifiers & 4) == 0 || (destType.modifiers & 4) == 0) {
+    throw new ArrayStoreException_1('Must be array types');
+  }
+  srcComp = srcType.componentType;
+  destComp = destType.componentType;
+  if (!((srcComp.modifiers & 1) != 0?srcComp == destComp:(destComp.modifiers & 1) == 0)) {
+    throw new ArrayStoreException_1('Array types must match');
+  }
+  srclen = src.length;
+  destlen = dest.length;
+  if (srcOfs < 0 || destOfs < 0 || len < 0 || srcOfs + len > srclen || destOfs + len > destlen) {
+    throw new IndexOutOfBoundsException_0;
+  }
+  if (((srcComp.modifiers & 1) == 0 || (srcComp.modifiers & 4) != 0) && srcType != destType) {
+    if (maskUndefined(src) === maskUndefined(dest) && srcOfs < destOfs) {
+      srcOfs += len;
+      for (destEnd = destOfs + len; destEnd-- > destOfs;) {
+        setCheck(dest, destEnd, src[--srcOfs]);
+      }
+    }
+     else {
+      for (destEnd = destOfs + len; destOfs < destEnd;) {
+        setCheck(dest, destOfs++, src[srcOfs++]);
+      }
+    }
+  }
+   else {
+    Array.prototype.splice.apply(dest, [destOfs, len].concat(src.slice(srcOfs, srcOfs + len)));
+  }
+}
+
+function currentTimeMillis0(){
+  return (new Date).getTime();
+}
+
+function UnsupportedOperationException_0(){
+  $fillInStackTrace();
+}
+
+function UnsupportedOperationException_1(message){
+  RuntimeException_1.call(this, message);
+}
+
+function UnsupportedOperationException(){
+}
+
+_ = UnsupportedOperationException_1.prototype = UnsupportedOperationException_0.prototype = UnsupportedOperationException.prototype = new RuntimeException;
+_.getClass$ = function getClass_54(){
+  return Ljava_lang_UnsupportedOperationException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function $advanceToFind(iter, o){
+  var t;
+  while (iter.hasNext()) {
+    t = iter.next_0();
+    if (o == null?t == null:equals__devirtual$(o, t)) {
+      return iter;
+    }
+  }
+  return null;
+}
+
+function $toArray(this$static){
+  return $toArray_0(this$static, initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, this$static.map.size_0(), 0));
+}
+
+function $toArray_0(this$static, a){
+  var i, it, size;
+  size = this$static.size_0();
+  a.length < size && (a = createFrom(a, size));
+  it = this$static.iterator();
+  for (i = 0; i < size; ++i) {
+    setCheck(a, i, it.next_0());
+  }
+  a.length > size && setCheck(a, size, null);
+  return a;
+}
+
+function $toString(this$static){
+  var comma, iter, sb, value;
+  sb = new StringBuffer_0;
+  comma = null;
+  sb.impl.string += '[';
+  iter = this$static.iterator();
+  while (iter.hasNext()) {
+    comma != null?($append_1(sb.impl, comma) , sb):(comma = ', ');
+    value = iter.next_0();
+    $append_1(sb.impl, value === this$static?'(this Collection)':'' + value);
+  }
+  sb.impl.string += ']';
+  return sb.impl.string;
+}
+
+function AbstractCollection(){
+}
+
+_ = AbstractCollection.prototype = new Object_0;
+_.add = function add_0(o){
+  throw new UnsupportedOperationException_1('Add not supported on this collection');
+}
+;
+_.contains = function contains(o){
+  var iter;
+  iter = $advanceToFind(this.iterator(), o);
+  return !!iter;
+}
+;
+_.getClass$ = function getClass_55(){
+  return Ljava_util_AbstractCollection_2_classLit;
+}
+;
+_.isEmpty = function isEmpty(){
+  return this.size_0() == 0;
+}
+;
+_.toArray = function toArray(a){
+  return $toArray_0(this, a);
+}
+;
+_.toString$ = function toString_12(){
+  return $toString(this);
+}
+;
+function $implFindEntry(this$static, key){
+  var entry, iter, k;
+  for (iter = this$static.entrySet().iterator(); iter.hasNext();) {
+    entry = iter.next_0();
+    k = entry.getKey();
+    if (key == null?k == null:equals__devirtual$(key, k)) {
+      return entry;
+    }
+  }
+  return null;
+}
+
+function $keySet(this$static){
+  var entrySet;
+  entrySet = this$static.entrySet();
+  return new AbstractMap$1_0(this$static, entrySet);
+}
+
+function AbstractMap(){
+}
+
+_ = AbstractMap.prototype = new Object_0;
+_.containsKey = function containsKey(key){
+  return !!$implFindEntry(this, key);
+}
+;
+_.equals$ = function equals_3(obj){
+  var entry, entry$iterator, otherKey, otherMap, otherValue;
+  if (obj === this) {
+    return true;
+  }
+  if (!instanceOf(obj, Q$Map)) {
+    return false;
+  }
+  otherMap = obj;
+  if (this.size_0() != otherMap.size_0()) {
+    return false;
+  }
+  for (entry$iterator = otherMap.entrySet().iterator(); entry$iterator.hasNext();) {
+    entry = entry$iterator.next_0();
+    otherKey = entry.getKey();
+    otherValue = entry.getValue();
+    if (!this.containsKey(otherKey)) {
+      return false;
+    }
+    if (!equalsWithNullCheck(otherValue, this.get(otherKey))) {
+      return false;
+    }
+  }
+  return true;
+}
+;
+_.get = function get(key){
+  var entry;
+  entry = $implFindEntry(this, key);
+  return !entry?null:entry.getValue();
+}
+;
+_.getClass$ = function getClass_56(){
+  return Ljava_util_AbstractMap_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_5(){
+  var entry, entry$iterator, hashCode;
+  hashCode = 0;
+  for (entry$iterator = this.entrySet().iterator(); entry$iterator.hasNext();) {
+    entry = entry$iterator.next_0();
+    hashCode += entry.hashCode$();
+    hashCode = ~~hashCode;
+  }
+  return hashCode;
+}
+;
+_.put = function put(key, value){
+  throw new UnsupportedOperationException_1('Put not supported on this map');
+}
+;
+_.size_0 = function size_0(){
+  return this.entrySet().size_0();
+}
+;
+_.toString$ = function toString_13(){
+  var comma, entry, iter, s;
+  s = '{';
+  comma = false;
+  for (iter = this.entrySet().iterator(); iter.hasNext();) {
+    entry = iter.next_0();
+    comma?(s += ', '):(comma = true);
+    s += '' + entry.getKey();
+    s += '=';
+    s += '' + entry.getValue();
+  }
+  return s + '}';
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Map]);
+function $addAllHashEntries(this$static, dest){
+  var hashCodeMap = this$static.hashCodeMap;
+  for (var hashCode in hashCodeMap) {
+    var hashCodeInt = parseInt(hashCode, 10);
+    if (hashCode == hashCodeInt) {
+      var array = hashCodeMap[hashCodeInt];
+      for (var i = 0, c = array.length; i < c; ++i) {
+        dest.add(array[i]);
+      }
+    }
+  }
+}
+
+function $addAllStringEntries(this$static, dest){
+  var stringMap = this$static.stringMap;
+  for (var key in stringMap) {
+    if (key.charCodeAt(0) == 58) {
+      var entry = new AbstractHashMap$MapEntryString_0(this$static, key.substring(1));
+      dest.add(entry);
+    }
+  }
+}
+
+function $clearImpl(this$static){
+  this$static.hashCodeMap = [];
+  this$static.stringMap = {};
+  this$static.nullSlotLive = false;
+  this$static.nullSlot = null;
+  this$static.size = 0;
+}
+
+function $getHashValue(this$static, key, hashCode){
+  var array = this$static.hashCodeMap[hashCode];
+  if (array) {
+    for (var i = 0, c = array.length; i < c; ++i) {
+      var entry = array[i];
+      var entryKey = entry.getKey();
+      if (this$static.equalsBridge(key, entryKey)) {
+        return entry.getValue();
+      }
+    }
+  }
+  return null;
+}
+
+function $getStringValue(this$static, key){
+  return this$static.stringMap[':' + key];
+}
+
+function $hasHashValue(this$static, key, hashCode){
+  var array = this$static.hashCodeMap[hashCode];
+  if (array) {
+    for (var i = 0, c = array.length; i < c; ++i) {
+      var entry = array[i];
+      var entryKey = entry.getKey();
+      if (this$static.equalsBridge(key, entryKey)) {
+        return true;
+      }
+    }
+  }
+  return false;
+}
+
+function $putHashValue(this$static, key, value, hashCode){
+  var array = this$static.hashCodeMap[hashCode];
+  if (array) {
+    for (var i = 0, c = array.length; i < c; ++i) {
+      var entry = array[i];
+      var entryKey = entry.getKey();
+      if (this$static.equalsBridge(key, entryKey)) {
+        var previous = entry.getValue();
+        entry.setValue(value);
+        return previous;
+      }
+    }
+  }
+   else {
+    array = this$static.hashCodeMap[hashCode] = [];
+  }
+  var entry = new MapEntryImpl_0(key, value);
+  array.push(entry);
+  ++this$static.size;
+  return null;
+}
+
+function $putNullSlot(this$static, value){
+  var result;
+  result = this$static.nullSlot;
+  this$static.nullSlot = value;
+  if (!this$static.nullSlotLive) {
+    this$static.nullSlotLive = true;
+    ++this$static.size;
+  }
+  return result;
+}
+
+function $putStringValue(this$static, key, value){
+  var result, stringMap = this$static.stringMap;
+  key = ':' + key;
+  key in stringMap?(result = stringMap[key]):++this$static.size;
+  stringMap[key] = value;
+  return result;
+}
+
+function AbstractHashMap(){
+}
+
+_ = AbstractHashMap.prototype = new AbstractMap;
+_.clear = function clear(){
+  $clearImpl(this);
+}
+;
+_.containsKey = function containsKey_0(key){
+  return key == null?this.nullSlotLive:instanceOf(key, Q$String)?':' + key in this.stringMap:$hasHashValue(this, key, this.getHashCode(key));
+}
+;
+_.entrySet = function entrySet_0(){
+  return new AbstractHashMap$EntrySet_0(this);
+}
+;
+_.equalsBridge = function equalsBridge(value1, value2){
+  return this.equals(value1, value2);
+}
+;
+_.get = function get_0(key){
+  return key == null?this.nullSlot:instanceOf(key, Q$String)?this.stringMap[':' + key]:$getHashValue(this, key, this.getHashCode(key));
+}
+;
+_.getClass$ = function getClass_57(){
+  return Ljava_util_AbstractHashMap_2_classLit;
+}
+;
+_.put = function put_0(key, value){
+  return key == null?$putNullSlot(this, value):instanceOf(key, Q$String)?$putStringValue(this, key, value):$putHashValue(this, key, value, this.getHashCode(key));
+}
+;
+_.size_0 = function size_1(){
+  return this.size;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Map]);
+_.hashCodeMap = null;
+_.nullSlot = null;
+_.nullSlotLive = false;
+_.size = 0;
+_.stringMap = null;
+function AbstractSet(){
+}
+
+_ = AbstractSet.prototype = new AbstractCollection;
+_.equals$ = function equals_4(o){
+  var iter, other, otherItem;
+  if (o === this) {
+    return true;
+  }
+  if (!instanceOf(o, Q$Set)) {
+    return false;
+  }
+  other = o;
+  if (other.size_0() != this.size_0()) {
+    return false;
+  }
+  for (iter = other.iterator(); iter.hasNext();) {
+    otherItem = iter.next_0();
+    if (!this.contains(otherItem)) {
+      return false;
+    }
+  }
+  return true;
+}
+;
+_.getClass$ = function getClass_58(){
+  return Ljava_util_AbstractSet_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_6(){
+  var hashCode, iter, next;
+  hashCode = 0;
+  for (iter = this.iterator(); iter.hasNext();) {
+    next = iter.next_0();
+    if (next != null) {
+      hashCode += hashCode__devirtual$(next);
+      hashCode = ~~hashCode;
+    }
+  }
+  return hashCode;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Set]);
+function $contains(this$static, o){
+  var entry, key, value;
+  if (instanceOf(o, Q$Map$Entry)) {
+    entry = o;
+    key = entry.getKey();
+    if (this$static.this$0.containsKey(key)) {
+      value = this$static.this$0.get(key);
+      return this$static.this$0.equals(entry.getValue(), value);
+    }
+  }
+  return false;
+}
+
+function AbstractHashMap$EntrySet_0(this$0){
+  this.this$0 = this$0;
+}
+
+function AbstractHashMap$EntrySet(){
+}
+
+_ = AbstractHashMap$EntrySet_0.prototype = AbstractHashMap$EntrySet.prototype = new AbstractSet;
+_.contains = function contains_0(o){
+  return $contains(this, o);
+}
+;
+_.getClass$ = function getClass_59(){
+  return Ljava_util_AbstractHashMap$EntrySet_2_classLit;
+}
+;
+_.iterator = function iterator(){
+  return new AbstractHashMap$EntrySetIterator_0(this.this$0);
+}
+;
+_.size_0 = function size_2(){
+  return this.this$0.size_0();
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Set]);
+_.this$0 = null;
+function AbstractHashMap$EntrySetIterator_0(this$0){
+  var list;
+  list = new ArrayList_0;
+  this$0.nullSlotLive && $add(list, new AbstractHashMap$MapEntryNull_0(this$0));
+  $addAllStringEntries(this$0, list);
+  $addAllHashEntries(this$0, list);
+  this.iter = new AbstractList$IteratorImpl_0(list);
+}
+
+function AbstractHashMap$EntrySetIterator(){
+}
+
+_ = AbstractHashMap$EntrySetIterator_0.prototype = AbstractHashMap$EntrySetIterator.prototype = new Object_0;
+_.getClass$ = function getClass_60(){
+  return Ljava_util_AbstractHashMap$EntrySetIterator_2_classLit;
+}
+;
+_.hasNext = function hasNext(){
+  return $hasNext(this.iter);
+}
+;
+_.next_0 = function next_0(){
+  return $next(this.iter);
+}
+;
+_.iter = null;
+function AbstractMapEntry(){
+}
+
+_ = AbstractMapEntry.prototype = new Object_0;
+_.equals$ = function equals_5(other){
+  var entry;
+  if (instanceOf(other, Q$Map$Entry)) {
+    entry = other;
+    if (equalsWithNullCheck(this.getKey(), entry.getKey()) && equalsWithNullCheck(this.getValue(), entry.getValue())) {
+      return true;
+    }
+  }
+  return false;
+}
+;
+_.getClass$ = function getClass_61(){
+  return Ljava_util_AbstractMapEntry_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_7(){
+  var keyHash, valueHash;
+  keyHash = 0;
+  valueHash = 0;
+  this.getKey() != null && (keyHash = hashCode__devirtual$(this.getKey()));
+  this.getValue() != null && (valueHash = hashCode__devirtual$(this.getValue()));
+  return keyHash ^ valueHash;
+}
+;
+_.toString$ = function toString_14(){
+  return this.getKey() + '=' + this.getValue();
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Map$Entry]);
+function AbstractHashMap$MapEntryNull_0(this$0){
+  this.this$0 = this$0;
+}
+
+function AbstractHashMap$MapEntryNull(){
+}
+
+_ = AbstractHashMap$MapEntryNull_0.prototype = AbstractHashMap$MapEntryNull.prototype = new AbstractMapEntry;
+_.getClass$ = function getClass_62(){
+  return Ljava_util_AbstractHashMap$MapEntryNull_2_classLit;
+}
+;
+_.getKey = function getKey(){
+  return null;
+}
+;
+_.getValue = function getValue(){
+  return this.this$0.nullSlot;
+}
+;
+_.setValue = function setValue(object){
+  return $putNullSlot(this.this$0, object);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Map$Entry]);
+_.this$0 = null;
+function AbstractHashMap$MapEntryString_0(this$0, key){
+  this.this$0 = this$0;
+  this.key = key;
+}
+
+function AbstractHashMap$MapEntryString(){
+}
+
+_ = AbstractHashMap$MapEntryString_0.prototype = AbstractHashMap$MapEntryString.prototype = new AbstractMapEntry;
+_.getClass$ = function getClass_63(){
+  return Ljava_util_AbstractHashMap$MapEntryString_2_classLit;
+}
+;
+_.getKey = function getKey_0(){
+  return this.key;
+}
+;
+_.getValue = function getValue_0(){
+  return $getStringValue(this.this$0, this.key);
+}
+;
+_.setValue = function setValue_0(object){
+  return $putStringValue(this.this$0, this.key, object);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Map$Entry]);
+_.key = null;
+_.this$0 = null;
+function $indexOf_0(this$static, toFind){
+  var i, n;
+  for (i = 0 , n = this$static.array.length; i < n; ++i) {
+    if (toFind == null?!(checkIndex(i, this$static.array.length) , this$static.array[i]):equals__devirtual$(toFind, (checkIndex(i, this$static.array.length) , this$static.array[i]))) {
+      return i;
+    }
+  }
+  return -1;
+}
+
+function checkIndex(index, size){
+  (index < 0 || index >= size) && indexOutOfBounds(index, size);
+}
+
+function indexOutOfBounds(index, size){
+  throw new IndexOutOfBoundsException_1('Index: ' + index + ', Size: ' + size);
+}
+
+function AbstractList(){
+}
+
+_ = AbstractList.prototype = new AbstractCollection;
+_.add = function add_1(obj){
+  this.add_0(this.size_0(), obj);
+  return true;
+}
+;
+_.add_0 = function add_2(index, element){
+  throw new UnsupportedOperationException_1('Add not supported on this list');
+}
+;
+_.equals$ = function equals_6(o){
+  var elem, elemOther, iter, iterOther, other;
+  if (o === this) {
+    return true;
+  }
+  if (!instanceOf(o, Q$List)) {
+    return false;
+  }
+  other = o;
+  if (this.size_0() != other.size_0()) {
+    return false;
+  }
+  iter = this.iterator();
+  iterOther = other.iterator();
+  while (iter.i < iter.this$0_0.size_0()) {
+    elem = $next(iter);
+    elemOther = $next(iterOther);
+    if (!(elem == null?elemOther == null:equals__devirtual$(elem, elemOther))) {
+      return false;
+    }
+  }
+  return true;
+}
+;
+_.getClass$ = function getClass_64(){
+  return Ljava_util_AbstractList_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_8(){
+  var iter, k, obj;
+  k = 1;
+  iter = this.iterator();
+  while (iter.i < iter.this$0_0.size_0()) {
+    obj = $next(iter);
+    k = 31 * k + (obj == null?0:hashCode__devirtual$(obj));
+    k = ~~k;
+  }
+  return k;
+}
+;
+_.iterator = function iterator_0(){
+  return new AbstractList$IteratorImpl_0(this);
+}
+;
+_.listIterator = function listIterator(){
+  return new AbstractList$ListIteratorImpl_0(this, 0);
+}
+;
+_.listIterator_0 = function listIterator_0(from){
+  return new AbstractList$ListIteratorImpl_0(this, from);
+}
+;
+_.set = function set_0(index, o){
+  throw new UnsupportedOperationException_1('Set not supported on this list');
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$List]);
+function $hasNext(this$static){
+  return this$static.i < this$static.this$0_0.size_0();
+}
+
+function $next(this$static){
+  if (this$static.i >= this$static.this$0_0.size_0()) {
+    throw new NoSuchElementException_0;
+  }
+  return this$static.this$0_0.get_0(this$static.last = this$static.i++);
+}
+
+function AbstractList$IteratorImpl_0(this$0){
+  this.this$0_0 = this$0;
+}
+
+function AbstractList$IteratorImpl(){
+}
+
+_ = AbstractList$IteratorImpl_0.prototype = AbstractList$IteratorImpl.prototype = new Object_0;
+_.getClass$ = function getClass_65(){
+  return Ljava_util_AbstractList$IteratorImpl_2_classLit;
+}
+;
+_.hasNext = function hasNext_0(){
+  return $hasNext(this);
+}
+;
+_.next_0 = function next_1(){
+  return $next(this);
+}
+;
+_.i = 0;
+_.last = -1;
+_.this$0_0 = null;
+function $previous(this$static){
+  if (this$static.i <= 0) {
+    throw new NoSuchElementException_0;
+  }
+  return this$static.this$0.get_0(this$static.last = --this$static.i);
+}
+
+function $set(this$static, o){
+  if (this$static.last == -1) {
+    throw new IllegalStateException_0;
+  }
+  this$static.this$0.set(this$static.last, o);
+}
+
+function AbstractList$ListIteratorImpl_0(this$0, start){
+  var size;
+  this.this$0 = this$0;
+  this.this$0_0 = this$0;
+  size = this$0.size_0();
+  (start < 0 || start > size) && indexOutOfBounds(start, size);
+  this.i = start;
+}
+
+function AbstractList$ListIteratorImpl(){
+}
+
+_ = AbstractList$ListIteratorImpl_0.prototype = AbstractList$ListIteratorImpl.prototype = new AbstractList$IteratorImpl;
+_.getClass$ = function getClass_66(){
+  return Ljava_util_AbstractList$ListIteratorImpl_2_classLit;
+}
+;
+_.this$0 = null;
+function $iterator(this$static){
+  var outerIter;
+  outerIter = this$static.val$entrySet.iterator();
+  return new AbstractMap$1$1_0(outerIter);
+}
+
+function AbstractMap$1_0(this$0, val$entrySet){
+  this.this$0 = this$0;
+  this.val$entrySet = val$entrySet;
+}
+
+function AbstractMap$1(){
+}
+
+_ = AbstractMap$1_0.prototype = AbstractMap$1.prototype = new AbstractSet;
+_.contains = function contains_1(key){
+  return this.this$0.containsKey(key);
+}
+;
+_.getClass$ = function getClass_67(){
+  return Ljava_util_AbstractMap$1_2_classLit;
+}
+;
+_.iterator = function iterator_1(){
+  return $iterator(this);
+}
+;
+_.size_0 = function size_3(){
+  return this.val$entrySet.size_0();
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Set]);
+_.this$0 = null;
+_.val$entrySet = null;
+function $next_0(this$static){
+  var entry;
+  entry = this$static.val$outerIter.next_0();
+  return entry.getKey();
+}
+
+function AbstractMap$1$1_0(val$outerIter){
+  this.val$outerIter = val$outerIter;
+}
+
+function AbstractMap$1$1(){
+}
+
+_ = AbstractMap$1$1_0.prototype = AbstractMap$1$1.prototype = new Object_0;
+_.getClass$ = function getClass_68(){
+  return Ljava_util_AbstractMap$1$1_2_classLit;
+}
+;
+_.hasNext = function hasNext_1(){
+  return this.val$outerIter.hasNext();
+}
+;
+_.next_0 = function next_2(){
+  return $next_0(this);
+}
+;
+_.val$outerIter = null;
+function $$init(this$static){
+  this$static.array = initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, 0, 0);
+}
+
+function $add(this$static, o){
+  setCheck(this$static.array, this$static.size++, o);
+  return true;
+}
+
+function $add_0(this$static, index, o){
+  (index < 0 || index > this$static.size) && indexOutOfBounds(index, this$static.size);
+  splice_1(this$static.array, index, 0, o);
+  ++this$static.size;
+}
+
+function $addAll(this$static, c){
+  var cArray, len;
+  cArray = cloneSubrange(c.array, 0, c.size);
+  len = cArray.length;
+  if (len == 0) {
+    return false;
+  }
+  spliceArray(this$static.array, this$static.size, 0, cArray);
+  this$static.size += len;
+  return true;
+}
+
+function $clear(this$static){
+  this$static.array = initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, 0, 0);
+  this$static.size = 0;
+}
+
+function $get(this$static, index){
+  checkIndex(index, this$static.size);
+  return this$static.array[index];
+}
+
+function $indexOf_1(this$static, o, index){
+  for (; index < this$static.size; ++index) {
+    if (equalsWithNullCheck(o, this$static.array[index])) {
+      return index;
+    }
+  }
+  return -1;
+}
+
+function $remove(this$static, index){
+  var previous;
+  previous = (checkIndex(index, this$static.size) , this$static.array[index]);
+  splice_0(this$static.array, index, 1);
+  --this$static.size;
+  return previous;
+}
+
+function $remove_0(this$static, o){
+  var i;
+  i = $indexOf_1(this$static, o, 0);
+  if (i == -1) {
+    return false;
+  }
+  $remove(this$static, i);
+  return true;
+}
+
+function $set_0(this$static, index, o){
+  var previous;
+  previous = (checkIndex(index, this$static.size) , this$static.array[index]);
+  setCheck(this$static.array, index, o);
+  return previous;
+}
+
+function $toArray_1(this$static, out){
+  var i;
+  out.length < this$static.size && (out = createFrom(out, this$static.size));
+  for (i = 0; i < this$static.size; ++i) {
+    setCheck(out, i, this$static.array[i]);
+  }
+  out.length > this$static.size && setCheck(out, this$static.size, null);
+  return out;
+}
+
+function ArrayList_0(){
+  $$init(this);
+}
+
+function ArrayList_1(c){
+  $$init(this);
+  spliceArray(this.array, 0, 0, cloneSubrange(c.array, 0, c.size));
+  this.size = this.array.length;
+}
+
+function ArrayList_2(initialCapacity){
+  $$init(this);
+  setCapacity(this.array, initialCapacity);
+}
+
+function setCapacity(array, newSize){
+  array.length = newSize;
+}
+
+function splice_0(array, index, deleteCount){
+  array.splice(index, deleteCount);
+}
+
+function splice_1(array, index, deleteCount, value){
+  array.splice(index, deleteCount, value);
+}
+
+function spliceArray(array, index, deleteCount, values){
+  Array.prototype.splice.apply(array, [index, deleteCount].concat(values));
+}
+
+function ArrayList(){
+}
+
+_ = ArrayList_2.prototype = ArrayList_1.prototype = ArrayList_0.prototype = ArrayList.prototype = new AbstractList;
+_.add = function add_3(o){
+  return $add(this, o);
+}
+;
+_.add_0 = function add_4(index, o){
+  $add_0(this, index, o);
+}
+;
+_.contains = function contains_2(o){
+  return $indexOf_1(this, o, 0) != -1;
+}
+;
+_.get_0 = function get_1(index){
+  return $get(this, index);
+}
+;
+_.getClass$ = function getClass_69(){
+  return Ljava_util_ArrayList_2_classLit;
+}
+;
+_.isEmpty = function isEmpty_0(){
+  return this.size == 0;
+}
+;
+_.set = function set_1(index, o){
+  return $set_0(this, index, o);
+}
+;
+_.size_0 = function size_4(){
+  return this.size;
+}
+;
+_.toArray = function toArray_0(out){
+  return $toArray_1(this, out);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$List]);
+_.size = 0;
+function equals_7(array1, array2){
+  var i;
+  if (maskUndefined(array1) === maskUndefined(array2)) {
+    return true;
+  }
+  if (array1 == null || array2 == null) {
+    return false;
+  }
+  if (array1.length != array2.length) {
+    return false;
+  }
+  for (i = 0; i < array1.length; ++i) {
+    if (array1[i] != array2[i]) {
+      return false;
+    }
+  }
+  return true;
+}
+
+function hashCode_9(a){
+  var hashCode, i, n;
+  if (a == null) {
+    return 0;
+  }
+  hashCode = 1;
+  for (i = 0 , n = a.length; i < n; ++i) {
+    hashCode = 31 * hashCode + a[i] | 0;
+  }
+  return hashCode;
+}
+
+function insertionSort(array, low, high){
+  var i, j, t;
+  for (i = low + 1; i < high; ++i) {
+    for (j = i; j > low && array[j - 1].compareTo$(array[j]) > 0; --j) {
+      t = array[j];
+      setCheck(array, j, array[j - 1]);
+      setCheck(array, j - 1, t);
+    }
+  }
+}
+
+function merge(src, srcLow, srcMid, srcHigh, dest, destLow, destHigh){
+  var topIdx;
+  topIdx = srcMid;
+  while (destLow < destHigh) {
+    topIdx >= srcHigh || srcLow < srcMid && src[srcLow].compareTo$(src[topIdx]) <= 0?setCheck(dest, destLow++, src[srcLow++]):setCheck(dest, destLow++, src[topIdx++]);
+  }
+}
+
+function mergeSort(x, fromIndex, toIndex){
+  var temp;
+  temp = cloneSubrange(x, fromIndex, toIndex);
+  mergeSort_0(temp, x, fromIndex, toIndex, -fromIndex);
+}
+
+function mergeSort_0(temp, array, low, high, ofs){
+  var length_0, tempHigh, tempLow, tempMid;
+  length_0 = high - low;
+  if (length_0 < 7) {
+    insertionSort(array, low, high);
+    return;
+  }
+  tempLow = low + ofs;
+  tempHigh = high + ofs;
+  tempMid = tempLow + (tempHigh - tempLow >> 1);
+  mergeSort_0(array, temp, tempLow, tempMid, -ofs);
+  mergeSort_0(array, temp, tempMid, tempHigh, -ofs);
+  if (temp[tempMid - 1].compareTo$(temp[tempMid]) <= 0) {
+    while (low < high) {
+      setCheck(array, low++, temp[tempLow++]);
+    }
+    return;
+  }
+  merge(temp, tempLow, tempMid, tempHigh, array, low, high);
+}
+
+function toString_15(x){
+  if (x == null) {
+    return 'null';
+  }
+  return $toString(new Arrays$ArrayList_0(x));
+}
+
+function Arrays$ArrayList_0(array){
+  this.array = array;
+}
+
+function Arrays$ArrayList(){
+}
+
+_ = Arrays$ArrayList_0.prototype = Arrays$ArrayList.prototype = new AbstractList;
+_.contains = function contains_3(o){
+  return $indexOf_0(this, o) != -1;
+}
+;
+_.get_0 = function get_2(index){
+  return checkIndex(index, this.array.length) , this.array[index];
+}
+;
+_.getClass$ = function getClass_70(){
+  return Ljava_util_Arrays$ArrayList_2_classLit;
+}
+;
+_.set = function set_2(index, value){
+  var was;
+  checkIndex(index, this.array.length);
+  was = this.array[index];
+  setCheck(this.array, index, value);
+  return was;
+}
+;
+_.size_0 = function size_5(){
+  return this.array.length;
+}
+;
+_.toArray = function toArray_1(out){
+  var i, size;
+  size = this.array.length;
+  out.length < size && (out = createFrom(out, size));
+  for (i = 0; i < size; ++i) {
+    setCheck(out, i, this.array[i]);
+  }
+  out.length > size && setCheck(out, size, null);
+  return out;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$List]);
+_.array = null;
+function $clinit_Collections(){
+  $clinit_Collections = nullMethod;
+  EMPTY_LIST = new Collections$EmptyList_0;
+}
+
+function replaceContents(target, x){
+  var i, size;
+  size = target.size;
+  for (i = 0; i < size; ++i) {
+    $set_0(target, i, x[i]);
+  }
+}
+
+function reverse(l_0){
+  var t;
+  $clinit_Collections();
+  var head, headElem, iBack, iFront, tail, tailElem;
+  if (l_0) {
+    for (iFront = 0 , iBack = l_0.size - 1; iFront < iBack; ++iFront , --iBack) {
+      t = (checkIndex(iFront, l_0.size) , l_0.array[iFront]);
+      $set_0(l_0, iFront, (checkIndex(iBack, l_0.size) , l_0.array[iBack]));
+      $set_0(l_0, iBack, t);
+    }
+  }
+   else {
+    head = new AbstractList$ListIteratorImpl_0(null, 0);
+    tail = new AbstractList$ListIteratorImpl_0(null, null.size);
+    while (head.i < tail.i - 1) {
+      headElem = $next(head);
+      tailElem = $previous(tail);
+      $set(head, tailElem);
+      $set(tail, headElem);
+    }
+  }
+}
+
+var EMPTY_LIST;
+function Collections$EmptyList_0(){
+}
+
+function Collections$EmptyList(){
+}
+
+_ = Collections$EmptyList_0.prototype = Collections$EmptyList.prototype = new AbstractList;
+_.contains = function contains_4(object){
+  return false;
+}
+;
+_.get_0 = function get_3(location_0){
+  throw new IndexOutOfBoundsException_0;
+}
+;
+_.getClass$ = function getClass_71(){
+  return Ljava_util_Collections$EmptyList_2_classLit;
+}
+;
+_.size_0 = function size_6(){
+  return 0;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$List]);
+function ConcurrentModificationException_0(){
+  $fillInStackTrace();
+}
+
+function ConcurrentModificationException(){
+}
+
+_ = ConcurrentModificationException_0.prototype = ConcurrentModificationException.prototype = new RuntimeException;
+_.getClass$ = function getClass_72(){
+  return Ljava_util_ConcurrentModificationException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function EmptyStackException_0(){
+  $fillInStackTrace();
+}
+
+function EmptyStackException(){
+}
+
+_ = EmptyStackException_0.prototype = EmptyStackException.prototype = new RuntimeException;
+_.getClass$ = function getClass_73(){
+  return Ljava_util_EmptyStackException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function HashMap_0(){
+  $clearImpl(this);
+}
+
+function HashMap(){
+}
+
+_ = HashMap_0.prototype = HashMap.prototype = new AbstractHashMap;
+_.equals = function equals_8(value1, value2){
+  return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals__devirtual$(value1, value2);
+}
+;
+_.getClass$ = function getClass_74(){
+  return Ljava_util_HashMap_2_classLit;
+}
+;
+_.getHashCode = function getHashCode_1(key){
+  return ~~hashCode__devirtual$(key);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Map]);
+function $add_1(this$static, o){
+  var old;
+  old = this$static.map.put(o, this$static);
+  return old == null;
+}
+
+function HashSet_0(){
+  this.map = new HashMap_0;
+}
+
+function HashSet_1(map){
+  this.map = map;
+}
+
+function HashSet(){
+}
+
+_ = HashSet_0.prototype = HashSet.prototype = new AbstractSet;
+_.add = function add_5(o){
+  return $add_1(this, o);
+}
+;
+_.contains = function contains_5(o){
+  return this.map.containsKey(o);
+}
+;
+_.getClass$ = function getClass_75(){
+  return Ljava_util_HashSet_2_classLit;
+}
+;
+_.isEmpty = function isEmpty_1(){
+  return this.map.size_0() == 0;
+}
+;
+_.iterator = function iterator_2(){
+  return $iterator($keySet(this.map));
+}
+;
+_.size_0 = function size_7(){
+  return this.map.size_0();
+}
+;
+_.toString$ = function toString_16(){
+  return $toString($keySet(this.map));
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Set]);
+_.map = null;
+function $containsKey(this$static, key){
+  return this$static.map.containsKey(key);
+}
+
+function $get_0(this$static, key){
+  var entry;
+  entry = this$static.map.get(key);
+  if (entry) {
+    $recordAccess(this$static, entry);
+    return entry.value;
+  }
+  return null;
+}
+
+function $recordAccess(this$static, entry){
+  if (this$static.accessOrder) {
+    entry.next.prev = entry.prev;
+    entry.prev.next = entry.next;
+    entry.next = entry.prev = null;
+    $addToEnd(entry);
+  }
+}
+
+function LinkedHashMap_0(){
+  $clearImpl(this);
+  this.head = new LinkedHashMap$ChainEntry_0(this);
+  this.map = new HashMap_0;
+  this.head.prev = this.head;
+  this.head.next = this.head;
+}
+
+function LinkedHashMap(){
+}
+
+_ = LinkedHashMap_0.prototype = LinkedHashMap.prototype = new HashMap;
+_.clear = function clear_0(){
+  this.map.clear();
+  this.head.prev = this.head;
+  this.head.next = this.head;
+}
+;
+_.containsKey = function containsKey_1(key){
+  return this.map.containsKey(key);
+}
+;
+_.entrySet = function entrySet_1(){
+  return new LinkedHashMap$EntrySet_0(this);
+}
+;
+_.get = function get_4(key){
+  return $get_0(this, key);
+}
+;
+_.getClass$ = function getClass_76(){
+  return Ljava_util_LinkedHashMap_2_classLit;
+}
+;
+_.put = function put_1(key, value){
+  var newEntry, old, oldValue;
+  old = this.map.get(key);
+  if (!old) {
+    newEntry = new LinkedHashMap$ChainEntry_1(this, key, value);
+    this.map.put(key, newEntry);
+    $addToEnd(newEntry);
+    return null;
+  }
+   else {
+    oldValue = old.value;
+    $setValue(old, value);
+    $recordAccess(this, old);
+    return oldValue;
+  }
+}
+;
+_.size_0 = function size_8(){
+  return this.map.size_0();
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Map]);
+_.accessOrder = false;
+function $setValue(this$static, value){
+  var old;
+  old = this$static.value;
+  this$static.value = value;
+  return old;
+}
+
+function MapEntryImpl_0(key, value){
+  this.key = key;
+  this.value = value;
+}
+
+function MapEntryImpl(){
+}
+
+_ = MapEntryImpl_0.prototype = MapEntryImpl.prototype = new AbstractMapEntry;
+_.getClass$ = function getClass_77(){
+  return Ljava_util_MapEntryImpl_2_classLit;
+}
+;
+_.getKey = function getKey_1(){
+  return this.key;
+}
+;
+_.getValue = function getValue_1(){
+  return this.value;
+}
+;
+_.setValue = function setValue_1(value){
+  return $setValue(this, value);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Map$Entry]);
+_.key = null;
+_.value = null;
+function $addToEnd(this$static){
+  var tail;
+  tail = this$static.this$0.head.prev;
+  this$static.prev = tail;
+  this$static.next = this$static.this$0.head;
+  tail.next = this$static.this$0.head.prev = this$static;
+}
+
+function LinkedHashMap$ChainEntry_0(this$0){
+  LinkedHashMap$ChainEntry_1.call(this, this$0, null, null);
+}
+
+function LinkedHashMap$ChainEntry_1(this$0, key, value){
+  this.this$0 = this$0;
+  MapEntryImpl_0.call(this, key, value);
+  this.next = this.prev = null;
+}
+
+function LinkedHashMap$ChainEntry(){
+}
+
+_ = LinkedHashMap$ChainEntry_1.prototype = LinkedHashMap$ChainEntry_0.prototype = LinkedHashMap$ChainEntry.prototype = new MapEntryImpl;
+_.getClass$ = function getClass_78(){
+  return Ljava_util_LinkedHashMap$ChainEntry_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Map$Entry]);
+_.next = null;
+_.prev = null;
+_.this$0 = null;
+function LinkedHashMap$EntrySet_0(this$0){
+  this.this$0 = this$0;
+}
+
+function LinkedHashMap$EntrySet(){
+}
+
+_ = LinkedHashMap$EntrySet_0.prototype = LinkedHashMap$EntrySet.prototype = new AbstractSet;
+_.contains = function contains_6(o){
+  var entry, key, value;
+  if (!instanceOf(o, Q$Map$Entry)) {
+    return false;
+  }
+  entry = o;
+  key = entry.getKey();
+  if ($containsKey(this.this$0, key)) {
+    value = $get_0(this.this$0, key);
+    return equalsWithNullCheck(entry.getValue(), value);
+  }
+  return false;
+}
+;
+_.getClass$ = function getClass_79(){
+  return Ljava_util_LinkedHashMap$EntrySet_2_classLit;
+}
+;
+_.iterator = function iterator_3(){
+  return new LinkedHashMap$EntrySet$EntryIterator_0(this);
+}
+;
+_.size_0 = function size_9(){
+  return this.this$0.map.size_0();
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Set]);
+_.this$0 = null;
+function $next_1(this$static){
+  if (this$static.next == this$static.this$1.this$0.head) {
+    throw new NoSuchElementException_0;
+  }
+  this$static.last = this$static.next;
+  this$static.next = this$static.next.next;
+  return this$static.last;
+}
+
+function LinkedHashMap$EntrySet$EntryIterator_0(this$1){
+  this.this$1 = this$1;
+  this.next = this$1.this$0.head.next;
+}
+
+function LinkedHashMap$EntrySet$EntryIterator(){
+}
+
+_ = LinkedHashMap$EntrySet$EntryIterator_0.prototype = LinkedHashMap$EntrySet$EntryIterator.prototype = new Object_0;
+_.getClass$ = function getClass_80(){
+  return Ljava_util_LinkedHashMap$EntrySet$EntryIterator_2_classLit;
+}
+;
+_.hasNext = function hasNext_2(){
+  return this.next != this.this$1.this$0.head;
+}
+;
+_.next_0 = function next_3(){
+  return $next_1(this);
+}
+;
+_.last = null;
+_.next = null;
+_.this$1 = null;
+function LinkedHashSet_0(){
+  HashSet_1.call(this, new LinkedHashMap_0);
+}
+
+function LinkedHashSet(){
+}
+
+_ = LinkedHashSet_0.prototype = LinkedHashSet.prototype = new HashSet;
+_.getClass$ = function getClass_81(){
+  return Ljava_util_LinkedHashSet_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Set]);
+function NoSuchElementException_0(){
+  $fillInStackTrace();
+}
+
+function NoSuchElementException(){
+}
+
+_ = NoSuchElementException_0.prototype = NoSuchElementException.prototype = new RuntimeException;
+_.getClass$ = function getClass_82(){
+  return Ljava_util_NoSuchElementException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function Vector(){
+}
+
+_ = Vector.prototype = new AbstractList;
+_.add = function add_6(o){
+  return $add(this.arrayList, o);
+}
+;
+_.add_0 = function add_7(index, o){
+  $add_0(this.arrayList, index, o);
+}
+;
+_.contains = function contains_7(elem){
+  return $indexOf_1(this.arrayList, elem, 0) != -1;
+}
+;
+_.get_0 = function get_5(index){
+  return $get(this.arrayList, index);
+}
+;
+_.getClass$ = function getClass_83(){
+  return Ljava_util_Vector_2_classLit;
+}
+;
+_.isEmpty = function isEmpty_2(){
+  return this.arrayList.size == 0;
+}
+;
+_.iterator = function iterator_4(){
+  return new AbstractList$IteratorImpl_0(this.arrayList);
+}
+;
+_.set = function set_3(index, elem){
+  return $set_0(this.arrayList, index, elem);
+}
+;
+_.size_0 = function size_10(){
+  return this.arrayList.size;
+}
+;
+_.toArray = function toArray_2(a){
+  return $toArray_1(this.arrayList, a);
+}
+;
+_.toString$ = function toString_17(){
+  return $toString(this.arrayList);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$List]);
+_.arrayList = null;
+function $peek(this$static){
+  var sz;
+  sz = this$static.arrayList.size;
+  if (sz > 0) {
+    return $get(this$static.arrayList, sz - 1);
+  }
+   else {
+    throw new EmptyStackException_0;
+  }
+}
+
+function $pop(this$static){
+  var sz;
+  sz = this$static.arrayList.size;
+  if (sz > 0) {
+    return $remove(this$static.arrayList, sz - 1);
+  }
+   else {
+    throw new EmptyStackException_0;
+  }
+}
+
+function $push_0(this$static, o){
+  $add(this$static.arrayList, o);
+  return o;
+}
+
+function Stack_0(){
+  this.arrayList = new ArrayList_0;
+}
+
+function Stack(){
+}
+
+_ = Stack_0.prototype = Stack.prototype = new Vector;
+_.getClass$ = function getClass_84(){
+  return Ljava_util_Stack_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$List]);
+function equalsWithNullCheck(a, b){
+  return maskUndefined(a) === maskUndefined(b) || a != null && equals__devirtual$(a, b);
+}
+
+function $add_2(this$static, e){
+  return $add_1(this$static.al, e);
+}
+
+function CopyOnWriteArraySet_0(){
+  this.al = new HashSet_0;
+}
+
+function CopyOnWriteArraySet(){
+}
+
+_ = CopyOnWriteArraySet_0.prototype = CopyOnWriteArraySet.prototype = new Object_0;
+_.add = function add_8(e){
+  return $add_1(this.al, e);
+}
+;
+_.equals$ = function equals_9(o){
+  var elements, i, it, k, len, matched, set, x;
+  if (o === this)
+    return true;
+  if (!instanceOf(o, Q$Set))
+    return false;
+  set = o;
+  it = set.iterator();
+  elements = $toArray(this.al);
+  len = elements.length;
+  matched = initDim(_3Z_classLit, makeCastMap([Q$Serializable]), -1, len, 2);
+  k = 0;
+  outer: while (it.hasNext()) {
+    if (++k > len)
+      return false;
+    x = it.next_0();
+    for (i = 0; i < len; ++i) {
+      if (!matched[i] && (x == null?elements[i] == null:equals__devirtual$(x, elements[i]))) {
+        matched[i] = true;
+        continue outer;
+      }
+    }
+    return false;
+  }
+  return k == len;
+}
+;
+_.getClass$ = function getClass_85(){
+  return Ljava_util_concurrent_CopyOnWriteArraySet_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_10(){
+  return getHashCode(this);
+}
+;
+_.iterator = function iterator_5(){
+  return $iterator($keySet(this.al.map));
+}
+;
+_.size_0 = function size_11(){
+  return this.al.map.size_0();
+}
+;
+_.toArray = function toArray_3(a){
+  return $toArray_0(this.al, a);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Set]);
+_.al = null;
+function NotImplementedException_0(){
+  RuntimeException_1.call(this, 'Not Implemented');
+}
+
+function NotImplementedException(){
+}
+
+_ = NotImplementedException_0.prototype = NotImplementedException.prototype = new RuntimeException;
+_.getClass$ = function getClass_86(){
+  return Lorg_spoofax_NotImplementedException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function $read(this$static){
+  var c;
+  if (this$static.position >= this$static.data.length)
+    return -1;
+  c = $charAt(this$static.data, this$static.position++);
+  c = $truncateUnicodeChar(c);
+  return c;
+}
+
+function $truncateUnicodeChar(c){
+  c >= 253 && (isLetter(c)?(c = 255):isDigit(c)?(c = 254):(c = 253));
+  return c;
+}
+
+function PushbackStringIterator_0(data){
+  this.data = data;
+  this.position = 0;
+}
+
+function PushbackStringIterator(){
+}
+
+_ = PushbackStringIterator_0.prototype = PushbackStringIterator.prototype = new Object_0;
+_.getClass$ = function getClass_87(){
+  return Lorg_spoofax_PushbackStringIterator_2_classLit;
+}
+;
+_.data = null;
+_.position = 0;
+function $isParseNode(this$static){
+  switch (this$static.getNodeType()) {
+    case 2:
+    case 6:
+    case 4:
+    case 5:
+      return true;
+    default:return false;
+  }
+}
+
+function AbstractParseNode(){
+}
+
+_ = AbstractParseNode.prototype = new Object_0;
+_.getClass$ = function getClass_88(){
+  return Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$AbstractParseNode]);
+function ActionItem(){
+}
+
+_ = ActionItem.prototype = new Object_0;
+_.getClass$ = function getClass_89(){
+  return Lorg_spoofax_jsglr_client_ActionItem_2_classLit;
+}
+;
+_.toString$ = function toString_18(){
+  switch (this.type) {
+    case 1:
+      return 'reduce';
+    case 2:
+      return 'shift';
+    case 3:
+      return 'accept';
+    case 4:
+      return 'reduce_la';
+  }
+  return null;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ActionItem]);
+_.type = 0;
+function Accept_0(){
+  this.type = 3;
+}
+
+function Accept(){
+}
+
+_ = Accept_0.prototype = Accept.prototype = new ActionItem;
+_.getClass$ = function getClass_90(){
+  return Lorg_spoofax_jsglr_client_Accept_2_classLit;
+}
+;
+_.toString$ = function toString_19(){
+  return 'accept';
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ActionItem]);
+function $accepts(this$static, currentToken){
+  return $within(this$static.ranges, currentToken);
+}
+
+function Action_0(ranges, items){
+  this.ranges = ranges;
+  this.items = items;
+}
+
+function Action(){
+}
+
+_ = Action_0.prototype = Action.prototype = new Object_0;
+_.getClass$ = function getClass_91(){
+  return Lorg_spoofax_jsglr_client_Action_2_classLit;
+}
+;
+_.toString$ = function toString_20(){
+  var i, sb;
+  sb = new StringBuilder_0;
+  sb.impl.string += 'action(';
+  $append_5(sb, this.ranges);
+  sb.impl.string += ', [';
+  for (i = 0; i < this.items.length; ++i) {
+    $append_5(sb, this.items[i]);
+    i < this.items.length - 1 && (sb.impl.string += ', ' , sb);
+  }
+  sb.impl.string += '])';
+  return sb.impl.string;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Action]);
+_.items = null;
+_.ranges = null;
+function ActionState_0(st, s){
+  this.st = st;
+  this.s = s;
+}
+
+function ActionState(){
+}
+
+_ = ActionState_0.prototype = ActionState.prototype = new Object_0;
+_.getClass$ = function getClass_92(){
+  return Lorg_spoofax_jsglr_client_ActionState_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable]);
+_.s = null;
+_.st = null;
+function AmbiguityManager_0(){
+  new HashMap_0;
+}
+
+function AmbiguityManager(){
+}
+
+_ = AmbiguityManager_0.prototype = AmbiguityManager.prototype = new Object_0;
+_.getClass$ = function getClass_93(){
+  return Lorg_spoofax_jsglr_client_AmbiguityManager_2_classLit;
+}
+;
+_.ambiguitiesCount = 0;
+_.ambiguityCallsCount = 0;
+_.eagernessFilterSucceededCount = 0;
+_.eagernessGreaterCallsCount = 0;
+_.injectionCallsCount = 0;
+_.injectionFilterSucceededCount = 0;
+_.maxNumberOfAmbiguitiesCount = 0;
+function $buildTree(this$static, node){
+  return node.toTreeBottomup(this$static);
+}
+
+function BottomupTreeBuilder(){
+}
+
+_ = BottomupTreeBuilder.prototype = new Object_0;
+_.getClass$ = function getClass_94(){
+  return Lorg_spoofax_jsglr_client_BottomupTreeBuilder_2_classLit;
+}
+;
+function $buildCycle(this$static, labelNumber){
+  var label;
+  label = labelNumber == -1?$makeString(this$static.factory_0, '?'):this$static.labels[labelNumber - this$static.labelStart];
+  return $makeAppl(this$static.factory_0, this$static.cycleConstructor, initValues(_3Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit, makeCastMap([Q$Serializable]), Q$IStrategoTerm, [label]), null);
+}
+
+function $buildNode(this$static, labelNumber, subtrees){
+  var i, ls;
+  ls = $makeList_0(this$static.factory_0);
+  for (i = subtrees.size - 1; i >= 0; --i) {
+    ls = $makeListCons(this$static.factory_0, (checkIndex(i, subtrees.size) , subtrees.array[i]), ls);
+  }
+  return $makeAppl(this$static.factory_0, this$static.applIStrategoConstructor, initValues(_3Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit, makeCastMap([Q$Serializable]), Q$IStrategoTerm, [this$static.labels[labelNumber - this$static.labelStart], ls]), null);
+}
+
+function $buildProduction(this$static, productionNumber){
+  return $makeInt(this$static.factory_0, productionNumber);
+}
+
+function $buildTreeTop(this$static, node, ambCount){
+  return $makeAppl(this$static.factory_0, this$static.parseTreeIStrategoConstructor, initValues(_3Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit, makeCastMap([Q$Serializable]), Q$IStrategoTerm, [node, $makeInt(this$static.factory_0, ambCount)]), null);
+}
+
+function $initializeLabel(this$static, labelNumber, parseTreeProduction){
+  setCheck(this$static.labels, labelNumber - this$static.labelStart, parseTreeProduction);
+}
+
+function $initializeTable(this$static, labelCount){
+  this$static.labels = initDim(_3Lorg_spoofax_interpreter_terms_IStrategoAppl_2_classLit, makeCastMap([Q$Serializable]), Q$IStrategoAppl, labelCount - 257, 0);
+  this$static.labelStart = 257;
+}
+
+function Asfix2TreeBuilder_0(){
+  Asfix2TreeBuilder_1.call(this, new TermFactory_0);
+}
+
+function Asfix2TreeBuilder_1(factory){
+  this.factory_0 = factory;
+  this.applIStrategoConstructor = factory.makeConstructor_0('appl', 2);
+  this.ambIStrategoConstructor = factory.makeConstructor_0('amb', 1);
+  this.parseTreeIStrategoConstructor = factory.makeConstructor_0('parsetree', 2);
+  this.cycleConstructor = factory.makeConstructor_0('cycle', 1);
+}
+
+function Asfix2TreeBuilder(){
+}
+
+_ = Asfix2TreeBuilder_0.prototype = Asfix2TreeBuilder.prototype = new BottomupTreeBuilder;
+_.getClass$ = function getClass_95(){
+  return Lorg_spoofax_jsglr_client_Asfix2TreeBuilder_2_classLit;
+}
+;
+_.ambIStrategoConstructor = null;
+_.applIStrategoConstructor = null;
+_.cycleConstructor = null;
+_.factory_0 = null;
+_.labelStart = 0;
+_.labels = null;
+_.parseTreeIStrategoConstructor = null;
+function Associativity_0(){
+}
+
+function Associativity(){
+}
+
+_ = Associativity_0.prototype = Associativity.prototype = new Object_0;
+_.getClass$ = function getClass_96(){
+  return Lorg_spoofax_jsglr_client_Associativity_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Associativity]);
+function $clinit_CycleParseNode(){
+  $clinit_CycleParseNode = nullMethod;
+  NO_CHILDREN = initDim(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, 0, 0);
+}
+
+function $getTargetLabel(this$static){
+  var target;
+  target = this$static.target;
+  while (target.getNodeType() == 3) {
+    target = target.getChildren()[0];
+  }
+  if ($isParseNode(target))
+    return $getLabel_0(target);
+  return -1;
+}
+
+function CycleParseNode_0(target){
+  $clinit_CycleParseNode();
+  this.target = target;
+}
+
+function CycleParseNode(){
+}
+
+_ = CycleParseNode_0.prototype = CycleParseNode.prototype = new AbstractParseNode;
+_.equals$ = function equals_10(obj){
+  var other;
+  if (this === obj)
+    return true;
+  if (obj == null)
+    return false;
+  if (Lorg_spoofax_jsglr_client_CycleParseNode_2_classLit != getClass__devirtual$(obj))
+    return false;
+  other = obj;
+  if (!this.target) {
+    if (other.target)
+      return false;
+  }
+   else if (!$equals_1(this.target, other.target))
+    return false;
+  return true;
+}
+;
+_.getChildren = function getChildren(){
+  return NO_CHILDREN;
+}
+;
+_.getClass$ = function getClass_97(){
+  return Lorg_spoofax_jsglr_client_CycleParseNode_2_classLit;
+}
+;
+_.getLabel = function getLabel(){
+  return $getLabel_0(this.target);
+}
+;
+_.getNodeType = function getNodeType(){
+  return 7;
+}
+;
+_.hashCode$ = function hashCode_11(){
+  var result;
+  result = 31 + (!this.target?0:$hashCode(this.target));
+  return result;
+}
+;
+_.isParseProductionChain_0 = function isParseProductionChain(){
+  return false;
+}
+;
+_.reject = function reject(){
+  throw new UnsupportedOperationException_0;
+}
+;
+_.toString$ = function toString_21(){
+  return 'cycle(' + this.target + ')';
+}
+;
+_.toTreeBottomup = function toTreeBottomup(builder){
+  return $buildCycle(builder, $getTargetLabel(this));
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$AbstractParseNode]);
+_.target = null;
+var NO_CHILDREN;
+function $addTopSortAlternatives(this$static, t, sort, results){
+  var amb, amb$array, amb$index, amb$max, prod;
+  for (amb$array = t.getChildren() , amb$index = 0 , amb$max = amb$array.length; amb$index < amb$max; ++amb$index) {
+    amb = amb$array[amb$index];
+    if (amb.getNodeType() == 3) {
+      $addTopSortAlternatives(this$static, amb, sort, results);
+    }
+     else {
+      prod = $isParseNode(amb)?$getProduction(this$static.parseTable, $getLabel_0(amb)):$getProduction(this$static.parseTable, amb.prod);
+      $matchProdOnTopSort(this$static, prod, sort) && results.add(amb);
+    }
+  }
+}
+
+function $applyAssociativityPriorityFilter(this$static, t){
+  var n, prodLabel, r;
+  r = t;
+  if ($isParseNode(t)) {
+    prodLabel = $getProductionLabel(this$static, t);
+    n = t;
+    this$static.filterAssociativity && (prodLabel.productionAttributes.type == 5?(r = $applyLeftAssociativeFilter(this$static, n, prodLabel)):prodLabel.productionAttributes.type == 6 && (r = $applyRightAssociativeFilter(this$static, n, prodLabel)));
+    if (this$static.filterPriorities && $hasPriorities(this$static.parseTable)) {
+      if (!$getPriorities(this$static.parseTable, prodLabel).isEmpty()) {
+        if (r.getNodeType() == 3) {
+          return r;
+        }
+        return $applyPriorityFilter(this$static, r, prodLabel);
+      }
+    }
+  }
+  return r;
+}
+
+function $applyFilters(this$static, parser, root, sort){
+  var $e0, e, t;
+  t = root;
+  try {
+    try {
+      $initializeFromParser(this$static, parser);
+      t = $applyTopSortFilter(this$static, sort, root);
+      if (this$static.filterAny) {
+        t = (this$static.filterCycles && this$static.ambiguityManager.maxNumberOfAmbiguitiesCount > 0 && (new PositionMap_0(this$static.ambiguityManager.maxNumberOfAmbiguitiesCount) , this$static.ambiguityManager.ambiguitiesCount = 0 , $computeCyclicTerm(t)) , t);
+        t = $filterTree(this$static, t, false);
+      }
+      if (this$static.filterReject && !!this$static.rejectedBranch && !parser.useIntegratedRecovery)
+        throw new FilterException_1('Unexpected reject annotation in ' + $yieldTree(this$static, this$static.rejectedBranch));
+    }
+     catch ($e0) {
+      $e0 = caught($e0);
+      if (instanceOf($e0, Q$RuntimeException)) {
+        e = $e0;
+        throw new FilterException_0('Runtime exception when applying filters', e);
+      }
+       else 
+        throw $e0;
+    }
+     finally {
+      this$static.rejectedBranch = null;
+    }
+    return $yieldTreeTop(this$static, t);
+  }
+   finally {
+    $initializeFromParser(this$static, null);
+  }
+}
+
+function $applyLeftAssociativeFilter(this$static, t, prodLabel){
+  var amb, amb$array, amb$index, amb$max, i, kids, last, newAmbiguities, other, rest;
+  newAmbiguities = new ArrayList_0;
+  kids = t.kids;
+  last = kids[kids.length - 1];
+  if (last.getNodeType() == 3) {
+    for (amb$array = last.getChildren() , amb$index = 0 , amb$max = amb$array.length; amb$index < amb$max; ++amb$index) {
+      amb = amb$array[amb$index];
+      (amb.getNodeType() == 3 || !$equals_0($getLabel_1(this$static.parseTable, $getLabel_0(amb)), prodLabel)) && (setCheck(newAmbiguities.array, newAmbiguities.size++, amb) , true);
+    }
+    if (newAmbiguities.size == 0) {
+      throw new FilterException_2;
+    }
+     else {
+      rest = initDim(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, kids.length, 0);
+      for (i = 0; i < kids.length - 1; ++i) {
+        setCheck(rest, i, kids[i]);
+      }
+      if (newAmbiguities.size > 1) {
+        last = createAmbNode($toArray_1(newAmbiguities, initDim(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, newAmbiguities.size, 0)));
+        ++this$static.ambiguityManager.ambiguitiesCount;
+      }
+       else {
+        last = (checkIndex(0, newAmbiguities.size) , newAmbiguities.array[0]);
+      }
+      setCheck(rest, rest.length - 1, last);
+      ++this$static.ambiguityManager.ambiguitiesCount;
+      return new ParseNode_0($getLabel_0(t), rest, 2);
+    }
+  }
+   else if ($isParseNode(last)) {
+    other = $getLabel_1(this$static.parseTable, $getLabel_0(last));
+    if (other == prodLabel || !!other && other.labelNumber == prodLabel.labelNumber) {
+      throw new FilterException_2;
+    }
+  }
+  return t;
+}
+
+function $applyPriorityFilter(this$static, t, prodLabel){
+  var amb, amb$array, amb$index, amb$max, injAmb, injection, kid, kid$array, kid$index, kid$max, kidnumber, l0, l1, label, newAmbiguities, newKid, newKids;
+  newAmbiguities = new ArrayList_0;
+  newKids = new ArrayList_0;
+  l0 = prodLabel.labelNumber;
+  kidnumber = 0;
+  for (kid$array = t.kids , kid$index = 0 , kid$max = kid$array.length; kid$index < kid$max; ++kid$index) {
+    kid = kid$array[kid$index];
+    newKid = kid;
+    injection = $jumpOverInjections(this$static, kid);
+    if (injection.getNodeType() == 3) {
+      newAmbiguities.array = initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, 0, 0);
+      newAmbiguities.size = 0;
+      for (amb$array = injection.getChildren() , amb$index = 0 , amb$max = amb$array.length; amb$index < amb$max; ++amb$index) {
+        amb = amb$array[amb$index];
+        injAmb = $jumpOverInjections(this$static, amb);
+        if ($isParseNode(injAmb)) {
+          label = $getProductionLabel(this$static, t);
+          $hasGreaterPriority(this$static, l0, label.labelNumber, kidnumber) && (setCheck(newAmbiguities.array, newAmbiguities.size++, amb) , true);
+        }
+      }
+      if (newAmbiguities.size == 0) {
+        if (this$static.filterStrict) {
+          throw new FilterException_2;
+        }
+         else {
+          return t;
+        }
+      }
+       else {
+        if (newAmbiguities.size > 1) {
+          createAmbNode($toArray_1(newAmbiguities, initDim(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, newAmbiguities.size, 0)));
+          ++this$static.ambiguityManager.ambiguitiesCount;
+        }
+         else {
+          checkIndex(0, newAmbiguities.size);
+          newAmbiguities.array[0];
+        }
+        newKid = $replaceUnderInjections();
+      }
+    }
+     else if ($isParseNode(injection)) {
+      l1 = $getLabel_0(injection);
+      if ($hasGreaterPriority(this$static, l0, l1, kidnumber)) {
+        throw new FilterException_2;
+      }
+    }
+    setCheck(newKids.array, newKids.size++, newKid);
+    ++kidnumber;
+  }
+  return new ParseNode_0($getLabel_0(t), $toArray_1(newKids, initDim(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, newKids.size, 0)), 2);
+}
+
+function $applyRightAssociativeFilter(this$static, t, prodLabel){
+  var additionalAmbNodes, amb, amb$array, amb$index, amb$max, extraAmb, firstKid, i, kids, newAmbiguities, restKids;
+  newAmbiguities = new ArrayList_0;
+  kids = t.kids;
+  firstKid = kids[0];
+  if (firstKid.getNodeType() == 3) {
+    for (amb$array = firstKid.getChildren() , amb$index = 0 , amb$max = amb$array.length; amb$index < amb$max; ++amb$index) {
+      amb = amb$array[amb$index];
+      (amb.getNodeType() == 3 || $getLabel_0(amb) != prodLabel.labelNumber) && (setCheck(newAmbiguities.array, newAmbiguities.size++, amb) , true);
+    }
+    additionalAmbNodes = newAmbiguities.size == 0?0:1;
+    restKids = initDim(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, t.kids.length - 1 + additionalAmbNodes, 0);
+    for (i = 0; i < restKids.length; ++i) {
+      setCheck(restKids, i, kids[i + 1]);
+    }
+    if (newAmbiguities.size == 0) {
+      throw new FilterException_2;
+    }
+     else {
+      if (newAmbiguities.size > 1) {
+        extraAmb = createAmbNode($toArray_1(newAmbiguities, initDim(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, newAmbiguities.size, 0)));
+        ++this$static.ambiguityManager.ambiguitiesCount;
+      }
+       else {
+        extraAmb = (checkIndex(0, newAmbiguities.size) , newAmbiguities.array[0]);
+      }
+      setCheck(restKids, restKids.length - 1, extraAmb);
+    }
+    return new ParseNode_0($getLabel_0(t), restKids, 2);
+  }
+   else if ($isParseNode(firstKid)) {
+    if ($getLabel_0(firstKid) == prodLabel.labelNumber) {
+      throw new FilterException_2;
+    }
+  }
+  return t;
+}
+
+function $applyTopSortFilter(this$static, sort, t){
+  if (sort != null && this$static.filterTopSort) {
+    t = $selectOnTopSort(this$static, t, sort);
+    if (!t) {
+      throw new StartSymbolException_0('Desired start symbol not found: ' + sort);
+    }
+  }
+  return t;
+}
+
+function $computeCyclicTerm(t){
+  if (instanceOf(t, Q$ParseProductionNode)) {
+    return null;
+  }
+   else if ($isParseNode(t)) {
+    throw new NotImplementedException_0;
+  }
+   else {
+    throw new FatalException_0;
+  }
+}
+
+function $computeDistinctArguments(leftArgs, rightArgs){
+  var i, r;
+  r = 0;
+  for (i = 0; i < leftArgs.length; ++i) {
+    leftArgs[i].equals$(rightArgs[i]) || ++r;
+  }
+  return r;
+}
+
+function $countAllInjections(this$static, t){
+  var c;
+  if (t.getNodeType() == 3) {
+    return t.getChildren().length == 0?0:$countAllInjections(this$static, t.getChildren()[0]);
+  }
+   else if ($isParseNode(t)) {
+    c = $getProductionLabel(this$static, t).injection?1:0;
+    return c + $countAllInjections_0(this$static, t.kids);
+  }
+  return 0;
+}
+
+function $countAllInjections_0(this$static, ls){
+  var i, max, r;
+  r = 0;
+  for (i = 0 , max = ls.length; i < max; ++i) {
+    r += $countAllInjections(this$static, ls[i]);
+  }
+  return r;
+}
+
+function $countAvoids(this$static, t){
+  var type;
+  if (t.getNodeType() == 3) {
+    return $countAvoids_0(this$static, t.getChildren());
+  }
+   else if ($isParseNode(t)) {
+    type = $getLabel(this$static, t).productionAttributes.type;
+    if (type == 2) {
+      return 0;
+    }
+     else if (type == 4) {
+      return 1;
+    }
+    return $countAvoids_0(this$static, t.kids);
+  }
+  return 0;
+}
+
+function $countAvoids_0(this$static, ls){
+  var n, n$index, n$max, r;
+  r = 0;
+  for (n$index = 0 , n$max = ls.length; n$index < n$max; ++n$index) {
+    n = ls[n$index];
+    r += $countAvoids(this$static, n);
+  }
+  return r;
+}
+
+function $countPrefers(this$static, t){
+  var type;
+  if (t.getNodeType() == 3) {
+    return $countPrefers_0(this$static, t.getChildren());
+  }
+   else if ($isParseNode(t)) {
+    type = $getLabel(this$static, t).productionAttributes.type;
+    if (type == 2) {
+      return 1;
+    }
+     else if (type == 4) {
+      return 0;
+    }
+    return $countPrefers_0(this$static, t.kids);
+  }
+  return 0;
+}
+
+function $countPrefers_0(this$static, ls){
+  var n, n$index, n$max, r;
+  r = 0;
+  for (n$index = 0 , n$max = ls.length; n$index < n$max; ++n$index) {
+    n = ls[n$index];
+    r += $countPrefers(this$static, n);
+  }
+  return r;
+}
+
+function $filter(this$static, left, right){
+  var r;
+  if (left.equals$(right)) {
+    return 2;
+  }
+  if (this$static.filterDirectPreference && $hasPrefersOrAvoids(this$static.parseTable)) {
+    r = $filterOnIndirectPrefers(this$static, left, right);
+    if (r != 1) {
+      return r;
+    }
+  }
+  if (this$static.filterPreferenceCount && $hasPrefersOrAvoids(this$static.parseTable)) {
+    r = $filterOnPreferCount(this$static, left, right);
+    if (r != 1) {
+      return r;
+    }
+  }
+  if (this$static.filterInjectionCount) {
+    r = $filterOnInjectionCount(this$static, left, right);
+    if (r != 1) {
+      return r;
+    }
+  }
+  return $filterPermissiveLiterals(left, right);
+}
+
+function $filterAmbiguities(this$static, ambs){
+  var amb, amb$index, amb$iterator, amb$max, newAmb, newAmbiguities, oldAmbiguities;
+  newAmbiguities = new ArrayList_0;
+  for (amb$index = 0 , amb$max = ambs.length; amb$index < amb$max; ++amb$index) {
+    amb = ambs[amb$index];
+    newAmb = $filterTree(this$static, amb, true);
+    !!newAmb && !this$static.rejectedBranch && (setCheck(newAmbiguities.array, newAmbiguities.size++, newAmb) , true);
+    this$static.rejectedBranch = null;
+  }
+  if (newAmbiguities.size > 1) {
+    oldAmbiguities = new ArrayList_1(newAmbiguities);
+    for (amb$iterator = new AbstractList$IteratorImpl_0(oldAmbiguities); amb$iterator.i < amb$iterator.this$0_0.size_0();) {
+      amb = $next(amb$iterator);
+      $remove_0(newAmbiguities, amb) && (newAmbiguities = $filterAmbiguityList(this$static, newAmbiguities, amb));
+    }
+  }
+  if (newAmbiguities.size == 0) {
+    return this$static.rejectedBranch = new ParseNode_0(-1, ambs, 3);
+  }
+  if (newAmbiguities.size == 1) {
+    return checkIndex(0, newAmbiguities.size) , newAmbiguities.array[0];
+  }
+  ++this$static.ambiguityManager.ambiguitiesCount;
+  return createAmbNode($toArray_1(newAmbiguities, initDim(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, newAmbiguities.size, 0)));
+}
+
+function $filterAmbiguityList(this$static, ambs, t){
+  var amb, i, keepT, max, r;
+  keepT = true;
+  r = new ArrayList_0;
+  if (ambs.size == 0) {
+    setCheck(r.array, r.size++, t);
+    return r;
+  }
+  for (i = 0 , max = ambs.size; i < max; ++i) {
+    amb = (checkIndex(i, ambs.size) , ambs.array[i]);
+    switch ($filter(this$static, t, amb)) {
+      case 1:
+        setCheck(r.array, r.size++, amb);
+        break;
+      case 3:
+        setCheck(r.array, r.size++, amb);
+        keepT = false;
+    }
+  }
+  keepT && (setCheck(r.array, r.size++, t) , true);
+  return r;
+}
+
+function $filterOnDirectPrefers(this$static, left, right){
+  if ($isLeftMoreEager(this$static, left, right)) {
+    return 2;
+  }
+  if ($isLeftMoreEager(this$static, right, left)) {
+    return 3;
+  }
+  return 1;
+}
+
+function $filterOnIndirectPrefers(this$static, left, right){
+  var diffs, i, l_0, leftArg, leftArgs, r, rightArg, rightArgs;
+  if (left.getNodeType() == 3 || right.getNodeType() == 3) {
+    return 1;
+  }
+  if (!$equals_0($getLabel(this$static, left), $getLabel(this$static, right))) {
+    return $filterOnDirectPrefers(this$static, left, right);
+  }
+  l_0 = left;
+  r = right;
+  leftArgs = l_0.kids;
+  rightArgs = r.kids;
+  diffs = $computeDistinctArguments(leftArgs, rightArgs);
+  if (diffs == 1) {
+    for (i = 0; i < leftArgs.length; ++i) {
+      leftArg = leftArgs[i];
+      rightArg = rightArgs[i];
+      if (!leftArg.equals$(rightArg)) {
+        return $filterOnIndirectPrefers(this$static, leftArg, rightArg);
+      }
+    }
+  }
+  return 1;
+}
+
+function $filterOnInjectionCount(this$static, left, right){
+  var leftInjectionCount, rightInjectionCount;
+  ++this$static.ambiguityManager.injectionCallsCount;
+  leftInjectionCount = $countAllInjections(this$static, left);
+  rightInjectionCount = $countAllInjections(this$static, right);
+  leftInjectionCount != rightInjectionCount && ++this$static.ambiguityManager.injectionFilterSucceededCount;
+  if (leftInjectionCount > rightInjectionCount) {
+    return 3;
+  }
+   else if (rightInjectionCount > leftInjectionCount) {
+    return 2;
+  }
+  return 1;
+}
+
+function $filterOnPreferCount(this$static, left, right){
+  var leftAvoidCount, leftPreferCount, r, rightAvoidCount, rightPreferCount;
+  ++this$static.ambiguityManager.eagernessGreaterCallsCount;
+  r = 1;
+  if (this$static.parseTable.hasPrefers || this$static.parseTable.hasAvoids) {
+    leftPreferCount = $countPrefers(this$static, left);
+    rightPreferCount = $countPrefers(this$static, right);
+    leftAvoidCount = $countAvoids(this$static, left);
+    rightAvoidCount = $countAvoids(this$static, right);
+    (leftPreferCount > rightPreferCount && leftAvoidCount <= rightAvoidCount || leftPreferCount == rightPreferCount && leftAvoidCount < rightAvoidCount) && (r = 2);
+    (rightPreferCount > leftPreferCount && rightAvoidCount <= leftAvoidCount || rightPreferCount == leftPreferCount && rightAvoidCount < leftAvoidCount) && (r != 1?(r = 1):(r = 3));
+  }
+  r != 1 && ++this$static.ambiguityManager.eagernessFilterSucceededCount;
+  return r;
+}
+
+function $filterPermissiveLiterals(left, right){
+  var leftKids, rightKids;
+  if ($isParseNode(left) && $isParseNode(right)) {
+    leftKids = left.kids;
+    rightKids = right.kids;
+    if (leftKids.length > 0 && rightKids.length == 1) {
+      if (instanceOf(leftKids[0], Q$ParseProductionNode) && rightKids[0].equals$(left)) {
+        return 2;
+      }
+    }
+  }
+  return 1;
+}
+
+function $filterTree(this$static, node, inAmbiguityCluster){
+  var ambs, args, changed, i, input, output, pending, pendingPeekPos, t;
+  input = new Stack_0;
+  output = new Stack_0;
+  pending = new Stack_0;
+  $add(input.arrayList, node);
+  while (input.arrayList.size != 0 || pending.arrayList.size != 0) {
+    pendingPeekPos = pending.arrayList.size == 0?-1:output.arrayList.size - $peek(pending).getChildren().length - 1;
+    if (pending.arrayList.size != 0 && pendingPeekPos >= 0 && maskUndefined($get(output.arrayList, pendingPeekPos)) === maskUndefined($peek(pending))) {
+      t = $pop(pending);
+      args = initDim(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, t.getChildren().length, 0);
+      changed = false;
+      for (i = t.getChildren().length - 1; i >= 0; --i) {
+        setCheck(args, i, $pop(output));
+        changed = changed || args[i] != t.getChildren()[i];
+      }
+      $pop(output);
+      changed && (t = new ParseNode_0(t.getLabel(), args, t.getNodeType()));
+      this$static.filterAssociativity && (t = $applyAssociativityPriorityFilter(this$static, t));
+      $add(output.arrayList, t);
+    }
+     else {
+      t = $pop(input);
+      switch (t.getNodeType()) {
+        case 3:
+          if (inAmbiguityCluster && output.arrayList.size == 0) {
+            if (this$static.filterReject && this$static.parseTable.hasRejects && t.getNodeType() == 6) {
+              $add(output.arrayList, t);
+            }
+             else {
+              ambs = t.getChildren();
+              $push_0(output, $filterAmbiguities(this$static, ambs));
+            }
+          }
+           else {
+            ambs = t.getChildren();
+            t = $filterAmbiguities(this$static, ambs);
+            $add(output.arrayList, t);
+          }
+
+          break;
+        case 2:
+        case 5:
+        case 4:
+        case 6:
+          if (this$static.filterReject && this$static.parseTable.hasRejects && t.getNodeType() == 6) {
+            $add(output.arrayList, t);
+            this$static.rejectedBranch = t;
+          }
+           else if (t.getChildren().length > 0 && !t.isParseProductionChain_0()) {
+            $add(output.arrayList, t);
+            $add(pending.arrayList, t);
+            for (i = t.getChildren().length - 1; i >= 0; --i)
+              $push_0(input, t.getChildren()[i]);
+          }
+           else {
+            $add(output.arrayList, t);
+          }
+
+          break;
+        case 7:
+        case 1:
+          $add(output.arrayList, t);
+          break;
+        default:throw new IllegalStateException_1('Unknown node type: ' + t);
+      }
+    }
+  }
+  return $peek(output);
+}
+
+function $getLabel(this$static, t){
+  var n;
+  if ($isParseNode(t)) {
+    n = t;
+    return $getLabel_1(this$static.parseTable, $getLabel_0(n));
+  }
+   else if (instanceOf(t, Q$ParseProductionNode)) {
+    n = t;
+    return $getLabel_1(this$static.parseTable, n.prod);
+  }
+  return null;
+}
+
+function $getProductionLabel(this$static, t){
+  if ($isParseNode(t)) {
+    return $getLabel_1(this$static.parseTable, $getLabel_0(t));
+  }
+   else if (instanceOf(t, Q$ParseProductionNode)) {
+    return $getLabel_1(this$static.parseTable, t.prod);
+  }
+  return null;
+}
+
+function $hasGreaterPriority(this$static, l0, l1, arg){
+  var i, p, prios, size;
+  prios = $lookupGtrPriority(this$static, $getLabel_1(this$static.parseTable, l0));
+  for (i = 0 , size = prios.size_0(); i < size; ++i) {
+    p = prios.get_0(i);
+    if (l1 == p.right) {
+      if (p.arg == -1 || p.arg == arg) {
+        return true;
+      }
+    }
+  }
+  return false;
+}
+
+function $initializeFromParser(this$static, parser){
+  if (!parser) {
+    this$static.parser = null;
+    this$static.parseTable = null;
+    this$static.ambiguityManager = null;
+  }
+   else {
+    this$static.parser = parser;
+    this$static.parseTable = parser.parseTable;
+    this$static.prodReader = new ProductionAttributeReader_0(this$static.parseTable.factory_0);
+    this$static.ambiguityManager = parser.ambiguityManager;
+  }
+}
+
+function $isLeftMoreEager(this$static, left, right){
+  var newLeft, newRight;
+  if ($isMoreEager(this$static, left, right)) {
+    return true;
+  }
+  newLeft = $jumpOverInjectionsModuloEagerness(this$static, left);
+  newRight = $jumpOverInjectionsModuloEagerness(this$static, right);
+  if ($isParseNode(newLeft) && $isParseNode(newRight)) {
+    return $isMoreEager(this$static, newLeft, newRight);
+  }
+  return false;
+}
+
+function $isMoreEager(this$static, left, right){
+  var leftLabel, leftProd, rightLabel, rightProd;
+  leftLabel = $getLabel_0(left);
+  rightLabel = $getLabel_0(right);
+  leftProd = $getLabel_1(this$static.parseTable, leftLabel);
+  rightProd = $getLabel_1(this$static.parseTable, rightLabel);
+  if ($isMoreEager_0(leftProd.productionAttributes, rightProd.productionAttributes)) {
+    return true;
+  }
+  return false;
+}
+
+function $isUserDefinedLabel(this$static, prod){
+  var l_0;
+  l_0 = $lookupInjection(this$static.parseTable, prod);
+  if (!l_0) {
+    return false;
+  }
+  return l_0.injection;
+}
+
+function $jumpOverInjections(this$static, t){
+  var n, prod, x;
+  if ($isParseNode(t)) {
+    prod = $getLabel_0(t);
+    n = t;
+    while ($isUserDefinedLabel(this$static, prod)) {
+      x = n.kids[0];
+      if ($isParseNode(x)) {
+        n = x;
+        prod = $getLabel_0(n);
+      }
+       else {
+        return x;
+      }
+    }
+  }
+  return t;
+}
+
+function $jumpOverInjectionsModuloEagerness(this$static, t){
+  var prod, prodType, prodTypeX;
+  prodType = $getLabel(this$static, t).productionAttributes.type;
+  if ($isParseNode(t) && prodType != 2 && prodType != 4) {
+    prod = $getLabel(this$static, t);
+    while (prod.injection) {
+      t = t.kids[0];
+      if ($isParseNode(t)) {
+        prodTypeX = $getLabel(this$static, t).productionAttributes.type;
+        if (prodTypeX != 2 && prodTypeX != 4) {
+          prod = $getLabel(this$static, t);
+          continue;
+        }
+      }
+      return t;
+    }
+  }
+  return t;
+}
+
+function $lookupGtrPriority(this$static, prodLabel){
+  return $getPriorities(this$static.parseTable, prodLabel);
+}
+
+function $matchProdOnTopSort(this$static, prod, sort){
+  var foundSort, lhs;
+  lhs = prod.getSubterm(0);
+  prod.getSubterm(1);
+  foundSort = $tryGetFirstSort(this$static.prodReader, lhs);
+  return $equals(sort, foundSort);
+}
+
+function $replaceUnderInjections(){
+  throw new FilterException_0('replaceUnderInjections is not implemented', new NotImplementedException_0);
+}
+
+function $selectOnTopSort(this$static, t, sort){
+  var prod, results;
+  results = new ArrayList_0;
+  if (t.getNodeType() == 3) {
+    $addTopSortAlternatives(this$static, t, sort, results);
+    switch (results.size) {
+      case 0:
+        return null;
+      case 1:
+        return checkIndex(0, results.size) , results.array[0];
+      default:++this$static.ambiguityManager.ambiguitiesCount;
+        return createAmbNode($toArray_1(results, initDim(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, results.size, 0)));
+    }
+  }
+   else {
+    prod = $isParseNode(t)?$getProduction(this$static.parseTable, $getLabel_0(t)):$getProduction(this$static.parseTable, t.prod);
+    return $matchProdOnTopSort(this$static, prod, sort)?t:null;
+  }
+}
+
+function $yieldTree(this$static, t){
+  return $buildTree(this$static.parser.treeBuilder, t);
+}
+
+function $yieldTreeTop(this$static, t){
+  var ambCount, r;
+  ambCount = this$static.ambiguityManager.ambiguitiesCount;
+  this$static.ambiguityManager.ambiguitiesCount = 0;
+  r = $buildTree(this$static.parser.treeBuilder, t);
+  this$static.logStatistics && (initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, ['Number of rejects: ', valueOf(this$static.parser.rejectCount)]) , initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, ['Number of reductions: ', valueOf(this$static.parser.reductionCount)]) , initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, ['Number of ambiguities: ', valueOf(this$static.ambiguityManager.maxNumberOfAmbiguitiesCount)]) , initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, ['Number of calls to Amb: ', valueOf(this$static.ambiguityManager.ambiguityCallsCount)]) , initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, ['Count Eagerness Comparisons: ', valueOf(this$static.ambiguityManager.eagernessGreaterCallsCount), ' / ', valueOf(this$static.ambiguityManager.eagernessFilterSucceededCount)]) , initValues(_3Ljava_lang_Obj
 ect_2_classLit, makeCastMap([Q$Serializable]), Q$Object, ['Number of Injection Counts: ', valueOf(this$static.ambiguityManager.injectionCallsCount)]) , undefined);
+  if (this$static.ambiguityIsError && ambCount > 0) {
+    throw new SGLRException_0('Ambiguities found');
+  }
+   else {
+    return $buildTreeTop(this$static.parser.treeBuilder, r, ambCount);
+  }
+}
+
+function Disambiguator_0(){
+  this.filterAny = true;
+  this.filterCycles = false;
+  this.filterDirectPreference = true;
+  this.filterPreferenceCount = false;
+  this.filterInjectionCount = false;
+  this.filterTopSort = true;
+  this.filterReject = true;
+  this.filterAssociativity = true;
+  this.filterPriorities = true;
+  this.filterStrict = false;
+  this.logStatistics = true;
+  this.ambiguityIsError = false;
+}
+
+function Disambiguator(){
+}
+
+_ = Disambiguator_0.prototype = Disambiguator.prototype = new Object_0;
+_.getClass$ = function getClass_98(){
+  return Lorg_spoofax_jsglr_client_Disambiguator_2_classLit;
+}
+;
+_.ambiguityIsError = false;
+_.ambiguityManager = null;
+_.filterAny = false;
+_.filterAssociativity = false;
+_.filterCycles = false;
+_.filterDirectPreference = false;
+_.filterInjectionCount = false;
+_.filterPreferenceCount = false;
+_.filterPriorities = false;
+_.filterReject = false;
+_.filterStrict = false;
+_.filterTopSort = false;
+_.logStatistics = false;
+_.parseTable = null;
+_.parser = null;
+_.prodReader = null;
+_.rejectedBranch = null;
+function FatalException_0(){
+  $fillInStackTrace();
+}
+
+function FatalException(){
+}
+
+_ = FatalException_0.prototype = FatalException.prototype = new IllegalStateException;
+_.getClass$ = function getClass_99(){
+  return Lorg_spoofax_jsglr_client_FatalException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function SGLRException_0(message){
+  Exception_1.call(this, message, null);
+}
+
+function SGLRException(){
+}
+
+_ = SGLRException_0.prototype = SGLRException.prototype = new Exception;
+_.getClass$ = function getClass_100(){
+  return Lorg_spoofax_jsglr_shared_SGLRException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Throwable, Q$SGLRException]);
+function FilterException_0(message, cause){
+  Exception_1.call(this, message, cause);
+}
+
+function FilterException_1(message){
+  SGLRException_0.call(this, message);
+}
+
+function FilterException_2(){
+  SGLRException_0.call(this, 'Filter exception');
+}
+
+function FilterException(){
+}
+
+_ = FilterException_2.prototype = FilterException_1.prototype = FilterException_0.prototype = FilterException.prototype = new SGLRException;
+_.getClass$ = function getClass_101(){
+  return Lorg_spoofax_jsglr_client_FilterException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Throwable, Q$SGLRException]);
+function $acceptParse(this$static){
+  var parsedFragment;
+  parsedFragment = '';
+  while ($size(this$static.mySGLR.activeStacks) > 0 && !$acceptRecovery(this$static, parsedFragment)) {
+    $readRecoverToken(this$static.mySGLR.history_0, this$static.mySGLR, false);
+    this$static.mySGLR.history_0.tokenIndex > this$static.failureOffset && (parsedFragment += charToString(this$static.mySGLR.currentToken & 65535));
+    $doParseStep(this$static.mySGLR);
+  }
+  return $acceptRecovery(this$static, parsedFragment);
+}
+
+function $acceptRecovery(this$static, parsedFragmentSinceLastRecovery){
+  if (this$static.mySGLR.acceptingStack)
+    return true;
+  return $size(this$static.mySGLR.activeStacks) > 0 && $split(parsedFragmentSinceLastRecovery, '\n', 0).length > this$static.settings.acceptDistanceLines && parsedFragmentSinceLastRecovery.length > 100 && this$static.mySGLR.history_0.tokenIndex > this$static.exploredRegionEndOffset;
+}
+
+function $addCurrentCandidates(this$static, candidates, tokenPosition){
+  var ln, ln$iterator, recoverNode, recoverNode$iterator, st;
+  for (recoverNode$iterator = new AbstractList$IteratorImpl_0(candidates); recoverNode$iterator.i < recoverNode$iterator.this$0_0.size_0();) {
+    recoverNode = $next(recoverNode$iterator);
+    if (tokenPosition == recoverNode.tokensSeen) {
+      st = $findStack(this$static.mySGLR.activeStacks, recoverNode.recoverStack.state);
+      if (st) {
+        for (ln$iterator = new AbstractList$IteratorImpl_0($getAllLinks(recoverNode.recoverStack)); ln$iterator.i < ln$iterator.this$0_0.size_0();) {
+          ln = $next(ln$iterator);
+          st.stepsCount >= st.steps.length && $resizeSteps(st);
+          st.steps[st.stepsCount++] = ln;
+        }
+      }
+       else 
+        $addStack(this$static.mySGLR, recoverNode.recoverStack);
+    }
+  }
+}
+
+function $checkAssertionsUnexploredBranches(unexplored_branches){
+  var recoverNode$iterator;
+  for (recoverNode$iterator = new AbstractList$IteratorImpl_0(unexplored_branches); recoverNode$iterator.i < recoverNode$iterator.this$0_0.size_0();) {
+    $next(recoverNode$iterator);
+  }
+}
+
+function $collectNewRecoverCandidates(this$static, tokenIndex){
+  var recoverStack, recoverStack$iterator, results, rn;
+  results = new ArrayList_0;
+  for (recoverStack$iterator = new ArrayDeque$DeqIterator_0(this$static.mySGLR.recoverStacks); recoverStack$iterator.cursor != recoverStack$iterator.fence;) {
+    recoverStack = $next_2(recoverStack$iterator);
+    rn = new RecoverNode_0(recoverStack, tokenIndex);
+    setCheck(results.array, results.size++, rn);
+  }
+  return results;
+}
+
+function $finegrainedRecover(this$static, failureOffset, recoverIndex){
+  this$static.failureOffset = failureOffset;
+  this$static.lineIndexRecovery = recoverIndex;
+  this$static.recoverStartTime = fromDouble(currentTimeMillis0());
+  $setFineGrainedRecoverMax(this$static.mySGLR, this$static.settings.maxNumberOfRecoverApplicationsLocal);
+  return $recoverFrom(this$static, 0, new ArrayList_0);
+}
+
+function $getBackwardRecoverCandidates(this$static, loopIndex){
+  var bwIndex, bwIndexPrev, fwTokensSeenMax, newBranches;
+  bwIndexPrev = max_0(0, this$static.lineIndexRecovery - round_int(this$static.settings.backwardFactor * (loopIndex - 1)));
+  bwIndex = max_0(0, this$static.lineIndexRecovery - round_int(this$static.settings.backwardFactor * loopIndex));
+  if (loopIndex > 0 && bwIndex == bwIndexPrev || bwIndexPrev <= this$static.mySGLR.history_0.newLinePoints.size - 1 && $getLine(this$static.mySGLR.history_0, bwIndexPrev).tokensSeen <= this$static.exploredRegionStartOffset) {
+    return new ArrayList_0;
+  }
+  $resetSGLR(this$static, bwIndex, true);
+  fwTokensSeenMax = 2147483647;
+  bwIndexPrev <= this$static.mySGLR.history_0.newLinePoints.size - 1 && (fwTokensSeenMax = $getLine(this$static.mySGLR.history_0, bwIndexPrev).tokensSeen);
+  newBranches = $recoverParse(this$static, 0, fwTokensSeenMax, new ArrayList_0);
+  return newBranches;
+}
+
+function $getTokensSeenAtLine(this$static, lineIndex){
+  return $getLine(this$static.mySGLR.history_0, lineIndex).tokensSeen;
+}
+
+function $recover(this$static, failureOffset, recoverIndex, regionStartOffset, regionEndOffset){
+  this$static.exploredRegionStartOffset = regionStartOffset;
+  this$static.exploredRegionEndOffset = regionEndOffset;
+  return $finegrainedRecover(this$static, failureOffset, recoverIndex);
+}
+
+function $recover_0(this$static, failureOffset, recoverIndex){
+  this$static.exploredRegionStartOffset = -1;
+  this$static.exploredRegionEndOffset = 2147483647;
+  return $finegrainedRecover(this$static, failureOffset, recoverIndex);
+}
+
+function $recoverFrom(this$static, loopIndex, unexplored_branches){
+  var backwardIndex, bwLoopIndex, exploreDepth, forwardLinesMax, newCandidates;
+  bwLoopIndex = this$static.lineIndexRecovery - round_int(this$static.settings.backwardFactor * loopIndex);
+  backwardIndex = 0 > bwLoopIndex?0:bwLoopIndex;
+  forwardLinesMax = min(this$static.settings.forwardDistanceLines, round_int(this$static.settings.forwardFactor * loopIndex));
+  $addAll(unexplored_branches, $getBackwardRecoverCandidates(this$static, loopIndex));
+  $checkAssertionsUnexploredBranches(unexplored_branches);
+  $resetSGLR(this$static, backwardIndex, false);
+  newCandidates = $recoverParse(this$static, forwardLinesMax, this$static.exploredRegionEndOffset, unexplored_branches);
+  if (!$acceptParse(this$static)) {
+    if (gt(sub(fromDouble(currentTimeMillis0()), this$static.recoverStartTime), fromInt(this$static.settings.timeLimit))) {
+      return false;
+    }
+    if (this$static.lineIndexRecovery - bwLoopIndex < this$static.settings.backtrackDistanceLines) {
+      newCandidates.size > 1000 && (newCandidates = new ArrayList_0);
+      return $recoverFrom(this$static, loopIndex + 1, newCandidates);
+    }
+    exploreDepth = 1;
+    do {
+      $resetSGLR(this$static, backwardIndex, false);
+      newCandidates = $recoverParse(this$static, forwardLinesMax, this$static.exploredRegionEndOffset, newCandidates);
+      ++exploreDepth;
+      if ($acceptParse(this$static))
+        return true;
+    }
+     while (exploreDepth < this$static.settings.maxNumberOfRecoverApplicationsLocal && lte(sub(fromDouble(currentTimeMillis0()), this$static.recoverStartTime), fromInt(this$static.settings.timeLimit)) && newCandidates.size < 1000 && newCandidates.size > 0);
+    if (this$static.lineIndexRecovery - bwLoopIndex < this$static.settings.backtrackDistanceLinesSingleToken) {
+      return $recoverFrom(this$static, loopIndex + 1, new ArrayList_0);
+    }
+    return false;
+  }
+  return true;
+}
+
+function $recoverParse(this$static, fwLineMax, fwTokensSeenMax, candidates){
+  var curTokIndex, exploredLinesForward, newCandidates;
+  newCandidates = new ArrayList_0;
+  exploredLinesForward = 0;
+  $setFineGrainedStartLocation(this$static.mySGLR, this$static.mySGLR.history_0.tokenIndex);
+  do {
+    curTokIndex = this$static.mySGLR.history_0.tokenIndex;
+    $addCurrentCandidates(this$static, candidates, curTokIndex);
+    $readRecoverToken(this$static.mySGLR.history_0, this$static.mySGLR, false);
+    this$static.mySGLR.currentToken == 10 && curTokIndex > $getTokensSeenAtLine(this$static, this$static.lineIndexRecovery) && ++exploredLinesForward;
+    $setFinegrainedRecoverMode(this$static.mySGLR, this$static.exploredRegionStartOffset <= curTokIndex);
+    $doParseStep(this$static.mySGLR);
+    $addAll(newCandidates, $collectNewRecoverCandidates(this$static, curTokIndex));
+    $clear_1(this$static.mySGLR.recoverStacks);
+  }
+   while ((exploredLinesForward <= fwLineMax || isLayoutCharacter(this$static.mySGLR.currentToken & 65535)) && (exploredLinesForward <= this$static.settings.forwardDistanceLines || isLayoutCharacter(this$static.mySGLR.currentToken & 65535)) && this$static.mySGLR.history_0.tokenIndex <= this$static.exploredRegionEndOffset && this$static.mySGLR.history_0.tokenIndex <= fwTokensSeenMax && !this$static.mySGLR.acceptingStack && this$static.mySGLR.currentToken != 256);
+  $setFinegrainedRecoverMode(this$static.mySGLR, false);
+  return newCandidates;
+}
+
+function $resetSGLR(this$static, btIndex, keepStacks){
+  $clear_1(this$static.mySGLR.activeStacks);
+  this$static.mySGLR.acceptingStack = null;
+  keepStacks && $addAll_0(this$static.mySGLR.activeStacks, $getLine(this$static.mySGLR.history_0, btIndex).stackNodes);
+  $setTokenIndex(this$static.mySGLR.history_0, $getLine(this$static.mySGLR.history_0, btIndex).tokensSeen);
+}
+
+function FineGrainedRecovery_0(parser, fgSettings){
+  this.settings = fgSettings;
+  this.mySGLR = parser;
+}
+
+function FineGrainedRecovery(){
+}
+
+_ = FineGrainedRecovery_0.prototype = FineGrainedRecovery.prototype = new Object_0;
+_.getClass$ = function getClass_102(){
+  return Lorg_spoofax_jsglr_client_FineGrainedRecovery_2_classLit;
+}
+;
+_.exploredRegionEndOffset = 0;
+_.exploredRegionStartOffset = 0;
+_.failureOffset = 0;
+_.lineIndexRecovery = 0;
+_.mySGLR = null;
+_.recoverStartTime = P0_longLit;
+_.settings = null;
+function $setAcceptDistanceLines(this$static){
+  this$static.acceptDistanceLines = 5;
+  return this$static;
+}
+
+function $setBacktrackDistanceLines(this$static, backtrackDistanceLines){
+  this$static.backtrackDistanceLines = backtrackDistanceLines;
+  return this$static;
+}
+
+function $setBacktrackDistanceLinesSingleToken(this$static, backtrackDistanceLinesSingleToken){
+  this$static.backtrackDistanceLinesSingleToken = backtrackDistanceLinesSingleToken;
+  return this$static;
+}
+
+function $setBackwardFactor(this$static){
+  this$static.backwardFactor = 1;
+  return this$static;
+}
+
+function $setForwardDistanceLines(this$static, forwardDistanceLines){
+  this$static.forwardDistanceLines = forwardDistanceLines;
+  return this$static;
+}
+
+function $setForwardFactor(this$static, forwardFactor){
+  this$static.forwardFactor = forwardFactor;
+  return this$static;
+}
+
+function $setMaxNumberOfRecoverApplicationsLocal(this$static, maxNumberOfRecoverApplicationsLocal){
+  this$static.maxNumberOfRecoverApplicationsLocal = maxNumberOfRecoverApplicationsLocal;
+  return this$static;
+}
+
+function $setTimeLimit(this$static, timeLimit){
+  this$static.timeLimit = timeLimit;
+  return this$static;
+}
+
+function FineGrainedSetting_0(){
+  this.timeLimit = 1000;
+  this.acceptDistanceLines = 5;
+  this.backtrackDistanceLines = 8;
+  this.backtrackDistanceLinesSingleToken = 80;
+  this.backwardFactor = 1;
+  this.forwardDistanceLines = 8;
+  this.forwardFactor = 0.5;
+  this.maxNumberOfRecoverApplicationsLocal = 5;
+}
+
+function FineGrainedSetting(){
+}
+
+_ = FineGrainedSetting_0.prototype = FineGrainedSetting.prototype = new Object_0;
+_.getClass$ = function getClass_103(){
+  return Lorg_spoofax_jsglr_client_FineGrainedSetting_2_classLit;
+}
+;
+_.acceptDistanceLines = 0;
+_.backtrackDistanceLines = 0;
+_.backtrackDistanceLinesSingleToken = 0;
+_.backwardFactor = 0;
+_.forwardDistanceLines = 0;
+_.forwardFactor = 0;
+_.maxNumberOfRecoverApplicationsLocal = 0;
+_.timeLimit = 0;
+function $addLink(this$static, st0, n){
+  this$static.stepsCount >= this$static.steps.length && $resizeSteps(this$static);
+  return this$static.steps[this$static.stepsCount++] = new Link_1(st0, n, 1);
+}
+
+function $allLinksRejected(this$static){
+  var i;
+  if (this$static.stepsCount == 0)
+    return false;
+  for (i = 0; i < this$static.stepsCount; ++i) {
+    if (!this$static.steps[i].rejected)
+      return false;
+  }
+  return true;
+}
+
+function $doComputePathsToRoot(this$static, pool, node, arity, parentCount, length_0){
+  var i, link, n;
+  if (arity == 0) {
+    $rememberPath(pool, node, this$static, length_0, parentCount);
+  }
+   else {
+    for (i = 1; i <= this$static.stepsCount; ++i) {
+      link = this$static.steps[this$static.stepsCount - i];
+      n = $makePath(pool, node, link, this$static, link.length_0, parentCount);
+      $doComputePathsToRoot(link.parent_0, pool, n, arity - 1, parentCount + 1, length_0 + link.length_0);
+    }
+  }
+}
+
+function $doComputePathsToRoot_0(this$static, pool, node, l_0, seen, arity, parentCount, length_0){
+  var i, ln, n, seenIt;
+  if (arity == 0 && seen) {
+    $rememberPath(pool, node, this$static, length_0, parentCount);
+  }
+   else if (arity > 0) {
+    for (i = 0; i < this$static.stepsCount; ++i) {
+      ln = this$static.steps[this$static.stepsCount - i - 1];
+      seenIt = seen || ln == l_0;
+      n = $makePath(pool, node, ln, this$static, ln.length_0, parentCount);
+      $doComputePathsToRoot_0(ln.parent_0, pool, n, l_0, seenIt, arity - 1, parentCount + 1, length_0 + ln.length_0);
+    }
+  }
+}
+
+function $findDirectLink(this$static, st0){
+  var i;
+  for (i = 0; i < this$static.stepsCount; ++i) {
+    if (this$static.steps[i].parent_0 == st0)
+      return this$static.steps[i];
+  }
+  return null;
+}
+
+function $findLimitedPaths(this$static, pool, arity, l_0){
+  $findLink(this$static, arity, l_0) && $doComputePathsToRoot_0(this$static, pool, null, l_0, false, arity, 0, 0);
+}
+
+function $findLink(this$static, arity, l0){
+  var i, l1;
+  if (arity > 0) {
+    for (i = 0; i < this$static.stepsCount; ++i) {
+      l1 = this$static.steps[this$static.stepsCount - i - 1];
+      if (l0 == l1) {
+        return true;
+      }
+       else if (arity > 1 && $findLink(l1.parent_0, arity - 1, l0)) {
+        return true;
+      }
+    }
+  }
+  return false;
+}
+
+function $getAllLinks(this$static){
+  var i, links;
+  links = new ArrayList_0;
+  for (i = 0; i < this$static.stepsCount; ++i) {
+    $add(links, this$static.steps[i]);
+  }
+  return links;
+}
+
+function $resizeSteps(this$static){
+  var newSteps;
+  newSteps = initDim(_3Lorg_spoofax_jsglr_client_Link_2_classLit, makeCastMap([Q$Serializable]), Q$Link, this$static.steps.length * 2, 0);
+  arraycopy(this$static.steps, 0, newSteps, 0, this$static.steps.length);
+  this$static.steps = newSteps;
+}
+
+function Frame_1(s){
+  this.state = s;
+  this.steps = initDim(_3Lorg_spoofax_jsglr_client_Link_2_classLit, makeCastMap([Q$Serializable]), Q$Link, 20, 0);
+  this.stepsCount = 0;
+  framesCreated += 1;
+}
+
+function Frame_0(){
+}
+
+_ = Frame_1.prototype = Frame_0.prototype = new Object_0;
+_.getClass$ = function getClass_104(){
+  return Lorg_spoofax_jsglr_client_Frame_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable]);
+_.state = null;
+_.steps = null;
+_.stepsCount = 0;
+var framesCreated = 0;
+function Goto_0(ranges, nextState){
+  this.ranges = ranges;
+  this.nextState = nextState;
+}
+
+function Goto(){
+}
+
+_ = Goto_0.prototype = Goto.prototype = new Object_0;
+_.equals$ = function equals_11(obj){
+  var o;
+  if (!instanceOf(obj, Q$Goto))
+    return false;
+  o = obj;
+  if (this.nextState != o.nextState)
+    return false;
+  return $equals_2(this.ranges, o.ranges);
+}
+;
+_.getClass$ = function getClass_105(){
+  return Lorg_spoofax_jsglr_client_Goto_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_12(){
+  this.hashCode == 0 && (this.hashCode = $hashCode_0(this.ranges));
+  return this.hashCode;
+}
+;
+_.toString$ = function toString_22(){
+  var sb;
+  sb = new StringBuilder_0;
+  sb.impl.string += 'goto(';
+  $append_5(sb, this.ranges);
+  sb.impl.string += ', ';
+  $append_4(sb, this.nextState);
+  sb.impl.string += ')';
+  return sb.impl.string;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Goto]);
+_.hashCode = 0;
+_.nextState = 0;
+_.ranges = null;
+function $fillStackNodes(this$static, nodes){
+  $clear_1(this$static.stackNodes);
+  $addAll_0(this$static.stackNodes, nodes);
+}
+
+function $maxReduceLength(this$static){
+  var activeStack, activeStack$iterator, i, length_0, maxPathLength;
+  maxPathLength = 0;
+  for (activeStack$iterator = new ArrayDeque$DeqIterator_0(this$static.stackNodes); activeStack$iterator.cursor != activeStack$iterator.fence;) {
+    activeStack = $next_2(activeStack$iterator);
+    $start(this$static.indentPathCache);
+    try {
+      $doComputePathsToRoot(activeStack, this$static.indentPathCache, null, 2, 0, 0);
+      for (i = 0; i < this$static.indentPathCache.rememberIndex; ++i) {
+        length_0 = $get_1(this$static.indentPathCache, i).length_0;
+        length_0 > maxPathLength && (maxPathLength = length_0);
+      }
+    }
+     finally {
+      $end(this$static.indentPathCache);
+    }
+  }
+  return maxPathLength;
+}
+
+function $setTokensSeen(this$static, tokenPos){
+  this$static.tokensSeen = tokenPos;
+}
+
+function $structureStartPosition(this$static){
+  return this$static.tokensSeen - $maxReduceLength(this$static);
+}
+
+function IndentInfo_0(line, tok, indent){
+  this.indentPathCache = new PooledPathList_0;
+  this.lineNumber = line;
+  this.tokensSeen = tok;
+  this.indentValue = indent;
+  this.stackNodes = new ArrayDeque_0;
+}
+
+function IndentInfo_1(){
+  IndentInfo_0.call(this, -1, -1, -1);
+}
+
+function cloneIndentInfo(original){
+  var cloneResult;
+  cloneResult = new IndentInfo_0(original.lineNumber, original.tokensSeen, original.indentValue);
+  $fillStackNodes(cloneResult, original.stackNodes);
+  return cloneResult;
+}
+
+function IndentInfo(){
+}
+
+_ = IndentInfo_1.prototype = IndentInfo_0.prototype = IndentInfo.prototype = new Object_0;
+_.getClass$ = function getClass_106(){
+  return Lorg_spoofax_jsglr_client_IndentInfo_2_classLit;
+}
+;
+_.indentValue = 0;
+_.lineNumber = 0;
+_.stackNodes = null;
+_.tokensSeen = 0;
+function $setIndentValue(this$static, startIndent){
+  this$static.indentValue = startIndent;
+}
+
+function $updateIndentation(this$static, curTok){
+  var oldLeftMargin;
+  oldLeftMargin = this$static.isInLeftMargin;
+  $updateLeftMargeFields(this$static, curTok);
+  this$static.lineMarginFound = oldLeftMargin && !this$static.isInLeftMargin;
+}
+
+function $updateLeftMargeFields(this$static, charValue){
+  switch (charValue) {
+    case 10:
+      this$static.indentValue = 0;
+      this$static.isInLeftMargin = true;
+      break;
+    case 32:
+      this$static.isInLeftMargin && (this$static.indentValue += 1);
+      break;
+    case 9:
+      this$static.isInLeftMargin && (this$static.indentValue += 4);
+      break;
+    case 256:
+      break;
+    default:this$static.isInLeftMargin = false;
+  }
+}
+
+function IndentationHandler_0(){
+  this.indentValue = 0;
+  this.isInLeftMargin = true;
+  this.lineMarginFound = false;
+}
+
+function IndentationHandler(){
+}
+
+_ = IndentationHandler_0.prototype = IndentationHandler.prototype = new Object_0;
+_.getClass$ = function getClass_107(){
+  return Lorg_spoofax_jsglr_client_IndentationHandler_2_classLit;
+}
+;
+_.indentValue = 0;
+_.isInLeftMargin = false;
+_.lineMarginFound = false;
+function IntegratedRecoverySettings_0(){
+  this.useFineGrained = true;
+  this.useRegionSelection = true;
+  this.useRegionRecovery = true;
+  this.useCursorLocation = true;
+  this.maxNumberOfRecoverApplicationsGlobal = 2147483647;
+}
+
+function IntegratedRecoverySettings(){
+}
+
+_ = IntegratedRecoverySettings_0.prototype = IntegratedRecoverySettings.prototype = new Object_0;
+_.getClass$ = function getClass_108(){
+  return Lorg_spoofax_jsglr_client_IntegratedRecoverySettings_2_classLit;
+}
+;
+_.maxNumberOfRecoverApplicationsGlobal = 0;
+_.useCursorLocation = false;
+_.useFineGrained = false;
+_.useRegionRecovery = false;
+_.useRegionSelection = false;
+function InvalidParseTableException_0(message){
+  Exception_0.call(this, message);
+}
+
+function InvalidParseTableException(){
+}
+
+_ = InvalidParseTableException_0.prototype = InvalidParseTableException.prototype = new Exception;
+_.getClass$ = function getClass_109(){
+  return Lorg_spoofax_jsglr_client_InvalidParseTableException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Throwable, Q$InvalidParseTableException]);
+function $equals_0(this$static, obj){
+  return obj === this$static || instanceOf(obj, Q$Label) && obj.labelNumber == this$static.labelNumber;
+}
+
+function Label_0(labelNumber, prod, productionAttributes, injection){
+  this.labelNumber = labelNumber;
+  this.prod = prod;
+  this.productionAttributes = productionAttributes;
+  this.injection = injection;
+  if (!productionAttributes)
+    throw new RuntimeException_0;
+}
+
+function Label(){
+}
+
+_ = Label_0.prototype = Label.prototype = new Object_0;
+_.equals$ = function equals_12(obj){
+  return $equals_0(this, obj);
+}
+;
+_.getClass$ = function getClass_110(){
+  return Lorg_spoofax_jsglr_client_Label_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_13(){
+  return this.labelNumber;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Label]);
+_.injection = false;
+_.labelNumber = 0;
+_.prod = null;
+_.productionAttributes = null;
+function Link_1(destination, t, length_0){
+  this.parent_0 = destination;
+  this.label = t;
+  this.rejected = false;
+  this.length_0 = length_0;
+  this.recoverWeight = 0;
+  this.recoverCount = 0;
+  linksCreated += 1;
+}
+
+function Link_0(){
+}
+
+_ = Link_1.prototype = Link_0.prototype = new Object_0;
+_.equals$ = function equals_13(obj){
+  var o;
+  if (!instanceOf(obj, Q$Link))
+    return false;
+  o = obj;
+  return o.parent_0 == this.parent_0 && o.label == this.label && o.rejected == this.rejected && o.length_0 == this.length_0;
+}
+;
+_.getClass$ = function getClass_111(){
+  return Lorg_spoofax_jsglr_client_Link_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_14(){
+  throw new NotImplementedException_0;
+}
+;
+_.toString$ = function toString_23(){
+  return '' + this.parent_0.state.stateNumber;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Link]);
+_.label = null;
+_.length_0 = 0;
+_.parent_0 = null;
+_.recoverCount = 0;
+_.recoverWeight = 0;
+_.rejected = false;
+var linksCreated = 0;
+function $escape(ch){
+  switch (ch) {
+    case 0:
+      return '\\0';
+    case 10:
+      return '\\n';
+    case 13:
+      return '\\r';
+    default:return '' + String.fromCharCode(ch & 65535);
+  }
+}
+
+function BadTokenException_0(token, offset, lineNumber, columnNumber){
+  Exception_1.call(this, null, null);
+  this.token = token;
+  this.offset = offset;
+  this.lineNumber = lineNumber;
+  this.columnNumber = columnNumber;
+}
+
+function BadTokenException(){
+}
+
+_ = BadTokenException_0.prototype = BadTokenException.prototype = new SGLRException;
+_.getClass$ = function getClass_112(){
+  return Lorg_spoofax_jsglr_shared_BadTokenException_2_classLit;
+}
+;
+_.getMessage = function getMessage_1(){
+  return this.getShortMessage() + ' at line ' + this.lineNumber + ', column ' + this.columnNumber;
+}
+;
+_.getShortMessage = function getShortMessage(){
+  return this.token == 256?'Unexpected end of file':"Syntax error near unexpected character '" + $escape(this.token) + "'";
+}
+;
+_.toString$ = function toString_24(){
+  return this.getShortMessage() + ' at line ' + this.lineNumber + ', column ' + this.columnNumber;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Throwable, Q$BadTokenException, Q$SGLRException]);
+_.columnNumber = 0;
+_.lineNumber = 0;
+_.offset = 0;
+_.token = 0;
+function MultiBadTokenException_0(causes){
+  MultiBadTokenException_1.call(this, causes, getFirst(causes));
+}
+
+function MultiBadTokenException_1(causes, primary){
+  BadTokenException_0.call(this, primary.token, primary.offset, primary.lineNumber, primary.columnNumber);
+  this.causes = causes;
+}
+
+function getFirst(causes){
+  if (causes.map.size_0() == 0)
+    throw new IllegalArgumentException_1('Set of causes is empty');
+  return $next_0($iterator($keySet(causes.map)));
+}
+
+function MultiBadTokenException(){
+}
+
+_ = MultiBadTokenException_0.prototype = MultiBadTokenException.prototype = new BadTokenException;
+_.getCause = function getCause_0(){
+  if (!!this.causes && this.causes.map.size_0() != 0)
+    return $next_0($iterator($keySet(this.causes.map)));
+  return null;
+}
+;
+_.getClass$ = function getClass_113(){
+  return Lorg_spoofax_jsglr_client_MultiBadTokenException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Throwable, Q$BadTokenException, Q$SGLRException]);
+_.causes = null;
+function $addNextRegionMerges(this$static, result){
+  var includeNexts, skip, skip$iterator, skipFW, skipFW$iterator;
+  includeNexts = new ArrayList_0;
+  for (skip$iterator = new AbstractList$IteratorImpl_0(result); skip$iterator.i < skip$iterator.this$0_0.size_0();) {
+    skip = $next(skip$iterator);
+    for (skipFW$iterator = new AbstractList$IteratorImpl_0($selectRegion(this$static, skip.indexHistoryEnd)); skipFW$iterator.i < skipFW$iterator.this$0_0.size_0();) {
+      skipFW = $next(skipFW$iterator);
+      $add(includeNexts, $mergeRegions(skipFW, skip));
+    }
+  }
+  $addAll(result, includeNexts);
+}
+
+function $addSeparatorIncludingRegion_Forwards(this$static, regions, aRegion){
+  var endSkip, indentShift, previousRegion3, startSkip;
+  if ($isSeparatorStartingLine(this$static, aRegion.indexHistoryEnd)) {
+    startSkip = cloneIndentInfo(aRegion.startSkip);
+    endSkip = cloneIndentInfo(aRegion.endSkip);
+    indentShift = $separatorIndent(this$static, aRegion.indexHistoryEnd) - endSkip.indentValue;
+    $setTokensSeen(endSkip, endSkip.tokensSeen + indentShift);
+    previousRegion3 = new StructureSkipSuggestion_0;
+    $setSkipLocations(previousRegion3, startSkip, endSkip, aRegion.indexHistoryStart, aRegion.indexHistoryEnd);
+    setCheck(regions.array, regions.size++, previousRegion3);
+  }
+}
+
+function $addSeperatorIncludingRegion_Backwards(this$static, prevRegions, previousRegion){
+  var endSkip2, indexStart, previousRegion2, startSkip2, toParse, lineContent;
+  indexStart = previousRegion.indexHistoryStart;
+  if (indexStart > 0 && (lineContent = $readLine(this$static, indexStart - 1) , $endsWith_0((this$static.structTokens , lineContent), ($clinit_StructuralTokenRecognizer() , separatorTokens)))) {
+    toParse = $removeSeparatorAtTheEnd($readLine(this$static, indexStart - 1));
+    startSkip2 = cloneIndentInfo($getLine(this$static.myParser.history_0, indexStart - 1));
+    endSkip2 = cloneIndentInfo(previousRegion.endSkip);
+    previousRegion2 = new StructureSkipSuggestion_0;
+    $setSkipLocations(previousRegion2, startSkip2, endSkip2, indexStart - 1, previousRegion.indexHistoryEnd);
+    previousRegion2.additionalTokens = toParse;
+    setCheck(prevRegions.array, prevRegions.size++, previousRegion2);
+  }
+}
+
+function $calculateShift(indentStartLine, indentSkipPosition){
+  var difference;
+  difference = indentStartLine - indentSkipPosition;
+  if (difference > 0)
+    return 1;
+  if (difference < 0)
+    return 0;
+  return 2;
+}
+
+function $findCurrentEnd(this$static, indexStartLine){
+  var endLocations, hasIndentChilds, indentSkipPosition, indentStartLine, indexNextLine, isSecondLine, nextLine, shift;
+  indentStartLine = $separatorIndent(this$static, indexStartLine);
+  hasIndentChilds = false;
+  isSecondLine = true;
+  endLocations = new ArrayList_0;
+  indexNextLine = $skipLine(this$static, indexStartLine);
+  while (this$static.myParser.currentToken != 256 && 0 <= indexNextLine && indexNextLine <= this$static.myParser.history_0.newLinePoints.size - 1) {
+    nextLine = $getLine(this$static.myParser.history_0, indexNextLine);
+    indentSkipPosition = nextLine.indentValue;
+    shift = $calculateShift(indentStartLine, indentSkipPosition);
+    switch (shift) {
+      case 1:
+        $add(endLocations, valueOf(indexNextLine));
+        return endLocations;
+      case 0:
+        hasIndentChilds = true;
+        break;
+      case 2:
+        if (hasIndentChilds && $isScopeClosingLine(this$static, indexNextLine)) {
+          indexNextLine = $skipLine(this$static, indexNextLine);
+          $add(endLocations, valueOf(indexNextLine));
+          return endLocations;
+        }
+
+        if ((!isSecondLine || !$isScopeOpeningLine(this$static, indexNextLine)) && !$isSeparatorStartingLine(this$static, indexNextLine)) {
+          $add(endLocations, valueOf(indexNextLine));
+          return endLocations;
+        }
+
+    }
+    isSecondLine = false;
+    indexNextLine = $skipLine(this$static, indexNextLine);
+  }
+  $add(endLocations, valueOf(this$static.myParser.history_0.newLinePoints.size - 1));
+  return endLocations;
+}
+
+function $findParentBegin(this$static, startLineIndex){
+  var indentSkipPosition, indentStartLine, indexHistoryLines, prevLine, shift;
+  indentStartLine = $separatorIndent(this$static, startLineIndex);
+  indexHistoryLines = startLineIndex - 1;
+  while (indexHistoryLines > 0) {
+    indentSkipPosition = $separatorIndent(this$static, indexHistoryLines);
+    shift = $calculateShift(indentStartLine, indentSkipPosition);
+    if (shift == 1) {
+      if ($isScopeOpeningLine(this$static, indexHistoryLines)) {
+        prevLine = $getLine(this$static.myParser.history_0, indexHistoryLines - 1);
+        if (!$isScopeClosingLine(this$static, indexHistoryLines - 1) && $calculateShift(indentSkipPosition, prevLine.indentValue) == 2) {
+          return indexHistoryLines - 1;
+        }
+      }
+      return indexHistoryLines;
+    }
+    indexHistoryLines -= 1;
+  }
+  return 0;
+}
+
+function $findPreviousBegin(this$static, indexLine, onClosing){
+  var closingSeen, ignoreSeps, indentSkipPosition, indentValue, indexHistoryLines, sawChilds, shift;
+  indentValue = $getLine(this$static.myParser.history_0, indexLine).indentValue;
+  sawChilds = false;
+  closingSeen = onClosing;
+  ignoreSeps = !$isSeparatorStartingLine(this$static, indexLine);
+  indexHistoryLines = indexLine;
+  while (indexHistoryLines > 0) {
+    indexHistoryLines -= 1;
+    indentSkipPosition = $getLine(this$static.myParser.history_0, indexHistoryLines).indentValue;
+    shift = $calculateShift(indentValue, indentSkipPosition);
+    switch (shift) {
+      case 1:
+        if (!sawChilds)
+          return -1;
+        return indexHistoryLines;
+      case 0:
+        if (!ignoreSeps && !$isSeparatorStartingLine(this$static, indexHistoryLines) && $separatorIndent(this$static, indexLine) == indentSkipPosition)
+          return indexHistoryLines;
+        sawChilds = true;
+        break;
+      case 2:
+        if (!sawChilds && $isScopeClosingLine(this$static, indexHistoryLines)) {
+          if (closingSeen)
+            return indexHistoryLines + 1;
+          closingSeen = true;
+        }
+         else if (!sawChilds || !$isScopeOpeningLine(this$static, indexHistoryLines)) {
+          if (!(ignoreSeps && $isSeparatorStartingLine(this$static, indexHistoryLines)))
+            return indexHistoryLines;
+        }
+
+    }
+  }
+  return 0;
+}
+
+function $getBlockSuggestions(this$static, structStartIndex){
+  var block, endIndex, endSkip, i, result, startSkip;
+  result = $getCurrentRegionSkips(this$static, structStartIndex);
+  endIndex = min(this$static.myParser.history_0.newLinePoints.size - 1 + 1, structStartIndex + 15);
+  for (i = structStartIndex; i < endIndex; ++i) {
+    startSkip = cloneIndentInfo($getLine(this$static.myParser.history_0, structStartIndex));
+    endSkip = cloneIndentInfo($getLine(this$static.myParser.history_0, i));
+    block = new StructureSkipSuggestion_0;
+    $setSkipLocations(block, startSkip, endSkip, structStartIndex, i);
+    setCheck(result.array, result.size++, block);
+  }
+  return result;
+}
+
+function $getCurrentAndNextSkipSuggestions(this$static, failureIndex){
+  var currRegions, fwMax, indentValueStart, lineIndex, nextRegions, nrOfStructs, r, r$iterator;
+  nextRegions = new ArrayList_0;
+  currRegions = $selectRegion(this$static, failureIndex);
+  fwMax = failureIndex + 15;
+  lineIndex = failureIndex;
+  nrOfStructs = 0;
+  indentValueStart = -1;
+  currRegions.size > 0 && (indentValueStart = (checkIndex(0, currRegions.size) , currRegions.array[0]).startSkip.indentValue);
+  do {
+    ++nrOfStructs;
+    for (r$iterator = new AbstractList$IteratorImpl_0(currRegions); r$iterator.i < r$iterator.this$0_0.size_0();) {
+      r = $next(r$iterator);
+      r.additionalTokens.length == 0 && (setCheck(nextRegions.array, nextRegions.size++, r) , true);
+    }
+    if (currRegions.size != 0) {
+      lineIndex = (checkIndex(0, currRegions.size) , currRegions.array[0]).indexHistoryEnd;
+      (checkIndex(0, currRegions.size) , currRegions.array[0]).startSkip.indentValue >= indentValueStart?(currRegions = $selectRegion(this$static, (checkIndex(0, currRegions.size) , currRegions.array[0]).indexHistoryEnd)):(currRegions.array = initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, 0, 0) , currRegions.size = 0);
+    }
+  }
+   while (nrOfStructs < 8 && lineIndex < fwMax && currRegions.size != 0);
+  return nextRegions;
+}
+
+function $getCurrentRegionSkips(this$static, failureIndex){
+  var result;
+  result = new ArrayList_0;
+  failureIndex > 0 && $isScopeOpeningLine(this$static, failureIndex) && $getLine(this$static.myParser.history_0, failureIndex - 1).indentValue == $getLine(this$static.myParser.history_0, failureIndex).indentValue && $addAll(result, $selectRegion(this$static, failureIndex - 1));
+  $addAll(result, $selectRegion(this$static, failureIndex));
+  return result;
+}
+
+function $getCurrentSkipSuggestions(this$static, failureIndex){
+  var result;
+  result = $getCurrentRegionSkips(this$static, failureIndex);
+  $addNextRegionMerges(this$static, result);
+  return result;
+}
+
+function $getParentSkipSuggestions(this$static, failureIndex){
+  var closingSkip, errorLineIndex, maxBW, nrOfStructs, parentSkips, skips, startSkipIndex;
+  parentSkips = new ArrayList_0;
+  errorLineIndex = failureIndex;
+  maxBW = failureIndex - 15 > 0?failureIndex - 15:0;
+  nrOfStructs = 0;
+  while (errorLineIndex > maxBW && nrOfStructs < 8) {
+    ++nrOfStructs;
+    startSkipIndex = $findParentBegin(this$static, errorLineIndex);
+    skips = $selectRegion(this$static, startSkipIndex);
+    if (skips.size == 0) {
+      closingSkip = new StructureSkipSuggestion_0;
+      $setSkipLocations(closingSkip, cloneIndentInfo($getLine(this$static.myParser.history_0, startSkipIndex)), cloneIndentInfo($getLine(this$static.myParser.history_0, failureIndex)), startSkipIndex, failureIndex);
+      setCheck(parentSkips.array, parentSkips.size++, closingSkip);
+    }
+    $addAll(parentSkips, skips);
+    skips.size > 0?(errorLineIndex = (checkIndex(0, skips.size) , skips.array[0]).indexHistoryStart):(errorLineIndex = -1);
+  }
+  $addNextRegionMerges(this$static, parentSkips);
+  return parentSkips;
+}
+
+function $getPriorRegions(this$static, pos){
+  var bwMax, nrOfStructures, prevRegions, priorRegions;
+  priorRegions = new ArrayList_0;
+  prevRegions = $selectPrevRegion(this$static, pos);
+  bwMax = pos - 15 > 0?pos - 15:0;
+  nrOfStructures = 0;
+  do {
+    nrOfStructures += 1;
+    prevRegions.size == 0 || (pos = (checkIndex(0, prevRegions.size) , prevRegions.array[0]).indexHistoryStart);
+    prevRegions = $selectPrevRegion(this$static, pos);
+    $addAll(priorRegions, prevRegions);
+  }
+   while (pos > bwMax && nrOfStructures < 8 && prevRegions.size != 0);
+  return priorRegions;
+}
+
+function $getSibblingBackwardSuggestions(this$static, failureIndex){
+  var bwSkips, currSugestion, currSugestion$iterator, currentRegionSuggestions, i, mergedSkip, priorSiblings, priorSuggestion;
+  bwSkips = new ArrayList_0;
+  priorSiblings = $getPriorRegions(this$static, failureIndex);
+  currentRegionSuggestions = $selectRegion(this$static, failureIndex);
+  currentRegionSuggestions.size == 0 && (currentRegionSuggestions = $selectPrevRegion(this$static, failureIndex));
+  for (currSugestion$iterator = new AbstractList$IteratorImpl_0(currentRegionSuggestions); currSugestion$iterator.i < currSugestion$iterator.this$0_0.size_0();) {
+    currSugestion = $next(currSugestion$iterator);
+    for (i = 0; i < priorSiblings.size; ++i) {
+      priorSuggestion = (checkIndex(i, priorSiblings.size) , priorSiblings.array[i]);
+      if (currSugestion.additionalTokens.length == 0) {
+        mergedSkip = $mergeRegions(currSugestion, priorSuggestion);
+        setCheck(bwSkips.array, bwSkips.size++, mergedSkip);
+      }
+    }
+  }
+  return bwSkips;
+}
+
+function $getSibblingForwardSuggestions(this$static, failureIndex){
+  var fwSkips, i, mergedSkip, nextSiblings, nextSuggestion, prevRegionSuggestions, priorSuggestion, priorSuggestion$iterator;
+  fwSkips = new ArrayList_0;
+  nextSiblings = $getCurrentAndNextSkipSuggestions(this$static, failureIndex);
+  prevRegionSuggestions = $selectPrevRegion(this$static, failureIndex);
+  if (prevRegionSuggestions.size == 0 && nextSiblings.size > 0) {
+    prevRegionSuggestions = $getCurrentRegionSkips(this$static, failureIndex);
+    $remove(nextSiblings, 0);
+  }
+  for (priorSuggestion$iterator = new AbstractList$IteratorImpl_0(prevRegionSuggestions); priorSuggestion$iterator.i < priorSuggestion$iterator.this$0_0.size_0();) {
+    priorSuggestion = $next(priorSuggestion$iterator);
+    for (i = 0; i < nextSiblings.size; ++i) {
+      nextSuggestion = (checkIndex(i, nextSiblings.size) , nextSiblings.array[i]);
+      mergedSkip = $mergeRegions(nextSuggestion, priorSuggestion);
+      setCheck(fwSkips.array, fwSkips.size++, mergedSkip);
+    }
+  }
+  return fwSkips;
+}
+
+function $getSibblingSurroundingSuggestions(this$static, failureIndex){
+  var i, j, mergedSkip, mergedSkipPlus, nextSiblings, nextSuggestion, priorSiblings, priorSuggestion, surroundingSkips;
+  surroundingSkips = new ArrayList_0;
+  priorSiblings = $getPriorRegions(this$static, failureIndex);
+  nextSiblings = $getCurrentAndNextSkipSuggestions(this$static, failureIndex);
+  if (nextSiblings.size > 1 && priorSiblings.size > 0) {
+    $remove(nextSiblings, 0);
+    nextSuggestion = null;
+    priorSuggestion = null;
+    j = 0;
+    i = 0;
+    while (i < nextSiblings.size || j < priorSiblings.size) {
+      if (i < nextSiblings.size) {
+        nextSuggestion = (checkIndex(i, nextSiblings.size) , nextSiblings.array[i]);
+        ++i;
+      }
+      if (j < priorSiblings.size) {
+        priorSuggestion = (checkIndex(j, priorSiblings.size) , priorSiblings.array[j]);
+        ++j;
+      }
+      mergedSkip = $mergeRegions(nextSuggestion, priorSuggestion);
+      setCheck(surroundingSkips.array, surroundingSkips.size++, mergedSkip);
+      if (j < priorSiblings.size) {
+        priorSuggestion = (checkIndex(j, priorSiblings.size) , priorSiblings.array[j]);
+        if (priorSuggestion.additionalTokens.length != 0) {
+          mergedSkipPlus = $mergeRegions(nextSuggestion, priorSuggestion);
+          setCheck(surroundingSkips.array, surroundingSkips.size++, mergedSkipPlus);
+          ++j;
+        }
+      }
+    }
+  }
+  return surroundingSkips;
+}
+
+function $getZoomOnPreviousSuggestions(this$static, prevRegion){
+  var i, indentLevels, indentOfLevel, indentOfLine, level, lineIndex, regions, result, startIndexZoom, x;
+  result = new ArrayList_0;
+  if (!$canBeDecomposed(prevRegion)) {
+    return result;
+  }
+  indentLevels = new ArrayList_0;
+  startIndexZoom = max_0(prevRegion.indexHistoryStart, prevRegion.indexHistoryEnd - 15);
+  for (i = startIndexZoom; i < prevRegion.indexHistoryEnd; ++i) {
+    indentOfLine = $getLine(this$static.myParser.history_0, i).indentValue;
+    $indexOf_1(indentLevels, valueOf(indentOfLine), 0) != -1 || $add(indentLevels, valueOf(indentOfLine));
+  }
+  $clinit_Collections();
+  x = cloneSubrange(indentLevels.array, 0, indentLevels.size);
+  mergeSort(x, 0, x.length);
+  replaceContents(indentLevels, x);
+  $remove(indentLevels, 0);
+  for (level = 0; level < indentLevels.size; ++level) {
+    indentOfLevel = (checkIndex(level, indentLevels.size) , indentLevels.array[level]).value;
+    lineIndex = startIndexZoom;
+    while (lineIndex < prevRegion.indexHistoryEnd) {
+      indentOfLine = $getLine(this$static.myParser.history_0, lineIndex).indentValue;
+      if (indentOfLine == indentOfLevel) {
+        regions = $selectRegion(this$static, lineIndex);
+        if (regions.size > 0) {
+          lineIndex = (checkIndex(0, regions.size) , regions.array[0]).indexHistoryEnd;
+          reverse(regions);
+          $addAll(result, regions);
+        }
+         else 
+          ++lineIndex;
+      }
+       else 
+        ++lineIndex;
+    }
+  }
+  reverse(result);
+  return result;
+}
+
+function $isScopeClosingLine(this$static, index){
+  var lineContent;
+  lineContent = $readLine(this$static, index);
+  return $startsWith((this$static.structTokens , lineContent), ($clinit_StructuralTokenRecognizer() , closingTokens));
+}
+
+function $isScopeOpeningLine(this$static, index){
+  var lineContent;
+  lineContent = $readLine(this$static, index);
+  return $startsWith((this$static.structTokens , lineContent), ($clinit_StructuralTokenRecognizer() , openingTokens));
+}
+
+function $isSeparatorStartingLine(this$static, index){
+  var lineContent;
+  lineContent = $readLine(this$static, index);
+  return $startsWith((this$static.structTokens , lineContent), ($clinit_StructuralTokenRecognizer() , separatorTokens));
+}
+
+function $mergeRegions(fwSuggestion, bwSuggestion){
+  var mergedSkip;
+  mergedSkip = new StructureSkipSuggestion_0;
+  $setSkipLocations(mergedSkip, cloneIndentInfo(bwSuggestion.startSkip), cloneIndentInfo(fwSuggestion.endSkip), bwSuggestion.indexHistoryStart, fwSuggestion.indexHistoryEnd);
+  $setAdditionalTokens(mergedSkip, bwSuggestion.additionalTokens);
+  return mergedSkip;
+}
+
+function $readLine(this$static, index){
+  var line, startTok;
+  while (this$static.myParser.history_0.newLinePoints.size - 1 <= index && this$static.myParser.currentToken != 256)
+    $readRecoverToken(this$static.myParser.history_0, this$static.myParser, false);
+  if (0 <= index && index <= this$static.myParser.history_0.newLinePoints.size - 1) {
+    line = $getLine(this$static.myParser.history_0, index);
+    return startTok = line.tokensSeen , $readLine_0(this$static.myParser.history_0, startTok, this$static.myParser.currentInputStream);
+  }
+  return '';
+}
+
+function $selectPrevRegion(this$static, indexEnd){
+  var endSkip, indexStart, onClosing, prevRegions, previousRegion, startSkip;
+  prevRegions = new ArrayList_0;
+  onClosing = $isScopeClosingLine(this$static, indexEnd);
+  indexStart = $findPreviousBegin(this$static, indexEnd, onClosing);
+  if (onClosing) {
+    indexEnd > 0 && ($isScopeClosingLine(this$static, indexEnd - 1)?$addAll(prevRegions, $selectPrevRegion(this$static, indexEnd - 1)):$addAll(prevRegions, $selectRegion(this$static, indexEnd - 1)));
+    ++indexEnd;
+  }
+  endSkip = cloneIndentInfo($getLine(this$static.myParser.history_0, indexEnd));
+  if (indexStart < 0)
+    return prevRegions;
+  startSkip = cloneIndentInfo($getLine(this$static.myParser.history_0, indexStart));
+  previousRegion = new StructureSkipSuggestion_0;
+  $setSkipLocations(previousRegion, startSkip, endSkip, indexStart, indexEnd);
+  setCheck(prevRegions.array, prevRegions.size++, previousRegion);
+  $addSeperatorIncludingRegion_Backwards(this$static, prevRegions, previousRegion);
+  $addSeparatorIncludingRegion_Forwards(this$static, prevRegions, previousRegion);
+  return prevRegions;
+}
+
+function $selectRegion(this$static, indexLine){
+  var endLocations, endSkip, endSkipIndex, endSkipIndex$iterator, skipConstruct, skipSuggestions, startLine;
+  if ($isScopeClosingLine(this$static, indexLine))
+    return new ArrayList_0;
+  endLocations = $findCurrentEnd(this$static, indexLine);
+  skipSuggestions = new ArrayList_0;
+  startLine = cloneIndentInfo($getLine(this$static.myParser.history_0, indexLine));
+  for (endSkipIndex$iterator = new AbstractList$IteratorImpl_0(endLocations); endSkipIndex$iterator.i < endSkipIndex$iterator.this$0_0.size_0();) {
+    endSkipIndex = $next(endSkipIndex$iterator);
+    if (endSkipIndex.value > indexLine) {
+      endSkip = cloneIndentInfo($getLine(this$static.myParser.history_0, endSkipIndex.value));
+      skipConstruct = new StructureSkipSuggestion_0;
+      $setSkipLocations(skipConstruct, startLine, endSkip, indexLine, endSkipIndex.value);
+      setCheck(skipSuggestions.array, skipSuggestions.size++, skipConstruct);
+      $addSeparatorIncludingRegion_Forwards(this$static, skipSuggestions, skipConstruct);
+      $addSeperatorIncludingRegion_Backwards(this$static, skipSuggestions, skipConstruct);
+    }
+  }
+  return skipSuggestions;
+}
+
+function $separatorIndent(this$static, indexLine){
+  var indentValue, lineContent;
+  indentValue = $getLine(this$static.myParser.history_0, indexLine).indentValue;
+  lineContent = $readLine(this$static, indexLine);
+  return indentValue + $separatorIndent_0(lineContent);
+}
+
+function $skipLine(this$static, indexLine){
+  var line, skipIndentHandler;
+  line = $getLine(this$static.myParser.history_0, indexLine);
+  skipIndentHandler = new IndentationHandler_0;
+  $setTokenIndex(this$static.myParser.history_0, max_0(0, line.tokensSeen - 1));
+  skipIndentHandler.isInLeftMargin = false;
+  $readRecoverToken(this$static.myParser.history_0, this$static.myParser, false);
+  while (this$static.myParser.currentToken != 256) {
+    $readRecoverToken(this$static.myParser.history_0, this$static.myParser, false);
+    $updateIndentation(skipIndentHandler, this$static.myParser.currentToken);
+    if (skipIndentHandler.lineMarginFound) {
+      return indexLine += 1;
+    }
+  }
+  return this$static.myParser.history_0.newLinePoints.size - 1;
+}
+
+function NewStructureSkipper_0(sglr){
+  this.myParser = sglr;
+  this.structTokens = new StructuralTokenRecognizer_0;
+}
+
+function NewStructureSkipper(){
+}
+
+_ = NewStructureSkipper_0.prototype = NewStructureSkipper.prototype = new Object_0;
+_.getClass$ = function getClass_114(){
+  return Lorg_spoofax_jsglr_client_NewStructureSkipper_2_classLit;
+}
+;
+_.myParser = null;
+_.structTokens = null;
+function ParseException_0(){
+  SGLRException_0.call(this, 'Accepting stack has no link');
+}
+
+function ParseException(){
+}
+
+_ = ParseException_0.prototype = ParseException.prototype = new SGLRException;
+_.getClass$ = function getClass_115(){
+  return Lorg_spoofax_jsglr_client_ParseException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Throwable, Q$ParseException, Q$SGLRException]);
+function $addToTreeAmb(this$static, builder, collect){
+  var alt, i;
+  for (i = this$static.kids.length - 1; i >= 0; --i) {
+    alt = this$static.kids[i];
+    alt.getNodeType() == 3?$addToTreeAmb(alt, builder, collect):collect.add(alt.toTreeBottomup(builder));
+  }
+}
+
+function $equals_1(this$static, obj){
+  var i, o;
+  if (!instanceOf(obj, Q$ParseNode))
+    return false;
+  if (obj === this$static)
+    return true;
+  o = obj;
+  if (this$static.nodeType != o.nodeType || this$static.label != o.label || this$static.kids.length != o.kids.length || $hashCode(this$static) != $hashCode(o))
+    return false;
+  for (i = 0; i < this$static.kids.length; ++i) {
+    if (!this$static.kids[i].equals$(o.kids[i]))
+      return false;
+  }
+  return true;
+}
+
+function $getDeepestNonChainNode(this$static){
+  var current, kids;
+  current = this$static;
+  for (;;) {
+    kids = current.getChildren();
+    switch (kids.length) {
+      case 2:
+        if (instanceOf(current, Q$ParseNode)) {
+          if (current.isSetPPC)
+            return current.isParseProductionChain_0()?null:current;
+        }
+
+        if (kids[0].getNodeType() != 1)
+          return kids[0];
+        current = kids[1];
+        break;
+      case 1:
+        current = kids[0];
+        break;
+      case 0:
+        return current.getNodeType() == 1?null:current;
+      default:return current;
+    }
+  }
+}
+
+function $getLabel_0(this$static){
+  if (this$static.nodeType == 3 || this$static.label == -1)
+    throw new UnsupportedOperationException_0;
+  return this$static.label;
+}
+
+function $hashCode(this$static){
+  var n, n$array, n$index, n$max, result;
+  if (this$static.cachedHashCode != 0)
+    return this$static.cachedHashCode;
+  result = 31 * this$static.label;
+  for (n$array = this$static.kids , n$index = 0 , n$max = n$array.length; n$index < n$max; ++n$index) {
+    n = n$array[n$index];
+    result += 31 * n.hashCode$();
+  }
+  this$static.cachedHashCode = result;
+  return result;
+}
+
+function $initParseProductionChain(this$static){
+  var deepest;
+  deepest = $getDeepestNonChainNode(this$static);
+  if (deepest == this$static) {
+    this$static.isSetPPC = true;
+    this$static.isParseProductionChain = false;
+  }
+   else {
+    $setParseProductionChainUpTo(this$static, !deepest, deepest);
+  }
+}
+
+function $isInAmbiguityCluster(this$static, pn){
+  var existing, existing$array, existing$index, existing$max;
+  for (existing$array = this$static.kids , existing$index = 0 , existing$max = existing$array.length; existing$index < existing$max; ++existing$index) {
+    existing = existing$array[existing$index];
+    if (pn == existing) {
+      return true;
+    }
+     else if (existing.getNodeType() == 3) {
+      if ($isInAmbiguityCluster(existing, pn))
+        return true;
+    }
+  }
+  return false;
+}
+
+function $makeAmbiguity(this$static, pn){
+  var left;
+  if (this$static == pn || this$static.nodeType == 3 && $isInAmbiguityCluster(this$static, pn))
+    return;
+  left = new ParseNode_0(this$static.label, this$static.kids, this$static.nodeType);
+  $setFields(this$static, -1, initValues(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, [left, pn]), 3);
+  !!pn && $replaceCycle(pn, this$static, left);
+}
+
+function $replaceCycle(this$static, before, after){
+  var i;
+  if (this$static.nodeType == 3) {
+    for (i = 0; i < this$static.kids.length; ++i)
+      $replaceDescendantAt(this$static, before, after, i);
+  }
+   else 
+    this$static.kids.length > 0 && $replaceDescendantAt(this$static, before, after, this$static.kids.length - 1);
+}
+
+function $replaceDescendantAt(this$static, before, after, index){
+  var kid;
+  kid = this$static.kids[index];
+  if (kid == before) {
+    setCheck(this$static.kids, index, !after?new CycleParseNode_0(before):after);
+    return;
+  }
+   else 
+    instanceOf(kid, Q$ParseNode) && $replaceCycle(kid, before, after);
+}
+
+function $setFields(this$static, label, kids, type){
+  this$static.nodeType = type;
+  this$static.label = label;
+  this$static.kids = kids;
+  this$static.isParseProductionChain = false;
+  this$static.isSetPPC = false;
+}
+
+function $setParseProductionChainUpTo(this$static, value, end){
+  var current, kids, next, parseCurrent;
+  next = this$static;
+  do {
+    current = next;
+    parseCurrent = null;
+    instanceOf(next, Q$ParseNode) && (parseCurrent = next);
+    if (!parseCurrent) {
+      return;
+    }
+    parseCurrent.isParseProductionChain = value;
+    parseCurrent.isSetPPC = true;
+    kids = parseCurrent.kids;
+    switch (kids.length) {
+      case 2:
+        next = kids[1];
+        break;
+      case 1:
+        next = kids[0];
+        break;
+      default:return;
+    }
+  }
+   while (current != end);
+}
+
+function ParseNode_0(label, kids, type){
+  $setFields(this, label, kids, type);
+  if (type == 3) {
+    this.isParseProductionChain = false;
+    this.isSetPPC = true;
+  }
+}
+
+function createAmbNode(kids){
+  var amb;
+  amb = new ParseNode_0(-1, kids, 3);
+  return amb;
+}
+
+function ParseNode(){
+}
+
+_ = ParseNode_0.prototype = ParseNode.prototype = new AbstractParseNode;
+_.equals$ = function equals_14(obj){
+  return $equals_1(this, obj);
+}
+;
+_.getChildren = function getChildren_0(){
+  return this.kids;
+}
+;
+_.getClass$ = function getClass_116(){
+  return Lorg_spoofax_jsglr_client_ParseNode_2_classLit;
+}
+;
+_.getLabel = function getLabel_0(){
+  return $getLabel_0(this);
+}
+;
+_.getNodeType = function getNodeType_0(){
+  return this.nodeType;
+}
+;
+_.hashCode$ = function hashCode_15(){
+  return $hashCode(this);
+}
+;
+_.isParseProductionChain_0 = function isParseProductionChain_0(){
+  this.isSetPPC || $initParseProductionChain(this);
+  return this.isParseProductionChain;
+}
+;
+_.reject = function reject_0(){
+  this.nodeType = 6;
+}
+;
+_.toString$ = function toString_25(){
+  switch (this.nodeType) {
+    case 3:
+      return 'amb(' + toString_15(this.kids) + ')';
+    case 2:
+      return 'regular(aprod(' + this.label + '),' + toString_15(this.kids) + ')';
+    case 5:
+      return 'avoid(' + $getLabel_0(this) + ',' + this.kids + ')';
+    case 4:
+      return 'prefer(' + $getLabel_0(this) + ',' + this.kids + ')';
+    case 6:
+      return 'reject(' + $getLabel_0(this) + ',' + this.kids + ')';
+    default:throw new NotImplementedException_0;
+  }
+}
+;
+_.toTreeBottomup = function toTreeBottomup_0(builder){
+  var i, result, subtrees, collect, alternativesList;
+  if (this.nodeType == 3) {
+    return collect = new ArrayList_0 , $addToTreeAmb(this, builder, collect) , alternativesList = $makeList(builder.factory_0, collect) , $makeAppl(builder.factory_0, builder.ambIStrategoConstructor, initValues(_3Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit, makeCastMap([Q$Serializable]), Q$IStrategoTerm, [alternativesList]), null);
+  }
+  subtrees = new ArrayList_2(this.kids.length);
+  for (i = 0; i < this.kids.length; ++i) {
+    $add(subtrees, this.kids[i].toTreeBottomup(builder));
+  }
+  result = $buildNode(builder, this.label, subtrees);
+  return result;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$AbstractParseNode, Q$ParseNode]);
+_.cachedHashCode = 0;
+_.isParseProductionChain = false;
+_.isSetPPC = false;
+_.kids = null;
+_.label = 0;
+_.nodeType = 0;
+function $clinit_ParseProductionNode(){
+  $clinit_ParseProductionNode = nullMethod;
+  NO_CHILDREN_0 = initDim(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, 0, 0);
+}
+
+function ParseProductionNode_0(prod){
+  $clinit_ParseProductionNode();
+  this.prod = prod;
+}
+
+function ParseProductionNode(){
+}
+
+_ = ParseProductionNode_0.prototype = ParseProductionNode.prototype = new AbstractParseNode;
+_.equals$ = function equals_15(obj){
+  if (!instanceOf(obj, Q$ParseProductionNode))
+    return false;
+  return this.prod == obj.prod;
+}
+;
+_.getChildren = function getChildren_1(){
+  return NO_CHILDREN_0;
+}
+;
+_.getClass$ = function getClass_117(){
+  return Lorg_spoofax_jsglr_client_ParseProductionNode_2_classLit;
+}
+;
+_.getLabel = function getLabel_1(){
+  return this.prod;
+}
+;
+_.getNodeType = function getNodeType_1(){
+  return 1;
+}
+;
+_.hashCode$ = function hashCode_16(){
+  return 6359 * this.prod;
+}
+;
+_.isParseProductionChain_0 = function isParseProductionChain_1(){
+  return true;
+}
+;
+_.reject = function reject_1(){
+  throw new UnsupportedOperationException_0;
+}
+;
+_.toString$ = function toString_26(){
+  return '' + this.prod;
+}
+;
+_.toTreeBottomup = function toTreeBottomup_1(builder){
+  return $buildProduction(builder, this.prod);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$AbstractParseNode, Q$ParseProductionNode]);
+_.prod = 0;
+var NO_CHILDREN_0;
+function $clinit_ParseTable(){
+  $clinit_ParseTable = nullMethod;
+  var i;
+  productionNodes = initDim(_3Lorg_spoofax_jsglr_client_ParseProductionNode_2_classLit, makeCastMap([Q$Serializable]), Q$ParseProductionNode, 257, 0);
+  for (i = 0; i < productionNodes.length; ++i) {
+    productionNodes[i] = new ParseProductionNode_0(i);
+  }
+}
+
+function $getInitialState(this$static){
+  return this$static.states[this$static.startState];
+}
+
+function $getLabel_1(this$static, label){
+  return this$static.labels[label];
+}
+
+function $getPriorities(this$static, prodLabel){
+  var p, p$array, p$index, p$max, results;
+  !this$static.priorityCache && (this$static.priorityCache = new HashMap_0);
+  results = this$static.priorityCache.get(prodLabel);
+  if (results)
+    return results;
+  results = new ArrayList_0;
+  for (p$array = this$static.priorities , p$index = 0 , p$max = p$array.length; p$index < p$max; ++p$index) {
+    p = p$array[p$index];
+    p.left == prodLabel.labelNumber && p.type == 4 && results.add(p);
+  }
+  this$static.priorityCache.put(prodLabel, results);
+  return results;
+}
+
+function $getProduction(this$static, prod){
+  if (prod < 256) {
+    return $makeInt(this$static.factory_0, prod);
+  }
+  return this$static.labels[prod].prod;
+}
+
+function $getState(this$static, s){
+  return this$static.states[s];
+}
+
+function $go(this$static, s, label){
+  return this$static.states[$go_0(s, label)];
+}
+
+function $hasPrefersOrAvoids(this$static){
+  return this$static.hasAvoids || this$static.hasPrefers;
+}
+
+function $hasPriorities(this$static){
+  return this$static.priorities.length > 0 || this$static.associativities.length > 0;
+}
+
+function $initializeTreeBuilder(this$static, treeBuilder){
+  var i;
+  $initializeTable(treeBuilder, this$static.labels.length);
+  for (i = 0; i < this$static.labels.length; ++i) {
+    if (!this$static.labels[i])
+      continue;
+    $initializeLabel(treeBuilder, i, this$static.labels[i].prod);
+  }
+}
+
+function $isInjection(prod){
+  var fun, ls, nm;
+  if (!$equals(prod.getName(), 'prod'))
+    return false;
+  if (prod.getSubterm(1).getTermType() != 1)
+    return false;
+  nm = prod.getSubterm(1).getName();
+  if (!($equals(nm, 'cf') || $equals(nm, 'lex')))
+    return false;
+  if (prod.getSubterm(0).getTermType() != 2)
+    return false;
+  ls = prod.getSubterm(0);
+  if (ls.getSubtermCount() != 1)
+    return false;
+  if (ls.head_0().getTermType() != 1)
+    return false;
+  fun = ls.head_0().getConstructor();
+  return !($equals(fun.name_0, 'lit') && fun.arity == 1);
+}
+
+function $lookupInjection(this$static, prod){
+  return this$static.injections[prod];
+}
+
+function $lookupProduction(currentToken){
+  return productionNodes[currentToken];
+}
+
+function $makeGoto(this$static, newStateNumber, ranges){
+  var cached, g;
+  g = new Goto_0(ranges, newStateNumber);
+  cached = this$static.gotoCache.get(g);
+  if (!cached) {
+    this$static.gotoCache.put(g, g);
+    return g;
+  }
+   else {
+    return cached;
+  }
+}
+
+function $makeRangeList(this$static, ranges){
+  var cached, r;
+  r = new RangeList_0(ranges);
+  cached = this$static.rangesCache.get(r);
+  if (!cached) {
+    this$static.rangesCache.put(r, r);
+    return r;
+  }
+   else {
+    return cached;
+  }
+}
+
+function $makeReduce(this$static, arity, label, status_0, isRecoverAction, isCompletionAction){
+  var cached, r;
+  r = new Reduce_0(arity, label, status_0, isRecoverAction, isCompletionAction);
+  cached = this$static.reduceCache.get(r);
+  if (!cached) {
+    this$static.reduceCache.put(r, r);
+    return r;
+  }
+   else {
+    return cached;
+  }
+}
+
+function $makeShift(this$static, nextState){
+  var cached, s;
+  s = new Shift_0(nextState);
+  cached = this$static.shiftCache.get(s);
+  if (!cached) {
+    this$static.shiftCache.put(s, s);
+    return s;
+  }
+   else {
+    return cached;
+  }
+}
+
+function $parse(this$static, pt){
+  var i, labelsTerm, prioritiesTerm, statesTerm, version;
+  version = pt.getSubterm(0).intValue();
+  if (pt.getSubtermCount() == 1)
+    throw new InvalidParseTableException_0('Invalid parse table (possibly wrong start symbol specified)\n' + pt);
+  this$static.startState = pt.getSubterm(1).intValue();
+  labelsTerm = pt.getSubterm(2);
+  statesTerm = pt.getSubterm(3);
+  prioritiesTerm = pt.getSubterm(4);
+  if (version != 4 && version != 6) {
+    throw new InvalidParseTableException_0('Only supports version 4 and 6 tables.');
+  }
+  this$static.labels = $parseLabels(this$static, labelsTerm);
+  this$static.states = $parseStates(this$static, statesTerm);
+  this$static.priorities = $parsePriorities(prioritiesTerm);
+  this$static.associativities = $parseAssociativities(prioritiesTerm);
+  this$static.injections = initDim(_3Lorg_spoofax_jsglr_client_Label_2_classLit, makeCastMap([Q$Serializable]), Q$Label, this$static.labels.length, 0);
+  for (i = 0; i < this$static.labels.length; ++i)
+    !!this$static.labels[i] && this$static.labels[i].injection && (this$static.injections[i] = this$static.labels[i]);
+  this$static.gotoCache = null;
+  this$static.shiftCache = null;
+  this$static.reduceCache = null;
+  this$static.rangesCache = null;
+  return true;
+}
+
+function $parseActionItems(this$static, items){
+  var a, charClasses, i, isCompletionAction, isRecoverAction, item, label, nextState, productionArity, ret, status_0;
+  ret = initDim(_3Lorg_spoofax_jsglr_client_ActionItem_2_classLit, makeCastMap([Q$Serializable]), Q$ActionItem, items.getSubtermCount(), 0);
+  for (i = 0; i < ret.length; ++i) {
+    a = items.head_0();
+    items = items.tail_0();
+    if ($equals(a.getName(), 'reduce') && a.getConstructor().arity == 3) {
+      productionArity = a.getSubterm(0).intValue();
+      label = a.getSubterm(1).intValue();
+      status_0 = a.getSubterm(2).intValue();
+      isRecoverAction = this$static.labels[label].productionAttributes.isRecover;
+      isCompletionAction = this$static.labels[label].productionAttributes.isCompletion;
+      item = $makeReduce(this$static, productionArity, label, status_0, isRecoverAction, isCompletionAction);
+    }
+     else if ($equals(a.getName(), 'reduce') && a.getConstructor().arity == 4) {
+      productionArity = a.getSubterm(0).intValue();
+      label = a.getSubterm(1).intValue();
+      status_0 = a.getSubterm(2).intValue();
+      charClasses = $parseCharRanges(this$static, a.getSubterm(3));
+      item = new ReduceLookahead_0(productionArity, label, status_0, charClasses);
+    }
+     else if ($equals(a.getName(), 'accept')) {
+      item = new Accept_0;
+    }
+     else if ($equals(a.getName(), 'shift')) {
+      nextState = a.getSubterm(0).intValue();
+      item = $makeShift(this$static, nextState);
+    }
+     else {
+      throw new InvalidParseTableException_0('Unknown action ' + a.getName());
+    }
+    setCheck(ret, i, item);
+  }
+  return ret;
+}
+
+function $parseActions(this$static, actionList){
+  var action, i, items, ranges, ret;
+  ret = initDim(_3Lorg_spoofax_jsglr_client_Action_2_classLit, makeCastMap([Q$Serializable]), Q$Action, actionList.getSubtermCount(), 0);
+  for (i = 0; i < ret.length; ++i) {
+    action = actionList.head_0();
+    actionList = actionList.tail_0();
+    ranges = $parseRanges(this$static, action.getSubterm(0));
+    items = $parseActionItems(this$static, action.getSubterm(1));
+    ret[i] = new Action_0(ranges, items);
+  }
+  return ret;
+}
+
+function $parseAssociativities(prioritiesTerm){
+  var a, left, prods, ret, right;
+  prods = prioritiesTerm.getSubterm(0);
+  ret = new ArrayList_0;
+  for (a = prods.head_0(); !prods.tail_0().isEmpty(); prods = prods.tail_0()) {
+    left = a.getSubterm(0).intValue();
+    right = a.getSubterm(1).intValue();
+    if ($equals(a.getName(), 'left-prio')) {
+      left == right && $add(ret, new Associativity_0);
+    }
+     else if ($equals(a.getName(), 'right-prio')) {
+      left == right && $add(ret, new Associativity_0);
+    }
+     else if ($equals(a.getName(), 'non-assoc')) {
+      left == right && $add(ret, new Associativity_0);
+    }
+     else if ($equals(a.getName(), 'gtr-prio'))
+    ;
+    else if ($equals(a.getName(), 'arg-gtr-prio'))
+    ;
+    else {
+      throw new InvalidParseTableException_0('Unknown priority : ' + a.getName());
+    }
+  }
+  return $toArray_1(ret, initDim(_3Lorg_spoofax_jsglr_client_Associativity_2_classLit, makeCastMap([Q$Serializable]), Q$Associativity, 0, 0));
+}
+
+function $parseCharRanges(this$static, list){
+  var i, l_0, n, ret, t;
+  ret = initDim(_3Lorg_spoofax_jsglr_client_RangeList_2_classLit, makeCastMap([Q$Serializable]), Q$RangeList, list.getSubtermCount(), 0);
+  for (i = 0; i < ret.length; ++i) {
+    t = list.head_0();
+    list = list.tail_0();
+    if ($equals(t.getName(), 'look')) {
+      l_0 = t.getSubterm(0).getSubterm(0);
+      n = t.getSubterm(1);
+    }
+     else {
+      l_0 = t.getSubterm(0).getSubterm(0).getSubterm(0);
+      n = t.getSubterm(0).tail_0();
+    }
+    if (n.getSubtermCount() > 0 && l_0.getSubtermCount() == 1) {
+      ret[i] = $parseRanges(this$static, l_0);
+    }
+     else if (n.getSubtermCount() > 0) {
+      throw new InvalidParseTableException_0('Multiple lookahead not fully supported');
+    }
+     else {
+      ret[i] = $parseRanges(this$static, l_0);
+    }
+  }
+  return ret;
+}
+
+function $parseGotos(this$static, gotos){
+  var go, i, newStateNumber, rangeList, ranges, ret;
+  ret = initDim(_3Lorg_spoofax_jsglr_client_Goto_2_classLit, makeCastMap([Q$Serializable]), Q$Goto, gotos.getSubtermCount(), 0);
+  for (i = 0; i < ret.length; ++i) {
+    go = gotos.head_0();
+    gotos = gotos.tail_0();
+    rangeList = go.getSubterm(0);
+    newStateNumber = go.getSubterm(1).intValue();
+    ranges = $parseRanges(this$static, rangeList);
+    ret[i] = $makeGoto(this$static, newStateNumber, ranges);
+  }
+  return ret;
+}
+
+function $parseLabels(this$static, labelsTerm){
+  var a, attrs, injection, labelNumber, pa, prod, ret;
+  ret = initDim(_3Lorg_spoofax_jsglr_client_Label_2_classLit, makeCastMap([Q$Serializable]), Q$Label, labelsTerm.getSubtermCount() + 257, 0);
+  while (!labelsTerm.isEmpty()) {
+    a = labelsTerm.head_0();
+    prod = a.getSubterm(0);
+    labelNumber = a.getSubterm(1).intValue();
+    injection = $isInjection(prod);
+    attrs = prod.getSubterm(2);
+    pa = $parseProductionAttributes(this$static, attrs);
+    ret[labelNumber] = new Label_0(labelNumber, prod, pa, injection);
+    labelsTerm = labelsTerm.tail_0();
+  }
+  return ret;
+}
+
+function $parsePriorities(prioritiesTerm){
+  var a, arg, left, prods, ret, right;
+  prods = prioritiesTerm.getSubterm(0);
+  ret = new ArrayList_0;
+  while (!prods.isEmpty()) {
+    a = prods.head_0();
+    prods = prods.tail_0();
+    left = a.getSubterm(0).intValue();
+    right = a.getSubterm(1).intValue();
+    if ($equals(a.getName(), 'left-prio'))
+    ;
+    else if ($equals(a.getName(), 'right-prio'))
+    ;
+    else if ($equals(a.getName(), 'non-assoc'))
+    ;
+    else if ($equals(a.getName(), 'gtr-prio')) {
+      left != right && $add(ret, new Priority_0(left, right));
+    }
+     else if ($equals(a.getName(), 'arg-gtr-prio')) {
+      arg = right;
+      right = a.getSubterm(2).intValue();
+      left != right && $add(ret, new Priority_1(left, right, arg));
+    }
+     else {
+      throw new InvalidParseTableException_0('Unknown priority : ' + a.getName());
+    }
+  }
+  return $toArray_1(ret, initDim(_3Lorg_spoofax_jsglr_client_Priority_2_classLit, makeCastMap([Q$Serializable]), Q$Priority, 0, 0));
+}
+
+function $parseProductionAttributes(this$static, attr){
+  var a, child, ctor, isCompletion, isRecover, ls, t, type;
+  if ($equals(attr.getName(), 'attrs')) {
+    type = 0;
+    isRecover = false;
+    isCompletion = false;
+    for (ls = attr.getSubterm(0); !ls.isEmpty(); ls = ls.tail_0()) {
+      t = ls.head_0();
+      ctor = t.getName();
+      if ($equals(ctor, 'reject')) {
+        type = 1;
+        this$static.hasRejects = true;
+      }
+       else if ($equals(ctor, 'prefer')) {
+        type = 2;
+        this$static.hasPrefers = true;
+      }
+       else if ($equals(ctor, 'avoid')) {
+        type = 4;
+        this$static.hasAvoids = true;
+      }
+       else if ($equals(ctor, 'bracket')) {
+        type = 3;
+      }
+       else {
+        if ($equals(ctor, 'assoc')) {
+          a = t.getSubterm(0);
+          if ($equals(a.getName(), 'left') || $equals(a.getName(), 'assoc')) {
+            type = 5;
+          }
+           else if ($equals(a.getName(), 'right')) {
+            type = 6;
+          }
+           else if ($equals(a.getName(), 'non-assoc'))
+          ;
+          else {
+            throw new InvalidParseTableException_0('Unknown assocativity: ' + a.getName());
+          }
+        }
+         else if ($equals(ctor, 'term') && t.getSubtermCount() == 1) {
+          if (instanceOf(t.getSubterm(0), Q$IStrategoNamed)) {
+            child = t.getSubterm(0);
+            child.getSubtermCount() == 1 && $equals(child.getName(), 'cons')?t.getSubterm(0).getSubterm(0):child.getSubtermCount() == 0 && $equals(child.getName(), 'recover')?(isRecover = true):child.getSubtermCount() == 0 && $equals(child.getName(), 'completion') && (isCompletion = true);
+          }
+        }
+         else if ($equals(ctor, 'id')) {
+          t.getSubterm(0);
+        }
+         else {
+          throw new InvalidParseTableException_0('Unknown attribute: ' + t);
+        }
+      }
+    }
+    return new ProductionAttributes_0(type, isRecover, isCompletion);
+  }
+   else if ($equals(attr.getName(), 'no-attrs')) {
+    return new ProductionAttributes_0(0, false, false);
+  }
+  throw new InvalidParseTableException_0('Unknown attribute type: ' + attr);
+}
+
+function $parseRanges(this$static, ranges){
+  var i, idx, ret, size, t, value;
+  size = ranges.getSubtermCount();
+  ret = initDim(_3I_classLit, makeCastMap([Q$Serializable]), -1, size * 2, 1);
+  idx = 0;
+  for (i = 0; i < size; ++i) {
+    t = ranges.head_0();
+    ranges = ranges.tail_0();
+    if (t.getTermType() == 3) {
+      value = t.intValue();
+      ret[idx++] = value;
+      ret[idx++] = value;
+    }
+     else {
+      ret[idx++] = t.getSubterm(0).intValue();
+      ret[idx++] = t.getSubterm(1).intValue();
+    }
+  }
+  return $makeRangeList(this$static, ret);
+}
+
+function $parseStates(this$static, statesTerm){
+  var actions, gotos, i, ret, stateNumber, stateRec, states;
+  states = statesTerm.getSubterm(0);
+  ret = initDim(_3Lorg_spoofax_jsglr_client_State_2_classLit, makeCastMap([Q$Serializable]), Q$State, states.getSubtermCount(), 0);
+  for (i = 0; i < ret.length; ++i) {
+    stateRec = states.head_0();
+    states = states.tail_0();
+    stateNumber = stateRec.getSubterm(0).intValue();
+    gotos = $parseGotos(this$static, stateRec.getSubterm(1));
+    actions = $parseActions(this$static, stateRec.getSubterm(2));
+    ret[i] = new State_0(stateNumber, gotos, actions);
+  }
+  return ret;
+}
+
+function ParseTable_0(pt, factory){
+  $clinit_ParseTable();
+  this.gotoCache = new HashMap_0;
+  this.shiftCache = new HashMap_0;
+  this.reduceCache = new HashMap_0;
+  this.rangesCache = new HashMap_0;
+  this.factory_0 = factory;
+  factory.makeConstructor_0('appl', 2);
+  factory.makeConstructor_0('amb', 1);
+  $parse(this, pt);
+}
+
+function ParseTable(){
+}
+
+_ = ParseTable_0.prototype = ParseTable.prototype = new Object_0;
+_.getClass$ = function getClass_118(){
+  return Lorg_spoofax_jsglr_client_ParseTable_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable]);
+_.associativities = null;
+_.factory_0 = null;
+_.hasAvoids = false;
+_.hasPrefers = false;
+_.hasRejects = false;
+_.injections = null;
+_.labels = null;
+_.priorities = null;
+_.priorityCache = null;
+_.startState = 0;
+_.states = null;
+var productionNodes;
+function ParseTimeoutException_0(token, offset, lineNumber, columnNumber, causes){
+  BadTokenException_0.call(this, token, offset, lineNumber, columnNumber);
+  this.causes = causes;
+}
+
+function ParseTimeoutException(){
+}
+
+_ = ParseTimeoutException_0.prototype = ParseTimeoutException.prototype = new MultiBadTokenException;
+_.getClass$ = function getClass_119(){
+  return Lorg_spoofax_jsglr_client_ParseTimeoutException_2_classLit;
+}
+;
+_.getShortMessage = function getShortMessage_0(){
+  return 'Parser time out';
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Throwable, Q$BadTokenException, Q$SGLRException]);
+function $addStackNodesToNewLinePoint(this$static, myParser){
+  var i, newLinePoint, tokensSeen;
+  tokensSeen = myParser.history_0.tokenIndex - 1;
+  for (i = this$static.newLinePoints.size - 1; i >= 0; --i) {
+    newLinePoint = $get(this$static.newLinePoints, i);
+    if (newLinePoint.tokensSeen == tokensSeen) {
+      $fillStackNodes(newLinePoint, myParser.activeStacks);
+      return;
+    }
+    if (newLinePoint.tokensSeen < tokensSeen)
+      return;
+  }
+}
+
+function $clear_0(this$static){
+  $clear(this$static.newLinePoints);
+  this$static.recoverTokenCount = 0;
+  this$static.tokenIndex = 0;
+  this$static.indentHandler = new IndentationHandler_0;
+  this$static.recoveryIndentHandler = new IndentationHandler_0;
+}
+
+function $getLastLine(this$static){
+  return $get(this$static.newLinePoints, this$static.newLinePoints.size - 1);
+}
+
+function $getLine(this$static, index){
+  if (index < 0 || index > this$static.newLinePoints.size - 1)
+    return null;
+  return $get(this$static.newLinePoints, index);
+}
+
+function $getLineOfTokenPosition(this$static, tokPos){
+  var i, line;
+  for (i = 1; i < this$static.newLinePoints.size; ++i) {
+    line = $get(this$static.newLinePoints, i);
+    if (line.tokensSeen > tokPos)
+      return i - 1;
+  }
+  return this$static.newLinePoints.size - 1;
+}
+
+function $hasFinishedRecoverTokens(this$static){
+  return this$static.tokenIndex >= this$static.recoverTokenCount;
+}
+
+function $keepNewLinePoint(this$static, myParser, tokSeen, inRecoverMode, anIndentHandler){
+  var indent, newLinePoint;
+  indent = anIndentHandler.indentValue;
+  newLinePoint = new IndentInfo_0(myParser.lineNumber, tokSeen, indent);
+  $add(this$static.newLinePoints, newLinePoint);
+  inRecoverMode || $fillStackNodes(newLinePoint, myParser.activeStacks);
+}
+
+function $keepTokenAndState(this$static, myParser){
+  $updateIndentation(this$static.indentHandler, myParser.currentToken);
+  ++this$static.recoverTokenCount;
+  ++this$static.tokenIndex;
+  (this$static.indentHandler.lineMarginFound || myParser.currentToken == 256 || this$static.tokenIndex == 1) && $keepNewLinePoint(this$static, myParser, myParser.history_0.tokenIndex - 1, false, this$static.indentHandler);
+}
+
+function $readCharAt(offset, chars){
+  chars.position = offset;
+  return $read(chars);
+}
+
+function $readLine_0(this$static, StartTok, chars){
+  var currentTok, fragment, pos;
+  fragment = '';
+  pos = StartTok;
+  currentTok = 32;
+  while (currentTok != 10 && currentTok != 256 && pos < this$static.recoverTokenCount) {
+    currentTok = (chars.position = pos , $read(chars));
+    fragment += String.fromCharCode(currentTok & 65535);
+    ++pos;
+  }
+  return fragment;
+}
+
+function $readRecoverToken(this$static, myParser, keepStacks){
+  if (this$static.tokenIndex >= this$static.recoverTokenCount) {
+    if (myParser.currentToken != 256) {
+      if (this$static.recoverTokenCount - 1 >= 0) {
+        $setCurrentToken(myParser, $getNextToken(myParser));
+        $updateIndentation(this$static.indentHandler, myParser.currentToken);
+        ++this$static.recoverTokenCount;
+        (this$static.indentHandler.lineMarginFound || myParser.currentToken == 256) && $keepNewLinePoint(this$static, myParser, myParser.history_0.tokenIndex - 1, !keepStacks, this$static.indentHandler);
+      }
+    }
+  }
+   else {
+    $setCurrentToken(myParser, $readCharAt(this$static.tokenIndex, myParser.currentInputStream));
+    myParser.currentToken == -1 && (myParser.currentToken = 256 , false);
+    keepStacks && $addStackNodesToNewLinePoint(this$static, myParser);
+  }
+  ++this$static.tokenIndex;
+}
+
+function $resetRecoveryIndentHandler(this$static, indentValue){
+  this$static.recoveryIndentHandler = new IndentationHandler_0;
+  this$static.recoveryIndentHandler.isInLeftMargin = true;
+  $setIndentValue(this$static.recoveryIndentHandler, indentValue);
+}
+
+function $setTokenIndex(this$static, tokenIndex){
+  this$static.tokenIndex = tokenIndex;
+}
+
+function ParserHistory_0(){
+  this.newLinePoints = new ArrayList_0;
+  $clear_0(this);
+}
+
+function ParserHistory(){
+}
+
+_ = ParserHistory_0.prototype = ParserHistory.prototype = new Object_0;
+_.getClass$ = function getClass_120(){
+  return Lorg_spoofax_jsglr_client_ParserHistory_2_classLit;
+}
+;
+_.indentHandler = null;
+_.newLinePoints = null;
+_.recoverTokenCount = 0;
+_.recoveryIndentHandler = null;
+_.tokenIndex = 0;
+function $getParseNodes(this$static){
+  var n, pos, ret;
+  ret = initDim(_3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit, makeCastMap([Q$Serializable]), Q$AbstractParseNode, this$static.parentCount, 0);
+  pos = 0;
+  for (n = this$static.parent_0; n; n = n.parent_0) {
+    setCheck(ret, pos++, n.label);
+  }
+  return ret;
+}
+
+function $getRecoverCount(this$static){
+  var result;
+  result = 0;
+  !!this$static.link && (result += this$static.link.recoverCount);
+  !!this$static.parent_0 && (result += $getRecoverCount(this$static.parent_0));
+  return result;
+}
+
+function $getRecoverWeight(this$static){
+  var result;
+  result = 0;
+  !!this$static.link && (result += this$static.link.recoverWeight);
+  !!this$static.parent_0 && (result += $getRecoverWeight(this$static.parent_0));
+  return result;
+}
+
+function $reuse(this$static, parent_0, link, frame, length_0, parentCount){
+  this$static.parent_0 = parent_0;
+  this$static.link = link;
+  this$static.frame = frame;
+  this$static.length_0 = length_0;
+  this$static.parentCount = parentCount;
+  link?(this$static.label = link.label):(this$static.label = null);
+  return this$static;
+}
+
+function Path_0(){
+}
+
+function Path(){
+}
+
+_ = Path_0.prototype = Path.prototype = new Object_0;
+_.getClass$ = function getClass_121(){
+  return Lorg_spoofax_jsglr_client_Path_2_classLit;
+}
+;
+_.toString$ = function toString_27(){
+  var first, p, sb;
+  sb = new StringBuilder_0;
+  first = true;
+  sb.impl.string += '<';
+  for (p = this; p; p = p.parent_0) {
+    first || (sb.impl.string += ', ' , sb);
+    $append_4(sb, p.frame.state.stateNumber);
+    first = false;
+  }
+  sb.impl.string += '>';
+  return sb.impl.string;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Path]);
+_.frame = null;
+_.label = null;
+_.length_0 = 0;
+_.link = null;
+_.parent_0 = null;
+_.parentCount = 0;
+function $clinit_PathListPool(){
+  $clinit_PathListPool = nullMethod;
+  asyncInstance = new PathListPool_0;
+}
+
+function $create(this$static){
+  var paths;
+  if (this$static.asyncP0.usage == 0)
+    return $start(this$static.asyncP0);
+  if (this$static.asyncP1.usage == 0)
+    return $start(this$static.asyncP1);
+  if (this$static.asyncP2.usage == 0)
+    return $start(this$static.asyncP2);
+  if (this$static.asyncP3.usage == 0)
+    return $start(this$static.asyncP3);
+  if (this$static.asyncP4.usage == 0)
+    return $start(this$static.asyncP4);
+  ++asyncCacheMisses;
+  paths = new PooledPathList_0;
+  $endCreate(this$static, paths);
+  return $start(this$static.asyncP0);
+}
+
+function $endCreate(this$static, paths){
+  $reset(paths);
+  if (this$static.asyncP0 == paths || this$static.asyncP1 == paths || this$static.asyncP2 == paths || this$static.asyncP3 == paths || this$static.asyncP4 == paths)
+    return;
+  this$static.asyncP4 = this$static.asyncP3;
+  this$static.asyncP3 = this$static.asyncP2;
+  this$static.asyncP2 = this$static.asyncP1;
+  this$static.asyncP1 = this$static.asyncP0;
+  this$static.asyncP0 = paths;
+}
+
+function PathListPool_0(){
+  this.asyncP0 = new PooledPathList_0;
+  this.asyncP1 = new PooledPathList_0;
+  this.asyncP2 = new PooledPathList_0;
+  this.asyncP3 = new PooledPathList_0;
+  this.asyncP4 = new PooledPathList_0;
+}
+
+function PathListPool(){
+}
+
+_ = PathListPool_0.prototype = PathListPool.prototype = new Object_0;
+_.getClass$ = function getClass_122(){
+  return Lorg_spoofax_jsglr_client_PathListPool_2_classLit;
+}
+;
+var asyncCacheMisses = 0, asyncInstance;
+function $end(this$static){
+  --this$static.usage;
+  if (this$static.usage != 0)
+    throw new IllegalStateException_1('Must always end() the PooledPathList after use');
+  $reset(this$static);
+}
+
+function $get_1(this$static, index){
+  return this$static.rememberPool[index];
+}
+
+function $makePath(this$static, parent_0, link, frame, length_0, parentCount){
+  var p;
+  this$static.allocIndex == this$static.makePool.length && (this$static.makePool = $resizeArray(this$static.makePool));
+  if (!this$static.makePool[this$static.allocIndex]) {
+    p = new Path_0;
+    this$static.makePool[this$static.allocIndex] = p;
+  }
+   else {
+    p = this$static.makePool[this$static.allocIndex];
+  }
+  ++this$static.allocIndex;
+  return $reuse(p, parent_0, link, frame, length_0, parentCount);
+}
+
+function $rememberPath(this$static, parent_0, frame, length_0, parentCount){
+  var p;
+  this$static.rememberIndex == this$static.rememberPool.length && (this$static.rememberPool = $resizeArray(this$static.rememberPool));
+  if (!this$static.rememberPool[this$static.rememberIndex]) {
+    p = new Path_0;
+    this$static.rememberPool[this$static.rememberIndex] = p;
+  }
+   else {
+    p = this$static.rememberPool[this$static.rememberIndex];
+  }
+  ++this$static.rememberIndex;
+  return $reuse(p, parent_0, null, frame, length_0, parentCount);
+}
+
+function $reset(this$static){
+  maxRemembered = max_0(maxRemembered, this$static.rememberIndex);
+  maxAllocated = max_0(maxAllocated, this$static.allocIndex);
+  this$static.usage = 0;
+  this$static.rememberIndex = 0;
+  this$static.allocIndex = 0;
+}
+
+function $resizeArray(array){
+  var result;
+  result = initDim(_3Lorg_spoofax_jsglr_client_Path_2_classLit, makeCastMap([Q$Serializable]), Q$Path, array.length * 2, 0);
+  arraycopy(array, 0, result, 0, array.length);
+  return result;
+}
+
+function $start(this$static){
+  if (this$static.usage == 0) {
+    ++this$static.usage;
+    this$static.rememberIndex = 0;
+    this$static.allocIndex = 1;
+    return this$static;
+  }
+  throw new IllegalStateException_1('PooledPathList may not be used recursively');
+}
+
+function PooledPathList_0(){
+  this.allocIndex = 1;
+  this.rememberIndex = 0;
+  this.usage = 0;
+  this.rememberPool = initDim(_3Lorg_spoofax_jsglr_client_Path_2_classLit, makeCastMap([Q$Serializable]), Q$Path, 512, 0);
+  this.makePool = initDim(_3Lorg_spoofax_jsglr_client_Path_2_classLit, makeCastMap([Q$Serializable]), Q$Path, 512, 0);
+}
+
+function PooledPathList(){
+}
+
+_ = PooledPathList_0.prototype = PooledPathList.prototype = new Object_0;
+_.getClass$ = function getClass_123(){
+  return Lorg_spoofax_jsglr_client_PooledPathList_2_classLit;
+}
+;
+_.allocIndex = 0;
+_.makePool = null;
+_.rememberIndex = 0;
+_.rememberPool = null;
+_.usage = 0;
+var maxAllocated = 0, maxRemembered = 0;
+function PositionMap_0(maxNumberOfAmbiguities){
+  var i;
+  this.positions = initDim(_3I_classLit, makeCastMap([Q$Serializable]), -1, maxNumberOfAmbiguities, 1);
+  for (i = 0; i < this.positions.length; ++i)
+    this.positions[i] = -1;
+}
+
+function PositionMap(){
+}
+
+_ = PositionMap_0.prototype = PositionMap.prototype = new Object_0;
+_.getClass$ = function getClass_124(){
+  return Lorg_spoofax_jsglr_client_PositionMap_2_classLit;
+}
+;
+_.positions = null;
+function Priority_0(left, right){
+  this.type = 4;
+  this.left = left;
+  this.right = right;
+  this.arg = -1;
+}
+
+function Priority_1(left, right, arg){
+  this.type = 4;
+  this.left = left;
+  this.right = right;
+  this.arg = arg;
+}
+
+function Priority(){
+}
+
+_ = Priority_1.prototype = Priority_0.prototype = Priority.prototype = new Object_0;
+_.getClass$ = function getClass_125(){
+  return Lorg_spoofax_jsglr_client_Priority_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Priority]);
+_.arg = 0;
+_.left = 0;
+_.right = 0;
+_.type = 0;
+function $apply(this$static, kids){
+  switch (this$static.status_0) {
+    case 1:
+      return new ParseNode_0(this$static.label, kids, 6);
+    case 4:
+      return new ParseNode_0(this$static.label, kids, 5);
+    case 2:
+      return new ParseNode_0(this$static.label, kids, 4);
+    case 0:
+      return new ParseNode_0(this$static.label, kids, 2);
+  }
+  throw new IllegalStateException_0;
+}
+
+function Production_0(arity, label, status_0, isRecover, isCompletion){
+  this.arity = arity;
+  this.label = label;
+  this.status_0 = status_0;
+  this.isRecover = isRecover;
+  this.isCompletion = isCompletion;
+}
+
+function Production(){
+}
+
+_ = Production_0.prototype = Production.prototype = new Object_0;
+_.equals$ = function equals_16(obj){
+  var o;
+  if (!instanceOf(obj, Q$Production))
+    return false;
+  o = obj;
+  return this.arity == o.arity && this.label == o.label && this.status_0 == o.status_0;
+}
+;
+_.getClass$ = function getClass_126(){
+  return Lorg_spoofax_jsglr_client_Production_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_17(){
+  var result;
+  result = 31 + this.arity;
+  result = 31 * result + this.label;
+  result = 31 * result + this.status_0;
+  return result;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Production]);
+_.arity = 0;
+_.isCompletion = false;
+_.isRecover = false;
+_.label = 0;
+_.status_0 = 0;
+function $isMoreEager_0(this$static, other){
+  return this$static.type != other.type && (this$static.type == 2 || other.type == 4);
+}
+
+function ProductionAttributes_0(type, isRecover, isCompletion){
+  this.type = type;
+  this.isRecover = isRecover;
+  this.isCompletion = isCompletion;
+}
+
+function ProductionAttributes(){
+}
+
+_ = ProductionAttributes_0.prototype = ProductionAttributes.prototype = new Object_0;
+_.getClass$ = function getClass_127(){
+  return Lorg_spoofax_jsglr_client_ProductionAttributes_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable]);
+_.isCompletion = false;
+_.isRecover = false;
+_.type = 0;
+function $equals_2(this$static, obj){
+  if (!instanceOf(obj, Q$RangeList))
+    return false;
+  return this$static.singularRange == -1?equals_7(obj.ranges, this$static.ranges):this$static.singularRange == obj.singularRange;
+}
+
+function $hashCode_0(this$static){
+  return this$static.singularRange == -1?hashCode_9(this$static.ranges):this$static.singularRange;
+}
+
+function $within(this$static, c){
+  var high, i, low;
+  if (this$static.singularRange != -1)
+    return c == this$static.singularRange;
+  for (i = 0; i < this$static.ranges.length; i += 2) {
+    low = this$static.ranges[i];
+    if (low <= c) {
+      high = this$static.ranges[i + 1];
+      if (c <= high) {
+        return true;
+      }
+    }
+     else {
+      return false;
+    }
+  }
+  return false;
+}
+
+function RangeList_0(ranges){
+  if (ranges.length == 1) {
+    this.ranges = null;
+    this.singularRange = ranges[0];
+  }
+   else {
+    this.ranges = ranges;
+    this.singularRange = -1;
+  }
+}
+
+function RangeList(){
+}
+
+_ = RangeList_0.prototype = RangeList.prototype = new Object_0;
+_.equals$ = function equals_17(obj){
+  return $equals_2(this, obj);
+}
+;
+_.getClass$ = function getClass_128(){
+  return Lorg_spoofax_jsglr_client_RangeList_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_18(){
+  return $hashCode_0(this);
+}
+;
+_.toString$ = function toString_28(){
+  var end, high, i, low, sb;
+  sb = new StringBuilder_0;
+  if (this.singularRange != -1) {
+    $append_4(sb, this.singularRange);
+  }
+   else {
+    sb.impl.string += '[';
+    for (i = 0 , end = this.ranges.length - 1; i < end; ++i) {
+      low = this.ranges[i];
+      high = this.ranges[i + 1];
+      $append(sb.impl, low);
+      if (low != high) {
+        sb.impl.string += '-';
+        $append(sb.impl, high);
+      }
+      sb.impl.string += ',';
+    }
+    $replace_1(sb, sb.impl.string.length - 1, sb.impl.string.length);
+  }
+  return sb.impl.string;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RangeList]);
+_.ranges = null;
+_.singularRange = 0;
+function RecoverNode_0(st, tokSeen){
+  this.tokensSeen = tokSeen;
+  this.recoverStack = st;
+}
+
+function RecoverNode(){
+}
+
+_ = RecoverNode_0.prototype = RecoverNode.prototype = new Object_0;
+_.getClass$ = function getClass_129(){
+  return Lorg_spoofax_jsglr_client_RecoverNode_2_classLit;
+}
+;
+_.recoverStack = null;
+_.tokensSeen = 0;
+function $combinedRecover(this$static){
+  var cursorLineIndex, failureLineIndex, failureOffset, fgSucceeded, skipSucceeded, skipSucceeded_0;
+  failureOffset = this$static.mySGLR.history_0.tokenIndex;
+  failureLineIndex = $getLineOfTokenPosition(this$static.mySGLR.history_0, failureOffset - 1);
+  cursorLineIndex = $getLineOfTokenPosition(this$static.mySGLR.history_0, this$static.mySGLR.cursorLocation);
+  $addFailureLocation(this$static.mySGLR.performanceMeasuring, failureOffset);
+  if (this$static.settings.useFineGrained && this$static.settings.useCursorLocation) {
+    if ($tryFineGrainedOnCursorLine(this$static, failureOffset, failureLineIndex, cursorLineIndex)) {
+      return true;
+    }
+  }
+  skipSucceeded = false;
+  (this$static.settings.useRegionSelection || this$static.settings.useRegionRecovery) && (skipSucceeded = (this$static.mySGLR.performanceMeasuring.startCG = fromDouble(currentTimeMillis0()) , this$static.settings.useCursorLocation && $isSetCursorLocation(this$static.mySGLR) && failureLineIndex >= cursorLineIndex?(skipSucceeded_0 = $selectErroneousFragment(this$static.regionSelector, failureOffset, failureLineIndex, cursorLineIndex)):(skipSucceeded_0 = $selectErroneousFragment(this$static.regionSelector, failureOffset, failureLineIndex, -1)) , $endCG(this$static.mySGLR.performanceMeasuring, skipSucceeded_0) , this$static.mySGLR.acceptingStack = null , $clear_1(this$static.mySGLR.activeStacks) , skipSucceeded_0));
+  if (this$static.settings.useFineGrained) {
+    fgSucceeded = $tryFineGrainedRecovery(this$static, failureOffset, failureLineIndex, skipSucceeded);
+    if ($parseRemainingTokens(this$static)) {
+      return true;
+    }
+     else if (fgSucceeded) {
+      return $combinedRecover(this$static);
+    }
+  }
+  if (this$static.settings.useRegionRecovery && skipSucceeded) {
+    $parseErrorFragmentAsWhiteSpace(this$static);
+    return $parseRemainingTokens(this$static) || $combinedRecover(this$static);
+  }
+  return false;
+}
+
+function $parseErrorFragmentAsWhiteSpace(this$static){
+  $clear_1(this$static.mySGLR.activeStacks);
+  $addAll_0(this$static.mySGLR.activeStacks, this$static.regionSelector.erroneousRegion.startSkip.stackNodes);
+  $setTokenIndex(this$static.mySGLR.history_0, this$static.regionSelector.erroneousRegion.startSkip.tokensSeen);
+  $resetRecoveryIndentHandler(this$static.mySGLR.history_0, this$static.regionSelector.erroneousRegion.startSkip.indentValue);
+  while (this$static.mySGLR.history_0.tokenIndex < this$static.regionSelector.erroneousRegion.endSkip.tokensSeen && $size(this$static.mySGLR.activeStacks) > 0 && !this$static.mySGLR.acceptingStack) {
+    $readRecoverToken(this$static.mySGLR.history_0, this$static.mySGLR, false);
+    !isLayoutCharacter(this$static.mySGLR.currentToken & 65535) && this$static.mySGLR.currentToken != 256 && $setCurrentToken(this$static.mySGLR, 32);
+    $doParseStep(this$static.mySGLR);
+  }
+  return $size(this$static.mySGLR.activeStacks) > 0 || !!this$static.mySGLR.acceptingStack;
+}
+
+function $parseRemainingTokens(this$static){
+  while (!$hasFinishedRecoverTokens(this$static.mySGLR.history_0) && $size(this$static.mySGLR.activeStacks) > 0 && !this$static.mySGLR.acceptingStack) {
+    $readRecoverToken(this$static.mySGLR.history_0, this$static.mySGLR, true);
+    $doParseStep(this$static.mySGLR);
+  }
+  return $size(this$static.mySGLR.activeStacks) > 0 || !!this$static.mySGLR.acceptingStack;
+}
+
+function $recover_1(this$static){
+  var recoverySucceeded;
+  this$static.mySGLR.performanceMeasuring.startRecovery = fromDouble(currentTimeMillis0());
+  recoverySucceeded = $combinedRecover(this$static);
+  $endRecovery(this$static.mySGLR.performanceMeasuring, recoverySucceeded);
+}
+
+function $tryFineGrainedOnCursorLine(this$static, failureOffset, failureLineIndex, cursorLineIndex){
+  var fgSucceededOnCursor;
+  if ($isSetCursorLocation(this$static.mySGLR) && failureLineIndex >= cursorLineIndex && failureLineIndex - cursorLineIndex <= 10) {
+    this$static.mySGLR.performanceMeasuring.startFGOnCursor = fromDouble(currentTimeMillis0());
+    fgSucceededOnCursor = $recover_0(this$static.fgCursorLineRecovery, failureOffset, cursorLineIndex);
+    $endFGOnCursor(this$static.mySGLR.performanceMeasuring, fgSucceededOnCursor);
+    if (fgSucceededOnCursor && $parseRemainingTokens(this$static)) {
+      return true;
+    }
+  }
+  return false;
+}
+
+function $tryFineGrainedRecovery(this$static, failureOffset, failureLineIndex, skipSucceeded){
+  var erroneousRegion, fgSucceeded;
+  this$static.mySGLR.performanceMeasuring.startFG = fromDouble(currentTimeMillis0());
+  if (skipSucceeded && this$static.settings.useRegionSelection) {
+    erroneousRegion = this$static.regionSelector.erroneousRegion;
+    fgSucceeded = $recover(this$static.fgRegionalRecovery, failureOffset, min(erroneousRegion.indexHistoryEnd, failureLineIndex), erroneousRegion.startSkip.tokensSeen, erroneousRegion.endSkip.tokensSeen);
+  }
+   else {
+    fgSucceeded = $recover_0(this$static.fgRegionalRecovery, failureOffset, failureLineIndex);
+  }
+  $endFG(this$static.mySGLR.performanceMeasuring, fgSucceeded);
+  return fgSucceeded;
+}
+
+function RecoveryConnector_0(parser){
+  RecoveryConnector_1.call(this, parser, new IntegratedRecoverySettings_0, $setMaxNumberOfRecoverApplicationsLocal($setForwardFactor($setForwardDistanceLines($setBackwardFactor($setBacktrackDistanceLinesSingleToken($setBacktrackDistanceLines($setAcceptDistanceLines($setTimeLimit(new FineGrainedSetting_0, 1000)), 10), 15)), 5), 0.4), 5));
+}
+
+function RecoveryConnector_1(parser, settings, fgSettings){
+  this.mySGLR = parser;
+  this.regionSelector = new RegionRecovery_0(this.mySGLR);
+  this.settings = settings;
+  this.fgCursorLineRecovery = new FineGrainedRecovery_0(this.mySGLR, $setMaxNumberOfRecoverApplicationsLocal($setForwardFactor($setForwardDistanceLines($setBackwardFactor($setBacktrackDistanceLinesSingleToken($setBacktrackDistanceLines($setAcceptDistanceLines($setTimeLimit(new FineGrainedSetting_0, 250)), 1), 1)), 1), 1), 2));
+  this.fgRegionalRecovery = new FineGrainedRecovery_0(this.mySGLR, fgSettings);
+}
+
+function isLayoutCharacter(aChar){
+  return aChar == 32 || aChar == 9 || aChar == 10;
+}
+
+function RecoveryConnector(){
+}
+
+_ = RecoveryConnector_0.prototype = RecoveryConnector.prototype = new Object_0;
+_.getClass$ = function getClass_130(){
+  return Lorg_spoofax_jsglr_client_RecoveryConnector_2_classLit;
+}
+;
+_.fgCursorLineRecovery = null;
+_.fgRegionalRecovery = null;
+_.mySGLR = null;
+_.regionSelector = null;
+_.settings = null;
+function $addFailureLocation(this$static, tokensSeen){
+  $add(this$static.failureLocations, valueOf(tokensSeen));
+}
+
+function $endCG(this$static, succeeded){
+  var CGTime;
+  CGTime = sub(fromDouble(currentTimeMillis0()), this$static.startCG);
+  $add(this$static.CGTimes, valueOf(toInt(CGTime)));
+  $add(this$static.CGResults, ($clinit_Boolean() , succeeded?TRUE:FALSE));
+}
+
+function $endFG(this$static, succeeded){
+  var FGTime;
+  FGTime = sub(fromDouble(currentTimeMillis0()), this$static.startFG);
+  $add(this$static.FGTimes, valueOf(toInt(FGTime)));
+  $add(this$static.FGResults, ($clinit_Boolean() , succeeded?TRUE:FALSE));
+}
+
+function $endFGOnCursor(this$static, succeeded){
+  var FGTime;
+  FGTime = sub(fromDouble(currentTimeMillis0()), this$static.startFGOnCursor);
+  $add(this$static.FGOnCursorTimes, valueOf(toInt(FGTime)));
+  $add(this$static.FGOnCursorResults, ($clinit_Boolean() , succeeded?TRUE:FALSE));
+}
+
+function $endParse(this$static){
+  sub(fromDouble(currentTimeMillis0()), this$static.startParse);
+}
+
+function $endRecovery(this$static, succeeded){
+  var recoveryTime;
+  recoveryTime = sub(fromDouble(currentTimeMillis0()), this$static.startRecovery);
+  $add(this$static.recoveryTimes, valueOf(toInt(recoveryTime)));
+  $add(this$static.recoveryResults, ($clinit_Boolean() , succeeded?TRUE:FALSE));
+}
+
+function RecoveryPerformance_0(){
+  this.CGTimes = new ArrayList_0;
+  this.FGTimes = new ArrayList_0;
+  this.FGOnCursorTimes = new ArrayList_0;
+  new ArrayList_0;
+  this.recoveryTimes = new ArrayList_0;
+  this.CGResults = new ArrayList_0;
+  this.FGResults = new ArrayList_0;
+  this.FGOnCursorResults = new ArrayList_0;
+  new ArrayList_0;
+  this.recoveryResults = new ArrayList_0;
+  this.failureLocations = new ArrayList_0;
+}
+
+function RecoveryPerformance(){
+}
+
+_ = RecoveryPerformance_0.prototype = RecoveryPerformance.prototype = new Object_0;
+_.getClass$ = function getClass_131(){
+  return Lorg_spoofax_jsglr_client_RecoveryPerformance_2_classLit;
+}
+;
+_.CGResults = null;
+_.CGTimes = null;
+_.FGOnCursorResults = null;
+_.FGOnCursorTimes = null;
+_.FGResults = null;
+_.FGTimes = null;
+_.failureLocations = null;
+_.recoveryResults = null;
+_.recoveryTimes = null;
+_.startCG = P0_longLit;
+_.startFG = P0_longLit;
+_.startFGOnCursor = P0_longLit;
+_.startParse = P0_longLit;
+_.startRecovery = P0_longLit;
+function Reduce_0(arity, label, status_0, isRecoverAction, isCompletionAction){
+  this.type = 1;
+  this.arity = arity;
+  this.label = label;
+  this.status_0 = status_0;
+  this.production = new Production_0(arity, label, status_0, isRecoverAction, isCompletionAction);
+}
+
+function Reduce(){
+}
+
+_ = Reduce_0.prototype = Reduce.prototype = new ActionItem;
+_.equals$ = function equals_18(obj){
+  var o;
+  if (!instanceOf(obj, Q$Reduce))
+    return false;
+  o = obj;
+  return this.arity == o.arity && this.label == o.label && this.status_0 == o.status_0;
+}
+;
+_.getClass$ = function getClass_132(){
+  return Lorg_spoofax_jsglr_client_Reduce_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_19(){
+  return this.arity + this.status_0 * 10 + this.label * 100;
+}
+;
+_.toString$ = function toString_29(){
+  return 'reduce(' + this.arity + ', ' + this.label + ', ' + this.status_0 + ')';
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ActionItem, Q$Reduce]);
+_.arity = 0;
+_.label = 0;
+_.production = null;
+_.status_0 = 0;
+function ReduceLookahead_0(arity, label, status_0, charClasses){
+  this.type = 4;
+  this.arity = arity;
+  this.label = label;
+  this.status_0 = status_0;
+  this.charRanges = charClasses;
+  this.production = new Production_0(arity, label, status_0, false, false);
+}
+
+function ReduceLookahead(){
+}
+
+_ = ReduceLookahead_0.prototype = ReduceLookahead.prototype = new ActionItem;
+_.equals$ = function equals_19(obj){
+  var o;
+  if (!instanceOf(obj, Q$Reduce))
+    return false;
+  o = obj;
+  return this.arity == o.arity && this.label == o.label && this.status_0 == o.status_0;
+}
+;
+_.getClass$ = function getClass_133(){
+  return Lorg_spoofax_jsglr_client_ReduceLookahead_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_20(){
+  return this.arity + this.status_0 * 10 + this.label * 100;
+}
+;
+_.toString$ = function toString_30(){
+  return 'reduce(' + this.arity + ', ' + this.label + ', ' + this.status_0 + ')';
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ActionItem]);
+_.arity = 0;
+_.charRanges = null;
+_.label = 0;
+_.production = null;
+_.status_0 = 0;
+function $parseAdditionalTokens(this$static, aSkip){
+  var aChar, aChar$array, aChar$index, aChar$max;
+  for (aChar$array = aSkip.additionalTokens , aChar$index = 0 , aChar$max = aChar$array.length; aChar$index < aChar$max; ++aChar$index) {
+    aChar = aChar$array[aChar$index];
+    $setCurrentToken(this$static.myParser, aChar);
+    $doParseStep(this$static.myParser);
+  }
+  if (aSkip.additionalTokens.length > 0) {
+    $fillStackNodes(aSkip.startSkip, this$static.myParser.activeStacks);
+    $fillStackNodes(aSkip.endSkip, this$static.myParser.activeStacks);
+    $setTokensSeen(aSkip.startSkip, aSkip.startSkip.tokensSeen + aSkip.additionalTokens.length);
+    aSkip.additionalTokens = initDim(_3C_classLit, makeCastMap([Q$Serializable]), -1, 0, 1);
+  }
+}
+
+function $selectErroneousFragment(this$static, failureOffset, failureLineIndex, cursorLineIndex){
+  var currentRegions, cursorParentRegion, cursorRegions, decomposedRegions, eofReached, findSmallerPart, indexAccept, newRegionSelector, openEnd, parentRegion, prevRegions, priorRegions, siblingBackWardRegions, siblingForWardRegions, siblingSurroundingRegions, structRegions, structStart, structStartIndex, prefix;
+  eofReached = this$static.myParser.currentToken == 256;
+  newRegionSelector = new NewStructureSkipper_0(this$static.myParser);
+  this$static.errorDetectionLocation = failureOffset - 1;
+  prevRegions = $selectPrevRegion(newRegionSelector, failureLineIndex);
+  if ($trySetErroneousRegion(this$static, prevRegions)) {
+    decomposedRegions = $getZoomOnPreviousSuggestions(newRegionSelector, this$static.erroneousRegion);
+    $trySetErroneousRegion(this$static, decomposedRegions);
+    return true;
+  }
+  currentRegions = $getCurrentSkipSuggestions(newRegionSelector, failureLineIndex);
+  if ($trySetErroneousRegion(this$static, currentRegions)) {
+    return true;
+  }
+  if (0 <= cursorLineIndex && cursorLineIndex < failureLineIndex) {
+    cursorRegions = $getCurrentSkipSuggestions(newRegionSelector, cursorLineIndex);
+    if ($trySetErroneousRegion(this$static, cursorRegions)) {
+      return true;
+    }
+    cursorParentRegion = $getParentSkipSuggestions(newRegionSelector, cursorLineIndex);
+    if ($trySetErroneousRegion(this$static, cursorParentRegion)) {
+      return true;
+    }
+  }
+  priorRegions = $getPriorRegions(newRegionSelector, failureLineIndex);
+  if ($trySetErroneousRegion(this$static, priorRegions)) {
+    decomposedRegions = $getZoomOnPreviousSuggestions(newRegionSelector, this$static.erroneousRegion);
+    $trySetErroneousRegion(this$static, decomposedRegions);
+    return true;
+  }
+  siblingForWardRegions = $getSibblingForwardSuggestions(newRegionSelector, failureLineIndex);
+  if ($trySetErroneousRegion(this$static, siblingForWardRegions)) {
+    return true;
+  }
+  siblingBackWardRegions = $getSibblingBackwardSuggestions(newRegionSelector, failureLineIndex);
+  if ($trySetErroneousRegion(this$static, siblingBackWardRegions)) {
+    return true;
+  }
+  siblingSurroundingRegions = $getSibblingSurroundingSuggestions(newRegionSelector, failureLineIndex);
+  if ($trySetErroneousRegion(this$static, siblingSurroundingRegions)) {
+    return true;
+  }
+  parentRegion = $getParentSkipSuggestions(newRegionSelector, failureLineIndex);
+  if ($trySetErroneousRegion(this$static, parentRegion)) {
+    return true;
+  }
+  this$static.erroneousRegion = (prefix = new StructureSkipSuggestion_0 , newRegionSelector.myParser.history_0.newLinePoints.size - 1 >= 0 && $setSkipLocations(prefix, cloneIndentInfo($getLine(newRegionSelector.myParser.history_0, 0)), cloneIndentInfo($getLine(newRegionSelector.myParser.history_0, failureLineIndex)), 0, failureLineIndex) , prefix);
+  decomposedRegions = $getZoomOnPreviousSuggestions(newRegionSelector, this$static.erroneousRegion);
+  findSmallerPart = $trySetErroneousRegion(this$static, decomposedRegions);
+  if (!findSmallerPart) {
+    if (eofReached) {
+      structStart = $structureStartPosition($getLastLine(this$static.myParser.history_0));
+      structStartIndex = $getLineOfTokenPosition(this$static.myParser.history_0, structStart);
+      structRegions = $getBlockSuggestions(newRegionSelector, structStartIndex);
+      if ($trySetErroneousRegion(this$static, structRegions)) {
+        return true;
+      }
+    }
+    this$static.myParser.history_0.newLinePoints.size - 1 >= failureLineIndex + 6?(indexAccept = failureLineIndex + 6):(indexAccept = this$static.myParser.history_0.newLinePoints.size - 1);
+    $getLine(this$static.myParser.history_0, indexAccept);
+    openEnd = new IndentInfo_1;
+    openEnd.tokensSeen = 2147483647;
+    $setEndSkip(this$static.erroneousRegion, openEnd);
+    return false;
+  }
+  return true;
+}
+
+function $testRegion(this$static, aSkip){
+  var endPos, indentHandler, nrOfParsedLines;
+  endPos = aSkip.endSkip;
+  $setTokenIndex(this$static.myParser.history_0, endPos.tokensSeen);
+  $clear_1(this$static.myParser.activeStacks);
+  this$static.myParser.acceptingStack = null;
+  $addAll_0(this$static.myParser.activeStacks, endPos.stackNodes);
+  $parseAdditionalTokens(this$static, aSkip);
+  nrOfParsedLines = 0;
+  indentHandler = new IndentationHandler_0;
+  indentHandler.isInLeftMargin = false;
+  while ($size(this$static.myParser.activeStacks) > 0 && nrOfParsedLines < 6) {
+    $readRecoverToken(this$static.myParser.history_0, this$static.myParser, false);
+    $updateIndentation(indentHandler, this$static.myParser.currentToken);
+    $doParseStep(this$static.myParser);
+    this$static.myParser.history_0.tokenIndex > this$static.errorDetectionLocation && indentHandler.lineMarginFound && ++nrOfParsedLines;
+  }
+  if ($size(this$static.myParser.activeStacks) > 0 || !!this$static.myParser.acceptingStack) {
+    return true;
+  }
+  return false;
+}
+
+function $trySetErroneousRegion(this$static, regions){
+  var aSkip, hasFoundErroneousRegion, indexSkips;
+  aSkip = new StructureSkipSuggestion_0;
+  indexSkips = 0;
+  this$static.myParser.acceptingStack = null;
+  $clear_1(this$static.myParser.activeStacks);
+  hasFoundErroneousRegion = false;
+  while (indexSkips < regions.size && !hasFoundErroneousRegion) {
+    aSkip = (checkIndex(indexSkips, regions.size) , regions.array[indexSkips]);
+    hasFoundErroneousRegion = $testRegion(this$static, aSkip);
+    ++indexSkips;
+  }
+  hasFoundErroneousRegion && (this$static.erroneousRegion = aSkip);
+  return hasFoundErroneousRegion;
+}
+
+function RegionRecovery_0(sglr){
+  this.myParser = sglr;
+}
+
+function RegionRecovery(){
+}
+
+_ = RegionRecovery_0.prototype = RegionRecovery.prototype = new Object_0;
+_.getClass$ = function getClass_134(){
+  return Lorg_spoofax_jsglr_client_RegionRecovery_2_classLit;
+}
+;
+_.erroneousRegion = null;
+_.errorDetectionLocation = 0;
+_.myParser = null;
+function $actor(this$static, st){
+  var actState, action, action$array, action$index, action$max, ai, ai$array, ai$index, ai$max, red, s, sh;
+  s = st.state;
+  for (action$array = s.actions , action$index = 0 , action$max = action$array.length; action$index < action$max; ++action$index) {
+    action = action$array[action$index];
+    if ($accepts(action, this$static.currentToken)) {
+      for (ai$array = action.items , ai$index = 0 , ai$max = ai$array.length; ai$index < ai$max; ++ai$index) {
+        ai = ai$array[ai$index];
+        switch (ai.type) {
+          case 2:
+            {
+              sh = ai;
+              actState = new ActionState_0(st, $getState(this$static.parseTable, sh.nextState));
+              $addLast(this$static.forShifter, actState);
+              $size(this$static.forShifter) > this$static.maxBranches && (this$static.maxBranches = $size(this$static.forShifter));
+              break;
+            }
+
+          case 1:
+            {
+              red = ai;
+              $doReductions(this$static, st, red.production);
+              break;
+            }
+
+          case 4:
+            {
+              red = ai;
+              $doCheckLookahead(this$static, red.charRanges, 0) && $doReductions(this$static, st, red.production);
+              break;
+            }
+
+          case 3:
+            {
+              $allLinksRejected(st) || (this$static.acceptingStack = st);
+              break;
+            }
+
+          default:throw new IllegalStateException_1('Unknown action type: ' + ai.type);
+        }
+      }
+    }
+  }
+}
+
+function $actorOnActiveStacksOverNewLink(this$static, nl){
+  var action, action$array, action$index, action$max, ai, ai$array, ai$index, ai$max, i, pos, red, red2, st2, sz;
+  sz = $size(this$static.activeStacks);
+  for (i = 0; i < sz; ++i) {
+    pos = $size(this$static.activeStacks) - sz + i;
+    st2 = $get_2(this$static.activeStacks, pos);
+    if ($allLinksRejected(st2) || $contains_0(this$static.forActor, st2) || $contains_0(this$static.forActorDelayed, st2)) {
+      continue;
+    }
+    for (action$array = st2.state.actions , action$index = 0 , action$max = action$array.length; action$index < action$max; ++action$index) {
+      action = action$array[action$index];
+      if ($accepts(action, this$static.currentToken)) {
+        for (ai$array = action.items , ai$index = 0 , ai$max = ai$array.length; ai$index < ai$max; ++ai$index) {
+          ai = ai$array[ai$index];
+          switch (ai.type) {
+            case 1:
+              red = ai;
+              $doLimitedReductions(this$static, st2, red.production, nl);
+              break;
+            case 4:
+              red2 = ai;
+              $doCheckLookahead(this$static, red2.charRanges, 0) && $doLimitedReductions(this$static, st2, red2.production, nl);
+          }
+        }
+      }
+    }
+  }
+}
+
+function $addNewRecoverStack(this$static, st0, s, prod, length_0, numberOfRecoveries, recoverWeight, t){
+  var nl, st1;
+  if (!(this$static.isFineGrainedMode && prod.status_0 != 1)) {
+    return;
+  }
+  st1 = new Frame_1(s);
+  nl = (st1.stepsCount >= st1.steps.length && $resizeSteps(st1) , st1.steps[st1.stepsCount++] = new Link_1(st0, t, length_0));
+  nl.recoverCount = numberOfRecoveries;
+  nl.recoverWeight = recoverWeight;
+  $addFirst(this$static.recoverStacks, st1);
+}
+
+function $addNewStack(this$static, st0, s, prod, length_0, numberOfRecoveries, recoverWeight, t){
+  var nl, st1;
+  st1 = new Frame_1(s);
+  nl = (st1.stepsCount >= st1.steps.length && $resizeSteps(st1) , st1.steps[st1.stepsCount++] = new Link_1(st0, t, length_0));
+  nl.recoverCount = numberOfRecoveries;
+  nl.recoverWeight = recoverWeight;
+  $addFirst(this$static.activeStacks, st1);
+  $addFirst(this$static.forActorDelayed, st1);
+  if (prod.status_0 == 1) {
+    nl.rejected = true;
+    nl.label.reject();
+    ++this$static.rejectCount;
+  }
+}
+
+function $addStack(this$static, st1){
+  $addFirst(this$static.activeStacks, st1);
+}
+
+function $calcRecoverCount(prod, path){
+  var result;
+  result = $getRecoverCount(path);
+  (prod.isRecover || prod.isCompletion) && (result += 1);
+  return result;
+}
+
+function $calcRecoverWeight(prod, path){
+  var result;
+  result = $getRecoverWeight(path);
+  if (prod.isRecover || prod.isCompletion) {
+    result += 1;
+    path.length_0 > 0 && !prod.isCompletion && (result += 1);
+  }
+  return result;
+}
+
+function $createBadTokenException(this$static){
+  var action, expected, items, shift, singlePreviousStack, token;
+  singlePreviousStack = $size(this$static.activeStacks) == 1?$get_2(this$static.activeStacks, 0):null;
+  if (singlePreviousStack) {
+    action = $getSingularAction(singlePreviousStack.state);
+    if (!!action && action.items.length == 1) {
+      expected = new StringBuilder_0;
+      do {
+        token = action.ranges.singularRange;
+        if (token == -1) {
+          break;
+        }
+        $append_3(expected, token & 65535);
+        items = action.items;
+        if (!(items.length == 1 && items[0].type == 2)) {
+          break;
+        }
+        shift = items[0];
+        action = $getSingularAction($getState(this$static.parseTable, shift.nextState));
+      }
+       while (action);
+      if (expected.impl.string.length > 0) {
+        return new TokenExpectedException_0(expected.impl.string, this$static.currentToken, this$static.tokensSeen + this$static.startOffset - 1, this$static.lineNumber, this$static.columnNumber);
+      }
+    }
+  }
+  return new BadTokenException_0(this$static.currentToken, this$static.tokensSeen + this$static.startOffset - 1, this$static.lineNumber, this$static.columnNumber);
+}
+
+function $doCheckLookahead(this$static, charClass, pos){
+  var c, permit;
+  c = $read(this$static.currentInputStream);
+  if (c == -1) {
+    return true;
+  }
+  permit = true;
+  pos < charClass.length && (permit = !$within(charClass[pos], c) && $doCheckLookahead(this$static, charClass, pos + 1));
+  --this$static.currentInputStream.position;
+  return permit;
+}
+
+function $doLimitedReductions(this$static, st, prod, l_0){
+  var limitedPool;
+  if (!$recoverModeOk(this$static, prod)) {
+    return;
+  }
+  limitedPool = $create(this$static.pathCache);
+  try {
+    $findLimitedPaths(st, limitedPool, prod.arity, l_0);
+    $reduceAllPaths(this$static, prod, limitedPool);
+  }
+   finally {
+    $endCreate(this$static.pathCache, limitedPool);
+  }
+}
+
+function $doParseStep(this$static){
+  $parseCharacter(this$static);
+  $shifter(this$static);
+}
+
+function $doReductions(this$static, st, prod){
+  var paths;
+  if (!$recoverModeOk(this$static, prod)) {
+    return;
+  }
+  paths = $create(this$static.pathCache);
+  try {
+    $doComputePathsToRoot(st, paths, null, prod.arity, 0, 0);
+    $reduceAllPaths(this$static, prod, paths);
+  }
+   finally {
+    $endCreate(this$static.pathCache, paths);
+  }
+}
+
+function $findStack(stacks, s){
+  var desiredState, i, size, stack;
+  desiredState = s.stateNumber;
+  size = stacks.tail - stacks.head & stacks.elements.length - 1;
+  for (i = 0; i < size; ++i) {
+    stack = $get_2(stacks, i);
+    if (stack.state.stateNumber == desiredState) {
+      return stack;
+    }
+  }
+  return null;
+}
+
+function $getNextToken(this$static){
+  var ch;
+  ch = $read(this$static.currentInputStream);
+  $updateLineAndColumnInfo(this$static, ch);
+  if (ch == -1) {
+    return 256;
+  }
+  return ch;
+}
+
+function $inCompletionMode(this$static, prod){
+  if (!(prod.isCompletion && prod.arity == 0))
+    return this$static.isCompletionMode && this$static.cursorLocation <= this$static.history_0.tokenIndex && this$static.history_0.tokenIndex <= this$static.cursorLocation + 1000;
+  return this$static.isCompletionMode && this$static.cursorLocation - 1000 <= this$static.history_0.tokenIndex && this$static.history_0.tokenIndex <= this$static.cursorLocation;
+}
+
+function $isSetCursorLocation(this$static){
+  return 0 < this$static.cursorLocation && this$static.cursorLocation != 2147483647;
+}
+
+function $logAfterParsing(this$static){
+  var bad;
+  if (!this$static.acceptingStack) {
+    bad = $createBadTokenException(this$static);
+    if (this$static.collectedErrors.map.size_0() == 0) {
+      throw bad;
+    }
+     else {
+      $add_1(this$static.collectedErrors, bad);
+      throw new MultiBadTokenException_0(this$static.collectedErrors);
+    }
+  }
+}
+
+function $logBeforeReducer(){
+}
+
+function $parse_0(this$static, input){
+  var result, st0;
+  $clear_1(this$static.forActor);
+  $clear_1(this$static.forActorDelayed);
+  $clear_1(this$static.forShifter);
+  $clear_0(this$static.history_0);
+  this$static.startFrame = ($clear_1(this$static.activeStacks) , st0 = new Frame_1($getInitialState(this$static.parseTable)) , $addFirst(this$static.activeStacks, st0) , st0);
+  this$static.tokensSeen = 0;
+  this$static.currentInputStream = new PushbackStringIterator_0(input);
+  this$static.acceptingStack = null;
+  this$static.collectedErrors.map.clear();
+  this$static.history_0 = new ParserHistory_0;
+  this$static.performanceMeasuring = new RecoveryPerformance_0;
+  maxRemembered = 0;
+  maxAllocated = 0;
+  $clinit_PathListPool();
+  asyncCacheMisses = 0;
+  this$static.ambiguityManager = new AmbiguityManager_0(input.length);
+  this$static.lineNumber = 1;
+  this$static.columnNumber = 0;
+  fromDouble(currentTimeMillis0());
+  this$static.performanceMeasuring.startParse = fromDouble(currentTimeMillis0());
+  result = $sglrParse(this$static, null);
+  return result;
+}
+
+function $parseCharacter(this$static){
+  var st, empty;
+  $clear_1(this$static.activeStacksWorkQueue);
+  $addAll_0(this$static.activeStacksWorkQueue, this$static.activeStacks);
+  $clear_1(this$static.forActorDelayed);
+  $clear_1(this$static.forShifter);
+  while ($size(this$static.activeStacksWorkQueue) > 0 || $size(this$static.forActor) > 0) {
+    st = $pickStackNodeFromActivesOrForActor(this$static, this$static.activeStacksWorkQueue);
+    $allLinksRejected(st) || $actor(this$static, st);
+    $size(this$static.activeStacksWorkQueue) == 0 && $size(this$static.forActor) == 0 && (empty = this$static.forActor , this$static.forActor = this$static.forActorDelayed , $clear_1(empty) , this$static.forActorDelayed = empty , undefined);
+  }
+}
+
+function $pickStackNodeFromActivesOrForActor(this$static, actives){
+  var st;
+  (actives.tail - actives.head & actives.elements.length - 1) > 0?(st = $removeFirst(actives)):(st = $removeFirst(this$static.forActor));
+  return st;
+}
+
+function $recoverModeOk(this$static, prod){
+  if (!prod.isCompletion) {
+    return !prod.isRecover || this$static.isFineGrainedMode;
+  }
+  return $inCompletionMode(this$static, prod);
+}
+
+function $reduceAllPaths(this$static, prod, paths){
+  var i, kids, next, path, st0;
+  for (i = 0; i < paths.rememberIndex; ++i) {
+    path = paths.rememberPool[i];
+    kids = $getParseNodes(path);
+    st0 = path.frame;
+    next = $go(this$static.parseTable, st0.state, prod.label);
+    (!prod.isCompletion || this$static.history_0.tokenIndex - path.length_0 < this$static.cursorLocation) && (!this$static.isFineGrainedMode || $calcRecoverCount(prod, path) <= this$static.fineGrainedRecoverMax || this$static.history_0.tokenIndex - path.length_0 < this$static.fineGrainedStartLocation) && $calcRecoverCount(prod, path) <= this$static.recoverIntegrator.settings.maxNumberOfRecoverApplicationsGlobal && (prod.isRecover?$reducerRecoverProduction(this$static, st0, next, prod, kids, path):$reducer(this$static, st0, next, prod, kids, path));
+  }
+  if (this$static.asyncAborted) {
+    throw new TaskCancellationException_0;
+  }
+}
+
+function $reducer(this$static, st0, s, prod, kids, path){
+  var length_0, nl, numberOfRecoveries, recoverWeight, st1, t;
+  $logBeforeReducer(path);
+  ++this$static.reductionCount;
+  length_0 = path.length_0;
+  numberOfRecoveries = $calcRecoverCount(prod, path);
+  recoverWeight = $calcRecoverWeight(prod, path);
+  t = $apply(prod, kids);
+  st1 = $findStack(this$static.activeStacks, s);
+  if (!st1) {
+    $addNewStack(this$static, st0, s, prod, length_0, numberOfRecoveries, recoverWeight, t);
+  }
+   else {
+    nl = $findDirectLink(st1, st0);
+    if (nl) {
+      prod.status_0 == 1 && (nl.rejected = true , nl.label.reject());
+      if (recoverWeight == 0 && nl.recoverWeight == 0 || nl.rejected) {
+        $makeAmbiguity(nl.label, t);
+        ++this$static.ambiguityManager.ambiguityCallsCount;
+      }
+       else if (recoverWeight < nl.recoverWeight) {
+        nl.label = t;
+        nl.recoverCount = numberOfRecoveries;
+        nl.recoverWeight = recoverWeight;
+        $actorOnActiveStacksOverNewLink(this$static, nl);
+      }
+       else 
+        recoverWeight == nl.recoverWeight && (nl.label = t);
+    }
+     else {
+      nl = (st1.stepsCount >= st1.steps.length && $resizeSteps(st1) , st1.steps[st1.stepsCount++] = new Link_1(st0, t, length_0));
+      nl.recoverWeight = recoverWeight;
+      nl.recoverCount = numberOfRecoveries;
+      if (prod.status_0 == 1) {
+        nl.rejected = true;
+        nl.label.reject();
+        ++this$static.rejectCount;
+      }
+      $actorOnActiveStacksOverNewLink(this$static, nl);
+    }
+  }
+}
+
+function $reducerRecoverProduction(this$static, st0, s, prod, kids, path){
+  var length_0, lnActive, nlRecover, numberOfRecoveries, recoverWeight, stActive, stRecover, t;
+  length_0 = path.length_0;
+  numberOfRecoveries = $calcRecoverCount(prod, path);
+  recoverWeight = $calcRecoverWeight(prod, path);
+  t = $apply(prod, kids);
+  stActive = $findStack(this$static.activeStacks, s);
+  if (stActive) {
+    lnActive = $findDirectLink(stActive, st0);
+    if (lnActive) {
+      return;
+    }
+  }
+  stRecover = $findStack(this$static.recoverStacks, s);
+  if (stRecover) {
+    nlRecover = $findDirectLink(stRecover, st0);
+    if (nlRecover) {
+      return;
+    }
+    nlRecover = (stRecover.stepsCount >= stRecover.steps.length && $resizeSteps(stRecover) , stRecover.steps[stRecover.stepsCount++] = new Link_1(st0, t, length_0));
+    nlRecover.recoverCount = numberOfRecoveries;
+    nlRecover.recoverWeight = recoverWeight;
+    return;
+  }
+  $addNewRecoverStack(this$static, st0, s, prod, length_0, numberOfRecoveries, recoverWeight, t);
+}
+
+function $setCurrentToken(this$static, currentToken){
+  this$static.currentToken = currentToken;
+  currentToken == -1 && (this$static.currentToken = 256);
+}
+
+function $setFineGrainedRecoverMax(this$static, fineGrainedRecoverMax){
+  this$static.fineGrainedRecoverMax = fineGrainedRecoverMax;
+}
+
+function $setFineGrainedStartLocation(this$static, fineGrainedStartLocation){
+  this$static.fineGrainedStartLocation = fineGrainedStartLocation;
+}
+
+function $setFinegrainedRecoverMode(this$static, fineGrainedMode){
+  this$static.isFineGrainedMode = fineGrainedMode;
+  this$static.recoverStacks = new ArrayDeque_0;
+}
+
+function $setUseStructureRecovery(this$static){
+  this$static.useIntegratedRecovery = true;
+  this$static.recoverIntegrator = new RecoveryConnector_0(this$static);
+}
+
+function $sglrParse(this$static, startSymbol){
+  var $e0, s;
+  try {
+    do {
+      $setCurrentToken(this$static, $getNextToken(this$static));
+      $keepTokenAndState(this$static.history_0, this$static);
+      $parseCharacter(this$static);
+      $shifter(this$static);
+    }
+     while (this$static.currentToken != 256 && $size(this$static.activeStacks) > 0);
+    !this$static.acceptingStack && $add_1(this$static.collectedErrors, $createBadTokenException(this$static));
+    if (this$static.useIntegratedRecovery && !this$static.acceptingStack) {
+      $recover_1(this$static.recoverIntegrator);
+      if (!this$static.acceptingStack && $size(this$static.activeStacks) > 0) {
+        return $sglrParse(this$static, startSymbol);
+      }
+    }
+    $endParse(this$static.performanceMeasuring);
+  }
+   catch ($e0) {
+    $e0 = caught($e0);
+    if (instanceOf($e0, Q$TaskCancellationException)) {
+      throw new ParseTimeoutException_0(this$static.currentToken, this$static.tokensSeen - 1, this$static.lineNumber, this$static.columnNumber, this$static.collectedErrors);
+    }
+     else 
+      throw $e0;
+  }
+   finally {
+    $clear_1(this$static.activeStacks);
+    $clear_1(this$static.activeStacksWorkQueue);
+    $clear_1(this$static.forShifter);
+    $clear_0(this$static.history_0);
+    !!this$static.recoverStacks && $clear_1(this$static.recoverStacks);
+  }
+  $logAfterParsing(this$static);
+  s = $findDirectLink(this$static.acceptingStack, this$static.startFrame);
+  if (!s) {
+    throw new ParseException_0;
+  }
+  debug(initValues(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, ['recoveries: ', valueOf(s.recoverCount)]));
+  return $applyFilters(this$static.disambiguator, this$static, s.label, startSymbol);
+}
+
+function $shifter(this$static){
+  var as, prod, st1;
+  $clear_1(this$static.activeStacks);
+  prod = $lookupProduction(this$static.currentToken);
+  while ($size(this$static.forShifter) > 0) {
+    as = $removeFirst(this$static.forShifter);
+    if (!this$static.parseTable.hasRejects || !$allLinksRejected(as.st)) {
+      st1 = $findStack(this$static.activeStacks, as.s);
+      if (!st1) {
+        st1 = new Frame_1(as.s);
+        $addFirst(this$static.activeStacks, st1);
+      }
+      $addLink(st1, as.st, prod);
+    }
+  }
+}
+
+function $updateLineAndColumnInfo(this$static, ch){
+  ++this$static.tokensSeen;
+  switch (ch) {
+    case 10:
+      ++this$static.lineNumber;
+      this$static.columnNumber = 0;
+      break;
+    case 9:
+      this$static.columnNumber = (~~(this$static.columnNumber / 4) + 1) * 4;
+      break;
+    case -1:
+      break;
+    default:++this$static.columnNumber;
+  }
+}
+
+function SGLR_0(treeBuilder, parseTable){
+  this.collectedErrors = new LinkedHashSet_0;
+  this.pathCache = ($clinit_PathListPool() , $clinit_PathListPool() , asyncInstance);
+  this.activeStacksWorkQueue = new ArrayDeque_0;
+  this.parseTable = parseTable;
+  this.activeStacks = new ArrayDeque_0;
+  this.forActor = new ArrayDeque_0;
+  this.forActorDelayed = new ArrayDeque_0;
+  this.forShifter = new ArrayDeque_0;
+  this.disambiguator = new Disambiguator_0;
+  this.useIntegratedRecovery = false;
+  this.recoverIntegrator = null;
+  this.history_0 = new ParserHistory_0;
+  this.isCompletionMode = false;
+  this.cursorLocation = 2147483647;
+  this.treeBuilder = treeBuilder;
+  $initializeTreeBuilder(this.parseTable, treeBuilder);
+}
+
+function SGLR(){
+}
+
+_ = SGLR_0.prototype = SGLR.prototype = new Object_0;
+_.getClass$ = function getClass_135(){
+  return Lorg_spoofax_jsglr_client_SGLR_2_classLit;
+}
+;
+_.acceptingStack = null;
+_.activeStacks = null;
+_.ambiguityManager = null;
+_.asyncAborted = false;
+_.columnNumber = 0;
+_.currentInputStream = null;
+_.currentToken = 0;
+_.cursorLocation = 0;
+_.disambiguator = null;
+_.fineGrainedRecoverMax = 0;
+_.fineGrainedStartLocation = 0;
+_.forActor = null;
+_.forActorDelayed = null;
+_.forShifter = null;
+_.history_0 = null;
+_.isCompletionMode = false;
+_.isFineGrainedMode = false;
+_.lineNumber = 0;
+_.maxBranches = 0;
+_.parseTable = null;
+_.performanceMeasuring = null;
+_.recoverIntegrator = null;
+_.recoverStacks = null;
+_.reductionCount = 0;
+_.rejectCount = 0;
+_.startFrame = null;
+_.startOffset = 0;
+_.tokensSeen = 0;
+_.treeBuilder = null;
+_.useIntegratedRecovery = false;
+function Shift_0(nextState){
+  this.type = 2;
+  this.nextState = nextState;
+}
+
+function Shift(){
+}
+
+_ = Shift_0.prototype = Shift.prototype = new ActionItem;
+_.equals$ = function equals_20(obj){
+  if (!instanceOf(obj, Q$Shift))
+    return false;
+  return this.nextState == obj.nextState;
+}
+;
+_.getClass$ = function getClass_136(){
+  return Lorg_spoofax_jsglr_client_Shift_2_classLit;
+}
+;
+_.hashCode$ = function hashCode_21(){
+  return this.nextState;
+}
+;
+_.toString$ = function toString_31(){
+  return 'shift(' + this.nextState + ')';
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ActionItem, Q$Shift]);
+_.nextState = 0;
+function StartSymbolException_0(message){
+  SGLRException_0.call(this, message);
+}
+
+function StartSymbolException(){
+}
+
+_ = StartSymbolException_0.prototype = StartSymbolException.prototype = new SGLRException;
+_.getClass$ = function getClass_137(){
+  return Lorg_spoofax_jsglr_client_StartSymbolException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Throwable, Q$SGLRException]);
+function $getSingularAction(this$static){
+  return this$static.actions.length == 1?this$static.actions[0]:null;
+}
+
+function $go_0(this$static, labelNumber){
+  var g, g$array, g$index, g$max;
+  for (g$array = this$static.gotos , g$index = 0 , g$max = g$array.length; g$index < g$max; ++g$index) {
+    g = g$array[g$index];
+    if ($within(g.ranges, labelNumber))
+      return g.nextState;
+  }
+  throw new IllegalStateException_1('Cannot go to label #' + labelNumber);
+}
+
+function State_0(stateNumber, gotos, actions){
+  this.stateNumber = stateNumber;
+  this.gotos = gotos;
+  this.actions = actions;
+}
+
+function State(){
+}
+
+_ = State_0.prototype = State.prototype = new Object_0;
+_.getClass$ = function getClass_138(){
+  return Lorg_spoofax_jsglr_client_State_2_classLit;
+}
+;
+_.toString$ = function toString_32(){
+  var i, sb;
+  sb = new StringBuilder_0;
+  sb.impl.string += 'State(';
+  $append_4(sb, this.stateNumber);
+  sb.impl.string += ', #';
+  $append_4(sb, this.actions.length);
+  sb.impl.string += ' actions, #';
+  $append_4(sb, this.gotos.length);
+  sb.impl.string += ' gotos)';
+  sb.impl.string += '\n - [';
+  for (i = 0; i < this.gotos.length; ++i) {
+    $append_5(sb, this.gotos[i]);
+    i < this.gotos.length - 1 && (sb.impl.string += ', ' , sb);
+  }
+  sb.impl.string += ']\n - [';
+  for (i = 0; i < this.actions.length; ++i) {
+    $append_5(sb, this.actions[i]);
+    i < this.actions.length - 1 && (sb.impl.string += ', ' , sb);
+  }
+  sb.impl.string += ']';
+  return sb.impl.string;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$State]);
+_.actions = null;
+_.gotos = null;
+_.stateNumber = 0;
+function $clinit_StructuralTokenRecognizer(){
+  $clinit_StructuralTokenRecognizer = nullMethod;
+  closingTokens = initValues(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable]), Q$String, ['}', ')', ']|', '>', '|', ']', '*/']);
+  openingTokens = initValues(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable]), Q$String, ['{', '(', '|[', '<', '|', '[']);
+  separatorTokens = initValues(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable]), Q$String, [',', ';', '<+', '+>', '+', '>', '<', '=>', '->', '&&', '&', '||', '|']);
+}
+
+function $endsWith_0(s, tokens){
+  var i;
+  s = $trim(s);
+  for (i = 0; i < tokens.length; ++i) {
+    if ($endsWith(s, tokens[i]))
+      return true;
+  }
+  return false;
+}
+
+function $removeSeparatorAtTheEnd(aLine){
+  var i, line, toParse, charArr, n;
+  line = $trim(aLine);
+  for (i = 0; i < separatorTokens.length; ++i) {
+    if ($endsWith(line, separatorTokens[i])) {
+      toParse = $substring_0(line, 0, line.length - separatorTokens[i].length);
+      return n = toParse.length , charArr = initDim(_3C_classLit, makeCastMap([Q$Serializable]), -1, n, 1) , $getChars(toParse, n, charArr, 0) , charArr;
+    }
+  }
+  return initDim(_3C_classLit, makeCastMap([Q$Serializable]), -1, 0, 1);
+}
+
+function $separatorIndent_0(lineContent){
+  var i, length_0, line;
+  line = $trim(lineContent);
+  length_0 = line.length;
+  for (i = 0; i < separatorTokens.length; ++i) {
+    if ($indexOf(line, separatorTokens[i]) == 0) {
+      line = $substring(line, separatorTokens[i].length);
+      line = $trim(line);
+    }
+  }
+  return length_0 - line.length;
+}
+
+function $startsWith(s, tokens){
+  var i;
+  for (i = 0; i < tokens.length; ++i) {
+    if (s.indexOf(tokens[i]) == 0)
+      return true;
+  }
+  return false;
+}
+
+function StructuralTokenRecognizer_0(){
+  $clinit_StructuralTokenRecognizer();
+}
+
+function StructuralTokenRecognizer(){
+}
+
+_ = StructuralTokenRecognizer_0.prototype = StructuralTokenRecognizer.prototype = new Object_0;
+_.getClass$ = function getClass_139(){
+  return Lorg_spoofax_jsglr_client_StructuralTokenRecognizer_2_classLit;
+}
+;
+var closingTokens, openingTokens, separatorTokens;
+function $canBeDecomposed(this$static){
+  if (!(this$static.indexHistoryStart >= 0 && this$static.indexHistoryEnd >= 0))
+    return false;
+  return this$static.indexHistoryEnd - this$static.indexHistoryStart > 3;
+}
+
+function $setAdditionalTokens(this$static, toParse){
+  this$static.additionalTokens = toParse;
+}
+
+function $setEndSkip(this$static, endSkip){
+  this$static.indexHistoryEnd = 2147483647;
+  this$static.endSkip = endSkip;
+  !!this$static.startSkip && $fillStackNodes(this$static.endSkip, this$static.startSkip.stackNodes);
+}
+
+function $setSkipLocations(this$static, startSkip, endSkip, indexStart, indexEnd){
+  this$static.indexHistoryStart = indexStart;
+  this$static.indexHistoryEnd = indexEnd;
+  this$static.startSkip = startSkip;
+  this$static.endSkip = endSkip;
+  $fillStackNodes(this$static.endSkip, this$static.startSkip.stackNodes);
+}
+
+function StructureSkipSuggestion_0(){
+  this.indexHistoryEnd = -1;
+  this.indexHistoryStart = -1;
+  this.additionalTokens = initDim(_3C_classLit, makeCastMap([Q$Serializable]), -1, 0, 1);
+}
+
+function StructureSkipSuggestion(){
+}
+
+_ = StructureSkipSuggestion_0.prototype = StructureSkipSuggestion.prototype = new Object_0;
+_.getClass$ = function getClass_140(){
+  return Lorg_spoofax_jsglr_client_StructureSkipSuggestion_2_classLit;
+}
+;
+_.additionalTokens = null;
+_.endSkip = null;
+_.indexHistoryEnd = 0;
+_.indexHistoryStart = 0;
+_.startSkip = null;
+function TaskCancellationException_0(){
+  RuntimeException_1.call(this, 'Long-running parse job aborted');
+}
+
+function TaskCancellationException(){
+}
+
+_ = TaskCancellationException_0.prototype = TaskCancellationException.prototype = new RuntimeException;
+_.getClass$ = function getClass_141(){
+  return Lorg_spoofax_jsglr_client_TaskCancellationException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable, Q$TaskCancellationException]);
+function $clinit_ImploderAttachment(){
+  $clinit_ImploderAttachment = nullMethod;
+  TYPE_1 = new ImploderAttachment$1_0(Lorg_spoofax_jsglr_client_imploder_ImploderAttachment_2_classLit);
+}
+
+var TYPE_1;
+function $clinit_TermAttachmentType(){
+  $clinit_TermAttachmentType = nullMethod;
+  asyncTypes = new CopyOnWriteArraySet_0;
+}
+
+function TermAttachmentType(){
+}
+
+_ = TermAttachmentType.prototype = new Object_0;
+_.getClass$ = function getClass_142(){
+  return Lorg_spoofax_terms_attachments_TermAttachmentType_2_classLit;
+}
+;
+_.toString$ = function toString_33(){
+  return this.type.typeName;
+}
+;
+_.type = null;
+var asyncTypes;
+function ImploderAttachment$1_0($anonymous0){
+  $clinit_TermAttachmentType();
+  this.type = $anonymous0;
+  (new TermFactory_0).makeConstructor_0('ImploderAttachment', 6);
+  $add_2(asyncTypes, this);
+}
+
+function ImploderAttachment$1(){
+}
+
+_ = ImploderAttachment$1_0.prototype = ImploderAttachment$1.prototype = new TermAttachmentType;
+_.getClass$ = function getClass_143(){
+  return Lorg_spoofax_jsglr_client_imploder_ImploderAttachment$1_2_classLit;
+}
+;
+function $getParameterizedSortName(parameterizedSort){
+  var arg, arg$iterator, args, result;
+  result = new StringBuilder_0;
+  $append_6(result, parameterizedSort.getSubterm(0).getName());
+  result.impl.string += '_';
+  args = parameterizedSort.getSubterm(1);
+  for (arg$iterator = iterable(args).iterator(); arg$iterator.hasNext();) {
+    arg = arg$iterator.next_0();
+    $append_6(result, arg.getName());
+  }
+  return result.impl.string;
+}
+
+function $getSort(this$static, rhs){
+  var current, currentAppl, sort;
+  for (current = rhs; current.getSubtermCount() > 0 && current.getTermType() == 1; current = current.getSubterm(0)) {
+    currentAppl = current;
+    sort = $tryGetSort(this$static, currentAppl);
+    if (sort != null)
+      return sort;
+  }
+  return null;
+}
+
+function $tryGetFirstSort(this$static, lhs){
+  var lhsPart, lhsPart$array, lhsPart$index, lhsPart$max, sort;
+  for (lhsPart$array = lhs.getAllSubterms() , lhsPart$index = 0 , lhsPart$max = lhsPart$array.length; lhsPart$index < lhsPart$max; ++lhsPart$index) {
+    lhsPart = lhsPart$array[lhsPart$index];
+    sort = $tryGetSort(this$static, lhsPart);
+    if (sort != null)
+      return sort;
+  }
+  return null;
+}
+
+function $tryGetSort(this$static, currentAppl){
+  var cons, left, right;
+  cons = currentAppl.getConstructor();
+  if (cons == this$static.cfFun)
+    return $tryGetSort(this$static, currentAppl.getSubterm(0));
+  if (cons == this$static.lexFun)
+    return $tryGetSort(this$static, currentAppl.getSubterm(0));
+  if (cons == this$static.sortFun)
+    return currentAppl.getSubterm(0).stringValue();
+  if (cons == this$static.parameterizedSortFun)
+    return $getParameterizedSortName(currentAppl);
+  if (cons == this$static.charClassFun)
+    return null;
+  if (cons == this$static.altFun)
+    return left = $getSort(this$static, currentAppl.getSubterm(0)) , right = $getSort(this$static, currentAppl.getSubterm(1)) , left + '_' + right + '0';
+  return null;
+}
+
+function ProductionAttributeReader_0(factory){
+  this.sortFun = factory.makeConstructor_0('sort', 1);
+  this.parameterizedSortFun = factory.makeConstructor_0('parameterized-sort', 2);
+  factory.makeConstructor_0('no-attrs', 0);
+  factory.makeConstructor_0('varsym', 1);
+  this.altFun = factory.makeConstructor_0('alt', 2);
+  this.charClassFun = factory.makeConstructor_0('char-class', 1);
+  factory.makeConstructor_0('lit', 1);
+  factory.makeConstructor_0('cilit', 1);
+  this.lexFun = factory.makeConstructor_0('lex', 1);
+  factory.makeConstructor_0('opt', 1);
+  factory.makeConstructor_0('layout', 0);
+  this.cfFun = factory.makeConstructor_0('cf', 1);
+  factory.makeConstructor_0('varsym', 1);
+  factory.makeConstructor_0('seq', 2);
+  factory.makeConstructor_0('iter', 1);
+  factory.makeConstructor_0('iter-star', 1);
+  factory.makeConstructor_0('iter-plus', 1);
+  factory.makeConstructor_0('iter-sep', 2);
+  factory.makeConstructor_0('iter-star-sep', 2);
+  factory.makeConstructor_0('iter-plus-sep', 2);
+}
+
+function ProductionAttributeReader(){
+}
+
+_ = ProductionAttributeReader_0.prototype = ProductionAttributeReader.prototype = new Object_0;
+_.getClass$ = function getClass_144(){
+  return Lorg_spoofax_jsglr_client_imploder_ProductionAttributeReader_2_classLit;
+}
+;
+_.altFun = null;
+_.cfFun = null;
+_.charClassFun = null;
+_.lexFun = null;
+_.parameterizedSortFun = null;
+_.sortFun = null;
+function $addAll_0(this$static, c){
+  var o, o$iterator;
+  for (o$iterator = new ArrayDeque$DeqIterator_0(c); o$iterator.cursor != o$iterator.fence;) {
+    o = $next_2(o$iterator);
+    $addLast(this$static, o);
+  }
+  return true;
+}
+
+function $addFirst(this$static, e){
+  if (!e)
+    throw new NullPointerException_0;
+  setCheck(this$static.elements, this$static.head = this$static.head - 1 & this$static.elements.length - 1, e);
+  this$static.head == this$static.tail && $doubleCapacity(this$static);
+}
+
+function $addLast(this$static, e){
+  if (e == null)
+    throw new NullPointerException_0;
+  setCheck(this$static.elements, this$static.tail, e);
+  (this$static.tail = this$static.tail + 1 & this$static.elements.length - 1) == this$static.head && $doubleCapacity(this$static);
+}
+
+function $clear_1(this$static){
+  var h_0, i, mask, t;
+  h_0 = this$static.head;
+  t = this$static.tail;
+  if (h_0 != t) {
+    this$static.head = this$static.tail = 0;
+    i = h_0;
+    mask = this$static.elements.length - 1;
+    do {
+      setCheck(this$static.elements, i, null);
+      i = i + 1 & mask;
+    }
+     while (i != t);
+  }
+}
+
+function $contains_0(this$static, o){
+  var i, mask, x;
+  if (o == null)
+    return false;
+  mask = this$static.elements.length - 1;
+  i = this$static.head;
+  while ((x = this$static.elements[i]) != null) {
+    if (equals__devirtual$(o, x))
+      return true;
+    i = i + 1 & mask;
+  }
+  return false;
+}
+
+function $copyElements(this$static, a){
+  var headPortionLen;
+  if (this$static.head < this$static.tail) {
+    arraycopy(this$static.elements, this$static.head, a, 0, this$static.tail - this$static.head & this$static.elements.length - 1);
+  }
+   else if (this$static.head > this$static.tail) {
+    headPortionLen = this$static.elements.length - this$static.head;
+    arraycopy(this$static.elements, this$static.head, a, 0, headPortionLen);
+    arraycopy(this$static.elements, 0, a, headPortionLen, this$static.tail);
+  }
+  return a;
+}
+
+function $doubleCapacity(this$static){
+  var a, n, newCapacity, p, r;
+  p = this$static.head;
+  n = this$static.elements.length;
+  r = n - p;
+  newCapacity = n << 1;
+  if (newCapacity < 0)
+    throw new IllegalStateException_1('Sorry, deque too big');
+  a = initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, newCapacity, 0);
+  arraycopy(this$static.elements, p, a, 0, r);
+  arraycopy(this$static.elements, 0, a, r, p);
+  this$static.elements = a;
+  this$static.head = 0;
+  this$static.tail = n;
+}
+
+function $get_2(this$static, i){
+  if (i < 0 || i >= (this$static.tail - this$static.head & this$static.elements.length - 1))
+    throw new NoSuchElementException_0;
+  return this$static.elements[this$static.head + i & this$static.elements.length - 1];
+}
+
+function $pollFirst(this$static){
+  var h_0, result;
+  h_0 = this$static.head;
+  result = this$static.elements[h_0];
+  if (result == null)
+    return null;
+  setCheck(this$static.elements, h_0, null);
+  this$static.head = h_0 + 1 & this$static.elements.length - 1;
+  return result;
+}
+
+function $removeFirst(this$static){
+  var x;
+  x = $pollFirst(this$static);
+  if (x == null)
+    throw new NoSuchElementException_0;
+  return x;
+}
+
+function $size(this$static){
+  return this$static.tail - this$static.head & this$static.elements.length - 1;
+}
+
+function ArrayDeque_0(){
+  this.elements = initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable]), Q$Object, 16, 0);
+}
+
+function ArrayDeque(){
+}
+
+_ = ArrayDeque_0.prototype = ArrayDeque.prototype = new AbstractCollection;
+_.add = function add_9(e){
+  return $addLast(this, e) , true;
+}
+;
+_.contains = function contains_8(o){
+  return $contains_0(this, o);
+}
+;
+_.getClass$ = function getClass_145(){
+  return Lorg_spoofax_jsglr_shared_ArrayDeque_2_classLit;
+}
+;
+_.isEmpty = function isEmpty_3(){
+  return this.head == this.tail;
+}
+;
+_.iterator = function iterator_6(){
+  return new ArrayDeque$DeqIterator_0(this);
+}
+;
+_.size_0 = function size_12(){
+  return $size(this);
+}
+;
+_.toArray = function toArray_4(a){
+  var size;
+  size = this.tail - this.head & this.elements.length - 1;
+  a.length < size && (a = $toArray_1(new ArrayList_2(size), a));
+  $copyElements(this, a);
+  a.length > size && setCheck(a, size, null);
+  return a;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable]);
+_.elements = null;
+_.head = 0;
+_.tail = 0;
+function $next_2(this$static){
+  var result;
+  if (this$static.cursor == this$static.fence)
+    throw new NoSuchElementException_0;
+  result = this$static.this$0.elements[this$static.cursor];
+  if (this$static.this$0.tail != this$static.fence || result == null)
+    throw new ConcurrentModificationException_0;
+  this$static.cursor = this$static.cursor + 1 & this$static.this$0.elements.length - 1;
+  return result;
+}
+
+function ArrayDeque$DeqIterator_0(this$0){
+  this.this$0 = this$0;
+  this.cursor = this.this$0.head;
+  this.fence = this.this$0.tail;
+}
+
+function ArrayDeque$DeqIterator(){
+}
+
+_ = ArrayDeque$DeqIterator_0.prototype = ArrayDeque$DeqIterator.prototype = new Object_0;
+_.getClass$ = function getClass_146(){
+  return Lorg_spoofax_jsglr_shared_ArrayDeque$DeqIterator_2_classLit;
+}
+;
+_.hasNext = function hasNext_3(){
+  return this.cursor != this.fence;
+}
+;
+_.next_0 = function next_4(){
+  return $next_2(this);
+}
+;
+_.this$0 = null;
+function TokenExpectedException_0(expected, token, offset, lineNumber, columnNumber){
+  BadTokenException_0.call(this, token, offset, lineNumber, columnNumber);
+  this.expected = expected;
+}
+
+function TokenExpectedException(){
+}
+
+_ = TokenExpectedException_0.prototype = TokenExpectedException.prototype = new BadTokenException;
+_.getClass$ = function getClass_147(){
+  return Lorg_spoofax_jsglr_shared_TokenExpectedException_2_classLit;
+}
+;
+_.getShortMessage = function getShortMessage_1(){
+  return "Syntax error near expected token '" + this.expected + "'";
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Throwable, Q$BadTokenException, Q$SGLRException, Q$TokenExpectedException]);
+_.expected = null;
+function debug(){
+}
+
+function $nativeOnWorkerLoad(this$static){
+  var oneself = this$static;
+  self.spoofax = {};
+  self.spoofax.factory = oneself.getFactory();
+  self.spoofax.createParser = function(lang){
+    return oneself.createParser_0(lang);
+  }
+  ;
+  self.spoofax.createParserSync = function(ast){
+    return oneself.createParserSync_0(ast);
+  }
+  ;
+}
+
+function Worker_0(){
+}
+
+function Worker(){
+}
+
+_ = Worker_0.prototype = Worker.prototype = new DedicatedWorkerEntryPoint;
+_.createParser_0 = function createParser(grammarUrl){
+  this.parser = new Parser_0(new TermFactory_0);
+  return $asyncInitializeFromURL(this.parser, grammarUrl);
+}
+;
+_.createParserSync_0 = function createParserSync(ast){
+  this.parser = new Parser_0(this.factory_0);
+  return $initializeFromTable(this.parser, ast);
+}
+;
+_.getClass$ = function getClass_148(){
+  return Lorg_spoofax_jssglr_client_Worker_2_classLit;
+}
+;
+_.getFactory = function getFactory(){
+  return this.jsfactory;
+}
+;
+_.factory_0 = null;
+_.jsfactory = null;
+_.parser = null;
+function $clinit_AbstractTermFactory(){
+  $clinit_AbstractTermFactory = nullMethod;
+  new StrategoList_0(null, null, null, 3);
+  EMPTY = initDim(_3Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit, makeCastMap([Q$Serializable]), Q$IStrategoTerm, 0, 0);
+  asyncCtorCache = new HashMap_0;
+}
+
+function $getStorageType(this$static, terms){
+  var result, term, term$index, term$max, type;
+  result = this$static.defaultStorageType;
+  for (term$index = 0 , term$max = terms.length; term$index < term$max; ++term$index) {
+    term = terms[term$index];
+    type = term.getStorageType();
+    if (type < result) {
+      if (type == 0)
+        return 0;
+      result = type;
+    }
+  }
+  return result;
+}
+
+function $makeList(this$static, terms){
+  return this$static.makeList_0(terms.toArray(initDim(_3Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit, makeCastMap([Q$Serializable]), Q$IStrategoTerm, terms.size_0(), 0)), null);
+}
+
+function $parseFromString(this$static, text){
+  return $parseFromString_0(this$static.reader, new PushbackStringIterator_0(text));
+}
+
+function getStorageType(term1, term2){
+  $clinit_AbstractTermFactory();
+  var result;
+  result = term1.getStorageType();
+  if (result == 0)
+    return 0;
+  return min(result, term2.storageType);
+}
+
+function AbstractTermFactory(){
+}
+
+_ = AbstractTermFactory.prototype = new Object_0;
+_.getClass$ = function getClass_149(){
+  return Lorg_spoofax_terms_AbstractTermFactory_2_classLit;
+}
+;
+_.makeConstructor_0 = function makeConstructor(name_0, arity){
+  var cached, result;
+  result = new StrategoConstructor_0(name_0, arity);
+  cached = asyncCtorCache.get(result);
+  !cached?asyncCtorCache.put(result, result):(result = cached);
+  return result;
+}
+;
+_.defaultStorageType = 0;
+var EMPTY, asyncCtorCache;
+function $clinit_TermFactory(){
+  $clinit_TermFactory = nullMethod;
+  $clinit_AbstractTermFactory();
+  intCache = initIntCache();
+  EMPTY_LIST_0 = new StrategoList_0(null, null, null, 3);
+  asyncStringPool = new HashMap_0;
+}
+
+function $annotateTerm(this$static, term, annotations){
+  var currentAnnos, result, value, result_0;
+  currentAnnos = term.getAnnotations();
+  if (currentAnnos == annotations) {
+    return term;
+  }
+   else if (term.getStorageType() == 3) {
+    if (term == EMPTY_LIST_0) {
+      return annotations == EMPTY_LIST_0 || !annotations.head?EMPTY_LIST_0:new StrategoList_0(null, null, annotations, this$static.defaultStorageType);
+    }
+     else if (term.getTermType() == 5) {
+      value = term.stringValue();
+      return annotations == EMPTY_LIST_0 || !annotations.head?$makeString(this$static, value):new StrategoString_0(value, annotations, this$static.defaultStorageType);
+    }
+     else if (currentAnnos == EMPTY_LIST_0) {
+      return !annotations.head?term:new StrategoAnnotation_0(this$static, term, annotations);
+    }
+     else if (instanceOf(term, Q$StrategoAnnotation)) {
+      term = term.wrapped;
+      return new StrategoAnnotation_0(this$static, term, annotations);
+    }
+     else {
+      throw new UnsupportedOperationException_1('Unable to annotate term of type ' + term.getClass$().typeName);
+    }
+  }
+   else if ((annotations == EMPTY_LIST_0 || !annotations.head) && term.getTermType() == 5) {
+    return $makeString(this$static, term.stringValue());
+  }
+   else if (instanceOf(term, Q$StrategoTerm)) {
+    result = (result_0 = $clone(term) , result_0.attachment = null , result_0);
+    $internalSetAnnotations(result, annotations);
+    return result;
+  }
+   else {
+    throw new UnsupportedOperationException_1('Unable to annotate term of type ' + term.getClass$().typeName + ' in ' + this$static.getClass$().typeName);
+  }
+}
+
+function $makeAppl(this$static, ctr, terms, annotations){
+  var storageType;
+  storageType = this$static.defaultStorageType;
+  storageType = min(storageType, $getStorageType(this$static, terms));
+  storageType != 0 && (storageType = min(storageType, ($clinit_AbstractTermFactory() , !annotations?3:annotations.getStorageType())));
+  return new StrategoAppl_0(ctr, terms, annotations, storageType);
+}
+
+function $makeInt(this$static, i){
+  if (0 <= i && i <= 255 && this$static.defaultStorageType != 0)
+    return intCache[i];
+  return new StrategoInt_0(i, this$static.defaultStorageType);
+}
+
+function $makeList_0(this$static){
+  return this$static.defaultStorageType != 0?EMPTY_LIST_0:new StrategoList_0(null, null, null, this$static.defaultStorageType);
+}
+
+function $makeListCons(this$static, head, tail){
+  var storageType;
+  storageType = min(this$static.defaultStorageType, getStorageType(head, tail));
+  if (!head)
+    return this$static.defaultStorageType != 0?EMPTY_LIST_0:new StrategoList_0(null, null, null, this$static.defaultStorageType);
+  return new StrategoList_0(head, tail, null, storageType);
+}
+
+function $makeString(this$static, s){
+  var result, type;
+  if (s.length > 100)
+    return new StrategoString_0(s, null, this$static.defaultStorageType);
+  result = asyncStringPool.get(s);
+  if (!result) {
+    type = this$static.defaultStorageType != 0?2:0;
+    result = new StrategoString_0(s, null, type);
+    asyncStringPool.put(s, result);
+  }
+   else 
+    (result.storageType == 0 || this$static.defaultStorageType == 0) && (result = new TermFactory$KeepAliveString_0(s));
+  return result;
+}
+
+function TermFactory_0(){
+  $clinit_TermFactory();
+  this.reader = new StringTermReader_0(this);
+  this.defaultStorageType = 2;
+}
+
+function initIntCache(){
+  var i, results;
+  results = initDim(_3Lorg_spoofax_interpreter_terms_IStrategoInt_2_classLit, makeCastMap([Q$Serializable]), Q$IStrategoInt, 256, 0);
+  for (i = 0; i < results.length; ++i) {
+    setCheck(results, i, new StrategoInt_1(i));
+  }
+  return results;
+}
+
+function TermFactory(){
+}
+
+_ = TermFactory_0.prototype = TermFactory.prototype = new AbstractTermFactory;
+_.annotateTerm = function annotateTerm(term, annotations){
+  return $annotateTerm(this, term, annotations);
+}
+;
+_.getClass$ = function getClass_150(){
+  return Lorg_spoofax_terms_TermFactory_2_classLit;
+}
+;
+_.makeAppl_0 = function makeAppl(ctr, terms, annotations){
+  return $makeAppl(this, ctr, terms, annotations);
+}
+;
+_.makeInt_0 = function makeInt(i){
+  return $makeInt(this, i);
+}
+;
+_.makeList_0 = function makeList(terms, outerAnnos){
+  var head, i, result, storageType;
+  storageType = this.defaultStorageType;
+  result = this.defaultStorageType != 0?EMPTY_LIST_0:new StrategoList_0(null, null, null, this.defaultStorageType);
+  i = terms.length - 1;
+  while (i > 0) {
+    head = terms[i--];
+    storageType = min(storageType, ($clinit_AbstractTermFactory() , !head?3:head.getStorageType()));
+    result = new StrategoList_0(head, result, null, storageType);
+  }
+  if (i == 0) {
+    head = terms[0];
+    storageType = min(storageType, ($clinit_AbstractTermFactory() , !head?3:head.getStorageType()));
+    result = new StrategoList_0(head, result, outerAnnos, storageType);
+  }
+   else {
+    return !outerAnnos || outerAnnos.isEmpty()?this.defaultStorageType != 0?EMPTY_LIST_0:new StrategoList_0(null, null, null, this.defaultStorageType):new StrategoList_0(null, null, outerAnnos, this.defaultStorageType);
+  }
+  return result;
+}
+;
+_.makePlaceholder = function makePlaceholder(template){
+  !this.placeholderConstructor && (this.placeholderConstructor = this.makeConstructor_0('<>', 1));
+  return new StrategoPlaceholder_0(this.placeholderConstructor, template, EMPTY_LIST_0, this.defaultStorageType);
+}
+;
+_.makeReal = function makeReal(d){
+  return new StrategoReal_0(d, this.defaultStorageType);
+}
+;
+_.makeString_0 = function makeString(s){
+  return $makeString(this, s);
+}
+;
+_.makeTuple = function makeTuple(terms, annos){
+  var storageType;
+  storageType = min(this.defaultStorageType, $getStorageType(this, terms));
+  return new StrategoTuple_0(terms, annos, storageType);
+}
+;
+_.placeholderConstructor = null;
+var EMPTY_LIST_0, asyncStringPool, intCache;
+function $exposeFactory(this$static, factory){
+  var self_0 = this$static;
+  self_0.constructorCache = {};
+  var factory = {};
+  factory.makeConstructor = function(name_0, arity){
+    return self_0.nativeMakeConstructor(name_0, arity);
+  }
+  ;
+  factory.makeString = function(s){
+    return self_0.makeString_0(s);
+  }
+  ;
+  factory.makeAppl = function(ctr, terms, annotations){
+    return self_0.makeAppl_0(ctr, terms, annotations);
+  }
+  ;
+  factory.makeInt = function(i){
+    return self_0.makeInt_0(i);
+  }
+  ;
+  factory.makeList = function(terms, outerAnnos){
+    return self_0.makeList_0(terms, outerAnnos);
+  }
+  ;
+  factory.result = null;
+  return factory;
+}
+
+function $nativeMakeConstructor(this$static, name_0, arity){
+  var self_0 = this$static;
+  var constructor_cache = self_0.constructorCache;
+  var cache = constructor_cache[name_0];
+  cache === undefined && (constructor_cache[name_0] = cache = {});
+  var ctor = cache[arity];
+  ctor === undefined && (cache[arity] = ctor = self_0.makeNewConstructor(name_0, arity));
+  return ctor;
+}
+
+function NativeTermFactory_0(){
+  $clinit_TermFactory();
+  TermFactory_0.call(this);
+}
+
+function NativeTermFactory(){
+}
+
+_ = NativeTermFactory_0.prototype = NativeTermFactory.prototype = new TermFactory;
+_.getClass$ = function getClass_151(){
+  return Lorg_spoofax_jssglr_client_services_NativeTermFactory_2_classLit;
+}
+;
+_.makeConstructor_0 = function makeConstructor_0(name_0, arity){
+  return $nativeMakeConstructor(this, name_0, arity);
+}
+;
+_.makeNewConstructor = function makeNewConstructor(name_0, arity){
+  return new StrategoConstructor_0(name_0, arity);
+}
+;
+_.nativeMakeConstructor = function nativeMakeConstructor(name_0, arity){
+  return $nativeMakeConstructor(this, name_0, arity);
+}
+;
+_.constructorCache = null;
+function $asyncInitializeFromURL(this$static, parseTableURL){
+  var $e0, builder, e;
+  builder = new RequestBuilder_0(($clinit_RequestBuilder() , GET), parseTableURL);
+  try {
+    $sendRequest(builder, new Parser$1_0(this$static, parseTableURL));
+  }
+   catch ($e0) {
+    $e0 = caught($e0);
+    if (instanceOf($e0, Q$RequestException)) {
+      e = $e0;
+      this$static.tableLoaded = true;
+      logToConsole("Could not build parsetable request for: '" + parseTableURL + "' due to: " + e.detailMessage);
+    }
+     else 
+      throw $e0;
+  }
+  return $exposeParser(this$static, this$static);
+}
+
+function $exposeParser(this$static, parser){
+  var self_0 = this$static;
+  var parser = {};
+  parser.parse = function(text){
+    return self_0.parse_0(text);
+  }
+  ;
+  parser.parseAndTokenize = function(lineCount, text){
+    return self_0.parseAndTokenize_0(lineCount, text);
+  }
+  ;
+  parser.loadFailed = function(){
+    return self_0.loadFailed_0();
+  }
+  ;
+  parser.isTableLoaded = function(){
+    return self_0.isTableLoaded_0();
+  }
+  ;
+  parser.isReady = function(){
+    return self_0.isReady_0();
+  }
+  ;
+  return parser;
+}
+
+function $initialize(this$static, tableTerm){
+  var $e0, e;
+  try {
+    this$static.parseTable = new ParseTable_0(tableTerm, this$static.af);
+  }
+   catch ($e0) {
+    $e0 = caught($e0);
+    if (instanceOf($e0, Q$InvalidParseTableException)) {
+      e = $e0;
+      logToConsole('Could not load parsetable due to: ' + e.detailMessage);
+      return;
+    }
+     else 
+      throw $e0;
+  }
+  this$static.treeBuilder = new Asfix2TreeBuilder_0;
+  this$static.sglr = new SGLR_0(this$static.treeBuilder, this$static.parseTable);
+  $setUseStructureRecovery(this$static.sglr);
+}
+
+function $initializeFromString(this$static, tableContents){
+  var tableTerm;
+  tableTerm = $parseFromString(this$static.af, tableContents);
+  $initialize(this$static, tableTerm);
+}
+
+function $initializeFromTable(this$static, tableTerm){
+  $initialize(this$static, tableTerm);
+  return $exposeParser(this$static, this$static);
+}
+
+function $makeJsArray(attrs){
+  var o, o$index, o$max, r;
+  r = [];
+  for (o$index = 0 , o$max = attrs.length; o$index < o$max; ++o$index) {
+    o = attrs[o$index];
+    $push(r, o);
+  }
+  return r;
+}
+
+function $parse_1(this$static, text){
+  var $e0, e, result;
+  try {
+    result = $parse_0(this$static.sglr, text);
+    return result;
+  }
+   catch ($e0) {
+    $e0 = caught($e0);
+    if (instanceOf($e0, Q$TokenExpectedException)) {
+      e = $e0;
+      $printStackTrace(e);
+    }
+     else if (instanceOf($e0, Q$BadTokenException)) {
+      e = $e0;
+      $printStackTrace(e);
+    }
+     else if (instanceOf($e0, Q$ParseException)) {
+      e = $e0;
+      $printStackTrace(e);
+    }
+     else if (instanceOf($e0, Q$SGLRException)) {
+      e = $e0;
+      $printStackTrace(e);
+    }
+     else 
+      throw $e0;
+  }
+  return null;
+}
+
+function Parser_0(termFactory){
+  var s, s$array, s$index, s$max;
+  this.HACK_DEFAULT_INCREMENTAL_SORTS = initValues(_3Ljava_lang_String_2_classLit, makeCastMap([Q$Serializable]), Q$String, ['RuleDec', 'SDec', 'MethodDec', 'ClassBodyDec', 'ClassMemberDec', 'ConstrDec', 'FieldDec']);
+  this.af = termFactory;
+  this.incrementalSorts = new HashSet_0;
+  for (s$array = this.HACK_DEFAULT_INCREMENTAL_SORTS , s$index = 0 , s$max = s$array.length; s$index < s$max; ++s$index) {
+    s = s$array[s$index];
+    $add_1(this.incrementalSorts, s);
+  }
+}
+
+function logToConsole(message){
+  $self.sender.emit('log', message);
+}
+
+function Parser(){
+}
+
+_ = Parser_0.prototype = Parser.prototype = new Object_0;
+_.getClass$ = function getClass_152(){
+  return Lorg_spoofax_jssglr_client_services_Parser_2_classLit;
+}
+;
+_.isReady_0 = function isReady(){
+  return !!this.sglr;
+}
+;
+_.isTableLoaded_0 = function isTableLoaded(){
+  return this.tableLoaded;
+}
+;
+_.loadFailed_0 = function loadFailed(){
+  return this.tableLoaded && !this.sglr;
+}
+;
+_.parse_0 = function parse(text){
+  return $parse_1(this, text);
+}
+;
+_.parseAndTokenize_0 = function parseAndTokenize(lines, text){
+  var attrs, i, jserrors, o;
+  attrs = initDim(_3Lcom_google_gwt_core_client_JavaScriptObject_2_classLit, makeCastMap([Q$Serializable]), Q$Object, lines, 0);
+  for (i = 0; i < lines; ++i) {
+    attrs[i] = [];
+  }
+  o = $parse_1(this, text);
+  jserrors = [];
+  if (!o) {
+    return {tokens:$makeJsArray(attrs), errors:jserrors};
+  }
+  ($clinit_ImploderAttachment() , o.getAttachment(TYPE_1)).nullMethod();
+  return {tokens:$makeJsArray(attrs), errors:jserrors};
+}
+;
+_.af = null;
+_.incrementalSorts = null;
+_.parseTable = null;
+_.sglr = null;
+_.tableLoaded = false;
+_.treeBuilder = null;
+function $onError(this$static, exception){
+  this$static.this$0.tableLoaded = true;
+  logToConsole("Could not load parse table at: '" + this$static.val$parseTableURL + "' due to: " + exception.detailMessage);
+}
+
+function $onResponseReceived(this$static, response){
+  this$static.this$0.tableLoaded = true;
+  if (response.val$xmlHttpRequest.status == 200 || response.val$xmlHttpRequest.status == 304) {
+    $initializeFromString(this$static.this$0, response.val$xmlHttpRequest.responseText);
+    $self.sender.emit('loaded', '');
+  }
+   else {
+    logToConsole('Could not load parse table at: ' + this$static.val$parseTableURL);
+  }
+}
+
+function Parser$1_0(this$0, val$parseTableURL){
+  this.this$0 = this$0;
+  this.val$parseTableURL = val$parseTableURL;
+}
+
+function Parser$1(){
+}
+
+_ = Parser$1_0.prototype = Parser$1.prototype = new Object_0;
+_.getClass$ = function getClass_153(){
+  return Lorg_spoofax_jssglr_client_services_Parser$1_2_classLit;
+}
+;
+_.this$0 = null;
+_.val$parseTableURL = null;
+function AbstractSimpleTerm(){
+}
+
+_ = AbstractSimpleTerm.prototype = new Object_0;
+_.getAttachment = function getAttachment(type){
+  if (!type)
+    return this.attachment;
+  return null;
+}
+;
+_.getClass$ = function getClass_154(){
+  return Lorg_spoofax_terms_AbstractSimpleTerm_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$ISimpleTerm]);
+_.attachment = null;
+function ParseError_0(m_0){
+  RuntimeException_1.call(this, m_0);
+}
+
+function ParseError(){
+}
+
+_ = ParseError_0.prototype = ParseError.prototype = new RuntimeException;
+_.getClass$ = function getClass_155(){
+  return Lorg_spoofax_terms_ParseError_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+function $appendAnnotations(this$static, sb, maxDepth){
+  var annos;
+  annos = !this$static.annotations?($clinit_TermFactory() , EMPTY_LIST_0):this$static.annotations;
+  if (annos.size_0() == 0)
+    return;
+  sb.append(123);
+  annos.getSubterm(0).writeAsString(sb, maxDepth);
+  for (annos = annos.tail_0(); !annos.isEmpty(); annos = annos.tail_0()) {
+    sb.append(44);
+    annos.head_0().writeAsString(sb, maxDepth);
+  }
+  sb.append(125);
+}
+
+function $hashCode_1(this$static){
+  var result;
+  result = this$static.hashCode;
+  switch (result) {
+    case 0:
+      result = this$static.hashFunction();
+      !!this$static.annotations && this$static.annotations != ($clinit_TermFactory() , EMPTY_LIST_0) && !this$static.annotations.isEmpty() && (result = result * 2423 + this$static.annotations.hashCode$());
+      return result;
+    case -1:
+      result = this$static.hashFunction();
+      !!this$static.annotations && this$static.annotations != ($clinit_TermFactory() , EMPTY_LIST_0) && !this$static.annotations.isEmpty() && (result = result * 2423 + this$static.annotations.hashCode$());
+      this$static.hashCode = this$static.getTermType() == 0?0:result;
+      return result;
+    default:return result;
+  }
+}
+
+function $initImmutableHashCode(this$static){
+  var hashCode;
+  if (this$static.hashCode == -1) {
+    hashCode = this$static.hashFunction();
+    this$static.hashCode = !this$static.annotations || this$static.annotations == ($clinit_TermFactory() , EMPTY_LIST_0) || this$static.annotations.isEmpty()?hashCode:hashCode * 2423 + this$static.annotations.hashCode$();
+  }
+}
+
+function $internalSetAnnotations(this$static, annotations){
+  (annotations == ($clinit_TermFactory() , EMPTY_LIST_0) || annotations.isEmpty()) && (annotations = null);
+  if (this$static.annotations != annotations) {
+    this$static.annotations = annotations;
+    this$static.hashCode = -1;
+  }
+}
+
+function $match(this$static, second){
+  var storageType;
+  if (this$static == second)
+    return true;
+  if (!second)
+    return false;
+  storageType = this$static.storageType;
+  switch (storageType) {
+    case 3:
+      switch (second.getStorageType()) {
+        case 3:
+          return false;
+        case 1:
+        case 2:
+          return $hashCode_1(this$static) == second.hashCode$() && this$static.doSlowMatch(second, 1);
+        default:return this$static.doSlowMatch(second, 0);
+      }
+
+    case 2:
+    case 1:
+      switch (second.getStorageType()) {
+        case 2:
+        case 3:
+          return $hashCode_1(this$static) == second.hashCode$() && this$static.doSlowMatch(second, storageType);
+        case 1:
+          return $hashCode_1(this$static) == second.hashCode$() && this$static.doSlowMatch(second, 1);
+        default:return this$static.doSlowMatch(second, 0);
+      }
+
+    default:return this$static.doSlowMatch(second, 0);
+  }
+}
+
+function StrategoTerm_0(annotations, storageType){
+  annotations != ($clinit_TermFactory() , EMPTY_LIST_0) && (this.annotations = annotations);
+  this.storageType = storageType;
+}
+
+function StrategoTerm(){
+}
+
+_ = StrategoTerm.prototype = new AbstractSimpleTerm;
+_.equals$ = function equals_21(obj){
+  if (obj === this)
+    return true;
+  if (!instanceOf(obj, Q$IStrategoTerm))
+    return false;
+  return $match(this, obj);
+}
+;
+_.getAnnotations = function getAnnotations(){
+  return !this.annotations?($clinit_TermFactory() , EMPTY_LIST_0):this.annotations;
+}
+;
+_.getClass$ = function getClass_156(){
+  return Lorg_spoofax_terms_StrategoTerm_2_classLit;
+}
+;
+_.getStorageType = function getStorageType_0(){
+  return this.storageType;
+}
+;
+_.hashCode$ = function hashCode_22(){
+  return $hashCode_1(this);
+}
+;
+_.match_0 = function match(second){
+  return $match(this, second);
+}
+;
+_.toString$ = function toString_34(){
+  var result;
+  return result = new StringBuilder_0 , this.writeAsString(result, 2147483647) , result.impl.string;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ISimpleTerm, Q$IStrategoTerm, Q$StrategoTerm]);
+_.annotations = null;
+_.hashCode = -1;
+_.storageType = 0;
+function StrategoWrapped(){
+}
+
+_ = StrategoWrapped.prototype = new StrategoTerm;
+_.doSlowMatch = function doSlowMatch(second, commonStorageType){
+  return this.wrapped.match_0(second);
+}
+;
+_.getAllSubterms = function getAllSubterms(){
+  return this.wrapped.getAllSubterms();
+}
+;
+_.getClass$ = function getClass_157(){
+  return Lorg_spoofax_terms_StrategoWrapped_2_classLit;
+}
+;
+_.getConstructor = function getConstructor(){
+  if (this.wrapped.getTermType() != 1)
+    throw new TermWrapperException_0('Called getConstructor() on a term that is not of type APPL');
+  return this.wrapped.getConstructor();
+}
+;
+_.getName = function getName_0(){
+  if (this.wrapped.getTermType() != 5 && this.wrapped.getTermType() != 1)
+    throw new TermWrapperException_0('Called getName() on a term that is not of type STRING or APPL');
+  return this.wrapped.getName();
+}
+;
+_.getSubterm = function getSubterm(index){
+  return this.wrapped.getSubterm(index);
+}
+;
+_.getSubtermCount = function getSubtermCount(){
+  return this.wrapped.getSubtermCount();
+}
+;
+_.getTermType = function getTermType(){
+  return this.wrapped.getTermType();
+}
+;
+_.hashFunction = function hashFunction(){
+  return this.wrapped.hashCode$();
+}
+;
+_.head_0 = function head_0(){
+  if (this.wrapped.getTermType() != 2)
+    throw new TermWrapperException_0('Called head() on a term that is not of type LIST');
+  return this.wrapped.head_0();
+}
+;
+_.intValue = function intValue(){
+  if (this.wrapped.getTermType() != 3)
+    throw new TermWrapperException_0('Called intValue() on a term that is not of type INT');
+  return this.wrapped.intValue();
+}
+;
+_.isEmpty = function isEmpty_4(){
+  if (this.wrapped.getTermType() != 2)
+    throw new TermWrapperException_0('Called isEmpty() on a term that is not of type LIST');
+  return this.wrapped.isEmpty();
+}
+;
+_.realValue = function realValue(){
+  if (this.wrapped.getTermType() != 4)
+    throw new TermWrapperException_0('Called realValue() on a term that is not of type REAL');
+  return this.wrapped.realValue();
+}
+;
+_.size_0 = function size_13(){
+  switch (this.wrapped.getTermType()) {
+    case 7:
+    case 2:
+      return this.wrapped.size_0();
+    default:throw new TermWrapperException_0('Called size() on a term that is not a LIST or TUPLE');
+  }
+}
+;
+_.stringValue = function stringValue(){
+  if (this.wrapped.getTermType() != 5)
+    throw new TermWrapperException_0('Called stringValue() on a term that is not of type STRING');
+  return this.wrapped.stringValue();
+}
+;
+_.tail_0 = function tail_0(){
+  if (this.wrapped.getTermType() != 2)
+    throw new TermWrapperException_0('Called tail() on a term that is not of type LIST');
+  return this.wrapped.tail_0();
+}
+;
+_.toString$ = function toString_35(){
+  return this.wrapped.toString$();
+}
+;
+_.writeAsString = function writeAsString(output, maxDepth){
+  this.wrapped.writeAsString(output, maxDepth);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ISimpleTerm, Q$IStrategoAppl, Q$IStrategoInt, Q$IStrategoNamed, Q$IStrategoTerm, Q$StrategoTerm]);
+_.wrapped = null;
+function StrategoAnnotation_0(factory, term, annotations){
+  StrategoTerm_0.call(this, annotations, 0);
+  this.wrapped = term;
+  if (!term.getAnnotations().isEmpty())
+    throw new IllegalArgumentException_1('Annotated term cannot already have annotations');
+  this.factory_0 = factory;
+}
+
+function StrategoAnnotation(){
+}
+
+_ = StrategoAnnotation_0.prototype = StrategoAnnotation.prototype = new StrategoWrapped;
+_.doSlowMatch = function doSlowMatch_0(second, commonStorageType){
+  var annotations, secondAnnotations, wrapped;
+  wrapped = this.wrapped;
+  annotations = !this.annotations?($clinit_TermFactory() , EMPTY_LIST_0):this.annotations;
+  secondAnnotations = second.getAnnotations();
+  if (annotations == secondAnnotations)
+  ;
+  else if (annotations.match_0(secondAnnotations)) {
+    commonStorageType == 2 && $internalSetAnnotations(this, secondAnnotations);
+  }
+   else {
+    return false;
+  }
+  if (annotations.isEmpty()) {
+    return wrapped.match_0(second);
+  }
+   else {
+    second = $annotateTerm(this.factory_0, second, ($clinit_TermFactory() , EMPTY_LIST_0));
+    return wrapped.match_0(second);
+  }
+}
+;
+_.getClass$ = function getClass_158(){
+  return Lorg_spoofax_terms_StrategoAnnotation_2_classLit;
+}
+;
+_.hashFunction = function hashFunction_0(){
+  return this.wrapped.hashCode$();
+}
+;
+_.toString$ = function toString_36(){
+  var result;
+  result = new StringBuilder_0;
+  this.wrapped.writeAsString(result, 2147483647);
+  $appendAnnotations(this, result, 2147483647);
+  return result.impl.string;
+}
+;
+_.writeAsString = function writeAsString_0(output, maxDepth){
+  this.wrapped.writeAsString(output, maxDepth);
+  $appendAnnotations(this, output, maxDepth);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ISimpleTerm, Q$IStrategoAppl, Q$IStrategoInt, Q$IStrategoNamed, Q$IStrategoTerm, Q$StrategoAnnotation, Q$StrategoTerm]);
+_.factory_0 = null;
+function $getSubterm(this$static, index){
+  if (index < 0 || index > this$static.kids.length)
+    throw new IndexOutOfBoundsException_1('Index out of bounds: ' + index);
+  return this$static.kids[index];
+}
+
+function StrategoAppl_0(ctor, kids, annotations, storageType){
+  StrategoTerm_0.call(this, annotations, storageType);
+  this.ctor = ctor;
+  this.kids = kids;
+  storageType != 0 && $initImmutableHashCode(this);
+}
+
+function StrategoAppl(){
+}
+
+_ = StrategoAppl_0.prototype = StrategoAppl.prototype = new StrategoTerm;
+_.doSlowMatch = function doSlowMatch_1(second, commonStorageType){
+  var annotations, i, kid, kids, o, secondAnnotations, secondKid, secondKids, sz;
+  if (second.getTermType() != 1)
+    return false;
+  o = second;
+  if (this.ctor != o.getConstructor())
+    return false;
+  kids = this.kids;
+  secondKids = o.getAllSubterms();
+  if (maskUndefined(kids) !== maskUndefined(secondKids)) {
+    for (i = 0 , sz = kids.length; i < sz; ++i) {
+      kid = kids[i];
+      secondKid = secondKids[i];
+      if (kid != secondKid && !kid.match_0(secondKid)) {
+        commonStorageType == 2 && i != 0 && arraycopy(secondKids, 0, kids, 0, i);
+        return false;
+      }
+    }
+    commonStorageType == 2 && (this.kids = secondKids);
+  }
+  annotations = !this.annotations?($clinit_TermFactory() , EMPTY_LIST_0):this.annotations;
+  secondAnnotations = second.getAnnotations();
+  if (annotations == secondAnnotations) {
+    return true;
+  }
+   else if (annotations.match_0(secondAnnotations)) {
+    commonStorageType == 2 && $internalSetAnnotations(this, secondAnnotations);
+    return true;
+  }
+   else {
+    return false;
+  }
+}
+;
+_.getAllSubterms = function getAllSubterms_0(){
+  return this.kids;
+}
+;
+_.getClass$ = function getClass_159(){
+  return Lorg_spoofax_terms_StrategoAppl_2_classLit;
+}
+;
+_.getConstructor = function getConstructor_0(){
+  return this.ctor;
+}
+;
+_.getName = function getName_1(){
+  return this.ctor.name_0;
+}
+;
+_.getSubterm = function getSubterm_0(index){
+  return $getSubterm(this, index);
+}
+;
+_.getSubtermCount = function getSubtermCount_0(){
+  return this.kids.length;
+}
+;
+_.getTermType = function getTermType_0(){
+  return 1;
+}
+;
+_.hashFunction = function hashFunction_1(){
+  var accum, i, kids, r;
+  r = fromInt($hashCode_1(this.ctor));
+  accum = 6673;
+  kids = this.kids;
+  for (i = 0; i < kids.length; ++i) {
+    r = add(r, fromInt(kids[i].hashCode$() * accum));
+    accum *= 7703;
+  }
+  return toInt(shr(r, 12));
+}
+;
+_.writeAsString = function writeAsString_1(output, maxDepth){
+  var i, kids;
+  output.append_0(this.ctor.name_0);
+  kids = this.kids;
+  if (kids.length > 0) {
+    output.append(40);
+    if (maxDepth == 0) {
+      output.append_0('...');
+    }
+     else {
+      kids[0].writeAsString(output, maxDepth - 1);
+      for (i = 1; i < kids.length; ++i) {
+        output.append(44);
+        kids[i].writeAsString(output, maxDepth - 1);
+      }
+    }
+    output.append(41);
+  }
+  $appendAnnotations(this, output, maxDepth);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ISimpleTerm, Q$IStrategoAppl, Q$IStrategoNamed, Q$IStrategoTerm, Q$StrategoTerm]);
+_.ctor = null;
+_.kids = null;
+function StrategoConstructor_0(name_0, arity){
+  StrategoTerm_0.call(this, null, 2);
+  this.name_0 = name_0;
+  this.arity = arity;
+  if (name_0 == null)
+    throw new IllegalArgumentException_1('name cannot be null');
+}
+
+function StrategoConstructor(){
+}
+
+_ = StrategoConstructor_0.prototype = StrategoConstructor.prototype = new StrategoTerm;
+_.doSlowMatch = function doSlowMatch_2(second, commonStorageType){
+  var other;
+  if (second == this)
+    return true;
+  if (!second || second.getTermType() != 6)
+    return false;
+  other = second;
+  return $equals(this.name_0, other.name_0) && this.arity == other.arity;
+}
+;
+_.getAllSubterms = function getAllSubterms_1(){
+  return $clinit_AbstractTermFactory() , EMPTY;
+}
+;
+_.getClass$ = function getClass_160(){
+  return Lorg_spoofax_terms_StrategoConstructor_2_classLit;
+}
+;
+_.getSubterm = function getSubterm_1(index){
+  throw new UnsupportedOperationException_0;
+}
+;
+_.getSubtermCount = function getSubtermCount_1(){
+  return 0;
+}
+;
+_.getTermType = function getTermType_1(){
+  return 6;
+}
+;
+_.hashFunction = function hashFunction_2(){
+  return getHashCode_0(this.name_0) + 5407 * this.arity;
+}
+;
+_.toString$ = function toString_37(){
+  return this.name_0 + '/' + this.arity;
+}
+;
+_.writeAsString = function writeAsString_2(output, maxDepth){
+  output.append_0(this.name_0);
+  output.append(47);
+  output.append_0('' + this.arity);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ISimpleTerm, Q$IStrategoTerm, Q$StrategoTerm]);
+_.arity = 0;
+_.name_0 = null;
+function StrategoInt_0(value, storageType){
+  StrategoTerm_0.call(this, null, storageType);
+  this.value = value;
+}
+
+function StrategoInt_1(value){
+  StrategoInt_0.call(this, value, 3);
+}
+
+function StrategoInt(){
+}
+
+_ = StrategoInt_1.prototype = StrategoInt_0.prototype = StrategoInt.prototype = new StrategoTerm;
+_.doSlowMatch = function doSlowMatch_3(second, commonStorageType){
+  var annotations, secondAnnotations;
+  if (second.getTermType() != 3)
+    return false;
+  if (this.value != second.intValue())
+    return false;
+  annotations = !this.annotations?($clinit_TermFactory() , EMPTY_LIST_0):this.annotations;
+  secondAnnotations = second.getAnnotations();
+  if (annotations == secondAnnotations) {
+    return true;
+  }
+   else if (annotations.match_0(secondAnnotations)) {
+    commonStorageType == 2 && $internalSetAnnotations(this, secondAnnotations);
+    return true;
+  }
+   else {
+    return false;
+  }
+}
+;
+_.getAllSubterms = function getAllSubterms_2(){
+  return $clinit_AbstractTermFactory() , EMPTY;
+}
+;
+_.getClass$ = function getClass_161(){
+  return Lorg_spoofax_terms_StrategoInt_2_classLit;
+}
+;
+_.getSubterm = function getSubterm_2(index){
+  throw new IndexOutOfBoundsException_0;
+}
+;
+_.getSubtermCount = function getSubtermCount_2(){
+  return 0;
+}
+;
+_.getTermType = function getTermType_2(){
+  return 3;
+}
+;
+_.hashFunction = function hashFunction_3(){
+  return 449 * this.value ^ 7841;
+}
+;
+_.intValue = function intValue_0(){
+  return this.value;
+}
+;
+_.writeAsString = function writeAsString_3(output, maxDepth){
+  output.append_0('' + this.value);
+  $appendAnnotations(this, output, maxDepth);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ISimpleTerm, Q$IStrategoInt, Q$IStrategoTerm, Q$StrategoTerm]);
+_.value = 0;
+function $getSubtermCount(this$static){
+  var cur, result;
+  result = this$static.size;
+  if (result == -1) {
+    result = 0;
+    for (cur = this$static; !cur.isEmpty(); cur = cur.tail_0())
+      ++result;
+    this$static.storageType != 0 && (this$static.size = result);
+    return result;
+  }
+   else {
+    return result;
+  }
+}
+
+function $head(this$static){
+  if (!this$static.head)
+    throw new NoSuchElementException_0;
+  return this$static.head;
+}
+
+function $tail(this$static){
+  if (!this$static.tail)
+    throw new IllegalStateException_0;
+  return this$static.tail;
+}
+
+function StrategoList_0(head, tail, annotations, storageType){
+  StrategoTerm_0.call(this, annotations, storageType);
+  this.head = head;
+  this.tail = tail;
+  storageType != 0 && $initImmutableHashCode(this);
+}
+
+function StrategoList(){
+}
+
+_ = StrategoList_0.prototype = StrategoList.prototype = new StrategoTerm;
+_.doSlowMatch = function doSlowMatch_4(second, commonStorageType){
+  var annotations, cons, cons2, cons2Head, consHead, head, head2, secondAnnotations, snd, tail, tail2;
+  if (second.getTermType() != 2)
+    return false;
+  snd = second;
+  if ($getSubtermCount(this) != snd.size_0())
+    return false;
+  if (this.head) {
+    head = $head(this);
+    head2 = snd.head_0();
+    if (head != head2 && !head.match_0(head2))
+      return false;
+    tail = $tail(this);
+    tail2 = snd.tail_0();
+    for (cons = tail , cons2 = tail2; !cons.isEmpty(); cons = cons.tail_0() , cons2 = cons2.tail_0()) {
+      consHead = cons.head_0();
+      cons2Head = cons2.head_0();
+      if (consHead != cons2Head && !consHead.match_0(cons2Head))
+        return false;
+    }
+    if (commonStorageType == 2) {
+      this.head = head2;
+      this.tail = tail2;
+    }
+  }
+  annotations = !this.annotations?($clinit_TermFactory() , EMPTY_LIST_0):this.annotations;
+  secondAnnotations = second.getAnnotations();
+  if (annotations == secondAnnotations) {
+    return true;
+  }
+   else if (annotations.match_0(secondAnnotations)) {
+    commonStorageType == 2 && $internalSetAnnotations(this, secondAnnotations);
+    return true;
+  }
+   else {
+    return false;
+  }
+}
+;
+_.getAllSubterms = function getAllSubterms_3(){
+  var clone, i, list, size;
+  size = $getSubtermCount(this);
+  clone = initDim(_3Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit, makeCastMap([Q$Serializable]), Q$IStrategoTerm, size, 0);
+  list = this;
+  for (i = 0; i < size; ++i) {
+    setCheck(clone, i, list.head_0());
+    list = list.tail_0();
+  }
+  return clone;
+}
+;
+_.getClass$ = function getClass_162(){
+  return Lorg_spoofax_terms_StrategoList_2_classLit;
+}
+;
+_.getSubterm = function getSubterm_3(index){
+  var i, list;
+  list = this;
+  if (index < 0)
+    throw new IndexOutOfBoundsException_1('Index out of bounds: ' + index);
+  for (i = 0; i < index; ++i) {
+    if (list.isEmpty())
+      throw new IndexOutOfBoundsException_1('Index out of bounds: ' + index);
+    list = list.tail_0();
+  }
+  return list.head_0();
+}
+;
+_.getSubtermCount = function getSubtermCount_3(){
+  return $getSubtermCount(this);
+}
+;
+_.getTermType = function getTermType_3(){
+  return 2;
+}
+;
+_.hashFunction = function hashFunction_4(){
+  var result;
+  result = 71 + (!this.head?0:this.head.hashCode$());
+  result = 71 * result + (!this.tail?0:this.tail.hashCode$());
+  return result;
+}
+;
+_.head_0 = function head_1(){
+  return $head(this);
+}
+;
+_.isEmpty = function isEmpty_5(){
+  return !this.head;
+}
+;
+_.iterator = function iterator_7(){
+  return new StrategoListIterator_0(this);
+}
+;
+_.size_0 = function size_14(){
+  return $getSubtermCount(this);
+}
+;
+_.tail_0 = function tail_1(){
+  return $tail(this);
+}
+;
+_.writeAsString = function writeAsString_4(output, maxDepth){
+  var cur;
+  output.append(91);
+  if (this.head) {
+    if (maxDepth == 0) {
+      output.append_0('...');
+    }
+     else {
+      $head(this).writeAsString(output, maxDepth - 1);
+      for (cur = $tail(this); !cur.isEmpty(); cur = cur.tail_0()) {
+        output.append(44);
+        cur.head_0().writeAsString(output, maxDepth - 1);
+      }
+    }
+  }
+  output.append(93);
+  $appendAnnotations(this, output, maxDepth);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$Iterable, Q$ISimpleTerm, Q$IStrategoTerm, Q$StrategoTerm]);
+_.head = null;
+_.size = -1;
+_.tail = null;
+function StrategoListIterator_0(list){
+  this.current = list;
+}
+
+function iterable(list){
+  if (instanceOf(list, Q$Iterable))
+    return list;
+  return new StrategoListIterator$1_0(list);
+}
+
+function StrategoListIterator(){
+}
+
+_ = StrategoListIterator_0.prototype = StrategoListIterator.prototype = new Object_0;
+_.getClass$ = function getClass_163(){
+  return Lorg_spoofax_terms_StrategoListIterator_2_classLit;
+}
+;
+_.hasNext = function hasNext_4(){
+  return !this.current.isEmpty();
+}
+;
+_.next_0 = function next_5(){
+  var result;
+  return result = this.current.head_0() , this.current = this.current.tail_0() , result;
+}
+;
+_.current = null;
+function StrategoListIterator$1_0(val$list){
+  this.val$list = val$list;
+}
+
+function StrategoListIterator$1(){
+}
+
+_ = StrategoListIterator$1_0.prototype = StrategoListIterator$1.prototype = new Object_0;
+_.getClass$ = function getClass_164(){
+  return Lorg_spoofax_terms_StrategoListIterator$1_2_classLit;
+}
+;
+_.iterator = function iterator_8(){
+  return new StrategoListIterator_0(this.val$list);
+}
+;
+_.val$list = null;
+function StrategoPlaceholder_0(ctor, template, annotations, storageType){
+  StrategoAppl_0.call(this, ctor, initValues(_3Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit, makeCastMap([Q$Serializable]), Q$IStrategoTerm, [template]), annotations, storageType);
+}
+
+function StrategoPlaceholder(){
+}
+
+_ = StrategoPlaceholder_0.prototype = StrategoPlaceholder.prototype = new StrategoAppl;
+_.doSlowMatch = function doSlowMatch_5(second, commonStorageType){
+  var annotations, secondAnnotations;
+  if (second.getTermType() != 10)
+    return false;
+  if (!$getSubterm(this, 0).match_0($getSubterm(second, 0)))
+    return false;
+  annotations = !this.annotations?($clinit_TermFactory() , EMPTY_LIST_0):this.annotations;
+  secondAnnotations = second.getAnnotations();
+  if (annotations == secondAnnotations) {
+    return true;
+  }
+   else if (annotations.match_0(secondAnnotations)) {
+    commonStorageType == 2 && $internalSetAnnotations(this, secondAnnotations);
+    return true;
+  }
+   else {
+    return false;
+  }
+}
+;
+_.getClass$ = function getClass_165(){
+  return Lorg_spoofax_terms_StrategoPlaceholder_2_classLit;
+}
+;
+_.getTermType = function getTermType_4(){
+  return 10;
+}
+;
+_.writeAsString = function writeAsString_5(output, maxDepth){
+  output.append(60);
+  $getSubterm(this, 0).writeAsString(output, maxDepth - 1);
+  output.append(62);
+  $appendAnnotations(this, output, maxDepth);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ISimpleTerm, Q$IStrategoAppl, Q$IStrategoNamed, Q$IStrategoTerm, Q$StrategoTerm]);
+function StrategoReal_0(value, storageType){
+  StrategoTerm_0.call(this, null, storageType);
+  this.value = value;
+}
+
+function StrategoReal(){
+}
+
+_ = StrategoReal_0.prototype = StrategoReal.prototype = new StrategoTerm;
+_.doSlowMatch = function doSlowMatch_6(second, commonStorageType){
+  var annotations, secondAnnotations;
+  if (second.getTermType() != 4)
+    return false;
+  if (this.value != second.realValue())
+    return false;
+  annotations = !this.annotations?($clinit_TermFactory() , EMPTY_LIST_0):this.annotations;
+  secondAnnotations = second.getAnnotations();
+  if (annotations == secondAnnotations) {
+    return true;
+  }
+   else if (annotations.match_0(secondAnnotations)) {
+    commonStorageType == 2 && $internalSetAnnotations(this, secondAnnotations);
+    return true;
+  }
+   else {
+    return false;
+  }
+}
+;
+_.getAllSubterms = function getAllSubterms_4(){
+  return $clinit_AbstractTermFactory() , EMPTY;
+}
+;
+_.getClass$ = function getClass_166(){
+  return Lorg_spoofax_terms_StrategoReal_2_classLit;
+}
+;
+_.getSubterm = function getSubterm_4(index){
+  throw new IndexOutOfBoundsException_0;
+}
+;
+_.getSubtermCount = function getSubtermCount_4(){
+  return 0;
+}
+;
+_.getTermType = function getTermType_5(){
+  return 4;
+}
+;
+_.hashFunction = function hashFunction_5(){
+  return round_int(449 * this.value) ^ 7841;
+}
+;
+_.realValue = function realValue_0(){
+  return this.value;
+}
+;
+_.writeAsString = function writeAsString_6(output, maxDepth){
+  output.append_0('' + this.value);
+  $appendAnnotations(this, output, maxDepth);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ISimpleTerm, Q$IStrategoTerm, Q$StrategoTerm]);
+_.value = 0;
+function StrategoString_0(value, annotations, storageType){
+  StrategoTerm_0.call(this, annotations, storageType);
+  this.value = value;
+  $initImmutableHashCode(this);
+}
+
+function StrategoString(){
+}
+
+_ = StrategoString_0.prototype = StrategoString.prototype = new StrategoTerm;
+_.doSlowMatch = function doSlowMatch_7(second, commonStorageType){
+  var annotations, secondAnnotations, secondValue, value;
+  if (second.getTermType() != 5)
+    return false;
+  value = this.value;
+  secondValue = second.stringValue();
+  if (value == secondValue)
+  ;
+  else if ($equals(value, secondValue))
+  ;
+  else {
+    return false;
+  }
+  annotations = !this.annotations?($clinit_TermFactory() , EMPTY_LIST_0):this.annotations;
+  secondAnnotations = second.getAnnotations();
+  if (annotations == secondAnnotations) {
+    return true;
+  }
+   else if (annotations.match_0(secondAnnotations)) {
+    commonStorageType == 2 && $internalSetAnnotations(this, secondAnnotations);
+    return true;
+  }
+   else {
+    return false;
+  }
+}
+;
+_.getAllSubterms = function getAllSubterms_5(){
+  return $clinit_AbstractTermFactory() , EMPTY;
+}
+;
+_.getClass$ = function getClass_167(){
+  return Lorg_spoofax_terms_StrategoString_2_classLit;
+}
+;
+_.getName = function getName_2(){
+  return this.value;
+}
+;
+_.getSubterm = function getSubterm_5(index){
+  throw new IndexOutOfBoundsException_0;
+}
+;
+_.getSubtermCount = function getSubtermCount_5(){
+  return 0;
+}
+;
+_.getTermType = function getTermType_6(){
+  return 5;
+}
+;
+_.hashFunction = function hashFunction_6(){
+  return getHashCode_0(this.value);
+}
+;
+_.stringValue = function stringValue_0(){
+  return this.value;
+}
+;
+_.writeAsString = function writeAsString_7(output, maxDepth){
+  output.append_0('"');
+  output.append_0($replace_0($replace_0($replace_0($replace_0(this.value, '\\', '\\\\'), '"', '\\"'), '\n', '\\n'), '\r', '\\r'));
+  output.append_0('"');
+  $appendAnnotations(this, output, maxDepth);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ISimpleTerm, Q$IStrategoNamed, Q$IStrategoTerm, Q$StrategoTerm]);
+_.value = null;
+function $getAllSubterms(this$static){
+  var i, r;
+  r = initDim(_3Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit, makeCastMap([Q$Serializable]), Q$IStrategoTerm, this$static.kids.length, 0);
+  for (i = 0; i < this$static.kids.length; ++i)
+    setCheck(r, i, this$static.kids[i]);
+  return r;
+}
+
+function StrategoTuple_0(kids, annotations, storageType){
+  StrategoTerm_0.call(this, annotations, storageType);
+  this.kids = kids;
+}
+
+function StrategoTuple(){
+}
+
+_ = StrategoTuple_0.prototype = StrategoTuple.prototype = new StrategoTerm;
+_.doSlowMatch = function doSlowMatch_8(second, commonStorageType){
+  var annotations, i, kid, kids, secondAnnotations, secondKid, secondKids, snd, sz;
+  if (second.getTermType() != 7)
+    return false;
+  snd = second;
+  if (this.kids.length != snd.size_0())
+    return false;
+  kids = this.kids;
+  secondKids = snd.getAllSubterms();
+  if (maskUndefined(kids) !== maskUndefined(secondKids)) {
+    for (i = 0 , sz = kids.length; i < sz; ++i) {
+      kid = kids[i];
+      secondKid = secondKids[i];
+      if (kid != secondKid && !kid.match_0(secondKid)) {
+        commonStorageType == 2 && i != 0 && arraycopy(secondKids, 0, kids, 0, i);
+        return false;
+      }
+    }
+    commonStorageType == 2 && (this.kids = secondKids);
+  }
+  annotations = !this.annotations?($clinit_TermFactory() , EMPTY_LIST_0):this.annotations;
+  secondAnnotations = second.getAnnotations();
+  if (annotations == secondAnnotations) {
+    return true;
+  }
+   else if (annotations.match_0(secondAnnotations)) {
+    commonStorageType == 2 && $internalSetAnnotations(this, secondAnnotations);
+    return true;
+  }
+   else {
+    return false;
+  }
+}
+;
+_.getAllSubterms = function getAllSubterms_6(){
+  return $getAllSubterms(this);
+}
+;
+_.getClass$ = function getClass_168(){
+  return Lorg_spoofax_terms_StrategoTuple_2_classLit;
+}
+;
+_.getSubterm = function getSubterm_6(index){
+  return this.kids[index];
+}
+;
+_.getSubtermCount = function getSubtermCount_6(){
+  return this.kids.length;
+}
+;
+_.getTermType = function getTermType_7(){
+  return 7;
+}
+;
+_.hashFunction = function hashFunction_7(){
+  var hc, i, kids;
+  hc = P12df_longLit;
+  kids = $getAllSubterms(this);
+  for (i = 0; i < kids.length; ++i) {
+    hc = mul(hc, fromInt(kids[i].hashCode$()));
+  }
+  return toInt(shr(hc, 10));
+}
+;
+_.size_0 = function size_15(){
+  return this.kids.length;
+}
+;
+_.writeAsString = function writeAsString_8(output, maxDepth){
+  var i, kids;
+  output.append(40);
+  kids = $getAllSubterms(this);
+  if (kids.length > 0) {
+    if (maxDepth == 0) {
+      output.append_0('...');
+    }
+     else {
+      kids[0].writeAsString(output, maxDepth - 1);
+      for (i = 1; i < kids.length; ++i) {
+        output.append(44);
+        kids[i].writeAsString(output, maxDepth - 1);
+      }
+    }
+  }
+  output.append(41);
+  $appendAnnotations(this, output, maxDepth);
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ISimpleTerm, Q$IStrategoTerm, Q$StrategoTerm]);
+_.kids = null;
+function $parseAnno(this$static, bis, term){
+  var annos, ch;
+  $parseSkip(bis);
+  ch = $read(bis);
+  if (ch == 123) {
+    annos = $parseTermSequence(this$static, bis, 125);
+    if (annos.size_0() == 0)
+      return this$static.factory_0.annotateTerm(term, ($clinit_TermFactory() , EMPTY_LIST_0));
+    return this$static.factory_0.annotateTerm(term, $makeList(this$static.factory_0, annos));
+  }
+   else {
+    --bis.position;
+    return term;
+  }
+}
+
+function $parseAppl(this$static, bis){
+  var c, ch, l_0, sb;
+  sb = new StringBuilder_0;
+  ch = $read(bis);
+  do {
+    $append_3(sb, ch & 65535);
+    ch = $read(bis);
+  }
+   while (null != String.fromCharCode(ch & 65535).match(/[A-Z\d]/i) || ch == 95 || ch == 45 || ch == 43 || ch == 42 || ch == 36);
+  --bis.position;
+  $parseSkip(bis);
+  ch = $read(bis);
+  if (ch == 40) {
+    l_0 = $parseTermSequence(this$static, bis, 41);
+    c = this$static.factory_0.makeConstructor_0(sb.impl.string, l_0.size_0());
+    return this$static.factory_0.makeAppl_0(c, l_0.toArray(initDim(_3Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit, makeCastMap([Q$Serializable]), Q$IStrategoTerm, l_0.size_0(), 0)), null);
+  }
+   else {
+    --bis.position;
+    c = this$static.factory_0.makeConstructor_0(sb.impl.string, 0);
+    return this$static.factory_0.makeAppl_0(c, ($clinit_AbstractTermFactory() , EMPTY), null);
+  }
+}
+
+function $parseDigitSequence(bis){
+  var ch, sb;
+  sb = new StringBuilder_0;
+  ch = $read(bis);
+  do {
+    $append_3(sb, ch & 65535);
+    ch = $read(bis);
+  }
+   while (isDigit(ch & 65535));
+  --bis.position;
+  return sb.impl.string;
+}
+
+function $parseFromString_0(this$static, bis){
+  var ch;
+  $parseSkip(bis);
+  ch = $read(bis);
+  switch (ch) {
+    case 91:
+      return $parseAnno(this$static, bis, $makeList(this$static.factory_0, $parseTermSequence(this$static, bis, 93)));
+    case 40:
+      return $parseAnno(this$static, bis, this$static.factory_0.makeTuple($parseTermSequence(this$static, bis, 41).toArray(($clinit_AbstractTermFactory() , EMPTY)), null));
+    case 34:
+      return $parseAnno(this$static, bis, $parseString(this$static, bis));
+    case 60:
+      return $parsePlaceholder(this$static, bis);
+    default:--bis.position;
+      if (isLetter(ch & 65535)) {
+        return $parseAnno(this$static, bis, $parseAppl(this$static, bis));
+      }
+       else if (isDigit(ch & 65535) || ch == 45)
+        return $parseAnno(this$static, bis, $parseNumber(this$static, bis));
+  }
+  throw new ParseError_0("Invalid term: '" + String.fromCharCode(ch & 65535) + "'");
+}
+
+function $parseNumber(this$static, bis){
+  var ch, d, exp, frac, whole;
+  whole = $parseDigitSequence(bis);
+  ch = $read(bis);
+  if (ch == 46) {
+    frac = $parseDigitSequence(bis);
+    ch = $read(bis);
+    if (ch == 101 || ch == 69) {
+      exp = $parseDigitSequence(bis);
+      d = __parseAndValidateDouble(whole + '.' + frac + 'e' + exp);
+      return this$static.factory_0.makeReal(d);
+    }
+    --bis.position;
+    d = __parseAndValidateDouble(whole + '.' + frac);
+    return this$static.factory_0.makeReal(d);
+  }
+  --bis.position;
+  return this$static.factory_0.makeInt_0(__parseAndValidateInt(whole));
+}
+
+function $parsePlaceholder(this$static, bis){
+  var template;
+  template = $parseFromString_0(this$static, bis);
+  $parseSkip(bis);
+  if ($read(bis) != 62)
+    throw new ParseError_0("Expected: '>'");
+  return this$static.factory_0.makePlaceholder(template);
+}
+
+function $parseSkip(input){
+  var b;
+  for (;;) {
+    b = $read(input);
+    switch (b) {
+      case 32:
+      case 9:
+      case 10:
+        continue;
+      default:--input.position;
+        return;
+    }
+  }
+}
+
+function $parseString(this$static, bis){
+  var ch, escaped, sb;
+  ch = $read(bis);
+  if (ch == 34)
+    return this$static.factory_0.makeString_0('');
+  sb = new StringBuilder_0;
+  do {
+    escaped = false;
+    if (ch == 92) {
+      escaped = true;
+      ch = $read(bis);
+    }
+    if (escaped) {
+      switch (ch) {
+        case 110:
+          sb.impl.string += '\n';
+          break;
+        case 116:
+          sb.impl.string += '\t';
+          break;
+        case 98:
+          sb.impl.string += '\b';
+          break;
+        case 102:
+          sb.impl.string += '\f';
+          break;
+        case 114:
+          sb.impl.string += '\r';
+          break;
+        case 92:
+          sb.impl.string += '\\';
+          break;
+        case 39:
+          sb.impl.string += "'";
+          break;
+        case 34:
+          sb.impl.string += '"';
+          break;
+        case 48:
+        case 49:
+        case 50:
+        case 51:
+        case 52:
+        case 53:
+        case 54:
+        case 55:
+        case 56:
+        case 57:
+          throw new NotImplementedException_0;
+        default:$append_6(sb, '\\' + String.fromCharCode(ch & 65535));
+      }
+      ch = $read(bis);
+    }
+     else if (ch != 34) {
+      if (ch == -1)
+        throw new ParseError_0('Unterminated string: ' + sb);
+      $append_3(sb, ch & 65535);
+      ch = $read(bis);
+    }
+  }
+   while (escaped || ch != 34);
+  return this$static.factory_0.makeString_0(sb.impl.string);
+}
+
+function $parseTermSequence(this$static, bis, endChar){
+  var ch, els;
+  els = ($clinit_Collections() , $clinit_Collections() , EMPTY_LIST);
+  $parseSkip(bis);
+  ch = $read(bis);
+  if (ch == endChar)
+    return els;
+  els = new ArrayList_0;
+  --bis.position;
+  do {
+    els.add($parseFromString_0(this$static, bis));
+    $parseSkip(bis);
+    ch = $read(bis);
+  }
+   while (ch == 44);
+  if (ch != endChar) {
+    --bis.position;
+    $parseSkip(bis);
+    ch = $read(bis);
+  }
+  if (ch != endChar)
+    throw new ParseError_0("Sequence must end with '" + String.fromCharCode(endChar) + "', saw '" + String.fromCharCode(ch & 65535) + "'");
+  return els;
+}
+
+function StringTermReader_0(factory){
+  this.factory_0 = factory;
+}
+
+function StringTermReader(){
+}
+
+_ = StringTermReader_0.prototype = StringTermReader.prototype = new Object_0;
+_.getClass$ = function getClass_169(){
+  return Lorg_spoofax_terms_StringTermReader_2_classLit;
+}
+;
+_.factory_0 = null;
+function TermFactory$KeepAliveString_0(s){
+  StrategoString_0.call(this, s, null, 0);
+}
+
+function TermFactory$KeepAliveString(){
+}
+
+_ = TermFactory$KeepAliveString_0.prototype = TermFactory$KeepAliveString.prototype = new StrategoString;
+_.getClass$ = function getClass_170(){
+  return Lorg_spoofax_terms_TermFactory$KeepAliveString_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$ISimpleTerm, Q$IStrategoNamed, Q$IStrategoTerm, Q$StrategoTerm]);
+function TermWrapperException_0(message){
+  UnsupportedOperationException_1.call(this, message);
+}
+
+function TermWrapperException(){
+}
+
+_ = TermWrapperException_0.prototype = TermWrapperException.prototype = new UnsupportedOperationException;
+_.getClass$ = function getClass_171(){
+  return Lorg_spoofax_terms_TermWrapperException_2_classLit;
+}
+;
+_.castableTypeMap$ = makeCastMap([Q$Serializable, Q$RuntimeException, Q$Throwable]);
+var $entry = entry_0;
+function gwtOnLoad(errFn, modName, modBase, softPermutationId){
+  $moduleName = modName;
+  $moduleBase = modBase;
+  if (errFn)
+    try {
+      $entry(init)();
+    }
+     catch (e) {
+      errFn(modName);
+    }
+   else {
+    $entry(init)();
+  }
+}
+
+var Ljava_lang_Object_2_classLit = createForClass('Object_0'), Ljava_lang_Throwable_2_classLit = createForClass('Throwable'), Ljava_lang_Exception_2_classLit = createForClass('Exception'), Ljava_lang_RuntimeException_2_classLit = createForClass('RuntimeException'), Lcom_google_gwt_core_client_JavaScriptException_2_classLit = createForClass('JavaScriptException'), Lcom_google_gwt_core_client_JavaScriptObject_2_classLit = createForClass('JavaScriptObject'), Lcom_google_gwt_core_client_Scheduler_2_classLit = createForClass('Scheduler'), I_classLit = createForPrimitive(' I'), _3I_classLit = createForArray('Array_0', I_classLit), _3Ljava_lang_Object_2_classLit = createForArray('Array_0', Ljava_lang_Object_2_classLit), Z_classLit = createForPrimitive(' Z'), _3Z_classLit = createForArray('Array_0', Z_classLit), Lcom_google_gwt_core_client_impl_SchedulerImpl_2_classLit = createForClass('SchedulerImpl'), Ljava_lang_StackTraceElement_2_classLit = createForClass('StackTraceElement'), _
 3Ljava_lang_StackTraceElement_2_classLit = createForArray('Array_0', Ljava_lang_StackTraceElement_2_classLit), Lcom_google_gwt_core_client_impl_StringBufferImpl_2_classLit = createForClass('StringBufferImpl'), Lcom_google_gwt_core_client_impl_StringBufferImplAppend_2_classLit = createForClass('StringBufferImplAppend'), Ljava_lang_String_2_classLit = createForClass('String_0'), _3Ljava_lang_String_2_classLit = createForArray('Array_0', Ljava_lang_String_2_classLit), Lcom_google_web_bindery_event_shared_Event_2_classLit = createForClass('Event_0'), Lcom_google_gwt_event_shared_GwtEvent_2_classLit = createForClass('GwtEvent'), Lcom_google_web_bindery_event_shared_Event$Type_2_classLit = createForClass('Event$Type'), Lcom_google_gwt_event_shared_GwtEvent$Type_2_classLit = createForClass('GwtEvent$Type'), Lcom_google_gwt_event_logical_shared_CloseEvent_2_classLit = createForClass('CloseEvent'), Lcom_google_gwt_event_shared_HandlerManager_2_classLit = createForClass('HandlerManage
 r'), Lcom_google_web_bindery_event_shared_EventBus_2_classLit = creat google_gwt_http_client_RequestBuilder_2_classLit = createForClass('RequestBuilder'), Lcom_google_gwt_http_client_RequestBuilder$1_2_classLit = createForClass('RequestBuilder$1'), Lcom_google_gwt_http_client_RequestBuilder$Method_2_classLit = createForClass('RequestBuilder$Method'), Lcom_google_gwt_http_client_RequestException_2_classLit = createForClass('RequestException'), Lcom_google_gwt_http_client_RequestPermissionException_2_classLit = createForClass('RequestPermissionException'), Lcom_google_gwt_http_client_RequestTimeoutException_2_classLit = createForClass('RequestTimeoutException'), Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit = createForClass('LongLibBase$LongEmul'), _3Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit = createForArray('Array_0', Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit), Lcom_google_gwt_user_client_Timer$1_2_classLit = createForClass('Timer$1'), Lcom_google_gwt_user_client_Window$ClosingEvent_2_classLit = createForClass('Wind
 ow$ClosingEvent'), Lcom_google_gwt_user_client_Window$WindowHandlers_2_classLit = createForClass('Window$WindowHandlers'), Lcom_google_gwt_w Ljava_lang_IllegalArgumentException_2_classLit = createForClass('IllegalArgumentException'), Ljava_lang_IllegalStateException_2_classLit = createForClass('IllegalStateException'), Ljava_lang_Integer_2_classLit = createForClass('Integer'), _3Ljava_lang_Integer_2_classLit = createForArray('Array_0', Ljava_lang_Integer_2_classLit), Ljava_lang_NullPointerException_2_classLit = createForClass('NullPointerException'), Ljava_lang_NumberFormatException_2_classLit = createForClass('NumberFormatException'), Ljava_lang_StringBuffer_2_classLit = createForClass('StringBuffer'), Ljava_lang_StringBuilder_2_classLit = createForClass('StringBuilder'), Ljava_lang_UnsupportedOperationException_2_classLit = createForClass('UnsupportedOperationException'), Ljava_util_AbstractCollection_2_classLit = createForClass('AbstractCollection'), Ljava_util_AbstractMap_2_classLit = createForClass('AbstractMap'), Ljava_util_AbstractHashMap_2_classLit = createForClass('AbstractHashMap'), Ljava_util_AbstractS
 et_2_classLit = createForClass('AbstractSet'), Ljava_util_AbstractHashMap$EntrySet_2_classLit = createForClass('AbstractHashMap$EntrySet'), Ljava_util_AbstractHashMap$EntrySetIterator_2_classLit = createForClass Class('ArrayList'), Ljava_util_Arrays$ArrayList_2_classLit = createForClass('Arrays$ArrayList'), Ljava_util_Collections$EmptyList_2_classLit = createForClass('Collections$EmptyList'), Ljava_util_ConcurrentModificationException_2_classLit = createForClass('ConcurrentModificationException'), Ljava_util_EmptyStackException_2_classLit = createForClass('EmptyStackException'), Ljava_util_HashMap_2_classLit = createForClass('HashMap'), Ljava_util_HashSet_2_classLit = createForClass('HashSet'), Ljava_util_LinkedHashMap_2_classLit = createForClass('LinkedHashMap'), Ljava_util_MapEntryImpl_2_classLit = createForClass('MapEntryImpl'), Ljava_util_LinkedHashMap$ChainEntry_2_classLit = createForClass('LinkedHashMap$ChainEntry'), Ljava_util_LinkedHashMap$EntrySet_2_classLit = createForClass('LinkedHashMap$EntrySet'), Ljava_util_LinkedHashMap$EntrySet$EntryIterator_2_classLit = createForClass('LinkedHashMap$EntrySet$EntryIterator'), Ljava_util_LinkedHashSet_2_classLit = createForClass('Link
 edHashSet'), Ljava_util_NoSuchElementException_2_classLit = createForClass('NoSuchElementException'), Ljava_util_Vector_2_classLit = createForClass('Vector'), Ljava_util_Stack_2_classLit = createForClass('Stack'), Ljava_util_concurrent_CopyOnWriteArraySet_2_classLit = createForClas _spoofax_jsglr_client_BottomupTreeBuilder_2_classLit = createForClass('BottomupTreeBuilder'), Lorg_spoofax_jsglr_client_Asfix2TreeBuilder_2_classLit = createForClass('Asfix2TreeBuilder'), Lorg_spoofax_interpreter_terms_IStrategoAppl_2_classLit = createForInterface(), _3Lorg_spoofax_interpreter_terms_IStrategoAppl_2_classLit = createForArray('Array_0', Lorg_spoofax_interpreter_terms_IStrategoAppl_2_classLit), Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit = createForInterface(), _3Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit = createForArray('Array_0', Lorg_spoofax_interpreter_terms_IStrategoTerm_2_classLit), Lorg_spoofax_jsglr_client_Associativity_2_classLit = createForClass('Associativity'), _3Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit = createForArray('Array_0', Lorg_spoofax_jsglr_client_AbstractParseNode_2_classLit), Lorg_spoofax_jsglr_client_CycleParseNode_2_classLit = createForClass('CycleParseNode'), Lorg_spoofax_jsglr_client_Disambiguat
 or_2_classLit = createForClass('Disambiguator'), Lorg_spoofax_jsglr_client_FatalException_2_classLit = createForClass('FatalException'), Lorg_spoofax_jsglr_shared_SGLRException_2_classLit = createForClass('SGLRException'), Lorg_spoofax_jsglr_client_FilterException_2_classLit = createForClass('FilterException'), Lorg_spoofax_jsglr_client_FineGrainedRec ndentationHandler'), Lorg_spoofax_jsglr_client_IntegratedRecoverySettings_2_classLit = createForClass('IntegratedRecoverySettings'), Lorg_spoofax_jsglr_client_InvalidParseTableException_2_classLit = createForClass('InvalidParseTableException'), Lorg_spoofax_jsglr_client_Label_2_classLit = createForClass('Label'), Lorg_spoofax_jsglr_shared_BadTokenException_2_classLit = createForClass('BadTokenException'), Lorg_spoofax_jsglr_client_MultiBadTokenException_2_classLit = createForClass('MultiBadTokenException'), Lorg_spoofax_jsglr_client_NewStructureSkipper_2_classLit = createForClass('NewStructureSkipper'), Lorg_spoofax_jsglr_client_ParseException_2_classLit = createForClass('ParseException'), Lorg_spoofax_jsglr_client_ParseNode_2_classLit = createForClass('ParseNode'), Lorg_spoofax_jsglr_client_ParseProductionNode_2_classLit = createForClass('ParseProductionNode'), _3Lorg_spoofax_jsglr_client_ParseProductionNode_2_classLit = createForArray('Array_0', Lorg_spoofax_jsglr_client_P
 arseProductionNode_2_classLit), Lorg_spoofax_jsglr_client_ParseTable_2_classLit = createForClass('ParseTable'), _3Lorg_spoofax_jsglr_client_Label_2_classLit = createForArray('Array_0', Lorg_spoofax_jsglr_client_Label_2_classLit), Lorg_spoofax_jsglr_client_Priority_2_classLit = createForClass('Priority'), _3Lorg_spoofax_jsglr_client_Priority_2_classLit = createForArray('Array_0', Lorg_spoofax_jsglr_client_Priority_2_class _classLit), Lorg_spoofax_jsglr_client_RangeList_2_classLit = createForClass('RangeList'), _3Lorg_spoofax_jsglr_client_RangeList_2_classLit = createForArray('Array_0', Lorg_spoofax_jsglr_client_RangeList_2_classLit), _3Lorg_spoofax_jsglr_client_Goto_2_classLit = createForArray('Array_0', Lorg_spoofax_jsglr_client_Goto_2_classLit), Lorg_spoofax_jsglr_client_ParseTimeoutException_2_classLit = createForClass('ParseTimeoutException'), Lorg_spoofax_jsglr_client_ParserHistory_2_classLit = createForClass('ParserHistory'), Lorg_spoofax_jsglr_client_Path_2_classLit = createForClass('Path'), Lorg_spoofax_jsglr_client_PathListPool_2_classLit = createForClass('PathListPool'), Lorg_spoofax_jsglr_client_PooledPathList_2_classLit = createForClass('PooledPathList'), _3Lorg_spoofax_jsglr_client_Path_2_classLit = createForArray('Array_0', Lorg_spoofax_jsglr_client_Path_2_classLit), Lorg_spoofax_jsglr_client_PositionMap_2_classLit = createForClass('PositionMap'), Lorg_spoofax_jsglr_client_Produ
 ction_2_classLit = createForClass('Production'), Lorg_spoofax_jsglr_client_ProductionAttributes_2_classLit = createForClass('ProductionAttributes'), Lorg_spoofax_jsglr_client_RecoverNode_2_classLit = createForClass('RecoverNode'), Lorg_spoofax_jsglr_client_RecoveryConnector_2_classLit = createForClass('RecoveryConnector'), Lorg_spoofax_jsglr_client_RecoveryPerformance_2_classLit = createForClass('RecoveryPerformance'), Lorg_spoofax_jsglr_client_Reduce_2_classLit = createForClass('Reduce'),  ss('StructuralTokenRecognizer'), Lorg_spoofax_jsglr_client_StructureSkipSuggestion_2_classLit = createForClass('StructureSkipSuggestion'), Lorg_spoofax_jsglr_client_TaskCancellationException_2_classLit = createForClass('TaskCancellationException'), Lorg_spoofax_jsglr_client_imploder_ImploderAttachment_2_classLit = createForClass(null), Lorg_spoofax_terms_attachments_TermAttachmentType_2_classLit = createForClass('TermAttachmentType'), Lorg_spoofax_jsglr_client_imploder_ImploderAttachment$1_2_classLit = createForClass('ImploderAttachment$1'), Lorg_spoofax_jsglr_client_imploder_ProductionAttributeReader_2_classLit = createForClass('ProductionAttributeReader'), Lorg_spoofax_jsglr_shared_ArrayDeque_2_classLit = createForClass('ArrayDeque'), Lorg_spoofax_jsglr_shared_ArrayDeque$DeqIterator_2_classLit = createForClass('ArrayDeque$DeqIterator'), Lorg_spoofax_jsglr_shared_TokenExpectedException_2_classLit = createForClass('TokenExpectedException'), Lorg_spoofax_jssglr_client_Worker_
 2_classLit = createForClass('Worker'), Lorg_spoofax_terms_AbstractTermFactory_2_classLit = createForClass('AbstractTermFactory'), Lorg_spoofax_terms_TermFactory_2_classLit = createForClass('TermFactory'), Lorg_spoofax_jssglr_client_services_NativeTermFactory_2_classLit = createForClass('NativeTermFactory'), Lorg_spoofax_jssglr_client_services_Parser_2_classLit = createForClass('Parser'), _3Lcom_google_gwt_core_client_JavaScriptObject_2_classLit = createForArray('Array_0', Lcom_google_gwt_core_client_JavaScriptObject_2_classLit), Lorg_spoofax_jssglr_client_serv Lit = createForClass('StrategoAnnotation'), Lorg_spoofax_terms_StrategoAppl_2_classLit = createForClass('StrategoAppl'), Lorg_spoofax_terms_StrategoConstructor_2_classLit = createForClass('StrategoConstructor'), Lorg_spoofax_terms_StrategoInt_2_classLit = createForClass('StrategoInt'), Lorg_spoofax_terms_StrategoList_2_classLit = createForClass('StrategoList'), Lorg_spoofax_terms_StrategoListIterator_2_classLit = createForClass('StrategoListIterator'), Lorg_spoofax_terms_StrategoListIterator$1_2_classLit = createForClass('StrategoListIterator$1'), Lorg_spoofax_terms_StrategoPlaceholder_2_classLit = createForClass('StrategoPlaceholder'), Lorg_spoofax_terms_StrategoReal_2_classLit = createForClass('StrategoReal'), Lorg_spoofax_terms_StrategoString_2_classLit = createForClass('StrategoString'), Lorg_spoofax_terms_StrategoTuple_2_classLit = createForClass('StrategoTuple'), Lorg_spoofax_terms_StringTermReader_2_classLit = createForClass('StringTermReader'), Lorg_spoofax_interpret
 er_terms_IStrategoInt_2_classLit = createForInterface(), _3Lorg_spoofax_interpreter_terms_IStrategoInt_2_classLit = createForArray('Array_0', Lorg_spoofax_interpreter_terms_IStrategoInt_2_classLit), Lorg_spoofax_terms_TermFactory$KeepAliveString_2_classLit = createForClass('TermFactory$KeepAliveString'), Lorg_spoofax_terms_TermWrapperException_2_classLit = createForClass('TermWrapperException');

Added: strategoxt-javascript-backend/trunk/src/javascript/jssglr/jssglr_append.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/javascript/jssglr/jssglr_append.js	Thu Dec 29 11:36:16 2011	(r23847)
@@ -0,0 +1,5 @@
+	gwtOnLoad(undefined, 'jssglrWorker', '', 1);
+
+	return true;
+}();
+

Added: strategoxt-javascript-backend/trunk/src/javascript/jssglr/jssglr_prepend.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/javascript/jssglr/jssglr_prepend.js	Thu Dec 29 11:36:16 2011	(r23847)
@@ -0,0 +1,21 @@
+
+var navigator = { userAgent: "node-js" };
+self = {};
+$stats = function(){};
+$self = self;
+$sessionId = null;
+$wnd = {};
+window = {};
+$doc = {}; //firefox fix
+$wnd.setTimeout = function() { setTimeout.apply(self, arguments) };
+$wnd.clearTimeout = function() { clearTimeout.apply(self, arguments) };
+$wnd.clearInterval = function() { clearInterval.apply(self, arguments) };
+$wnd.alert = function(x) { }; //chrome fix
+
+
+
+StrategoJS.JSSGLR = {};
+
+StrategoJS.JSSGLR._loaded = function() {
+
+

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Wed Dec 28 11:44:06 2011	(r23846)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Thu Dec 29 11:36:16 2011	(r23847)
@@ -459,11 +459,21 @@
 	StrategoJS.SSL.SSL_concat_strings = function(ctx, currentTerm, s1, s2) {
 		trace("SSL_concat_strings");
 		var f = ctx.factory;
+		//TODO Possibly fix this to also work if params are two lists? will ask karl :rvogelij
+		if ((f.termType(s1) === f.LIST) && (f.termType(f.head(s1)) === f.STRING) && (f.termType(s2) === -1))
+		{
+			if (f.getSubtermCount(f.tail(s1)) === 0)
+				return f.head(s1);
+			else
+				return f.head(s1) + StrategoJS.SSL.SSL_concat_strings(ctx, currentTerm, f.tail(s1), s2);
+		}
 		if(f.termType(s1) !== f.STRING || f.termType(s2) !== f.STRING)
 			return null;
 		return s1 + s2;
 	}
 
+
+
 	StrategoJS.SSL.SSL_getenv = function(ctx, currentTerm, name) {
 		trace("SSL_getenv : " + name);
 		return null;
@@ -501,6 +511,13 @@
 		return realValue.toString();
 	}
 
+	//Call from stratego using <prim("NodeJSDebugger", AAA)>BBB
+	StrategoJS.SSL.NodeJSDebugger = function(ctx, AAA, BBB)
+	{
+		debugger;
+		return "debugger";
+	}
+
 
 
 	return true;

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Wed Dec 28 11:44:06 2011	(r23846)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Thu Dec 29 11:36:16 2011	(r23847)
@@ -466,6 +466,8 @@
 	}
 
 
+	
+	
 	//
 	//  public Term interface
 	//
@@ -664,7 +666,10 @@
 			realValue    : function(term) { return term.annoType ? term.term : term; },
 			stringValue  : function(term) { return term.annoType ? term.term : term; }
 	};
-
+	 
 	StrategoJS.Term = factory;
 	return true;
+	
 }();
+
+

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Wed Dec 28 11:44:06 2011	(r23846)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Dec 29 11:36:16 2011	(r23847)
@@ -13,7 +13,6 @@
 	libstratego-gpp
 	libstratego-xtc
 
-
   src/stratego/s2js-options 
   src/stratego/backend-simplify 
   src/stratego/lib/dr-scoping
@@ -24,7 +23,8 @@
   src/stratego/variable-access
   src/stratego/variable-lifting
 
-  src/stratego/direct
+  src/stratego/direct
+  tbl-to-jssglr
 
 strategies
 	
@@ -37,7 +37,7 @@
 	
   pp-aterm(msg) = ?x; pp-aterm-box; box2text-string(|80); debug(msg); !x
 	
-  s2js =
+  s2js =
       with(
         record-main-closurename
       )
@@ -84,7 +84,7 @@
          [main-method]
          return c;
        };
-    ]
+    ]
   with
   	alltd(JSTranslate)
   ; import*      := <js-imports>
@@ -105,7 +105,10 @@
   ; ctor-init*    := <bagof-ConstructorInit>
   ; def-init*     := "" // TODO <bagof-DefInit>
   ; const-decl*   := <bagof-ConstDecl>
-  ; const-init*   := <bagof-ConstInit>
+  ; const-init*   := <bagof-ConstInit>
+  
+  
+    
 
   js-imports = <get-config> "-la" ; map(js-import) <+ ![]    
     
@@ -115,8 +118,11 @@
 
   js-init-import: x -> $[[<with(jsify)> x].Main.init(context);]
   
-  js-register-method = !"" // TODO(karltk)
-  js-constant-methods = !"" // TODO(karltk) 
+  js-register-method = !"" // TODO(karltk)
+  
+  //js-constant-methods = !"" // TODO(karltk)
+   
+  js-constant-methods = !"" // TODO(karltk)
      	
 strategies
 	
@@ -486,7 +492,7 @@
   NonReqEscape-carriage-return = string-replace(|"\r", "\\r")
   /** @internal */
 
-
+
   translate-ImportTerm(|s,f) :
     ImportTerm(file) -> $[ term = /*x_constants.*/[x_constant]; ]
   with
@@ -502,8 +508,10 @@
         IsImported : inputname
         ConstDecl :+= $[var [x_constant];]
         ConstDecl :+= $[]
-        ConstInit :+= $[[x_constant] = StrategoJS.Term.parse("[<write-to-string; NonReqEscape> contents]");] /*[x_constants],*/
-      )
+        ConstInit :+= $[[<embed-tbl>(contents, x_constant)]]
+      )
+
+    
 
    output-dirname =
      OutputDirName

Added: strategoxt-javascript-backend/trunk/src/stratego/tbl-to-jssglr.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/stratego/tbl-to-jssglr.str	Thu Dec 29 11:36:16 2011	(r23847)
@@ -0,0 +1,570 @@
+module tbl-to-jssglr
+
+imports
+	libstratego-lib
+	libstratego-xtc
+
+strategies
+
+  embed-tbl:
+  	(tblfilecontents, varname) -> result
+  	with bottomup(try(analyze-ctors))
+	with bottomup(try(analyze-trees))
+	with all-keys-Count; filter(reused-element); sort-elements; map(name-element)
+	with ctors := <all-keys-CtorPos; filter(reused-element); map(output-ctor); separate; concat-strings>
+	with trees := <all-keys-TreePos; filter(reused-element); map(output-tree); separate; concat-strings>
+	// with all-keys-ElementName; map(debug-elem)
+	with escaped := <escape-lookup-js>tblfilecontents
+  	where result := $<
+  		
+  				var _f = self.spoofax.factory;
+  				
+  				
+				var parseArg = function(arg) {
+				    var type = Object.prototype.toString.call(arg);
+				    if(type === '[object Array]') {
+				        return _f.makeList(parseArgs(arg), null);
+				    }
+				    if(type === '[object Number]') {
+				        return _f.makeInt(arg);
+				    }
+				    if(type === '[object String]') {
+				        return _f.makeString(arg);
+				    }
+				    return arg;
+				}
+				
+				var parseArgs = function(args) {
+				    var length = args.length;
+				    var result = [];
+				    for(var i = 0; i $<$ length; i++) {
+				        var arg = args[i];
+				        var parsed = parseArg(arg);
+				        result.push(parsed);
+				    }
+				    return result;
+				}  				
+  				
+  				
+  				
+				var accept = _f.makeAppl(_f.makeConstructor('accept', arguments.length), parseArgs(arguments), null);
+				var action = function() { return _f.makeAppl(_f.makeConstructor('action', arguments.length), parseArgs(arguments), null); };
+				var alt = function() { return _f.makeAppl(_f.makeConstructor('alt', arguments.length), parseArgs(arguments), null); };
+				var ass0c = _f.makeAppl(_f.makeConstructor('assoc', arguments.length), parseArgs(arguments), null);
+				var assoc = function() { return _f.makeAppl(_f.makeConstructor('assoc', arguments.length), parseArgs(arguments), null); };
+				var arg_gtr_prio = function() { return _f.makeAppl(_f.makeConstructor('arg-gtr-prio', arguments.length), parseArgs(arguments), null); };
+				var attrs = function() { return _f.makeAppl(_f.makeConstructor('attrs', arguments.length), parseArgs(arguments), null); };
+				var avoid = _f.makeAppl(_f.makeConstructor('avoid', arguments.length), parseArgs(arguments), null);
+				var bracket = _f.makeAppl(_f.makeConstructor('bracket', arguments.length), parseArgs(arguments), null);
+				var cf = function() { return _f.makeAppl(_f.makeConstructor('cf', arguments.length), parseArgs(arguments), null); };
+				var _class = function() { return _f.makeAppl(_f.makeConstructor('class', arguments.length), parseArgs(arguments), null); };
+				var char_class = function() { return _f.makeAppl(_f.makeConstructor('char-class', arguments.length), parseArgs(arguments), null); };
+				var cons = function() { return _f.makeAppl(_f.makeConstructor('cons', arguments.length), parseArgs(arguments), null); };
+				var deprecated = function() { return _f.makeAppl(_f.makeConstructor('deprecated', arguments.length), parseArgs(arguments), null); };
+				var follow_restriction = function() { return _f.makeAppl(_f.makeConstructor('follow-restriction', arguments.length), parseArgs(arguments), null); };
+				var _goto = function() { return _f.makeAppl(_f.makeConstructor('goto', arguments.length), parseArgs(arguments), null); };
+				var gtr_prio = function() { return _f.makeAppl(_f.makeConstructor('gtr-prio', arguments.length), parseArgs(arguments), null); };
+				var indentpadding = _f.makeAppl(_f.makeConstructor('indentpadding', arguments.length), parseArgs(arguments), null);
+				var iter = function() { return _f.makeAppl(_f.makeConstructor('iter', arguments.length), parseArgs(arguments), null); };
+				var iter_sep = function() { return _f.makeAppl(_f.makeConstructor('iter-sep', arguments.length), parseArgs(arguments), null); };
+				var iter_star = function() { return _f.makeAppl(_f.makeConstructor('iter-star', arguments.length), parseArgs(arguments), null); };
+				var iter_star_sep = function() { return _f.makeAppl(_f.makeConstructor('iter-star-sep', arguments.length), parseArgs(arguments), null); };
+				var label = function() { return _f.makeAppl(_f.makeConstructor('label', arguments.length), parseArgs(arguments), null); };
+				var layout = _f.makeAppl(_f.makeConstructor('layout', arguments.length), parseArgs(arguments), null);
+				var left = _f.makeAppl(_f.makeConstructor('left', arguments.length), parseArgs(arguments), null);
+				var lex = function() { return _f.makeAppl(_f.makeConstructor('lex', arguments.length), parseArgs(arguments), null); };
+				var lit = function() { return _f.makeAppl(_f.makeConstructor('lit', arguments.length), parseArgs(arguments), null); };
+				var look = function() { return _f.makeAppl(_f.makeConstructor('look', arguments.length), parseArgs(arguments), null); };
+				var no_attrs = _f.makeAppl(_f.makeConstructor('no-attrs', arguments.length), parseArgs(arguments), null);
+				var non_assoc = _f.makeAppl(_f.makeConstructor('non-assoc', arguments.length), parseArgs(arguments), null);
+				var opt = function() { return _f.makeAppl(_f.makeConstructor('opt', arguments.length), parseArgs(arguments), null); };
+				var parameterized_sort = function() { return _f.makeAppl(_f.makeConstructor('parameterized-sort', arguments.length), parseArgs(arguments), null); };
+				var parse_table = function() { return _f.makeAppl(_f.makeConstructor('parse-table', arguments.length), parseArgs(arguments), null);};
+				var prefer = _f.makeAppl(_f.makeConstructor('prefer', arguments.length), parseArgs(arguments), null);
+				var prio = function() { return _f.makeAppl(_f.makeConstructor('prio', arguments.length), parseArgs(arguments), null); };
+				var priorities = function() { return _f.makeAppl(_f.makeConstructor('priorities', arguments.length), parseArgs(arguments), null); };
+				var prod = function() { return _f.makeAppl(_f.makeConstructor('prod', arguments.length), parseArgs(arguments), null); };
+				var range = function() { return _f.makeAppl(_f.makeConstructor('range', arguments.length), parseArgs(arguments), null); };
+				var recover = _f.makeAppl(_f.makeConstructor('recover', arguments.length), parseArgs(arguments), null);
+				var rec = function() { return _f.makeAppl(_f.makeConstructor('rec', arguments.length), parseArgs(arguments), null); };
+				var reduce = function() { return _f.makeAppl(_f.makeConstructor('reduce', arguments.length), parseArgs(arguments), null); };
+				var reject = _f.makeAppl(_f.makeConstructor('reject', arguments.length), parseArgs(arguments), null);
+				var restriction = function() { return _f.makeAppl(_f.makeConstructor('restriction', arguments.length), parseArgs(arguments), null); };
+				var right = _f.makeAppl(_f.makeConstructor('right', arguments.length), parseArgs(arguments), null);
+				var sep = function() { return _f.makeAppl(_f.makeConstructor('sep', arguments.length), parseArgs(arguments), null); };
+				var seq = function() { return _f.makeAppl(_f.makeConstructor('seq', arguments.length), parseArgs(arguments), null); };
+				var shift = function() { return _f.makeAppl(_f.makeConstructor('shift', arguments.length), parseArgs(arguments), null); };
+				var sort = function() { return _f.makeAppl(_f.makeConstructor('sort', arguments.length), parseArgs(arguments), null); };
+				var star = function() { return _f.makeAppl(_f.makeConstructor('star', arguments.length), parseArgs(arguments), null); };
+				var state_rec = function() { return _f.makeAppl(_f.makeConstructor('state-rec', arguments.length), parseArgs(arguments), null); };
+				var states = function() { return _f.makeAppl(_f.makeConstructor('states', arguments.length), parseArgs(arguments), null); };
+				var table = function() { return _f.makeAppl(_f.makeConstructor('table', arguments.length), parseArgs(arguments), null); };
+				var term = function() { return _f.makeAppl(_f.makeConstructor('term', arguments.length), parseArgs(arguments), null); };
+				
+				var <ctors>;
+				var <trees>;
+				
+				<varname> = <escaped>;  		
+  	>
+  	
+  	
+  	compare-element = ?(a,b); <gt>(<Count>a, <Count>b)
+  	
+  	sort-elements = qsort(compare-element)
+
+	// separate = separate-by(|",\n")
+	separate = separate-by(|",")
+
+	output-ctor:
+		// t at Constructor(name) -> $[[v] = [name] // [count]]
+		t at Constructor(name) -> $[[v]=[name]]
+		with v := <ElementName>t
+		with count := <Count>t
+	
+	output-tree:
+		// t -> $[[v] = [t'] // [count]]
+		t -> $[[v]=[t']]
+		with t' := <escape-js>t
+		with v := <ElementName>t
+		with count := <Count>t
+		
+	reused-element:
+		t -> t
+		where count := <Count>t
+		where <gt>(count, 3)
+
+	analyze-trees:
+		t -> t
+		where not(<is-string>t)
+		where not(<is-int>t)
+		where not(<Count>t)
+		with rules(
+				Count: t -> 1
+				TreePos: t -> t
+			)
+
+	analyze-trees:
+		t -> t
+		where not(<is-string>t)
+		where not(<is-int>t)
+		with new := <Count; inc>t
+		with rules(
+			Count: t -> new
+			TreePos: t -> t
+		)
+
+	escape-lookup-js:
+		t -> t'
+		where reused-element
+		with t' := <ElementName>t
+	
+	escape-lookup-js:
+		t -> $["[t']"]
+		where is-string
+		with t' := <escape>t
+		
+	escape-lookup-js:
+		t -> <escape-js>t
+
+	count-name(|t):
+		rawname -> t
+		with name := Constructor(rawname)
+		where not(<Count>name)
+		with rules(
+			Count: name -> 1 
+			CtorPos: name -> name
+		)
+		
+	count-name(|t):
+		rawname -> t
+		with name := Constructor(rawname)
+		with new := <Count; inc>name
+		with rules(
+			Count: name -> new
+		)
+
+	lookup-name:
+		t -> t'
+		where t' := <ElementName>Constructor(t)
+		
+	lookup-name:
+		t -> t
+
+	inc-secondary-counter:
+		t -> 0
+		where not(SecondaryCounter)
+		with rules (
+			SecondaryCounter := 0
+		)
+
+	inc-secondary-counter:
+		t -> result
+		with result := <SecondaryCounter; inc>
+		with rules (
+			SecondaryCounter := result
+		)
+	
+	secondary-counter-as-ints:
+		_ -> result
+		where counter := <SecondaryCounter>
+		with result := <counter-as-ints>counter
+
+	secondary-counter-as-ints:
+		_ -> []
+	
+	counter-as-ints:
+		counter -> []
+		where <lt>(counter, 0)
+	
+	counter-as-ints:
+		counter -> [result]
+		where <lt>(counter, 10)
+		with result := <add>(48, counter)
+		
+	counter-as-ints:
+		counter -> [result]
+		where <lt>(counter, 36)
+		with result := <add>(55, counter)
+	
+	counter-as-ints:
+		counter -> [result]
+		where <lt>(counter, 62)
+		with result := <add>(61, counter)
+	
+	head:
+		[x|xs] -> x
+		
+	head:
+		[x] -> x
+	
+	counter-as-ints:
+		counter -> [x | xs]
+		with total := 62
+		with modded := <mod>(counter, total)
+		with x := <counter-as-ints; head>modded
+		with divided := <div; dec>(counter, total)
+		with xs := <counter-as-ints>divided
+
+	blacklist:
+		_ -> <bagof-BlackList>
+		where not(BlackList)
+		with rules (
+			BlackList :+= <explode-string>"break"
+			BlackList :+= <explode-string>"case"
+			BlackList :+= <explode-string>"catch"
+			BlackList :+= <explode-string>"class"
+			BlackList :+= <explode-string>"const"
+			BlackList :+= <explode-string>"continue"
+			BlackList :+= <explode-string>"debugger"
+			BlackList :+= <explode-string>"default"
+			BlackList :+= <explode-string>"delete"
+			BlackList :+= <explode-string>"do"
+			BlackList :+= <explode-string>"else"
+			BlackList :+= <explode-string>"export"
+			BlackList :+= <explode-string>"extends"
+			BlackList :+= <explode-string>"false"
+			BlackList :+= <explode-string>"finally"
+			BlackList :+= <explode-string>"for"
+			BlackList :+= <explode-string>"function"
+			BlackList :+= <explode-string>"if"
+			BlackList :+= <explode-string>"import"
+			BlackList :+= <explode-string>"in"
+			BlackList :+= <explode-string>"instanceof"
+			BlackList :+= <explode-string>"new"
+			BlackList :+= <explode-string>"null"
+			BlackList :+= <explode-string>"protected"
+			BlackList :+= <explode-string>"return"
+			BlackList :+= <explode-string>"super"
+			BlackList :+= <explode-string>"switch"
+			BlackList :+= <explode-string>"this"
+			BlackList :+= <explode-string>"throw"
+			BlackList :+= <explode-string>"true"
+			BlackList :+= <explode-string>"try"
+			BlackList :+= <explode-string>"typeof"
+			BlackList :+= <explode-string>"var"
+			BlackList :+= <explode-string>"while"
+			BlackList :+= <explode-string>"with"
+			
+			BlackList :+= <explode-string>"parseArg"
+			BlackList :+= <explode-string>"parseArgs"
+		)
+	
+	blacklist = bagof-BlackList
+
+	starts-with-int:
+		t -> t
+		with first := <head>
+		where not(<lt>(first, 48))
+		where not(<gt>(first, 57))
+
+	in-blacklist:
+		t -> t 
+		where blacklist; fetch(?t)
+
+	valid-result:
+		ints -> ints
+		where not(starts-with-int)
+		where not(in-blacklist)
+
+	valid-result:
+		t -> <try-name>
+		// with <debug(!"reject: ")>(t, <implode-string>t)
+
+	try-name:
+		_ -> ints
+		with inc-secondary-counter
+		with ints := <secondary-counter-as-ints; valid-result>
+
+	new-name:
+		_ -> result
+		with result := <try-name; implode-string> 
+		// with <debug(!"result: ")>result
+
+	name-element:
+		t -> y
+		with y:= <new-name>;
+			rules(
+				ElementName: t -> y
+			)
+
+	ctor:
+		name -> <lookup-name>name
+
+	ctor(|a):
+		name -> $[[name']([a'])]
+		with name' := <lookup-name>name
+		with a' := <escape-lookup-js>a
+		
+	ctor(|a, b):
+		name -> $[[name']([a'],[b'])]
+		with name' := <lookup-name>name
+		with a' := <escape-lookup-js>a
+		with b' := <escape-lookup-js>b
+
+	ctor(|a, b, c):
+		name -> $[[name']([a'],[b'],[c'])]
+		with name' := <lookup-name>name
+		with a' := <escape-lookup-js>a
+		with b' := <escape-lookup-js>b
+		with c' := <escape-lookup-js>c
+
+	ctor(|a, b, c, d):
+		name -> $[[name']([a'],[b'],[c'],[d'])]
+		with name' := <lookup-name>name
+		with a' := <escape-lookup-js>a
+		with b' := <escape-lookup-js>b
+		with c' := <escape-lookup-js>c
+		with d' := <escape-lookup-js>d
+
+	ctor(|a, b, c, d, e):
+		name -> $[[name']([a'],[b'],[c'],[d'],[e'])]
+		with name' := <lookup-name>name
+		with a' := <escape-lookup-js>a
+		with b' := <escape-lookup-js>b
+		with c' := <escape-lookup-js>c
+		with d' := <escape-lookup-js>d
+		with e' := <escape-lookup-js>e
+
+	analyze-ctors: t at accept() -> <count-name(|t)>"accept"
+	analyze-ctors: t at action() -> <count-name(|t)>"acti0n"
+	analyze-ctors: t at action(a, b) -> <count-name(|t)>"action"
+	analyze-ctors: t at alt(a, b) -> <count-name(|t)>"alt"
+	analyze-ctors: t at arg-gtr-prio(a, b, c) -> <count-name(|t)>"arg_gtr_prio"
+	analyze-ctors: t at assoc() -> <count-name(|t)>"ass0c"
+	analyze-ctors: t at assoc(a) -> <count-name(|t)>"assoc"
+	analyze-ctors: t at attrs(a) -> <count-name(|t)>"attrs"
+	analyze-ctors: t at avoid() -> <count-name(|t)>"avoid"
+	analyze-ctors: t at cf(a) -> <count-name(|t)>"cf"
+	analyze-ctors: t at char-class(a) -> <count-name(|t)>"char_class"
+	analyze-ctors: t at cons(a) -> <count-name(|t)>"cons"
+	analyze-ctors: t at deprecated(a) -> <count-name(|t)>"deprecated"
+	analyze-ctors: t at follow-restriction(a) -> <count-name(|t)>"follow_restriction"
+	analyze-ctors: t at goto(a, b) -> <count-name(|t)>"_goto"
+	analyze-ctors: t at gtr-prio(a, b) -> <count-name(|t)>"gtr_prio"
+	analyze-ctors: t at indentpadding() -> <count-name(|t)>"indentpadding"
+	analyze-ctors: t at iter(a) -> <count-name(|t)>"iter"
+	analyze-ctors: t at iter(a) -> <count-name(|t)>"iter"
+	analyze-ctors: t at iter-star(a) -> <count-name(|t)>"iter_star"
+	analyze-ctors: t at iter-star-sep(a, b) -> <count-name(|t)>"iter_star_sep"
+	analyze-ctors: t at iter-sep(a, b) -> <count-name(|t)>"iter_sep"
+	analyze-ctors: t at label(a, b) -> <count-name(|t)>"label"
+	analyze-ctors: t at layout() -> <count-name(|t)>"layout"
+	analyze-ctors: t at left() -> <count-name(|t)>"left"
+	analyze-ctors: t at lex(a) -> <count-name(|t)>"lex"
+	analyze-ctors: t at lit(a) -> <count-name(|t)>"lit"
+	analyze-ctors: t at look(a, b) -> <count-name(|t)>"look"
+	analyze-ctors: t at no-attrs() -> <count-name(|t)>"no_attrs"
+	analyze-ctors: t at opt(a) -> <count-name(|t)>"opt"
+	analyze-ctors: t at parameterized-sort(a, b) -> <count-name(|t)>"parameterized_sort"
+	analyze-ctors: t at parse-table(a, b, c, d, e) -> <count-name(|t)>"parse_table"
+	analyze-ctors: t at prefer() -> <count-name(|t)>"prefer"
+	
+	analyze-ctors: t at non-assoc() -> <count-name(|t)>"non_assoc"
+	analyze-ctors: t at assoc() -> <count-name(|t)>"assoc"
+	analyze-ctors: t at bracket() -> <count-name(|t)>"bracket"
+	analyze-ctors: t at right() -> <count-name(|t)>"right"
+	
+	analyze-ctors: t at priorities(a) -> <count-name(|t)>"priorities"
+	analyze-ctors: t at prod(a, b, c) -> <count-name(|t)>"prod"
+	analyze-ctors: t at range(a, b) -> <count-name(|t)>"range"
+	analyze-ctors: t at recover() -> <count-name(|t)>"recover"
+	analyze-ctors: t at reject() -> <count-name(|t)>"reject"
+	analyze-ctors: t at reduce(a, b, c) -> <count-name(|t)>"reduce"
+	analyze-ctors: t at reduce(a, b, c, d) -> <count-name(|t)>"reduce"
+	analyze-ctors: t at seq(a) -> <count-name(|t)>"seq"
+	analyze-ctors: t at shift(a) -> <count-name(|t)>"shift"
+	analyze-ctors: t at sort(a) -> <count-name(|t)>"sort"
+	analyze-ctors: t at state-rec(a, b, c) ->  <count-name(|t)>"state_rec"
+	analyze-ctors: t at states(a) -> <count-name(|t)>"states"
+	analyze-ctors: t at term(a) -> <count-name(|t)>"term"
+
+	escape-js: accept() -> <ctor>"accept"
+	escape-js: action() -> <ctor>"acti0n"
+	escape-js: action(a, b) -> <ctor(|a,b)>"action"
+	escape-js: alt(a, b) -> <ctor(|a,b)>"alt"
+	escape-js: arg-gtr-prio(a, b, c) -> <ctor(|a,b,c)>"arg_gtr_prio"
+	escape-js: assoc() -> <ctor>"ass0c"
+	escape-js: assoc(a) -> <ctor(|a)>"assoc"
+	escape-js: attrs(a) -> <ctor(|a)>"attrs"
+	escape-js: avoid() -> <ctor>"avoid"
+	escape-js: cf(a) -> <ctor(|a)>"cf"
+	escape-js: char-class(a) -> <ctor(|a)>"char_class"
+	escape-js: cons(a) -> <ctor(|a)>"cons"
+	escape-js: deprecated(a) -> <ctor(|a)>"deprecated"
+	escape-js: follow-restriction(a) -> <ctor(|a)>"follow_restriction"
+	escape-js: goto(a, b) -> <ctor(|a,b)>"_goto"
+	escape-js: gtr-prio(a, b) -> <ctor(|a,b)>"gtr_prio"
+	escape-js: iter(a) -> <ctor(|a)>"iter"
+	escape-js: iter(a) -> <ctor(|a)>"iter"
+	escape-js: iter-star(a) -> <ctor(|a)>"iter_star"
+	escape-js: iter-star-sep(a, b) -> <ctor(|a,b)>"iter_star_sep"
+	escape-js: iter-sep(a, b) -> <ctor(|a,b)>"iter_sep"
+	escape-js: indentpadding() -> <ctor>"indentpadding"
+	escape-js: label(a, b) -> <ctor(|a,b)>"label"
+	escape-js: layout() -> <ctor>"layout"
+	escape-js: left() -> <ctor>"left"
+	escape-js: lex(a) -> <ctor(|a)>"lex"
+	escape-js: lit(a) -> <ctor(|a)>"lit"
+	escape-js: look(a, b) -> <ctor(|a,b)>"look"
+	escape-js: no-attrs() -> <ctor>"no_attrs"
+	escape-js: opt(a) -> <ctor(|a)>"opt"
+	escape-js: parameterized-sort(a, b) -> <ctor(|a,b)>"parameterized_sort"
+	escape-js: parse-table(a, b, c, d, e) -> <ctor(|a,b,c,d,e)>"parse_table"
+	escape-js: prefer() -> <ctor>"prefer"
+	escape-js: priorities(a) -> <ctor(|a)>"priorities"
+	escape-js: prod(a, b, c) -> <ctor(|a,b,c)>"prod"
+	escape-js: range(a, b) -> <ctor(|a,b)>"range"
+	escape-js: recover() -> <ctor>"recover"
+	
+	escape-js: non-assoc() -> <ctor>"non_assoc"
+	escape-js: assoc() -> <ctor>"assoc"
+	escape-js: bracket() -> <ctor>"bracket"
+	escape-js: right() -> <ctor>"right"
+	
+	escape-js: reject() -> <ctor>"reject"
+	escape-js: reduce(a, b, c) -> <ctor(|a,b,c)>"reduce"
+	escape-js: reduce(a, b, c, d) -> <ctor(|a,b,c,d)>"reduce"
+	escape-js: seq(a) -> <ctor(|a)>"seq"
+	escape-js: shift(a) -> <ctor(|a)>"shift"
+	escape-js: sort(a) -> <ctor(|a)>"sort"
+	escape-js: state-rec(a, b, c) ->  <ctor(|a,b,c)>"state_rec"
+	escape-js: states(a) -> <ctor(|a)>"states"
+	escape-js: term(a) -> <ctor(|a)>"term"
+
+	escape-js:
+		[] -> ${[]}
+		
+	escape-js:
+		[x] -> ${[{x'}]}
+		with x' := <escape-lookup-js>x 
+	
+	escape-js:
+		t@[_|_] -> ${[{t'}]}
+		with t' := <map(escape-js); separate; concat-strings>
+
+	unknown:
+		_ -> $[unknown]
+		with debug(!"term: ")
+
+	wrap-string:
+		t -> t
+		
+	wrap-int:
+		t -> $[[t']]
+		with t' := <int-to-string>t
+
+	escape-unknown-js = 
+		if is-string then
+			wrap-string
+		else
+			if is-int then
+				wrap-int
+			else
+				unknown
+			end
+		end
+
+	escape-js:
+		t -> result
+		with result := <escape-unknown-js>t
+
+signature constructors
+	Constructor : Term -> Term
+	
+	Name : Term -> Term
+	
+	parse-table : Term * Term * Term * Term * Term -> Term
+	label : Term * Term -> Term
+	states : Term -> Term
+	priorities : Term -> Term
+
+	accept: Term
+	action: Term
+	action: Term * Term -> Term
+	alt: Term * Term -> Term
+	arg-gtr-prio: Term * Term * Term -> Term
+	assoc: Term
+	assoc: Term -> Term
+	attrs: Term -> Term
+	avoid: Term
+	cf: Term -> Term
+	char-class: Term -> Term
+	cons: Term -> Term
+	deprecated: Term -> Term
+	goto: Term * Term -> Term
+	follow-restriction: Term -> Term
+	gtr-prio: Term * Term -> Term
+	iter: Term -> Term
+	iter-star: Term -> Term
+	iter-sep: Term * Term -> Term
+	iter-star-sep: Term * Term -> Term
+	label: Term * Term -> Term
+	layout: Term 
+	left: Term
+	
+	non-assoc: Term
+	assoc: Term
+	bracket: Term
+	right: Term
+	
+	look: Term * Term -> Term
+	indentpadding: Term
+	lex: Term -> Term
+	lit: Term -> Term
+	no-attrs: Term
+	opt: Term -> Term
+	parameterized-sort: Term * Term -> Term
+	prefer: Term
+	priorities: Term -> Term
+	prod: Term * Term * Term -> Term
+	range: Term * Term -> Term
+	recover: Term
+	reduce: Term * Term * Term -> Term
+	reduce: Term * Term * Term * Term -> Term
+	reject: Term
+	seq: Term -> Term
+	shift: Term -> Term
+	sort: Term -> Term
+	state-rec: Term * Term * Term -> Term
+	states: Term -> Term
+	term: Term -> Term

From karltk at strategoxt.org  Fri Dec 30 13:50:08 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 12:50:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23848 -
	spoofax/trunk/spoofax/org.spoofax.terms
Message-ID: <20111230125008.AD3EA7F82EA@mx1.tudelft.nl>

Author: karltk
Date: Fri Dec 30 12:50:06 2011
New Revision: 23848
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23848&sc=1

Log:
Added ant-based build scripts.

Added:
   spoofax/trunk/spoofax/org.spoofax.terms/AUTHORS
   spoofax/trunk/spoofax/org.spoofax.terms/INSTALL
   spoofax/trunk/spoofax/org.spoofax.terms/LICENSE
   spoofax/trunk/spoofax/org.spoofax.terms/build.ant.xml
   spoofax/trunk/spoofax/org.spoofax.terms/version.properties

Added: spoofax/trunk/spoofax/org.spoofax.terms/AUTHORS
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/AUTHORS	Fri Dec 30 12:50:06 2011	(r23848)
@@ -0,0 +1,6 @@
+Karl Trygve Kalleberg <karltk near strategoxt dot org>
+Lennart Kats <lennart add lclnet.nl>
+Arnold Lankamp
+Nathan Bruning
+Richard Vogelij
+Maartje de Jonge

Added: spoofax/trunk/spoofax/org.spoofax.terms/INSTALL
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/INSTALL	Fri Dec 30 12:50:06 2011	(r23848)
@@ -0,0 +1,9 @@
+
+To build the binary jar file into target/:
+
+ # ant -f build.ant.xml jar
+
+To build the source tarball into target/:
+
+ # ant -f build.ant.xml dist
+

Added: spoofax/trunk/spoofax/org.spoofax.terms/LICENSE
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/LICENSE	Fri Dec 30 12:50:06 2011	(r23848)
@@ -0,0 +1 @@
+Licensed under the GNU Lesser General Public License v2.1

Added: spoofax/trunk/spoofax/org.spoofax.terms/build.ant.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/build.ant.xml	Fri Dec 30 12:50:06 2011	(r23848)
@@ -0,0 +1,50 @@
+<project name="spoofax-terms" default="jar">
+	
+    <property name="lib.dir" value="lib" />
+    <property name="build.dir" value="target" />
+    <property name="src.dir" value="src" />
+
+    <property file="version.properties" />
+
+    <target name="compile" description="--> compile the project">
+        <mkdir dir="${build.dir}/classes" />
+        <javac srcdir="${src.dir}" destdir="${build.dir}/classes">
+            <exclude name="org/spoofax/gwt/**" />
+        </javac>
+    </target>
+
+   <target name="install" depends="jar" description="--> install the project into prefix">
+        <mkdir dir="${prefix}/bin" />
+        <mkdir dir="${prefix}/share/java" />
+
+        <copy todir="${prefix}/share/java">
+            <fileset dir="${lib.dir}/" />
+        </copy>
+
+        <copy file="build/${jarname}-${version}.jar" todir="${prefix}/share/java" />
+
+        <copy file="jsglr" todir="${prefix}/bin" />
+        <chmod perm="a+x" file="${prefix}/bin/jsglr" />
+   </target>
+
+   <target name="dist" description="--> create the dist tarball">
+       <tar destfile="${build.dir}/${jarname}-${version}.tar">
+           <tarfileset prefix="${jarname}-${version}/" dir="." includes="src/"/>
+           <tarfileset prefix="${jarname}-${version}/" dir=".">
+             <include name="*.xml" />
+             <include name="*.properties" />
+           </tarfileset>
+           <tarfileset prefix="${jarname}-${version}/" dir="." includes="INSTALL AUTHORS"/>
+           <tarfileset prefix="${jarname}-${version}/" dir="." includes="META-INF/" />
+       </tar>
+       <gzip zipfile="${build.dir}/${jarname}-${version}.tar.gz" src="${build.dir}/${jarname}-${version}.tar"/>
+   </target>
+
+   <target name="jar" depends="compile">
+        <jar destfile="${build.dir}/${jarname}-${version}.jar" basedir="${build.dir}/classes" />
+    </target>
+
+   <target name="check" depends="jar">
+   </target>
+
+</project>

Added: spoofax/trunk/spoofax/org.spoofax.terms/version.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/version.properties	Fri Dec 30 12:50:06 2011	(r23848)
@@ -0,0 +1,2 @@
+version=0.6.0
+jarname=spoofax-terms

From karltk at strategoxt.org  Fri Dec 30 14:14:21 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 13:14:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23849 - hydra/jobs
Message-ID: <20111230131421.A76417F8025@mx1.tudelft.nl>

Author: karltk
Date: Fri Dec 30 13:14:21 2011
New Revision: 23849
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23849&sc=1

Log:
Added nix expression for building spoofax term library.

Added:
   hydra/jobs/org.spoofax.terms.nix

Added: hydra/jobs/org.spoofax.terms.nix
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ hydra/jobs/org.spoofax.terms.nix	Fri Dec 30 13:14:21 2011	(r23849)
@@ -0,0 +1,19 @@
+{ nixpkgs ? ../../nixpkgs
+, spoofaxTerms ? { outPath = ../../org.spoofax.terms ; rev = 1234; }
+}:
+let 
+  pkgs = import nixpkgs { system = "i686-linux"; };
+in
+{ 
+  build = pkgs.releaseTools.antBuild {
+    name   = "spoofax-terms";
+    stdenv = pkgs.stdenv;
+    src    = spoofaxTerms;
+
+    antTargets = ["compile" "jar" "check"];
+
+    buildfile = "build.ant.xml";
+    buildInputs = [pkgs.ant];
+  };
+
+}

From karltk at strategoxt.org  Fri Dec 30 14:30:32 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 13:30:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23850 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax:
	. interpreter/core interpreter/library
	interpreter/library/ssl interpreter/stratego int...
Message-ID: <20111230133032.808717F8025@mx1.tudelft.nl>

Author: karltk
Date: Fri Dec 30 13:30:32 2011
New Revision: 23850
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23850&sc=1

Log:
Updated license in all files to LGPL v2.1

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/DebugUtil.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/BindingInfo.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/DefScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IContext.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterErrorExit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterException.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Main.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Pair.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoCoreLoader.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoSignature.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOperatorRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/RandomAccessInputStream.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/RandomAccessOutputStream.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_EXDEV.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_STDERR_FILENO.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_STDIN_FILENO.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_STDOUT_FILENO.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_access.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addi.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addr.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_close.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_concat_strings.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_cos.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_divi.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_dynamic_rules_hashtable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_exit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_term.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fclose.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fflush.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fgetc.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fileno.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fopen.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputc.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_appl_arguments_map.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_arguments.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_constructor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_list_length.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getcwd.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getenv.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gti.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gtr.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_implode_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int_to_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_int.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_list_fold.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_list_loop.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mkterm.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mod.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modi.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modification_time.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modr.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_muli.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mulr.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_new.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_perror.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_printnl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_rand.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_stream.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_readdir.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string_precision.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sin.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sqrt.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stderr_stream.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdin_stream.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdout_stream.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strcat.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_int.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_real.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strlen.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subti.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subtr.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_fold.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_keys_fold.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_values_fold.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_baf.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_saf.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_taf.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_text.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/All.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/BagOf.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Build.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/ExtSDef.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Fail.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Id.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/ImportTerm.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/LGChoice.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Let.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Match.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/One.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/OpDecl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/PrimT.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Scope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Seq.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Some.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Strategy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/StupidFormatter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AbstractInterpreterTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AllLanguageTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AllLibraryTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/ArithmeticTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/Pause.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/QuickTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/SpeedTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestBuild.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestClosure.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestCongruence.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestDefinition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestGuard.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestHigherOrderParameters.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestMatch.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestOverloading.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestScoping.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestTermConstruction.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestTermDeconstruction.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestTraversals.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/library/BasicLibraryTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/xlet/Instance.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/xlet/Main.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/DebugUtil.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/DebugUtil.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/DebugUtil.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -11,7 +11,7 @@
  *
  * Copyright (c) 2006-2007, Karl Trygve Kalleberg <karltk near strategoxt.org>
  *
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 public class DebugUtil {
     public static boolean debugging = false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/BindingInfo.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/BindingInfo.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/BindingInfo.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -1,7 +1,7 @@
 /*
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/DefScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/DefScope.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/DefScope.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IConstruct.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IConstruct.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IContext.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IContext.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/IContext.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterErrorExit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterErrorExit.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterErrorExit.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -1,5 +1,5 @@
 /*
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterException.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterException.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterException.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2007-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Main.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Main.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Main.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -1,7 +1,7 @@
 /*
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Pair.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Pair.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Pair.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoCoreLoader.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoCoreLoader.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoCoreLoader.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoSignature.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoSignature.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoSignature.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -1,7 +1,7 @@
 /*
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -1,5 +1,5 @@
 /*
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.core;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractPrimitive.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractPrimitive.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.library;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -1,5 +1,5 @@
 /*
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.library;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOperatorRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOperatorRegistry.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOperatorRegistry.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2006-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.library;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -1,5 +1,5 @@
 /*
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.library;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/RandomAccessInputStream.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/RandomAccessInputStream.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/RandomAccessInputStream.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/RandomAccessOutputStream.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/RandomAccessOutputStream.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/RandomAccessOutputStream.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  *
- * Licensed under the GNU Lesser General Public License, v2
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_EXDEV.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_EXDEV.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_EXDEV.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_STDERR_FILENO.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_STDERR_FILENO.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_STDERR_FILENO.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_STDIN_FILENO.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_STDIN_FILENO.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_STDIN_FILENO.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_STDOUT_FILENO.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_STDOUT_FILENO.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_STDOUT_FILENO.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_access.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_access.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_access.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addi.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addi.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addi.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addr.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addr.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_addr.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_close.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_close.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_close.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_concat_strings.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_concat_strings.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_concat_strings.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_cos.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_cos.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_cos.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_divi.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_divi.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_divi.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_dynamic_rules_hashtable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_dynamic_rules_hashtable.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_dynamic_rules_hashtable.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_exit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_exit.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_exit.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_string.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_string.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_term.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_term.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_explode_term.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fclose.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fclose.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fclose.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fflush.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fflush.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fflush.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fgetc.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fgetc.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fgetc.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fileno.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fileno.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fileno.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fopen.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fopen.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fopen.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputc.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputc.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputc.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_appl_arguments_map.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_appl_arguments_map.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_appl_arguments_map.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_arguments.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_arguments.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_arguments.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_constructor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_constructor.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_constructor.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_list_length.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_list_length.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_list_length.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getcwd.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getcwd.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getcwd.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getenv.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getenv.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getenv.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gti.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gti.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gti.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gtr.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gtr.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_gtr.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_implode_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_implode_string.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_implode_string.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -4,7 +4,7 @@
  * Copyright (c) 2008, Sander Vermolen <sandervermolen near gmail.com>
  * Copyright (c) 2008, Karl Trygve Kalleberg <karltk near strategoxt dot org> 
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int_to_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int_to_string.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_int_to_string.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_int.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_int.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_int.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_string.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_is_string.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_list_fold.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_list_fold.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_list_fold.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_list_loop.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_list_loop.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_list_loop.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mkterm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mkterm.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mkterm.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mod.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mod.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mod.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modi.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modi.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modi.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modification_time.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modification_time.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modification_time.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modr.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modr.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_modr.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_muli.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_muli.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_muli.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mulr.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mulr.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mulr.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_new.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_new.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_new.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_perror.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_perror.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_perror.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_printnl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_printnl.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_printnl.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_rand.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_rand.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_rand.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_stream.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_stream.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_stream.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_string.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_string.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_readdir.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_readdir.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_readdir.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2008, Karl Trygve Kalleberg <karltk near strategoxt dot org> 
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string_precision.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string_precision.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_real_to_string_precision.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_remove.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_remove.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_remove.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sin.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sin.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sin.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sqrt.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sqrt.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_sqrt.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stderr_stream.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stderr_stream.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stderr_stream.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdin_stream.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdin_stream.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdin_stream.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdout_stream.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdout_stream.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_stdout_stream.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strcat.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strcat.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strcat.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_int.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_int.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_int.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_real.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_real.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_string_to_real.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strlen.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strlen.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_strlen.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subti.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subti.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subti.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subtr.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subtr.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_subtr.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_fold.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_fold.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_fold.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_keys_fold.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_keys_fold.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_keys_fold.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_values_fold.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_values_fold.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_values_fold.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_baf.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_baf.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_baf.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_saf.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_saf.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_saf.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_taf.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_taf.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_taf.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_text.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_text.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_text.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_string.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_string.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_string.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.library.ssl;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/All.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/All.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/All.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/BagOf.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/BagOf.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/BagOf.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Build.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Build.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Build.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -5,7 +5,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  * 
  * Part of Spoofax
  */

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt.org>
  *
- * Licensed under the GNU Lesser General Public License, v2.1
+ * Licensed under the GNU Lesser Lesser General Public License, v2.1.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/ExtSDef.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/ExtSDef.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/ExtSDef.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Fail.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Fail.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Fail.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Id.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Id.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Id.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/ImportTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/ImportTerm.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/ImportTerm.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/LGChoice.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/LGChoice.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/LGChoice.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Let.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Let.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Let.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Match.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Match.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Match.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/One.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/One.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/One.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/OpDecl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/OpDecl.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/OpDecl.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/PrimT.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/PrimT.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/PrimT.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/SDefT.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Scope.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Scope.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Scope.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Seq.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Seq.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Seq.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Some.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Some.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Some.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Strategy.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Strategy.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Strategy.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/StupidFormatter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/StupidFormatter.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/StupidFormatter.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.stratego;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AbstractInterpreterTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AbstractInterpreterTest.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AbstractInterpreterTest.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AllLanguageTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AllLanguageTests.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AllLanguageTests.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AllLibraryTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AllLibraryTests.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AllLibraryTests.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/ArithmeticTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/ArithmeticTest.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/ArithmeticTest.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/Pause.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/Pause.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/Pause.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/QuickTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/QuickTest.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/QuickTest.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/SpeedTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/SpeedTest.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/SpeedTest.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestBuild.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestBuild.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestBuild.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.language;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestClosure.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestClosure.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestClosure.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.language;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestCongruence.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestCongruence.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestCongruence.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.language;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestDefinition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestDefinition.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestDefinition.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.language;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestGuard.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestGuard.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestGuard.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.language;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestHigherOrderParameters.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestHigherOrderParameters.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestHigherOrderParameters.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.language;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestMatch.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestMatch.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestMatch.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.language;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestOverloading.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestOverloading.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestOverloading.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.language;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestScoping.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestScoping.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestScoping.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.language;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestTermConstruction.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestTermConstruction.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestTermConstruction.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.language;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestTermDeconstruction.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestTermDeconstruction.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestTermDeconstruction.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.language;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestTraversals.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestTraversals.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/language/TestTraversals.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.language;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/library/BasicLibraryTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/library/BasicLibraryTest.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/library/BasicLibraryTest.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.test.library;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/xlet/Instance.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/xlet/Instance.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/xlet/Instance.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.xlet;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/xlet/Main.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/xlet/Main.java	Fri Dec 30 13:14:21 2011	(r23849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/xlet/Main.java	Fri Dec 30 13:30:32 2011	(r23850)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2004, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.xlet;
 


From karltk at strategoxt.org  Fri Dec 30 14:32:21 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 13:32:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23851 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core
Message-ID: <20111230133221.EE460108C02D@mx3.tudelft.nl>

Author: karltk
Date: Fri Dec 30 13:32:20 2011
New Revision: 23851
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23851&sc=1

Log:
Added LICENSE and AUTHORS. Updated INSTALL.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/AUTHORS
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/LICENSE
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/INSTALL

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.core/AUTHORS
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/AUTHORS	Fri Dec 30 13:32:20 2011	(r23851)
@@ -0,0 +1,6 @@
+Karl Trygve Kalleberg <karltk near strategoxt dot org>
+Lennart Kats <lennart add lclnet.nl>
+Valentin David <valentin.david near gmail dot com>
+Tobi Vollebregt
+Sander Vermolen
+

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/INSTALL
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/INSTALL	Fri Dec 30 13:30:32 2011	(r23850)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/INSTALL	Fri Dec 30 13:32:20 2011	(r23851)
@@ -10,13 +10,12 @@
 
 1) Fetch ant-junit-1.6.5.jar and junit-3.8.1.jar from 
    http://www.ii.uib.no/~karltk/spoofax/extras/
-   and place them into ext/
+   and place them into lib/
 
 2) Compile the jar with 
-   ant -f build/build.xml jar
+   ant -f build.ant.xml jar
    
-   This will produce the file interpreter-x.y.z.jar in the root 
-   directory of this project. 
+   This will produce the file interpreter-x.y.z.jar into target/
 
 3) Compile the unit tests by entering the tests/ directory and
    executing
@@ -24,5 +23,5 @@
    (This requires strc to be in your path.)
 
 3) Execute the unit tests with ant 
-   ant -f build/build.xml run.tests
+   ant -f build.ant.xml run.tests
 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.core/LICENSE
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/LICENSE	Fri Dec 30 13:32:20 2011	(r23851)
@@ -0,0 +1 @@
+Licensed under the GNU Lesser General Public License v2.1

From karltk at strategoxt.org  Fri Dec 30 14:51:42 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 13:51:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23852 -
	stratego-language-tests/trunk
Message-ID: <20111230135142.E4D54CC6B2@mx4.tudelft.nl>

Author: karltk
Date: Fri Dec 30 13:51:42 2011
New Revision: 23852
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23852&sc=1

Log:
LPGL, not GPL.

Modified:
   stratego-language-tests/trunk/COPYING

Modified: stratego-language-tests/trunk/COPYING
==============================================================================
--- stratego-language-tests/trunk/COPYING	Fri Dec 30 13:32:20 2011	(r23851)
+++ stratego-language-tests/trunk/COPYING	Fri Dec 30 13:51:42 2011	(r23852)
@@ -1,340 +1 @@
-		    GNU GENERAL PUBLIC LICENSE
-		       Version 2, June 1991
-
- Copyright (C) 1989, 1991 Free Software Foundation, Inc.
-     51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- Everyone is permitted to copy and distribute verbatim copies
- of this license document, but changing it is not allowed.
-
-			    Preamble
-
-  The licenses for most software are designed to take away your
-freedom to share and change it.  By contrast, the GNU General Public
-License is intended to guarantee your freedom to share and change free
-software--to make sure the software is free for all its users.  This
-General Public License applies to most of the Free Software
-Foundation's software and to any other program whose authors commit to
-using it.  (Some other Free Software Foundation software is covered by
-the GNU Library General Public License instead.)  You can apply it to
-your programs, too.
-
-  When we speak of free software, we are referring to freedom, not
-price.  Our General Public Licenses are designed to make sure that you
-have the freedom to distribute copies of free software (and charge for
-this service if you wish), that you receive source code or can get it
-if you want it, that you can change the software or use pieces of it
-in new free programs; and that you know you can do these things.
-
-  To protect your rights, we need to make restrictions that forbid
-anyone to deny you these rights or to ask you to surrender the rights.
-These restrictions translate to certain responsibilities for you if you
-distribute copies of the software, or if you modify it.
-
-  For example, if you distribute copies of such a program, whether
-gratis or for a fee, you must give the recipients all the rights that
-you have.  You must make sure that they, too, receive or can get the
-source code.  And you must show them these terms so they know their
-rights.
-
-  We protect your rights with two steps: (1) copyright the software, and
-(2) offer you this license which gives you legal permission to copy,
-distribute and/or modify the software.
-
-  Also, for each author's protection and ours, we want to make certain
-that everyone understands that there is no warranty for this free
-software.  If the software is modified by someone else and passed on, we
-want its recipients to know that what they have is not the original, so
-that any problems introduced by others will not reflect on the original
-authors' reputations.
-
-  Finally, any free program is threatened constantly by software
-patents.  We wish to avoid the danger that redistributors of a free
-program will individually obtain patent licenses, in effect making the
-program proprietary.  To prevent this, we have made it clear that any
-patent must be licensed for everyone's free use or not licensed at all.
-
-  The precise terms and conditions for copying, distribution and
-modification follow.
-
-		    GNU GENERAL PUBLIC LICENSE
-   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
-
-  0. This License applies to any program or other work which contains
-a notice placed by the copyright holder saying it may be distributed
-under the terms of this General Public License.  The "Program", below,
-refers to any such program or work, and a "work based on the Program"
-means either the Program or any derivative work under copyright law:
-that is to say, a work containing the Program or a portion of it,
-either verbatim or with modifications and/or translated into another
-language.  (Hereinafter, translation is included without limitation in
-the term "modification".)  Each licensee is addressed as "you".
-
-Activities other than copying, distribution and modification are not
-covered by this License; they are outside its scope.  The act of
-running the Program is not restricted, and the output from the Program
-is covered only if its contents constitute a work based on the
-Program (independent of having been made by running the Program).
-Whether that is true depends on what the Program does.
-
-  1. You may copy and distribute verbatim copies of the Program's
-source code as you receive it, in any medium, provided that you
-conspicuously and appropriately publish on each copy an appropriate
-copyright notice and disclaimer of warranty; keep intact all the
-notices that refer to this License and to the absence of any warranty;
-and give any other recipients of the Program a copy of this License
-along with the Program.
-
-You may charge a fee for the physical act of transferring a copy, and
-you may at your option offer warranty protection in exchange for a fee.
-
-  2. You may modify your copy or copies of the Program or any portion
-of it, thus forming a work based on the Program, and copy and
-distribute such modifications or work under the terms of Section 1
-above, provided that you also meet all of these conditions:
-
-    a) You must cause the modified files to carry prominent notices
-    stating that you changed the files and the date of any change.
-
-    b) You must cause any work that you distribute or publish, that in
-    whole or in part contains or is derived from the Program or any
-    part thereof, to be licensed as a whole at no charge to all third
-    parties under the terms of this License.
-
-    c) If the modified program normally reads commands interactively
-    when run, you must cause it, when started running for such
-    interactive use in the most ordinary way, to print or display an
-    announcement including an appropriate copyright notice and a
-    notice that there is no warranty (or else, saying that you provide
-    a warranty) and that users may redistribute the program under
-    these conditions, and telling the user how to view a copy of this
-    License.  (Exception: if the Program itself is interactive but
-    does not normally print such an announcement, your work based on
-    the Program is not required to print an announcement.)
-
-These requirements apply to the modified work as a whole.  If
-identifiable sections of that work are not derived from the Program,
-and can be reasonably considered independent and separate works in
-themselves, then this License, and its terms, do not apply to those
-sections when you distribute them as separate works.  But when you
-distribute the same sections as part of a whole which is a work based
-on the Program, the distribution of the whole must be on the terms of
-this License, whose permissions for other licensees extend to the
-entire whole, and thus to each and every part regardless of who wrote it.
-
-Thus, it is not the intent of this section to claim rights or contest
-your rights to work written entirely by you; rather, the intent is to
-exercise the right to control the distribution of derivative or
-collective works based on the Program.
-
-In addition, mere aggregation of another work not based on the Program
-with the Program (or with a work based on the Program) on a volume of
-a storage or distribution medium does not bring the other work under
-the scope of this License.
-
-  3. You may copy and distribute the Program (or a work based on it,
-under Section 2) in object code or executable form under the terms of
-Sections 1 and 2 above provided that you also do one of the following:
-
-    a) Accompany it with the complete corresponding machine-readable
-    source code, which must be distributed under the terms of Sections
-    1 and 2 above on a medium customarily used for software interchange; or,
-
-    b) Accompany it with a written offer, valid for at least three
-    years, to give any third party, for a charge no more than your
-    cost of physically performing source distribution, a complete
-    machine-readable copy of the corresponding source code, to be
-    distributed under the terms of Sections 1 and 2 above on a medium
-    customarily used for software interchange; or,
-
-    c) Accompany it with the information you received as to the offer
-    to distribute corresponding source code.  (This alternative is
-    allowed only for noncommercial distribution and only if you
-    received the program in object code or executable form with such
-    an offer, in accord with Subsection b above.)
-
-The source code for a work means the preferred form of the work for
-making modifications to it.  For an executable work, complete source
-code means all the source code for all modules it contains, plus any
-associated interface definition files, plus the scripts used to
-control compilation and installation of the executable.  However, as a
-special exception, the source code distributed need not include
-anything that is normally distributed (in either source or binary
-form) with the major components (compiler, kernel, and so on) of the
-operating system on which the executable runs, unless that component
-itself accompanies the executable.
-
-If distribution of executable or object code is made by offering
-access to copy from a designated place, then offering equivalent
-access to copy the source code from the same place counts as
-distribution of the source code, even though third parties are not
-compelled to copy the source along with the object code.
-
-  4. You may not copy, modify, sublicense, or distribute the Program
-except as expressly provided under this License.  Any attempt
-otherwise to copy, modify, sublicense or distribute the Program is
-void, and will automatically terminate your rights under this License.
-However, parties who have received copies, or rights, from you under
-this License will not have their licenses terminated so long as such
-parties remain in full compliance.
-
-  5. You are not required to accept this License, since you have not
-signed it.  However, nothing else grants you permission to modify or
-distribute the Program or its derivative works.  These actions are
-prohibited by law if you do not accept this License.  Therefore, by
-modifying or distributing the Program (or any work based on the
-Program), you indicate your acceptance of this License to do so, and
-all its terms and conditions for copying, distributing or modifying
-the Program or works based on it.
-
-  6. Each time you redistribute the Program (or any work based on the
-Program), the recipient automatically receives a license from the
-original licensor to copy, distribute or modify the Program subject to
-these terms and conditions.  You may not impose any further
-restrictions on the recipients' exercise of the rights granted herein.
-You are not responsible for enforcing compliance by third parties to
-this License.
-
-  7. If, as a consequence of a court judgment or allegation of patent
-infringement or for any other reason (not limited to patent issues),
-conditions are imposed on you (whether by court order, agreement or
-otherwise) that contradict the conditions of this License, they do not
-excuse you from the conditions of this License.  If you cannot
-distribute so as to satisfy simultaneously your obligations under this
-License and any other pertinent obligations, then as a consequence you
-may not distribute the Program at all.  For example, if a patent
-license would not permit royalty-free redistribution of the Program by
-all those who receive copies directly or indirectly through you, then
-the only way you could satisfy both it and this License would be to
-refrain entirely from distribution of the Program.
-
-If any portion of this section is held invalid or unenforceable under
-any particular circumstance, the balance of the section is intended to
-apply and the section as a whole is intended to apply in other
-circumstances.
-
-It is not the purpose of this section to induce you to infringe any
-patents or other property right claims or to contest validity of any
-such claims; this section has the sole purpose of protecting the
-integrity of the free software distribution system, which is
-implemented by public license practices.  Many people have made
-generous contributions to the wide range of software distributed
-through that system in reliance on consistent application of that
-system; it is up to the author/donor to decide if he or she is willing
-to distribute software through any other system and a licensee cannot
-impose that choice.
-
-This section is intended to make thoroughly clear what is believed to
-be a consequence of the rest of this License.
-
-  8. If the distribution and/or use of the Program is restricted in
-certain countries either by patents or by copyrighted interfaces, the
-original copyright holder who places the Program under this License
-may add an explicit geographical distribution limitation excluding
-those countries, so that distribution is permitted only in or among
-countries not thus excluded.  In such case, this License incorporates
-the limitation as if written in the body of this License.
-
-  9. The Free Software Foundation may publish revised and/or new versions
-of the General Public License from time to time.  Such new versions will
-be similar in spirit to the present version, but may differ in detail to
-address new problems or concerns.
-
-Each version is given a distinguishing version number.  If the Program
-specifies a version number of this License which applies to it and "any
-later version", you have the option of following the terms and conditions
-either of that version or of any later version published by the Free
-Software Foundation.  If the Program does not specify a version number of
-this License, you may choose any version ever published by the Free Software
-Foundation.
-
-  10. If you wish to incorporate parts of the Program into other free
-programs whose distribution conditions are different, write to the author
-to ask for permission.  For software which is copyrighted by the Free
-Software Foundation, write to the Free Software Foundation; we sometimes
-make exceptions for this.  Our decision will be guided by the two goals
-of preserving the free status of all derivatives of our free software and
-of promoting the sharing and reuse of software generally.
-
-			    NO WARRANTY
-
-  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
-FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
-OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
-PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
-OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
-MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
-TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
-PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
-REPAIR OR CORRECTION.
-
-  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
-WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
-REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
-INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
-OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
-TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
-YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
-PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
-POSSIBILITY OF SUCH DAMAGES.
-
-		     END OF TERMS AND CONDITIONS
-
-	    How to Apply These Terms to Your New Programs
-
-  If you develop a new program, and you want it to be of the greatest
-possible use to the public, the best way to achieve this is to make it
-free software which everyone can redistribute and change under these terms.
-
-  To do so, attach the following notices to the program.  It is safest
-to attach them to the start of each source file to most effectively
-convey the exclusion of warranty; and each file should have at least
-the "copyright" line and a pointer to where the full notice is found.
-
-    <one line to give the program's name and a brief idea of what it does.>
-    Copyright (C) <year>  <name of author>
-
-    This program is free software; you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation; either version 2 of the License, or
-    (at your option) any later version.
-
-    This program is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with this program; if not, write to the Free Software
-    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
-
-
-Also add information on how to contact you by electronic and paper mail.
-
-If the program is interactive, make it output a short notice like this
-when it starts in an interactive mode:
-
-    Gnomovision version 69, Copyright (C) year  name of author
-    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
-    This is free software, and you are welcome to redistribute it
-    under certain conditions; type `show c' for details.
-
-The hypothetical commands `show w' and `show c' should show the appropriate
-parts of the General Public License.  Of course, the commands you use may
-be called something other than `show w' and `show c'; they could even be
-mouse-clicks or menu items--whatever suits your program.
-
-You should also get your employer (if you work as a programmer) or your
-school, if any, to sign a "copyright disclaimer" for the program, if
-necessary.  Here is a sample; alter the names:
-
-  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
-  `Gnomovision' (which makes passes at compilers) written by James Hacker.
-
-  <signature of Ty Coon>, 1 April 1989
-  Ty Coon, President of Vice
-
-This General Public License does not permit incorporating your program into
-proprietary programs.  If your program is a subroutine library, you may
-consider it more useful to permit linking proprietary applications with the
-library.  If this is what you want to do, use the GNU Library General
-Public License instead of this License.
+Licensed under the GNU Lesser General Public License, v2.1

From karltk at strategoxt.org  Fri Dec 30 14:53:29 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 13:53:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23853 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.core: . build
Message-ID: <20111230135329.7297CCC6B2@mx4.tudelft.nl>

Author: karltk
Date: Fri Dec 30 13:53:29 2011
New Revision: 23853
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23853&sc=1

Log:
Wiped ivy build system; Ant-only now.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/version.properties
      - copied unchanged from r23846, spoofax/trunk/spoofax/org.spoofax.interpreter.core/build/version.properties
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/TODO
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/build.ivy.xml
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/build/common.ant.xml
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/build/common.ivy.xml
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/build/ivysettings.xml
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/build/version.properties
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/ivy.xml
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/build.ant.xml

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/build.ant.xml
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/build.ant.xml	Fri Dec 30 13:51:42 2011	(r23852)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/build.ant.xml	Fri Dec 30 13:53:29 2011	(r23853)
@@ -1,8 +1,16 @@
 <project name="spoofax-interpreter-core" default="jar">
 	
-    <import file="build/common.ant.xml" />
+    <property name="lib.dir" value="lib" />
+    <property name="build.dir" value="target" />
+    <property name="src.dir" value="src" />
 
-    <target name="compile" depends="resolve" description="--> compile the project">
+    <property file="version.properties" />
+
+    <path id="lib.path.id">
+        <fileset dir="${lib.dir}" />
+    </path>
+
+    <target name="compile" description="--> compile the project">
         <mkdir dir="${build.dir}/classes" />
         <javac srcdir="${src.dir}" destdir="${build.dir}/classes" classpathref="lib.path.id">
             <exclude name="org/spoofax/interpreter/test/**" />
@@ -24,7 +32,7 @@
    </target>
 
    <target name="dist" description="--> create the dist tarball">
-       <tar destfile="${jarname}-${version}.tar">
+       <tar destfile="${build.dir}/${jarname}-${version}.tar">
            <tarfileset prefix="${jarname}-${version}/" dir="." includes="src/"/>
            <!-- THIS IS 3VIL! Should be removed once the deps are properly packaged -->
            <tarfileset prefix="${jarname}-${version}/" dir="." includes="lib/"/>
@@ -36,13 +44,21 @@
              <include name="spoofax" />
              <include name="spoofax-prof" />
            </tarfileset>
-           <tarfileset prefix="${jarname}-${version}/" dir="." includes="INSTALL Makefile"/>
+           <tarfileset prefix="${jarname}-${version}/" dir="." includes="INSTALL AUTHORS LICENSE"/>
            <tarfileset prefix="${jarname}-${version}/" dir="." includes="META-INF/" />
        </tar>
-       <gzip zipfile="${jarname}-${version}.tar.gz" src="${jarname}-${version}.tar"/>
+       <gzip zipfile="${build.dir}/${jarname}-${version}.tar.gz" src="${build.dir}/${jarname}-${version}.tar"/>
+   </target>
+
+   <target name="jar" depends="compile">
+        <jar destfile="${build.dir}/${jarname}-${version}.jar" basedir="${build.dir}/classes" />
    </target>
 
    <target name="check" depends="jar">
+    <junit>
+       <classpath refid="lib.path.id" /> 
+       <!-- FIXME: we should use the stratego-language-tests project to check the interpreter against -->
+    </junit>
    </target>
 
 </project>

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.core/version.properties (from r23846, spoofax/trunk/spoofax/org.spoofax.interpreter.core/build/version.properties)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/version.properties	Fri Dec 30 13:53:29 2011	(r23853, copy of r23846, spoofax/trunk/spoofax/org.spoofax.interpreter.core/build/version.properties)
@@ -0,0 +1,2 @@
+version=0.3.14
+jarname=spoofax-interpreter-core

From karltk at strategoxt.org  Fri Dec 30 14:53:47 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 13:53:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23854 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core
Message-ID: <20111230135347.9E381108C019@mx3.tudelft.nl>

Author: karltk
Date: Fri Dec 30 13:53:47 2011
New Revision: 23854
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23854&sc=1

Log:
Minor version bump.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/version.properties

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/version.properties
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/version.properties	Fri Dec 30 13:53:29 2011	(r23853)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/version.properties	Fri Dec 30 13:53:47 2011	(r23854)
@@ -1,2 +1,2 @@
-version=0.3.14
+version=0.3.15
 jarname=spoofax-interpreter-core

From karltk at strategoxt.org  Fri Dec 30 15:06:39 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 14:06:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23855 - in
	spoofax/trunk/spoofax/org.spoofax.jsglr: . build
Message-ID: <20111230140639.5A6992B8004@mx2.tudelft.nl>

Author: karltk
Date: Fri Dec 30 14:06:38 2011
New Revision: 23855
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23855&sc=1

Log:
Dropped ivy build system. Updated README with new URLs.

Added:
   spoofax/trunk/spoofax/org.spoofax.jsglr/version.properties
      - copied unchanged from r23846, spoofax/trunk/spoofax/org.spoofax.jsglr/build/version.properties
Deleted:
   spoofax/trunk/spoofax/org.spoofax.jsglr/build/
   spoofax/trunk/spoofax/org.spoofax.jsglr/build.ivy.xml
   spoofax/trunk/spoofax/org.spoofax.jsglr/ivy.xml
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/README
   spoofax/trunk/spoofax/org.spoofax.jsglr/build.ant.xml

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/README
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/README	Fri Dec 30 13:53:47 2011	(r23854)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/README	Fri Dec 30 14:06:38 2011	(r23855)
@@ -1,4 +1,3 @@
-
    
 Scannerless Generalized LR parsing for Java
 ===========================================
@@ -13,13 +12,13 @@
 Project page
 ============
 
- http://www.spoofax.org/jsglr.html
+ http://www.spoofax.org/jsglr
 
 
-Bugs
-====
+Bug tracker
+===========
 
- https://bugs.strategoxt.org/browse/SPX
+ http://yellowgrass.org/project/Spoofax
 
 
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/build.ant.xml
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/build.ant.xml	Fri Dec 30 13:53:47 2011	(r23854)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/build.ant.xml	Fri Dec 30 14:06:38 2011	(r23855)
@@ -1,11 +1,22 @@
 <project name="spoofax-jsglr" default="jar">
 	
-    <import file="build/common.ant.xml" />
+    <property name="lib.dir" value="lib" />
+    <property name="build.dir" value="target" />
+    <property name="src.dir" value="src" />
 
-    <target name="compile" depends="resolve" description="--> compile the project">
+    <property file="version.properties" />
+
+    <path id="lib.path.id">
+        <fileset dir="${lib.dir}" />
+    </path>
+
+    <target name="compile" description="--> compile the project">
         <mkdir dir="${build.dir}/classes" />
         <javac srcdir="${src.dir}" destdir="${build.dir}/classes" classpathref="lib.path.id">
-            <exclude name="org/spoofax/interpreter/test/**" />
+            <exclude name="org/spoofax/client/JSGLREntryPoint.java" />
+            <exclude name="org/spoofax/jsglr/shared/RemoteParseTableService.java" />
+            <exclude name="org/spoofax/jsglr/shared/RemoteParseTableServiceAsync.java" />
+            <exclude name="org/spoofax/jsglr/server/RemoteParseTableServiceImpl.java" />
         </javac>
     </target>
 
@@ -24,7 +35,7 @@
    </target>
 
    <target name="dist" description="--> create the dist tarball">
-       <tar destfile="${jarname}-${version}.tar">
+       <tar destfile="${build.dir}/${jarname}-${version}.tar">
            <tarfileset prefix="${jarname}-${version}/" dir="." includes="src/"/>
            <!-- THIS IS 3VIL! Should be removed once the deps are properly packaged -->
            <tarfileset prefix="${jarname}-${version}/" dir="." includes="lib/"/>
@@ -36,12 +47,16 @@
              <include name="jsglr" />
              <include name="jsglr-prof" />
            </tarfileset>
-           <tarfileset prefix="${jarname}-${version}/" dir="." includes="INSTALL Makefile"/>
+           <tarfileset prefix="${jarname}-${version}/" dir="." includes="INSTALL README AUTHORS LICENSE"/>
            <tarfileset prefix="${jarname}-${version}/" dir="." includes="META-INF/" />
        </tar>
-       <gzip zipfile="${jarname}-${version}.tar.gz" src="${jarname}-${version}.tar"/>
+       <gzip zipfile="${build.dir}/${jarname}-${version}.tar.gz" src="${build.dir}/${jarname}-${version}.tar"/>
    </target>
 
+   <target name="jar" depends="compile">
+        <jar destfile="${build.dir}/${jarname}-${version}.jar" basedir="${build.dir}/classes" />
+    </target>
+
    <target name="check" depends="jar">
    </target>
 

Copied: spoofax/trunk/spoofax/org.spoofax.jsglr/version.properties (from r23846, spoofax/trunk/spoofax/org.spoofax.jsglr/build/version.properties)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/version.properties	Fri Dec 30 14:06:38 2011	(r23855, copy of r23846, spoofax/trunk/spoofax/org.spoofax.jsglr/build/version.properties)
@@ -0,0 +1,2 @@
+version=0.2.0
+jarname=spoofax-jsglr

From karltk at strategoxt.org  Fri Dec 30 15:06:57 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 14:06:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23856 -
	spoofax/trunk/spoofax/org.spoofax.jsglr
Message-ID: <20111230140657.58AE62B8004@mx2.tudelft.nl>

Author: karltk
Date: Fri Dec 30 14:06:57 2011
New Revision: 23856
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23856&sc=1

Log:
Minor version bump.

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/version.properties

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/version.properties
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/version.properties	Fri Dec 30 14:06:38 2011	(r23855)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/version.properties	Fri Dec 30 14:06:57 2011	(r23856)
@@ -1,2 +1,2 @@
-version=0.2.0
+version=0.2.1
 jarname=spoofax-jsglr

From karltk at strategoxt.org  Fri Dec 30 15:20:50 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 14:20:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23857 - in
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax: .
	interpreter/terms terms terms/io
Message-ID: <20111230142050.CF659CC0C1@mx4.tudelft.nl>

Author: karltk
Date: Fri Dec 30 14:20:50 2011
New Revision: 23857
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23857&sc=1

Log:
Rewrite source headers to show GPL instead of LGPL.

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/NotImplementedException.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoAppl.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoConstructor.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoInt.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoList.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoReal.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoRef.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoString.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTerm.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTermBuilder.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTuple.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/ITermFactory.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/PrettyPrinter.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAppl.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoConstructor.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoList.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoReal.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoString.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTuple.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StringTermReader.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/io/AbstractIOTermFactory.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/io/TAFTermReader.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/NotImplementedException.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/NotImplementedException.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/NotImplementedException.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoAppl.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoAppl.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoConstructor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoConstructor.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoConstructor.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoInt.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoInt.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoInt.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoList.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoList.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoReal.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoReal.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoReal.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoRef.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoRef.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoRef.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoString.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoString.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoString.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTerm.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTerm.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTermBuilder.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTermBuilder.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTermBuilder.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTuple.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTuple.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTuple.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/ITermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/ITermFactory.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/ITermFactory.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/PrettyPrinter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/PrettyPrinter.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/PrettyPrinter.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAppl.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAppl.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoConstructor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoConstructor.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoConstructor.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoList.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoList.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoReal.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoReal.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoReal.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoString.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoString.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoString.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTuple.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTuple.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTuple.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StringTermReader.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StringTermReader.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StringTermReader.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.terms;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/io/AbstractIOTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/io/AbstractIOTermFactory.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/io/AbstractIOTermFactory.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.terms.io;
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/io/TAFTermReader.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/io/TAFTermReader.java	Fri Dec 30 14:06:57 2011	(r23856)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/io/TAFTermReader.java	Fri Dec 30 14:20:50 2011	(r23857)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.terms.io;
 

From karltk at strategoxt.org  Fri Dec 30 15:59:46 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 14:59:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23858 -
	spoofax/trunk/spoofax/org.spoofax.interpreter
Message-ID: <20111230145946.668AF108C0E5@mx3.tudelft.nl>

Author: karltk
Date: Fri Dec 30 14:59:46 2011
New Revision: 23858
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23858&sc=1

Log:
Added first cut of ant build file for command line interpreter.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter/build.ant.xml

Added: spoofax/trunk/spoofax/org.spoofax.interpreter/build.ant.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter/build.ant.xml	Fri Dec 30 14:59:46 2011	(r23858)
@@ -0,0 +1,87 @@
+<project name="spoofax-terms" default="jar">
+	
+    <property name="lib.dir" value="lib" />
+    <property name="build.dir" value="target" />
+    <property name="src.dir" value="src" />
+
+    <property file="version.properties" />
+
+    <path id="lib.path.id">
+        <fileset dir="${lib.dir}" />
+    </path>
+
+    <target name="compile" description="--> compile the project">
+        <mkdir dir="${build.dir}/classes" />
+        <javac srcdir="${src.dir}" destdir="${build.dir}/classes" classpathref="lib.path.id">
+            <exclude name="org/spoofax/gwt/**" />
+        </javac>
+        <mkdir dir="${build.dir}/share" />
+        <exec executable="strc" failonerror="true">
+            <arg value="-i"/>
+            <arg value="src/main/stratego/spoofax/interpreter/frontend.str" />
+            <arg value="-F"/>
+            <arg value="-c"/>
+            <arg value="--library"/>
+            <arg value="-o"/>
+            <arg value="${build.dir}/share/frontend.ctree"/>
+        </exec>
+        <exec executable="pack-sdf" failonerror="true">
+            <arg value="-i"/>
+            <arg value="src/main/sdf/Stratego-Shell.sdf" />
+            <arg value="-I" />
+            <arg value="${HOME}/.nix-profile/share/stratego-front"/>
+            <arg value="-o"/>
+            <arg value="${build.dir}/share/Stratego-Shell.def"/>
+        </exec>
+        <exec executable="sdf2table" failonerror="true">
+            <arg value="-i"/>
+            <arg value="${build.dir}/share/Stratego-Shell.def" />
+            <arg value="-m"/>
+            <arg value="Stratego-Shell"/>
+            <arg value="-o"/>
+            <arg value="${build.dir}/share/Stratego-Shell.tbl"/>
+        </exec>
+    </target>
+
+   <target name="install" depends="jar" description="--> install the project into prefix">
+        <mkdir dir="${prefix}/bin" />
+        <mkdir dir="${prefix}/share/java" />
+
+        <copy todir="${prefix}/share/java">
+            <fileset dir="${lib.dir}/" />
+        </copy>
+
+        <copy file="build/${jarname}-${version}.jar" todir="${prefix}/share/java" />
+   </target>
+
+   <target name="dist" description="--> create the dist tarball">
+       <tar destfile="${build.dir}/${jarname}-${version}.tar">
+           <tarfileset prefix="${jarname}-${version}/" dir="." includes="src/"/>
+           <tarfileset prefix="${jarname}-${version}/" dir=".">
+             <include name="*.xml" />
+             <include name="*.properties" />
+           </tarfileset>
+           <tarfileset prefix="${jarname}-${version}/" dir="." includes="INSTALL AUTHORS" />
+           <tarfileset prefix="${jarname}-${version}/" dir="." includes="META-INF/" />
+       </tar>
+       <gzip zipfile="${build.dir}/${jarname}-${version}.tar.gz" src="${build.dir}/${jarname}-${version}.tar" />
+   </target>
+
+   <target name="jar" depends="compile">
+        <jar destfile="${build.dir}/${jarname}-${version}.jar">
+          <fileset dir="${build.dir}/classes" />
+          <fileset dir="${build.dir}" >
+            <include name="share/frontend.ctree" />
+            <include name="share/Stratego-Shell.tbl" />
+          </fileset>
+          <manifest>
+            <attribute name="Main-Class" value="org.spoofax.interpreter.cli.Main" />
+            <attribute name="Class-Path" value="jline-1.0.jar spoofax-interpreter-core-0.3.14.jar spoofax-jsglr-0.2.0.jar spoofax-terms-0.6.0.jar" />
+          </manifest>
+        </jar>
+    </target>
+
+   <target name="check" depends="jar">
+   </target>
+
+</project>

From karltk at strategoxt.org  Fri Dec 30 16:36:12 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 15:36:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23859 -
	spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter
Message-ID: <20111230153612.CB9222B8093@mx2.tudelft.nl>

Author: karltk
Date: Fri Dec 30 15:36:12 2011
New Revision: 23859
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23859&sc=1

Log:
Renamed findLocalLibrary to findLocalResource because that's what we use it for. Fixed path to Stratego-Shell.tbl

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Fri Dec 30 14:59:46 2011	(r23858)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter/src/main/java/org/spoofax/interpreter/ConcreteInterpreter.java	Fri Dec 30 15:36:12 2011	(r23859)
@@ -46,7 +46,7 @@
 		try {
 			load(findLibrary("stratego-lib/libstratego-lib.ctree"));
 			load(findLibrary("libstrc.ctree"));
-			load(findLocalLibrary("share/frontend.ctree"));
+			load(findLocalResource("share/frontend.ctree"));
 			// load(findLibrary("libstratego-aterm.ctree"));
 			// load(findLibrary("libstratego-gpp.ctree"));
 			// load(findLibrary("libstratego-rtg.ctree"));
@@ -56,7 +56,7 @@
 
 			ParseTableManager ptm = new ParseTableManager();
 			sugarTable = ptm
-					.loadFromStream(findLocalLibrary("/share/Stratego-Shell.tbl"));
+					.loadFromStream(findLocalResource("share/Stratego-Shell.tbl"));
 			sugarParser = new SGLR(new TreeBuilder(), sugarTable);
 			sugarParser.setUseStructureRecovery(false);
 			setCurrent(getFactory().makeList());
@@ -72,10 +72,10 @@
 
 	}
 
-	private InputStream findLocalLibrary(String path) throws IOException {
+	private InputStream findLocalResource(String path) throws IOException {
 		InputStream ins = ConcreteInterpreter.class.getClassLoader().getResourceAsStream(path);
 		if(ins == null)
-			throw new IOException("Failed to load internal library " + path);
+			throw new IOException("Failed to load internal resource " + path);
 		return ins;
 	}
 

From karltk at strategoxt.org  Fri Dec 30 16:36:15 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 15:36:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23860 -
	spoofax/trunk/spoofax/org.spoofax.interpreter
Message-ID: <20111230153615.724852B8093@mx2.tudelft.nl>

Author: karltk
Date: Fri Dec 30 15:36:15 2011
New Revision: 23860
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23860&sc=1

Log:
Updated build file to produce a shell script for starting the interpreter from the command line.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter/stri.in   (contents, props changed)
      - copied, changed from r23859, spoofax/trunk/spoofax/org.spoofax.interpreter/jstri
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter/jstri
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter/build.ant.xml

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter/build.ant.xml
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter/build.ant.xml	Fri Dec 30 15:36:12 2011	(r23859)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter/build.ant.xml	Fri Dec 30 15:36:15 2011	(r23860)
@@ -51,7 +51,13 @@
             <fileset dir="${lib.dir}/" />
         </copy>
 
-        <copy file="build/${jarname}-${version}.jar" todir="${prefix}/share/java" />
+        <copy file="stri.in" tofile="${prefix}/bin/stri" />
+        <replaceregexp match="@@version@@" replace="${version}" flags="g" byline="true">
+            <fileset dir="${prefix}/bin/" includes="stri"/>
+        </replaceregexp>
+        <chmod file="${prefix}/bin/stri" perm="+x"/>
+
+        <copy file="${build.dir}/${jarname}-${version}.jar" todir="${prefix}/share/java" />
    </target>
 
    <target name="dist" description="--> create the dist tarball">
@@ -76,7 +82,7 @@
           </fileset>
           <manifest>
             <attribute name="Main-Class" value="org.spoofax.interpreter.cli.Main" />
-            <attribute name="Class-Path" value="jline-1.0.jar spoofax-interpreter-core-0.3.14.jar spoofax-jsglr-0.2.0.jar spoofax-terms-0.6.0.jar" />
+            <attribute name="Class-Path" value="jline-1.0.jar spoofax-interpreter-core-0.3.14.jar spoofax-jsglr-0.2.1.jar spoofax-terms-0.6.0.jar" />
           </manifest>
         </jar>
     </target>

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter/stri.in (from r23859, spoofax/trunk/spoofax/org.spoofax.interpreter/jstri)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter/jstri	Fri Dec 30 15:36:12 2011	(r23859, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter/stri.in	Fri Dec 30 15:36:15 2011	(r23860)
@@ -1,22 +1,12 @@
 #!/bin/bash
 #
-# Copyright (c) 2004-2007, Karl Trygve Kalleberg <karltk at ii.uib.no>
+# Copyright (c) 2004-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
 #
 
 base=$(dirname $0)
 jars=${base}/../share/java
-compiler_jar=${jars}/spoofax-compiler-0.3.9.jar
-interpcore_jar=${jars}/spoofax-interpreter-core-0.3.11.jar
-interp_jar=${jars}/spoofax-interpreter-0.1.1.jar
-jsglr_jar=${jars}/jsglr-0.2.0.jar
-jsglrlib_jar=${jars}/spoofax-library-jsglr-0.3.9.jar
-atermadapter_jar=${jars}/spoofax-aterm-adapter-0.1.1.jar
-aterm_jar=${jars}/spoofax-aterm-0.2.1.jar:${jars}/jjtraveler-0.4.3.jar:${jars}/shared-objects-1.4.jar
-cp=${compiler_jar}:${interp_jar}:${interpcore_jar}:${jsglr_jar}:${jsglrlib_jar}:${atermadapter_jar}:${aterm_jar}
-share_dir=${base}/../share/spoofax-interpreter
-
-java	-cp ${cp}                 \
-	-Xmx1024m -Xss2m          \
-	-Dshare.dir=${share_dir}  \
-	org.spoofax.interpreter.cli.Main \
+java	\
+	-Xmx1024m 					\
+	-Xss2m          				\
+	-jar ${jars}/spoofax-interpreter-@@version@@.jar\
 	"$@"

From karltk at strategoxt.org  Fri Dec 30 18:52:09 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 17:52:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23861 -
	spoofax/trunk/spoofax/org.spoofax.interpreter
Message-ID: <20111230175209.741227F8047@mx1.tudelft.nl>

Author: karltk
Date: Fri Dec 30 17:52:07 2011
New Revision: 23861
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23861&sc=1

Log:
Expose the paths to strategoxt and sdf so that they are settable in the Hydra build farm.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter/build.ant.xml

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter/build.ant.xml
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter/build.ant.xml	Fri Dec 30 15:36:15 2011	(r23860)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter/build.ant.xml	Fri Dec 30 17:52:07 2011	(r23861)
@@ -5,6 +5,8 @@
     <property name="src.dir" value="src" />
 
     <property file="version.properties" />
+    <property name="sdf.dir" value="${HOME}/.nix-profile/" />
+    <property name="strategoxt.dir" value="${HOME}/.nix-profile/" />
 
     <path id="lib.path.id">
         <fileset dir="${lib.dir}" />
@@ -16,7 +18,7 @@
             <exclude name="org/spoofax/gwt/**" />
         </javac>
         <mkdir dir="${build.dir}/share" />
-        <exec executable="strc" failonerror="true">
+        <exec executable="${strategoxt.dir}/bin/strc" failonerror="true">
             <arg value="-i"/>
             <arg value="src/main/stratego/spoofax/interpreter/frontend.str" />
             <arg value="-F"/>
@@ -25,15 +27,15 @@
             <arg value="-o"/>
             <arg value="${build.dir}/share/frontend.ctree"/>
         </exec>
-        <exec executable="pack-sdf" failonerror="true">
+        <exec executable="${strategoxt.dir}/bin/pack-sdf" failonerror="true">
             <arg value="-i"/>
             <arg value="src/main/sdf/Stratego-Shell.sdf" />
             <arg value="-I" />
-            <arg value="${HOME}/.nix-profile/share/stratego-front"/>
+            <arg value="${strategoxt.dir}/share/stratego-front"/>
             <arg value="-o"/>
             <arg value="${build.dir}/share/Stratego-Shell.def"/>
         </exec>
-        <exec executable="sdf2table" failonerror="true">
+        <exec executable="${sdf.dir}/bin/sdf2table" failonerror="true">
             <arg value="-i"/>
             <arg value="${build.dir}/share/Stratego-Shell.def" />
             <arg value="-m"/>

From karltk at strategoxt.org  Fri Dec 30 18:53:33 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 17:53:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23862 - hydra/jobs
Message-ID: <20111230175333.30FDD108C015@mx3.tudelft.nl>

Author: karltk
Date: Fri Dec 30 17:53:32 2011
New Revision: 23862
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23862&sc=1

Log:
Added .nix suffix for import of org.spoofax.terms.

Modified:
   hydra/jobs/org.spoofax.jsglr.nix

Modified: hydra/jobs/org.spoofax.jsglr.nix
==============================================================================
--- hydra/jobs/org.spoofax.jsglr.nix	Fri Dec 30 17:52:07 2011	(r23861)
+++ hydra/jobs/org.spoofax.jsglr.nix	Fri Dec 30 17:53:32 2011	(r23862)
@@ -1,6 +1,6 @@
 { nixpkgs ? ../../nixpkgs
 , spoofaxJsglr ? { outPath = ../../org.spoofax.jsglr ; rev = 1234; }
-, spoofaxTerms ? (import ./org.spoofax.terms { }).build
+, spoofaxTerms ? (import ./org.spoofax.terms.nix { }).build
 }:
 let 
   pkgs = import nixpkgs { system = "i686-linux"; };

From karltk at strategoxt.org  Fri Dec 30 18:56:23 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 17:56:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23863 - hydra/jobs
Message-ID: <20111230175623.3E4537F8047@mx1.tudelft.nl>

Author: karltk
Date: Fri Dec 30 17:56:22 2011
New Revision: 23863
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23863&sc=1

Log:
Added build scripts for interpreter core and command line interpreter shell. Work in progress: the shell script generated by the Nix antBuild have an incomplete classpath.

Added:
   hydra/jobs/org.spoofax.interpreter.core.nix
   hydra/jobs/spoofax-interpreter.nix

Added: hydra/jobs/org.spoofax.interpreter.core.nix
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ hydra/jobs/org.spoofax.interpreter.core.nix	Fri Dec 30 17:56:22 2011	(r23863)
@@ -0,0 +1,44 @@
+{ nixpkgs ? ../../nixpkgs
+, spoofaxCore ? { outPath = ../../org.spoofax.interpreter.core ; rev = 1234; }
+, spoofaxTerms ? (import ./org.spoofax.terms.nix { }).build
+}:
+let 
+  pkgs = import nixpkgs { system = "i686-linux"; };
+  jars = with pkgs; {
+    junit =
+      fetchurl {
+        url = http://www.ii.uib.no/~karltk/spoofax/extras/junit-dep-4.10.jar;
+        sha256 = "e1ff27e80d39c7a5a149faf499f13dbf7f7205808874a3265e49c282ed94d0a7";
+      };
+    antjunit =
+      fetchurl {
+        url = http://www.ii.uib.no/~karltk/spoofax/extras/ant-junit-1.6.5.jar;
+        sha256 = "1bvigg8grqb7c68xc5b917s1ijqjhp2swibk781kf57iddi1k3fk";
+      };
+  };
+  extraJars = with jars; [ junit antjunit ];
+
+in
+{ 
+  build = pkgs.releaseTools.antBuild {
+    name   = "spoofax-interpreter-core";
+    stdenv = pkgs.stdenv;
+    src    = spoofaxCore;
+
+    antTargets = ["compile" "jar" "check"];
+
+    antBuildInputs = [spoofaxTerms jars.junit jars.antjunit];
+
+    buildfile = "build.ant.xml";
+    buildInputs = [pkgs.ant];
+
+    preConfigure = ''
+      mkdir -p lib/
+    '';
+
+    jarWrappers = [
+      { name = "spoofax-core"; classPath = "${spoofaxTerms}/lib/java/*"; mainClass = "org.spoofax.interpreter.core.Main"; }
+    ];
+  };
+
+}

Added: hydra/jobs/spoofax-interpreter.nix
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ hydra/jobs/spoofax-interpreter.nix	Fri Dec 30 17:56:22 2011	(r23863)
@@ -0,0 +1,59 @@
+{ nixpkgs ? ../../nixpkgs
+, spoofaxInterpreter ? { outPath = ../../org.spoofax.interpreter ; rev = 1234; }
+, spoofaxCore ? (import ./org.spoofax.interpreter.core.nix { }).build
+, spoofaxTerms ? (import ./org.spoofax.terms.nix { }).build
+, spoofaxJsglr ? (import ./org.spoofax.jsglr.nix { }).build
+, strategoxt ? (import ./strategoxt.nix {}).build {}
+}:
+let 
+  pkgs = import nixpkgs { system = "i686-linux"; };
+  jars = with pkgs; {
+    junit =
+      fetchurl {
+        url = http://www.ii.uib.no/~karltk/spoofax/extras/junit-dep-4.10.jar;
+        sha256 = "e1ff27e80d39c7a5a149faf499f13dbf7f7205808874a3265e49c282ed94d0a7";
+      };
+    jline =
+      fetchurl {
+        url = http://www.ii.uib.no/~karltk/spoofax/extras/jline-1.0.jar;
+        sha256 = "6d35823d5ae86ea4c71bc653747d1234c1587662882a76738d2881fb409394ab";
+      };
+    antjunit =
+      fetchurl {
+        url = http://www.ii.uib.no/~karltk/spoofax/extras/ant-junit-1.6.5.jar;
+        sha256 = "1bvigg8grqb7c68xc5b917s1ijqjhp2swibk781kf57iddi1k3fk";
+      };
+  };
+  extraJars = with jars; [ junit antjunit ];
+  
+in
+{ 
+  pkgs = import nixpkgs { system = "x86_64-linux" ; };
+
+  build = pkgs.releaseTools.antBuild {
+    name   = "spoofax-interpreter";
+    stdenv = pkgs.stdenv;
+    src    = spoofaxInterpreter;
+
+    antTargets = ["compile" "jar" "check"];
+
+    antProperties = [ 
+        { name = "strategoxt.dir"; value = "${strategoxt}"; } 
+        { name = "sdf.dir"; value = "${pkgs.strategoPackages017.sdf}"; } 
+    ];
+    antBuildInputs = [spoofaxCore spoofaxTerms spoofaxJsglr jars.jline jars.junit jars.antjunit];
+
+    buildfile = "build.ant.xml";
+    buildInputs = [pkgs.ant strategoxt pkgs.strategoPackages017.sdf];
+
+    preConfigure = ''
+      mkdir -p lib/
+        echo ${strategoxt}
+    '';
+
+    jarWrappers = [
+      { name = "spoofax"; classPath = "${spoofaxTerms}/lib/java/*"; mainClass = "org.spoofax.interpreter.cli.Main"; }
+    ];
+  };
+
+}

From karltk at strategoxt.org  Fri Dec 30 19:29:24 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 30 Dec 2011 18:29:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23864 - hydra/jobs
Message-ID: <20111230182924.F35787F8058@mx1.tudelft.nl>

Author: karltk
Date: Fri Dec 30 18:29:24 2011
New Revision: 23864
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23864&sc=1

Log:
Fixed classpath issues. The interpreter can now be started from the command line.

Modified:
   hydra/jobs/spoofax-interpreter.nix

Modified: hydra/jobs/spoofax-interpreter.nix
==============================================================================
--- hydra/jobs/spoofax-interpreter.nix	Fri Dec 30 17:56:22 2011	(r23863)
+++ hydra/jobs/spoofax-interpreter.nix	Fri Dec 30 18:29:24 2011	(r23864)
@@ -48,11 +48,13 @@
 
     preConfigure = ''
       mkdir -p lib/
-        echo ${strategoxt}
     '';
 
     jarWrappers = [
-      { name = "spoofax"; classPath = "${spoofaxTerms}/lib/java/*"; mainClass = "org.spoofax.interpreter.cli.Main"; }
+      { name = "spoofax"; 
+        classPath = "${jars.jline}:${spoofaxTerms}/lib/java/*:${spoofaxJsglr}/lib/java/*:${spoofaxCore}/lib/java/*";
+        mainClass = "org.spoofax.interpreter.cli.Main"; 
+      }
     ];
   };
 

From karltk at strategoxt.org  Sat Dec 31 01:05:13 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sat, 31 Dec 2011 00:05:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23865 - ace-sglr
Message-ID: <20111231000513.94A1E108C004@mx3.tudelft.nl>

Author: karltk
Date: Sat Dec 31 00:05:12 2011
New Revision: 23865
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23865&sc=1

Log:
Dead.

Deleted:
   ace-sglr/

