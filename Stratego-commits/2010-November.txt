From L.C.L.Kats at tudelft.nl  Mon Nov  1 15:08:21 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 01 Nov 2010 14:08:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21312 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	services stratego
Message-ID: <201011011408.oA1E8LKr003050@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Mon Nov  1 14:08:20 2010
New Revision: 21312
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21312&sc=1

Log:
Spoofax/267: "Show AST" errors for leaves

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Fri Oct 29 12:55:21 2010	(r21311)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Mon Nov  1 14:08:20 2010	(r21312)
@@ -44,6 +44,7 @@
 import org.strategoxt.imp.runtime.dynamicloading.TermReader;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.StrategoConsole;
+import org.strategoxt.imp.runtime.stratego.StrategoTermPath;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 import org.strategoxt.lang.Context;
 import org.strategoxt.stratego_aterm.aterm_escape_strings_0_0;
@@ -297,6 +298,7 @@
 	protected IStrategoTerm invokeObserver(IStrategoAstNode node) throws UndefinedStrategyException,
 			InterpreterErrorExit, InterpreterExit, InterpreterException {
 		
+		node = StrategoTermPath.getMatchingAncestor(node);
 		IStrategoTerm inputTerm = derivedFromEditor != null
 				? observer.makeATermInputTerm(node, true, derivedFromEditor.getResource()) 
 				: observer.makeInputTerm(node, true, source);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	Fri Oct 29 12:55:21 2010	(r21311)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	Mon Nov  1 14:08:20 2010	(r21312)
@@ -12,6 +12,7 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.Debug;
+import org.strategoxt.imp.runtime.stratego.StrategoTermPath;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 
 /**
@@ -38,7 +39,7 @@
 	}
 
 	public IAst getLinkTarget(Object oNode, IParseController parseController) {
-		IStrategoAstNode node = getReferencedNode(oNode);
+		IStrategoAstNode node = StrategoTermPath.getMatchingAncestor((IStrategoAstNode) oNode);
 		
 		String function = NodeMapping.getFirstAttribute(resolverFunctions, node.getConstructor(), node.getSort(), 0);
 		if (function == null) function = wildcardResolverFunction;
@@ -60,7 +61,7 @@
 	}
 
 	public String getLinkText(Object oNode) {
-		IStrategoAstNode node = getReferencedNode(oNode);
+		IStrategoAstNode node = StrategoTermPath.getMatchingAncestor((IStrategoAstNode) oNode);
 		if (node == null)
 			return null;
 		
@@ -85,11 +86,4 @@
 			observer.getLock().unlock();
 		}
 	}
-	
-	private static final IStrategoAstNode getReferencedNode(Object oNode) {
-		IStrategoAstNode result = (IStrategoAstNode) oNode;
-		while (result != null && result.getConstructor() == null)
-			result = result.getParent();
-		return result;
-	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Fri Oct 29 12:55:21 2010	(r21311)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Mon Nov  1 14:08:20 2010	(r21312)
@@ -344,4 +344,21 @@
 			return false;
 		}
 	}
+	
+	/**
+	 * Gets the node furthest up the ancestor chain that
+	 * has either the same character offsets or has only one
+	 * child with the same character offsets as the node given.
+	 */
+	public static final IStrategoAstNode getMatchingAncestor(IStrategoAstNode oNode) {
+		IStrategoAstNode result = oNode;
+		int startOffset = result.getLeftIToken().getStartOffset();
+		int endOffset = result.getRightIToken().getEndOffset();
+		while (result.getParent() != null
+				&& (result.getParent().getChildren().size() <= 1 
+						|| (result.getParent().getLeftIToken().getStartOffset() >= startOffset
+							&& result.getParent().getRightIToken().getEndOffset() <= endOffset)))
+			result = result.getParent();
+		return result;
+	}
 }

From L.C.L.Kats at tudelft.nl  Mon Nov  1 15:35:58 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 01 Nov 2010 14:35:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21313 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.sdf
	org.strategoxt.imp.editors.sdf/test
	org.strategoxt.imp.editors.spoofax
	org.strategoxt.imp.editors.spoofax/.ext...
Message-ID: <201011011435.oA1EZwlp003316@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Mon Nov  1 14:35:57 2010
New Revision: 21313
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21313&sc=1

Log:
Added experimental Stratego/SDF/ESV combination language.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/test/
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/test/example.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders/SpoofaxLang build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Folding.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Outliner.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxLangParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxLangValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/strategies/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/strategies/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/strategies/java_strategy_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/EditorService.def
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/EditorServiceMix.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/SDF.def
      - copied unchanged from r21286, spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/syntax/SDF.def
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/SDFMix.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-Attributes.def
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-AttributesMix.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Common.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.pp
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/example.spo
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/generate.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/how-not-to.txt

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml	Mon Nov  1 14:08:20 2010	(r21312)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml	Mon Nov  1 14:35:57 2010	(r21313)
@@ -50,11 +50,9 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
-            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
-            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
-            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
-            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
@@ -153,12 +151,9 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${basedir}">
+                <srcfileset dir="${syntax}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
-                <srcfileset dir="${lib}">
-                    <include name="**/*.def"/>
-                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/test/example.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/test/example.sdf	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,32 @@
+module example
+
+exports
+
+  context-free syntax
+  
+%%    "Foo" -> Foo {cons("x")}
+%%    "ar" -> Bar {bracket}
+%%   A -> BC {reject, bracket}
+    
+   %% A|B  -> D {cons("X")}
+    
+   ("Foo" "Bar" "Baz") "Z" -> D {cons(notastring)}
+  
+    Z* ->  Start
+    
+    Z+ -> Z {cons("x")}
+  
+  
+    FOO -> Start
+    
+    Bar -> Start
+    "X" -> Bar {cons("X")}
+    
+    %%[A][A-Z]* -> Bar {cons("X")}
+    
+    Start Start -> Z
+    %%X Y Z -> Bar
+  syntax
+    
+    "X" [A-Z]* -> <FOO-CF>
+    <FOO-CF> ->FOO
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.classpath	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders/SpoofaxLang build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.externalToolBuilders/SpoofaxLang build.main.xml.launch	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${project_loc}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${project_loc}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/.project	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>org.strategoxt.imp.editors.spoofax</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/SpoofaxLang build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,435 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  java.jar,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${build}/org/strategoxt/imp/editors/spoofax/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la org.strategoxt.imp.editors.spoofax.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${syntax}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-t"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
+                <path><fileset dir="${basedir}" includes="*.astr"/></path>
+            </pathconvert>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <fileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </fileset>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${src-gen}/trans/Main.java"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="SpoofaxLang" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="SpoofaxLang"/>
+        <property name="metasdfmodule" value="Stratego-SpoofaxLang"/>
+        <property name="esvmodule" value="SpoofaxLang"/>
+        <property name="strmodule" value="spoofaxlang"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value="
+        	              -Idef &quot;${basedir}/lib/Stratego-Attributes.def&quot;
+                        -Idef &quot;${basedir}/lib/SDF.def&quot;
+                        -Idef &quot;${basedir}/lib/EditorService.def&quot;"/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.properties	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,22 @@
+
+module SpoofaxLang-Builders
+
+imports SpoofaxLang-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                                               
+  provider                  : include/spoofaxlang.ctree                                                                        
+  provider                  : include/spoofaxlang-java.jar                                                                     
+                                                                                                                               
+  observer                  : editor-analyze                                                                                   
+                                                                                                                               
+  builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
+  builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+                                                                                                                               
+  // on save: generate-java                                                                                                    
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Colorer.esv	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,9 @@
+module SpoofaxLang-Colorer
+
+imports SpoofaxLang-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Completions.esv	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,28 @@
+module SpoofaxLang-Completions
+
+imports SpoofaxLang-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                                                 
+  // Syntax completion:                                          
+                                                                 
+  completion template : Start =      "module " <m> (blank)       
+                                                                 
+  completion template : Definition = "entity " <e> " {}" (blank) 
+                                                                 
+  completion template : Property =   <x> " : " <T> (blank)       
+                                                                 
+
+completions
+  // Semantic (identifier) completion:   
+                                         
+  completion proposer                  : editor-complete
+                                         
+  completion trigger                   : ":"
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Folding.esv	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,9 @@
+module SpoofaxLang-Folding
+
+imports SpoofaxLang-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Outliner.esv	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,9 @@
+module SpoofaxLang-Outliner
+
+imports SpoofaxLang-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-References.esv	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,15 @@
+module SpoofaxLang-References
+
+imports SpoofaxLang-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  hover _     : editor-hover
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Syntax.esv	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,9 @@
+module SpoofaxLang-Syntax
+
+imports SpoofaxLang-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang.main.esv	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,16 @@
+module SpoofaxLang.main
+
+imports SpoofaxLang-Builders SpoofaxLang-Colorer SpoofaxLang-Completions SpoofaxLang-Folding SpoofaxLang-Outliner SpoofaxLang-References SpoofaxLang-Syntax
+
+language General properties
+                  
+  name          : SpoofaxLang
+  id            : org.strategoxt.imp.editors.spoofax
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the SpoofaxLang language"
+  url           : http://strategoxt.org
+                  
+  extensions    : spo
+  table         : include/SpoofaxLang.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/Activator.java	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,44 @@
+package org.strategoxt.imp.editors.spoofax;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "SpoofaxLang";
+
+  public static final String kLanguageName = "SpoofaxLang";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxLangParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxLangParseController.java	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,89 @@
+package org.strategoxt.imp.editors.spoofax;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class SpoofaxLangParseController extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("SpoofaxLang");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = SpoofaxLangParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = SpoofaxLangParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(SpoofaxLangParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return SpoofaxLangParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxLangValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxLangValidator.java	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,12 @@
+package org.strategoxt.imp.editors.spoofax;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class SpoofaxLangValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return SpoofaxLangParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/strategies/InteropRegisterer.java	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,14 @@
+package org.strategoxt.imp.editors.spoofax.strategies;
+
+       import org.strategoxt.lang.JavaInteropRegisterer;
+       import org.strategoxt.lang.Strategy;
+
+       /**
+        * Helper class for {@link java_strategy_0_0}.
+        */
+       public class InteropRegisterer extends JavaInteropRegisterer {
+
+         public InteropRegisterer() {
+           super(new Strategy[] { java_strategy_0_0.instance });
+         }
+       }

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/strategies/Main.java	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,11 @@
+package org.strategoxt.imp.editors.spoofax.strategies;
+
+       import org.strategoxt.lang.Context;
+       
+       public class Main {
+         
+         public static void init(Context context) {
+           // Called when the editor is being initialized
+         }
+       
+       }

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/strategies/java_strategy_0_0.java	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,32 @@
+package org.strategoxt.imp.editors.spoofax.strategies;
+
+       import org.spoofax.interpreter.terms.IStrategoTerm;
+       import org.spoofax.interpreter.terms.ITermFactory;
+       import org.strategoxt.lang.Context;
+       import org.strategoxt.lang.Strategy;
+       
+       /**
+        * Example Java strategy implementation.
+        *
+        * This strategy can be used by editor services and can be called
+        * in Stratego modules by declaring it as an external strategy
+        * as follows:
+        *
+        * <code>
+        *  external java-strategy(|)
+        * </code>
+        *
+        * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+        */
+       public class java_strategy_0_0 extends Strategy {
+         
+         public static java_strategy_0_0 instance = new java_strategy_0_0();
+       
+         @Override
+         public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+           context.getIOAgent().printError("Input for java-strategy: " + current);
+           ITermFactory factory = context.getFactory();
+           return factory.makeString("Regards from java-strategy");
+         }
+       
+       }

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/EditorService.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/EditorService.def	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,1389 @@
+definition
+module BuildersService
+
+imports
+  SemanticServices
+
+exports
+  
+  syntax
+  
+    "builders" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Builders")}
+
+    "builders" -> <ReservedName-CF>
+  
+    "analysis" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Builders"), deprecated("Use 'builders' instead")}
+
+    "analysis" -> <ReservedName-CF>
+
+  context-free syntax
+    
+    "observer" ":" StrategoCall                           -> SemanticRule {cons("SemanticObserver")}
+    "builder"  ":" String "=" StrategoCall BuilderOption* -> SemanticRule {cons("Builder")}
+    "builder" "caption" ":" PropertyValue                 -> SemanticRule {cons("BuilderCaption")}
+    
+    "(openeditor)" -> BuilderOption {cons("OpenEditor")}
+    "(realtime)"   -> BuilderOption {cons("RealTime")}
+    "(persistent)" -> BuilderOption {cons("Persistent")}
+    "(meta)"       -> BuilderOption {cons("Meta")}
+    "(cursor)"     -> BuilderOption {cons("Cursor")}
+    "(source)"     -> BuilderOption {cons("Source")}
+
+module CompletionsService
+
+imports
+  SemanticServices
+
+exports
+
+  sorts
+    CompletionPart CompletionAnno
+
+  syntax
+  
+    "completions" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Completions")}
+
+    "completions" -> <ReservedName-CF>
+
+  context-free syntax
+
+    "completion" "proposer" ":" StrategoCall -> SemanticRule {cons("CompletionProposer")}
+
+    "completion" "lexical" ":" PropertyValue -> SemanticRule {cons("IdentifierLexical"), deprecated("Use 'identifier lexical' instead")}
+
+    "identifier" "lexical" ":" PropertyValue -> SemanticRule {cons("IdentifierLexical")}
+
+    "completion" "keyword" ":" PropertyValue CompletionAnno -> SemanticRule {cons("CompletionKeyword")}
+    
+    "completion" "template" ":" CompletionPart CompletionPart* CompletionAnno -> SemanticRule {cons("CompletionTemplate")}
+    
+    %% Deprecated: conflicts with content completion
+    "completion" "template" ":" Id CompletionPart+ CompletionAnno -> SemanticRule {cons("CompletionTemplate"), avoid, deprecated("Add quotes to the starting literal")}
+    
+    "completion" "template" ":" Sort "=" CompletionPart CompletionPart* CompletionAnno -> SemanticRule {cons("CompletionTemplateWithSort")}
+    
+    %% Used as content completion triggers
+    "completion" "template" ":" PropertyValue CompletionPart* CompletionAnno -> SemanticRule {cons("CompletionTemplate"), recover, avoid}
+    "completion" "template" ":" Sort "=" PropertyValue CompletionPart* CompletionAnno -> SemanticRule {cons("CompletionTemplateWithSort"), recover, avoid}
+
+    "completion" "trigger" ":" PropertyValue CompletionAnno -> SemanticRule {cons("CompletionTrigger")}
+  
+  context-free syntax
+  
+    "completions" -> StrategoCall {reject}
+    "completion"  -> StrategoCall {reject}
+    "identifier"  -> StrategoCall {reject}
+    "observer"    -> StrategoCall {reject}
+    "builder"     -> StrategoCall {reject}
+    "occurrence"  -> StrategoCall {reject}
+    ReservedName  -> StrategoCall {reject}
+    
+    String      -> CompletionPart
+    Placeholder -> CompletionPart {cons("Placeholder")}
+
+                 -> CompletionAnno {cons("None")}
+    "(disabled)" -> CompletionAnno {cons("Disable")}
+    "(disable)"  -> CompletionAnno {cons("Disable"), deprecated("Use (disabled) instead")}
+    "(blank)"    -> CompletionAnno {cons("Blank")}
+    "(blank)"    -> PropertyValue {reject}
+    "(disable)"  -> PropertyValue {reject}
+    "completion" -> PropertyValue {reject}
+    "template"   -> PropertyValue {reject}
+    "trigger"    -> PropertyValue {reject}
+    "identifier" -> PropertyValue {reject}
+
+  lexical syntax
+    
+    "<" PlaceholderChar* ">" -> Placeholder
+    ~[\>\n]                  -> PlaceholderChar
+    
+
+
+module ReferencesService
+
+imports
+  SemanticServices
+
+exports
+
+  syntax
+  
+    "references" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("References")}
+
+    "references" -> <ReservedName-CF>
+
+  context-free syntax
+  
+    "reference"  SemanticNode ":" StrategoCall StrategoCall -> SemanticRule {cons("ReferenceHoverRule"), deprecated}
+
+    "reference"  SemanticNode ":" StrategoCall -> SemanticRule {cons("ReferenceRule")}
+
+    "hover"      SemanticNode ":" StrategoCall -> SemanticRule {cons("HoverRule")}
+  
+    "occurrence" SemanticNode ":" StrategoCall -> SemanticRule {cons("OccurrenceRule")}
+  
+  context-free syntax
+  
+    "references" -> StrategoCall {reject}
+    "reference"  -> StrategoCall {reject}
+    "hover"      -> StrategoCall {reject}
+
+module ColorerService
+
+imports
+  Common
+
+exports
+
+  sorts
+  
+    ColorRule Font Color ColorNode MaybeColor NoColor
+    TokenKindName AttributeId Attribute
+
+  syntax
+  
+    "colorer" <SectionName-LEX> <LAYOUT?-CF> <ColorRule*-CF> -> <Section-CF> {cons("Colorer")}
+    
+    "colorer" -> <ReservedName-CF>
+
+  context-free syntax
+  
+    "environment" ColorNode ":" Attribute -> ColorRule {cons("ColorRuleAll")} %% One rule to rule them all
+                  ColorNode ":" Attribute -> ColorRule {cons("ColorRule")}
+    
+    "environment" ColorNode ":" String "=" Attribute -> ColorRule {cons("ColorRuleAllNamed")}
+                  ColorNode ":" String "=" Attribute -> ColorRule {cons("ColorRuleNamed")}
+
+    Color   MaybeColor Font -> Attribute {cons("Attribute")}
+    AttributeId             -> Attribute {cons("AttributeRef")}
+    
+    Node          -> ColorNode
+    TokenKindName -> ColorNode {cons("Token"), prefer}
+    "token" Id    -> ColorNode {cons("Literal")}
+    
+    "identifier" -> TokenKindName {cons("TK_IDENTIFIER")}
+    "number"     -> TokenKindName {cons("TK_NUMBER")}
+    "layout"     -> TokenKindName {cons("TK_LAYOUT")}
+    "string"     -> TokenKindName {cons("TK_STRING")}
+    "keyword"    -> TokenKindName {cons("TK_KEYWORD")}
+    "operator"   -> TokenKindName {cons("TK_OPERATOR")}
+    "var"        -> TokenKindName {cons("TK_VAR")}
+    "error"      -> TokenKindName {cons("TK_ERROR")}
+    "unknown"    -> TokenKindName {cons("TK_UNKNOWN")}
+    
+                    -> Font {cons("NORMAL")}
+    "bold"          -> Font {cons("BOLD")}
+    "italic"        -> Font {cons("ITALIC")}
+    "bold" "italic" -> Font {cons("BOLD_ITALIC")}
+    "italic" "bold" -> Font {cons("BOLD_ITALIC")}
+
+    %% TODO: Default "font" attribute? (would need disambiguation and merging support)
+    %%
+    %% "_" -> Font {cons("NORMAL")}
+    
+    "_"         -> Color {cons("ColorDefault")}
+    Int Int Int -> Color {cons("ColorRGB")}
+                -> NoColor {cons("NoColor")}
+    Color       -> MaybeColor
+    NoColor     -> MaybeColor
+
+    AttributeId "=" Attribute -> ColorRule {cons("ColorDef")}
+    
+    Id             -> AttributeId          %% Standard color name (e.g., 'red')
+    String         -> AttributeId          %% Descriptive color name (could be shown in IDE)
+    "_"            -> AttributeId {reject}
+    Font           -> AttributeId {reject}
+    "environment"  -> AttributeId {reject}
+
+module Stratego-Sugar-Overlays
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Terms
+
+exports
+  sorts Overlay
+  context-free syntax
+    Id 			 "=" Term 	-> Overlay {cons("OverlayNoArgs")}
+    Id "(" {Id ","}* ")" "=" Term 	-> Overlay {cons("Overlay")}
+
+module Stratego-Sugar-DynamicRules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+
+exports
+ 
+  sorts ScopeLabels
+  context-free syntax
+
+    "{|" ScopeLabels ":" Strategy "|}" -> Strategy {cons("DynRuleScope")}
+
+    {DynRuleScopeId ","}*   -> ScopeLabels
+    "~" Term		    -> ScopeLabels {cons("ScopeLabels")}
+
+  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
+  context-free syntax
+
+    "rules" "(" DynRuleDef* ")" -> Strategy {cons("GenDynRules")}
+
+    Id "+" Term                 -> DynRuleDef {cons("AddScopeLabel")} 
+    DynRuleId ":-"  Term        -> DynRuleDef {cons("UndefineDynRule")}
+    DynRuleId ":"   Rule        -> DynRuleDef {cons("SetDynRule")}
+    DynRuleId ":+"  Rule        -> DynRuleDef {cons("AddDynRule")}
+    DynRuleId ":"   Term        -> DynRuleDef {cons("SetDynRuleMatch")}
+
+    DynRuleId ":="  Term        -> DynRuleDef {cons("DynRuleAssign")}
+    DynRuleId ":+="  Term       -> DynRuleDef {cons("DynRuleAssignAdd")}
+
+    DynRuleId ":"   Rule "depends" "on" Term -> DynRuleDef {cons("SetDynRuleDepends")}
+
+    RuleDec "." Term            -> DynRuleId {cons("LabeledDynRuleId")}
+    RuleDec "+" Term            -> DynRuleId {cons("AddLabelDynRuleId")}
+    RuleDec                     -> DynRuleId {cons("DynRuleId")}
+
+    Id "." Term                 -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
+    Id                          -> DynRuleScopeId {cons("DynRuleScopeId")}
+
+  context-free syntax
+
+    Id                          -> RuleDec {cons("RDecNoArgs")}
+    Id "(" {Typedid ","}* ")"   -> RuleDec {cons("RDec")}
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"   -> RuleDec {cons("RDecT")}
+
+  sorts RuleNames
+  context-free syntax
+    {Id ","}*				  -> RuleNames
+    "~" Term				  -> RuleNames {cons("RuleNames")}
+
+    "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+
+  syntax
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+
+  context-free syntax
+    Strategy "/" RuleNames"\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+    Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+
+    Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+
+  priorities
+    <StrategyAngle-CF> <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("BA")}
+  > {
+
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    }
+  > <Strategy-CF> <LAYOUT?-CF> "=>" <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("AM")}
+
+  context-free priorities
+    StrategyAngle Term 		          -> Strategy {cons("BA")}
+  > "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+  > Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+  > Strategy "/" RuleNames "\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+  > Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+  > Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+
+module Stratego-Sugar-Rules
+imports Stratego-Sugar-Strategies
+exports
+
+  sorts RuleDef
+  context-free syntax
+    Id ":" Rule 				-> RuleDef {cons("RDefNoArgs")}
+    
+    Anno+ RuleDef               -> Def {cons("AnnoDef")}
+
+    Id "(" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDef")}
+
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDefT")}
+
+  sorts Rule RuleCond
+  context-free syntax
+    Term "->" Term           	    -> Rule {cons("RuleNoCond")} %% backward comp.
+    Term "->" Term "where" Strategy -> Rule {cons("Rule")}       %% backward comp.
+    Term "->" Term RuleCond+	    -> Rule {cons("Rule"), avoid}
+
+    "where" Strategy -> RuleCond {cons("WhereClause")}
+    "with"  Strategy -> RuleCond {cons("WithClause")}
+
+module Stratego-Sugar-Strategies
+imports
+  Stratego-Core-Strategies
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Constants
+  Stratego-Sugar-Signatures
+
+exports
+  context-free syntax
+    Id  		      "=" Strategy -> StrategyDef {cons("SDefNoArgs")}
+    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
+
+  context-free syntax
+    ID 				  	  -> Typedid {cons("DefaultVarDec")}
+
+  sorts Rule
+
+  sorts StrategyParen StrategyCurly StrategyAngle
+  context-free syntax
+
+    %% Abstraction
+
+    SVar "(" {Strategy ","}* ")" 	  -> Strategy {cons("Call")}
+
+    %% Match and build
+
+    "{" Strategy "}" 			  -> Strategy {cons("ScopeDefault")}
+
+     %%"<" Strategy ">" Term 		  -> Strategy {cons("BA")}
+     StrategyAngle Term 		  -> Strategy {cons("BA")}
+     "<" Strategy ">"			  -> StrategyAngle {bracket} %% {cons("AngleStrat")}
+
+    %% Combinators
+
+    Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
+
+    "rec" Id "(" Strategy ")" 		  -> Strategy {cons("Rec")}
+
+    "not"   "(" Strategy ")" 		  -> Strategy {cons("Not")}
+    "where" "(" Strategy ")" 		  -> Strategy {cons("Where")}
+    "with"  "(" Strategy ")" 		  -> Strategy {cons("With"), prefer}
+    "test"  "(" Strategy ")" 		  -> Strategy {cons("Test")}
+
+    %% Primitives
+
+    "prim" "(" String ")" 		  -> Strategy {cons("PrimNoArgs")}
+    "prim" "(" String "," {Term ","}* ")" -> Strategy {cons("Prim")}
+
+    %% Congruence operators
+
+    String 				  -> Strategy {cons("StrCong")}
+    Int 				  -> Strategy {cons("IntCong")}
+    Real 				  -> Strategy {cons("RealCong")}
+    Char 			 	  -> Strategy {cons("CharCong")}
+
+    String "(" {Strategy ","}* ")" 	  -> Strategy {cons("CongQ")}
+
+    %%"(" {Strategy ","}* ")" 		  -> Strategy {cons("TupleCong"),avoid}
+
+    Strategy StrategyCurly		  -> Strategy {cons("AnnoCong")}
+    
+    "{" Strategy "}"		  	  -> StrategyCurly {cons("StrategyCurly")}
+
+    "("  ")" 		  		  -> Strategy {cons("EmptyTupleCong")}
+   "(" Strategy  ")" 		          -> Strategy {bracket}
+    "(" Strategy "," {Strategy ","}+ ")"  -> Strategy {cons("TupleCong")}
+
+%%    Mod 	  			  -> Strategy {cons("ModCongNoArgs")}
+%%    Mod "(" {Strategy ","}* ")"	  	  -> Strategy {cons("ModCong")}
+%%    Id "^" Id				  -> Mod {cons("Mod")}
+    "[" {Strategy ","}* "]" 		  -> Strategy {cons("ListCongNoTail")}
+    "[" {Strategy ","}* "|" Strategy "]"  -> Strategy {cons("ListCong")}
+
+%%    Strategy "#" "(" StrategyInj ")" 	  -> Strategy {cons("ExplodeCong")}
+%%    Strategy "#" "(" Strategy ")" 	  -> Strategy {cons("ExplodeCong")}
+    Strategy "#" StrategyParen	  	  -> Strategy {cons("ExplodeCong")}
+
+  %% Syntactic sugar sugar
+
+  sorts SwitchCase
+  context-free syntax
+
+    SVar  		  		  -> Strategy {cons("CallNoArgs")}
+    "\\" Rule "\\" 			  -> Strategy {cons("LRule")}
+    "(" Rule ")" 			  -> Strategy {cons("SRule")}
+    Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
+    Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
+
+    "proceed" "(" {Strategy "," }+ ")" -> Strategy {cons("Proceed"), prefer}
+
+    "if" Strategy "then" Strategy 
+                  "else" Strategy "end"   -> Strategy {cons("CondChoice")}
+    "if" Strategy "then" Strategy "end"   -> Strategy {cons("IfThen")}
+
+    "switch" Strategy SwitchCase* "end"   -> Strategy {cons("SwitchChoiceNoOtherwise")}
+    "switch" Strategy SwitchCase*
+         "otherwise" ":" Strategy "end"   -> Strategy {cons("SwitchChoice")}
+
+    "case" Strategy ":" Strategy          -> SwitchCase {cons("SwitchCase")}
+
+    Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+
+    Term ":=" Term			  -> Strategy {cons("Assign")}
+
+  %% Priorities
+
+  context-free priorities
+    { Strategy StrategyCurly		  -> Strategy
+      Strategy "#" StrategyParen          -> Strategy
+    }
+  > { "!" Term 				  -> Strategy
+      "?" Term 				  -> Strategy
+    }
+  > StrategyAngle Term 		          -> Strategy
+  > Strategy "=>" Term 		  	  -> Strategy
+  > Strategy ";" Strategy 		  -> Strategy
+  > {right: 
+     Strategy "+" Strategy 		  -> Strategy
+     Strategy "<+" Strategy 		  -> Strategy
+     Strategy "+>" Strategy 		  -> Strategy
+     
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy
+    }
+
+  context-free priorities
+    Strategy 				  -> StrategyMid
+  > Strategy "+" Strategy 		  -> Strategy
+
+  context-free priorities
+    { Strategy StrategyCurly      -> Strategy
+      Strategy "#" StrategyParen  -> Strategy
+    }
+    .> Term ":=" Term -> Strategy
+
+
+module Stratego-Sugar-Terms
+imports
+  Stratego-Core-Terms
+  Stratego-Sugar-Strategies
+
+exports
+  sorts LID
+  context-free syntax
+    LId 			-> LID  {cons("ListVar")}
+    LID				-> Var  {cons("Var")}
+    LID				-> ID
+
+  context-free syntax
+    "_" PreTerm 		 -> PreTerm {cons("BuildDefaultPT")}
+    "_" Term 			 -> Term {cons("BuildDefault"),prefer}
+
+    Char 			 -> PreTerm {cons("Char")}
+
+    PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+    PreTerm                      -> Term {cons("NoAnnoList")}
+
+    "<" Strategy ">" Term 	 -> PreTerm {cons("App")}
+    "<" Strategy ">" Term 	 -> Term {cons("App"),prefer}
+
+    StrategyAngle		 -> PreTerm {cons("RootApp")}
+    StrategyAngle		 -> Term {cons("RootApp"),prefer}
+
+    "(" {Term ","}* ")" 	 -> PreTerm {cons("Tuple")}
+    "[" {Term ","}* "]" 	 -> PreTerm {cons("List")}
+    "[" {Term ","}* "|" Term "]" -> PreTerm {cons("ListTail")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Sugar-Signatures
+imports
+  Stratego-Core-Signatures
+  Stratego-Sugar-Constants
+
+exports
+
+  sorts Sort
+  context-free syntax
+    "[" {Sort ","}* "]"		 -> Sort {cons("SortList")}
+    "[" {Sort ","}* "|" Sort "]" -> Sort {cons("SortListTl")}
+    "(" {Sort ","}* ")"		 -> Sort {cons("SortTuple")}
+
+  sorts Kind
+  context-free syntax
+    "*" 			-> Kind {cons("Star")}
+    "**" 			-> Kind {cons("StarStar")}
+
+module Stratego-Core-Signatures
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+exports
+  sorts Sdecl
+  context-free syntax
+    "sorts" Sort* 		-> Sdecl {cons("Sorts")}
+    "constructors" Opdecl* 	-> Sdecl {cons("Constructors")}
+
+  sorts Sort
+  context-free syntax
+    LCID 			 -> Sort {cons("SortVar")}
+    UCID 			 -> Sort {cons("SortNoArgs")}
+    Id "(" {Sort ","}* ")" 	 -> Sort {cons("Sort")}
+
+  sorts Opdecl
+  context-free syntax
+    Id     ":" Type 		-> Opdecl {cons("OpDecl")}
+    String ":" Type 		-> Opdecl {cons("OpDeclQ")}
+           ":" Type 		-> Opdecl {cons("OpDeclInj")}
+
+  context-free syntax
+    "external" Id     ":" Type 	-> Opdecl {cons("ExtOpDecl")}
+    "external" String ":" Type 	-> Opdecl {cons("ExtOpDeclQ")}
+    "external"        ":" Type 	-> Opdecl {cons("ExtOpDeclInj")}
+
+  sorts Type ArgType ConstType FunType RetType
+  context-free syntax
+    Sort	                -> ConstType {cons("ConstType")}
+    {ArgType "*"}+ "->" RetType -> FunType {cons("FunType")}
+    "(" Type ")"                -> ArgType {bracket}
+    ConstType			-> ArgType
+    Type	                -> RetType
+    FunType			-> RetType {reject}
+
+    FunType			-> Type
+    ConstType			-> Type
+
+  %%%
+   %% Restriction is required for the Sort* in Sdecl: List(a) is
+   %% ambiguous.
+   %%%
+  context-free restrictions
+    Sort -/- [\(]
+
+module Stratego-Core-Terms
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+
+exports
+  sorts ID Var Wld
+  context-free syntax
+    Id 				-> Var  {cons("Var")}
+    Id				-> ID
+    %% ":" Var                  -> Var  {cons("SeqVar")}
+
+  sorts Term PreTerm
+  context-free syntax
+    Var 			 -> PreTerm 
+    Var 			 -> Term {prefer}
+
+    "_" 			 -> Wld {cons("Wld")}
+    Wld 			 -> PreTerm
+    Wld 			 -> Term {prefer}
+
+    Int 			 -> PreTerm {cons("Int")}
+    Real 			 -> PreTerm {cons("Real")}
+    String 			 -> PreTerm {cons("Str")}
+
+    Id "(" {Term ","}* ")" 	 -> PreTerm {cons("Op")}
+    String "(" {Term ","}* ")" 	 -> PreTerm {cons("OpQ")}
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+
+    PreTerm "{^" PreTerm "}"	 -> Term {cons("Anno")}
+
+    Var "@" Term 		 -> Term {cons("As"),prefer}
+    Var "@" PreTerm 		 -> PreTerm {cons("As")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Core-Strategies
+imports
+  Stratego-Core-Terms
+  Stratego-Core-Constants
+  Stratego-Core-Signatures
+
+exports
+  sorts Def
+  context-free syntax
+    StrategyDef					 -> Def 
+    Id						 -> SVar {cons("SVar")}
+    "let" Def* "in" Strategy "end"		 -> Strategy {cons("Let")}
+    SVar "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallT")}
+
+    "call" "(" Term "|" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallDynamic")}
+
+
+  sorts StrategyDef
+  context-free syntax
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDefT")}
+
+    Anno+ StrategyDef -> Def {cons("AnnoDef")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("ExtSDefInl")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
+
+    "external"
+    EmptyId "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
+
+
+  sorts EmptyId
+  lexical syntax
+  
+    -> EmptyId
+
+  sorts Anno
+  context-free syntax
+    "extend"      -> Anno {cons("Extend")}
+    "override"    -> Anno {cons("Override")}
+    "internal"    -> Anno {cons("Internal")}
+%%  "sealed"      -> Anno {cons("Sealed")}
+%%  "extensible"  -> Anno {cons("Extensible")}
+%%  "overridable" -> Anno {cons("Overridable")}
+
+  lexical syntax
+    
+    "extend"      -> Keyword
+    "override"    -> Keyword
+    "internal"    -> Keyword
+    "sealed"      -> Keyword
+    "extensible"  -> Keyword
+    "overridable" -> Keyword
+
+  lexical restrictions
+  
+    "extend"
+    "override"
+    "internal"
+    "sealed"
+    "extensible"
+    "overridable" -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Typedid
+  context-free syntax
+    ID ":" Type 			  -> Typedid {cons("VarDec")}
+
+
+  sorts Strategy SVar StrategyParen StrategyMid 
+  context-free syntax
+    "(" Strategy ")"			  -> StrategyParen {cons("ParenStrat")}
+
+    "fail" 				  -> Strategy {cons("Fail")}
+    "id" 				  -> Strategy {cons("Id")}
+
+    "proceed" "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("ProceedT"), prefer}
+    "proceed"                                         -> Strategy {cons("ProceedNoArgs"), prefer}
+
+    %% Match and build
+
+    "?" Term 				  -> Strategy {cons("Match")}
+    "!" Term 				  -> Strategy {cons("Build")}
+    "{" {ID ","}* ":" Strategy "}" 	  -> Strategy {cons("Scope")}
+
+    %% Combinators
+
+    Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+    Strategy "<" StrategyMid 
+             "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    Strategy 				  -> StrategyMid
+
+    %% Primitives
+
+    "prim" "(" String "," {Strategy ","}* "|" {Term ","}*")"  -> Strategy {cons("PrimT")}
+
+    %% Traversal
+
+    "some" "(" Strategy ")" 		  -> Strategy {cons("Some")}
+    "one" "(" Strategy ")" 		  -> Strategy {cons("One")}
+    "all" "(" Strategy ")" 		  -> Strategy {cons("All")}
+
+  %% Priorities
+
+  context-free priorities
+    { "!" Term 				  -> Strategy {cons("Build")}
+      "?" Term 				  -> Strategy {cons("Match")}
+    }
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+  > {right: 
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    }
+
+  context-free syntax
+    "import-term" "(" ModName ")" -> Strategy {cons("ImportTerm")}
+
+module Stratego-Core-Modules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Strategies
+  Stratego-Core-Signatures
+
+exports 
+  sorts Module
+  context-free syntax
+    "module" ModName Decl* 	 -> Module {cons("Module")}
+    "specification" Decl*	 -> Module {cons("Specification")}
+
+  sorts Decl 
+  context-free syntax
+    "imports" ImportModName* 	-> Decl {cons("Imports")}
+    "strategies" Def* 		-> Decl {cons("Strategies")}
+    "signature" Sdecl*  	-> Decl {cons("Signature")}
+
+  sorts ImportModName
+  context-free syntax
+    ModName              -> ImportModName {cons("Import")}
+  syntax
+    <ModName-CF> "/" "-" -> <ImportModName-CF> {cons("ImportWildcard")}
+
+module Stratego-Sugar-Modules
+imports
+  Stratego-Core-Modules
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Overlays
+  Stratego-Sugar-Rules
+
+exports 
+
+  sorts Decl Def
+  context-free syntax
+    "rules" Def* 		-> Decl {cons("Rules")}
+    "overlays" Overlay* 	-> Decl {cons("Overlays")}
+
+    RuleDef 			-> Def 
+
+
+module Stratego-Sugar-StringQuotations
+exports
+
+  sorts
+    StringQuotation
+    StringQuotedPart1 StringQuotedChars1 DollarOpen1 DollarClose1 QuotedBracket1 Dollar1
+    StringQuotedPart2 StringQuotedChars2 DollarOpen2 DollarClose2 QuotedBracket2 Dollar2
+    StringQuotedPart3 StringQuotedChars3 DollarOpen3 DollarClose3 QuotedBracket3 Dollar3
+    StringQuotedPart4 StringQuotedChars4 DollarOpen4 DollarClose4 QuotedBracket4  Dollar4
+    Padding
+
+  context-free syntax
+
+    StringQuotation -> PreTerm
+
+  syntax
+
+    StringQuotation -> <PreTerm-CF>
+
+    "$" "[" Padding StringQuotedPart1*               "]"    -> StringQuotation {cons("StringQuotation1") }
+     Padding "[" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "]"    -> StringQuotedPart1 {cons("StringEscape1")}
+    <StringQuotedChars1-LEX>                                -> StringQuotedPart1 {cons("QStr")}
+    <Dollar1-LEX>                                           -> StringQuotedPart1 {cons("QDollar")}
+    "$" <QuotedBracket1-LEX> "$"                            -> StringQuotedPart1 {cons("QBr")}
+    ~[\[\]\$]+                                              -> <StringQuotedChars1-LEX>
+    [\[\]]                                                  -> <QuotedBracket1-LEX>
+    "$"                                                     -> <Dollar1-LEX>
+
+    "$" "{" Padding StringQuotedPart2*               "}"    -> StringQuotation {cons("StringQuotation2") }
+     Padding "{" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "}"    -> StringQuotedPart2 {cons("StringEscape2")}
+    <StringQuotedChars2-LEX>                                -> StringQuotedPart2 {cons("QStr")}
+    <Dollar2-LEX>                                           -> StringQuotedPart2 {cons("QDollar")}
+    "$" <QuotedBracket2-LEX> "$"                            -> StringQuotedPart2 {cons("QBr")}
+    ~[\{\}\$]+                                              -> <StringQuotedChars2-LEX>
+    [\{\}]                                                  -> <QuotedBracket2-LEX>
+    "$"                                                     -> <Dollar2-LEX>
+
+    "$" "(" Padding StringQuotedPart3*              ")"     -> StringQuotation {cons("StringQuotation3") }
+    Padding "(" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ")"     -> StringQuotedPart3 {cons("StringEscape3")}
+    <StringQuotedChars3-LEX>                                -> StringQuotedPart3 {cons("QStr")}
+    <Dollar3-LEX>                                           -> StringQuotedPart3 {cons("QDollar")}
+    "$" <QuotedBracket3-LEX> "$"                            -> StringQuotedPart3 {cons("QBr")}
+    ~[\(\)\$]+                                              -> <StringQuotedChars3-LEX>
+    [\(\)]                                                  -> <QuotedBracket3-LEX>
+    "$"                                                     -> <Dollar3-LEX>
+
+    "$" "<" Padding StringQuotedPart4*               ">"    -> StringQuotation {cons("StringQuotation4") }
+    Padding "<"  <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ">"    -> StringQuotedPart4 {cons("StringEscape4")}
+    <StringQuotedChars4-LEX>                                -> StringQuotedPart4 {cons("QStr")}
+    <Dollar4-LEX>                                           -> StringQuotedPart4 {cons("QDollar")}
+    "$" <QuotedBracket4-LEX> "$"                            -> StringQuotedPart4 {cons("QBr")}
+    ~[\<\>\$]+                                              -> <StringQuotedChars4-LEX>
+    [\<\>]                                                  -> <QuotedBracket4-LEX>
+    "$"                                                     -> <Dollar4-LEX>
+   
+    %% Padding is a dummy lexical that will contain the indentation prefix of every quotation
+    <Padding-LEX>                                           -> Padding
+                                                            -> <Padding-LEX> {indentpadding}
+
+  lexical restrictions
+
+    StringQuotedChars1 -/- ~[\[\]\$]   
+    StringQuotedChars2 -/- ~[\{\}\$]    
+    StringQuotedChars3 -/- ~[\(\)\$]    
+    StringQuotedChars4 -/- ~[\<\>\$]
+    Dollar1            -/- [\[\]] . [\$]
+    Dollar2            -/- [\{\}] . [\$]
+    Dollar3            -/- [\(\)] . [\$]
+    Dollar4            -/- [\<\>] . [\$]
+
+module Stratego-Core-Constants
+exports
+  sorts Int Real String StrChar
+  lexical syntax
+    [\-]? [0-9]+ 		-> Int
+    [\-]? [0-9]+ [\.] [0-9]+ 	-> Real
+    "\"" StrChar* "\"" 		-> String
+    ~[\"\\] 			-> StrChar
+    [\\] [\"tnr\\] 		-> StrChar
+
+
+module Stratego-Sugar-Constants
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+  Stratego-Sugar-StringQuotations
+exports
+  sorts Char CharChar
+  lexical syntax
+    "'" CharChar "'"		-> Char
+    ~[\']			-> CharChar
+    [\\] [\'ntr\ ]		-> CharChar
+    Char		 	-> Id {reject}
+
+module Stratego-Core-Identifiers
+exports
+  sorts ModName ModNamePart
+  lexical syntax
+    {ModNamePart "/"}+ -> ModName
+    [a-zA-Z\.\_] [a-zA-Z0-9\'\.\-\_]* -> ModNamePart
+  lexical restrictions
+    ModName -/- [a-zA-Z0-9\'\.\-\_]
+  lexical syntax
+    "imports" 		-> ModName {reject}
+    "overlays" 		-> ModName {reject}
+    "rules" 		-> ModName {reject}
+    "signature" 	-> ModName {reject}
+    "strategies" 	-> ModName {reject}
+
+  sorts Id LId LCID UCID Wld
+  lexical syntax
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]*     -> Id
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]* "*" -> LId
+    [\'] [a-z]+                       -> Id
+
+    [a-z] [a-zA-Z0-9\'\-\_]*  -> LCID
+    [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
+
+  lexical restrictions
+    Id   -/- [a-zA-Z0-9\'\-\_\*]
+    LId  -/- [a-zA-Z0-9\'\-\_]
+    LCID -/- [a-zA-Z0-9\'\-\_]
+    UCID -/- [a-zA-Z0-9\'\-\_]
+
+  lexical syntax
+    "_"     -> Id {reject}
+    "'"     -> Id {reject}
+
+    Keyword -> Id   {reject}
+    Keyword -> LId  {reject}
+    Keyword -> LCID {reject}
+    Keyword -> UCID {reject}
+
+  lexical restrictions
+    "all"
+    "case" %% not reserved kw
+    "constructors"
+    "else" %% not reserved kw
+    "end" %% not reserved kw
+    "external" %% not reserved kw
+    "fail"
+    "id"
+    "if" %% not reserved kw
+    "in"
+    "imports" %% not reserved kw
+    "let"
+    "module"
+    "not"
+    "one"
+    "overlays"
+    "otherwise" %% not reserved kw
+    "prim"
+    "rec" %% not reserved kw
+    "rules"
+    "script"
+    "signature"
+    "some"
+    "sorts"
+    "strategies"
+    "stratego"
+    "switch" %% not reserved kw
+    "test"
+    "then" %% not reserved kw
+    "where"
+    "import-term"
+      -/- [a-zA-Z0-9\'\-\_]
+  
+  context-free restrictions
+    Wld -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Keyword
+  lexical syntax
+    "all"               -> Keyword
+    "constructors" 	-> Keyword
+    "fail" 		-> Keyword
+    "id" 		-> Keyword
+    "in" 		-> Keyword
+    "let" 		-> Keyword
+    "module" 		-> Keyword
+    "not" 		-> Keyword
+    "one" 		-> Keyword
+    "overlays" 		-> Keyword
+    "prim" 		-> Keyword
+    "rules" 		-> Keyword
+    "script" 		-> Keyword
+    "signature" 	-> Keyword
+    "some" 		-> Keyword
+    "sorts" 		-> Keyword
+    "strategies" 	-> Keyword
+    "stratego" 		-> Keyword
+    "test" 		-> Keyword
+    "where" 		-> Keyword
+    "import-term"	-> Keyword
+
+
+module Stratego-Core-Layout
+exports
+  sorts Ws ShortCom LongCom CommChar Asterisk Eof 
+  lexical syntax
+    [\t\ \n\r]			-> Ws
+
+    "//" ~[\n]* ([\n] | Eof)	-> ShortCom
+    "/*" CommChar* "*/"	-> LongCom
+				-> Eof  
+
+    ~[\*]     -> CommChar
+
+    "*"       -> Asterisk
+    Asterisk  -> CommChar
+
+  lexical restrictions
+    Asterisk -/- [\/]
+    Eof      -/- ~[]
+
+  lexical syntax
+    ShortCom 	-> LAYOUT
+    LongCom 	-> LAYOUT
+    Ws 		-> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\*]
+    LAYOUT? -/- [\/].[\/]
+
+module Stratego-Sugar-Layout
+imports Stratego-Core-Layout
+%%exports
+%%  sorts VeryLongCom Eof VLCchar Backslash
+%%  lexical syntax
+%%    "\\end{code}" VLCchar* "\\begin{code}" -> VeryLongCom
+%%    "\\begin{code}" 			   -> VeryLongCom
+%%    "\\end{code}" VLCchar* Eof 		   -> VeryLongCom
+%%    "\\literate" VLCchar* "\\begin{code}"  -> VeryLongCom
+%%    ~[\\] 				   -> VLCchar
+%%    Backslash 				   -> VLCchar
+%%    [\\] 				   -> Backslash
+
+%%  lexical restrictions
+%%    Backslash -/- [b].[e].[g].[i].[n].[\{].[c].[o].[d].[e].[\}]
+%%    Eof -/- ~[]
+
+%%  lexical syntax
+%%    VeryLongCom -> LAYOUT
+
+
+
+module Stratego-Sugar
+imports
+  Stratego-Sugar-Layout
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Constants 
+  Stratego-Sugar-Modules
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+  Stratego-Sugar-DynamicRules
+  Stratego-Sugar-Overlays
+
+hiddens
+  context-free start-symbols Module
+
+module Stratego
+imports Stratego-Sugar
+hiddens
+  context-free start-symbols Module
+
+module StrategoMix[Ctx0]
+imports Stratego
+          [ RuleNames          => RuleNames[[Ctx0]]
+            RuleDec            => RuleDec[[Ctx0]]
+            DynRuleScopeId     => DynRuleScopeId[[Ctx0]]
+            DynRuleId          => DynRuleId[[Ctx0]]
+            DynRuleDef         => DynRuleDef[[Ctx0]]
+            ScopeLabels        => ScopeLabels[[Ctx0]]
+            RuleCond           => RuleCond[[Ctx0]]
+            Rule               => Rule[[Ctx0]]
+            RuleDef            => RuleDef[[Ctx0]]
+            Overlay            => Overlay[[Ctx0]]
+            SwitchCase         => SwitchCase[[Ctx0]]
+            StrategyCurly      => StrategyCurly[[Ctx0]]
+            StrategyAngle      => StrategyAngle[[Ctx0]]
+            Kind               => Kind[[Ctx0]]
+            LID                => LID[[Ctx0]]
+            ImportModName      => ImportModName[[Ctx0]]
+            Decl               => Decl[[Ctx0]]
+            Module             => Module[[Ctx0]]
+            StrategyParen      => StrategyParen[[Ctx0]]
+            Typedid            => Typedid[[Ctx0]]
+            Anno               => Anno[[Ctx0]]
+            EmptyId            => EmptyId[[Ctx0]]
+            StrategyDef        => StrategyDef[[Ctx0]]
+            SVar               => SVar[[Ctx0]]
+            Def                => Def[[Ctx0]]
+            Type               => Type[[Ctx0]]
+            RetType            => RetType[[Ctx0]]
+            ArgType            => ArgType[[Ctx0]]
+            FunType            => FunType[[Ctx0]]
+            ConstType          => ConstType[[Ctx0]]
+            Opdecl             => Opdecl[[Ctx0]]
+            Sort               => Sort[[Ctx0]]
+            Sdecl              => Sdecl[[Ctx0]]
+            Wld                => Wld[[Ctx0]]
+            ID                 => ID[[Ctx0]]
+            Var                => Var[[Ctx0]]
+            CharChar           => CharChar[[Ctx0]]
+            Char               => Char[[Ctx0]]
+            Padding            => Padding[[Ctx0]]
+            Dollar4            => Dollar4[[Ctx0]]
+            QuotedBracket4     => QuotedBracket4[[Ctx0]]
+            StringQuotedChars4 => StringQuotedChars4[[Ctx0]]
+            StringQuotedPart4  => StringQuotedPart4[[Ctx0]]
+            Dollar3            => Dollar3[[Ctx0]]
+            QuotedBracket3     => QuotedBracket3[[Ctx0]]
+            StringQuotedChars3 => StringQuotedChars3[[Ctx0]]
+            StringQuotedPart3  => StringQuotedPart3[[Ctx0]]
+            Dollar2            => Dollar2[[Ctx0]]
+            QuotedBracket2     => QuotedBracket2[[Ctx0]]
+            StringQuotedChars2 => StringQuotedChars2[[Ctx0]]
+            StringQuotedPart2  => StringQuotedPart2[[Ctx0]]
+            Dollar1            => Dollar1[[Ctx0]]
+            QuotedBracket1     => QuotedBracket1[[Ctx0]]
+            StringQuotedChars1 => StringQuotedChars1[[Ctx0]]
+            StringQuotedPart1  => StringQuotedPart1[[Ctx0]]
+            StringQuotation    => StringQuotation[[Ctx0]]
+            StrChar            => StrChar[[Ctx0]]
+            String             => String[[Ctx0]]
+            Real               => Real[[Ctx0]]
+            Int                => Int[[Ctx0]]
+            Keyword            => Keyword[[Ctx0]]
+            UCID               => UCID[[Ctx0]]
+            LCID               => LCID[[Ctx0]]
+            LId                => LId[[Ctx0]]
+            Id                 => Id[[Ctx0]]
+            ModNamePart        => ModNamePart[[Ctx0]]
+            ModName            => ModName[[Ctx0]]
+            PreTerm            => PreTerm[[Ctx0]]
+            Term               => Term[[Ctx0]]
+            StrategyMid        => StrategyMid[[Ctx0]]
+            Strategy           => Strategy[[Ctx0]] ]
+
+
+module OutlinerService
+
+imports
+  Common
+  StrategoMix[StrategoExpr]
+
+exports
+
+  sorts
+    OutlineRule Pattern Term PreTerm
+
+  syntax
+  
+    "outliner" <SectionName-LEX> <LAYOUT?-CF> <OutlineRule*-CF> -> <Section-CF> {cons("Outliner")}
+    
+    "outliner" -> <ReservedName-CF>
+
+  context-free syntax
+
+    Node                 -> OutlineRule {cons("OutlineRule"), prefer}
+
+module FoldingService
+
+imports
+  Common
+
+exports
+
+  sorts
+    FoldingRule FoldingAnno
+
+  syntax
+  
+    "folding" <SectionName-LEX> <LAYOUT?-CF> <FoldingRule*-CF> -> <Section-CF> {cons("Folding")}
+    
+    "folding" -> <ReservedName-CF>
+  
+  context-free syntax
+    
+    %% TODO: Reconsider "all" keyword for siblings; we already have list sorts using '*'
+    
+          Node FoldingAnno -> FoldingRule {cons("FoldRule")}
+    "all" Node FoldingAnno -> FoldingRule {cons("FoldRuleAll")}
+
+    "(disable)"  -> FoldingAnno {cons("Disable"), deprecated("Use (disabled) instead")}
+    "(disabled)" -> FoldingAnno {cons("Disable")}
+    "(folded)"   -> FoldingAnno {cons("Folded")}
+                 -> FoldingAnno {cons("None")}
+
+module SemanticServices
+
+imports
+  Common LanguageDescription
+
+exports
+
+  sorts
+    SemanticRule SemanticNode StrategoId StrategoCall OnSaveAnno
+
+  lexical syntax
+
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]* -> StrategoId
+  
+    Node -> SemanticNode
+    "_"  -> SemanticNode
+
+  lexical restrictions
+  
+    StrategoId -/- [a-zA-Z0-9\'\-\_]
+
+  context-free syntax
+
+    "provider"     PropertyValue -> SemanticRule {cons("SemanticProvider"), deprecated("Use 'provider :'")}
+    "provider" ":" PropertyValue -> SemanticRule {cons("SemanticProvider")}
+
+    "on" "save" ":" StrategoCall OnSaveAnno -> SemanticRule {cons("OnSave")}
+
+             StrategoId -> StrategoCall {cons("Strategy")}
+    "id" "." StrategoId -> StrategoCall {cons("Attribute")}
+    
+                        -> OnSaveAnno {cons("None")}
+
+module LanguageDescription
+
+imports
+	Common SemanticServices
+
+exports
+  
+  sorts
+  
+    LanguageProperty PropertyValue NoContinuation PropertyValues URL
+    FenceDef BlockCommentDef IndentDef
+  
+  syntax
+  
+    "language" <SectionName-LEX> <LAYOUT?-CF> <LanguageProperty*-CF> -> <Section-CF> {cons("Language")}
+    
+    "language" -> <ReservedName-CF>
+  
+  lexical syntax
+    
+    ~[\ \t\n\r\,\:\"\=]+ -> PropertyValue {avoid}
+
+    ~[\ \t\n\r\,\/\:]+ "://" ~[\ \t\n\r]+ -> URL
+  
+  lexical restrictions
+  
+  	PropertyValue -/- ~[\ \t\n\r\,\:\"\=]
+  	URL           -/- ~[\ \t\n\r]
+  
+  context-free syntax
+  
+    { PropertyValue ","}* -> PropertyValues {cons("Values")}
+    String                -> PropertyValue
+  
+  	%% General language properties
+  
+    "name"            ":" PropertyValue  -> LanguageProperty {cons("LanguageName")}
+    "id"              ":" PropertyValue  -> LanguageProperty {cons("LanguageId")}
+    "extensions"      ":" PropertyValues -> LanguageProperty {cons("Extensions")}
+    "description"     ":" PropertyValue  -> LanguageProperty {cons("Description")}
+    "table"           ":" PropertyValue  -> LanguageProperty {cons("Table")}
+    "table" "provider" ":" StrategoCall  -> LanguageProperty {cons("TableProvider")}
+    "start" "symbols" ":" Sort*          -> LanguageProperty {cons("StartSymbols")}
+    "start" "symbols" ":" PropertyValues -> LanguageProperty {cons("StartSymbols"), avoid}
+    "url"             ":" URL            -> LanguageProperty {cons("URL")}
+    "extends"         ":" PropertyValues -> LanguageProperty {cons("Extends")}
+    "aliases"         ":" PropertyValues -> LanguageProperty {cons("Aliases")} %% deprecated
+    "unmanaged" "table" ":" Id "*"       -> LanguageProperty {cons("UnmanagedTablePrefix")}
+   
+     %% Syntax properties
+     
+     "line"  "comment" ":" PropertyValue      -> LanguageProperty {cons("LineCommentPrefix")}
+     "block" "comment" ":" BlockCommentDef    -> LanguageProperty {cons("BlockCommentDefs")}
+     "fences"          ":" FenceDef*          -> LanguageProperty {cons("FenceDefs")}
+     "indent" "after"  ":" IndentDef*         -> LanguageProperty {cons("IndentDefs")}
+     "identifier" "lexical" ":" PropertyValue -> LanguageProperty {cons("IdentifierLexical")}
+     
+     PropertyValue PropertyValue  PropertyValue -> BlockCommentDef {cons("BlockCommentDef")}
+     PropertyValue NoContinuation PropertyValue -> BlockCommentDef {cons("BlockCommentDef")}
+                                                -> NoContinuation {cons("NoContinuation")}
+     
+     PropertyValue PropertyValue -> FenceDef {cons("FenceDef")}
+     PropertyValue               -> IndentDef {cons("IndentDef")}
+     
+     %% Avoid ambiguities with fencedef pairs
+     "fences"     -> PropertyValue {reject}
+     "identifier" -> PropertyValue {reject}
+     "indent"     -> PropertyValue {reject}
+     "fences"     -> PropertyValue {reject}
+     "line"       -> PropertyValue {reject}
+     "block"      -> PropertyValue {reject}
+
+module Common
+
+exports
+
+  sorts
+    Id IdStar Int STRING CHAR BACKSLASH String Node Sort Constructor ConstructorId
+    ReservedName SectionName ModuleName Section Eof
+    Ws ShortCom LongCom CommChar
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9\'\-\_]*     -> Id
+    [a-zA-Z][a-zA-Z0-9\'\-\_]* "*" -> IdStar
+    "-"? [0-9]+                    -> Int
+    "\"" StringChar* "\""          -> STRING
+    ~[\"\n\\]                      -> StringChar
+    "\\\""                         -> StringChar
+    BACKSLASH                      -> StringChar
+    "\\"                           -> BACKSLASH
+    
+    ~[\n\r]*                       -> SectionName
+
+    [\t\ \n\r]               -> Ws
+    "//" ~[\n]* ([\n] | Eof) -> ShortCom
+    "/*" CommChar* "*/"      -> LongCom
+    ~[\*]                    -> CommChar
+    Asterisk                 -> CommChar
+    "*"                      -> Asterisk
+    Ws                       -> LAYOUT
+    ShortCom                 -> LAYOUT
+    LongCom                  -> LAYOUT
+                             -> Eof
+  
+  lexical restrictions
+  
+    Int         -/- [0-9]
+    Id          -/- [a-zA-Z0-9\'\-\_]
+    SectionName -/- ~[\n\r]
+    Asterisk    -/- [\/]
+    BACKSLASH   -/- [\"]
+    Eof         -/- ~[]
+
+  context-free restrictions
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\*]
+    LAYOUT? -/- [\/].[\/]
+
+  context-free syntax
+  
+    Id     -> Sort {cons("Sort")}
+    Id "*" -> Sort {cons("ListSort")}
+    STRING -> String {cons("String")}
+    
+    %% nice, but makes C-SGLR fail to parse create-builders-desciptor.str properly
+    %%        -> String {recover, avoid, ast("String(\"\")")}
+
+    Sort "." "_" -> Sort {bracket}
+    
+    "_" "." ConstructorId -> Constructor {cons("ConstructorOnly")}
+                       Id -> ConstructorId {cons("Constructor")}
+    
+    Sort                   -> Node
+    Constructor            -> Node
+    Sort "." ConstructorId -> Node {cons("SortAndConstructor")}
+    
+    ReservedName -> Node       {reject}
+    ReservedName -> ModuleName {reject}
+
+module EditorService
+
+imports
+  Common
+  LanguageDescription
+  FoldingService
+  OutlinerService
+  ColorerService
+  ReferencesService
+  CompletionsService
+  BuildersService
+
+hiddens
+
+  context-free start-symbols
+    Module
+
+exports
+
+  sorts
+    Module FileName ModuleName Imports Import
+
+  lexical syntax
+  
+    [a-zA-Z0-9\-\_\.]+ -> FileName
+    {FileName "/"}+    -> ModuleName
+  
+  lexical restrictions
+  
+  	FileName    -/- [a-zA-Z0-9\-\_\.]
+
+  context-free syntax
+  	
+    "module" ModuleName Imports Section* -> Module {cons("Module")}
+    "imports" Import+                    -> Imports {cons("Imports")}
+                                         -> Imports {cons("NoImports")}
+
+    ModuleName            -> Import {cons("Import")}
+    ModuleName "[" Id "]" -> Import {cons("ImportRenamed")}

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/EditorServiceMix.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/EditorServiceMix.sdf	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,126 @@
+
+module EditorServiceMix[Ctx1]
+imports 
+        EditorService
+          [ Import                             => Import[[Ctx1]]
+            Imports                            => Imports[[Ctx1]]
+            Module                             => Module[[Ctx1]]
+            FileName                           => FileName[[Ctx1]]
+            BuilderOption                      => BuilderOption[[Ctx1]]
+            CompletionAnno                     => CompletionAnno[[Ctx1]]
+            CompletionPart                     => CompletionPart[[Ctx1]]
+            PlaceholderChar                    => PlaceholderChar[[Ctx1]]
+            Placeholder                        => Placeholder[[Ctx1]]
+            AttributeId                        => AttributeId[[Ctx1]]
+            MaybeColor                         => MaybeColor[[Ctx1]]
+            NoColor                            => NoColor[[Ctx1]]
+            Color                              => Color[[Ctx1]]
+            Font                               => Font[[Ctx1]]
+            TokenKindName                      => TokenKindName[[Ctx1]]
+            ColorNode                          => ColorNode[[Ctx1]]
+            Attribute                          => Attribute[[Ctx1]]
+            ColorRule                          => ColorRule[[Ctx1]]
+            OutlineRule                        => OutlineRule[[Ctx1]]
+            RuleNames[[StrategoExpr]]          => RuleNames[[Ctx1,StrategoExpr]]
+            RuleDec[[StrategoExpr]]            => RuleDec[[Ctx1,StrategoExpr]]
+            DynRuleScopeId[[StrategoExpr]]     => DynRuleScopeId[[Ctx1,StrategoExpr]]
+            DynRuleId[[StrategoExpr]]          => DynRuleId[[Ctx1,StrategoExpr]]
+            DynRuleDef[[StrategoExpr]]         => DynRuleDef[[Ctx1,StrategoExpr]]
+            ScopeLabels[[StrategoExpr]]        => ScopeLabels[[Ctx1,StrategoExpr]]
+            RuleCond[[StrategoExpr]]           => RuleCond[[Ctx1,StrategoExpr]]
+            Rule[[StrategoExpr]]               => Rule[[Ctx1,StrategoExpr]]
+            RuleDef[[StrategoExpr]]            => RuleDef[[Ctx1,StrategoExpr]]
+            Overlay[[StrategoExpr]]            => Overlay[[Ctx1,StrategoExpr]]
+            SwitchCase[[StrategoExpr]]         => SwitchCase[[Ctx1,StrategoExpr]]
+            StrategyCurly[[StrategoExpr]]      => StrategyCurly[[Ctx1,StrategoExpr]]
+            StrategyAngle[[StrategoExpr]]      => StrategyAngle[[Ctx1,StrategoExpr]]
+            Kind[[StrategoExpr]]               => Kind[[Ctx1,StrategoExpr]]
+            LID[[StrategoExpr]]                => LID[[Ctx1,StrategoExpr]]
+            ImportModName[[StrategoExpr]]      => ImportModName[[Ctx1,StrategoExpr]]
+            Decl[[StrategoExpr]]               => Decl[[Ctx1,StrategoExpr]]
+            Module[[StrategoExpr]]             => Module[[Ctx1,StrategoExpr]]
+            StrategyParen[[StrategoExpr]]      => StrategyParen[[Ctx1,StrategoExpr]]
+            Typedid[[StrategoExpr]]            => Typedid[[Ctx1,StrategoExpr]]
+            Anno[[StrategoExpr]]               => Anno[[Ctx1,StrategoExpr]]
+            EmptyId[[StrategoExpr]]            => EmptyId[[Ctx1,StrategoExpr]]
+            StrategyDef[[StrategoExpr]]        => StrategyDef[[Ctx1,StrategoExpr]]
+            SVar[[StrategoExpr]]               => SVar[[Ctx1,StrategoExpr]]
+            Def[[StrategoExpr]]                => Def[[Ctx1,StrategoExpr]]
+            Type[[StrategoExpr]]               => Type[[Ctx1,StrategoExpr]]
+            RetType[[StrategoExpr]]            => RetType[[Ctx1,StrategoExpr]]
+            ArgType[[StrategoExpr]]            => ArgType[[Ctx1,StrategoExpr]]
+            FunType[[StrategoExpr]]            => FunType[[Ctx1,StrategoExpr]]
+            ConstType[[StrategoExpr]]          => ConstType[[Ctx1,StrategoExpr]]
+            Opdecl[[StrategoExpr]]             => Opdecl[[Ctx1,StrategoExpr]]
+            Sort[[StrategoExpr]]               => Sort[[Ctx1,StrategoExpr]]
+            Sdecl[[StrategoExpr]]              => Sdecl[[Ctx1,StrategoExpr]]
+            Wld[[StrategoExpr]]                => Wld[[Ctx1,StrategoExpr]]
+            ID[[StrategoExpr]]                 => ID[[Ctx1,StrategoExpr]]
+            Var[[StrategoExpr]]                => Var[[Ctx1,StrategoExpr]]
+            CharChar[[StrategoExpr]]           => CharChar[[Ctx1,StrategoExpr]]
+            Char[[StrategoExpr]]               => Char[[Ctx1,StrategoExpr]]
+            Padding[[StrategoExpr]]            => Padding[[Ctx1,StrategoExpr]]
+            Dollar4[[StrategoExpr]]            => Dollar4[[Ctx1,StrategoExpr]]
+            QuotedBracket4[[StrategoExpr]]     => QuotedBracket4[[Ctx1,StrategoExpr]]
+            StringQuotedChars4[[StrategoExpr]] => StringQuotedChars4[[Ctx1,StrategoExpr]]
+            StringQuotedPart4[[StrategoExpr]]  => StringQuotedPart4[[Ctx1,StrategoExpr]]
+            Dollar3[[StrategoExpr]]            => Dollar3[[Ctx1,StrategoExpr]]
+            QuotedBracket3[[StrategoExpr]]     => QuotedBracket3[[Ctx1,StrategoExpr]]
+            StringQuotedChars3[[StrategoExpr]] => StringQuotedChars3[[Ctx1,StrategoExpr]]
+            StringQuotedPart3[[StrategoExpr]]  => StringQuotedPart3[[Ctx1,StrategoExpr]]
+            Dollar2[[StrategoExpr]]            => Dollar2[[Ctx1,StrategoExpr]]
+            QuotedBracket2[[StrategoExpr]]     => QuotedBracket2[[Ctx1,StrategoExpr]]
+            StringQuotedChars2[[StrategoExpr]] => StringQuotedChars2[[Ctx1,StrategoExpr]]
+            StringQuotedPart2[[StrategoExpr]]  => StringQuotedPart2[[Ctx1,StrategoExpr]]
+            Dollar1[[StrategoExpr]]            => Dollar1[[Ctx1,StrategoExpr]]
+            QuotedBracket1[[StrategoExpr]]     => QuotedBracket1[[Ctx1,StrategoExpr]]
+            StringQuotedChars1[[StrategoExpr]] => StringQuotedChars1[[Ctx1,StrategoExpr]]
+            StringQuotedPart1[[StrategoExpr]]  => StringQuotedPart1[[Ctx1,StrategoExpr]]
+            StringQuotation[[StrategoExpr]]    => StringQuotation[[Ctx1,StrategoExpr]]
+            StrChar[[StrategoExpr]]            => StrChar[[Ctx1,StrategoExpr]]
+            String[[StrategoExpr]]             => String[[Ctx1,StrategoExpr]]
+            Real[[StrategoExpr]]               => Real[[Ctx1,StrategoExpr]]
+            Int[[StrategoExpr]]                => Int[[Ctx1,StrategoExpr]]
+            Keyword[[StrategoExpr]]            => Keyword[[Ctx1,StrategoExpr]]
+            UCID[[StrategoExpr]]               => UCID[[Ctx1,StrategoExpr]]
+            LCID[[StrategoExpr]]               => LCID[[Ctx1,StrategoExpr]]
+            LId[[StrategoExpr]]                => LId[[Ctx1,StrategoExpr]]
+            Id[[StrategoExpr]]                 => Id[[Ctx1,StrategoExpr]]
+            ModNamePart[[StrategoExpr]]        => ModNamePart[[Ctx1,StrategoExpr]]
+            ModName[[StrategoExpr]]            => ModName[[Ctx1,StrategoExpr]]
+            FoldingAnno                        => FoldingAnno[[Ctx1]]
+            FoldingRule                        => FoldingRule[[Ctx1]]
+            IndentDef                          => IndentDef[[Ctx1]]
+            FenceDef                           => FenceDef[[Ctx1]]
+            NoContinuation                     => NoContinuation[[Ctx1]]
+            BlockCommentDef                    => BlockCommentDef[[Ctx1]]
+            LanguageProperty                   => LanguageProperty[[Ctx1]]
+            PropertyValues                     => PropertyValues[[Ctx1]]
+            URL                                => URL[[Ctx1]]
+            PropertyValue                      => PropertyValue[[Ctx1]]
+            ReservedName                       => ReservedName[[Ctx1]]
+            Section                            => Section[[Ctx1]]
+            OnSaveAnno                         => OnSaveAnno[[Ctx1]]
+            StrategoCall                       => StrategoCall[[Ctx1]]
+            SemanticRule                       => SemanticRule[[Ctx1]]
+            SemanticNode                       => SemanticNode[[Ctx1]]
+            StrategoId                         => StrategoId[[Ctx1]]
+            ModuleName                         => ModuleName[[Ctx1]]
+            Node                               => Node[[Ctx1]]
+            ConstructorId                      => ConstructorId[[Ctx1]]
+            Constructor                        => Constructor[[Ctx1]]
+            String                             => String[[Ctx1]]
+            Sort                               => Sort[[Ctx1]]
+            SectionName                        => SectionName[[Ctx1]]
+            BACKSLASH                          => BACKSLASH[[Ctx1]]
+            StringChar                         => StringChar[[Ctx1]]
+            STRING                             => STRING[[Ctx1]]
+            Int                                => Int[[Ctx1]]
+            IdStar                             => IdStar[[Ctx1]]
+            Id                                 => Id[[Ctx1]]
+            Grammar                            => Grammar[[Ctx1]]
+            Strategy                           => Strategy[[Ctx1]]
+            PreTerm[[StrategoExpr]]            => PreTerm[[Ctx1,StrategoExpr]]
+            Term[[StrategoExpr]]               => Term[[Ctx1,StrategoExpr]]
+            StrategyMid[[StrategoExpr]]        => StrategyMid[[Ctx1,StrategoExpr]]
+            Strategy[[StrategoExpr]]           => Strategy[[Ctx1,StrategoExpr]] ]

Copied: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/SDF.def (from r21286, spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/syntax/SDF.def)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/SDF.def	Mon Nov  1 14:35:57 2010	(r21313, copy of r21286, spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/syntax/SDF.def)
@@ -0,0 +1,610 @@
+definition
+module languages/sdf2/syntax/Aliases
+
+imports languages/sdf2/syntax/Kernel
+
+exports
+  sorts Alias Aliases
+  context-free syntax 
+    "aliases" Aliases              -> Grammar  {cons("aliases")}
+    Symbol arrow:"->" alias:Symbol -> Alias    {cons("alias")}
+    list:Alias*                    -> Aliases
+
+
+
+module languages/sdf2/syntax/Restrictions
+
+imports languages/sdf2/syntax/CC
+
+exports
+  sorts Lookahead Lookaheads Restriction Restrictions
+
+  context-free syntax
+    CharClass                          -> Lookahead  {cons("char-class")}
+    head:CharClass "." tail:Lookaheads -> Lookahead  {cons("seq")}
+
+    Lookahead                                -> Lookaheads  {cons("single")}
+    "left":Lookaheads "|" "right":Lookaheads -> Lookaheads  {cons("alt"),right}
+    "(" Lookaheads ")"                       -> Lookaheads  {bracket}
+    "[[" list:{Lookahead ","}* "]]"          -> Lookaheads  {cons("list")}
+
+    Symbols "-/-" Lookaheads -> Restriction  {cons("follow")}
+
+    list:Restriction* -> Restrictions
+
+    "restrictions" Restrictions -> Grammar  {cons("restrictions")}
+
+    "reject" -> Attribute  {cons("reject")}
+    "prefer" -> Attribute  {cons("prefer")}
+    "avoid"  -> Attribute  {cons("avoid")}
+
+  context-free priorities    
+    CharClass "." Lookaheads    -> Lookahead >
+    Lookaheads "|" Lookaheads   -> Lookaheads
+
+
+module languages/sdf2/syntax/Labels
+
+imports languages/sdf2/syntax/Kernel 
+        basic/StrCon
+
+exports 
+  sorts Label
+
+  context-free syntax
+    StrCon -> Label {cons("quoted")}
+    IdCon  -> Label {cons("unquoted")}
+
+    Label ":" Symbol -> Symbol  {cons("label")}
+
+module languages/sdf2/syntax/Literals
+
+imports languages/sdf2/syntax/Kernel 
+imports basic/StrCon
+imports basic/IdentifierCon
+
+exports
+  sorts FunctionName SingleQuotedStrCon SingleQuotedStrChar
+  lexical syntax
+
+    "\\n"                      -> SingleQuotedStrChar {cons("newline")}
+    "\\t"                      -> SingleQuotedStrChar {cons("tab")}
+    "\\'"                      -> SingleQuotedStrChar {cons("quote")}
+    "\\\\"                     -> SingleQuotedStrChar {cons("backslash")}
+    "\\" a:[0-9]b:[0-9]c:[0-9] -> SingleQuotedStrChar {cons("decimal")}
+    ~[\0-\31\n\t\'\\]          -> SingleQuotedStrChar {cons("normal")}
+
+    [\'] chars:SingleQuotedStrChar* [\']   -> SingleQuotedStrCon  {cons("default")}
+
+  context-free syntax
+    IdCon  -> FunctionName {cons("unquoted-fun")}
+    StrCon -> FunctionName {cons("quoted-fun")}
+
+  context-free syntax
+    string:StrCon                -> Symbol {cons("lit")}
+    ci-string:SingleQuotedStrCon -> Symbol {cons("ci-lit")}
+
+    fun:FunctionName "(" arguments:{Symbol ","}* ")" "->" result:Symbol Attributes 
+	-> Production  {avoid, cons("prefix-fun")}
+
+module languages/sdf2/syntax/Start-Symbols
+
+imports languages/sdf2/syntax/Kernel
+
+exports
+  context-free syntax
+  
+    "start-symbols" Symbols                -> Grammar {cons("kernel-start-symbols")} 
+    "lexical" "start-symbols" Symbols      -> Grammar {cons("lexical-start-symbols")}
+    "context-free" "start-symbols" Symbols -> Grammar {cons("context-free-start-symbols")}
+
+module languages/sdf2/syntax/Sorts
+
+imports languages/sdf2/syntax/Kernel
+
+exports
+  sorts Sort
+  lexical syntax
+    head:[A-Z]                          -> Sort {cons("one-char")}
+    head:[A-Z] middle:[A-Za-z0-9\-]* last:[A-Za-z0-9] -> Sort 
+	{cons("more-chars")}
+
+  context-free syntax
+    Sort                                    -> Symbol  {cons("sort")}
+    Sort "[[" parameters:{Symbol ","}+ "]]" -> Symbol  {cons("parameterized-sort")}
+
+    "sorts" Symbols -> Grammar {cons("sorts")}
+
+  lexical restrictions
+    Sort -/- [A-Za-z0-9]
+
+module languages/sdf2/syntax/Character
+
+
+
+exports
+  sorts Character NumChar ShortChar
+  lexical syntax
+    [\\] number:[0-9]+                     -> NumChar   {cons("digits")}
+    character:[a-zA-Z0-9]                  -> ShortChar {cons("regular")}
+    [\\] escape:~[\0-\31A-Za-mo-qsu-z0-9]  -> ShortChar {cons("escaped")}
+
+  context-free syntax
+    NumChar   -> Character {cons("numeric")}
+    ShortChar -> Character {cons("short")}
+    "\\TOP"   -> Character {cons("top")}
+    "\\EOF"   -> Character {cons("eof")}
+    "\\BOT"   -> Character {cons("bot")}
+    "\\LABEL_START" -> Character {cons("label_start")}
+
+module languages/sdf2/syntax/Character-Class
+
+imports languages/sdf2/syntax/Character
+
+exports
+  sorts CharClass CharRange CharRanges OptCharRanges 
+  context-free syntax 
+    Character                           -> CharRange
+    start:Character "-" end:Character   -> CharRange            {cons("range")}
+
+    CharRange                                   -> CharRanges
+    "left":CharRanges "right":CharRanges        -> CharRanges   {cons("conc"),right,memo}
+    "(" CharRanges ")"                          -> CharRanges   {bracket}
+
+                              -> OptCharRanges  {cons("absent")}
+    CharRanges                -> OptCharRanges  {cons("present")}
+
+    "[" OptCharRanges "]"                    -> CharClass  {cons("simple-charclass")}
+    "~" CharClass                            -> CharClass  {cons("comp")}
+    "left":CharClass "/" "right":CharClass   -> CharClass  {cons("diff"),left,memo}
+    "left":CharClass "/\\" "right":CharClass -> CharClass  {cons("isect"),left,memo}
+    "left":CharClass "\\/" "right":CharClass -> CharClass  {cons("union"),left}
+    "(" CharClass ")"                        -> CharClass  {bracket, avoid}
+
+  context-free priorities
+    "~" CharClass             -> CharClass >
+    CharClass "/" CharClass   -> CharClass >
+    CharClass "/\\" CharClass -> CharClass >
+    CharClass "\\/" CharClass -> CharClass           
+
+
+module languages/sdf2/syntax/CC
+
+imports languages/sdf2/syntax/Character-Class 
+        languages/sdf2/syntax/Kernel
+
+exports
+  context-free syntax
+    CharClass -> Symbol {cons("char-class")}
+
+module languages/sdf2/syntax/Priority
+
+imports languages/sdf2/syntax/Kernel
+
+exports
+  sorts Associativity ArgumentIndicator Group Priority Priorities
+
+  context-free syntax
+    "left"      -> Associativity  {cons("left")}
+    "right"     -> Associativity  {cons("right")}
+    "non-assoc" -> Associativity  {cons("non-assoc")}
+    "assoc"     -> Associativity  {cons("assoc")}
+
+    "bracket"     -> Attribute  {cons("bracket")}
+    Associativity -> Attribute  {cons("assoc")}
+
+    "<" arguments:{NatCon ","}+ ">" -> ArgumentIndicator {cons("default")}
+
+    Group ArgumentIndicator               -> Group {non-assoc,cons("with-arguments")}
+    Group "."                             -> Group {non-assoc,cons("non-transitive")}
+
+    Production                            -> Group  {cons("simple-group")}
+    "{" Productions "}"                   -> Group  {cons("prods-group")}
+    "{" Associativity ":" Productions "}" -> Group  {cons("assoc-group")}
+
+    list:{Group ">"}+                                    -> Priority  {cons("chain")}
+    "left":Group Associativity "right":Group             -> Priority  {cons("assoc")}
+%%    Production "<" arguments:{NatCon ","}+ ">" ">" Group -> Priority  {cons("argument")}
+
+    list:{Priority  ","}* -> Priorities
+
+    "priorities" Priorities  -> Grammar  {cons("priorities")}
+
+module languages/sdf2/syntax/Lifting
+
+imports languages/sdf2/syntax/Kernel
+
+exports
+  context-free syntax
+    left-quote:"`" Symbol right-quote:"`" -> Symbol  {cons("lifting")}
+
+module languages/sdf2/syntax/Regular
+
+imports languages/sdf2/syntax/Kernel 
+imports languages/aterm/syntax/IntCon
+
+exports
+  context-free syntax
+    "(" ")"                                       -> Symbol {cons("empty")}
+    "(" head:Symbol tail:Symbol+ ")"              -> Symbol {cons("seq")}
+    Symbol "?"                                    -> Symbol {cons("opt")}
+    Symbol "+"                                    -> Symbol {cons("iter")}
+    Symbol "*"                                    -> Symbol {cons("iter-star")}
+    "{" Symbol sep:Symbol "}" "+"                 -> Symbol {cons("iter-sep")}
+    "{" Symbol sep:Symbol "}" "*"                 -> Symbol {cons("iter-star-sep")}
+    "<" head:Symbol "," rest:{Symbol ","}+ ">"    -> Symbol {cons("tuple")}
+    "(" arguments:Symbols "=>" results:Symbol ")" -> Symbol {cons("func")}
+    "left":Symbol "|" "right":Symbol              -> Symbol {right,cons("alt")}
+    "(" "left":Symbol "->" "right":Symbol ")"     -> Symbol {cons("strategy")}
+
+  context-free priorities
+    {Symbol "?"               -> Symbol
+    Symbol "*"                -> Symbol
+    Symbol "+"                -> Symbol} >
+    Symbol "|" Symbol         -> Symbol       
+
+
+module languages/sdf2/syntax/Renaming
+
+imports languages/sdf2/syntax/Kernel
+
+exports
+  sorts Renaming Renamings
+  context-free syntax 
+    "[" list:Renaming* "]" -> Renamings  {cons("renamings")}
+
+    from:Symbol "=>" to:Symbol                   -> Renaming  {cons("symbol")}
+    from-prod:Production "=>" to-prod:Production -> Renaming  {cons("production")}
+
+module languages/sdf2/syntax/Modules
+
+imports languages/sdf2/syntax/Kernel 
+        languages/sdf2/syntax/Renaming
+
+hiddens
+  sorts ModuleWord
+exports
+  context-free start-symbols Module
+
+  sorts ModuleId ModuleName Import Imports
+        Section Sections Module Definition ImpSection
+
+  lexical syntax    
+    letters:[A-Za-z0-9\_\-]+ -> ModuleWord  {cons("word")}
+
+    ModuleWord              -> ModuleId  {cons("leaf")}
+    sep:"/" basename:ModuleId            -> ModuleId  {cons("root")}
+    dirname:ModuleWord sep:"/" basename:ModuleId -> ModuleId  {cons("path")}
+         
+  context-free syntax
+    list:Module* -> Definition
+
+    "module" ModuleName list:ImpSection* Sections -> Module  {cons("module")}
+
+    "exports" Grammar            -> Section  {cons("exports")}
+    "hiddens" Grammar            -> Section  {cons("hiddens")}
+
+    list:Section*                -> Sections
+
+    ModuleId                        -> ModuleName  {cons("unparameterized")}
+    ModuleId "[" params:Symbols "]" -> ModuleName  {cons("parameterized")}
+
+    "id" "(" ModuleName ")" -> Attribute  {cons("id")}
+
+    "imports" list:Imports -> ImpSection  {cons("imports")}
+
+    ImpSection -> Grammar  {cons("imp-section")}
+
+    list:Import* -> Imports
+
+    ModuleName            -> Import  {cons("module")}
+    ModuleName Renamings  -> Import  {cons("renamed-module")}
+    "(" Import ")"        -> Import  {bracket}
+
+  lexical restrictions
+    ModuleWord -/- [A-Za-z0-9\_\-]
+    ModuleId -/- [\/]
+
+module languages/sdf2/syntax/Basic
+
+imports languages/sdf2/syntax/Kernel
+
+exports
+  context-free syntax
+    "lexical" "syntax"      Productions -> Grammar  {cons("lexical-syntax")}
+    "context-free" "syntax" Productions -> Grammar  {cons("context-free-syntax")}
+    "variables"             Productions -> Grammar  {cons("variables")}
+    "lexical" "variables"   Productions -> Grammar  {cons("lexical-variables")}
+
+    "<" Symbol "-CF"  ">"               -> Symbol  {cons("cf")}
+    "<" Symbol "-LEX" ">"               -> Symbol  {cons("lex")}
+    "<" Symbol "-VAR" ">"               -> Symbol  {cons("varsym")}
+
+    "LAYOUT"                            -> Symbol  {cons("layout")}
+
+module languages/sdf2/syntax/Grammars
+
+imports basic/Comments
+
+exports
+  sorts Grammar
+  context-free syntax    
+    "(/)"                          -> Grammar  {cons("empty-grammar")}
+    "left":Grammar "right":Grammar -> Grammar  {assoc,cons("conc-grammars")}
+    "(" Grammar ")"                -> Grammar  {bracket}
+
+module basic/Comments
+
+imports
+  basic/Whitespace
+
+exports
+  lexical syntax
+    "%%" line:~[\n]* "\n"	-> LAYOUT {cons("line"),category("Comment")}
+    "%" content:~[\%\n]+ "%"	-> LAYOUT {cons("nested"),category("Comment")}
+  context-free restrictions
+    LAYOUT? -/- [\%]
+
+module languages/sdf2/syntax/Symbols
+
+imports basic/Comments
+
+exports
+  sorts Symbol Symbols
+
+  context-free syntax
+    "(" Symbol ")" -> Symbol {bracket}
+
+    list:Symbol* -> Symbols
+
+
+
+module basic/IdentifierCon
+
+exports
+
+sorts IdCon
+
+lexical syntax
+
+head:[A-Za-z] tail:[A-Za-z\-0-9]* -> IdCon {cons("default")}
+
+lexical restrictions
+
+IdCon -/- [A-Za-z\-0-9]
+
+module basic/StrCon
+
+exports
+
+sorts StrCon StrChar
+
+lexical syntax
+    "\\n"                      -> StrChar {cons("newline")}
+    "\\t"                      -> StrChar {cons("tab")}
+    "\\\""                     -> StrChar {cons("quote")}
+    "\\\\"                     -> StrChar {cons("backslash")}
+    "\\" a:[0-9]b:[0-9]c:[0-9] -> StrChar {cons("decimal")}
+    ~[\0-\31\n\t\"\\]          -> StrChar {cons("normal")}
+
+    [\"] chars:StrChar* [\"]   -> StrCon  {cons("default")}
+
+module languages/aterm/syntax/RealCon
+
+imports languages/aterm/syntax/IntCon
+
+hiddens
+  context-free start-symbols 
+    RealCon
+
+exports
+  sorts OptExp RealCon
+
+  context-free syntax
+    "e" IntCon -> OptExp {cons("present")}
+               -> OptExp {cons("absent")}
+
+    base:IntCon "." decimal:NatCon exp:OptExp  -> RealCon {cons("real-con")}
+
+module basic/NatCon
+
+exports
+
+sorts NatCon
+
+lexical syntax
+  
+ [0-9]+ -> NatCon {cons("digits")}
+
+lexical restrictions
+
+ NatCon -/- [0-9]
+
+module basic/Whitespace
+
+exports
+  lexical syntax
+    [\ \t\n\r]	-> LAYOUT {cons("whitespace")}
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+
+module languages/aterm/syntax/IntCon
+
+imports basic/Whitespace
+	basic/NatCon
+
+hiddens
+  context-free start-symbols 
+    IntCon
+
+exports
+  sorts IntCon
+  context-free syntax
+    NatCon         -> IntCon {cons("natural")}
+    pos:"+" NatCon -> IntCon {cons("positive")}
+    neg:"-" NatCon -> IntCon {cons("negative")}
+
+module languages/aterm/syntax/ATerms
+
+imports languages/aterm/syntax/IntCon 
+        languages/aterm/syntax/RealCon
+	basic/StrCon
+	basic/IdentifierCon
+
+exports
+  sorts AFun ATerm Annotation
+
+  context-free syntax
+	StrCon 	-> AFun {cons("quoted")}
+	IdCon 	-> AFun {cons("unquoted")}
+
+  context-free syntax
+	IntCon 					-> ATerm {cons("int")}
+	RealCon					-> ATerm {cons("real")}
+	fun:AFun 				-> ATerm {cons("fun")}
+	fun:AFun "(" args:{ATerm ","}+ ")" 	-> ATerm {cons("appl")}
+	"<" type:ATerm ">" 			-> ATerm {cons("placeholder")}
+	"[" elems:{ATerm ","}* "]" 		-> ATerm {cons("list")}
+	trm:ATerm Annotation 			-> ATerm {cons("annotated")}
+
+  context-free syntax
+	"{" annos:{ ATerm ","}+ "}" 		-> Annotation {cons("default")}
+
+hiddens
+  context-free start-symbols 
+    ATerm
+
+module languages/sdf2/syntax/Kernel
+
+imports languages/aterm/syntax/ATerms 
+        languages/sdf2/syntax/Symbols 
+        languages/sdf2/syntax/Grammars
+
+exports
+  sorts Attribute ATermAttribute Attributes Production Productions
+  context-free syntax
+    aterm:ATerm    -> ATermAttribute  {cons("default")}
+    ATermAttribute -> Attribute       {cons("term")}
+
+    "{" list:{Attribute ","}* "}" -> Attributes  {cons("attrs")}
+                                  -> Attributes  {cons("no-attrs")}
+
+    Symbols "->" result:Symbol Attributes -> Production  {cons("prod")}
+
+    list:Production* -> Productions
+
+    "syntax" Productions -> Grammar {cons("syntax")}
+
+module languages/sdf2/syntax/Sdf2-Syntax
+
+imports languages/sdf2/syntax/Kernel
+        languages/sdf2/syntax/Basic
+        languages/sdf2/syntax/Modules
+        languages/sdf2/syntax/Regular
+        languages/sdf2/syntax/Lifting
+        languages/sdf2/syntax/Priority
+        languages/sdf2/syntax/CC
+        languages/sdf2/syntax/Sorts
+        languages/sdf2/syntax/Start-Symbols
+        languages/sdf2/syntax/Literals
+        languages/sdf2/syntax/Labels
+        languages/sdf2/syntax/Restrictions
+        languages/sdf2/syntax/Aliases
+
+exports
+  sorts SDF
+
+  context-free syntax
+    "<START>" -> Symbol {cons("start")}
+    "<Start>" -> Symbol {cons("file-start")}
+
+    "lexical"      "priorities" Priorities      -> Grammar {cons("lexical-priorities")}
+    "context-free" "priorities" Priorities      -> Grammar {cons("context-free-priorities")}
+    "lexical"      "restrictions" Restrictions  -> Grammar {cons("lexical-restrictions")}
+    "context-free" "restrictions" Restrictions  -> Grammar {cons("context-free-restrictions")}
+
+    "definition" Definition -> SDF {cons("definition")}
+
+  context-free priorities
+    Symbol "|" Symbol  -> Symbol >
+    Label ":" Symbol -> Symbol                  
+
+
+module languages/sdf2/syntax/Sdf2
+
+imports languages/sdf2/syntax/Sdf2-Syntax
+
+exports
+  lexical syntax
+    "LAYOUT"            -> Sort    {reject}
+
+  context-free syntax
+    "aliases"           -> ModuleName {reject}
+    "lexical"           -> ModuleName {reject}
+    "priorities"        -> ModuleName {reject}
+    "context-free"      -> ModuleName {reject}
+    "definition"        -> ModuleName {reject}
+    "syntax"            -> ModuleName {reject}
+    "variables"         -> ModuleName {reject}
+    "module"            -> ModuleName {reject}
+    "imports"           -> ModuleName {reject}
+    "exports"           -> ModuleName {reject}
+    "hiddens"           -> ModuleName {reject}
+    "left"              -> ModuleName {reject}
+    "right"             -> ModuleName {reject}
+    "assoc"             -> ModuleName {reject}
+    "non-assoc"         -> ModuleName {reject}
+    "bracket"           -> ModuleName {reject}
+    "sorts"             -> ModuleName {reject}
+    "bracket"           -> ModuleName {reject}
+    "sorts"             -> ModuleName {reject}
+    "restrictions"      -> ModuleName {reject}
+
+     StrCon "(" arguments:{Symbol ","}* ")" -> Symbols {reject}
+
+     Associativity -> Label   {reject}
+     Associativity -> ATermAttribute {reject}
+     "reject"      -> ATermAttribute {reject}
+     "prefer"      -> ATermAttribute {reject}
+     "avoid"       -> ATermAttribute {reject}
+     "bracket"     -> ATermAttribute {reject}
+     "id" "(" ModuleName ")" -> ATermAttribute {reject}
+
+  restrictions
+    <Sort -CF>
+    "aliases"
+    "lexical"
+    "priorities"
+    "context-free"
+    "definition"
+    "syntax"
+    "variables"
+    "module"
+    "imports"
+    "exports"
+    "hiddens"
+    "left"
+    "right"
+    "assoc"
+    "non-assoc"
+    "bracket"
+    "sorts"             -/- [A-Za-z0-9]
+    <NatCon -CF>        -/- [0-9]
+    <LAYOUT?-CF>        -/- [\ \t\n\%]
+    <NumChar -CF>       -/- [0-9]
+    <ModuleName -CF>    -/- [A-Za-z0-9\_\-]
+
+exports
+  context-free start-symbols
+    SDF Module
+
+module SDF
+imports languages/sdf2/syntax/Sdf2
+hiddens
+  context-free start-symbols
+    SDF Module
+
+  %% HACK
+  context-free syntax
+    Group "." -> Group {non-assoc,cons("non-transitive")}

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/SDFMix.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/SDFMix.sdf	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,56 @@
+module SDFMix[Ctx0]
+imports SDF
+          [ SDF                 => SDF[[Ctx0]]
+            Aliases             => Aliases[[Ctx0]]
+            Alias               => Alias[[Ctx0]]
+            Restrictions        => Restrictions[[Ctx0]]
+            Restriction         => Restriction[[Ctx0]]
+            Label               => Label[[Ctx0]]
+            FunctionName        => FunctionName[[Ctx0]]
+            SingleQuotedStrCon  => SingleQuotedStrCon[[Ctx0]]
+            SingleQuotedStrChar => SingleQuotedStrChar[[Ctx0]]
+            Sort                => Sort[[Ctx0]]
+            OptCharRanges       => OptCharRanges[[Ctx0]]
+            CharRange           => CharRange[[Ctx0]]
+            Character           => Character[[Ctx0]]
+            ShortChar           => ShortChar[[Ctx0]]
+            NumChar             => NumChar[[Ctx0]]
+            Priorities          => Priorities[[Ctx0]]
+            Priority            => Priority[[Ctx0]]
+            ArgumentIndicator   => ArgumentIndicator[[Ctx0]]
+            Associativity       => Associativity[[Ctx0]]
+            Import              => Import[[Ctx0]]
+            Imports             => Imports[[Ctx0]]
+            ImpSection          => ImpSection[[Ctx0]]
+            ModuleName          => ModuleName[[Ctx0]]
+            Sections            => Sections[[Ctx0]]
+            Section             => Section[[Ctx0]]
+            Module              => Module[[Ctx0]]
+            Definition          => Definition[[Ctx0]]
+            ModuleId            => ModuleId[[Ctx0]]
+            ModuleWord          => ModuleWord[[Ctx0]]
+            Renaming            => Renaming[[Ctx0]]
+            Renamings           => Renamings[[Ctx0]]
+            Productions         => Productions[[Ctx0]]
+            Production          => Production[[Ctx0]]
+            Attributes          => Attributes[[Ctx0]]
+            Attribute           => Attribute[[Ctx0]]
+            ATermAttribute      => ATermAttribute[[Ctx0]]
+            Symbols             => Symbols[[Ctx0]]
+            Annotation          => Annotation[[Ctx0]]
+            ATerm               => ATerm[[Ctx0]]
+            AFun                => AFun[[Ctx0]]
+            IdCon               => IdCon[[Ctx0]]
+            StrCon              => StrCon[[Ctx0]]
+            StrChar             => StrChar[[Ctx0]]
+            RealCon             => RealCon[[Ctx0]]
+            OptExp              => OptExp[[Ctx0]]
+            IntCon              => IntCon[[Ctx0]]
+            NatCon              => NatCon[[Ctx0]]
+            Lookahead           => Lookahead[[Ctx0]]
+            Grammar             => Grammar[[Ctx0]]
+            Symbol              => Symbol[[Ctx0]]
+            CharRanges          => CharRanges[[Ctx0]]
+            CharClass           => CharClass[[Ctx0]]
+            Lookaheads          => Lookaheads[[Ctx0]]
+            Group               => Group[[Ctx0]] ]

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-Attributes.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-Attributes.def	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,1082 @@
+definition
+module ResultTerms
+
+imports
+  Stratego-Sugar
+
+exports
+
+  sorts
+    LineEnd
+    TermNoApp
+    ResultTerm
+    SingleLineLayout
+
+  context-free syntax
+
+    TermNoApp -> ResultTerm
+
+    Term                  -> TermNoApp
+    StrategyAngle         -> TermNoApp {reject}
+    "<" Strategy ">" Term -> TermNoApp {reject}
+
+  lexical syntax
+  
+    ShortCom -> SingleLineLayout
+    LongCom  -> SingleLineLayout
+    [\ \t]+  -> SingleLineLayout
+    [\n\r]   -> LineEnd
+    Eof      -> LineEnd
+  
+  syntax
+  
+    %% <s>\n -> RootApp
+    
+    <StrategyAngle-CF> <SingleLineLayout*-LEX> <LineEnd-CF> -> <ResultTerm-CF> {ast("RootApp(<1>)")}
+    
+    %% <s>A -> App
+    
+    "<" <LAYOUT?-CF> <Strategy-CF> <LAYOUT?-CF> ">" <SingleLineLayout*-LEX>
+        <Term-CF>                                                           -> <ResultTerm-CF> {ast("App(<1>, <3>)")}
+
+module Stratego-Sugar-Overlays
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Terms
+
+exports
+  sorts Overlay
+  context-free syntax
+    Id 			 "=" Term 	-> Overlay {cons("OverlayNoArgs")}
+    Id "(" {Id ","}* ")" "=" Term 	-> Overlay {cons("Overlay")}
+
+module Stratego-Sugar-DynamicRules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+
+exports
+ 
+  sorts ScopeLabels
+  context-free syntax
+
+    "{|" ScopeLabels ":" Strategy "|}" -> Strategy {cons("DynRuleScope")}
+
+    {DynRuleScopeId ","}*   -> ScopeLabels
+    "~" Term		    -> ScopeLabels {cons("ScopeLabels")}
+
+  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
+  context-free syntax
+
+    "rules" "(" DynRuleDef* ")" -> Strategy {cons("GenDynRules")}
+
+    Id "+" Term                 -> DynRuleDef {cons("AddScopeLabel")} 
+    DynRuleId ":-"  Term        -> DynRuleDef {cons("UndefineDynRule")}
+    DynRuleId ":"   Rule        -> DynRuleDef {cons("SetDynRule")}
+    DynRuleId ":+"  Rule        -> DynRuleDef {cons("AddDynRule")}
+    DynRuleId ":"   Term        -> DynRuleDef {cons("SetDynRuleMatch")}
+
+    DynRuleId ":="  Term        -> DynRuleDef {cons("DynRuleAssign")}
+    DynRuleId ":+="  Term       -> DynRuleDef {cons("DynRuleAssignAdd")}
+
+    DynRuleId ":"   Rule "depends" "on" Term -> DynRuleDef {cons("SetDynRuleDepends")}
+
+    RuleDec "." Term            -> DynRuleId {cons("LabeledDynRuleId")}
+    RuleDec "+" Term            -> DynRuleId {cons("AddLabelDynRuleId")}
+    RuleDec                     -> DynRuleId {cons("DynRuleId")}
+
+    Id "." Term                 -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
+    Id                          -> DynRuleScopeId {cons("DynRuleScopeId")}
+
+  context-free syntax
+
+    Id                          -> RuleDec {cons("RDecNoArgs")}
+    Id "(" {Typedid ","}* ")"   -> RuleDec {cons("RDec")}
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"   -> RuleDec {cons("RDecT")}
+
+  sorts RuleNames
+  context-free syntax
+    {Id ","}*				  -> RuleNames
+    "~" Term				  -> RuleNames {cons("RuleNames")}
+
+    "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+
+  syntax
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+
+  context-free syntax
+    Strategy "/" RuleNames"\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+    Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+
+    Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+
+  priorities
+    <StrategyAngle-CF> <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("BA")}
+  > {
+
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    }
+  > <Strategy-CF> <LAYOUT?-CF> "=>" <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("AM")}
+
+  context-free priorities
+    StrategyAngle Term 		          -> Strategy {cons("BA")}
+  > "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+  > Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+  > Strategy "/" RuleNames "\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+  > Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+  > Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+
+module Stratego-Sugar-Rules
+imports Stratego-Sugar-Strategies
+exports
+
+  sorts RuleDef
+  context-free syntax
+    Id ":" Rule 				-> RuleDef {cons("RDefNoArgs")}
+    
+    Anno+ RuleDef               -> Def {cons("AnnoDef")}
+
+    Id "(" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDef")}
+
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDefT")}
+
+  sorts Rule RuleCond
+  context-free syntax
+    Term "->" Term           	    -> Rule {cons("RuleNoCond")} %% backward comp.
+    Term "->" Term "where" Strategy -> Rule {cons("Rule")}       %% backward comp.
+    Term "->" Term RuleCond+	    -> Rule {cons("Rule"), avoid}
+
+    "where" Strategy -> RuleCond {cons("WhereClause")}
+    "with"  Strategy -> RuleCond {cons("WithClause")}
+
+module Stratego-Sugar-Strategies
+imports
+  Stratego-Core-Strategies
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Constants
+  Stratego-Sugar-Signatures
+
+exports
+  context-free syntax
+    Id  		      "=" Strategy -> StrategyDef {cons("SDefNoArgs")}
+    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
+
+  context-free syntax
+    ID 				  	  -> Typedid {cons("DefaultVarDec")}
+
+  sorts Rule
+
+  sorts StrategyParen StrategyCurly StrategyAngle
+  context-free syntax
+
+    %% Abstraction
+
+    SVar "(" {Strategy ","}* ")" 	  -> Strategy {cons("Call")}
+
+    %% Match and build
+
+    "{" Strategy "}" 			  -> Strategy {cons("ScopeDefault")}
+
+     %%"<" Strategy ">" Term 		  -> Strategy {cons("BA")}
+     StrategyAngle Term 		  -> Strategy {cons("BA")}
+     "<" Strategy ">"			  -> StrategyAngle {bracket} %% {cons("AngleStrat")}
+
+    %% Combinators
+
+    Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
+
+    "rec" Id "(" Strategy ")" 		  -> Strategy {cons("Rec")}
+
+    "not"   "(" Strategy ")" 		  -> Strategy {cons("Not")}
+    "where" "(" Strategy ")" 		  -> Strategy {cons("Where")}
+    "with"  "(" Strategy ")" 		  -> Strategy {cons("With"), prefer}
+    "test"  "(" Strategy ")" 		  -> Strategy {cons("Test")}
+
+    %% Primitives
+
+    "prim" "(" String ")" 		  -> Strategy {cons("PrimNoArgs")}
+    "prim" "(" String "," {Term ","}* ")" -> Strategy {cons("Prim")}
+
+    %% Congruence operators
+
+    String 				  -> Strategy {cons("StrCong")}
+    Int 				  -> Strategy {cons("IntCong")}
+    Real 				  -> Strategy {cons("RealCong")}
+    Char 			 	  -> Strategy {cons("CharCong")}
+
+    String "(" {Strategy ","}* ")" 	  -> Strategy {cons("CongQ")}
+
+    %%"(" {Strategy ","}* ")" 		  -> Strategy {cons("TupleCong"),avoid}
+
+    Strategy StrategyCurly		  -> Strategy {cons("AnnoCong")}
+    
+    "{" Strategy "}"		  	  -> StrategyCurly {cons("StrategyCurly")}
+
+    "("  ")" 		  		  -> Strategy {cons("EmptyTupleCong")}
+   "(" Strategy  ")" 		          -> Strategy {bracket}
+    "(" Strategy "," {Strategy ","}+ ")"  -> Strategy {cons("TupleCong")}
+
+%%    Mod 	  			  -> Strategy {cons("ModCongNoArgs")}
+%%    Mod "(" {Strategy ","}* ")"	  	  -> Strategy {cons("ModCong")}
+%%    Id "^" Id				  -> Mod {cons("Mod")}
+    "[" {Strategy ","}* "]" 		  -> Strategy {cons("ListCongNoTail")}
+    "[" {Strategy ","}* "|" Strategy "]"  -> Strategy {cons("ListCong")}
+
+%%    Strategy "#" "(" StrategyInj ")" 	  -> Strategy {cons("ExplodeCong")}
+%%    Strategy "#" "(" Strategy ")" 	  -> Strategy {cons("ExplodeCong")}
+    Strategy "#" StrategyParen	  	  -> Strategy {cons("ExplodeCong")}
+
+  %% Syntactic sugar sugar
+
+  sorts SwitchCase
+  context-free syntax
+
+    SVar  		  		  -> Strategy {cons("CallNoArgs")}
+    "\\" Rule "\\" 			  -> Strategy {cons("LRule")}
+    "(" Rule ")" 			  -> Strategy {cons("SRule")}
+    Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
+    Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
+
+    "proceed" "(" {Strategy "," }+ ")" -> Strategy {cons("Proceed"), prefer}
+
+    "if" Strategy "then" Strategy 
+                  "else" Strategy "end"   -> Strategy {cons("CondChoice")}
+    "if" Strategy "then" Strategy "end"   -> Strategy {cons("IfThen")}
+
+    "switch" Strategy SwitchCase* "end"   -> Strategy {cons("SwitchChoiceNoOtherwise")}
+    "switch" Strategy SwitchCase*
+         "otherwise" ":" Strategy "end"   -> Strategy {cons("SwitchChoice")}
+
+    "case" Strategy ":" Strategy          -> SwitchCase {cons("SwitchCase")}
+
+    Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+
+    Term ":=" Term			  -> Strategy {cons("Assign")}
+
+  %% Priorities
+
+  context-free priorities
+    { Strategy StrategyCurly		  -> Strategy
+      Strategy "#" StrategyParen          -> Strategy
+    }
+  > { "!" Term 				  -> Strategy
+      "?" Term 				  -> Strategy
+    }
+  > StrategyAngle Term 		          -> Strategy
+  > Strategy "=>" Term 		  	  -> Strategy
+  > Strategy ";" Strategy 		  -> Strategy
+  > {right: 
+     Strategy "+" Strategy 		  -> Strategy
+     Strategy "<+" Strategy 		  -> Strategy
+     Strategy "+>" Strategy 		  -> Strategy
+     
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy
+    }
+
+  context-free priorities
+    Strategy 				  -> StrategyMid
+  > Strategy "+" Strategy 		  -> Strategy
+
+  context-free priorities
+    { Strategy StrategyCurly      -> Strategy
+      Strategy "#" StrategyParen  -> Strategy
+    }
+    .> Term ":=" Term -> Strategy
+
+
+module Stratego-Sugar-Terms
+imports
+  Stratego-Core-Terms
+  Stratego-Sugar-Strategies
+
+exports
+  sorts LID
+  context-free syntax
+    LId 			-> LID  {cons("ListVar")}
+    LID				-> Var  {cons("Var")}
+    LID				-> ID
+
+  context-free syntax
+    "_" PreTerm 		 -> PreTerm {cons("BuildDefaultPT")}
+    "_" Term 			 -> Term {cons("BuildDefault"),prefer}
+
+    Char 			 -> PreTerm {cons("Char")}
+
+    PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+    PreTerm                      -> Term {cons("NoAnnoList")}
+
+    "<" Strategy ">" Term 	 -> PreTerm {cons("App")}
+    "<" Strategy ">" Term 	 -> Term {cons("App"),prefer}
+
+    StrategyAngle		 -> PreTerm {cons("RootApp")}
+    StrategyAngle		 -> Term {cons("RootApp"),prefer}
+
+    "(" {Term ","}* ")" 	 -> PreTerm {cons("Tuple")}
+    "[" {Term ","}* "]" 	 -> PreTerm {cons("List")}
+    "[" {Term ","}* "|" Term "]" -> PreTerm {cons("ListTail")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Sugar-Signatures
+imports
+  Stratego-Core-Signatures
+  Stratego-Sugar-Constants
+
+exports
+
+  sorts Sort
+  context-free syntax
+    "[" {Sort ","}* "]"		 -> Sort {cons("SortList")}
+    "[" {Sort ","}* "|" Sort "]" -> Sort {cons("SortListTl")}
+    "(" {Sort ","}* ")"		 -> Sort {cons("SortTuple")}
+
+  sorts Kind
+  context-free syntax
+    "*" 			-> Kind {cons("Star")}
+    "**" 			-> Kind {cons("StarStar")}
+
+module Stratego-Core-Signatures
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+exports
+  sorts Sdecl
+  context-free syntax
+    "sorts" Sort* 		-> Sdecl {cons("Sorts")}
+    "constructors" Opdecl* 	-> Sdecl {cons("Constructors")}
+
+  sorts Sort
+  context-free syntax
+    LCID 			 -> Sort {cons("SortVar")}
+    UCID 			 -> Sort {cons("SortNoArgs")}
+    Id "(" {Sort ","}* ")" 	 -> Sort {cons("Sort")}
+
+  sorts Opdecl
+  context-free syntax
+    Id     ":" Type 		-> Opdecl {cons("OpDecl")}
+    String ":" Type 		-> Opdecl {cons("OpDeclQ")}
+           ":" Type 		-> Opdecl {cons("OpDeclInj")}
+
+  context-free syntax
+    "external" Id     ":" Type 	-> Opdecl {cons("ExtOpDecl")}
+    "external" String ":" Type 	-> Opdecl {cons("ExtOpDeclQ")}
+    "external"        ":" Type 	-> Opdecl {cons("ExtOpDeclInj")}
+
+  sorts Type ArgType ConstType FunType RetType
+  context-free syntax
+    Sort	                -> ConstType {cons("ConstType")}
+    {ArgType "*"}+ "->" RetType -> FunType {cons("FunType")}
+    "(" Type ")"                -> ArgType {bracket}
+    ConstType			-> ArgType
+    Type	                -> RetType
+    FunType			-> RetType {reject}
+
+    FunType			-> Type
+    ConstType			-> Type
+
+  %%%
+   %% Restriction is required for the Sort* in Sdecl: List(a) is
+   %% ambiguous.
+   %%%
+  context-free restrictions
+    Sort -/- [\(]
+
+module Stratego-Core-Terms
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+
+exports
+  sorts ID Var Wld
+  context-free syntax
+    Id 				-> Var  {cons("Var")}
+    Id				-> ID
+    %% ":" Var                  -> Var  {cons("SeqVar")}
+
+  sorts Term PreTerm
+  context-free syntax
+    Var 			 -> PreTerm 
+    Var 			 -> Term {prefer}
+
+    "_" 			 -> Wld {cons("Wld")}
+    Wld 			 -> PreTerm
+    Wld 			 -> Term {prefer}
+
+    Int 			 -> PreTerm {cons("Int")}
+    Real 			 -> PreTerm {cons("Real")}
+    String 			 -> PreTerm {cons("Str")}
+
+    Id "(" {Term ","}* ")" 	 -> PreTerm {cons("Op")}
+    String "(" {Term ","}* ")" 	 -> PreTerm {cons("OpQ")}
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+
+    PreTerm "{^" PreTerm "}"	 -> Term {cons("Anno")}
+
+    Var "@" Term 		 -> Term {cons("As"),prefer}
+    Var "@" PreTerm 		 -> PreTerm {cons("As")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Core-Strategies
+imports
+  Stratego-Core-Terms
+  Stratego-Core-Constants
+  Stratego-Core-Signatures
+
+exports
+  sorts Def
+  context-free syntax
+    StrategyDef					 -> Def 
+    Id						 -> SVar {cons("SVar")}
+    "let" Def* "in" Strategy "end"		 -> Strategy {cons("Let")}
+    SVar "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallT")}
+
+    "call" "(" Term "|" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallDynamic")}
+
+
+  sorts StrategyDef
+  context-free syntax
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDefT")}
+
+    Anno+ StrategyDef -> Def {cons("AnnoDef")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("ExtSDefInl")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
+
+    "external"
+    EmptyId "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
+
+
+  sorts EmptyId
+  lexical syntax
+  
+    -> EmptyId
+
+  sorts Anno
+  context-free syntax
+    "extend"      -> Anno {cons("Extend")}
+    "override"    -> Anno {cons("Override")}
+    "internal"    -> Anno {cons("Internal")}
+%%  "sealed"      -> Anno {cons("Sealed")}
+%%  "extensible"  -> Anno {cons("Extensible")}
+%%  "overridable" -> Anno {cons("Overridable")}
+
+  lexical syntax
+    
+    "extend"      -> Keyword
+    "override"    -> Keyword
+    "internal"    -> Keyword
+    "sealed"      -> Keyword
+    "extensible"  -> Keyword
+    "overridable" -> Keyword
+
+  lexical restrictions
+  
+    "extend"
+    "override"
+    "internal"
+    "sealed"
+    "extensible"
+    "overridable" -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Typedid
+  context-free syntax
+    ID ":" Type 			  -> Typedid {cons("VarDec")}
+
+
+  sorts Strategy SVar StrategyParen StrategyMid 
+  context-free syntax
+    "(" Strategy ")"			  -> StrategyParen {cons("ParenStrat")}
+
+    "fail" 				  -> Strategy {cons("Fail")}
+    "id" 				  -> Strategy {cons("Id")}
+
+    "proceed" "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("ProceedT"), prefer}
+    "proceed"                                         -> Strategy {cons("ProceedNoArgs"), prefer}
+
+    %% Match and build
+
+    "?" Term 				  -> Strategy {cons("Match")}
+    "!" Term 				  -> Strategy {cons("Build")}
+    "{" {ID ","}* ":" Strategy "}" 	  -> Strategy {cons("Scope")}
+
+    %% Combinators
+
+    Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+    Strategy "<" StrategyMid 
+             "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    Strategy 				  -> StrategyMid
+
+    %% Primitives
+
+    "prim" "(" String "," {Strategy ","}* "|" {Term ","}*")"  -> Strategy {cons("PrimT")}
+
+    %% Traversal
+
+    "some" "(" Strategy ")" 		  -> Strategy {cons("Some")}
+    "one" "(" Strategy ")" 		  -> Strategy {cons("One")}
+    "all" "(" Strategy ")" 		  -> Strategy {cons("All")}
+
+  %% Priorities
+
+  context-free priorities
+    { "!" Term 				  -> Strategy {cons("Build")}
+      "?" Term 				  -> Strategy {cons("Match")}
+    }
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+  > {right: 
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    }
+
+  context-free syntax
+    "import-term" "(" ModName ")" -> Strategy {cons("ImportTerm")}
+
+module Stratego-Core-Modules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Strategies
+  Stratego-Core-Signatures
+
+exports 
+  sorts Module
+  context-free syntax
+    "module" ModName Decl* 	 -> Module {cons("Module")}
+    "specification" Decl*	 -> Module {cons("Specification")}
+
+  sorts Decl 
+  context-free syntax
+    "imports" ImportModName* 	-> Decl {cons("Imports")}
+    "strategies" Def* 		-> Decl {cons("Strategies")}
+    "signature" Sdecl*  	-> Decl {cons("Signature")}
+
+  sorts ImportModName
+  context-free syntax
+    ModName              -> ImportModName {cons("Import")}
+  syntax
+    <ModName-CF> "/" "-" -> <ImportModName-CF> {cons("ImportWildcard")}
+
+module Stratego-Sugar-Modules
+imports
+  Stratego-Core-Modules
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Overlays
+  Stratego-Sugar-Rules
+
+exports 
+
+  sorts Decl Def
+  context-free syntax
+    "rules" Def* 		-> Decl {cons("Rules")}
+    "overlays" Overlay* 	-> Decl {cons("Overlays")}
+
+    RuleDef 			-> Def 
+
+
+module Stratego-Sugar-StringQuotations
+exports
+
+  sorts
+    StringQuotation
+    StringQuotedPart1 StringQuotedChars1 DollarOpen1 DollarClose1 QuotedBracket1 Dollar1
+    StringQuotedPart2 StringQuotedChars2 DollarOpen2 DollarClose2 QuotedBracket2 Dollar2
+    StringQuotedPart3 StringQuotedChars3 DollarOpen3 DollarClose3 QuotedBracket3 Dollar3
+    StringQuotedPart4 StringQuotedChars4 DollarOpen4 DollarClose4 QuotedBracket4  Dollar4
+    Padding
+
+  context-free syntax
+
+    StringQuotation -> PreTerm
+
+  syntax
+
+    StringQuotation -> <PreTerm-CF>
+
+    "$" "[" Padding StringQuotedPart1*               "]"    -> StringQuotation {cons("StringQuotation1") }
+     Padding "[" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "]"    -> StringQuotedPart1 {cons("StringEscape1")}
+    <StringQuotedChars1-LEX>                                -> StringQuotedPart1 {cons("QStr")}
+    <Dollar1-LEX>                                           -> StringQuotedPart1 {cons("QDollar")}
+    "$" <QuotedBracket1-LEX> "$"                            -> StringQuotedPart1 {cons("QBr")}
+    ~[\[\]\$]+                                              -> <StringQuotedChars1-LEX>
+    [\[\]]                                                  -> <QuotedBracket1-LEX>
+    "$"                                                     -> <Dollar1-LEX>
+
+    "$" "{" Padding StringQuotedPart2*               "}"    -> StringQuotation {cons("StringQuotation2") }
+     Padding "{" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "}"    -> StringQuotedPart2 {cons("StringEscape2")}
+    <StringQuotedChars2-LEX>                                -> StringQuotedPart2 {cons("QStr")}
+    <Dollar2-LEX>                                           -> StringQuotedPart2 {cons("QDollar")}
+    "$" <QuotedBracket2-LEX> "$"                            -> StringQuotedPart2 {cons("QBr")}
+    ~[\{\}\$]+                                              -> <StringQuotedChars2-LEX>
+    [\{\}]                                                  -> <QuotedBracket2-LEX>
+    "$"                                                     -> <Dollar2-LEX>
+
+    "$" "(" Padding StringQuotedPart3*              ")"     -> StringQuotation {cons("StringQuotation3") }
+    Padding "(" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ")"     -> StringQuotedPart3 {cons("StringEscape3")}
+    <StringQuotedChars3-LEX>                                -> StringQuotedPart3 {cons("QStr")}
+    <Dollar3-LEX>                                           -> StringQuotedPart3 {cons("QDollar")}
+    "$" <QuotedBracket3-LEX> "$"                            -> StringQuotedPart3 {cons("QBr")}
+    ~[\(\)\$]+                                              -> <StringQuotedChars3-LEX>
+    [\(\)]                                                  -> <QuotedBracket3-LEX>
+    "$"                                                     -> <Dollar3-LEX>
+
+    "$" "<" Padding StringQuotedPart4*               ">"    -> StringQuotation {cons("StringQuotation4") }
+    Padding "<"  <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ">"    -> StringQuotedPart4 {cons("StringEscape4")}
+    <StringQuotedChars4-LEX>                                -> StringQuotedPart4 {cons("QStr")}
+    <Dollar4-LEX>                                           -> StringQuotedPart4 {cons("QDollar")}
+    "$" <QuotedBracket4-LEX> "$"                            -> StringQuotedPart4 {cons("QBr")}
+    ~[\<\>\$]+                                              -> <StringQuotedChars4-LEX>
+    [\<\>]                                                  -> <QuotedBracket4-LEX>
+    "$"                                                     -> <Dollar4-LEX>
+   
+    %% Padding is a dummy lexical that will contain the indentation prefix of every quotation
+    <Padding-LEX>                                           -> Padding
+                                                            -> <Padding-LEX> {indentpadding}
+
+  lexical restrictions
+
+    StringQuotedChars1 -/- ~[\[\]\$]   
+    StringQuotedChars2 -/- ~[\{\}\$]    
+    StringQuotedChars3 -/- ~[\(\)\$]    
+    StringQuotedChars4 -/- ~[\<\>\$]
+    Dollar1            -/- [\[\]] . [\$]
+    Dollar2            -/- [\{\}] . [\$]
+    Dollar3            -/- [\(\)] . [\$]
+    Dollar4            -/- [\<\>] . [\$]
+
+module Stratego-Core-Constants
+exports
+  sorts Int Real String StrChar
+  lexical syntax
+    [\-]? [0-9]+ 		-> Int
+    [\-]? [0-9]+ [\.] [0-9]+ 	-> Real
+    "\"" StrChar* "\"" 		-> String
+    ~[\"\\] 			-> StrChar
+    [\\] [\"tnr\\] 		-> StrChar
+
+
+module Stratego-Sugar-Constants
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+  Stratego-Sugar-StringQuotations
+exports
+  sorts Char CharChar
+  lexical syntax
+    "'" CharChar "'"		-> Char
+    ~[\']			-> CharChar
+    [\\] [\'ntr\ ]		-> CharChar
+    Char		 	-> Id {reject}
+
+module Stratego-Core-Identifiers
+exports
+  sorts ModName ModNamePart
+  lexical syntax
+    {ModNamePart "/"}+ -> ModName
+    [a-zA-Z\.\_] [a-zA-Z0-9\'\.\-\_]* -> ModNamePart
+  lexical restrictions
+    ModName -/- [a-zA-Z0-9\'\.\-\_]
+  lexical syntax
+    "imports" 		-> ModName {reject}
+    "overlays" 		-> ModName {reject}
+    "rules" 		-> ModName {reject}
+    "signature" 	-> ModName {reject}
+    "strategies" 	-> ModName {reject}
+
+  sorts Id LId LCID UCID Wld
+  lexical syntax
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]*     -> Id
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]* "*" -> LId
+    [\'] [a-z]+                       -> Id
+
+    [a-z] [a-zA-Z0-9\'\-\_]*  -> LCID
+    [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
+
+  lexical restrictions
+    Id   -/- [a-zA-Z0-9\'\-\_\*]
+    LId  -/- [a-zA-Z0-9\'\-\_]
+    LCID -/- [a-zA-Z0-9\'\-\_]
+    UCID -/- [a-zA-Z0-9\'\-\_]
+
+  lexical syntax
+    "_"     -> Id {reject}
+    "'"     -> Id {reject}
+
+    Keyword -> Id   {reject}
+    Keyword -> LId  {reject}
+    Keyword -> LCID {reject}
+    Keyword -> UCID {reject}
+
+  lexical restrictions
+    "all"
+    "case" %% not reserved kw
+    "constructors"
+    "else" %% not reserved kw
+    "end" %% not reserved kw
+    "external" %% not reserved kw
+    "fail"
+    "id"
+    "if" %% not reserved kw
+    "in"
+    "imports" %% not reserved kw
+    "let"
+    "module"
+    "not"
+    "one"
+    "overlays"
+    "otherwise" %% not reserved kw
+    "prim"
+    "rec" %% not reserved kw
+    "rules"
+    "script"
+    "signature"
+    "some"
+    "sorts"
+    "strategies"
+    "stratego"
+    "switch" %% not reserved kw
+    "test"
+    "then" %% not reserved kw
+    "where"
+    "import-term"
+      -/- [a-zA-Z0-9\'\-\_]
+  
+  context-free restrictions
+    Wld -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Keyword
+  lexical syntax
+    "all"               -> Keyword
+    "constructors" 	-> Keyword
+    "fail" 		-> Keyword
+    "id" 		-> Keyword
+    "in" 		-> Keyword
+    "let" 		-> Keyword
+    "module" 		-> Keyword
+    "not" 		-> Keyword
+    "one" 		-> Keyword
+    "overlays" 		-> Keyword
+    "prim" 		-> Keyword
+    "rules" 		-> Keyword
+    "script" 		-> Keyword
+    "signature" 	-> Keyword
+    "some" 		-> Keyword
+    "sorts" 		-> Keyword
+    "strategies" 	-> Keyword
+    "stratego" 		-> Keyword
+    "test" 		-> Keyword
+    "where" 		-> Keyword
+    "import-term"	-> Keyword
+
+
+module Stratego-Core-Layout
+exports
+  sorts Ws ShortCom LongCom CommChar Asterisk Eof 
+  lexical syntax
+    [\t\ \n\r]			-> Ws
+
+    "//" ~[\n]* ([\n] | Eof)	-> ShortCom
+    "/*" CommChar* "*/"	-> LongCom
+				-> Eof  
+
+    ~[\*]     -> CommChar
+
+    "*"       -> Asterisk
+    Asterisk  -> CommChar
+
+  lexical restrictions
+    Asterisk -/- [\/]
+    Eof      -/- ~[]
+
+  lexical syntax
+    ShortCom 	-> LAYOUT
+    LongCom 	-> LAYOUT
+    Ws 		-> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\*]
+    LAYOUT? -/- [\/].[\/]
+
+module Stratego-Sugar-Layout
+imports Stratego-Core-Layout
+%%exports
+%%  sorts VeryLongCom Eof VLCchar Backslash
+%%  lexical syntax
+%%    "\\end{code}" VLCchar* "\\begin{code}" -> VeryLongCom
+%%    "\\begin{code}" 			   -> VeryLongCom
+%%    "\\end{code}" VLCchar* Eof 		   -> VeryLongCom
+%%    "\\literate" VLCchar* "\\begin{code}"  -> VeryLongCom
+%%    ~[\\] 				   -> VLCchar
+%%    Backslash 				   -> VLCchar
+%%    [\\] 				   -> Backslash
+
+%%  lexical restrictions
+%%    Backslash -/- [b].[e].[g].[i].[n].[\{].[c].[o].[d].[e].[\}]
+%%    Eof -/- ~[]
+
+%%  lexical syntax
+%%    VeryLongCom -> LAYOUT
+
+
+
+module Stratego-Sugar
+imports
+  Stratego-Sugar-Layout
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Constants 
+  Stratego-Sugar-Modules
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+  Stratego-Sugar-DynamicRules
+  Stratego-Sugar-Overlays
+
+hiddens
+  context-free start-symbols Module
+
+module Stratego-Attributes
+
+imports
+  Stratego-Sugar
+  ResultTerms
+
+hiddens
+  context-free start-symbols
+    Module
+    Decl
+
+exports
+  sorts
+    DefType
+    Pattern
+    ADef
+    AttributeDef
+    AttributeRef
+    AttributeCall
+    AttributeCallLHS
+    AttributeDecl
+    AttributeType
+    AttributeTypeNoSort
+    DecoratorRef
+    DecoratorRefNoArgs
+    DecoratorId
+    AttributeKeyword
+    ChildDot
+    DotChild
+    AttributeId
+    AttributeDeclId
+    OptChildDot
+    OptDotChild
+    OptSortDot
+    NoSortDot
+    AttributeNameValue
+    NameDefBlockDef
+    PatternDefBlockDef
+    Where
+    NoWhere
+    UNDEFINED %% matches nothing
+  
+  lexical syntax
+  
+    %% Unreserve some Id's specifically for (built-in) attributes
+
+    "all"       -> AttributeId
+    "one"       -> AttributeId
+    "some"      -> AttributeId
+    "test"      -> AttributeId
+    "in"        -> AttributeId
+    "signature" -> AttributeId
+  
+  context-free restrictions
+  
+    AttributeId -/- [a-zA-Z0-9\'\-\_\*]
+
+    DecoratorRefNoArgs -/- [\(]  %% decorator(arg,y) vs. decorator (tuple, y)
+  
+  context-free syntax %% identifiers
+  
+    Id               -> AttributeId {prefer}
+  
+    AttributeId      -> AttributeDeclId
+    AttributeKeyword -> AttributeDeclId {reject}
+
+    AttributeId      -> DecoratorId
+    "*"              -> DecoratorId
+    "plain"          -> DecoratorId {prefer} %% treat as keyword
+    AttributeKeyword -> DecoratorId {reject}
+  
+  context-free syntax %% attributes
+    
+    AttributeDeclId "(" { Typedid "," }* "|" { Term "," }* ")" -> AttributeDecl {cons("Attribute")}
+    AttributeDeclId "(" { Typedid "," }*                   ")" -> AttributeDecl {cons("AttributeNoTerms")}
+    AttributeDeclId                                            -> AttributeDecl {cons("AttributeNoArgs")}
+    
+    AttributeId "(" { Typedid "," }* "|" { Term "," }* ")" -> AttributeDef {cons("Attribute")}
+    AttributeId "(" { Typedid "," }*                   ")" -> AttributeDef {cons("AttributeNoTerms")}
+    AttributeId                                            -> AttributeDef {cons("AttributeNoArgs")}
+    
+    AttributeId "(" { Strategy "," }* "|" { Term "," }* ")" -> AttributeRef {cons("Attribute")}
+    AttributeId "(" { Strategy "," }*                   ")" -> AttributeRef {cons("AttributeNoTerms")}
+    AttributeId                                             -> AttributeRef {cons("AttributeNoArgs")}
+    
+    DecoratorId "(" { Strategy "," }* "|" { Term "," }* ")" -> DecoratorRef {cons("Decorator")}
+    DecoratorId "(" { Strategy "," }*                   ")" -> DecoratorRef {cons("DecoratorNoTerms")}
+    DecoratorRefNoArgs                                      -> DecoratorRef
+    DecoratorId                                             -> DecoratorRefNoArgs {cons("DecoratorNoArgs")}
+
+    AttributeCallLHS "." AttributeRef -> AttributeCall {cons("AttributeRef")}
+    Term                              -> AttributeCallLHS
+    "<" Strategy ">" Term             -> AttributeCallLHS {reject}
+    
+    AttributeCall -> Strategy {prefer}
+    AttributeCall -> PreTerm {cons("AttributeTerm")}
+   
+  context-free syntax %% attribute equations: core syntax
+
+    "attributes" ADef* -> Decl {cons("Attributes")}
+
+    AttributeType { AttributeDecl "," }+               -> ADef {cons("ADecl")}
+    AttributeTypeNoSort Pattern "." AttributeNameValue -> ADef {cons("ADef")}
+    
+    DefType DecoratorRef* OptSortDot -> AttributeType {cons("Type")}
+    DefType DecoratorRef* NoSortDot  -> AttributeTypeNoSort {cons("Type")}
+    
+    OptChildDot AttributeDef "="  Strategy -> AttributeNameValue {cons("ADefStrategy")}
+    
+    "eq"        -> DefType {cons("Eq")}
+    "def"       -> DefType {cons("Def")}
+    "decorator" -> DefType {cons("Decorator")}
+    
+    Id "."     -> ChildDot {cons("Child")}
+    "." Id     -> DotChild {cons("DotChild")}
+    "id" "."   -> ChildDot {cons("IdChild"), prefer}    %% sugar
+    "." "id"   -> DotChild {cons("DotIdChild"), prefer} %% sugar
+    "root" "." -> ChildDot {reject}                     %% confusing
+    "." "root" -> DotChild {reject}                     %% confusing
+    
+    ChildDot   -> OptChildDot
+               -> OptChildDot {cons("NoChild")}
+    DotChild   -> OptDotChild
+               -> OptDotChild {cons("NoChild")}
+    
+    Sort "." -> OptSortDot {cons("Sort")}
+             -> OptSortDot {cons("NoSort")}
+             -> NoSortDot {cons("NoSort")}
+    
+    Term             -> Pattern
+    AttributeKeyword -> Pattern {reject}
+    AttributeCall    -> Pattern {reject}
+    "root"           -> Pattern {cons("Root"), prefer}
+
+  context-free syntax %% attribute equations: syntactic sugar
+ 
+    "decorators" ADef* -> Decl {cons("Decorators")}
+
+    %% Single-line attribute definitions
+    AttributeTypeNoSort AttributeNameValue    -> ADef {cons("ADefNoPattern"), avoid}
+    OptChildDot AttributeDef ":=" Term Where* -> AttributeNameValue {cons("ADefTerm")}
+    
+    %% Attribute definition blocks/groups
+    AttributeType Pattern      ":" NameDefBlockDef+    -> ADef {cons("NameDefBlock")}
+    AttributeType AttributeDef ":" PatternDefBlockDef+ -> ADef {cons("PatternDefBlock")}
+    
+    %% Definitions grouped in a NameDefBlock
+    ChildDot AttributeDef ":=" Term     Where* -> NameDefBlockDef {cons("ADefTerm")}
+    ChildDot AttributeDef "="  Strategy        -> NameDefBlockDef {cons("ADefStrategy")}
+
+    %% Definitions grouped in a PatternDefBlock
+    Pattern OptDotChild "->" ResultTerm NoWhere* -> PatternDefBlockDef {cons("APDefTerm")}
+    Pattern OptDotChild "->" Term       Where+   -> PatternDefBlockDef {cons("APDefTerm")}
+
+    "where" Strategy -> Where {cons("Where")}
+    "with" Strategy  -> Where {cons("With")}
+    UNDEFINED        -> NoWhere
+
+  context-free syntax %% Misc.
+    
+    "rewrite" Pattern "->" Term Where* -> ADef {cons("AnonymousRewriteRule")}
+      
+    "id"   -> PreTerm {cons("IdTerm")}
+    "fail" -> Term {cons("FailTerm")}
+
+  context-free syntax
+
+    %%  Either reject suffices, but the first may be too specific/confusing
+    %%  "<" Strategy ">" AttributeKeyword -> Term {reject}
+    AttributeKeyword -> Var {reject}
+    
+    AttributeKeyword -> ImportModName {reject}
+  
+  lexical syntax
+    
+    "eq"         -> AttributeKeyword
+    "def"        -> AttributeKeyword
+    "attributes" -> AttributeKeyword
+    "decorators" -> AttributeKeyword
+    "decorator"  -> AttributeKeyword
+    "rewrite"    -> AttributeKeyword
+  
+  context-free restrictions
+  
+    "eq"
+    "def"
+    "root"
+    "rewrite"
+    "decorator"
+    "decorators"
+    "attributes" -/- [a-zA-Z0-9\'\-\_]
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-AttributesMix.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-AttributesMix.sdf	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,104 @@
+module Stratego-AttributesMix[Ctx0]
+imports Stratego-Attributes
+          [ NoWhere             => NoWhere[[Ctx0]]
+            Where               => Where[[Ctx0]]
+            PatternDefBlockDef  => PatternDefBlockDef[[Ctx0]]
+            NameDefBlockDef     => NameDefBlockDef[[Ctx0]]
+            Pattern             => Pattern[[Ctx0]]
+            NoSortDot           => NoSortDot[[Ctx0]]
+            OptSortDot          => OptSortDot[[Ctx0]]
+            OptDotChild         => OptDotChild[[Ctx0]]
+            OptChildDot         => OptChildDot[[Ctx0]]
+            DotChild            => DotChild[[Ctx0]]
+            ChildDot            => ChildDot[[Ctx0]]
+            DefType             => DefType[[Ctx0]]
+            AttributeNameValue  => AttributeNameValue[[Ctx0]]
+            AttributeTypeNoSort => AttributeTypeNoSort[[Ctx0]]
+            AttributeType       => AttributeType[[Ctx0]]
+            ADef                => ADef[[Ctx0]]
+            AttributeCallLHS    => AttributeCallLHS[[Ctx0]]
+            AttributeCall       => AttributeCall[[Ctx0]]
+            DecoratorRefNoArgs  => DecoratorRefNoArgs[[Ctx0]]
+            DecoratorRef        => DecoratorRef[[Ctx0]]
+            AttributeRef        => AttributeRef[[Ctx0]]
+            AttributeDef        => AttributeDef[[Ctx0]]
+            AttributeDecl       => AttributeDecl[[Ctx0]]
+            DecoratorId         => DecoratorId[[Ctx0]]
+            AttributeDeclId     => AttributeDeclId[[Ctx0]]
+            AttributeKeyword    => AttributeKeyword[[Ctx0]]
+            AttributeId         => AttributeId[[Ctx0]]
+            TermNoApp           => TermNoApp[[Ctx0]]
+            ResultTerm          => ResultTerm[[Ctx0]]
+            LineEnd             => LineEnd[[Ctx0]]
+            SingleLineLayout    => SingleLineLayout[[Ctx0]]
+            RuleNames           => RuleNames[[Ctx0]]
+            RuleDec             => RuleDec[[Ctx0]]
+            DynRuleScopeId      => DynRuleScopeId[[Ctx0]]
+            DynRuleId           => DynRuleId[[Ctx0]]
+            DynRuleDef          => DynRuleDef[[Ctx0]]
+            ScopeLabels         => ScopeLabels[[Ctx0]]
+            RuleCond            => RuleCond[[Ctx0]]
+            Rule                => Rule[[Ctx0]]
+            RuleDef             => RuleDef[[Ctx0]]
+            Overlay             => Overlay[[Ctx0]]
+            SwitchCase          => SwitchCase[[Ctx0]]
+            StrategyCurly       => StrategyCurly[[Ctx0]]
+            StrategyAngle       => StrategyAngle[[Ctx0]]
+            Kind                => Kind[[Ctx0]]
+            LID                 => LID[[Ctx0]]
+            ImportModName       => ImportModName[[Ctx0]]
+            Decl                => Decl[[Ctx0]]
+            Module              => Module[[Ctx0]]
+            StrategyParen       => StrategyParen[[Ctx0]]
+            Typedid             => Typedid[[Ctx0]]
+            Anno                => Anno[[Ctx0]]
+            EmptyId             => EmptyId[[Ctx0]]
+            StrategyDef         => StrategyDef[[Ctx0]]
+            SVar                => SVar[[Ctx0]]
+            Def                 => Def[[Ctx0]]
+            Type                => Type[[Ctx0]]
+            RetType             => RetType[[Ctx0]]
+            ArgType             => ArgType[[Ctx0]]
+            FunType             => FunType[[Ctx0]]
+            ConstType           => ConstType[[Ctx0]]
+            Opdecl              => Opdecl[[Ctx0]]
+            Sort                => Sort[[Ctx0]]
+            Sdecl               => Sdecl[[Ctx0]]
+            Wld                 => Wld[[Ctx0]]
+            ID                  => ID[[Ctx0]]
+            Var                 => Var[[Ctx0]]
+            CharChar            => CharChar[[Ctx0]]
+            Char                => Char[[Ctx0]]
+            Padding             => Padding[[Ctx0]]
+            Dollar4             => Dollar4[[Ctx0]]
+            QuotedBracket4      => QuotedBracket4[[Ctx0]]
+            StringQuotedChars4  => StringQuotedChars4[[Ctx0]]
+            StringQuotedPart4   => StringQuotedPart4[[Ctx0]]
+            Dollar3             => Dollar3[[Ctx0]]
+            QuotedBracket3      => QuotedBracket3[[Ctx0]]
+            StringQuotedChars3  => StringQuotedChars3[[Ctx0]]
+            StringQuotedPart3   => StringQuotedPart3[[Ctx0]]
+            Dollar2             => Dollar2[[Ctx0]]
+            QuotedBracket2      => QuotedBracket2[[Ctx0]]
+            StringQuotedChars2  => StringQuotedChars2[[Ctx0]]
+            StringQuotedPart2   => StringQuotedPart2[[Ctx0]]
+            Dollar1             => Dollar1[[Ctx0]]
+            QuotedBracket1      => QuotedBracket1[[Ctx0]]
+            StringQuotedChars1  => StringQuotedChars1[[Ctx0]]
+            StringQuotedPart1   => StringQuotedPart1[[Ctx0]]
+            StringQuotation     => StringQuotation[[Ctx0]]
+            StrChar             => StrChar[[Ctx0]]
+            String              => String[[Ctx0]]
+            Real                => Real[[Ctx0]]
+            Int                 => Int[[Ctx0]]
+            Keyword             => Keyword[[Ctx0]]
+            UCID                => UCID[[Ctx0]]
+            LCID                => LCID[[Ctx0]]
+            LId                 => LId[[Ctx0]]
+            Id                  => Id[[Ctx0]]
+            ModNamePart         => ModNamePart[[Ctx0]]
+            ModName             => ModName[[Ctx0]]
+            PreTerm             => PreTerm[[Ctx0]]
+            Term                => Term[[Ctx0]]
+            StrategyMid         => StrategyMid[[Ctx0]]
+            Strategy            => Strategy[[Ctx0]] ]

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/editor-common.generated.str	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,254 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-spoofaxlang-file
+  parse-spoofaxlang-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/SpoofaxLang.tbl)>
+    )
+
+  parse-string = parse-spoofaxlang-string
+  parse-spoofaxlang-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/SpoofaxLang.tbl)>
+    )
+  
+  parse-stream = parse-spoofaxlang-stream
+  parse-spoofaxlang-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/SpoofaxLang.tbl)>
+    )
+
+  pp-spoofaxlang-string =
+    ast2abox(|[<import-term(include/SpoofaxLang.generated.pp.af)>,
+               <import-term(include/SpoofaxLang.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "SpoofaxLang", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    !Some(<id>); all(s); ?Some(<id>)
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/spoofaxlang.str file. These definitions should also be automatically 
+  // generated in the imported include/SpoofaxLang.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/plugin.xml	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="spo" description="SpoofaxLang" language="SpoofaxLang" derivedFrom="DynamicRoot" validator="org.strategoxt.imp.editors.spoofax.SpoofaxLangValidator" validatorClass="org.strategoxt.imp.editors.spoofax.SpoofaxLangValidator"></language>
+       </extension>
+       <extension id="org.strategoxt.imp.editors.spoofax.parser" name="SpoofaxLang Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="org.strategoxt.imp.editors.spoofax.SpoofaxLangParseController" language="SpoofaxLang">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Common.sdf	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9\_\-]* -> ID
+    "-"? [0-9]+            -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_\-]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.pp	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also SpoofaxLang.generated.pp)
+[]

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,102 @@
+%% Grammar for the SpoofaxLang language
+%% By default, based on an example "entities" syntax
+module SpoofaxLang
+
+imports
+  Common
+  Concepts
+  EditorServiceMix[ESV]
+  Stratego-AttributesMix[STR] [
+    "imports" ImportModName* -> Decl {cons("Imports")}
+      => UNDEFINED -> IGNORED
+  ]
+  SDFMix[SDF] [
+    "definition" Definition -> SDF {cons("Definition")}
+      => UNDEFINED -> IGNORED
+    "module" ModuleName list:ImpSection* Sections -> Module {cons("module")}
+      => UNDEFINED -> IGNORED
+    "left":Grammar "right":Grammar -> Grammar {assoc, cons("conc-grammars")}
+      => UNDEFINED -> IGNORED
+    ImpSection -> Grammar {cons("imp-section")}
+      => UNDEFINED -> IGNORED
+  ]
+
+exports
+
+  context-free start-symbols
+    Start
+
+  lexical syntax
+    {ID "/"}+       -> QID 
+    {ID ("/"|".")}+ -> QIDWithDots
+
+  context-free syntax
+  
+    "module" ModuleName Section* -> Start {cons("Module")}
+    
+    Grammar[[SDF]] -> Section
+    Decl[[STR]]    -> Section
+    Section[[ESV]] -> Section
+    ImportSection  -> Section
+    ConceptSection -> Section
+    
+    ExportsOrHiddens Grammar[[SDF]] -> Section {ast("<2>"), non-assoc}    
+    "exports"                       -> ExportsOrHiddens {cons("Exports"), deprecated}
+    "hiddens"                       -> ExportsOrHiddens {cons("Hiddens"), deprecated}
+
+    
+    %% TODO: Support SDF .def "definitions"?
+    
+    %% TODO: Mark deprecated, ast, and maybe other attrs as keyword using a {prefer, ast} production
+  
+  context-free syntax %% Imports
+    
+    %% TODO: SDF: "retains" clause eliminates need for "hiddens" section. except we need something to hide the start symbols
+    %% Maybe a "with start symbols" clause, combined with a warning if the syntax has start symbols but the clause is not specified?
+    
+    "imports" Import*          -> ImportSection {cons("Imports")}
+    "unimports" Import*        -> ImportSection {cons("Unimports")}
+    
+    QID "[" Symbols[[SDF]] "]" -> ModuleName  {cons("ParamName")}
+    QID                        -> ModuleName  {cons("Name")}
+    
+    ModuleName                           -> Import {cons("Import")}
+    ModuleName "retain" Renamings[[SDF]] -> Import {cons("ImportRetain")}
+    ModuleName          Renamings[[SDF]] -> Import {cons("ImportRename")}
+    "package" QIDWithDots                -> Import {cons("PackageImport")}
+    "(" Import ")"                       -> Import {bracket, deprecated} %% SDF-style import
+    
+    "project"           -> ModuleName {reject}
+    "retain"            -> ModuleName {reject}
+    "with"              -> ModuleName {reject} %% future use?
+    "unimports"         -> ModuleName {reject}
+    
+    ReservedName[[ESV]] -> ModuleName {reject}
+    
+    "imports"           -> ModuleName {reject}
+    "overlays"          -> ModuleName {reject}
+    "rules"             -> ModuleName {reject}
+    "signature"         -> ModuleName {reject}
+    "strategies"        -> ModuleName {reject}
+    "attributes"        -> ModuleName {reject}
+    
+    "aliases"           -> ModuleName {reject}
+    "lexical"           -> ModuleName {reject}
+    "priorities"        -> ModuleName {reject}
+    "context-free"      -> ModuleName {reject}
+    "definition"        -> ModuleName {reject}
+    "syntax"            -> ModuleName {reject}
+    "variables"         -> ModuleName {reject}
+    "module"            -> ModuleName {reject}
+    "imports"           -> ModuleName {reject}
+    "exports"           -> ModuleName {reject}
+    "hiddens"           -> ModuleName {reject}
+    "left"              -> ModuleName {reject}
+    "right"             -> ModuleName {reject}
+    "assoc"             -> ModuleName {reject}
+    "non-assoc"         -> ModuleName {reject}
+    "bracket"           -> ModuleName {reject}
+    "sorts"             -> ModuleName {reject}
+    "bracket"           -> ModuleName {reject}
+    "sorts"             -> ModuleName {reject}
+    "restrictions"      -> ModuleName {reject}

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/example.spo
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/example.spo	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,19 @@
+module example
+
+imports
+
+  Common
+
+exports
+
+context-free start-symbols
+
+  Start
+
+context-free syntax
+
+  "Module" ID -> Start {"Module"}
+
+rules
+
+  a : B -> C
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/check.str	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,51 @@
+module check
+
+imports
+  libstratego-lib
+  include/SpoofaxLang
+  lib/editor-common.generated
+
+rules
+
+  // Analysis: does a topdown traversal of the tree,
+  // and tries to apply the record-entity rule.
+  analyze:
+    t -> t
+    with
+      <topdown(try(record-entity))> t
+
+  // Records the definition of an entity in a dynamic rule GetEntity.
+  record-entity:
+    Entity(x, body) -> Entity(x, body)
+    with
+      // For a name 'x', GetEntity will return the original 'x' tree node
+      rules(
+        GetEntity :+ x -> x
+      )
+rules
+    
+  // Reports an error if a property type is undefined.
+  // This error is reported on the type name 'type'.
+  constraint-error:
+    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
+    where
+      not(!type => "String"); // String and Int are built-in types
+      not(!type => "Int");
+      not(<GetEntity> type) // no entity for this type
+  
+  // Reports an error if an entity is defined more than once.
+  // This constraint is implemented by testing if the "bag" of
+  // all entities x is not a singleton list.
+  constraint-error:
+    Entity(x, _) -> (x, $[Duplicate entity name])
+    where
+      not(<bagof-GetEntity> x => [_])
+  
+  constraint-warning:
+    Entity(x, _) -> (x, $[Entity names must start with a capital])
+    where
+      not(<string-starts-with-capital> x)
+  
+  constraint-note:
+    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
+                                      (this note is defined in trans/check.str) ])

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/generate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/generate.str	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,47 @@
+module generate
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/SpoofaxLang
+  lib/editor-common.generated
+
+rules
+
+  to-java:
+    Module(x, d*) ->
+    $[ package [x];
+       
+       [d'*]
+     ]
+    with
+      d'* := <to-java> d*
+  
+  to-java:
+    Entity(x, p*) ->
+    $[ class [x] {
+           [p'*]
+       }
+     ]
+    with
+      p'* := <to-java> p*
+
+  to-java:
+    Property(x, Type(t)) -> $[
+      private [t] [x];
+      
+      public [t] get_[x] {
+          return [x];
+      }
+      
+      public void set_[x] ([t] [x]) {
+          this.[x] = [x];    
+      }
+  ]
+  
+  to-java:
+    Type(t) -> t
+
+  to-java:
+    t* -> <map(to-java)> t*

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Mon Nov  1 14:35:57 2010	(r21313)
@@ -0,0 +1,61 @@
+module spoofaxlang
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/SpoofaxLang
+  lib/editor-common.generated
+  check
+  generate
+
+rules // Main editor interface (defined by editor/SpoofaxLang-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast;
+      notes    := <collect-all(constraint-note, conc)> ast
+  
+  // Transforms a selection to Java
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
+    where
+      <debug(!"Resolve: ")> node; 
+      Type(type) := node; 
+      target     := <GetEntity> type
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) ->
+    ["String", "Int" | proposals]
+    where
+      if !node => Type(COMPLETION(prefix)) then
+        proposals := <all-keys-GetEntity>
+      end

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService.sdf	Mon Nov  1 14:08:20 2010	(r21312)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService.sdf	Mon Nov  1 14:35:57 2010	(r21313)
@@ -10,7 +10,7 @@
   CompletionsService
   BuildersService
 
-exports
+hiddens
 
   context-free start-symbols
     Module

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/how-not-to.txt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/how-not-to.txt	Mon Nov  1 14:08:20 2010	(r21312)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/how-not-to.txt	Mon Nov  1 14:35:57 2010	(r21313)
@@ -12,3 +12,4 @@
 10. Especially DON'T invoke your favorite deity through prayer and/or song at this point
 11. If you're using a testing directory for updates, be sure you DON'T adapt site.xml with the new url
 12. Finally, to test it, DON'T use a clean Eclipse installation and DON'T use a clean workspace (Eclipse 3.4+ may do workspace-based caching!)
+13. DON'T assume 1.0.10 comes after 1.0.9

From L.C.L.Kats at tudelft.nl  Wed Nov  3 10:12:47 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 03 Nov 2010 09:12:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21314 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.sdf
	org.strategoxt.imp.editors.stratego
	org.strategoxt.imp.editors.stratego/editor
	org.strategoxt.imp.editors.stra...
Message-ID: <201011030912.oA39Clpa007219@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Nov  3 09:12:45 2010
New Revision: 21314
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21314&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml	Mon Nov  1 14:35:57 2010	(r21313)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml	Wed Nov  3 09:12:45 2010	(r21314)
@@ -50,9 +50,11 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
@@ -151,9 +153,12 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${syntax}">
+                <srcfileset dir="${basedir}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Mon Nov  1 14:35:57 2010	(r21313)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Wed Nov  3 09:12:45 2010	(r21314)
@@ -50,11 +50,9 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
-            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
-            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
-            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
-            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
@@ -153,12 +151,9 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${basedir}">
+                <srcfileset dir="${syntax}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
-                <srcfileset dir="${lib}">
-                    <include name="**/*.def"/>
-                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Syntax.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Syntax.esv	Mon Nov  1 14:35:57 2010	(r21313)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Syntax.esv	Wed Nov  3 09:12:45 2010	(r21314)
@@ -15,10 +15,11 @@
                   ${ }
                   $< >
                   $( )
-                  " <" > // hack: interacts with ->
-                  "=<" > // hack: interacts with ->
-                  "(<" > // hack: interacts with ->
-                  "|<" > // hack: interacts with ->
+                  // < is tricky since it interacts with <+ and < +
+                  //" <" > // hack: interacts with ->
+                  //"=<" > // hack: interacts with ->
+                  //"(<" > // hack: interacts with ->
+                  //"|<" > // hack: interacts with ->
   
   indent after:
     then

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Mon Nov  1 14:35:57 2010	(r21313)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Wed Nov  3 09:12:45 2010	(r21314)
@@ -23,7 +23,7 @@
       end;
       if <file-exists> $[[project-path]/.warn-global-analysis] then
         rules(WarnAnalysis: _)
-    end
+      end
     with
       <basic-desugar-top> ast;
       declare-globals-top;
@@ -164,8 +164,8 @@
       x'     := x{cookie}
     with
       // Declare congruence
-      (x, n) := <signature-of>;
-      sig'   := (x, n, 0);
+      (x'', n) := <signature-of>;
+      sig'     := (x'', n, 0);
       rules(
         DeclareCookie: sig' -> cookie
       )
@@ -182,8 +182,8 @@
       x'     := x{cookie}
     with
       // Declare congruence
-      (x, n) := <signature-of>;
-      sig'   := (x, n, 0);
+      (x'', n) := <signature-of>;
+      sig'     := (x'', n, 0);
       rules(
         DeclareCookie: sig' -> cookie
       )

From L.C.L.Kats at tudelft.nl  Wed Nov  3 10:13:09 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 03 Nov 2010 09:13:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21315 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: editor
	lib syntax trans
Message-ID: <201011030913.oA39D9qw007227@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Nov  3 09:13:08 2010
New Revision: 21315
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21315&sc=1

Log:
Added Stratego/SDF/ESV output builders

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/sdf-desugar.str
      - copied unchanged from r21286, spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/sdf-desugar.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/sdf-parenthesize.str
      - copied, changed from r21218, sglr-recovery/trunk/permissive-grammars/trans/make-permissive/lib/sdf-parenthesize.astr
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/generate.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Wed Nov  3 09:12:45 2010	(r21314)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Wed Nov  3 09:13:08 2010	(r21315)
@@ -16,7 +16,16 @@
                                                                                                                                
   observer                  : editor-analyze                                                                                   
                                                                                                                                
-  builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
-  builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder : "Show abstract syntax (for selection)" =
+    generate-aterm (openeditor) (realtime) (meta) (source)  
+    
+  builder : "Show SDF (for selection)" =
+    generate-sdf (openeditor) (realtime)           
+    
+  builder : "Show Stratego (for selection)" =
+    generate-str (openeditor) (realtime)      
+    
+  builder : "Show Editor Descriptor (for selection)" =
+    generate-esv (openeditor) (realtime)              
                                                                                                                                
   // on save: generate-java                                                                                                    
\ No newline at end of file

Copied: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/sdf-desugar.str (from r21286, spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/sdf-desugar.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/sdf-desugar.str	Wed Nov  3 09:13:08 2010	(r21315, copy of r21286, spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/sdf-desugar.str)
@@ -0,0 +1,42 @@
+/**
+ * sdf-desugar implements the following desugarings:
+ *
+ *   - remove double quotes in String literals: cons, lit
+ *   - replace no-attrs by attrs([])
+ *   - add quotes to generated quoted stings
+ *
+ * @author Martin Bravenboer <martin.bravenboer at gmail.com>
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+module sdf2imp/lib/sdf-desugar
+
+imports
+  libstratego-aterm
+
+strategies
+  
+  sdf-desugar =
+      topdown(repeat(SdfDesugar); try(SdfDesugarOnce))
+
+  SdfDesugar :
+    no-attrs() -> attrs([])
+
+  SdfDesugar :
+    term(default(t)) -> term(t)
+
+rules
+
+  SdfDesugarOnce =
+    alltd(EnsureQuotes);
+    term(implode-aterm)
+
+  SdfDesugarOnce :
+    lit(s) -> lit(<un-double-quote> s)
+
+  SdfDesugarOnce :
+    ci-lit(s) -> ci-lit(<un-single-quote> s)
+  
+  EnsureQuotes :
+    quoted(s) -> quoted(<double-quote> s)
+    where
+      not(<un-double-quote> s)

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/sdf-parenthesize.str (from r21218, sglr-recovery/trunk/permissive-grammars/trans/make-permissive/lib/sdf-parenthesize.astr)
==============================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/lib/sdf-parenthesize.astr	Mon Sep  6 14:18:19 2010	(r21218, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/sdf-parenthesize.str	Wed Nov  3 09:13:08 2010	(r21315)
@@ -2,7 +2,7 @@
 
 imports
   libstratego-lib
-  Sdf2
+  libstratego-sglr
 
 
 strategies

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Wed Nov  3 09:12:45 2010	(r21314)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Wed Nov  3 09:13:08 2010	(r21315)
@@ -12,13 +12,13 @@
   ]
   SDFMix[SDF] [
     "definition" Definition -> SDF {cons("Definition")}
-      => UNDEFINED -> IGNORED
+      => -> IGNORED
     "module" ModuleName list:ImpSection* Sections -> Module {cons("module")}
-      => UNDEFINED -> IGNORED
+      => -> IGNORED
     "left":Grammar "right":Grammar -> Grammar {assoc, cons("conc-grammars")}
-      => UNDEFINED -> IGNORED
+      => -> IGNORED
     ImpSection -> Grammar {cons("imp-section")}
-      => UNDEFINED -> IGNORED
+      => -> IGNORED
   ]
 
 exports
@@ -34,13 +34,13 @@
   
     "module" ModuleName Section* -> Start {cons("Module")}
     
-    Grammar[[SDF]] -> Section
-    Decl[[STR]]    -> Section
-    Section[[ESV]] -> Section
+    Grammar[[SDF]] -> Section {cons("SDFSection")}
+    Decl[[STR]]    -> Section {cons("STRSection")}
+    Section[[ESV]] -> Section {cons("ESVSection")}
     ImportSection  -> Section
     ConceptSection -> Section
     
-    ExportsOrHiddens Grammar[[SDF]] -> Section {ast("<2>"), non-assoc}    
+    ExportsOrHiddens Grammar[[SDF]] -> Section {cons("SDFSectionEH"), non-assoc}    
     "exports"                       -> ExportsOrHiddens {cons("Exports"), deprecated}
     "hiddens"                       -> ExportsOrHiddens {cons("Hiddens"), deprecated}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Wed Nov  3 09:12:45 2010	(r21314)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Wed Nov  3 09:13:08 2010	(r21315)
@@ -4,58 +4,105 @@
   libstratego-lib
   libstratego-gpp
   libstratego-aterm
+  libstratego-sglr
+  libstratego-sdf
+  libstrc
   include/SpoofaxLang
   lib/editor-common.generated
-  check
-  generate
+  lib/sdf-desugar
+  lib/sdf-parenthesize
 
-rules // Main editor interface (defined by editor/SpoofaxLang-Builders and -References.esv)
+signature constructors
   
-  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
-  // each a list of (term, message) tuples or simply (message) terms.
-  editor-analyze:
-    (ast, path, project-path) -> (ast, errors, warnings, notes)
-    with
-      editor-init;
-      analyze;
-      errors   := <collect-all(constraint-error, conc)> ast;
-      warnings := <collect-all(constraint-warning, conc)> ast;
-      notes    := <collect-all(constraint-note, conc)> ast
-  
-  // Transforms a selection to Java
-  generate-java:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"java")> path;
-      result   := <to-java> selected
+  Module : ID * List(Import) * List(Section) -> Module
+
+rules
+
+  editor-analyze = !([], [], [])
   
-  // Prints the abstract syntax ATerm of a selection.
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       filename := <guarantee-extension(|"aterm")> path;
       result   := selected // we just return the input term
+
+  generate-sdf:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"sdf")> path;
+      result   := <pp-sdf-string'> <to-sdf> (path, selected)
+
+  pp-sdf-string' =
+    sdf-desugar;
+    parenthesize-Sdf2;
+  	sdf-ppfix;
+    ast2box(|[<pp-table-sdf>]);
+    box2text-string(|80)
+
+  generate-str:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"str")> path;
+      result   := <pp-stratego-string> <parenthesize-Stratego> <to-str> (path, selected)
+
+  generate-esv:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|".packed.esv")> path;
+      result   := <to-esv> (path, selected)
+  
+  find-spoofax-module-name:
+    (path, def) -> name
+    with
+      Module(name, _) := def
+    <+
+      name := <remove-extension> <base-filename> path
+
+rules
+
+  to-sdf:
+    (path, def) -> 'module(name', [], [exports(sections')])
+    with
+      name := <find-spoofax-module-name>;
+      if !name => ParamName(n, p) then
+        name' := parameterized(n, p)
+      else
+        Name(name') := name
+      end;
+      sections  := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> def;
+      sections' := <list-to-conc-grammars> sections
+  
+  list-to-conc-grammars:
+    [g1, g2 | gs] -> conc-grammars(g1, <list-to-conc-grammars> [g2 | gs])
   
-  // Resolves a reference when the user control-clicks or presses F3 in the editor.
-  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
-  editor-resolve:
-    (node, position, ast, path, project-path) -> target
-    where
-      <debug(!"Resolve: ")> node; 
-      Type(type) := node; 
-      target     := <GetEntity> type
-
-  // Returns "hover help" information for a particular node in the editor.
-  // For references, this rule is invoked using the resolved term.
-  editor-hover:
-    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
-
-  // Completes an identifier when the user presses control-space
-  // (the completion identifier in the AST provides additional context information)
-  editor-complete:
-    (node, position, ast, path, project-path) ->
-    ["String", "Int" | proposals]
-    where
-      if !node => Type(COMPLETION(prefix)) then
-        proposals := <all-keys-GetEntity>
-      end
+  list-to-conc-grammars:
+    [g1] -> g1
+  
+  list-to-conc-grammars:
+    [] -> []
+
+rules
+
+  to-str:
+    (path, def) -> Module(name', sections)
+    with
+      name := <find-spoofax-module-name>;
+      if !name => ParamName(n, p) then
+        name' := n
+      else
+        Name(name') := name
+      end;
+      sections  := <collect-om(?STRSection(<id>), conc)> def
+
+rules
+
+  to-esv:
+    (path, def) -> Module(name', [], sections)
+    with
+      name := <find-spoofax-module-name>;
+      if !name => ParamName(n, p) then
+        name' := n
+      else
+        Name(name') := name
+      end;
+      sections  := <collect-om(?ESVSection(<id>), conc)> def

From L.C.L.Kats at tudelft.nl  Wed Nov  3 14:29:04 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 03 Nov 2010 13:29:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21316 - in
	spoofax-imp/trunk/org.strategoxt.imp.nativebundle: .
	.settings META-INF native/linux native/windows
	src/org/strategoxt/imp/nativebundle
Message-ID: <201011031329.oA3DT4WW011488@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Nov  3 13:29:04 2010
New Revision: 21316
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21316&sc=1

Log:
Merged back to revision 2837, going back to cygwin for now.

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/windows/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.settings/org.eclipse.jdt.core.prefs   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/implodePT
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/sdf2table
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java   (contents, props changed)

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	Wed Nov  3 09:13:08 2010	(r21315)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	Wed Nov  3 13:29:04 2010	(r21316)
@@ -12,4 +12,3 @@
  org.eclipse.core.runtime,
  org.strategoxt.imp.runtime
 Export-Package: org.strategoxt.imp.nativebundle
-Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties	Wed Nov  3 09:13:08 2010	(r21315)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties	Wed Nov  3 13:29:04 2010	(r21316)
@@ -5,5 +5,5 @@
                native/
 bin.excludes = native/macosx/.svn/,\
                native/linux/.svn/,\
-               native/windows/.svn/,\
+               native/cygwin/.svn/,\
                native/.svn/

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/implodePT
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/sdf2table
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	Wed Nov  3 09:13:08 2010	(r21315)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	Wed Nov  3 13:29:04 2010	(r21316)
@@ -9,6 +9,9 @@
 import java.io.Writer;
 import java.net.URL;
 import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
 
 import org.eclipse.core.runtime.FileLocator;
 import org.eclipse.core.runtime.Platform;
@@ -39,6 +42,8 @@
 	
 	private final xtc_command_1_0 proceed = xtc_command_1_0.instance;
 	
+	private final String[] windowsEnvironment = createWindowsEnvironment();
+	
 	private String binaryPath;
 	
 	private String binaryExtension;
@@ -70,11 +75,11 @@
 		if (os.equals(Platform.OS_LINUX)) {
 			subdir = "linux";
 		} else if (os.equals(Platform.OS_WIN32)){
-			subdir = "windows";
+			subdir = "cygwin";
 		} else if (os.equals(Platform.OS_MACOSX)) {
 			subdir = "macosx";
 		} else {
-			throw new UnsupportedOperationException("Platform is not supported: " + Platform.getOS());
+			throw new UnsupportedOperationException("Platform is not supported"); // TODO: print platform
 		}
 		
 		URL url = Activator.getInstance().getContext().getBundle().getResource(NATIVE_PATH + subdir);
@@ -141,6 +146,11 @@
 
 	private boolean invoke(Context context, String command, IStrategoTerm[] argList) {
 		String[] commandArgs = SSL_EXT_call.toCommandArgs(binaryPath + command, argList);
+		// Disabled this check since Windows x64 might identify differently?
+		//String[] environment = Platform.getOS() == Platform.OS_WIN32
+		//	? createWindowsEnvironment()
+		//	: null;
+		String[] environment = windowsEnvironment;
 		IOAgent io = context.getIOAgent();
 		
 		try {
@@ -149,26 +159,40 @@
 			Writer err = io.getWriter(IOAgent.CONST_STDERR);
 			
 			err.write("Invoking native tool " + binaryPath + command + binaryExtension + " " + Arrays.toString(argList) + "\n");
-			int result = new NativeCallHelper().call(commandArgs, new File(io.getWorkingDir()), out, err);
+			int result = new NativeCallHelper().call(commandArgs, environment, new File(io.getWorkingDir()), out, err);
 			if (result != 0) {
 				Environment.logException("Native tool " + command
 						+ " exited with error code " + result
 						+ "\nCommand:\n  " + Arrays.toString(commandArgs)
+						+ "\nEnvironment:\n " + Arrays.toString(environment)
 						+ "\nWorking dir:\n  " + io.getWorkingDir());
 			}
 			return result == 0;
 		} catch (IOException e) {
 			throw new StrategoException("Could not call native tool " + command
 					+ "\nCommand:\n  " + Arrays.toString(commandArgs)
+					+ "\nEnvironment:\n " + Arrays.toString(environment)
 					+ "\nWorking dir:\n  " + io.getWorkingDir(), e);
 		} catch (InterruptedException e) {
 			throw new StrategoException("Could not call " + command, e);
 		} catch (RuntimeException e) {
 			throw new StrategoException("Could not call native tool " + command
 					+ "\nCommand:\n  " + Arrays.toString(commandArgs)
+					+ "\nEnvironment:\n " + Arrays.toString(environment)
 					+ "\nWorking dir:\n  " + io.getWorkingDir(), e);
 		}
 	}
+	
+	private static String[] createWindowsEnvironment() {
+		Map<String, String> envp = new HashMap<String, String>(System.getenv());
+		envp.put("CYGWIN", "nodosfilewarning");
+		String[] result = new String[envp.size()];
+		int i = 0;
+		for (Entry<String, String> entry : envp.entrySet()) {
+			result[i++] = entry.getKey() + "=" + entry.getValue();
+		}
+		return result;
+	}
 
 	private boolean makeExecutable(IOAgent io, String command) {
 		try {

From L.C.L.Kats at tudelft.nl  Wed Nov  3 14:36:53 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 03 Nov 2010 13:36:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21317 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.updatesite
Message-ID: <201011031336.oA3DarcM011562@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Nov  3 13:36:53 2010
New Revision: 21317
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21317&sc=1

Log:
Release 0.5.3.92

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Nov  3 13:29:04 2010	(r21316)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Nov  3 13:36:53 2010	(r21317)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.3.91"
+      version="0.5.3.92"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Nov  3 13:29:04 2010	(r21316)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Nov  3 13:36:53 2010	(r21317)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.3.91.jar" id="org.strategoxt.imp" version="0.5.3.91">
+   <feature url="features/org.strategoxt.imp_0.5.3.92.jar" id="org.strategoxt.imp" version="0.5.3.92">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From L.C.L.Kats at tudelft.nl  Wed Nov  3 14:46:30 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 03 Nov 2010 13:46:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21318 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.nativebundle/native/linux
	org.strategoxt.imp.updatesite
Message-ID: <201011031346.oA3DkUnx011702@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Nov  3 13:46:30 2010
New Revision: 21318
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21318&sc=1

Log:
Release 0.5.3.92, again, now with the old updated linux binaries from r21175

Replaced:
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/implodePT
      - copied unchanged from r21175, spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/implodePT
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/sdf2table
      - copied unchanged from r21175, spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/sdf2table
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Nov  3 13:36:53 2010	(r21317)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Nov  3 13:46:30 2010	(r21318)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.3.92"
+      version="0.5.3.92" 
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Copied: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/implodePT (from r21175, spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/implodePT)
==============================================================================
Binary file (source and/or target). No diff available.

Copied: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/sdf2table (from r21175, spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/sdf2table)
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Nov  3 13:36:53 2010	(r21317)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Wed Nov  3 13:46:30 2010	(r21318)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.3.92.jar" id="org.strategoxt.imp" version="0.5.3.92">
+   <feature url="features/org.strategoxt.imp_0.5.3.92.jar" id="org.strategoxt.imp" version="0.5.3.92"> 
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From L.C.L.Kats at tudelft.nl  Thu Nov  4 10:20:12 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 04 Nov 2010 09:20:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21319 -
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive
	spoofax-imp/trunk/org.strategoxt.imp.generator/lib
Message-ID: <201011040920.oA49KCCg027799@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Nov  4 09:20:11 2010
New Revision: 21319
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21319&sc=1

Log:
Added missing WATEREOF grammar rule.

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr
==============================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr	Wed Nov  3 13:46:30 2010	(r21318)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr	Thu Nov  4 09:20:11 2010	(r21319)
@@ -22,6 +22,7 @@
          WATERTOKEN                     -> WATER
          WATERTOKENSEPARATOR            -> WATER
          WATERTOKENSTAR                 -> WATER
+                                        -> WATEREOF
   
        lexical restrictions    
          WATERTOKEN     -/- [A-Za-z0-9\_]

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
==============================================================================
Binary file (source and/or target). No diff available.

From L.C.L.Kats at tudelft.nl  Thu Nov  4 10:33:01 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 04 Nov 2010 09:33:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21320 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.stratego
	org.strategoxt.imp.feature org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2...
Message-ID: <201011040933.oA49X1fk027900@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Nov  4 09:33:00 2010
New Revision: 21320
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21320&sc=1

Log:
Release 0.5.3.93
- Now creates a JDT .settings file to set the project to use Java 5

Added:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-jdt-prefs.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Thu Nov  4 09:20:11 2010	(r21319)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Thu Nov  4 09:33:00 2010	(r21320)
@@ -50,9 +50,11 @@
         
         <target name="refresh" if="eclipse.running">
             <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
-            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
             <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
@@ -151,9 +153,12 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfileset dir="${syntax}">
+                <srcfileset dir="${basedir}">
                     <include name="**/*.sdf"/>
                 </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
                 <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
             <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Thu Nov  4 09:20:11 2010	(r21319)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Thu Nov  4 09:33:00 2010	(r21320)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.3.92" 
+      version="0.5.3.93"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	Thu Nov  4 09:20:11 2010	(r21319)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	Thu Nov  4 09:33:00 2010	(r21320)
@@ -148,6 +148,7 @@
     create-common-trans;
     copy-jars;
     copy-def-file;
+    create-jdt-prefs;
     
     say(!"Build succesful.")
 

Added: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-jdt-prefs.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-jdt-prefs.str	Thu Nov  4 09:33:00 2010	(r21320)
@@ -0,0 +1,26 @@
+module sdf2imp/project/create-jdt-prefs
+
+imports
+  sdf2imp/util/-
+
+strategies
+
+  create-jdt-prefs =
+    <file-exists> ".settings/org.eclipse.jdt.core.prefs"
+  <+
+    pkgname  := <get-package-name-text>;
+    pkgpart* := <string-tokenize('.')> pkgname;
+    
+    <output-text-file(|[".settings"],"org.eclipse.jdt.core.prefs")>
+    $[ eclipse.preferences.version=1
+       org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+       org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+       org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+       org.eclipse.jdt.core.compiler.compliance=1.5
+       org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+       org.eclipse.jdt.core.compiler.debug.localVariable=generate
+       org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+       org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+       org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+       org.eclipse.jdt.core.compiler.source=1.5
+    ]

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Thu Nov  4 09:20:11 2010	(r21319)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Thu Nov  4 09:33:00 2010	(r21320)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.3.92.jar" id="org.strategoxt.imp" version="0.5.3.92"> 
+   <feature url="features/org.strategoxt.imp_0.5.3.93.jar" id="org.strategoxt.imp" version="0.5.3.93">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From R.B.Vermaas at tudelft.nl  Thu Nov  4 12:14:25 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 04 Nov 2010 11:14:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21321 - in
	sglr-recovery/trunk/permissive-grammars: . trans/make-permissive
Message-ID: <201011041114.oA4BEP7a030299@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Thu Nov  4 11:14:24 2010
New Revision: 21321
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21321&sc=1

Log:
permissive-grammars: use env vars in stead of \~/.nix-profile, should make it easier to build in buildfarm

Modified:
   sglr-recovery/trunk/permissive-grammars/Makefile
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile

Modified: sglr-recovery/trunk/permissive-grammars/Makefile
==============================================================================
--- sglr-recovery/trunk/permissive-grammars/Makefile	Thu Nov  4 09:33:00 2010	(r21320)
+++ sglr-recovery/trunk/permissive-grammars/Makefile	Thu Nov  4 11:14:24 2010	(r21321)
@@ -1,3 +1,4 @@
+JAVA_FRONT ?= $(HOME)/.nix-profile
 SDFGRAMMARS=$(wildcard */*/*.sdf)
 DEFGRAMMARS=$(wildcard */*/*.def) grammars/java-sql/Java-SQL.def
 PERGRAMMARS=$(DEFGRAMMARS:.def=-Permissive.gendef) \
@@ -11,7 +12,8 @@
 all : trans/make-permissive/make-permissive \
       $(PERGRAMMARS) \
       $(TABLES) \
-      grammars/experimental/Minimal.coredef
+      grammars/experimental/Minimal.coredef \
+      jar 
 
 jar java : .PHONY
 	$(MAKE) -C trans/make-permissive jar
@@ -32,7 +34,7 @@
 	         -Idef grammars/stratego-java/Stratego-Java-15.def \
 	         -Idef grammars/java-sql/sql92.def \
 	         -Idef grammars/webdsl/WebDSL.def \
-	         -I $(HOME)/.nix-profile/share/java-front-syntax
+	         -I $(JAVA_FRONT)/share/java-front-syntax
 
 %.coretbl : %.def
 	sdf2table -i $< -o $@ -m `basename $< .def` -n

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile
==============================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	Thu Nov  4 09:33:00 2010	(r21320)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	Thu Nov  4 11:14:24 2010	(r21321)
@@ -1,3 +1,4 @@
+STRATEGOXT ?= $(HOME)/.nix-profile
 ASTRS=$(wildcard *.astr) \
       $(wildcard */*.astr)
 
@@ -11,7 +12,7 @@
   -la stratego-xtc \
   -la stratego-sglr \
   -la stratego-gpp \
-  -la ~/.nix-profile/lib/libstratego-sdf.la \
+  -la $(STRATEGOXT)/lib/libstratego-sdf.la \
   -O 3
   
 all : make-permissive # jar
@@ -34,9 +35,9 @@
 
 %.def : %.sdf
 	pack-sdf -i $< -o $@ \
-	         -Idef $(HOME)/.nix-profile/share/aster/MixStratego-Attributes.def \
-	         -Idef $(HOME)/.nix-profile/share/aster/Stratego-Attributes.def \
-	         -Idef $(HOME)/.nix-profile/share/sdf/sdf-front/Stratego-Sdf2.def
+	         -Idef $(ASTER)/share/aster/MixStratego-Attributes.def \
+	         -Idef $(ASTER)/share/aster/Stratego-Attributes.def \
+	         -Idef $(STRATEGOXT)/share/sdf/sdf-front/Stratego-Sdf2.def
 
 clean :
 	rm -f $(STRS) syntax/*.tbl

From R.B.Vermaas at tudelft.nl  Thu Nov  4 12:15:04 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 04 Nov 2010 11:15:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21322 - in
	sglr-recovery/trunk: bridge-definitions
	bridge-definitions/syntax bridge-definitions/trans
	generalized-tokenizer/trans
Message-ID: <201011041115.oA4BF4p8030313@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Thu Nov  4 11:15:03 2010
New Revision: 21322
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21322&sc=1

Log:
use env vars in stead of \~/.nix-profile, should make it easier to build in buildfarm

Modified:
   sglr-recovery/trunk/bridge-definitions/Makefile
   sglr-recovery/trunk/bridge-definitions/syntax/Makefile
   sglr-recovery/trunk/bridge-definitions/trans/Makefile
   sglr-recovery/trunk/generalized-tokenizer/trans/Makefile

Modified: sglr-recovery/trunk/bridge-definitions/Makefile
==============================================================================
--- sglr-recovery/trunk/bridge-definitions/Makefile	Thu Nov  4 11:14:24 2010	(r21321)
+++ sglr-recovery/trunk/bridge-definitions/Makefile	Thu Nov  4 11:15:03 2010	(r21322)
@@ -1,3 +1,5 @@
+JAVA_FRONT ?= $(HOME)/.nix-profile
+
 all :
 	$(MAKE) -C syntax
 	$(MAKE) -C trans
@@ -19,7 +21,7 @@
 
 %.def : %.sdf
 	pack-sdf -i $< -o $@ \
-	         -I $(HOME)/.nix-profile/share/java-front-syntax
+	         -I $(JAVA_FRONT)/share/java-front-syntax
 
 %.coretbl : %.def
 	sdf2table -i $< -o $@ -m `basename $< .def` -n

Modified: sglr-recovery/trunk/bridge-definitions/syntax/Makefile
==============================================================================
--- sglr-recovery/trunk/bridge-definitions/syntax/Makefile	Thu Nov  4 11:14:24 2010	(r21321)
+++ sglr-recovery/trunk/bridge-definitions/syntax/Makefile	Thu Nov  4 11:15:03 2010	(r21322)
@@ -1,3 +1,6 @@
+ASTER ?= $(HOME)/.nix-profile
+STRATEGOXT ?= $(HOME)/.nix-profile
+
 all : Stratego-Attributes-Sdf2.tbl BridgeDefinition.tbl BridgeDefinition.str BridgeDefinition.pp BridgeDefinition.pp.af BridgeDefinition-pretty.pp.af Comments.pp.af
 
 %.tbl : %.def
@@ -5,9 +8,9 @@
 
 %.def : %.sdf
 	pack-sdf -i $< -o $@ \
-	         -Idef $(HOME)/.nix-profile/share/aster/MixStratego-Attributes.def \
-	         -Idef $(HOME)/.nix-profile/share/aster/Stratego-Attributes.def \
-	         -Idef $(HOME)/.nix-profile/share/sdf/sdf-front/Stratego-Sdf2.def
+	         -Idef $(ASTER)/share/aster/MixStratego-Attributes.def \
+	         -Idef $(ASTER)/share/aster/Stratego-Attributes.def \
+	         -Idef $(STRATEGOXT)/share/sdf/sdf-front/Stratego-Sdf2.def
 
 %.rtg : %.def
 	sdf2rtg -i $< -o $@ -m `basename $< .def` --ignore-missing-cons

Modified: sglr-recovery/trunk/bridge-definitions/trans/Makefile
==============================================================================
--- sglr-recovery/trunk/bridge-definitions/trans/Makefile	Thu Nov  4 11:14:24 2010	(r21321)
+++ sglr-recovery/trunk/bridge-definitions/trans/Makefile	Thu Nov  4 11:15:03 2010	(r21322)
@@ -1,3 +1,4 @@
+STRATEGOXT ?= $(HOME)/.nix-profile
 
 ASTRS=$(wildcard *.astr) \
       $(wildcard */*.astr) \
@@ -16,7 +17,7 @@
 	     -la stratego-lib \
 	     -la stratego-xtc \
 	     -la stratego-sglr \
-	     -la ~/.nix-profile/lib/libstratego-sdf.la
+	     -la $(STRATEGOXT)/lib/libstratego-sdf.la
 	     
 make-bridge.str : $(ASTRS) ../syntax/Stratego-Attributes-Sdf2.tbl ../syntax/BridgeDefinition.pp.af ../syntax/Comments.pp.af ../syntax/BridgeDefinition-pretty.pp.af
 	aster --verbose 2 -i $(ASTRS) -I ../syntax

Modified: sglr-recovery/trunk/generalized-tokenizer/trans/Makefile
==============================================================================
--- sglr-recovery/trunk/generalized-tokenizer/trans/Makefile	Thu Nov  4 11:14:24 2010	(r21321)
+++ sglr-recovery/trunk/generalized-tokenizer/trans/Makefile	Thu Nov  4 11:15:03 2010	(r21322)
@@ -1,10 +1,11 @@
 STRS=$(wildcard *.str) \
      $(wildcard */*.str)
 
+STRATEGOXT ?= ~/.nix-profile
 sdf2tokenizer : sdf2tokenizer.str $(STRS)
 	strc -i $< -m main-sdf2tokenizer \
 	     -la stratego-aterm \
 	     -la stratego-lib \
 	     -la stratego-xtc \
 	     -la stratego-sglr \
-	     -la ~/.nix-profile/lib/libstratego-sdf.la
+	     -la $(STRATEGOXT)/lib/libstratego-sdf.la

From L.C.L.Kats at tudelft.nl  Thu Nov  4 14:28:46 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 04 Nov 2010 13:28:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21323 - in
	spoofax-contrib: calculang calculang/trunk
	calculang/trunk/.externalToolBuilders
	calculang/trunk/.settings calculang/trunk/META-INF
	calculang/trunk/editor calcu...
Message-ID: <201011041328.oA4DSkpm032163@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Nov  4 13:28:45 2010
New Revision: 21323
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21323&sc=1

Log:
Added a simple calculator language.

Added:
   spoofax-contrib/calculang/
   spoofax-contrib/calculang/trunk/
   spoofax-contrib/calculang/trunk/.classpath
   spoofax-contrib/calculang/trunk/.externalToolBuilders/
   spoofax-contrib/calculang/trunk/.externalToolBuilders/Calculang build.main.xml.launch
   spoofax-contrib/calculang/trunk/.project
   spoofax-contrib/calculang/trunk/.settings/
   spoofax-contrib/calculang/trunk/.settings/org.eclipse.jdt.core.prefs
   spoofax-contrib/calculang/trunk/META-INF/
   spoofax-contrib/calculang/trunk/META-INF/MANIFEST.MF
   spoofax-contrib/calculang/trunk/build.generated.xml
   spoofax-contrib/calculang/trunk/build.main.xml
   spoofax-contrib/calculang/trunk/build.properties
   spoofax-contrib/calculang/trunk/editor/
   spoofax-contrib/calculang/trunk/editor/Calculang-Builders.esv
   spoofax-contrib/calculang/trunk/editor/Calculang-Colorer.esv
   spoofax-contrib/calculang/trunk/editor/Calculang-Completions.esv
   spoofax-contrib/calculang/trunk/editor/Calculang-Folding.esv
   spoofax-contrib/calculang/trunk/editor/Calculang-Outliner.esv
   spoofax-contrib/calculang/trunk/editor/Calculang-References.esv
   spoofax-contrib/calculang/trunk/editor/Calculang-Syntax.esv
   spoofax-contrib/calculang/trunk/editor/Calculang.main.esv
   spoofax-contrib/calculang/trunk/editor/java/
   spoofax-contrib/calculang/trunk/editor/java/Calculang/
   spoofax-contrib/calculang/trunk/editor/java/Calculang/Activator.java
   spoofax-contrib/calculang/trunk/editor/java/Calculang/CalculangParseController.java
   spoofax-contrib/calculang/trunk/editor/java/Calculang/CalculangValidator.java
   spoofax-contrib/calculang/trunk/examples/
   spoofax-contrib/calculang/trunk/examples/example.cal
   spoofax-contrib/calculang/trunk/lib/
   spoofax-contrib/calculang/trunk/lib/editor-common.generated.str
   spoofax-contrib/calculang/trunk/plugin.xml
   spoofax-contrib/calculang/trunk/syntax/
   spoofax-contrib/calculang/trunk/syntax/Calculang.generated.pp
   spoofax-contrib/calculang/trunk/syntax/Calculang.pp
   spoofax-contrib/calculang/trunk/syntax/Calculang.sdf
   spoofax-contrib/calculang/trunk/syntax/Common.sdf
   spoofax-contrib/calculang/trunk/trans/
   spoofax-contrib/calculang/trunk/trans/calculang.str
   spoofax-contrib/calculang/trunk/trans/calculate.str
   spoofax-contrib/calculang/trunk/trans/check.str
Modified:
   spoofax-contrib/lwc11/trunk/editor/LWC-Completions.esv

Added: spoofax-contrib/calculang/trunk/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/.classpath	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/.externalToolBuilders/Calculang build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/.externalToolBuilders/Calculang build.main.xml.launch	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-contrib/calculang/trunk/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/.project	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>Calculang</name>
+      <comment></comment>
+      <buildSpec>
+		<buildCommand>
+			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+				<dictionary>
+					<key>LaunchConfigHandle</key>
+					<value>&lt;project&gt;/.externalToolBuilders/Calculang build.main.xml.launch</value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/.settings/org.eclipse.jdt.core.prefs	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,12 @@
+#Thu Nov 04 14:01:42 CET 2010
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-contrib/calculang/trunk/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/META-INF/MANIFEST.MF	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,21 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: Calculang Plug-in
+Bundle-SymbolicName: Calculang; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: Calculang.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.aterm,
+  org.spoofax.jsglr
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: Calculang

Added: spoofax-contrib/calculang/trunk/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/build.generated.xml	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,425 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${syntax}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-t"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
+                <path><fileset dir="${basedir}" includes="*.astr"/></path>
+            </pathconvert>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <fileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </fileset>
+            </java>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputpath" value="${include}"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+                <param name="build.stratego.extension" value="ctree"/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputpath" value="${src-gen}/trans"/>
+                <param name="build.stratego.extraargs" value="-la java-front"/>
+                <param name="build.stratego.extension" value="java"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputpath}/${strmodule}.${build.stratego.extension}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot;  --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${src-gen}/trans/Main.java"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/build.main.xml	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="Calculang" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="Calculang"/>
+        <property name="metasdfmodule" value="Stratego-Calculang"/>
+        <property name="esvmodule" value="Calculang"/>
+        <property name="strmodule" value="calculang"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- External .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/build.properties	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-contrib/calculang/trunk/editor/Calculang-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/editor/Calculang-Builders.esv	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,22 @@
+
+module Calculang-Builders
+
+imports Calculang-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                                               
+  provider: include/calculang.ctree                                                                          
+                                                                                                                               
+  observer: editor-analyze                                                                                   
+                                                                                                                               
+  builder: "Show abstract syntax (for selection)" =
+  	generate-aterm (openeditor) (realtime) (meta) (source)
+
+  builder: "Evaluate (selection)" =
+  	generate-eval (openeditor) (realtime)                   

Added: spoofax-contrib/calculang/trunk/editor/Calculang-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/editor/Calculang-Colorer.esv	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,11 @@
+module Calculang-Colorer
+
+imports Calculang-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+  
+  identifier : blue
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/editor/Calculang-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/editor/Calculang-Completions.esv	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,22 @@
+module Calculang-Completions
+
+imports Calculang-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                         
+  // Syntax completion:                  
+  // completion template: <x> "=" <y> (blank)
+  // completion template: Expr = <x> "+" <y>
+  // completion template: Expr = <x> "*" <y>
+  // ..
+                                         
+  // Semantic (identifier) completion:   
+  completion proposer                  : editor-complete
+  completion trigger                   : "[=+*/-]"
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/editor/Calculang-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/editor/Calculang-Folding.esv	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,9 @@
+module Calculang-Folding
+
+imports Calculang-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/editor/Calculang-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/editor/Calculang-Outliner.esv	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,9 @@
+module Calculang-Outliner
+
+imports Calculang-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/editor/Calculang-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/editor/Calculang-References.esv	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,15 @@
+module Calculang-References
+
+imports Calculang-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  hover _     : editor-hover
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/editor/Calculang-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/editor/Calculang-Syntax.esv	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,9 @@
+module Calculang-Syntax
+
+imports Calculang-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/editor/Calculang.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/editor/Calculang.main.esv	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,16 @@
+module Calculang.main
+
+imports Calculang-Builders Calculang-Colorer Calculang-Completions Calculang-Folding Calculang-Outliner Calculang-References Calculang-Syntax
+
+language General properties
+                  
+  name          : Calculang
+  id            : Calculang
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the Calculang language"
+  url           : http://strategoxt.org
+                  
+  extensions    : cal
+  table         : include/Calculang.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/editor/java/Calculang/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/editor/java/Calculang/Activator.java	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,44 @@
+package Calculang;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "Calculang";
+
+  public static final String kLanguageName = "Calculang";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/editor/java/Calculang/CalculangParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/editor/java/Calculang/CalculangParseController.java	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,89 @@
+package Calculang;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class CalculangParseController extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("Calculang");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = CalculangParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = CalculangParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(CalculangParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return CalculangParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/editor/java/Calculang/CalculangValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/editor/java/Calculang/CalculangValidator.java	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,12 @@
+package Calculang;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class CalculangValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return CalculangParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/examples/example.cal
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/examples/example.cal	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,3 @@
+x = 1
+y = 2
+result = x * y + 1
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/lib/editor-common.generated.str	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,252 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-calculang-file
+  parse-calculang-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/Calculang.tbl)>
+    )
+
+  parse-string = parse-calculang-string
+  parse-calculang-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/Calculang.tbl)>
+    )
+  
+  parse-stream = parse-calculang-stream
+  parse-calculang-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/Calculang.tbl)>
+    )
+
+  pp-calculang-string =
+    ast2abox(|[<import-term(include/Calculang.generated.pp.af)>,
+               <import-term(include/Calculang.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "Calculang", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    !Some(<id>); all(s); ?Some(<id>)
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/calculang.str file. These definitions should also be automatically 
+  // generated in the imported include/Calculang.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-contrib/calculang/trunk/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/plugin.xml	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="cal" description="Calculang" language="Calculang" derivedFrom="DynamicRoot" validator="Calculang.CalculangValidator" validatorClass="Calculang.CalculangValidator"></language>
+       </extension>
+       <extension id="Calculang.parser" name="Calculang Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="Calculang.CalculangParseController" language="Calculang">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/syntax/Calculang.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/syntax/Calculang.generated.pp	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,12 @@
+[
+   Expr            -- _1,
+   Int             -- _1,
+   Mul             -- _1 KW["*"] _2,
+   Div             -- _1 KW["/"] _2,
+   Plus            -- _1 KW["+"] _2,
+   Minus           -- _1 KW["-"] _2,
+   Stm             -- _1,
+   Stm.1:iter-star -- _1,
+   Assign          -- _1 KW["="] _2,
+   Var             -- _1
+]
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/syntax/Calculang.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/syntax/Calculang.pp	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also Calculang.generated.pp)
+[]

Added: spoofax-contrib/calculang/trunk/syntax/Calculang.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/syntax/Calculang.sdf	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,46 @@
+module Calculang
+
+imports Common
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+    
+    Exp -> Start {cons("Expr")}
+    
+    INT -> Exp {cons("Int")}
+    
+    Exp "*" Exp -> Exp {cons("Mul"), left}
+    Exp "/" Exp -> Exp {cons("Div"), left}
+    Exp "+" Exp -> Exp {cons("Plus"), left}
+    Exp "-" Exp -> Exp {cons("Minus"), left}
+
+  context-free priorities
+    
+    %% stage 2:
+    
+    { left:
+      Exp "*" Exp -> Exp
+      Exp "/" Exp -> Exp
+    } >
+    { left:  
+      Exp "+" Exp -> Exp
+      Exp "-" Exp -> Exp
+    }
+ 
+  context-free syntax
+    
+    %% stage 3:
+  
+    "(" Exp ")" -> Exp {bracket}
+  
+  context-free syntax
+    
+    %% stage 4:
+    
+    Stm*       -> Start {cons("Stm")} 
+    ID "=" Exp -> Stm {cons("Assign")}
+    ID         -> Exp {cons("Var")}
\ No newline at end of file

Added: spoofax-contrib/calculang/trunk/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/syntax/Common.sdf	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9\_]* -> ID
+    "-"? [0-9]+            -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Added: spoofax-contrib/calculang/trunk/trans/calculang.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/trans/calculang.str	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,48 @@
+module calculang
+
+imports
+  libstratego-lib
+  include/Calculang
+  lib/editor-common.generated
+  check
+  calculate
+
+rules // Main editor interface (defined by editor/Calculang-Builders and -References.esv)
+  
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := [];
+      notes    := []
+  
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+  generate-eval:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      editor-init;
+      analyze;
+      filename := <guarantee-extension(|"result.cal")> path;
+      result   := <calculate> selected
+  
+  editor-hover:
+    (selected, position, ast, path, project-path) -> result
+    where
+      result := <calculate> selected
+  
+  editor-resolve:
+    (Var(x), position, ast, path, project-path) -> target
+    where
+      target := <GetVar> x
+
+  editor-complete:
+    (Var(x), position, ast, path, project-path) -> proposals
+    where
+      proposals := <all-keys-GetVar>

Added: spoofax-contrib/calculang/trunk/trans/calculate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/trans/calculate.str	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,38 @@
+module calculate
+
+imports
+  libstratego-lib
+  include/Calculang
+  lib/editor-common.generated
+  check
+
+rules
+
+  calculate:
+  	e -> result
+    where
+      result := <bottomup(try(calc))> e
+
+  calc:
+    Int(x) -> <string-to-int> x
+
+  calc:
+  	Plus(x, y) -> <add> (x, y)
+ 
+  calc:
+  	Minus(x, y) -> <subt> (x, y)
+  	
+  calc:
+  	Mul(x, y) -> <mul> (x, y)
+  	
+  calc:
+  	Div(x, y) -> <div> (x, y)
+
+  calc:
+    Expr(x) -> x
+  
+  calc:
+    Var(x) -> <calculate> <GetVar> x // <GetValue> x
+  
+  calc:
+    Assign(_, e) -> e

Added: spoofax-contrib/calculang/trunk/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/trans/check.str	Thu Nov  4 13:28:45 2010	(r21323)
@@ -0,0 +1,39 @@
+module check
+
+imports
+  libstratego-lib
+  include/Calculang
+  lib/editor-common.generated
+  calculate
+
+rules
+
+  analyze:
+    t -> t
+    with
+      <topdown(try(record-var))> t;
+      rules(
+          GetValue :+ "PI" -> 3.14
+          GetVar   :+ "PI" -> "3.14"
+      )
+
+  record-var:
+    Assign(x, e) -> Assign(x, e)
+    with
+      try(e2 := <calculate> e);
+      rules(
+        GetValue :+ x -> e2
+        GetVar   :+ x -> e
+      )
+
+rules
+    
+  constraint-error:
+    Var(x) -> (x, $[Variable [x] is not defined])
+    where
+      not(<GetVar> x)
+  
+  constraint-error:
+    Assign(x, _) -> (x, $[Duplicate entity name])
+    where
+      not(<length> (<bagof-GetVar> x) => 1)

Modified: spoofax-contrib/lwc11/trunk/editor/LWC-Completions.esv
==============================================================================
--- spoofax-contrib/lwc11/trunk/editor/LWC-Completions.esv	Thu Nov  4 11:15:03 2010	(r21322)
+++ spoofax-contrib/lwc11/trunk/editor/LWC-Completions.esv	Thu Nov  4 13:28:45 2010	(r21323)
@@ -17,7 +17,7 @@
                                                                  
   completion template : Definition = "entity " <e> " {}" (blank) 
                                                                  
-  completion template : Property =   <x> " : " <T> (blank)       
+  completion template : Property = "" <x> " : " <T> (blank)       
                                                                  
 
 completions
@@ -25,4 +25,4 @@
                                          
   completion proposer                  : editor-complete
                                          
-  completion trigger                   : ":"
\ No newline at end of file
+  completion trigger                   : ":"

From L.C.L.Kats at tudelft.nl  Thu Nov  4 16:28:54 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 04 Nov 2010 15:28:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21324 - in
	spoofax-contrib/calculang: branches branches/Calculang0
	branches/Calculang0/.externalToolBuilders
	branches/Calculang0/editor branches/Calculang0/syntax branches...
Message-ID: <201011041528.oA4FSsMW001454@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Nov  4 15:28:53 2010
New Revision: 21324
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21324&sc=1

Log:
Working on milestones

Added:
   spoofax-contrib/calculang/branches/
   spoofax-contrib/calculang/branches/Calculang0/
      - copied from r21323, spoofax-contrib/calculang/trunk/
   spoofax-contrib/calculang/trunk/examples/example.calc
      - copied unchanged from r21323, spoofax-contrib/calculang/trunk/examples/example.cal
Deleted:
   spoofax-contrib/calculang/trunk/examples/example.cal
Modified:
   spoofax-contrib/calculang/branches/Calculang0/.externalToolBuilders/Calculang build.main.xml.launch
   spoofax-contrib/calculang/branches/Calculang0/.project
   spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-Builders.esv
   spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-Completions.esv
   spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-References.esv
   spoofax-contrib/calculang/branches/Calculang0/syntax/Calculang.sdf
   spoofax-contrib/calculang/branches/Calculang0/trans/calculang.str
   spoofax-contrib/calculang/branches/Calculang0/trans/calculate.str
   spoofax-contrib/calculang/branches/Calculang0/trans/check.str
   spoofax-contrib/calculang/trunk/editor/Calculang.main.esv

Modified: spoofax-contrib/calculang/branches/Calculang0/.externalToolBuilders/Calculang build.main.xml.launch
==============================================================================
--- spoofax-contrib/calculang/trunk/.externalToolBuilders/Calculang build.main.xml.launch	Thu Nov  4 13:28:45 2010	(r21323)
+++ spoofax-contrib/calculang/branches/Calculang0/.externalToolBuilders/Calculang build.main.xml.launch	Thu Nov  4 15:28:53 2010	(r21324)
@@ -16,8 +16,8 @@
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang}/build.main.xml"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang0}/build.main.xml"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang0}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>

Modified: spoofax-contrib/calculang/branches/Calculang0/.project
==============================================================================
--- spoofax-contrib/calculang/trunk/.project	Thu Nov  4 13:28:45 2010	(r21323)
+++ spoofax-contrib/calculang/branches/Calculang0/.project	Thu Nov  4 15:28:53 2010	(r21324)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 
 <projectDescription>
-      <name>Calculang</name>
+      <name>Calculang0</name>
       <comment></comment>
       <buildSpec>
 		<buildCommand>
@@ -34,4 +34,4 @@
         <nature>org.eclipse.pde.PluginNature</nature>
         <nature>org.eclipse.jdt.core.javanature</nature>
       </natures>
-    </projectDescription>
\ No newline at end of file
+    </projectDescription>

Modified: spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-Builders.esv
==============================================================================
--- spoofax-contrib/calculang/trunk/editor/Calculang-Builders.esv	Thu Nov  4 13:28:45 2010	(r21323)
+++ spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-Builders.esv	Thu Nov  4 15:28:53 2010	(r21324)
@@ -11,12 +11,7 @@
 
 builders
                                                                                                                                
-  provider: include/calculang.ctree                                                                          
-                                                                                                                               
-  observer: editor-analyze                                                                                   
+  provider: include/calculang.ctree                                                                                         
                                                                                                                                
   builder: "Show abstract syntax (for selection)" =
-  	generate-aterm (openeditor) (realtime) (meta) (source)
-
-  builder: "Evaluate (selection)" =
-  	generate-eval (openeditor) (realtime)                   
+  	generate-aterm (openeditor) (realtime) (meta) (source)
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-Completions.esv
==============================================================================
--- spoofax-contrib/calculang/trunk/editor/Calculang-Completions.esv	Thu Nov  4 13:28:45 2010	(r21323)
+++ spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-Completions.esv	Thu Nov  4 15:28:53 2010	(r21324)
@@ -10,13 +10,5 @@
                                                                    
 
 completions
-                                         
-  // Syntax completion:                  
-  // completion template: <x> "=" <y> (blank)
-  // completion template: Expr = <x> "+" <y>
-  // completion template: Expr = <x> "*" <y>
-  // ..
-                                         
-  // Semantic (identifier) completion:   
-  completion proposer                  : editor-complete
-  completion trigger                   : "[=+*/-]"
\ No newline at end of file
+
+  
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-References.esv
==============================================================================
--- spoofax-contrib/calculang/trunk/editor/Calculang-References.esv	Thu Nov  4 13:28:45 2010	(r21323)
+++ spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-References.esv	Thu Nov  4 15:28:53 2010	(r21324)
@@ -11,5 +11,4 @@
 
 references
                 
-  reference _ : editor-resolve
-  hover _     : editor-hover
\ No newline at end of file
+  
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang0/syntax/Calculang.sdf
==============================================================================
--- spoofax-contrib/calculang/trunk/syntax/Calculang.sdf	Thu Nov  4 13:28:45 2010	(r21323)
+++ spoofax-contrib/calculang/branches/Calculang0/syntax/Calculang.sdf	Thu Nov  4 15:28:53 2010	(r21324)
@@ -10,37 +10,4 @@
   context-free syntax
     
     Exp -> Start {cons("Expr")}
-    
-    INT -> Exp {cons("Int")}
-    
-    Exp "*" Exp -> Exp {cons("Mul"), left}
-    Exp "/" Exp -> Exp {cons("Div"), left}
-    Exp "+" Exp -> Exp {cons("Plus"), left}
-    Exp "-" Exp -> Exp {cons("Minus"), left}
-
-  context-free priorities
-    
-    %% stage 2:
-    
-    { left:
-      Exp "*" Exp -> Exp
-      Exp "/" Exp -> Exp
-    } >
-    { left:  
-      Exp "+" Exp -> Exp
-      Exp "-" Exp -> Exp
-    }
- 
-  context-free syntax
-    
-    %% stage 3:
-  
-    "(" Exp ")" -> Exp {bracket}
-  
-  context-free syntax
-    
-    %% stage 4:
-    
-    Stm*       -> Start {cons("Stm")} 
-    ID "=" Exp -> Stm {cons("Assign")}
-    ID         -> Exp {cons("Var")}
\ No newline at end of file
+    INT -> Exp {cons("Int")}
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang0/trans/calculang.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/calculang.str	Thu Nov  4 13:28:45 2010	(r21323)
+++ spoofax-contrib/calculang/branches/Calculang0/trans/calculang.str	Thu Nov  4 15:28:53 2010	(r21324)
@@ -23,26 +23,3 @@
     with
       filename := <guarantee-extension(|"aterm")> path;
       result   := selected // we just return the input term
-  
-  generate-eval:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      editor-init;
-      analyze;
-      filename := <guarantee-extension(|"result.cal")> path;
-      result   := <calculate> selected
-  
-  editor-hover:
-    (selected, position, ast, path, project-path) -> result
-    where
-      result := <calculate> selected
-  
-  editor-resolve:
-    (Var(x), position, ast, path, project-path) -> target
-    where
-      target := <GetVar> x
-
-  editor-complete:
-    (Var(x), position, ast, path, project-path) -> proposals
-    where
-      proposals := <all-keys-GetVar>

Modified: spoofax-contrib/calculang/branches/Calculang0/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/calculate.str	Thu Nov  4 13:28:45 2010	(r21323)
+++ spoofax-contrib/calculang/branches/Calculang0/trans/calculate.str	Thu Nov  4 15:28:53 2010	(r21324)
@@ -9,30 +9,4 @@
 rules
 
   calculate:
-  	e -> result
-    where
-      result := <bottomup(try(calc))> e
-
-  calc:
     Int(x) -> <string-to-int> x
-
-  calc:
-  	Plus(x, y) -> <add> (x, y)
- 
-  calc:
-  	Minus(x, y) -> <subt> (x, y)
-  	
-  calc:
-  	Mul(x, y) -> <mul> (x, y)
-  	
-  calc:
-  	Div(x, y) -> <div> (x, y)
-
-  calc:
-    Expr(x) -> x
-  
-  calc:
-    Var(x) -> <calculate> <GetVar> x // <GetValue> x
-  
-  calc:
-    Assign(_, e) -> e

Modified: spoofax-contrib/calculang/branches/Calculang0/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/check.str	Thu Nov  4 13:28:45 2010	(r21323)
+++ spoofax-contrib/calculang/branches/Calculang0/trans/check.str	Thu Nov  4 15:28:53 2010	(r21324)
@@ -10,30 +10,8 @@
 
   analyze:
     t -> t
-    with
-      <topdown(try(record-var))> t;
-      rules(
-          GetValue :+ "PI" -> 3.14
-          GetVar   :+ "PI" -> "3.14"
-      )
-
-  record-var:
-    Assign(x, e) -> Assign(x, e)
-    with
-      try(e2 := <calculate> e);
-      rules(
-        GetValue :+ x -> e2
-        GetVar   :+ x -> e
-      )
-
-rules
-    
-  constraint-error:
-    Var(x) -> (x, $[Variable [x] is not defined])
-    where
-      not(<GetVar> x)
   
   constraint-error:
-    Assign(x, _) -> (x, $[Duplicate entity name])
+    i -> (i, "There is no six")
     where
-      not(<length> (<bagof-GetVar> x) => 1)
+      <eq> (i, "6")
\ No newline at end of file

Modified: spoofax-contrib/calculang/trunk/editor/Calculang.main.esv
==============================================================================
--- spoofax-contrib/calculang/trunk/editor/Calculang.main.esv	Thu Nov  4 13:28:45 2010	(r21323)
+++ spoofax-contrib/calculang/trunk/editor/Calculang.main.esv	Thu Nov  4 15:28:53 2010	(r21324)
@@ -11,6 +11,6 @@
   description   : "Spoofax/IMP-generated editor for the Calculang language"
   url           : http://strategoxt.org
                   
-  extensions    : cal
+  extensions    : calc
   table         : include/Calculang.tbl
   start symbols : Start
\ No newline at end of file

Copied: spoofax-contrib/calculang/trunk/examples/example.calc (from r21323, spoofax-contrib/calculang/trunk/examples/example.cal)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/trunk/examples/example.calc	Thu Nov  4 15:28:53 2010	(r21324, copy of r21323, spoofax-contrib/calculang/trunk/examples/example.cal)
@@ -0,0 +1,3 @@
+x = 1
+y = 2
+result = x * y + 1
\ No newline at end of file

From L.C.L.Kats at tudelft.nl  Thu Nov  4 17:40:53 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 04 Nov 2010 16:40:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21325 - in
	spoofax-contrib/calculang: branches/Calculang0/editor
	branches/Calculang0/examples branches/Calculang1
	branches/Calculang1/.externalToolBuilders branches/Calcul...
Message-ID: <201011041640.oA4GerKh002562@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Nov  4 16:40:53 2010
New Revision: 21325
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21325&sc=1

Log:


Added:
   spoofax-contrib/calculang/branches/Calculang1/
      - copied from r21324, spoofax-contrib/calculang/branches/Calculang0/
   spoofax-contrib/calculang/trunk/examples/example.cal
      - copied, changed from r21324, spoofax-contrib/calculang/trunk/examples/example.calc
Replaced:
   spoofax-contrib/calculang/branches/Calculang1/examples/example.cal
      - copied, changed from r21324, spoofax-contrib/calculang/branches/Calculang0/examples/example.cal
Deleted:
   spoofax-contrib/calculang/trunk/examples/example.calc
Modified:
   spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-Builders.esv
   spoofax-contrib/calculang/branches/Calculang0/editor/Calculang.main.esv
   spoofax-contrib/calculang/branches/Calculang0/examples/example.cal
   spoofax-contrib/calculang/branches/Calculang1/.externalToolBuilders/Calculang build.main.xml.launch
   spoofax-contrib/calculang/branches/Calculang1/.project
   spoofax-contrib/calculang/branches/Calculang1/editor/Calculang.main.esv
   spoofax-contrib/calculang/branches/Calculang1/syntax/Calculang.generated.pp
   spoofax-contrib/calculang/branches/Calculang1/syntax/Calculang.sdf
   spoofax-contrib/calculang/trunk/editor/Calculang.main.esv
   spoofax-contrib/calculang/trunk/syntax/Calculang.sdf
   spoofax-contrib/calculang/trunk/trans/calculang.str
   spoofax-contrib/calculang/trunk/trans/calculate.str
   spoofax-contrib/calculang/trunk/trans/check.str

Modified: spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-Builders.esv
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-Builders.esv	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/branches/Calculang0/editor/Calculang-Builders.esv	Thu Nov  4 16:40:53 2010	(r21325)
@@ -1,4 +1,3 @@
-
 module Calculang-Builders
 
 imports Calculang-Builders.generated

Modified: spoofax-contrib/calculang/branches/Calculang0/editor/Calculang.main.esv
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/editor/Calculang.main.esv	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/branches/Calculang0/editor/Calculang.main.esv	Thu Nov  4 16:40:53 2010	(r21325)
@@ -13,4 +13,4 @@
                   
   extensions    : cal
   table         : include/Calculang.tbl
-  start symbols : Start
\ No newline at end of file
+  start symbols : Start

Modified: spoofax-contrib/calculang/branches/Calculang0/examples/example.cal
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/examples/example.cal	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/branches/Calculang0/examples/example.cal	Thu Nov  4 16:40:53 2010	(r21325)
@@ -1,3 +1 @@
-x = 1
-y = 2
-result = x * y + 1
\ No newline at end of file
+1
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang1/.externalToolBuilders/Calculang build.main.xml.launch
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/.externalToolBuilders/Calculang build.main.xml.launch	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/branches/Calculang1/.externalToolBuilders/Calculang build.main.xml.launch	Thu Nov  4 16:40:53 2010	(r21325)
@@ -16,8 +16,8 @@
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang0}/build.main.xml"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang1}/build.main.xml"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang0}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang1}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>

Modified: spoofax-contrib/calculang/branches/Calculang1/.project
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/.project	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/branches/Calculang1/.project	Thu Nov  4 16:40:53 2010	(r21325)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 
 <projectDescription>
-      <name>Calculang0</name>
+      <name>Calculang1</name>
       <comment></comment>
       <buildSpec>
 		<buildCommand>

Modified: spoofax-contrib/calculang/branches/Calculang1/editor/Calculang.main.esv
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/editor/Calculang.main.esv	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/branches/Calculang1/editor/Calculang.main.esv	Thu Nov  4 16:40:53 2010	(r21325)
@@ -13,4 +13,4 @@
                   
   extensions    : cal
   table         : include/Calculang.tbl
-  start symbols : Start
\ No newline at end of file
+  start symbols : Start

Copied and modified: spoofax-contrib/calculang/branches/Calculang1/examples/example.cal (from r21324, spoofax-contrib/calculang/branches/Calculang0/examples/example.cal)
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/examples/example.cal	Thu Nov  4 15:28:53 2010	(r21324, copy source)
+++ spoofax-contrib/calculang/branches/Calculang1/examples/example.cal	Thu Nov  4 16:40:53 2010	(r21325)
@@ -1,3 +1 @@
-x = 1
-y = 2
-result = x * y + 1
\ No newline at end of file
+1 + 2 * 3 + 4
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang1/syntax/Calculang.generated.pp
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/syntax/Calculang.generated.pp	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/branches/Calculang1/syntax/Calculang.generated.pp	Thu Nov  4 16:40:53 2010	(r21325)
@@ -1,12 +1,8 @@
 [
-   Expr            -- _1,
-   Int             -- _1,
-   Mul             -- _1 KW["*"] _2,
-   Div             -- _1 KW["/"] _2,
-   Plus            -- _1 KW["+"] _2,
-   Minus           -- _1 KW["-"] _2,
-   Stm             -- _1,
-   Stm.1:iter-star -- _1,
-   Assign          -- _1 KW["="] _2,
-   Var             -- _1
+   Expr  -- _1,
+   Int   -- _1,
+   Mul   -- _1 KW["*"] _2,
+   Div   -- _1 KW["/"] _2,
+   Plus  -- _1 KW["+"] _2,
+   Minus -- _1 KW["-"] _2
 ]
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang1/syntax/Calculang.sdf
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/syntax/Calculang.sdf	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/branches/Calculang1/syntax/Calculang.sdf	Thu Nov  4 16:40:53 2010	(r21325)
@@ -10,4 +10,20 @@
   context-free syntax
     
     Exp -> Start {cons("Expr")}
-    INT -> Exp {cons("Int")}
\ No newline at end of file
+    INT -> Exp {cons("Int")}
+    
+    Exp "*" Exp -> Exp {cons("Mul"), left}
+    Exp "/" Exp -> Exp {cons("Div"), left}
+    Exp "+" Exp -> Exp {cons("Plus"), left}
+    Exp "-" Exp -> Exp {cons("Minus"), left}
+
+  context-free priorities
+    
+    { left:
+      Exp "*" Exp -> Exp
+      Exp "/" Exp -> Exp
+    } >
+    { left:  
+      Exp "+" Exp -> Exp
+      Exp "-" Exp -> Exp
+    }
\ No newline at end of file

Modified: spoofax-contrib/calculang/trunk/editor/Calculang.main.esv
==============================================================================
--- spoofax-contrib/calculang/trunk/editor/Calculang.main.esv	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/trunk/editor/Calculang.main.esv	Thu Nov  4 16:40:53 2010	(r21325)
@@ -11,6 +11,6 @@
   description   : "Spoofax/IMP-generated editor for the Calculang language"
   url           : http://strategoxt.org
                   
-  extensions    : calc
+  extensions    : cal
   table         : include/Calculang.tbl
-  start symbols : Start
\ No newline at end of file
+  start symbols : Start

Copied and modified: spoofax-contrib/calculang/trunk/examples/example.cal (from r21324, spoofax-contrib/calculang/trunk/examples/example.calc)
==============================================================================
--- spoofax-contrib/calculang/trunk/examples/example.calc	Thu Nov  4 15:28:53 2010	(r21324, copy source)
+++ spoofax-contrib/calculang/trunk/examples/example.cal	Thu Nov  4 16:40:53 2010	(r21325)
@@ -1,3 +1,3 @@
 x = 1
-y = 2
-result = x * y + 1
\ No newline at end of file
+y = 2 + 1
+foo = 1 * y + xxyyz
\ No newline at end of file

Modified: spoofax-contrib/calculang/trunk/syntax/Calculang.sdf
==============================================================================
--- spoofax-contrib/calculang/trunk/syntax/Calculang.sdf	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/trunk/syntax/Calculang.sdf	Thu Nov  4 16:40:53 2010	(r21325)
@@ -20,8 +20,6 @@
 
   context-free priorities
     
-    %% stage 2:
-    
     { left:
       Exp "*" Exp -> Exp
       Exp "/" Exp -> Exp
@@ -33,13 +31,13 @@
  
   context-free syntax
     
-    %% stage 3:
+    %% stage 5:
   
     "(" Exp ")" -> Exp {bracket}
   
   context-free syntax
     
-    %% stage 4:
+    %% stage 6:
     
     Stm*       -> Start {cons("Stm")} 
     ID "=" Exp -> Stm {cons("Assign")}

Modified: spoofax-contrib/calculang/trunk/trans/calculang.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/calculang.str	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/trunk/trans/calculang.str	Thu Nov  4 16:40:53 2010	(r21325)
@@ -16,7 +16,7 @@
       analyze;
       errors   := <collect-all(constraint-error, conc)> ast;
       warnings := [];
-      notes    := []
+      notes    := <collect-all(constraint-note, conc)> ast
   
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)

Modified: spoofax-contrib/calculang/trunk/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/calculate.str	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/trunk/trans/calculate.str	Thu Nov  4 16:40:53 2010	(r21325)
@@ -14,6 +14,13 @@
       result := <bottomup(try(calc))> e
 
   calc:
+    Assign(x, e) -> e
+    where
+      rules(
+        GetValue: x -> e
+      )
+
+  calc:
     Int(x) -> <string-to-int> x
 
   calc:
@@ -32,7 +39,4 @@
     Expr(x) -> x
   
   calc:
-    Var(x) -> <calculate> <GetVar> x // <GetValue> x
-  
-  calc:
-    Assign(_, e) -> e
+    Var(x) -> <GetValue> x

Modified: spoofax-contrib/calculang/trunk/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/check.str	Thu Nov  4 15:28:53 2010	(r21324)
+++ spoofax-contrib/calculang/trunk/trans/check.str	Thu Nov  4 16:40:53 2010	(r21325)
@@ -13,20 +13,15 @@
     with
       <topdown(try(record-var))> t;
       rules(
-          GetValue :+ "PI" -> 3.14
-          GetVar   :+ "PI" -> "3.14"
+        GetVar :+ "PI" -> "3.14"
       )
 
   record-var:
     Assign(x, e) -> Assign(x, e)
     with
-      try(e2 := <calculate> e);
       rules(
-        GetValue :+ x -> e2
-        GetVar   :+ x -> e
+        GetVar :+ x -> e
       )
-
-rules
     
   constraint-error:
     Var(x) -> (x, $[Variable [x] is not defined])
@@ -34,6 +29,14 @@
       not(<GetVar> x)
   
   constraint-error:
-    Assign(x, _) -> (x, $[Duplicate entity name])
+    Assign(x, _) -> (x, $[Duplicate variable name])
     where
       not(<length> (<bagof-GetVar> x) => 1)
+
+  constraint-note:
+    Assign(x, e) -> (x, $[Constant expression in assignment])
+    where
+      not(<oncetd(is-var)> e)
+  
+  is-var:
+    Var(x) -> Var(x)
\ No newline at end of file

From L.C.L.Kats at tudelft.nl  Thu Nov  4 17:50:50 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 04 Nov 2010 16:50:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21326 - in
	spoofax-contrib/calculang/branches/Calculang2: .
	.externalToolBuilders editor trans
Message-ID: <201011041650.oA4GooEL002677@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Nov  4 16:50:50 2010
New Revision: 21326
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21326&sc=1

Log:


Added:
   spoofax-contrib/calculang/branches/Calculang2/
      - copied from r21325, spoofax-contrib/calculang/branches/Calculang1/
Modified:
   spoofax-contrib/calculang/branches/Calculang2/.externalToolBuilders/Calculang build.main.xml.launch
   spoofax-contrib/calculang/branches/Calculang2/.project
   spoofax-contrib/calculang/branches/Calculang2/editor/Calculang-Builders.esv
   spoofax-contrib/calculang/branches/Calculang2/trans/calculang.str
   spoofax-contrib/calculang/branches/Calculang2/trans/calculate.str

Modified: spoofax-contrib/calculang/branches/Calculang2/.externalToolBuilders/Calculang build.main.xml.launch
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang1/.externalToolBuilders/Calculang build.main.xml.launch	Thu Nov  4 16:40:53 2010	(r21325)
+++ spoofax-contrib/calculang/branches/Calculang2/.externalToolBuilders/Calculang build.main.xml.launch	Thu Nov  4 16:50:50 2010	(r21326)
@@ -16,8 +16,8 @@
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang1}/build.main.xml"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang2}/build.main.xml"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang1}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang2}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>

Modified: spoofax-contrib/calculang/branches/Calculang2/.project
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang1/.project	Thu Nov  4 16:40:53 2010	(r21325)
+++ spoofax-contrib/calculang/branches/Calculang2/.project	Thu Nov  4 16:50:50 2010	(r21326)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 
 <projectDescription>
-      <name>Calculang1</name>
+      <name>Calculang2</name>
       <comment></comment>
       <buildSpec>
 		<buildCommand>

Modified: spoofax-contrib/calculang/branches/Calculang2/editor/Calculang-Builders.esv
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang1/editor/Calculang-Builders.esv	Thu Nov  4 16:40:53 2010	(r21325)
+++ spoofax-contrib/calculang/branches/Calculang2/editor/Calculang-Builders.esv	Thu Nov  4 16:50:50 2010	(r21326)
@@ -14,4 +14,7 @@
   provider: include/calculang.ctree                                                                                         
                                                                                                                                
   builder: "Show abstract syntax (for selection)" =
-  	generate-aterm (openeditor) (realtime) (meta) (source)
\ No newline at end of file
+  	generate-aterm (openeditor) (realtime) (meta) (source)
+
+  builder: "Evaluate (selection)" =
+    generate-eval (openeditor) (realtime)               

Modified: spoofax-contrib/calculang/branches/Calculang2/trans/calculang.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang1/trans/calculang.str	Thu Nov  4 16:40:53 2010	(r21325)
+++ spoofax-contrib/calculang/branches/Calculang2/trans/calculang.str	Thu Nov  4 16:50:50 2010	(r21326)
@@ -23,3 +23,9 @@
     with
       filename := <guarantee-extension(|"aterm")> path;
       result   := selected // we just return the input term
+  
+  generate-eval:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"result.cal")> path;
+      result   := <calculate> selected

Modified: spoofax-contrib/calculang/branches/Calculang2/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang1/trans/calculate.str	Thu Nov  4 16:40:53 2010	(r21325)
+++ spoofax-contrib/calculang/branches/Calculang2/trans/calculate.str	Thu Nov  4 16:50:50 2010	(r21326)
@@ -9,4 +9,24 @@
 rules
 
   calculate:
+    e -> result
+    where
+      result := <bottomup(try(calc))> e
+
+  calc:
     Int(x) -> <string-to-int> x
+
+  calc:
+    Plus(x, y) -> <add> (x, y)
+ 
+  calc:
+    Minus(x, y) -> <subt> (x, y)
+    
+  calc:
+    Mul(x, y) -> <mul> (x, y)
+    
+  calc:
+    Div(x, y) -> <div> (x, y)
+
+  calc:
+    Expr(x) -> x

From L.C.L.Kats at tudelft.nl  Thu Nov  4 18:12:57 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 04 Nov 2010 17:12:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21327 - in
	spoofax-contrib/calculang: branches/Calculang2/syntax
	branches/Calculang3 branches/Calculang3/.externalToolBuilders
	branches/Calculang3/examples branches/Calcul...
Message-ID: <201011041712.oA4HCv4p003189@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Nov  4 17:12:56 2010
New Revision: 21327
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21327&sc=1

Log:


Added:
   spoofax-contrib/calculang/branches/Calculang3/
      - copied from r21326, spoofax-contrib/calculang/branches/Calculang2/
Modified:
   spoofax-contrib/calculang/branches/Calculang2/syntax/Calculang.sdf
   spoofax-contrib/calculang/branches/Calculang3/.externalToolBuilders/Calculang build.main.xml.launch
   spoofax-contrib/calculang/branches/Calculang3/.project
   spoofax-contrib/calculang/branches/Calculang3/examples/example.cal
   spoofax-contrib/calculang/branches/Calculang3/syntax/Calculang.generated.pp
   spoofax-contrib/calculang/branches/Calculang3/syntax/Calculang.sdf
   spoofax-contrib/calculang/branches/Calculang3/trans/calculate.str
   spoofax-contrib/calculang/trunk/editor/Calculang-Outliner.esv
   spoofax-contrib/calculang/trunk/examples/example.cal
   spoofax-contrib/calculang/trunk/syntax/Calculang.sdf
   spoofax-contrib/calculang/trunk/trans/calculate.str

Modified: spoofax-contrib/calculang/branches/Calculang2/syntax/Calculang.sdf
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang2/syntax/Calculang.sdf	Thu Nov  4 16:50:50 2010	(r21326)
+++ spoofax-contrib/calculang/branches/Calculang2/syntax/Calculang.sdf	Thu Nov  4 17:12:56 2010	(r21327)
@@ -17,6 +17,8 @@
     Exp "+" Exp -> Exp {cons("Plus"), left}
     Exp "-" Exp -> Exp {cons("Minus"), left}
 
+    "(" Exp ")" -> Exp {bracket}
+
   context-free priorities
     
     { left:

Modified: spoofax-contrib/calculang/branches/Calculang3/.externalToolBuilders/Calculang build.main.xml.launch
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang2/.externalToolBuilders/Calculang build.main.xml.launch	Thu Nov  4 16:50:50 2010	(r21326)
+++ spoofax-contrib/calculang/branches/Calculang3/.externalToolBuilders/Calculang build.main.xml.launch	Thu Nov  4 17:12:56 2010	(r21327)
@@ -16,8 +16,8 @@
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang2}/build.main.xml"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang3}/build.main.xml"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang2}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang3}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>

Modified: spoofax-contrib/calculang/branches/Calculang3/.project
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang2/.project	Thu Nov  4 16:50:50 2010	(r21326)
+++ spoofax-contrib/calculang/branches/Calculang3/.project	Thu Nov  4 17:12:56 2010	(r21327)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 
 <projectDescription>
-      <name>Calculang2</name>
+      <name>Calculang3</name>
       <comment></comment>
       <buildSpec>
 		<buildCommand>

Modified: spoofax-contrib/calculang/branches/Calculang3/examples/example.cal
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang2/examples/example.cal	Thu Nov  4 16:50:50 2010	(r21326)
+++ spoofax-contrib/calculang/branches/Calculang3/examples/example.cal	Thu Nov  4 17:12:56 2010	(r21327)
@@ -1 +1,3 @@
-1 + 2 * 3 + 4
\ No newline at end of file
+x = 1
+y = 2 + 1
+foo = x + y * 2
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang3/syntax/Calculang.generated.pp
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang2/syntax/Calculang.generated.pp	Thu Nov  4 16:50:50 2010	(r21326)
+++ spoofax-contrib/calculang/branches/Calculang3/syntax/Calculang.generated.pp	Thu Nov  4 17:12:56 2010	(r21327)
@@ -1,8 +1,12 @@
 [
-   Expr  -- _1,
-   Int   -- _1,
-   Mul   -- _1 KW["*"] _2,
-   Div   -- _1 KW["/"] _2,
-   Plus  -- _1 KW["+"] _2,
-   Minus -- _1 KW["-"] _2
+   Expr            -- _1,
+   Int             -- _1,
+   Mul             -- _1 KW["*"] _2,
+   Div             -- _1 KW["/"] _2,
+   Plus            -- _1 KW["+"] _2,
+   Minus           -- _1 KW["-"] _2,
+   Stm             -- _1,
+   Stm.1:iter-star -- _1,
+   Assign          -- _1 KW["="] _2,
+   Var             -- _1
 ]
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang3/syntax/Calculang.sdf
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang2/syntax/Calculang.sdf	Thu Nov  4 16:50:50 2010	(r21326)
+++ spoofax-contrib/calculang/branches/Calculang3/syntax/Calculang.sdf	Thu Nov  4 17:12:56 2010	(r21327)
@@ -17,6 +17,8 @@
     Exp "+" Exp -> Exp {cons("Plus"), left}
     Exp "-" Exp -> Exp {cons("Minus"), left}
 
+    "(" Exp ")" -> Exp {bracket}
+    
   context-free priorities
     
     { left:
@@ -26,4 +28,10 @@
     { left:  
       Exp "+" Exp -> Exp
       Exp "-" Exp -> Exp
-    }
\ No newline at end of file
+    }
+ 
+  context-free syntax
+  
+    Stm*       -> Start {cons("Stm")} 
+    ID "=" Exp -> Stm {cons("Assign")}
+    ID         -> Exp {cons("Var")}

Modified: spoofax-contrib/calculang/branches/Calculang3/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang2/trans/calculate.str	Thu Nov  4 16:50:50 2010	(r21326)
+++ spoofax-contrib/calculang/branches/Calculang3/trans/calculate.str	Thu Nov  4 17:12:56 2010	(r21327)
@@ -14,6 +14,13 @@
       result := <bottomup(try(calc))> e
 
   calc:
+    Assign(x, e) -> e
+    where
+      rules(
+        GetValue: x -> e
+      )
+
+  calc:
     Int(x) -> <string-to-int> x
 
   calc:
@@ -30,3 +37,9 @@
 
   calc:
     Expr(x) -> x
+
+  calc:
+    Stm(xs) -> xs
+  
+  calc:
+    Var(x) -> <GetValue> x

Modified: spoofax-contrib/calculang/trunk/editor/Calculang-Outliner.esv
==============================================================================
--- spoofax-contrib/calculang/trunk/editor/Calculang-Outliner.esv	Thu Nov  4 16:50:50 2010	(r21326)
+++ spoofax-contrib/calculang/trunk/editor/Calculang-Outliner.esv	Thu Nov  4 17:12:56 2010	(r21327)
@@ -6,4 +6,6 @@
   
   // This file can be used for custom outliner rules.
   //
-  // See the imported file for a brief introduction and examples.
\ No newline at end of file
+  // See the imported file for a brief introduction and examples.
+  
+  Stm
\ No newline at end of file

Modified: spoofax-contrib/calculang/trunk/examples/example.cal
==============================================================================
--- spoofax-contrib/calculang/trunk/examples/example.cal	Thu Nov  4 16:50:50 2010	(r21326)
+++ spoofax-contrib/calculang/trunk/examples/example.cal	Thu Nov  4 17:12:56 2010	(r21327)
@@ -1,3 +1,3 @@
 x = 1
 y = 2 + 1
-foo = 1 * y + xxyyz
\ No newline at end of file
+foo = x + y * 2
\ No newline at end of file

Modified: spoofax-contrib/calculang/trunk/syntax/Calculang.sdf
==============================================================================
--- spoofax-contrib/calculang/trunk/syntax/Calculang.sdf	Thu Nov  4 16:50:50 2010	(r21326)
+++ spoofax-contrib/calculang/trunk/syntax/Calculang.sdf	Thu Nov  4 17:12:56 2010	(r21327)
@@ -18,6 +18,8 @@
     Exp "+" Exp -> Exp {cons("Plus"), left}
     Exp "-" Exp -> Exp {cons("Minus"), left}
 
+    "(" Exp ")" -> Exp {bracket}
+
   context-free priorities
     
     { left:
@@ -30,15 +32,7 @@
     }
  
   context-free syntax
-    
-    %% stage 5:
-  
-    "(" Exp ")" -> Exp {bracket}
   
-  context-free syntax
-    
-    %% stage 6:
-    
-    Stm*       -> Start {cons("Stm")} 
-    ID "=" Exp -> Stm {cons("Assign")}
-    ID         -> Exp {cons("Var")}
\ No newline at end of file
+    Stm*        -> Start {cons("Stm")} 
+    ID "=" Exp  -> Stm {cons("Assign")}
+    ID          -> Exp {cons("Var")}
\ No newline at end of file

Modified: spoofax-contrib/calculang/trunk/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/calculate.str	Thu Nov  4 16:50:50 2010	(r21326)
+++ spoofax-contrib/calculang/trunk/trans/calculate.str	Thu Nov  4 17:12:56 2010	(r21327)
@@ -37,6 +37,9 @@
 
   calc:
     Expr(x) -> x
+
+  calc:
+    Stm(xs) -> xs
   
   calc:
     Var(x) -> <GetValue> x

From L.C.L.Kats at tudelft.nl  Fri Nov  5 10:17:53 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 05 Nov 2010 09:17:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21328 - in
	spoofax-contrib/calculang/trunk: examples trans
Message-ID: <201011050917.oA59HruN014810@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Nov  5 09:17:52 2010
New Revision: 21328
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21328&sc=1

Log:


Modified:
   spoofax-contrib/calculang/trunk/examples/example.cal
   spoofax-contrib/calculang/trunk/trans/calculang.str
   spoofax-contrib/calculang/trunk/trans/calculate.str
   spoofax-contrib/calculang/trunk/trans/check.str

Modified: spoofax-contrib/calculang/trunk/examples/example.cal
==============================================================================
--- spoofax-contrib/calculang/trunk/examples/example.cal	Thu Nov  4 17:12:56 2010	(r21327)
+++ spoofax-contrib/calculang/trunk/examples/example.cal	Fri Nov  5 09:17:52 2010	(r21328)
@@ -1,3 +1,3 @@
 x = 1
 y = 2 + 1
-foo = x + y * 2
\ No newline at end of file
+foo = x + y * 25
\ No newline at end of file

Modified: spoofax-contrib/calculang/trunk/trans/calculang.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/calculang.str	Thu Nov  4 17:12:56 2010	(r21327)
+++ spoofax-contrib/calculang/trunk/trans/calculang.str	Fri Nov  5 09:17:52 2010	(r21328)
@@ -9,15 +9,6 @@
 
 rules // Main editor interface (defined by editor/Calculang-Builders and -References.esv)
   
-  editor-analyze:
-    (ast, path, project-path) -> (ast, errors, warnings, notes)
-    with
-      editor-init;
-      analyze;
-      errors   := <collect-all(constraint-error, conc)> ast;
-      warnings := [];
-      notes    := <collect-all(constraint-note, conc)> ast
-  
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
@@ -29,7 +20,7 @@
     with
       editor-init;
       analyze;
-      filename := <guarantee-extension(|"result.cal")> path;
+      filename := <guarantee-extension(|"result.aterm")> path;
       result   := <calculate> selected
   
   editor-hover:

Modified: spoofax-contrib/calculang/trunk/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/calculate.str	Thu Nov  4 17:12:56 2010	(r21327)
+++ spoofax-contrib/calculang/trunk/trans/calculate.str	Fri Nov  5 09:17:52 2010	(r21328)
@@ -15,10 +15,12 @@
 
   calc:
     Assign(x, e) -> e
+    /* now in check.str
     where
       rules(
         GetValue: x -> e
       )
+    */
 
   calc:
     Int(x) -> <string-to-int> x

Modified: spoofax-contrib/calculang/trunk/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/check.str	Thu Nov  4 17:12:56 2010	(r21327)
+++ spoofax-contrib/calculang/trunk/trans/check.str	Fri Nov  5 09:17:52 2010	(r21328)
@@ -7,21 +7,40 @@
   calculate
 
 rules
+  
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <constraint-errors> ast;
+      warnings := [];
+      notes    := []
 
   analyze:
     t -> t
     with
       <topdown(try(record-var))> t;
       rules(
-        GetVar :+ "PI" -> "3.14"
+        GetVar   :+ "PI" -> "3.14"
+        GetValue :+ "PI" -> 3.14
       )
 
   record-var:
     Assign(x, e) -> Assign(x, e)
     with
+      if <calculate> e then
+        e2 := <calculate> e
+      else
+        e2 := "ERROR!"
+      end;
       rules(
-        GetVar :+ x -> e
+        GetVar   :+ x -> e
+        GetValue :+ x -> e2
       )
+  
+  constraint-errors:
+    t -> <collect-all(constraint-error, conc)> t
     
   constraint-error:
     Var(x) -> (x, $[Variable [x] is not defined])

From L.C.L.Kats at tudelft.nl  Fri Nov  5 10:18:17 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 05 Nov 2010 09:18:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21329 - in
	spoofax-contrib/calculang/branches/Calculang0: .
	.externalToolBuilders trans
Message-ID: <201011050918.oA59IHDE014814@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Nov  5 09:18:17 2010
New Revision: 21329
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21329&sc=1

Log:


Added:
   spoofax-contrib/calculang/branches/Calculang0/.externalToolBuilders/Calculang0 build.main.xml
      - copied unchanged from r21324, spoofax-contrib/calculang/branches/Calculang0/.externalToolBuilders/Calculang build.main.xml.launch
Deleted:
   spoofax-contrib/calculang/branches/Calculang0/.externalToolBuilders/Calculang build.main.xml.launch
Modified:
   spoofax-contrib/calculang/branches/Calculang0/.project
   spoofax-contrib/calculang/branches/Calculang0/trans/calculang.str
   spoofax-contrib/calculang/branches/Calculang0/trans/calculate.str
   spoofax-contrib/calculang/branches/Calculang0/trans/check.str

Copied: spoofax-contrib/calculang/branches/Calculang0/.externalToolBuilders/Calculang0 build.main.xml (from r21324, spoofax-contrib/calculang/branches/Calculang0/.externalToolBuilders/Calculang build.main.xml.launch)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang0/.externalToolBuilders/Calculang0 build.main.xml	Fri Nov  5 09:18:17 2010	(r21329, copy of r21324, spoofax-contrib/calculang/branches/Calculang0/.externalToolBuilders/Calculang build.main.xml.launch)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang0}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang0}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Modified: spoofax-contrib/calculang/branches/Calculang0/.project
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/.project	Fri Nov  5 09:17:52 2010	(r21328)
+++ spoofax-contrib/calculang/branches/Calculang0/.project	Fri Nov  5 09:18:17 2010	(r21329)
@@ -10,7 +10,7 @@
 			<arguments>
 				<dictionary>
 					<key>LaunchConfigHandle</key>
-					<value>&lt;project&gt;/.externalToolBuilders/Calculang build.main.xml.launch</value>
+					<value>&lt;project&gt;/.externalToolBuilders/Calculang0 build.main.xml.launch</value>
 				</dictionary>
 			</arguments>
 		</buildCommand>

Modified: spoofax-contrib/calculang/branches/Calculang0/trans/calculang.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/trans/calculang.str	Fri Nov  5 09:17:52 2010	(r21328)
+++ spoofax-contrib/calculang/branches/Calculang0/trans/calculang.str	Fri Nov  5 09:18:17 2010	(r21329)
@@ -9,15 +9,6 @@
 
 rules // Main editor interface (defined by editor/Calculang-Builders and -References.esv)
   
-  editor-analyze:
-    (ast, path, project-path) -> (ast, errors, warnings, notes)
-    with
-      editor-init;
-      analyze;
-      errors   := <collect-all(constraint-error, conc)> ast;
-      warnings := [];
-      notes    := []
-  
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)
     with

Modified: spoofax-contrib/calculang/branches/Calculang0/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/trans/calculate.str	Fri Nov  5 09:17:52 2010	(r21328)
+++ spoofax-contrib/calculang/branches/Calculang0/trans/calculate.str	Fri Nov  5 09:18:17 2010	(r21329)
@@ -8,5 +8,5 @@
 
 rules
 
-  calculate:
+  calc:
     Int(x) -> <string-to-int> x

Modified: spoofax-contrib/calculang/branches/Calculang0/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/trans/check.str	Fri Nov  5 09:17:52 2010	(r21328)
+++ spoofax-contrib/calculang/branches/Calculang0/trans/check.str	Fri Nov  5 09:18:17 2010	(r21329)
@@ -7,11 +7,18 @@
   calculate
 
 rules
+  
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <constraint-errors> ast;
+      warnings := [];
+      notes    := []
 
   analyze:
     t -> t
   
-  constraint-error:
-    i -> (i, "There is no six")
-    where
-      <eq> (i, "6")
\ No newline at end of file
+  constraint-errors:
+    t -> []
\ No newline at end of file

From L.C.L.Kats at tudelft.nl  Fri Nov  5 10:18:22 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 05 Nov 2010 09:18:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21330 - in
	spoofax-contrib/calculang/branches/Calculang1: .
	.externalToolBuilders trans
Message-ID: <201011050918.oA59IMoG014818@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Nov  5 09:18:22 2010
New Revision: 21330
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21330&sc=1

Log:


Added:
   spoofax-contrib/calculang/branches/Calculang1/.externalToolBuilders/Calculang1 build.main.xml.launch
      - copied unchanged from r21327, spoofax-contrib/calculang/branches/Calculang1/.externalToolBuilders/Calculang build.main.xml.launch
Deleted:
   spoofax-contrib/calculang/branches/Calculang1/.externalToolBuilders/Calculang build.main.xml.launch
Modified:
   spoofax-contrib/calculang/branches/Calculang1/.project
   spoofax-contrib/calculang/branches/Calculang1/trans/calculang.str
   spoofax-contrib/calculang/branches/Calculang1/trans/calculate.str
   spoofax-contrib/calculang/branches/Calculang1/trans/check.str

Copied: spoofax-contrib/calculang/branches/Calculang1/.externalToolBuilders/Calculang1 build.main.xml.launch (from r21327, spoofax-contrib/calculang/branches/Calculang1/.externalToolBuilders/Calculang build.main.xml.launch)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang1/.externalToolBuilders/Calculang1 build.main.xml.launch	Fri Nov  5 09:18:22 2010	(r21330, copy of r21327, spoofax-contrib/calculang/branches/Calculang1/.externalToolBuilders/Calculang build.main.xml.launch)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang1}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang1}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Modified: spoofax-contrib/calculang/branches/Calculang1/.project
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang1/.project	Fri Nov  5 09:18:17 2010	(r21329)
+++ spoofax-contrib/calculang/branches/Calculang1/.project	Fri Nov  5 09:18:22 2010	(r21330)
@@ -10,7 +10,7 @@
 			<arguments>
 				<dictionary>
 					<key>LaunchConfigHandle</key>
-					<value>&lt;project&gt;/.externalToolBuilders/Calculang build.main.xml.launch</value>
+					<value>&lt;project&gt;/.externalToolBuilders/Calculang1 build.main.xml.launch</value>
 				</dictionary>
 			</arguments>
 		</buildCommand>

Modified: spoofax-contrib/calculang/branches/Calculang1/trans/calculang.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang1/trans/calculang.str	Fri Nov  5 09:18:17 2010	(r21329)
+++ spoofax-contrib/calculang/branches/Calculang1/trans/calculang.str	Fri Nov  5 09:18:22 2010	(r21330)
@@ -9,15 +9,6 @@
 
 rules // Main editor interface (defined by editor/Calculang-Builders and -References.esv)
   
-  editor-analyze:
-    (ast, path, project-path) -> (ast, errors, warnings, notes)
-    with
-      editor-init;
-      analyze;
-      errors   := <collect-all(constraint-error, conc)> ast;
-      warnings := [];
-      notes    := []
-  
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)
     with

Modified: spoofax-contrib/calculang/branches/Calculang1/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang1/trans/calculate.str	Fri Nov  5 09:18:17 2010	(r21329)
+++ spoofax-contrib/calculang/branches/Calculang1/trans/calculate.str	Fri Nov  5 09:18:22 2010	(r21330)
@@ -8,5 +8,5 @@
 
 rules
 
-  calculate:
+  calc:
     Int(x) -> <string-to-int> x

Modified: spoofax-contrib/calculang/branches/Calculang1/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang1/trans/check.str	Fri Nov  5 09:18:17 2010	(r21329)
+++ spoofax-contrib/calculang/branches/Calculang1/trans/check.str	Fri Nov  5 09:18:22 2010	(r21330)
@@ -7,11 +7,18 @@
   calculate
 
 rules
+  
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <constraint-errors> ast;
+      warnings := [];
+      notes    := []
 
   analyze:
     t -> t
   
-  constraint-error:
-    i -> (i, "There is no six")
-    where
-      <eq> (i, "6")
\ No newline at end of file
+  constraint-errors:
+    t -> []
\ No newline at end of file

From L.C.L.Kats at tudelft.nl  Fri Nov  5 10:18:27 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 05 Nov 2010 09:18:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21331 - in
	spoofax-contrib/calculang/branches/Calculang2: .
	.externalToolBuilders trans
Message-ID: <201011050918.oA59IRwN014821@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Nov  5 09:18:27 2010
New Revision: 21331
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21331&sc=1

Log:


Added:
   spoofax-contrib/calculang/branches/Calculang2/.externalToolBuilders/Calculang2 build.main.xml.launch
      - copied unchanged from r21327, spoofax-contrib/calculang/branches/Calculang2/.externalToolBuilders/Calculang build.main.xml.launch
Deleted:
   spoofax-contrib/calculang/branches/Calculang2/.externalToolBuilders/Calculang build.main.xml.launch
Modified:
   spoofax-contrib/calculang/branches/Calculang2/.project
   spoofax-contrib/calculang/branches/Calculang2/trans/calculang.str
   spoofax-contrib/calculang/branches/Calculang2/trans/check.str

Copied: spoofax-contrib/calculang/branches/Calculang2/.externalToolBuilders/Calculang2 build.main.xml.launch (from r21327, spoofax-contrib/calculang/branches/Calculang2/.externalToolBuilders/Calculang build.main.xml.launch)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang2/.externalToolBuilders/Calculang2 build.main.xml.launch	Fri Nov  5 09:18:27 2010	(r21331, copy of r21327, spoofax-contrib/calculang/branches/Calculang2/.externalToolBuilders/Calculang build.main.xml.launch)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang2}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang2}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Modified: spoofax-contrib/calculang/branches/Calculang2/.project
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang2/.project	Fri Nov  5 09:18:22 2010	(r21330)
+++ spoofax-contrib/calculang/branches/Calculang2/.project	Fri Nov  5 09:18:27 2010	(r21331)
@@ -10,7 +10,7 @@
 			<arguments>
 				<dictionary>
 					<key>LaunchConfigHandle</key>
-					<value>&lt;project&gt;/.externalToolBuilders/Calculang build.main.xml.launch</value>
+					<value>&lt;project&gt;/.externalToolBuilders/Calculang2 build.main.xml.launch</value>
 				</dictionary>
 			</arguments>
 		</buildCommand>

Modified: spoofax-contrib/calculang/branches/Calculang2/trans/calculang.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang2/trans/calculang.str	Fri Nov  5 09:18:22 2010	(r21330)
+++ spoofax-contrib/calculang/branches/Calculang2/trans/calculang.str	Fri Nov  5 09:18:27 2010	(r21331)
@@ -9,15 +9,6 @@
 
 rules // Main editor interface (defined by editor/Calculang-Builders and -References.esv)
   
-  editor-analyze:
-    (ast, path, project-path) -> (ast, errors, warnings, notes)
-    with
-      editor-init;
-      analyze;
-      errors   := <collect-all(constraint-error, conc)> ast;
-      warnings := [];
-      notes    := []
-  
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
@@ -27,5 +18,5 @@
   generate-eval:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
-      filename := <guarantee-extension(|"result.cal")> path;
+      filename := <guarantee-extension(|"result.aterm")> path;
       result   := <calculate> selected

Modified: spoofax-contrib/calculang/branches/Calculang2/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang2/trans/check.str	Fri Nov  5 09:18:22 2010	(r21330)
+++ spoofax-contrib/calculang/branches/Calculang2/trans/check.str	Fri Nov  5 09:18:27 2010	(r21331)
@@ -7,11 +7,18 @@
   calculate
 
 rules
+  
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <constraint-errors> ast;
+      warnings := [];
+      notes    := []
 
   analyze:
     t -> t
   
-  constraint-error:
-    i -> (i, "There is no six")
-    where
-      <eq> (i, "6")
\ No newline at end of file
+  constraint-errors:
+    t -> []
\ No newline at end of file

From L.C.L.Kats at tudelft.nl  Fri Nov  5 10:18:50 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 05 Nov 2010 09:18:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21332 - in
	spoofax-contrib/calculang/branches/Calculang3: .
	.externalToolBuilders trans
Message-ID: <201011050918.oA59Ioqx014824@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Nov  5 09:18:50 2010
New Revision: 21332
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21332&sc=1

Log:


Deleted:
   spoofax-contrib/calculang/branches/Calculang3/.externalToolBuilders/
Modified:
   spoofax-contrib/calculang/branches/Calculang3/.project
   spoofax-contrib/calculang/branches/Calculang3/trans/calculang.str
   spoofax-contrib/calculang/branches/Calculang3/trans/check.str

Modified: spoofax-contrib/calculang/branches/Calculang3/.project
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang3/.project	Fri Nov  5 09:18:27 2010	(r21331)
+++ spoofax-contrib/calculang/branches/Calculang3/.project	Fri Nov  5 09:18:50 2010	(r21332)
@@ -10,7 +10,7 @@
 			<arguments>
 				<dictionary>
 					<key>LaunchConfigHandle</key>
-					<value>&lt;project&gt;/.externalToolBuilders/Calculang build.main.xml.launch</value>
+					<value>&lt;project&gt;/.externalToolBuilders/Calculang3 build.main.xml.launch</value>
 				</dictionary>
 			</arguments>
 		</buildCommand>

Modified: spoofax-contrib/calculang/branches/Calculang3/trans/calculang.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang3/trans/calculang.str	Fri Nov  5 09:18:27 2010	(r21331)
+++ spoofax-contrib/calculang/branches/Calculang3/trans/calculang.str	Fri Nov  5 09:18:50 2010	(r21332)
@@ -14,7 +14,7 @@
     with
       editor-init;
       analyze;
-      errors   := <collect-all(constraint-error, conc)> ast;
+      errors   := <constraint-errors> ast;
       warnings := [];
       notes    := []
   
@@ -27,5 +27,5 @@
   generate-eval:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
-      filename := <guarantee-extension(|"result.cal")> path;
+      filename := <guarantee-extension(|"result.aterm")> path;
       result   := <calculate> selected

Modified: spoofax-contrib/calculang/branches/Calculang3/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang3/trans/check.str	Fri Nov  5 09:18:27 2010	(r21331)
+++ spoofax-contrib/calculang/branches/Calculang3/trans/check.str	Fri Nov  5 09:18:50 2010	(r21332)
@@ -11,7 +11,5 @@
   analyze:
     t -> t
   
-  constraint-error:
-    i -> (i, "There is no six")
-    where
-      <eq> (i, "6")
\ No newline at end of file
+  constraint-errors:
+    t -> []
\ No newline at end of file

From L.C.L.Kats at tudelft.nl  Fri Nov  5 10:20:05 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 05 Nov 2010 09:20:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21333 - in
	spoofax-contrib/calculang/branches/Calculang4: . editor
	examples trans
Message-ID: <201011050920.oA59K56k014972@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Nov  5 09:20:04 2010
New Revision: 21333
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21333&sc=1

Log:
more selective commits trying to weed out a local wc problem

Added:
   spoofax-contrib/calculang/branches/Calculang4/
      - copied from r21327, spoofax-contrib/calculang/branches/Calculang3/
Modified:
   spoofax-contrib/calculang/branches/Calculang4/.project
   spoofax-contrib/calculang/branches/Calculang4/editor/Calculang-Builders.esv
   spoofax-contrib/calculang/branches/Calculang4/examples/example.cal
   spoofax-contrib/calculang/branches/Calculang4/trans/calculang.str
   spoofax-contrib/calculang/branches/Calculang4/trans/check.str

Modified: spoofax-contrib/calculang/branches/Calculang4/.project
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang3/.project	Thu Nov  4 17:12:56 2010	(r21327)
+++ spoofax-contrib/calculang/branches/Calculang4/.project	Fri Nov  5 09:20:04 2010	(r21333)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 
 <projectDescription>
-      <name>Calculang3</name>
+      <name>Calculang4</name>
       <comment></comment>
       <buildSpec>
 		<buildCommand>
@@ -10,7 +10,7 @@
 			<arguments>
 				<dictionary>
 					<key>LaunchConfigHandle</key>
-					<value>&lt;project&gt;/.externalToolBuilders/Calculang build.main.xml.launch</value>
+					<value>&lt;project&gt;/.externalToolBuilders/Calculang4 build.main.xml.launch</value>
 				</dictionary>
 			</arguments>
 		</buildCommand>

Modified: spoofax-contrib/calculang/branches/Calculang4/editor/Calculang-Builders.esv
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang3/editor/Calculang-Builders.esv	Thu Nov  4 17:12:56 2010	(r21327)
+++ spoofax-contrib/calculang/branches/Calculang4/editor/Calculang-Builders.esv	Fri Nov  5 09:20:04 2010	(r21333)
@@ -11,7 +11,9 @@
 
 builders
                                                                                                                                
-  provider: include/calculang.ctree                                                                                         
+  provider: include/calculang.ctree                                                                        
+                                                                                                                               
+  observer: editor-analyze                                                                                                
                                                                                                                                
   builder: "Show abstract syntax (for selection)" =
   	generate-aterm (openeditor) (realtime) (meta) (source)

Modified: spoofax-contrib/calculang/branches/Calculang4/examples/example.cal
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang3/examples/example.cal	Thu Nov  4 17:12:56 2010	(r21327)
+++ spoofax-contrib/calculang/branches/Calculang4/examples/example.cal	Fri Nov  5 09:20:04 2010	(r21333)
@@ -1,3 +1,3 @@
 x = 1
 y = 2 + 1
-foo = x + y * 2
\ No newline at end of file
+foo = x + y * z
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang4/trans/calculang.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang3/trans/calculang.str	Thu Nov  4 17:12:56 2010	(r21327)
+++ spoofax-contrib/calculang/branches/Calculang4/trans/calculang.str	Fri Nov  5 09:20:04 2010	(r21333)
@@ -9,15 +9,6 @@
 
 rules // Main editor interface (defined by editor/Calculang-Builders and -References.esv)
   
-  editor-analyze:
-    (ast, path, project-path) -> (ast, errors, warnings, notes)
-    with
-      editor-init;
-      analyze;
-      errors   := <collect-all(constraint-error, conc)> ast;
-      warnings := [];
-      notes    := []
-  
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
@@ -27,5 +18,5 @@
   generate-eval:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
-      filename := <guarantee-extension(|"result.cal")> path;
+      filename := <guarantee-extension(|"result.aterm")> path;
       result   := <calculate> selected

Modified: spoofax-contrib/calculang/branches/Calculang4/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang3/trans/check.str	Thu Nov  4 17:12:56 2010	(r21327)
+++ spoofax-contrib/calculang/branches/Calculang4/trans/check.str	Fri Nov  5 09:20:04 2010	(r21333)
@@ -7,11 +7,45 @@
   calculate
 
 rules
+  
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <constraint-errors> ast;
+      warnings := [];
+      notes    := []
 
   analyze:
     t -> t
+    with
+      <topdown(try(record-var))> t
+
+  record-var:
+    Assign(x, e) -> Assign(x, e)
+    with
+      rules(
+        GetVar   :+ x -> e
+      )
+  
+  constraint-errors:
+    t -> <collect-all(constraint-error, conc)> t
   
   constraint-error:
-    i -> (i, "There is no six")
+    Var(x) -> (x, $[Variable [x] is not defined])
     where
-      <eq> (i, "6")
\ No newline at end of file
+      not(<GetVar> x)
+  
+  constraint-error:
+    Assign(x, _) -> (x, $[Duplicate variable name])
+    where
+      not(<length> (<bagof-GetVar> x) => 1)
+
+  constraint-note:
+    Assign(x, e) -> (x, $[Constant expression in assignment])
+    where
+      not(<oncetd(is-var)> e)
+  
+  is-var:
+    Var(x) -> Var(x)

From L.C.L.Kats at tudelft.nl  Fri Nov  5 10:20:51 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 05 Nov 2010 09:20:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21334 -
	spoofax-contrib/calculang/branches/Calculang4/.externalToolBuilders
Message-ID: <201011050920.oA59Kpdq015137@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Nov  5 09:20:51 2010
New Revision: 21334
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21334&sc=1

Log:
managed to commit the problematic file

Added:
   spoofax-contrib/calculang/branches/Calculang4/.externalToolBuilders/Calculang4 build.main.xml.launch
      - copied unchanged from r21333, spoofax-contrib/calculang/branches/Calculang4/.externalToolBuilders/Calculang build.main.xml.launch
Deleted:
   spoofax-contrib/calculang/branches/Calculang4/.externalToolBuilders/Calculang build.main.xml.launch

Copied: spoofax-contrib/calculang/branches/Calculang4/.externalToolBuilders/Calculang4 build.main.xml.launch (from r21333, spoofax-contrib/calculang/branches/Calculang4/.externalToolBuilders/Calculang build.main.xml.launch)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang4/.externalToolBuilders/Calculang4 build.main.xml.launch	Fri Nov  5 09:20:51 2010	(r21334, copy of r21333, spoofax-contrib/calculang/branches/Calculang4/.externalToolBuilders/Calculang build.main.xml.launch)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang3}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang3}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

From L.C.L.Kats at tudelft.nl  Fri Nov  5 16:25:48 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 05 Nov 2010 15:25:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21335 - in
	spoofax-contrib/calculang: branches/Calculang0/syntax
	branches/Calculang0/trans branches/Calculang1/syntax
	branches/Calculang2/syntax branches/Calculang2/trans ...
Message-ID: <201011051525.oA5FPme2023217@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Nov  5 15:25:47 2010
New Revision: 21335
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21335&sc=1

Log:


Added:
   spoofax-contrib/calculang/branches/Calculang5/
      - copied from r21327, spoofax-contrib/calculang/trunk/
Replaced:
   spoofax-contrib/calculang/branches/Calculang5/examples/example.cal
      - copied unchanged from r21328, spoofax-contrib/calculang/trunk/examples/example.cal
   spoofax-contrib/calculang/branches/Calculang5/trans/calculang.str
      - copied unchanged from r21328, spoofax-contrib/calculang/trunk/trans/calculang.str
   spoofax-contrib/calculang/branches/Calculang5/trans/calculate.str
      - copied, changed from r21328, spoofax-contrib/calculang/trunk/trans/calculate.str
   spoofax-contrib/calculang/branches/Calculang5/trans/check.str
      - copied unchanged from r21328, spoofax-contrib/calculang/trunk/trans/check.str
Deleted:
   spoofax-contrib/calculang/branches/Calculang0/syntax/Calculang.generated.pp
   spoofax-contrib/calculang/branches/Calculang1/syntax/Calculang.generated.pp
   spoofax-contrib/calculang/branches/Calculang2/syntax/Calculang.generated.pp
   spoofax-contrib/calculang/branches/Calculang3/syntax/Calculang.generated.pp
   spoofax-contrib/calculang/branches/Calculang4/syntax/Calculang.generated.pp
   spoofax-contrib/calculang/branches/Calculang5/syntax/Calculang.generated.pp
   spoofax-contrib/calculang/trunk/syntax/Calculang.generated.pp
Modified:
   spoofax-contrib/calculang/branches/Calculang0/syntax/Calculang.sdf
   spoofax-contrib/calculang/branches/Calculang0/trans/calculate.str
   spoofax-contrib/calculang/branches/Calculang2/trans/calculate.str
   spoofax-contrib/calculang/branches/Calculang3/trans/calculate.str
   spoofax-contrib/calculang/branches/Calculang4/examples/example.cal
   spoofax-contrib/calculang/branches/Calculang4/trans/calculate.str
   spoofax-contrib/calculang/branches/Calculang5/.project
   spoofax-contrib/calculang/trunk/trans/calculate.str

Modified: spoofax-contrib/calculang/branches/Calculang0/syntax/Calculang.sdf
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/syntax/Calculang.sdf	Fri Nov  5 09:20:51 2010	(r21334)
+++ spoofax-contrib/calculang/branches/Calculang0/syntax/Calculang.sdf	Fri Nov  5 15:25:47 2010	(r21335)
@@ -10,4 +10,10 @@
   context-free syntax
     
     Exp -> Start {cons("Expr")}
-    INT -> Exp {cons("Int")}
\ No newline at end of file
+    INT -> Exp {cons("Int")}
+    %% ...
+    
+    
+    
+    
+    
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang0/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang0/trans/calculate.str	Fri Nov  5 09:20:51 2010	(r21334)
+++ spoofax-contrib/calculang/branches/Calculang0/trans/calculate.str	Fri Nov  5 15:25:47 2010	(r21335)
@@ -7,6 +7,6 @@
   check
 
 rules
-
-  calc:
-    Int(x) -> <string-to-int> x
+    
+  // calc:
+  //  Plus(Int(x), Int(y)) -> Int(<addS> (x, y))

Modified: spoofax-contrib/calculang/branches/Calculang2/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang2/trans/calculate.str	Fri Nov  5 09:20:51 2010	(r21334)
+++ spoofax-contrib/calculang/branches/Calculang2/trans/calculate.str	Fri Nov  5 15:25:47 2010	(r21335)
@@ -8,25 +8,19 @@
 
 rules
 
-  calculate:
-    e -> result
-    where
-      result := <bottomup(try(calc))> e
+  calculate = bottomup(try(calc))
 
   calc:
-    Int(x) -> <string-to-int> x
-
-  calc:
-    Plus(x, y) -> <add> (x, y)
+    Plus(Int(x), Int(y)) -> Int(<addS> (x, y))
  
   calc:
-    Minus(x, y) -> <subt> (x, y)
+    Minus(Int(x), Int(y)) -> Int(<subtS> (x, y))
     
   calc:
-    Mul(x, y) -> <mul> (x, y)
+    Mul(Int(x), Int(y)) -> Int(<mulS> (x, y))
     
   calc:
-    Div(x, y) -> <div> (x, y)
+    Div(Int(x), Int(y)) -> Int(<divS> (x, y))
 
   calc:
-    Expr(x) -> x
+    Expr(e) -> e

Modified: spoofax-contrib/calculang/branches/Calculang3/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang3/trans/calculate.str	Fri Nov  5 09:20:51 2010	(r21334)
+++ spoofax-contrib/calculang/branches/Calculang3/trans/calculate.str	Fri Nov  5 15:25:47 2010	(r21335)
@@ -8,10 +8,7 @@
 
 rules
 
-  calculate:
-    e -> result
-    where
-      result := <bottomup(try(calc))> e
+  calculate = bottomup(try(calc))
 
   calc:
     Assign(x, e) -> e
@@ -21,25 +18,23 @@
       )
 
   calc:
-    Int(x) -> <string-to-int> x
-
-  calc:
-    Plus(x, y) -> <add> (x, y)
+    Plus(Int(x), Int(y)) -> Int(<addS> (x, y))
  
   calc:
-    Minus(x, y) -> <subt> (x, y)
+    Minus(Int(x), Int(y)) -> Int(<subtS> (x, y))
     
   calc:
-    Mul(x, y) -> <mul> (x, y)
+    Mul(Int(x), Int(y)) -> Int(<mulS> (x, y))
     
   calc:
-    Div(x, y) -> <div> (x, y)
+    Div(Int(x), Int(y)) -> Int(<divS> (x, y))
 
   calc:
-    Expr(x) -> x
+    Expr(e) -> e
 
   calc:
-    Stm(xs) -> xs
+    Stm(s) -> s
   
   calc:
     Var(x) -> <GetValue> x
+

Modified: spoofax-contrib/calculang/branches/Calculang4/examples/example.cal
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang4/examples/example.cal	Fri Nov  5 09:20:51 2010	(r21334)
+++ spoofax-contrib/calculang/branches/Calculang4/examples/example.cal	Fri Nov  5 15:25:47 2010	(r21335)
@@ -1,3 +1,3 @@
 x = 1
 y = 2 + 1
-foo = x + y * z
\ No newline at end of file
+foo = x + y * y
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang4/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang4/trans/calculate.str	Fri Nov  5 09:20:51 2010	(r21334)
+++ spoofax-contrib/calculang/branches/Calculang4/trans/calculate.str	Fri Nov  5 15:25:47 2010	(r21335)
@@ -8,10 +8,7 @@
 
 rules
 
-  calculate:
-    e -> result
-    where
-      result := <bottomup(try(calc))> e
+  calculate = bottomup(try(calc))
 
   calc:
     Assign(x, e) -> e
@@ -21,25 +18,22 @@
       )
 
   calc:
-    Int(x) -> <string-to-int> x
-
-  calc:
-    Plus(x, y) -> <add> (x, y)
+    Plus(Int(x), Int(y)) -> Int(<addS> (x, y))
  
   calc:
-    Minus(x, y) -> <subt> (x, y)
+    Minus(Int(x), Int(y)) -> Int(<subtS> (x, y))
     
   calc:
-    Mul(x, y) -> <mul> (x, y)
+    Mul(Int(x), Int(y)) -> Int(<mulS> (x, y))
     
   calc:
-    Div(x, y) -> <div> (x, y)
+    Div(Int(x), Int(y)) -> Int(<divS> (x, y))
 
   calc:
-    Expr(x) -> x
+    Expr(e) -> e
 
   calc:
-    Stm(xs) -> xs
+    Stm(s) -> s
   
   calc:
     Var(x) -> <GetValue> x

Modified: spoofax-contrib/calculang/branches/Calculang5/.project
==============================================================================
--- spoofax-contrib/calculang/trunk/.project	Thu Nov  4 17:12:56 2010	(r21327)
+++ spoofax-contrib/calculang/branches/Calculang5/.project	Fri Nov  5 15:25:47 2010	(r21335)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 
 <projectDescription>
-      <name>Calculang</name>
+      <name>Calculang5</name>
       <comment></comment>
       <buildSpec>
 		<buildCommand>
@@ -10,7 +10,7 @@
 			<arguments>
 				<dictionary>
 					<key>LaunchConfigHandle</key>
-					<value>&lt;project&gt;/.externalToolBuilders/Calculang build.main.xml.launch</value>
+					<value>&lt;project&gt;/.externalToolBuilders/Calculang5 build.main.xml.launch</value>
 				</dictionary>
 			</arguments>
 		</buildCommand>
@@ -34,4 +34,4 @@
         <nature>org.eclipse.pde.PluginNature</nature>
         <nature>org.eclipse.jdt.core.javanature</nature>
       </natures>
-    </projectDescription>
\ No newline at end of file
+    </projectDescription>

Copied: spoofax-contrib/calculang/branches/Calculang5/examples/example.cal (from r21328, spoofax-contrib/calculang/trunk/examples/example.cal)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5/examples/example.cal	Fri Nov  5 15:25:47 2010	(r21335, copy of r21328, spoofax-contrib/calculang/trunk/examples/example.cal)
@@ -0,0 +1,3 @@
+x = 1
+y = 2 + 1
+foo = x + y * 25
\ No newline at end of file

Copied: spoofax-contrib/calculang/branches/Calculang5/trans/calculang.str (from r21328, spoofax-contrib/calculang/trunk/trans/calculang.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5/trans/calculang.str	Fri Nov  5 15:25:47 2010	(r21335, copy of r21328, spoofax-contrib/calculang/trunk/trans/calculang.str)
@@ -0,0 +1,39 @@
+module calculang
+
+imports
+  libstratego-lib
+  include/Calculang
+  lib/editor-common.generated
+  check
+  calculate
+
+rules // Main editor interface (defined by editor/Calculang-Builders and -References.esv)
+  
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+  generate-eval:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      editor-init;
+      analyze;
+      filename := <guarantee-extension(|"result.aterm")> path;
+      result   := <calculate> selected
+  
+  editor-hover:
+    (selected, position, ast, path, project-path) -> result
+    where
+      result := <calculate> selected
+  
+  editor-resolve:
+    (Var(x), position, ast, path, project-path) -> target
+    where
+      target := <GetVar> x
+
+  editor-complete:
+    (Var(x), position, ast, path, project-path) -> proposals
+    where
+      proposals := <all-keys-GetVar>

Copied and modified: spoofax-contrib/calculang/branches/Calculang5/trans/calculate.str (from r21328, spoofax-contrib/calculang/trunk/trans/calculate.str)
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/calculate.str	Fri Nov  5 09:17:52 2010	(r21328, copy source)
+++ spoofax-contrib/calculang/branches/Calculang5/trans/calculate.str	Fri Nov  5 15:25:47 2010	(r21335)
@@ -9,39 +9,34 @@
 rules
 
   calculate:
-  	e -> result
+    e -> result
     where
       result := <bottomup(try(calc))> e
 
   calc:
     Assign(x, e) -> e
-    /* now in check.str
     where
       rules(
         GetValue: x -> e
       )
-    */
 
   calc:
-    Int(x) -> <string-to-int> x
-
-  calc:
-  	Plus(x, y) -> <add> (x, y)
+    Plus(Int(x), Int(y)) -> Int(<addS> (x, y))
  
   calc:
-  	Minus(x, y) -> <subt> (x, y)
-  	
+    Minus(Int(x), Int(y)) -> Int(<subtS> (x, y))
+    
   calc:
-  	Mul(x, y) -> <mul> (x, y)
-  	
+    Mul(Int(x), Int(y)) -> Int(<mulS> (x, y))
+    
   calc:
-  	Div(x, y) -> <div> (x, y)
+    Div(Int(x), Int(y)) -> Int(<divS> (x, y))
 
   calc:
-    Expr(x) -> x
+    Expr(e) -> e
 
   calc:
-    Stm(xs) -> xs
+    Stm(s) -> s
   
   calc:
     Var(x) -> <GetValue> x

Copied: spoofax-contrib/calculang/branches/Calculang5/trans/check.str (from r21328, spoofax-contrib/calculang/trunk/trans/check.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang5/trans/check.str	Fri Nov  5 15:25:47 2010	(r21335, copy of r21328, spoofax-contrib/calculang/trunk/trans/check.str)
@@ -0,0 +1,61 @@
+module check
+
+imports
+  libstratego-lib
+  include/Calculang
+  lib/editor-common.generated
+  calculate
+
+rules
+  
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <constraint-errors> ast;
+      warnings := [];
+      notes    := []
+
+  analyze:
+    t -> t
+    with
+      <topdown(try(record-var))> t;
+      rules(
+        GetVar   :+ "PI" -> "3.14"
+        GetValue :+ "PI" -> 3.14
+      )
+
+  record-var:
+    Assign(x, e) -> Assign(x, e)
+    with
+      if <calculate> e then
+        e2 := <calculate> e
+      else
+        e2 := "ERROR!"
+      end;
+      rules(
+        GetVar   :+ x -> e
+        GetValue :+ x -> e2
+      )
+  
+  constraint-errors:
+    t -> <collect-all(constraint-error, conc)> t
+    
+  constraint-error:
+    Var(x) -> (x, $[Variable [x] is not defined])
+    where
+      not(<GetVar> x)
+  
+  constraint-error:
+    Assign(x, _) -> (x, $[Duplicate variable name])
+    where
+      not(<length> (<bagof-GetVar> x) => 1)
+
+  constraint-note:
+    Assign(x, e) -> (x, $[Constant expression in assignment])
+    where
+      not(<oncetd(is-var)> e)
+  
+  is-var:
+    Var(x) -> Var(x)
\ No newline at end of file

Modified: spoofax-contrib/calculang/trunk/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/calculate.str	Fri Nov  5 09:20:51 2010	(r21334)
+++ spoofax-contrib/calculang/trunk/trans/calculate.str	Fri Nov  5 15:25:47 2010	(r21335)
@@ -15,33 +15,28 @@
 
   calc:
     Assign(x, e) -> e
-    /* now in check.str
     where
       rules(
         GetValue: x -> e
       )
-    */
 
   calc:
-    Int(x) -> <string-to-int> x
-
-  calc:
-  	Plus(x, y) -> <add> (x, y)
+  	Plus(Int(x), Int(y)) -> Int(<addS> (x, y))
  
   calc:
-  	Minus(x, y) -> <subt> (x, y)
+  	Minus(Int(x), Int(y)) -> Int(<subtS> (x, y))
   	
   calc:
-  	Mul(x, y) -> <mul> (x, y)
+  	Mul(Int(x), Int(y)) -> Int(<mulS> (x, y))
   	
   calc:
-  	Div(x, y) -> <div> (x, y)
+  	Div(Int(x), Int(y)) -> Int(<divS> (x, y))
 
   calc:
-    Expr(x) -> x
+    Expr(e) -> e
 
   calc:
-    Stm(xs) -> xs
+    Stm(s) -> s
   
   calc:
     Var(x) -> <GetValue> x

From L.C.L.Kats at tudelft.nl  Fri Nov  5 16:26:32 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 05 Nov 2010 15:26:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21336 -
	spoofax-contrib/calculang/branches/Calculang5/.externalToolBuilders
Message-ID: <201011051526.oA5FQWw6023222@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Nov  5 15:26:32 2010
New Revision: 21336
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21336&sc=1

Log:


Added:
   spoofax-contrib/calculang/branches/Calculang5/.externalToolBuilders/Calculang5 build.main.xml.launch
      - copied, changed from r21335, spoofax-contrib/calculang/branches/Calculang5/.externalToolBuilders/Calculang build.main.xml.launch
Deleted:
   spoofax-contrib/calculang/branches/Calculang5/.externalToolBuilders/Calculang build.main.xml.launch

Copied and modified: spoofax-contrib/calculang/branches/Calculang5/.externalToolBuilders/Calculang5 build.main.xml.launch (from r21335, spoofax-contrib/calculang/branches/Calculang5/.externalToolBuilders/Calculang build.main.xml.launch)
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang5/.externalToolBuilders/Calculang build.main.xml.launch	Fri Nov  5 15:25:47 2010	(r21335, copy source)
+++ spoofax-contrib/calculang/branches/Calculang5/.externalToolBuilders/Calculang5 build.main.xml.launch	Fri Nov  5 15:26:32 2010	(r21336)
@@ -16,8 +16,8 @@
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang}/build.main.xml"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang5}/build.main.xml"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang5}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>

From L.C.L.Kats at tudelft.nl  Fri Nov  5 18:20:52 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 05 Nov 2010 17:20:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21337 - in
	spoofax-contrib/calculang: branches/Calculang3/examples
	branches/Calculang3/trans branches/Calculang4/examples
	branches/Calculang4/trans branches/Calculang5/tra...
Message-ID: <201011051720.oA5HKqWt024843@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Fri Nov  5 17:20:52 2010
New Revision: 21337
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21337&sc=1

Log:


Modified:
   spoofax-contrib/calculang/branches/Calculang3/examples/example.cal
   spoofax-contrib/calculang/branches/Calculang3/trans/calculate.str
   spoofax-contrib/calculang/branches/Calculang3/trans/check.str
   spoofax-contrib/calculang/branches/Calculang4/examples/example.cal
   spoofax-contrib/calculang/branches/Calculang4/trans/check.str
   spoofax-contrib/calculang/branches/Calculang5/trans/check.str
   spoofax-contrib/calculang/trunk/trans/check.str

Modified: spoofax-contrib/calculang/branches/Calculang3/examples/example.cal
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang3/examples/example.cal	Fri Nov  5 15:26:32 2010	(r21336)
+++ spoofax-contrib/calculang/branches/Calculang3/examples/example.cal	Fri Nov  5 17:20:52 2010	(r21337)
@@ -1,3 +1,4 @@
 x = 1
 y = 2 + 1
-foo = x + y * 2
\ No newline at end of file
+foo = x + y * 2
+

Modified: spoofax-contrib/calculang/branches/Calculang3/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang3/trans/calculate.str	Fri Nov  5 15:26:32 2010	(r21336)
+++ spoofax-contrib/calculang/branches/Calculang3/trans/calculate.str	Fri Nov  5 17:20:52 2010	(r21337)
@@ -11,13 +11,6 @@
   calculate = bottomup(try(calc))
 
   calc:
-    Assign(x, e) -> e
-    where
-      rules(
-        GetValue: x -> e
-      )
-
-  calc:
     Plus(Int(x), Int(y)) -> Int(<addS> (x, y))
  
   calc:
@@ -30,10 +23,11 @@
     Div(Int(x), Int(y)) -> Int(<divS> (x, y))
 
   calc:
-    Expr(e) -> e
-
-  calc:
-    Stm(s) -> s
+    Assign(x, e) -> e
+    where
+      rules(
+        GetValue: x -> e
+      )
   
   calc:
     Var(x) -> <GetValue> x

Modified: spoofax-contrib/calculang/branches/Calculang3/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang3/trans/check.str	Fri Nov  5 15:26:32 2010	(r21336)
+++ spoofax-contrib/calculang/branches/Calculang3/trans/check.str	Fri Nov  5 17:20:52 2010	(r21337)
@@ -7,6 +7,15 @@
   calculate
 
 rules
+  
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <constraint-errors> ast;
+      warnings := [];
+      notes    := []
 
   analyze:
     t -> t

Modified: spoofax-contrib/calculang/branches/Calculang4/examples/example.cal
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang4/examples/example.cal	Fri Nov  5 15:26:32 2010	(r21336)
+++ spoofax-contrib/calculang/branches/Calculang4/examples/example.cal	Fri Nov  5 17:20:52 2010	(r21337)
@@ -1,3 +1,3 @@
 x = 1
 y = 2 + 1
-foo = x + y * y
\ No newline at end of file
+foo = x + y * z
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang4/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang4/trans/check.str	Fri Nov  5 15:26:32 2010	(r21336)
+++ spoofax-contrib/calculang/branches/Calculang4/trans/check.str	Fri Nov  5 17:20:52 2010	(r21337)
@@ -15,12 +15,9 @@
       analyze;
       errors   := <constraint-errors> ast;
       warnings := [];
-      notes    := []
+      notes    := <constraint-notes> ast
 
-  analyze:
-    t -> t
-    with
-      <topdown(try(record-var))> t
+  analyze = topdown(try(record-var))
 
   record-var:
     Assign(x, e) -> Assign(x, e)
@@ -29,8 +26,7 @@
         GetVar   :+ x -> e
       )
   
-  constraint-errors:
-    t -> <collect-all(constraint-error, conc)> t
+  constraint-errors = collect-all(constraint-error, conc)
   
   constraint-error:
     Var(x) -> (x, $[Variable [x] is not defined])
@@ -41,6 +37,8 @@
     Assign(x, _) -> (x, $[Duplicate variable name])
     where
       not(<length> (<bagof-GetVar> x) => 1)
+  
+  constraint-notes = collect-all(constraint-note, conc)
 
   constraint-note:
     Assign(x, e) -> (x, $[Constant expression in assignment])

Modified: spoofax-contrib/calculang/branches/Calculang5/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang5/trans/check.str	Fri Nov  5 15:26:32 2010	(r21336)
+++ spoofax-contrib/calculang/branches/Calculang5/trans/check.str	Fri Nov  5 17:20:52 2010	(r21337)
@@ -15,12 +15,10 @@
       analyze;
       errors   := <constraint-errors> ast;
       warnings := [];
-      notes    := []
+      notes    := <constraint-notes> ast
 
-  analyze:
-    t -> t
-    with
-      <topdown(try(record-var))> t;
+  analyze =
+      topdown(try(record-var));
       rules(
         GetVar   :+ "PI" -> "3.14"
         GetValue :+ "PI" -> 3.14
@@ -39,8 +37,7 @@
         GetValue :+ x -> e2
       )
   
-  constraint-errors:
-    t -> <collect-all(constraint-error, conc)> t
+  constraint-errors = collect-all(constraint-error, conc)
     
   constraint-error:
     Var(x) -> (x, $[Variable [x] is not defined])
@@ -51,6 +48,8 @@
     Assign(x, _) -> (x, $[Duplicate variable name])
     where
       not(<length> (<bagof-GetVar> x) => 1)
+  
+  constraint-notes = collect-all(constraint-note, conc)
 
   constraint-note:
     Assign(x, e) -> (x, $[Constant expression in assignment])

Modified: spoofax-contrib/calculang/trunk/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/check.str	Fri Nov  5 15:26:32 2010	(r21336)
+++ spoofax-contrib/calculang/trunk/trans/check.str	Fri Nov  5 17:20:52 2010	(r21337)
@@ -15,12 +15,10 @@
       analyze;
       errors   := <constraint-errors> ast;
       warnings := [];
-      notes    := []
+      notes    := <constraint-notes> ast
 
-  analyze:
-    t -> t
-    with
-      <topdown(try(record-var))> t;
+  analyze =
+      topdown(try(record-var));
       rules(
         GetVar   :+ "PI" -> "3.14"
         GetValue :+ "PI" -> 3.14
@@ -39,8 +37,7 @@
         GetValue :+ x -> e2
       )
   
-  constraint-errors:
-    t -> <collect-all(constraint-error, conc)> t
+  constraint-errors = collect-all(constraint-error, conc)
     
   constraint-error:
     Var(x) -> (x, $[Variable [x] is not defined])
@@ -51,6 +48,8 @@
     Assign(x, _) -> (x, $[Duplicate variable name])
     where
       not(<length> (<bagof-GetVar> x) => 1)
+  
+  constraint-notes = collect-all(constraint-note, conc)
 
   constraint-note:
     Assign(x, e) -> (x, $[Constant expression in assignment])

From L.C.L.Kats at tudelft.nl  Mon Nov  8 13:11:37 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 08 Nov 2010 12:11:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21338 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.aster
	org.strategoxt.imp.editors.pp org.strategoxt.imp.editors.sdf
	org.strategoxt.imp.editors.stratego org.strateg...
Message-ID: <201011081211.oA8CBb8t011608@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Mon Nov  8 12:11:37 2010
New Revision: 21338
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21338&sc=1

Log:
Spoofax/291: Reference resolving broken

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aster/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.editors.pp/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aster/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aster/.classpath	Fri Nov  5 17:20:52 2010	(r21337)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aster/.classpath	Mon Nov  8 12:11:37 2010	(r21338)
@@ -4,6 +4,5 @@
 	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="lib" path="utils/strategoxt.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.pp/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.pp/.classpath	Fri Nov  5 17:20:52 2010	(r21337)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.pp/.classpath	Mon Nov  8 12:11:37 2010	(r21338)
@@ -4,6 +4,5 @@
 	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="lib" path="utils/strategoxt.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.classpath	Fri Nov  5 17:20:52 2010	(r21337)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.classpath	Mon Nov  8 12:11:37 2010	(r21338)
@@ -3,6 +3,5 @@
 	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="lib" path="utils/strategoxt.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.classpath	Fri Nov  5 17:20:52 2010	(r21337)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.classpath	Mon Nov  8 12:11:37 2010	(r21338)
@@ -3,6 +3,5 @@
 	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="lib" path="utils/strategoxt.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Fri Nov  5 17:20:52 2010	(r21337)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Mon Nov  8 12:11:37 2010	(r21338)
@@ -298,7 +298,7 @@
 	protected IStrategoTerm invokeObserver(IStrategoAstNode node) throws UndefinedStrategyException,
 			InterpreterErrorExit, InterpreterExit, InterpreterException {
 		
-		node = StrategoTermPath.getMatchingAncestor(node);
+		node = StrategoTermPath.getMatchingAncestor(node, false);
 		IStrategoTerm inputTerm = derivedFromEditor != null
 				? observer.makeATermInputTerm(node, true, derivedFromEditor.getResource()) 
 				: observer.makeInputTerm(node, true, source);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	Fri Nov  5 17:20:52 2010	(r21337)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	Mon Nov  8 12:11:37 2010	(r21338)
@@ -39,7 +39,7 @@
 	}
 
 	public IAst getLinkTarget(Object oNode, IParseController parseController) {
-		IStrategoAstNode node = StrategoTermPath.getMatchingAncestor((IStrategoAstNode) oNode);
+		IStrategoAstNode node = StrategoTermPath.getMatchingAncestor((IStrategoAstNode) oNode, true);
 		
 		String function = NodeMapping.getFirstAttribute(resolverFunctions, node.getConstructor(), node.getSort(), 0);
 		if (function == null) function = wildcardResolverFunction;
@@ -61,7 +61,7 @@
 	}
 
 	public String getLinkText(Object oNode) {
-		IStrategoAstNode node = StrategoTermPath.getMatchingAncestor((IStrategoAstNode) oNode);
+		IStrategoAstNode node = StrategoTermPath.getMatchingAncestor((IStrategoAstNode) oNode, true);
 		if (node == null)
 			return null;
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Fri Nov  5 17:20:52 2010	(r21337)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Mon Nov  8 12:11:37 2010	(r21338)
@@ -349,8 +349,14 @@
 	 * Gets the node furthest up the ancestor chain that
 	 * has either the same character offsets or has only one
 	 * child with the same character offsets as the node given.
+	 * 
+	 * @param allowMultiChildParent
+	 *             Also fetch the first parent if it has multiple children (e.g., Call("foo", "bar")).
 	 */
-	public static final IStrategoAstNode getMatchingAncestor(IStrategoAstNode oNode) {
+	public static final IStrategoAstNode getMatchingAncestor(IStrategoAstNode oNode, boolean allowMultiChildParent) {
+		if (allowMultiChildParent && oNode.getConstructor() == null && oNode.getParent() != null)
+			return oNode.getParent();
+		
 		IStrategoAstNode result = oNode;
 		int startOffset = result.getLeftIToken().getStartOffset();
 		int endOffset = result.getRightIToken().getEndOffset();

From L.C.L.Kats at tudelft.nl  Mon Nov  8 16:45:44 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 08 Nov 2010 15:45:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21339 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans
Message-ID: <201011081545.oA8FjiGx015848@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Mon Nov  8 15:45:43 2010
New Revision: 21339
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21339&sc=1

Log:
Reorganizing sources

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-esv.str
      - copied, changed from r21327, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-sdf.str
      - copied, changed from r21327, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-stratego.str
      - copied, changed from r21327, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Mon Nov  8 12:11:37 2010	(r21338)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Mon Nov  8 15:45:43 2010	(r21339)
@@ -11,6 +11,9 @@
   lib/editor-common.generated
   lib/sdf-desugar
   lib/sdf-parenthesize
+  to-stratego
+  to-sdf
+  to-esv
 
 signature constructors
   
@@ -57,52 +60,3 @@
       Module(name, _) := def
     <+
       name := <remove-extension> <base-filename> path
-
-rules
-
-  to-sdf:
-    (path, def) -> 'module(name', [], [exports(sections')])
-    with
-      name := <find-spoofax-module-name>;
-      if !name => ParamName(n, p) then
-        name' := parameterized(n, p)
-      else
-        Name(name') := name
-      end;
-      sections  := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> def;
-      sections' := <list-to-conc-grammars> sections
-  
-  list-to-conc-grammars:
-    [g1, g2 | gs] -> conc-grammars(g1, <list-to-conc-grammars> [g2 | gs])
-  
-  list-to-conc-grammars:
-    [g1] -> g1
-  
-  list-to-conc-grammars:
-    [] -> []
-
-rules
-
-  to-str:
-    (path, def) -> Module(name', sections)
-    with
-      name := <find-spoofax-module-name>;
-      if !name => ParamName(n, p) then
-        name' := n
-      else
-        Name(name') := name
-      end;
-      sections  := <collect-om(?STRSection(<id>), conc)> def
-
-rules
-
-  to-esv:
-    (path, def) -> Module(name', [], sections)
-    with
-      name := <find-spoofax-module-name>;
-      if !name => ParamName(n, p) then
-        name' := n
-      else
-        Name(name') := name
-      end;
-      sections  := <collect-om(?ESVSection(<id>), conc)> def

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-esv.str (from r21327, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Thu Nov  4 17:12:56 2010	(r21327, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-esv.str	Mon Nov  8 15:45:43 2010	(r21339)
@@ -1,98 +1,9 @@
-module spoofaxlang
+module to-esv
 
 imports
   libstratego-lib
-  libstratego-gpp
-  libstratego-aterm
-  libstratego-sglr
-  libstratego-sdf
-  libstrc
+  spoofaxlang
   include/SpoofaxLang
-  lib/editor-common.generated
-  lib/sdf-desugar
-  lib/sdf-parenthesize
-
-signature constructors
-  
-  Module : ID * List(Import) * List(Section) -> Module
-
-rules
-
-  editor-analyze = !([], [], [])
-  
-  generate-aterm:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"aterm")> path;
-      result   := selected // we just return the input term
-
-  generate-sdf:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"sdf")> path;
-      result   := <pp-sdf-string'> <to-sdf> (path, selected)
-
-  pp-sdf-string' =
-    sdf-desugar;
-    parenthesize-Sdf2;
-  	sdf-ppfix;
-    ast2box(|[<pp-table-sdf>]);
-    box2text-string(|80)
-
-  generate-str:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"str")> path;
-      result   := <pp-stratego-string> <parenthesize-Stratego> <to-str> (path, selected)
-
-  generate-esv:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|".packed.esv")> path;
-      result   := <to-esv> (path, selected)
-  
-  find-spoofax-module-name:
-    (path, def) -> name
-    with
-      Module(name, _) := def
-    <+
-      name := <remove-extension> <base-filename> path
-
-rules
-
-  to-sdf:
-    (path, def) -> 'module(name', [], [exports(sections')])
-    with
-      name := <find-spoofax-module-name>;
-      if !name => ParamName(n, p) then
-        name' := parameterized(n, p)
-      else
-        Name(name') := name
-      end;
-      sections  := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> def;
-      sections' := <list-to-conc-grammars> sections
-  
-  list-to-conc-grammars:
-    [g1, g2 | gs] -> conc-grammars(g1, <list-to-conc-grammars> [g2 | gs])
-  
-  list-to-conc-grammars:
-    [g1] -> g1
-  
-  list-to-conc-grammars:
-    [] -> []
-
-rules
-
-  to-str:
-    (path, def) -> Module(name', sections)
-    with
-      name := <find-spoofax-module-name>;
-      if !name => ParamName(n, p) then
-        name' := n
-      else
-        Name(name') := name
-      end;
-      sections  := <collect-om(?STRSection(<id>), conc)> def
 
 rules
 

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-sdf.str (from r21327, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Thu Nov  4 17:12:56 2010	(r21327, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-sdf.str	Mon Nov  8 15:45:43 2010	(r21339)
@@ -1,62 +1,15 @@
-module spoofaxlang
+module to-sdf
 
 imports
   libstratego-lib
   libstratego-gpp
-  libstratego-aterm
   libstratego-sglr
   libstratego-sdf
-  libstrc
   include/SpoofaxLang
   lib/editor-common.generated
   lib/sdf-desugar
   lib/sdf-parenthesize
-
-signature constructors
-  
-  Module : ID * List(Import) * List(Section) -> Module
-
-rules
-
-  editor-analyze = !([], [], [])
-  
-  generate-aterm:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"aterm")> path;
-      result   := selected // we just return the input term
-
-  generate-sdf:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"sdf")> path;
-      result   := <pp-sdf-string'> <to-sdf> (path, selected)
-
-  pp-sdf-string' =
-    sdf-desugar;
-    parenthesize-Sdf2;
-  	sdf-ppfix;
-    ast2box(|[<pp-table-sdf>]);
-    box2text-string(|80)
-
-  generate-str:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"str")> path;
-      result   := <pp-stratego-string> <parenthesize-Stratego> <to-str> (path, selected)
-
-  generate-esv:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|".packed.esv")> path;
-      result   := <to-esv> (path, selected)
-  
-  find-spoofax-module-name:
-    (path, def) -> name
-    with
-      Module(name, _) := def
-    <+
-      name := <remove-extension> <base-filename> path
+  spoofaxlang
 
 rules
 
@@ -70,7 +23,11 @@
         Name(name') := name
       end;
       sections  := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> def;
-      sections' := <list-to-conc-grammars> sections
+      sections' := <alltd(desugar-sdf-redux)> <list-to-conc-grammars> sections
+  
+  desugar-sdf-redux:
+    term(default(fun(quoted(s)))) ->
+    term(default(appl(unquoted("cons"), [fun(quoted(s))])))
   
   list-to-conc-grammars:
     [g1, g2 | gs] -> conc-grammars(g1, <list-to-conc-grammars> [g2 | gs])
@@ -80,29 +37,3 @@
   
   list-to-conc-grammars:
     [] -> []
-
-rules
-
-  to-str:
-    (path, def) -> Module(name', sections)
-    with
-      name := <find-spoofax-module-name>;
-      if !name => ParamName(n, p) then
-        name' := n
-      else
-        Name(name') := name
-      end;
-      sections  := <collect-om(?STRSection(<id>), conc)> def
-
-rules
-
-  to-esv:
-    (path, def) -> Module(name', [], sections)
-    with
-      name := <find-spoofax-module-name>;
-      if !name => ParamName(n, p) then
-        name' := n
-      else
-        Name(name') := name
-      end;
-      sections  := <collect-om(?ESVSection(<id>), conc)> def

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-stratego.str (from r21327, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Thu Nov  4 17:12:56 2010	(r21327, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-stratego.str	Mon Nov  8 15:45:43 2010	(r21339)
@@ -1,16 +1,13 @@
-module spoofaxlang
+module to-stratego
 
 imports
   libstratego-lib
-  libstratego-gpp
-  libstratego-aterm
-  libstratego-sglr
-  libstratego-sdf
   libstrc
   include/SpoofaxLang
   lib/editor-common.generated
   lib/sdf-desugar
   lib/sdf-parenthesize
+  spoofaxlang
 
 signature constructors
   
@@ -18,71 +15,6 @@
 
 rules
 
-  editor-analyze = !([], [], [])
-  
-  generate-aterm:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"aterm")> path;
-      result   := selected // we just return the input term
-
-  generate-sdf:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"sdf")> path;
-      result   := <pp-sdf-string'> <to-sdf> (path, selected)
-
-  pp-sdf-string' =
-    sdf-desugar;
-    parenthesize-Sdf2;
-  	sdf-ppfix;
-    ast2box(|[<pp-table-sdf>]);
-    box2text-string(|80)
-
-  generate-str:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"str")> path;
-      result   := <pp-stratego-string> <parenthesize-Stratego> <to-str> (path, selected)
-
-  generate-esv:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|".packed.esv")> path;
-      result   := <to-esv> (path, selected)
-  
-  find-spoofax-module-name:
-    (path, def) -> name
-    with
-      Module(name, _) := def
-    <+
-      name := <remove-extension> <base-filename> path
-
-rules
-
-  to-sdf:
-    (path, def) -> 'module(name', [], [exports(sections')])
-    with
-      name := <find-spoofax-module-name>;
-      if !name => ParamName(n, p) then
-        name' := parameterized(n, p)
-      else
-        Name(name') := name
-      end;
-      sections  := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> def;
-      sections' := <list-to-conc-grammars> sections
-  
-  list-to-conc-grammars:
-    [g1, g2 | gs] -> conc-grammars(g1, <list-to-conc-grammars> [g2 | gs])
-  
-  list-to-conc-grammars:
-    [g1] -> g1
-  
-  list-to-conc-grammars:
-    [] -> []
-
-rules
-
   to-str:
     (path, def) -> Module(name', sections)
     with
@@ -93,16 +25,3 @@
         Name(name') := name
       end;
       sections  := <collect-om(?STRSection(<id>), conc)> def
-
-rules
-
-  to-esv:
-    (path, def) -> Module(name', [], sections)
-    with
-      name := <find-spoofax-module-name>;
-      if !name => ParamName(n, p) then
-        name' := n
-      else
-        Name(name') := name
-      end;
-      sections  := <collect-om(?ESVSection(<id>), conc)> def

From L.C.L.Kats at tudelft.nl  Mon Nov  8 17:25:39 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 08 Nov 2010 16:25:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21340 - in
	spoofax-contrib/calculang: branches/Calculang3/.externalToolBuilders
	branches/Calculang4/.externalToolBuilders
	branches/Calculang4/trans branches/Calculang5/exa...
Message-ID: <201011081625.oA8GPdFf016776@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Mon Nov  8 16:25:38 2010
New Revision: 21340
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21340&sc=1

Log:


Added:
   spoofax-contrib/calculang/branches/Calculang3/.externalToolBuilders/
   spoofax-contrib/calculang/branches/Calculang3/.externalToolBuilders/Calculang3 build.main.xml.launch
Modified:
   spoofax-contrib/calculang/branches/Calculang4/.externalToolBuilders/Calculang4 build.main.xml.launch
   spoofax-contrib/calculang/branches/Calculang4/trans/check.str
   spoofax-contrib/calculang/branches/Calculang5/examples/example.cal
   spoofax-contrib/calculang/branches/Calculang5/trans/calculang.str
   spoofax-contrib/calculang/branches/Calculang5/trans/calculate.str
   spoofax-contrib/calculang/trunk/trans/calculang.str

Added: spoofax-contrib/calculang/branches/Calculang3/.externalToolBuilders/Calculang3 build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/calculang/branches/Calculang3/.externalToolBuilders/Calculang3 build.main.xml.launch	Mon Nov  8 16:25:38 2010	(r21340)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang3}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang3}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Modified: spoofax-contrib/calculang/branches/Calculang4/.externalToolBuilders/Calculang4 build.main.xml.launch
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang4/.externalToolBuilders/Calculang4 build.main.xml.launch	Mon Nov  8 15:45:43 2010	(r21339)
+++ spoofax-contrib/calculang/branches/Calculang4/.externalToolBuilders/Calculang4 build.main.xml.launch	Mon Nov  8 16:25:38 2010	(r21340)
@@ -16,8 +16,8 @@
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang3}/build.main.xml"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/Calculang4}/build.main.xml"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang3}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/Calculang4}"/>
 <stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
 </launchConfiguration>

Modified: spoofax-contrib/calculang/branches/Calculang4/trans/check.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang4/trans/check.str	Mon Nov  8 15:45:43 2010	(r21339)
+++ spoofax-contrib/calculang/branches/Calculang4/trans/check.str	Mon Nov  8 16:25:38 2010	(r21340)
@@ -23,7 +23,7 @@
     Assign(x, e) -> Assign(x, e)
     with
       rules(
-        GetVar   :+ x -> e
+        GetVar :+ x -> e
       )
   
   constraint-errors = collect-all(constraint-error, conc)

Modified: spoofax-contrib/calculang/branches/Calculang5/examples/example.cal
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang5/examples/example.cal	Mon Nov  8 15:45:43 2010	(r21339)
+++ spoofax-contrib/calculang/branches/Calculang5/examples/example.cal	Mon Nov  8 16:25:38 2010	(r21340)
@@ -1,3 +1,2 @@
-x = 1
-y = 2 + 1
-foo = x + y * 25
\ No newline at end of file
+i = 1 + 4
+j = i + 2
\ No newline at end of file

Modified: spoofax-contrib/calculang/branches/Calculang5/trans/calculang.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang5/trans/calculang.str	Mon Nov  8 15:45:43 2010	(r21339)
+++ spoofax-contrib/calculang/branches/Calculang5/trans/calculang.str	Mon Nov  8 16:25:38 2010	(r21340)
@@ -36,4 +36,4 @@
   editor-complete:
     (Var(x), position, ast, path, project-path) -> proposals
     where
-      proposals := <all-keys-GetVar>
+      proposals := <all-keys-GetVar> x

Modified: spoofax-contrib/calculang/branches/Calculang5/trans/calculate.str
==============================================================================
--- spoofax-contrib/calculang/branches/Calculang5/trans/calculate.str	Mon Nov  8 15:45:43 2010	(r21339)
+++ spoofax-contrib/calculang/branches/Calculang5/trans/calculate.str	Mon Nov  8 16:25:38 2010	(r21340)
@@ -8,10 +8,7 @@
 
 rules
 
-  calculate:
-    e -> result
-    where
-      result := <bottomup(try(calc))> e
+  calculate = bottomup(try(calc))
 
   calc:
     Assign(x, e) -> e

Modified: spoofax-contrib/calculang/trunk/trans/calculang.str
==============================================================================
--- spoofax-contrib/calculang/trunk/trans/calculang.str	Mon Nov  8 15:45:43 2010	(r21339)
+++ spoofax-contrib/calculang/trunk/trans/calculang.str	Mon Nov  8 16:25:38 2010	(r21340)
@@ -36,4 +36,4 @@
   editor-complete:
     (Var(x), position, ast, path, project-path) -> proposals
     where
-      proposals := <all-keys-GetVar>
+      proposals := <all-keys-GetVar> x

From L.C.L.Kats at tudelft.nl  Mon Nov  8 17:35:55 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 08 Nov 2010 16:35:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21341 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.updatesite
Message-ID: <201011081635.oA8GZtck016896@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Mon Nov  8 16:35:55 2010
New Revision: 21341
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21341&sc=1

Log:
Release 0.5.3.94

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Mon Nov  8 16:25:38 2010	(r21340)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Mon Nov  8 16:35:55 2010	(r21341)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.3.93"
+      version="0.5.3.94"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Mon Nov  8 16:25:38 2010	(r21340)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Mon Nov  8 16:35:55 2010	(r21341)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.3.93.jar" id="org.strategoxt.imp" version="0.5.3.93">
+   <feature url="features/org.strategoxt.imp_0.5.3.94.jar" id="org.strategoxt.imp" version="0.5.3.94">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From R.B.Vermaas at tudelft.nl  Tue Nov  9 09:32:00 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 09 Nov 2010 08:32:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21342 - hydra
Message-ID: <201011090832.oA98W0s3029539@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Tue Nov  9 08:31:59 2010
New Revision: 21342
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21342&sc=1

Log:
hydra-config/build.nix: use newer fedora, remove ubunto 8.10

Modified:
   hydra/build.nix

Modified: hydra/build.nix
==============================================================================
--- hydra/build.nix	Mon Nov  8 16:35:55 2010	(r21341)
+++ hydra/build.nix	Tue Nov  9 08:31:59 2010	(r21342)
@@ -347,8 +347,8 @@
        '' ;
 
 
-  deb_variants = if makeDebs then [ "debian50i386" "ubuntu810i386" "ubuntu904i386"] else [] ;
-  rpm_variants = if makeRPMs then [ "fedora10i386" "fedora11i386" "opensuse110i386" ] else [] ;
+  deb_variants = if makeDebs then [ "debian50i386" "ubuntu910i386"] else [] ;
+  rpm_variants = if makeRPMs then [ "fedora12i386" "opensuse110i386" ] else [] ;
 
   rpmToNix = rpm :
      pkgsDefault.runCommand

From n.bruning at student.tudelft.nl  Tue Nov  9 11:36:13 2010
From: n.bruning at student.tudelft.nl (Nathan Bruning)
Date: Tue, 09 Nov 2010 10:36:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21343 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <201011091036.oA9AaDJR001241@proliant.st.ewi.tudelft.nl>

Author: NathanBruning
Date: Tue Nov  9 10:36:13 2010
New Revision: 21343
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21343&sc=1

Log:
Provide paths with / as separator on all platforms

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Tue Nov  9 08:31:59 2010	(r21342)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Tue Nov  9 10:36:13 2010	(r21343)
@@ -495,8 +495,8 @@
 
 	private static String tryGetProjectPath(IResource resource) {
 		return resource.getProject() != null && resource.getProject().exists()
-				? resource.getProject().getLocation().toOSString()
-				: resource.getFullPath().removeLastSegments(1).toOSString();
+				? resource.getProject().getLocation().toString()
+				: resource.getFullPath().removeLastSegments(1).toString();
 	}
 
 	/**

From karltk at strategoxt.org  Tue Nov 16 19:56:03 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 16 Nov 2010 18:56:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21355 -
	strategoxt-java-backend strc-java
Message-ID: <201011161856.oAGIu3cH007200@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Tue Nov 16 18:56:03 2010
New Revision: 21355
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21355&sc=1

Log:
Renamed from strc-java to strategoxt-java-backend in anticipation of the plethora of new backends.

Added:
   strategoxt-java-backend/
      - copied from r21354, strc-java/
Deleted:
   strc-java/

From karltk at strategoxt.org  Tue Nov 16 21:54:31 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 16 Nov 2010 20:54:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21356 - in
	strategoxt-javascript-backend: . trunk
Message-ID: <201011162054.oAGKsVqQ008996@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Tue Nov 16 20:54:31 2010
New Revision: 21356
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21356&sc=1

Log:
* The web is the future, I heard.

Added:
   strategoxt-javascript-backend/
   strategoxt-javascript-backend/trunk/

From karltk at strategoxt.org  Tue Nov 16 21:57:18 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 16 Nov 2010 20:57:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21357 - in
	strategoxt-javascript-backend/trunk: . doc lib src
	src/javascript src/sdf src/stratego
Message-ID: <201011162057.oAGKvIqe009045@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Tue Nov 16 20:57:18 2010
New Revision: 21357
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21357&sc=1

Log:
Web 3.0, baby.

Added:
   strategoxt-javascript-backend/trunk/.project
   strategoxt-javascript-backend/trunk/AUTHORS
   strategoxt-javascript-backend/trunk/Makefile
   strategoxt-javascript-backend/trunk/README
   strategoxt-javascript-backend/trunk/doc/
   strategoxt-javascript-backend/trunk/lib/
   strategoxt-javascript-backend/trunk/src/
   strategoxt-javascript-backend/trunk/src/javascript/
   strategoxt-javascript-backend/trunk/src/sdf/
   strategoxt-javascript-backend/trunk/src/sdf/Makefile
   strategoxt-javascript-backend/trunk/src/sdf/Stratego-Stratego-ECMAScript.sdf
   strategoxt-javascript-backend/trunk/src/stratego/

Added: strategoxt-javascript-backend/trunk/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/.project	Tue Nov 16 20:57:18 2010	(r21357)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>strategoxt-javascript-backend</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+	</buildSpec>
+	<natures>
+	</natures>
+</projectDescription>

Added: strategoxt-javascript-backend/trunk/AUTHORS
==============================================================================

Added: strategoxt-javascript-backend/trunk/Makefile
==============================================================================

Added: strategoxt-javascript-backend/trunk/README
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/README	Tue Nov 16 20:57:18 2010	(r21357)
@@ -0,0 +1,7 @@
+
+ Build Time Dependencies
+--------------------------
+
+ * Mozilla Rhino: lib/js.jar
+ * Stratego/XT 0.17 or newer
+ 

Added: strategoxt-javascript-backend/trunk/src/sdf/Makefile
==============================================================================

Added: strategoxt-javascript-backend/trunk/src/sdf/Stratego-Stratego-ECMAScript.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/sdf/Stratego-Stratego-ECMAScript.sdf	Tue Nov 16 20:57:18 2010	(r21357)
@@ -0,0 +1,7 @@
+module Stratego-Stratego-ECMAScript
+imports
+  Stratego-Sugar-in-Stratego
+  languages/ecmascript/EmbeddedECMAScriptMix[ECMAScript StrategoTerm]
+exports
+  context-free start-symbols StrategoModule
+

From R.B.Vermaas at tudelft.nl  Wed Nov 17 10:47:09 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 17 Nov 2010 09:47:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21358 - in hydra: jobs
	strategoxt
Message-ID: <201011170947.oAH9l9xm019579@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Wed Nov 17 09:47:09 2010
New Revision: 21358
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21358&sc=1

Log:
add ecmascript-front to hydra

Added:
   hydra/jobs/ecmascript-front.nix
Modified:
   hydra/strategoxt/packages.nix

Added: hydra/jobs/ecmascript-front.nix
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ hydra/jobs/ecmascript-front.nix	Wed Nov 17 09:47:09 2010	(r21358)
@@ -0,0 +1,23 @@
+{ nixpkgs ? ../../nixpkgs
+, officialRelease ? false
+, hydraConfig ? ../. 
+, ecmascriptFrontCheckout ? { outPath = ../../ecmascript-front ; rev = 1234 ; }
+} :
+
+let
+  specs = import (hydraConfig + "/strategoxt/packages.nix") ; 
+  jobs = 
+    import (hydraConfig + "/job.nix" ) { 
+      inputs = { 
+        inherit officialRelease ; 
+        inherit ecmascriptFrontCheckout ;
+        inherit hydraConfig ;
+        baselineNix = "${hydraConfig}/baseline.nix" ;
+        inherit nixpkgs; 
+      } ; 
+   
+      spec = specs.ecmascriptFront ; 
+    } ;
+
+in jobs
+

Modified: hydra/strategoxt/packages.nix
==============================================================================
--- hydra/strategoxt/packages.nix	Tue Nov 16 20:57:18 2010	(r21357)
+++ hydra/strategoxt/packages.nix	Wed Nov 17 09:47:09 2010	(r21358)
@@ -618,13 +618,12 @@
     };
 
   /**
-   * ECMAScript model.
+   * ECMAScript front.
    */
-  ecmascriptModel =
+  ecmascriptFront =
     pkgs : rec {
-      fullName = "ECMAScript Model";
-      packageName = "ecmascript-model";
-      contactEmail = "dunno at dunno.com";
+      fullName = "ECMAScript Front";
+      packageName = "ecmascript-front";
 
       svnBuildInputs = autotools pkgs;
       svnRequires = [strategoxt sdf2Bundle aterm];
@@ -634,6 +633,8 @@
       requires = 
         if isMinGW pkgs then [strategoLibraries aterm] else svnRequires;
 
+      attrPrefix = "ecmascriptFront";
+
       /**
        * On MinGW we disable xtc to avoid a dependency on Stratego/XT.
        */

From karltk at strategoxt.org  Wed Nov 17 15:24:25 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 17 Nov 2010 14:24:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21360 - in
	strategoxt-javascript-backend/trunk: . src/javascript
	src/stratego src/stratego/lib
Message-ID: <201011171424.oAHEOPae025728@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Wed Nov 17 14:24:25 2010
New Revision: 21360
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21360&sc=1

Log:
* Initial sketch of SRTS organization
 * Stubs for aterm factory interface.
 * Super-simplistic ATerm pretty printer
 * Compiler support for the main = id program.
 * Tested and runs on Rhino.

Added:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/backend-simplify.str
   strategoxt-javascript-backend/trunk/src/stratego/lib/
   strategoxt-javascript-backend/trunk/src/stratego/lib/dr-scoping.str
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
Modified:
   strategoxt-javascript-backend/trunk/Makefile

Modified: strategoxt-javascript-backend/trunk/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/Makefile	Wed Nov 17 14:19:17 2010	(r21359)
+++ strategoxt-javascript-backend/trunk/Makefile	Wed Nov 17 14:24:25 2010	(r21360)
@@ -0,0 +1,12 @@
+SINCLUDE = \
+	-I $(HOME)/apps/ecmascript/share/sdf/ecmascript-front
+
+SLIBS = \
+	-la stratego-lib \
+	-la strc
+
+all: s2js
+
+s2js:
+	strc $(SINCLUDE) -I src/stratego -i src/stratego/s2js.str $(SLIBS)
+

Added: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Wed Nov 17 14:24:25 2010	(r21360)
@@ -0,0 +1,74 @@
+SRTS = {
+		initContext : function() {
+			var stack = [];
+			var log = function() {
+				if (typeof(console) !== 'undefined' && typeof(console.log) !== 'undefined')
+					return console.log;
+				if (typeof(print) !== 'undefined') {
+					return print;
+				}
+				return function() {}; 
+			}();
+			var nextStackPos = 0;
+			var maxStackPos = 0;
+			var doPrettify = function(term, builder) {
+				if(typeof(term) === 'number')
+					builder.push("" + term);
+				else if(typeof(term) === 'object' && typeof(term[0]) === 'string') {
+					if(term[0] === "[]") {
+						builder.push("[");
+						for(var i = 0; i < term[1].length; i++) {
+							doPrettify(term[1][i], builder);
+						}
+						builder.push("]");
+					} else {
+						builder.push(term[0]);
+						builder.push("(");
+						for(var i = 0; i < term[1].length; i++) {
+							doPrettify(term[1][i], builder);
+						}
+						builder.push(")");
+					}
+				} else {
+					builder.push("<invalid subterm>");
+				}
+				return builder;
+			}
+			
+			return {
+				debugLog : log,
+				popOnFailure : function() {
+					nextStackPos--;
+				},
+				printStackTrace : function() {
+					log("Rewriting failed at:");
+					for(var i = 0; i < maxStackPos; i++)
+						log(stack[i]);
+				},
+				popOnSuccess : function() {
+					maxStackPos--;
+					nextStackPos--;
+				},
+				push : function(funName) {
+					if(nextStackPos < stack.length)
+						stack[nextStackPos] = funName;
+					else
+						stack.push(funName);
+					nextStackPos++;
+					maxStackPos = nextStackPos;
+				},
+				factory : {
+					makeCtor : function(name, arity) { 
+						return { name : name, arity : arity, tag: "Ctor" };
+					},
+					prettify : function(term) {
+						return doPrettify(term, []).join("");
+					}
+				}
+			}
+		}
+};
+
+doImport = function (file) {
+	return SRTS;
+};

Added: strategoxt-javascript-backend/trunk/src/stratego/backend-simplify.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/stratego/backend-simplify.str	Wed Nov 17 14:24:25 2010	(r21360)
@@ -0,0 +1,85 @@
+module backend-simplify
+
+imports
+  libstratego-lib
+  libstrc
+  
+  lib/dr-scoping
+  
+signature
+ constructors
+   Meta: List(Term) -> Term
+   Filename: Str -> Term
+  
+strategies
+
+  main-backend-simplify =
+    io-wrap(backend-simplify)
+  
+  backend-simplify =
+    dr-scope-all-verbose(
+      dollars-for-capitals-top
+    ; lift-definitions
+    ; canonicalize
+    ; simplify1
+    ; mark-bound-unbound-vars
+    ; escaping-variables
+    ; remove-closure-allocs
+    )
+
+rules
+  
+  /**
+   * Adds dollars to names with capitals (e.g. Desugar becomes $Desugar).
+   * Doing so is required for supporting (Windows/Mac) case-insensitive file systems.
+   */
+  dollars-for-capitals-top =
+    topdown(try(
+      SVar(dollars-for-capitals)
+    + SDefT(dollars-for-capitals, id, id, id)
+    + ExtSDef(dollars-for-capitals, id, id)
+    ))
+   
+  dollars-for-capitals =
+    // We make an exception for the hand-crafted SRTS_EXT Java classes
+    if not(string-starts-with(|"SRTS_EXT")) then
+      escape(dollar-for-capital)
+    end
+  
+  dollar-for-capital(rec) :
+    [c | cs] -> ['$', c | <rec> cs] where <is-upper> c
+  
+  undo-dollars-for-capitals =
+    escape(undo-dollar-for-capital)
+  
+  undo-dollar-for-capital(rec) :
+    ['$' | cs] -> <rec> cs
+  
+rules
+
+  remove-closure-allocs =
+    {| RemoveClosureAlloc :
+      alltd(remove-closure-alloc-let)
+    |}
+  
+  remove-closure-alloc-let :
+    Let(def*, s) -> Let(def'*, s')
+    with
+      def'* := <remove-closure-allocs>
+               <filter(not(remove-closure-alloc-def))> def*
+    ; s' := <remove-closure-allocs>
+            <alltd(remove-closure-alloc-call)> s
+    
+  remove-closure-alloc-def :
+    SDefT(x{a*}, _, _, s) -> []
+    where
+      <one(ClosureAlloc)> a*
+    with
+      x' := x{}
+    ; rules(RemoveClosureAlloc: x' -> s)
+  
+  remove-closure-alloc-call :
+    CallT(SVar(x), [], _) -> inline
+    where
+      <RemoveClosureAlloc> x{} => inline
+

Added: strategoxt-javascript-backend/trunk/src/stratego/lib/dr-scoping.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/stratego/lib/dr-scoping.str	Wed Nov 17 14:24:25 2010	(r21360)
@@ -0,0 +1,50 @@
+/**
+ * @author Lennart Kats
+ */
+module lib/dr-scoping // TODO: move out of 'lib' directory
+
+imports
+  libstratego-lib
+
+strategies
+
+  dr-scope-all-verbose(s) =
+    {| DrScopedRules :
+      dr-scope-all-start
+    ; s
+    <+
+      prim("SSL_stacktrace_get_all_frame_names")
+    ; if-verbose3(
+        report-failure(
+          log(|Error(), ["Compilation failed (", <run-time ; real-to-string(|2)>, " secs)"])
+        ; <exit> 1
+        )
+      )
+    ; dr-scope-all-end; fail
+    |}
+
+  // TODO: remove these definitions
+  internal dr-scope-all-start =
+    where(
+      table := Hashtable(<dr-rule-sets-hashtable>);
+      names := ["DrScopedRules" | <hashtable-keys> table];
+      
+      dr-begin-scopes(|names);
+      rules(DrScopedRules' := names)
+    )
+
+  internal dr-scope-all-end =
+    where(
+      table := Hashtable(<dr-rule-sets-hashtable>);
+      names := <DrScopedRules'>;
+      
+      dr-end-scopes(|names);
+  
+      // Remove other, newly defined rules
+      <diff> (<hashtable-keys> table, names);
+      list-loop(
+        { key: ?key;
+          <hashtable-remove(|key)> table
+        }
+      )
+    )

Added: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Wed Nov 17 14:24:25 2010	(r21360)
@@ -0,0 +1,304 @@
+/*
+ * @author Karl Trygve Kalleberg <karltk at strategoxt.org>
+ * @author Lennart Kats
+ */
+module s2js
+imports
+  libstratego-lib
+  libstrc
+  
+  backend-simplify 
+  lib/dr-scoping
+  		
+strategies
+	
+	main = io-wrap(s2js ; echo ; ![])
+	
+	s2js =
+		with(
+        	s2js-init-options
+          ; record-main-closurename
+      	)
+	 ; log-timed(
+        backend-simplify
+      | "Backend preprocessing succeeded", 1
+      )
+    ; log-timed(
+        dr-scope-all-verbose(js-compile-spec)
+      | "Backend transformation succeeded", 1
+      )
+  
+	s2js-init-options = id
+	s2js-options = id
+	
+rules
+	
+  js-compile-spec:
+    Specification([Signature([Constructors(ops)]), Strategies(defs)]) ->
+    $[
+       [closure-name] = function() {
+         var SRTS = doImport("srts.js");
+         var c = {};
+         var rootCtx = SRTS.initContext();
+         var factory = rootCtx.factory;
+         var TRACES_ENABLED = true;
+         [ctor-decl*]
+         [ctor-init*]
+         [function-def*]
+         [lifted-def*]
+         [main-method]
+         return c;
+       }();
+    ]
+  with
+  	alltd(JSTranslate)
+  ; import*      := <js-imports>
+  ; closure-name := <MainClosureName>
+  ; import-init* := <js-init-imports>
+  ; register*    := <js-register-method> defs
+  ; constant*    := <js-constant-methods>
+  ; main-method  := <js-main-method>
+  with
+  	rules(
+  		CurrentLiftedFrame := None()
+  	)
+  ; function-def* := <map(translate-outer-definition)> defs
+  ; add-default-constructors
+  ; constant-def* := <map(translate-constant-definition)> defs
+  ; lifted-def*   := "" // TODO <bagof-LiftedDef>
+  ; ctor-decl*    := <bagof-ConstructorDecl>
+  ; ctor-init*    := <bagof-ConstructorInit>
+  ; def-init*     := "" // TODO <bagof-DefInit>
+  ; const-decl*   := "" // TODO <bagof-ConstDecl>
+  ; const-init*   := "" // TODO <bagof-ConstInit ; concat ; reverse>
+
+  js-imports = <get-config> "-la" ; map(js-import) <+ ![]    
+    
+  js-import: x -> $[import([<with(jsify)> x])]
+
+  js-init-imports = <get-config> "-la" ; map(js-init-import) <+ ![]
+
+  js-init-import: x -> $[[<with(jsify)> x].Main.init(context);]
+  
+  js-register-method = !"" // TODO(karltk)
+  js-constant-methods = !"" // TODO(karltk) 
+     	
+strategies
+	
+  jsify = cify
+  
+  record-main-closurename =
+  	(<get-config> "-o" <+ strc-getoutfile(!"") <+ !"debug")
+  ; base-filename
+  ; jsify
+  ; remove-extension
+  ; rules(
+    	MainClosureName := <id>
+    )
+  	
+  	
+  js-main-method =
+  	!$[
+  		c.main = function(term) {
+  			var t = main_0_0(rootCtx, term);
+  			if(t == null)
+  				rootCtx.debugLog("rewriting failed");
+  			else {
+  				rootCtx.debugLog(factory.prettify(t));
+  			}
+  			return t;
+  		}
+  	]	
+ //
+ // Strategy and rule definitions
+ //
+
+rules
+
+  translate-constant-definition = !"" // TODO(karltk)
+	
+  translate-outer-definition =
+     translate-outer-definition-plain
+  <+ translate-outer-definition-override
+  <+ translate-outer-definition-extend
+  <+ translate-outer-definition-internal
+  <+ translate-outer-definition-conflict
+	
+
+  translate-outer-definition-plain :
+  	SDefT(x, s*, t*, s){a*} -> $[
+  		[x] = [body];
+  		c.[x] = [x];
+  	]	
+  with
+  	body := <translate-definition-body>
+
+  translate-outer-definition-override = fail
+  translate-outer-definition-extend = fail
+  translate-outer-definition-internal = fail
+  translate-outer-definition-conflict = fail
+  
+  
+  translate-definition-body:
+  	SDefT(x, s*, t*, s) ->
+  	$[
+     function(ctx, term [param*]) {
+       [bstm-init*]
+       if(TRACES_ENABLED) ctx.push("[x]");
+       Fail: {
+         [bstm]
+         if(TRACES_ENABLED) ctx.popOnSuccess();
+         return term;
+       }
+       if(TRACES_ENABLED) ctx.popOnFailure();
+       return null;
+     }
+  	]
+  with
+  	{| 
+  		IsStrategyArg, CurrentLiftedFrame:
+//  		java-CheckBuild, java-CheckBuild, IsLiftedTVar,
+//  		IsLiftedSVar, LiftedTVars, LiftedSVars:
+  			
+  		(s'*, [])         := <translate-params> s*
+  	  ; (t'*, bstm-init*) := <translate-params> t*
+  	  ; param*            := <conc> (s'*, t'*)
+  	  ; bstm              := <translate-strategy> s
+  	|}  	  	
+
+  translate-params = 
+  	unzip(translate-param)
+  ; (id, concat)
+    
+  translate-param: 
+  	VarDec(x{}, ConstType(_)) -> x
+  	
+  translate-param:
+  	VarDec(x{Offset(_), Escapes()}, ConstType(_)) -> $[var ref_[x] = termRef([x'])]
+  with
+  	x' := <conc-strings> ("ref_", x)
+  	
+  translate-param:
+  	VarDec(x, FunType(_, _)) -> x
+  with
+  	 frame := <CurrentLiftedFrame>
+   ; rules(IsStrategyArg: (frame, x))
+  	
+ //
+ //  Strategies
+ //
+strategies
+	
+  translate-strategy = 
+  	 (
+  	 	translate-CallT-dynamic
+  	 <+ translate-CallT
+  	 <+ translate-Build
+  	 <+ translate-Seq
+  	 <+ translate-PrimT
+  	 <+ translate-Id
+  	 <+ translate-Fail
+  	 <+ translate-Override
+  	 <+ translate-GuardedLChoice-no-left-branch
+  	 <+ translate-GuardedLChoice
+  	 <+ translate-Scope
+  	 <+ translate-Match
+  	 <+ translate-Let
+  	 <+ translate-ImportTerm
+  	 <+ translate-Escape
+  	 <+ fatal-err(|"translate-strategy failed ")
+  	 ) 
+  	
+
+  translate-CallT-dynamic = fail // TODO (karltk)
+  translate-CallT = fail // TODO (karltk)
+  translate-Build = fail // TODO (karltk)
+  translate-Seq = fail // TODO (karltk)
+  translate-PrimT = fail // TODO (karltk)
+  
+  translate-Id:
+  	Id() -> "/* id */"
+  	
+  translate-Fail:
+  	Fail() -> $[ break Fail; ]
+  	
+  translate-Override = fail // TODO (karltk)
+  translate-GuardedLChoice-no-left-branch = fail // TODO (karltk)
+  translate-GuardedLChoice = fail // TODO (karltk)
+  translate-Scope = fail // TODO (karltk)
+  translate-Match = fail // TODO (karltk)
+  translate-Let = fail // TODO (karltk)
+  translate-ImportTerm = fail // TODO (karltk)
+  translate-Escape = fail // TODO (karltk)
+  
+    		
+ //
+ //  Signatures
+ //
+ 
+strategies
+	
+  js-ConstructorName:
+  	(c, n) -> <conc-strings> ("_cons_", c', "_", n')
+  with
+  	c' := <jsify> c
+  ; n' := <int-to-string> n 
+ 
+  	
+strategies
+
+  js-mk-int-const = int-to-string
+  	  	
+rules
+	
+  JSTranslate = 
+    ?OpDecl(c, t)
+  ; rules(
+      ConstructorDecl :+= <JSDeclareConstructor>
+      ConstructorInit :+= <JSInitConstructorQ <+ JSInitConstructor>  
+    )
+    
+  JSDeclareConstructor: 
+  	OpDecl(c, t) -> $[ [x] /* ctor */ ]
+  where
+  	not(OpDecl("", id) + OpDecl("Cons", [id, id]) + OpDecl("Nil", []))
+  with
+  	n := <Arity <+ is-int> t
+  ; x := <js-ConstructorName> (c, n)
+  ; rules(IsLocalOpDecl : (c, n))
+    
+  JSInitConstructorQ:
+  	OpDecl(c, t) -> 
+  	$[
+       var [x] = factory.makeCtor("[c']", [<js-mk-int-const> ar]);
+  	 ]
+  where
+    c' := <string-as-chars(unescape-chars ; un-double-quote-chars)> c
+  ; ar := <Arity <+ is-int> t
+  ; x  := <js-ConstructorName> (c, ar)
+    
+    
+  JSInitConstructor:
+  	OpDecl(c, t) -> $[var [x] = factory.makeCtor("[c]", [<js-mk-int-const> ar])]
+  where
+  	ar := <Arity <+ is-int> t
+  ; x  := <js-ConstructorName> (c, ar)
+    
+  add-default-constructors = 
+  	with(
+  		add-ctor(|"Some", 1)
+  	  ; add-ctor(|"None", 0)
+  	  ; add-ctor(|"Conc", 2)
+  	)
+  	
+  add-ctor(|name, arity) =
+  	if not(<IsLocalOpDecl> (name, arity)) then
+  		x := <js-ConstructorName> (name, arity)
+  	  ; rules(
+          IsLocalOpDecl: (name, arity)
+  	      ConstructorDecl :+= $[]
+  	      ConstructorInit :+= $[
+  	      	var [x] = factory.makeCtor("[name]", [<js-mk-int-const> arity]); 
+  	      ]
+  	    )
+  	end 	    
\ No newline at end of file

From karltk at strategoxt.org  Wed Nov 17 16:21:18 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 17 Nov 2010 15:21:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21361 -
	strategoxt-javascript-backend/trunk/src/stratego
Message-ID: <201011171521.oAHFLIkZ027339@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Wed Nov 17 15:21:18 2010
New Revision: 21361
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21361&sc=1

Log:
* First cut of sequence and guarded left choice.
 * JS doesn't support nested redefinitions of labels, so we have to tag them.

Modified:
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Wed Nov 17 14:24:25 2010	(r21360)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Wed Nov 17 15:21:18 2010	(r21361)
@@ -20,7 +20,7 @@
           ; record-main-closurename
       	)
 	 ; log-timed(
-        backend-simplify
+        id //backend-simplify
       | "Backend preprocessing succeeded", 1
       )
     ; log-timed(
@@ -145,7 +145,7 @@
      function(ctx, term [param*]) {
        [bstm-init*]
        if(TRACES_ENABLED) ctx.push("[x]");
-       Fail: {
+       [feil]: {
          [bstm]
          if(TRACES_ENABLED) ctx.popOnSuccess();
          return term;
@@ -163,7 +163,8 @@
   		(s'*, [])         := <translate-params> s*
   	  ; (t'*, bstm-init*) := <translate-params> t*
   	  ; param*            := <conc> (s'*, t'*)
-  	  ; bstm              := <translate-strategy> s
+  	  ; feil              := <newname> "Fail_"
+  	  ; bstm              := <debug(!"T") ; translate-strategy(|"ERROR", feil)> s
   	|}  	  	
 
   translate-params = 
@@ -189,47 +190,95 @@
  //
 strategies
 	
-  translate-strategy = 
+	// TODO (karltk) replace s,f with dynrules? do we really need s?
+  translate-strategy(|s,f) = 
   	 (
-  	 	translate-CallT-dynamic
-  	 <+ translate-CallT
-  	 <+ translate-Build
-  	 <+ translate-Seq
-  	 <+ translate-PrimT
-  	 <+ translate-Id
-  	 <+ translate-Fail
-  	 <+ translate-Override
-  	 <+ translate-GuardedLChoice-no-left-branch
-  	 <+ translate-GuardedLChoice
-  	 <+ translate-Scope
-  	 <+ translate-Match
-  	 <+ translate-Let
-  	 <+ translate-ImportTerm
-  	 <+ translate-Escape
+  	 	translate-CallT-dynamic(|s,f)
+  	 <+ translate-CallT(|s,f)
+  	 <+ translate-Build(|s,f)
+  	 <+ translate-Seq(|s,f)
+  	 <+ translate-PrimT(|s,f)
+  	 <+ translate-Id(|s,f)
+  	 <+ translate-Fail(|s,f)
+  	 <+ translate-Override(|s,f)
+  	 <+ translate-GuardedLChoice-no-left-branch(|s,f)
+  	 <+ translate-GuardedLChoice(|s,f)
+  	 <+ translate-Scope(|s,f)
+  	 <+ translate-Match(|s,f)
+  	 <+ translate-Let(|s,f)
+  	 <+ translate-ImportTerm(|s,f)
+  	 <+ translate-Escape(|s,f)
   	 <+ fatal-err(|"translate-strategy failed ")
   	 ) 
   	
 
-  translate-CallT-dynamic = fail // TODO (karltk)
-  translate-CallT = fail // TODO (karltk)
-  translate-Build = fail // TODO (karltk)
-  translate-Seq = fail // TODO (karltk)
-  translate-PrimT = fail // TODO (karltk)
+  translate-CallT-dynamic(|s,f) = fail // TODO (karltk)
+  translate-CallT(|s,f) = fail // TODO (karltk)
+  translate-Build(|s,f) = fail // TODO (karltk)
+
+  translate-Seq(|s,f):
+  	Seq(s1, s2) -> $[
+  		[<translate-strategy(|s,f)> s1]
+  		[<translate-strategy(|s,f)> s2]
+  	]
+  translate-PrimT(|s,f) = fail // TODO (karltk)
   
-  translate-Id:
+  translate-Id(|s,f):
   	Id() -> "/* id */"
   	
-  translate-Fail:
-  	Fail() -> $[ break Fail; ]
+  translate-Fail(|s, feil):
+  	Fail() -> $[ break [feil]; ]
+  	
+  translate-Override(|s,f) = fail // TODO (karltk)
+  
+  translate-GuardedLChoice-no-left-branch(|s,f):
+  	GuardedLChoice(s1, Id(), s2) -> $[
+  		var [copy] = term;
+  		[succ]: {
+  			[feil]: {
+  				[s1']
+  				break [succ];
+  			} 
+  			term = [copy]
+  			[s2']
+  		}
+  	]
+  with
+  	  copy := <newname> "term_"
+  	; succ := <newname> "Success_"
+  	; feil := <newname> "Fail_"
+  	; s1'  := <translate-strategy(|succ,feil)> s1
+  	; s2'  := <translate-strategy(|succ,f)> s2
+  	  	
+  translate-GuardedLChoice(|s,f):
+  	GuardedLChoice(s1, s2, s3) -> $[
+  		var [copy] = term;
+  		[succ]: {
+  			[feil]: {
+  				[s1']
+  				[outerfeil]: {
+  					[s2']
+  					break [succ];
+  				}
+  			}
+  			term = [copy];
+  			[s3']
+  		}
+  	]
+  with
+  	  copy      := <newname> "term_"
+  	; succ      := <newname> "Success_"
+  	; feil      := <newname> "Fail_"
+  	; outerfeil := <newname> "OuterFail_"
+  	; s1'       := <translate-strategy(|succ,feil)> s1
+  	; s2'       := <translate-strategy(|succ,outerfeil)> s2
+    ; s3'       := <translate-strategy(|succ,f)> s3
   	
-  translate-Override = fail // TODO (karltk)
-  translate-GuardedLChoice-no-left-branch = fail // TODO (karltk)
-  translate-GuardedLChoice = fail // TODO (karltk)
-  translate-Scope = fail // TODO (karltk)
-  translate-Match = fail // TODO (karltk)
-  translate-Let = fail // TODO (karltk)
-  translate-ImportTerm = fail // TODO (karltk)
-  translate-Escape = fail // TODO (karltk)
+  translate-Scope(|s,f) = fail // TODO (karltk)
+  translate-Match(|s,f) = fail // TODO (karltk)
+  translate-Let(|s,f) = fail // TODO (karltk)
+  translate-ImportTerm(|s,f) = fail // TODO (karltk)
+  translate-Escape(|s,f) = fail // TODO (karltk)
   
     		
  //

From L.C.L.Kats at tudelft.nl  Wed Nov 17 16:54:48 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 17 Nov 2010 15:54:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21364 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF
Message-ID: <201011171554.oAHFsmbR027844@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Nov 17 15:54:48 2010
New Revision: 21364
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21364&sc=1

Log:
Missing file.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF	Wed Nov 17 15:54:48 2010	(r21364)
@@ -0,0 +1,22 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: SpoofaxLang Plug-in
+Bundle-SymbolicName: org.strategoxt.imp.editors.spoofax; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: org.strategoxt.imp.editors.spoofax.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.aterm,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: org.strategoxt.imp.editors.spoofax

From L.C.L.Kats at tudelft.nl  Wed Nov 17 16:55:55 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 17 Nov 2010 15:55:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21365 - in
	spoofax-imp/trunk: _attic/org.strategoxt.imp.astview
	org.strategoxt.imp.astview
Message-ID: <201011171555.oAHFtt8A027870@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Nov 17 15:55:55 2010
New Revision: 21365
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21365&sc=1

Log:
Moved astview project to attic.

Added:
   spoofax-imp/trunk/_attic/org.strategoxt.imp.astview/
      - copied from r21363, spoofax-imp/trunk/org.strategoxt.imp.astview/
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.astview/

From L.C.L.Kats at tudelft.nl  Wed Nov 17 16:57:32 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 17 Nov 2010 15:57:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21366 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax
Message-ID: <201011171557.oAHFvWuw027901@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Wed Nov 17 15:57:32 2010
New Revision: 21366
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21366&sc=1

Log:
Missing file.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Concepts.sdf

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Concepts.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Concepts.sdf	Wed Nov 17 15:57:32 2010	(r21366)
@@ -0,0 +1,18 @@
+module Concepts
+
+imports
+  Common
+
+exports
+  
+context-free syntax
+  
+  %% TODO: consider using the "sorts" section for concepts?
+  
+  "concepts" ConceptDef* -> ConceptSection {cons("Concepts")}
+  "concepts"             -> ModuleName {reject}
+  
+  "concept" ID ":" Rule -> ConceptDef {cons("ConceptDef")}
+  "rule" Rule ":" ID*   -> ConceptDef {cons("RuleDef")}
+  ID                    -> Rule {cons("Rule1")}
+  ID "->" ID            -> Rule {cons("Rule2")}
\ No newline at end of file

From karltk at strategoxt.org  Wed Nov 17 18:14:35 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 17 Nov 2010 17:14:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21367 -
	strategoxt-javascript-backend/trunk/src/stratego
Message-ID: <201011171714.oAHHEZWg029688@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Wed Nov 17 17:14:35 2010
New Revision: 21367
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21367&sc=1

Log:
* Added parts of the term construction code from java backend.
 * Sketches of CallT compilation scheme.

Added:
   strategoxt-javascript-backend/trunk/src/stratego/signatures.str
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
   strategoxt-javascript-backend/trunk/src/stratego/utils.str
   strategoxt-javascript-backend/trunk/src/stratego/variable-access.str
Modified:
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Wed Nov 17 15:57:32 2010	(r21366)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Wed Nov 17 17:14:35 2010	(r21367)
@@ -9,7 +9,9 @@
   
   backend-simplify 
   lib/dr-scoping
-  		
+  signatures
+  term-construction
+    		
 strategies
 	
 	main = io-wrap(s2js ; echo ; ![])
@@ -85,8 +87,6 @@
      	
 strategies
 	
-  jsify = cify
-  
   record-main-closurename =
   	(<get-config> "-o" <+ strc-getoutfile(!"") <+ !"debug")
   ; base-filename
@@ -184,6 +184,14 @@
   with
   	 frame := <CurrentLiftedFrame>
    ; rules(IsStrategyArg: (frame, x))
+  
+  translate-inner-definition:
+  	SDefT(x, s*, t*, s) ->
+  	$[
+  		var [x] = [body];
+  	]
+  with
+  	body := <translate-definition-body>
   	
  //
  //  Strategies
@@ -212,8 +220,19 @@
   	 ) 
   	
 
-  translate-CallT-dynamic(|s,f) = fail // TODO (karltk)
-  translate-CallT(|s,f) = fail // TODO (karltk)
+  translate-CallT-dynamic(|s,feil) = fail // TODO (karltk)
+  
+  translate-CallT(|s,feil):
+  	CallT(SVar(x), s*, t*) -> 
+  	$[
+        term = [x](ctx, term, s'*, t'*);	
+        if(term == null) 
+            break [feil];
+  	]
+  with
+      s'* := <map(lifted-strategy-to-function)> s*
+  	; t'* := <map(js-construct-term)> t*
+  	
   translate-Build(|s,f) = fail // TODO (karltk)
 
   translate-Seq(|s,f):
@@ -280,7 +299,38 @@
   translate-ImportTerm(|s,f) = fail // TODO (karltk)
   translate-Escape(|s,f) = fail // TODO (karltk)
   
-    		
+  
+ //
+ //  Lifting 
+ //  
+
+strategies
+	
+  lifted-strategy-to-function =
+  	if ?CallT(_, _, _) then
+  	  lifted-call-to-function
+  	else
+  	    with(
+  		  !SDefT(<newname => x> "jslifted", [], [], <id>)
+  		; rules(DefInit :+= <translate-inner-definition>)
+  		)
+  	  ; <lifted-call-to-function> CallT(SVar(x), [], [])
+    end
+
+  lifted-call-to-function = 
+  	   lifted-call-to-function-self-call
+  	<+ lifted-call-to-function-from-frame
+  	<+ lifted-call-to-function-with-args
+  	<+ lifted-call-to-function-direct
+  	<+ lifted-call-to-function-instance     	    		 
+  
+  lifted-call-to-function-self-call = fail
+  lifted-call-to-function-from-frame = fail
+  lifted-call-to-function-with-args = fail
+  lifted-call-to-function-direct = fail
+  lifted-call-to-function-instance = fail     	    		 
+  
+  
  //
  //  Signatures
  //
@@ -294,9 +344,6 @@
   ; n' := <int-to-string> n 
  
   	
-strategies
-
-  js-mk-int-const = int-to-string
   	  	
 rules
 	

Added: strategoxt-javascript-backend/trunk/src/stratego/signatures.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/stratego/signatures.str	Wed Nov 17 17:14:35 2010	(r21367)
@@ -0,0 +1,13 @@
+module signatures
+imports
+  libstrc
+  
+  utils
+  
+strategies
+	
+  js-ConstructorName :
+    (c, n) -> <conc-strings> ("_cons", c', "_", n')
+    with
+      c' := <jsify> c
+    ; n' := <int-to-string> n

Added: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Wed Nov 17 17:14:35 2010	(r21367)
@@ -0,0 +1,150 @@
+module term-construction
+imports
+  libstratego-lib
+  libstrc
+
+  variable-access
+  				
+strategies
+
+  js-construct-term =
+       //java-Cache 
+    //<+ 
+       js-ConstructAnnoVar
+    <+ js-ConstructVar
+    <+ js-ConstructTerm
+//    <+ !(<id>, <js-ConstructTerm>)
+//       ; (java-CacheConstant-again <+ java-CacheConstant <+ Snd)
+
+strategies
+    
+  is-TupleOp = ?Op("", _)
+
+  js-DeclareTermId :
+    (x, e) -> $[ var [x]; ]
+
+  js-InitTermId :
+    (x, e) -> $[ [x] = [e]; ]
+
+  js-mk-int-const = int-to-string
+  
+rules
+
+  js-ConstructTerm :
+    Int(i) -> $[ factory.makeInt([<js-mk-int-const> i]) ]
+    
+  js-ConstructTerm :
+    Real(x) -> $[ factory.makeReal([<try(real-to-string)> x]) ]
+
+  js-ConstructTerm :
+    Str(x) -> $[ factory.makeString([<escape> x]) ]
+
+  js-ConstructTerm : // HACK: BAFReader work-around
+    Str([]) -> $< factory.makeString("[]") >
+    
+  js-ConstructVar :
+    x at Var(_) -> e
+  with 
+      e := <js-VarToReadRef> x
+
+  js-ConstructAnnoVar :
+    Anno(Var(x), pt2) -> 
+    $[ 
+      factory.annotateTerm(e, checkListAnnos(factory, [<js-construct-term> pt2]))
+    ]
+  where
+      <js-ConstructVar> Var(x) => e
+
+  js-ConstructTerm :
+    Anno(pt1, Op("Nil", [])) -> <js-construct-term> pt1
+  where 
+      <not(?Var(_))> pt1
+
+  js-ConstructTerm :
+    Anno(pt1, pt2) -> 
+    $[ 
+      termFactory.annotateTerm([<js-construct-term> pt1], checkListAnnos(termFactory,[<js-construct-term> pt2]))
+    ]
+  where 
+      <not(?Op("Nil", []))> pt2
+    ; <not(?Var(_))> pt1
+
+  js-ConstructTerm :
+    Op(c, t*) -> $[ termFactory.makeAppl([e_cons], [e_arg*]) ]
+  where
+      not(is-ListOp + is-TupleOp)
+  with
+      e_cons := <js-ConstructorName-expr> (c, <length> t*)
+    ; e_arg* := <map(js-construct-term)> t*
+    
+  js-ConstructTerm :
+    Explode(t1, t2) -> x
+    with
+      e_t1 := <js-construct-term> t1
+    ; e_t2 := <js-construct-term> t2
+    ; x    := <newname> "mkterm"
+    ; rules(
+        js-CheckBuild :+=
+          ( $[ var [x]; ]
+          , $[
+               [x] = context.invokePrimitive("SSL_mkterm", term, ["[]"], ["["] e_t1, e_t2 ["]"]);
+               if (x == null)
+                 break Fail;
+            ])
+      )
+  // TODO dynrule for fail ?
+  
+  js-ConstructTerm : 
+    Op("", args) -> $[ termFactory.makeTuple([args']) ]
+  with
+      args' := <map(js-construct-term)> args
+    
+  js-ConstructTerm :
+    Op("Nil", []) -> $[ termFactory.makeList() ]
+
+  js-ConstructTerm :
+    Op("Cons", [t1, t2]) -> 
+    $[ 
+      termFactory.makeListCons([<js-construct-term> t1], [e])
+    ]
+    with
+      <js-construct-term> t2
+        ; if <not(Anno(is-ListOp, id))> t2 then 
+            js-check-aterm-list 
+          else
+        	id  	
+//              if ?|[ x_constants.x_constant ]| + ?expr |[ x ]| then
+//                !|[ (IStrategoList) ~expr:<id> ]|
+//              else
+//                try(java-UncastATerm)
+//              end
+//              ; try(java-CastATermListSetAnnotations)
+            end => e
+
+  js-check-aterm-list :
+    e -> x
+  with 
+    x := <newname> "list"
+  ; rules(
+      java-CheckBuild :+=
+        ( $[ var [x]; ]
+        , $[
+            x = checkListTail(e);
+            if (x == null) break Fail;
+          ]
+        )
+    )
+    
+  js-ConstructorName-expr = js-ConstructorName
+      
+/*        
+  js-ConstructorName-expr =
+    with(
+      IsLocalOpDecl
+    <+
+      // HACK: locally redefine external constructors to avoid ambiguous imports
+      //       (should this be done for congruences as well?)
+      JavaCopyConstructor
+    )
+  ; !expr |[ ~x:<MainClassName>.~x:<java-ConstructorName> ]|
+        */
\ No newline at end of file

Added: strategoxt-javascript-backend/trunk/src/stratego/utils.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/stratego/utils.str	Wed Nov 17 17:14:35 2010	(r21367)
@@ -0,0 +1,7 @@
+module utils
+imports
+  libstratego-lib
+
+strategies
+	  
+  jsify = cify

Added: strategoxt-javascript-backend/trunk/src/stratego/variable-access.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/stratego/variable-access.str	Wed Nov 17 17:14:35 2010	(r21367)
@@ -0,0 +1,35 @@
+/**
+ * Variable access.
+ *
+ * @author Karl Trygve Kalleberg
+ * @author Lennart Kats
+ */
+module variable-access
+imports
+  libstrc
+  
+rules
+  
+  to-js-vardecl :
+    x{} -> $[ var x = null; ]
+
+  to-js-vardecl:
+    x{Offset(i), Escapes()} -> $[ var x = new TermReference(); ]
+
+  js-VarToWrite :
+    (x{}, e) -> $[ [x] = [e]; ]
+
+  js-VarToWrite : 
+    (x{Frames([])}, e) -> $[ [x] = [e]; ]
+
+  js-VarToWrite : 
+    (x{Offset(i), Frames(_)}, e) -> $[ [x].value = [e]; ]
+
+  js-VarToReadRef : 
+    Var(x{}) -> x 
+
+  js-VarToReadRef :
+    Var(x{Frames([])}) ->  x
+
+  js-VarToReadRef :
+    Var(x{Offset(i), Frames(_)}) -> $[ [x].value ]


From L.C.L.Kats at tudelft.nl  Thu Nov 18 10:34:20 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 18 Nov 2010 09:34:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21368 - in
	spoofax-imp/trunk: . org.eclipse.imp
Message-ID: <201011180934.oAI9YKce015421@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Nov 18 09:34:20 2010
New Revision: 21368
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21368&sc=1

Log:
Updated IMP patch

Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.eclipse.imp/README
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch

Modified: spoofax-imp/trunk/Makefile
==============================================================================
--- spoofax-imp/trunk/Makefile	Wed Nov 17 17:14:35 2010	(r21367)
+++ spoofax-imp/trunk/Makefile	Thu Nov 18 09:34:20 2010	(r21368)
@@ -30,11 +30,13 @@
 new-libs :
 	$(MAKE) -C org.strategoxt.imp.generator new-libs
 
+patch : org.eclipse.imp/org.eclipse.imp.runtime.patch
+
 org.eclipse.imp/org.eclipse.imp.runtime.patch : .PHONY
 	@if [ "$(ECLIPSE_IMP)" != "" ]; then \
-	  (cd $(ECLIPSE_IMP); svn diff org.eclipse.imp.runtime) > $@; \
+	  (cd $(ECLIPSE_IMP); svn diff) > $@; \
 	else \
-	  echo ECLIPSE_IMP variable not set; will not create new .patch file; \
+	  echo Warning: ECLIPSE_IMP variable not set; will not create new .patch file; \
 	fi
 
 .PHONY :

Modified: spoofax-imp/trunk/org.eclipse.imp/README
==============================================================================
--- spoofax-imp/trunk/org.eclipse.imp/README	Wed Nov 17 17:14:35 2010	(r21367)
+++ spoofax-imp/trunk/org.eclipse.imp/README	Thu Nov 18 09:34:20 2010	(r21368)
@@ -1,6 +1,6 @@
 This directory contains source patches for the following IMP revision:
 
-  http://dev.eclipse.org/svnroot/technology/org.eclipse.imp at r20408
+  http://dev.eclipse.org/svnroot/technology/org.eclipse.imp at r22255
 
 Note that building IMP from source code is not required for building Spoofax/IMP;
 instead, the latest Spoofax/IMP binary plugin can be installed and used as a

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
==============================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	Wed Nov 17 17:14:35 2010	(r21367)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	Thu Nov 18 09:34:20 2010	(r21368)
@@ -1,3 +1,29 @@
+Index: org.eclipse.imp.metatooling/META-INF/MANIFEST.MF
+===================================================================
+--- org.eclipse.imp.metatooling/META-INF/MANIFEST.MF	(revision 22255)
++++ org.eclipse.imp.metatooling/META-INF/MANIFEST.MF	(working copy)
+@@ -2,7 +2,7 @@
+ Bundle-SymbolicName: org.eclipse.imp.metatooling;singleton:=true
+ Bundle-Name: IMP Language Support Meta-Tooling (Incubation)
+ Bundle-Vendor: rfuhrer at watson.ibm.com
+-Bundle-Version: 0.1.92
++Bundle-Version: 0.1.92.qualifier
+ Bundle-Activator: org.eclipse.imp.WizardPlugin
+ Bundle-ActivationPolicy: lazy
+ Eclipse-LazyStart: true
+Index: org.eclipse.imp.lpg/META-INF/MANIFEST.MF
+===================================================================
+--- org.eclipse.imp.lpg/META-INF/MANIFEST.MF	(revision 22255)
++++ org.eclipse.imp.lpg/META-INF/MANIFEST.MF	(working copy)
+@@ -2,7 +2,7 @@
+ Bundle-ManifestVersion: 2
+ Bundle-Name: LPG IDE & Meta-tooling (Incubation)
+ Bundle-SymbolicName: org.eclipse.imp.lpg
+-Bundle-Version: 0.1.84
++Bundle-Version: 0.1.84.qualifier
+ Bundle-Activator: org.eclipse.imp.lpg.Activator
+ Bundle-ActivationPolicy: lazy
+ Eclipse-LazyStart: true
 Index: org.eclipse.imp.runtime/src/org/eclipse/imp/language/LanguageRegistry.java
 ===================================================================
 --- org.eclipse.imp.runtime/src/org/eclipse/imp/language/LanguageRegistry.java	(revision 22255)
@@ -824,3 +850,156 @@
   org.eclipse.imp.indexing,
   org.eclipse.imp.language,
   org.eclipse.imp.model,
+Index: org.eclipse.imp.java.hosted/META-INF/MANIFEST.MF
+===================================================================
+--- org.eclipse.imp.java.hosted/META-INF/MANIFEST.MF	(revision 22255)
++++ org.eclipse.imp.java.hosted/META-INF/MANIFEST.MF	(working copy)
+@@ -2,7 +2,7 @@
+ Bundle-ManifestVersion: 2
+ Bundle-Name: IMP Support for Java-Hosted Languages (Incubation)
+ Bundle-SymbolicName: org.eclipse.imp.java.hosted
+-Bundle-Version: 0.1.2
++Bundle-Version: 0.1.2.qualifier
+ Bundle-Activator: org.eclipse.imp.java.hosted.Activator
+ Bundle-ActivationPolicy: lazy
+ Eclipse-LazyStart: true
+Index: org.eclipse.imp.presentation/META-INF/MANIFEST.MF
+===================================================================
+--- org.eclipse.imp.presentation/META-INF/MANIFEST.MF	(revision 22255)
++++ org.eclipse.imp.presentation/META-INF/MANIFEST.MF	(working copy)
+@@ -2,7 +2,7 @@
+ Bundle-ManifestVersion: 2
+ Bundle-Name: IMP Presentation Specifications (Incubation)
+ Bundle-SymbolicName: org.eclipse.imp.presentation;singleton:=true
+-Bundle-Version: 0.1.7
++Bundle-Version: 0.1.7.qualifier
+ Bundle-Activator: org.eclipse.imp.presentation.PSPActivator
+ Bundle-ActivationPolicy: lazy
+ Eclipse-LazyStart: true
+Index: org.eclipse.imp.lpg.ide/plugin.xml
+===================================================================
+--- org.eclipse.imp.lpg.ide/plugin.xml	(revision 22255)
++++ org.eclipse.imp.lpg.ide/plugin.xml	(working copy)
+@@ -244,15 +244,6 @@
+       </entityNameLocator>
+    </extension>
+    <extension
+-         point="org.eclipse.ui.preferencePages">
+-      <page
+-            name="LPG"
+-            class="org.eclipse.imp.lpg.preferences.LPGPreferencePage"
+-            id="org.eclipse.imp.lpg.preferences.LPG">
+-      </page>
+-   </extension>
+-
+-   <extension
+          id="docBuilder"
+          name="LPG Grammar Documentation Builder"
+          point="org.eclipse.core.resources.builders">
+@@ -265,9 +256,18 @@
+    <extension
+          point="org.eclipse.help.toc">
+       <toc
+-            category="IMP"
+             file="doc/toc.xml"
+-            primary="true">
++            primary="true"
++            category="IMP">
+       </toc>
+    </extension>
++   <extension
++         point="org.eclipse.ui.preferencePages">
++      <page
++            name="LPG"
++            class="org.eclipse.imp.lpg.preferences.LPGPreferencePage"
++            id="org.eclipse.imp.lpg.preferences.LPG">
++      </page>
++   </extension>
++
+ </plugin>
+Index: org.eclipse.imp.lpg.ide/META-INF/MANIFEST.MF
+===================================================================
+--- org.eclipse.imp.lpg.ide/META-INF/MANIFEST.MF	(revision 22255)
++++ org.eclipse.imp.lpg.ide/META-INF/MANIFEST.MF	(working copy)
+@@ -2,7 +2,7 @@
+ Bundle-ManifestVersion: 2
+ Bundle-Name: LPG IDE Runtime (Incubation)
+ Bundle-SymbolicName: org.eclipse.imp.lpg.ide;singleton:=true
+-Bundle-Version: 0.1.87
++Bundle-Version: 0.1.87.qualifier
+ Bundle-Activator: org.eclipse.imp.lpg.LPGRuntimePlugin
+ Bundle-ActivationPolicy: lazy
+ Eclipse-LazyStart: true
+@@ -12,7 +12,6 @@
+  org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.core.variables,
+- org.eclipse.help.ui;bundle-version="3.4.0",
+  org.eclipse.imp.runtime,
+  org.eclipse.imp.smapifier,
+  org.eclipse.imp.xform,
+Index: org.eclipse.imp.prefspecs/META-INF/MANIFEST.MF
+===================================================================
+--- org.eclipse.imp.prefspecs/META-INF/MANIFEST.MF	(revision 22255)
++++ org.eclipse.imp.prefspecs/META-INF/MANIFEST.MF	(working copy)
+@@ -4,7 +4,7 @@
+ Bundle-Activator: org.eclipse.imp.prefspecs.PrefspecsPlugin
+ Bundle-ActivationPolicy: lazy
+ Eclipse-LazyStart: true
+-Bundle-Version: 0.1.89
++Bundle-Version: 0.1.89.qualifier
+ Require-Bundle: lpg.runtime,
+  org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+Index: org.eclipse.imp.xform/META-INF/MANIFEST.MF
+===================================================================
+--- org.eclipse.imp.xform/META-INF/MANIFEST.MF	(revision 22255)
++++ org.eclipse.imp.xform/META-INF/MANIFEST.MF	(working copy)
+@@ -2,7 +2,7 @@
+ Bundle-ManifestVersion: 2
+ Bundle-Name: IMP Transformation Toolkit (Incubation)
+ Bundle-SymbolicName: org.eclipse.imp.xform; singleton:=true
+-Bundle-Version: 0.1.91
++Bundle-Version: 0.1.91.qualifier
+ Bundle-Activator: org.eclipse.imp.xform.XformPlugin
+ Bundle-ActivationPolicy: lazy
+ Eclipse-LazyStart: true
+Index: org.eclipse.imp.preferences/META-INF/MANIFEST.MF
+===================================================================
+--- org.eclipse.imp.preferences/META-INF/MANIFEST.MF	(revision 22255)
++++ org.eclipse.imp.preferences/META-INF/MANIFEST.MF	(working copy)
+@@ -2,7 +2,7 @@
+ Bundle-ManifestVersion: 2
+ Bundle-Name: IMP Preferences Meta-tooling (Incubation)
+ Bundle-SymbolicName: org.eclipse.imp.preferences;singleton:=true
+-Bundle-Version: 0.1.86
++Bundle-Version: 0.1.86.qualifier
+ Bundle-Activator: org.eclipse.imp.preferences.PreferencesPlugin
+ Bundle-ActivationPolicy: lazy
+ Eclipse-LazyStart: true
+Index: org.eclipse.imp.smapi/META-INF/MANIFEST.MF
+===================================================================
+--- org.eclipse.imp.smapi/META-INF/MANIFEST.MF	(revision 22255)
++++ org.eclipse.imp.smapi/META-INF/MANIFEST.MF	(working copy)
+@@ -2,7 +2,7 @@
+ Bundle-ManifestVersion: 2
+ Bundle-Name: SMAP support (Incubation)
+ Bundle-SymbolicName: org.eclipse.imp.smapi
+-Bundle-Version: 0.1.89.2
++Bundle-Version: 0.1.89.qualifier
+ Bundle-ActivationPolicy: lazy
+ Eclipse-LazyStart: true
+ Export-Package: org.eclipse.imp.smapi
+Index: org.eclipse.imp.smapifier/META-INF/MANIFEST.MF
+===================================================================
+--- org.eclipse.imp.smapifier/META-INF/MANIFEST.MF	(revision 22255)
++++ org.eclipse.imp.smapifier/META-INF/MANIFEST.MF	(working copy)
+@@ -2,7 +2,7 @@
+ Bundle-ManifestVersion: 2
+ Bundle-Name: SMAP Builder (Incubation)
+ Bundle-SymbolicName: org.eclipse.imp.smapifier;singleton:=true
+-Bundle-Version: 0.1.89.2
++Bundle-Version: 0.1.89.qualifier
+ Bundle-Activator: org.eclipse.imp.smapifier.SmapiePlugin
+ Bundle-ActivationPolicy: lazy
+ Eclipse-LazyStart: true

From L.C.L.Kats at tudelft.nl  Thu Nov 18 10:38:48 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 18 Nov 2010 09:38:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21369 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.sdf/trans
	org.strategoxt.imp.editors.spoofax/trans
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parse...
Message-ID: <201011180938.oAI9cmZt015475@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Nov 18 09:38:48 2010
New Revision: 21369
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21369&sc=1

Log:
Minor interface changes and cleanup.

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRLexer.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstAnnoImploder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Thu Nov 18 09:34:20 2010	(r21368)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	Thu Nov 18 09:38:48 2010	(r21369)
@@ -101,7 +101,12 @@
     opt(s @ seq(_, _)) -> (s, $[Extract sequence in optional to separate productions to ensure acceptable abstract syntax])
     where
       <occurrences(is-non-terminal)> s => 1
-  
+
+  context-free-syntax-warning:
+    opt(lit) -> (lit, $[Extract literal in optional to separate productions to ensure consistent abstract syntax])
+    where
+      oncetd(?lit(_))
+   
   /**
    * Tests if something is a non-terminal in terms of the AST produced.
    */

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-sdf.str	Thu Nov 18 09:34:20 2010	(r21368)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/to-sdf.str	Thu Nov 18 09:38:48 2010	(r21369)
@@ -25,6 +25,7 @@
       sections  := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> def;
       sections' := <alltd(desugar-sdf-redux)> <list-to-conc-grammars> sections
   
+  // TODO: also support {"Module(<2>, <1>)"}
   desugar-sdf-redux:
     term(default(fun(quoted(s)))) ->
     term(default(appl(unquoted("cons"), [fun(quoted(s))])))

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	Thu Nov 18 09:34:20 2010	(r21368)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	Thu Nov 18 09:38:48 2010	(r21369)
@@ -8,15 +8,12 @@
 import java.util.Collections;
 import java.util.Map;
 
-import lpg.runtime.ILexStream;
-import lpg.runtime.Monitor;
-import lpg.runtime.PrsStream;
+import lpg.runtime.IPrsStream;
 
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.OperationCanceledException;
-import org.eclipse.imp.parser.IParser;
 import org.spoofax.jsglr.BadTokenException;
 import org.spoofax.jsglr.SGLRException;
 import org.spoofax.jsglr.TokenExpectedException;
@@ -37,7 +34,7 @@
  *
  * @author Lennart Kats <L.C.L.Kats add tudelft.nl>
  */ 
-public abstract class AbstractSGLRI implements IParser {
+public abstract class AbstractSGLRI {
 	
 	@SuppressWarnings("unused")
 	private static final Map<CachingKey, ATerm> parsedCache =
@@ -71,7 +68,7 @@
 	/**
 	 * Get the current parsestream.
 	 */
-	public PrsStream getParseStream() {
+	public IPrsStream getParseStream() {
 		SGLRTokenizer tokenizer = getTokenizer();
 		if (tokenizer == null) return null;
 		return tokenizer.getParseStream();
@@ -193,11 +190,6 @@
 		}
 	}
 	
-	@Deprecated
-	public void reset(ILexStream lexStream) {
-		throw new UnsupportedOperationException();
-	}
-	
 	protected abstract ATerm doParseNoImplode(char[] inputChars, String filename)
 			throws TokenExpectedException, BadTokenException, SGLRException, IOException;
 
@@ -223,23 +215,6 @@
 		
 		return new ByteArrayInputStream(bytes);
 	}
-	
-	// LPG legacy / compatibility
-
-	@Deprecated
-	public Object parser(Monitor monitor, int error_repair_count) {
-		throw new UnsupportedOperationException();
-	}
-
-	@Deprecated
-	public String[] orderedTerminalSymbols() {
-		return null; // should map token kinds to names
-	}
-
-	@Deprecated
-	public int numTokenKinds() {
-		return 10;
-	}
 }
 
 /**

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java	Thu Nov 18 09:34:20 2010	(r21368)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java	Thu Nov 18 09:38:48 2010	(r21369)
@@ -221,7 +221,7 @@
 		
 		// Debug.log("Creating node ", sort, " from ", SGLRTokenizer.dumpToString(token));
 		
-		AstNode result = factory.createStringTerminal(getPaddedLexicalValue(attrs, token), sort, token);
+		AstNode result = factory.createStringTerminal(sort, getPaddedLexicalValue(attrs, token), token);
 		String constructor = reader.getMetaVarConstructor(rhs);
 		if (constructor != null) {
 			ArrayList<AstNode> children = new ArrayList<AstNode>(1);
@@ -295,7 +295,7 @@
 		} else if (constructor == null && children.size() == 1 && children.get(0).getSort() == AstNode.STRING_SORT) {
 			// Child node was a <string> node (rare case); unpack it and create a new terminal
 			assert left == right && children.get(0).getChildren().size() == 0;
-			return factory.createStringTerminal(getPaddedLexicalValue(attrs, left), sort, left);
+			return factory.createStringTerminal(sort, getPaddedLexicalValue(attrs, left), left);
 		} else {
 			return factory.createNonTerminal(sort, constructor, left, right, children);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstAnnoImploder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstAnnoImploder.java	Thu Nov 18 09:34:20 2010	(r21368)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstAnnoImploder.java	Thu Nov 18 09:38:48 2010	(r21369)
@@ -108,7 +108,7 @@
 			children.add(toAstNode(termAt(appl, i), null));
 		}
 		if (appl.isQuoted()) {
-			return factory.createStringTerminal(appl.getName(), sort, leftToken);
+			return factory.createStringTerminal(sort, appl.getName(), leftToken);
 		} else {
 			return factory.createNonTerminal(sort, appl.getName(), leftToken, rightToken, children);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java	Thu Nov 18 09:34:20 2010	(r21368)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java	Thu Nov 18 09:38:48 2010	(r21369)
@@ -31,7 +31,7 @@
 	/**
 	 * Create a new terminal AST node for a string token.
 	 */
-	public final StringAstNode createStringTerminal(String value, String sort, IToken token) {
+	public final StringAstNode createStringTerminal(String sort, String value, IToken token) {
 		return new StringAstNode(value, sort, token, token);
 	}
 	

From rtlindeman at gmail.com  Thu Nov 11 17:33:05 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Thu, 11 Nov 2010 16:33:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21344 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.core
	org.strategoxt.imp.debug.core/.settings
	org.strategoxt.imp.debug.core/META-INF
	org.strategoxt.imp.debug.core/li...
Message-ID: <201011111633.oABGX5ac026233@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Thu Nov 11 16:33:04 2010
New Revision: 21344
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21344&sc=1

Log:
Added sources for the stratego debugger
 * debug.core : the core eclipse plugin, extends the Eclipse Debugger
 * debug.ui : the user interface part of debug.core, extends the Eclipse Debugger
 * debug.stratego.transformer : spoofax project, transforms a stratego program to a stratego program with debug information
 * debug.stratego.runtime : spoofax project, contains the runtime debug library
 * debug.stratego.core : the core components for the Stratego Debugger
 * debug.stratego.test : 'testsuite' for the Stratego Debugger

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/.project
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/.settings/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/.settings/org.eclipse.jdt.core.prefs
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/README.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/CollectionUtils.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/IStrategoConstants.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoSourceLookupDirector.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoSourceLookupParticipant.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoSourcePathComputerDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoValue.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoVariable.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoDebugElement.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoDebugTarget.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoLineBreakpoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoThread.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/util/
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/util/VMUtil.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.project
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.settings/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.settings/org.eclipse.jdt.core.prefs
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/doc/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/doc/BUILDING.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/jar-export.jardesc
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/lib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/VMMonitor.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyVarHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/BreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleEnterBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleExitBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyEnterBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyExitBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyStepBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/LocationInfo.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoStackFrame.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoState.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Dump.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Runner.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StreamRedirectThread.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StringUtil.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/EventEntry.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/EventTable.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/thread-main.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/writer.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.externalToolBuilders/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.externalToolBuilders/Strj-dbg-runtime-lib build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.project
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.settings/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.settings/org.eclipse.jdt.core.prefs
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/README.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.custom.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Folding.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Outliner.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/libstrategodebuglib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/StrjdbgruntimelibParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/StrjdbgruntimelibParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/StrjdbgruntimelibValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_r_enter_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_r_exit_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_s_enter_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_s_exit_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_s_step_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_s_var_0_5.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/lib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/readme.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.rtree   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/Common.sdf
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/Strj-dbg-runtime-lib.generated.pp
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/Strj-dbg-runtime-lib.pp
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/Strj-dbg-runtime-lib.sdf
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/test/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/test/example.aterm
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/test/example.gen
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/test/example.strjdbg
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/external-calls.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strj_dbg_runtime_lib.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/utils/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.project
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.settings/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.settings/org.eclipse.jdt.core.prefs
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/README.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/lib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/compile2j/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/compile2j/compile2j   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/compile2j/compile2j.c
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/compile2j/compile2j.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/identity/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/identity/indentity   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/identity/indentity.c
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/identity/indentity.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/test-parse-str/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/test-parse-str/kaas.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/test-parse-str/test-parse-str   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/test-parse-str/test-parse-str.c
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/test-parse-str/test-parse-str.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/foo.parsed
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/foo2.parsed
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/inputs/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/inputs/Foo.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/inputs/Foo2.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/main/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/main/IdentityRunner.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/main/Wrap_blockRunner.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/main/Wrap_block_ppRunner.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/debuggable.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/debuggable.java.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/debuggable_lib.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/lifted6.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/lifted9.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/main_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/identity.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/identity.java.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/identity_lib.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/main_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/eval_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/lifted9.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/main_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/test_prop.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/test_prop.java.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/test_prop_lib.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/v_66.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/w_66.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/$Add$Block_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/add_block_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/lifted9.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/main_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/wrap_block.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/wrap_block.java.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/wrap_block_lib.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/$Add$Block_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/add_block_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/lifted9.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/main_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/wrap_block_pp.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/wrap_block_pp.java.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/wrap_block_pp_lib.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/identity.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/identity.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/sample1.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/identity.aterm
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/test-parse-str.aterm
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/test-prop.aterm
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/wrap-block-pp.aterm
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/wrap-block.aterm
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/test.prog
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/test1.prop
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/test2.prog
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/test2.prop
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/test-parse-str.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/test-prop.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/wrap-block-pp.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/wrap-block-pp.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/wrap-block.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/wrap-block.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/assign/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/assign/localvar.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/assign/run.input
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/assign/run.output
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/example1/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/example1/example.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/example1/rule-overview.aterm
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/example1/rule-overview.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/localvar.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/run.input
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/run.output
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/run.input
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/run.output
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/test-prop.aterm
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/test-prop.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/test-prop.tes
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/str-output/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/str-output/output
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/StrategoFileManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/other/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/other/FileTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileLocalVar.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileTestProp.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestHelper.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestImpl.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMStateTester.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/DebugCompilerWrapper.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/table/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/table/EventTableTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/thread-main.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/working/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/writer.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.externalToolBuilders/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.externalToolBuilders/Test build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.project
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.settings/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.settings/org.eclipse.jdt.core.prefs
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/README.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.custom.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/dist/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Folding.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Outliner.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strjdbg/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strjdbg/transformer/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/TestParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/TestParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/TestValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/trans/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/lib/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/lib/strategodebuglib.rtree   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Common.sdf
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Stratego-Sugar.def
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Test.pp
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Test.sdf
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/compiled/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/execute_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/find_comment_by_name_0_1.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/find_comment_match_0_1.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/find_comments_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/find_functions_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/first_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/get_function_name_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/lifted1.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/lifted2.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/lifted3.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/lifted4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/localvar.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/localvar.java.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/main_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/match_comments_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/match_f_and_c_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/stratego/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/stratego/localvar.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/java/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/java/README.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/java/org/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/java/org/test_prop_example/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/stratego/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/stratego/test-prop.aterm
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/stratego/test-prop.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example.tes
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example1/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example1/example.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example1/rule-overview.aterm
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example1/rule-overview.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/localvar.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/run.input
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/run.output
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/run.input
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/run.output
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/test-prop.aterm
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/test-prop.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/test-prop.tes
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/assert.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/compile-str.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-step.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-lookup.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/location-util.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/org.strjdbg.transformer.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/str-reader.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/utils/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/.project
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/.settings/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/.settings/org.eclipse.jdt.core.prefs
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/README.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/icons/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/icons/strategoxt_logo_16.png   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/icons/strategoxt_logo_64.png   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoLaunchShortcut.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoMainTab.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoTabGroup.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/model/
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/model/StrategoBreakpointAdapterFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/model/StrategoLineBreakpointAdapter.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/model/StrategoModelPresentation.java

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry exported="true" kind="lib" path="lib/eclipse-ecj.jar"/>
+	<classpathentry exported="true" kind="lib" path="lib/org.strjdbg.transformer.jar"/>
+	<classpathentry kind="lib" path="lib/strategoxt.jar"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="lib" path="lib/strj-dbg-core.jar" sourcepath="/strj-dbg-core"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/.project	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.strategoxt.imp.debug.core</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/.settings/org.eclipse.jdt.core.prefs	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,8 @@
+#Wed Oct 06 14:28:44 CEST 2010
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,19 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: stratego debugger core
+Bundle-SymbolicName: org.strjdbg.eclipse.core;singleton:=true
+Bundle-Version: 0.1.0.0
+Bundle-Activator: org.strjdbg.eclipse.core.Activator
+Require-Bundle: org.eclipse.core.runtime,
+ org.eclipse.debug.core,
+ org.eclipse.jdt.debug;bundle-version="3.5.0",
+ org.eclipse.jdt.launching;bundle-version="3.5.1"
+Bundle-ActivationPolicy: lazy
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Export-Package: org.strjdbg.eclipse.core.str.launching,
+ org.strjdbg.eclipse.core.str.model
+Bundle-ClassPath: lib/strj-dbg-core.jar,
+ .,
+ lib/strategoxt.jar,
+ lib/org.strjdbg.transformer.jar,
+ lib/eclipse-ecj.jar

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/README.txt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/README.txt	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,7 @@
+This is an Eclipse plugin project, it should contain the core plugin code.
+
+However the real stratego debugger source code is in org.strategoxt.imp.debug.stratego.core.
+
+
+Project org.strategoxt.imp.debug.ui contains userinterface code
+

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/build.properties	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,18 @@
+source.. = src/
+output.. = bin/
+bin.includes = META-INF/,\
+               .,\
+               plugin.xml,\
+               lib/strj-dbg-core.jar,\
+               lib/strategoxt.jar,\
+               lib/org.strjdbg.transformer.jar,\
+               lib/eclipse-ecj.jar
+jars.compile.order = .,\
+                     lib/strj-dbg-core.jar,\
+                     lib/strategoxt.jar,\
+                     lib/org.strjdbg.transformer.jar,\
+                     lib/eclipse-ecj.jar
+source.lib/strj-dbg-core.jar = 
+source.lib/strategoxt.jar = 
+source.lib/org.strjdbg.transformer.jar = 
+source.lib/eclipse-ecj.jar = 

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/plugin.xml	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?eclipse version="3.4"?>
+<plugin>
+   <extension
+         point="org.eclipse.debug.core.launchConfigurationTypes">
+      <launchConfigurationType
+            delegate="org.strjdbg.eclipse.core.str.launching.StrategoLaunchDelegate"
+            id="org.strjdbg.eclipse.core.launchConfigurationType.str"
+            modes="run, debug"
+            name="Stratego"
+            sourceLocatorId="org.strjdbg.eclipse.core.sourceLookupDirector.str"
+            sourcePathComputerId="org.strjdbg.eclipse.core.sourcePathComputer.str">
+      </launchConfigurationType>
+   </extension>
+   <extension
+         point="org.eclipse.debug.core.sourceLocators">
+      <sourceLocator
+            class="org.strjdbg.eclipse.core.str.launching.StrategoSourceLookupDirector"
+            id="org.strjdbg.eclipse.core.sourceLookupDirector.str"
+            name="Stratego Source Lookup Director">
+      </sourceLocator>
+   </extension>
+   <extension
+         point="org.eclipse.debug.core.sourcePathComputers">
+      <sourcePathComputer
+            class="org.strjdbg.eclipse.core.str.launching.StrategoSourcePathComputerDelegate"
+            id="org.strjdbg.eclipse.core.sourcePathComputer.str">
+      </sourcePathComputer>
+   </extension>
+   <extension
+         point="org.eclipse.debug.core.breakpoints">
+      <breakpoint
+            class="org.strjdbg.eclipse.core.str.model.StrategoLineBreakpoint"
+            id="org.strjdbg.eclipse.core.str.lineBreakpoint"
+            markerType="org.strjdbg.eclipse.core.str.lineBreakpoint.marker">
+      </breakpoint>
+   </extension>
+   <extension
+         id="org.strjdbg.eclipse.core.str.lineBreakpoint.marker"
+         point="org.eclipse.core.resources.markers">
+      <super
+            type="org.eclipse.debug.core.lineBreakpointMarker">
+      </super>
+      <persistent
+            value="true">
+      </persistent>
+   </extension>
+
+
+</plugin>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/Activator.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,50 @@
+package org.strjdbg.eclipse.core;
+
+import org.eclipse.core.runtime.Plugin;
+import org.osgi.framework.BundleContext;
+
+/**
+ * The activator class controls the plug-in life cycle
+ */
+public class Activator extends Plugin {
+
+	// The plug-in ID
+	public static final String PLUGIN_ID = "strj.eclipse.dbg.core";
+
+	// The shared instance
+	private static Activator plugin;
+	
+	/**
+	 * The constructor
+	 */
+	public Activator() {
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.core.runtime.Plugins#start(org.osgi.framework.BundleContext)
+	 */
+	public void start(BundleContext context) throws Exception {
+		super.start(context);
+		plugin = this;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.core.runtime.Plugin#stop(org.osgi.framework.BundleContext)
+	 */
+	public void stop(BundleContext context) throws Exception {
+		plugin = null;
+		super.stop(context);
+	}
+
+	/**
+	 * Returns the shared instance
+	 *
+	 * @return the shared instance
+	 */
+	public static Activator getDefault() {
+		return plugin;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/CollectionUtils.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/CollectionUtils.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,26 @@
+package org.strjdbg.eclipse.core.str.launching;
+
+import java.util.Collection;
+import java.util.Iterator;
+
+public class CollectionUtils {
+
+  private CollectionUtils() {}
+
+  public static String join (Collection<String> s) {
+    return CollectionUtils.join(s, "");
+  }
+
+  public static String join
+  (Collection<String> s, String delimiter)
+  {
+    if (s == null || s.isEmpty()) return "";
+    Iterator<String> iter = s.iterator();
+    StringBuilder builder = new StringBuilder(iter.next());
+    while( iter.hasNext() ) {
+      builder.append(delimiter).append(iter.next().toString());
+    }
+    return builder.toString();
+  }
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/IStrategoConstants.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/IStrategoConstants.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,35 @@
+package org.strjdbg.eclipse.core.str.launching;
+
+public interface IStrategoConstants {
+
+	/**
+	 * Unique identifier for the PDA debug model (value 
+	 * <code>org.eclipse.debug.examples.pda</code>).
+	 */
+	public static final String ID_STRATEGO_DEBUG_MODEL = "org.strjdbg.eclipse.core";
+	
+	/**
+	 * Launch configuration key. Value is a path to a stratego
+	 * program. The path is a string representing a full path
+	 * to a stratego program in the workspace. 
+	 */
+	public static final String ATTR_STRATEGO_PROGRAM = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_PROGRAM";
+	
+	/**
+	 * Launch configuration key. Value is the name of the eclipse project the stratego file is in.
+	 * Value has type String.
+	 */
+	public static final String ATTR_STRATEGO_PROJECT = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_PROJECT";
+	
+	/**
+	 * Launch configuration key. Value is the arguments for the stratego program that will be executed.
+	 * Value has type List<String>.
+	 */
+	public static final String ATTR_STRATEGO_PROGRAM_ARGUMENTS = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_PROGRAM_ARGUMENTS";
+	
+	/**
+	 * Launch configuration key. Value is boolean and true when before each launch the application should be recompiled.
+	 * If the value is false then the application won't get recompiled. Launching may fail if the compiled binaries are not present.
+	 */
+	public static final String ATTR_STRATEGO_PROGRAM_RECOMPILE = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_PROGRAM_RECOMPILE";
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoLaunchDelegate.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoLaunchDelegate.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,299 @@
+package org.strjdbg.eclipse.core.str.launching;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.ServerSocket;
+import java.text.MessageFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IFolder;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.debug.core.ILaunch;
+import org.eclipse.debug.core.ILaunchConfiguration;
+import org.eclipse.debug.core.ILaunchManager;
+import org.eclipse.debug.core.model.ILaunchConfigurationDelegate;
+import org.eclipse.jdt.launching.AbstractJavaLaunchConfigurationDelegate;
+import org.eclipse.jdt.launching.IVMInstall;
+import org.eclipse.jdt.launching.IVMRunner;
+import org.eclipse.jdt.launching.JavaRuntime;
+import org.eclipse.jdt.launching.VMRunnerConfiguration;
+import org.strategoxt.debug.core.util.DebugCompiler;
+import org.strategoxt.debug.core.util.DebugSessionSettings;
+import org.strjdbg.eclipse.core.str.model.StrategoDebugTarget;
+
+/**
+ * Launches a Stratego program.
+ * 
+ * The program can be launched in debug or in run mode.
+ * 
+ * Debug Launch:
+ * - add debug metadata to the stratego program
+ * - compile the stratego program to java (strj)
+ * - compile the java-stratego to class files
+ * - run the class
+ * - [handle breakpoints]
+ * 
+ * Run launch
+ * - compile the stratego program to java (strj)
+ * - compile the java-stratego to class files
+ * - run the class
+ * 
+ * The delegate extends the AbstractJavaLaunchConfigurationDelegate as this simplifies how to use a JVM
+ * @author rlindeman
+ *
+ */
+ at SuppressWarnings("unchecked")
+public class StrategoLaunchDelegate extends AbstractJavaLaunchConfigurationDelegate implements ILaunchConfigurationDelegate {
+
+	
+	public void launch(ILaunchConfiguration configuration, String mode,
+			ILaunch launch, IProgressMonitor monitor) throws CoreException {
+        if (monitor == null){
+            monitor = new NullProgressMonitor();
+        }
+        monitor.beginTask("Launching Stratego program", IProgressMonitor.UNKNOWN);
+        
+        // project
+        String project = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROJECT, (String) null);
+        if (project == null)
+        {
+        	abort("Eclipse project unspecified.", null);
+        }
+        
+		// program name
+		String program = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, (String)null);
+		if (program == null) {
+			abort("Stratego program unspecified.", null);
+		}
+		
+		IFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(program));
+		if (!file.exists()) {
+			abort(MessageFormat.format("Stratego program {0} does not exist.", new Object[] {file.getFullPath().toString()}), null);
+		}
+		
+		// program arguments
+		List programArguments = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_ARGUMENTS, (List)null);
+		if (programArguments == null) {
+			//abort("Stratego program unspecified.", null);
+			programArguments = new ArrayList<String>();
+		}
+		
+		// program recompile
+		boolean rebuildBinary = false;
+		rebuildBinary = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_RECOMPILE, true);
+		
+		// the started wm will wait for a debugger to connect to this port
+		String port = ""+findFreePort();
+		
+		//String strategoFilePath = file.getLocation().toOSString(); // full path to the stratego program
+		String strategoFilePath = program;
+		String strategoSourceBasedir = ResourcesPlugin.getWorkspace().getRoot().getProject(project).getLocation().toOSString();
+		//String strategoSourceBasedir = ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString();
+		IFile f = ResourcesPlugin.getWorkspace().getRoot().getProject(project).getFile(strategoFilePath); // path to the stratego file
+		strategoFilePath =  f.getProjectRelativePath().toOSString();
+		IPath projectPath = new Path(project);
+		strategoFilePath = f.getProjectRelativePath().makeRelativeTo(projectPath).toOSString(); // make the stratego file path relative to the project path
+		System.out.println("PROJECT...:" + project);
+		System.out.println("BASEDIR...: " + strategoSourceBasedir);
+		System.out.println("COMPILING...: " + strategoFilePath);
+
+		// now find a suitable temp directory to generate the files in...
+		String w = file.getProject().getFolder("working").getFullPath().toOSString();
+		IFolder wDir = ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(w));
+		String workingDirFolder = wDir.getLocation().toOSString();
+		System.out.println("WORKING DIR: " + workingDirFolder);
+		
+		DebugCompiler debugCompiler = new DebugCompiler("/tmp");
+		String projectName = DebugCompiler.createProjectName(new File(program));
+		
+		// compile the stratego program
+		String binBase = "/tmp/"+projectName+"/class";
+		if (rebuildBinary)
+		{
+			monitor.subTask("Compiling stratego program");
+			if (mode.equals(ILaunchManager.DEBUG_MODE)) 
+			{
+				
+				try {
+					binBase = debugCompiler.debugCompile(strategoSourceBasedir, strategoFilePath, projectName);
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+				catch (Exception e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+			}
+			else if (mode.equals(ILaunchManager.RUN_MODE))
+			{
+				try {
+					binBase = debugCompiler.runCompile(strategoFilePath, projectName);
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+			}
+			monitor.worked(3);
+		}
+		else
+		{
+			// TODO: check if all the necessary files exist in the working dir...
+		}
+		
+		monitor.subTask("Starting Stratego VM");
+		// Initialize the VMRunner
+		IVMInstall defaultInstall = JavaRuntime.getDefaultVMInstall();
+		System.out.println("default: " + defaultInstall.getName());
+		//IVMRunner vmRunner = defaultInstall.getVMRunner(mode);
+		IVMRunner vmRunner = defaultInstall.getVMRunner(ILaunchManager.RUN_MODE); // always use RUN, so we can control the debug parameters of the VM
+
+		
+		// set up vm arguments
+		String classToLaunch = projectName + "." + projectName;
+		String[] classPath = new String[] { binBase, strategoxtjar, libstrategodebuglib, strjdebugruntime};
+		VMRunnerConfiguration vmRunnerConfiguration = new VMRunnerConfiguration(classToLaunch, classPath);
+		
+		// setup program arguments
+		System.out.println("Args: " + programArguments);
+		String[] programArgsArray = new String[programArguments.size()];
+		programArgsArray = (String[]) programArguments.toArray(programArgsArray);
+		vmRunnerConfiguration.setProgramArguments(programArgsArray);
+
+
+		
+		// if we arein DEBUG_MODE also set the debugging parameters for the VM as we previously created an IVMRunner in RUN_MODE
+		if (mode.equals(ILaunchManager.DEBUG_MODE)) {
+			// socket attach
+			//String[] realVMargs = new String[] { "-Xdebug", "-Xrunjdwp:transport=dt_socket,address="+port+",server=y,suspend=y" };
+			// socket listen
+			String[] realVMargs = new String[] { "-Xdebug", "-Xrunjdwp:transport=dt_socket,address="+port+",suspend=y" };
+		//String[] realVMargs = new String[] { "-Xrunjdwp:transport=dt_socket,address=9000,server=y,suspend=y" };
+		//String[] realVMargs = new String[] { "-Xdebug" };
+			vmRunnerConfiguration.setVMArguments(realVMargs);
+		}
+		
+
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings("/tmp", projectName);
+		if (mode.equals(ILaunchManager.DEBUG_MODE)) {
+			monitor.subTask("Attaching to the Stratego VM");
+			StrategoDebugTarget target = new StrategoDebugTarget(debugSessionSettings, launch, port);
+			//(launch,p,requestPort,eventPort );
+			launch.addDebugTarget(target);
+			monitor.worked(1);
+		}
+		
+		// start the VM with the stratego program
+		// using attach, run before the StrategoDebugTarget is initialized
+		// using listen, run after the StrategoDebugTarget is initialized
+		System.out.println("RUN");
+		vmRunner.run(vmRunnerConfiguration, launch, monitor);
+		monitor.worked(1);
+		
+		monitor.done();
+	}
+	
+	public static void showDebugInfo(IVMInstall defaultInstall, VMRunnerConfiguration vmRunnerConfiguration)
+	{
+		// show debug info
+		String[] installArgs = defaultInstall.getVMArguments();
+		String installArgsString = Arrays.toString(installArgs);
+		System.out.println("installArgsString: " + installArgsString);
+		
+		String[] env = vmRunnerConfiguration.getEnvironment();
+		String envString = Arrays.toString(env);
+		System.out.println("env: " + envString);
+		
+		String[] vmArgs = vmRunnerConfiguration.getVMArguments();
+		String vmArgsString = Arrays.toString(vmArgs);
+		System.out.println("vmArgs: " + vmArgsString);
+		
+		Map map = vmRunnerConfiguration.getVMSpecificAttributesMap();
+		if (map != null)
+		{
+			for(Object key : map.keySet())
+			{
+				Object value = map.get(key);
+				System.out.println("key: " + key + "    val:"+value);
+			}
+		}
+	}
+
+	
+	private static String strj_dbg_core = "/home/rlindeman/workspace/strj-dbg-core";
+
+	private static String strategoxtjar = strj_dbg_core + "/lib/strategoxt.jar";
+	private static String libstrategodebuglib = strj_dbg_core + "/lib/strj_dbg_runtime_lib.jar";
+	private static String strjdebugruntime = strj_dbg_core + "/lib/strj_dbg_runtime_lib-java.jar";
+	
+
+	
+	/*
+	private void startRunVM()
+	{
+		
+	}
+	
+	private void startDebugVM(com.sun.jdi.VirtualMachine vm, VMMonitor vmMonitor)
+	{
+		// create a new VM
+		// TODO: let the user select the VM in the launchconfiguration
+		
+		DebugSessionManager manager = new DebugSessionManager(vmMonitor);
+		VMLauncherHelper vmHelper = null;
+		//manager.initVM(mainArgs, classpath);
+		
+		manager.setVirtualMachine(vm);
+		manager.setupEventListeners();
+		manager.redirectOutput();
+
+	}
+	*/
+	
+	/**
+	 * Throws an exception with a new status containing the given
+	 * message and optional exception.
+	 * 
+	 * @param message error message
+	 * @param e underlying exception
+	 * @throws CoreException
+	 */
+	private void abort(String message, Throwable e) throws CoreException {
+		// TODO: the plug-in code should be the example plug-in, not Stratego debug model id
+		throw new CoreException(new Status(IStatus.ERROR, IStrategoConstants.ID_STRATEGO_DEBUG_MODEL, 0, message, e));
+	}
+	
+	/**
+	 * Returns a free port number on localhost, or -1 if unable to find a free port.
+	 * 
+	 * @return a free port number on localhost, or -1 if unable to find a free port
+	 */
+	public static int findFreePort() {
+		ServerSocket socket= null;
+		try {
+			socket= new ServerSocket(0);
+			return socket.getLocalPort();
+		} catch (IOException e) { 
+		} finally {
+			if (socket != null) {
+				try {
+					socket.close();
+				} catch (IOException e) {
+				}
+			}
+		}
+		return -1;		
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoSourceLookupDirector.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoSourceLookupDirector.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,15 @@
+package org.strjdbg.eclipse.core.str.launching;
+
+import org.eclipse.debug.core.sourcelookup.AbstractSourceLookupDirector;
+import org.eclipse.debug.core.sourcelookup.ISourceLookupParticipant;
+
+public class StrategoSourceLookupDirector extends AbstractSourceLookupDirector {
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.internal.core.sourcelookup.ISourceLookupDirector#initializeParticipants()
+	 */
+	public void initializeParticipants() {
+		addParticipants(new ISourceLookupParticipant[]{new StrategoSourceLookupParticipant()});
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoSourceLookupParticipant.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoSourceLookupParticipant.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,20 @@
+package org.strjdbg.eclipse.core.str.launching;
+
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.debug.core.sourcelookup.AbstractSourceLookupParticipant;
+import org.strjdbg.eclipse.core.str.model.EStrategoStackFrame;
+
+public class StrategoSourceLookupParticipant  extends AbstractSourceLookupParticipant {
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.internal.core.sourcelookup.ISourceLookupParticipant#getSourceName(java.lang.Object)
+	 */
+	public String getSourceName(Object object) throws CoreException {
+		if (object instanceof EStrategoStackFrame) {
+			return ((EStrategoStackFrame)object).getSourceName(); // relative to the project dir
+		}
+		return null;
+	}
+
+	
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoSourcePathComputerDelegate.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoSourcePathComputerDelegate.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,37 @@
+package org.strjdbg.eclipse.core.str.launching;
+
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.debug.core.ILaunchConfiguration;
+import org.eclipse.debug.core.sourcelookup.ISourceContainer;
+import org.eclipse.debug.core.sourcelookup.ISourcePathComputerDelegate;
+import org.eclipse.debug.core.sourcelookup.containers.WorkspaceSourceContainer;
+
+public class StrategoSourcePathComputerDelegate implements ISourcePathComputerDelegate {
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.internal.core.sourcelookup.ISourcePathComputerDelegate#computeSourceContainers(org.eclipse.debug.core.ILaunchConfiguration, org.eclipse.core.runtime.IProgressMonitor)
+	 */
+	public ISourceContainer[] computeSourceContainers(ILaunchConfiguration configuration, IProgressMonitor monitor) throws CoreException {
+		// TODO: does this work?
+		//String path = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, (String)null);
+		ISourceContainer sourceContainer = null;
+		/*
+		if (path != null) {
+			IResource resource = ResourcesPlugin.getWorkspace().getRoot().findMember(new Path(path));
+			if (resource != null) {
+				IContainer container = resource.getParent();
+				if (container.getType() == IResource.PROJECT) {
+					sourceContainer = new ProjectSourceContainer((IProject)container, false);
+				} else if (container.getType() == IResource.FOLDER) {
+					sourceContainer = new FolderSourceContainer(container, false);
+				}
+			}
+		}
+		*/
+		if (sourceContainer == null) {
+			sourceContainer = new WorkspaceSourceContainer();
+		}
+		return new ISourceContainer[]{sourceContainer};
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,282 @@
+package org.strjdbg.eclipse.core.str.model;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import org.eclipse.debug.core.DebugException;
+import org.eclipse.debug.core.model.IRegisterGroup;
+import org.eclipse.debug.core.model.IStackFrame;
+import org.eclipse.debug.core.model.IThread;
+import org.eclipse.debug.core.model.IVariable;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.debug.core.model.StrategoStackFrame;
+
+public class EStrategoStackFrame extends StrategoDebugElement implements IStackFrame {
+
+	private StrategoThread fThread;
+	private String fName;
+	private int fId;
+	
+	private IVariable[] fVariables;
+	
+	private StrategoStackFrame frameData = null;
+	/**
+	 * Constructs a stack frame in the given thread with the given
+	 * frame data.
+	 * 
+	 * @param thread
+	 * @param data frame data
+	 * @param id stack frame id (0 is the bottom of the stack)
+	 */
+	public EStrategoStackFrame(StrategoThread thread, StrategoStackFrame data, int id) {
+		super((StrategoDebugTarget) thread.getDebugTarget());
+		fId = id;
+		fThread = thread;
+		frameData = data;
+		init(data);
+	}
+	
+	/**
+	 * Initializes this frame based on its data
+	 * 
+	 * @param data
+	 */
+	private void init(StrategoStackFrame data) {
+		this.frameData = data;
+		fName = data.getName();
+		extractVariablesFromFrame();
+	}
+	
+	private void extractVariablesFromFrame()
+	{		
+		List<EStrategoVariable> vars = new ArrayList<EStrategoVariable>();
+		EStrategoVariable currentVar = new EStrategoVariable(this.fTarget, this.frameData.getCurrentTerm(), "*current*");
+		currentVar.setValueChanged(true);
+		vars.add(currentVar);
+		for(Map.Entry<String, IStrategoTerm> entry : this.frameData.getVariables().entrySet())
+		{
+			EStrategoVariable v = new EStrategoVariable(this.fTarget, entry.getValue(), entry.getKey());
+			v.setValueChanged(true);
+			vars.add(v);
+		}
+		// TODO: use this.frameData to determine if the value was changed
+		fVariables = new IVariable[vars.size()];
+		fVariables = vars.toArray(fVariables);
+		
+	}
+
+	public int getCharEnd() throws DebugException {
+		// TODO Auto-generated method stub
+		return -1;
+	}
+
+	public int getCharStart() throws DebugException {
+		// TODO Auto-generated method stub
+		return -1;
+	}
+
+	public int getLineNumber() throws DebugException {
+		// TODO Auto-generated method stub
+		//return frameData.getLocationInfo().getStart_line_num(); // LocationInfo of the rule/strategy that is active
+		return frameData.getCurrentLocationInfo().getStart_line_num();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStackFrame#getName()
+	 */
+	public String getName() throws DebugException {
+		return fName;
+	}
+	
+	public int getId()
+	{
+		return this.fId;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStackFrame#getRegisterGroups()
+	 */
+	public IRegisterGroup[] getRegisterGroups() throws DebugException {
+		return null;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStackFrame#getThread()
+	 */
+	public IThread getThread() {
+		return fThread;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStackFrame#getVariables()
+	 */
+	public IVariable[] getVariables() throws DebugException {
+		extractVariablesFromFrame();
+		return fVariables;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStackFrame#hasRegisterGroups()
+	 */
+	public boolean hasRegisterGroups() throws DebugException {
+		return false;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStackFrame#hasVariables()
+	 */
+	public boolean hasVariables() throws DebugException {
+		return fVariables.length > 0;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStep#canStepInto()
+	 */
+	public boolean canStepInto() {
+		return getThread().canStepInto();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStep#canStepOver()
+	 */
+	public boolean canStepOver() {
+		return getThread().canStepOver();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStep#canStepReturn()
+	 */
+	public boolean canStepReturn() {
+		return getThread().canStepReturn();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStep#isStepping()
+	 */
+	public boolean isStepping() {
+		return getThread().isStepping();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStep#stepInto()
+	 */
+	public void stepInto() throws DebugException {
+		getThread().stepInto();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStep#stepOver()
+	 */
+	public void stepOver() throws DebugException {
+		getThread().stepOver();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IStep#stepReturn()
+	 */
+	public void stepReturn() throws DebugException {
+		getThread().stepReturn();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.ISuspendResume#canResume()
+	 */
+	public boolean canResume() {
+		return getThread().canResume();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.ISuspendResume#canSuspend()
+	 */
+	public boolean canSuspend() {
+		return getThread().canSuspend();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.ISuspendResume#isSuspended()
+	 */
+	public boolean isSuspended() {
+		return getThread().isSuspended();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.ISuspendResume#resume()
+	 */
+	public void resume() throws DebugException {
+		getThread().resume();
+	}
+	
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.ISuspendResume#suspend()
+	 */
+	public void suspend() throws DebugException {
+		getThread().suspend();
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.ITerminate#canTerminate()
+	 */
+	public boolean canTerminate() {
+		return getThread().canTerminate();
+	}
+	
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.ITerminate#isTerminated()
+	 */
+	public boolean isTerminated() {
+		return getThread().isTerminated();
+	}
+	
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.ITerminate#terminate()
+	 */
+	public void terminate() throws DebugException {
+		getThread().terminate();
+	}
+
+	/**
+	 * Returns the source filename of the current Frame.
+	 * 
+	 * @return
+	 */
+	public String getSourceName() {
+		// TODO Auto-generated method stub
+		return this.frameData.getFilename();
+	}
+	
+	public StrategoStackFrame getFrameData()
+	{
+		return this.frameData;
+	}
+	
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof EStrategoStackFrame))
+			return false;
+		EStrategoStackFrame other = (EStrategoStackFrame) obj;
+		// check frame data
+		if (this.getFrameData() == null || other.getFrameData() == null)
+		{
+			return false;
+		}
+		return other.getFrameData().equals(this.getFrameData());
+	}
+	
+	@Override
+	public int hashCode() {
+		final int prime = 71;
+		int result = 1;
+		result = prime * result;
+		if (this.frameData != null)
+		{
+			result += this.frameData.hashCode();
+		}
+		return result;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoValue.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoValue.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,48 @@
+package org.strjdbg.eclipse.core.str.model;
+
+import org.eclipse.debug.core.DebugException;
+import org.eclipse.debug.core.model.IValue;
+import org.eclipse.debug.core.model.IVariable;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class EStrategoValue extends StrategoDebugElement implements IValue {
+
+	private IStrategoTerm fValue;
+	
+	public EStrategoValue(StrategoDebugTarget target, IStrategoTerm value) {
+		super(target);
+		fValue = value;
+	}
+	
+	public String getReferenceTypeName() throws DebugException {
+		// TODO Auto-generated method stub
+		return ""+fValue.getTermType();
+	}
+
+	public String getValueString() throws DebugException {
+		// TODO Auto-generated method stub
+		return fValue.toString();
+	}
+
+	public IVariable[] getVariables() throws DebugException {
+		// TODO Auto-generated method stub
+		IStrategoTerm[] subTerms = this.fValue.getAllSubterms();
+		IVariable[] subVars = new IVariable[subTerms.length];
+		for(int i = 0; i < subTerms.length; i++)
+		{
+			subVars[i] = new EStrategoVariable(this.fTarget, subTerms[i], "["+i+"]");
+		}
+		return subVars;
+	}
+
+	public boolean hasVariables() throws DebugException {
+		// TODO Auto-generated method stub
+		return fValue.getSubtermCount() > 0;
+	}
+
+	public boolean isAllocated() throws DebugException {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoVariable.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoVariable.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,85 @@
+package org.strjdbg.eclipse.core.str.model;
+
+import org.eclipse.debug.core.DebugException;
+import org.eclipse.debug.core.model.IValue;
+import org.eclipse.debug.core.model.IVariable;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class EStrategoVariable extends StrategoDebugElement implements IVariable {
+
+	// name & stack frmae
+	private String fName;
+	//private EStrategoStackFrame fFrame;
+	
+	private IStrategoTerm term;
+	
+	/**
+	 * Constructs a variable contained in the given stack frame
+	 * with the given name.
+	 * 
+	 * @param target the corresponding StrategoDebugTarget
+	 * @param frame owning stack frame
+	 * @param name variable name
+	 */
+	public EStrategoVariable(StrategoDebugTarget target, IStrategoTerm term, String name) {
+		//super((StrategoDebugTarget) frame.getDebugTarget());
+		super(target);
+		//fFrame = frame;
+		this.term = term;
+		this.fTarget = target;
+		fName = name;
+	}
+	
+	public String getName() throws DebugException {
+		return this.fName;
+	}
+
+	public String getReferenceTypeName() throws DebugException {
+		// TODO Auto-generated method stub
+		return "StrategoThing";
+	}
+
+	public IValue getValue() throws DebugException {
+		return new EStrategoValue((StrategoDebugTarget)getDebugTarget(), this.term);
+		//return ((StrategoDebugTarget)getDebugTarget()).getVariableValue(this);
+	}
+
+	// TODO: proper implement using the StrategoStackFrame and event handlers
+	private boolean hasValueChanged = false;
+	
+	public boolean hasValueChanged() throws DebugException {
+		// TODO Auto-generated method stub
+		return hasValueChanged;
+	}
+	
+	public void setValueChanged(boolean hasValueChanged)
+	{
+		this.hasValueChanged = hasValueChanged;
+	}
+
+	public void setValue(String expression) throws DebugException {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public void setValue(IValue value) throws DebugException {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public boolean supportsValueModification() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	public boolean verifyValue(String expression) throws DebugException {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	public boolean verifyValue(IValue value) throws DebugException {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoDebugElement.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoDebugElement.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,113 @@
+package org.strjdbg.eclipse.core.str.model;
+
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.PlatformObject;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.debug.core.DebugEvent;
+import org.eclipse.debug.core.DebugException;
+import org.eclipse.debug.core.DebugPlugin;
+import org.eclipse.debug.core.ILaunch;
+import org.eclipse.debug.core.model.IDebugElement;
+import org.eclipse.debug.core.model.IDebugTarget;
+import org.strjdbg.eclipse.core.Activator;
+import org.strjdbg.eclipse.core.str.launching.IStrategoConstants;
+
+public abstract class StrategoDebugElement extends PlatformObject implements IDebugElement {
+
+	// containing target 
+	protected StrategoDebugTarget fTarget;
+	
+	/**
+	 * Constructs a new debug element contained in the given
+	 * debug target.
+	 * 
+	 * @param target debug target (Stratego VM)
+	 */
+	public StrategoDebugElement(StrategoDebugTarget target) {
+		fTarget = target;
+	}
+	
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IDebugElement#getModelIdentifier()
+	 */
+	public String getModelIdentifier() {
+		return IStrategoConstants.ID_STRATEGO_DEBUG_MODEL;
+	}
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IDebugElement#getDebugTarget()
+	 */
+	public IDebugTarget getDebugTarget() {
+		return fTarget;
+	}
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IDebugElement#getLaunch()
+	 */
+	public ILaunch getLaunch() {
+		return getDebugTarget().getLaunch();
+	}
+	/* (non-Javadoc)
+	 * @see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
+	 */
+	@SuppressWarnings("unchecked")
+	public Object getAdapter(Class adapter) {
+		if (adapter == IDebugElement.class) {
+			return this;
+		}
+		else if (adapter == ILaunch.class)
+		{
+			return this.getLaunch();
+		}
+		return super.getAdapter(adapter);
+	}
+	
+	protected void abort(String message, Throwable e) throws DebugException {
+		// was DebugExamplesPlugin.getDefault().getDescriptor().getUniqueIdentifier(),
+		// deprecated: getDescriptor().getUniqueIdentifier()
+		throw new DebugException(new Status(IStatus.ERROR, Activator.getDefault().getBundle().getSymbolicName(), 
+				DebugPlugin.INTERNAL_ERROR, message, e));
+	}
+	
+	/**
+	 * Fires a debug event
+	 * 
+	 * @param event the event to be fired
+	 */
+	protected void fireEvent(DebugEvent event) {
+		DebugPlugin.getDefault().fireDebugEventSet(new DebugEvent[] {event});
+	}
+	
+	/**
+	 * Fires a <code>CREATE</code> event for this element.
+	 */
+	protected void fireCreationEvent() {
+		System.out.println("fireCreationEvent");
+		fireEvent(new DebugEvent(this, DebugEvent.CREATE));
+	}	
+	
+	/**
+	 * Fires a <code>RESUME</code> event for this element with
+	 * the given detail.
+	 * 
+	 * @param detail event detail code
+	 */
+	public void fireResumeEvent(int detail) {
+		fireEvent(new DebugEvent(this, DebugEvent.RESUME, detail));
+	}
+
+	/**
+	 * Fires a <code>SUSPEND</code> event for this element with
+	 * the given detail.
+	 * 
+	 * @param detail event detail code
+	 */
+	public void fireSuspendEvent(int detail) {
+		fireEvent(new DebugEvent(this, DebugEvent.SUSPEND, detail));
+	}
+	
+	/**
+	 * Fires a <code>TERMINATE</code> event for this element.
+	 */
+	protected void fireTerminateEvent() {
+		fireEvent(new DebugEvent(this, DebugEvent.TERMINATE));
+	}	
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoDebugTarget.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoDebugTarget.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,660 @@
+package org.strjdbg.eclipse.core.str.model;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+
+import org.eclipse.core.resources.IMarker;
+import org.eclipse.core.resources.IMarkerDelta;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.debug.core.DebugEvent;
+import org.eclipse.debug.core.DebugException;
+import org.eclipse.debug.core.DebugPlugin;
+import org.eclipse.debug.core.ILaunch;
+import org.eclipse.debug.core.model.IBreakpoint;
+import org.eclipse.debug.core.model.IDebugTarget;
+import org.eclipse.debug.core.model.ILineBreakpoint;
+import org.eclipse.debug.core.model.IMemoryBlock;
+import org.eclipse.debug.core.model.IProcess;
+import org.eclipse.debug.core.model.IStackFrame;
+import org.eclipse.debug.core.model.IThread;
+import org.strategoxt.debug.core.control.DebugSessionManager;
+import org.strategoxt.debug.core.control.VMMonitor;
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.RuleEnterBreakPoint;
+import org.strategoxt.debug.core.eventspec.StrategyEnterBreakPoint;
+import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;
+import org.strategoxt.debug.core.model.StrategoStackFrame;
+import org.strategoxt.debug.core.model.StrategoState;
+import org.strategoxt.debug.core.util.DebugSessionSettings;
+import org.strategoxt.debug.core.util.VMLauncherHelper;
+import org.strategoxt.debug.core.util.table.EventEntry;
+import org.strategoxt.debug.core.util.table.EventTable;
+import org.strjdbg.eclipse.core.Activator;
+import org.strjdbg.eclipse.core.str.launching.IStrategoConstants;
+
+import com.sun.jdi.VirtualMachine;
+import com.sun.jdi.VirtualMachineManager;
+import com.sun.jdi.connect.Connector;
+import com.sun.jdi.connect.IllegalConnectorArgumentsException;
+import com.sun.jdi.connect.ListeningConnector;
+
+public class StrategoDebugTarget extends StrategoDebugElement implements IDebugTarget {
+
+	// containing launch object
+	private ILaunch fLaunch;
+	
+	// threads
+	private StrategoThread fThread;
+	private IThread[] fThreads;
+	
+	// event dispatch job
+	private EventDispatchJob fEventDispatch;
+	
+	// suspend state
+	private boolean fSuspended = false;
+	
+	// terminated state
+	private boolean fTerminated = false;
+	
+	private DebugSessionManager manager = null;
+
+//	private String projectName = null; // TODO: use this one?
+	
+	/**
+	 * Listens to events from the Stratego VM and fires corresponding 
+	 * debug events.
+	 */
+	class EventDispatchJob extends Job implements VMMonitor {
+		
+		public EventDispatchJob() {
+			super("Stratego Event Dispatch");
+			setSystem(true);
+		}
+
+		/* (non-Javadoc)
+		 * @see org.eclipse.core.runtime.jobs.Job#run(org.eclipse.core.runtime.IProgressMonitor)
+		 */
+		protected IStatus run(IProgressMonitor monitor) {
+			String event = "";
+			while (!isTerminated() && event != null) {
+				//try {
+					//event = fEventReader.readLine();
+					// fetch the next event
+					if (event != null) {
+						fThread.setBreakpoints(null);
+						fThread.setStepping(false);
+						if (event.equals("started")) {
+							// vm started event received
+							started();
+						} else if (event.equals("terminated")) {
+							// vm terminated event received
+							terminated();
+						} else if (event.startsWith("resumed")) {
+							if (event.endsWith("step")) {
+								// resume and step
+								fThread.setStepping(true);
+								resumed(DebugEvent.STEP_OVER);
+							} else if (event.endsWith("client")) {
+								// resume
+								resumed(DebugEvent.CLIENT_REQUEST);
+							}
+						} else if (event.startsWith("suspended")) {
+							if (event.endsWith("client")) {
+								// vm suspended
+								suspended(DebugEvent.CLIENT_REQUEST);
+							} else if (event.endsWith("step")) {
+								// step
+								suspended(DebugEvent.STEP_END);
+							} else if (event.indexOf("breakpoint") >= 0) {
+								// hit breakpoint
+								//breakpointHit(event);
+							}
+						}
+					}
+				//} catch (IOException e) {
+				//	terminated();
+				//}
+			}
+			return Status.OK_STATUS;
+		}
+
+		public void stateChanged(StrategoState state) {
+			// TODO Auto-generated method stub
+			//System.out.println("State change!"); // we hit a breakpoint!
+			updateState(state);
+			breakpointHit(state);
+			//suspended(DebugEvent.CLIENT_REQUEST); // suspended due to client request
+		}
+
+		public void vmEvent(String event) {
+			// TODO Auto-generated method stub
+			//System.out.println("VM EVENT: " + event);
+			if ("VMSTARTED".equals(event))
+			{
+				started();
+			}
+			else if ("VMDEATH".equals(event))
+			{
+				terminated();
+			}
+		}
+		
+	}
+	
+	
+	public StrategoDebugTarget(DebugSessionSettings debugSessionSettings, ILaunch launch, final String port) throws CoreException {
+		super(null);
+		this.fLaunch = launch;
+		// running threads
+		fThread = new StrategoThread(this);
+		fThreads = new IThread[] {fThread};
+		
+		// handle events fired by the VM
+		fEventDispatch = new EventDispatchJob();
+		fEventDispatch.schedule();
+		
+		//VirtualMachine vm = this.setupAttacher(port); // when suspended at this line the debug target has time to setup the socket
+		// TODO: Use SocketListen (wait for VM to connect) instead of SocketAttach (connect to existing VM)
+		
+		Thread thread = new Thread("Listen on socket for target VM.") {
+			public void run()  {
+				VirtualMachine t_vm = null;
+				try {
+					t_vm = setupListener(port);
+				} catch (CoreException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+				connectedToVM(t_vm);
+			}
+		};
+		
+		
+
+		
+		manager = new DebugSessionManager(debugSessionSettings, fEventDispatch);
+		
+		DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(this);
+		// we have to know when we get removed, so that we can shut off the debugger
+		// Used by PyDev debugger
+		// TODO: fires launchRemoved
+		//DebugPlugin.getDefault().getLaunchManager().addLaunchListener(this);
+	    
+		thread.start(); // start the listener thread
+	}
+	
+	private void connectedToVM(VirtualMachine vm)
+	{
+		if (vm != null)
+		{
+			manager.setVirtualMachine(vm);
+			System.out.println("init listeners");
+			manager.setupEventListeners();
+			System.out.println("Redirect");
+			manager.redirectOutput();
+			//System.out.println("RUN");
+			//manager.runVM();
+			//System.out.println("Done");
+		}
+	}
+	
+    public void launchRemoved(ILaunch launch) {
+        // shut down the remote debugger when parent launch
+        if (launch == this.fLaunch) {
+            DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);;
+        }
+    }
+	
+    /*
+    // use setupListener instead of setupAttacher
+	private VirtualMachine setupAttacher(String port) throws CoreException
+	{
+		VirtualMachineManager vmManager = org.eclipse.jdi.Bootstrap.virtualMachineManager(); // eclipse vmManager
+		//VirtualMachineManager m2 = Bootstrap.virtualMachineManager(); // com.sun.jdi.BootStrap, this method returns null
+		
+		System.out.println("ATTACH@"+port);
+		AttachingConnector attachConnector = VMLauncherHelper.findSocketAttachConnector(vmManager);
+		
+		VirtualMachine vm = null;
+		try {
+			vm = this.attach(attachConnector, port);
+		} catch (IllegalConnectorArgumentsException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+			abort("Unable to connect to Stratego VM", e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+			abort("Unable to connect to Stratego VM", e);
+		}
+		//System.out.println("Connected to VM! " + vm.description());
+		return vm;
+	}
+	
+	// attach running vm
+	@SuppressWarnings("unchecked")
+	private VirtualMachine attach(AttachingConnector connector, String port)
+			throws IllegalConnectorArgumentsException, IOException 
+	{
+		Map<String, Connector.Argument> args = connector.defaultArguments();
+		Connector.Argument pidArgument = args.get("port");
+		if (pidArgument == null) {
+			throw new IllegalStateException();
+		}
+		pidArgument.setValue(port);
+
+		return connector.attach(args);
+	}
+	*/
+	
+	private VirtualMachine setupListener(String port) throws CoreException
+	{
+		VirtualMachineManager vmManager = org.eclipse.jdi.Bootstrap.virtualMachineManager(); // eclipse vmManager
+		//VirtualMachineManager m2 = Bootstrap.virtualMachineManager(); // com.sun.jdi.BootStrap, this method returns null
+		
+		System.out.println("LISTEN@"+port);
+		ListeningConnector listenConnector = VMLauncherHelper.findSocketListenConnector(vmManager);	
+		
+		VirtualMachine vm = null;
+		try {
+			vm = this.listen(listenConnector, port);
+		} catch (IllegalConnectorArgumentsException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+			abort("Unable to connect to Stratego VM", e);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+			abort("Unable to connect to Stratego VM", e);
+		}
+		//System.out.println("Connected to VM! " + vm.description());
+		return vm;
+	}
+	
+	@SuppressWarnings("unchecked")
+	private VirtualMachine listen(ListeningConnector connector, String port) throws IOException, IllegalConnectorArgumentsException
+	{
+		VirtualMachine vm = null;
+		Map<String, Connector.Argument> args = connector.defaultArguments();
+		Connector.Argument pidArgument = args.get("port");
+		if (pidArgument == null) {
+			throw new IllegalStateException();
+		}
+		pidArgument.setValue(port);
+
+		connector.startListening(args); // returns listening address
+        vm = connector.accept(args);
+        connector.stopListening(args);
+        
+		return vm;
+	}
+	
+	
+	private String fName = null;
+
+	private StrategoState state;
+	
+	public String getName() throws DebugException {
+		if (fName == null) {
+			fName = "Stratego Program";
+			try {
+				fName = getLaunch().getLaunchConfiguration().getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, "Stratego VM");
+			} catch (CoreException e) {
+			}
+		}
+		return fName;
+	}
+
+	/**
+	 *  TODO: JDIDebugTarget implements this as <code>return breakpoint instanceof IJavaBreakpoint;</code>
+	 */
+	public boolean supportsBreakpoint(IBreakpoint breakpoint) {
+		if (breakpoint.getModelIdentifier().equals(IStrategoConstants.ID_STRATEGO_DEBUG_MODEL)) {
+			try {
+				String program = getLaunch().getLaunchConfiguration().getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, (String)null);
+				if (program != null) {
+					IMarker marker = breakpoint.getMarker();
+					if (marker != null) {
+						IPath p = new Path(program);
+						return marker.getResource().getFullPath().equals(p);
+					}
+				}
+			} catch (CoreException e) {
+			}			
+		}
+		return false;
+	}
+
+	public IProcess getProcess() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public IThread[] getThreads() throws DebugException {
+		// TODO Auto-generated method stub
+		return this.fThreads;
+	}
+
+	public boolean hasThreads() throws DebugException {
+		return true;
+	}
+
+	public IDebugTarget getDebugTarget() {
+		// TODO Auto-generated method stub
+		return this;
+	}
+
+	public ILaunch getLaunch() {
+		// TODO Auto-generated method stub
+		return this.fLaunch;
+	}
+
+	public boolean canTerminate() {
+		// TODO Auto-generated method stub
+		return true;
+	}
+
+	public boolean isTerminated() {
+		return this.fTerminated;
+	}
+
+	public void terminate() throws DebugException {
+		fTerminated = true;
+		fSuspended = false;
+		manager.terminateVM();
+	}
+
+	public boolean canResume() {
+		return !isTerminated() && isSuspended();
+	}
+
+	public boolean canSuspend() {
+		return !isTerminated() && !isSuspended();
+	}
+
+	public boolean isSuspended() {
+		return fSuspended;
+	}
+
+	/**
+	 * Resume the VM.
+	 */
+	public void resume() throws DebugException {
+		// TODO Auto-generated method stub
+		//System.out.println("resume program");
+		manager.resumeVM();
+	}
+
+	/**
+	 * Suspend the VM.
+	 */
+	public void suspend() throws DebugException {
+		// TODO Auto-generated method stub
+		manager.suspendVM();
+	}
+
+	public void breakpointAdded(IBreakpoint breakpoint) {
+		//System.out.println("breakpointAdded");
+		if (supportsBreakpoint(breakpoint)) {
+			
+			try {
+				if (breakpoint.isEnabled())
+				{
+					// only add the breakpoint to the Stratego debugger when the breakpoint is enabled
+					int linenumber = breakpoint.getMarker().getAttribute(IMarker.LINE_NUMBER, -1);
+					
+					if (linenumber > 0)
+					{
+						// only linenumbers greater than 0 are valid as linenumber is 1-based
+						BreakPoint bp = createBreakpoint(linenumber);
+						if (bp != null)
+						{
+							this.manager.getEventSpecManager().add(bp);
+						}
+					}
+				}
+			} catch (CoreException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+		}
+		
+	}
+	
+	private BreakPoint createBreakpoint(int linenumber)
+	{
+		BreakPoint bp = null;
+		
+		// returns the type of events (s-step/r-enter/s-enter/s-exit/r-exit) can occur at the given linenumber
+		// the event type determines the breakpoint type
+		List<EventEntry> entries = this.manager.getEventSpecManager().getEventTable().getEventEntries(linenumber);
+
+		// prefer s-step over enter/exit breakpoints
+		EventEntry stepEvent = EventTable.getFirstStepEventEntry(entries);
+		if (stepEvent != null)
+		{
+			//create a step breakpoint
+			bp = new StrategyStepBreakPoint(stepEvent.getStrategyName(), linenumber);
+		}
+		else
+		{
+			// try to create an enter breakpoint
+			EventEntry enterEvent = EventTable.getFirstEnterEventEntry(entries);
+			if (enterEvent == null)
+			{
+				// TODO: what should we do when we have no step and no enter event?
+			}
+			else
+			{
+				if ("s-enter".equals(enterEvent.getEventType()))
+				{
+					bp = new StrategyEnterBreakPoint(enterEvent.getStrategyName(), linenumber);
+				}
+				else if ("r-enter".equals(enterEvent.getEventType()))
+				{
+					bp = new RuleEnterBreakPoint(enterEvent.getStrategyName(), linenumber);
+				}
+				else
+				{
+					// should never happen has enterEvent always returns a s-enter or r-enter
+				}
+			}
+		}
+		//breakpoint.getMarker().getAttribute(IMarker., defaultValue)
+		//BreakPoint bp = new RuleEnterBreakPoint("find-comment-match", -1);
+		
+		return bp;
+	}
+
+	public void breakpointChanged(IBreakpoint breakpoint, IMarkerDelta delta) {
+		// TODO Auto-generated method stub
+		//System.out.println("breakpointChanged");
+		if (supportsBreakpoint(breakpoint)) {
+			try {
+				if (breakpoint.isEnabled()) {
+					breakpointAdded(breakpoint);
+				} else {
+					breakpointRemoved(breakpoint, null);
+				}
+			} catch (CoreException e) {
+			}
+		}
+	}
+
+	public void breakpointRemoved(IBreakpoint breakpoint, IMarkerDelta delta) {
+		// TODO Auto-generated method stub
+		//System.out.println("breakpointRemoved");
+		if (supportsBreakpoint(breakpoint)) {
+
+			// convert IBreakpoint to Stratego Breakpoint
+
+			int linenumber = breakpoint.getMarker().getAttribute(IMarker.LINE_NUMBER, -1);
+			
+			if (linenumber > 0)
+			{
+				// only linenumbers greater than 0 are valid as linenumber is 1-based
+				BreakPoint bp = createBreakpoint(linenumber);
+				if (bp != null)
+				{
+					this.manager.getEventSpecManager().remove(bp);
+				}
+			}
+
+		}
+	}
+
+	public boolean canDisconnect() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	public void disconnect() throws DebugException {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public boolean isDisconnected() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	public IMemoryBlock getMemoryBlock(long startAddress, long length)
+			throws DebugException {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public boolean supportsStorageRetrieval() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	public IStackFrame[] getStackFrames() {
+		StrategoStackFrame[] ssFrames = this.state.getStackFrames();
+		IStackFrame[] frames = new IStackFrame[ssFrames.length];
+		for(int i = 0; i < ssFrames.length; i++)
+		{
+			int id = ssFrames.length - i - 1;
+			frames[id] = new EStrategoStackFrame(this.fThread, ssFrames[i], id);
+		}
+		
+		return frames;
+	}
+
+	public void step() {
+		// TODO Auto-generated method stub
+		// manager.stepVM();
+	}
+
+
+	/**
+	 * Notification we have connected to the VM and it has started.
+	 * Resume the VM.
+	 */
+	private void started() {
+		fireCreationEvent();
+		installDeferredBreakpoints();
+		try {
+			resume();
+		} catch (DebugException e) {
+		}
+	}
+	
+	/**
+	 * Install breakpoints that are already registered with the breakpoint
+	 * manager.
+	 */
+	private void installDeferredBreakpoints() {
+		IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(IStrategoConstants.ID_STRATEGO_DEBUG_MODEL);
+		for (int i = 0; i < breakpoints.length; i++) {
+			breakpointAdded(breakpoints[i]);
+		}
+	}
+	
+	/**
+	 * Called when this debug target terminates.
+	 */
+	private void terminated() {
+		fTerminated = true;
+		fSuspended = false;
+		DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);
+		fireTerminateEvent();
+	}
+	
+	/**
+	 * Notification the target has resumed for the given reason
+	 * 
+	 * @param detail reason for the resume
+	 */
+	private void resumed(int detail) {
+		fSuspended = false;
+		fThread.fireResumeEvent(detail);
+	}
+	
+	/**
+	 * Notification the target has suspended for the given reason
+	 * 
+	 * @param detail reason for the suspend
+	 */
+	private void suspended(int detail) {
+		fSuspended = true;
+		fThread.fireSuspendEvent(detail);
+	}	
+	
+	
+	/**
+	 * Notification a breakpoint was encountered. Determine
+	 * which breakpoint was hit and fire a suspend event.
+	 * 
+	 * @param event debug event
+	 */
+	private void breakpointHit(StrategoState state) {
+		// determine which breakpoint was hit, and set the thread's breakpoint
+		//int lineNumber = state.getLocationInfo().getStart_line_num(); // 1-based index // Use the currentFrame
+		int lineNumber = state.currentFrame().getCurrentLocationInfo().getStart_line_num(); // 1-based index
+		
+		IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(IStrategoConstants.ID_STRATEGO_DEBUG_MODEL);
+		for (int i = 0; i < breakpoints.length; i++) {
+			IBreakpoint breakpoint = breakpoints[i];
+			if (supportsBreakpoint(breakpoint)) {
+				if (breakpoint instanceof ILineBreakpoint) {
+					ILineBreakpoint lineBreakpoint = (ILineBreakpoint) breakpoint;
+					
+					try {
+						
+						if (lineBreakpoint.getLineNumber() == lineNumber) {
+							fThread.setBreakpoints(new IBreakpoint[]{breakpoint});
+							break;
+						}
+						
+					} catch (CoreException e) {
+					}
+				}
+			}
+		}
+		
+		suspended(DebugEvent.BREAKPOINT);
+	}
+
+	public VMMonitor getVMMonitor() {
+		// TODO Auto-generated method stub
+		return fEventDispatch;
+	}	
+	
+	private void updateState(StrategoState state)
+	{
+		this.state = state;
+	}
+	
+	protected void abort(String message, Throwable e) throws DebugException {
+		throw new DebugException(new Status(IStatus.ERROR, Activator.getDefault().getBundle().getSymbolicName(), 
+				DebugPlugin.INTERNAL_ERROR, message, e));
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoLineBreakpoint.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoLineBreakpoint.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,55 @@
+package org.strjdbg.eclipse.core.str.model;
+
+import org.eclipse.core.resources.IMarker;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.IWorkspaceRunnable;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.debug.core.model.IBreakpoint;
+import org.eclipse.debug.core.model.LineBreakpoint;
+import org.strjdbg.eclipse.core.str.launching.IStrategoConstants;
+
+public class StrategoLineBreakpoint extends LineBreakpoint {
+
+	/**
+	 * Default constructor is required for the breakpoint manager
+	 * to re-create persisted breakpoints. After instantiating a breakpoint,
+	 * the <code>setMarker(...)</code> method is called to restore
+	 * this breakpoint's attributes.
+	 */
+	public StrategoLineBreakpoint() {
+	}
+
+	/**
+	 * Constructs a line breakpoint on the given resource at the given
+	 * line number. The line number is 1-based (i.e. the first line of a
+	 * file is line number 1).
+	 * 
+	 * @param resource file on which to set the breakpoint
+	 * @param lineNumber 1-based line number of the breakpoint
+	 * @throws CoreException if unable to create the breakpoint
+	 */
+	public StrategoLineBreakpoint(final IResource resource, final int lineNumber)
+			throws CoreException {
+		IWorkspaceRunnable runnable = new IWorkspaceRunnable() {
+			public void run(IProgressMonitor monitor) throws CoreException {
+				IMarker marker = resource.createMarker("org.strjdbg.eclipse.core.str.lineBreakpoint.marker");
+				setMarker(marker);
+				marker.setAttribute(IBreakpoint.ENABLED, Boolean.TRUE);
+				marker.setAttribute(IMarker.LINE_NUMBER, lineNumber);
+				marker.setAttribute(IBreakpoint.ID, getModelIdentifier());
+				marker.setAttribute(IMarker.MESSAGE, "Line Breakpoint: "
+						+ resource.getName() + " [line: " + lineNumber + "]");
+			}
+		};
+		run(getMarkerRule(resource), runnable);
+	}
+	
+	/* (non-Javadoc)
+	 * @see org.eclipse.debug.core.model.IBreakpoint#getModelIdentifier()
+	 */
+	public String getModelIdentifier() {
+		return IStrategoConstants.ID_STRATEGO_DEBUG_MODEL;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoThread.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoThread.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,157 @@
+package org.strjdbg.eclipse.core.str.model;
+
+import org.eclipse.debug.core.DebugException;
+import org.eclipse.debug.core.model.IBreakpoint;
+import org.eclipse.debug.core.model.IStackFrame;
+import org.eclipse.debug.core.model.IThread;
+
+public class StrategoThread extends StrategoDebugElement implements IThread {
+
+	/**
+	 * Breakpoints this thread is suspended at or <code>null</code>
+	 * if none.
+	 */
+	private IBreakpoint[] fBreakpoints;
+	
+	/**
+	 * Whether this thread is stepping
+	 */
+	private boolean fStepping = false;
+	
+	/**
+	 * Constructs a new thread for the given target
+	 * 
+	 * @param target VM
+	 */
+	public StrategoThread(StrategoDebugTarget target) {
+		super(target);
+	}
+	
+	public IBreakpoint[] getBreakpoints() {
+		if (fBreakpoints == null) {
+			return new IBreakpoint[0];
+		}
+		return fBreakpoints;
+	}
+	
+	/**
+	 * Sets the breakpoints this thread is suspended at, or <code>null</code>
+	 * if none.
+	 * 
+	 * @param breakpoints the breakpoints this thread is suspended at, or <code>null</code>
+	 * if none
+	 */
+	protected void setBreakpoints(IBreakpoint[] breakpoints) {
+		fBreakpoints = breakpoints;
+	}
+
+	public String getName() throws DebugException {
+		return "Thread[1]";
+	}
+
+	public int getPriority() throws DebugException {
+		return 0;
+	}
+
+	public IStackFrame[] getStackFrames() throws DebugException {
+		if (isSuspended()) {
+			return ((StrategoDebugTarget)getDebugTarget()).getStackFrames();
+		} else {
+			return new IStackFrame[0];
+		}
+	}
+
+	public IStackFrame getTopStackFrame() throws DebugException {
+		IStackFrame[] frames = getStackFrames();
+		if (frames.length > 0) {
+			return frames[0];
+		}
+		return null;
+	}
+
+	public boolean hasStackFrames() throws DebugException {
+		return isSuspended();
+	}
+
+	/**
+	 * Stratego Thread can only resume when it is suspend and not terminated/
+	 */
+	public boolean canResume() {
+		return isSuspended() && !isTerminated();
+	}
+
+	/**
+	 * Stratego Thread can only be suspended when it isn't already suspended and it isn't already terminated.
+	 */
+	public boolean canSuspend() {
+		return !isSuspended() && !isTerminated();
+	}
+
+	public boolean isSuspended() {
+		return getDebugTarget().isSuspended();
+	}
+
+	public void resume() throws DebugException {
+		getDebugTarget().resume();
+	}
+
+	public void suspend() throws DebugException {
+		getDebugTarget().suspend();
+	}
+
+	public boolean canStepInto() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	public boolean canStepOver() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	public boolean canStepReturn() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	public boolean isStepping() {
+		// TODO Auto-generated method stub
+		return this.fStepping;
+	}
+
+	public void stepInto() throws DebugException {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public void stepOver() throws DebugException {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public void stepReturn() throws DebugException {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public boolean canTerminate() {
+		return !isTerminated();
+	}
+
+	public boolean isTerminated() {
+		return getDebugTarget().isTerminated();
+	}
+
+	public void terminate() throws DebugException {
+		getDebugTarget().terminate();
+	}
+
+	/**
+	 * Sets whether this thread is stepping
+	 * 
+	 * @param stepping whether stepping
+	 */
+	protected void setStepping(boolean stepping) {
+		fStepping = stepping;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/util/VMUtil.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/util/VMUtil.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,7 @@
+package org.strjdbg.eclipse.core.str.util;
+
+
+public class VMUtil {
+
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="lib" path="lib/org.strjdbg.transformer.jar"/>
+	<classpathentry kind="lib" path="lib/strategoxt.jar"/>
+	<classpathentry kind="lib" path="lib/eclipse-ecj.jar"/>
+	<classpathentry kind="lib" path="lib/tools.jar"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.project	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.strategoxt.imp.debug.stratego.core</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.settings/org.eclipse.jdt.core.prefs	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,12 @@
+#Tue Sep 14 11:56:28 CEST 2010
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/doc/BUILDING.txt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/doc/BUILDING.txt	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,26 @@
+packaging instructions for org.strategoxt.imp.debug.stratego.core
+
+before org.strategoxt.imp.debug.stratego.core can be packaged
+its libraries have to be built
+
+ * org.strjdbg.transformer.jar
+ build project org.strategoxt.imp.debug.stratego.transformer and copy include/org.strjdbg.transformer.jar to the lib dir
+ 
+ * strategodebuglib.rtree 
+ see org.strategoxt.imp.debug.stratego.runtime/str-lib/README.txt
+ Also copy it to the lib dir of projects org.strategoxt.imp.debug.stratego.transformer and org.strategoxt.imp.debug.stratego.test
+
+ * strj_dbg_runtime_lib-java.jar
+ build project org.strategoxt.imp.debug.stratego.runtime and copy include/strj_dbg_runtime_lib-java.jar to the lib dir
+ 
+ * strj_dbg_runtime_lib.jar
+ build project org.strategoxt.imp.debug.stratego.runtime and copy include/strj_dbg_runtime_lib.jar to the lib dir
+  
+  
+external libraries
+ * eclipse-ecj.jar: the eclipse java compiler
+ * jdi.jar and jdimodel.jar: eclipse implementations of the java debug interface
+ * strategoxt.jar: the strategoxt java runtime
+ * tools.jar: sun implementation of the java debug interface
+ 
+ 

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/jar-export.jardesc
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/jar-export.jardesc	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<jardesc>
+    <jar path="org.strjdbg.eclipse.core/lib/strj-dbg-core.jar"/>
+    <options buildIfNeeded="true" compress="true" descriptionLocation="/strj-dbg-core/jar-export.jardesc" exportErrors="true" exportWarnings="true" includeDirectoryEntries="false" overwrite="false" saveDescription="true" storeRefactorings="false" useSourceFolders="false"/>
+    <storedRefactorings deprecationInfo="true" structuralOnly="false"/>
+    <selectedProjects/>
+    <manifest generateManifest="true" manifestLocation="" manifestVersion="1.0" reuseManifest="false" saveManifest="false" usesManifest="true">
+        <sealing sealJar="false">
+            <packagesToSeal/>
+            <packagesToUnSeal/>
+        </sealing>
+    </manifest>
+    <selectedElements exportClassFiles="true" exportJavaFiles="true" exportOutputFolder="false">
+        <javaElement handleIdentifier="=strj-dbg-core/src"/>
+        <file path="/strj-dbg-core/.project"/>
+        <file path="/strj-dbg-core/.classpath"/>
+        <folder path="/strj-dbg-core/lib"/>
+    </selectedElements>
+</jardesc>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,230 @@
+package org.strategoxt.debug.core.control;
+
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
+import org.strategoxt.debug.core.util.DebugSessionSettings;
+import org.strategoxt.debug.core.util.StreamRedirectThread;
+import org.strategoxt.debug.core.util.VMLauncherHelper;
+
+import com.sun.jdi.Bootstrap;
+import com.sun.jdi.VirtualMachine;
+import com.sun.jdi.VirtualMachineManager;
+
+
+public class DebugSessionManager {
+
+	private VirtualMachine vm = null;
+
+	public boolean running = false;
+	
+	// Thread transferring remote error stream to our error stream
+	private StreamRedirectThread errThread = null;
+
+	// Thread transferring remote output stream to our output stream
+	private StreamRedirectThread outThread = null;
+
+	// Class patterns for which we don't want events
+	private String[] excludes = { "java.*"
+			, "javax.*"
+			, "sun.*"
+			, "com.sun.*"
+			,"org.strategoxt.lang.terms.*"
+			//, "org.strategoxt.*"
+			//, "org.spoofax.*"
+			//, "aterm.*"
+		};
+	
+	// Do we want to watch assignments to fields
+	private boolean watchFields = false;
+	
+	// keeps track of all event specifications (e.g. breakpoints)
+	private EventSpecManager eventSpecManager = null;
+	
+	private EventThread eventThread = null;
+	
+	// any changes to the VM are reported to this monitor
+	// e.g. thread suspended
+	private VMMonitor vmMonitor = null;
+	
+	private DebugSessionSettings debugSessionSettings = null;
+	
+	public DebugSessionManager(DebugSessionSettings debugSessionSettings, VMMonitor vmMonitor)
+	{
+		this.debugSessionSettings = debugSessionSettings;
+		this.eventSpecManager = new EventSpecManager(debugSessionSettings);
+		this.vmMonitor = vmMonitor;
+	}
+	
+	public DebugSessionSettings getDebugSessionSettings()
+	{
+		return this.debugSessionSettings;
+	}
+	
+	/**
+	 * Initialize a new VM using the given VirtualMachineManager.
+	 * 
+	 * @param vmManager
+	 * @param mainArgs
+	 * @param classpath
+	 */
+	public void initVM(VirtualMachineManager vmManager, String mainArgs, String classpath) {
+		VMLauncherHelper helper = new VMLauncherHelper(vmManager);
+		helper.setClasspath(classpath);
+		this.vm = helper.getTargetVM(mainArgs);
+	}
+	
+	/**
+	 * Initialize a new VM. The VM is found using Bootstrap.virtualMachineManager(), in tools.jar (Sun's implementation).
+	 * 
+	 * However if jdi.jar is used (The eclipse implementation) then Bootstrap.virtualMachineManager() returns null.
+	 * In this case we need to get our VM elsewhere...
+	 * @param mainArgs
+	 * @param classpath
+	 */
+	public void initVM(String mainArgs, String classpath) {
+		VirtualMachineManager vmManager = DebugSessionManager.getSunVMM();
+		this.initVM(vmManager, mainArgs, classpath);
+	}
+	
+	/**
+	 * Initialize a new VM using the given VirtualMachineManager.
+	 * 
+	 * @param vmManager
+	 * @param mainArgs
+	 */
+	public void initVM(VirtualMachineManager vmManager, String mainArgs) {
+		VMLauncherHelper helper = new VMLauncherHelper(vmManager);
+		helper.setDefaultClasspath();
+		this.vm = helper.getTargetVM(mainArgs);
+	}
+	
+	/**
+	 * Initialize a new VM. The VM is found using Bootstrap.virtualMachineManager(), in tools.jar (Sun's implementation).
+	 * 
+	 * However if jdi.jar is used (The eclipse implementation) then Bootstrap.virtualMachineManager() returns null.
+	 * In this case we need to get our VM elsewhere...
+	 * @param mainArgs
+	 * @param classpath
+	 */
+	public void initVM(String mainArgs) {
+		VirtualMachineManager vmManager = DebugSessionManager.getSunVMM();
+		this.initVM(vmManager, mainArgs);
+	}
+	
+	/**
+	 * If initVM cannot be used, use this method to explicity set Virtual Machine.
+	 * @param vm
+	 */
+	public void setVirtualMachine(VirtualMachine vm)
+	{
+		this.vm = vm;
+	}
+
+	/**
+	 * Initializes the event listeners for the current virtual machine
+	 */
+	public void setupEventListeners() {
+		// vm should not be null
+		/*
+		EventRequestManager em = vm.eventRequestManager();
+		MethodEntryRequest meR = em.createMethodEntryRequest();
+		meR.addClassFilter("strjdebugruntime.*");
+		meR.enable();
+		 */
+		int debugTraceMode = 0; // -dbgtrace 
+		vm.setDebugTraceMode(debugTraceMode);
+		this.eventThread = new EventThread(vm, excludes, eventSpecManager, vmMonitor);
+		this.eventThread.setEventRequests(watchFields);
+		this.eventThread.start();
+	}
+	
+	public void redirectOutput() {
+		Process process = vm.process();
+		if (process != null)
+		{
+			// Copy target's output and error to our output and error.
+			errThread = new StreamRedirectThread("error reader", process
+					.getErrorStream(), System.err);
+			outThread = new StreamRedirectThread("output reader", process
+					.getInputStream(), System.out);
+			errThread.start();
+			outThread.start();
+		}
+		else
+		{
+			System.out.println("no process with vm");
+		}
+	}
+
+
+
+	public void runVM() {
+		System.out.println("runVM start");
+        vm.resume();
+
+        // Shutdown begins when event thread terminates
+        try {
+            //eventThread.join();
+            errThread.join(); // Make sure output is forwarded
+            outThread.join(); // before we exit
+            errThread.closeStream();
+            outThread.closeStream();
+        } catch (InterruptedException exc) {
+            // we don't interrupt
+        }
+        System.out.println("runVM end");
+	}
+	
+	/**
+	 * Resume the Stratego VM.
+	 */
+	public void resumeVM()
+	{
+		if (this.eventThread.getVMDied())
+		{
+			// cannot resume a VM that has died
+			System.out.println("Cannot resume a VM that has died...");
+		}
+		else
+		{
+			vm.resume();
+		}
+	}
+	
+	/**
+	 * Suspend the Stratego VM.
+	 */
+	public void suspendVM()
+	{
+		vm.suspend();
+	}
+	
+	/**
+	 * Terminate the Stratego VM.
+	 */
+	public void terminateVM()
+	{
+		// TODO: Implement
+	}
+	
+	public EventSpecManager getEventSpecManager()
+	{
+		return this.eventSpecManager;
+	}
+
+	public void setStepExit() {
+		// TODO Auto-generated method stub
+		
+	}
+	
+	/**
+	 * returns the sun VirtualMachineManager via com.sun.jdi.BootStrap.virtualMachineManager().
+	 * If this method is called with jdi.jar, the eclipse-version, on the classpath instead of tools.jar, the sun-version, 
+	 * then this method will return null.
+	 */
+	public static VirtualMachineManager getSunVMM()
+	{
+		VirtualMachineManager vmm = Bootstrap.virtualMachineManager(); // com.sun.jdi.BootStrap
+		return vmm;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,357 @@
+/*
+ * @(#)EventThread.java	1.6 05/11/17
+ *
+ * Copyright 2006 Sun Microsystems, Inc. All rights reserved.
+ * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
+ */
+/*
+ * Copyright (c) 1997-2001 by Sun Microsystems, Inc. All Rights Reserved.
+ * 
+ * Sun grants you ("Licensee") a non-exclusive, royalty free, license to use,
+ * modify and redistribute this software in source and binary code form,
+ * provided that i) this copyright notice and license appear on all copies of
+ * the software; and ii) Licensee does not utilize the software in a manner
+ * which is disparaging to Sun.
+ * 
+ * This software is provided "AS IS," without a warranty of any kind. ALL
+ * EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY
+ * IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
+ * NON-INFRINGEMENT, ARE HEREBY EXCLUDED. SUN AND ITS LICENSORS SHALL NOT BE
+ * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING
+ * OR DISTRIBUTING THE SOFTWARE OR ITS DERIVATIVES. IN NO EVENT WILL SUN OR ITS
+ * LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT,
+ * INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER
+ * CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF THE USE OF
+ * OR INABILITY TO USE SOFTWARE, EVEN IF SUN HAS BEEN ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGES.
+ * 
+ * This software is not designed or intended for use in on-line control of
+ * aircraft, air traffic, aircraft navigation or aircraft communications; or in
+ * the design, construction, operation or maintenance of any nuclear
+ * facility. Licensee represents and warrants that it will not use or
+ * redistribute the Software for such purposes.
+ */
+
+package org.strategoxt.debug.core.control;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
+import org.strategoxt.debug.core.model.StrategoState;
+import org.strategoxt.debug.core.util.DebugEventRequestInstaller;
+
+import com.sun.jdi.Field;
+import com.sun.jdi.ThreadReference;
+import com.sun.jdi.VMDisconnectedException;
+import com.sun.jdi.VirtualMachine;
+import com.sun.jdi.event.ClassPrepareEvent;
+import com.sun.jdi.event.Event;
+import com.sun.jdi.event.EventIterator;
+import com.sun.jdi.event.EventQueue;
+import com.sun.jdi.event.EventSet;
+import com.sun.jdi.event.ExceptionEvent;
+import com.sun.jdi.event.MethodEntryEvent;
+import com.sun.jdi.event.MethodExitEvent;
+import com.sun.jdi.event.ModificationWatchpointEvent;
+import com.sun.jdi.event.StepEvent;
+import com.sun.jdi.event.ThreadDeathEvent;
+import com.sun.jdi.event.VMDeathEvent;
+import com.sun.jdi.event.VMDisconnectEvent;
+import com.sun.jdi.event.VMStartEvent;
+import com.sun.jdi.request.EventRequest;
+import com.sun.jdi.request.EventRequestManager;
+import com.sun.jdi.request.ModificationWatchpointRequest;
+
+/**
+ * This class processes incoming JDI events and displays them
+ * 
+ * @version @(#) EventThread.java 1.6 05/11/17 13:07:51
+ * @author Robert Field
+ */
+public class EventThread extends Thread {
+
+
+	
+	private final VirtualMachine vm; // Running VM
+	private final String[] excludes; // Packages to exclude
+
+	static String nextBaseIndent = ""; // Starting indent for next thread
+
+	private boolean connected = false; // Connected to VM
+	private boolean vmDied = false; // VMDeath occurred
+
+	// Maps ThreadReference to ThreadTrace instances
+	private Map<ThreadReference, ThreadEventHandler> traceMap = new HashMap<ThreadReference, ThreadEventHandler>();
+
+	// keeps track of all event specifications (e.g. breakpoints)
+	private EventSpecManager eventSpecManager = null;
+	
+	// changes to the vm are reported to the monitor (e.g. a thread was suspended because a breakpoint was hit)
+	private VMMonitor vmMonitor = null;
+	
+	// returns the current state of the running stratego program
+	// e.g. current linenumber
+	private StrategoState strategoState = null;
+	
+	EventThread(VirtualMachine vm, String[] excludes, EventSpecManager eventSpecManager, VMMonitor vmMonitor) {
+		super("event-handler");
+		if (vm != null)
+		{
+			// we are connected to a vm
+			this.connected = true;
+		}
+		this.vm = vm;
+		this.excludes = excludes;
+		this.eventSpecManager = eventSpecManager;
+		this.vmMonitor = vmMonitor;
+		this.strategoState = new StrategoState();
+	}
+
+	/**
+	 * Run the event handling thread. As long as we are connected, get event
+	 * sets off the queue and dispatch the events within them.
+	 */
+	public void run() {
+		EventQueue queue = vm.eventQueue();
+		while (connected) {
+			try {
+				EventSet eventSet = queue.remove();
+				boolean suspendThread = false;
+				
+				EventIterator it = eventSet.eventIterator();
+				while (it.hasNext()) {
+					suspendThread = handleEvent(it.nextEvent());
+				}
+				if (!suspendThread)
+				{
+					eventSet.resume();
+				} else if (eventSet.suspendPolicy() == EventRequest.SUSPEND_ALL) {
+					if (vmMonitor != null)
+					{
+						vmMonitor.stateChanged(this.getStrategoState());
+					}
+					// no more active threads
+					System.out.println("All threads suspended");
+					System.out.println();
+					// all threads are suspended
+                    //setCurrentThread(eventSet);
+                    //notifier.vmInterrupted();
+                }
+				else
+				{
+					if (vmMonitor != null)
+					{
+						vmMonitor.stateChanged(this.getStrategoState());
+					}
+					// not all threads are suspended
+					System.out.println("Not all threads are suspended");
+					List<ThreadReference> refs = vm.allThreads();
+					for(ThreadReference r : refs)
+					{
+						System.out.println(r.name() + " " + r.status() + " " + r.isSuspended());
+					}
+				}
+			} catch (InterruptedException exc) {
+				// Ignore
+			} catch (VMDisconnectedException discExc) {
+				handleDisconnectedException();
+				break;
+			}
+		}
+	}
+
+	private StrategoState getStrategoState() {
+		return this.strategoState;
+	}
+
+	/**
+	 * Create the desired event requests, and enable them so that we will get
+	 * events.
+	 * 
+	 * @param excludes
+	 *            Class patterns for which we don't want events
+	 * @param watchFields
+	 *            Do we want to watch assignments to fields
+	 */
+	void setEventRequests(boolean watchFields) {
+		DebugEventRequestInstaller.installDebugEventRequests(this.vm, watchFields, this.excludes);
+	}
+
+
+
+	/**
+	 * Returns the ThreadEventHandler instance for the specified thread, creating one
+	 * if needed.
+	 */
+	private ThreadEventHandler getThreadEventHandler(ThreadReference thread) {
+		ThreadEventHandler handler = (ThreadEventHandler) traceMap.get(thread);
+		if (handler == null) {
+			handler = new ThreadEventHandler(thread, this.strategoState);
+			traceMap.put(thread, handler);
+		}
+		return handler;
+	}
+
+	/**
+	 * Dispatch incoming events
+	 * 
+	 * Returns true if the thread should stay suspended (we hit a breakpoint!)
+	 * Returns false if the thread should resume
+	 */
+	private boolean handleEvent(Event event) {
+		//System.out.println("Event " + event);
+		if (event instanceof ExceptionEvent) {
+			return exceptionEvent((ExceptionEvent) event);
+		} else if (event instanceof ModificationWatchpointEvent) {
+			return fieldWatchEvent((ModificationWatchpointEvent) event);
+		} else if (event instanceof MethodEntryEvent) {
+			return methodEntryEvent((MethodEntryEvent) event);
+		} else if (event instanceof MethodExitEvent) {
+			return methodExitEvent((MethodExitEvent) event);
+		} else if (event instanceof StepEvent) {
+			return stepEvent((StepEvent) event);
+		} else if (event instanceof ThreadDeathEvent) {
+			return threadDeathEvent((ThreadDeathEvent) event);
+		} else if (event instanceof ClassPrepareEvent) {
+			return classPrepareEvent((ClassPrepareEvent) event);
+		} else if (event instanceof VMStartEvent) {
+			return vmStartEvent((VMStartEvent) event);
+		} else if (event instanceof VMDeathEvent) {
+			return vmDeathEvent((VMDeathEvent) event);
+		} else if (event instanceof VMDisconnectEvent) {
+			return vmDisconnectEvent((VMDisconnectEvent) event);
+		} else {
+			throw new Error("Unexpected event type");
+		}
+		
+		//System.out.println("handleEvent - EXIT");
+	}
+
+	/***
+	 * A VMDisconnectedException has happened while dealing with another event.
+	 * We need to flush the event queue, dealing only with exit events (VMDeath,
+	 * VMDisconnect) so that we terminate correctly.
+	 */
+	synchronized void handleDisconnectedException() {
+		EventQueue queue = vm.eventQueue();
+		while (connected) {
+			try {
+				EventSet eventSet = queue.remove();
+				EventIterator iter = eventSet.eventIterator();
+				while (iter.hasNext()) {
+					Event event = iter.nextEvent();
+					if (event instanceof VMDeathEvent) {
+						vmDeathEvent((VMDeathEvent) event);
+					} else if (event instanceof VMDisconnectEvent) {
+						vmDisconnectEvent((VMDisconnectEvent) event);
+					}
+				}
+				eventSet.resume(); // Resume the VM
+			} catch (InterruptedException exc) {
+				// ignore
+			}
+		}
+	}
+
+	private boolean vmStartEvent(VMStartEvent event) {
+		System.out.println("-------------------------------- VM started");
+		sendVMMonitorEvent("VMSTARTED");
+		return false; // resume thread
+	}
+
+	// Forward event for thread specific processing
+	private boolean methodEntryEvent(MethodEntryEvent event) {
+		boolean suspendThread = getThreadEventHandler(event.thread()).methodEntryEvent(event, eventSpecManager);
+		return suspendThread; // resume thread
+	}
+
+	// Forward event for thread specific processing
+	private boolean methodExitEvent(MethodExitEvent event) {
+		getThreadEventHandler(event.thread()).methodExitEvent(event);
+		return false; // resume thread
+	}
+
+	// Forward event for thread specific processing
+	private boolean stepEvent(StepEvent event) {
+		getThreadEventHandler(event.thread()).stepEvent(event);
+		return false; // resume thread
+	}
+
+	// Forward event for thread specific processing
+	private boolean fieldWatchEvent(ModificationWatchpointEvent event) {
+		getThreadEventHandler(event.thread()).fieldWatchEvent(event);
+		return false; // resume thread
+	}
+
+	private boolean threadDeathEvent(ThreadDeathEvent event) {
+		ThreadEventHandler trace = (ThreadEventHandler) traceMap.get(event.thread());
+		if (trace != null) { // only want threads we care about
+			trace.threadDeathEvent(event); // Forward event
+		}
+		return false; // resume thread
+	}
+
+	/**
+	 * A new class has been loaded. Set watchpoints on each of its fields
+	 */
+	private boolean classPrepareEvent(ClassPrepareEvent event) {
+		EventRequestManager mgr = vm.eventRequestManager();
+		List<Field> fields = event.referenceType().visibleFields();
+		for (Iterator<Field> it = fields.iterator(); it.hasNext();) {
+			Field field = (Field) it.next();
+			ModificationWatchpointRequest req = mgr
+					.createModificationWatchpointRequest(field);
+			for (int i = 0; i < excludes.length; ++i) {
+				req.addClassExclusionFilter(excludes[i]);
+			}
+			req.setSuspendPolicy(EventRequest.SUSPEND_NONE);
+			req.enable();
+		}
+		return false; // resume thread
+	}
+
+	private boolean exceptionEvent(ExceptionEvent event) {
+		ThreadEventHandler trace = (ThreadEventHandler) traceMap.get(event.thread());
+		if (trace != null) { // only want threads we care about
+			trace.exceptionEvent(event); // Forward event
+		}
+		return false; // resume thread
+	}
+
+	public boolean vmDeathEvent(VMDeathEvent event) {
+		vmDied = true;
+		sendVMMonitorEvent("VMDEATH");
+		return false; // resume thread
+	}
+
+	public boolean vmDisconnectEvent(VMDisconnectEvent event) {
+		connected = false;
+		if (!vmDied) {
+			// The application has been disconnected
+			sendVMMonitorEvent("VMDISCONNECT");
+		}
+		return false; // resume thread
+	}
+	
+	public boolean getVMDied()
+	{
+		return this.vmDied;
+	}
+	
+	public boolean getConnected()
+	{
+		return this.connected;
+	}
+	
+	private void sendVMMonitorEvent(String event)
+	{
+		if (vmMonitor != null)
+		{
+			vmMonitor.vmEvent(event);
+		}
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,261 @@
+package org.strategoxt.debug.core.control;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.PrintWriter;
+
+import org.strategoxt.debug.core.control.events.EventHandler;
+import org.strategoxt.debug.core.control.events.RuleEnterHandler;
+import org.strategoxt.debug.core.control.events.RuleExitHandler;
+import org.strategoxt.debug.core.control.events.StrategyEnterHandler;
+import org.strategoxt.debug.core.control.events.StrategyExitHandler;
+import org.strategoxt.debug.core.control.events.StrategyStepHandler;
+import org.strategoxt.debug.core.control.events.StrategyVarHandler;
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
+import org.strategoxt.debug.core.model.LocationInfo;
+import org.strategoxt.debug.core.model.StrategoStackFrame;
+import org.strategoxt.debug.core.model.StrategoState;
+
+import com.sun.jdi.Field;
+import com.sun.jdi.IncompatibleThreadStateException;
+import com.sun.jdi.ThreadReference;
+import com.sun.jdi.Value;
+import com.sun.jdi.event.ExceptionEvent;
+import com.sun.jdi.event.MethodEntryEvent;
+import com.sun.jdi.event.MethodExitEvent;
+import com.sun.jdi.event.ModificationWatchpointEvent;
+import com.sun.jdi.event.StepEvent;
+import com.sun.jdi.event.ThreadDeathEvent;
+import com.sun.jdi.request.EventRequest;
+import com.sun.jdi.request.EventRequestManager;
+import com.sun.jdi.request.StepRequest;
+
+public class ThreadEventHandler {
+	/**
+	 * This class keeps context on events in one thread.
+	 */
+
+	final ThreadReference thread;
+	final String baseIndent = "";
+	StringBuffer indent;
+	
+	private PrintWriter writer;
+
+	// share stratego state across threads
+	private StrategoState strategoState = null;
+	
+	public ThreadEventHandler(ThreadReference thread, StrategoState strategoState) {
+		this.thread = thread;
+		this.strategoState = strategoState;
+		indent = new StringBuffer(baseIndent);
+		initWriter();
+		
+		println("====== " + thread.name() + " ======");
+		
+	}
+	
+	private void initWriter()
+	{
+		String filename = "thread-"+thread.name()+".txt";
+		try {
+			writer = new PrintWriter(new File(filename));
+			writer.println("Start thread");
+			writer.flush();
+			System.out.println("Created: " + filename);
+		} catch (FileNotFoundException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}		
+	}
+
+	private void println(String str) {
+		writer.print(indent);
+		writer.println(str);
+		writer.flush();
+	}
+
+	/*
+	private void enterStrategoStackFrame(EventHandler h) {
+		StrategoStackFrame frame = new StrategoStackFrame(h.getFilename(), h.getName(), h.getLocationInfo(), h.getGiven());
+		this.strategoState.pushFrame(frame);
+	}
+	*/
+
+	private void exitStrategoStackFrame(EventHandler h) {
+		if (h != null)
+		{
+			StrategoStackFrame frame = new StrategoStackFrame(h.getFilename(), h.getName(), h.getLocationInfo(), h.getGiven());
+			this.strategoState.popFrame(frame);
+		}
+		else
+		{
+			this.strategoState.popFrame();
+		}
+	}
+
+
+	/**
+	 * Returns true if the thread should stay suspended.
+	 * Returns false if the thread may resume.
+	 * @param event
+	 * @return
+	 */
+	protected boolean methodEntryEvent(MethodEntryEvent event, EventSpecManager eventSpecManager) {
+		boolean suspendThread = false;
+		String eventType = (String) event.request().getProperty("event-type");
+		//System.out.println(eventType);
+		
+		String methodName = event.method().name();
+		String declaringType = event.method().declaringType().name();
+
+		
+		if ("<clinit>".equals(methodName) || "<init>".equals(methodName))
+		{
+			// ignore these...
+			return suspendThread;
+		}
+		
+		//System.out.println(methodName + "  --------------------  " + declaringType);
+		println(methodName + "  --  " + declaringType);
+
+		
+		EventHandler h = null;
+		if (EventHandler.R_ENTER.equals(eventType))
+		{
+			h = new RuleEnterHandler(event);
+		}
+		else if (EventHandler.R_EXIT.equals(eventType))
+		{
+			h = new RuleExitHandler(event);
+		}
+		else if (EventHandler.S_ENTER.equals(eventType))
+		{
+			h = new StrategyEnterHandler(event);
+		}
+		else if (EventHandler.S_EXIT.equals(eventType))
+		{
+			h = new StrategyExitHandler(event);
+		}
+		else if (EventHandler.S_STEP.equals(eventType))
+		{
+			h = new StrategyStepHandler(event);
+		}
+		else if (EventHandler.S_VAR.equals(eventType))
+		{
+			h = new StrategyVarHandler(event);
+		}
+		
+		if (h != null)
+		{
+			if (h.isEnter())
+			{
+				// current event is an enter event, push a new StackFrame on the stack
+				//this.enterStrategoStackFrame(h);				
+			}
+			try {
+				h.processDebugEvent(this.strategoState);
+				suspendThread = h.shouldSuspend(eventSpecManager);
+				
+				LocationInfo locationInfo = h.getLocationInfo();
+				//this.strategoState.setLocationInfo(locationInfo); // LocationInfo should be set on the current Frame
+				this.strategoState.currentFrame().setCurrentLocationInfo(locationInfo);
+			} catch(Exception e)
+			{
+				System.err.println("Event handle threw an Exception: " + e.getMessage());
+				e.printStackTrace();
+			}
+			
+			if (!h.isEnter())
+			{
+				// do not pop the current stack frame here
+				// an exit breakpoint could also set the vm in the suspended state and then we will still need to access the current stack.
+				// Pop the frame in the method exit event, because no one can need it after the method has exited
+				//this.exitStrategoStackFrame(h);	
+				
+
+				// the current term on the frame should now be
+				//h.getGiven();
+				//this.strategoState.currentFrame().setCurrentTerm(h.getGiven());
+			}
+		}
+		//System.out.println("Method entry - EXIT");
+		return suspendThread;
+	}
+
+	void methodExitEvent(MethodExitEvent event) {
+		String eventType = (String) event.request().getProperty("event-type");
+		//System.out.println(eventType);
+		
+		String methodName = event.method().name();
+		//String declaringType = event.method().declaringType().name();
+
+		
+		if ("<clinit>".equals(methodName) || "<init>".equals(methodName))
+		{
+			// ignore these...
+			return;
+		}
+		
+		EventHandler h = null;
+		if (EventHandler.R_ENTER.equals(eventType))
+		{
+			//h = new RuleEnterHandler(event);
+		}
+		else if (EventHandler.R_EXIT.equals(eventType))
+		{
+			//h = new RuleExitHandler(event);
+			this.exitStrategoStackFrame(h);
+		}
+		else if (EventHandler.S_ENTER.equals(eventType))
+		{
+			//h = new StrategyEnterHandler(event);
+		}
+		else if (EventHandler.S_EXIT.equals(eventType))
+		{
+			//h = new StrategyExitHandler(event);
+			this.exitStrategoStackFrame(h);
+		}
+	}
+
+	void fieldWatchEvent(ModificationWatchpointEvent event) {
+		Field field = event.field();
+		Value value = event.valueToBe();
+		println("    " + field.name() + " = " + value);
+	}
+
+	void exceptionEvent(ExceptionEvent event) {
+		println("Exception: " + event.exception() + " catch: "
+				+ event.catchLocation());
+
+		// Step to the catch
+		EventRequestManager mgr = event.virtualMachine().eventRequestManager();
+		StepRequest req = mgr.createStepRequest(thread, StepRequest.STEP_MIN,
+				StepRequest.STEP_INTO);
+		req.addCountFilter(1); // next step only
+		req.setSuspendPolicy(EventRequest.SUSPEND_ALL);
+		req.enable();
+	}
+
+	// Step to exception catch
+	void stepEvent(StepEvent event) {
+		// Adjust call depth
+		int cnt = 0;
+		indent = new StringBuffer(baseIndent);
+		try {
+			cnt = thread.frameCount();
+		} catch (IncompatibleThreadStateException exc) {
+		}
+		while (cnt-- > 0) {
+			indent.append("| ");
+		}
+
+		EventRequestManager mgr = event.virtualMachine().eventRequestManager();
+		mgr.deleteEventRequest(event.request());
+	}
+
+	void threadDeathEvent(ThreadDeathEvent event) {
+		indent = new StringBuffer(baseIndent);
+		println("====== " + thread.name() + " end ======");
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/VMMonitor.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/VMMonitor.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,10 @@
+package org.strategoxt.debug.core.control;
+
+import org.strategoxt.debug.core.model.StrategoState;
+
+public interface VMMonitor {
+
+	public void stateChanged(StrategoState state);
+	
+	public void vmEvent(String event);
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,417 @@
+package org.strategoxt.debug.core.control.events;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.EventSpecManager;
+import org.strategoxt.debug.core.model.LocationInfo;
+import org.strategoxt.debug.core.model.StrategoState;
+import org.strategoxt.debug.core.util.StrategoTermBuilder;
+import org.strategoxt.lang.terms.StrategoString;
+
+import com.sun.jdi.AbsentInformationException;
+import com.sun.jdi.IncompatibleThreadStateException;
+import com.sun.jdi.LocalVariable;
+import com.sun.jdi.StackFrame;
+import com.sun.jdi.ThreadReference;
+import com.sun.jdi.Value;
+import com.sun.jdi.event.MethodEntryEvent;
+
+public abstract class EventHandler {
+	
+	// The following object attrbibutes should match the parameters in the invoke-method of the classes java_[r/s]_[enter/exit]_0_{x}
+	// where {x} is the number of term arguments in the strategy
+	protected LocalVariable contextLV = null; // org.strategoxt.lang.Context
+	
+	/**
+	 * Current term should be the same as the given term
+	 */
+	protected LocalVariable currentLV = null; // org.spoofax.interpreter.terms.IStrategoTerm
+	
+	/**
+	 * The filename from which the call originated
+	 */
+	protected LocalVariable filenameLV = null; // org.spoofax.interpreter.terms.IStrategoTerm
+	
+	/**
+	 * The name of the rule or strategy
+	 */
+	protected LocalVariable nameLV = null; // org.spoofax.interpreter.terms.IStrategoTerm
+	
+	/**
+	 * LocationInfo about the calling rule or strategy
+	 */
+	protected LocalVariable locationLV = null; // org.spoofax.interpreter.terms.IStrategoTerm
+	
+	/**
+	 * Given term, the term that was the original term when the rule or strategy was entered.
+	 */
+	protected LocalVariable givenLV = null; // org.spoofax.interpreter.terms.IStrategoTerm
+	
+	/**
+	 * Only applies to s-var events, contains the name of the local variable that is assigned.
+	 */
+	protected LocalVariable varnameLV = null; // org.spoofax.interpreter.terms.IStrategoTerm
+	
+	public static String S_ENTER = "s_enter";
+	public static String S_EXIT = "s_exit";
+	public static String R_ENTER = "r_enter";
+	public static String R_EXIT = "r_exit";
+	public static String S_STEP = "s_step";
+	public static String S_VAR = "s_var";
+	
+	protected MethodEntryEvent event = null;
+	
+	protected StrategoTermBuilder builder = new StrategoTermBuilder();
+	
+	public EventHandler(MethodEntryEvent event)
+	{
+		this.event = event;
+		this.initLocalVariables();
+	}
+	
+	private void initLocalVariables()
+	{
+		contextLV = null;
+		currentLV = null;
+		filenameLV = null;
+		nameLV = null; 
+		locationLV = null;
+		givenLV = null;
+		varnameLV = null;
+		// set arguments for easy reference	
+		List<LocalVariable> args = new ArrayList<LocalVariable>();
+		try {
+			args = this.event.method().arguments();
+		} catch (AbsentInformationException e) {
+			e.printStackTrace();
+		}
+		for(LocalVariable lv : args)
+		{
+			String lvName = lv.name();
+			//System.out.println("LV: " + lv.name() + " " + lv.typeName());
+			if ("context".equals(lvName))
+			{
+				contextLV = lv;
+			}
+			else if ("current".equals(lvName))
+			{
+				currentLV = lv;					
+			}
+			else if ("filename".equals(lvName))
+			{
+				filenameLV = lv;
+			}
+			else if ("name".equals(lvName))
+			{
+				nameLV = lv;
+			}
+			else if ("location".equals(lvName))
+			{
+				locationLV = lv;
+			}
+			else if ("given".equals(lvName))
+			{
+				givenLV = lv;
+			}
+			else if ("varname".equals(lvName))
+			{
+				varnameLV = lv;
+			}
+		}	
+	}
+	
+	/**
+	 * Returns the value of the LocalVariable given which is a method parameter.
+	 * 
+	 * @return
+	 */
+	protected Value getGivenValue()
+	{
+		ThreadReference thread = event.thread();
+
+		StackFrame fr = null;
+		try {
+			fr = thread.frame(0); // get current frame
+		} catch (IncompatibleThreadStateException e) {
+			e.printStackTrace(); // thread should be suspended
+		}
+		Value val = fr.getValue(this.givenLV);	
+		
+		return val;		
+	}
+	
+	/**
+	 * Returns the value of the LocalVariable context which is a method parameter.
+	 * 
+	 * @return
+	 */
+	protected Value getContextValue()
+	{
+		ThreadReference thread = event.thread();
+
+		StackFrame fr = null;
+		try {
+			fr = thread.frame(0); // get current frame
+		} catch (IncompatibleThreadStateException e) {
+			e.printStackTrace(); // thread should be suspended
+		}
+		Value val = fr.getValue(this.contextLV);	
+		
+		return val;
+	}
+	
+	/**
+	 * Returns the value of the LocalVariable location which is a method parameter.
+	 * 
+	 * @return
+	 */
+	protected Value getLocationValue()
+	{
+		ThreadReference thread = event.thread();
+	
+		StackFrame fr = null;
+		try {
+			fr = thread.frame(0); // get current frame
+		} catch (IncompatibleThreadStateException e) {
+			e.printStackTrace(); // thread should be suspended
+		}
+		Value val = fr.getValue(this.locationLV);	
+		
+		return val;
+	}
+
+	/**
+	 * Returns the value of the LocalVariable name which is a method parameter.
+	 * 
+	 * @return
+	 */
+	protected Value getNameValue()
+	{
+		ThreadReference thread = event.thread();
+	
+		StackFrame fr = null;
+		try {
+			fr = thread.frame(0); // get current frame
+		} catch (IncompatibleThreadStateException e) {
+			e.printStackTrace(); // thread should be suspended
+		}
+		Value nameValue = fr.getValue(this.nameLV); // StrategoString instance
+		
+		return nameValue;
+	}
+	
+	/**
+	 * Returns the value of the LocalVariable filename which is a method parameter.
+	 * 
+	 * @return
+	 */
+	protected Value getFilenameValue()
+	{
+		ThreadReference thread = event.thread();
+		
+		StackFrame fr = null;
+		try {
+			fr = thread.frame(0); // get current frame
+		} catch (IncompatibleThreadStateException e) {
+			e.printStackTrace(); // thread should be suspended
+		}
+		Value filenameValue = fr.getValue(this.filenameLV); // StrategoString instance
+		
+		return filenameValue;
+	}
+	
+	/**
+	 * Returns the value of the LocalVariable varname which is a method parameters.
+	 * This variable is only used in s-var. This method may return null when the method parameter is not defined.
+	 * @return
+	 */
+	protected Value getVarnameValue()
+	{
+		if (this.varnameLV == null)
+		{
+			return null;
+		}
+		
+		ThreadReference thread = event.thread();
+		
+		StackFrame fr = null;
+		try {
+			fr = thread.frame(0); // get current frame
+		} catch (IncompatibleThreadStateException e) {
+			e.printStackTrace(); // thread should be suspended
+		}
+		
+		Value varnameValue = fr.getValue(this.varnameLV); // StrategoString instance
+
+		return varnameValue;
+	}
+	
+	/**
+	 * Returns the value of the method parameter 'given' as an IStrategoTerm.
+	 * 
+	 * @return
+	 */
+	public IStrategoTerm getGiven()
+	{
+        Value givenValue = this.getGivenValue();
+        //Dump.dump(givenValue);
+        IStrategoTerm given = builder.buildIStrategoTerm(givenValue);
+        return given;
+	}
+
+	protected void getContext()
+	{
+		//System.out.println("CONTEXT");
+        //ObjectReference obj = (ObjectReference) this.getContextValue();
+        //ReferenceType refType = obj.referenceType();
+        //Dump.dump(obj, refType, refType);
+	}
+	
+	/**
+	 * Creates a LocationInfo containing the location information
+	 * 
+	 * @return
+	 */
+	public LocationInfo getLocationInfo()
+	{
+		String[] locationInfo = new String[4];
+		Value locationValue = getLocationValue();
+		IStrategoAppl appl = builder.buildStrategoAppl(locationValue);
+		IStrategoTerm[] terms = appl.getAllSubterms();
+		int i = 0;
+		for(IStrategoTerm term : terms)
+		{
+			if (term instanceof StrategoString)
+			{
+				StrategoString ss = (StrategoString) term;
+				String number = ss.stringValue();
+				if (number.startsWith("\"") && number.endsWith("\""))
+				{
+					number = number.substring(1, number.length()-1);
+				}
+				locationInfo[i] = number;
+				i++;   
+			}
+		}
+
+		LocationInfo loc = new LocationInfo(locationInfo);
+		return loc;
+	}
+
+	/**
+	 * Returns thevalue of the method parameter 'filename' as a String.
+	 * @return
+	 */
+	public String getFilename()
+	{
+		Value filenameValue = getFilenameValue(); // should be StrategoString
+		String s = builder.buildStrategoString(filenameValue).stringValue();
+		
+		String filename = "";
+		// name is surrounded by double quotes, remove them.
+		if (s.startsWith("\"") && s.endsWith("\""))
+		{
+			filename = s.substring(1, s.length()-1);
+		}
+		else
+		{
+			filename = s;
+		}
+		return filename;
+	}
+	
+	/**
+	 * Returns the value of the method parameter 'name' as a String.
+	 * 
+	 * @return
+	 */
+	public String getName()
+	{
+		Value nameValue = getNameValue(); // should be StrategoString
+		String s = builder.buildStrategoString(nameValue).stringValue();
+		
+		String name = "";
+		// name is surrounded by double quotes, remove them.
+		if (s.startsWith("\"") && s.endsWith("\""))
+		{
+			name = s.substring(1, s.length()-1);
+		}
+		else
+		{
+			name = s;
+		}
+		return name;
+	}
+	
+	/**
+	 * Returns the value of the method parameter 'varname' as a String.
+	 * If the method does not have a parameter 'varname' null is returned.
+	 * @return
+	 */
+	public String getVarname()
+	{
+		Value varnameValue = getVarnameValue(); // should be StrategoString
+		if (varnameValue == null)
+		{
+			return null;
+		}
+		String s = builder.buildStrategoString(varnameValue).stringValue();
+		
+		String varname = "";
+		// varname is surrounded by double quotes, remove them.
+		if (s.startsWith("\"") && s.endsWith("\""))
+		{
+			varname = s.substring(1, s.length()-1);
+		}
+		else
+		{
+			varname = s;
+		}
+		return varname;
+	}
+	
+
+	/**
+	 * Returns true if the thread should stay suspended.
+	 * Returns false if the thread should resume
+	 * @return
+	 */
+	public boolean shouldSuspend(EventSpecManager eventSpecManager){
+		// sysout debug info
+		/*
+		String name = this.getName(); // the name of the rule
+		LocationInfo locationInfo = getLocationInfo();
+		//IStrategoTerm given = getGiven();
+        //ITermPrinter pp = new PrettyPrinter();
+        //ITermPrinter pp = new InlinePrinter();
+        //given.prettyPrint(pp);
+        System.out.println(this.getEventType() + " Name: " + name);
+        System.out.println(locationInfo);
+		//System.out.println("Current term:");
+        //System.out.println(pp.getString());
+        //System.out.println();
+        */
+        // end debug info
+        
+        boolean isBreakPoint = eventSpecManager.match(createBreakPoint());
+        return isBreakPoint; // if break point exists suspend thread
+	}
+	
+	/**
+	 * Override this method when some stuff needs to be done if this DebugEvent occurs.
+	 * @param strategoState 
+	 */
+	public void processDebugEvent(StrategoState strategoState) 
+	{
+	}
+	
+	protected abstract BreakPoint createBreakPoint();
+
+	protected abstract String getEventType();
+
+	public abstract boolean isEnter();
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,44 @@
+package org.strategoxt.debug.core.control.events;
+
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.RuleEnterBreakPoint;
+import org.strategoxt.debug.core.model.LocationInfo;
+import org.strategoxt.debug.core.model.StrategoStackFrame;
+import org.strategoxt.debug.core.model.StrategoState;
+
+import com.sun.jdi.event.MethodEntryEvent;
+
+public class RuleEnterHandler extends EventHandler {
+
+	public RuleEnterHandler(MethodEntryEvent event) {
+		super(event);
+		// TODO Auto-generated constructor stub
+	}
+	
+	@Override
+	protected BreakPoint createBreakPoint() {
+		String name = this.getName(); // the name of the rule
+		LocationInfo locationInfo = getLocationInfo();
+		RuleEnterBreakPoint b = new RuleEnterBreakPoint(name, locationInfo.getStart_line_num());
+		return b;
+	}
+
+	@Override
+	protected String getEventType() {
+		return "Rule Enter";
+	}
+
+	@Override
+	public boolean isEnter() {
+		return true;
+	}
+	
+	@Override
+	public void processDebugEvent(StrategoState strategoState) {
+		super.processDebugEvent(strategoState);
+		// current event is an enter event, push a new StackFrame on the stack
+		StrategoStackFrame frame = new StrategoStackFrame(this.getFilename(), this.getName(), this.getLocationInfo(), this.getGiven());
+		strategoState.pushFrame(frame);
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,51 @@
+package org.strategoxt.debug.core.control.events;
+
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.RuleExitBreakPoint;
+import org.strategoxt.debug.core.model.LocationInfo;
+import org.strategoxt.debug.core.model.StrategoState;
+
+import com.sun.jdi.event.MethodEntryEvent;
+
+public class RuleExitHandler extends EventHandler {
+
+	public RuleExitHandler(MethodEntryEvent event) {
+		super(event);
+	}
+
+	@Override
+	protected BreakPoint createBreakPoint() {
+		String name = this.getName(); // the name of the rule
+		LocationInfo locationInfo = getLocationInfo();
+		RuleExitBreakPoint b = new RuleExitBreakPoint(name, locationInfo.getStart_line_num());
+		return b;
+	}
+
+	@Override
+	protected String getEventType() {
+		return "Rule Exit";
+	}
+
+	@Override
+	public boolean isEnter() {
+		return false;
+	}
+	
+	
+	@Override
+	public void processDebugEvent(StrategoState strategoState) {
+		super.processDebugEvent(strategoState);
+		// do not pop the current stack frame here
+		// an exit breakpoint could also set the vm in the suspended state and then we will still need to access the current stack.
+		// Pop the frame in the method exit event, because no one can need it after the method has exited
+		//this.exitStrategoStackFrame(h);	
+		
+
+		// the current term on the frame should now be
+		//h.getGiven();
+		strategoState.currentFrame().setCurrentTerm(this.getGiven());
+	}
+	
+
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,44 @@
+package org.strategoxt.debug.core.control.events;
+
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.StrategyEnterBreakPoint;
+import org.strategoxt.debug.core.model.LocationInfo;
+import org.strategoxt.debug.core.model.StrategoStackFrame;
+import org.strategoxt.debug.core.model.StrategoState;
+
+import com.sun.jdi.event.MethodEntryEvent;
+
+public class StrategyEnterHandler extends EventHandler {
+
+	public StrategyEnterHandler(MethodEntryEvent event)
+	{
+		super(event);
+	}
+	
+	@Override
+	protected BreakPoint createBreakPoint() {
+		String name = this.getName(); // the name of the strategy
+		LocationInfo locationInfo = getLocationInfo();
+		StrategyEnterBreakPoint b = new StrategyEnterBreakPoint(name, locationInfo.getStart_line_num());
+		return b;
+	}
+
+	@Override
+	protected String getEventType() {
+		// TODO Auto-generated method stub
+		return "Strategy Enter";
+	}
+
+	@Override
+	public boolean isEnter() {
+		return true;
+	}
+
+	@Override
+	public void processDebugEvent(StrategoState strategoState) {
+		super.processDebugEvent(strategoState);
+		// current event is an enter event, push a new StackFrame on the stack
+		StrategoStackFrame frame = new StrategoStackFrame(this.getFilename(), this.getName(), this.getLocationInfo(), this.getGiven());
+		strategoState.pushFrame(frame);
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,47 @@
+package org.strategoxt.debug.core.control.events;
+
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.StrategyExitBreakPoint;
+import org.strategoxt.debug.core.model.LocationInfo;
+import org.strategoxt.debug.core.model.StrategoState;
+
+import com.sun.jdi.event.MethodEntryEvent;
+
+public class StrategyExitHandler extends EventHandler {
+
+	public StrategyExitHandler(MethodEntryEvent event) {
+		super(event);
+	}
+
+	@Override
+	protected BreakPoint createBreakPoint() {
+		String name = this.getName(); // the name of the strategy
+		LocationInfo locationInfo = getLocationInfo();
+		StrategyExitBreakPoint b = new StrategyExitBreakPoint(name, locationInfo.getStart_line_num());
+		return b;
+	}
+
+	@Override
+	protected String getEventType() {
+		return "Strategy Exit";
+	}
+
+	@Override
+	public boolean isEnter() {
+		return false;
+	}
+	
+	@Override
+	public void processDebugEvent(StrategoState strategoState) {
+		super.processDebugEvent(strategoState);
+		// do not pop the current stack frame here
+		// an exit breakpoint could also set the vm in the suspended state and then we will still need to access the current stack.
+		// Pop the frame in the method exit event, because no one can need it after the method has exited
+		//this.exitStrategoStackFrame(h);	
+		
+
+		// the current term on the frame should now be
+		//h.getGiven();
+		strategoState.currentFrame().setCurrentTerm(this.getGiven());
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,59 @@
+package org.strategoxt.debug.core.control.events;
+
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;
+import org.strategoxt.debug.core.model.LocationInfo;
+import org.strategoxt.debug.core.model.StrategoState;
+
+import com.sun.jdi.event.MethodEntryEvent;
+
+public class StrategyStepHandler extends EventHandler {
+
+	public StrategyStepHandler(MethodEntryEvent event) {
+		super(event);
+	}
+
+	@Override
+	protected BreakPoint createBreakPoint() {
+		String name = this.getName(); // the name of the strategy
+		LocationInfo locationInfo = getLocationInfo();
+		StrategyStepBreakPoint b = new StrategyStepBreakPoint(name, locationInfo.getStart_line_num());
+		return b;
+	}
+
+	@Override
+	protected String getEventType() {
+		return "Strategy Step";
+	}
+
+	@Override
+	public boolean isEnter() {
+		return false;
+	}
+	
+
+	
+	@Override
+	public void processDebugEvent(StrategoState strategoState) {
+		super.processDebugEvent(strategoState);
+		// the current term on the frame should now be
+		//h.getGiven();
+		
+		// perform smart set
+		if (strategoState.currentFrame().getCurrentTerm() == this.getGiven())
+		{
+			// the same, do not set
+			// same reference
+		}
+		else if (strategoState.currentFrame().getCurrentTerm().equals(this.getGiven()))
+		{
+			// the same, do not set
+			// same value
+		}
+		else
+		{
+			strategoState.currentFrame().setCurrentTerm(this.getGiven());
+		}
+	}
+	
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyVarHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyVarHandler.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,39 @@
+package org.strategoxt.debug.core.control.events;
+
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.model.StrategoState;
+
+import com.sun.jdi.event.MethodEntryEvent;
+
+public class StrategyVarHandler extends EventHandler {
+
+	public StrategyVarHandler(MethodEntryEvent event) {
+		super(event);
+	}
+	
+	
+	@Override
+	protected BreakPoint createBreakPoint() {
+		return null;
+	}
+	
+	@Override
+	protected String getEventType() {
+		return "Strategy Var";
+	}
+
+	@Override
+	public boolean isEnter() {
+		return false;
+	}
+	
+	@Override
+	public void processDebugEvent(StrategoState strategoState) {
+		super.processDebugEvent(strategoState);
+		
+		String varname = this.getVarname();
+		//System.out.println("localvar: " + varname);
+		// add the variable assignment to the currentStackFrame
+		strategoState.currentFrame().addVariable(varname, this.getGiven());
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/BreakPoint.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/BreakPoint.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,28 @@
+package org.strategoxt.debug.core.eventspec;
+
+public abstract class BreakPoint {
+
+	private String name;
+	private int lineNumber;
+	
+	public BreakPoint(String name, int lineNumber) {
+		this.name = name;
+		this.lineNumber = lineNumber;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public int getLineNumber() {
+		return lineNumber;
+	}
+
+	public void setLineNumber(int lineNumber) {
+		this.lineNumber = lineNumber;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,35 @@
+package org.strategoxt.debug.core.eventspec;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Contains current breakpoints
+ * 
+ * @author rlindeman
+ *
+ */
+public class EventSpecList {
+	
+	private List<BreakPoint> breakPoints = null;
+	
+	public EventSpecList()
+	{
+		this.breakPoints = new ArrayList<BreakPoint>();
+	}
+
+	public void add(BreakPoint b)
+	{
+		this.breakPoints.add(b);
+	}
+	
+	public boolean remove(BreakPoint b)
+	{
+		return this.breakPoints.remove(b);
+	}
+	
+	public boolean contains(BreakPoint b) {
+		return this.breakPoints.contains(b);
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,82 @@
+package org.strategoxt.debug.core.eventspec;
+
+import java.util.List;
+
+import org.strategoxt.debug.core.util.DebugSessionSettings;
+import org.strategoxt.debug.core.util.FileUtil;
+import org.strategoxt.debug.core.util.table.EventTable;
+
+public class EventSpecManager {
+
+	private EventTable eventTable = null;
+	
+	// true if the thread stopped in a rule/strategy and the stepNextEnter command was issued.
+	// stepNextEnter means that if the rule/strategy in the current frame calls another user-defined rule/strategy that will fire a s-enter or r-enter
+	private boolean stepNextEnter = false;
+	
+	private DebugSessionSettings debugSessionSettings = null;
+	
+	// a list of active breakpoints
+	private EventSpecList eventSpecList = null;
+
+	public EventSpecManager(DebugSessionSettings debugSessionSettings) {
+		eventSpecList = new EventSpecList();
+		this.debugSessionSettings = debugSessionSettings;
+		initializeTable();
+	}
+	
+	private void initializeTable()
+	{
+		String extension = "table";
+		List<String> matches = FileUtil.getFilesWithExtension(this.debugSessionSettings.getStrategoDirectory(), extension);
+		// TODO: use the first match as we only support one file
+		if (matches.size() > 0)
+		{
+			String location = this.debugSessionSettings.getStrategoDirectory() + "/" + matches.get(0);
+			//String location ="/tmp/localvar_str/stratego/localvar.table";
+			this.eventTable = EventTable.readEventTable(location);
+		}
+		
+	}
+
+	/**
+	 * Returns true if the given RuleBreakPoint should suspend the vm.
+	 * @param ruleBreakPoint
+	 * @return
+	 */
+	public boolean match(BreakPoint b) {
+		boolean match = false;
+		if (stepNextEnter)
+		{
+			match = true;
+			// reset the stepNextEnter
+			stepNextEnter = false;
+		}
+		else if (this.eventSpecList.contains(b))
+		{
+			// the given breakpoint matches one of the defined breakpoints
+			match = true;
+		}
+		return match;
+	}
+
+	public void add(BreakPoint bp) {
+		this.eventSpecList.add(bp);
+	}
+	
+	public boolean remove(BreakPoint bp)
+	{
+		return this.eventSpecList.remove(bp);
+	}
+
+	public void setStepNextEnter() {
+		this.stepNextEnter = true;
+		
+	}
+	
+	public EventTable getEventTable()
+	{
+		return this.eventTable;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleEnterBreakPoint.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleEnterBreakPoint.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,45 @@
+package org.strategoxt.debug.core.eventspec;
+
+public class RuleEnterBreakPoint extends BreakPoint {
+	
+	public RuleEnterBreakPoint(String name, int lineNumber) {
+		super(name, lineNumber);
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + getLineNumber();
+		result = prime * result
+				+ ((getName() == null) ? 0 : getName().hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof RuleEnterBreakPoint))
+			return false;
+		RuleEnterBreakPoint other = (RuleEnterBreakPoint) obj;
+		if (getName() == null || other.getName() == null) {
+			return false;
+		} else if (!getName().equals(other.getName())) {
+			return false;
+		}
+		if (getLineNumber() == -1 || other.getLineNumber() == -1)
+		{
+			return true; // -1 means match on any rule with the same name
+		}
+		if (getLineNumber() != other.getLineNumber())
+			return false;
+		return true;
+	}
+	
+	
+	
+	
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleExitBreakPoint.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleExitBreakPoint.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,40 @@
+package org.strategoxt.debug.core.eventspec;
+
+public class RuleExitBreakPoint extends BreakPoint {
+
+	public RuleExitBreakPoint(String name, int lineNumber) {
+		super(name, lineNumber);
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 37;
+		int result = 1;
+		result = prime * result + getLineNumber();
+		result = prime * result
+				+ ((getName() == null) ? 0 : getName().hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof RuleExitBreakPoint))
+			return false;
+		RuleExitBreakPoint other = (RuleExitBreakPoint) obj;
+		if (getName() == null || other.getName() == null) {
+			return false;
+		} else if (!getName().equals(other.getName()))
+			return false;
+		if (getLineNumber() == -1 || other.getLineNumber() == -1)
+		{
+			return true; // -1 means match on any rule with the same name
+		}
+		if (getLineNumber() != other.getLineNumber())
+			return false;
+		return true;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyEnterBreakPoint.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyEnterBreakPoint.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,41 @@
+package org.strategoxt.debug.core.eventspec;
+
+public class StrategyEnterBreakPoint extends BreakPoint {
+	
+	public StrategyEnterBreakPoint(String name, int lineNumber) {
+		super(name, lineNumber);
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 41;
+		int result = 1;
+		result = prime * result + getLineNumber();
+		result = prime * result
+				+ ((getName() == null) ? 0 : getName().hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof StrategyEnterBreakPoint))
+			return false;
+		StrategyEnterBreakPoint other = (StrategyEnterBreakPoint) obj;
+		if (getName() == null || other.getName() == null) {
+			return false;
+		} else if (!getName().equals(other.getName())) {
+			return false;
+		}
+		if (getLineNumber() == -1 || other.getLineNumber() == -1)
+		{
+			return true; // -1 means match on any strategy with the same name
+		}
+		if (getLineNumber() != other.getLineNumber())
+			return false;
+		return true;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyExitBreakPoint.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyExitBreakPoint.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,41 @@
+package org.strategoxt.debug.core.eventspec;
+
+public class StrategyExitBreakPoint extends BreakPoint {
+
+	public StrategyExitBreakPoint(String name, int lineNumber) {
+		super(name, lineNumber);
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 43;
+		int result = 1;
+		result = prime * result + getLineNumber();
+		result = prime * result
+				+ ((getName() == null) ? 0 : getName().hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof StrategyEnterBreakPoint))
+			return false;
+		StrategyEnterBreakPoint other = (StrategyEnterBreakPoint) obj;
+		if (getName() == null || other.getName() == null) {
+			return false;
+		} else if (!getName().equals(other.getName())) {
+			return false;
+		}
+		if (getLineNumber() == -1 || other.getLineNumber() == -1)
+		{
+			return true; // -1 means match on any strategy with the same name
+		}
+		if (getLineNumber() != other.getLineNumber())
+			return false;
+		return true;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyStepBreakPoint.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyStepBreakPoint.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,43 @@
+package org.strategoxt.debug.core.eventspec;
+
+
+public class StrategyStepBreakPoint extends BreakPoint {
+
+	public StrategyStepBreakPoint(String name, int lineNumber) {
+		super(name, lineNumber);
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 47;
+		int result = 1;
+		result = prime * result + getLineNumber();
+		result = prime * result
+				+ ((getName() == null) ? 0 : getName().hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof StrategyStepBreakPoint))
+			return false;
+		StrategyStepBreakPoint other = (StrategyStepBreakPoint) obj;
+		if (getName() == null || other.getName() == null) {
+			return false; // one of the names is null
+		} else if (!getName().equals(other.getName())) {
+			return false; // names do not match
+		}
+		if (getLineNumber() == -1 || other.getLineNumber() == -1)
+		{
+			// TODO: do we allow this for Step Breakpoints?
+			return true; // -1 means match on any strategy with the same name
+		}
+		if (getLineNumber() != other.getLineNumber())
+			return false;
+		return true;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/LocationInfo.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/LocationInfo.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,150 @@
+package org.strategoxt.debug.core.model;
+
+/**
+ * 
+ * This class is used to specify a selection using the start linenumber, start token position and the end linenumber and end token position.
+ * 
+ * The linenumbers and positions are all 1-based.
+ * 
+ * The charachter at position (end_token_pos-1) is the last token in the selection.
+ * 
+ * @author rlindeman
+ *
+ */
+public class LocationInfo {
+
+	private int start_line_num = -1;
+	private int start_token_pos = -1;
+	private int end_line_num = -1;
+	private int end_token_pos = -1;
+	
+	public LocationInfo(int startLineNum, int startTokenPos, int endLineNum,
+			int endTokenPos) {
+		start_line_num = startLineNum;
+		start_token_pos = startTokenPos;
+		end_line_num = endLineNum;
+		end_token_pos = endTokenPos;
+	}
+	
+	public LocationInfo(String[] locationInfo)
+	{
+		// string array should have length 4
+		start_line_num = Integer.parseInt(locationInfo[0]);
+		start_token_pos = Integer.parseInt(locationInfo[1]);
+		end_line_num = Integer.parseInt(locationInfo[2]);
+		end_token_pos = Integer.parseInt(locationInfo[3]);
+	}
+	
+	public LocationInfo(String startLineNum, String startTokenPos, String endLineNum,
+			String endTokenPos)
+	{
+		this(new String[] {startLineNum, startTokenPos, endLineNum, endTokenPos});
+	}
+	
+	public LocationInfo()
+	{
+		
+	}
+
+	public int getStart_line_num() {
+		return start_line_num;
+	}
+
+	public void setStart_line_num(int startLineNum) {
+		start_line_num = startLineNum;
+	}
+
+	public int getStart_token_pos() {
+		return start_token_pos;
+	}
+
+	public void setStart_token_pos(int startTokenPos) {
+		start_token_pos = startTokenPos;
+	}
+
+	public int getEnd_line_num() {
+		return end_line_num;
+	}
+
+	public void setEnd_line_num(int endLineNum) {
+		end_line_num = endLineNum;
+	}
+
+	public int getEnd_token_pos() {
+		return end_token_pos;
+	}
+
+	public void setEnd_token_pos(int endTokenPos) {
+		end_token_pos = endTokenPos;
+	}
+
+	@Override
+	public String toString() {
+		return "LocationInfo ["
+				+ "start_line_num="	+ start_line_num
+				+ ", "
+				+ "start_token_pos=" + start_token_pos 
+				+ ", "
+				+ "end_line_num=" + end_line_num
+				+ ", " 
+				+ "end_token_pos=" + end_token_pos
+				+ "]";
+	}
+	
+	public boolean surrounds(int linenumber, int token_position)
+	{
+		// check if the start_line_num <= linenumber <= end_line_num
+		if (start_line_num <= linenumber && linenumber <= end_line_num)
+		{
+			// if start_line_num == linenumber
+			// token could still be outside the selection
+			// when token_position < start_token_pos
+			if (start_line_num == linenumber && token_position < start_token_pos)
+			{
+				return false;
+			}
+
+		
+			// if end_line_num == linenumber
+			// token could still be outside the selectoin
+			// when token_position >= end_token_pos
+			if (end_line_num == linenumber && token_position >= end_token_pos)
+			{
+				return false;
+			}
+			return true;
+		}
+		return false;
+	}
+	
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof LocationInfo))
+			return false;
+		LocationInfo other = (LocationInfo) obj;
+		boolean c1 = other.start_line_num == this.start_line_num;
+		boolean c2 = other.start_token_pos == this.start_token_pos;
+		boolean c3 = other.end_line_num == this.end_line_num;
+		boolean c4 = other.end_token_pos == this.end_token_pos;
+		if (c1 && c2 && c3 && c4)
+			return true;
+		return false;
+	}
+	
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + start_line_num;
+		result = prime * result + start_token_pos;
+		result = prime * result + end_line_num;
+		result = prime * result + end_token_pos;
+
+		return result;
+	}
+	
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoStackFrame.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoStackFrame.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,166 @@
+package org.strategoxt.debug.core.model;
+
+import java.util.HashMap;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class StrategoStackFrame {
+	
+	/**
+	 * The name of the current rule or strategy.
+	 */
+	private String name;
+	
+	/**
+	 * The filename in which the current rule or strategy is defined.
+	 */
+	private String filename;
+	
+	/**
+	 * Location info about the current rule or strategy.
+	 */
+	private LocationInfo locationInfo;
+	
+	/**
+	 * The current LocationInfo, currentLocationInfo should be surrounded by this.locationInfo
+	 */
+	private LocationInfo currentLocationInfo = null;
+	
+	/**
+	 * The current stratego term.
+	 */
+	private IStrategoTerm current;
+
+	private HashMap<String, IStrategoTerm> variables = null;
+	
+	/**
+	 * 
+	 * @param filename The filename in which the current rule or strategy is defined.
+	 * @param name The name of the current rule or strategy.
+	 * @param locationInfo Location info about the current rule or strategy.
+	 * @param current The current stratego term.
+	 */
+	public StrategoStackFrame(String filename, String name, LocationInfo locationInfo,
+			IStrategoTerm current) {
+		this.name = name;
+		this.filename = filename;
+		this.locationInfo = locationInfo;
+		this.current = current;
+		this.variables = new HashMap<String, IStrategoTerm>();
+	}
+	
+	public String toString()
+	{
+		String val = "Frame @ " + this.name + "[" + this.filename + "]";
+		val += ":" + locationInfo.getStart_line_num();
+		return val;
+	}
+	
+	/**
+	 * Returns the name of the current rule or strategy.
+	 * 
+	 * @return
+	 */
+	public String getName()
+	{
+		return this.name;
+	}
+	
+	/**
+	 * Returns the filename in which the current rule or strategy is defined.
+	 * @return
+	 */
+	public String getFilename()
+	{
+		return this.filename;
+	}
+	
+	/**
+	 * Returns LocationInfo about the current rule or strategy.
+	 * @return
+	 */
+	public LocationInfo getLocationInfo()
+	{
+		return this.locationInfo;
+	}
+	
+	/**
+	 * Returns the current stratego term.
+	 * 
+	 * @return
+	 */
+	public IStrategoTerm getCurrentTerm()
+	{
+		return this.current;
+	}
+	
+	public LocationInfo getCurrentLocationInfo()
+	{
+		return this.currentLocationInfo;
+	}
+	
+	public HashMap<String, IStrategoTerm> getVariables()
+	{
+		return this.variables;
+	}
+	
+	public void setCurrentTerm(IStrategoTerm term)
+	{
+		this.current = term;
+	}
+	
+	public void setCurrentLocationInfo(LocationInfo currentLocationInfo)
+	{
+		this.currentLocationInfo = currentLocationInfo;
+	}
+	
+	public void addVariable(String varname, IStrategoTerm value)
+	{
+		this.variables.put(varname, value);
+	}
+	
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (!(obj instanceof StrategoStackFrame))
+			return false;
+		StrategoStackFrame other = (StrategoStackFrame) obj;
+		if (this.name == null || other.name == null)
+			return false;
+		if (this.current == null || other.current == null)
+			return false;
+		if (this.currentLocationInfo == null || other.currentLocationInfo == null)
+			return false;
+		if (this.filename == null || other.filename == null)
+			return false;
+		if (this.locationInfo == null || other.locationInfo == null)
+			return false;
+		
+		boolean c1 = this.name.equals(other.name);
+		boolean c2 = this.current.equals(other.current);
+		boolean c3 = this.currentLocationInfo.equals(other.currentLocationInfo);
+		boolean c4 = this.filename.equals(other.filename);
+		boolean c5 = this.locationInfo.equals(other.locationInfo); // TODO: use this one?
+		
+		if (c1 && c2 && c3 && c4 && c5)
+			return true;
+		return false;
+	}
+	
+	@Override
+	public int hashCode() {
+		final int prime = 61;
+		
+		int result = 1;
+		result = prime * result + this.current.hashCode();
+		result = prime * result + this.currentLocationInfo.hashCode();
+		result = prime * result + this.filename.hashCode();
+		result = prime * result + this.locationInfo.hashCode(); // TODO: ise this one?
+		result = prime * result + this.name.hashCode();
+		
+		return result;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoState.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoState.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,70 @@
+package org.strategoxt.debug.core.model;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Stack;
+
+public class StrategoState {
+
+	//private LocationInfo locationInfo = null;
+	
+	private Stack<StrategoStackFrame> stack = new Stack<StrategoStackFrame>();
+	
+	/*
+	// LocationInfo should be saved per StrategoStackFrame
+	public LocationInfo getLocationInfo()
+	{
+		return this.locationInfo;
+	}
+
+	public void setLocationInfo(LocationInfo locationInfo) {
+		this.locationInfo = locationInfo;
+	}
+	*/
+	
+	// push given frame on top of stack
+	public StrategoStackFrame pushFrame(StrategoStackFrame frame)
+	{
+		return stack.push(frame);
+	}
+	
+	// given frame should be on top of the stack, pop it
+	public StrategoStackFrame popFrame(StrategoStackFrame frame)
+	{
+		//StrategoStackFrame top = stack.peek();
+		// top should be the same as frame
+		return stack.pop();
+	}
+	
+
+	public StrategoStackFrame popFrame() {
+		// pop without matching
+		return stack.pop();
+	}
+	
+	public StrategoStackFrame currentFrame()
+	{
+		return stack.peek();
+	}
+	
+	/**
+	 * Returns a list of strings, each item represents a stratego state
+	 * @return
+	 */
+	public List<String> getFrames()
+	{
+		List<String> l = new ArrayList<String>();
+		for(StrategoStackFrame frame : this.stack)
+		{
+			l.add(frame.toString());
+		}
+		return l;
+	}
+	
+	public StrategoStackFrame[] getStackFrames()
+	{
+		StrategoStackFrame[] a = new StrategoStackFrame[this.stack.size()];
+		return this.stack.toArray(a);
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,404 @@
+package org.strategoxt.debug.core.util;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.eclipse.jdt.core.compiler.CompilationProgress;
+import org.eclipse.jdt.internal.compiler.batch.Main;
+import org.spoofax.interpreter.terms.BasicStrategoString;
+import org.spoofax.interpreter.terms.BasicStrategoTuple;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.strategoxt.lang.Context;
+
+
+public class DebugCompiler {
+	
+
+	//public static final String WORKING_DIR = "/home/rlindeman/workspace/strj-dbg-app/working";
+	private String workingDir = null;
+	
+	// jars needed for compiling java to class
+	private static String strj_dbg_core = "/home/rlindeman/workspace/strj-dbg-core";
+
+	protected static String strategoxtjar = strj_dbg_core + "/lib/strategoxt.jar";
+	protected static String libstrategodebuglib = strj_dbg_core + "/lib/strj_dbg_runtime_lib.jar";
+	protected static String strjdebugruntime = strj_dbg_core + "/lib/strj_dbg_runtime_lib-java.jar";
+	
+	private static String strategodebuglib_rtree_dir = strj_dbg_core + "/lib";
+	
+	public DebugCompiler(String workingDir)
+	{
+		this.workingDir = workingDir;
+	}
+	
+	/**
+	 * Clear the contents of the given project directory.
+	 * 
+	 * Folders 'stratego', 'java' and 'class' are completely cleaned.
+	 * @param projectName
+	 */
+	public void cleanDirectories(String projectName)
+	{
+		String projectDir = this.workingDir + "/" + projectName;
+		String projectStrategoDir = projectDir + "/stratego";
+		String projectJavaDir = projectDir + "/java";
+		String projectClassDir = projectDir + "/class";
+		
+		File dir = null;
+		
+		FileUtil.deleteFile(projectStrategoDir); // delete the 'stratego' dir
+		FileUtil.deleteFile(projectJavaDir); // delete the 'java' dir
+		FileUtil.deleteFile(projectClassDir); // delete the 'class' dir
+		
+		dir = new File(projectStrategoDir);
+		dir.mkdirs();
+		dir = new File(projectJavaDir);
+		dir.mkdirs();
+		dir = new File(projectClassDir);
+		dir.mkdirs();
+		
+	}
+	
+	/**
+	 * Compile a stratego program to java classes.
+	 * 
+	 * @param strategoFilePath strategoFilePath should point to the stratego file
+	 * @param projectName projectName is the name of the project, used to create temp folders
+	 * @return returns the basedir of the binary files
+	 * @throws IOException
+	 */
+	public String runCompile(String strategoFilePath, String projectName) throws IOException
+	{
+		// throw exception if completeInputPath does not exist
+		File f = new File(strategoFilePath);
+		if (!f.exists())
+		{
+			throw new FileNotFoundException("Input file '" + strategoFilePath + "' does not exists!");
+		}
+		
+		cleanDirectories(projectName); // create directory structure in the working dir
+		// projectName should be the stratego filename without the dir and the extension		
+		
+		String projectDir = this.workingDir + "/" + projectName;
+		String projectJavaDir = projectDir + "/java"; // save generated java classes in a temp working dir
+		String projectClassDir = projectDir + "/class"; // save generated class files in a temp working dir
+		
+		String libraryName = projectName; // will be the packageName
+		String className = projectName;
+		String packageFolder = projectName;
+		String compiledStrategoFilename = projectJavaDir + "/" + packageFolder + "/" + className + ".java"; // packageName + className
+		String inputStrategoFilename = strategoFilePath;
+		compileStratego(inputStrategoFilename, libraryName, compiledStrategoFilename); // stratego to java
+		
+		String sourceBasedir = projectJavaDir;
+		String mainSourceFilename = packageFolder + "/" + className + ".java";
+		String binBase = compileJava(sourceBasedir, mainSourceFilename, projectClassDir); // java to class
+		
+		return binBase;	
+	}
+	
+
+
+	/**
+	 * Compile a stratego program with debug information to java classes.
+	 * 
+	 * @param strategoFilePath strategoFilePath should point to the stratego file
+	 * @param projectName projectName is the name of the project, used to create temp folders
+	 * @return returns the basedir of the binary files
+	 * @throws Exception 
+	 */
+	public String debugCompile(String strategoSourceBasedir, String strategoFilePath, String projectName) throws Exception
+	{
+		// throw exception if completeInputPath does not exist
+		File absFilePath = new File(strategoSourceBasedir, strategoFilePath);
+		//File f = new File(strategoFilePath);
+		if (!absFilePath.exists())
+		{
+			throw new FileNotFoundException("Input file '" + absFilePath.getAbsolutePath() + "' does not exists!");
+		}
+		
+		cleanDirectories(projectName); // create directory structure in the working dir
+		// projectName should be the stratego filename without the dir and the extension
+		
+		File strategoFilePathFile = new File(strategoFilePath);
+		String strFilename = strategoFilePathFile.getName(); // just the filename, no directory
+
+
+		
+		String projectDir = this.workingDir + "/" + projectName;
+		String projectStrategoDir = projectDir + "/stratego";
+		String projectJavaDir = projectDir + "/java";
+		String projectClassDir = projectDir + "/class";
+
+		String strOutputFilename = projectStrategoDir + "/" + strFilename;
+		// outputFilename should stay the same
+		strOutputFilename = generateStratego(strategoSourceBasedir, strategoFilePath, strOutputFilename); // str to str (with debug info) 
+		// TODO check if file is actually created!
+		if (strOutputFilename == null)
+		{
+			throw new Exception("Failed to compile stratego program with debug information");
+		}
+		
+		// create lookup table
+		generateLookupTable(strOutputFilename);
+		
+		String libraryName = projectName; // will be the packageName
+		String className = projectName;
+		String packageFolder = projectName;
+		String compiledStrategoFilename = projectJavaDir + "/" + packageFolder + "/" + className + ".java"; // packageName + className
+		String inputStrategoFilename = strOutputFilename; // the output of str to str is used as input
+		compileStratego(inputStrategoFilename, libraryName, compiledStrategoFilename); // stratego to java
+		
+		String sourceBasedir = projectJavaDir;
+		String mainSourceFilename = packageFolder + "/" + className + ".java";
+		String binBase = compileJava(sourceBasedir, mainSourceFilename, projectClassDir); // java to class
+		
+		return binBase;
+	}
+	
+	/**
+	 * Add stratego debug information to the given strategofile at inputFilename, the output will be saved at outputFilename.
+	 * The inputFilePath should be relative to the sourceBasedir. 
+	 * 
+	 * The inputFilePath will be saved in the debug information instead
+	 * of the complete absolute path so it points to a relative file containing the original stratego source.
+	 * The debugger needs to figure out what the actual absolute path is.
+	 * 
+	 * Method returns null when the generation failed.
+	 * 
+	 * @param sourceBasedir
+	 * @param inputFilePath
+	 * @param outputFilename
+	 * @return
+	 * @throws Exception 
+	 */
+	protected static String generateStratego(String sourceBasedir, String inputFilePath, String outputFilename) throws Exception
+	{
+		// assume f is a valid file
+		File f = new File(sourceBasedir, inputFilePath);
+		System.out.println("Adding debug information to " + f.getAbsolutePath());
+		System.out.println("Please wait...");
+		
+		System.out.println(sourceBasedir);
+		System.out.println(inputFilePath);
+		System.out.println(outputFilename);
+		
+		//the package org.strjdbg.transformer transform a stratego program to a stratego program with debug information
+		Context context = org.strjdbg.transformer.Main.init();
+		// see trans-str.str#apply-debug-trans
+		// (sourceBasedir, inputfilePath, outputfilename)
+		// inputfilePath is relative to sourceBasedir.
+		// sourceBasedir should be treated as a project directory
+		// the generated file will be saved at outputfilename
+		BasicStrategoString[] kids = new BasicStrategoString[]
+           {
+				new BasicStrategoString(sourceBasedir) , // sourceBasedir
+				new BasicStrategoString(inputFilePath) , // inputfilePath
+				new BasicStrategoString(outputFilename) // outputfilename
+           };
+		IStrategoTerm input = new BasicStrategoTuple(kids);
+		IStrategoTerm term; 
+		
+		term = org.strjdbg.transformer.apply_debug_trans_0_0.instance.invoke(context, input);
+		//System.out.println(term);
+		String status = null; // will be SUCCES or FAIL
+		String result = null; // should be the same as outputFilename
+		if (term == null)
+		{
+			System.out.println("Adding debug information failed!");
+			return null;
+		}
+		else if (term.getTermType() == IStrategoTerm.STRING)
+		{
+			IStrategoString sterm = (IStrategoString) term;
+			outputFilename = sterm.stringValue();
+		}
+		else if (term.getTermType() == IStrategoTerm.TUPLE)
+		{
+			IStrategoTuple tterm = (IStrategoTuple) term;
+			int subtermCount = tterm.getSubtermCount();
+			if (subtermCount != 2)
+			{
+				// wrong number of arguments
+			}
+			else
+			{
+				// first argument is SUCCES or FAIL
+				status = ((IStrategoString) tterm.get(0)).stringValue();
+				// second argument is the outputfilename
+				result = ((IStrategoString) tterm.get(1)).stringValue();
+			}
+		}
+		//TODO: outputFilename should be the same as result
+		
+		
+		if ("SUCCES".equals(status))
+		{
+			System.out.println("Adding debug information finished");	
+		}
+		else
+		{
+			System.out.println("Adding debug information failed!");
+			throw new Exception("Adding debug information failed!");
+		}
+		return result;
+	}
+	
+	protected static void generateLookupTable(String strategoDebugFileName)
+	{
+		//the package org.strjdbg.transformer transform a stratego program to a stratego program with debug information
+		Context context = org.strjdbg.transformer.Main.init();
+		
+		IStrategoTerm input = new BasicStrategoString(strategoDebugFileName);
+		
+		org.strjdbg.transformer.create_table_0_0.instance.invoke(context, input);
+	}
+	
+	/**
+	 * Compile the given stratego file to java.
+	 * 
+	 * @param inputStrategoFilename
+	 * @param libraryName
+	 * @param compiledStrategoFilename
+	 */
+	protected static void compileStratego(String inputStrategoFilename, String libraryName, String compiledStrategoFilename)
+	{
+		System.out.println("Generated file at " + inputStrategoFilename);
+		System.out.println("Compile str to java...");
+		// compile the stratego file at $outputFilename
+		String[] strj_args = new String[] {
+			"-i", 	inputStrategoFilename
+			, "-o", compiledStrategoFilename // output will be java, so folders should match the library name
+			, "-I", strategodebuglib_rtree_dir // location of rtree files
+			, "-p", libraryName // will be the package name
+			//, "--silent"
+			, "--clean" // remove previous java
+			, "-la", "org.strategoxt.libstrategodebuglib" // used as java import
+		};
+		try {
+			org.strategoxt.strj.Main.mainNoExit(strj_args);
+		}
+		catch(Exception e)
+		{
+			System.out.println("Exception: " + e.getMessage());
+			
+		}
+		
+		System.out.println("Strj compiler finished");		
+	}
+	
+	/**
+	 * Compiles the mainSourceFileName (path relative to sourceBasedir) and places the generated class files in the binBasedir.
+	 * @param sourceBasedir
+	 * @param mainSourceFileName
+	 * @param binBasedir
+	 * @return
+	 */
+	@SuppressWarnings("unchecked")
+	protected String compileJava(String sourceBasedir, String mainSourceFileName, String binBasedir)
+	{
+		System.out.println("Compiling " + mainSourceFileName);
+		System.out.println("Please wait...");
+		// import org.strategoxt.stratego_lib.*;
+		// import org.strategoxt.libstrategodebuglib.*;
+		// import org.strategoxt.lang.*;
+		String classPath = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + sourceBasedir;
+		
+		// http://www.javaworld.com/javatips/jw-javatip131.html
+		String filename = sourceBasedir + "/" + mainSourceFileName;
+		String[] args = new String[] {
+		        "-d", binBasedir,
+		         filename,
+		         "-cp", classPath,
+		         "-source", "1.5"
+		    };
+		
+		PrintWriter outWriter = new PrintWriter(System.out);
+		PrintWriter errWriter = new PrintWriter(System.err);
+		boolean systemExitWhenFinished = false;
+		Map customDefaultOptions = new HashMap();
+		CompilationProgress compilationProgress = new CompilationProgress() {
+			
+			@Override
+			public void worked(int workIncrement, int remainingWork) {
+				// TODO Auto-generated method stub
+				//System.out.println("WORKED: " + workIncrement + " - " + remainingWork);
+			}
+			
+			@Override
+			public void setTaskName(String name) {
+				// TODO Auto-generated method stub
+				//System.out.println("SETTASKNAME: " + name);
+			}
+			
+			@Override
+			public boolean isCanceled() {
+				// TODO Auto-generated method stub
+				return false;
+			}
+			
+			@Override
+			public void done() {
+				// TODO Auto-generated method stub
+				//System.out.println("DONE");
+			}
+			
+			@Override
+			public void begin(int remainingWork) {
+				// TODO Auto-generated method stub
+				//System.out.println("BEGIN: " + remainingWork);
+			}
+		};
+		org.eclipse.jdt.internal.compiler.batch.Main main = new Main(outWriter, errWriter, systemExitWhenFinished, customDefaultOptions, compilationProgress);
+		boolean result = main.compile(args);
+		System.out.println("Compile result: " + result);
+		//org.eclipse.jdt.internal.compiler.batch.Main.main(args);
+		
+		/*
+		org.eclipse.jdt.compiler.CompilationProgress progress = null; // instantiate your subclass
+		org.eclipse.jdt.internal.compiler.batch.BatchCompiler.compile(
+		"-classpath rt.jar A.java",
+		new PrintWriter(System.out),
+		new PrintWriter(System.err),
+		progress);
+		
+		org.eclipse.jdt.internal.compiler.batch.Main.
+		*/
+		/*
+		int status = com.sun.tools.javac.Main.compile(args);
+		if (status == 0)
+		{
+			System.out.println("Compile ok");
+		}
+		else
+		{
+			System.out.println("Compile error");
+		}*/
+		System.out.println("Java compiler finished");
+	    return binBasedir;
+	}
+	
+	/**
+	 * Takes the filename from the path and returns a suitable project name.
+	 * 
+	 * '.' and '-' are both replaced by '_' as they are not valid characters in a java identifier.
+	 * @param f
+	 * @return
+	 */
+	public static String createProjectName(File f)
+	{
+		String name = f.getName();
+		// replace '.' with '_'
+		name = name.replace('.', '_');
+		// replace '-' with '_'
+		name = name.replace('-', '_');
+		return name;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,106 @@
+package org.strategoxt.debug.core.util;
+
+import org.strategoxt.debug.core.control.events.EventHandler;
+
+import com.sun.jdi.VirtualMachine;
+import com.sun.jdi.request.ClassPrepareRequest;
+import com.sun.jdi.request.EventRequest;
+import com.sun.jdi.request.EventRequestManager;
+import com.sun.jdi.request.MethodEntryRequest;
+import com.sun.jdi.request.MethodExitRequest;
+import com.sun.jdi.request.ThreadDeathRequest;
+
+public class DebugEventRequestInstaller {
+
+	/**
+	 * package name of the runtime library, should match the package in 'strj_dbg_runtime_lib-java.jar'
+	 */
+	private static final String STRJ_DBG_RUNTIME_PACKAGE = "strjdbgruntimelib.strategies";
+	private static final String STRJ_DBG_RUNTIME_LIB_S_ENTER = STRJ_DBG_RUNTIME_PACKAGE+ ".java_s_enter_0_4";
+	private static final String STRJ_DBG_RUNTIME_LIB_S_EXIT = STRJ_DBG_RUNTIME_PACKAGE+ ".java_s_exit_0_4";
+	private static final String STRJ_DBG_RUNTIME_LIB_R_ENTER = STRJ_DBG_RUNTIME_PACKAGE+ ".java_r_enter_0_4";
+	private static final String STRJ_DBG_RUNTIME_LIB_R_EXIT = STRJ_DBG_RUNTIME_PACKAGE+ ".java_r_exit_0_4";
+	private static final String STRJ_DBG_RUNTIME_LIB_S_STEP = STRJ_DBG_RUNTIME_PACKAGE+ ".java_s_step_0_4";
+	private static final String STRJ_DBG_RUNTIME_LIB_S_VAR = STRJ_DBG_RUNTIME_PACKAGE+ ".java_s_var_0_5";
+	
+	private static final String EVENT_TYPE = "event-type";
+	
+	public static void installDebugEventRequests(VirtualMachine vm, boolean watchFields, String[] excludes)
+	{
+		EventRequestManager mgr = vm.eventRequestManager();
+		
+		// want all exceptions 
+		/*
+		ExceptionRequest excReq = mgr.createExceptionRequest(null, true, true); // suspend so we can step 
+		excReq.setSuspendPolicy(EventRequest.SUSPEND_ALL);
+		excReq.enable();*/
+
+
+		createMethodEntryRequest(mgr, STRJ_DBG_RUNTIME_LIB_S_ENTER, EventRequest.SUSPEND_EVENT_THREAD, EventHandler.S_ENTER);
+		
+		createMethodEntryRequest(mgr, STRJ_DBG_RUNTIME_LIB_S_EXIT, EventRequest.SUSPEND_EVENT_THREAD, EventHandler.S_EXIT);
+		
+		createMethodEntryRequest(mgr, STRJ_DBG_RUNTIME_LIB_R_ENTER, EventRequest.SUSPEND_EVENT_THREAD, EventHandler.R_ENTER);
+		
+		createMethodEntryRequest(mgr, STRJ_DBG_RUNTIME_LIB_R_EXIT, EventRequest.SUSPEND_EVENT_THREAD, EventHandler.R_EXIT);
+		
+		createMethodEntryRequest(mgr, STRJ_DBG_RUNTIME_LIB_S_STEP, EventRequest.SUSPEND_EVENT_THREAD, EventHandler.S_STEP);
+
+		createMethodEntryRequest(mgr, STRJ_DBG_RUNTIME_LIB_S_VAR, EventRequest.SUSPEND_EVENT_THREAD, EventHandler.S_VAR);
+
+		
+		createMethodExitRequest(mgr, STRJ_DBG_RUNTIME_LIB_S_ENTER, EventRequest.SUSPEND_EVENT_THREAD, EventHandler.S_ENTER);
+		
+		createMethodExitRequest(mgr, STRJ_DBG_RUNTIME_LIB_S_EXIT, EventRequest.SUSPEND_EVENT_THREAD, EventHandler.S_EXIT);
+
+		createMethodExitRequest(mgr, STRJ_DBG_RUNTIME_LIB_R_ENTER, EventRequest.SUSPEND_EVENT_THREAD, EventHandler.R_ENTER);
+
+		createMethodExitRequest(mgr, STRJ_DBG_RUNTIME_LIB_R_EXIT, EventRequest.SUSPEND_EVENT_THREAD, EventHandler.R_EXIT);
+
+		createMethodExitRequest(mgr, STRJ_DBG_RUNTIME_LIB_S_STEP, EventRequest.SUSPEND_EVENT_THREAD, EventHandler.S_STEP);
+		
+		createMethodExitRequest(mgr, STRJ_DBG_RUNTIME_LIB_S_VAR, EventRequest.SUSPEND_EVENT_THREAD, EventHandler.S_VAR);
+
+
+		
+		// thread dies
+		ThreadDeathRequest tdr = mgr.createThreadDeathRequest();
+		// Make sure we sync on thread death
+		tdr.setSuspendPolicy(EventRequest.SUSPEND_ALL);
+		tdr.enable();
+
+		if (watchFields) {
+			ClassPrepareRequest cpr = mgr.createClassPrepareRequest();
+			for (int i = 0; i < excludes.length; ++i) {
+				cpr.addClassExclusionFilter(excludes[i]);
+			}
+			cpr.setSuspendPolicy(EventRequest.SUSPEND_ALL);
+			cpr.enable();
+		}
+	}
+	
+	/**
+	 * Creates a new MethodEntry Request DebugEvnt for the given class.
+	 * The eventType should match one of the stratego debug events.
+	 * @param classFilter
+	 * @param suspendPolicy
+	 * @param eventType
+	 */
+	public static void createMethodEntryRequest(EventRequestManager mgr, String classFilter, int suspendPolicy, String eventType)
+	{
+		MethodEntryRequest menr = mgr.createMethodEntryRequest();
+		menr.addClassFilter(classFilter);
+		menr.setSuspendPolicy(suspendPolicy);
+		menr.putProperty(EVENT_TYPE, eventType);
+		menr.enable();
+	}
+	
+	public static void createMethodExitRequest(EventRequestManager mgr, String classFilter, int suspendPolicy, String eventType)
+	{
+		MethodExitRequest mexr = mgr.createMethodExitRequest();
+		mexr.addClassFilter(classFilter);
+		mexr.setSuspendPolicy(suspendPolicy);
+		mexr.putProperty(EVENT_TYPE, eventType);
+		mexr.enable();
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,53 @@
+package org.strategoxt.debug.core.util;
+
+public class DebugSessionSettings {
+
+	private String projectName;
+	
+	/**
+	 * directory without the project name.
+	 * Should not end with a slash
+	 */
+	private String workingDirectory;
+	
+	public DebugSessionSettings(String workingDirectory, String projectName){
+		this.workingDirectory = workingDirectory;
+		this.projectName = projectName;
+	}
+	
+	public static String CLASS_DIR_NAME = "class";
+	public static String STRATEGO_DIR_NAME = "stratego";
+	public static String JAVA_DIR_NAME = "java";
+	
+	// generated using working directory and the project name
+	private String classDirectory = null;
+	private String strategoDirectory = null;
+	private String javaDirectory = null;
+	
+	public String getClassDirectory()
+	{
+		if (classDirectory == null)
+		{
+			classDirectory = workingDirectory + "/" + projectName + "/" + CLASS_DIR_NAME;
+		}
+		return classDirectory;
+	}
+	
+	public String getStrategoDirectory()
+	{
+		if (strategoDirectory == null)
+		{
+			strategoDirectory = workingDirectory + "/" + projectName + "/" + STRATEGO_DIR_NAME;
+		}
+		return strategoDirectory;
+	}
+	
+	public String getJavaDirectory()
+	{
+		if (javaDirectory == null)
+		{
+			javaDirectory = workingDirectory + "/" + projectName + "/" + JAVA_DIR_NAME;
+		}
+		return javaDirectory;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Dump.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Dump.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,70 @@
+package org.strategoxt.debug.core.util;
+
+import java.util.Iterator;
+import java.util.List;
+
+import com.sun.jdi.ArrayReference;
+import com.sun.jdi.ClassType;
+import com.sun.jdi.Field;
+import com.sun.jdi.InterfaceType;
+import com.sun.jdi.ObjectReference;
+import com.sun.jdi.ReferenceType;
+import com.sun.jdi.Value;
+
+public class Dump {
+
+	public static void dump(Value value)
+	{
+        ObjectReference obj = (ObjectReference) value;
+        ReferenceType refType = obj.referenceType();
+        dump(obj, refType, refType);
+	}
+	
+	public static void dump(ObjectReference obj, ReferenceType refType, ReferenceType refTypeBase) 
+    {
+    	System.out.println(obj);
+    	System.out.println(refType);
+    	System.out.println(refTypeBase);
+    	System.out.println("Fields");
+    	for (Iterator<Field> it = refType.fields().iterator(); it.hasNext(); ) 
+    	{
+    		StringBuffer o = new StringBuffer();
+    		Field field = (Field)it.next();
+    		o.append("    ");
+    		if (!refType.equals(refTypeBase)) {
+    			o.append(refType.name());
+    			o.append(".");
+			}
+    		o.append(field.name());
+    		o.append(": ");
+    		o.append(obj.getValue(field));
+    		System.out.println(o.toString());
+		}
+    	System.out.println("refType");
+    	if (refType instanceof ClassType) {
+    		ClassType sup = ((ClassType)refType).superclass();
+    		if (sup != null) {
+    			dump(obj, sup, refTypeBase);
+    		}
+    	} else if (refType instanceof InterfaceType) {
+			List<InterfaceType> sups = ((InterfaceType)refType).superinterfaces();
+			for (Iterator<InterfaceType> it = sups.iterator(); it.hasNext(); ) {
+				dump(obj, (ReferenceType)it.next(), refTypeBase);
+			}
+    	} else {
+    		/* else refType is an instanceof ArrayType */
+    		if (obj instanceof ArrayReference) {
+    			for (Iterator<Value> it = ((ArrayReference)obj).getValues().iterator(); it.hasNext(); ) 
+    			{
+    				System.out.println(it.next().toString());
+    				
+					if (it.hasNext()) {
+						System.out.println(", ");
+
+					}
+    			}
+    			System.out.println();
+    		}
+    	}
+    }
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,56 @@
+package org.strategoxt.debug.core.util;
+
+import java.io.File;
+import java.io.FileFilter;
+import java.util.ArrayList;
+import java.util.List;
+
+public class FileUtil {
+
+	/**
+	 * Given a directory, delete the directory and all its contents in one go.
+	 * @param sFilePath
+	 * @return
+	 */
+	public static boolean deleteFile(String sFilePath)
+	{
+	  File oFile = new File(sFilePath);
+	  if(oFile.isDirectory())
+	  {
+	    File[] aFiles = oFile.listFiles();
+	    for(File oFileCur: aFiles)
+	    {
+	       deleteFile(oFileCur.getAbsolutePath());
+	    }
+	  }
+	  return oFile.delete();
+	}
+
+	public static List<String> getFilesWithExtension(String basePath, final String extension) {
+		
+		List<String> matches = new ArrayList<String>();
+
+		File oFile = new File(basePath);
+		if (oFile.isDirectory()) {
+			// get all files with the matching extension
+			FileFilter filter = new FileFilter() {
+				
+				public boolean accept(File pathname) {
+					String suffix = "." + extension;
+					if (pathname.isFile() && pathname.getName().endsWith(suffix)){
+						return true;
+					}
+					return false;
+				}
+			};
+			File[] fs = oFile.listFiles(filter);
+			for(File f : fs)
+			{
+				matches.add(f.getName());
+			}
+		}
+		return matches;
+	}
+	
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Runner.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Runner.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,40 @@
+package org.strategoxt.debug.core.util;
+
+import org.strategoxt.debug.core.control.DebugSessionManager;
+
+
+public class Runner {
+	// http://java.sys-con.com/node/36221
+	
+	public static void main(String[] args) {
+		
+		String mainArgs = "main.Test_propRunner";
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings("/tmp", "propRunner");
+		DebugSessionManager manager = new DebugSessionManager(debugSessionSettings, null);
+		manager.initVM(mainArgs);
+		System.out.println("init listeners");
+		manager.setupEventListeners();
+		System.out.println("Redirect");
+		manager.redirectOutput();
+		System.out.println("RUN");
+		manager.runVM();
+		System.out.println("Done");
+	}
+	
+	/**
+	 * classPath contains the binary files of the compiled strj program
+	 * @param mainArgs
+	 * @param classpath
+	 */
+	public static void run(String projectName, String mainArgs, String classpath)
+	{
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings("/tmp", projectName);
+		DebugSessionManager manager = new DebugSessionManager(debugSessionSettings, null);
+		manager.initVM(mainArgs, classpath);
+		manager.setupEventListeners();
+		manager.redirectOutput();
+		System.out.println("RUN");
+		//manager.runVM();		
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,293 @@
+package org.strategoxt.debug.core.util;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoReal;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.strategoxt.lang.terms.TermFactory;
+
+import com.sun.jdi.ArrayReference;
+import com.sun.jdi.Field;
+import com.sun.jdi.ObjectReference;
+import com.sun.jdi.ReferenceType;
+import com.sun.jdi.Type;
+import com.sun.jdi.Value;
+
+public class StrategoTermBuilder {
+	
+	private TermFactory f = new TermFactory();
+	
+	public StrategoTermBuilder()
+	{
+		
+	}
+	
+	public String buildString(Value value)
+	{
+		// value should be a string
+		String s = value.toString();
+		// strip surrounding quotes
+		s = s.substring(1, s.length()-1);
+		return s;
+	}
+	
+	public int buildInt(Value value)
+	{
+		// value should be an int
+		String s = value.toString();
+		int i = Integer.parseInt(s);
+		return i;
+	}
+	
+	public double buildDouble(Value value)
+	{
+		// value should be an double
+		String s = value.toString();
+		double d = Double.parseDouble(s);
+		return d;
+	}
+	
+	public IStrategoReal buildStrategoReal(Value value)
+	{
+        ObjectReference obj = (ObjectReference) value; // instance of org.strategoxt.lang.terms.StrategoString
+        ReferenceType refType = obj.referenceType(); // class org.strategoxt.lang.terms.StrategoString
+        
+        Field valueField = refType.fieldByName("value");
+        Value valueValue = obj.getValue(valueField); // double/real
+        
+        double double_value = -1.0;
+        
+        double_value = buildDouble(valueValue);
+        IStrategoReal strategoReal = f.makeReal(double_value);
+		return strategoReal;
+	}
+	
+	public IStrategoInt buildStrategoInt(Value value)
+	{
+        ObjectReference obj = (ObjectReference) value; // instance of org.strategoxt.lang.terms.StrategoInt
+        ReferenceType refType = obj.referenceType(); // class org.strategoxt.lang.terms.StrategoString
+        
+        Field valueField = refType.fieldByName("value");
+        Value valueValue = obj.getValue(valueField); // int
+        
+        int int_value = -1;
+        
+        int_value = buildInt(valueValue);
+        IStrategoInt strategoInt = f.makeInt(int_value);
+		return strategoInt;		
+	}
+
+	
+	public IStrategoString buildStrategoString(Value value)
+	{
+        ObjectReference obj = (ObjectReference) value; // instance of org.strategoxt.lang.terms.StrategoString
+        ReferenceType refType = obj.referenceType(); // class org.strategoxt.lang.terms.StrategoString
+        
+        Field valueField = refType.fieldByName("value");
+        Value valueValue = obj.getValue(valueField); // string
+        
+        //Field storageTypeField = refType.fieldByName("storageType");
+        //Value storageTypeValue = obj.getValue(storageTypeField); // int
+        
+		String string_value = "";
+		//IStrategoList annotations = null;
+		//int storageType = -1;
+		
+		string_value = buildString(valueValue);
+		//storageType = buildInt(storageTypeValue);
+		//StrategoString strategoString = new StrategoString(string_value, annotations, storageType);
+		IStrategoString strategoString = f.makeString(string_value);
+		return strategoString;
+	}
+	
+	
+	public IStrategoTuple buildStrategoTuple(Value value)
+	{
+        ObjectReference obj = (ObjectReference) value; // instance of org.strategoxt.lang.terms.StrategoTuple
+        ReferenceType refType = obj.referenceType(); // class org.strategoxt.lang.terms.StrategoTuple
+        
+        Field kidsField = refType.fieldByName("kids");
+        Value kidsValue = obj.getValue(kidsField); // org.spoofax.interpreter.terms.IStrategoTerm
+        
+		IStrategoTerm[] terms = null;
+		
+		terms = buildStrategoTermArray(kidsValue);
+		
+		IStrategoTuple strategoTuple = f.makeTuple(terms, null);
+		return strategoTuple;
+	}
+	
+	public IStrategoAppl buildStrategoAppl(Value value)
+	{
+        ObjectReference obj = (ObjectReference) value; // instance of org.strategoxt.lang.terms.StrategoAppl
+        ReferenceType refType = obj.referenceType(); // class org.strategoxt.lang.terms.StrategoAppl
+        
+        Field ctorField = refType.fieldByName("ctor");
+        Value ctorValue = obj.getValue(ctorField); // org.strategoxt.lang.terms.StrategoConstructor
+        
+        Field kidsField = refType.fieldByName("kids");
+        Value kidsValue = obj.getValue(kidsField); // org.spoofax.interpreter.terms.IStrategoTerm[]
+        
+        IStrategoConstructor ctr = null;
+        IStrategoList kids = null;
+        
+        ctr = buildStrategoConstructor(ctorValue);
+        kids = buildStrategoList(kidsValue);
+        
+		IStrategoAppl strategoAppl = f.makeAppl(ctr, kids);
+		return strategoAppl;
+	}
+	
+	public IStrategoList buildStrategoList(Value value) 
+	{
+		// instance of org.spoofax.interpreter.terms.IStrategoTerm[]
+		// ArrayReference
+		if (value instanceof ArrayReference)
+		{
+	    	ArrayReference arrayRef = (ArrayReference) value;
+	    	
+	    	Collection<IStrategoTerm> terms = null;
+	    	
+	    	terms = new ArrayList<IStrategoTerm>();
+	    	if (arrayRef.length() > 0)
+	    	{
+				for (Iterator<Value> it = arrayRef.getValues().iterator(); it.hasNext(); ) 
+				{
+					Value elementValue = it.next();
+					IStrategoTerm term = null;
+					term = buildIStrategoTerm(elementValue);
+					// build IStrategoTerm
+					terms.add(term);
+				}
+	    	}
+			IStrategoList strategoList = f.makeList(terms);
+			return strategoList;
+		} else if (value instanceof ObjectReference)
+		{
+	        ObjectReference obj = (ObjectReference) value; // instance of org.strategoxt.lang.terms.StrategoAppl
+	        ReferenceType refType = obj.referenceType(); // class org.strategoxt.lang.terms.StrategoAppl
+	        
+	        // head is an IStrategoTerm
+	        // tail is an IStrategoList
+	        Field headField = refType.fieldByName("head");
+	        Value headValue = obj.getValue(headField); // org.strategoxt.lang.terms.StrategoConstructor
+	        
+	        Field tailField = refType.fieldByName("tail");
+	        Value tailValue = obj.getValue(tailField); // org.spoofax.interpreter.terms.IStrategoTerm[]
+	        
+	        IStrategoTerm head = null;
+	        IStrategoList tail = null;
+
+	        if (headValue == null)
+	        {
+	        	return TermFactory.EMPTY_LIST;
+	        }
+	        else
+	        {
+		        head = buildIStrategoTerm(headValue);
+		        tail = buildStrategoList(tailValue);
+		        IStrategoList strategoList = f.makeListCons(head, tail, null);
+		        return strategoList;
+	        }
+		}
+		else
+		{
+			System.err.println("buildStrategoList Not found!");
+			return null;
+		}
+	}
+	
+	public IStrategoTerm[] buildStrategoTermArray(Value value)
+	{
+    	ArrayReference arrayRef = (ArrayReference) value;
+    	
+    	List<IStrategoTerm> terms = null;
+    	
+    	terms = new ArrayList<IStrategoTerm>();
+    	if (arrayRef.length() > 0)
+    	{
+    		for (Iterator<Value> it = arrayRef.getValues().iterator(); it.hasNext(); ) 
+    		{
+    			Value elementValue = it.next();
+    			IStrategoTerm term = null;
+    			term = buildIStrategoTerm(elementValue);
+    			// build IStrategoTerm
+    			terms.add(term);
+    		}
+    	}
+
+		IStrategoTerm[] termArray = new IStrategoTerm[terms.size()];
+		for(int i = 0; i < termArray.length; i++)
+		{
+			termArray[i] = terms.get(i);
+		}
+		return termArray;
+	}
+	
+	public IStrategoTerm buildIStrategoTerm(Value value)
+	{
+		// dispatch to correct builder
+		Type t = value.type();
+		String type = t.name();
+		if ("org.strategoxt.lang.terms.StrategoString".equals(type))
+		{
+			return buildStrategoString(value);
+		}
+		else if ("org.strategoxt.lang.terms.StrategoInt".equals(type))
+		{
+			return buildStrategoInt(value);
+		}
+		else if ("org.strategoxt.lang.terms.StrategoReal".equals(type))
+		{
+			return buildStrategoReal(value);
+		}
+		else if ("org.strategoxt.lang.terms.StrategoTuple".equals(type))
+		{
+			return buildStrategoTuple(value);
+		}
+		else if ("org.strategoxt.lang.terms.StrategoList".equals(type))
+		{
+			return buildStrategoList(value);
+		}
+		else if ("org.strategoxt.lang.terms.StrategoAppl".equals(type))
+		{
+			return buildStrategoAppl(value);
+		}
+		else
+		{
+			System.err.println("Missing type " + type);
+		}
+		return null;
+	}
+
+	public IStrategoConstructor buildStrategoConstructor(Value value)
+	{
+        ObjectReference obj = (ObjectReference) value; // instance of org.strategoxt.lang.terms.StrategoConstructor
+        ReferenceType refType = obj.referenceType(); // class org.strategoxt.lang.terms.StrategoConstructor
+        
+        Field nameField = refType.fieldByName("name");
+        Value nameValue = obj.getValue(nameField); // String
+        
+        Field arityField = refType.fieldByName("arity");
+        Value arityValue = obj.getValue(arityField); // int
+        
+		String name = "";
+		int arity = -1;
+		
+		name = buildString(nameValue);
+		arity = buildInt(arityValue);
+		
+		IStrategoConstructor strategoConstructor = f.makeConstructor(name, arity);
+		return strategoConstructor;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StreamRedirectThread.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StreamRedirectThread.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,95 @@
+/*
+ * @(#)StreamRedirectThread.java	1.6 05/11/17
+ *
+ * Copyright 2006 Sun Microsystems, Inc. All rights reserved.
+ * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
+ */
+/*
+ * Copyright (c) 1997-2001 by Sun Microsystems, Inc. All Rights Reserved.
+ * 
+ * Sun grants you ("Licensee") a non-exclusive, royalty free, license to use,
+ * modify and redistribute this software in source and binary code form,
+ * provided that i) this copyright notice and license appear on all copies of
+ * the software; and ii) Licensee does not utilize the software in a manner
+ * which is disparaging to Sun.
+ * 
+ * This software is provided "AS IS," without a warranty of any kind. ALL
+ * EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY
+ * IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
+ * NON-INFRINGEMENT, ARE HEREBY EXCLUDED. SUN AND ITS LICENSORS SHALL NOT BE
+ * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING
+ * OR DISTRIBUTING THE SOFTWARE OR ITS DERIVATIVES. IN NO EVENT WILL SUN OR ITS
+ * LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT,
+ * INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER
+ * CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF THE USE OF
+ * OR INABILITY TO USE SOFTWARE, EVEN IF SUN HAS BEEN ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGES.
+ * 
+ * This software is not designed or intended for use in on-line control of
+ * aircraft, air traffic, aircraft navigation or aircraft communications; or in
+ * the design, construction, operation or maintenance of any nuclear
+ * facility. Licensee represents and warrants that it will not use or
+ * redistribute the Software for such purposes.
+ */
+package org.strategoxt.debug.core.util;
+
+import java.io.*;
+
+/**
+ * StreamRedirectThread is a thread which copies it's input to it's output and
+ * terminates when it completes.
+ * 
+ * @version @(#) StreamRedirectThread.java 1.6 05/11/17 13:07:51
+ * @author Robert Field
+ */
+public class StreamRedirectThread extends Thread {
+
+	private final Reader in;
+	private final Writer out;
+
+	private static final int BUFFER_SIZE = 2048;
+
+	/**
+	 * Set up for copy.
+	 * 
+	 * @param name
+	 *            Name of the thread
+	 * @param in
+	 *            Stream to copy from
+	 * @param out
+	 *            Stream to copy to
+	 */
+	public StreamRedirectThread(String name, InputStream in, OutputStream out) {
+		super(name);
+		this.in = new InputStreamReader(in);
+		this.out = new OutputStreamWriter(out);
+		setPriority(Thread.MAX_PRIORITY - 1);
+	}
+
+	/**
+	 * Copy.
+	 */
+	public void run() {
+		try {
+			char[] cbuf = new char[BUFFER_SIZE];
+			int count;
+			while ((count = in.read(cbuf, 0, BUFFER_SIZE)) >= 0) {
+				out.write(cbuf, 0, count);
+			}
+			out.flush();
+		} catch (IOException exc) {
+			System.err.println("Child I/O Transfer - " + exc);
+		}
+	}
+	
+	public void closeStream()
+	{
+		try {
+			this.out.flush();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StringUtil.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StringUtil.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,30 @@
+package org.strategoxt.debug.core.util;
+
+public class StringUtil {
+
+	/**
+	 * Trims the quotes.
+	 * <p>
+	 * For example,
+	 * <ul>
+	 * <li>("a.b") => a.b
+	 * <li>("a.b) => "a.b
+	 * <li>(a.b") => a.b"
+	 * <li>(""a.b"") => "a.b"
+	 * </ul>
+	 * 
+	 * @param value
+	 *            the string may have quotes
+	 * @return the string without quotes
+	 */
+	public static String trimQuotes(String value) {
+		if (value == null)
+			return value;
+
+		value = value.trim();
+		if (value.startsWith("\"") && value.endsWith("\""))
+			return value.substring(1, value.length() - 1);
+
+		return value;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,156 @@
+package org.strategoxt.debug.core.util;
+
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import com.sun.jdi.Bootstrap;
+import com.sun.jdi.VirtualMachine;
+import com.sun.jdi.VirtualMachineManager;
+import com.sun.jdi.connect.AttachingConnector;
+import com.sun.jdi.connect.Connector;
+import com.sun.jdi.connect.IllegalConnectorArgumentsException;
+import com.sun.jdi.connect.LaunchingConnector;
+import com.sun.jdi.connect.ListeningConnector;
+import com.sun.jdi.connect.VMStartException;
+
+public class VMLauncherHelper {
+
+	//  Do we want to watch assignments to fields
+    private boolean watchFields = false;
+    
+    public String classpath = "";
+    
+    public final String defaultClasspath = "/home/rlindeman/workspace/short-examples/bin" +
+    		":/home/rlindeman/workspace/strj-dbg-generated/bin";
+	
+    public final String defaultJars = DebugCompiler.strategoxtjar + ":" + DebugCompiler.libstrategodebuglib + ":" + DebugCompiler.strjdebugruntime;    
+    
+	private VirtualMachineManager vmManager = null;
+    
+	public VMLauncherHelper(VirtualMachineManager vmManager) {
+		this.vmManager = vmManager;
+	}
+
+	/**
+	 * Find a com.sun.jdi.CommandLineLaunch connector.
+	 * 
+	 * @param vmManager
+	 * @return
+	 */
+	public static LaunchingConnector findCLLaunchingConnector(VirtualMachineManager vmManager) {
+		List<Connector> connectors = Bootstrap.virtualMachineManager().allConnectors();
+		Iterator<Connector> iter = connectors.iterator();
+		while (iter.hasNext()) {
+			Connector connector = (Connector) iter.next();
+			if (connector.name().equals("com.sun.jdi.CommandLineLaunch")) {
+				return (LaunchingConnector) connector;
+			}
+		}
+		throw new Error("No com.sun.jdi.CommandLineLaunch connector");
+	}
+
+	/**
+	 * Find a com.sun.jdi.SocketAttach connector.
+	 * 
+	 * @param vmManager
+	 * @return
+	 */
+	public static AttachingConnector findSocketAttachConnector(VirtualMachineManager vmManager)
+	{
+		List<Connector> connectors = vmManager.allConnectors();
+		//List<Connector> connectors = vmManager.attachingConnectors();
+		Iterator<Connector> iter = connectors.iterator();
+		while (iter.hasNext()) {
+			Connector connector = (Connector) iter.next();
+			if (connector.name().equals("com.sun.jdi.SocketAttach")) {
+				return (AttachingConnector) connector;
+			}
+		}
+		throw new Error("No com.sun.jdi.SocketAttach connector");
+	}
+	
+	public static ListeningConnector findSocketListenConnector(VirtualMachineManager vmManager)
+	{
+		List<Connector> connectors = vmManager.allConnectors();
+		Iterator<Connector> iter = connectors.iterator();
+		while(iter.hasNext()) {
+			Connector connector = (Connector) iter.next();
+			if (connector.name().equals("com.sun.jdi.SocketListen")) {
+				return (ListeningConnector) connector;
+			}
+		}
+		throw new Error("No com.sun.jdi.SocketListen connector");
+	}
+	
+	// set arguments for the connector
+	/**
+	 * Return the launching connector's arguments.
+	 */
+	private Map<String, ? extends Connector.Argument> connectorArguments(Connector connector, String mainArgs) {
+		Map<String, ? extends Connector.Argument> arguments = connector.defaultArguments();
+		Connector.Argument mainArg = (Connector.Argument) arguments.get("main");
+		if (mainArg == null) {
+			throw new Error("Bad launching connector");
+		}
+		mainArg.setValue(mainArgs);
+		
+		//System.out.println("CP:" + classpath);
+		Connector.Argument opts = (Connector.Argument) arguments.get("options");
+		opts.setValue("-classpath " + classpath);
+		
+		Connector.Argument susp = (Connector.Argument) arguments.get("suspend");
+		susp.setValue("true");
+		
+		if (watchFields) {
+			// We need a VM that supports watchpoints
+			Connector.Argument optionArg = (Connector.Argument) arguments.get("options");
+			if (optionArg == null) {
+				throw new Error("Bad launching connector");
+			}
+			optionArg.setValue("-classic");
+		}
+		return arguments;
+	}
+	// attach to target vm (target vm runs the stratego program)
+	/**
+	 * Launch target VM. Forward target's output and error.
+	 */
+	private VirtualMachine launchTarget(String mainArgs) {
+		LaunchingConnector connector = null;
+
+		connector = VMLauncherHelper.findCLLaunchingConnector(this.vmManager);
+		
+		Map<String, ? extends Connector.Argument> arguments = connectorArguments(connector, mainArgs);
+		try {
+			return connector.launch(arguments);
+		} catch (IOException exc) {
+			throw new Error("Unable to launch target VM: " + exc);
+		} catch (IllegalConnectorArgumentsException exc) {
+			throw new Error("Internal error: " + exc);
+		} catch (VMStartException exc) {
+			throw new Error("Target VM failed to initialize: "
+					+ exc.getMessage());
+		}
+	}
+	
+	public VirtualMachine getTargetVM(String mainArgs)
+	{
+		return this.launchTarget(mainArgs);
+		
+	}
+
+
+
+	public void setDefaultClasspath() {
+		String cp = this.defaultClasspath + ":" + this.defaultJars;
+		this.classpath = cp;
+	}
+
+
+
+	public void setClasspath(String cp) {
+		this.classpath = cp + ":" + this.defaultJars;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/EventEntry.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/EventEntry.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,40 @@
+package org.strategoxt.debug.core.util.table;
+
+import org.strategoxt.debug.core.model.LocationInfo;
+
+public class EventEntry {
+
+	private String eventType;
+	
+	private String strategoFilename;
+	
+	private String strategyName;
+	
+	private LocationInfo locationInfo;
+
+	public EventEntry(String eventType, String strategoFilename,
+			String strategyName, LocationInfo locationInfo) {
+		super();
+		this.eventType = eventType;
+		this.strategoFilename = strategoFilename;
+		this.strategyName = strategyName;
+		this.locationInfo = locationInfo;
+	}
+
+	public String getEventType() {
+		return eventType;
+	}
+
+	public String getStrategoFilename() {
+		return strategoFilename;
+	}
+
+	public String getStrategyName() {
+		return strategyName;
+	}
+
+	public LocationInfo getLocationInfo() {
+		return locationInfo;
+	}
+	
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/EventTable.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/EventTable.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,162 @@
+package org.strategoxt.debug.core.util.table;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.strategoxt.debug.core.model.LocationInfo;
+import org.strategoxt.debug.core.util.StringUtil;
+
+public class EventTable {
+
+	private List<EventEntry> eventEntries = null;
+	
+	public EventTable()
+	{
+		this.eventEntries = new ArrayList<EventEntry>();
+	}
+	
+	public void add(EventEntry eventEntry)
+	{
+		this.eventEntries.add(eventEntry);
+	}
+		
+	public int size()
+	{
+		return this.eventEntries.size();
+	}
+	
+	public static EventTable readEventTable(String location)
+	{
+		EventTable eventTable = null; // return value
+		
+		BufferedReader reader = null;
+		try {
+			reader = new BufferedReader(new FileReader(location));
+		} catch (FileNotFoundException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+		if (reader == null)
+		{
+			// could not open file
+			System.out.println("Could not open file " + location);
+			return eventTable;
+		}
+	    String line;
+	    int i = 0;
+	    try {
+	    	eventTable = new EventTable();
+			while ((line = reader.readLine()) != null)
+			{
+				String cells[] = line.split("\t");
+				// should have length 7
+				if (cells.length != 7)
+				{
+					System.err.println("Row " + i + " does not have 7 cells...");
+				}
+				String eventType = cells[0];
+				String strategoFilename = StringUtil.trimQuotes(cells[1]); // is surround by quotes
+				String strategyName = StringUtil.trimQuotes(cells[2]); // is surrounded by quotes
+				String start_line_num = StringUtil.trimQuotes(cells[3]);
+				String start_token_pos = StringUtil.trimQuotes(cells[4]);
+				String end_line_num = StringUtil.trimQuotes(cells[5]);
+				String end_token_pos = StringUtil.trimQuotes(cells[6]);
+				LocationInfo locationInfo = new LocationInfo(start_line_num, start_token_pos, end_line_num, end_token_pos);
+				// convert cells to EventEntry
+				EventEntry eventEntry = new EventEntry(eventType, strategoFilename, strategyName, locationInfo);
+				eventTable.add(eventEntry);
+				// next line please...
+				i++;
+			}
+		} catch (IOException e) {
+			System.out.println("Failed at row " + i);
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		return eventTable;
+	}
+	
+	public List<EventEntry> getEventEntries(int linenumber)
+	{
+		List<EventEntry> matches = new ArrayList<EventEntry>();
+		
+		for(EventEntry eventEntry : this.eventEntries)
+		{
+			if ((eventEntry.getLocationInfo().getStart_line_num() <= linenumber) && (linenumber <= eventEntry.getLocationInfo().getEnd_line_num()))
+			{
+				matches.add(eventEntry);
+			}
+		}
+		return matches;
+	}
+	
+	public List<EventEntry> getEventEntries(int linenumber, String eventType)
+	{
+		List<EventEntry> matches = this.getEventEntries(linenumber);
+		List<EventEntry> typeMatches = new ArrayList<EventEntry>();
+		for(EventEntry eventEntry : matches)
+		{
+			if (eventType != null && eventType.equals(eventEntry.getEventType()))
+			{
+				typeMatches.add(eventEntry);
+			}
+		}
+		return typeMatches;
+	}
+	
+	public List<EventEntry> getEventEntries(int linenumber, int token_position)
+	{
+		List<EventEntry> matches = new ArrayList<EventEntry>();
+		
+		for(EventEntry eventEntry : this.eventEntries)
+		{
+			if (eventEntry.getLocationInfo().surrounds(linenumber, token_position))
+			{
+				matches.add(eventEntry);
+			}
+		}
+		return matches;
+	}
+	
+	public List<EventEntry> getEventEntries(int linenumber, int token_position, String eventType)
+	{
+		List<EventEntry> matches = this.getEventEntries(linenumber, token_position);
+		List<EventEntry> typeMatches = new ArrayList<EventEntry>();
+		for(EventEntry eventEntry : matches)
+		{
+			if (eventType != null && eventType.equals(eventEntry.getEventType()))
+			{
+				typeMatches.add(eventEntry);
+			}
+		}
+		return typeMatches;
+	}
+	
+	public static EventEntry getFirstStepEventEntry(List<EventEntry> entries)
+	{
+		for(EventEntry eventEntry: entries)
+		{
+			if ("s-step".equals(eventEntry.getEventType()))
+			{
+				return eventEntry;
+			}
+		}
+		return null;
+	}
+	
+	public static EventEntry getFirstEnterEventEntry(List<EventEntry> entries)
+	{
+		for(EventEntry eventEntry: entries)
+		{
+			if ("s-enter".equals(eventEntry.getEventType()) || "r-enter".equals(eventEntry.getEventType()))
+			{
+				return eventEntry;
+			}
+		}
+		return null;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/thread-main.txt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/thread-main.txt	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,12 @@
+Start thread
+====== main ======
+| invoke  --  strjdebugruntime.strategies.java_s_enter_0_3
+| invoke  --  strjdebugruntime.strategies.java_s_enter_0_3
+| invoke  --  strjdebugruntime.strategies.java_r_enter_0_3
+| invoke  --  strjdebugruntime.strategies.java_r_exit_0_3
+| invoke  --  strjdebugruntime.strategies.java_r_enter_0_3
+| invoke  --  strjdebugruntime.strategies.java_r_exit_0_3
+| invoke  --  strjdebugruntime.strategies.java_r_enter_0_3
+| invoke  --  strjdebugruntime.strategies.java_r_exit_0_3
+| invoke  --  strjdebugruntime.strategies.java_s_exit_0_3
+====== main end ======

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/writer.txt
==============================================================================

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.classpath	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.externalToolBuilders/Strj-dbg-runtime-lib build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.externalToolBuilders/Strj-dbg-runtime-lib build.main.xml.launch	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/strj-dbg-runtime-lib/build.main.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${project_loc}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${project_loc}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.project	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<projectDescription>
+      <name>org.strategoxt.imp.debug.stratego.runtime</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/Strj-dbg-runtime-lib build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/.settings/org.eclipse.jdt.core.prefs	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,22 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: Strjdbgruntimelib Plug-in
+Bundle-SymbolicName: strjdbgruntimelib; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: strjdbgruntimelib.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.aterm,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: strjdbgruntimelib

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/README.txt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/README.txt	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+This project contains a stratego runtime library that is used for debugging

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.custom.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.custom.xml	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,473 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+	<target name="spoofaximp.default" depends="spoofaximp.default.ctree" />
+	<target name="spoofaximp.default.ctree" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp,refresh" />
+	<target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  java.jar,sdf2imp,refresh" />
+
+	<!-- Initialization -->
+	<!--<available file="${build}/strjdebugruntime/strategies/Main.class" property="java.jar.enabled"/>-->
+	<!-- do not use class file exists method, but set it explicitly -->
+	<!-- <condition property="java.jar.import" value="-la strjdebugruntime.strategies" else=""> -->
+	<condition property="java.jar.import" value="-la ${build.stratego.external.strategies.name}" else="">
+		<isset property="java.jar.enabled" />
+	</condition>
+	<condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+		<isset property="java.jar.enabled" />
+	</condition>
+	<available file="${trans}/${strmodule}.str" property="build.stratego.enabled" />
+	<dirname property="externaldefdir" file="${externaldef}" />
+	<condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+		<isset property="externaldef" />
+	</condition>
+	<condition property="externaljarimport" value=":${externaljar}" else="">
+		<isset property="externaljar" />
+	</condition>
+	<condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+		<isset property="eclipse.running" />
+	</condition>
+	<condition property="externaljarflags" value="${externaljarflags}" else="">
+		<isset property="externaljarflags" />
+	</condition>
+	<condition property="metasdfmodule.available" value="1">
+		<available file="${syntax}/${metasdfmodule}.sdf" />
+	</condition>
+
+	<fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually" />
+	<mkdir dir="${build}" />
+	<mkdir dir="${src-gen}" />
+	<mkdir dir="${dist}" />
+	<mkdir dir="${include}" />
+	<mkdir dir="${lib}" />
+	<mkdir dir="${syntax}" />
+
+	<target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone" />
+
+	<target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+		<java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+			<arg value="${include}/${esvmodule}.packed.esv" />
+		</java>
+	</target>
+
+	<target name="refresh" if="eclipse.running">
+		<eclipse.convertPath fileSystemPath="${basedir}" property="projectdir" />
+		<eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite" />
+		<eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen" />
+		<eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite" />
+		<eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build" />
+		<eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite" />
+		<!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+	</target>
+
+	<target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+		<java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+			<arg value="-i" />
+			<arg value="${basedir}/editor/${esvmodule}.main.esv" />
+			<arg value="-p" />
+			<arg value="${include}/${sdfmodule}.tbl" />
+		</java>
+	</target>
+
+	<target name="check-classpath">
+		<available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available" />
+		<antcall target="check-classpath.helper" />
+	</target>
+
+	<target name="check-classpath.helper" unless="check-classpath.available">
+		<echo level="error" message="Could not load the Spoofax plugin loading classes." />
+		<echo level="error" message="Make sure it is on the class path." />
+		<echo level="error" message="" />
+		<echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:" />
+		<echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab," />
+		<echo level="error" message="and ensure Run in the same JRE as the workspace is selected" />
+		<echo level="error" message="alternatively, build the project using Build Project in the Project menu" />
+		<fail />
+	</target>
+
+	<target name="sdf2table" depends="make-permissive">
+		<apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+			<arg value="-i" />
+			<srcfile />
+			<arg value="-o" />
+			<targetfile />
+			<arg value="-m" />
+			<arg value="${sdfmodule}" />
+
+			<fileset file="${include}/${sdfmodule}-Permissive.def" />
+			<mapper type="glob" from="*-Permissive.def" to="*.tbl" />
+		</apply>
+	</target>
+
+	<target name="meta-sdf2table" if="metasdfmodule.available">
+		<fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def" />
+		<antcall target="sdf2table">
+			<param name="sdfmodule" value="${metasdfmodule}" />
+			<param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}" />
+		</antcall>
+		<antcall target="meta-sdf2table.helper" />
+	</target>
+
+	<target name="meta-sdf2table.helper" if="eclipse.running">
+		<eclipse.convertPath fileSystemPath="${include}" property="includeresource" />
+		<eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite" />
+	</target>
+
+	<target name="make-permissive" depends="pack-sdf,copy-sdf">
+		<dependset>
+			<srcfileset file="${include}/${sdfmodule}.def" />
+			<targetfileset file="${include}/${sdfmodule}-Permissive.def" />
+		</dependset>
+		<available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available" />
+		<antcall target="make-permissive.helper" />
+	</target>
+
+	<target name="make-permissive.helper" unless="permissive-grammar.available">
+		<java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+			<arg value="-i" />
+			<arg value="${include}/${sdfmodule}.def" />
+			<arg value="-o" />
+			<arg value="${include}/${sdfmodule}-Permissive.def" />
+			<arg line="--optimize on" />
+		</java>
+	</target>
+
+	<target name="utils-files">
+		<!-- only useful for builds outside of Eclipse -->
+		<mkdir dir="utils" />
+		<copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false" />
+		<copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false" />
+		<copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false" />
+		<copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false" />
+	</target>
+
+	<target name="pack-sdf" unless="externaldef">
+		<dependset>
+			<srcfileset dir="${syntax}">
+				<include name="**/*.sdf" />
+			</srcfileset>
+			<targetfileset file="${include}/${sdfmodule}.def" />
+		</dependset>
+		<available file="${include}/${sdfmodule}.def" property="pack-sdf.available" />
+		<antcall target="pack-sdf.helper" />
+	</target>
+
+	<target name="pack-sdf.helper" unless="pack-sdf.available">
+		<condition property="utils-include" value="-I ${utils}" else="">
+			<available file="${utils}" />
+		</condition>
+		<java classname="run" failonerror="true">
+			<arg value="org.strategoxt.tools.main-pack-sdf" />
+			<arg value="-i" />
+			<arg value="${syntax}/${sdfmodule}.sdf" />
+			<arg value="-o" />
+			<arg value="${include}/${sdfmodule}.def" />
+			<arg value="-I" />
+			<arg value="${syntax}" />
+			<arg value="-I" />
+			<arg value="${lib}" />
+			<arg line="${utils-include}" />
+			<arg line="${build.sdf.imports}" />
+		</java>
+	</target>
+
+	<target name="copy-sdf" if="externaldef">
+		<copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true" />
+	</target>
+
+	<target name="copy-jar" if="externaljar">
+		<copy file="${externaljar}" todir="${include}" preservelastmodified="true" />
+	</target>
+
+	<target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+		<dependset>
+			<srcfileset file="${include}/${sdfmodule}.rtg" />
+			<targetfileset file="${include}/${sdfmodule}.str" />
+		</dependset>
+		<available file="${include}/${sdfmodule}.str" property="rtg2sig.available" />
+		<antcall target="rtg2sig.helper" />
+	</target>
+
+	<target name="rtg2sig.helper" unless="rtg2sig.available">
+		<java classname="run" failonerror="true">
+			<arg value="org.strategoxt.tools.main-rtg2sig" />
+			<arg value="-i" />
+			<arg value="${include}/${sdfmodule}.rtg" />
+			<arg value="-o" />
+			<arg value="${include}/${sdfmodule}.str" />
+			<arg value="--module" />
+			<arg value="${sdfmodule}" />
+		</java>
+	</target>
+
+	<target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+		<dependset>
+			<srcfileset file="${include}/${sdfmodule}.def" />
+			<targetfileset file="${include}/${sdfmodule}.rtg" />
+		</dependset>
+		<available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available" />
+		<antcall target="sdf2rtg.helper" />
+	</target>
+
+	<target name="sdf2rtg.helper" unless="sdf2rtg.available">
+		<java classname="run" failonerror="true">
+			<arg value="org.strategoxt.tools.main-sdf2rtg" />
+			<arg value="-i" />
+			<arg value="${include}/${sdfmodule}.def" />
+			<arg value="-m" />
+			<arg value="${sdfmodule}" />
+			<arg value="-o" />
+			<arg value="${include}/${sdfmodule}.rtg" />
+			<arg value="--ignore-missing-cons" />
+			<arg value="-Xnativepath" />
+			<arg value="${build.strategoxt.sdf}" />
+		</java>
+	</target>
+
+	<target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+		<dependset>
+			<srcfileset file="${include}/${sdfmodule}.def" />
+			<targetfileset file="${syntax}/${sdfmodule}.generated.pp" />
+			<targetfileset file="${include}/${sdfmodule}.generated.pp.af" />
+		</dependset>
+		<available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available" />
+		<antcall target="ppgen.helper" />
+		<available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available" />
+		<antcall target="ppgen.helper.fallback" />
+	</target>
+
+	<target name="ppgen.helper" unless="ppgen.available">
+		<!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+		<java classname="run" failonerror="false">
+			<arg value="org.strategoxt.tools.main-ppgen" />
+			<arg value="-i" />
+			<arg value="${include}/${sdfmodule}.def" />
+			<arg value="-o" />
+			<arg value="${include}/${sdfmodule}.generated.pp.af" />
+			<arg value="-t" />
+		</java>
+		<java classname="run" failonerror="false">
+			<arg value="org.strategoxt.tools.main-pp-pp-table" />
+			<arg value="-i" />
+			<arg value="${include}/${sdfmodule}.generated.pp.af" />
+			<arg value="-o" />
+			<arg value="${syntax}/${sdfmodule}.generated.pp" />
+		</java>
+	</target>
+
+	<target name="ppgen.helper.fallback" unless="ppgen.available">
+		<echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])" />
+	</target>
+
+	<target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+		<dependset>
+			<srcfileset file="${syntax}/${sdfmodule}.pp" />
+			<targetfileset file="${include}/${sdfmodule}.pp.af" />
+		</dependset>
+		<available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available" />
+		<available file="${include}/${sdfmodule}.pp.af" property="pppack.available" />
+		<antcall target="pppack.helper" />
+		<available file="${include}/${sdfmodule}.pp.af" property="pppack.available" />
+		<antcall target="pppack.helper.fallback" />
+	</target>
+
+	<target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+		<java classname="run" failonerror="true">
+			<arg value="org.strategoxt.tools.main-parse-pp-table" />
+			<arg value="-i" />
+			<arg value="${syntax}/${sdfmodule}.pp" />
+			<arg value="-o" />
+			<arg value="${include}/${sdfmodule}.pp.af" />
+		</java>
+	</target>
+
+	<target name="pppack.helper.fallback" unless="pppack.available">
+		<echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])" />
+	</target>
+
+	<!-- Aster to Stratego -->
+	<target name="stratego.aster">
+		<available file="${trans}/${strmodule}.rtree" property="aster-output.available" />
+		<pathconvert property="aster-input" setonempty="false" pathsep=" ">
+			<path>
+				<fileset dir="${basedir}" includes="*.astr" />
+			</path>
+		</pathconvert>
+		<dependset>
+			<srcfileset dir="${basedir}">
+				<include name="**/*.astr" />
+			</srcfileset>
+			<targetfileset file="${trans}/${strmodule}.rtree" />
+		</dependset>
+		<condition property="aster-output.uptodate">
+			<and>
+				<isset property="aster-output.available" />
+				<available file="${trans}/${strmodule}.rtree" />
+			</and>
+		</condition>
+		<available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate" />
+		<antcall target="stratego.aster.helper" />
+	</target>
+
+	<target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+		<java classname="org.strategoxt.aster.Main" failonerror="true">
+			<arg value="-i" />
+			<fileset dir="${basedir}">
+				<include name="**/*.astr" />
+			</fileset>
+		</java>
+	</target>
+
+	<!--
+		Create a classpath container which can be later used in the ant task
+	-->
+	<path id="plugin.dependencies.classpath">
+
+		<fileset dir="/usr/lib/eclipse/plugins">
+			<include name="**/*.jar" />
+			<!--
+			<include name="org.eclipse.osgi_3.5.1.R35x_v20090827.jar" />
+			<include name="org.eclipse.osgi_3.5.2.R35x_v20100126.jar" />
+			<include name="org.eclipse.core.runtime_3.5.0.v20090525.jar" />
+			<include name="org.eclipse.core.resources_3.5.1.R35x_v20090826-0451.jar" />
+			<include name="org.eclipse.core.resources_3.5.2.R35x_v20091203-1235.jar" />
+			<include name="org.eclipse.ui.workbench_3.5.1.M20090826-0800a.jar" />
+			<include name="org.eclipse.ui.workbench_3.5.2.M20100113-0800a.jar" />
+			<include name="org.eclipse.equinox.common_3.5.1.R35x_v20090807-1100.jar"/>
+			-->
+		</fileset>
+		<fileset dir="/home/rlindeman/.eclipse/org.eclipse.platform_3.5.0_155965261">
+			<include name="**/*.jar" />
+		</fileset>
+	</path>
+
+	<target name="java.jar" if="java.jar.enabled">
+		<delete>
+			<fileset dir="${build}" includes="${build.stratego.external.name}/**" />
+		</delete>
+		<javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" classpathref="plugin.dependencies.classpath" srcdir="${src-gen}" includes="${build.stratego.external.name}/**" destdir="${build}" source="1.5" target="1.5" debug="on" />
+		<!-- <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/> -->
+		<jar basedir="${build}" includes="${build.stratego.external.name}/**" update="no" destfile="${include}/${strmodule}-java.jar" />
+	</target>
+
+	<!-- Stratego to Java interpreter -->
+	<target name="stratego.ctree" depends="rtg2sig">
+		<dependset>
+			<srcfileset dir="${basedir}">
+				<include name="**/*.str" />
+				<include name="**/*.astr" />
+				<exclude name="lib/editor-common.generated.str" />
+			</srcfileset>
+			<targetfileset file="${include}/${strmodule}.ctree" />
+		</dependset>
+		<available file="${include}/${strmodule}.ctree" property="strc-java.available" />
+		<antcall target="copy-jar" />
+		<antcall target="stratego.jvm.helper">
+			<param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree" />
+			<param name="build.stratego.extraargs" value="-F" />
+		</antcall>
+	</target>
+
+	<!-- Stratego to Java compiler -->
+	<target name="stratego.jar" depends="rtg2sig,utils-files">
+		<dependset>
+			<srcfileset dir="${basedir}">
+				<include name="**/*.str" />
+				<include name="**/*.astr" />
+				<exclude name="lib/editor-common.generated.str" />
+			</srcfileset>
+			<targetfileset file="${src-gen}/trans/Main.java" />
+		</dependset>
+		<available file="${src-gen}/trans/Main.java" property="strc-java.available" />
+		<antcall target="copy-jar" />
+		<antcall target="stratego.jar.deletehelper" />
+		<antcall target="stratego.jvm.helper">
+			<param name="build.stratego.outputfile" value="${src-gen}/${build.stratego.library.location}/Main.java" />
+			<param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}" />
+		</antcall>
+		<!--<javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>-->
+		<delete>
+			<fileset dir="${build}" includes="${build.stratego.library.location}/**" />
+		</delete>
+		<javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="${build.stratego.library.location}/**" destdir="${build}" source="1.5" target="1.5" debug="on" />
+		<!-- copy imported terms -->
+		<copy todir="${build}/trans">
+			<fileset dir="${src-gen}/${build.stratego.library.location}" excludes="**/*.java" />
+		</copy>
+		<jar basedir="${build}" includes="${build.stratego.library.location}/**" destfile="${include}/${strmodule}.tmp.jar" />
+		<move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar" />
+		<!--<delete><fileset dir="${build}" includes="trans/**"/></delete>-->
+	</target>
+
+	<target name="stratego.jar.deletehelper" unless="strc-java.available">
+		<delete>
+			<fileset dir="${src-gen}" includes="trans/**" />
+			<fileset dir="${build}" includes="trans/**" />
+		</delete>
+	</target>
+
+	<target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+		<delete file="${include}/${strmodule}.rtree" failonerror="false" />
+		<mkdir dir="${src-gen}/${build.stratego.library.location}" />
+		<java classname="org.strategoxt.strj.Main" failonerror="true">
+			<arg value="-i" />
+			<arg value="${trans}/${strmodule}.str" />
+			<arg value="-o" />
+			<arg value="${build.stratego.outputfile}" />
+			<arg value="-p" />
+			<arg value="${build.stratego.library.name}" />
+			<arg value="--library" />
+			<arg value="--clean" />
+			<arg line="${build.stratego.args}" />
+			<arg line="${build.stratego.extraargs}" />
+			<arg line="${externaljarflags}" />
+			<arg line="${externaldefimport}" />
+			<arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;" />
+		</java>
+		<delete file="${include}/${strmodule}.rtree" failonerror="false" />
+		<!-- <mkdir dir="${build}/trans" /> -->
+	</target>
+
+	<!-- Stratego to C-based native executable -->
+	<target name="stratego.c">
+		<antcall target="stratego.c.helper">
+			<param name="build.stratego.outputpath" value="${basedir}/include" />
+			<param name="build.stratego.extraargs" value="" />
+			<param name="build.stratego.extension" value="" />
+			<param name="build.stratego.compiler" value="strc" />
+		</antcall>
+	</target>
+
+	<!-- Helper target for calling the stratego compiler -->
+	<target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+		<apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+			<arg value="-i" />
+			<srcfile />
+			<arg value="-o" />
+			<targetfile />
+			<arg line="${build.stratego.args}" />
+			<arg line="${build.stratego.extraargs}" />
+			<arg line="${externaldefimport}" />
+			<arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;" />
+
+			<fileset file="${trans}/${strmodule}.str" />
+			<mapper type="glob" from="*.str" to="*.${build.stratego.extension}" />
+		</apply>
+	</target>
+
+	<target name="clean" description="clean up">
+		<delete dir="${build}" />
+		<delete file="${src-gen}/trans/Main.java" />
+	</target>
+</project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.xml	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,440 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  java.jar,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${build}/strjdbgruntimelib/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la strjdbgruntimelib.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-t"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
+                <path><fileset dir="${basedir}" includes="*.astr"/></path>
+            </pathconvert>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <fileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </fileset>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${src-gen}/trans/Main.java"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="Strj-dbg-runtime-lib" default="all">
+
+	<!-- Key input modules -->
+	<property name="sdfmodule" value="Strj-dbg-runtime-lib" />
+	<property name="metasdfmodule" value="Stratego-Strj-dbg-runtime-lib" />
+	<property name="esvmodule" value="Strj-dbg-runtime-lib" />
+	<property name="strmodule" value="strj_dbg_runtime_lib" />
+
+	<!-- Project directories -->
+	<property name="trans" location="trans" />
+	<property name="src-gen" location="editor/java" />
+	<property name="syntax" location="syntax" />
+	<property name="include" location="include" />
+	<property name="lib" location="lib" />
+	<property name="build" location="bin" />
+	<property name="dist" location="dist" />
+
+	<!-- we want a custom package name for the jars, otherwise it will clash with other stratego jars -->
+	<!-- build java library name -->
+	<property name="build.stratego.library.name" value="org.strategoxt.libstrategodebuglib"/>
+	<property name="build.stratego.library.location" value="org/strategoxt/libstrategodebuglib"/>
+	
+	<!-- the name of the package that contains the external defined strategies (implemented in java) -->
+	<property name="build.stratego.external.name" value="strjdbgruntimelib"/>
+	<property name="build.stratego.external.strategies.name" value="strjdbgruntimelib.strategies"/>
+	<property name="build.stratego.external.strategies.location" value="strjdbgruntimelib/strategies"/>
+	
+	<!-- build external strategies defined in java -->
+	<!-- <available file="${build}/strjdebugruntime/strategies/Main.class" property="java.jar.enabled"/> -->
+	<available file="${src-gen}/${build.stratego.external.strategies.location}/Main.java" property="java.jar.enabled"/>
+		
+	<!-- Imports -->
+	<property name="build.sdf.imports" value="" />
+	<property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm" />
+
+	<!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+
+	<!-- Environment configuration for command-line builds -->
+	<condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+		<isset property="eclipse.spoofaximp.nativeprefix" />
+	</condition>
+	<property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin" />
+
+    <!-- do not use the default generated file, this file is re-generated after each run -->
+	<!-- <import file="build.generated.xml"/> -->
+	<import file="build.generated.custom.xml"/>
+
+
+	<!-- Main target -->
+	<!-- interpreted ctree -->
+	<!--<target name="all" depends="spoofaximp.default.ctree"/>-->
+	<!-- compile to jar -->
+	<target name="all" depends="spoofaximp.default.jar" />
+</project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Builders.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,23 @@
+
+module Strj-dbg-runtime-lib-Builders
+
+imports Strj-dbg-runtime-lib-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                                               
+//  provider                  : include/strj_dbg_runtime_lib.ctree // use with build.main.xml target spoofaximp.default.ctree     
+  provider                  : include/strj_dbg_runtime_lib.jar //  use with build.main.xml target spoofaximp.default.jar                                                        
+  provider                  : include/strj_dbg_runtime_lib-java.jar                                                            
+ // no 'editor-analyze', 'generate-java' needed as this project only contains stratego library code                                                                                                                                 
+//  observer                  : editor-analyze                                                                                
+                                                                                                                               
+//  builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)               
+//  builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+                                                                                                                               
+  // on save: generate-java                                                                                                    
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Colorer.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,9 @@
+module Strj-dbg-runtime-lib-Colorer
+
+imports Strj-dbg-runtime-lib-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Completions.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,29 @@
+module Strj-dbg-runtime-lib-Completions
+
+imports Strj-dbg-runtime-lib-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                                                 
+  // Syntax completion:                                          
+// disabled all completion templates as this project only contains stratego library code                                                                 
+//  completion template : Start =      "module " <m> (blank)       
+                                                                 
+//  completion template : Definition = "entity " <e> " {}" (blank) 
+                                                                 
+//  completion template : Property =   <x> " : " <T> (blank)       
+                                                                 
+
+completions
+  // Semantic (identifier) completion:   
+  
+// disabled all completions  as this project only contains stratego library code                                          
+//  completion proposer                  : editor-complete
+                                         
+//  completion trigger                   : ":"
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Folding.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,9 @@
+module Strj-dbg-runtime-lib-Folding
+
+imports Strj-dbg-runtime-lib-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Outliner.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,9 @@
+module Strj-dbg-runtime-lib-Outliner
+
+imports Strj-dbg-runtime-lib-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-References.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,17 @@
+module Strj-dbg-runtime-lib-References
+
+imports Strj-dbg-runtime-lib-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+
+// disabled all reference resolving, this project contains only stratego code
+                
+//  reference _ : editor-resolve
+//  hover _     : editor-hover
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib-Syntax.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,9 @@
+module Strj-dbg-runtime-lib-Syntax
+
+imports Strj-dbg-runtime-lib-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib.main.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,17 @@
+
+module Strj-dbg-runtime-lib.main
+
+imports Strj-dbg-runtime-lib-Builders Strj-dbg-runtime-lib-Colorer Strj-dbg-runtime-lib-Completions Strj-dbg-runtime-lib-Folding Strj-dbg-runtime-lib-Outliner Strj-dbg-runtime-lib-References Strj-dbg-runtime-lib-Syntax
+
+language General properties
+                  
+  name          : Strj-dbg-runtime-lib
+  id            : strjdbgruntimelib
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the Strj-dbg-runtime-lib language"
+  url           : http://strategoxt.org
+                  
+  extensions    : strjdbg
+  table         : include/Strj-dbg-runtime-lib.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/Activator.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,44 @@
+package strjdbgruntimelib;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "Strjdbgruntimelib";
+
+  public static final String kLanguageName = "Strjdbgruntimelib";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/StrjdbgruntimelibParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/StrjdbgruntimelibParseController.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,89 @@
+package strjdbgruntimelib;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class StrjdbgruntimelibParseController extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("Strj-dbg-runtime-lib");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = StrjdbgruntimelibParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = StrjdbgruntimelibParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(StrjdbgruntimelibParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return StrjdbgruntimelibParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/StrjdbgruntimelibParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/StrjdbgruntimelibParseControllerGenerated.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,89 @@
+package strjdbgruntimelib;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class StrjdbgruntimelibParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("Strj-dbg-runtime-lib");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = StrjdbgruntimelibParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = StrjdbgruntimelibParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(StrjdbgruntimelibParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return StrjdbgruntimelibParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/StrjdbgruntimelibValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/StrjdbgruntimelibValidator.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,12 @@
+package strjdbgruntimelib;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class StrjdbgruntimelibValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return StrjdbgruntimelibParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/InteropRegisterer.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,21 @@
+package strjdbgruntimelib.strategies;
+
+import org.strategoxt.lang.JavaInteropRegisterer;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Helper class for {@link java_strategy_0_0}.
+ */
+public class InteropRegisterer extends JavaInteropRegisterer {
+
+	public InteropRegisterer() {
+		super(new Strategy[] { 
+				java_s_enter_0_4.instance // strategy enter
+				, java_s_exit_0_4.instance // strategy exit
+				, java_r_enter_0_4.instance // rule enter
+				, java_r_exit_0_4.instance // rule exit
+				, java_s_step_0_4.instance // step
+				, java_s_var_0_5.instance // var assignment
+				});
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/Main.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,11 @@
+package strjdbgruntimelib.strategies;
+
+import org.strategoxt.lang.Context;
+
+public class Main {
+
+	public static void init(Context context) {
+		// Called when the editor is being initialized
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_r_enter_0_4.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_r_enter_0_4.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,21 @@
+package strjdbgruntimelib.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Called right after the rule matches the current term.
+ * 
+ * @author rlindeman
+ * 
+ */
+public class java_r_enter_0_4 extends Strategy {
+	public static java_r_enter_0_4 instance = new java_r_enter_0_4();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename, IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
+		//context.getIOAgent().printError("Input for java_r_enter_0_4: " + current);
+		return current;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_r_exit_0_4.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_r_exit_0_4.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,21 @@
+package strjdbgruntimelib.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Called right before the rule returns a new term.
+ * 
+ * @author rlindeman
+ * 
+ */
+public class java_r_exit_0_4 extends Strategy {
+	public static java_r_exit_0_4 instance = new java_r_exit_0_4();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
+		//context.getIOAgent().printError("Input for java_r_exit_0_4: " + current);
+		return current;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_s_enter_0_4.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_s_enter_0_4.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,21 @@
+package strjdbgruntimelib.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Called when a strategy is entered.
+ * 
+ * @author rlindeman
+ * 
+ */
+public class java_s_enter_0_4 extends Strategy {
+	public static java_s_enter_0_4 instance = new java_s_enter_0_4();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
+		//context.getIOAgent().printError("Input for java_s_enter_0_4: " + current);
+		return current;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_s_exit_0_4.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_s_exit_0_4.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,21 @@
+package strjdbgruntimelib.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Called right before the strategy exits
+ * 
+ * @author rlindeman
+ * 
+ */
+public class java_s_exit_0_4 extends Strategy {
+	public static java_s_exit_0_4 instance = new java_s_exit_0_4();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
+		//context.getIOAgent().printError("Input for java_s_exit_0_4: " + current);
+		return current;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_s_step_0_4.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_s_step_0_4.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,28 @@
+package strjdbgruntimelib.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * 
+ * a step event is fired before each strategy.
+ * e.g.
+ * foo;bar; baz
+ * becomes
+ * (s-step; foo); (s-step; bar); (s-step; baz)
+ * 
+ * @author rlindeman
+ *
+ */
+public class java_s_step_0_4 extends Strategy {
+	
+	public static java_s_step_0_4 instance = new java_s_step_0_4();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
+		//context.getIOAgent().printError("Input for java_s_exit_0_4: " + current);
+		return current;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_s_var_0_5.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/strategies/java_s_var_0_5.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,17 @@
+package strjdbgruntimelib.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class java_s_var_0_5 extends Strategy {
+
+	
+	public static java_s_var_0_5 instance = new java_s_var_0_5();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm varname, IStrategoTerm location, IStrategoTerm given) {
+		//context.getIOAgent().printError("Input for java_s_exit_0_4: " + current);
+		return current;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/lib/editor-common.generated.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,254 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-strj_dbg_runtime_lib-file
+  parse-strj_dbg_runtime_lib-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/Strj-dbg-runtime-lib.tbl)>
+    )
+
+  parse-string = parse-strj_dbg_runtime_lib-string
+  parse-strj_dbg_runtime_lib-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/Strj-dbg-runtime-lib.tbl)>
+    )
+  
+  parse-stream = parse-strj_dbg_runtime_lib-stream
+  parse-strj_dbg_runtime_lib-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/Strj-dbg-runtime-lib.tbl)>
+    )
+
+  pp-strj_dbg_runtime_lib-string =
+    ast2abox(|[<import-term(include/Strj-dbg-runtime-lib.generated.pp.af)>,
+               <import-term(include/Strj-dbg-runtime-lib.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "Strj-dbg-runtime-lib", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    !Some(<id>); all(s); ?Some(<id>)
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/strj_dbg_runtime_lib.str file. These definitions should also be automatically 
+  // generated in the imported include/Strj-dbg-runtime-lib.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/plugin.xml	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="strjdbg" description="Strj-dbg-runtime-lib" language="Strj-dbg-runtime-lib" derivedFrom="DynamicRoot" validator="strjdbgruntimelib.StrjdbgruntimelibValidator" validatorClass="strjdbgruntimelib.StrjdbgruntimelibValidator"></language>
+       </extension>
+       <extension id="strjdbgruntimelib.parser" name="Strj-dbg-runtime-lib Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="strjdbgruntimelib.StrjdbgruntimelibParseController" language="Strj-dbg-runtime-lib">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/readme.txt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/readme.txt	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,7 @@
+build the rtree file using
+
+strj -i ../trans/strategodebuglib.str -o strategodebuglib.ctree -p strategodebuglib --library --clean -la stratego-lib -F
+
+the rtree file should be on the working path
+
+copy to org.strategoxt.imp.debug.stratego.core/lib so the generated str files with debug info will report a module not found problem

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree
==============================================================================
Binary file. No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,5 @@
+strategodebuglib.ctree: \
+	../trans/external-calls.str \
+	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
+	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/stratego-lib/libstrategolib.rtree \
+	../trans/strategodebuglib.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.rtree
==============================================================================
Binary file. No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/Common.sdf	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9\_]* -> ID
+    "-"? [0-9]+            -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/Strj-dbg-runtime-lib.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/Strj-dbg-runtime-lib.generated.pp	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,3 @@
+[
+   Module -- KW["module"] _1
+]
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/Strj-dbg-runtime-lib.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/Strj-dbg-runtime-lib.pp	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also Strj-dbg-runtime-lib.generated.pp)
+[]

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/Strj-dbg-runtime-lib.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/syntax/Strj-dbg-runtime-lib.sdf	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,15 @@
+%% Grammar for the Strj-dbg-runtime-lib language
+%% By default, based on an example "entities" syntax
+module Strj-dbg-runtime-lib
+
+imports Common
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+  
+    "module" ID      -> Start {cons("Module")}
+

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/test/example.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/test/example.aterm	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+given
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/test/example.gen
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/test/example.gen	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+module example
+
+// execute one of the following strategies
+// test-call-s-enter
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/test/example.strjdbg
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/test/example.strjdbg	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+module example

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/external-calls.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/external-calls.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,17 @@
+module external-calls
+/*
+This module contains the external strategies
+*/
+strategies
+
+	// name is a string
+	// location is Location(start-line-num, start-token-pos, end-line-num, end-token-pos)
+	// all arguments are integers
+	// given is a term
+	external java-s-enter(|filename, name, location, given)
+	external java-s-exit(|filename, name, location, given)
+	external java-r-enter(|filename, name, location, given)
+	external java-r-exit(|filename, name, location, given)
+	external java-s-step(|filename, name, location, given)
+	// var-name is the name of the variable that the term given is assigned to
+	external java-s-var(|filename, name, var-name, location, given)
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,78 @@
+// compile to library
+// strj -i strategodebuglib.str -o java/org/libstrategodebuglib/strategodebuglib.java -p org.libstrategodebuglib --library --clean --library -la stratego-lib
+
+
+// strj -i strategodebuglib.str -o libstrategodebuglib.ctree -p libstrategodebuglib --library --clean --library -la stratego-lib -F
+
+
+// strj -i stratego-debug-lib.str  --library --clean -p org.strategoxt.debug_lib -o java/org/strategoxt/debug_lib/Main.java -la stratego-lib
+
+// strj -i strategodebuglib.str -o strategodebuglib.ctree -p strategodebuglib --library --clean --library -la stratego-lib -F
+// create jar file
+// in bin dir:
+// jar -cf debug_lib.jar ./org/strategoxt/debug_lib/*.class
+
+module strategodebuglib
+
+imports
+	libstrategolib
+	external-calls
+/*
+// this is a temp library stub. This library should hook into the java debugger
+strategies
+	s-enter(|s-name) = debug(!<concat-strings> ["s-enter: ", s-name]); id
+	
+	s-exit(|s-exit) = debug(!<concat-strings> ["s-enter: ", s-exit]); id
+*/
+
+signature
+  sorts
+    LocationInfo
+    
+  constructors
+	LocationInfo : String * String * String * String -> LocationInfo
+
+rules
+	// Location(start-line-num, start-token-pos, end-line-num, end-token-pos)
+	loc-to-string:
+		LocationInfo(start-line-num, start-token-pos, end-line-num, end-token-pos) -> <concat-strings> [start-line-num, ",", start-token-pos, ",", end-line-num, ",", end-token-pos]
+		
+	to-string:
+		(name, loc) -> <concat-strings> [name, <loc-to-string> loc]
+	
+	// strategy enter
+    s-enter(|filename, s-name, loc) :
+    	t -> t
+    	//where (<debug(!"s-enter: ")> <to-string> (s-name, loc))
+    	where (java-s-enter(|filename, s-name, loc, t))
+    
+    // strategy exit
+    s-exit(|filename, s-name, loc) :
+    	t -> t
+    	//where (<debug(!"s-exit: ")> <to-string> (s-name, loc))
+    	where (java-s-exit(|filename, s-name, loc, t))
+    	
+    // rule enter
+    r-enter(|filename, r-name, loc) :
+    	t -> t
+    	//where (<debug(!"r-enter : ")> <to-string> (r-name, loc))
+    	where (java-r-enter(|filename, r-name, loc, t))
+    
+    // rule exit
+    r-exit(|filename, r-name, loc) :
+    	t -> t
+    	//where (<debug(!"r-exit: ")> <to-string> (r-name, loc))
+    	where (java-r-exit(|filename, r-name, loc, t))
+    	
+    // step
+    s-step(|filename, name, loc) :
+    	t -> t
+    	//where (<debug(!"s-step: ")> <to-string> (name, loc))
+    	where (java-s-step(|filename, name, loc, t))
+    	
+    // variable assignment
+    s-var(|filename, name, var-name, loc):
+    	t -> t
+    	//where (<debug(!"s-var: ")> <to-string> (name, loc))
+    	where (java-s-var(|filename, name, var-name, loc, t))
+    	

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strj_dbg_runtime_lib.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strj_dbg_runtime_lib.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,42 @@
+module strj_dbg_runtime_lib
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/Strj-dbg-runtime-lib
+  lib/editor-common.generated
+
+  strategodebuglib
+
+
+rules // Main editor interface (defined by editor/Strj-debug-runtime-Builders and -References.esv)
+  
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+
+  test-call-s-enter :
+  	t -> result
+  	where(
+  		loc := LocationInfo("1","2","3","4")
+  		; result := <s-enter(|"filename", "test", loc)> "given"
+  		  )
+  		  
+  test-call-s-exit :
+  	t -> result
+  	where(
+  		loc := LocationInfo("1","2","3","4")
+  		; result := <s-exit(|"filename", "test", loc)> "given"
+  		  )
+	test-call-s-var :
+		t -> result
+		where(
+			loc := LocationInfo("1", "2", "3", "4")
+			; result := <s-var(|"filename", "test", "var-name", loc)> "given"
+		)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.classpath	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src/java"/>
+	<classpathentry kind="src" path="test/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="lib" path="lib/strategoxt.jar"/>
+	<classpathentry kind="lib" path="/usr/lib/jvm/jdk1.5.0_22/lib/tools.jar">
+		<attributes>
+			<attribute name="javadoc_location" value="http://download.oracle.com/javase/1.5.0/docs/guide/jpda/jdi/"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.strategoxt.imp.debug.stratego.core"/>
+	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.core/lib/org.strjdbg.transformer.jar"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.project	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.strategoxt.imp.debug.stratego.test</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.settings/org.eclipse.jdt.core.prefs	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,12 @@
+#Thu Sep 16 10:33:48 CEST 2010
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/README.txt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/README.txt	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+This project is a test suite for the stratego debuger code

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/compile2j/compile2j
==============================================================================
Binary file. No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/compile2j/compile2j.c
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/compile2j/compile2j.c	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,113 @@
+#include <srts/stratego.h>
+#include <stratego-lib/stratego-lib.h>
+void init_constructors (void)
+{
+}
+static Symbol sym_Nil_0;
+static void init_module_constructors (void)
+{
+sym_Nil_0 = ATmakeSymbol("Nil", 0, ATfalse);
+ATprotectSymbol(sym_Nil_0);
+}
+static ATerm term1;
+static ATerm term0;
+static void init_module_constant_terms (void)
+{
+ATprotect(&(term0));
+term0 = (ATerm) ATmakeAppl(ATmakeSymbol("main", 0, ATtrue));
+ATprotect(&(term1));
+term1 = term0;
+}
+#include <srts/init-stratego-application.h>
+extern const char * __tracing_table [];
+extern unsigned short __tracing_table_counter;
+ATerm debug_1_0 (StrSL sl, StrCL k_13, ATerm t);
+static ATerm lifted0 (StrSL sl, ATerm t);
+ATerm main_0_0 (StrSL sl, ATerm t);
+ATerm main_0_0 (StrSL sl, ATerm t)
+{
+__tracing_table[__tracing_table_counter++] = "main_0_0";
+__tracing_table[__tracing_table_counter] = NULL;
+sl_decl(sl);
+{
+struct str_closure d_63 = { &(lifted0) , &(frame) };
+StrCL lifted0_cl = &(d_63);
+t = debug_1_0(sl, lifted0_cl, t);
+if((t == NULL))
+goto fail0 ;
+}
+__tracing_table[--__tracing_table_counter] = NULL;
+return(t);
+fail0 :
+--__tracing_table_counter;
+return(NULL);
+}
+static ATerm lifted0 (StrSL sl, ATerm t)
+{
+__tracing_table[__tracing_table_counter++] = "lifted0";
+__tracing_table[__tracing_table_counter] = NULL;
+sl_decl(sl);
+t = term1;
+__tracing_table[--__tracing_table_counter] = NULL;
+return(t);
+fail1 :
+--__tracing_table_counter;
+return(NULL);
+}
+static void register_strategies (void)
+{
+int initial_size = 117;
+int max_load = 75;
+struct str_closure * closures;
+int closures_index = 0;
+if((strategy_table == NULL))
+strategy_table = ATtableCreate(initial_size, max_load);
+closures = (struct str_closure*) malloc((sizeof(struct str_closure) * 3));
+if((closures == NULL))
+{
+perror("malloc error for registration of dynamic strategies");
+exit(1);
+}
+closures[closures_index].fun = &(debug_1_0);
+closures[closures_index].sl = NULL;
+SRTS_register_function((ATerm)ATmakeAppl0(ATmakeSymbol("debug_1_0", 0, ATtrue)), &(closures[closures_index]));
+closures_index++;
+closures[closures_index].fun = &(lifted0);
+closures[closures_index].sl = NULL;
+SRTS_register_function((ATerm)ATmakeAppl0(ATmakeSymbol("lifted0", 0, ATtrue)), &(closures[closures_index]));
+closures_index++;
+closures[closures_index].fun = &(main_0_0);
+closures[closures_index].sl = NULL;
+SRTS_register_function((ATerm)ATmakeAppl0(ATmakeSymbol("main_0_0", 0, ATtrue)), &(closures[closures_index]));
+closures_index++;
+}
+int main (int argc, char * argv [])
+{
+ATerm out_term;
+ATermList in_term;
+int i;
+ATinit(argc, argv, &(out_term));
+init_constructors();
+in_term = ATempty;
+for ( i = (argc - 1) ; (i >= 0) ; i-- )
+{
+in_term = ATinsert(in_term, (ATerm) ATmakeAppl0(ATmakeSymbol(argv[i], 0, ATtrue)));
+}
+SRTS_stratego_initialize();
+memset(__tracing_table, 0, (sizeof(unsigned short) * TRACING_TABLE_SIZE));
+__tracing_table_counter = 0;
+register_strategies();
+out_term = main_0_0(NULL, (ATerm) in_term);
+if((out_term != NULL))
+{
+ATfprintf(stdout, "%t\n", out_term);
+exit(0);
+}
+else
+{
+ATfprintf(stderr, "%s: rewriting failed, trace:\n", argv[0]);
+for ( i = 0 ; (__tracing_table[i] && (i < TRACING_TABLE_SIZE)) ; i++ )
+ATfprintf(stderr, "\t%s\n", __tracing_table[i]);
+exit(1);
+}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/compile2j/compile2j.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/compile2j/compile2j.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,3 @@
+../c/compile2j/compile2j: \
+	/nix/store/ff5x3wn4j9x737sy9xxqjqy6h9jdavsp-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
+	./compile2j.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/identity/indentity
==============================================================================
Binary file. No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/identity/indentity.c
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/identity/indentity.c	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,87 @@
+#include <srts/stratego.h>
+#include <stratego-lib/stratego-lib.h>
+void init_constructors (void)
+{
+}
+static void init_module_constructors (void)
+{
+}
+static void init_module_constant_terms (void)
+{
+}
+#include <srts/init-stratego-application.h>
+extern const char * __tracing_table [];
+extern unsigned short __tracing_table_counter;
+ATerm io_wrap_1_0 (StrSL sl, StrCL q_7, ATerm t);
+ATerm main_0_0 (StrSL sl, ATerm t);
+ATerm main_0_0 (StrSL sl, ATerm t)
+{
+__tracing_table[__tracing_table_counter++] = "main_0_0";
+__tracing_table[__tracing_table_counter] = NULL;
+sl_decl(sl);
+{
+struct str_closure d_63 = { &(_Id) , sl };
+StrCL lifted0_cl = &(d_63);
+t = io_wrap_1_0(sl, lifted0_cl, t);
+if((t == NULL))
+goto fail0 ;
+}
+__tracing_table[--__tracing_table_counter] = NULL;
+return(t);
+fail0 :
+--__tracing_table_counter;
+return(NULL);
+}
+static void register_strategies (void)
+{
+int initial_size = 117;
+int max_load = 75;
+struct str_closure * closures;
+int closures_index = 0;
+if((strategy_table == NULL))
+strategy_table = ATtableCreate(initial_size, max_load);
+closures = (struct str_closure*) malloc((sizeof(struct str_closure) * 2));
+if((closures == NULL))
+{
+perror("malloc error for registration of dynamic strategies");
+exit(1);
+}
+closures[closures_index].fun = &(io_wrap_1_0);
+closures[closures_index].sl = NULL;
+SRTS_register_function((ATerm)ATmakeAppl0(ATmakeSymbol("io_wrap_1_0", 0, ATtrue)), &(closures[closures_index]));
+closures_index++;
+closures[closures_index].fun = &(main_0_0);
+closures[closures_index].sl = NULL;
+SRTS_register_function((ATerm)ATmakeAppl0(ATmakeSymbol("main_0_0", 0, ATtrue)), &(closures[closures_index]));
+closures_index++;
+}
+int main (int argc, char * argv [])
+{
+ATerm out_term;
+ATermList in_term;
+int i;
+ATinit(argc, argv, &(out_term));
+init_constructors();
+in_term = ATempty;
+for ( i = (argc - 1) ; (i >= 0) ; i-- )
+{
+in_term = ATinsert(in_term, (ATerm) ATmakeAppl0(ATmakeSymbol(argv[i], 0, ATtrue)));
+}
+SRTS_stratego_initialize();
+memset(__tracing_table, 0, (sizeof(unsigned short) * TRACING_TABLE_SIZE));
+__tracing_table_counter = 0;
+register_strategies();
+out_term = main_0_0(NULL, (ATerm) in_term);
+if((out_term != NULL))
+{
+ATfprintf(stdout, "%t\n", out_term);
+exit(0);
+}
+else
+{
+ATfprintf(stderr, "%s: rewriting failed, trace:\n", argv[0]);
+for ( i = 0 ; (__tracing_table[i] && (i < TRACING_TABLE_SIZE)) ; i++ )
+ATfprintf(stderr, "\t%s\n", __tracing_table[i]);
+exit(1);
+}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/identity/indentity.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/identity/indentity.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,3 @@
+../c/identity/indentity: \
+	/nix/store/ff5x3wn4j9x737sy9xxqjqy6h9jdavsp-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
+	./identity.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/test-parse-str/kaas.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/test-parse-str/kaas.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,6 @@
+module kaas
+
+imports libstratego-lib
+strategies
+  main =
+    io-wrap(id)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/test-parse-str/test-parse-str
==============================================================================
Binary file. No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/test-parse-str/test-parse-str.c
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/test-parse-str/test-parse-str.c	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,112 @@
+#include <srts/stratego.h>
+#include <stratego-lib/stratego-lib.h>
+void init_constructors (void)
+{
+}
+static Symbol sym_Nil_0;
+static void init_module_constructors (void)
+{
+sym_Nil_0 = ATmakeSymbol("Nil", 0, ATfalse);
+ATprotectSymbol(sym_Nil_0);
+}
+static ATerm term1;
+static ATerm term0;
+static void init_module_constant_terms (void)
+{
+ATprotect(&(term0));
+term0 = (ATerm) ATmakeAppl(ATmakeSymbol("kaas", 0, ATtrue));
+ATprotect(&(term1));
+term1 = term0;
+}
+#include <srts/init-stratego-application.h>
+extern const char * __tracing_table [];
+extern unsigned short __tracing_table_counter;
+ATerm parse_stratego_file_0_0 (StrSL sl, ATerm t);
+ATerm do_parse_0_0 (StrSL sl, ATerm t);
+ATerm main_0_0 (StrSL sl, ATerm t);
+ATerm do_parse_0_0 (StrSL sl, ATerm t)
+{
+__tracing_table[__tracing_table_counter++] = "do_parse_0_0";
+__tracing_table[__tracing_table_counter] = NULL;
+sl_decl(sl);
+t = term1;
+t = parse_stratego_file_0_0(sl, t);
+if((t == NULL))
+goto fail1 ;
+__tracing_table[--__tracing_table_counter] = NULL;
+return(t);
+fail1 :
+--__tracing_table_counter;
+return(NULL);
+}
+ATerm main_0_0 (StrSL sl, ATerm t)
+{
+__tracing_table[__tracing_table_counter++] = "main_0_0";
+__tracing_table[__tracing_table_counter] = NULL;
+sl_decl(sl);
+t = do_parse_0_0(sl, t);
+if((t == NULL))
+goto fail0 ;
+__tracing_table[--__tracing_table_counter] = NULL;
+return(t);
+fail0 :
+--__tracing_table_counter;
+return(NULL);
+}
+static void register_strategies (void)
+{
+int initial_size = 117;
+int max_load = 75;
+struct str_closure * closures;
+int closures_index = 0;
+if((strategy_table == NULL))
+strategy_table = ATtableCreate(initial_size, max_load);
+closures = (struct str_closure*) malloc((sizeof(struct str_closure) * 3));
+if((closures == NULL))
+{
+perror("malloc error for registration of dynamic strategies");
+exit(1);
+}
+closures[closures_index].fun = &(parse_stratego_file_0_0);
+closures[closures_index].sl = NULL;
+SRTS_register_function((ATerm)ATmakeAppl0(ATmakeSymbol("parse_stratego_file_0_0", 0, ATtrue)), &(closures[closures_index]));
+closures_index++;
+closures[closures_index].fun = &(do_parse_0_0);
+closures[closures_index].sl = NULL;
+SRTS_register_function((ATerm)ATmakeAppl0(ATmakeSymbol("do_parse_0_0", 0, ATtrue)), &(closures[closures_index]));
+closures_index++;
+closures[closures_index].fun = &(main_0_0);
+closures[closures_index].sl = NULL;
+SRTS_register_function((ATerm)ATmakeAppl0(ATmakeSymbol("main_0_0", 0, ATtrue)), &(closures[closures_index]));
+closures_index++;
+}
+int main (int argc, char * argv [])
+{
+ATerm out_term;
+ATermList in_term;
+int i;
+ATinit(argc, argv, &(out_term));
+init_constructors();
+in_term = ATempty;
+for ( i = (argc - 1) ; (i >= 0) ; i-- )
+{
+in_term = ATinsert(in_term, (ATerm) ATmakeAppl0(ATmakeSymbol(argv[i], 0, ATtrue)));
+}
+SRTS_stratego_initialize();
+memset(__tracing_table, 0, (sizeof(unsigned short) * TRACING_TABLE_SIZE));
+__tracing_table_counter = 0;
+register_strategies();
+out_term = main_0_0(NULL, (ATerm) in_term);
+if((out_term != NULL))
+{
+ATfprintf(stdout, "%t\n", out_term);
+exit(0);
+}
+else
+{
+ATfprintf(stderr, "%s: rewriting failed, trace:\n", argv[0]);
+for ( i = 0 ; (__tracing_table[i] && (i < TRACING_TABLE_SIZE)) ; i++ )
+ATfprintf(stderr, "\t%s\n", __tracing_table[i]);
+exit(1);
+}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/test-parse-str/test-parse-str.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/c/test-parse-str/test-parse-str.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,5 @@
+../c/test-parse-str/test-parse-str: \
+	/nix/store/ff5x3wn4j9x737sy9xxqjqy6h9jdavsp-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
+	/nix/store/ff5x3wn4j9x737sy9xxqjqy6h9jdavsp-strategoxt-0.18pre20635/share/libstratego-xtc.rtree \
+	/nix/store/ff5x3wn4j9x737sy9xxqjqy6h9jdavsp-strategoxt-0.18pre20635/share/libstrc.rtree \
+	./test-parse-str.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/foo.parsed
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/foo.parsed	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,61 @@
+CompilationUnit(
+  None()
+, []
+, [ ClassDec(
+      ClassDecHead([Public()], Id("Foo"), None(), None(), None())
+    , ClassBody(
+        [ MethodDec(
+            MethodDecHead(
+              [Public(), Static()]
+            , None()
+            , Void()
+            , Id("main")
+            , [ Param(
+                  []
+                , ArrayType(ClassOrInterfaceType(TypeName(Id("String")), None()))
+                , Id("ps")
+                )
+              ]
+            , None()
+            )
+          , Block(
+              [ If(
+                  Eq(
+                    ExprName(AmbName(Id("ps")), Id("length"))
+                  , Lit(Deci("0"))
+                  )
+                , ExprStm(
+                    Invoke(
+                      Method(
+                        MethodName(
+                          AmbName(AmbName(Id("System")), Id("err"))
+                        , Id("println")
+                        )
+                      )
+                    , [Lit(String([Chars("No arguments")]))]
+                    )
+                  )
+                , ExprStm(
+                    Invoke(
+                      Method(
+                        MethodName(
+                          AmbName(AmbName(Id("System")), Id("err"))
+                        , Id("println")
+                        )
+                      )
+                    , [ Plus(
+                          ExprName(AmbName(Id("ps")), Id("length"))
+                        , Lit(String([Chars(" arguments")]))
+                        )
+                      ]
+                    )
+                  )
+                )
+              ]
+            )
+          )
+        ]
+      )
+    )
+  ]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/foo2.parsed
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/foo2.parsed	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,26 @@
+CompilationUnit(
+  None()
+, []
+, [ ClassDec(
+      ClassDecHead([], Id("Foo2"), None(), None(), None())
+    , ClassBody(
+        [ StaticInit(
+            Block(
+              [ If(
+                  ExprName(Id("x"))
+                , ExprStm(Invoke(Method(MethodName(Id("foo"))), []))
+                )
+              , If(
+                  ExprName(Id("x"))
+                , Block(
+                    [ExprStm(Invoke(Method(MethodName(Id("foo"))), []))]
+                  )
+                )
+              ]
+            )
+          )
+        ]
+      )
+    )
+  ]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/inputs/Foo.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/inputs/Foo.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,12 @@
+package inputs;
+// parse-java -i Foo.java | pp-aterm > foo.parsed
+public class Foo
+{
+  public static void main(String[] ps)
+  {
+    if(ps.length == 0)
+      System.err.println("No arguments");
+    else
+      System.err.println(ps.length + " arguments");
+  }
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/inputs/Foo2.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/inputs/Foo2.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,19 @@
+package inputs;
+// parse-java -i Foo2.java | pp-aterm > foo2.parsed
+class Foo2
+{
+	static
+	{
+		boolean x = true;
+		if(x) 
+			foo();
+
+		if(x)
+		{
+			foo();
+		}
+	}
+	
+	static void foo() {}
+  
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/main/IdentityRunner.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/main/IdentityRunner.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,16 @@
+package main;
+
+import org.StrategoFileManager;
+
+import strategies.identity_lib.identity_lib;
+
+
+public class IdentityRunner {
+
+	public static void main(String[] args) {
+		String[] temp_args = new String[] { "-i", StrategoFileManager.BASE + "/src/java/foo.parsed" 
+											//, "-o", "str-output/output"
+											};
+		identity_lib.main(temp_args);
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/main/Wrap_blockRunner.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/main/Wrap_blockRunner.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,14 @@
+package main;
+
+import org.StrategoFileManager;
+
+import strategies.wrap_block_lib.wrap_block_lib;
+
+public class Wrap_blockRunner {
+	public static void main(String[] args) {
+		String[] temp_args = new String[] { "-i", StrategoFileManager.BASE + "/src/java/foo.parsed" 
+											, "-o", "str-output/output"
+											};
+		wrap_block_lib.main(temp_args);
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/main/Wrap_block_ppRunner.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/main/Wrap_block_ppRunner.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,18 @@
+package main;
+
+import org.StrategoFileManager;
+
+import strategies.wrap_block_pp_lib.wrap_block_pp_lib;
+
+
+public class Wrap_block_ppRunner {
+	
+	public static void main(String[] args) {
+		String[] temp_args = new String[] { "-i", StrategoFileManager.BASE + "/src/java/inputs/Foo2.java" 
+											//, "-o", "str-output/output"
+											};
+		wrap_block_pp_lib.main(temp_args);
+	}
+
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/Main.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,10 @@
+package strategies;
+/**
+ * This package contains a package for each stratego file.
+ * 
+ * @author rlindeman
+ *
+ */
+public class Main {
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/InteropRegisterer.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,35 @@
+package strategies.debuggable_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("unused") public class InteropRegisterer extends org.strategoxt.lang.InteropRegisterer 
+{ 
+  @Override public void register(org.spoofax.interpreter.core.IContext context, Context compiledContext)
+  { 
+    register(context, compiledContext, context.getVarScope());
+  }
+
+  @Override public void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader)
+  { 
+    registerLazy(context, compiledContext, classLoader, context.getVarScope());
+  }
+
+  private void register(org.spoofax.interpreter.core.IContext context, Context compiledContext, org.spoofax.interpreter.core.VarScope varScope)
+  { 
+    compiledContext.registerComponent("debuggable_lib");
+    debuggable_lib.init(compiledContext);
+    varScope.addSVar("main_0_0", new InteropSDefT(main_0_0.instance, context));
+  }
+
+  private void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader, org.spoofax.interpreter.core.VarScope varScope)
+  { 
+    compiledContext.registerComponent("debuggable_lib");
+    debuggable_lib.init(compiledContext);
+    varScope.addSVar("main_0_0", new InteropSDefT(classLoader, "strategies.debuggable_lib.main_0_0", context));
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/Main.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+package strategies.debuggable_lib;
+
+public class Main extends debuggable 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/debuggable.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/debuggable.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,139 @@
+package strategies.debuggable_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class debuggable  
+{ 
+  protected static final boolean TRACES_ENABLED = true;
+
+  protected static ITermFactory constantFactory;
+
+  private static Context initedContext;
+
+  private static boolean isIniting;
+
+  protected static IStrategoTerm const2;
+
+  protected static IStrategoTerm const1;
+
+  protected static IStrategoTerm const0;
+
+  public static IStrategoConstructor _consConc_2;
+
+  public static IStrategoConstructor _consNone_0;
+
+  public static IStrategoConstructor _consSome_1;
+
+  public static Context init(Context context)
+  { 
+    synchronized(debuggable.class)
+    { 
+      if(isIniting)
+        return null;
+      isIniting = true;
+      ITermFactory termFactory = context.getFactory();
+      if(constantFactory == null)
+      { 
+        initConstructors(termFactory);
+        initConstants(termFactory);
+      }
+      if(context != initedContext)
+      { 
+        org.strategoxt.stratego_lib.Main.init(context);
+        context.registerComponent("debuggable_lib");
+      }
+      initedContext = context;
+      constantFactory = termFactory;
+      isIniting = false;
+      return context;
+    }
+  }
+
+  public static Context init()
+  { 
+    return init(new Context());
+  }
+
+  public static void main(String args[])
+  { 
+    Context context = init();
+    context.setStandAlone(true);
+    try
+    { 
+      IStrategoTerm result;
+      try
+      { 
+        result = context.invokeStrategyCLI(main_0_0.instance, "debuggable", args);
+      }
+      finally
+      { 
+        context.getIOAgent().closeAllFiles();
+      }
+      if(result == null)
+      { 
+        System.err.println("debuggable" + (TRACES_ENABLED ? ": rewriting failed, trace:" : ": rewriting failed"));
+        context.printStackTrace();
+        context.setStandAlone(false);
+        System.exit(1);
+      }
+      else
+      { 
+        System.out.println(result);
+        context.setStandAlone(false);
+        System.exit(0);
+      }
+    }
+    catch(StrategoExit exit)
+    { 
+      context.setStandAlone(false);
+      System.exit(exit.getValue());
+    }
+  }
+
+  public static IStrategoTerm mainNoExit(String ... args) throws StrategoExit
+  { 
+    return mainNoExit(new Context(), args);
+  }
+
+  public static IStrategoTerm mainNoExit(Context context, String ... args) throws StrategoExit
+  { 
+    try
+    { 
+      init(context);
+      return context.invokeStrategyCLI(main_0_0.instance, "debuggable", args);
+    }
+    finally
+    { 
+      context.getIOAgent().closeAllFiles();
+    }
+  }
+
+  public static Strategy getMainStrategy()
+  { 
+    return main_0_0.instance;
+  }
+
+  public static void initConstructors(ITermFactory termFactory)
+  { 
+    _consConc_2 = termFactory.makeConstructor("Conc", 2);
+    _consNone_0 = termFactory.makeConstructor("None", 0);
+    _consSome_1 = termFactory.makeConstructor("Some", 1);
+  }
+
+  public static void initConstants(ITermFactory termFactory)
+  { 
+    const0 = termFactory.makeString("main");
+    const1 = termFactory.makeString("s-enter: ");
+    const2 = termFactory.makeString("s-exit: ");
+  }
+
+  public static void registerInterop(org.spoofax.interpreter.core.IContext context, Context compiledContext)
+  { 
+    new InteropRegisterer().registerLazy(context, compiledContext, InteropRegisterer.class.getClassLoader());
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/debuggable.java.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/debuggable.java.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,5 @@
+../java/strategies/debuggable_lib/debuggable.java: \
+	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
+	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/stratego-lib/libstrategolib.rtree \
+	/home/rlindeman/workspace/short-examples/src/s-libraries/stratego-debug-lib.str \
+	./debuggable.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/debuggable_lib.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/debuggable_lib.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+package strategies.debuggable_lib;
+
+public class debuggable_lib extends Main 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/lifted6.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/lifted6.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,24 @@
+package strategies.debuggable_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") final class lifted6 extends Strategy 
+{ 
+  public static final lifted6 instance = new lifted6();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    Fail2:
+    { 
+      term = debuggable_lib.const1;
+      if(true)
+        return term;
+    }
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/lifted9.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/lifted9.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,24 @@
+package strategies.debuggable_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") final class lifted9 extends Strategy 
+{ 
+  public static final lifted9 instance = new lifted9();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    Fail1:
+    { 
+      term = debuggable_lib.const2;
+      if(true)
+        return term;
+    }
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/main_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/debuggable_lib/main_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,53 @@
+package strategies.debuggable_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class main_0_0 extends Strategy 
+{ 
+  public static main_0_0 instance = new main_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("main_0_0");
+    Fail0:
+    { 
+      IStrategoTerm g_0 = null;
+      IStrategoTerm h_0 = null;
+      IStrategoTerm i_0 = null;
+      IStrategoTerm j_0 = null;
+      IStrategoTerm l_66 = null;
+      IStrategoTerm o_66 = null;
+      IStrategoTerm m_66 = null;
+      IStrategoTerm p_66 = null;
+      IStrategoTerm s_66 = null;
+      IStrategoTerm q_66 = null;
+      h_0 = term;
+      g_0 = debuggable_lib.const0;
+      o_66 = h_0;
+      l_66 = g_0;
+      m_66 = o_66;
+      term = debug_1_0.instance.invoke(context, l_66, lifted6.instance);
+      if(term == null)
+        break Fail0;
+      j_0 = m_66;
+      i_0 = debuggable_lib.const0;
+      s_66 = j_0;
+      p_66 = i_0;
+      q_66 = s_66;
+      term = debug_1_0.instance.invoke(context, p_66, lifted9.instance);
+      if(term == null)
+        break Fail0;
+      term = q_66;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/InteropRegisterer.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,35 @@
+package strategies.identity_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("unused") public class InteropRegisterer extends org.strategoxt.lang.InteropRegisterer 
+{ 
+  @Override public void register(org.spoofax.interpreter.core.IContext context, Context compiledContext)
+  { 
+    register(context, compiledContext, context.getVarScope());
+  }
+
+  @Override public void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader)
+  { 
+    registerLazy(context, compiledContext, classLoader, context.getVarScope());
+  }
+
+  private void register(org.spoofax.interpreter.core.IContext context, Context compiledContext, org.spoofax.interpreter.core.VarScope varScope)
+  { 
+    compiledContext.registerComponent("identity_lib");
+    identity_lib.init(compiledContext);
+    varScope.addSVar("main_0_0", new InteropSDefT(main_0_0.instance, context));
+  }
+
+  private void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader, org.spoofax.interpreter.core.VarScope varScope)
+  { 
+    compiledContext.registerComponent("identity_lib");
+    identity_lib.init(compiledContext);
+    varScope.addSVar("main_0_0", new InteropSDefT(classLoader, "strategies.identity_lib.main_0_0", context));
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/Main.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+package strategies.identity_lib;
+
+public class Main extends identity 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/identity.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/identity.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,129 @@
+package strategies.identity_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class identity  
+{ 
+  protected static final boolean TRACES_ENABLED = true;
+
+  protected static ITermFactory constantFactory;
+
+  private static Context initedContext;
+
+  private static boolean isIniting;
+
+  public static IStrategoConstructor _consConc_2;
+
+  public static IStrategoConstructor _consNone_0;
+
+  public static IStrategoConstructor _consSome_1;
+
+  public static Context init(Context context)
+  { 
+    synchronized(identity.class)
+    { 
+      if(isIniting)
+        return null;
+      isIniting = true;
+      ITermFactory termFactory = context.getFactory();
+      if(constantFactory == null)
+      { 
+        initConstructors(termFactory);
+        initConstants(termFactory);
+      }
+      if(context != initedContext)
+      { 
+        org.strategoxt.stratego_lib.Main.init(context);
+        context.registerComponent("identity_lib");
+      }
+      initedContext = context;
+      constantFactory = termFactory;
+      isIniting = false;
+      return context;
+    }
+  }
+
+  public static Context init()
+  { 
+    return init(new Context());
+  }
+
+  public static void main(String args[])
+  { 
+    Context context = init();
+    context.setStandAlone(true);
+    try
+    { 
+      IStrategoTerm result;
+      try
+      { 
+        result = context.invokeStrategyCLI(main_0_0.instance, "identity", args);
+      }
+      finally
+      { 
+        context.getIOAgent().closeAllFiles();
+      }
+      if(result == null)
+      { 
+        System.err.println("identity" + (TRACES_ENABLED ? ": rewriting failed, trace:" : ": rewriting failed"));
+        context.printStackTrace();
+        context.setStandAlone(false);
+        System.exit(1);
+      }
+      else
+      { 
+        System.out.println(result);
+        context.setStandAlone(false);
+        System.exit(0);
+      }
+    }
+    catch(StrategoExit exit)
+    { 
+      context.setStandAlone(false);
+      System.exit(exit.getValue());
+    }
+  }
+
+  public static IStrategoTerm mainNoExit(String ... args) throws StrategoExit
+  { 
+    return mainNoExit(new Context(), args);
+  }
+
+  public static IStrategoTerm mainNoExit(Context context, String ... args) throws StrategoExit
+  { 
+    try
+    { 
+      init(context);
+      return context.invokeStrategyCLI(main_0_0.instance, "identity", args);
+    }
+    finally
+    { 
+      context.getIOAgent().closeAllFiles();
+    }
+  }
+
+  public static Strategy getMainStrategy()
+  { 
+    return main_0_0.instance;
+  }
+
+  public static void initConstructors(ITermFactory termFactory)
+  { 
+    _consConc_2 = termFactory.makeConstructor("Conc", 2);
+    _consNone_0 = termFactory.makeConstructor("None", 0);
+    _consSome_1 = termFactory.makeConstructor("Some", 1);
+  }
+
+  public static void initConstants(ITermFactory termFactory)
+  { }
+
+  public static void registerInterop(org.spoofax.interpreter.core.IContext context, Context compiledContext)
+  { 
+    new InteropRegisterer().registerLazy(context, compiledContext, InteropRegisterer.class.getClassLoader());
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/identity.java.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/identity.java.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,3 @@
+../java/strategies/identity_lib/identity.java: \
+	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
+	./identity.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/identity_lib.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/identity_lib.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+package strategies.identity_lib;
+
+public class identity_lib extends Main 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/main_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/identity_lib/main_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,29 @@
+package strategies.identity_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class main_0_0 extends Strategy 
+{ 
+  public static main_0_0 instance = new main_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("main_0_0");
+    Fail0:
+    { 
+      term = io_wrap_1_0.instance.invoke(context, term, _Id.instance);
+      if(term == null)
+        break Fail0;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/InteropRegisterer.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,37 @@
+package strategies.test_prop_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("unused") public class InteropRegisterer extends org.strategoxt.lang.InteropRegisterer 
+{ 
+  @Override public void register(org.spoofax.interpreter.core.IContext context, Context compiledContext)
+  { 
+    register(context, compiledContext, context.getVarScope());
+  }
+
+  @Override public void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader)
+  { 
+    registerLazy(context, compiledContext, classLoader, context.getVarScope());
+  }
+
+  private void register(org.spoofax.interpreter.core.IContext context, Context compiledContext, org.spoofax.interpreter.core.VarScope varScope)
+  { 
+    compiledContext.registerComponent("test_prop_lib");
+    test_prop_lib.init(compiledContext);
+    varScope.addSVar("main_0_0", new InteropSDefT(main_0_0.instance, context));
+    varScope.addSVar("eval_0_0", new InteropSDefT(eval_0_0.instance, context));
+  }
+
+  private void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader, org.spoofax.interpreter.core.VarScope varScope)
+  { 
+    compiledContext.registerComponent("test_prop_lib");
+    test_prop_lib.init(compiledContext);
+    varScope.addSVar("main_0_0", new InteropSDefT(classLoader, "strategies.test_prop_lib.main_0_0", context));
+    varScope.addSVar("eval_0_0", new InteropSDefT(classLoader, "strategies.test_prop_lib.eval_0_0", context));
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/Main.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+package strategies.test_prop_lib;
+
+public class Main extends test_prop 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/eval_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/eval_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,29 @@
+package strategies.test_prop_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class eval_0_0 extends Strategy 
+{ 
+  public static eval_0_0 instance = new eval_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("eval_0_0");
+    Fail1:
+    { 
+      term = v_66.instance.invoke(context, term, w_66.instance);
+      if(term == null)
+        break Fail1;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/lifted9.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/lifted9.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,26 @@
+package strategies.test_prop_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") final class lifted9 extends Strategy 
+{ 
+  Strategy x_66;
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    Fail21:
+    { 
+      term = v_66.instance.invoke(context, term, x_66);
+      if(term == null)
+        break Fail21;
+      if(true)
+        return term;
+    }
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/main_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/main_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,29 @@
+package strategies.test_prop_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class main_0_0 extends Strategy 
+{ 
+  public static main_0_0 instance = new main_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("main_0_0");
+    Fail0:
+    { 
+      term = io_wrap_1_0.instance.invoke(context, term, eval_0_0.instance);
+      if(term == null)
+        break Fail0;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/test_prop.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/test_prop.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,157 @@
+package strategies.test_prop_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class test_prop  
+{ 
+  protected static final boolean TRACES_ENABLED = true;
+
+  protected static ITermFactory constantFactory;
+
+  private static Context initedContext;
+
+  private static boolean isIniting;
+
+  protected static IStrategoTerm constTrue0;
+
+  protected static IStrategoTerm constFalse0;
+
+  public static IStrategoConstructor _consConc_2;
+
+  public static IStrategoConstructor _consNone_0;
+
+  public static IStrategoConstructor _consSome_1;
+
+  public static IStrategoConstructor _consEq_2;
+
+  public static IStrategoConstructor _consImpl_2;
+
+  public static IStrategoConstructor _consOr_2;
+
+  public static IStrategoConstructor _consAnd_2;
+
+  public static IStrategoConstructor _consNot_1;
+
+  public static IStrategoConstructor _consTrue_0;
+
+  public static IStrategoConstructor _consFalse_0;
+
+  public static Context init(Context context)
+  { 
+    synchronized(test_prop.class)
+    { 
+      if(isIniting)
+        return null;
+      isIniting = true;
+      ITermFactory termFactory = context.getFactory();
+      if(constantFactory == null)
+      { 
+        initConstructors(termFactory);
+        initConstants(termFactory);
+      }
+      if(context != initedContext)
+      { 
+        org.strategoxt.stratego_lib.Main.init(context);
+        context.registerComponent("test_prop_lib");
+      }
+      initedContext = context;
+      constantFactory = termFactory;
+      isIniting = false;
+      return context;
+    }
+  }
+
+  public static Context init()
+  { 
+    return init(new Context());
+  }
+
+  public static void main(String args[])
+  { 
+    Context context = init();
+    context.setStandAlone(true);
+    try
+    { 
+      IStrategoTerm result;
+      try
+      { 
+        result = context.invokeStrategyCLI(main_0_0.instance, "test_prop", args);
+      }
+      finally
+      { 
+        context.getIOAgent().closeAllFiles();
+      }
+      if(result == null)
+      { 
+        System.err.println("test_prop" + (TRACES_ENABLED ? ": rewriting failed, trace:" : ": rewriting failed"));
+        context.printStackTrace();
+        context.setStandAlone(false);
+        System.exit(1);
+      }
+      else
+      { 
+        System.out.println(result);
+        context.setStandAlone(false);
+        System.exit(0);
+      }
+    }
+    catch(StrategoExit exit)
+    { 
+      context.setStandAlone(false);
+      System.exit(exit.getValue());
+    }
+  }
+
+  public static IStrategoTerm mainNoExit(String ... args) throws StrategoExit
+  { 
+    return mainNoExit(new Context(), args);
+  }
+
+  public static IStrategoTerm mainNoExit(Context context, String ... args) throws StrategoExit
+  { 
+    try
+    { 
+      init(context);
+      return context.invokeStrategyCLI(main_0_0.instance, "test_prop", args);
+    }
+    finally
+    { 
+      context.getIOAgent().closeAllFiles();
+    }
+  }
+
+  public static Strategy getMainStrategy()
+  { 
+    return main_0_0.instance;
+  }
+
+  public static void initConstructors(ITermFactory termFactory)
+  { 
+    _consConc_2 = termFactory.makeConstructor("Conc", 2);
+    _consNone_0 = termFactory.makeConstructor("None", 0);
+    _consSome_1 = termFactory.makeConstructor("Some", 1);
+    _consEq_2 = termFactory.makeConstructor("Eq", 2);
+    _consImpl_2 = termFactory.makeConstructor("Impl", 2);
+    _consOr_2 = termFactory.makeConstructor("Or", 2);
+    _consAnd_2 = termFactory.makeConstructor("And", 2);
+    _consNot_1 = termFactory.makeConstructor("Not", 1);
+    _consTrue_0 = termFactory.makeConstructor("True", 0);
+    _consFalse_0 = termFactory.makeConstructor("False", 0);
+  }
+
+  public static void initConstants(ITermFactory termFactory)
+  { 
+    constFalse0 = termFactory.makeAppl(test_prop._consFalse_0, NO_TERMS);
+    constTrue0 = termFactory.makeAppl(test_prop._consTrue_0, NO_TERMS);
+  }
+
+  public static void registerInterop(org.spoofax.interpreter.core.IContext context, Context compiledContext)
+  { 
+    new InteropRegisterer().registerLazy(context, compiledContext, InteropRegisterer.class.getClassLoader());
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/test_prop.java.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/test_prop.java.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+../java/strategies/test_prop_lib/test_prop.java: \
+	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
+	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/stratego-lib/libstrategolib.rtree \
+	./test-prop.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/test_prop_lib.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/test_prop_lib.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+package strategies.test_prop_lib;
+
+public class test_prop_lib extends Main 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/v_66.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/v_66.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,31 @@
+package strategies.test_prop_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") final class v_66 extends Strategy 
+{ 
+  public static final v_66 instance = new v_66();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term, Strategy x_66)
+  { 
+    Fail20:
+    { 
+      lifted9 lifted94 = new lifted9();
+      lifted94.x_66 = x_66;
+      term = SRTS_all.instance.invoke(context, term, lifted94);
+      if(term == null)
+        break Fail20;
+      term = x_66.invoke(context, term);
+      if(term == null)
+        break Fail20;
+      if(true)
+        return term;
+    }
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/w_66.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/test_prop_lib/w_66.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,327 @@
+package strategies.test_prop_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") final class w_66 extends Strategy 
+{ 
+  public static final w_66 instance = new w_66();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    ITermFactory termFactory = context.getFactory();
+    Fail2:
+    { 
+      IStrategoTerm term0 = term;
+      Success0:
+      { 
+        Fail3:
+        { 
+          IStrategoTerm term1 = term;
+          IStrategoConstructor cons0 = term.getTermType() == IStrategoTerm.APPL ? ((IStrategoAppl)term).getConstructor() : null;
+          Success1:
+          { 
+            if(cons0 == test_prop._consNot_1)
+            { 
+              Fail4:
+              { 
+                IStrategoTerm arg0 = term.getSubterm(0);
+                if(arg0.getTermType() != IStrategoTerm.APPL || test_prop._consTrue_0 != ((IStrategoAppl)arg0).getConstructor())
+                  break Fail4;
+                term = test_prop_lib.constFalse0;
+                if(true)
+                  break Success1;
+              }
+              term = term1;
+            }
+            Success2:
+            { 
+              if(cons0 == test_prop._consNot_1)
+              { 
+                Fail5:
+                { 
+                  IStrategoTerm arg1 = term.getSubterm(0);
+                  if(arg1.getTermType() != IStrategoTerm.APPL || test_prop._consFalse_0 != ((IStrategoAppl)arg1).getConstructor())
+                    break Fail5;
+                  term = test_prop_lib.constTrue0;
+                  if(true)
+                    break Success2;
+                }
+                term = term1;
+              }
+              Success3:
+              { 
+                if(cons0 == test_prop._consAnd_2)
+                { 
+                  Fail6:
+                  { 
+                    IStrategoTerm g_66 = null;
+                    IStrategoTerm arg2 = term.getSubterm(0);
+                    if(arg2.getTermType() != IStrategoTerm.APPL || test_prop._consTrue_0 != ((IStrategoAppl)arg2).getConstructor())
+                      break Fail6;
+                    g_66 = term.getSubterm(1);
+                    term = g_66;
+                    if(true)
+                      break Success3;
+                  }
+                  term = term1;
+                }
+                Success4:
+                { 
+                  if(cons0 == test_prop._consAnd_2)
+                  { 
+                    Fail7:
+                    { 
+                      IStrategoTerm h_66 = null;
+                      h_66 = term.getSubterm(0);
+                      IStrategoTerm arg3 = term.getSubterm(1);
+                      if(arg3.getTermType() != IStrategoTerm.APPL || test_prop._consTrue_0 != ((IStrategoAppl)arg3).getConstructor())
+                        break Fail7;
+                      term = h_66;
+                      if(true)
+                        break Success4;
+                    }
+                    term = term1;
+                  }
+                  Success5:
+                  { 
+                    if(cons0 == test_prop._consAnd_2)
+                    { 
+                      Fail8:
+                      { 
+                        IStrategoTerm arg4 = term.getSubterm(0);
+                        if(arg4.getTermType() != IStrategoTerm.APPL || test_prop._consFalse_0 != ((IStrategoAppl)arg4).getConstructor())
+                          break Fail8;
+                        term = test_prop_lib.constFalse0;
+                        if(true)
+                          break Success5;
+                      }
+                      term = term1;
+                    }
+                    Success6:
+                    { 
+                      if(cons0 == test_prop._consAnd_2)
+                      { 
+                        Fail9:
+                        { 
+                          IStrategoTerm arg5 = term.getSubterm(1);
+                          if(arg5.getTermType() != IStrategoTerm.APPL || test_prop._consFalse_0 != ((IStrategoAppl)arg5).getConstructor())
+                            break Fail9;
+                          term = test_prop_lib.constFalse0;
+                          if(true)
+                            break Success6;
+                        }
+                        term = term1;
+                      }
+                      Success7:
+                      { 
+                        if(cons0 == test_prop._consOr_2)
+                        { 
+                          Fail10:
+                          { 
+                            IStrategoTerm arg6 = term.getSubterm(0);
+                            if(arg6.getTermType() != IStrategoTerm.APPL || test_prop._consTrue_0 != ((IStrategoAppl)arg6).getConstructor())
+                              break Fail10;
+                            term = test_prop_lib.constTrue0;
+                            if(true)
+                              break Success7;
+                          }
+                          term = term1;
+                        }
+                        Success8:
+                        { 
+                          if(cons0 == test_prop._consOr_2)
+                          { 
+                            Fail11:
+                            { 
+                              IStrategoTerm arg7 = term.getSubterm(1);
+                              if(arg7.getTermType() != IStrategoTerm.APPL || test_prop._consTrue_0 != ((IStrategoAppl)arg7).getConstructor())
+                                break Fail11;
+                              term = test_prop_lib.constTrue0;
+                              if(true)
+                                break Success8;
+                            }
+                            term = term1;
+                          }
+                          Success9:
+                          { 
+                            if(cons0 == test_prop._consOr_2)
+                            { 
+                              Fail12:
+                              { 
+                                IStrategoTerm m_66 = null;
+                                IStrategoTerm arg8 = term.getSubterm(0);
+                                if(arg8.getTermType() != IStrategoTerm.APPL || test_prop._consFalse_0 != ((IStrategoAppl)arg8).getConstructor())
+                                  break Fail12;
+                                m_66 = term.getSubterm(1);
+                                term = m_66;
+                                if(true)
+                                  break Success9;
+                              }
+                              term = term1;
+                            }
+                            Success10:
+                            { 
+                              if(cons0 == test_prop._consOr_2)
+                              { 
+                                Fail13:
+                                { 
+                                  IStrategoTerm n_66 = null;
+                                  n_66 = term.getSubterm(0);
+                                  IStrategoTerm arg9 = term.getSubterm(1);
+                                  if(arg9.getTermType() != IStrategoTerm.APPL || test_prop._consFalse_0 != ((IStrategoAppl)arg9).getConstructor())
+                                    break Fail13;
+                                  term = n_66;
+                                  if(true)
+                                    break Success10;
+                                }
+                                term = term1;
+                              }
+                              Success11:
+                              { 
+                                if(cons0 == test_prop._consImpl_2)
+                                { 
+                                  Fail14:
+                                  { 
+                                    IStrategoTerm o_66 = null;
+                                    IStrategoTerm arg10 = term.getSubterm(0);
+                                    if(arg10.getTermType() != IStrategoTerm.APPL || test_prop._consTrue_0 != ((IStrategoAppl)arg10).getConstructor())
+                                      break Fail14;
+                                    o_66 = term.getSubterm(1);
+                                    term = o_66;
+                                    if(true)
+                                      break Success11;
+                                  }
+                                  term = term1;
+                                }
+                                Success12:
+                                { 
+                                  if(cons0 == test_prop._consImpl_2)
+                                  { 
+                                    Fail15:
+                                    { 
+                                      IStrategoTerm arg11 = term.getSubterm(1);
+                                      if(arg11.getTermType() != IStrategoTerm.APPL || test_prop._consTrue_0 != ((IStrategoAppl)arg11).getConstructor())
+                                        break Fail15;
+                                      term = test_prop_lib.constTrue0;
+                                      if(true)
+                                        break Success12;
+                                    }
+                                    term = term1;
+                                  }
+                                  Success13:
+                                  { 
+                                    if(cons0 == test_prop._consImpl_2)
+                                    { 
+                                      Fail16:
+                                      { 
+                                        IStrategoTerm arg12 = term.getSubterm(0);
+                                        if(arg12.getTermType() != IStrategoTerm.APPL || test_prop._consFalse_0 != ((IStrategoAppl)arg12).getConstructor())
+                                          break Fail16;
+                                        term = test_prop_lib.constTrue0;
+                                        if(true)
+                                          break Success13;
+                                      }
+                                      term = term1;
+                                    }
+                                    Success14:
+                                    { 
+                                      if(cons0 == test_prop._consEq_2)
+                                      { 
+                                        Fail17:
+                                        { 
+                                          IStrategoTerm r_66 = null;
+                                          IStrategoTerm arg13 = term.getSubterm(0);
+                                          if(arg13.getTermType() != IStrategoTerm.APPL || test_prop._consFalse_0 != ((IStrategoAppl)arg13).getConstructor())
+                                            break Fail17;
+                                          r_66 = term.getSubterm(1);
+                                          term = termFactory.makeAppl(test_prop._consNot_1, new IStrategoTerm[]{r_66});
+                                          term = this.invoke(context, term);
+                                          if(term == null)
+                                            break Fail17;
+                                          if(true)
+                                            break Success14;
+                                        }
+                                        term = term1;
+                                      }
+                                      Success15:
+                                      { 
+                                        if(cons0 == test_prop._consEq_2)
+                                        { 
+                                          Fail18:
+                                          { 
+                                            IStrategoTerm s_66 = null;
+                                            s_66 = term.getSubterm(0);
+                                            IStrategoTerm arg14 = term.getSubterm(1);
+                                            if(arg14.getTermType() != IStrategoTerm.APPL || test_prop._consFalse_0 != ((IStrategoAppl)arg14).getConstructor())
+                                              break Fail18;
+                                            term = termFactory.makeAppl(test_prop._consNot_1, new IStrategoTerm[]{s_66});
+                                            term = this.invoke(context, term);
+                                            if(term == null)
+                                              break Fail18;
+                                            if(true)
+                                              break Success15;
+                                          }
+                                          term = term1;
+                                        }
+                                        Success16:
+                                        { 
+                                          if(cons0 == test_prop._consEq_2)
+                                          { 
+                                            Fail19:
+                                            { 
+                                              IStrategoTerm t_66 = null;
+                                              IStrategoTerm arg15 = term.getSubterm(0);
+                                              if(arg15.getTermType() != IStrategoTerm.APPL || test_prop._consTrue_0 != ((IStrategoAppl)arg15).getConstructor())
+                                                break Fail19;
+                                              t_66 = term.getSubterm(1);
+                                              term = t_66;
+                                              if(true)
+                                                break Success16;
+                                            }
+                                            term = term1;
+                                          }
+                                          if(cons0 == test_prop._consEq_2)
+                                          { 
+                                            IStrategoTerm u_66 = null;
+                                            u_66 = term.getSubterm(0);
+                                            IStrategoTerm arg16 = term.getSubterm(1);
+                                            if(arg16.getTermType() != IStrategoTerm.APPL || test_prop._consTrue_0 != ((IStrategoAppl)arg16).getConstructor())
+                                              break Fail3;
+                                            term = u_66;
+                                          }
+                                          else
+                                          { 
+                                            break Fail3;
+                                          }
+                                        }
+                                      }
+                                    }
+                                  }
+                                }
+                              }
+                            }
+                          }
+                        }
+                      }
+                    }
+                  }
+                }
+              }
+            }
+          }
+          if(true)
+            break Success0;
+        }
+        term = term0;
+      }
+      if(true)
+        return term;
+    }
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/$Add$Block_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/$Add$Block_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,33 @@
+package strategies.wrap_block_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class $Add$Block_0_0 extends Strategy 
+{ 
+  public static $Add$Block_0_0 instance = new $Add$Block_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    ITermFactory termFactory = context.getFactory();
+    Fail2:
+    { 
+      IStrategoTerm a_0 = null;
+      IStrategoTerm b_0 = null;
+      if(term.getTermType() != IStrategoTerm.APPL || wrap_block._consIf_2 != ((IStrategoAppl)term).getConstructor())
+        break Fail2;
+      a_0 = term.getSubterm(0);
+      b_0 = term.getSubterm(1);
+      term = termFactory.makeAppl(wrap_block._consIf_2, new IStrategoTerm[]{a_0, termFactory.makeAppl(wrap_block._consBlock_1, new IStrategoTerm[]{(IStrategoTerm)termFactory.makeListCons(b_0, (IStrategoList)wrap_block_lib.constNil0)})});
+      if(true)
+        return term;
+    }
+    context.push("AddBlock_0_0");
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/InteropRegisterer.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,39 @@
+package strategies.wrap_block_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("unused") public class InteropRegisterer extends org.strategoxt.lang.InteropRegisterer 
+{ 
+  @Override public void register(org.spoofax.interpreter.core.IContext context, Context compiledContext)
+  { 
+    register(context, compiledContext, context.getVarScope());
+  }
+
+  @Override public void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader)
+  { 
+    registerLazy(context, compiledContext, classLoader, context.getVarScope());
+  }
+
+  private void register(org.spoofax.interpreter.core.IContext context, Context compiledContext, org.spoofax.interpreter.core.VarScope varScope)
+  { 
+    compiledContext.registerComponent("wrap_block_lib");
+    wrap_block_lib.init(compiledContext);
+    varScope.addSVar("main_0_0", new InteropSDefT(main_0_0.instance, context));
+    varScope.addSVar("add_block_0_0", new InteropSDefT(add_block_0_0.instance, context));
+    varScope.addSVar("AddBlock_0_0", new InteropSDefT($Add$Block_0_0.instance, context));
+  }
+
+  private void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader, org.spoofax.interpreter.core.VarScope varScope)
+  { 
+    compiledContext.registerComponent("wrap_block_lib");
+    wrap_block_lib.init(compiledContext);
+    varScope.addSVar("main_0_0", new InteropSDefT(classLoader, "strategies.wrap_block_lib.main_0_0", context));
+    varScope.addSVar("add_block_0_0", new InteropSDefT(classLoader, "strategies.wrap_block_lib.add_block_0_0", context));
+    varScope.addSVar("AddBlock_0_0", new InteropSDefT(classLoader, "strategies.wrap_block_lib.$Add$Block_0_0", context));
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/Main.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+package strategies.wrap_block_lib;
+
+public class Main extends wrap_block 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/add_block_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/add_block_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,29 @@
+package strategies.wrap_block_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class add_block_0_0 extends Strategy 
+{ 
+  public static add_block_0_0 instance = new add_block_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("add_block_0_0");
+    Fail1:
+    { 
+      term = topdown_1_0.instance.invoke(context, term, lifted9.instance);
+      if(term == null)
+        break Fail1;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/lifted9.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/lifted9.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,26 @@
+package strategies.wrap_block_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") final class lifted9 extends Strategy 
+{ 
+  public static final lifted9 instance = new lifted9();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    Fail3:
+    { 
+      term = try_1_0.instance.invoke(context, term, $Add$Block_0_0.instance);
+      if(term == null)
+        break Fail3;
+      if(true)
+        return term;
+    }
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/main_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/main_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,29 @@
+package strategies.wrap_block_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class main_0_0 extends Strategy 
+{ 
+  public static main_0_0 instance = new main_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("main_0_0");
+    Fail0:
+    { 
+      term = io_wrap_1_0.instance.invoke(context, term, add_block_0_0.instance);
+      if(term == null)
+        break Fail0;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/wrap_block.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/wrap_block.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,139 @@
+package strategies.wrap_block_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class wrap_block  
+{ 
+  protected static final boolean TRACES_ENABLED = true;
+
+  protected static ITermFactory constantFactory;
+
+  private static Context initedContext;
+
+  private static boolean isIniting;
+
+  protected static IStrategoTerm constNil0;
+
+  public static IStrategoConstructor _consConc_2;
+
+  public static IStrategoConstructor _consNone_0;
+
+  public static IStrategoConstructor _consSome_1;
+
+  protected static IStrategoConstructor _consBlock_1;
+
+  protected static IStrategoConstructor _consIf_2;
+
+  public static Context init(Context context)
+  { 
+    synchronized(wrap_block.class)
+    { 
+      if(isIniting)
+        return null;
+      isIniting = true;
+      ITermFactory termFactory = context.getFactory();
+      if(constantFactory == null)
+      { 
+        initConstructors(termFactory);
+        initConstants(termFactory);
+      }
+      if(context != initedContext)
+      { 
+        org.strategoxt.stratego_lib.Main.init(context);
+        context.registerComponent("wrap_block_lib");
+      }
+      initedContext = context;
+      constantFactory = termFactory;
+      isIniting = false;
+      return context;
+    }
+  }
+
+  public static Context init()
+  { 
+    return init(new Context());
+  }
+
+  public static void main(String args[])
+  { 
+    Context context = init();
+    context.setStandAlone(true);
+    try
+    { 
+      IStrategoTerm result;
+      try
+      { 
+        result = context.invokeStrategyCLI(main_0_0.instance, "wrap_block", args);
+      }
+      finally
+      { 
+        context.getIOAgent().closeAllFiles();
+      }
+      if(result == null)
+      { 
+        System.err.println("wrap_block" + (TRACES_ENABLED ? ": rewriting failed, trace:" : ": rewriting failed"));
+        context.printStackTrace();
+        context.setStandAlone(false);
+        System.exit(1);
+      }
+      else
+      { 
+        System.out.println(result);
+        context.setStandAlone(false);
+        System.exit(0);
+      }
+    }
+    catch(StrategoExit exit)
+    { 
+      context.setStandAlone(false);
+      System.exit(exit.getValue());
+    }
+  }
+
+  public static IStrategoTerm mainNoExit(String ... args) throws StrategoExit
+  { 
+    return mainNoExit(new Context(), args);
+  }
+
+  public static IStrategoTerm mainNoExit(Context context, String ... args) throws StrategoExit
+  { 
+    try
+    { 
+      init(context);
+      return context.invokeStrategyCLI(main_0_0.instance, "wrap_block", args);
+    }
+    finally
+    { 
+      context.getIOAgent().closeAllFiles();
+    }
+  }
+
+  public static Strategy getMainStrategy()
+  { 
+    return main_0_0.instance;
+  }
+
+  public static void initConstructors(ITermFactory termFactory)
+  { 
+    _consConc_2 = termFactory.makeConstructor("Conc", 2);
+    _consNone_0 = termFactory.makeConstructor("None", 0);
+    _consSome_1 = termFactory.makeConstructor("Some", 1);
+    _consBlock_1 = termFactory.makeConstructor("Block", 1);
+    _consIf_2 = termFactory.makeConstructor("If", 2);
+  }
+
+  public static void initConstants(ITermFactory termFactory)
+  { 
+    constNil0 = (IStrategoTerm)termFactory.makeList();
+  }
+
+  public static void registerInterop(org.spoofax.interpreter.core.IContext context, Context compiledContext)
+  { 
+    new InteropRegisterer().registerLazy(context, compiledContext, InteropRegisterer.class.getClassLoader());
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/wrap_block.java.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/wrap_block.java.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+../java/strategies/wrap_block_lib/wrap_block.java: \
+	/nix/store/ijalmmc692qkkrsyszfgqzqa33laipp3-java-front-0.9/share/java-front/libjava-front.rtree \
+	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
+	./wrap-block.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/wrap_block_lib.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_lib/wrap_block_lib.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+package strategies.wrap_block_lib;
+
+public class wrap_block_lib extends Main 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/$Add$Block_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/$Add$Block_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,34 @@
+package strategies.wrap_block_pp_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.java_front.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class $Add$Block_0_0 extends Strategy 
+{ 
+  public static $Add$Block_0_0 instance = new $Add$Block_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    ITermFactory termFactory = context.getFactory();
+    Fail2:
+    { 
+      IStrategoTerm a_0 = null;
+      IStrategoTerm b_0 = null;
+      if(term.getTermType() != IStrategoTerm.APPL || wrap_block_pp._consIf_2 != ((IStrategoAppl)term).getConstructor())
+        break Fail2;
+      a_0 = term.getSubterm(0);
+      b_0 = term.getSubterm(1);
+      term = termFactory.makeAppl(wrap_block_pp._consIf_2, new IStrategoTerm[]{a_0, termFactory.makeAppl(wrap_block_pp._consBlock_1, new IStrategoTerm[]{(IStrategoTerm)termFactory.makeListCons(b_0, (IStrategoList)wrap_block_pp_lib.constNil0)})});
+      if(true)
+        return term;
+    }
+    context.push("AddBlock_0_0");
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/InteropRegisterer.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,40 @@
+package strategies.wrap_block_pp_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.java_front.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("unused") public class InteropRegisterer extends org.strategoxt.lang.InteropRegisterer 
+{ 
+  @Override public void register(org.spoofax.interpreter.core.IContext context, Context compiledContext)
+  { 
+    register(context, compiledContext, context.getVarScope());
+  }
+
+  @Override public void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader)
+  { 
+    registerLazy(context, compiledContext, classLoader, context.getVarScope());
+  }
+
+  private void register(org.spoofax.interpreter.core.IContext context, Context compiledContext, org.spoofax.interpreter.core.VarScope varScope)
+  { 
+    compiledContext.registerComponent("wrap_block_pp_lib");
+    wrap_block_pp_lib.init(compiledContext);
+    varScope.addSVar("main_0_0", new InteropSDefT(main_0_0.instance, context));
+    varScope.addSVar("add_block_0_0", new InteropSDefT(add_block_0_0.instance, context));
+    varScope.addSVar("AddBlock_0_0", new InteropSDefT($Add$Block_0_0.instance, context));
+  }
+
+  private void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader, org.spoofax.interpreter.core.VarScope varScope)
+  { 
+    compiledContext.registerComponent("wrap_block_pp_lib");
+    wrap_block_pp_lib.init(compiledContext);
+    varScope.addSVar("main_0_0", new InteropSDefT(classLoader, "strategies.wrap_block_pp_lib.main_0_0", context));
+    varScope.addSVar("add_block_0_0", new InteropSDefT(classLoader, "strategies.wrap_block_pp_lib.add_block_0_0", context));
+    varScope.addSVar("AddBlock_0_0", new InteropSDefT(classLoader, "strategies.wrap_block_pp_lib.$Add$Block_0_0", context));
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/Main.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+package strategies.wrap_block_pp_lib;
+
+public class Main extends wrap_block_pp 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/add_block_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/add_block_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,30 @@
+package strategies.wrap_block_pp_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.java_front.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class add_block_0_0 extends Strategy 
+{ 
+  public static add_block_0_0 instance = new add_block_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("add_block_0_0");
+    Fail1:
+    { 
+      term = topdown_1_0.instance.invoke(context, term, lifted9.instance);
+      if(term == null)
+        break Fail1;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/lifted9.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/lifted9.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,27 @@
+package strategies.wrap_block_pp_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.java_front.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") final class lifted9 extends Strategy 
+{ 
+  public static final lifted9 instance = new lifted9();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    Fail3:
+    { 
+      term = try_1_0.instance.invoke(context, term, $Add$Block_0_0.instance);
+      if(term == null)
+        break Fail3;
+      if(true)
+        return term;
+    }
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/main_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/main_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,30 @@
+package strategies.wrap_block_pp_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.java_front.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class main_0_0 extends Strategy 
+{ 
+  public static main_0_0 instance = new main_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("main_0_0");
+    Fail0:
+    { 
+      term = io_java2java_wrap_1_0.instance.invoke(context, term, add_block_0_0.instance);
+      if(term == null)
+        break Fail0;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/wrap_block_pp.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/wrap_block_pp.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,141 @@
+package strategies.wrap_block_pp_lib;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.java_front.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+
+ at SuppressWarnings("all") public class wrap_block_pp  
+{ 
+  protected static final boolean TRACES_ENABLED = true;
+
+  protected static ITermFactory constantFactory;
+
+  private static Context initedContext;
+
+  private static boolean isIniting;
+
+  protected static IStrategoTerm constNil0;
+
+  public static IStrategoConstructor _consConc_2;
+
+  public static IStrategoConstructor _consNone_0;
+
+  public static IStrategoConstructor _consSome_1;
+
+  protected static IStrategoConstructor _consBlock_1;
+
+  protected static IStrategoConstructor _consIf_2;
+
+  public static Context init(Context context)
+  { 
+    synchronized(wrap_block_pp.class)
+    { 
+      if(isIniting)
+        return null;
+      isIniting = true;
+      ITermFactory termFactory = context.getFactory();
+      if(constantFactory == null)
+      { 
+        initConstructors(termFactory);
+        initConstants(termFactory);
+      }
+      if(context != initedContext)
+      { 
+        org.strategoxt.stratego_lib.Main.init(context);
+        org.strategoxt.java_front.Main.init(context);
+        context.registerComponent("wrap_block_pp_lib");
+      }
+      initedContext = context;
+      constantFactory = termFactory;
+      isIniting = false;
+      return context;
+    }
+  }
+
+  public static Context init()
+  { 
+    return init(new Context());
+  }
+
+  public static void main(String args[])
+  { 
+    Context context = init();
+    context.setStandAlone(true);
+    try
+    { 
+      IStrategoTerm result;
+      try
+      { 
+        result = context.invokeStrategyCLI(main_0_0.instance, "wrap_block_pp", args);
+      }
+      finally
+      { 
+        context.getIOAgent().closeAllFiles();
+      }
+      if(result == null)
+      { 
+        System.err.println("wrap_block_pp" + (TRACES_ENABLED ? ": rewriting failed, trace:" : ": rewriting failed"));
+        context.printStackTrace();
+        context.setStandAlone(false);
+        System.exit(1);
+      }
+      else
+      { 
+        System.out.println(result);
+        context.setStandAlone(false);
+        System.exit(0);
+      }
+    }
+    catch(StrategoExit exit)
+    { 
+      context.setStandAlone(false);
+      System.exit(exit.getValue());
+    }
+  }
+
+  public static IStrategoTerm mainNoExit(String ... args) throws StrategoExit
+  { 
+    return mainNoExit(new Context(), args);
+  }
+
+  public static IStrategoTerm mainNoExit(Context context, String ... args) throws StrategoExit
+  { 
+    try
+    { 
+      init(context);
+      return context.invokeStrategyCLI(main_0_0.instance, "wrap_block_pp", args);
+    }
+    finally
+    { 
+      context.getIOAgent().closeAllFiles();
+    }
+  }
+
+  public static Strategy getMainStrategy()
+  { 
+    return main_0_0.instance;
+  }
+
+  public static void initConstructors(ITermFactory termFactory)
+  { 
+    _consConc_2 = termFactory.makeConstructor("Conc", 2);
+    _consNone_0 = termFactory.makeConstructor("None", 0);
+    _consSome_1 = termFactory.makeConstructor("Some", 1);
+    _consBlock_1 = termFactory.makeConstructor("Block", 1);
+    _consIf_2 = termFactory.makeConstructor("If", 2);
+  }
+
+  public static void initConstants(ITermFactory termFactory)
+  { 
+    constNil0 = (IStrategoTerm)termFactory.makeList();
+  }
+
+  public static void registerInterop(org.spoofax.interpreter.core.IContext context, Context compiledContext)
+  { 
+    new InteropRegisterer().registerLazy(context, compiledContext, InteropRegisterer.class.getClassLoader());
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/wrap_block_pp.java.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/wrap_block_pp.java.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+../java/strategies/wrap_block_pp_lib/wrap_block_pp.java: \
+	/nix/store/ijalmmc692qkkrsyszfgqzqa33laipp3-java-front-0.9/share/java-front/libjava-front.rtree \
+	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
+	./wrap-block-pp.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/wrap_block_pp_lib.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/java/strategies/wrap_block_pp_lib/wrap_block_pp_lib.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+package strategies.wrap_block_pp_lib;
+
+public class wrap_block_pp_lib extends Main 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/Makefile
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/Makefile	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,29 @@
+include identity.dep
+
+identity : identity.str
+#	strj -i identity.str -o ../
+	strj -i identity.str -o ../java/strategies/identity_lib/identity.java -p strategies.identity_lib
+
+indentity-c: identity.str 	
+	strc -i identity.str -o ../c/identity/indentity -la stratego-lib
+
+wrap-block : wrap-block.str
+#	strj -i wrap-block.str
+	strj -i wrap-block.str -o ../java/strategies/wrap_block_lib/wrap_block.java -p strategies.wrap_block_lib
+
+wrap-block-pp : wrap-block.str
+#	strj -i wrap-block-pp.str
+	strj -i wrap-block-pp.str -o ../java/strategies/wrap_block_pp_lib/wrap_block_pp.java -p strategies.wrap_block_pp_lib -la java-front
+
+test-prop : test-prop.str
+	strj -i test-prop.str -o ../java/strategies/test_prop_lib/test_prop.java -p strategies.test_prop_lib
+
+# write stratego program to ast
+parse-test-prop : test-prop.str	
+	parse-stratego -i test-prop.str | pp-aterm -o terms/programs/test-prop.aterm
+	
+sample1-to-ast : sample1.str	
+	parse-stratego -i sample1.str | pp-aterm -o terms/programs/sample1.aterm
+	
+test-parse-str-c : test-parse-str.str
+	strc -i test-parse-str.str -o ../c/test-parse-str/test-parse-str -la stratego-lib -la strc -la stratego-xtc

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/identity.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/identity.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,3 @@
+identity: \
+	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
+	./identity.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/identity.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/identity.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,19 @@
+// compile stratego to java
+// strj -i identity.str -la stratego-lib
+// parse-java -i Foo.java | ./identity | pp-java
+
+// compile the java
+// javac -cp ../../lib/strategoxt.jar identity.java
+
+
+// run the java
+// java -cp ../../lib/strategoxt.jar:. identity
+// parse-java -i Foo.java | java -cp ../../lib/strategoxt.jar:. identity | pp-java
+// java -cp ../../lib/strategoxt.jar:. identity -i foo.parsed | pp-java
+// java -cp ../../lib/strategoxt.jar:. identity -i /home/rlindeman/workspace/short-examples/java-front1/java/foo.parsed -o /home/rlindeman/workspace/short-examples/str-output/output
+
+module identity
+imports libstratego-lib
+strategies
+  main =
+    io-wrap(id)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/sample1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/sample1.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,104 @@
+module sample1
+/*
+Parse stratego programs
+
+Parse stratego source code and write aterm:
+parse-stratego -i identity.str | pp-aterm -o terms/programs/identity.aterm
+
+Parse stratego source code and pretty print the source again 
+parse-stratego -i identity.str | pp-stratego --abstract
+
+Parse stratego, transform and pretty print the aterm
+parse-stratego -i identity.str | ./transform-str | pp-aterm
+*/
+
+imports libstrategolib
+
+    
+strategies
+	main = id
+
+strategies 
+	// no args
+	kaas = id // SDefNoArgs("kaas", Id())
+	
+	// with strategy args
+	first(s) = s // SDef("first", [DefaultVarDec("s")], CallNoArgs(SVar("s")))
+	first-then-second(s1, s2) = s1; s2
+	/*
+	SDef(
+          "first-then-second"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , Seq(CallNoArgs(SVar("s1")), CallNoArgs(SVar("s2")))
+        )
+	*/
+	one-two-three(s1, s2, s3) = s1; s2; s3
+	/*
+	SDef(
+          "one-two-three"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2"), DefaultVarDec("s3")]
+        , Seq(
+            CallNoArgs(SVar("s1"))
+          , Seq(CallNoArgs(SVar("s2")), CallNoArgs(SVar("s3")))
+          )
+        )
+    */
+        
+	// with term args
+	only-term(|term) = id // SDefT("only-term", [], [DefaultVarDec("term")], Id())
+	two-terms(|term1, term2) = id
+	/*
+	SDefT(
+         "two-terms"
+       , []
+       , [DefaultVarDec("term1"), DefaultVarDec("term2")]
+       , Id()
+       )
+	*/
+	three-terms(|t1, t2, t3) = id
+	/*
+	SDefT(
+          "three-terms"
+        , []
+        , [DefaultVarDec("t1"), DefaultVarDec("t2"), DefaultVarDec("t3")]
+        , Id()
+        )
+    */
+    
+	// with strategy and term args
+	s-and-t(s|t) = s
+	/*
+	SDefT(
+          "s-and-t"
+        , [DefaultVarDec("s")]
+        , [DefaultVarDec("t")]
+        , CallNoArgs(SVar("s"))
+        )
+        */
+	s2-and-t(s1, s2|t) = id
+	/*
+	SDefT(
+          "s2-and-t"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , [DefaultVarDec("t")]
+        , Id()
+        )
+	*/
+	s-and-t2(s|t1, t2) = id
+	/*
+	SDefT(
+          "s-and-t2"
+        , [DefaultVarDec("s")]
+        , [DefaultVarDec("t1"), DefaultVarDec("t2")]
+        , Id()
+        )
+	*/
+	s2-and-t2(s1,s2|t1,t2) = id
+	/*
+	SDefT(
+          "s2-and-t2"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , [DefaultVarDec("t1"), DefaultVarDec("t2")]
+        , Id()
+        )
+	*/	

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/identity.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/identity.aterm	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,8 @@
+Module(
+  "identity"
+, [ Imports([Import("libstratego-lib")])
+  , Strategies(
+      [SDefNoArgs("main", Call(SVar("io-wrap"), [Id()]))]
+    )
+  ]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/test-parse-str.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/test-parse-str.aterm	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,61 @@
+Module(
+  "test-parse-str"
+, [ Imports([Import("libstrategolib")])
+  , Strategies([SDefNoArgs("main", Id())])
+  , Strategies(
+      [ SDefNoArgs("kaas", Id())
+      , SDef("first", [DefaultVarDec("s")], CallNoArgs(SVar("s")))
+      , SDef(
+          "first-then-second"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , Seq(CallNoArgs(SVar("s1")), CallNoArgs(SVar("s2")))
+        )
+      , SDef(
+          "one-two-three"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2"), DefaultVarDec("s3")]
+        , Seq(
+            CallNoArgs(SVar("s1"))
+          , Seq(CallNoArgs(SVar("s2")), CallNoArgs(SVar("s3")))
+          )
+        )
+      , SDefT("only-term", [], [DefaultVarDec("term")], Id())
+      , SDefT(
+          "two-terms"
+        , []
+        , [DefaultVarDec("term1"), DefaultVarDec("term2")]
+        , Id()
+        )
+      , SDefT(
+          "three-terms"
+        , []
+        , [DefaultVarDec("t1"), DefaultVarDec("t2"), DefaultVarDec("t3")]
+        , Id()
+        )
+      , SDefT(
+          "s-and-t"
+        , [DefaultVarDec("s")]
+        , [DefaultVarDec("t")]
+        , CallNoArgs(SVar("s"))
+        )
+      , SDefT(
+          "s2-and-t"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , [DefaultVarDec("t")]
+        , Id()
+        )
+      , SDefT(
+          "s-and-t2"
+        , [DefaultVarDec("s")]
+        , [DefaultVarDec("t1"), DefaultVarDec("t2")]
+        , Id()
+        )
+      , SDefT(
+          "s2-and-t2"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , [DefaultVarDec("t1"), DefaultVarDec("t2")]
+        , Id()
+        )
+      ]
+    )
+  ]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/test-prop.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/test-prop.aterm	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,223 @@
+Module(
+  "test-prop"
+, [ Imports([Import("libstrategolib")])
+  , Signature(
+      [ Sorts([SortNoArgs("Prop")])
+      , Constructors(
+          [ OpDecl("False", ConstType(SortNoArgs("Prop")))
+          , OpDecl("True", ConstType(SortNoArgs("Prop")))
+          , OpDecl(
+              "Atom"
+            , FunType([ConstType(SortNoArgs("String"))], ConstType(SortNoArgs("Prop")))
+            )
+          , OpDecl(
+              "Not"
+            , FunType([ConstType(SortNoArgs("Prop"))], ConstType(SortNoArgs("Prop")))
+            )
+          , OpDecl(
+              "And"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Or"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Impl"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Eq"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          ]
+        )
+      ]
+    )
+  , Strategies(
+      [ SDefNoArgs(
+          "main"
+        , Call(SVar("io-wrap"), [CallNoArgs(SVar("eval"))])
+        )
+      , SDefNoArgs(
+          "eval"
+        , Call(SVar("innermost"), [CallNoArgs(SVar("E"))])
+        )
+      ]
+    )
+  , Rules(
+      [ RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [Var("True")]))
+          , Var("False")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [Var("False")]))
+          , Var("True")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("And", [Var("True"), Var("x")]))
+          , Var("x")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("And", [Var("x"), Var("True")]))
+          , Var("x")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("And", [Var("False"), Var("x")]))
+          , Var("False")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("And", [Var("x"), Var("False")]))
+          , Var("False")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Or", [Var("True"), Var("x")]))
+          , Var("True")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Or", [Var("x"), Var("True")]))
+          , Var("True")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Or", [Var("False"), Var("x")]))
+          , Var("x")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Or", [Var("x"), Var("False")]))
+          , Var("x")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Impl", [Var("True"), Var("x")]))
+          , Var("x")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Impl", [Var("x"), Var("True")]))
+          , Var("True")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Impl", [Var("False"), Var("x")]))
+          , Var("True")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Eq", [Var("False"), Var("x")]))
+          , NoAnnoList(Op("Not", [Var("x")]))
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Eq", [Var("x"), Var("False")]))
+          , NoAnnoList(Op("Not", [Var("x")]))
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Eq", [Var("True"), Var("x")]))
+          , Var("x")
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Eq", [Var("x"), Var("True")]))
+          , Var("x")
+          )
+        )
+      ]
+    )
+  , Signature(
+      [ Sorts(
+          [SortNoArgs("Or"), SortNoArgs("And"), SortNoArgs("NAtom"), SortNoArgs("Atom")]
+        )
+      , Constructors(
+          [ OpDecl(
+              "Or"
+            , FunType(
+                [ConstType(SortNoArgs("Or")), ConstType(SortNoArgs("Or"))]
+              , ConstType(SortNoArgs("Or"))
+              )
+            )
+          , OpDeclInj(
+              FunType([ConstType(SortNoArgs("And"))], ConstType(SortNoArgs("Or")))
+            )
+          , OpDecl(
+              "And"
+            , FunType(
+                [ConstType(SortNoArgs("And")), ConstType(SortNoArgs("And"))]
+              , ConstType(SortNoArgs("And"))
+              )
+            )
+          , OpDeclInj(
+              FunType([ConstType(SortNoArgs("NAtom"))], ConstType(SortNoArgs("And")))
+            )
+          , OpDecl(
+              "Not"
+            , FunType([ConstType(SortNoArgs("Atom"))], ConstType(SortNoArgs("NAtom")))
+            )
+          , OpDeclInj(
+              FunType([ConstType(SortNoArgs("Atom"))], ConstType(SortNoArgs("NAtom")))
+            )
+          , OpDecl(
+              "Atom"
+            , FunType([ConstType(SortNoArgs("String"))], ConstType(SortNoArgs("Atom")))
+            )
+          ]
+        )
+      ]
+    )
+  ]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/wrap-block-pp.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/wrap-block-pp.aterm	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,38 @@
+Module(
+  "wrap-block-pp"
+, [ Imports([Import("libstratego-lib"), Import("libjava-front")])
+  , Strategies(
+      [ SDefNoArgs(
+          "main"
+        , Call(SVar("io-java2java-wrap"), [CallNoArgs(SVar("add-block"))])
+        )
+      , SDefNoArgs(
+          "add-block"
+        , Call(
+            SVar("topdown")
+          , [Call(SVar("try"), [CallNoArgs(SVar("AddBlock"))])]
+          )
+        )
+      ]
+    )
+  , Rules(
+      [ RDefNoArgs(
+          "AddBlock"
+        , RuleNoCond(
+            NoAnnoList(Op("If", [Var("c"), Var("stm")]))
+          , NoAnnoList(
+              Op(
+                "If"
+              , [ Var("c")
+                , NoAnnoList(
+                    Op("Block", [NoAnnoList(List([Var("stm")]))])
+                  )
+                ]
+              )
+            )
+          )
+        )
+      ]
+    )
+  ]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/wrap-block.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/programs/wrap-block.aterm	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,38 @@
+Module(
+  "wrap-block"
+, [ Imports([Import("libstratego-lib"), Import("libjava-front")])
+  , Strategies(
+      [ SDefNoArgs(
+          "main"
+        , Call(SVar("io-wrap"), [CallNoArgs(SVar("add-block"))])
+        )
+      , SDefNoArgs(
+          "add-block"
+        , Call(
+            SVar("topdown")
+          , [Call(SVar("try"), [CallNoArgs(SVar("AddBlock"))])]
+          )
+        )
+      ]
+    )
+  , Rules(
+      [ RDefNoArgs(
+          "AddBlock"
+        , RuleNoCond(
+            NoAnnoList(Op("If", [Var("c"), Var("stm")]))
+          , NoAnnoList(
+              Op(
+                "If"
+              , [ Var("c")
+                , NoAnnoList(
+                    Op("Block", [NoAnnoList(List([Var("stm")]))])
+                  )
+                ]
+              )
+            )
+          )
+        )
+      ]
+    )
+  ]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/test.prog
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/test.prog	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,15 @@
+Program("progname",
+[
+	Comment("fname", "text")
+	, Comment("this", "this text")
+	, Comment("that", "that text")
+	, Function("fname",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+]
+)
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/test1.prop
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/test1.prop	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+And(Impl(True,And(True,False)),False)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/test2.prog
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/test2.prog	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,23 @@
+Program("progname",
+[
+	Comment("fnbbame", "laalalalalalalalalal")
+	, Comment("this", "this text")
+	, Comment("that", "that text")
+	, Function("fnbbame",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+	, Function("nocomment",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/test2.prop
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/terms/test2.prop	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+And(Impl(True,And(Atom("p"),Atom("q"))),ATom("p"))
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/test-parse-str.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/test-parse-str.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,13 @@
+module test-parse-str
+// test parsing a stratego program in stratego
+
+imports
+  libstrc
+  libstratego-xtc
+  libstratego-lib
+	
+strategies
+	main = do-parse
+	
+	do-parse =
+	<parse-stratego-file> "kaas"
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/test-prop.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/test-prop.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,55 @@
+module test-prop
+
+// propositional formulae example
+
+imports libstrategolib
+
+signature
+  sorts Prop
+  constructors
+    False : Prop
+    True  : Prop
+    Atom  : String -> Prop
+    Not   : Prop -> Prop
+    And   : Prop * Prop -> Prop
+    Or    : Prop * Prop -> Prop
+    Impl  : Prop * Prop -> Prop
+    Eq    : Prop * Prop -> Prop
+    
+strategies // no arguments
+	main = io-wrap(eval) // SDefNoArgs
+	eval = innermost(E)
+
+	
+ 
+rules
+  E : Not(True())      -> False()       
+  E : Not(False())     -> True()
+  E : And(True(), x)   -> x        
+  E : And(x, True())   -> x   
+  E : And(False(), x)  -> False()     
+  E : And(x, False())  -> False()
+  E : Or(True(), x)    -> True()     
+  E : Or(x, True())    -> True()  
+  E : Or(False(), x)   -> x     
+  E : Or(x, False())   -> x
+  E : Impl(True(), x)  -> x 
+  E : Impl(x, True())  -> True()      
+  E : Impl(False(), x) -> True()
+  E : Eq(False(), x)   -> Not(x)
+  E : Eq(x, False())   -> Not(x)      
+  E : Eq(True(), x)    -> x
+  E : Eq(x, True())    -> x
+  
+  
+// disjunctive normal form
+signature
+  sorts Or And NAtom Atom
+  constructors
+    Or   : Or * Or -> Or
+         : And -> Or
+    And  : And * And -> And
+         : NAtom -> And
+    Not  : Atom -> NAtom
+         : Atom -> NAtom
+    Atom : String -> Atom
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/wrap-block-pp.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/wrap-block-pp.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+wrap-block-pp: \
+	/nix/store/ijalmmc692qkkrsyszfgqzqa33laipp3-java-front-0.9/share/java-front/libjava-front.rtree \
+	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
+	./wrap-block-pp.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/wrap-block-pp.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/wrap-block-pp.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,25 @@
+// compile stratego to java
+// strj -i wrap-block-pp.str -la stratego-lib
+
+// compile the java
+// javac -cp ../../lib/strategoxt.jar wrap_block_pp.java
+
+// run the java
+// java -cp ../../lib/strategoxt.jar:. wrap_block_pp
+// java -cp ../../lib/strategoxt.jar:. wrap_block_pp -i Foo2.java
+// java -cp ../../lib/strategoxt.jar:. wrap_block_pp -i /home/rlindeman/workspace/short-examples/java-front1/java/Foo2.java -o /home/rlindeman/workspace/short-examples/str-output/output
+
+module wrap-block-pp
+imports libstratego-lib libjava-front
+strategies
+
+  main =
+    io-java2java-wrap(add-block)
+    
+  add-block = 
+    topdown(try(AddBlock))
+
+rules
+  
+  AddBlock:
+    If(c, stm) -> If(c, Block([stm]))
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/wrap-block.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/wrap-block.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+wrap-block: \
+	/nix/store/ijalmmc692qkkrsyszfgqzqa33laipp3-java-front-0.9/share/java-front/libjava-front.rtree \
+	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
+	./wrap-block.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/wrap-block.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/strategies/wrap-block.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,28 @@
+// compile stratego to java
+// strj -i wrap-block.str -la stratego-lib
+// compile to c
+// strj -i wrap-block.str -la stratego-lib
+
+// compile the java
+// javac -cp ../../lib/strategoxt.jar wrap_block.java
+
+// run the java
+// java -cp ../../lib/strategoxt.jar:. wrap_block
+// parse-java -i Foo2.java | java -cp ../../lib/strategoxt.jar:. wrap_block | pp-java
+// java -cp ../../lib/strategoxt.jar:. wrap_block -i foo2.parsed | pp-java
+// java -cp ../../lib/strategoxt.jar:. wrap_block -i /home/rlindeman/workspace/short-examples/java-front1/java/foo2.parsed -o /home/rlindeman/workspace/short-examples/str-output/output
+
+module wrap-block
+imports libstratego-lib libjava-front
+strategies
+
+  main =
+    io-wrap(add-block)
+
+  add-block = 
+    topdown(try(AddBlock))
+
+rules
+  
+  AddBlock:
+    If(c, stm) -> If(c, Block([stm]))

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/assign/localvar.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/assign/localvar.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,98 @@
+module localvar
+// use local vars in rules and strategies to store temp result
+
+imports
+  libstrategolib
+
+
+signature
+  sorts
+    Prop
+
+  constructors
+  	
+  	Var		: String -> Expression
+  	Number	: Int -> Expression
+  	Add		: Expression * Expression -> Expression
+  	Sub		: Expression * Expression -> Expression
+  	
+  	Print	: Expression -> Statement
+  	Assign	: String * Expression -> Statement
+  	
+  	Function : String * List(Statement) -> Definition
+  	
+  	Comment : String * String -> Definition
+  	
+  	Program : String * List(Definition) -> Program
+  	
+
+    
+strategies
+  main =
+    io-wrap(execute)
+    
+rules
+  // show Comment and Function that have the same name
+	
+  execute:
+  	input -> output
+  	with
+  	  output := <match-comments> input
+
+rules
+	match-comments :
+		// match program
+		Program(_, definitions*) -> out
+		with
+			f* := <find-functions> definitions* // find functions
+			; c* := <find-comments> definitions* // find comments
+			; out := <match-f-and-c> (f*, c*)
+
+		
+	find-functions:
+		definition* -> functions*
+		with
+			functions* := <filter(?Function(_,_))> definition*
+			
+	find-comments:
+		definition* -> comments*
+		with
+			comments* := <filter(?Comment(_,_))> definition*
+			
+	match-f-and-c:
+		(f*, c*) -> matches*
+		with
+			//matches* := <map(find-comment-match(|c*))> f*
+			matches* := <map(try-find-comment-by-name(|c*))> f*
+		
+	try-find-comment-by-name(|c*) = find-comment-match(|c*) // <+ (debug(!"fail"); !"fail")	
+		
+	find-comment-match(|c*):
+		f -> (f, c)
+		// f should be a Function
+		where
+			name := <get-function-name> f
+			; c := <find-comment-by-name(|name)> c*
+			  
+	get-function-name:
+		Function(name, _) -> name
+			
+	find-comment-by-name(|name):
+		c* -> comment
+		with 
+		c-filtered* := <filter(?Comment(name, _))> c*
+		; comment := (<debug(!"stuff:"); first> c-filtered*) //  <+ !Comment(name, "created!!")
+		//; comment := <first> c-filtered*
+
+
+	old-first : c-list* -> out
+	where out := <last> c-list* <+ build-c
+	
+	is-empty = ?[] 
+	
+	
+	first = 
+		debug(!"first: ") ;
+		(is-empty < build-c + last)
+		
+	build-c = !Comment("new", "created!!")
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/assign/run.input
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/assign/run.input	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,23 @@
+Program("progname",
+[
+	Comment("fname", "laalalalalalalalalal")
+	, Comment("this", "this text")
+	, Comment("that", "that text")
+	, Function("fname",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+	, Function("nocomment",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/assign/run.output
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/assign/run.output	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+[(Function("fname",[Assign("var_foo",Add(Number(2),Number(7))),Print("var_foo")]),Comment("fname","laalalalalalalalalal")),(Function("nocomment",[Assign("var_foo",Add(Number(2),Number(7))),Print("var_foo")]),Comment("new","created!!"))]

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/example1/example.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/example1/example.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,108 @@
+module example
+/*
+Parse stratego programs
+
+Parse stratego source code and write aterm:
+parse-stratego -i identity.str | pp-aterm -o terms/programs/identity.aterm
+
+Parse stratego source code and pretty print the source again 
+parse-stratego -i identity.str | pp-stratego --abstract
+
+Parse stratego, transform and pretty print the aterm
+parse-stratego -i identity.str | ./transform-str | pp-aterm
+*/
+
+imports libstrategolib
+
+    
+strategies
+	main = id
+
+strategies 
+	// no args
+	kaaas = id // SDefNoArgs("kaas", Id())
+	
+	foo = kaaas
+	
+	/*debugged-strategy = s-enter(|"debugged-strategy"); foo; s-exit(|"debugged-strategy")*/
+	
+	// with strategy args
+	first(s) = s // SDef("first", [DefaultVarDec("s")], CallNoArgs(SVar("s")))
+	first-then-second(s1, s2) = s1; s2
+	/*
+	SDef(
+          "first-then-second"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , Seq(CallNoArgs(SVar("s1")), CallNoArgs(SVar("s2")))
+        )
+	*/
+	one-two-three(s1, s2, s3) = s1; s2; s3
+	/*
+	SDef(
+          "one-two-three"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2"), DefaultVarDec("s3")]
+        , Seq(
+            CallNoArgs(SVar("s1"))
+          , Seq(CallNoArgs(SVar("s2")), CallNoArgs(SVar("s3")))
+          )
+        )
+    */
+        
+	// with term args
+	only-term(|term) = id // SDefT("only-term", [], [DefaultVarDec("term")], Id())
+	two-terms(|term1, term2) = id
+	/*
+	SDefT(
+         "two-terms"
+       , []
+       , [DefaultVarDec("term1"), DefaultVarDec("term2")]
+       , Id()
+       )
+	*/
+	three-terms(|t1, t2, t3) = id
+	/*
+	SDefT(
+          "three-terms"
+        , []
+        , [DefaultVarDec("t1"), DefaultVarDec("t2"), DefaultVarDec("t3")]
+        , Id()
+        )
+    */
+    
+	// with strategy and term args
+	s-and-t(s|t) = s
+	/*
+	SDefT(
+          "s-and-t"
+        , [DefaultVarDec("s")]
+        , [DefaultVarDec("t")]
+        , CallNoArgs(SVar("s"))
+        )
+        */
+	s2-and-t(s1, s2|t) = id
+	/*
+	SDefT(
+          "s2-and-t"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , [DefaultVarDec("t")]
+        , Id()
+        )
+	*/
+	s-and-t2(s|t1, t2) = id
+	/*
+	SDefT(
+          "s-and-t2"
+        , [DefaultVarDec("s")]
+        , [DefaultVarDec("t1"), DefaultVarDec("t2")]
+        , Id()
+        )
+	*/
+	s2-and-t2(s1,s2|t1,t2) = id
+	/*
+	SDefT(
+          "s2-and-t2"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , [DefaultVarDec("t1"), DefaultVarDec("t2")]
+        , Id()
+        )
+	*/	

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/example1/rule-overview.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/example1/rule-overview.aterm	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,154 @@
+Module(
+  "rule-overview"
+, [ Imports([Import("libstrategolib")])
+  , Imports([Import("stratego-debug-lib")])
+  , Rules(
+      [ RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          )
+        )
+      , RDef(
+          "E"
+        , []
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , NoAnnoList(Op("True", []))
+          )
+        )
+      , RDef(
+          "E"
+        , [DefaultVarDec("s")]
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          )
+        )
+      , RDef(
+          "E"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , NoAnnoList(Op("True", []))
+          )
+        )
+      , RDefT(
+          "E"
+        , []
+        , [DefaultVarDec("t")]
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          )
+        )
+      , RDefT(
+          "E"
+        , []
+        , [DefaultVarDec("t1"), DefaultVarDec("t2")]
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , NoAnnoList(Op("True", []))
+          )
+        )
+      , RDefT(
+          "E"
+        , [DefaultVarDec("s")]
+        , [DefaultVarDec("t")]
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , Var("out")
+          , [ WhereClause(
+                CallT(SVar("s-enter"), [], [NoAnnoList(Str("\"E\""))])
+              )
+            , WithClause(Assign(Var("out"), NoAnnoList(Op("True", []))))
+            ]
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , Var("out")
+          , Assign(Var("out"), NoAnnoList(Op("True", [])))
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , Var("out")
+          , Assign(Var("out"), NoAnnoList(Op("True", [])))
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , Var("out'")
+          , [ WithClause(
+                Seq(
+                  Assign(Var("out"), NoAnnoList(Op("False", [])))
+                , Assign(Var("out'"), Var("out"))
+                )
+              )
+            ]
+          )
+        )
+      ]
+    )
+  , Signature(
+      [ Sorts([SortNoArgs("Prop")])
+      , Constructors(
+          [ OpDecl("False", ConstType(SortNoArgs("Prop")))
+          , OpDecl("True", ConstType(SortNoArgs("Prop")))
+          , OpDecl(
+              "Atom"
+            , FunType([ConstType(SortNoArgs("String"))], ConstType(SortNoArgs("Prop")))
+            )
+          , OpDecl(
+              "Not"
+            , FunType([ConstType(SortNoArgs("Prop"))], ConstType(SortNoArgs("Prop")))
+            )
+          , OpDecl(
+              "And"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Or"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Impl"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Eq"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          ]
+        )
+      ]
+    )
+  ]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/example1/rule-overview.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/example1/rule-overview.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,45 @@
+module rule-overview
+
+imports libstrategolib
+
+imports
+  stratego-debug-lib
+	
+rules
+	E : Not(True())      -> False()       
+  	E() : Not(False())     -> True()
+  
+    E(s) : Not(True())      -> False()       
+  	E(s1,s2) : Not(False())     -> True()
+  	
+    E(|t) : Not(True())      -> False()       
+  	E(|t1,t2) : Not(False())     -> True()
+	
+	E(s|t) : Not(True())      -> False()
+	 
+  	E : Not(False())     -> out
+  		where s-enter(|"E")
+  		with out := True()
+  		
+  	E : Not(False())     -> out
+  		where out := True()
+
+  	E : Not(False())     -> out
+  		where( out := True() )
+  		
+  	E : Not(False())     -> out'
+  		with 
+  			out := False() ;
+  			out' := out
+  		
+signature
+sorts Prop
+  constructors
+    False : Prop
+    True  : Prop
+    Atom  : String -> Prop
+    Not   : Prop -> Prop
+    And   : Prop * Prop -> Prop
+    Or    : Prop * Prop -> Prop
+    Impl  : Prop * Prop -> Prop
+    Eq    : Prop * Prop -> Prop
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/localvar.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/localvar.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,98 @@
+module localvar
+// use local vars in rules and strategies to store temp result
+
+imports
+  libstrategolib
+
+
+signature
+  sorts
+    Prop
+
+  constructors
+  	
+  	Var		: String -> Expression
+  	Number	: Int -> Expression
+  	Add		: Expression * Expression -> Expression
+  	Sub		: Expression * Expression -> Expression
+  	
+  	Print	: Expression -> Statement
+  	Assign	: String * Expression -> Statement
+  	
+  	Function : String * List(Statement) -> Definition
+  	
+  	Comment : String * String -> Definition
+  	
+  	Program : String * List(Definition) -> Program
+  	
+
+    
+strategies
+  main =
+    io-wrap(execute)
+    
+rules
+  // show Comment and Function that have the same name
+	
+  execute:
+  	input -> output
+  	with
+  	  output := <match-comments> input
+
+rules
+	match-comments :
+		// match program
+		Program(_, definitions*) -> out
+		with
+			f* := <find-functions> definitions* // find functions
+			; c* := <find-comments> definitions* // find comments
+			; out := <match-f-and-c> (f*, c*)
+
+		
+	find-functions:
+		definition* -> functions*
+		with
+			functions* := <filter(?Function(_,_))> definition*
+			
+	find-comments:
+		definition* -> comments*
+		with
+			comments* := <filter(?Comment(_,_))> definition*
+			
+	match-f-and-c:
+		(f*, c*) -> matches*
+		with
+			//matches* := <map(find-comment-match(|c*))> f*
+			matches* := <map(try-find-comment-by-name(|c*))> f*
+		
+	try-find-comment-by-name(|c*) = find-comment-match(|c*) // <+ (debug(!"fail"); !"fail")	
+		
+	find-comment-match(|c*):
+		f -> (f, c)
+		// f should be a Function
+		where
+			name := <get-function-name> f
+			; c := <find-comment-by-name(|name)> c*
+			  
+	get-function-name:
+		Function(name, _) -> name
+			
+	find-comment-by-name(|name):
+		c* -> comment
+		with 
+		c-filtered* := <filter(?Comment(name, _))> c*
+		; comment := (<debug(!"stuff:"); first> c-filtered*) //  <+ !Comment(name, "created!!")
+		//; comment := <first> c-filtered*
+
+
+	old-first : c-list* -> out
+	where out := <last> c-list* <+ build-c
+	
+	is-empty = ?[] 
+	
+	
+	first = 
+		debug(!"first: ") ;
+		(is-empty < build-c + last)
+		
+	build-c = !Comment("new", "created!!")
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/run.input
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/run.input	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,23 @@
+Program("progname",
+[
+	Comment("fname", "laalalalalalalalalal")
+	, Comment("this", "this text")
+	, Comment("that", "that text")
+	, Function("fname",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+	, Function("nocomment",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/run.output
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/run.output	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+[(Function("fname",[Assign("var_foo",Add(Number(2),Number(7))),Print("var_foo")]),Comment("fname","laalalalalalalalalal")),(Function("nocomment",[Assign("var_foo",Add(Number(2),Number(7))),Print("var_foo")]),Comment("new","created!!"))]

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/run.input
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/run.input	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+And(Impl(True,And(True,False)),False)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/run.output
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/run.output	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+False

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/test-prop.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/test-prop.aterm	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,347 @@
+Module(
+  "test-prop"
+, [ Imports([Import("stratego-debug-lib")])
+  , Imports([Import("libstrategolib")])
+  , Signature(
+      [ Sorts([SortNoArgs("Prop")])
+      , Constructors(
+          [ OpDecl("False", ConstType(SortNoArgs("Prop")))
+          , OpDecl("True", ConstType(SortNoArgs("Prop")))
+          , OpDecl(
+              "Atom"
+            , FunType([ConstType(SortNoArgs("String"))], ConstType(SortNoArgs("Prop")))
+            )
+          , OpDecl(
+              "Not"
+            , FunType([ConstType(SortNoArgs("Prop"))], ConstType(SortNoArgs("Prop")))
+            )
+          , OpDecl(
+              "And"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Or"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Impl"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Eq"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          ]
+        )
+      ]
+    )
+  , Strategies(
+      [ SDefNoArgs(
+          "main"
+        , Seq(
+            CallT(
+              SVar("s-enter")
+            , []
+            , [NoAnnoList(Str("main")), Location(20, 2, 20, 22)]
+            )
+          , Seq(
+              Call(SVar("io-wrap"), [CallNoArgs(SVar("eval"))])
+            , CallT(SVar("s-exit"), [], [NoAnnoList(Str("main"))])
+            )
+          )
+        )
+      , SDefNoArgs(
+          "eval"
+        , Seq(
+            CallT(
+              SVar("s-enter")
+            , []
+            , [NoAnnoList(Str("eval")), Location(21, 2, 21, 21)]
+            )
+          , Seq(
+              Call(SVar("innermost"), [CallNoArgs(SVar("E"))])
+            , CallT(SVar("s-exit"), [], [NoAnnoList(Str("eval"))])
+            )
+          )
+        )
+      ]
+    )
+  , Rules(
+      [ RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("False", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("True", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "And"
+              , [NoAnnoList(Op("True", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "And"
+              , [Var("x"), NoAnnoList(Op("True", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "And"
+              , [NoAnnoList(Op("False", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("False", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "And"
+              , [Var("x"), NoAnnoList(Op("False", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("False", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Or"
+              , [NoAnnoList(Op("True", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("True", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Or"
+              , [Var("x"), NoAnnoList(Op("True", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("True", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Or"
+              , [NoAnnoList(Op("False", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Or"
+              , [Var("x"), NoAnnoList(Op("False", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Impl"
+              , [NoAnnoList(Op("True", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Impl"
+              , [Var("x"), NoAnnoList(Op("True", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("True", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Impl"
+              , [NoAnnoList(Op("False", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("True", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Eq"
+              , [NoAnnoList(Op("False", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("Not", [Var("x")]))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Eq"
+              , [Var("x"), NoAnnoList(Op("False", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("Not", [Var("x")]))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Eq"
+              , [NoAnnoList(Op("True", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Eq"
+              , [Var("x"), NoAnnoList(Op("True", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      ]
+    )
+  ]
+)
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/test-prop.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/test-prop.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,81 @@
+module test-prop
+
+imports
+  libstrategolib
+
+
+signature
+  sorts
+    Prop
+
+  constructors
+    False : Prop
+    True  : Prop
+    Atom  : String -> Prop
+    Not   : Prop -> Prop
+    And   : Prop * Prop -> Prop
+    Or    : Prop * Prop -> Prop
+    Impl  : Prop * Prop -> Prop
+    Eq    : Prop * Prop -> Prop
+
+
+strategies
+  main =
+    io-wrap(eval)
+
+  eval =
+    innermost(E)
+
+
+rules
+
+  E :
+    Not(True()) -> False()
+
+  E :
+    Not(False()) -> True()
+
+  E :
+    And(True(), x) -> x
+
+  E :
+    And(x, True()) -> x
+
+  E :
+    And(False(), x) -> False()
+
+  E :
+    And(x, False()) -> False()
+
+  E :
+    Or(True(), x) -> True()
+
+  E :
+    Or(x, True()) -> True()
+
+  E :
+    Or(False(), x) -> x
+
+  E :
+    Or(x, False()) -> x
+
+  E :
+    Impl(True(), x) -> x
+
+  E :
+    Impl(x, True()) -> True()
+
+  E :
+    Impl(False(), x) -> True()
+
+  E :
+    Eq(False(), x) -> Not(x)
+
+  E :
+    Eq(x, False()) -> Not(x)
+
+  E :
+    Eq(True(), x) -> x
+
+  E :
+    Eq(x, True()) -> x
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/test-prop.tes
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/test-prop/test-prop.tes	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,44 @@
+module test-prop
+
+// propositional formulae example
+
+imports libstrategolib
+
+signature
+  sorts Prop
+  constructors
+    False : Prop
+    True  : Prop
+    Atom  : String -> Prop
+    Not   : Prop -> Prop
+    And   : Prop * Prop -> Prop
+    Or    : Prop * Prop -> Prop
+    Impl  : Prop * Prop -> Prop
+    Eq    : Prop * Prop -> Prop
+    
+strategies
+	main = io-wrap(eval)
+	eval = innermost(E)
+
+rules
+  E : Not(True())      -> False()       
+  E : Not(False())     -> True()
+  E : And(True(), x)   -> x        
+  E : And(x, True())   -> x   
+  E : And(False(), x)  -> False()     
+  E : And(x, False())  -> False()
+  E : Or(True(), x)    -> True()     
+  E : Or(x, True())    -> True()  
+  E : Or(False(), x)   -> x     
+  E : Or(x, False())   -> x
+  E : Impl(True(), x)  -> x 
+  E : Impl(x, True())  -> True()      
+  E : Impl(False(), x) -> True()
+  E : Eq(False(), x)   -> Not(x)
+  E : Eq(x, False())   -> Not(x)      
+  E : Eq(True(), x)    -> x
+  E : Eq(x, True())    -> x 
+	 
+
+  
+  

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/str-output/output
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/str-output/output	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+CompilationUnit(None,[],[ClassDec(ClassDecHead([Public],Id("Foo"),None,None,None),ClassBody([MethodDec(MethodDecHead([Public,Static],None,Void,Id("main"),[Param([],ArrayType(ClassOrInterfaceType(TypeName(Id("String")),None)),Id("ps"))],None),Block([If(Eq(ExprName(AmbName(Id("ps")),Id("length")),Lit(Deci("0"))),ExprStm(Invoke(Method(MethodName(AmbName(AmbName(Id("System")),Id("err")),Id("println"))),[Lit(String([Chars("No arguments")]))])),ExprStm(Invoke(Method(MethodName(AmbName(AmbName(Id("System")),Id("err")),Id("println"))),[Plus(ExprName(AmbName(Id("ps")),Id("length")),Lit(String([Chars(" arguments")])))])))]))]))])

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/StrategoFileManager.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/StrategoFileManager.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,10 @@
+package org;
+
+public class StrategoFileManager {
+	
+	/**
+	 * Points to the project in the workspace containing the stratego sources.
+	 */
+	public static String BASE = "/home/rlindeman/workspace/strj-dbg-test";
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/other/FileTest.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/other/FileTest.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,23 @@
+package org.other;
+
+import static org.junit.Assert.assertEquals;
+
+import java.io.File;
+
+import org.junit.Test;
+
+
+public class FileTest {
+	
+	@Test
+	public void filemethods() throws Exception {
+		String completePath = "/path/to/str/file/test-prop.str";
+		File f = new File(completePath);
+		String name = f.getName();
+		assertEquals("test-prop.str", name);
+		String parent = f.getParent();
+		assertEquals("/path/to/str/file", parent);
+		
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileLocalVar.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileLocalVar.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,13 @@
+package org.strategoxt.debug.core;
+
+public class DebugCompileLocalVar {
+
+	/**
+	 * @param args
+	 */
+	public static void main(String[] args) {
+		// TODO Auto-generated method stub
+
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileTestProp.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileTestProp.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,5 @@
+package org.strategoxt.debug.core;
+
+public class DebugCompileTestProp {
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,51 @@
+package org.strategoxt.debug.core;
+
+import java.io.IOException;
+
+import org.StrategoFileManager;
+import org.strategoxt.debug.core.util.DebugCompiler;
+
+public class DebugCompilerTest {
+
+	public static final String WORKING_DIR = StrategoFileManager.BASE + "/working";
+	
+	public static void main(String[] args) {
+		//String inputBase = StrategoFileManager.BASE;
+		String inputFilePath = "src/stratego/localvar/localvar.str";
+		//String strategoFilePath = inputBase + "/" + inputFilename;
+		String projectName = "localvar";
+		DebugCompiler debugCompiler = new DebugCompiler(WORKING_DIR);
+		// mkdir localvar/stratego in workingdir
+		// mkdir localvar/java
+		// mkdir localvar/class
+		String binBase = null;
+		boolean compileSucces = false;
+		try {
+			binBase = debugCompiler.debugCompile(StrategoFileManager.BASE, inputFilePath, projectName);
+			compileSucces = true;
+		} catch (IOException e) {
+			e.printStackTrace();
+		} catch (Exception e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		boolean runjava = true;
+		// run .class
+		if (runjava && compileSucces)
+		{
+			String input = StrategoFileManager.BASE + "/src/strategies/terms/test.prog";
+			String argsForMainClass = "-i " + input;
+			String mainClass = "localvar.localvar";
+			String mainArgs = mainClass + " " + argsForMainClass;
+			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String classpath = cp;
+			org.strategoxt.debug.core.util.Runner.run(projectName, mainArgs, classpath);
+		}
+	}
+	
+	private static String strj_dbg_core = "/home/rlindeman/workspace/strj-dbg-core";
+
+	private static String strategoxtjar = strj_dbg_core + "/lib/strategoxt.jar";
+	private static String libstrategodebuglib = strj_dbg_core + "/lib/strj_dbg_runtime_lib.jar";
+	private static String strjdebugruntime = strj_dbg_core + "/lib/strj_dbg_runtime_lib-java.jar";
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,362 @@
+package org.strategoxt.debug.core.control;
+
+import java.util.List;
+import java.util.Map.Entry;
+
+import junit.framework.Assert;
+
+import org.StrategoFileManager;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.debug.core.DebugCompilerTest;
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.RuleEnterBreakPoint;
+import org.strategoxt.debug.core.eventspec.StrategyEnterBreakPoint;
+import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;
+import org.strategoxt.debug.core.model.StrategoState;
+import org.strategoxt.debug.core.util.DebugSessionSettings;
+import org.strategoxt.debug.core.util.table.EventEntry;
+import org.strategoxt.debug.core.util.table.EventTable;
+
+public class DebugSessionManagerTest {
+
+	
+	public static void main(String[] args) {
+		runLocalVar();
+	}
+	
+	public static void runLocalVar()
+	{
+		DebugSessionManagerTest dsmt = new DebugSessionManagerTest();
+		//dsmt.testDSM1();
+		//dsmt.testDSM2();
+		//dsmt.testBreakpointLookup();
+		dsmt.testStepBreakPoint();
+	}
+	
+	// stratego program should already be compiled
+	@org.junit.Test
+	public void testDSM1()
+	{
+		String projectName = "localvar";
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(DebugCompilerTest.WORKING_DIR, projectName);
+		
+		//String binBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/class";
+		
+		String input = StrategoFileManager.BASE + "/src/strategies/terms/test2.prog";
+		String argsForMainClass = "-i " + input;
+		String mainClass = "localvar.localvar";
+		String mainArgs = mainClass + " " + argsForMainClass;
+		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory(); // was binBase
+		String classpath = cp;
+		
+		VMMonitorTestImpl1 vmMonitor = new VMMonitorTestImpl1();
+		DebugSessionManager dsm = this.setUp(debugSessionSettings, mainArgs, classpath, vmMonitor);
+		vmMonitor.setDSM(dsm);
+		
+		// which breakpoints will be hit?
+		VMStateTester vmStateTester = new VMStateTester();
+		vmStateTester.addName("find-comment-match");
+		vmStateTester.addName("find-comment-match");
+		vmMonitor.setVMStateTester(vmStateTester);
+		
+		// create a breakpoint
+		BreakPoint bp = null;
+		bp = new RuleEnterBreakPoint("find-comment-match", -1); // should hit "find-comment-by-name" two times
+		dsm.getEventSpecManager().add(bp);
+		System.out.println("RUN");
+	}
+	
+	// stratego program should already be compiled
+	@org.junit.Test
+	public void testDSM2()
+	{
+		String projectName = "localvar";
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(DebugCompilerTest.WORKING_DIR, projectName);
+		
+		//String binBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/class";
+		
+		String input = StrategoFileManager.BASE + "/src/strategies/terms/test2.prog";
+		String argsForMainClass = "-i " + input;
+		String mainClass = "localvar.localvar";
+		String mainArgs = mainClass + " " + argsForMainClass;
+		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory(); // was binBase
+		String classpath = cp;
+		
+		VMMonitorTestImpl1 vmMonitor = new VMMonitorTestImpl1();
+		DebugSessionManager dsm = this.setUp(debugSessionSettings, mainArgs, classpath, vmMonitor);
+		vmMonitor.setDSM(dsm);
+		
+		// which breakpoints will be hit?
+		VMStateTester vmStateTester = new VMStateTester();
+		vmStateTester.addName("find-comment-match");
+		vmStateTester.addName("first");
+		vmStateTester.addName("find-comment-match");
+		vmStateTester.addName("first");
+		vmMonitor.setVMStateTester(vmStateTester);
+		
+		// create a breakpoint
+		BreakPoint bp = null;
+		bp = new RuleEnterBreakPoint("find-comment-match", -1); // should hit "find-comment-by-name" two times
+		dsm.getEventSpecManager().add(bp);
+		bp = new StrategyEnterBreakPoint("first", -1); // should hit two times
+		dsm.getEventSpecManager().add(bp);
+		System.out.println("RUN");
+	}
+	
+	@org.junit.Test
+	public void testStepBreakPoint()
+	{
+		String projectName = "localvar";
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(DebugCompilerTest.WORKING_DIR, projectName);
+		
+		//String binBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/class";
+		//String strategoBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/stratego";
+		
+		String input = StrategoFileManager.BASE + "/src/strategies/terms/test2.prog";
+		String argsForMainClass = "-i " + input;
+		String mainClass = "localvar.localvar";
+		String mainArgs = mainClass + " " + argsForMainClass;
+		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory(); // was binBase
+		String classpath = cp;
+		
+		VMMonitorTestImpl1 vmMonitor = new VMMonitorTestImpl1();
+		DebugSessionManager dsm = this.setUp(debugSessionSettings, mainArgs, classpath, vmMonitor);
+		vmMonitor.setDSM(dsm);
+		
+		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
+		//EventTable eventTable = EventTable.readEventTable(location);
+		EventTable eventTable = dsm.getEventSpecManager().getEventTable();
+		Assert.assertEquals(46, eventTable.size());
+		
+		// 47, 8
+		// f* := <find-functions> definitions* // find functions
+		// in rule "match-comments"
+		List<EventEntry> entries = eventTable.getEventEntries(47, 8, "s-step");
+		Assert.assertEquals(1, entries.size());
+		
+		BreakPoint bp = null;
+		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 47);
+		dsm.getEventSpecManager().add(bp);
+
+		
+		// 48, 8
+		// c* := <find-comments> definitions* // find comments
+		entries = eventTable.getEventEntries(48, 8, "s-step");
+		Assert.assertEquals(1, entries.size());
+		
+		bp = null;
+		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 48);
+		dsm.getEventSpecManager().add(bp);
+
+		
+		// 49, 8
+		// out := <match-f-and-c> (f*, c*)
+		entries = eventTable.getEventEntries(49, 8, "s-step");
+		Assert.assertEquals(1, entries.size());
+		
+		bp = null;
+		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 49);
+		dsm.getEventSpecManager().add(bp);
+
+		
+		
+		// which breakpoints will be hit?
+		VMStateTester vmStateTester = new VMStateTester();
+		vmStateTester.addName("match-comments");
+		vmStateTester.addName("match-comments");
+		vmStateTester.addName("match-comments");
+		vmMonitor.setVMStateTester(vmStateTester);
+		
+
+		System.out.println("RUN");
+	}
+	
+	@org.junit.Test
+	public void testStepVarBreakPoint()
+	{
+		String projectName = "localvar";
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(DebugCompilerTest.WORKING_DIR, projectName);
+		
+		//String binBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/class";
+		//String strategoBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/stratego";
+		
+		String input = StrategoFileManager.BASE + "/src/strategies/terms/test2.prog";
+		String argsForMainClass = "-i " + input;
+		String mainClass = "localvar.localvar";
+		String mainArgs = mainClass + " " + argsForMainClass;
+		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory(); // was binBase
+		String classpath = cp;
+		
+		VMMonitorTestImpl1 vmMonitor = new VMMonitorTestImpl1();
+		DebugSessionManager dsm = this.setUp(debugSessionSettings, mainArgs, classpath, vmMonitor);
+		vmMonitor.setDSM(dsm);
+		
+		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
+		//EventTable eventTable = EventTable.readEventTable(location);
+		EventTable eventTable = dsm.getEventSpecManager().getEventTable();
+		Assert.assertEquals(46, eventTable.size());
+		
+		// 47, 8
+		// f* := <find-functions> definitions* // find functions
+		// in rule "match-comments"
+		List<EventEntry> entries = eventTable.getEventEntries(47, 8, "s-step");
+		Assert.assertEquals(1, entries.size());
+		
+		BreakPoint bp = null;
+		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 47);
+		dsm.getEventSpecManager().add(bp);
+
+		
+		// 48, 8
+		// c* := <find-comments> definitions* // find comments
+		entries = eventTable.getEventEntries(48, 8, "s-step");
+		Assert.assertEquals(1, entries.size());
+		
+		bp = null;
+		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 48);
+		dsm.getEventSpecManager().add(bp);
+
+		
+		// 49, 8
+		// out := <match-f-and-c> (f*, c*)
+		entries = eventTable.getEventEntries(49, 8, "s-step");
+		Assert.assertEquals(1, entries.size());
+		
+		bp = null;
+		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 49);
+		dsm.getEventSpecManager().add(bp);
+
+		
+		
+		// which breakpoints will be hit?
+		VMStateTester vmStateTester = new VMStateTester();
+		vmStateTester.addName("match-comments");
+		vmStateTester.addName("match-comments"); // value f* should be set
+		vmStateTester.addName("match-comments"); // value c* should be set
+		vmMonitor.setVMStateTester(vmStateTester);
+		
+
+		System.out.println("RUN");
+	}
+	
+	@org.junit.Test
+	public void testBreakpointLookup()
+	{
+		String projectName = "localvar";
+		// TODO: project should be compiled with debug info!
+		
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(DebugCompilerTest.WORKING_DIR, projectName);
+		//String binBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/class";
+		//String strategoBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/stratego";
+		
+		String input = StrategoFileManager.BASE + "/src/strategies/terms/test2.prog";
+		String argsForMainClass = "-i " + input;
+		String mainClass = "localvar.localvar";
+		String mainArgs = mainClass + " " + argsForMainClass;
+		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory(); // was binBase
+		String classpath = cp;
+		
+		VMMonitorTestImpl1 vmMonitor = new VMMonitorTestImpl1();
+		DebugSessionManager dsm = this.setUp(debugSessionSettings, mainArgs, classpath, vmMonitor);
+		vmMonitor.setDSM(dsm);
+		
+		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
+		//EventTable eventTable = EventTable.readEventTable(location);
+		EventTable eventTable = dsm.getEventSpecManager().getEventTable();
+		Assert.assertEquals(46, eventTable.size());
+		
+		// find-comment-match s-enter is at 71,7
+		List<EventEntry> entries = eventTable.getEventEntries(71, 7);
+		Assert.assertEquals(2, entries.size()); // r-enter/r-exit
+		EventEntry rEnter = null; // only use the r-enter
+		for(EventEntry e : entries)
+		{
+			if ("r-enter".equals(e.getEventType()))
+			{
+				rEnter = e;
+			}
+		}
+		Assert.assertEquals("find-comment-match", rEnter.getStrategyName());
+		// found the "find-comment-match" rule in the table
+
+		// which breakpoints will be hit?
+		VMStateTester vmStateTester = new VMStateTester();
+		vmStateTester.addName("find-comment-match");
+		vmStateTester.addName("find-comment-match");
+		vmMonitor.setVMStateTester(vmStateTester);
+		
+		// create a breakpoint
+		BreakPoint bp = null;
+		bp = new RuleEnterBreakPoint(rEnter.getStrategyName(), -1); // should hit "find-comment-by-name" two times
+		dsm.getEventSpecManager().add(bp);
+		System.out.println("RUN");
+	}
+	
+	/**
+	 * classPath contains the binary files of the compiled strj program
+	 * @param mainArgs
+	 * @param classpath
+	 */
+	public DebugSessionManager setUp(DebugSessionSettings debugSessionSettings, String mainArgs, String classpath, VMMonitor vmMonitor)
+	{
+		DebugSessionManager manager = new DebugSessionManager(debugSessionSettings, vmMonitor);
+		manager.initVM(mainArgs, classpath);
+		//manager.initVM(mainArgs);
+		manager.setupEventListeners();
+		manager.redirectOutput();
+		return manager;
+		//manager.runVM();		
+	}
+
+	
+	class VMMonitorTestImpl1 implements VMMonitor {
+
+		private DebugSessionManager debugSessionManager;
+		private VMStateTester vmStateTester;
+		
+		public VMMonitorTestImpl1() {
+
+		}
+		
+		public void setVMStateTester(VMStateTester vmStateTester) {
+			// TODO Auto-generated method stub
+			this.vmStateTester = vmStateTester;
+		}
+
+		public void setDSM(DebugSessionManager dsm)
+		{
+			this.debugSessionManager = dsm;
+		}
+		
+		public void stateChanged(StrategoState state) {
+			// TODO Auto-generated method stub
+			//System.out.println("state changed");
+			String name = state.currentFrame().getName();
+			boolean expected = vmStateTester.isNextHit(name);
+			System.out.println("expected: " + expected);
+			String message = "Hit " + name + ", but expected to hit " + vmStateTester.currentHit();
+			Assert.assertTrue(message, expected);
+			String termString = state.currentFrame().getCurrentTerm().toString();
+			System.out.println("current: " + termString);
+			for ( Entry<String, IStrategoTerm> entry : state.currentFrame().getVariables().entrySet() )
+			{
+				System.out.println("variable entry " + entry.getKey() + " # " + entry.getValue());
+			}
+			this.debugSessionManager.resumeVM();
+		}
+
+		public void vmEvent(String event) {
+			// TODO Auto-generated method stub
+			//System.out.println("vmEvent: " + event);
+			if ("VMDEATH".equals(event))
+			{
+				// vm terminated
+				if (this.vmStateTester.hasNextHit())
+				{
+					Assert.fail("VM has terminated but there are still some expected hits left...");
+				}
+			}
+		}
+		
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestHelper.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestHelper.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,9 @@
+package org.strategoxt.debug.core.control;
+
+public interface VMMonitorTestHelper {
+	
+	public void setDebugSessionManager(DebugSessionManager debugSessionManager);
+	
+	public void callWhenSuspended();
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestImpl.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestImpl.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,17 @@
+package org.strategoxt.debug.core.control;
+
+import org.strategoxt.debug.core.model.StrategoState;
+
+public class VMMonitorTestImpl implements VMMonitor {
+
+	public void stateChanged(StrategoState state) {
+		// TODO Auto-generated method stub
+		System.out.println("state changed");
+	}
+
+	public void vmEvent(String event) {
+		// TODO Auto-generated method stub
+		System.out.println("vmEvent: " + event);
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMStateTester.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMStateTester.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,55 @@
+package org.strategoxt.debug.core.control;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class VMStateTester {
+
+	private List<String> willHitNames = new ArrayList<String>();
+	
+	private int currentHit = -1;
+	
+	public boolean isNextHit(String name){
+		currentHit++;
+		if (currentHit >= willHitNames.size())
+		{
+			// we are hitting more breakpoints than anticipated...
+			return false;
+		}
+		String expected = willHitNames.get(currentHit);
+		if (name != null && name.equals(expected))
+		{
+			return true;
+		}
+		else
+		{
+			return false;
+		}
+	}
+	
+	public String currentHit()
+	{
+		if (currentHit < 0 || currentHit >= willHitNames.size())
+		{
+			return null;
+		}
+		return this.willHitNames.get(currentHit);
+	}
+	
+	public boolean hasNextHit()
+	{
+		if (currentHit < 0 || (currentHit + 1) >= willHitNames.size())
+		{
+			return false;
+		}
+		else
+		{
+			return true;
+		}
+	}
+	
+	public void addName(String name)
+	{
+		this.willHitNames.add(name);
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/DebugCompilerWrapper.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/DebugCompilerWrapper.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,12 @@
+package org.strategoxt.debug.core.util;
+
+import org.strategoxt.debug.core.util.DebugCompiler;
+
+public class DebugCompilerWrapper extends DebugCompiler {
+
+	public DebugCompilerWrapper(String workingDir) {
+		super(workingDir);
+		// TODO Auto-generated constructor stub
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/table/EventTableTest.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/table/EventTableTest.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,76 @@
+package org.strategoxt.debug.core.util.table;
+
+import java.util.List;
+
+import junit.framework.Assert;
+
+public class EventTableTest {
+	
+	public static void main(String[] args) {
+		runTestTable();
+	}
+
+	public static void runTestTable()
+	{
+		EventTableTest test = new EventTableTest();
+		test.testReadTable();
+	}
+	
+	public void testReadTable()
+	{
+		String location = "working/localvar/stratego/localvar.table";
+		EventTable eventTable = EventTable.readEventTable(location);
+		Assert.assertEquals(46, eventTable.size());
+		
+		// 31,1 // 0
+		List<EventEntry> entries = countEntries(eventTable, 31, 1, 0);
+		//System.out.println(entries.size());
+		
+		// 31,2 // 0
+		entries = countEntries(eventTable, 31, 2, 0);
+		
+		// 31,3 // 2 enter/exit
+		entries = countEntries(eventTable, 31, 3, 2);
+		
+		// 31,4 //  2 enter/exit
+		entries = countEntries(eventTable, 31, 4, 2);
+		
+		// 32,1 // 2 enter/exit
+		entries = countEntries(eventTable, 32, 1, 2);
+
+		// 32,2 // 2 enter/exit
+		entries = countEntries(eventTable, 32, 2, 2);
+
+		// 32,3 // 2 enter/exit
+		entries = countEntries(eventTable, 32, 3, 2);
+
+		// 32,4 // 2 enter/exit
+		entries = countEntries(eventTable, 32, 4, 2);
+
+		// 32,5 // 3 enter/exit/step
+		entries = countEntries(eventTable, 32, 5, 3);
+
+		// 43,2 // enter/exit
+		entries = countEntries(eventTable, 43, 2, 2);
+		
+		// 43, 4 // enter/exit
+		entries = countEntries(eventTable, 43, 4, 2);
+		// 47,4
+		entries = countEntries(eventTable, 47, 4, 3);
+		// 48,6
+		entries = countEntries(eventTable, 48, 6, 3);
+		// 49,6
+		entries = countEntries(eventTable, 49, 6, 3);
+		
+		// clear the list
+		entries.clear();
+	}
+	
+	private List<EventEntry> countEntries(EventTable eventTable, int linenumber, int token_position, int count)
+	{
+		List<EventEntry> entries = eventTable.getEventEntries(linenumber, token_position);
+		Assert.assertEquals(count, entries.size());
+		return entries;
+	}
+	
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/thread-main.txt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/thread-main.txt	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,79 @@
+Start thread
+====== main ======
+invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+====== main end ======

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/writer.txt
==============================================================================

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.classpath	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry excluding="trans/**|trans/|trans/" kind="src" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.externalToolBuilders/Test build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.externalToolBuilders/Test build.main.xml.launch	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/strj-dbg-transformer/build.main.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${project_loc}/build.main.xml"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${project_loc}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.project	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.strategoxt.imp.debug.stratego.transformer</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+				<dictionary>
+					<key>LaunchConfigHandle</key>
+					<value>&lt;project&gt;/.externalToolBuilders/Test build.main.xml.launch</value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/.settings/org.eclipse.jdt.core.prefs	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,22 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: Test Plug-in
+Bundle-SymbolicName: strj_dbg_transformer;singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: test.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+ org.eclipse.core.resources,
+ org.eclipse.imp.runtime,
+ org.eclipse.ui,
+ lpg.runtime,
+ org.eclipse.jface.text,
+ org.eclipse.ui.editors,
+ org.eclipse.ui.workbench.texteditor,
+ org.strategoxt.imp.runtime,
+ org.spoofax.aterm,
+ org.spoofax.jsglr,
+ org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: test

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/README.txt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/README.txt	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+This project transforms a stratego program to a stratego program with debug information

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.custom.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.custom.xml	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,473 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+	<target name="spoofaximp.default" depends="spoofaximp.default.ctree" />
+	<target name="spoofaximp.default.ctree" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp,refresh" />
+	<target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  java.jar,sdf2imp,refresh" />
+
+	<!-- Initialization -->
+	<!--<available file="${build}/strjdebugruntime/strategies/Main.class" property="java.jar.enabled"/>-->
+	<!-- do not use class file exists method, but set it explicitly -->
+	<!-- <condition property="java.jar.import" value="-la strjdebugruntime.strategies" else=""> -->
+	<condition property="java.jar.import" value="-la ${build.stratego.external.strategies.name}" else="">
+		<isset property="java.jar.enabled" />
+	</condition>
+	<condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+		<isset property="java.jar.enabled" />
+	</condition>
+	<available file="${trans}/${strmodule}.str" property="build.stratego.enabled" />
+	<dirname property="externaldefdir" file="${externaldef}" />
+	<condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+		<isset property="externaldef" />
+	</condition>
+	<condition property="externaljarimport" value=":${externaljar}" else="">
+		<isset property="externaljar" />
+	</condition>
+	<condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+		<isset property="eclipse.running" />
+	</condition>
+	<condition property="externaljarflags" value="${externaljarflags}" else="">
+		<isset property="externaljarflags" />
+	</condition>
+	<condition property="metasdfmodule.available" value="1">
+		<available file="${syntax}/${metasdfmodule}.sdf" />
+	</condition>
+
+	<fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually" />
+	<mkdir dir="${build}" />
+	<mkdir dir="${src-gen}" />
+	<mkdir dir="${dist}" />
+	<mkdir dir="${include}" />
+	<mkdir dir="${lib}" />
+	<mkdir dir="${syntax}" />
+
+	<target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone" />
+
+	<target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+		<java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+			<arg value="${include}/${esvmodule}.packed.esv" />
+		</java>
+	</target>
+
+	<target name="refresh" if="eclipse.running">
+		<eclipse.convertPath fileSystemPath="${basedir}" property="projectdir" />
+		<eclipse.refreshLocal resource="${projectdir}/lib" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/syntax/${sdfmodule}.pp.generated" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/lib/editor-common.generated.str" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite" />
+		<eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite" />
+		<eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen" />
+		<eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite" />
+		<eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build" />
+		<eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite" />
+		<!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+	</target>
+
+	<target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+		<java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+			<arg value="-i" />
+			<arg value="${basedir}/editor/${esvmodule}.main.esv" />
+			<arg value="-p" />
+			<arg value="${include}/${sdfmodule}.tbl" />
+		</java>
+	</target>
+
+	<target name="check-classpath">
+		<available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available" />
+		<antcall target="check-classpath.helper" />
+	</target>
+
+	<target name="check-classpath.helper" unless="check-classpath.available">
+		<echo level="error" message="Could not load the Spoofax plugin loading classes." />
+		<echo level="error" message="Make sure it is on the class path." />
+		<echo level="error" message="" />
+		<echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:" />
+		<echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab," />
+		<echo level="error" message="and ensure Run in the same JRE as the workspace is selected" />
+		<echo level="error" message="alternatively, build the project using Build Project in the Project menu" />
+		<fail />
+	</target>
+
+	<target name="sdf2table" depends="make-permissive">
+		<apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+			<arg value="-i" />
+			<srcfile />
+			<arg value="-o" />
+			<targetfile />
+			<arg value="-m" />
+			<arg value="${sdfmodule}" />
+
+			<fileset file="${include}/${sdfmodule}-Permissive.def" />
+			<mapper type="glob" from="*-Permissive.def" to="*.tbl" />
+		</apply>
+	</target>
+
+	<target name="meta-sdf2table" if="metasdfmodule.available">
+		<fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def" />
+		<antcall target="sdf2table">
+			<param name="sdfmodule" value="${metasdfmodule}" />
+			<param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}" />
+		</antcall>
+		<antcall target="meta-sdf2table.helper" />
+	</target>
+
+	<target name="meta-sdf2table.helper" if="eclipse.running">
+		<eclipse.convertPath fileSystemPath="${include}" property="includeresource" />
+		<eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite" />
+	</target>
+
+	<target name="make-permissive" depends="pack-sdf,copy-sdf">
+		<dependset>
+			<srcfileset file="${include}/${sdfmodule}.def" />
+			<targetfileset file="${include}/${sdfmodule}-Permissive.def" />
+		</dependset>
+		<available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available" />
+		<antcall target="make-permissive.helper" />
+	</target>
+
+	<target name="make-permissive.helper" unless="permissive-grammar.available">
+		<java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+			<arg value="-i" />
+			<arg value="${include}/${sdfmodule}.def" />
+			<arg value="-o" />
+			<arg value="${include}/${sdfmodule}-Permissive.def" />
+			<arg line="--optimize on" />
+		</java>
+	</target>
+
+	<target name="utils-files">
+		<!-- only useful for builds outside of Eclipse -->
+		<mkdir dir="utils" />
+		<copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false" />
+		<copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false" />
+		<copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false" />
+		<copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false" />
+	</target>
+
+	<target name="pack-sdf" unless="externaldef">
+		<dependset>
+			<srcfileset dir="${syntax}">
+				<include name="**/*.sdf" />
+			</srcfileset>
+			<targetfileset file="${include}/${sdfmodule}.def" />
+		</dependset>
+		<available file="${include}/${sdfmodule}.def" property="pack-sdf.available" />
+		<antcall target="pack-sdf.helper" />
+	</target>
+
+	<target name="pack-sdf.helper" unless="pack-sdf.available">
+		<condition property="utils-include" value="-I ${utils}" else="">
+			<available file="${utils}" />
+		</condition>
+		<java classname="run" failonerror="true">
+			<arg value="org.strategoxt.tools.main-pack-sdf" />
+			<arg value="-i" />
+			<arg value="${syntax}/${sdfmodule}.sdf" />
+			<arg value="-o" />
+			<arg value="${include}/${sdfmodule}.def" />
+			<arg value="-I" />
+			<arg value="${syntax}" />
+			<arg value="-I" />
+			<arg value="${lib}" />
+			<arg line="${utils-include}" />
+			<arg line="${build.sdf.imports}" />
+		</java>
+	</target>
+
+	<target name="copy-sdf" if="externaldef">
+		<copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true" />
+	</target>
+
+	<target name="copy-jar" if="externaljar">
+		<copy file="${externaljar}" todir="${include}" preservelastmodified="true" />
+	</target>
+
+	<target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+		<dependset>
+			<srcfileset file="${include}/${sdfmodule}.rtg" />
+			<targetfileset file="${include}/${sdfmodule}.str" />
+		</dependset>
+		<available file="${include}/${sdfmodule}.str" property="rtg2sig.available" />
+		<antcall target="rtg2sig.helper" />
+	</target>
+
+	<target name="rtg2sig.helper" unless="rtg2sig.available">
+		<java classname="run" failonerror="true">
+			<arg value="org.strategoxt.tools.main-rtg2sig" />
+			<arg value="-i" />
+			<arg value="${include}/${sdfmodule}.rtg" />
+			<arg value="-o" />
+			<arg value="${include}/${sdfmodule}.str" />
+			<arg value="--module" />
+			<arg value="${sdfmodule}" />
+		</java>
+	</target>
+
+	<target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+		<dependset>
+			<srcfileset file="${include}/${sdfmodule}.def" />
+			<targetfileset file="${include}/${sdfmodule}.rtg" />
+		</dependset>
+		<available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available" />
+		<antcall target="sdf2rtg.helper" />
+	</target>
+
+	<target name="sdf2rtg.helper" unless="sdf2rtg.available">
+		<java classname="run" failonerror="true">
+			<arg value="org.strategoxt.tools.main-sdf2rtg" />
+			<arg value="-i" />
+			<arg value="${include}/${sdfmodule}.def" />
+			<arg value="-m" />
+			<arg value="${sdfmodule}" />
+			<arg value="-o" />
+			<arg value="${include}/${sdfmodule}.rtg" />
+			<arg value="--ignore-missing-cons" />
+			<arg value="-Xnativepath" />
+			<arg value="${build.strategoxt.sdf}" />
+		</java>
+	</target>
+
+	<target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+		<dependset>
+			<srcfileset file="${include}/${sdfmodule}.def" />
+			<targetfileset file="${syntax}/${sdfmodule}.generated.pp" />
+			<targetfileset file="${include}/${sdfmodule}.generated.pp.af" />
+		</dependset>
+		<available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available" />
+		<antcall target="ppgen.helper" />
+		<available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available" />
+		<antcall target="ppgen.helper.fallback" />
+	</target>
+
+	<target name="ppgen.helper" unless="ppgen.available">
+		<!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+		<java classname="run" failonerror="false">
+			<arg value="org.strategoxt.tools.main-ppgen" />
+			<arg value="-i" />
+			<arg value="${include}/${sdfmodule}.def" />
+			<arg value="-o" />
+			<arg value="${include}/${sdfmodule}.generated.pp.af" />
+			<arg value="-t" />
+		</java>
+		<java classname="run" failonerror="false">
+			<arg value="org.strategoxt.tools.main-pp-pp-table" />
+			<arg value="-i" />
+			<arg value="${include}/${sdfmodule}.generated.pp.af" />
+			<arg value="-o" />
+			<arg value="${syntax}/${sdfmodule}.generated.pp" />
+		</java>
+	</target>
+
+	<target name="ppgen.helper.fallback" unless="ppgen.available">
+		<echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])" />
+	</target>
+
+	<target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+		<dependset>
+			<srcfileset file="${syntax}/${sdfmodule}.pp" />
+			<targetfileset file="${include}/${sdfmodule}.pp.af" />
+		</dependset>
+		<available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available" />
+		<available file="${include}/${sdfmodule}.pp.af" property="pppack.available" />
+		<antcall target="pppack.helper" />
+		<available file="${include}/${sdfmodule}.pp.af" property="pppack.available" />
+		<antcall target="pppack.helper.fallback" />
+	</target>
+
+	<target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+		<java classname="run" failonerror="true">
+			<arg value="org.strategoxt.tools.main-parse-pp-table" />
+			<arg value="-i" />
+			<arg value="${syntax}/${sdfmodule}.pp" />
+			<arg value="-o" />
+			<arg value="${include}/${sdfmodule}.pp.af" />
+		</java>
+	</target>
+
+	<target name="pppack.helper.fallback" unless="pppack.available">
+		<echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])" />
+	</target>
+
+	<!-- Aster to Stratego -->
+	<target name="stratego.aster">
+		<available file="${trans}/${strmodule}.rtree" property="aster-output.available" />
+		<pathconvert property="aster-input" setonempty="false" pathsep=" ">
+			<path>
+				<fileset dir="${basedir}" includes="*.astr" />
+			</path>
+		</pathconvert>
+		<dependset>
+			<srcfileset dir="${basedir}">
+				<include name="**/*.astr" />
+			</srcfileset>
+			<targetfileset file="${trans}/${strmodule}.rtree" />
+		</dependset>
+		<condition property="aster-output.uptodate">
+			<and>
+				<isset property="aster-output.available" />
+				<available file="${trans}/${strmodule}.rtree" />
+			</and>
+		</condition>
+		<available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate" />
+		<antcall target="stratego.aster.helper" />
+	</target>
+
+	<target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+		<java classname="org.strategoxt.aster.Main" failonerror="true">
+			<arg value="-i" />
+			<fileset dir="${basedir}">
+				<include name="**/*.astr" />
+			</fileset>
+		</java>
+	</target>
+
+	<!--
+		Create a classpath container which can be later used in the ant task
+	-->
+	<path id="plugin.dependencies.classpath">
+
+		<fileset dir="/usr/lib/eclipse/plugins">
+			<include name="**/*.jar" />
+			<!--
+			<include name="org.eclipse.osgi_3.5.1.R35x_v20090827.jar" />
+			<include name="org.eclipse.osgi_3.5.2.R35x_v20100126.jar" />
+			<include name="org.eclipse.core.runtime_3.5.0.v20090525.jar" />
+			<include name="org.eclipse.core.resources_3.5.1.R35x_v20090826-0451.jar" />
+			<include name="org.eclipse.core.resources_3.5.2.R35x_v20091203-1235.jar" />
+			<include name="org.eclipse.ui.workbench_3.5.1.M20090826-0800a.jar" />
+			<include name="org.eclipse.ui.workbench_3.5.2.M20100113-0800a.jar" />
+			<include name="org.eclipse.equinox.common_3.5.1.R35x_v20090807-1100.jar"/>
+			-->
+		</fileset>
+		<fileset dir="/home/rlindeman/.eclipse/org.eclipse.platform_3.5.0_155965261">
+			<include name="**/*.jar" />
+		</fileset>
+	</path>
+
+	<target name="java.jar" if="java.jar.enabled">
+		<delete>
+			<fileset dir="${build}" includes="${build.stratego.external.name}/**" />
+		</delete>
+		<javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" classpathref="plugin.dependencies.classpath" srcdir="${src-gen}" includes="${build.stratego.external.name}/**" destdir="${build}" source="1.5" target="1.5" debug="on" />
+		<!-- <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/> -->
+		<jar basedir="${build}" includes="${build.stratego.external.name}/**" update="no" destfile="${include}/${strmodule}-java.jar" />
+	</target>
+
+	<!-- Stratego to Java interpreter -->
+	<target name="stratego.ctree" depends="rtg2sig">
+		<dependset>
+			<srcfileset dir="${basedir}">
+				<include name="**/*.str" />
+				<include name="**/*.astr" />
+				<exclude name="lib/editor-common.generated.str" />
+			</srcfileset>
+			<targetfileset file="${include}/${strmodule}.ctree" />
+		</dependset>
+		<available file="${include}/${strmodule}.ctree" property="strc-java.available" />
+		<antcall target="copy-jar" />
+		<antcall target="stratego.jvm.helper">
+			<param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree" />
+			<param name="build.stratego.extraargs" value="-F" />
+		</antcall>
+	</target>
+
+	<!-- Stratego to Java compiler -->
+	<target name="stratego.jar" depends="rtg2sig,utils-files">
+		<dependset>
+			<srcfileset dir="${basedir}">
+				<include name="**/*.str" />
+				<include name="**/*.astr" />
+				<exclude name="lib/editor-common.generated.str" />
+			</srcfileset>
+			<targetfileset file="${src-gen}/trans/Main.java" />
+		</dependset>
+		<available file="${src-gen}/trans/Main.java" property="strc-java.available" />
+		<antcall target="copy-jar" />
+		<antcall target="stratego.jar.deletehelper" />
+		<antcall target="stratego.jvm.helper">
+			<param name="build.stratego.outputfile" value="${src-gen}/${build.stratego.library.location}/Main.java" />
+			<param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}" />
+		</antcall>
+		<!--<javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>-->
+		<delete>
+			<fileset dir="${build}" includes="${build.stratego.library.location}/**" />
+		</delete>
+		<javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="${build.stratego.library.location}/**" destdir="${build}" source="1.5" target="1.5" debug="on" />
+		<!-- copy imported terms -->
+		<copy todir="${build}/trans">
+			<fileset dir="${src-gen}/${build.stratego.library.location}" excludes="**/*.java" />
+		</copy>
+		<jar basedir="${build}" includes="${build.stratego.library.location}/**" destfile="${include}/${strmodule}.tmp.jar" />
+		<move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar" />
+		<!--<delete><fileset dir="${build}" includes="trans/**"/></delete>-->
+	</target>
+
+	<target name="stratego.jar.deletehelper" unless="strc-java.available">
+		<delete>
+			<fileset dir="${src-gen}" includes="trans/**" />
+			<fileset dir="${build}" includes="trans/**" />
+		</delete>
+	</target>
+
+	<target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+		<delete file="${include}/${strmodule}.rtree" failonerror="false" />
+		<mkdir dir="${src-gen}/${build.stratego.library.location}" />
+		<java classname="org.strategoxt.strj.Main" failonerror="true">
+			<arg value="-i" />
+			<arg value="${trans}/${strmodule}.str" />
+			<arg value="-o" />
+			<arg value="${build.stratego.outputfile}" />
+			<arg value="-p" />
+			<arg value="${build.stratego.library.name}" />
+			<arg value="--library" />
+			<arg value="--clean" />
+			<arg line="${build.stratego.args}" />
+			<arg line="${build.stratego.extraargs}" />
+			<arg line="${externaljarflags}" />
+			<arg line="${externaldefimport}" />
+			<arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;" />
+		</java>
+		<delete file="${include}/${strmodule}.rtree" failonerror="false" />
+		<!-- <mkdir dir="${build}/trans" /> -->
+	</target>
+
+	<!-- Stratego to C-based native executable -->
+	<target name="stratego.c">
+		<antcall target="stratego.c.helper">
+			<param name="build.stratego.outputpath" value="${basedir}/include" />
+			<param name="build.stratego.extraargs" value="" />
+			<param name="build.stratego.extension" value="" />
+			<param name="build.stratego.compiler" value="strc" />
+		</antcall>
+	</target>
+
+	<!-- Helper target for calling the stratego compiler -->
+	<target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+		<apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+			<arg value="-i" />
+			<srcfile />
+			<arg value="-o" />
+			<targetfile />
+			<arg line="${build.stratego.args}" />
+			<arg line="${build.stratego.extraargs}" />
+			<arg line="${externaldefimport}" />
+			<arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;" />
+
+			<fileset file="${trans}/${strmodule}.str" />
+			<mapper type="glob" from="*.str" to="*.${build.stratego.extension}" />
+		</apply>
+	</target>
+
+	<target name="clean" description="clean up">
+		<delete dir="${build}" />
+		<delete file="${src-gen}/trans/Main.java" />
+	</target>
+</project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.xml	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,440 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  java.jar,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${build}/test/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la test.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-t"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
+                <path><fileset dir="${basedir}" includes="*.astr"/></path>
+            </pathconvert>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <fileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </fileset>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${src-gen}/trans/Main.java"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="Strj-dbg-transformer" default="all">
+
+	<!-- Key input modules -->
+	<property name="sdfmodule" value="Test" />
+	<property name="metasdfmodule" value="Stratego-Test" />
+	<property name="esvmodule" value="Test" />
+	<property name="strmodule" value="org.strjdbg.transformer" />
+
+	<!-- Project directories -->
+	<property name="trans" location="trans" />
+	<property name="src-gen" location="editor/java" />
+	<property name="syntax" location="syntax" />
+	<property name="include" location="include" />
+	<property name="lib" location="lib" />
+	<property name="build" location="bin" />
+	<property name="dist" location="dist" />
+
+	<!-- we want a custom package name for the jars, otherwise it will clash with other stratego jars -->
+	<!-- build java library name -->
+	<property name="build.stratego.library.name" value="org.strjdbg.transformer"/>
+	<property name="build.stratego.library.location" value="org/strjdbg/transformer"/>
+		
+	<!-- Imports -->
+	<property name="build.sdf.imports" value="" />
+	<property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm -la strc" />
+
+	<!-- External .def and .jar locations -->
+	<property name="externaldef" location="syntax/Stratego-Sugar.def" />
+
+	<!--
+        <property name="externaljar" value="lib/debug_lib.jar"/>
+        <property name="externaljarflags" value="-la org.strategoxt.debug_lib"/>
+        -->
+
+	<!-- Environment configuration for command-line builds -->
+	<condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+		<isset property="eclipse.spoofaximp.nativeprefix" />
+	</condition>
+	<property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin" />
+
+    <!-- do not use the default generated file, this file is re-generated after each run -->
+	<!-- <import file="build.generated.xml"/> -->
+	<import file="build.generated.custom.xml"/>
+
+	<!-- Main target -->
+	<!--<target name="all" depends="spoofaximp.default.ctree"/>-->
+
+	<!--
+How can I compile my Stratego specification to a JAR file instead of an interpreted ctree?
+In your build.main.xml file, change this line:
+<target name="all" depends="spoofaximp.default"/>
+into
+<target name="all" depends="sdf2table,ppgen,pppack,stratego.aster,stratego.jar,sdf2imp,refresh"/>
+Then in your editor/YourLanguage-Builders.esv, 
+change the provider from 
+provider: include/yourlang.ctree 
+to 
+provider: include/yourlang.jar. 
+When you distribute your plugin, be sure you set the "unpack" option to "true" for your plugin.
+-->
+	<!-- original version -->
+	<!-- <target name="all" depends="sdf2table,ppgen,pppack,stratego.aster,stratego.jar,sdf2imp,refresh" /> -->
+	<!-- no eclipse refresh -->
+	<!--<target name="all" depends="sdf2table,ppgen,pppack,stratego.aster,stratego.jar"/>-->
+	
+	<!-- Main target -->
+	<!-- interpreted ctree -->
+	<!--<target name="all" depends="spoofaximp.default.ctree"/>-->
+	<!-- compile to jar -->
+	<target name="all" depends="spoofaximp.default.jar" />
+</project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.properties	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Builders.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,23 @@
+
+module Test-Builders
+
+imports Test-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                                               
+  //provider                  : include/test.ctree     // c-based                                                                          
+  provider: include/org.strjdbg.transformer.jar // java-based
+                                          
+// we do not need an editor, as we only transform stratego files                                                                                                                               
+//  observer                  : editor-analyze                                                                                   
+                                                                                                                               
+//  builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
+  builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder                   : "Transform stratego" = generate-str (openeditor) (realtime)                                                                                                                 
+  // on save: generate-java                                                                                                    
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Colorer.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,9 @@
+module Test-Colorer
+
+imports Test-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Completions.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,21 @@
+module Test-Completions
+
+imports Test-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+
+// no syntax completion needed, as we only have stratego files and do not need an editor                                     
+  // Syntax completion:                  
+//  completion template                  : "module " <m> (blank)
+//  completion template                  : "entity " <e> " {}" (blank)
+                                         
+  // Semantic (identifier) completion:   
+//  completion proposer                  : editor-complete
+//  completion trigger                   : ":"
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Folding.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,9 @@
+module Test-Folding
+
+imports Test-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Outliner.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,9 @@
+module Test-Outliner
+
+imports Test-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-References.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,16 @@
+module Test-References
+
+imports Test-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+
+// we do not need an editor so we dont need reference resolving/hover                
+//  reference _ : editor-resolve
+//  hover _     : editor-hover
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Syntax.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,9 @@
+module Test-Syntax
+
+imports Test-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test.main.esv	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,16 @@
+module Test.main
+
+imports Test-Builders Test-Colorer Test-Completions Test-Folding Test-Outliner Test-References Test-Syntax
+
+language General properties
+                  
+  name          : Test
+  id            : test
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the Test language"
+  url           : http://strategoxt.org
+                  
+  extensions    : tes
+  table         : include/Test.tbl
+  start symbols : Module
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/Activator.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,44 @@
+package test;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "Test";
+
+  public static final String kLanguageName = "Test";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/TestParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/TestParseController.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,89 @@
+package test;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class TestParseController extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("Test");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = TestParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = TestParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(TestParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return TestParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/TestParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/TestParseControllerGenerated.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,89 @@
+package test;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class TestParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("Test");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = TestParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = TestParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(TestParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return TestParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/TestValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/TestValidator.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,12 @@
+package test;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class TestValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return TestParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/lib/editor-common.generated.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,254 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-test-file
+  parse-test-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/Test.tbl)>
+    )
+
+  parse-string = parse-test-string
+  parse-test-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/Test.tbl)>
+    )
+  
+  parse-stream = parse-test-stream
+  parse-test-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/Test.tbl)>
+    )
+
+  pp-test-string =
+    ast2abox(|[<import-term(include/Test.generated.pp.af)>,
+               <import-term(include/Test.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "Test", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    !Some(<id>); all(s); ?Some(<id>)
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/test.str file. These definitions should also be automatically 
+  // generated in the imported include/Test.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/lib/strategodebuglib.rtree
==============================================================================
Binary file. No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/plugin.xml	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="tes" description="Test" language="Test" derivedFrom="DynamicRoot" validator="test.TestValidator" validatorClass="test.TestValidator"></language>
+       </extension>
+       <extension id="test.parser" name="Test Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="test.TestParseController" language="Test">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Common.sdf	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9\_]* -> ID
+    "-"? [0-9]+            -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Stratego-Sugar.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Stratego-Sugar.def	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,851 @@
+definition
+module Stratego-Sugar-Overlays
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Terms
+
+exports
+  sorts Overlay
+  context-free syntax
+    Id 			 "=" Term 	-> Overlay {cons("OverlayNoArgs")}
+    Id "(" {Id ","}* ")" "=" Term 	-> Overlay {cons("Overlay")}
+
+module Stratego-Sugar-DynamicRules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+
+exports
+ 
+  sorts ScopeLabels
+  context-free syntax
+
+    "{|" ScopeLabels ":" Strategy "|}" -> Strategy {cons("DynRuleScope")}
+
+    {DynRuleScopeId ","}*   -> ScopeLabels
+    "~" Term		    -> ScopeLabels {cons("ScopeLabels")}
+
+  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
+  context-free syntax
+
+    "rules" "(" DynRuleDef* ")" -> Strategy {cons("GenDynRules")}
+
+    Id "+" Term                 -> DynRuleDef {cons("AddScopeLabel")} 
+    DynRuleId ":-"  Term        -> DynRuleDef {cons("UndefineDynRule")}
+    DynRuleId ":"   Rule        -> DynRuleDef {cons("SetDynRule")}
+    DynRuleId ":+"  Rule        -> DynRuleDef {cons("AddDynRule")}
+    DynRuleId ":"   Term        -> DynRuleDef {cons("SetDynRuleMatch")}
+
+    DynRuleId ":="  Term        -> DynRuleDef {cons("DynRuleAssign")}
+    DynRuleId ":+="  Term       -> DynRuleDef {cons("DynRuleAssignAdd")}
+
+    DynRuleId ":"   Rule "depends" "on" Term -> DynRuleDef {cons("SetDynRuleDepends")}
+
+    RuleDec "." Term            -> DynRuleId {cons("LabeledDynRuleId")}
+    RuleDec "+" Term            -> DynRuleId {cons("AddLabelDynRuleId")}
+    RuleDec                     -> DynRuleId {cons("DynRuleId")}
+
+    Id "." Term                 -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
+    Id                          -> DynRuleScopeId {cons("DynRuleScopeId")}
+
+  context-free syntax
+
+    Id                          -> RuleDec {cons("RDecNoArgs")}
+    Id "(" {Typedid ","}* ")"   -> RuleDec {cons("RDec")}
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"   -> RuleDec {cons("RDecT")}
+
+  sorts RuleNames
+  context-free syntax
+    {Id ","}*				  -> RuleNames
+    "~" Term				  -> RuleNames {cons("RuleNames")}
+
+    "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+
+  syntax
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+
+  context-free syntax
+    Strategy "/" RuleNames"\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+    Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+
+    Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+
+  priorities
+    <StrategyAngle-CF> <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("BA")}
+  > {
+
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    }
+  > <Strategy-CF> <LAYOUT?-CF> "=>" <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("AM")}
+
+  context-free priorities
+    StrategyAngle Term 		          -> Strategy {cons("BA")}
+  > "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+  > Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+  > Strategy "/" RuleNames "\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+  > Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+  > Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+
+module Stratego-Sugar-Rules
+imports Stratego-Sugar-Strategies
+exports
+
+  sorts RuleDef
+  context-free syntax
+    Id ":" Rule 				-> RuleDef {cons("RDefNoArgs")}
+    
+    Anno+ RuleDef               -> Def {cons("AnnoDef")}
+
+    Id "(" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDef")}
+
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDefT")}
+
+  sorts Rule RuleCond
+  context-free syntax
+    Term "->" Term           	    -> Rule {cons("RuleNoCond")} %% backward comp.
+    Term "->" Term "where" Strategy -> Rule {cons("Rule")}       %% backward comp.
+    Term "->" Term RuleCond+	    -> Rule {cons("Rule"), avoid}
+
+    "where" Strategy -> RuleCond {cons("WhereClause")}
+    "with"  Strategy -> RuleCond {cons("WithClause")}
+
+module Stratego-Sugar-Strategies
+imports
+  Stratego-Core-Strategies
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Constants
+  Stratego-Sugar-Signatures
+
+exports
+  context-free syntax
+    Id  		      "=" Strategy -> StrategyDef {cons("SDefNoArgs")}
+    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
+
+  context-free syntax
+    ID 				  	  -> Typedid {cons("DefaultVarDec")}
+
+  sorts Rule
+
+  sorts StrategyParen StrategyCurly StrategyAngle
+  context-free syntax
+
+    %% Abstraction
+
+    SVar "(" {Strategy ","}* ")" 	  -> Strategy {cons("Call")}
+
+    %% Match and build
+
+    "{" Strategy "}" 			  -> Strategy {cons("ScopeDefault")}
+
+     %%"<" Strategy ">" Term 		  -> Strategy {cons("BA")}
+     StrategyAngle Term 		  -> Strategy {cons("BA")}
+     "<" Strategy ">"			  -> StrategyAngle {bracket} %% {cons("AngleStrat")}
+
+    %% Combinators
+
+    Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
+
+    "rec" Id "(" Strategy ")" 		  -> Strategy {cons("Rec")}
+
+    "not"   "(" Strategy ")" 		  -> Strategy {cons("Not")}
+    "where" "(" Strategy ")" 		  -> Strategy {cons("Where")}
+    "with"  "(" Strategy ")" 		  -> Strategy {cons("With"), prefer}
+    "test"  "(" Strategy ")" 		  -> Strategy {cons("Test")}
+
+    %% Primitives
+
+    "prim" "(" String ")" 		  -> Strategy {cons("PrimNoArgs")}
+    "prim" "(" String "," {Term ","}* ")" -> Strategy {cons("Prim")}
+
+    %% Congruence operators
+
+    String 				  -> Strategy {cons("StrCong")}
+    Int 				  -> Strategy {cons("IntCong")}
+    Real 				  -> Strategy {cons("RealCong")}
+    Char 			 	  -> Strategy {cons("CharCong")}
+
+    String "(" {Strategy ","}* ")" 	  -> Strategy {cons("CongQ")}
+
+    %%"(" {Strategy ","}* ")" 		  -> Strategy {cons("TupleCong"),avoid}
+
+    Strategy StrategyCurly		  -> Strategy {cons("AnnoCong")}
+    
+    "{" Strategy "}"		  	  -> StrategyCurly {cons("StrategyCurly")}
+
+    "("  ")" 		  		  -> Strategy {cons("EmptyTupleCong")}
+   "(" Strategy  ")" 		          -> Strategy {bracket}
+    "(" Strategy "," {Strategy ","}+ ")"  -> Strategy {cons("TupleCong")}
+
+%%    Mod 	  			  -> Strategy {cons("ModCongNoArgs")}
+%%    Mod "(" {Strategy ","}* ")"	  	  -> Strategy {cons("ModCong")}
+%%    Id "^" Id				  -> Mod {cons("Mod")}
+    "[" {Strategy ","}* "]" 		  -> Strategy {cons("ListCongNoTail")}
+    "[" {Strategy ","}* "|" Strategy "]"  -> Strategy {cons("ListCong")}
+
+%%    Strategy "#" "(" StrategyInj ")" 	  -> Strategy {cons("ExplodeCong")}
+%%    Strategy "#" "(" Strategy ")" 	  -> Strategy {cons("ExplodeCong")}
+    Strategy "#" StrategyParen	  	  -> Strategy {cons("ExplodeCong")}
+
+  %% Syntactic sugar sugar
+
+  sorts SwitchCase
+  context-free syntax
+
+    SVar  		  		  -> Strategy {cons("CallNoArgs")}
+    "\\" Rule "\\" 			  -> Strategy {cons("LRule")}
+    "(" Rule ")" 			  -> Strategy {cons("SRule")}
+    Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
+    Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
+
+    "proceed"                          -> Strategy {cons("ProceedNoArgs"), prefer}
+    "proceed" "(" {Strategy "," }+ ")" -> Strategy {cons("Proceed"), prefer}
+
+    "if" Strategy "then" Strategy 
+                  "else" Strategy "end"   -> Strategy {cons("CondChoice")}
+    "if" Strategy "then" Strategy "end"   -> Strategy {cons("IfThen")}
+
+    "switch" Strategy SwitchCase* "end"   -> Strategy {cons("SwitchChoiceNoOtherwise")}
+    "switch" Strategy SwitchCase*
+         "otherwise" ":" Strategy "end"   -> Strategy {cons("SwitchChoice")}
+
+    "case" Strategy ":" Strategy          -> SwitchCase {cons("SwitchCase")}
+
+    Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+
+    Term ":=" Term			  -> Strategy {cons("Assign")}
+
+  %% Priorities
+
+  context-free priorities
+    { Strategy StrategyCurly		  -> Strategy
+      Strategy "#" StrategyParen          -> Strategy
+    }
+  > { "!" Term 				  -> Strategy
+      "?" Term 				  -> Strategy
+    }
+  > StrategyAngle Term 		          -> Strategy
+  > Strategy "=>" Term 		  	  -> Strategy
+  > Strategy ";" Strategy 		  -> Strategy
+  > {right: 
+     Strategy "+" Strategy 		  -> Strategy
+     Strategy "<+" Strategy 		  -> Strategy
+     Strategy "+>" Strategy 		  -> Strategy
+     
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy
+    }
+
+  context-free priorities
+    Strategy 				  -> StrategyMid
+  > Strategy "+" Strategy 		  -> Strategy
+
+  context-free priorities
+    { Strategy StrategyCurly      -> Strategy
+      Strategy "#" StrategyParen  -> Strategy
+    }
+    .> Term ":=" Term -> Strategy
+
+
+module Stratego-Sugar-Terms
+imports
+  Stratego-Core-Terms
+  Stratego-Sugar-Strategies
+
+exports
+  sorts LID
+  context-free syntax
+    LId 			-> LID  {cons("ListVar")}
+    LID				-> Var  {cons("Var")}
+    LID				-> ID
+
+  context-free syntax
+    "_" PreTerm 		 -> PreTerm {cons("BuildDefaultPT")}
+    "_" Term 			 -> Term {cons("BuildDefault"),prefer}
+
+    Char 			 -> PreTerm {cons("Char")}
+
+    PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+    PreTerm                      -> Term {cons("NoAnnoList")}
+
+    "<" Strategy ">" Term 	 -> PreTerm {cons("App")}
+    "<" Strategy ">" Term 	 -> Term {cons("App"),prefer}
+
+    StrategyAngle		 -> PreTerm {cons("RootApp")}
+    StrategyAngle		 -> Term {cons("RootApp"),prefer}
+
+    "(" {Term ","}* ")" 	 -> PreTerm {cons("Tuple")}
+    "[" {Term ","}* "]" 	 -> PreTerm {cons("List")}
+    "[" {Term ","}* "|" Term "]" -> PreTerm {cons("ListTail")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Sugar-Signatures
+imports
+  Stratego-Core-Signatures
+  Stratego-Sugar-Constants
+
+exports
+
+  sorts Sort
+  context-free syntax
+    "[" {Sort ","}* "]"		 -> Sort {cons("SortList")}
+    "[" {Sort ","}* "|" Sort "]" -> Sort {cons("SortListTl")}
+    "(" {Sort ","}* ")"		 -> Sort {cons("SortTuple")}
+
+  sorts Kind
+  context-free syntax
+    "*" 			-> Kind {cons("Star")}
+    "**" 			-> Kind {cons("StarStar")}
+
+module Stratego-Core-Signatures
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+exports
+  sorts Sdecl
+  context-free syntax
+    "sorts" Sort* 		-> Sdecl {cons("Sorts")}
+    "constructors" Opdecl* 	-> Sdecl {cons("Constructors")}
+
+  sorts Sort
+  context-free syntax
+    LCID 			 -> Sort {cons("SortVar")}
+    UCID 			 -> Sort {cons("SortNoArgs")}
+    Id "(" {Sort ","}* ")" 	 -> Sort {cons("Sort")}
+
+  sorts Opdecl
+  context-free syntax
+    Id     ":" Type 		-> Opdecl {cons("OpDecl")}
+    String ":" Type 		-> Opdecl {cons("OpDeclQ")}
+           ":" Type 		-> Opdecl {cons("OpDeclInj")}
+
+  context-free syntax
+    "external" Id     ":" Type 	-> Opdecl {cons("ExtOpDecl")}
+    "external" String ":" Type 	-> Opdecl {cons("ExtOpDeclQ")}
+    "external"        ":" Type 	-> Opdecl {cons("ExtOpDeclInj")}
+
+  sorts Type ArgType ConstType FunType RetType
+  context-free syntax
+    Sort	                -> ConstType {cons("ConstType")}
+    {ArgType "*"}+ "->" RetType -> FunType {cons("FunType")}
+    "(" Type ")"                -> ArgType {bracket}
+    ConstType			-> ArgType
+    Type	                -> RetType
+    FunType			-> RetType {reject}
+
+    FunType			-> Type
+    ConstType			-> Type
+
+  %%%
+   %% Restriction is required for the Sort* in Sdecl: List(a) is
+   %% ambiguous.
+   %%%
+  context-free restrictions
+    Sort -/- [\(]
+
+module Stratego-Core-Terms
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+
+exports
+  sorts ID Var Wld
+  context-free syntax
+    Id 				-> Var  {cons("Var")}
+    Id				-> ID
+    %% ":" Var                  -> Var  {cons("SeqVar")}
+
+  sorts Term PreTerm
+  context-free syntax
+    Var 			 -> PreTerm 
+    Var 			 -> Term {prefer}
+
+    "_" 			 -> Wld {cons("Wld")}
+    Wld 			 -> PreTerm
+    Wld 			 -> Term {prefer}
+
+    Int 			 -> PreTerm {cons("Int")}
+    Real 			 -> PreTerm {cons("Real")}
+    String 			 -> PreTerm {cons("Str")}
+
+    Id "(" {Term ","}* ")" 	 -> PreTerm {cons("Op")}
+    String "(" {Term ","}* ")" 	 -> PreTerm {cons("OpQ")}
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+
+    PreTerm "{^" PreTerm "}"	 -> Term {cons("Anno")}
+
+    Var "@" Term 		 -> Term {cons("As"),prefer}
+    Var "@" PreTerm 		 -> PreTerm {cons("As")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Core-Strategies
+imports
+  Stratego-Core-Terms
+  Stratego-Core-Constants
+  Stratego-Core-Signatures
+
+exports
+  sorts Def
+  context-free syntax
+    StrategyDef					 -> Def 
+    Id						 -> SVar {cons("SVar")}
+    "let" Def* "in" Strategy "end"		 -> Strategy {cons("Let")}
+    SVar "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallT")}
+
+    "call" "(" Term "|" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallDynamic")}
+
+
+  sorts StrategyDef
+  context-free syntax
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDefT")}
+
+    Anno+ StrategyDef -> Def {cons("AnnoDef")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("ExtSDefInl")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
+
+    "external"
+    EmptyId "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
+
+
+  sorts EmptyId
+  lexical syntax
+  
+    -> EmptyId
+
+  sorts Anno
+  context-free syntax
+    "extend"      -> Anno {cons("Extend")}
+    "override"    -> Anno {cons("Override")}
+    "internal"    -> Anno {cons("Internal")}
+%%  "sealed"      -> Anno {cons("Sealed")}
+%%  "extensible"  -> Anno {cons("Extensible")}
+%%  "overridable" -> Anno {cons("Overridable")}
+
+  lexical syntax
+    
+    "extend"      -> Keyword
+    "override"    -> Keyword
+    "internal"    -> Keyword
+    "sealed"      -> Keyword
+    "extensible"  -> Keyword
+    "overridable" -> Keyword
+
+  lexical restrictions
+  
+    "extend"
+    "override"
+    "internal"
+    "sealed"
+    "extensible"
+    "overridable" -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Typedid
+  context-free syntax
+    ID ":" Type 			  -> Typedid {cons("VarDec")}
+
+
+  sorts Strategy SVar StrategyParen StrategyMid 
+  context-free syntax
+    "(" Strategy ")"			  -> StrategyParen {cons("ParenStrat")}
+
+    "fail" 				  -> Strategy {cons("Fail")}
+    "id" 				  -> Strategy {cons("Id")}
+
+    "proceed" "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("ProceedT"), prefer}
+    "proceed"                                         -> Strategy {cons("ProceedNoArgs"), prefer}
+
+    %% Match and build
+
+    "?" Term 				  -> Strategy {cons("Match")}
+    "!" Term 				  -> Strategy {cons("Build")}
+    "{" {ID ","}* ":" Strategy "}" 	  -> Strategy {cons("Scope")}
+
+    %% Combinators
+
+    Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+    Strategy "<" StrategyMid 
+             "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    Strategy 				  -> StrategyMid
+
+    %% Primitives
+
+    "prim" "(" String "," {Strategy ","}* "|" {Term ","}*")"  -> Strategy {cons("PrimT")}
+
+    %% Traversal
+
+    "some" "(" Strategy ")" 		  -> Strategy {cons("Some")}
+    "one" "(" Strategy ")" 		  -> Strategy {cons("One")}
+    "all" "(" Strategy ")" 		  -> Strategy {cons("All")}
+
+  %% Priorities
+
+  context-free priorities
+    { "!" Term 				  -> Strategy {cons("Build")}
+      "?" Term 				  -> Strategy {cons("Match")}
+    }
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+  > {right: 
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    }
+
+  context-free syntax
+    "import-term" "(" ModName ")" -> Strategy {cons("ImportTerm")}
+
+module Stratego-Core-Modules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Strategies
+  Stratego-Core-Signatures
+
+exports 
+  sorts Module
+  context-free syntax
+    "module" ModName Decl* 	 -> Module {cons("Module")}
+    "specification" Decl*	 -> Module {cons("Specification")}
+
+  sorts Decl 
+  context-free syntax
+    "imports" ImportModName* 	-> Decl {cons("Imports")}
+    "strategies" Def* 		-> Decl {cons("Strategies")}
+    "signature" Sdecl*  	-> Decl {cons("Signature")}
+
+  sorts ImportModName
+  context-free syntax
+    ModName              -> ImportModName {cons("Import")}
+  syntax
+    <ModName-CF> "/" "-" -> <ImportModName-CF> {cons("ImportWildcard")}
+
+module Stratego-Sugar-Modules
+imports
+  Stratego-Core-Modules
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Overlays
+  Stratego-Sugar-Rules
+
+exports 
+
+  sorts Decl Def
+  context-free syntax
+    "rules" Def* 		-> Decl {cons("Rules")}
+    "overlays" Overlay* 	-> Decl {cons("Overlays")}
+
+    RuleDef 			-> Def 
+
+
+module Stratego-Sugar-StringQuotations
+exports
+
+  sorts
+    StringQuotation
+    StringQuotedPart1 StringQuotedChars1 DollarOpen1 DollarClose1 QuotedBracket1 Dollar1
+    StringQuotedPart2 StringQuotedChars2 DollarOpen2 DollarClose2 QuotedBracket2 Dollar2
+    StringQuotedPart3 StringQuotedChars3 DollarOpen3 DollarClose3 QuotedBracket3 Dollar3
+    StringQuotedPart4 StringQuotedChars4 DollarOpen4 DollarClose4 QuotedBracket4  Dollar4
+    Padding
+
+  context-free syntax
+
+    StringQuotation -> PreTerm
+
+  syntax
+
+    StringQuotation -> <PreTerm-CF>
+
+    "$" "[" Padding StringQuotedPart1*               "]"    -> StringQuotation {cons("StringQuotation1") }
+     Padding "[" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "]"    -> StringQuotedPart1 {cons("StringEscape1")}
+    <StringQuotedChars1-LEX>                                -> StringQuotedPart1 {cons("QStr")}
+    <Dollar1-LEX>                                           -> StringQuotedPart1 {cons("QDollar")}
+    "$" <QuotedBracket1-LEX> "$"                            -> StringQuotedPart1 {cons("QBr")}
+    ~[\[\]\$]+                                              -> <StringQuotedChars1-LEX>
+    [\[\]]                                                  -> <QuotedBracket1-LEX>
+    "$"                                                     -> <Dollar1-LEX>
+
+    "$" "{" Padding StringQuotedPart2*               "}"    -> StringQuotation {cons("StringQuotation2") }
+     Padding "{" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "}"    -> StringQuotedPart2 {cons("StringEscape2")}
+    <StringQuotedChars2-LEX>                                -> StringQuotedPart2 {cons("QStr")}
+    <Dollar2-LEX>                                           -> StringQuotedPart2 {cons("QDollar")}
+    "$" <QuotedBracket2-LEX> "$"                            -> StringQuotedPart2 {cons("QBr")}
+    ~[\{\}\$]+                                              -> <StringQuotedChars2-LEX>
+    [\{\}]                                                  -> <QuotedBracket2-LEX>
+    "$"                                                     -> <Dollar2-LEX>
+
+    "$" "(" Padding StringQuotedPart3*              ")"     -> StringQuotation {cons("StringQuotation3") }
+    Padding "(" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ")"     -> StringQuotedPart3 {cons("StringEscape3")}
+    <StringQuotedChars3-LEX>                                -> StringQuotedPart3 {cons("QStr")}
+    <Dollar3-LEX>                                           -> StringQuotedPart3 {cons("QDollar")}
+    "$" <QuotedBracket3-LEX> "$"                            -> StringQuotedPart3 {cons("QBr")}
+    ~[\(\)\$]+                                              -> <StringQuotedChars3-LEX>
+    [\(\)]                                                  -> <QuotedBracket3-LEX>
+    "$"                                                     -> <Dollar3-LEX>
+
+    "$" "<" Padding StringQuotedPart4*               ">"    -> StringQuotation {cons("StringQuotation4") }
+    Padding "<"  <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ">"    -> StringQuotedPart4 {cons("StringEscape4")}
+    <StringQuotedChars4-LEX>                                -> StringQuotedPart4 {cons("QStr")}
+    <Dollar4-LEX>                                           -> StringQuotedPart4 {cons("QDollar")}
+    "$" <QuotedBracket4-LEX> "$"                            -> StringQuotedPart4 {cons("QBr")}
+    ~[\<\>\$]+                                              -> <StringQuotedChars4-LEX>
+    [\<\>]                                                  -> <QuotedBracket4-LEX>
+    "$"                                                     -> <Dollar4-LEX>
+   
+    %% Padding is a dummy lexical that will contain the indentation prefix of every quotation
+    <Padding-LEX>                                           -> Padding
+                                                            -> <Padding-LEX> {indentpadding}
+
+  lexical restrictions
+
+    StringQuotedChars1 -/- ~[\[\]\$]   
+    StringQuotedChars2 -/- ~[\{\}\$]    
+    StringQuotedChars3 -/- ~[\(\)\$]    
+    StringQuotedChars4 -/- ~[\<\>\$]
+    Dollar1            -/- [\[\]] . [\$]
+    Dollar2            -/- [\{\}] . [\$]
+    Dollar3            -/- [\(\)] . [\$]
+    Dollar4            -/- [\<\>] . [\$]
+
+module Stratego-Core-Constants
+exports
+  sorts Int Real String StrChar
+  lexical syntax
+    [\-]? [0-9]+ 		-> Int
+    [\-]? [0-9]+ [\.] [0-9]+ 	-> Real
+    "\"" StrChar* "\"" 		-> String
+    ~[\"\\] 			-> StrChar
+    [\\] [\"tnr\\] 		-> StrChar
+
+
+module Stratego-Sugar-Constants
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+  Stratego-Sugar-StringQuotations
+exports
+  sorts Char CharChar
+  lexical syntax
+    "'" CharChar "'"		-> Char
+    ~[\']			-> CharChar
+    [\\] [\'ntr\ ]		-> CharChar
+    Char		 	-> Id {reject}
+
+module Stratego-Core-Identifiers
+exports
+  sorts ModName ModNamePart
+  lexical syntax
+    {ModNamePart "/"}+ -> ModName
+    [a-zA-Z\.\_] [a-zA-Z0-9\'\.\-\_]* -> ModNamePart
+  lexical restrictions
+    ModName -/- [a-zA-Z0-9\'\.\-\_]
+  lexical syntax
+    "imports" 		-> ModName {reject}
+    "overlays" 		-> ModName {reject}
+    "rules" 		-> ModName {reject}
+    "signature" 	-> ModName {reject}
+    "strategies" 	-> ModName {reject}
+
+  sorts Id LId LCID UCID Wld
+  lexical syntax
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]*     -> Id
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]* "*" -> LId
+    [\'] [a-z]+                       -> Id
+
+    [a-z] [a-zA-Z0-9\'\-\_]*  -> LCID
+    [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
+
+  lexical restrictions
+    Id   -/- [a-zA-Z0-9\'\-\_\*]
+    LId  -/- [a-zA-Z0-9\'\-\_]
+    LCID -/- [a-zA-Z0-9\'\-\_]
+    UCID -/- [a-zA-Z0-9\'\-\_]
+
+  lexical syntax
+    "_"     -> Id {reject}
+    "'"     -> Id {reject}
+
+    Keyword -> Id   {reject}
+    Keyword -> LId  {reject}
+    Keyword -> LCID {reject}
+    Keyword -> UCID {reject}
+
+  lexical restrictions
+    "all"
+    "case" %% not reserved kw
+    "constructors"
+    "else" %% not reserved kw
+    "end" %% not reserved kw
+    "external" %% not reserved kw
+    "fail"
+    "id"
+    "if" %% not reserved kw
+    "in"
+    "imports" %% not reserved kw
+    "let"
+    "module"
+    "not"
+    "one"
+    "overlays"
+    "otherwise" %% not reserved kw
+    "prim"
+    "rec" %% not reserved kw
+    "rules"
+    "script"
+    "signature"
+    "some"
+    "sorts"
+    "strategies"
+    "stratego"
+    "switch" %% not reserved kw
+    "test"
+    "then" %% not reserved kw
+    "where"
+    "import-term"
+      -/- [a-zA-Z0-9\'\-\_]
+  
+  context-free restrictions
+    Wld -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Keyword
+  lexical syntax
+    "all"               -> Keyword
+    "constructors" 	-> Keyword
+    "fail" 		-> Keyword
+    "id" 		-> Keyword
+    "in" 		-> Keyword
+    "let" 		-> Keyword
+    "module" 		-> Keyword
+    "not" 		-> Keyword
+    "one" 		-> Keyword
+    "overlays" 		-> Keyword
+    "prim" 		-> Keyword
+    "rules" 		-> Keyword
+    "script" 		-> Keyword
+    "signature" 	-> Keyword
+    "some" 		-> Keyword
+    "sorts" 		-> Keyword
+    "strategies" 	-> Keyword
+    "stratego" 		-> Keyword
+    "test" 		-> Keyword
+    "where" 		-> Keyword
+    "import-term"	-> Keyword
+
+
+module Stratego-Core-Layout
+exports
+  sorts Ws ShortCom LongCom CommChar Asterisk Eof 
+  lexical syntax
+    [\t\ \n\r]			-> Ws
+
+    "//" ~[\n]* ([\n] | Eof)	-> ShortCom
+    "/*" CommChar* "*/"	-> LongCom
+				-> Eof  
+
+    ~[\*]     -> CommChar
+
+    "*"       -> Asterisk
+    Asterisk  -> CommChar
+
+  lexical restrictions
+    Asterisk -/- [\/]
+    Eof      -/- ~[]
+
+  lexical syntax
+    ShortCom 	-> LAYOUT
+    LongCom 	-> LAYOUT
+    Ws 		-> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\*]
+    LAYOUT? -/- [\/].[\/]
+
+module Stratego-Sugar-Layout
+imports Stratego-Core-Layout
+%%exports
+%%  sorts VeryLongCom Eof VLCchar Backslash
+%%  lexical syntax
+%%    "\\end{code}" VLCchar* "\\begin{code}" -> VeryLongCom
+%%    "\\begin{code}" 			   -> VeryLongCom
+%%    "\\end{code}" VLCchar* Eof 		   -> VeryLongCom
+%%    "\\literate" VLCchar* "\\begin{code}"  -> VeryLongCom
+%%    ~[\\] 				   -> VLCchar
+%%    Backslash 				   -> VLCchar
+%%    [\\] 				   -> Backslash
+
+%%  lexical restrictions
+%%    Backslash -/- [b].[e].[g].[i].[n].[\{].[c].[o].[d].[e].[\}]
+%%    Eof -/- ~[]
+
+%%  lexical syntax
+%%    VeryLongCom -> LAYOUT
+
+
+
+module Test
+imports
+  Stratego-Sugar-Layout
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Constants 
+  Stratego-Sugar-Modules
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+  Stratego-Sugar-DynamicRules
+  Stratego-Sugar-Overlays
+
+hiddens
+  context-free start-symbols Module
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Test.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Test.pp	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also Test.generated.pp)
+[]

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Test.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Test.sdf	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,17 @@
+%% Grammar for the Test language
+%% By default, based on an example "entities" syntax
+module Test
+
+imports Common
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+  
+    "module" ID Definition*       -> Start {cons("Module")}
+    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
+    ID ":" Type                   -> Property {cons("Property")}
+    ID                            -> Type {cons("Type")}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/InteropRegisterer.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,55 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("unused") public class InteropRegisterer extends org.strategoxt.lang.InteropRegisterer 
+{ 
+  @Override public void register(org.spoofax.interpreter.core.IContext context, Context compiledContext)
+  { 
+    register(context, compiledContext, context.getVarScope());
+  }
+
+  @Override public void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader)
+  { 
+    registerLazy(context, compiledContext, classLoader, context.getVarScope());
+  }
+
+  private void register(org.spoofax.interpreter.core.IContext context, Context compiledContext, org.spoofax.interpreter.core.VarScope varScope)
+  { 
+    compiledContext.registerComponent("localvar");
+    localvar.init(compiledContext);
+    varScope.addSVar("main_0_0", new InteropSDefT(main_0_0.instance, context));
+    varScope.addSVar("execute_0_0", new InteropSDefT(execute_0_0.instance, context));
+    varScope.addSVar("match_comments_0_0", new InteropSDefT(match_comments_0_0.instance, context));
+    varScope.addSVar("find_functions_0_0", new InteropSDefT(find_functions_0_0.instance, context));
+    varScope.addSVar("find_comments_0_0", new InteropSDefT(find_comments_0_0.instance, context));
+    varScope.addSVar("match_f_and_c_0_0", new InteropSDefT(match_f_and_c_0_0.instance, context));
+    varScope.addSVar("find_comment_match_0_1", new InteropSDefT(find_comment_match_0_1.instance, context));
+    varScope.addSVar("get_function_name_0_0", new InteropSDefT(get_function_name_0_0.instance, context));
+    varScope.addSVar("find_comment_by_name_0_1", new InteropSDefT(find_comment_by_name_0_1.instance, context));
+    varScope.addSVar("first_0_0", new InteropSDefT(first_0_0.instance, context));
+  }
+
+  private void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader, org.spoofax.interpreter.core.VarScope varScope)
+  { 
+    compiledContext.registerComponent("localvar");
+    localvar.init(compiledContext);
+    varScope.addSVar("main_0_0", new InteropSDefT(classLoader, "org.localvar.main_0_0", context));
+    varScope.addSVar("execute_0_0", new InteropSDefT(classLoader, "org.localvar.execute_0_0", context));
+    varScope.addSVar("match_comments_0_0", new InteropSDefT(classLoader, "org.localvar.match_comments_0_0", context));
+    varScope.addSVar("find_functions_0_0", new InteropSDefT(classLoader, "org.localvar.find_functions_0_0", context));
+    varScope.addSVar("find_comments_0_0", new InteropSDefT(classLoader, "org.localvar.find_comments_0_0", context));
+    varScope.addSVar("match_f_and_c_0_0", new InteropSDefT(classLoader, "org.localvar.match_f_and_c_0_0", context));
+    varScope.addSVar("find_comment_match_0_1", new InteropSDefT(classLoader, "org.localvar.find_comment_match_0_1", context));
+    varScope.addSVar("get_function_name_0_0", new InteropSDefT(classLoader, "org.localvar.get_function_name_0_0", context));
+    varScope.addSVar("find_comment_by_name_0_1", new InteropSDefT(classLoader, "org.localvar.find_comment_by_name_0_1", context));
+    varScope.addSVar("first_0_0", new InteropSDefT(classLoader, "org.localvar.first_0_0", context));
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/Main.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+package org.localvar;
+
+public class Main extends localvar 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/execute_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/execute_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,83 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") public class execute_0_0 extends Strategy 
+{ 
+  public static execute_0_0 instance = new execute_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("execute_0_0");
+    Fail1:
+    { 
+      IStrategoTerm l_1 = null;
+      IStrategoTerm m_1 = null;
+      IStrategoTerm p_1 = null;
+      IStrategoTerm q_1 = null;
+      IStrategoTerm s_1 = null;
+      IStrategoTerm t_1 = null;
+      IStrategoTerm u_1 = null;
+      IStrategoTerm x_1 = null;
+      IStrategoTerm z_1 = null;
+      IStrategoTerm a_2 = null;
+      l_1 = term;
+      p_1 = term;
+      s_1 = term;
+      q_1 = localvar.const5;
+      t_1 = s_1;
+      term = r_enter_0_2.instance.invoke(context, t_1, q_1, localvar.constLocationInfo1);
+      if(term == null)
+        break Fail1;
+      term = p_1;
+      u_1 = p_1;
+      IStrategoTerm term0 = term;
+      Success0:
+      { 
+        Fail2:
+        { 
+          term = match_comments_0_0.instance.invoke(context, l_1);
+          if(term == null)
+            break Fail2;
+          m_1 = term;
+          if(true)
+            break Success0;
+        }
+        term = term0;
+        IStrategoTerm n_1 = null;
+        IStrategoTerm o_1 = null;
+        IStrategoTerm w_1 = null;
+        n_1 = term;
+        term = context.invokePrimitive("SSL_stacktrace_get_all_frame_names", term, NO_STRATEGIES, NO_TERMS);
+        if(term == null)
+          break Fail1;
+        o_1 = term;
+        w_1 = n_1;
+        term = report_with_failure_0_2.instance.invoke(context, w_1, localvar.const9, o_1);
+        if(term == null)
+          break Fail1;
+      }
+      term = u_1;
+      if(m_1 == null)
+        break Fail1;
+      z_1 = m_1;
+      x_1 = localvar.const5;
+      a_2 = z_1;
+      term = r_exit_0_2.instance.invoke(context, a_2, x_1, localvar.constLocationInfo1);
+      if(term == null)
+        break Fail1;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/find_comment_by_name_0_1.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/find_comment_by_name_0_1.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,90 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") public class find_comment_by_name_0_1 extends Strategy 
+{ 
+  public static find_comment_by_name_0_1 instance = new find_comment_by_name_0_1();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term, IStrategoTerm ref_e_6)
+  { 
+    TermReference e_6 = new TermReference(ref_e_6);
+    context.push("find_comment_by_name_0_1");
+    Fail14:
+    { 
+      IStrategoTerm f_6 = null;
+      IStrategoTerm h_6 = null;
+      IStrategoTerm k_6 = null;
+      IStrategoTerm l_6 = null;
+      IStrategoTerm n_6 = null;
+      IStrategoTerm o_6 = null;
+      IStrategoTerm p_6 = null;
+      IStrategoTerm s_6 = null;
+      IStrategoTerm u_6 = null;
+      IStrategoTerm v_6 = null;
+      f_6 = term;
+      k_6 = term;
+      n_6 = term;
+      l_6 = localvar.const36;
+      o_6 = n_6;
+      term = r_enter_0_2.instance.invoke(context, o_6, l_6, localvar.constLocationInfo8);
+      if(term == null)
+        break Fail14;
+      term = k_6;
+      p_6 = k_6;
+      IStrategoTerm term6 = term;
+      Success6:
+      { 
+        Fail15:
+        { 
+          term = f_6;
+          lifted4 lifted40 = new lifted4();
+          lifted40.e_6 = e_6;
+          term = filter_1_0.instance.invoke(context, term, lifted40);
+          if(term == null)
+            break Fail15;
+          term = first_0_0.instance.invoke(context, term);
+          if(term == null)
+            break Fail15;
+          h_6 = term;
+          if(true)
+            break Success6;
+        }
+        term = term6;
+        IStrategoTerm i_6 = null;
+        IStrategoTerm j_6 = null;
+        IStrategoTerm r_6 = null;
+        i_6 = term;
+        term = context.invokePrimitive("SSL_stacktrace_get_all_frame_names", term, NO_STRATEGIES, NO_TERMS);
+        if(term == null)
+          break Fail14;
+        j_6 = term;
+        r_6 = i_6;
+        term = report_with_failure_0_2.instance.invoke(context, r_6, localvar.const40, j_6);
+        if(term == null)
+          break Fail14;
+      }
+      term = p_6;
+      if(h_6 == null)
+        break Fail14;
+      u_6 = h_6;
+      s_6 = localvar.const36;
+      v_6 = u_6;
+      term = r_exit_0_2.instance.invoke(context, v_6, s_6, localvar.constLocationInfo8);
+      if(term == null)
+        break Fail14;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/find_comment_match_0_1.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/find_comment_match_0_1.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,88 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") public class find_comment_match_0_1 extends Strategy 
+{ 
+  public static find_comment_match_0_1 instance = new find_comment_match_0_1();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term, IStrategoTerm a_5)
+  { 
+    ITermFactory termFactory = context.getFactory();
+    context.push("find_comment_match_0_1");
+    Fail11:
+    { 
+      IStrategoTerm b_5 = null;
+      IStrategoTerm d_5 = null;
+      IStrategoTerm g_5 = null;
+      IStrategoTerm h_5 = null;
+      IStrategoTerm j_5 = null;
+      IStrategoTerm k_5 = null;
+      IStrategoTerm l_5 = null;
+      IStrategoTerm o_5 = null;
+      IStrategoTerm q_5 = null;
+      IStrategoTerm r_5 = null;
+      b_5 = term;
+      g_5 = term;
+      j_5 = term;
+      h_5 = localvar.const28;
+      k_5 = j_5;
+      term = r_enter_0_2.instance.invoke(context, k_5, h_5, localvar.constLocationInfo6);
+      if(term == null)
+        break Fail11;
+      term = g_5;
+      l_5 = g_5;
+      IStrategoTerm term5 = term;
+      Success5:
+      { 
+        Fail12:
+        { 
+          term = get_function_name_0_0.instance.invoke(context, b_5);
+          if(term == null)
+            break Fail12;
+          term = find_comment_by_name_0_1.instance.invoke(context, a_5, term);
+          if(term == null)
+            break Fail12;
+          d_5 = term;
+          if(true)
+            break Success5;
+        }
+        term = term5;
+        IStrategoTerm e_5 = null;
+        IStrategoTerm f_5 = null;
+        IStrategoTerm n_5 = null;
+        e_5 = term;
+        term = context.invokePrimitive("SSL_stacktrace_get_all_frame_names", term, NO_STRATEGIES, NO_TERMS);
+        if(term == null)
+          break Fail11;
+        f_5 = term;
+        n_5 = e_5;
+        term = report_with_failure_0_2.instance.invoke(context, n_5, localvar.const31, f_5);
+        if(term == null)
+          break Fail11;
+      }
+      term = l_5;
+      if(d_5 == null)
+        break Fail11;
+      term = termFactory.makeTuple(b_5, d_5);
+      q_5 = term;
+      o_5 = localvar.const28;
+      r_5 = q_5;
+      term = r_exit_0_2.instance.invoke(context, r_5, o_5, localvar.constLocationInfo6);
+      if(term == null)
+        break Fail11;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/find_comments_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/find_comments_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,83 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") public class find_comments_0_0 extends Strategy 
+{ 
+  public static find_comments_0_0 instance = new find_comments_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("find_comments_0_0");
+    Fail7:
+    { 
+      IStrategoTerm p_3 = null;
+      IStrategoTerm q_3 = null;
+      IStrategoTerm t_3 = null;
+      IStrategoTerm u_3 = null;
+      IStrategoTerm w_3 = null;
+      IStrategoTerm x_3 = null;
+      IStrategoTerm y_3 = null;
+      IStrategoTerm b_4 = null;
+      IStrategoTerm d_4 = null;
+      IStrategoTerm e_4 = null;
+      p_3 = term;
+      t_3 = term;
+      w_3 = term;
+      u_3 = localvar.const20;
+      x_3 = w_3;
+      term = r_enter_0_2.instance.invoke(context, x_3, u_3, localvar.constLocationInfo4);
+      if(term == null)
+        break Fail7;
+      term = t_3;
+      y_3 = t_3;
+      IStrategoTerm term3 = term;
+      Success3:
+      { 
+        Fail8:
+        { 
+          term = filter_1_0.instance.invoke(context, p_3, lifted2.instance);
+          if(term == null)
+            break Fail8;
+          q_3 = term;
+          if(true)
+            break Success3;
+        }
+        term = term3;
+        IStrategoTerm r_3 = null;
+        IStrategoTerm s_3 = null;
+        IStrategoTerm a_4 = null;
+        r_3 = term;
+        term = context.invokePrimitive("SSL_stacktrace_get_all_frame_names", term, NO_STRATEGIES, NO_TERMS);
+        if(term == null)
+          break Fail7;
+        s_3 = term;
+        a_4 = r_3;
+        term = report_with_failure_0_2.instance.invoke(context, a_4, localvar.const23, s_3);
+        if(term == null)
+          break Fail7;
+      }
+      term = y_3;
+      if(q_3 == null)
+        break Fail7;
+      d_4 = q_3;
+      b_4 = localvar.const20;
+      e_4 = d_4;
+      term = r_exit_0_2.instance.invoke(context, e_4, b_4, localvar.constLocationInfo4);
+      if(term == null)
+        break Fail7;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/find_functions_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/find_functions_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,83 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") public class find_functions_0_0 extends Strategy 
+{ 
+  public static find_functions_0_0 instance = new find_functions_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("find_functions_0_0");
+    Fail5:
+    { 
+      IStrategoTerm x_2 = null;
+      IStrategoTerm y_2 = null;
+      IStrategoTerm b_3 = null;
+      IStrategoTerm c_3 = null;
+      IStrategoTerm e_3 = null;
+      IStrategoTerm f_3 = null;
+      IStrategoTerm g_3 = null;
+      IStrategoTerm j_3 = null;
+      IStrategoTerm l_3 = null;
+      IStrategoTerm m_3 = null;
+      x_2 = term;
+      b_3 = term;
+      e_3 = term;
+      c_3 = localvar.const15;
+      f_3 = e_3;
+      term = r_enter_0_2.instance.invoke(context, f_3, c_3, localvar.constLocationInfo3);
+      if(term == null)
+        break Fail5;
+      term = b_3;
+      g_3 = b_3;
+      IStrategoTerm term2 = term;
+      Success2:
+      { 
+        Fail6:
+        { 
+          term = filter_1_0.instance.invoke(context, x_2, lifted1.instance);
+          if(term == null)
+            break Fail6;
+          y_2 = term;
+          if(true)
+            break Success2;
+        }
+        term = term2;
+        IStrategoTerm z_2 = null;
+        IStrategoTerm a_3 = null;
+        IStrategoTerm i_3 = null;
+        z_2 = term;
+        term = context.invokePrimitive("SSL_stacktrace_get_all_frame_names", term, NO_STRATEGIES, NO_TERMS);
+        if(term == null)
+          break Fail5;
+        a_3 = term;
+        i_3 = z_2;
+        term = report_with_failure_0_2.instance.invoke(context, i_3, localvar.const19, a_3);
+        if(term == null)
+          break Fail5;
+      }
+      term = g_3;
+      if(y_2 == null)
+        break Fail5;
+      l_3 = y_2;
+      j_3 = localvar.const15;
+      m_3 = l_3;
+      term = r_exit_0_2.instance.invoke(context, m_3, j_3, localvar.constLocationInfo3);
+      if(term == null)
+        break Fail5;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/first_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/first_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,51 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") public class first_0_0 extends Strategy 
+{ 
+  public static first_0_0 instance = new first_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("first_0_0");
+    Fail16:
+    { 
+      IStrategoTerm w_6 = null;
+      IStrategoTerm y_6 = null;
+      IStrategoTerm a_7 = null;
+      IStrategoTerm b_7 = null;
+      IStrategoTerm c_7 = null;
+      IStrategoTerm e_7 = null;
+      IStrategoTerm f_7 = null;
+      w_6 = term;
+      a_7 = term;
+      y_6 = localvar.const41;
+      b_7 = a_7;
+      term = r_enter_0_2.instance.invoke(context, b_7, y_6, localvar.constLocationInfo9);
+      if(term == null)
+        break Fail16;
+      term = last_0_0.instance.invoke(context, w_6);
+      if(term == null)
+        break Fail16;
+      e_7 = term;
+      c_7 = localvar.const41;
+      f_7 = e_7;
+      term = r_exit_0_2.instance.invoke(context, f_7, c_7, localvar.constLocationInfo9);
+      if(term == null)
+        break Fail16;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/get_function_name_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/get_function_name_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,50 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") public class get_function_name_0_0 extends Strategy 
+{ 
+  public static get_function_name_0_0 instance = new get_function_name_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("get_function_name_0_0");
+    Fail13:
+    { 
+      IStrategoTerm s_5 = null;
+      IStrategoTerm u_5 = null;
+      IStrategoTerm w_5 = null;
+      IStrategoTerm x_5 = null;
+      IStrategoTerm y_5 = null;
+      IStrategoTerm a_6 = null;
+      IStrategoTerm b_6 = null;
+      if(term.getTermType() != IStrategoTerm.APPL || localvar._consFunction_2 != ((IStrategoAppl)term).getConstructor())
+        break Fail13;
+      s_5 = term.getSubterm(0);
+      w_5 = term;
+      u_5 = localvar.const32;
+      x_5 = w_5;
+      term = r_enter_0_2.instance.invoke(context, x_5, u_5, localvar.constLocationInfo7);
+      if(term == null)
+        break Fail13;
+      a_6 = s_5;
+      y_5 = localvar.const32;
+      b_6 = a_6;
+      term = r_exit_0_2.instance.invoke(context, b_6, y_5, localvar.constLocationInfo7);
+      if(term == null)
+        break Fail13;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/lifted1.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/lifted1.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,27 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") final class lifted1 extends Strategy 
+{ 
+  public static final lifted1 instance = new lifted1();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    Fail20:
+    { 
+      if(term.getTermType() != IStrategoTerm.APPL || localvar._consFunction_2 != ((IStrategoAppl)term).getConstructor())
+        break Fail20;
+      if(true)
+        return term;
+    }
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/lifted2.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/lifted2.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,27 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") final class lifted2 extends Strategy 
+{ 
+  public static final lifted2 instance = new lifted2();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    Fail19:
+    { 
+      if(term.getTermType() != IStrategoTerm.APPL || localvar._consComment_2 != ((IStrategoAppl)term).getConstructor())
+        break Fail19;
+      if(true)
+        return term;
+    }
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/lifted3.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/lifted3.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,28 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") final class lifted3 extends Strategy 
+{ 
+  TermReference h_4;
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    Fail18:
+    { 
+      term = find_comment_match_0_1.instance.invoke(context, term, h_4.value);
+      if(term == null)
+        break Fail18;
+      if(true)
+        return term;
+    }
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/lifted4.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/lifted4.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,32 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") final class lifted4 extends Strategy 
+{ 
+  TermReference e_6;
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    Fail17:
+    { 
+      if(term.getTermType() != IStrategoTerm.APPL || localvar._consComment_2 != ((IStrategoAppl)term).getConstructor())
+        break Fail17;
+      if(e_6.value == null)
+        e_6.value = term.getSubterm(0);
+      else
+        if(e_6.value != term.getSubterm(0) && !e_6.value.match(term.getSubterm(0)))
+          break Fail17;
+      if(true)
+        return term;
+    }
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/localvar.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/localvar.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,313 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") public class localvar  
+{ 
+  protected static final boolean TRACES_ENABLED = true;
+
+  protected static ITermFactory constantFactory;
+
+  private static WeakReference<Context> initedContext;
+
+  private static boolean isIniting;
+
+  protected static IStrategoTerm constLocationInfo9;
+
+  protected static IStrategoTerm const43;
+
+  protected static IStrategoTerm const42;
+
+  protected static IStrategoTerm const41;
+
+  protected static IStrategoTerm const40;
+
+  protected static IStrategoTerm constLocationInfo8;
+
+  protected static IStrategoTerm const39;
+
+  protected static IStrategoTerm const38;
+
+  protected static IStrategoTerm const37;
+
+  protected static IStrategoTerm const36;
+
+  protected static IStrategoTerm constLocationInfo7;
+
+  protected static IStrategoTerm const35;
+
+  protected static IStrategoTerm const34;
+
+  protected static IStrategoTerm const33;
+
+  protected static IStrategoTerm const32;
+
+  protected static IStrategoTerm const31;
+
+  protected static IStrategoTerm constLocationInfo6;
+
+  protected static IStrategoTerm const30;
+
+  protected static IStrategoTerm const29;
+
+  protected static IStrategoTerm const28;
+
+  protected static IStrategoTerm const27;
+
+  protected static IStrategoTerm constLocationInfo5;
+
+  protected static IStrategoTerm const26;
+
+  protected static IStrategoTerm const25;
+
+  protected static IStrategoTerm const24;
+
+  protected static IStrategoTerm const23;
+
+  protected static IStrategoTerm constLocationInfo4;
+
+  protected static IStrategoTerm const22;
+
+  protected static IStrategoTerm const21;
+
+  protected static IStrategoTerm const20;
+
+  protected static IStrategoTerm const19;
+
+  protected static IStrategoTerm constLocationInfo3;
+
+  protected static IStrategoTerm const18;
+
+  protected static IStrategoTerm const17;
+
+  protected static IStrategoTerm const16;
+
+  protected static IStrategoTerm const15;
+
+  protected static IStrategoTerm const14;
+
+  protected static IStrategoTerm constLocationInfo2;
+
+  protected static IStrategoTerm const13;
+
+  protected static IStrategoTerm const12;
+
+  protected static IStrategoTerm const11;
+
+  protected static IStrategoTerm const10;
+
+  protected static IStrategoTerm const9;
+
+  protected static IStrategoTerm constLocationInfo1;
+
+  protected static IStrategoTerm const8;
+
+  protected static IStrategoTerm const7;
+
+  protected static IStrategoTerm const6;
+
+  protected static IStrategoTerm const5;
+
+  protected static IStrategoTerm constLocationInfo0;
+
+  protected static IStrategoTerm const4;
+
+  protected static IStrategoTerm const3;
+
+  protected static IStrategoTerm const2;
+
+  protected static IStrategoTerm const1;
+
+  protected static IStrategoTerm const0;
+
+  public static IStrategoConstructor _consConc_2;
+
+  public static IStrategoConstructor _consNone_0;
+
+  public static IStrategoConstructor _consSome_1;
+
+  protected static IStrategoConstructor _consLocationInfo_4;
+
+  public static IStrategoConstructor _consProgram_2;
+
+  public static IStrategoConstructor _consComment_2;
+
+  public static IStrategoConstructor _consFunction_2;
+
+  public static Context init(Context context)
+  { 
+    synchronized(localvar.class)
+    { 
+      if(isIniting)
+        return null;
+      try
+      { 
+        isIniting = true;
+        ITermFactory termFactory = context.getFactory();
+        if(constantFactory == null)
+        { 
+          initConstructors(termFactory);
+          initConstants(termFactory);
+        }
+        if(initedContext == null || initedContext.get() != context)
+        { 
+          org.strategoxt.stratego_lib.Main.init(context);
+          org.strategoxt.libstrategodebuglib.Main.init(context);
+          context.registerComponent("localvar");
+        }
+        initedContext = new WeakReference<Context>(context);
+        constantFactory = termFactory;
+      }
+      finally
+      { 
+        isIniting = false;
+      }
+      return context;
+    }
+  }
+
+  public static Context init()
+  { 
+    return init(new Context());
+  }
+
+  public static void main(String args[])
+  { 
+    Context context = init();
+    context.setStandAlone(true);
+    try
+    { 
+      IStrategoTerm result;
+      try
+      { 
+        result = context.invokeStrategyCLI(main_0_0.instance, "localvar", args);
+      }
+      finally
+      { 
+        context.getIOAgent().closeAllFiles();
+      }
+      if(result == null)
+      { 
+        System.err.println("localvar" + (TRACES_ENABLED ? ": rewriting failed, trace:" : ": rewriting failed"));
+        context.printStackTrace();
+        context.setStandAlone(false);
+        System.exit(1);
+      }
+      else
+      { 
+        System.out.println(result);
+        context.setStandAlone(false);
+        System.exit(0);
+      }
+    }
+    catch(StrategoExit exit)
+    { 
+      context.setStandAlone(false);
+      System.exit(exit.getValue());
+    }
+  }
+
+  public static IStrategoTerm mainNoExit(String ... args) throws StrategoExit
+  { 
+    return mainNoExit(new Context(), args);
+  }
+
+  public static IStrategoTerm mainNoExit(Context context, String ... args) throws StrategoExit
+  { 
+    try
+    { 
+      init(context);
+      return context.invokeStrategyCLI(main_0_0.instance, "localvar", args);
+    }
+    finally
+    { 
+      context.getIOAgent().closeAllFiles();
+    }
+  }
+
+  public static Strategy getMainStrategy()
+  { 
+    return main_0_0.instance;
+  }
+
+  public static void initConstructors(ITermFactory termFactory)
+  { 
+    _consConc_2 = termFactory.makeConstructor("Conc", 2);
+    _consNone_0 = termFactory.makeConstructor("None", 0);
+    _consSome_1 = termFactory.makeConstructor("Some", 1);
+    _consLocationInfo_4 = termFactory.makeConstructor("LocationInfo", 4);
+    _consProgram_2 = termFactory.makeConstructor("Program", 2);
+    _consComment_2 = termFactory.makeConstructor("Comment", 2);
+    _consFunction_2 = termFactory.makeConstructor("Function", 2);
+  }
+
+  public static void initConstants(ITermFactory termFactory)
+  { 
+    const0 = termFactory.makeString("main");
+    const1 = termFactory.makeString("31");
+    const2 = termFactory.makeString("3");
+    const3 = termFactory.makeString("32");
+    const4 = termFactory.makeString("21");
+    constLocationInfo0 = termFactory.makeAppl(localvar._consLocationInfo_4, new IStrategoTerm[]{localvar.const1, localvar.const2, localvar.const3, localvar.const4});
+    const5 = termFactory.makeString("execute");
+    const6 = termFactory.makeString("37");
+    const7 = termFactory.makeString("40");
+    const8 = termFactory.makeString("38");
+    constLocationInfo1 = termFactory.makeAppl(localvar._consLocationInfo_4, new IStrategoTerm[]{localvar.const6, localvar.const2, localvar.const7, localvar.const8});
+    const9 = termFactory.makeString("Internal error: with clause failed unexpectedly in rule 'execute'");
+    const10 = termFactory.makeString("match-comments");
+    const11 = termFactory.makeString("43");
+    const12 = termFactory.makeString("2");
+    const13 = termFactory.makeString("49");
+    constLocationInfo2 = termFactory.makeAppl(localvar._consLocationInfo_4, new IStrategoTerm[]{localvar.const11, localvar.const12, localvar.const13, localvar.const6});
+    const14 = termFactory.makeString("Internal error: with clause failed unexpectedly in rule 'match-comments'");
+    const15 = termFactory.makeString("find-functions");
+    const16 = termFactory.makeString("52");
+    const17 = termFactory.makeString("55");
+    const18 = termFactory.makeString("54");
+    constLocationInfo3 = termFactory.makeAppl(localvar._consLocationInfo_4, new IStrategoTerm[]{localvar.const16, localvar.const12, localvar.const17, localvar.const18});
+    const19 = termFactory.makeString("Internal error: with clause failed unexpectedly in rule 'find-functions'");
+    const20 = termFactory.makeString("find-comments");
+    const21 = termFactory.makeString("57");
+    const22 = termFactory.makeString("60");
+    constLocationInfo4 = termFactory.makeAppl(localvar._consLocationInfo_4, new IStrategoTerm[]{localvar.const21, localvar.const12, localvar.const22, localvar.const16});
+    const23 = termFactory.makeString("Internal error: with clause failed unexpectedly in rule 'find-comments'");
+    const24 = termFactory.makeString("match-f-and-c");
+    const25 = termFactory.makeString("62");
+    const26 = termFactory.makeString("65");
+    constLocationInfo5 = termFactory.makeAppl(localvar._consLocationInfo_4, new IStrategoTerm[]{localvar.const25, localvar.const12, localvar.const26, localvar.const13});
+    const27 = termFactory.makeString("Internal error: with clause failed unexpectedly in rule 'match-f-and-c'");
+    const28 = termFactory.makeString("find-comment-match");
+    const29 = termFactory.makeString("67");
+    const30 = termFactory.makeString("72");
+    constLocationInfo6 = termFactory.makeAppl(localvar._consLocationInfo_4, new IStrategoTerm[]{localvar.const29, localvar.const12, localvar.const30, localvar.const11});
+    const31 = termFactory.makeString("Internal error: with clause failed unexpectedly in rule 'find-comment-match'");
+    const32 = termFactory.makeString("get-function-name");
+    const33 = termFactory.makeString("74");
+    const34 = termFactory.makeString("75");
+    const35 = termFactory.makeString("28");
+    constLocationInfo7 = termFactory.makeAppl(localvar._consLocationInfo_4, new IStrategoTerm[]{localvar.const33, localvar.const12, localvar.const34, localvar.const35});
+    const36 = termFactory.makeString("find-comment-by-name");
+    const37 = termFactory.makeString("77");
+    const38 = termFactory.makeString("81");
+    const39 = termFactory.makeString("35");
+    constLocationInfo8 = termFactory.makeAppl(localvar._consLocationInfo_4, new IStrategoTerm[]{localvar.const37, localvar.const12, localvar.const38, localvar.const39});
+    const40 = termFactory.makeString("Internal error: with clause failed unexpectedly in rule 'find-comment-by-name'");
+    const41 = termFactory.makeString("first");
+    const42 = termFactory.makeString("83");
+    const43 = termFactory.makeString("84");
+    constLocationInfo9 = termFactory.makeAppl(localvar._consLocationInfo_4, new IStrategoTerm[]{localvar.const42, localvar.const12, localvar.const43, localvar.const35});
+  }
+
+  public static void registerInterop(org.spoofax.interpreter.core.IContext context, Context compiledContext)
+  { 
+    new InteropRegisterer().registerLazy(context, compiledContext, InteropRegisterer.class.getClassLoader());
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/localvar.java.dep
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/localvar.java.dep	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,4 @@
+/home/rlindeman/workspace/strj-dbg/test/generated/localvar/java/org/localvar/localvar.java: \
+	 \
+	/home/rlindeman/workspace/strj-debug-runtime/runtime-lib/strategodebuglib.rtree \
+	/home/rlindeman/workspace/strj-dbg/test/generated/localvar/stratego/localvar.str
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/main_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/main_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,49 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") public class main_0_0 extends Strategy 
+{ 
+  public static main_0_0 instance = new main_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("main_0_0");
+    Fail0:
+    { 
+      IStrategoTerm t_0 = null;
+      IStrategoTerm v_0 = null;
+      IStrategoTerm y_0 = null;
+      IStrategoTerm z_0 = null;
+      IStrategoTerm d_1 = null;
+      IStrategoTerm e_1 = null;
+      v_0 = term;
+      t_0 = localvar.const0;
+      y_0 = v_0;
+      term = s_enter_0_2.instance.invoke(context, y_0, t_0, localvar.constLocationInfo0);
+      if(term == null)
+        break Fail0;
+      term = io_wrap_1_0.instance.invoke(context, term, execute_0_0.instance);
+      if(term == null)
+        break Fail0;
+      d_1 = term;
+      z_0 = localvar.const0;
+      e_1 = d_1;
+      term = s_exit_0_2.instance.invoke(context, e_1, z_0, localvar.constLocationInfo0);
+      if(term == null)
+        break Fail0;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/match_comments_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/match_comments_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,95 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") public class match_comments_0_0 extends Strategy 
+{ 
+  public static match_comments_0_0 instance = new match_comments_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    ITermFactory termFactory = context.getFactory();
+    context.push("match_comments_0_0");
+    Fail3:
+    { 
+      IStrategoTerm d_2 = null;
+      IStrategoTerm e_2 = null;
+      IStrategoTerm g_2 = null;
+      IStrategoTerm j_2 = null;
+      IStrategoTerm k_2 = null;
+      IStrategoTerm m_2 = null;
+      IStrategoTerm n_2 = null;
+      IStrategoTerm o_2 = null;
+      IStrategoTerm r_2 = null;
+      IStrategoTerm t_2 = null;
+      IStrategoTerm u_2 = null;
+      if(term.getTermType() != IStrategoTerm.APPL || localvar._consProgram_2 != ((IStrategoAppl)term).getConstructor())
+        break Fail3;
+      d_2 = term.getSubterm(1);
+      j_2 = term;
+      m_2 = term;
+      k_2 = localvar.const10;
+      n_2 = m_2;
+      term = r_enter_0_2.instance.invoke(context, n_2, k_2, localvar.constLocationInfo2);
+      if(term == null)
+        break Fail3;
+      term = j_2;
+      o_2 = j_2;
+      IStrategoTerm term1 = term;
+      Success1:
+      { 
+        Fail4:
+        { 
+          term = find_functions_0_0.instance.invoke(context, d_2);
+          if(term == null)
+            break Fail4;
+          e_2 = term;
+          term = find_comments_0_0.instance.invoke(context, d_2);
+          if(term == null)
+            break Fail4;
+          term = termFactory.makeTuple(e_2, term);
+          term = match_f_and_c_0_0.instance.invoke(context, term);
+          if(term == null)
+            break Fail4;
+          g_2 = term;
+          if(true)
+            break Success1;
+        }
+        term = term1;
+        IStrategoTerm h_2 = null;
+        IStrategoTerm i_2 = null;
+        IStrategoTerm q_2 = null;
+        h_2 = term;
+        term = context.invokePrimitive("SSL_stacktrace_get_all_frame_names", term, NO_STRATEGIES, NO_TERMS);
+        if(term == null)
+          break Fail3;
+        i_2 = term;
+        q_2 = h_2;
+        term = report_with_failure_0_2.instance.invoke(context, q_2, localvar.const14, i_2);
+        if(term == null)
+          break Fail3;
+      }
+      term = o_2;
+      if(g_2 == null)
+        break Fail3;
+      t_2 = g_2;
+      r_2 = localvar.const10;
+      u_2 = t_2;
+      term = r_exit_0_2.instance.invoke(context, u_2, r_2, localvar.constLocationInfo2);
+      if(term == null)
+        break Fail3;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/match_f_and_c_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/java/org/localvar/match_f_and_c_0_0.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,94 @@
+package org.localvar;
+
+import org.strategoxt.stratego_lib.*;
+import org.strategoxt.libstrategodebuglib.*;
+import org.strategoxt.lang.*;
+import org.spoofax.interpreter.terms.*;
+import static org.strategoxt.lang.Term.*;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import java.util.ArrayList;
+import java.lang.ref.WeakReference;
+
+ at SuppressWarnings("all") public class match_f_and_c_0_0 extends Strategy 
+{ 
+  public static match_f_and_c_0_0 instance = new match_f_and_c_0_0();
+
+  @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
+  { 
+    context.push("match_f_and_c_0_0");
+    Fail9:
+    { 
+      TermReference h_4 = new TermReference();
+      IStrategoTerm i_4 = null;
+      IStrategoTerm j_4 = null;
+      IStrategoTerm m_4 = null;
+      IStrategoTerm n_4 = null;
+      IStrategoTerm p_4 = null;
+      IStrategoTerm q_4 = null;
+      IStrategoTerm r_4 = null;
+      IStrategoTerm u_4 = null;
+      IStrategoTerm w_4 = null;
+      IStrategoTerm x_4 = null;
+      if(term.getTermType() != IStrategoTerm.TUPLE || term.getSubtermCount() != 2)
+        break Fail9;
+      i_4 = term.getSubterm(0);
+      if(h_4.value == null)
+        h_4.value = term.getSubterm(1);
+      else
+        if(h_4.value != term.getSubterm(1) && !h_4.value.match(term.getSubterm(1)))
+          break Fail9;
+      m_4 = term;
+      p_4 = term;
+      n_4 = localvar.const24;
+      q_4 = p_4;
+      term = r_enter_0_2.instance.invoke(context, q_4, n_4, localvar.constLocationInfo5);
+      if(term == null)
+        break Fail9;
+      term = m_4;
+      r_4 = m_4;
+      IStrategoTerm term4 = term;
+      Success4:
+      { 
+        Fail10:
+        { 
+          term = i_4;
+          lifted3 lifted30 = new lifted3();
+          lifted30.h_4 = h_4;
+          term = map_1_0.instance.invoke(context, term, lifted30);
+          if(term == null)
+            break Fail10;
+          j_4 = term;
+          if(true)
+            break Success4;
+        }
+        term = term4;
+        IStrategoTerm k_4 = null;
+        IStrategoTerm l_4 = null;
+        IStrategoTerm t_4 = null;
+        k_4 = term;
+        term = context.invokePrimitive("SSL_stacktrace_get_all_frame_names", term, NO_STRATEGIES, NO_TERMS);
+        if(term == null)
+          break Fail9;
+        l_4 = term;
+        t_4 = k_4;
+        term = report_with_failure_0_2.instance.invoke(context, t_4, localvar.const27, l_4);
+        if(term == null)
+          break Fail9;
+      }
+      term = r_4;
+      if(j_4 == null)
+        break Fail9;
+      w_4 = j_4;
+      u_4 = localvar.const24;
+      x_4 = w_4;
+      term = r_exit_0_2.instance.invoke(context, x_4, u_4, localvar.constLocationInfo5);
+      if(term == null)
+        break Fail9;
+      context.popOnSuccess();
+      if(true)
+        return term;
+    }
+    context.popOnFailure();
+    return null;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/stratego/localvar.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/stratego/localvar.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,144 @@
+module localvar
+
+imports
+  strategodebuglib
+
+
+imports
+  libstrategolib
+
+
+signature
+  sorts
+    Prop
+
+  constructors
+    Var      : String -> Expression
+    Number   : Int -> Expression
+    Add      : Expression * Expression -> Expression
+    Sub      : Expression * Expression -> Expression
+    Print    : Expression -> Statement
+    Assign   : String * Expression -> Statement
+    Function : String * List(Statement) -> Definition
+    Comment  : String * String -> Definition
+    Program  : String * List(Definition) -> Program
+
+
+strategies
+  main =
+    s-enter(
+    | "main"
+    , LocationInfo("31", "3", "32", "21")
+    )
+    ; io-wrap(execute)
+    ; s-exit(
+      | "main"
+      , LocationInfo("31", "3", "32", "21")
+      )
+
+
+rules
+
+  execute :
+    input -> <r-exit(
+              | "execute"
+              , LocationInfo("37", "3", "40", "38")
+              )> output
+    where r-enter(
+          | "execute"
+          , LocationInfo("37", "3", "40", "38")
+          )
+    with output := <match-comments> input
+
+
+rules
+
+  match-comments :
+    Program(_, definitions*) -> <r-exit(
+                                 | "match-comments"
+                                 , LocationInfo("43", "2", "49", "37")
+                                 )> out
+    where r-enter(
+          | "match-comments"
+          , LocationInfo("43", "2", "49", "37")
+          )
+    with f* := <find-functions> definitions*
+         ; c* := <find-comments> definitions*
+         ; out := <match-f-and-c> (f*, c*)
+
+  find-functions :
+    definition* -> <r-exit(
+                    | "find-functions"
+                    , LocationInfo("52", "2", "55", "54")
+                    )> functions*
+    where r-enter(
+          | "find-functions"
+          , LocationInfo("52", "2", "55", "54")
+          )
+    with functions* := <filter(?Function(_, _))> definition*
+
+  find-comments :
+    definition* -> <r-exit(
+                    | "find-comments"
+                    , LocationInfo("57", "2", "60", "52")
+                    )> comments*
+    where r-enter(
+          | "find-comments"
+          , LocationInfo("57", "2", "60", "52")
+          )
+    with comments* := <filter(?Comment(_, _))> definition*
+
+  match-f-and-c :
+    (f*, c*) -> <r-exit(
+                 | "match-f-and-c"
+                 , LocationInfo("62", "2", "65", "49")
+                 )> matches*
+    where r-enter(
+          | "match-f-and-c"
+          , LocationInfo("62", "2", "65", "49")
+          )
+    with matches* := <map(find-comment-match(|c*))> f*
+
+  find-comment-match(|c*):
+    f -> <r-exit(
+          | "find-comment-match"
+          , LocationInfo("67", "2", "72", "43")
+          )> (f, c)
+    where r-enter(
+          | "find-comment-match"
+          , LocationInfo("67", "2", "72", "43")
+          )
+    with name := <get-function-name> f
+         ; c := <find-comment-by-name(|name)> c*
+
+  get-function-name :
+    Function(name, _) -> <r-exit(
+                          | "get-function-name"
+                          , LocationInfo("74", "2", "75", "28")
+                          )> name
+    where r-enter(
+          | "get-function-name"
+          , LocationInfo("74", "2", "75", "28")
+          )
+
+  find-comment-by-name(|name):
+    c* -> <r-exit(
+           | "find-comment-by-name"
+           , LocationInfo("77", "2", "81", "35")
+           )> comment
+    where r-enter(
+          | "find-comment-by-name"
+          , LocationInfo("77", "2", "81", "35")
+          )
+    with c-filtered* := <filter(?Comment(name, _))> c*
+         ; comment := <first> c-filtered*
+
+  first :
+    c-list* -> <r-exit(
+                | "first"
+                , LocationInfo("83", "2", "84", "28")
+                )> <last> c-list*
+    where r-enter(
+          | "first"
+          , LocationInfo("83", "2", "84", "28")
+          )
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/java/README.txt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/java/README.txt	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+this folder contains a stratego program compiled to java with debug info
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/stratego/test-prop.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/stratego/test-prop.aterm	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,100 @@
+Module(
+  "test-prop"
+, [ Imports([Import("stratego-debug-lib")])
+  , Imports([Import("libstrategolib")])
+  , Signature(
+      [ Sorts([SortNoArgs("Prop")])
+      , Constructors(
+          [ OpDecl("False", ConstType(SortNoArgs("Prop")))
+          , OpDecl("True", ConstType(SortNoArgs("Prop")))
+          , OpDecl(
+              "Atom"
+            , FunType([ConstType(SortNoArgs("String"))], ConstType(SortNoArgs("Prop")))
+            )
+          , OpDecl(
+              "Not"
+            , FunType([ConstType(SortNoArgs("Prop"))], ConstType(SortNoArgs("Prop")))
+            )
+          , OpDecl(
+              "And"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Or"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Impl"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Eq"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          ]
+        )
+      ]
+    )
+  , Strategies(
+      [ SDefNoArgs(
+          "main"
+        , Seq(
+            CallT(SVar("s-enter"), [], [NoAnnoList(Str("\"main\""))])
+          , Seq(
+              Call(SVar("io-wrap"), [CallNoArgs(SVar("eval"))])
+            , CallT(SVar("s-exit"), [], [NoAnnoList(Str("\"main\""))])
+            )
+          )
+        )
+      , SDefNoArgs(
+          "eval"
+        , Seq(
+            CallT(SVar("s-enter"), [], [NoAnnoList(Str("\"eval\""))])
+          , Seq(
+              Call(SVar("innermost"), [CallNoArgs(SVar("E"))])
+            , CallT(SVar("s-exit"), [], [NoAnnoList(Str("\"eval\""))])
+            )
+          )
+        )
+      ]
+    )
+  , Rules(
+      [ RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("\"E\""))])
+            , NoAnnoList(Op("False", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("\"E\""))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          , [ WhereClause(
+                CallT(SVar("r-enter"), [], [NoAnnoList(Str("\"E\""))])
+              )
+            , WhereClause(Assign(Var("out"), NoAnnoList(Op("True", []))))
+            ]
+          )
+        )
+      ]
+    )
+  ]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/stratego/test-prop.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/stratego/test-prop.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,220 @@
+module test-prop
+
+imports
+  strategodebuglib
+
+
+imports
+  libstrategolib
+
+
+signature
+  sorts
+    Prop
+
+  constructors
+    False : Prop
+    True  : Prop
+    Atom  : String -> Prop
+    Not   : Prop -> Prop
+    And   : Prop * Prop -> Prop
+    Or    : Prop * Prop -> Prop
+    Impl  : Prop * Prop -> Prop
+    Eq    : Prop * Prop -> Prop
+
+
+strategies
+  main =
+    s-enter(
+    | "main"
+    , LocationInfo("23", "3", "24", "18")
+    )
+    ; io-wrap(eval)
+    ; s-exit(
+      | "main"
+      , LocationInfo("23", "3", "24", "18")
+      )
+
+  eval =
+    s-enter(
+    | "eval"
+    , LocationInfo("26", "3", "27", "17")
+    )
+    ; innermost(E)
+    ; s-exit(
+      | "eval"
+      , LocationInfo("26", "3", "27", "17")
+      )
+
+
+rules
+
+  E :
+    Not(True()) -> <r-exit(
+                    | "E"
+                    , LocationInfo("32", "3", "33", "27")
+                    )> False()
+    where r-enter(
+          | "E"
+          , LocationInfo("32", "3", "33", "27")
+          )
+
+  E :
+    Not(False()) -> <r-exit(
+                     | "E"
+                     , LocationInfo("35", "3", "36", "27")
+                     )> True()
+    where r-enter(
+          | "E"
+          , LocationInfo("35", "3", "36", "27")
+          )
+
+  E :
+    And(True(), x) -> <r-exit(
+                       | "E"
+                       , LocationInfo("38", "3", "39", "24")
+                       )> x
+    where r-enter(
+          | "E"
+          , LocationInfo("38", "3", "39", "24")
+          )
+
+  E :
+    And(x, True()) -> <r-exit(
+                       | "E"
+                       , LocationInfo("41", "3", "42", "24")
+                       )> x
+    where r-enter(
+          | "E"
+          , LocationInfo("41", "3", "42", "24")
+          )
+
+  E :
+    And(False(), x) -> <r-exit(
+                        | "E"
+                        , LocationInfo("44", "3", "45", "31")
+                        )> False()
+    where r-enter(
+          | "E"
+          , LocationInfo("44", "3", "45", "31")
+          )
+
+  E :
+    And(x, False()) -> <r-exit(
+                        | "E"
+                        , LocationInfo("47", "3", "48", "31")
+                        )> False()
+    where r-enter(
+          | "E"
+          , LocationInfo("47", "3", "48", "31")
+          )
+
+  E :
+    Or(True(), x) -> <r-exit(
+                      | "E"
+                      , LocationInfo("50", "3", "51", "28")
+                      )> True()
+    where r-enter(
+          | "E"
+          , LocationInfo("50", "3", "51", "28")
+          )
+
+  E :
+    Or(x, True()) -> <r-exit(
+                      | "E"
+                      , LocationInfo("53", "3", "54", "28")
+                      )> True()
+    where r-enter(
+          | "E"
+          , LocationInfo("53", "3", "54", "28")
+          )
+
+  E :
+    Or(False(), x) -> <r-exit(
+                       | "E"
+                       , LocationInfo("56", "3", "57", "24")
+                       )> x
+    where r-enter(
+          | "E"
+          , LocationInfo("56", "3", "57", "24")
+          )
+
+  E :
+    Or(x, False()) -> <r-exit(
+                       | "E"
+                       , LocationInfo("59", "3", "60", "24")
+                       )> x
+    where r-enter(
+          | "E"
+          , LocationInfo("59", "3", "60", "24")
+          )
+
+  E :
+    Impl(True(), x) -> <r-exit(
+                        | "E"
+                        , LocationInfo("62", "3", "63", "25")
+                        )> x
+    where r-enter(
+          | "E"
+          , LocationInfo("62", "3", "63", "25")
+          )
+
+  E :
+    Impl(x, True()) -> <r-exit(
+                        | "E"
+                        , LocationInfo("65", "3", "66", "30")
+                        )> True()
+    where r-enter(
+          | "E"
+          , LocationInfo("65", "3", "66", "30")
+          )
+
+  E :
+    Impl(False(), x) -> <r-exit(
+                         | "E"
+                         , LocationInfo("68", "3", "69", "31")
+                         )> True()
+    where r-enter(
+          | "E"
+          , LocationInfo("68", "3", "69", "31")
+          )
+
+  E :
+    Eq(False(), x) -> <r-exit(
+                       | "E"
+                       , LocationInfo("71", "3", "72", "29")
+                       )> Not(x)
+    where r-enter(
+          | "E"
+          , LocationInfo("71", "3", "72", "29")
+          )
+
+  E :
+    Eq(x, False()) -> <r-exit(
+                       | "E"
+                       , LocationInfo("74", "3", "75", "29")
+                       )> Not(x)
+    where r-enter(
+          | "E"
+          , LocationInfo("74", "3", "75", "29")
+          )
+
+  E :
+    Eq(True(), x) -> <r-exit(
+                      | "E"
+                      , LocationInfo("77", "3", "78", "23")
+                      )> x
+    where r-enter(
+          | "E"
+          , LocationInfo("77", "3", "78", "23")
+          )
+
+  E :
+    Eq(x, True()) -> <r-exit(
+                      | "E"
+                      , LocationInfo("80", "3", "81", "23")
+                      )> x
+    where r-enter(
+          | "E"
+          , LocationInfo("80", "3", "81", "23")
+          )
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example.tes
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example.tes	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,66 @@
+module localvar
+
+signature
+  sorts
+    Prop
+
+  constructors
+    False : Prop
+
+
+strategies
+
+// ===========
+// test strategies
+
+  do =
+    foo := get
+    
+  do1 = where(bar := get); debug  
+
+  do2(s) = where(bar := get); debug
+
+  do3(s|t) = where(bar := get; foo := get); baz := get
+  
+  do4(s|t) = where(bar := get; foo := get); baz := get; bas := get
+
+// =============  
+// test rules
+
+rules
+  foo1 : t -> t'
+  with t' := t; try(get)
+
+  foo1(s) : t -> t'
+  with t' := t
+
+  foo1(s|term) : t -> t'
+  with t' := t
+
+  foo1(s|term) : t -> t'
+  where t' := t 
+ 
+  foo1(s|term) : t -> t'
+  where t' := t; try(get)
+  where t' := t 
+
+  foo1(s|term) : t -> t'
+  with t' := t 
+  with t' := t 
+  
+  foo:
+  	t -> <q := get; start> t
+  	
+  foo:
+  	t -> <q := get; start> t
+  	where f := get; try(get) 
+  	
+  	start = id
+  
+  get =
+    !False()
+    
+
+    
+    
+    
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example1/example.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example1/example.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,108 @@
+module example
+/*
+Parse stratego programs
+
+Parse stratego source code and write aterm:
+parse-stratego -i identity.str | pp-aterm -o terms/programs/identity.aterm
+
+Parse stratego source code and pretty print the source again 
+parse-stratego -i identity.str | pp-stratego --abstract
+
+Parse stratego, transform and pretty print the aterm
+parse-stratego -i identity.str | ./transform-str | pp-aterm
+*/
+
+imports libstrategolib
+
+    
+strategies
+	main = id
+
+strategies 
+	// no args
+	kaaas = id // SDefNoArgs("kaas", Id())
+	
+	foo = kaaas
+	
+	/*debugged-strategy = s-enter(|"debugged-strategy"); foo; s-exit(|"debugged-strategy")*/
+	
+	// with strategy args
+	first(s) = s // SDef("first", [DefaultVarDec("s")], CallNoArgs(SVar("s")))
+	first-then-second(s1, s2) = s1; s2
+	/*
+	SDef(
+          "first-then-second"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , Seq(CallNoArgs(SVar("s1")), CallNoArgs(SVar("s2")))
+        )
+	*/
+	one-two-three(s1, s2, s3) = s1; s2; s3
+	/*
+	SDef(
+          "one-two-three"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2"), DefaultVarDec("s3")]
+        , Seq(
+            CallNoArgs(SVar("s1"))
+          , Seq(CallNoArgs(SVar("s2")), CallNoArgs(SVar("s3")))
+          )
+        )
+    */
+        
+	// with term args
+	only-term(|term) = id // SDefT("only-term", [], [DefaultVarDec("term")], Id())
+	two-terms(|term1, term2) = id
+	/*
+	SDefT(
+         "two-terms"
+       , []
+       , [DefaultVarDec("term1"), DefaultVarDec("term2")]
+       , Id()
+       )
+	*/
+	three-terms(|t1, t2, t3) = id
+	/*
+	SDefT(
+          "three-terms"
+        , []
+        , [DefaultVarDec("t1"), DefaultVarDec("t2"), DefaultVarDec("t3")]
+        , Id()
+        )
+    */
+    
+	// with strategy and term args
+	s-and-t(s|t) = s
+	/*
+	SDefT(
+          "s-and-t"
+        , [DefaultVarDec("s")]
+        , [DefaultVarDec("t")]
+        , CallNoArgs(SVar("s"))
+        )
+        */
+	s2-and-t(s1, s2|t) = id
+	/*
+	SDefT(
+          "s2-and-t"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , [DefaultVarDec("t")]
+        , Id()
+        )
+	*/
+	s-and-t2(s|t1, t2) = id
+	/*
+	SDefT(
+          "s-and-t2"
+        , [DefaultVarDec("s")]
+        , [DefaultVarDec("t1"), DefaultVarDec("t2")]
+        , Id()
+        )
+	*/
+	s2-and-t2(s1,s2|t1,t2) = id
+	/*
+	SDefT(
+          "s2-and-t2"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , [DefaultVarDec("t1"), DefaultVarDec("t2")]
+        , Id()
+        )
+	*/	

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example1/rule-overview.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example1/rule-overview.aterm	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,154 @@
+Module(
+  "rule-overview"
+, [ Imports([Import("libstrategolib")])
+  , Imports([Import("stratego-debug-lib")])
+  , Rules(
+      [ RDefNoArgs(
+          "E"
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          )
+        )
+      , RDef(
+          "E"
+        , []
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , NoAnnoList(Op("True", []))
+          )
+        )
+      , RDef(
+          "E"
+        , [DefaultVarDec("s")]
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          )
+        )
+      , RDef(
+          "E"
+        , [DefaultVarDec("s1"), DefaultVarDec("s2")]
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , NoAnnoList(Op("True", []))
+          )
+        )
+      , RDefT(
+          "E"
+        , []
+        , [DefaultVarDec("t")]
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          )
+        )
+      , RDefT(
+          "E"
+        , []
+        , [DefaultVarDec("t1"), DefaultVarDec("t2")]
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , NoAnnoList(Op("True", []))
+          )
+        )
+      , RDefT(
+          "E"
+        , [DefaultVarDec("s")]
+        , [DefaultVarDec("t")]
+        , RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , Var("out")
+          , [ WhereClause(
+                CallT(SVar("s-enter"), [], [NoAnnoList(Str("\"E\""))])
+              )
+            , WithClause(Assign(Var("out"), NoAnnoList(Op("True", []))))
+            ]
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , Var("out")
+          , Assign(Var("out"), NoAnnoList(Op("True", [])))
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , Var("out")
+          , Assign(Var("out"), NoAnnoList(Op("True", [])))
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , Var("out'")
+          , [ WithClause(
+                Seq(
+                  Assign(Var("out"), NoAnnoList(Op("False", [])))
+                , Assign(Var("out'"), Var("out"))
+                )
+              )
+            ]
+          )
+        )
+      ]
+    )
+  , Signature(
+      [ Sorts([SortNoArgs("Prop")])
+      , Constructors(
+          [ OpDecl("False", ConstType(SortNoArgs("Prop")))
+          , OpDecl("True", ConstType(SortNoArgs("Prop")))
+          , OpDecl(
+              "Atom"
+            , FunType([ConstType(SortNoArgs("String"))], ConstType(SortNoArgs("Prop")))
+            )
+          , OpDecl(
+              "Not"
+            , FunType([ConstType(SortNoArgs("Prop"))], ConstType(SortNoArgs("Prop")))
+            )
+          , OpDecl(
+              "And"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Or"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Impl"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Eq"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          ]
+        )
+      ]
+    )
+  ]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example1/rule-overview.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/example1/rule-overview.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,42 @@
+module rule-overview
+
+imports libstrategolib
+
+	
+rules
+	E : Not(True())      -> False()       
+  	E() : Not(False())     -> True()
+  
+    E(s) : Not(True())      -> False()       
+  	E(s1,s2) : Not(False())     -> True()
+  	
+    E(|t) : Not(True())      -> False()       
+  	E(|t1,t2) : Not(False())     -> True()
+	
+	E(s|t) : Not(True())      -> False()
+	 
+  	E : Not(False())     -> out
+  		with out := True()
+  		
+  	E : Not(False())     -> out
+  		where out := True()
+
+  	E : Not(False())     -> out
+  		where( out := True() )
+  		
+  	E : Not(False())     -> out'
+  		with 
+  			out := False() ;
+  			out' := out
+  		
+signature
+sorts Prop
+  constructors
+    False : Prop
+    True  : Prop
+    Atom  : String -> Prop
+    Not   : Prop -> Prop
+    And   : Prop * Prop -> Prop
+    Or    : Prop * Prop -> Prop
+    Impl  : Prop * Prop -> Prop
+    Eq    : Prop * Prop -> Prop
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/localvar.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/localvar.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,98 @@
+module localvar
+// use local vars in rules and strategies to store temp result
+
+imports
+  libstrategolib
+
+
+signature
+  sorts
+    Prop
+
+  constructors
+  	
+  	Var		: String -> Expression
+  	Number	: Int -> Expression
+  	Add		: Expression * Expression -> Expression
+  	Sub		: Expression * Expression -> Expression
+  	
+  	Print	: Expression -> Statement
+  	Assign	: String * Expression -> Statement
+  	
+  	Function : String * List(Statement) -> Definition
+  	
+  	Comment : String * String -> Definition
+  	
+  	Program : String * List(Definition) -> Program
+  	
+
+    
+strategies
+  main =
+    io-wrap(execute)
+    
+rules
+  // show Comment and Function that have the same name
+	
+  execute:
+  	input -> output
+  	with
+  	  output := <match-comments> input
+
+rules
+	match-comments :
+		// match program
+		Program(_, definitions*) -> out
+		with
+			f* := <find-functions> definitions* // find functions
+			; c* := <find-comments> definitions* // find comments
+			; out := <match-f-and-c> (f*, c*)
+
+		
+	find-functions:
+		definition* -> functions*
+		with
+			functions* := <filter(?Function(_,_))> definition*
+			
+	find-comments:
+		definition* -> comments*
+		with
+			comments* := <filter(?Comment(_,_))> definition*
+			
+	match-f-and-c:
+		(f*, c*) -> matches*
+		with
+			//matches* := <map(find-comment-match(|c*))> f*
+			matches* := <map(try-find-comment-by-name(|c*))> f*
+		
+	try-find-comment-by-name(|c*) = find-comment-match(|c*) // <+ (debug(!"fail"); !"fail")	
+		
+	find-comment-match(|c*):
+		f -> (f, c)
+		// f should be a Function
+		where
+			name := <get-function-name> f
+			; c := <find-comment-by-name(|name)> c*
+			  
+	get-function-name:
+		Function(name, _) -> name
+			
+	find-comment-by-name(|name):
+		c* -> comment
+		with 
+		c-filtered* := <filter(?Comment(name, _))> c*
+		; comment := (<debug(!"stuff:"); first> c-filtered*) //  <+ !Comment(name, "created!!")
+		//; comment := <first> c-filtered*
+
+
+	old-first : c-list* -> out
+	where out := <last> c-list* <+ build-c
+	
+	is-empty = ?[] 
+	
+	
+	first = 
+		debug(!"first: ") ;
+		(is-empty < build-c + last)
+		
+	build-c = !Comment("new", "created!!")
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/run.input
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/run.input	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,23 @@
+Program("progname",
+[
+	Comment("fname", "laalalalalalalalalal")
+	, Comment("this", "this text")
+	, Comment("that", "that text")
+	, Function("fname",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+	, Function("nocomment",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/run.output
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/run.output	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+[(Function("fname",[Assign("var_foo",Add(Number(2),Number(7))),Print("var_foo")]),Comment("fname","laalalalalalalalalal")),(Function("nocomment",[Assign("var_foo",Add(Number(2),Number(7))),Print("var_foo")]),Comment("new","created!!"))]

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/run.input
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/run.input	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+And(Impl(True,And(True,False)),False)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/run.output
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/run.output	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+False

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/test-prop.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/test-prop.aterm	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,347 @@
+Module(
+  "test-prop"
+, [ Imports([Import("stratego-debug-lib")])
+  , Imports([Import("libstrategolib")])
+  , Signature(
+      [ Sorts([SortNoArgs("Prop")])
+      , Constructors(
+          [ OpDecl("False", ConstType(SortNoArgs("Prop")))
+          , OpDecl("True", ConstType(SortNoArgs("Prop")))
+          , OpDecl(
+              "Atom"
+            , FunType([ConstType(SortNoArgs("String"))], ConstType(SortNoArgs("Prop")))
+            )
+          , OpDecl(
+              "Not"
+            , FunType([ConstType(SortNoArgs("Prop"))], ConstType(SortNoArgs("Prop")))
+            )
+          , OpDecl(
+              "And"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Or"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Impl"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          , OpDecl(
+              "Eq"
+            , FunType(
+                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
+              , ConstType(SortNoArgs("Prop"))
+              )
+            )
+          ]
+        )
+      ]
+    )
+  , Strategies(
+      [ SDefNoArgs(
+          "main"
+        , Seq(
+            CallT(
+              SVar("s-enter")
+            , []
+            , [NoAnnoList(Str("main")), Location(20, 2, 20, 22)]
+            )
+          , Seq(
+              Call(SVar("io-wrap"), [CallNoArgs(SVar("eval"))])
+            , CallT(SVar("s-exit"), [], [NoAnnoList(Str("main"))])
+            )
+          )
+        )
+      , SDefNoArgs(
+          "eval"
+        , Seq(
+            CallT(
+              SVar("s-enter")
+            , []
+            , [NoAnnoList(Str("eval")), Location(21, 2, 21, 21)]
+            )
+          , Seq(
+              Call(SVar("innermost"), [CallNoArgs(SVar("E"))])
+            , CallT(SVar("s-exit"), [], [NoAnnoList(Str("eval"))])
+            )
+          )
+        )
+      ]
+    )
+  , Rules(
+      [ RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("False", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("False", []))]))
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("True", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "And"
+              , [NoAnnoList(Op("True", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "And"
+              , [Var("x"), NoAnnoList(Op("True", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "And"
+              , [NoAnnoList(Op("False", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("False", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "And"
+              , [Var("x"), NoAnnoList(Op("False", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("False", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Or"
+              , [NoAnnoList(Op("True", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("True", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Or"
+              , [Var("x"), NoAnnoList(Op("True", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("True", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Or"
+              , [NoAnnoList(Op("False", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Or"
+              , [Var("x"), NoAnnoList(Op("False", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Impl"
+              , [NoAnnoList(Op("True", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Impl"
+              , [Var("x"), NoAnnoList(Op("True", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("True", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Impl"
+              , [NoAnnoList(Op("False", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("True", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Eq"
+              , [NoAnnoList(Op("False", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("Not", [Var("x")]))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Eq"
+              , [Var("x"), NoAnnoList(Op("False", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , NoAnnoList(Op("Not", [Var("x")]))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Eq"
+              , [NoAnnoList(Op("True", [])), Var("x")]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      , RDefNoArgs(
+          "E"
+        , Rule(
+            NoAnnoList(
+              Op(
+                "Eq"
+              , [Var("x"), NoAnnoList(Op("True", []))]
+              )
+            )
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("E"))])
+            , Var("x")
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("E"))])
+          )
+        )
+      ]
+    )
+  ]
+)
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/test-prop.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/test-prop.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,81 @@
+module test-prop
+
+imports
+  libstrategolib
+
+
+signature
+  sorts
+    Prop
+
+  constructors
+    False : Prop
+    True  : Prop
+    Atom  : String -> Prop
+    Not   : Prop -> Prop
+    And   : Prop * Prop -> Prop
+    Or    : Prop * Prop -> Prop
+    Impl  : Prop * Prop -> Prop
+    Eq    : Prop * Prop -> Prop
+
+
+strategies
+  main =
+    io-wrap(eval)
+
+  eval =
+    innermost(E)
+
+
+rules
+
+  E :
+    Not(True()) -> False()
+
+  E :
+    Not(False()) -> True()
+
+  E :
+    And(True(), x) -> x
+
+  E :
+    And(x, True()) -> x
+
+  E :
+    And(False(), x) -> False()
+
+  E :
+    And(x, False()) -> False()
+
+  E :
+    Or(True(), x) -> True()
+
+  E :
+    Or(x, True()) -> True()
+
+  E :
+    Or(False(), x) -> x
+
+  E :
+    Or(x, False()) -> x
+
+  E :
+    Impl(True(), x) -> x
+
+  E :
+    Impl(x, True()) -> True()
+
+  E :
+    Impl(False(), x) -> True()
+
+  E :
+    Eq(False(), x) -> Not(x)
+
+  E :
+    Eq(x, False()) -> Not(x)
+
+  E :
+    Eq(True(), x) -> x
+
+  E :
+    Eq(x, True()) -> x
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/test-prop.tes
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-prop/test-prop.tes	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,44 @@
+module test-prop
+
+// propositional formulae example
+
+imports libstrategolib
+
+signature
+  sorts Prop
+  constructors
+    False : Prop
+    True  : Prop
+    Atom  : String -> Prop
+    Not   : Prop -> Prop
+    And   : Prop * Prop -> Prop
+    Or    : Prop * Prop -> Prop
+    Impl  : Prop * Prop -> Prop
+    Eq    : Prop * Prop -> Prop
+    
+strategies
+	main = io-wrap(eval)
+	eval = innermost(E)
+
+rules
+  E : Not(True())      -> False()       
+  E : Not(False())     -> True()
+  E : And(True(), x)   -> x        
+  E : And(x, True())   -> x   
+  E : And(False(), x)  -> False()     
+  E : And(x, False())  -> False()
+  E : Or(True(), x)    -> True()     
+  E : Or(x, True())    -> True()  
+  E : Or(False(), x)   -> x     
+  E : Or(x, False())   -> x
+  E : Impl(True(), x)  -> x 
+  E : Impl(x, True())  -> True()      
+  E : Impl(False(), x) -> True()
+  E : Eq(False(), x)   -> Not(x)
+  E : Eq(x, False())   -> Not(x)      
+  E : Eq(True(), x)    -> x
+  E : Eq(x, True())    -> x 
+	 
+
+  
+  

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/assert.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/assert.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,14 @@
+module assert
+
+// util module to assert that the current term matches what we expect
+imports include/Test
+  
+strategies
+	  
+assert-module =
+ 	(?Module(_,_) <+ debug(!"Assert: current term is not a Module"); fail)
+ 	
+  echo(|msg):
+  	t -> t
+  	where
+  		<debug> msg
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/compile-str.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/compile-str.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,7 @@
+module compile-str
+
+
+
+strategies
+	
+	compile-str-to-java(|absolute-output-location) = id
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,238 @@
+module gen-debug-info
+
+imports
+  libstratego-lib
+  include/Test
+  assert
+  gen-debug-step // add step debug information
+  gen-debug-var // add local var debug information
+  location-util
+  
+//
+// wrap r-enter/r-exit and s-enter/s-exit around rules and strategies.
+// these rules have the following parameters: r-enter(|<filename>, <rule/strategy name>, <LocationInfo>)
+//
+strategies  
+	// prepare debug, remove all annotations except 
+	// the ones connected to a Stat-aterm
+	
+	
+	// dicard all location annotations for all terms except 
+	//for the statements defined below	
+    //filter-location = bottomup(try(keep-location))
+    
+    // keep all Location annotations
+    filter-location = id
+    
+    keep-location =
+      if should-keep-location then id else discard-location end
+  
+    // For each statement list the constructor here to ensure the line numbers will be saved
+  	// three types of strategy definitions
+  	should-keep-location :
+  		e at SDefNoArgs(_,_) -> e
+  	should-keep-location :
+  		e at SDef(_,_,_) -> e
+	should-keep-location :	
+  		e at SDefT(_,_,_,_) -> e
+	should-keep-location :
+		e at RDefNoArgs(_,_) -> e
+	should-keep-location :
+  		e at RDef(_,_,_) -> e
+	should-keep-location :
+		e at RDefT(_,_,_,_) -> e
+		
+  	// drop the annotation	
+  	discard-location:
+  		e{a*} -> e{}    
+
+strategies
+	
+	// main rule for adding debug information
+	add-debug-info(|filename) = 
+		add-step-statements(|filename) // step statements, each strategy statement s will be replaced by Seq(step-s, s)
+		; 
+		  add-var-statements(|filename) // local var statements, add them after step statements are added
+		; add-s-entry-and-exit-calls(|filename) // s-enter, s-exit
+		; add-r-entry-and-exit-calls(|filename) // r-enter, r-exit
+		; add-s-debug-import // add import for debug library
+	
+	// current term should be a module
+	 add-s-entry-and-exit-calls(|filename) =
+	 	bottomup(try(add-s-entry-and-exit-call(|filename)))
+	 	
+	// current term should be a module
+	 add-r-entry-and-exit-calls(|filename) =
+	 	bottomup(try(add-r-entry-and-exit-call(|filename)))
+
+ 	
+rules 
+// 
+// add an s-entry and s-exit strategy call around each strategy definition
+//
+	add-s-entry-and-exit-call(|filename):
+		SDefNoArgs(s-name, s){a} -> SDefNoArgs(s-name, s') // strategy with no args
+		with s' := <wrap-s(|filename, s-name, a)> s
+	add-s-entry-and-exit-call(|filename):
+		SDef(s-name, s-args, s){a} -> SDef(s-name, s-args, s') // strategy with strategy-args
+		with s' := <wrap-s(|filename, s-name, a)> s
+	add-s-entry-and-exit-call(|filename):
+		SDefT(s-name, s-args, t-args, s){a} -> SDefT(s-name, s-args, t-args, s') // strategy with strategy-args and term-args
+		with s' := <wrap-s(|filename, s-name, a)> s
+		
+		
+	// current term s is a Strategy
+	// it is transformed to s-enter; s; s-exit
+	wrap-s(|filename, s-name, a):
+		s -> Seq(s-enter, Seq(s, s-exit))
+		with
+			s-enter := <create-s-enter-call(|filename, s-name, a)>
+			; s-exit := <create-s-exit-call(|filename, s-name, a)>
+
+
+//	
+// Add an r-entry and r-exit strategy call around each rule definition
+// See also "module Stratego-Sugar-Rules" for the sdf of the stratego language
+	add-r-entry-and-exit-call(|filename):
+		RDefNoArgs(r-name, r){a} -> RDefNoArgs(r-name, r')
+		with r' := <wrap-r(|filename, r-name, a)> r
+		//with r' := r
+	add-r-entry-and-exit-call(|filename):
+		RDef(r-name, s-args, r){a} -> RDef(r-name, s-args, r')
+		with r' := <wrap-r(|filename, r-name, a)> r		
+	add-r-entry-and-exit-call(|filename):
+		RDefT(r-name, s-args, t-args, r){a} -> RDefT(r-name, s-args, t-args, r')
+		with r' := <wrap-r(|filename, r-name, a)> r	
+		
+	// current term r is a Rule
+	/*
+	transform 
+	  E : Eq(x, True()) ->  x
+	to
+      E : Eq(x, True()) -> <r-exit(|"E")> x 
+      	where r-enter(|"E")
+      	
+		RuleNoCond(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          )
+        
+        Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , App(
+              CallT(SVar("r-exit"), [], [NoAnnoList(Str("\"E\""))])
+            , NoAnnoList(Op("False", []))
+            )
+          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("\"E\""))])
+          )
+    */
+    wrap-r(|filename, r-name, a) :
+    	RuleNoCond(match-term, build-term) -> Rule(match-term, build-term', cond* )
+    	where 
+    	cond* := <create-r-enter-call(|filename, r-name, a)>
+    	; build-term' := App(<create-r-exit-call(|filename, r-name, a)>, build-term)
+    
+
+
+              
+    // rule conditions can be where or with clauses
+    // execution is as follows: ?match-term; rule-cond*; !build-term
+    // make the r-entry call the first
+    /*
+    E : Not(True())      -> False()
+    where out := True()  
+    
+    Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          , Assign(Var("out"), NoAnnoList(Op("True", [])))
+          )
+          
+  	E : Not(True())      -> False()
+    with out := True()  
+    Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          , [WithClause(Assign(Var("out"), NoAnnoList(Op("True", []))))]
+          )
+     
+    E : Not(True())      -> False()
+    where out := True(); kaas := False()      
+    Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          , Seq(
+              Assign(Var("out"), NoAnnoList(Op("True", [])))
+            , Assign(Var("kaas"), NoAnnoList(Op("False", [])))
+            )
+          )
+          
+    E : Not(True())      -> False()
+    where out := True(); kaas := False()
+    with foo := False()       
+    Rule(
+            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
+          , NoAnnoList(Op("False", []))
+          , [ WhereClause(
+                Seq(
+                  Assign(Var("out"), NoAnnoList(Op("True", [])))
+                , Assign(Var("kaas"), NoAnnoList(Op("False", [])))
+                )
+              )
+            , WithClause(Assign(Var("foo"), NoAnnoList(Op("False", []))))
+            ]
+          )
+          */
+	wrap-r(|filename, r-name, a):
+		Rule(match-term, build-term, rule-cond) -> Rule(match-term, build-term', rule-cond'*)
+		where
+			// if rule-cond is a list, insert the r-exit at index 1
+			// if rule-cond is not a list, create a list
+            rule-cond'* := <add-rule-cond(|filename, r-name, a)> rule-cond
+            ; build-term' := App(<create-r-exit-call(|filename, r-name, a)>, build-term)
+          
+    // current term can be a list with WhereClause and WithClause terms
+    // the r-enter call should be inserted before all these clauses at position 0
+	add-rule-cond(|filename, r-name, a) :
+		clause-list* -> clause-list'*
+		where <is-list> clause-list*
+		; clause-list'* := <insert> (0, <create-r-enter-whereclause(|filename, r-name, a)>, clause-list*)
+		
+	// current term is not a list of WhereClause or WithClause terms
+    // current term can be a Strategy
+	// create a list of size 2, with the first term a r-enter call and the second term the original Strategy
+	add-rule-cond(|filename, r-name, a) :
+		s -> clause-list*
+		where not(<is-list> s)
+		where clause-list* := [<create-r-enter-whereclause(|filename, r-name, a)>, WhereClause(s)]
+    
+
+    // create a where clause for the r-enter call
+    create-r-enter-whereclause(|filename, r-name, a) = !WhereClause(
+                <create-r-enter-call(|filename, r-name, a)>
+              )
+
+// add the imports stratego-debug-lib
+// current term should be a module
+	add-s-debug-import:
+		Module(x, def*) -> Module(x, def'*)
+		// insert Imports([Import("strategodebuglib")])
+		with def'* := <insert> (0, Imports([Import("strategodebuglib")]), def*)
+		// make sure strategodebuglib.rtree is on the path when compiling str to java
+
+ 
+strategies
+    // create a r-exit or r-enter call, 
+    // first argument of CallT is the name of the strategy, 
+    // second argument is a list of strategies, 
+    // third argument is a list of terms
+    // r-exit(| "execute", LocationInfo("37", "3", "40", "38"))
+    create-r-exit-call(|filename, r-name, a) = !CallT(SVar("r-exit"), [], [NoAnnoList(Str(filename)), NoAnnoList(Str(r-name)), <location-to-term> a])
+    // r-enter(| "execute", LocationInfo("37", "3", "40", "38"))
+    create-r-enter-call(|filename, r-name, a) = !CallT(SVar("r-enter"), [], [NoAnnoList(Str(filename)), NoAnnoList(Str(r-name)), <location-to-term> a])
+    
+    create-s-enter-call(|filename, s-name, a) = !CallT(SVar("s-enter"), [], [NoAnnoList(Str(filename)), NoAnnoList(Str(s-name)), <location-to-term> a])
+    
+    create-s-exit-call(|filename, s-name, a) = !CallT(SVar("s-exit"), [], [NoAnnoList(Str(filename)), NoAnnoList(Str(s-name)), <location-to-term> a])
+    
+	
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-step.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-step.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,98 @@
+module gen-debug-step
+
+// generate debug info used for stepping in rules and strategies
+
+imports
+  libstratego-lib
+  include/Test
+  assert
+  location-util
+
+rules
+// add step statements in with/where blocks in rules and in strategies
+
+	add-step-statements(|filename) = 
+		bottomup(try(add-step-in-r-def(|filename)))
+		; bottomup(try(add-step-in-s-def(|filename)))
+		
+// add step call to rules		
+	add-step-in-r-def(|filename):
+		RDefNoArgs(r-name, r){a} -> RDefNoArgs(r-name, r'){a}
+		with r' := <add-step-in-r-clause(|filename, r-name)> r
+		//with r' := r
+	add-step-in-r-def(|filename):
+		RDef(r-name, s-args, r){a} -> RDef(r-name, s-args, r'){a}
+		with r' := <add-step-in-r-clause(|filename, r-name)> r		
+	add-step-in-r-def(|filename):
+		RDefT(r-name, s-args, t-args, r){a} -> RDefT(r-name, s-args, t-args, r'){a}
+		with r' := <add-step-in-r-clause(|filename, r-name)> r	
+	 
+	// rule has no WithClause or WhereClause
+    add-step-in-r-clause(|filename, r-name) :
+    	r at RuleNoCond(match-term, build-term){a*} -> r
+ 
+ 	// rule has a single clause or a list of clauses
+ 	add-step-in-r-clause(|filename, r-name):
+		Rule(match-term, build-term, rule-cond){a} -> Rule(match-term, build-term, rule-cond'*){a}
+		where
+			// if rule-cond is a list, insert the r-exit at index 0
+			// if rule-cond is not a list, create a list
+            rule-cond'* := <add-step-in-rule-cond(|filename, r-name)> rule-cond
+
+    // current term can be a list with WhereClause and WithClause terms
+	// map each clause item
+	add-step-in-rule-cond(|filename, r-name) :
+		clause-list* -> clause-list'*
+		where <is-list> clause-list*
+		; clause-list'* := <map(add-step-to-clause(|filename, r-name))> clause-list*
+	
+// add step calls to strategies
+	add-step-in-s-def(|filename):
+		SDefNoArgs(s-name, s){a} -> SDefNoArgs(s-name, s'){a} // strategy with no args
+		with s' := <add-step-to-strategy(|filename, s-name)> s
+	add-step-in-s-def(|filename):
+		SDef(s-name, s-args, s){a} -> SDef(s-name, s-args, s'){a} // strategy with strategy-args
+		with s' := <add-step-to-strategy(|filename, s-name)> s
+	add-step-in-s-def(|filename):
+		SDefT(s-name, s-args, t-args, s){a} -> SDefT(s-name, s-args, t-args, s'){a} // strategy with strategy-args and term-args
+		with s' := <add-step-to-strategy(|filename, s-name)> s
+
+// add step calls to clauses
+
+	add-step-to-clause(|filename, name) :
+		WithClause(s){a} -> WithClause(s'){a}
+		with
+			s' := <add-step-to-strategy(|filename, name)> s
+			
+	add-step-to-clause(|filename, name) :
+		WhereClause(s){a} -> WhereClause(s'){a}
+		with
+			s' := <add-step-to-strategy(|filename, name)> s
+			
+	// current term is not a list of WhereClause or WithClause terms
+    // current term can be a Strategy
+	// create a list of size 2, with the first term a r-enter call and the second term the original Strategy
+	add-step-in-rule-cond(|filename, r-name) :
+		s{a} -> s'
+		where not(<is-list> s)
+		where s' := <add-step-to-strategy(|filename, r-name)> s
+
+	add-step-to-strategy(|filename, name): 
+		s at Seq(s1{a1}, s2{a2}) -> s'
+		//with debug(!"add-step-to-strategy SEQ") 
+		with
+			//s-step := <create-step-call(|filename, name, a1)>
+			s1' := <add-step-to-strategy(|filename, name)> s1
+			; s2' := <add-step-to-strategy(|filename, name)> s2
+			; s' := Seq(s1', s2')
+		  
+	add-step-to-strategy(|filename, name):
+		s{a1} -> s'
+		where not(?Seq(_,_))
+		//with debug(!"add-step-to-strategy not SEQ") 
+		with
+			s-step := <create-step-call(|filename, name, a1)>
+			; s' := Seq(s-step, s)
+strategies
+	create-step-call(|filename, name, a) = !CallT(SVar("s-step"), [], [NoAnnoList(Str(filename)), NoAnnoList(Str(name)), <location-to-term> a])
+	

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,123 @@
+module gen-debug-var
+
+// generate debug info to keep track of local variables
+// e.g.: local_var := "value"
+// syntax 
+// Term ":=" Term -> Strategy {cons("Assign")}
+imports
+  libstratego-lib
+  include/Test
+  assert
+  location-util
+  
+rules
+	
+	// every rule and strategy that contains strategies is traversed
+	// outcome: every Assign strategy is followed by a s-var call
+	// used for debugging purposes
+	add-var-statements(|filename) = 
+		bottomup(try(add-var-in-r-def(|filename)))
+		; bottomup(try(add-var-in-s-def(|filename)))
+
+	// add s-var call to rules, first lookup the rule name		
+	add-var-in-r-def(|filename):
+		RDefNoArgs(r-name, r){a} -> RDefNoArgs(r-name, r'){a}
+		where r' := <var-wrap-r(|filename, r-name)> r
+	add-var-in-r-def(|filename):
+		d at RDef(r-name, s-args, r){a} -> RDef(r-name, s-args, r'){a}
+		where r' := <var-wrap-r(|filename, r-name)> r
+	add-var-in-r-def(|filename):
+		d at RDefT(r-name, s-args, t-args, r){a} -> RDefT(r-name, s-args, t-args, r'){a}
+		where r' := <var-wrap-r(|filename, r-name)> r
+	
+	
+	// add s-var calls to strategies, first lookup the strategy name
+	add-var-in-s-def(|filename):
+		SDefNoArgs(s-name, s){a} -> SDefNoArgs(s-name, s'){a} // strategy with no args
+		where s' := <var-wrap-s(|filename, s-name)> s
+	add-var-in-s-def(|filename):
+		SDef(s-name, s-args, s){a} -> SDef(s-name, s-args, s'){a} // strategy with strategy-args
+		where s' := <var-wrap-s(|filename, s-name)> s
+	add-var-in-s-def(|filename):
+		SDefT(s-name,s-args, t-args, s){a} -> SDefT(s-name, s-args, t-args, s'){a} // strategy with strategy-args and term-args
+		where s' := <var-wrap-s(|filename, s-name)> s
+	
+	// current term is a Strategy
+	// change every Assign to a Seq(Assign, s-var)
+	var-wrap-s(|filename, name) = bottomup(try(match-assign-build-s-var(|filename, name)))
+	
+	// Rule has no Rule Conditions, so it does have a strategy
+	// TODO: strategy can also be used in the build term
+    var-wrap-r(|filename, r-name) :
+    	RuleNoCond(match-term, build-term){a} -> RuleNoCond(match-term, build-term'){a}
+    	with
+    		build-term' := <var-wrap-s(|filename, r-name)> build-term
+	
+	// current Rule has rule conditions, so traverse each condition
+	// TODO: strategy can also be used in the build term
+	var-wrap-r(|filename, r-name):
+		Rule(match-term, build-term, rule-cond){a} -> Rule(match-term, build-term', rule-cond'){a}
+		where
+            rule-cond' := <add-var-to-rule-cond(|filename, r-name)> rule-cond
+    		; build-term' := <var-wrap-s(|filename, r-name)> build-term
+
+
+
+	
+    // current term can be a list with WhereClause and WithClause terms
+    // the r-enter call should be inserted before all these clauses at position 0
+	add-var-to-rule-cond(|filename, r-name) :
+		clause-list* -> clause-list'*
+		where <is-list> clause-list*
+		; clause-list'* := <map(add-s-var-to-clause(|filename, r-name))>
+	// current term is not a list of WhereClause or WithClause terms
+    // current term can be a Strategy
+	// traverse the strategies using var-wrap-s
+	add-var-to-rule-cond(|filename, r-name) :
+		s -> s'
+		where not(<is-list> s)
+		where s' := <var-wrap-s(|filename, r-name)>
+
+	// traverse the strategies in the WithClause
+	add-s-var-to-clause(|filename, r-name):
+		WithClause(s){a} -> WithClause(s'){a}
+		with s' := <var-wrap-s(|filename, r-name)> s
+	// traverse the strategies in the WhereClause
+	add-s-var-to-clause(|filename, r-name):
+		WhereClause(s){a} -> WhereClause(s'){a}
+		with s' := <var-wrap-s(|filename, r-name)> s
+	
+	  
+	// match againt Assign(Var("local_var"), term)
+	// and create a Seq(assign, s-var)
+	// s-var will emit debug info
+	match-assign-build-s-var(|filename, name):
+		 d at Assign(lhs, rhs){a} -> Seq(d, s-var-call)
+	with
+		var-name := <get-var-name> lhs
+		; s-var-call := <create-s-var-call(|filename, name, var-name, a)>
+
+	
+	// create a s-var strategy call
+	create-s-var-call(|filename, name, var-name, a) =
+		where(
+			t-args* := <create-args-array(|filename, name, var-name, a)>
+		) ;
+		!CallT(SVar("s-var"), [], t-args*)
+
+	
+	// create the arguments for the s-var call	  
+	create-args-array(|filename, name, var-name, a) =
+	  	![<to-string> filename, <to-string> name, <to-string> var-name ,<location-to-term> a]
+	  
+	// return the name of the Var	
+	get-var-name:
+	  	Var(name) -> name
+	  	where not (?Var(ListVar(lv)))
+	// return the name of the Var  
+	get-var-name:
+	  	Var(ListVar(name)) -> name
+	
+	// convert the value to a string in the stratego AST format  	
+	to-string :
+	  	value ->  NoAnnoList(Str(value))
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-lookup.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-lookup.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,59 @@
+module gen-lookup
+
+imports
+	include/Test
+	str-reader
+	assert
+	  
+// parse the given stratego file and create a lookup file containing all debug-call and their linenumbers
+rules
+	create-table: inputfilename -> contents
+	where(debug(!"create-table"))
+	where(
+//	  	absPath := 	<concat-strings> [sourceBasedir, "/", inputfilePath]
+//  	; get-anno-ast(|absPath)
+	get-anno-ast(|inputfilename)
+  	; assert-module
+  	; collect-debug-calls
+  	; lines* :=  <create-table-entries>
+  	; contents := $[[lines*]]
+  	; filename := <guarantee-extension(|"table")> inputfilename
+  	; write-to-file(|filename, contents)
+  	  )
+  	  
+// strategy to collect all strago debug calls
+	collect-debug-calls =
+    	collect-all(is-debug-call)
+    
+    // matches: s-enter
+    is-debug-call = 
+    	?CallT(SVar("s-enter"), [], [NoAnnoList(Str(_)), NoAnnoList(Str(_)), _]){anno*}
+    	// filename, name, location-info
+     // matches: s-exit
+    is-debug-call = 
+    	?CallT(SVar("s-exit"), [], [NoAnnoList(Str(_)), NoAnnoList(Str(_)), _]){anno*}
+    	// filename, name, location-info
+    // matches: r-enter
+    is-debug-call = 
+    	?CallT(SVar("r-enter"), [], [NoAnnoList(Str(_)), NoAnnoList(Str(_)), _]){anno*}
+    	// filename, name, location-info
+    // matches: r-exit
+    is-debug-call = 
+    	?CallT(SVar("r-exit"), [], [NoAnnoList(Str(_)), NoAnnoList(Str(_)), _]){anno*}
+    	// filename, name, location-info
+    // matches: s-step
+    is-debug-call = 
+    	?CallT(SVar("s-step"), [], [NoAnnoList(Str(_)), NoAnnoList(Str(_)), _]){anno*}
+    	// filename, name, location-info
+    	
+    create-table-entries = map(convert-to-tuple; convert-to-line)
+    
+    convert-to-tuple :
+    	CallT(SVar(debug-event), [], [NoAnnoList(Str(filename)), NoAnnoList(Str(name)), NoAnnoList(Op(_, [NoAnnoList(Str(a)), NoAnnoList(Str(b)), NoAnnoList(Str(c)), NoAnnoList(Str(d))] ))]){anno*}
+    	-> (debug-event{}, filename{}, name{}, a{}, b{}, c{}, d{})
+    	
+    convert-to-line :
+  (debug-event, filename, name, a, b, c, d) -> 
+    $[[debug-event]	[filename]	[name]	[a]	[b]	[c]	[d]
+     ]
+	test-create-table = <create-table> "/home/rlindeman/workspace/strj-dbg-test/working/localvar/stratego/localvar.str"
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/location-util.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/location-util.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,21 @@
+module location-util
+
+imports
+  libstratego-lib
+  include/Test
+  
+rules
+// ===============
+// arguments for r-enter/s-enter/r-exit/s-exit
+	// current term is Location(start-line-num, start-token-pos, end-line-num, end-token-pos)
+	location-to-term:
+		loc -> term
+		with
+			values := <get-arguments> loc
+			; args := <map(create-arg)> values
+			; term := NoAnnoList(Op("LocationInfo", args))
+		
+
+	create-arg:
+		a -> NoAnnoList(Str(a))
+// ===============	

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/org.strjdbg.transformer.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/org.strjdbg.transformer.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,24 @@
+module org.strjdbg.transformer
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  lib/editor-common.generated
+  trans-str
+
+rules // Main editor interface (defined by editor/Test-Builders and -References.esv)
+ 
+
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+
+      
+strategies
+	main = io-wrap(id)
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/str-reader.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/str-reader.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,91 @@
+module str-reader
+
+imports 
+  libstrc
+  libstratego-lib
+  libstratego-sglr // added
+  libstratego-xtc // added
+  libstratego-gpp
+  libstratego-aterm
+  trans-str
+strategies
+	// file is FILE
+	//test-str-parse =  parse-stratego-file //ps-parse-module-trm
+	//test-str-parse =  ps-parse-module-trm
+	//test-str-parse =  parse-stratego-trm(|["-i", <id>, "--preserve-positions"])
+
+rules
+	/*
+	// throws critical error
+	// [ Test | critical ] Old-style asfix position annotation not supported on this platform; use asfix-anno-location instead
+	test-str-parse:
+	f at FILE(filename) -> out
+	with
+		out := <ps-set-preserve-positions> "yes"; <ps-parse-module-trm> f 
+		*/
+		
+
+rules
+	
+	// current term is string
+	// writes the string to the absolute-location
+  write-stratego(|absolute-location)	:
+   source-code -> absolute-location
+   where
+   	write-to-file(|absolute-location, source-code)
+  
+  strategies
+
+  // accept a (filename, source-code)*
+  // filename is relative to the base-dir
+  write-files-relative(|base-dir):
+    transform-results* ->
+      writes*
+    //  <schrijf (|"kaas", x)>
+      with
+      	writes* := <map(write-to-file-relative(|base-dir))> transform-results*
+      	
+      	
+  // filename is relative to base-dir
+  // filename should correspond to the package structure
+  write-to-file-relative(|base-dir) :
+  	(filename, content) -> filename
+  	where
+  	<concat-strings> [base-dir, "/", filename] => absolutepath
+  	; <dirname> absolutepath => dir
+  	; check-dir
+  	; write-to-file(|absolutepath, content)
+	
+	
+	write-to-file(|filename, contents) = handle := <fopen> (filename, "w"); <fputs> (contents, handle); fclose
+	
+	check-dir =
+		//debug(!"check-dir")
+		(file-exists ; filemode ; isdir) <+ (debug(!"create dir: "); mkdir)
+		
+	
+  // current term should be a Stratego ast
+  // converts ast to a stratego program
+  pp-stratego-ast = 
+  	pp-stratego-string
+	
+  // ignore current term, just return the ast of a stratego program	
+  get-anno-ast(|file-path) = 
+      where(
+      	tbl-path := <get-tbl-path>;
+        <ReadFromFile> tbl-path; 
+        open-parse-table => tbl;
+        //<debug(!"filenam")> file-path;
+        <read-text-file> file-path => file
+      )
+    ; <parse-with-asfix-anno(|tbl)> file
+      
+  get-tbl-path = <concat-strings> [<get-project-dir>, "/", "include/Test.tbl"] 
+
+  // current term should be result of: <read-text-file> file-path
+  // with file-path the path to a text file    
+  parse-with-asfix-anno(|tbl) =
+    parse-string-pt(|tbl)
+    ; asfix-anno-location
+    ; implode-asfix
+	
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,240 @@
+module trans-str
+
+imports 
+  str-reader
+  compile-str
+  libstratego-lib
+  gen-debug-info
+  assert
+  gen-lookup
+  
+rules
+// transform stratego to stratego but add debug statements
+	generate-str:
+	    (selected, position, ast, path, project-path) -> (show-output-filename, result)
+	    where(
+	    	complete-path := <concat-strings> [project-path, "/", path]
+	    	//; <debug(!" complete-path: ")> complete-path
+	      	; show-output-filename := <guarantee-extension(|"show")> path
+	      	; output-filename := <guarantee-extension(|"out")> path
+	        ; r := <apply-debug-trans> (project-path, path, output-filename)
+	        //; <debug(!"apply-debug-trans result")> r
+	        ; result := ("see", output-filename) // or None()
+	        //; str-ast := <get-anno-ast(|complete-path)> // get the stratego AST
+	        //; result := <pp-stratego-ast> str-ast // pretty print stratego AST
+	          
+//	            apply-debug-trans :
+//  	(sourceBasedir, inputfilePath, outputfilename) -> (status, outputfilename)
+
+	     )
+	      //; get-anno-ast(|<concat-strings> [project-path, "/", path]) => an_ast
+	      /*
+	      ; result   := <debug(!"selected: ")> selected
+	      	; <debug(!"ast: ")> ast
+	      	  ; <debug(!"position: ")> position
+	      	    ; <debug(!"path: ")> path
+	      	      ; <debug(!"project-path: ")> project-path
+	      	        */
+
+
+  		
+  // the foo rules can be used to debug the transformation process. Use example.sma
+strategies
+	
+	get-project-dir = !"/home/rlindeman/workspace/strj-dbg-transformer"	
+
+  // show ast with complete location annotation
+  foo1 = 
+  	echo(|"Start foo1")
+  	; get-project-dir => project-dir
+  	; !"test/src" => input-base-dir
+  	; !"test/generated" => output-base-dir
+  	; !"example.tes" => sma-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
+  	; echo(|"reading ast from: ")
+  	; echo(|absolute-location)
+  	; get-anno-ast(|absolute-location)
+  	; assert-module
+  	// ; debug
+  	; echo(|"End foo1")
+	
+	  // show ast with complete location annotation
+  bar1 = 
+  	echo(|"Start bar1")
+  	; get-project-dir => project-dir
+  	; !"test/src" => input-base-dir
+  	; !"test/generated" => output-base-dir
+  	; !"localvar.tes" => sma-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
+  	; echo(|"reading ast from: ")
+  	; echo(|absolute-location)
+  	; get-anno-ast(|absolute-location)
+  	; assert-module
+  	// ; debug
+  	; echo(|"End bar1")
+  	  
+  // filter unnecessary Location-annotations	
+  foo2 = 
+  	echo(|"Start foo2")
+  	; get-project-dir => project-dir
+  	; !"test/src" => input-base-dir
+  	; !"test/generated" => output-base-dir
+  	; !"example.tes" => sma-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
+  	; echo(|"reading ast from: ")
+  	; echo(|absolute-location)
+  	; get-anno-ast(|absolute-location)
+  	; assert-module
+  	; filter-location
+  	// ; debug
+  	; echo(|"End foo2")
+  
+  // add strategy entry and strategy exit calls 
+  foo3 = 
+  	echo(|"Start foo3")
+  	; get-project-dir => project-dir
+  	; !"test/src" => input-base-dir
+  	; !"test/generated" => output-base-dir
+  	; !"example.tes" => sma-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
+  	; echo(|"reading ast from: ")
+  	; echo(|absolute-location)
+  	; get-anno-ast(|absolute-location)
+  	; assert-module
+  	; filter-location
+  	; add-debug-info(|absolute-location)
+  	// ; debug
+  	; echo(|"End foo3")
+  	  
+  // add strategy entry and strategy exit calls 
+  bar3 = 
+  	echo(|"Start bar3")
+  	; get-project-dir => project-dir
+  	; !"test/src" => input-base-dir
+  	; !"test/generated" => output-base-dir
+  	; !"localvar.tes" => sma-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
+  	; echo(|"reading ast from: ")
+  	; echo(|absolute-location)
+  	; get-anno-ast(|absolute-location)
+  	; assert-module
+  	; filter-location
+  	; add-debug-info(|absolute-location)
+  	// ; debug
+  	; echo(|"End bar3")
+  	  
+  // pretty print stratego program with debug info
+  foo4 = 
+  	echo(|"Start foo4")
+  	; get-project-dir => project-dir
+  	; !"test/src" => input-base-dir
+  	; !"test/generated" => output-base-dir
+  	; !"example.tes" => sma-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
+  	; echo(|"reading ast from: ")
+  	; echo(|absolute-location)
+  	; get-anno-ast(|absolute-location)
+  	; assert-module
+  	; filter-location
+  	; add-debug-info(|absolute-location)
+  	; pp-stratego-ast
+  	// ; debug
+  	; echo(|"End foo4")
+  	  
+  	    // pretty print stratego program with debug info
+  bar4 = 
+  	echo(|"Start bar4")
+  	; get-project-dir => project-dir
+  	; !"test/src" => input-base-dir
+  	; !"test/generated" => output-base-dir
+  	; !"localvar.tes" => sma-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
+  	; echo(|"reading ast from: ")
+  	; echo(|absolute-location)
+  	; get-anno-ast(|absolute-location)
+  	; assert-module
+  	; filter-location
+  	; add-debug-info(|absolute-location)
+  	; pp-stratego-ast
+  	// ; debug
+  	; echo(|"End bar4")
+  	  
+  // read str file with annotations, add debug statements, write the file	  
+  foo5 = 
+  	echo(|"Start foo5")
+  	; get-project-dir => project-dir
+  	; !"test/src" => input-base-dir
+  	; !"test/generated" => output-base-dir
+  	; !"example.tes" => sma-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
+  	; <concat-strings> [project-dir, "/", output-base-dir, "/", <guarantee-extension(|"str")> sma-file] => absolute-output-location
+  	; echo(|"reading ast from: ")
+  	; echo(|absolute-location)
+  	; get-anno-ast(|absolute-location)
+  	; assert-module
+  	; filter-location
+  	; add-debug-info(|absolute-location)
+  	; pp-stratego-ast
+  	; write-stratego(|absolute-output-location)
+  	// ; debug
+  	; echo(|"End foo5")
+  	  
+  // read str file with annotations, add debug statements, write debuggable file, compile debuggable file to java  
+  foo6 = 
+  	echo(|"Start foo6")
+  	; get-project-dir => project-dir
+  	; !"test/src" => input-base-dir
+  	; !"test/generated" => output-base-dir
+  	; !"example.tes" => sma-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
+  	; <concat-strings> [project-dir, "/", output-base-dir, "/", <guarantee-extension(|"str")> sma-file] => absolute-output-location
+  	; echo(|"reading ast from")
+  	; echo(|absolute-location)
+  	; get-anno-ast(|absolute-location)
+  	; assert-module
+  	; filter-location
+  	; add-debug-info(|absolute-location)
+  	; pp-stratego-ast
+  	; write-stratego(|absolute-output-location)
+  	; compile-str-to-java(|absolute-output-location)
+  	// ; debug
+  	; echo(|"End foo6")
+  	
+rules  	  
+	// inputfilePath is relative to sourceBasedir.
+	// sourceBasedir should be treated as a project directory
+	// the generated file will be saved at outputfilename
+  apply-debug-trans :
+  	(sourceBasedir, inputfilePath, outputfilename) -> (status, outputfilename)
+  	where(
+  	absPath := 	<concat-strings> [sourceBasedir, "/", inputfilePath]
+  	; get-anno-ast(|absPath)
+  	; assert-module
+  	; filter-location
+  	; add-debug-info(|inputfilePath)
+  	; pp-stratego-ast
+  	; write-stratego(|outputfilename)
+  	; compile-str-to-java(|outputfilename)
+  	; status := "SUCCES"  		
+  	)
+  	
+  apply-debug-trans :
+  	false-arguments -> (status, outputfilename)
+  	where(
+  		not(?(i_sourceBasedir, i_inputfilePath, i_outputfilename))
+  		; echo(!"Wrong arguments: ")
+  		; outputfilename := ""
+  		; status := "FAIL"
+  	)
+  	
+  a-d-t : arguments -> output
+  where(
+  	apply-debug-trans < debug(!"first") + debug(!"second")
+  	; output := "out"
+  )
+  		
+  	
+  test-apply-debug-1 = !("asdf", "ddfg"); apply-debug-trans
+  test-apply-debug-2 = !("asdf", "ddfg", "asfd"); apply-debug-trans
+  test-apply-debug-3 = !"asdf"; apply-debug-trans
+  	
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/.classpath	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="lib" path="/usr/lib/eclipse/plugins/org.eclipse.swt.gtk.linux.x86_3.5.2.v3557f.jar"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/.project	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.strategoxt.imp.debug.ui</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/.settings/org.eclipse.jdt.core.prefs	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,8 @@
+#Wed Oct 06 14:52:32 CEST 2010
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,16 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: stratego debugger ui
+Bundle-SymbolicName: org.strjdbg.eclipse.ui;singleton:=true
+Bundle-Version: 0.1.0.0
+Bundle-Activator: org.strjdbg.eclipse.ui.Activator
+Require-Bundle: org.eclipse.ui,
+ org.eclipse.core.runtime,
+ org.eclipse.debug.ui,
+ org.strjdbg.eclipse.core;bundle-version="0.1.0",
+ org.eclipse.ui.ide,
+ org.eclipse.ui.workbench.texteditor;bundle-version="3.5.1",
+ org.eclipse.imp.runtime
+Bundle-ActivationPolicy: lazy
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Import-Package: org.eclipse.jface.text

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/README.txt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/README.txt	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1 @@
+This is an Eclipse plugin project, it should only contain user interface code.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/build.properties	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,5 @@
+source.. = src/
+output.. = bin/
+bin.includes = META-INF/,\
+               .,\
+               plugin.xml

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/icons/strategoxt_logo_16.png
==============================================================================
Binary file. No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/icons/strategoxt_logo_64.png
==============================================================================
Binary file. No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/plugin.xml	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?eclipse version="3.4"?>
+<plugin>
+   <extension
+         point="org.eclipse.debug.ui.launchConfigurationTabGroups">
+      <launchConfigurationTabGroup
+            class="org.strjdbg.eclipse.ui.str.launching.StrategoTabGroup"
+            description="Run or debug a Stratego program"
+            id="org.strjdbg.eclipse.ui.launchConfigurationTabGroup.str"
+            type="org.strjdbg.eclipse.core.launchConfigurationType.str">
+      </launchConfigurationTabGroup>
+   </extension>
+   <extension
+         point="org.eclipse.debug.ui.launchConfigurationTypeImages">
+      <launchConfigurationTypeImage
+            configTypeID="org.strjdbg.eclipse.core.launchConfigurationType.str"
+            icon="icons/strategoxt_logo_16.png"
+            id="org.strjdbg.eclipse.ui.str.launchConfigurationTypeImage">
+      </launchConfigurationTypeImage>
+   </extension>
+   <extension
+         point="org.eclipse.debug.ui.launchShortcuts">
+      <shortcut
+            class="org.strjdbg.eclipse.ui.str.launching.StrategoLaunchShortcut"
+            icon="icons/strategoxt_logo_16.png"
+            id="org.strjdbg.eclipse.ui.launchShortcut.str"
+            label="Stratego Program"
+            modes="run, debug">
+		<description
+     		description="Runs a local Stratego program"
+     		mode="run">
+    	</description>
+    	<description
+     		description="Debugs a local Stratego program"
+     		mode="debug">
+    	</description>
+     <contextualLaunch>
+        <enablement>
+           <with variable="selection">
+             <count value="1"/>
+              <iterate>
+              	<adapt type="org.eclipse.core.resources.IResource">
+	          		<test property="org.eclipse.core.resources.name" 
+	                	value="*.str"/>
+	       		</adapt>
+              </iterate>
+             </with>
+        </enablement>
+     </contextualLaunch>
+     <configurationType
+           id="org.strjdbg.eclipse.core.launchConfigurationType.str">
+     </configurationType>
+            
+      </shortcut>
+   </extension>
+   <extension
+         point="org.eclipse.core.runtime.adapters">
+      <factory
+            adaptableType="org.eclipse.ui.texteditor.ITextEditor"
+            class="org.strjdbg.eclipse.ui.str.model.StrategoBreakpointAdapterFactory">
+         <adapter
+               type="org.eclipse.debug.ui.actions.IToggleBreakpointsTarget">
+         </adapter>
+      </factory>
+   </extension>
+   <extension
+         point="org.eclipse.debug.ui.debugModelPresentations">
+      <debugModelPresentation
+            class="org.strjdbg.eclipse.ui.str.model.StrategoModelPresentation"
+            id="org.strjdbg.eclipse.core">
+      </debugModelPresentation>
+   </extension>
+</plugin>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/Activator.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,50 @@
+package org.strjdbg.eclipse.ui;
+
+import org.eclipse.ui.plugin.AbstractUIPlugin;
+import org.osgi.framework.BundleContext;
+
+/**
+ * The activator class controls the plug-in life cycle
+ */
+public class Activator extends AbstractUIPlugin {
+
+	// The plug-in ID
+	public static final String PLUGIN_ID = "org.strjdbg.eclipse.ui";
+
+	// The shared instance
+	private static Activator plugin;
+	
+	/**
+	 * The constructor
+	 */
+	public Activator() {
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
+	 */
+	public void start(BundleContext context) throws Exception {
+		super.start(context);
+		plugin = this;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
+	 */
+	public void stop(BundleContext context) throws Exception {
+		plugin = null;
+		super.stop(context);
+	}
+
+	/**
+	 * Returns the shared instance
+	 *
+	 * @return the shared instance
+	 */
+	public static Activator getDefault() {
+		return plugin;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoLaunchShortcut.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoLaunchShortcut.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,71 @@
+package org.strjdbg.eclipse.ui.str.launching;
+
+import org.eclipse.debug.ui.ILaunchShortcut;
+import org.eclipse.jface.viewers.ISelection;
+import org.eclipse.jface.viewers.IStructuredSelection;
+import org.eclipse.ui.IEditorPart;
+
+public class StrategoLaunchShortcut implements ILaunchShortcut {
+
+	public void launch(ISelection selection, String mode) {
+		System.out.println("Launch selection");
+        if (selection instanceof IStructuredSelection) {
+        	searchAndLaunch(((IStructuredSelection)selection).toArray(), mode);
+        } 
+	}
+
+	/**
+	 * Launches the stratego program in the active editor
+	 */
+	public void launch(IEditorPart editor, String mode) {
+		System.out.println("Launch from editor");
+		/*
+        IEditorInput input = editor.getEditorInput();
+        IJavaElement javaElement = 
+            (IJavaElement) input.getAdapter(IJavaElement.class);
+        if (javaElement != null) {
+         searchAndLaunch(new Object[] {javaElement}, mode);
+        } 
+        */
+	}
+	
+	
+    protected void searchAndLaunch(Object[] search, String mode) {
+        /*
+    	IType[] types = null;
+        if (search != null) {
+            try {
+             types = AppletLaunchConfigurationUtils.findApplets(
+                     new ProgressMonitorDialog(getShell()), search);
+            } catch (Exception e) {
+               
+            }
+            IType type = null;
+         if (types.length == 0) {
+                MessageDialog.openInformation(
+                    getShell(), "Applet Launch", "No applets found."};
+         } else if (types.length > 1) {
+                type = chooseType(types, mode);
+         } else {
+                type = types[0];
+            }
+            if (type != null) {
+             launch(type, mode);
+            }
+        }*/
+    }
+
+    protected void launch(/*IType type, */String mode) {
+    	/*
+        try {
+            ILaunchConfiguration config = findLaunchConfiguration(mode);
+            if (config != null) {
+             config.launch(mode, null);
+            }
+        } catch (CoreException e) {
+
+        }*/
+    }
+    
+    
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoMainTab.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoMainTab.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,274 @@
+package org.strjdbg.eclipse.ui.str.launching;
+
+import java.util.Arrays;
+import java.util.List;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.debug.core.ILaunchConfiguration;
+import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
+import org.eclipse.debug.ui.AbstractLaunchConfigurationTab;
+import org.eclipse.jface.window.Window;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.ModifyEvent;
+import org.eclipse.swt.events.ModifyListener;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.events.SelectionListener;
+import org.eclipse.swt.graphics.Font;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Text;
+import org.eclipse.ui.dialogs.ResourceListSelectionDialog;
+import org.strjdbg.eclipse.core.str.launching.CollectionUtils;
+import org.strjdbg.eclipse.core.str.launching.IStrategoConstants;
+
+public class StrategoMainTab extends AbstractLaunchConfigurationTab {
+
+	
+	/**
+	 * The location of the Stratego program
+	 */
+	private Text fProgramText;
+	
+	/**
+	 * The arguments for the Stratego program
+	 */
+	private Text fProgramArgumentsText;  // multi-line textbox, every argument should be placed on a line
+	
+	/**
+	 * Checkbox, true if the stratego program needs to be recompiled before every launch.
+	 */
+	private Button fProgramRecompile;
+	
+	/**
+	 * The name of the Project the stratego program is in.
+	 */
+	private Text fProjectText;
+
+	/**
+	 * Browse button
+	 */
+	private Button fProgramButton;
+
+	
+	
+	/**
+	 * Creates the top level control for this launch configuration tab under the given parent composite. 
+	 * This method is called once on tab creation, after setLaunchConfigurationDialog  is called. 
+	 */
+	public void createControl(Composite parent) {
+		Font font = parent.getFont();
+		
+		Composite comp = new Composite(parent, SWT.NONE);
+		setControl(comp);
+		GridLayout topLayout = new GridLayout();
+		topLayout.verticalSpacing = 0;
+		topLayout.numColumns = 3;
+		comp.setLayout(topLayout);
+		comp.setFont(font);
+		
+		createVerticalSpacer(comp, 3);
+		
+		createProjectControl(font, comp);
+		
+		createVerticalSpacer(comp, 3);
+		
+		createProgramControl(font, comp);
+		
+		createVerticalSpacer(comp, 3);
+		
+		createArgumentsControl(font, comp);
+		
+		createVerticalSpacer(comp, 3);
+		
+		createRecompileControl(comp);
+
+	}
+
+	private void createRecompileControl(Composite comp) {
+		// compile
+		fProgramRecompile = new Button(comp, SWT.CHECK);
+		fProgramRecompile.setText("Re-compile before each run");
+		GridData gdRecompile = new GridData(GridData.BEGINNING);
+		gdRecompile.horizontalSpan = 3;
+		fProgramRecompile.setLayoutData(gdRecompile);
+		fProgramRecompile.addSelectionListener(new SelectionListener() {
+			
+			public void widgetSelected(SelectionEvent e) {
+				//boolean isSelected = recompileButton.getSelection();
+				updateLaunchConfigurationDialog();
+			}
+			
+			public void widgetDefaultSelected(SelectionEvent e) {
+				// TODO Auto-generated method stub
+				
+			}
+		});
+	}
+
+	private void createArgumentsControl(Font font, Composite comp) {
+		// arguments
+		Label programArgumentsLabel = new Label(comp, SWT.NONE);
+		programArgumentsLabel.setText("Program arguments:");
+		GridData gdArg = new GridData(GridData.BEGINNING);
+		programArgumentsLabel.setLayoutData(gdArg);
+		programArgumentsLabel.setFont(font);
+		
+		fProgramArgumentsText = new Text(comp, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL); // a multi line text box, every argument should be placed on its own line
+		gdArg = new GridData(GridData.FILL_HORIZONTAL);
+		gdArg.horizontalSpan = 2;
+		gdArg.verticalSpan = 5;
+		fProgramArgumentsText.setLayoutData(gdArg);
+		fProgramArgumentsText.setFont(font);
+		fProgramArgumentsText.addModifyListener(new ModifyListener() {
+			public void modifyText(ModifyEvent e) {
+				updateLaunchConfigurationDialog();
+			}
+		});
+	}
+
+	private void createProgramControl(Font font, Composite comp) {
+		// program location
+		Label programLabel = new Label(comp, SWT.NONE);
+		programLabel.setText("&Program:");
+		GridData gdProg = new GridData(GridData.BEGINNING);
+		programLabel.setLayoutData(gdProg);
+		programLabel.setFont(font);
+		
+		fProgramText = new Text(comp, SWT.SINGLE | SWT.BORDER);
+		
+		gdProg = new GridData(GridData.FILL_HORIZONTAL);
+		fProgramText.setLayoutData(gdProg);
+		fProgramText.setFont(font);
+		fProgramText.addModifyListener(new ModifyListener() {
+			public void modifyText(ModifyEvent e) {
+				updateLaunchConfigurationDialog();
+			}
+		});
+		
+		// browse button
+		fProgramButton = createPushButton(comp, "&Browse...", null); //$NON-NLS-1$
+		fProgramButton.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				browseStrategoFiles();
+			}
+		});
+	}
+
+	private void createProjectControl(Font font, Composite comp) {
+		Label projectLabel = new Label(comp, SWT.NONE);
+		projectLabel.setText("Project:");
+		GridData gdProject= new GridData(GridData.BEGINNING);
+		projectLabel.setLayoutData(gdProject);
+		projectLabel.setFont(font);
+		
+		fProjectText = new Text(comp, SWT.SINGLE | SWT.BORDER);
+		
+		gdProject = new GridData(GridData.FILL_HORIZONTAL);
+		fProjectText.setLayoutData(gdProject);
+		fProjectText.setFont(font);
+		fProjectText.addModifyListener(new ModifyListener() {
+			public void modifyText(ModifyEvent e) {
+				updateLaunchConfigurationDialog();
+			}
+		});
+	}
+
+	public String getName() {
+		return "Main";
+	}
+
+	/**
+	 * Initialize the SWT components on the Tab using the launch configuration.
+	 */
+	@SuppressWarnings("unchecked")
+	public void initializeFrom(ILaunchConfiguration configuration) {
+		try {
+			// eclipse project the stratego program is in
+			String project = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROJECT, (String) null);
+			if (project != null)
+			{
+				fProjectText.setText(project);
+			}
+			
+			// stratego program
+			String program = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, (String)null);
+			if (program != null) {
+				fProgramText.setText(program);
+			}
+			
+			// stratego program arguments
+			List argumentsList = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_ARGUMENTS, (List)null);
+			if (argumentsList != null) {
+				String flatString = CollectionUtils.join(argumentsList, Text.DELIMITER);
+				fProgramArgumentsText.setText(flatString);
+			}
+			
+			// recompile stratego program before each launch
+			boolean recompileSelected = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_RECOMPILE, (boolean) true);
+			fProgramRecompile.setSelection(recompileSelected);
+			
+		} catch (CoreException e) {
+			setErrorMessage(e.getMessage());
+		}
+	}
+
+	public void performApply(ILaunchConfigurationWorkingCopy configuration) {
+		// project name
+		String project = fProjectText.getText().trim();
+		if (project.length() == 0) {
+			project = null;
+		}
+		configuration.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROJECT, project);
+		
+		// program location
+		String program = fProgramText.getText().trim();
+		if (program.length() == 0) {
+			program = null;
+		}
+		configuration.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, program);
+		
+		// arguments
+		String arguments = fProgramArgumentsText.getText().trim();
+		if (arguments.length() == 0) {
+			arguments = null;
+		}
+		String[] argumentsArray = new String[0];
+		if (arguments != null)
+		{
+			argumentsArray = arguments.split(Text.DELIMITER);
+		}
+		List<String> argumentsList = Arrays.asList(argumentsArray);
+		configuration.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_ARGUMENTS, argumentsList);
+		
+		// recompile
+		boolean reCompileSelected = fProgramRecompile.getSelection();
+		configuration.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_RECOMPILE, reCompileSelected);
+	}
+
+	public void setDefaults(ILaunchConfigurationWorkingCopy configuration) {		
+	}
+	
+	/**
+	 * Open a resource chooser to select a PDA program 
+	 */
+	protected void browseStrategoFiles() {
+		ResourceListSelectionDialog dialog = new ResourceListSelectionDialog(getShell(), ResourcesPlugin.getWorkspace().getRoot(), IResource.FILE);
+		dialog.setTitle("Stratego Program");
+		dialog.setMessage("Select Stratego Program");
+		// TODO: single select
+		if (dialog.open() == Window.OK) {
+			Object[] files = dialog.getResult();
+			IFile file = (IFile) files[0];
+			fProgramText.setText(file.getFullPath().toString());
+		}
+		
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoTabGroup.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoTabGroup.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,19 @@
+package org.strjdbg.eclipse.ui.str.launching;
+
+import org.eclipse.debug.ui.AbstractLaunchConfigurationTabGroup;
+import org.eclipse.debug.ui.CommonTab;
+import org.eclipse.debug.ui.ILaunchConfigurationDialog;
+import org.eclipse.debug.ui.ILaunchConfigurationTab;
+import org.eclipse.debug.ui.sourcelookup.SourceLookupTab;
+
+public class StrategoTabGroup extends AbstractLaunchConfigurationTabGroup {
+
+	public void createTabs(ILaunchConfigurationDialog dialog, String mode) {
+		setTabs(new ILaunchConfigurationTab[] {
+				new StrategoMainTab(),
+				new SourceLookupTab(), // was sourcelookuptab
+				new CommonTab()
+		});
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/model/StrategoBreakpointAdapterFactory.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/model/StrategoBreakpointAdapterFactory.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,31 @@
+package org.strjdbg.eclipse.ui.str.model;
+
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.IAdapterFactory;
+import org.eclipse.debug.ui.actions.IToggleBreakpointsTarget;
+import org.eclipse.ui.texteditor.ITextEditor;
+
+public class StrategoBreakpointAdapterFactory implements IAdapterFactory {
+
+	@SuppressWarnings("unchecked")
+	public Object getAdapter(Object adaptableObject, Class adapterType) {
+		//System.out.println("Calls StrategoBreakpointAdapterFactory");
+		if (adaptableObject instanceof ITextEditor) {
+			ITextEditor editorPart = (ITextEditor) adaptableObject;
+			IResource resource = (IResource) editorPart.getEditorInput().getAdapter(IResource.class);
+			if (resource != null) {
+				String extension = resource.getFileExtension();
+				if (extension != null && extension.equals("str")) {
+					return new StrategoLineBreakpointAdapter();
+				}
+			}
+		}
+		return null;
+	}
+
+	@SuppressWarnings("unchecked")
+	public Class[] getAdapterList() {
+		return new Class[]{IToggleBreakpointsTarget.class};
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/model/StrategoLineBreakpointAdapter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/model/StrategoLineBreakpointAdapter.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,89 @@
+package org.strjdbg.eclipse.ui.str.model;
+
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.debug.core.DebugPlugin;
+import org.eclipse.debug.core.model.IBreakpoint;
+import org.eclipse.debug.core.model.ILineBreakpoint;
+import org.eclipse.debug.ui.actions.IToggleBreakpointsTarget;
+import org.eclipse.jface.viewers.ISelection;
+import org.eclipse.jface.text.ITextSelection;
+import org.eclipse.ui.IWorkbenchPart;
+import org.eclipse.ui.texteditor.ITextEditor;
+import org.strjdbg.eclipse.core.str.launching.IStrategoConstants;
+import org.strjdbg.eclipse.core.str.model.StrategoLineBreakpoint;
+
+public class StrategoLineBreakpointAdapter implements IToggleBreakpointsTarget {
+
+	public void toggleLineBreakpoints(IWorkbenchPart part, ISelection selection)
+			throws CoreException {
+		System.out.println("Toggle linebreakpoints");
+		ITextEditor textEditor = getEditor(part);
+		if (textEditor != null) {
+			IResource resource = (IResource) textEditor.getEditorInput()
+					.getAdapter(IResource.class);
+			ITextSelection textSelection = (ITextSelection) selection;
+			int lineNumber = textSelection.getStartLine();
+			IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints(
+							IStrategoConstants.ID_STRATEGO_DEBUG_MODEL);
+			for (int i = 0; i < breakpoints.length; i++) {
+				IBreakpoint breakpoint = breakpoints[i];
+				if (resource.equals(breakpoint.getMarker().getResource())) {
+					if (((ILineBreakpoint) breakpoint).getLineNumber() == (lineNumber + 1)) {
+						breakpoint.delete();
+						return;
+					}
+				}
+			}
+			StrategoLineBreakpoint lineBreakpoint = new StrategoLineBreakpoint(resource, lineNumber + 1);
+			DebugPlugin.getDefault().getBreakpointManager().addBreakpoint(
+					lineBreakpoint);
+		}
+	}
+
+	public boolean canToggleLineBreakpoints(IWorkbenchPart part, ISelection selection) {
+		return getEditor(part) != null;
+	}
+	
+	/**
+	 * Returns the editor being used to edit a Stratego file, associated with the
+	 * given part, or <code>null</code> if none.
+	 *  
+	 * @param part workbench part
+	 * @return the editor being used to edit a PDA file, associated with the
+	 * given part, or <code>null</code> if none
+	 */
+	private ITextEditor getEditor(IWorkbenchPart part) {
+		if (part instanceof ITextEditor) {
+			ITextEditor editorPart = (ITextEditor) part;
+			IResource resource = (IResource) editorPart.getEditorInput().getAdapter(IResource.class);
+			if (resource != null) {
+				String extension = resource.getFileExtension();
+				if (extension != null && extension.equals("str")) {
+					return editorPart;
+				}
+			}
+		}
+		return null;		
+	}
+
+	public boolean canToggleMethodBreakpoints(IWorkbenchPart part, ISelection selection) {
+		return true;
+	}
+
+	public boolean canToggleWatchpoints(IWorkbenchPart part, ISelection selection) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	public void toggleMethodBreakpoints(IWorkbenchPart part, ISelection selection) throws CoreException {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void toggleWatchpoints(IWorkbenchPart part, ISelection selection)
+			throws CoreException {
+		// TODO Auto-generated method stub
+		
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/model/StrategoModelPresentation.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/model/StrategoModelPresentation.java	Thu Nov 11 16:33:04 2010	(r21344)
@@ -0,0 +1,77 @@
+package org.strjdbg.eclipse.ui.str.model;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.debug.core.DebugException;
+import org.eclipse.debug.core.model.ILineBreakpoint;
+import org.eclipse.debug.core.model.IValue;
+import org.eclipse.debug.ui.IDebugModelPresentation;
+import org.eclipse.debug.ui.IValueDetailListener;
+import org.eclipse.jface.viewers.LabelProvider;
+import org.eclipse.ui.IEditorInput;
+import org.eclipse.ui.part.FileEditorInput;
+
+public class StrategoModelPresentation extends LabelProvider implements IDebugModelPresentation {
+
+	public void computeDetail(IValue value, IValueDetailListener listener) {
+		// TODO Auto-generated method stub
+		String detail = "";
+		try {
+			detail = value.getValueString();
+		} catch (DebugException e) {
+		}
+		listener.detailComputed(value, detail);
+	}
+
+	public String getText(Object element) {
+		// TODO Implement!
+		/*
+		try {
+			if (element instanceof StrategoThread)
+			{
+					return ((org.strjdbg.eclipse.core.str.model.StrategoThread) element).getName();
+			}
+		} catch (DebugException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		System.out.println("getText(Object element)" + element);
+		//return null;
+		return element.toString();
+		*/
+		return null;
+	}
+
+	public void setAttribute(String attribute, Object value) {
+		// TODO Auto-generated method stub
+
+	}
+
+	public void dispose() {
+		// TODO Auto-generated method stub
+
+	}
+
+	public String getEditorId(IEditorInput input, Object element) {
+		if (element instanceof IFile || element instanceof ILineBreakpoint)
+		{
+
+			return "org.eclipse.imp.runtime.impEditor"; // specialized stratego editor from the imp framework
+		}
+		return null;
+	}
+
+
+	public IEditorInput getEditorInput(Object element) {
+		if (element instanceof IFile)
+		{
+			return new FileEditorInput((IFile)element);
+		}
+		if (element instanceof ILineBreakpoint)
+		{
+			return new FileEditorInput((IFile)((ILineBreakpoint)element).getMarker().getResource());
+		}
+		return null;
+
+	}
+
+}

From rtlindeman at gmail.com  Fri Nov 12 15:01:20 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Fri, 12 Nov 2010 14:01:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21345 - in
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer:
	. editor trans utils
Message-ID: <201011121401.oACE1KWT013355@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Fri Nov 12 14:01:20 2010
New Revision: 21345
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21345&sc=1

Log:
Changed jar structure for debug.stratego.transformer

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/stratego-transformer.str
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/org.strjdbg.transformer.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/utils/   (props changed)

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml	Thu Nov 11 16:33:04 2010	(r21344)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml	Fri Nov 12 14:01:20 2010	(r21345)
@@ -6,8 +6,9 @@
 	<property name="sdfmodule" value="Test" />
 	<property name="metasdfmodule" value="Stratego-Test" />
 	<property name="esvmodule" value="Test" />
-	<property name="strmodule" value="org.strjdbg.transformer" />
-
+	<!--<property name="strmodule" value="org.strjdbg.transformer" />-->
+	<property name="strmodule" value="stratego-transformer" />
+	
 	<!-- Project directories -->
 	<property name="trans" location="trans" />
 	<property name="src-gen" location="editor/java" />
@@ -19,9 +20,13 @@
 
 	<!-- we want a custom package name for the jars, otherwise it will clash with other stratego jars -->
 	<!-- build java library name -->
+	<!--
 	<property name="build.stratego.library.name" value="org.strjdbg.transformer"/>
 	<property name="build.stratego.library.location" value="org/strjdbg/transformer"/>
-		
+	-->
+	<property name="build.stratego.library.name" value="org.strategoxt.imp.debug.stratego.transformer.trans"/>
+	<property name="build.stratego.library.location" value="org/strategoxt/imp/debug/stratego/transformer/trans"/>
+
 	<!-- Imports -->
 	<property name="build.sdf.imports" value="" />
 	<property name="build.stratego.args" value="

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Builders.esv	Thu Nov 11 16:33:04 2010	(r21344)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test-Builders.esv	Fri Nov 12 14:01:20 2010	(r21345)
@@ -12,12 +12,13 @@
 builders
                                                                                                                                
   //provider                  : include/test.ctree     // c-based                                                                          
-  provider: include/org.strjdbg.transformer.jar // java-based
+  //provider: include/org.strjdbg.transformer.jar // java-based // oldname
+  provider : include/stratego-transformer.jar
                                           
 // we do not need an editor, as we only transform stratego files                                                                                                                               
 //  observer                  : editor-analyze                                                                                   
                                                                                                                                
 //  builder                   : "Generate Java code (for selection)"   = generate-java (openeditor) (realtime)                   
   builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
-  builder                   : "Transform stratego" = generate-str (openeditor) (realtime)                                                                                                                 
+  builder                   : "Transform to Debug Stratego" = generate-str (openeditor) (realtime)                                                                                                                 
   // on save: generate-java                                                                                                    
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/stratego-transformer.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/stratego-transformer.str	Fri Nov 12 14:01:20 2010	(r21345)
@@ -0,0 +1,24 @@
+module stratego-transformer
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  lib/editor-common.generated
+  trans-str
+
+rules // Main editor interface (defined by editor/Test-Builders and -References.esv)
+ 
+
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+
+      
+strategies
+	main = io-wrap(id)
\ No newline at end of file

From rtlindeman at gmail.com  Fri Nov 12 15:04:55 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Fri, 12 Nov 2010 14:04:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21346 - in
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer:
	. editor/java/test
Message-ID: <201011121404.oACE4tfh013436@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Fri Nov 12 14:04:54 2010
New Revision: 21346
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21346&sc=1

Log:
added ignore on bin and cache, deleted test-package (will be moved to o.s.i.debug.stratego.transformer)

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/test/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/   (props changed)

From rtlindeman at gmail.com  Fri Nov 12 15:18:16 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Fri, 12 Nov 2010 14:18:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21347 - in
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org:
	strategoxt strategoxt/imp strategoxt/imp/debug
	strategoxt/imp/debug/stratego st...
Message-ID: <201011121418.oACEIGiX013616@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Fri Nov 12 14:18:16 2010
New Revision: 21347
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21347&sc=1

Log:
changed dir structure for jar

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strjdbg/

From rtlindeman at gmail.com  Fri Nov 12 15:41:52 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Fri, 12 Nov 2010 14:41:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21348 - in
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer:
	. editor editor/java/org/strategoxt/imp/debug/stratego/transformer
Message-ID: <201011121441.oACEfq1j013963@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Fri Nov 12 14:41:52 2010
New Revision: 21348
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21348&sc=1

Log:
fixed dir structure

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestValidator.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test.main.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.xml	Fri Nov 12 14:18:16 2010	(r21347)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.xml	Fri Nov 12 14:41:52 2010	(r21348)
@@ -7,8 +7,8 @@
         <target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  java.jar,sdf2imp,refresh"/>
     
         <!-- Initialization -->
-        <available file="${build}/test/strategies/Main.class" property="java.jar.enabled"/>
-        <condition property="java.jar.import" value="-la test.strategies" else="">
+        <available file="${build}/org/strategoxt/imp/debug/stratego/transformer/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la org.strategoxt.imp.debug.stratego.transformer.strategies" else="">
             <isset property="java.jar.enabled"/>
         </condition>
         <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test.main.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test.main.esv	Fri Nov 12 14:18:16 2010	(r21347)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/Test.main.esv	Fri Nov 12 14:41:52 2010	(r21348)
@@ -5,7 +5,7 @@
 language General properties
                   
   name          : Test
-  id            : test
+  id            : org.strategoxt.imp.debug.stratego.transformer
   extends       : Root
                   
   description   : "Spoofax/IMP-generated editor for the Test language"

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/Activator.java	Fri Nov 12 14:41:52 2010	(r21348)
@@ -0,0 +1,44 @@
+package org.strategoxt.imp.debug.stratego.transformer;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "Test";
+
+  public static final String kLanguageName = "Test";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseController.java	Fri Nov 12 14:41:52 2010	(r21348)
@@ -0,0 +1,4 @@
+package org.strategoxt.imp.debug.stratego.transformer;
+
+public class TestParseController extends TestParseControllerGenerated 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseControllerGenerated.java	Fri Nov 12 14:41:52 2010	(r21348)
@@ -0,0 +1,89 @@
+package org.strategoxt.imp.debug.stratego.transformer;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class TestParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("Test");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = TestParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = TestParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(TestParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return TestParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestValidator.java	Fri Nov 12 14:41:52 2010	(r21348)
@@ -0,0 +1,12 @@
+package org.strategoxt.imp.debug.stratego.transformer;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class TestValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return TestParseController.getDescriptor();
+  }
+}
\ No newline at end of file

From rtlindeman at gmail.com  Fri Nov 12 16:32:08 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Fri, 12 Nov 2010 15:32:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21349 - in
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime:
	. editor editor/java/strjdbgruntimelib trans utils
Message-ID: <201011121532.oACFW8EU014855@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Fri Nov 12 15:32:07 2010
New Revision: 21349
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21349&sc=1

Log:
prepare jar package structure change

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/stratego-debug-runtime.str
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/strjdbgruntimelib/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/utils/   (props changed)

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml	Fri Nov 12 14:41:52 2010	(r21348)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml	Fri Nov 12 15:32:07 2010	(r21349)
@@ -6,7 +6,7 @@
 	<property name="sdfmodule" value="Strj-dbg-runtime-lib" />
 	<property name="metasdfmodule" value="Stratego-Strj-dbg-runtime-lib" />
 	<property name="esvmodule" value="Strj-dbg-runtime-lib" />
-	<property name="strmodule" value="strj_dbg_runtime_lib" />
+	<property name="strmodule" value="stratego-debug-runtime" />
 
 	<!-- Project directories -->
 	<property name="trans" location="trans" />
@@ -19,13 +19,13 @@
 
 	<!-- we want a custom package name for the jars, otherwise it will clash with other stratego jars -->
 	<!-- build java library name -->
-	<property name="build.stratego.library.name" value="org.strategoxt.libstrategodebuglib"/>
-	<property name="build.stratego.library.location" value="org/strategoxt/libstrategodebuglib"/>
+	<property name="build.stratego.library.name" value="org.strategoxt.imp.debug.stratego.runtime.trans"/>
+	<property name="build.stratego.library.location" value="org/strategoxt/imp/debug/stratego/runtime/trans"/>
 	
 	<!-- the name of the package that contains the external defined strategies (implemented in java) -->
 	<property name="build.stratego.external.name" value="strjdbgruntimelib"/>
-	<property name="build.stratego.external.strategies.name" value="strjdbgruntimelib.strategies"/>
-	<property name="build.stratego.external.strategies.location" value="strjdbgruntimelib/strategies"/>
+	<property name="build.stratego.external.strategies.name" value="org.strategoxt.imp.debug.stratego.runtime.strategies"/> <!-- name of the library -->
+	<property name="build.stratego.external.strategies.location" value="org/strategoxt/imp/debug/stratego/runtime/strategies"/>
 	
 	<!-- build external strategies defined in java -->
 	<!-- <available file="${build}/strjdebugruntime/strategies/Main.class" property="java.jar.enabled"/> -->

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib.main.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib.main.esv	Fri Nov 12 14:41:52 2010	(r21348)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/Strj-dbg-runtime-lib.main.esv	Fri Nov 12 15:32:07 2010	(r21349)
@@ -6,7 +6,7 @@
 language General properties
                   
   name          : Strj-dbg-runtime-lib
-  id            : strjdbgruntimelib
+  id            : org.strategoxt.imp.debug.stratego.runtime
   extends       : Root
                   
   description   : "Spoofax/IMP-generated editor for the Strj-dbg-runtime-lib language"

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/stratego-debug-runtime.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/stratego-debug-runtime.str	Fri Nov 12 15:32:07 2010	(r21349)
@@ -0,0 +1,7 @@
+module stratego-debug-runtime
+
+imports
+	strategodebuglib
+	
+	
+	
\ No newline at end of file

From rtlindeman at gmail.com  Fri Nov 12 16:50:06 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Fri, 12 Nov 2010 15:50:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21350 - in
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime:
	. editor
Message-ID: <201011121550.oACFo6C1015061@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Fri Nov 12 15:50:06 2010
New Revision: 21350
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21350&sc=1

Log:
added ignores

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/   (props changed)

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml	Fri Nov 12 15:32:07 2010	(r21349)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml	Fri Nov 12 15:50:06 2010	(r21350)
@@ -23,7 +23,7 @@
 	<property name="build.stratego.library.location" value="org/strategoxt/imp/debug/stratego/runtime/trans"/>
 	
 	<!-- the name of the package that contains the external defined strategies (implemented in java) -->
-	<property name="build.stratego.external.name" value="strjdbgruntimelib"/>
+	<property name="build.stratego.external.name" value="org/strategoxt/imp/debug/stratego/runtime/strategies"/> <!-- class file location -->
 	<property name="build.stratego.external.strategies.name" value="org.strategoxt.imp.debug.stratego.runtime.strategies"/> <!-- name of the library -->
 	<property name="build.stratego.external.strategies.location" value="org/strategoxt/imp/debug/stratego/runtime/strategies"/>
 	

From rtlindeman at gmail.com  Fri Nov 12 16:56:35 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Fri, 12 Nov 2010 15:56:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21351 - in
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt:
	imp imp/debug imp/debug/stratego imp/debug/stratego/runtime
	imp/debug/st...
Message-ID: <201011121556.oACFuZ49015121@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Fri Nov 12 15:56:35 2010
New Revision: 21351
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21351&sc=1

Log:
changed package structure

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_enter_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_exit_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_enter_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_exit_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_step_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_var_0_5.java
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/libstrategodebuglib/

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/InteropRegisterer.java	Fri Nov 12 15:56:35 2010	(r21351)
@@ -0,0 +1,21 @@
+package org.strategoxt.imp.debug.stratego.runtime.strategies;
+
+import org.strategoxt.lang.JavaInteropRegisterer;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Helper class for {@link java_strategy_0_0}.
+ */
+public class InteropRegisterer extends JavaInteropRegisterer {
+
+	public InteropRegisterer() {
+		super(new Strategy[] { 
+				java_s_enter_0_4.instance // strategy enter
+				, java_s_exit_0_4.instance // strategy exit
+				, java_r_enter_0_4.instance // rule enter
+				, java_r_exit_0_4.instance // rule exit
+				, java_s_step_0_4.instance // step
+				, java_s_var_0_5.instance // var assignment
+				});
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/Main.java	Fri Nov 12 15:56:35 2010	(r21351)
@@ -0,0 +1,11 @@
+package org.strategoxt.imp.debug.stratego.runtime.strategies;
+
+import org.strategoxt.lang.Context;
+
+public class Main {
+
+	public static void init(Context context) {
+		// Called when the editor is being initialized
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_enter_0_4.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_enter_0_4.java	Fri Nov 12 15:56:35 2010	(r21351)
@@ -0,0 +1,21 @@
+package org.strategoxt.imp.debug.stratego.runtime.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Called right after the rule matches the current term.
+ * 
+ * @author rlindeman
+ * 
+ */
+public class java_r_enter_0_4 extends Strategy {
+	public static java_r_enter_0_4 instance = new java_r_enter_0_4();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename, IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
+		//context.getIOAgent().printError("Input for java_r_enter_0_4: " + current);
+		return current;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_exit_0_4.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_exit_0_4.java	Fri Nov 12 15:56:35 2010	(r21351)
@@ -0,0 +1,21 @@
+package org.strategoxt.imp.debug.stratego.runtime.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Called right before the rule returns a new term.
+ * 
+ * @author rlindeman
+ * 
+ */
+public class java_r_exit_0_4 extends Strategy {
+	public static java_r_exit_0_4 instance = new java_r_exit_0_4();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
+		//context.getIOAgent().printError("Input for java_r_exit_0_4: " + current);
+		return current;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_enter_0_4.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_enter_0_4.java	Fri Nov 12 15:56:35 2010	(r21351)
@@ -0,0 +1,21 @@
+package org.strategoxt.imp.debug.stratego.runtime.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Called when a strategy is entered.
+ * 
+ * @author rlindeman
+ * 
+ */
+public class java_s_enter_0_4 extends Strategy {
+	public static java_s_enter_0_4 instance = new java_s_enter_0_4();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
+		//context.getIOAgent().printError("Input for java_s_enter_0_4: " + current);
+		return current;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_exit_0_4.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_exit_0_4.java	Fri Nov 12 15:56:35 2010	(r21351)
@@ -0,0 +1,21 @@
+package org.strategoxt.imp.debug.stratego.runtime.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Called right before the strategy exits
+ * 
+ * @author rlindeman
+ * 
+ */
+public class java_s_exit_0_4 extends Strategy {
+	public static java_s_exit_0_4 instance = new java_s_exit_0_4();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
+		//context.getIOAgent().printError("Input for java_s_exit_0_4: " + current);
+		return current;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_step_0_4.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_step_0_4.java	Fri Nov 12 15:56:35 2010	(r21351)
@@ -0,0 +1,28 @@
+package org.strategoxt.imp.debug.stratego.runtime.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * 
+ * a step event is fired before each strategy.
+ * e.g.
+ * foo;bar; baz
+ * becomes
+ * (s-step; foo); (s-step; bar); (s-step; baz)
+ * 
+ * @author rlindeman
+ *
+ */
+public class java_s_step_0_4 extends Strategy {
+	
+	public static java_s_step_0_4 instance = new java_s_step_0_4();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
+		//context.getIOAgent().printError("Input for java_s_exit_0_4: " + current);
+		return current;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_var_0_5.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_var_0_5.java	Fri Nov 12 15:56:35 2010	(r21351)
@@ -0,0 +1,17 @@
+package org.strategoxt.imp.debug.stratego.runtime.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class java_s_var_0_5 extends Strategy {
+
+	
+	public static java_s_var_0_5 instance = new java_s_var_0_5();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm varname, IStrategoTerm location, IStrategoTerm given) {
+		//context.getIOAgent().printError("Input for java_s_exit_0_4: " + current);
+		return current;
+	}
+}

From rtlindeman at gmail.com  Fri Nov 12 17:03:17 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Fri, 12 Nov 2010 16:03:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21352 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.stratego.runtime
	org.strategoxt.imp.debug.stratego.runtime/META-INF
	org.strategoxt.imp.debug.stratego.runtime/editor...
Message-ID: <201011121603.oACG3H1Y015486@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Fri Nov 12 16:03:17 2010
New Revision: 21352
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21352&sc=1

Log:
fixed package structure for debug.stratego.runtime and debug.stratego.transformer. Both are spoofax projects

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibValidator.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/   (props changed)

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Fri Nov 12 15:56:35 2010	(r21351)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Fri Nov 12 16:03:17 2010	(r21352)
@@ -3,7 +3,7 @@
 Bundle-Name: Strjdbgruntimelib Plug-in
 Bundle-SymbolicName: strjdbgruntimelib; singleton:=true
 Bundle-Version: 1.0.0
-Bundle-Activator: strjdbgruntimelib.Activator
+Bundle-Activator: org.strategoxt.imp.debug.stratego.runtime.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
 Require-Bundle: org.eclipse.core.runtime,
   org.eclipse.core.resources,
@@ -19,4 +19,4 @@
   org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
-Export-Package: strjdbgruntimelib
+Export-Package: org.strategoxt.imp.debug.stratego.runtime

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.xml	Fri Nov 12 15:56:35 2010	(r21351)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.xml	Fri Nov 12 16:03:17 2010	(r21352)
@@ -7,8 +7,8 @@
         <target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  java.jar,sdf2imp,refresh"/>
     
         <!-- Initialization -->
-        <available file="${build}/strjdbgruntimelib/strategies/Main.class" property="java.jar.enabled"/>
-        <condition property="java.jar.import" value="-la strjdbgruntimelib.strategies" else="">
+        <available file="${build}/org/strategoxt/imp/debug/stratego/runtime/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la org.strategoxt.imp.debug.stratego.runtime.strategies" else="">
             <isset property="java.jar.enabled"/>
         </condition>
         <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/Activator.java	Fri Nov 12 16:03:17 2010	(r21352)
@@ -0,0 +1,44 @@
+package org.strategoxt.imp.debug.stratego.runtime;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "Strjdbgruntimelib";
+
+  public static final String kLanguageName = "Strjdbgruntimelib";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseController.java	Fri Nov 12 16:03:17 2010	(r21352)
@@ -0,0 +1,4 @@
+package org.strategoxt.imp.debug.stratego.runtime;
+
+public class StrjdbgruntimelibParseController extends StrjdbgruntimelibParseControllerGenerated 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseControllerGenerated.java	Fri Nov 12 16:03:17 2010	(r21352)
@@ -0,0 +1,89 @@
+package org.strategoxt.imp.debug.stratego.runtime;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class StrjdbgruntimelibParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("Strj-dbg-runtime-lib");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = StrjdbgruntimelibParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = StrjdbgruntimelibParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(StrjdbgruntimelibParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return StrjdbgruntimelibParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibValidator.java	Fri Nov 12 16:03:17 2010	(r21352)
@@ -0,0 +1,12 @@
+package org.strategoxt.imp.debug.stratego.runtime;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class StrjdbgruntimelibValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return StrjdbgruntimelibParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Fri Nov 12 15:56:35 2010	(r21351)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Fri Nov 12 16:03:17 2010	(r21352)
@@ -3,7 +3,7 @@
 Bundle-Name: Test Plug-in
 Bundle-SymbolicName: strj_dbg_transformer;singleton:=true
 Bundle-Version: 1.0.0
-Bundle-Activator: test.Activator
+Bundle-Activator: org.strategoxt.imp.debug.stratego.transformer.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
 Require-Bundle: org.eclipse.core.runtime,
  org.eclipse.core.resources,

From rtlindeman at gmail.com  Fri Nov 12 17:20:42 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Fri, 12 Nov 2010 16:20:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21353 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.core
	org.strategoxt.imp.debug.core/META-INF
	org.strategoxt.imp.debug.core/lib
	org.strategoxt.imp.debug.stratego.core...
Message-ID: <201011121620.oACGKgPO015706@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Fri Nov 12 16:20:42 2010
New Revision: 21353
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21353&sc=1

Log:
changed build path to match previous package restructuring

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar   (contents, props changed)
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/jar-export.jardesc
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath	Fri Nov 12 16:03:17 2010	(r21352)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath	Fri Nov 12 16:20:42 2010	(r21353)
@@ -1,11 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry exported="true" kind="lib" path="lib/eclipse-ecj.jar"/>
-	<classpathentry exported="true" kind="lib" path="lib/org.strjdbg.transformer.jar"/>
-	<classpathentry kind="lib" path="lib/strategoxt.jar"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="lib" path="lib/strj-dbg-core.jar" sourcepath="/strj-dbg-core"/>
+	<classpathentry kind="lib" path="lib/stratego-debug-core.jar"/>
+	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.transformer/utils/strategoxt.jar"/>
+	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.transformer/include/stratego-transformer.jar"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.USER_LIBRARY/compiler-tools"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Fri Nov 12 16:03:17 2010	(r21352)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Fri Nov 12 16:20:42 2010	(r21353)
@@ -1,7 +1,7 @@
 Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
 Bundle-Name: stratego debugger core
-Bundle-SymbolicName: org.strjdbg.eclipse.core;singleton:=true
+Bundle-SymbolicName: org.strategoxt.imp.debug.core;singleton:=true
 Bundle-Version: 0.1.0.0
 Bundle-Activator: org.strjdbg.eclipse.core.Activator
 Require-Bundle: org.eclipse.core.runtime,
@@ -17,3 +17,4 @@
  lib/strategoxt.jar,
  lib/org.strjdbg.transformer.jar,
  lib/eclipse-ecj.jar
+Bundle-Vendor: Spoofax.org

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar
==============================================================================
Binary file. No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath	Fri Nov 12 16:03:17 2010	(r21352)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath	Fri Nov 12 16:20:42 2010	(r21353)
@@ -2,9 +2,8 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
-	<classpathentry kind="lib" path="lib/org.strjdbg.transformer.jar"/>
-	<classpathentry kind="lib" path="lib/strategoxt.jar"/>
-	<classpathentry kind="lib" path="lib/eclipse-ecj.jar"/>
-	<classpathentry kind="lib" path="lib/tools.jar"/>
+	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.transformer/utils/strategoxt.jar"/>
+	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.transformer/include/stratego-transformer.jar"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.USER_LIBRARY/compiler-tools"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/jar-export.jardesc
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/jar-export.jardesc	Fri Nov 12 16:03:17 2010	(r21352)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/jar-export.jardesc	Fri Nov 12 16:20:42 2010	(r21353)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8" standalone="no"?>
 <jardesc>
-    <jar path="org.strjdbg.eclipse.core/lib/strj-dbg-core.jar"/>
-    <options buildIfNeeded="true" compress="true" descriptionLocation="/strj-dbg-core/jar-export.jardesc" exportErrors="true" exportWarnings="true" includeDirectoryEntries="false" overwrite="false" saveDescription="true" storeRefactorings="false" useSourceFolders="false"/>
+    <jar path="org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar"/>
+    <options buildIfNeeded="true" compress="true" descriptionLocation="/org.strategoxt.imp.debug.stratego.core/jar-export.jardesc" exportErrors="true" exportWarnings="true" includeDirectoryEntries="false" overwrite="false" saveDescription="true" storeRefactorings="false" useSourceFolders="false"/>
     <storedRefactorings deprecationInfo="true" structuralOnly="false"/>
     <selectedProjects/>
     <manifest generateManifest="true" manifestLocation="" manifestVersion="1.0" reuseManifest="false" saveManifest="false" usesManifest="true">
@@ -11,9 +11,13 @@
         </sealing>
     </manifest>
     <selectedElements exportClassFiles="true" exportJavaFiles="true" exportOutputFolder="false">
-        <javaElement handleIdentifier="=strj-dbg-core/src"/>
-        <file path="/strj-dbg-core/.project"/>
-        <file path="/strj-dbg-core/.classpath"/>
-        <folder path="/strj-dbg-core/lib"/>
+        <file path="/org.strategoxt.imp.debug.stratego.core/writer.txt"/>
+        <folder path="/org.strategoxt.imp.debug.stratego.core/doc"/>
+        <file path="/org.strategoxt.imp.debug.stratego.core/jar-export.jardesc"/>
+        <file path="/org.strategoxt.imp.debug.stratego.core/.classpath"/>
+        <javaElement handleIdentifier="=org.strategoxt.imp.debug.stratego.core/src"/>
+        <file path="/org.strategoxt.imp.debug.stratego.core/thread-main.txt"/>
+        <folder path="/org.strategoxt.imp.debug.stratego.core/lib"/>
+        <file path="/org.strategoxt.imp.debug.stratego.core/.project"/>
     </selectedElements>
 </jardesc>

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Fri Nov 12 16:03:17 2010	(r21352)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Fri Nov 12 16:20:42 2010	(r21353)
@@ -190,7 +190,8 @@
 		System.out.println(outputFilename);
 		
 		//the package org.strjdbg.transformer transform a stratego program to a stratego program with debug information
-		Context context = org.strjdbg.transformer.Main.init();
+		Context context = org.strategoxt.imp.debug.stratego.transformer.trans.Main.init();
+		//Context context = org.strjdbg.transformer.Main.init();
 		// see trans-str.str#apply-debug-trans
 		// (sourceBasedir, inputfilePath, outputfilename)
 		// inputfilePath is relative to sourceBasedir.
@@ -205,7 +206,7 @@
 		IStrategoTerm input = new BasicStrategoTuple(kids);
 		IStrategoTerm term; 
 		
-		term = org.strjdbg.transformer.apply_debug_trans_0_0.instance.invoke(context, input);
+		term = org.strategoxt.imp.debug.stratego.transformer.trans.apply_debug_trans_0_0.instance.invoke(context, input);
 		//System.out.println(term);
 		String status = null; // will be SUCCES or FAIL
 		String result = null; // should be the same as outputFilename
@@ -253,11 +254,11 @@
 	protected static void generateLookupTable(String strategoDebugFileName)
 	{
 		//the package org.strjdbg.transformer transform a stratego program to a stratego program with debug information
-		Context context = org.strjdbg.transformer.Main.init();
+		Context context = org.strategoxt.imp.debug.stratego.transformer.trans.Main.init();
 		
 		IStrategoTerm input = new BasicStrategoString(strategoDebugFileName);
 		
-		org.strjdbg.transformer.create_table_0_0.instance.invoke(context, input);
+		org.strategoxt.imp.debug.stratego.transformer.trans.create_table_0_0.instance.invoke(context, input);
 	}
 	
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.classpath	Fri Nov 12 16:03:17 2010	(r21352)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/.classpath	Fri Nov 12 16:20:42 2010	(r21353)
@@ -3,7 +3,6 @@
 	<classpathentry kind="src" path="src/java"/>
 	<classpathentry kind="src" path="test/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
-	<classpathentry kind="lib" path="lib/strategoxt.jar"/>
 	<classpathentry kind="lib" path="/usr/lib/jvm/jdk1.5.0_22/lib/tools.jar">
 		<attributes>
 			<attribute name="javadoc_location" value="http://download.oracle.com/javase/1.5.0/docs/guide/jpda/jdi/"/>
@@ -11,6 +10,7 @@
 	</classpathentry>
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.strategoxt.imp.debug.stratego.core"/>
-	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.core/lib/org.strjdbg.transformer.jar"/>
+	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.transformer/utils/strategoxt.jar"/>
+	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.transformer/include/stratego-transformer.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF	Fri Nov 12 16:03:17 2010	(r21352)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF	Fri Nov 12 16:20:42 2010	(r21353)
@@ -1,16 +1,16 @@
 Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
 Bundle-Name: stratego debugger ui
-Bundle-SymbolicName: org.strjdbg.eclipse.ui;singleton:=true
+Bundle-SymbolicName: org.strategoxt.imp.debug.ui;singleton:=true
 Bundle-Version: 0.1.0.0
 Bundle-Activator: org.strjdbg.eclipse.ui.Activator
 Require-Bundle: org.eclipse.ui,
  org.eclipse.core.runtime,
  org.eclipse.debug.ui,
- org.strjdbg.eclipse.core;bundle-version="0.1.0",
  org.eclipse.ui.ide,
  org.eclipse.ui.workbench.texteditor;bundle-version="3.5.1",
- org.eclipse.imp.runtime
+ org.eclipse.imp.runtime,
+ org.strategoxt.imp.debug.core;bundle-version="0.1.0"
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Import-Package: org.eclipse.jface.text

From rtlindeman at gmail.com  Tue Nov 16 17:37:47 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Tue, 16 Nov 2010 16:37:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21354 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.core
	org.strategoxt.imp.debug.core/META-INF
	org.strategoxt.imp.debug.core/lib
	org.strategoxt.imp.debug.stratego.test...
Message-ID: <201011161637.oAGGblKJ005091@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Tue Nov 16 16:37:47 2010
New Revision: 21354
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21354&sc=1

Log:
* changed eclipse plugin build dependencies
 * fixed emit local variable to debugger for Rule when local variables are used as rule argument or when they are used in the left-hand side of the rule
  * TODO: implement this for Strategies...

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-transformer.jar   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/lib/strategodebuglib.rtree   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/localvar.tes
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example1.tes
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example2.tes
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example3.tes
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var-arg.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/thread-main.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/working/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath	Fri Nov 12 16:20:42 2010	(r21353)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath	Tue Nov 16 16:37:47 2010	(r21354)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
+	<classpathentry exported="true" kind="lib" path="lib/stratego-transformer.jar"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="src" path="src"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Fri Nov 12 16:20:42 2010	(r21353)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Tue Nov 16 16:37:47 2010	(r21354)
@@ -7,14 +7,14 @@
 Require-Bundle: org.eclipse.core.runtime,
  org.eclipse.debug.core,
  org.eclipse.jdt.debug;bundle-version="3.5.0",
- org.eclipse.jdt.launching;bundle-version="3.5.1"
+ org.eclipse.jdt.launching;bundle-version="3.5.1",
+ org.strategoxt.strj,
+ org.eclipse.jdt.core;bundle-version="3.5.2"
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.strjdbg.eclipse.core.str.launching,
  org.strjdbg.eclipse.core.str.model
-Bundle-ClassPath: lib/strj-dbg-core.jar,
- .,
- lib/strategoxt.jar,
- lib/org.strjdbg.transformer.jar,
- lib/eclipse-ecj.jar
+Bundle-ClassPath: .,
+ lib/stratego-debug-core.jar,
+ lib/stratego-transformer.jar
 Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/build.properties
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/build.properties	Fri Nov 12 16:20:42 2010	(r21353)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/build.properties	Tue Nov 16 16:37:47 2010	(r21354)
@@ -3,16 +3,6 @@
 bin.includes = META-INF/,\
                .,\
                plugin.xml,\
-               lib/strj-dbg-core.jar,\
-               lib/strategoxt.jar,\
-               lib/org.strjdbg.transformer.jar,\
-               lib/eclipse-ecj.jar
-jars.compile.order = .,\
-                     lib/strj-dbg-core.jar,\
-                     lib/strategoxt.jar,\
-                     lib/org.strjdbg.transformer.jar,\
-                     lib/eclipse-ecj.jar
-source.lib/strj-dbg-core.jar = 
-source.lib/strategoxt.jar = 
-source.lib/org.strjdbg.transformer.jar = 
-source.lib/eclipse-ecj.jar = 
+               lib/stratego-debug-core.jar,\
+               lib/stratego-transformer.jar
+jars.compile.order = .

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar
==============================================================================
Binary file (source and/or target). No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-transformer.jar
==============================================================================
Binary file. No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/lib/strategodebuglib.rtree
==============================================================================
Binary file. No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java	Fri Nov 12 16:20:42 2010	(r21353)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java	Tue Nov 16 16:37:47 2010	(r21354)
@@ -1,5 +1,6 @@
 package org.strategoxt.debug.core;
 
+import java.io.File;
 import java.io.IOException;
 
 import org.StrategoFileManager;
@@ -7,14 +8,25 @@
 
 public class DebugCompilerTest {
 
-	public static final String WORKING_DIR = StrategoFileManager.BASE + "/working";
+	public static final String WORKING_DIR = "working";
+	
+	public static String getAbsoluteWorkingDirPath()
+	{
+		File f = new File(WORKING_DIR);
+		return f.getAbsolutePath();
+	}
 	
 	public static void main(String[] args) {
+		testDebugCompile();
+		
+	}
+	
+	public static void testDebugCompile() {
 		//String inputBase = StrategoFileManager.BASE;
 		String inputFilePath = "src/stratego/localvar/localvar.str";
 		//String strategoFilePath = inputBase + "/" + inputFilename;
 		String projectName = "localvar";
-		DebugCompiler debugCompiler = new DebugCompiler(WORKING_DIR);
+		DebugCompiler debugCompiler = new DebugCompiler(getAbsoluteWorkingDirPath());
 		// mkdir localvar/stratego in workingdir
 		// mkdir localvar/java
 		// mkdir localvar/class

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/thread-main.txt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/thread-main.txt	Fri Nov 12 16:20:42 2010	(r21353)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/thread-main.txt	Tue Nov 16 16:37:47 2010	(r21354)
@@ -3,55 +3,43 @@
 invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
-invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
-invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
-invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
-invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
-invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
-invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
-invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
-invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
@@ -61,10 +49,6 @@
 invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
-invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/localvar.tes
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/localvar.tes	Tue Nov 16 16:37:47 2010	(r21354)
@@ -0,0 +1,98 @@
+module localvar
+// use local vars in rules and strategies to store temp result
+
+imports
+  libstrategolib
+
+
+signature
+  sorts
+    Prop
+
+  constructors
+  	
+  	Var		: String -> Expression
+  	Number	: Int -> Expression
+  	Add		: Expression * Expression -> Expression
+  	Sub		: Expression * Expression -> Expression
+  	
+  	Print	: Expression -> Statement
+  	Assign	: String * Expression -> Statement
+  	
+  	Function : String * List(Statement) -> Definition
+  	
+  	Comment : String * String -> Definition
+  	
+  	Program : String * List(Definition) -> Program
+  	
+
+    
+strategies
+  main =
+    io-wrap(execute)
+    
+rules
+  // show Comment and Function that have the same name
+	
+  execute:
+  	input -> output
+  	with
+  	  output := <match-comments> input
+
+rules
+	match-comments :
+		// match program
+		Program(_, definitions*) -> out
+		with
+			f* := <find-functions> definitions* // find functions
+			; c* := <find-comments> definitions* // find comments
+			; out := <match-f-and-c> (f*, c*)
+
+		
+	find-functions:
+		definition* -> functions*
+		with
+			functions* := <filter(?Function(_,_))> definition*
+			
+	find-comments:
+		definition* -> comments*
+		with
+			comments* := <filter(?Comment(_,_))> definition*
+			
+	match-f-and-c:
+		(f*, c*) -> matches*
+		with
+			//matches* := <map(find-comment-match(|c*))> f*
+			matches* := <map(try-find-comment-by-name(|c*))> f*
+		
+	try-find-comment-by-name(|c*) = find-comment-match(|c*) // <+ (debug(!"fail"); !"fail")	
+		
+	find-comment-match(|c*):
+		f -> (f, c)
+		// f should be a Function
+		where
+			name := <get-function-name> f
+			; c := <find-comment-by-name(|name)> c*
+			  
+	get-function-name:
+		Function(name, _) -> name
+			
+	find-comment-by-name(|name):
+		c* -> comment
+		with 
+		c-filtered* := <filter(?Comment(name, _))> c*
+		; comment := (<debug(!"stuff:"); first> c-filtered*) //  <+ !Comment(name, "created!!")
+		//; comment := <first> c-filtered*
+
+
+	old-first : c-list* -> out
+	where out := <last> c-list* <+ build-c
+	
+	is-empty = ?[] 
+	
+	
+	first = 
+		debug(!"first: ") ;
+		(is-empty < build-c + last)
+		
+	build-c = !Comment("new", "created!!")
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example1.tes
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example1.tes	Tue Nov 16 16:37:47 2010	(r21354)
@@ -0,0 +1,29 @@
+module localvar
+
+signature
+  sorts
+    Prop
+
+  constructors
+    False : Prop
+
+
+strategies
+
+// ===========
+// test strategies
+
+  do =
+    foo := get
+    
+  do1 = where(bar := get); debug  
+
+  do2(s) = where(bar := get); debug
+
+  do3(s|t) = where(bar := get; foo := get); baz := get
+  
+  do4(s|t) = where(bar := get; foo := get); baz := get; bas := get
+
+strategies
+  get =
+    !False()
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example2.tes
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example2.tes	Tue Nov 16 16:37:47 2010	(r21354)
@@ -0,0 +1,47 @@
+module localvar
+
+signature
+  sorts
+    Prop
+
+  constructors
+    False : Prop
+    
+    
+    
+// =============  
+// test rules
+
+rules
+  foo1 : t -> t'
+  with t' := t; try(get)
+
+  foo1(s) : t -> t'
+  with t' := t
+
+  foo1(s|term) : t -> t'
+  with t' := t
+
+  foo1(s|term) : t -> t'
+  where t' := t 
+ 
+  foo1(s|term) : t -> t'
+  where t' := t; try(get)
+  where t' := t 
+
+  foo1(s|term) : t -> t'
+  with t' := t 
+  with t' := t 
+  
+  foo:
+  	t -> <q := get; start> t
+  	
+  foo:
+  	t -> <q := get; start> t
+  	where f := get; try(get) 
+
+strategies  	
+  	start = id
+  
+  get =
+    !False()
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example3.tes
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example3.tes	Tue Nov 16 16:37:47 2010	(r21354)
@@ -0,0 +1,81 @@
+module localvar
+
+signature
+
+
+  constructors
+  	
+  	Var		: String -> Expression
+  	Number	: Int -> Expression
+  	Add		: Expression * Expression -> Expression
+  	Sub		: Expression * Expression -> Expression
+  	
+  	Print	: Expression -> Statement
+  	Assign	: String * Expression -> Statement
+  	
+  	Function : String * List(Statement) -> Definition
+  	
+  	Comment : String * String -> Definition
+  	
+  	Program : String * List(Definition) -> Program
+    
+    
+strategies
+  main =
+    io-wrap(execute)
+    
+rules
+  // show Comment and Function that have the same name
+	
+  execute:
+  	input -> output
+  	with
+  	  term := <create-term>
+  	  ; output := <match-comments(|term)> input    
+    
+strategies
+	create-term = Add(Number(2),Number(7))
+    
+rules
+
+
+	match-comments-name(|term1, term2*):
+		Program(_, _) -> out
+		where
+			out := <create-term>
+
+	match-comments-debug(|term1, term2*):
+		Program(name, definitions*) -> out
+		/*
+		where(
+			<s-var(|"filename", "r-name", "term1", LocationInfo("48", "6", "48", "40"))> term1
+			; <s-var(|"filename", "r-name", "term2*", LocationInfo("48", "6", "48", "40"))> term2*
+			; s-var(|"filename", "r-name", "term2", LocationInfo("48", "6", "48", "40")) 
+		)*/
+		with 
+			f* := <find-functions> definitions* // find functions
+			; c* := <find-comments> definitions* // find comments
+			; <debug> term1
+			; <debug> term2*
+			; out := name
+			  
+	match-comments(|term):
+		// match program
+		Program(name, definitions*) -> out
+		with
+			f* := <find-functions> definitions* // find functions
+			; c* := <find-comments> definitions* // find comments
+			; <debug> term
+			; out := name
+			  
+			  
+  	find-functions:
+		definition* -> functions*
+		with
+			functions* := <filter(?Function(_,_))> definition*
+			
+	find-comments:
+		definition* -> comments*
+		with
+			comments* := <filter(?Comment(_,_))> definition*
+		
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var-arg.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var-arg.str	Tue Nov 16 16:37:47 2010	(r21354)
@@ -0,0 +1,103 @@
+module gen-debug-var-arg
+
+// creates a where clause containing s-var-calls for variables that are rule/strategy term-parameters
+// and for variables used in the match-term of a Rule
+
+imports
+  libstratego-lib
+  include/Test
+  assert
+  location-util
+  gen-debug-var
+  
+signature
+  sorts
+    BA
+  constructors
+
+	// Line is needed or eclipse editor will generate an error. But building the project will not throw an error if this line is missing..
+  	BA		: Strategy * Term -> BA 
+  	
+rules
+	
+	// current term is a Term
+	match-term-to-s-var-clause(|filename, name, a) :
+		match-term -> clause
+		//where <debug(!"match-term ")> match-term
+		where
+			// collect all Var in this term
+			vars* := <collect(?Var(_))> match-term
+			//; debug(!"collect vars ")
+			; s-vars* := <map(create-s-var-call-with-term(|filename, name, a))> vars*
+			; seq := <create-seqs> s-vars*
+			; clause := WhereClause(seq)
+	
+	// create a where clause containing s-var calls for each term that is used as argument
+	t-args-to-s-var-clause(|filename, name, a) :
+	t-args* -> clause
+	//where <debug(!"t-args-to-s-var: ")> name
+	where
+		s-vars* := <map(t-arg-to-s-var(|filename, name, a))> t-args*
+		//; debug(!"s-vars*: ")
+		// convert list to recursive Seq
+		; seq := <create-seqs> s-vars*
+		//; debug(!"seq ")
+		; clause := WhereClause(seq)
+		// create WhereClause
+			
+	// v can be a "var-name"
+	// v can be a ListVar("term2*")
+	t-arg-to-s-var(|filename, name, a):
+		DefaultVarDec(v) -> s-var-call
+		with 
+		  var := <create-var> v // create a Var(_)
+		  ; s-var-call := <create-s-var-call-with-term(|filename, name, a)> var
+		    
+	/*
+	// var should be a Var(_)
+	create-s-var-call-with-term(|filename, name, var, a) =
+		where(
+			var-name := <get-var-name> var
+		  ; s-var-call := <create-s-var-call(|filename, name, var-name, a)>
+		  );
+		  !BA(s-var-call, var) // BA is needed because we want to apply it to a specific term, not the current term!		    
+	*/
+	
+	// var should be a Var(_)
+	create-s-var-call-with-term(|filename, name, a) :
+		var -> s-var
+		where
+			var-name := <get-var-name> var
+			; s-var-call := <create-s-var-call(|filename, name, var-name, a)>
+			; s-var := BA(s-var-call, var)
+			  
+			  
+	create-var:
+		v -> Var(v)
+		
+		
+	create-seqs :
+		s* -> seq
+		where <geq> (<length> s*, 2) // length should be greater than or equal to 2  
+		//where debug(!"list size >= 2    ")
+		where
+			l-length := <length> s*
+			//; <debug(!"length: ")> l-length
+			; take-length := <subt>(l-length, 1)
+			//; debug(!"take length")
+			; sub-list := <take(|<subt>(l-length, 1))> s*
+			//; <debug(!"sublist")> sub-list
+			; s-last := <last> s*
+			//; <debug(!"s-last: ")> s-last 
+			; seq := <foldr(!s-last, create-seq)> sub-list
+
+	// list is size 1, just return the element
+	create-seqs:
+		s* -> s
+		where <eq> (<length> s*, 1)
+		//where debug(!"list size is 1    ")
+		where s := <last> s*
+	
+	
+strategies	
+	create-seq = ?(s1, s2); !Seq(s1, s2)

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str	Fri Nov 12 16:20:42 2010	(r21353)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str	Tue Nov 16 16:37:47 2010	(r21354)
@@ -9,6 +9,7 @@
   include/Test
   assert
   location-util
+  gen-debug-var-arg
   
 rules
 	
@@ -19,50 +20,97 @@
 		bottomup(try(add-var-in-r-def(|filename)))
 		; bottomup(try(add-var-in-s-def(|filename)))
 
-	// add s-var call to rules, first lookup the rule name		
+	// add s-var call to rules, first lookup the rule name	
+	// also emit the t-args as available local variables	
 	add-var-in-r-def(|filename):
 		RDefNoArgs(r-name, r){a} -> RDefNoArgs(r-name, r'){a}
-		where r' := <var-wrap-r(|filename, r-name)> r
+		where r' := <var-wrap-r(|filename, r-name, [])> r
 	add-var-in-r-def(|filename):
 		d at RDef(r-name, s-args, r){a} -> RDef(r-name, s-args, r'){a}
-		where r' := <var-wrap-r(|filename, r-name)> r
+		where r' := <var-wrap-r(|filename, r-name, [])> r
+	// t-args is a list of 'Typedid'
+	// ID ":" Type -> Typedid {cons("VarDec")}
+	// ID -> Typedid {cons("DefaultVarDec")}
+	// DefaultVarDec("term-name")
 	add-var-in-r-def(|filename):
-		d at RDefT(r-name, s-args, t-args, r){a} -> RDefT(r-name, s-args, t-args, r'){a}
-		where r' := <var-wrap-r(|filename, r-name)> r
+		d at RDefT(r-name, s-args, t-args*, r){a} -> RDefT(r-name, s-args, t-args*, r'){a}
+		//where <debug(!"rdeft ")> r-name
+		where r' := <var-wrap-r(|filename, r-name, t-args*)> r
 	
 	
 	// add s-var calls to strategies, first lookup the strategy name
 	add-var-in-s-def(|filename):
 		SDefNoArgs(s-name, s){a} -> SDefNoArgs(s-name, s'){a} // strategy with no args
-		where s' := <var-wrap-s(|filename, s-name)> s
+		where s' := <var-wrap-s(|filename, s-name, [])> s
 	add-var-in-s-def(|filename):
 		SDef(s-name, s-args, s){a} -> SDef(s-name, s-args, s'){a} // strategy with strategy-args
-		where s' := <var-wrap-s(|filename, s-name)> s
+		where s' := <var-wrap-s(|filename, s-name, [])> s
 	add-var-in-s-def(|filename):
-		SDefT(s-name,s-args, t-args, s){a} -> SDefT(s-name, s-args, t-args, s'){a} // strategy with strategy-args and term-args
-		where s' := <var-wrap-s(|filename, s-name)> s
+		SDefT(s-name,s-args, t-args*, s){a} -> SDefT(s-name, s-args, t-args*, s'){a} // strategy with strategy-args and term-args
+		where s' := <var-wrap-s(|filename, s-name, t-args*)> s
 	
 	// current term is a Strategy
 	// change every Assign to a Seq(Assign, s-var)
-	var-wrap-s(|filename, name) = bottomup(try(match-assign-build-s-var(|filename, name)))
+	var-wrap-s(|filename, name, t-args*) = bottomup(try(match-assign-build-s-var(|filename, name)))
+	
+	var-wrap-s(|filename, name) = var-wrap-s(|filename, name, [])
 	
 	// Rule has no Rule Conditions, so it does have a strategy
-	// TODO: strategy can also be used in the build term
-    var-wrap-r(|filename, r-name) :
-    	RuleNoCond(match-term, build-term){a} -> RuleNoCond(match-term, build-term'){a}
+	// strategy can also be used in the build term
+    var-wrap-r(|filename, r-name, t-args*) :
+    	RuleNoCond(match-term, build-term){a} 
+    		//-> RuleNoCond(match-term, build-term'){a}
+    		-> Rule(match-term, build-term', clauses'*){a}
     	with
     		build-term' := <var-wrap-s(|filename, r-name)> build-term
+			; clauses* := <try-s-var-for-match(|filename, r-name, a, [])> match-term
+			; clauses'* := <try-s-var-for-t-args(|filename, r-name, a, clauses*)> t-args*
 	
 	// current Rule has rule conditions, so traverse each condition
-	// TODO: strategy can also be used in the build term
+	// 1. assign strategies can also be used in the build term, so traverse it to
+	// 2. the match-term can also define local variables.
+	// For example: get-program-name : Program(name, definitions*) -> name
+	// Both name and definitions* are local variables.
+	/*
 	var-wrap-r(|filename, r-name):
-		Rule(match-term, build-term, rule-cond){a} -> Rule(match-term, build-term', rule-cond'){a}
+		Rule(match-term, build-term, rule-cond){a} -> Rule(match-term, build-term', rule-cond'*){a}
 		where
-            rule-cond' := <add-var-to-rule-cond(|filename, r-name)> rule-cond
+            rule-cond'* := <add-var-to-rule-cond(|filename, r-name)> rule-cond
+    		; build-term' := <var-wrap-s(|filename, r-name)> build-term
+	*/
+	
+	var-wrap-r(|filename, r-name, t-args*):
+		Rule(match-term, build-term, rule-cond){a}
+		-> Rule(match-term, build-term', clauses'*){a}
+		where
+			// determine local variables in rule conditions
+            rule-cond'* := <add-var-to-rule-cond(|filename, r-name)> rule-cond
+            // insert a clause containing s-var calls for the named variables in the match term
+			; clauses* := <try-s-var-for-match(|filename, r-name, a, rule-cond'*)> match-term
+            // insert a clause containing s-var calls for the t-args
+            /*
+    		; clause := <t-args-to-s-var-clause(|filename, r-name, a)> t-args*
+    		; clauses'* := <insert> (0, clause, clauses*)
+    		  */
+    		; clauses'* := <try-s-var-for-t-args(|filename, r-name, a, clauses*)> t-args*
     		; build-term' := <var-wrap-s(|filename, r-name)> build-term
 
-
-
+	// current term should be the match-term of a Rule
+	try-s-var-for-match(|filename, r-name, a, clauses*) = 
+		(match-clause := <match-term-to-s-var-clause(|filename, r-name, a)>)
+    	< // if first strategy succeeds
+    	(<insert> (0, match-clause, clauses*))
+    	+ // if first strategy fails
+    	(!clauses*) // return original clauses
+    	
+    // current term should be a list of t-args*
+    try-s-var-for-t-args(|filename, r-name, a, clauses*) =
+    	( t-args-clause := <t-args-to-s-var-clause(|filename, r-name, a)>)
+    	< // if first strategy succeeds
+    	(<insert> (0, t-args-clause, clauses*))
+    	+ // if first strategy fails
+    	(!clauses*) // return original clauses
+    	 	
 	
     // current term can be a list with WhereClause and WithClause terms
     // the r-enter call should be inserted before all these clauses at position 0
@@ -74,9 +122,10 @@
     // current term can be a Strategy
 	// traverse the strategies using var-wrap-s
 	add-var-to-rule-cond(|filename, r-name) :
-		s -> s'
+		s -> clause-list* // was s', but now both add-var-to-rule-cond rules return a list of clauses
 		where not(<is-list> s)
 		where s' := <var-wrap-s(|filename, r-name)>
+		; clause-list* := [WhereClause(s')]
 
 	// traverse the strategies in the WithClause
 	add-s-var-to-clause(|filename, r-name):
@@ -105,6 +154,9 @@
 		) ;
 		!CallT(SVar("s-var"), [], t-args*)
 
+
+
+
 	
 	// create the arguments for the s-var call	  
 	create-args-array(|filename, name, var-name, a) =
@@ -117,6 +169,8 @@
 	// return the name of the Var  
 	get-var-name:
 	  	Var(ListVar(name)) -> name
+	  	
+
 	
 	// convert the value to a string in the stratego AST format  	
 	to-string :

From rtlindeman at gmail.com  Wed Nov 17 15:19:18 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Wed, 17 Nov 2010 14:19:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21359 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.core/lib
	org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control
	org.strategoxt.imp.debug.strat...
Message-ID: <201011171419.oAHEJIkG025664@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Wed Nov 17 14:19:17 2010
New Revision: 21359
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21359&sc=1

Log:
Implemented s-var block for strategies that have term arguments

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvardebug/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvardebug/localvar.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvardebug/run.input
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvardebug/run.output
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-transformer.jar
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/StrategoFileManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/thread-main.txt
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example3.tes
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var-arg.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-transformer.jar
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Wed Nov 17 09:47:09 2010	(r21358)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Wed Nov 17 14:19:17 2010	(r21359)
@@ -212,7 +212,7 @@
 		}
 		else if (EventHandler.S_EXIT.equals(eventType))
 		{
-			//h = new StrategyExitHandler(event);
+			h = new StrategyExitHandler(event);
 			this.exitStrategoStackFrame(h);
 		}
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java	Wed Nov 17 09:47:09 2010	(r21358)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java	Wed Nov 17 14:19:17 2010	(r21359)
@@ -19,6 +19,7 @@
 import com.sun.jdi.ThreadReference;
 import com.sun.jdi.Value;
 import com.sun.jdi.event.MethodEntryEvent;
+import com.sun.jdi.event.MethodExitEvent;
 
 public abstract class EventHandler {
 	
@@ -63,16 +64,78 @@
 	public static String S_STEP = "s_step";
 	public static String S_VAR = "s_var";
 	
-	protected MethodEntryEvent event = null;
+	protected MethodEntryEvent entry_event = null;
+	protected MethodExitEvent exit_event = null;
 	
 	protected StrategoTermBuilder builder = new StrategoTermBuilder();
 	
+	public EventHandler(MethodExitEvent event)
+	{
+		this.exit_event = event;
+		this.initLocalVariables();
+	}
+	
 	public EventHandler(MethodEntryEvent event)
 	{
-		this.event = event;
+		this.entry_event = event;
 		this.initLocalVariables();
 	}
 	
+	private List<LocalVariable> getMethodArguments()
+	{
+		List<LocalVariable> args = new ArrayList<LocalVariable>();
+		if (this.entry_event != null)
+		{
+			try {
+				args = this.entry_event.method().arguments();
+			} catch (AbsentInformationException e) {
+				e.printStackTrace();
+			}
+		}
+		else if (exit_event != null)
+		{
+			try {
+				args = this.exit_event.method().arguments();
+			} catch (AbsentInformationException e) {
+				e.printStackTrace();
+			}
+		}
+		return args;
+	}
+	
+	private StackFrame stackFrame = null;
+	private StackFrame getStackFrame()
+	{
+		if (stackFrame == null)
+		{
+			if (this.entry_event != null)
+			{
+				ThreadReference thread = entry_event.thread();
+				
+				StackFrame fr = null;
+				try {
+					fr = thread.frame(0); // get current frame
+				} catch (IncompatibleThreadStateException e) {
+					e.printStackTrace(); // thread should be suspended
+				}
+				this.stackFrame = fr;
+			}
+			else if (exit_event != null)
+			{
+				ThreadReference thread = exit_event.thread();
+				
+				StackFrame fr = null;
+				try {
+					fr = thread.frame(0); // get current frame
+				} catch (IncompatibleThreadStateException e) {
+					e.printStackTrace(); // thread should be suspended
+				}
+				this.stackFrame = fr;
+			}
+		}
+		return stackFrame;
+	}
+	
 	private void initLocalVariables()
 	{
 		contextLV = null;
@@ -83,12 +146,8 @@
 		givenLV = null;
 		varnameLV = null;
 		// set arguments for easy reference	
-		List<LocalVariable> args = new ArrayList<LocalVariable>();
-		try {
-			args = this.event.method().arguments();
-		} catch (AbsentInformationException e) {
-			e.printStackTrace();
-		}
+		List<LocalVariable> args = getMethodArguments();
+
 		for(LocalVariable lv : args)
 		{
 			String lvName = lv.name();
@@ -131,14 +190,8 @@
 	 */
 	protected Value getGivenValue()
 	{
-		ThreadReference thread = event.thread();
-
-		StackFrame fr = null;
-		try {
-			fr = thread.frame(0); // get current frame
-		} catch (IncompatibleThreadStateException e) {
-			e.printStackTrace(); // thread should be suspended
-		}
+		StackFrame fr = getStackFrame();
+		
 		Value val = fr.getValue(this.givenLV);	
 		
 		return val;		
@@ -151,14 +204,8 @@
 	 */
 	protected Value getContextValue()
 	{
-		ThreadReference thread = event.thread();
-
-		StackFrame fr = null;
-		try {
-			fr = thread.frame(0); // get current frame
-		} catch (IncompatibleThreadStateException e) {
-			e.printStackTrace(); // thread should be suspended
-		}
+		StackFrame fr = getStackFrame();
+		
 		Value val = fr.getValue(this.contextLV);	
 		
 		return val;
@@ -171,14 +218,8 @@
 	 */
 	protected Value getLocationValue()
 	{
-		ThreadReference thread = event.thread();
-	
-		StackFrame fr = null;
-		try {
-			fr = thread.frame(0); // get current frame
-		} catch (IncompatibleThreadStateException e) {
-			e.printStackTrace(); // thread should be suspended
-		}
+		StackFrame fr = getStackFrame();
+		
 		Value val = fr.getValue(this.locationLV);	
 		
 		return val;
@@ -191,14 +232,8 @@
 	 */
 	protected Value getNameValue()
 	{
-		ThreadReference thread = event.thread();
-	
-		StackFrame fr = null;
-		try {
-			fr = thread.frame(0); // get current frame
-		} catch (IncompatibleThreadStateException e) {
-			e.printStackTrace(); // thread should be suspended
-		}
+		StackFrame fr = getStackFrame();
+		
 		Value nameValue = fr.getValue(this.nameLV); // StrategoString instance
 		
 		return nameValue;
@@ -211,14 +246,8 @@
 	 */
 	protected Value getFilenameValue()
 	{
-		ThreadReference thread = event.thread();
+		StackFrame fr = getStackFrame();
 		
-		StackFrame fr = null;
-		try {
-			fr = thread.frame(0); // get current frame
-		} catch (IncompatibleThreadStateException e) {
-			e.printStackTrace(); // thread should be suspended
-		}
 		Value filenameValue = fr.getValue(this.filenameLV); // StrategoString instance
 		
 		return filenameValue;
@@ -236,14 +265,7 @@
 			return null;
 		}
 		
-		ThreadReference thread = event.thread();
-		
-		StackFrame fr = null;
-		try {
-			fr = thread.frame(0); // get current frame
-		} catch (IncompatibleThreadStateException e) {
-			e.printStackTrace(); // thread should be suspended
-		}
+		StackFrame fr = getStackFrame();
 		
 		Value varnameValue = fr.getValue(this.varnameLV); // StrategoString instance
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java	Wed Nov 17 09:47:09 2010	(r21358)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java	Wed Nov 17 14:19:17 2010	(r21359)
@@ -6,9 +6,14 @@
 import org.strategoxt.debug.core.model.StrategoState;
 
 import com.sun.jdi.event.MethodEntryEvent;
+import com.sun.jdi.event.MethodExitEvent;
 
 public class StrategyExitHandler extends EventHandler {
 
+	public StrategyExitHandler(MethodExitEvent event) {
+		super(event);
+	}
+	
 	public StrategyExitHandler(MethodEntryEvent event) {
 		super(event);
 	}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvardebug/localvar.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvardebug/localvar.str	Wed Nov 17 14:19:17 2010	(r21359)
@@ -0,0 +1,103 @@
+module localvar
+// use local vars in rules and strategies to store temp result
+
+imports
+  libstrategolib
+
+
+signature
+  sorts
+    Prop
+
+  constructors
+  	
+  	Var		: String -> Expression
+  	Number	: Int -> Expression
+  	Add		: Expression * Expression -> Expression
+  	Sub		: Expression * Expression -> Expression
+  	
+  	Print	: Expression -> Statement
+  	Assign	: String * Expression -> Statement
+  	
+  	Function : String * List(Statement) -> Definition
+  	
+  	Comment : String * String -> Definition
+  	
+  	Program : String * List(Definition) -> Program
+  	
+
+    
+strategies
+  main =
+    io-wrap(execute)
+    
+rules
+  // show Comment and Function that have the same name
+	
+  execute:
+  	input -> output
+  	with
+  	  output := <match-comments> input
+
+rules
+	match-comments :
+		// match program
+		Program(_, definitions*) -> out
+		with
+			f* := <find-functions> definitions* // find functions
+			; c* := <find-comments> definitions* // find comments
+			; out := <match-f-and-c> (f*, c*)
+
+		
+	find-functions:
+		definition* -> functions*
+		with
+			functions* := <filter(?Function(_,_))> definition*
+			
+	find-comments:
+		definition* -> comments*
+		with
+			comments* := <filter(?Comment(_,_))> definition*
+			
+	match-f-and-c:
+		(f*, c*) -> matches*
+		with
+			//matches* := <map(find-comment-match(|c*))> f*
+			matches* := <map(try-find-comment-by-name(|c*))> f*
+		
+	try-find-comment-by-name(|c*) = debug(!"enter1");find-comment-match(|c*); debug(!"exit1") // <+ (debug(!"fail"); !"fail")	
+		
+	find-comment-match(|c*):
+		f -> (f, c)
+		// f should be a Function
+		where debug(!"enter2")
+		where
+			name := <get-function-name> f
+			; c := <find-comment-by-name(|name)> c*
+		where debug(!"exit2")
+			  
+	get-function-name:
+		Function(name, _) -> name
+			
+	find-comment-by-name(|name):
+		c* -> comment
+		where debug(!"enter3")
+		where 
+		c-filtered* := <filter(?Comment(name, _))> c*
+		; comment := (<debug(!"stuff:"); first> c-filtered*) //  <+ !Comment(name, "created!!")
+		//; comment := <first> c-filtered*
+		where debug(!"exit3")
+
+
+	old-first : c-list* -> out
+	where out := <last> c-list* <+ build-c
+	
+	is-empty = ?[] 
+	
+	
+	first = 
+		debug(!"first enter: ") ;
+		(is-empty < build-c + last)
+		; debug(!"first exit")
+		
+	build-c = !Comment("new", "created!!")
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvardebug/run.input
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvardebug/run.input	Wed Nov 17 14:19:17 2010	(r21359)
@@ -0,0 +1,23 @@
+Program("progname",
+[
+	Comment("fname", "laalalalalalalalalal")
+	, Comment("this", "this text")
+	, Comment("that", "that text")
+	, Function("fname",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+	, Function("nocomment",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvardebug/run.output
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvardebug/run.output	Wed Nov 17 14:19:17 2010	(r21359)
@@ -0,0 +1 @@
+[(Function("fname",[Assign("var_foo",Add(Number(2),Number(7))),Print("var_foo")]),Comment("fname","laalalalalalalalalal")),(Function("nocomment",[Assign("var_foo",Add(Number(2),Number(7))),Print("var_foo")]),Comment("new","created!!"))]

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/StrategoFileManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/StrategoFileManager.java	Wed Nov 17 09:47:09 2010	(r21358)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/StrategoFileManager.java	Wed Nov 17 14:19:17 2010	(r21359)
@@ -1,10 +1,34 @@
 package org;
 
+import java.io.File;
+
 public class StrategoFileManager {
 	
 	/**
 	 * Points to the project in the workspace containing the stratego sources.
 	 */
-	public static String BASE = "/home/rlindeman/workspace/strj-dbg-test";
+	public static final String BASE = getBase();
 
+	
+	public static final String WORKING_DIR = getAbsoluteWorkingDirPath();
+	
+	private static final String _WORKING = "working";
+	
+	//private static final String _WD = 
+	
+	public static String getAbsoluteWorkingDirPath()
+	{
+		File f = new File(_WORKING);
+		return f.getAbsolutePath();
+	}
+	
+	public static String getBase()
+	{
+		File f = new File(_WORKING);
+		String abs = f.getAbsolutePath();
+		File w = new File(abs);
+		String parent = w.getParent();
+		System.out.println("P:" + parent);
+		return parent;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java	Wed Nov 17 09:47:09 2010	(r21358)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java	Wed Nov 17 14:19:17 2010	(r21359)
@@ -1,32 +1,23 @@
 package org.strategoxt.debug.core;
 
-import java.io.File;
 import java.io.IOException;
 
 import org.StrategoFileManager;
 import org.strategoxt.debug.core.util.DebugCompiler;
 
 public class DebugCompilerTest {
-
-	public static final String WORKING_DIR = "working";
-	
-	public static String getAbsoluteWorkingDirPath()
-	{
-		File f = new File(WORKING_DIR);
-		return f.getAbsolutePath();
-	}
 	
 	public static void main(String[] args) {
-		testDebugCompile();
-		
+		//testDebugCompileLocalVar();
+		testDebugCompileLocalVarDebug();
 	}
 	
-	public static void testDebugCompile() {
+	public static void testDebugCompileLocalVar() {
 		//String inputBase = StrategoFileManager.BASE;
 		String inputFilePath = "src/stratego/localvar/localvar.str";
 		//String strategoFilePath = inputBase + "/" + inputFilename;
 		String projectName = "localvar";
-		DebugCompiler debugCompiler = new DebugCompiler(getAbsoluteWorkingDirPath());
+		DebugCompiler debugCompiler = new DebugCompiler(StrategoFileManager.WORKING_DIR);
 		// mkdir localvar/stratego in workingdir
 		// mkdir localvar/java
 		// mkdir localvar/class
@@ -55,6 +46,40 @@
 		}
 	}
 	
+	public static void testDebugCompileLocalVarDebug() {
+		//String inputBase = StrategoFileManager.BASE;
+		String inputFilePath = "src/stratego/localvardebug/localvar.str";
+		//String strategoFilePath = inputBase + "/" + inputFilename;
+		String projectName = "localvar";
+		DebugCompiler debugCompiler = new DebugCompiler(StrategoFileManager.WORKING_DIR);
+		// mkdir localvar/stratego in workingdir
+		// mkdir localvar/java
+		// mkdir localvar/class
+		String binBase = null;
+		boolean compileSucces = false;
+		try {
+			binBase = debugCompiler.debugCompile(StrategoFileManager.BASE, inputFilePath, projectName);
+			compileSucces = true;
+		} catch (IOException e) {
+			e.printStackTrace();
+		} catch (Exception e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		boolean runjava = true;
+		// run .class
+		if (runjava && compileSucces)
+		{
+			String input = StrategoFileManager.BASE + "/src/stratego/localvardebug/run.input";
+			String argsForMainClass = "-i " + input;
+			String mainClass = "localvar.localvar";
+			String mainArgs = mainClass + " " + argsForMainClass;
+			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String classpath = cp;
+			org.strategoxt.debug.core.util.Runner.run(projectName, mainArgs, classpath);
+		}
+	}
+	
 	private static String strj_dbg_core = "/home/rlindeman/workspace/strj-dbg-core";
 
 	private static String strategoxtjar = strj_dbg_core + "/lib/strategoxt.jar";

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java	Wed Nov 17 09:47:09 2010	(r21358)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java	Wed Nov 17 14:19:17 2010	(r21359)
@@ -7,7 +7,6 @@
 
 import org.StrategoFileManager;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.debug.core.DebugCompilerTest;
 import org.strategoxt.debug.core.eventspec.BreakPoint;
 import org.strategoxt.debug.core.eventspec.RuleEnterBreakPoint;
 import org.strategoxt.debug.core.eventspec.StrategyEnterBreakPoint;
@@ -18,7 +17,6 @@
 import org.strategoxt.debug.core.util.table.EventTable;
 
 public class DebugSessionManagerTest {
-
 	
 	public static void main(String[] args) {
 		runLocalVar();
@@ -38,7 +36,7 @@
 	public void testDSM1()
 	{
 		String projectName = "localvar";
-		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(DebugCompilerTest.WORKING_DIR, projectName);
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(StrategoFileManager.WORKING_DIR, projectName);
 		
 		//String binBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/class";
 		
@@ -71,7 +69,7 @@
 	public void testDSM2()
 	{
 		String projectName = "localvar";
-		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(DebugCompilerTest.WORKING_DIR, projectName);
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(StrategoFileManager.WORKING_DIR, projectName);
 		
 		//String binBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/class";
 		
@@ -107,7 +105,7 @@
 	public void testStepBreakPoint()
 	{
 		String projectName = "localvar";
-		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(DebugCompilerTest.WORKING_DIR, projectName);
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(StrategoFileManager.WORKING_DIR, projectName);
 		
 		//String binBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/class";
 		//String strategoBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/stratego";
@@ -175,7 +173,7 @@
 	public void testStepVarBreakPoint()
 	{
 		String projectName = "localvar";
-		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(DebugCompilerTest.WORKING_DIR, projectName);
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(StrategoFileManager.WORKING_DIR, projectName);
 		
 		//String binBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/class";
 		//String strategoBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/stratego";
@@ -245,7 +243,7 @@
 		String projectName = "localvar";
 		// TODO: project should be compiled with debug info!
 		
-		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(DebugCompilerTest.WORKING_DIR, projectName);
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(StrategoFileManager.WORKING_DIR, projectName);
 		//String binBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/class";
 		//String strategoBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/stratego";
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/thread-main.txt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/thread-main.txt	Wed Nov 17 09:47:09 2010	(r21358)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/thread-main.txt	Wed Nov 17 14:19:17 2010	(r21359)
@@ -27,11 +27,50 @@
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_r_enter_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
@@ -41,6 +80,7 @@
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
@@ -49,10 +89,18 @@
 invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_enter_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4
+invoke  --  strjdbgruntimelib.strategies.java_s_step_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_exit_0_4
 invoke  --  strjdbgruntimelib.strategies.java_s_var_0_5
 invoke  --  strjdbgruntimelib.strategies.java_r_exit_0_4

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example3.tes
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example3.tes	Wed Nov 17 09:47:09 2010	(r21358)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/example3.tes	Wed Nov 17 14:19:17 2010	(r21359)
@@ -38,6 +38,49 @@
     
 rules
 
+/*
+  match-strategy(|term1, term2*) =
+    s-enter(
+    | "test/src/testassign/example3.tes"
+    , "match-strategy"
+    , LocationInfo("41", "2", "41", "46")
+    )
+    ; (where <s-var(
+              | "test/src/testassign/example3.tes"
+              , "match-strategy"
+              , "term1"
+              , LocationInfo("41", "18", "41", "23")
+              )> term1
+             ; <s-var(
+                | "test/src/testassign/example3.tes"
+                , "match-strategy"
+                , "term2*"
+                , LocationInfo("41", "25", "41", "31")
+                )> term2*
+       ; s-step(
+         | "test/src/testassign/example3.tes"
+         , "match-strategy"
+         , LocationInfo("41", "35", "41", "46")
+         )
+       ; create-term)
+    ; s-exit(
+      | "test/src/testassign/example3.tes"
+      , "match-strategy"
+      , LocationInfo("41", "2", "41", "46")
+      )
+*/
+
+	match-strategy(|term1, term2*) = create-term
+	
+	match-strategy-debug(|term1, term2*) =
+		/*
+		where (
+			<s-var(|"filename", "r-name", "term1", LocationInfo("48", "6", "48", "40"))> term1
+			; <s-var(|"filename", "r-name", "term2*", LocationInfo("48", "6", "48", "40"))> term2*
+		  )
+		  ;
+		   */
+		    create-term
 
 	match-comments-name(|term1, term2*):
 		Program(_, _) -> out

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var-arg.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var-arg.str	Wed Nov 17 09:47:09 2010	(r21358)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var-arg.str	Wed Nov 17 14:19:17 2010	(r21359)
@@ -21,37 +21,48 @@
 rules
 	
 	// current term is a Term
-	match-term-to-s-var-clause(|filename, name, a) :
+	match-term-to-s-var-clause(|filename, name) :
 		match-term -> clause
 		//where <debug(!"match-term ")> match-term
 		where
 			// collect all Var in this term
 			vars* := <collect(?Var(_))> match-term
 			//; debug(!"collect vars ")
-			; s-vars* := <map(create-s-var-call-with-term(|filename, name, a))> vars*
+			; s-vars* := <map(create-s-var-call-with-term(|filename, name))> vars*
 			; seq := <create-seqs> s-vars*
 			; clause := WhereClause(seq)
 	
 	// create a where clause containing s-var calls for each term that is used as argument
-	t-args-to-s-var-clause(|filename, name, a) :
+	t-args-to-s-var-where-clause(|filename, name) :
 	t-args* -> clause
 	//where <debug(!"t-args-to-s-var: ")> name
 	where
-		s-vars* := <map(t-arg-to-s-var(|filename, name, a))> t-args*
+		s-vars* := <map(t-arg-to-s-var(|filename, name))> t-args*
 		//; debug(!"s-vars*: ")
 		// convert list to recursive Seq
 		; seq := <create-seqs> s-vars*
 		//; debug(!"seq ")
 		; clause := WhereClause(seq)
 		// create WhereClause
+		
+	t-args-to-s-var-where-strategy(|filename, name) :
+		t-args* -> where-s
+	where
+		s-vars* := <map(t-arg-to-s-var(|filename, name))> t-args*
+		//; debug(!"s-vars*: ")
+		// convert list to recursive Seq
+		; seq := <create-seqs> s-vars*
+		//; debug(!"seq ")
+		; where-s := Where(seq)
+		// create WhereClause		
 			
 	// v can be a "var-name"
 	// v can be a ListVar("term2*")
-	t-arg-to-s-var(|filename, name, a):
-		DefaultVarDec(v) -> s-var-call
+	t-arg-to-s-var(|filename, name):
+		DefaultVarDec(v){a} -> s-var-call
 		with 
 		  var := <create-var> v // create a Var(_)
-		  ; s-var-call := <create-s-var-call-with-term(|filename, name, a)> var
+		  ; s-var-call := <create-s-var-call-with-term(|filename, name)> var
 		    
 	/*
 	// var should be a Var(_)
@@ -64,8 +75,8 @@
 	*/
 	
 	// var should be a Var(_)
-	create-s-var-call-with-term(|filename, name, a) :
-		var -> s-var
+	create-s-var-call-with-term(|filename, name) :
+		var{a} -> s-var
 		where
 			var-name := <get-var-name> var
 			; s-var-call := <create-s-var-call(|filename, name, var-name, a)>
@@ -73,7 +84,7 @@
 			  
 			  
 	create-var:
-		v -> Var(v)
+		v{a} -> Var(v){a}
 		
 		
 	create-seqs :

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str	Wed Nov 17 09:47:09 2010	(r21358)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str	Wed Nov 17 14:19:17 2010	(r21359)
@@ -51,7 +51,31 @@
 	
 	// current term is a Strategy
 	// change every Assign to a Seq(Assign, s-var)
-	var-wrap-s(|filename, name, t-args*) = bottomup(try(match-assign-build-s-var(|filename, name)))
+	var-wrap-s(|filename, name, t-args*) = 
+	// TODO: build: Seq(s-var-t-args, s)
+	  	(s := <bottomup(try(match-assign-build-s-var(|filename, name)))>)
+	  	; debug(!"s-before ")
+	  	; 
+	  	  (
+	  	  	 (<t-args-to-s-var-where-strategy(|filename, name)> t-args*) // could fail if t-args* is empty list
+	  	  	 < // succeeds,current term is a WhereClause
+	  	  	 	(combine-s-and-clause(|s))
+	  	  	 +
+	  	  	 	(!s)
+	  	  )
+	  	; debug(!"after: ")
+	  	/*
+	  	; <try(
+	  		clause := <t-args-to-s-var-clause(|filename, name)> t-args* // could fail if t-args* is empty list
+	  	 	; !Seq(clause, s)
+	  	 )>
+	  	 */
+	  	 
+	 // current term is a clause
+	combine-s-and-clause(|s) : 
+		clause -> Seq(clause, s) 
+		where <debug(!"s: ")> clause
+		where <debug(!"clause:")> s
 	
 	var-wrap-s(|filename, name) = var-wrap-s(|filename, name, [])
 	
@@ -63,8 +87,8 @@
     		-> Rule(match-term, build-term', clauses'*){a}
     	with
     		build-term' := <var-wrap-s(|filename, r-name)> build-term
-			; clauses* := <try-s-var-for-match(|filename, r-name, a, [])> match-term
-			; clauses'* := <try-s-var-for-t-args(|filename, r-name, a, clauses*)> t-args*
+			; clauses* := <try-s-var-for-match(|filename, r-name, [])> match-term
+			; clauses'* := <try-s-var-for-t-args(|filename, r-name, clauses*)> t-args*
 	
 	// current Rule has rule conditions, so traverse each condition
 	// 1. assign strategies can also be used in the build term, so traverse it to
@@ -86,26 +110,26 @@
 			// determine local variables in rule conditions
             rule-cond'* := <add-var-to-rule-cond(|filename, r-name)> rule-cond
             // insert a clause containing s-var calls for the named variables in the match term
-			; clauses* := <try-s-var-for-match(|filename, r-name, a, rule-cond'*)> match-term
+			; clauses* := <try-s-var-for-match(|filename, r-name, rule-cond'*)> match-term
             // insert a clause containing s-var calls for the t-args
             /*
     		; clause := <t-args-to-s-var-clause(|filename, r-name, a)> t-args*
     		; clauses'* := <insert> (0, clause, clauses*)
     		  */
-    		; clauses'* := <try-s-var-for-t-args(|filename, r-name, a, clauses*)> t-args*
+    		; clauses'* := <try-s-var-for-t-args(|filename, r-name, clauses*)> t-args*
     		; build-term' := <var-wrap-s(|filename, r-name)> build-term
 
 	// current term should be the match-term of a Rule
-	try-s-var-for-match(|filename, r-name, a, clauses*) = 
-		(match-clause := <match-term-to-s-var-clause(|filename, r-name, a)>)
+	try-s-var-for-match(|filename, r-name, clauses*) = 
+		(match-clause := <match-term-to-s-var-clause(|filename, r-name)>)
     	< // if first strategy succeeds
     	(<insert> (0, match-clause, clauses*))
     	+ // if first strategy fails
     	(!clauses*) // return original clauses
     	
     // current term should be a list of t-args*
-    try-s-var-for-t-args(|filename, r-name, a, clauses*) =
-    	( t-args-clause := <t-args-to-s-var-clause(|filename, r-name, a)>)
+    try-s-var-for-t-args(|filename, r-name, clauses*) =
+    	( t-args-clause := <t-args-to-s-var-where-clause(|filename, r-name)>)
     	< // if first strategy succeeds
     	(<insert> (0, t-args-clause, clauses*))
     	+ // if first strategy fails

From rtlindeman at gmail.com  Wed Nov 17 16:23:14 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Wed, 17 Nov 2010 15:23:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21362 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.core/lib
	org.strategoxt.imp.debug.stratego.transformer/test/src/testfail
	org.strategoxt.imp.debug.stratego.transform...
Message-ID: <201011171523.oAHFNEoL027361@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Wed Nov 17 15:23:14 2010
New Revision: 21362
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21362&sc=1

Log:
Fixed: When a fail occured in strategy (while debugging) the s-exit would never be called.
s-enter/s-exit are now implemented using the following structure:
s-with-debug-info = s-enter; (body < s-exit + (s-exit; fail))
TODO: implement for rules

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testfail/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testfail/testfail.tes
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-transformer.jar
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var-arg.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-transformer.jar
==============================================================================
Binary file (source and/or target). No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testfail/testfail.tes
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testfail/testfail.tes	Wed Nov 17 15:23:14 2010	(r21362)
@@ -0,0 +1,44 @@
+module testfail
+
+signature
+
+
+  constructors
+  	
+  	Var		: String -> Expression
+  	Number	: Int -> Expression
+  	Add		: Expression * Expression -> Expression
+  	Sub		: Expression * Expression -> Expression
+  	
+  	Print	: Expression -> Statement
+  	Assign	: String * Expression -> Statement
+  	
+  	Function : String * List(Statement) -> Definition
+  	
+  	Comment : String * String -> Definition
+  	
+  	Program : String * List(Definition) -> Program
+  	
+strategies
+  main =
+    io-wrap(execute)
+    
+rules
+	execute :
+		input -> output
+		where
+			i' := create-input
+			; output := test-i
+			
+	
+			
+strategies
+	create-input = !["fda"]
+	
+	is-empty = ?[]
+	
+	test-i = is-empty
+	
+	create-fail(s) = s; fail
+	
+	test-fail(s1, s2, s3) =  s1 < s2 + s3
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str	Wed Nov 17 15:21:18 2010	(r21361)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str	Wed Nov 17 15:23:14 2010	(r21362)
@@ -22,8 +22,10 @@
     //filter-location = bottomup(try(keep-location))
     
     // keep all Location annotations
+    // we may need the Location info when we need to implement new debugger features
     filter-location = id
     
+    /*
     keep-location =
       if should-keep-location then id else discard-location end
   
@@ -45,7 +47,8 @@
   	// drop the annotation	
   	discard-location:
   		e{a*} -> e{}    
-
+	*/
+	
 strategies
 	
 	// main rule for adding debug information
@@ -83,12 +86,19 @@
 		
 	// current term s is a Strategy
 	// it is transformed to s-enter; s; s-exit
+	// s-enter ; s < s-exit + (s-exit; fail)
+	// if the strategy s fail, when can still call s-exit and throw a fail afterwards!
+	// TODO: when we want the debugger to catch 'fail' we should probably call a specific before re-throwing fail
 	wrap-s(|filename, s-name, a):
-		s -> Seq(s-enter, Seq(s, s-exit))
+		s -> out 
+			//Seq(s-enter, Seq(s, s-exit))
 		with
 			s-enter := <create-s-enter-call(|filename, s-name, a)>
 			; s-exit := <create-s-exit-call(|filename, s-name, a)>
-
+			; f := <create-fail>
+			; s-exit-fail := Seq(s-exit, f)
+			; body-exit := GuardedLChoice(s, s-exit, s-exit-fail) // s < s-exit + (s-exit; fail)
+			; out := Seq(s-enter, body-exit)
 
 //	
 // Add an r-entry and r-exit strategy call around each rule definition
@@ -235,4 +245,5 @@
     
     create-s-exit-call(|filename, s-name, a) = !CallT(SVar("s-exit"), [], [NoAnnoList(Str(filename)), NoAnnoList(Str(s-name)), <location-to-term> a])
     
+    create-fail = !Fail()
 	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var-arg.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var-arg.str	Wed Nov 17 15:21:18 2010	(r21361)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var-arg.str	Wed Nov 17 15:23:14 2010	(r21362)
@@ -21,13 +21,13 @@
 rules
 	
 	// current term is a Term
+	// create a WhereClause containing all s-var call for each variable in the mtach term
 	match-term-to-s-var-clause(|filename, name) :
 		match-term -> clause
 		//where <debug(!"match-term ")> match-term
 		where
 			// collect all Var in this term
 			vars* := <collect(?Var(_))> match-term
-			//; debug(!"collect vars ")
 			; s-vars* := <map(create-s-var-call-with-term(|filename, name))> vars*
 			; seq := <create-seqs> s-vars*
 			; clause := WhereClause(seq)
@@ -35,26 +35,22 @@
 	// create a where clause containing s-var calls for each term that is used as argument
 	t-args-to-s-var-where-clause(|filename, name) :
 	t-args* -> clause
-	//where <debug(!"t-args-to-s-var: ")> name
 	where
 		s-vars* := <map(t-arg-to-s-var(|filename, name))> t-args*
-		//; debug(!"s-vars*: ")
 		// convert list to recursive Seq
 		; seq := <create-seqs> s-vars*
-		//; debug(!"seq ")
-		; clause := WhereClause(seq)
 		// create WhereClause
+		; clause := WhereClause(seq)
 		
+	// create a Where() strategy containing all s-var calls for each strategy term argument
 	t-args-to-s-var-where-strategy(|filename, name) :
 		t-args* -> where-s
 	where
 		s-vars* := <map(t-arg-to-s-var(|filename, name))> t-args*
-		//; debug(!"s-vars*: ")
 		// convert list to recursive Seq
 		; seq := <create-seqs> s-vars*
-		//; debug(!"seq ")
-		; where-s := Where(seq)
 		// create WhereClause		
+		; where-s := Where(seq)
 			
 	// v can be a "var-name"
 	// v can be a ListVar("term2*")
@@ -63,17 +59,7 @@
 		with 
 		  var := <create-var> v // create a Var(_)
 		  ; s-var-call := <create-s-var-call-with-term(|filename, name)> var
-		    
-	/*
-	// var should be a Var(_)
-	create-s-var-call-with-term(|filename, name, var, a) =
-		where(
-			var-name := <get-var-name> var
-		  ; s-var-call := <create-s-var-call(|filename, name, var-name, a)>
-		  );
-		  !BA(s-var-call, var) // BA is needed because we want to apply it to a specific term, not the current term!		    
-	*/
-	
+		    	
 	// var should be a Var(_)
 	create-s-var-call-with-term(|filename, name) :
 		var{a} -> s-var
@@ -82,33 +68,30 @@
 			; s-var-call := <create-s-var-call(|filename, name, var-name, a)>
 			; s-var := BA(s-var-call, var)
 			  
-			  
+	// creates a Var(term) from the current term
+	// current term should be a string or a ListVar(var-name)
 	create-var:
 		v{a} -> Var(v){a}
 		
-		
+	// transform a list of strategies to a Seq
 	create-seqs :
 		s* -> seq
 		where <geq> (<length> s*, 2) // length should be greater than or equal to 2  
-		//where debug(!"list size >= 2    ")
 		where
 			l-length := <length> s*
-			//; <debug(!"length: ")> l-length
 			; take-length := <subt>(l-length, 1)
-			//; debug(!"take length")
 			; sub-list := <take(|<subt>(l-length, 1))> s*
-			//; <debug(!"sublist")> sub-list
 			; s-last := <last> s*
-			//; <debug(!"s-last: ")> s-last 
 			; seq := <foldr(!s-last, create-seq)> sub-list
 
 	// list is size 1, just return the element
 	create-seqs:
 		s* -> s
 		where <eq> (<length> s*, 1)
-		//where debug(!"list size is 1    ")
 		where s := <last> s*
 	
 	
-strategies	
+strategies
+	// current term should be a tuple containing two strategies (s1, s2)
+	// output is a Seq(s1, s2) term
 	create-seq = ?(s1, s2); !Seq(s1, s2)

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str	Wed Nov 17 15:21:18 2010	(r21361)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-var.str	Wed Nov 17 15:23:14 2010	(r21362)
@@ -54,7 +54,7 @@
 	var-wrap-s(|filename, name, t-args*) = 
 	// TODO: build: Seq(s-var-t-args, s)
 	  	(s := <bottomup(try(match-assign-build-s-var(|filename, name)))>)
-	  	; debug(!"s-before ")
+	  	//; debug(!"s-before ")
 	  	; 
 	  	  (
 	  	  	 (<t-args-to-s-var-where-strategy(|filename, name)> t-args*) // could fail if t-args* is empty list
@@ -63,7 +63,7 @@
 	  	  	 +
 	  	  	 	(!s)
 	  	  )
-	  	; debug(!"after: ")
+	  	//; debug(!"after: ")
 	  	/*
 	  	; <try(
 	  		clause := <t-args-to-s-var-clause(|filename, name)> t-args* // could fail if t-args* is empty list
@@ -72,10 +72,10 @@
 	  	 */
 	  	 
 	 // current term is a clause
+	 // converts the clause and the argument s (a Strategy) to a Seq(clause, s)
 	combine-s-and-clause(|s) : 
 		clause -> Seq(clause, s) 
-		where <debug(!"s: ")> clause
-		where <debug(!"clause:")> s
+
 	
 	var-wrap-s(|filename, name) = var-wrap-s(|filename, name, [])
 	

From rtlindeman at gmail.com  Wed Nov 17 16:35:00 2010
From: rtlindeman at gmail.com (Ricky Lindeman)
Date: Wed, 17 Nov 2010 15:35:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21363 - in
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src:
	localvar testassign testfail
Message-ID: <201011171535.oAHFZ0A4027542@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Wed Nov 17 15:34:59 2010
New Revision: 21363
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21363&sc=1

Log:
added svn:ignore on generated files (*.aterm, *.show, *.out)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testassign/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testfail/   (props changed)

From r.t.lindeman at student.tudelft.nl  Thu Nov 18 13:36:37 2010
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Thu, 18 Nov 2010 12:36:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21370 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans
Message-ID: <201011181236.oAICabQQ018993@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Thu Nov 18 12:36:37 2010
New Revision: 21370
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21370&sc=1

Log:
* removed compile-str.str as compiling is done via Java

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-entry.str
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/compile-str.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-entry.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-entry.str	Thu Nov 18 12:36:37 2010	(r21370)
@@ -0,0 +1,10 @@
+module gen-debug-entry
+
+// generate debug info used to set a breakpoint on
+// a rule enter, rule exit, strategy enter or strategy exit
+
+imports
+  libstratego-lib
+  include/Test
+  assert
+  location-util
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str	Thu Nov 18 09:38:48 2010	(r21369)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-info.str	Thu Nov 18 12:36:37 2010	(r21370)
@@ -6,6 +6,7 @@
   assert
   gen-debug-step // add step debug information
   gen-debug-var // add local var debug information
+  gen-debug-entry // add rule/strategy enter/exit debug information
   location-util
   
 //
@@ -67,6 +68,7 @@
 	// current term should be a module
 	 add-r-entry-and-exit-calls(|filename) =
 	 	bottomup(try(add-r-entry-and-exit-call(|filename)))
+	 	// TODO: also support lambda rules, LRule(Rule(match, build, s))
 
  	
 rules 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str	Thu Nov 18 09:38:48 2010	(r21369)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str	Thu Nov 18 12:36:37 2010	(r21370)
@@ -2,7 +2,6 @@
 
 imports 
   str-reader
-  compile-str
   libstratego-lib
   gen-debug-info
   assert
@@ -179,26 +178,6 @@
   	// ; debug
   	; echo(|"End foo5")
   	  
-  // read str file with annotations, add debug statements, write debuggable file, compile debuggable file to java  
-  foo6 = 
-  	echo(|"Start foo6")
-  	; get-project-dir => project-dir
-  	; !"test/src" => input-base-dir
-  	; !"test/generated" => output-base-dir
-  	; !"example.tes" => sma-file
-  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
-  	; <concat-strings> [project-dir, "/", output-base-dir, "/", <guarantee-extension(|"str")> sma-file] => absolute-output-location
-  	; echo(|"reading ast from")
-  	; echo(|absolute-location)
-  	; get-anno-ast(|absolute-location)
-  	; assert-module
-  	; filter-location
-  	; add-debug-info(|absolute-location)
-  	; pp-stratego-ast
-  	; write-stratego(|absolute-output-location)
-  	; compile-str-to-java(|absolute-output-location)
-  	// ; debug
-  	; echo(|"End foo6")
   	
 rules  	  
 	// inputfilePath is relative to sourceBasedir.
@@ -214,7 +193,6 @@
   	; add-debug-info(|inputfilePath)
   	; pp-stratego-ast
   	; write-stratego(|outputfilename)
-  	; compile-str-to-java(|outputfilename)
   	; status := "SUCCES"  		
   	)
   	

From L.C.L.Kats at tudelft.nl  Thu Nov 18 14:21:02 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 18 Nov 2010 13:21:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21371 - in
	spoofax-imp/trunk: . org.eclipse.imp
Message-ID: <201011181321.oAIDL2fO019639@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Nov 18 13:21:02 2010
New Revision: 21371
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21371&sc=1

Log:
Updated build instructions.

Modified:
   spoofax-imp/trunk/INSTALL
   spoofax-imp/trunk/org.eclipse.imp/README

Modified: spoofax-imp/trunk/INSTALL
==============================================================================
--- spoofax-imp/trunk/INSTALL	Thu Nov 18 12:36:37 2010	(r21370)
+++ spoofax-imp/trunk/INSTALL	Thu Nov 18 13:21:02 2010	(r21371)
@@ -18,8 +18,7 @@
 
   - Other Spoofax plugins: https://svn.strategoxt.org/repos/StrategoXT/spoofax/trunk/spoofax/
   
-  - IMP: https://svn.strategoxt.org/repos/StrategoXT/spoofax-imp/trunk/org.eclipse.imp
-         and http://www.eclipse.org/imp
+  - IMP: see https://svn.strategoxt.org/repos/StrategoXT/spoofax-imp/trunk/org.eclipse.imp/README
 
 If you have any problems building, try contacting us
-through our support page at http://strategoxt.org/Spoofax/Support.
\ No newline at end of file
+through our support page at http://strategoxt.org/Spoofax/Support.

Modified: spoofax-imp/trunk/org.eclipse.imp/README
==============================================================================
--- spoofax-imp/trunk/org.eclipse.imp/README	Thu Nov 18 12:36:37 2010	(r21370)
+++ spoofax-imp/trunk/org.eclipse.imp/README	Thu Nov 18 13:21:02 2010	(r21371)
@@ -5,3 +5,21 @@
 Note that building IMP from source code is not required for building Spoofax/IMP;
 instead, the latest Spoofax/IMP binary plugin can be installed and used as a
 baseline for rebuilding the remainder of the components.
+
+We currently use the following plugins to build Spoofax/IMP:
+
+- com.ibm.wala.shrike
+- lpg.runtime.java (version 2.0.17 with an added qualifier; 2.0.17.qualifier)
+- org.eclipse.imp.cheatsheets
+- org.eclipse.imp.java.hosted
+- org.eclipse.imp.lpg
+- org.eclipse.imp.lpg.ide
+- org.eclipse.imp.lpg.metatooling
+- org.eclipse.imp.metatooling
+- org.eclipse.imp.preferences
+- org.eclipse.imp.prefspecs
+- org.eclipse.imp.presentation
+- org.eclipse.imp.runtime
+- org.eclipse.imp.smapi
+- org.eclipse.imp.smapifier
+- org.eclipse.imp.xform

From L.C.L.Kats at tudelft.nl  Thu Nov 18 15:52:50 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 18 Nov 2010 14:52:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21372 -
	sglr-recovery/trunk/lpg.runtime.java/META-INF
	spoofax-imp/trunk/org.eclipse.imp
Message-ID: <201011181452.oAIEqo7l020969@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Thu Nov 18 14:52:50 2010
New Revision: 21372
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21372&sc=1

Log:


Modified:
   sglr-recovery/trunk/lpg.runtime.java/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.eclipse.imp/README

Modified: sglr-recovery/trunk/lpg.runtime.java/META-INF/MANIFEST.MF
==============================================================================
--- sglr-recovery/trunk/lpg.runtime.java/META-INF/MANIFEST.MF	Thu Nov 18 13:21:02 2010	(r21371)
+++ sglr-recovery/trunk/lpg.runtime.java/META-INF/MANIFEST.MF	Thu Nov 18 14:52:50 2010	(r21372)
@@ -3,7 +3,7 @@
 Bundle-Name: LPG Java Runtime
 Bundle-SymbolicName: lpg.runtime
 Bundle-ClassPath: lpgruntime.jar
-Bundle-Version: 2.0.17
+Bundle-Version: 2.0.17.qualifier
 Bundle-Vendor: pcharles at us.ibm.com
 Bundle-Localization: plugin
 Export-Package: lpg.runtime

Modified: spoofax-imp/trunk/org.eclipse.imp/README
==============================================================================
--- spoofax-imp/trunk/org.eclipse.imp/README	Thu Nov 18 13:21:02 2010	(r21371)
+++ spoofax-imp/trunk/org.eclipse.imp/README	Thu Nov 18 14:52:50 2010	(r21372)
@@ -8,8 +8,6 @@
 
 We currently use the following plugins to build Spoofax/IMP:
 
-- com.ibm.wala.shrike
-- lpg.runtime.java (version 2.0.17 with an added qualifier; 2.0.17.qualifier)
 - org.eclipse.imp.cheatsheets
 - org.eclipse.imp.java.hosted
 - org.eclipse.imp.lpg
@@ -23,3 +21,8 @@
 - org.eclipse.imp.smapi
 - org.eclipse.imp.smapifier
 - org.eclipse.imp.xform
+
+And:
+- com.ibm.wala.shrike (https://wala.svn.sourceforge.net/svnroot/wala/trunk/com.ibm.wala.shrike at r3073)
+- lpg.runtime.java (version 2.0.17.qualifier, mirrored at https://svn.strategoxt.org/repos/StrategoXT/sglr-recovery/trunk/lpg.runtime.java)
+

From karltk at strategoxt.org  Thu Nov 18 16:37:08 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 18 Nov 2010 15:37:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21373 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests tests/core
Message-ID: <201011181537.oAIFb8Nk021705@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Thu Nov 18 15:37:08 2010
New Revision: 21373
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21373&sc=1

Log:
* Added minimal set tests for the core language; will build a tiny subset of necessary tests as backend progresses.
 * Added support for building integer terms.

Added:
   strategoxt-javascript-backend/trunk/tests/
   strategoxt-javascript-backend/trunk/tests/core/
   strategoxt-javascript-backend/trunk/tests/core/_fail.str
   strategoxt-javascript-backend/trunk/tests/core/_id.str
   strategoxt-javascript-backend/trunk/tests/core/build_int.str
   strategoxt-javascript-backend/trunk/tests/core/build_list.str
   strategoxt-javascript-backend/trunk/tests/core/build_list_2.str
   strategoxt-javascript-backend/trunk/tests/core/build_str.str
   strategoxt-javascript-backend/trunk/tests/core/build_tuple_1.str
   strategoxt-javascript-backend/trunk/tests/core/lchoice-nlb.str
   strategoxt-javascript-backend/trunk/tests/core/lchoice.str
   strategoxt-javascript-backend/trunk/tests/core/seq.str
Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 18 14:52:50 2010	(r21372)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 18 15:37:08 2010	(r21373)
@@ -61,6 +61,9 @@
 					makeCtor : function(name, arity) { 
 						return { name : name, arity : arity, tag: "Ctor" };
 					},
+					makeInt : function(val) {
+						return val;
+					},
 					prettify : function(term) {
 						return doPrettify(term, []).join("");
 					}

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Nov 18 14:52:50 2010	(r21372)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Nov 18 15:37:08 2010	(r21373)
@@ -164,7 +164,7 @@
   	  ; (t'*, bstm-init*) := <translate-params> t*
   	  ; param*            := <conc> (s'*, t'*)
   	  ; feil              := <newname> "Fail_"
-  	  ; bstm              := <debug(!"T") ; translate-strategy(|"ERROR", feil)> s
+  	  ; bstm              := <translate-strategy(|"ERROR", feil)> s
   	|}  	  	
 
   translate-params = 
@@ -233,7 +233,21 @@
       s'* := <map(lifted-strategy-to-function)> s*
   	; t'* := <map(js-construct-term)> t*
   	
-  translate-Build(|s,f) = fail // TODO (karltk)
+  translate-Build(|s,f) :
+  	Build(t) -> 
+  	$[
+  		[dec*]
+  		[stm*]
+  		term = [e]
+  	]
+  with
+  	{| js-CheckBuild : 
+        where(<debug(!"constructing ")> t)
+  	  ; e := <js-construct-term> t
+  	  ; (dec*, stm*) := <bagof-js-CheckBuild ; unzip ; (id, reverse ; concat)> e    
+  		
+  	|}
+  	
 
   translate-Seq(|s,f):
   	Seq(s1, s2) -> $[

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Nov 18 14:52:50 2010	(r21372)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Nov 18 15:37:08 2010	(r21373)
@@ -26,7 +26,7 @@
   js-InitTermId :
     (x, e) -> $[ [x] = [e]; ]
 
-  js-mk-int-const = int-to-string
+  js-mk-int-const = id
   
 rules
 
@@ -87,7 +87,7 @@
         js-CheckBuild :+=
           ( $[ var [x]; ]
           , $[
-               [x] = context.invokePrimitive("SSL_mkterm", term, ["[]"], ["["] e_t1, e_t2 ["]"]);
+               [x] = ctx.invokePrimitive("SSL_mkterm", term, ["[]"], ["["] [e_t1], [e_t2] ["]"]);
                if (x == null)
                  break Fail;
             ])

Added: strategoxt-javascript-backend/trunk/tests/core/_fail.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/_fail.str	Thu Nov 18 15:37:08 2010	(r21373)
@@ -0,0 +1,2 @@
+module _fail
+rules main = fail

Added: strategoxt-javascript-backend/trunk/tests/core/_id.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/_id.str	Thu Nov 18 15:37:08 2010	(r21373)
@@ -0,0 +1,2 @@
+module _id
+rules main = id

Added: strategoxt-javascript-backend/trunk/tests/core/build_int.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/build_int.str	Thu Nov 18 15:37:08 2010	(r21373)
@@ -0,0 +1,3 @@
+module build_int
+imports libstratego-lib
+rules main = !42

Added: strategoxt-javascript-backend/trunk/tests/core/build_list.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/build_list.str	Thu Nov 18 15:37:08 2010	(r21373)
@@ -0,0 +1,2 @@
+module build_list
+rules main = ![1,2,3]

Added: strategoxt-javascript-backend/trunk/tests/core/build_list_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/build_list_2.str	Thu Nov 18 15:37:08 2010	(r21373)
@@ -0,0 +1,2 @@
+module build_list_2
+rules main = ![]

Added: strategoxt-javascript-backend/trunk/tests/core/build_str.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/build_str.str	Thu Nov 18 15:37:08 2010	(r21373)
@@ -0,0 +1,2 @@
+module build_str
+rules main = !"foo"

Added: strategoxt-javascript-backend/trunk/tests/core/build_tuple_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/build_tuple_1.str	Thu Nov 18 15:37:08 2010	(r21373)
@@ -0,0 +1,2 @@
+module build_tuple_1
+rules main = !(1,2,3)

Added: strategoxt-javascript-backend/trunk/tests/core/lchoice-nlb.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/lchoice-nlb.str	Thu Nov 18 15:37:08 2010	(r21373)
@@ -0,0 +1,2 @@
+module choice-nlb
+rules main = fail +> id

Added: strategoxt-javascript-backend/trunk/tests/core/lchoice.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/lchoice.str	Thu Nov 18 15:37:08 2010	(r21373)
@@ -0,0 +1,2 @@
+module lchoice
+rules main = fail < id + id

Added: strategoxt-javascript-backend/trunk/tests/core/seq.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/seq.str	Thu Nov 18 15:37:08 2010	(r21373)
@@ -0,0 +1,2 @@
+module seq
+rules main = id ; id

From karltk at strategoxt.org  Thu Nov 18 16:47:08 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 18 Nov 2010 15:47:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21374 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests/core
Message-ID: <201011181547.oAIFl8ZR021895@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Thu Nov 18 15:47:08 2010
New Revision: 21374
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21374&sc=1

Log:
* Added support for building reals and strings.

Added:
   strategoxt-javascript-backend/trunk/tests/core/build_real.str
Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
   strategoxt-javascript-backend/trunk/tests/core/build_str.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 18 15:37:08 2010	(r21373)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 18 15:47:08 2010	(r21374)
@@ -14,6 +14,8 @@
 			var doPrettify = function(term, builder) {
 				if(typeof(term) === 'number')
 					builder.push("" + term);
+				else if(typeof(term) === 'string') 
+					builder.push("\"" + term + "\"");
 				else if(typeof(term) === 'object' && typeof(term[0]) === 'string') {
 					if(term[0] === "[]") {
 						builder.push("[");
@@ -62,6 +64,12 @@
 						return { name : name, arity : arity, tag: "Ctor" };
 					},
 					makeInt : function(val) {
+						return Math.round(val);
+					},
+					makeReal : function(val) {
+						return val;
+					},
+					makeString : function(val) {
 						return val;
 					},
 					prettify : function(term) {

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Nov 18 15:37:08 2010	(r21373)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Nov 18 15:47:08 2010	(r21374)
@@ -37,7 +37,7 @@
     Real(x) -> $[ factory.makeReal([<try(real-to-string)> x]) ]
 
   js-ConstructTerm :
-    Str(x) -> $[ factory.makeString([<escape> x]) ]
+    Str(x) -> $[ factory.makeString("[<escape> x]") ]
 
   js-ConstructTerm : // HACK: BAFReader work-around
     Str([]) -> $< factory.makeString("[]") >

Added: strategoxt-javascript-backend/trunk/tests/core/build_real.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/build_real.str	Thu Nov 18 15:47:08 2010	(r21374)
@@ -0,0 +1,4 @@
+module build_real
+imports libstratego-lib
+rules main = !43.2
+

Modified: strategoxt-javascript-backend/trunk/tests/core/build_str.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/build_str.str	Thu Nov 18 15:37:08 2010	(r21373)
+++ strategoxt-javascript-backend/trunk/tests/core/build_str.str	Thu Nov 18 15:47:08 2010	(r21374)
@@ -1,2 +1,3 @@
 module build_str
+imports libstratego-lib
 rules main = !"foo"

From karltk at strategoxt.org  Thu Nov 18 17:22:11 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 18 Nov 2010 16:22:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21375 - in
	strategoxt-javascript-backend/trunk: . src/javascript
	src/stratego tests/core
Message-ID: <201011181622.oAIGMBtN022528@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Thu Nov 18 16:22:09 2010
New Revision: 21375
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21375&sc=1

Log:
* Added support for building lists.

Modified:
   strategoxt-javascript-backend/trunk/   (props changed)
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
   strategoxt-javascript-backend/trunk/tests/core/build_list.str
   strategoxt-javascript-backend/trunk/tests/core/build_list_2.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 18 15:47:08 2010	(r21374)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 18 16:22:09 2010	(r21375)
@@ -11,28 +11,35 @@
 			}();
 			var nextStackPos = 0;
 			var maxStackPos = 0;
-			var doPrettify = function(term, builder) {
+			var doPrettify = function(term, builder, inlist) {
 				if(typeof(term) === 'number')
 					builder.push("" + term);
 				else if(typeof(term) === 'string') 
 					builder.push("\"" + term + "\"");
 				else if(typeof(term) === 'object' && typeof(term[0]) === 'string') {
 					if(term[0] === "[]") {
-						builder.push("[");
-						for(var i = 0; i < term[1].length; i++) {
-							doPrettify(term[1][i], builder);
+						if(!inlist)
+							builder.push("[");
+						if(term.length == 3) {
+							doPrettify(term[1], builder, false);
+							builder.push(",");
+							doPrettify(term[2], builder, true);
+						} else if (inlist) {
+							builder[builder.length-1] = "";
 						}
-						builder.push("]");
+						if(!inlist)
+							builder.push("]");
 					} else {
 						builder.push(term[0]);
 						builder.push("(");
 						for(var i = 0; i < term[1].length; i++) {
-							doPrettify(term[1][i], builder);
+							doPrettify(term[1][i], builder, false);
 						}
 						builder.push(")");
 					}
 				} else {
 					builder.push("<invalid subterm>");
+					print(term);
 				}
 				return builder;
 			}
@@ -72,8 +79,17 @@
 					makeString : function(val) {
 						return val;
 					},
+					makeList : function() {
+						return ["[]", []];
+					},
+					makeListCons : function(car, cdr) {
+						return ["[]", car, cdr];
+					},
+					makeAppl : function(ctor, args) {
+						return [ctor].concat(args)
+					},
 					prettify : function(term) {
-						return doPrettify(term, []).join("");
+						return doPrettify(term, [], false).join("");
 					}
 				}
 			}

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Nov 18 15:47:08 2010	(r21374)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Nov 18 16:22:09 2010	(r21375)
@@ -48,10 +48,7 @@
       e := <js-VarToReadRef> x
 
   js-ConstructAnnoVar :
-    Anno(Var(x), pt2) -> 
-    $[ 
-      factory.annotateTerm(e, checkListAnnos(factory, [<js-construct-term> pt2]))
-    ]
+    Anno(Var(x), pt2) -> $[ factory.annotateTerm(e, checkListAnnos(factory, [<js-construct-term> pt2])) ]
   where
       <js-ConstructVar> Var(x) => e
 
@@ -61,16 +58,13 @@
       <not(?Var(_))> pt1
 
   js-ConstructTerm :
-    Anno(pt1, pt2) -> 
-    $[ 
-      termFactory.annotateTerm([<js-construct-term> pt1], checkListAnnos(termFactory,[<js-construct-term> pt2]))
-    ]
+    Anno(pt1, pt2) -> $[ factory.annotateTerm([<js-construct-term> pt1], checkListAnnos(termFactory,[<js-construct-term> pt2])) ]
   where 
       <not(?Op("Nil", []))> pt2
     ; <not(?Var(_))> pt1
 
   js-ConstructTerm :
-    Op(c, t*) -> $[ termFactory.makeAppl([e_cons], [e_arg*]) ]
+    Op(c, t*) -> $[ factory.makeAppl([e_cons], [e_arg*]) ]
   where
       not(is-ListOp + is-TupleOp)
   with
@@ -95,18 +89,15 @@
   // TODO dynrule for fail ?
   
   js-ConstructTerm : 
-    Op("", args) -> $[ termFactory.makeTuple([args']) ]
+    Op("", args) -> $[ factory.makeTuple([args']) ]
   with
       args' := <map(js-construct-term)> args
     
   js-ConstructTerm :
-    Op("Nil", []) -> $[ termFactory.makeList() ]
+    Op("Nil", []) -> $[ factory.makeList() ]
 
   js-ConstructTerm :
-    Op("Cons", [t1, t2]) -> 
-    $[ 
-      termFactory.makeListCons([<js-construct-term> t1], [e])
-    ]
+    Op("Cons", [t1, t2]) ->  $[ factory.makeListCons([<js-construct-term> t1], [e]) ]
     with
       <js-construct-term> t2
         ; if <not(Anno(is-ListOp, id))> t2 then 

Modified: strategoxt-javascript-backend/trunk/tests/core/build_list.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/build_list.str	Thu Nov 18 15:47:08 2010	(r21374)
+++ strategoxt-javascript-backend/trunk/tests/core/build_list.str	Thu Nov 18 16:22:09 2010	(r21375)
@@ -1,2 +1,3 @@
 module build_list
+imports libstratego-lib
 rules main = ![1,2,3]

Modified: strategoxt-javascript-backend/trunk/tests/core/build_list_2.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/build_list_2.str	Thu Nov 18 15:47:08 2010	(r21374)
+++ strategoxt-javascript-backend/trunk/tests/core/build_list_2.str	Thu Nov 18 16:22:09 2010	(r21375)
@@ -1,2 +1,3 @@
 module build_list_2
+imports libstratego-lib
 rules main = ![]

From karltk at strategoxt.org  Thu Nov 18 18:27:38 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 18 Nov 2010 17:27:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21376 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests/core
Message-ID: <201011181727.oAIHRcnZ023560@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Thu Nov 18 17:27:37 2010
New Revision: 21376
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21376&sc=1

Log:
* Added tuple support.

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
   strategoxt-javascript-backend/trunk/src/stratego/utils.str
   strategoxt-javascript-backend/trunk/tests/core/build_tuple_1.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 18 16:22:09 2010	(r21375)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 18 17:27:37 2010	(r21376)
@@ -29,6 +29,13 @@
 						}
 						if(!inlist)
 							builder.push("]");
+					} else if(term[0] === "()") {
+						builder.push("(");
+						for(var i = 1; i < term.length; i++) {
+							doPrettify(term[i], builder, false);
+							builder.push(",");
+						}
+						builder[builder.length-1] = ")";
 					} else {
 						builder.push(term[0]);
 						builder.push("(");
@@ -85,8 +92,14 @@
 					makeListCons : function(car, cdr) {
 						return ["[]", car, cdr];
 					},
+					makeTuple : function(args) {
+						r = ["()"];
+						for(var i = 0; i < arguments.length; i++)
+							r.push(arguments[i]);
+						return r;
+					},
 					makeAppl : function(ctor, args) {
-						return [ctor].concat(args)
+						return [ctor].concat(args);
 					},
 					prettify : function(term) {
 						return doPrettify(term, [], false).join("");

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Nov 18 16:22:09 2010	(r21375)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Nov 18 17:27:37 2010	(r21376)
@@ -238,7 +238,7 @@
   	$[
   		[dec*]
   		[stm*]
-  		term = [e]
+  		term = [e];
   	]
   with
   	{| js-CheckBuild : 

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Nov 18 16:22:09 2010	(r21375)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Nov 18 17:27:37 2010	(r21376)
@@ -91,7 +91,7 @@
   js-ConstructTerm : 
     Op("", args) -> $[ factory.makeTuple([args']) ]
   with
-      args' := <map(js-construct-term)> args
+      args' := <map(js-construct-term) ; string-join(|",")> args
     
   js-ConstructTerm :
     Op("Nil", []) -> $[ factory.makeList() ]

Modified: strategoxt-javascript-backend/trunk/src/stratego/utils.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/utils.str	Thu Nov 18 16:22:09 2010	(r21375)
+++ strategoxt-javascript-backend/trunk/src/stratego/utils.str	Thu Nov 18 17:27:37 2010	(r21376)
@@ -5,3 +5,13 @@
 strategies
 	  
   jsify = cify
+
+  string-join(|c) =
+          <foldl(\(x,y) -> <concat-strings> [y, c, x]\)> (<id>, "")
+        ; if ?"" then
+                id
+          else
+                explode-string
+        ; drop(|<string-length> c)
+        ; implode-string
+      end

Modified: strategoxt-javascript-backend/trunk/tests/core/build_tuple_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/build_tuple_1.str	Thu Nov 18 16:22:09 2010	(r21375)
+++ strategoxt-javascript-backend/trunk/tests/core/build_tuple_1.str	Thu Nov 18 17:27:37 2010	(r21376)
@@ -1,2 +1,3 @@
 module build_tuple_1
+imports libstratego-lib
 rules main = !(1,2,3)

From karltk at strategoxt.org  Thu Nov 18 19:27:33 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 18 Nov 2010 18:27:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21377 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests/core
Message-ID: <201011181827.oAIIRXrN024394@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Thu Nov 18 18:27:32 2010
New Revision: 21377
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21377&sc=1

Log:
* Added appl support.

Added:
   strategoxt-javascript-backend/trunk/tests/core/build_appl_1.str
   strategoxt-javascript-backend/trunk/tests/core/build_appl_2.str
   strategoxt-javascript-backend/trunk/tests/core/build_appl_3.str
   strategoxt-javascript-backend/trunk/tests/core/build_appl_4.str
Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 18 17:27:37 2010	(r21376)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 18 18:27:32 2010	(r21377)
@@ -9,6 +9,10 @@
 				}
 				return function() {}; 
 			}();
+			var assert = function(msg, e) {
+				if(e == false)
+					throw msg;
+			}
 			var nextStackPos = 0;
 			var maxStackPos = 0;
 			var doPrettify = function(term, builder, inlist) {
@@ -41,8 +45,9 @@
 						builder.push("(");
 						for(var i = 0; i < term[1].length; i++) {
 							doPrettify(term[1][i], builder, false);
+							builder.push(",");
 						}
-						builder.push(")");
+						builder[builder.length-1] = ")";
 					}
 				} else {
 					builder.push("<invalid subterm>");
@@ -75,7 +80,7 @@
 				},
 				factory : {
 					makeCtor : function(name, arity) { 
-						return { name : name, arity : arity, tag: "Ctor" };
+						return { name : name, arity : arity };
 					},
 					makeInt : function(val) {
 						return Math.round(val);
@@ -99,7 +104,11 @@
 						return r;
 					},
 					makeAppl : function(ctor, args) {
-						return [ctor].concat(args);
+						r = [ctor.name];
+						assert("ctor arity != argument count", ctor.arity == args.length);
+						for(var i = 1; i < arguments.length; i++)
+							r.push(arguments[i]);
+						return r;
 					},
 					prettify : function(term) {
 						return doPrettify(term, [], false).join("");

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Nov 18 17:27:37 2010	(r21376)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Thu Nov 18 18:27:32 2010	(r21377)
@@ -64,12 +64,12 @@
     ; <not(?Var(_))> pt1
 
   js-ConstructTerm :
-    Op(c, t*) -> $[ factory.makeAppl([e_cons], [e_arg*]) ]
+    Op(c, t*) -> ${ factory.makeAppl({cons}, [{arg*}]) }
   where
       not(is-ListOp + is-TupleOp)
   with
-      e_cons := <js-ConstructorName-expr> (c, <length> t*)
-    ; e_arg* := <map(js-construct-term)> t*
+      cons := <js-ConstructorName-expr> (c, <length> t*)
+    ; arg* := <map(js-construct-term) ; string-join(|",")> t*
     
   js-ConstructTerm :
     Explode(t1, t2) -> x

Added: strategoxt-javascript-backend/trunk/tests/core/build_appl_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/build_appl_1.str	Thu Nov 18 18:27:32 2010	(r21377)
@@ -0,0 +1,7 @@
+module build_appl_1
+imports libstratego-lib
+signature
+ constructors
+   Foo : Term * Term -> Term
+rules
+  main = !Foo(1,2)

Added: strategoxt-javascript-backend/trunk/tests/core/build_appl_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/build_appl_2.str	Thu Nov 18 18:27:32 2010	(r21377)
@@ -0,0 +1,7 @@
+module build_appl_1
+imports libstratego-lib
+signature
+ constructors
+   Foo : Term * Term -> Term
+rules
+  main = !Foo(1,Foo(1, [1,2,3]))

Added: strategoxt-javascript-backend/trunk/tests/core/build_appl_3.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/build_appl_3.str	Thu Nov 18 18:27:32 2010	(r21377)
@@ -0,0 +1,7 @@
+module build_appl_1
+imports libstratego-lib
+signature
+ constructors
+   Foo : Term * Term -> Term
+rules
+  main = !Foo(1,(1,2,3))

Added: strategoxt-javascript-backend/trunk/tests/core/build_appl_4.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/build_appl_4.str	Thu Nov 18 18:27:32 2010	(r21377)
@@ -0,0 +1,7 @@
+module build_appl_1
+imports libstratego-lib
+signature
+ constructors
+   Foo : Term * Term -> Term
+rules
+  main = !Foo(1,"2")

From karltk at strategoxt.org  Thu Nov 18 20:37:21 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 18 Nov 2010 19:37:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21378 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests/core
Message-ID: <201011181937.oAIJbLqW025432@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Thu Nov 18 19:37:21 2010
New Revision: 21378
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21378&sc=1

Log:
* Sketched initial term api for matching.
 * Rewrote term type handling.
 * Added matching code from s2j, and got it to compile. 
 * Added support for matching integer constants.

Added:
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/tests/core/match_int.str
   strategoxt-javascript-backend/trunk/tests/core/match_list_1.str
   strategoxt-javascript-backend/trunk/tests/core/match_list_2.str
   strategoxt-javascript-backend/trunk/tests/core/match_list_3.str
   strategoxt-javascript-backend/trunk/tests/core/match_real.str
   strategoxt-javascript-backend/trunk/tests/core/match_str.str
   strategoxt-javascript-backend/trunk/tests/core/match_tuple_1.str
   strategoxt-javascript-backend/trunk/tests/core/match_var.str
Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 18 18:27:32 2010	(r21377)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 18 19:37:21 2010	(r21378)
@@ -15,43 +15,64 @@
 			}
 			var nextStackPos = 0;
 			var maxStackPos = 0;
+			var INT = 1, REAL = 2, STRING = 3, LIST = 4, TUPLE = 5, APPL = 6, INVALID = -1;
+			var termType = function (term) {
+				var tp = typeof(term);
+				if(tp === 'number')
+					return Math.round(term) == term ? INT : REAL; // FIXME (karltk) too cheeky, might need to tag the values
+				if(tp === 'string')
+					return STRING;
+				if(tp === 'object' && typeof(term[0]) === 'string') {
+					if(term[0] === "[]")
+						return LIST;
+					if(term[0] === "()")
+						return TUPLE;
+					return APPL;
+				}
+				return INVALID;
+			}
 			var doPrettify = function(term, builder, inlist) {
-				if(typeof(term) === 'number')
+				tp = termType(term);
+				switch(tp) {
+				case INT:
+				case REAL:
 					builder.push("" + term);
-				else if(typeof(term) === 'string') 
+					break;
+				case STRING:
 					builder.push("\"" + term + "\"");
-				else if(typeof(term) === 'object' && typeof(term[0]) === 'string') {
-					if(term[0] === "[]") {
-						if(!inlist)
-							builder.push("[");
-						if(term.length == 3) {
-							doPrettify(term[1], builder, false);
-							builder.push(",");
-							doPrettify(term[2], builder, true);
-						} else if (inlist) {
-							builder[builder.length-1] = "";
-						}
-						if(!inlist)
-							builder.push("]");
-					} else if(term[0] === "()") {
-						builder.push("(");
-						for(var i = 1; i < term.length; i++) {
-							doPrettify(term[i], builder, false);
-							builder.push(",");
-						}
-						builder[builder.length-1] = ")";
-					} else {
-						builder.push(term[0]);
-						builder.push("(");
-						for(var i = 0; i < term[1].length; i++) {
-							doPrettify(term[1][i], builder, false);
-							builder.push(",");
-						}
-						builder[builder.length-1] = ")";
+					break;
+				case LIST:
+					if(!inlist)
+						builder.push("[");
+					if(term.length == 3) {
+						doPrettify(term[1], builder, false);
+						builder.push(",");
+						doPrettify(term[2], builder, true);
+					} else if (inlist) {
+						builder[builder.length-1] = "";
+					}
+					if(!inlist)
+						builder.push("]");
+					break;
+				case TUPLE:
+					builder.push("(");
+					for(var i = 1; i < term.length; i++) {
+						doPrettify(term[i], builder, false);
+						builder.push(",");
 					}
-				} else {
+					builder[builder.length-1] = ")";
+					break;
+				case APPL:
+					builder.push(term[0]);
+					builder.push("(");
+					for(var i = 0; i < term[1].length; i++) {
+						doPrettify(term[1][i], builder, false);
+						builder.push(",");
+					}
+					builder[builder.length-1] = ")";
+					break;
+				default:
 					builder.push("<invalid subterm>");
-					print(term);
 				}
 				return builder;
 			}
@@ -112,7 +133,23 @@
 					},
 					prettify : function(term) {
 						return doPrettify(term, [], false).join("");
-					}
+					},
+					isEmptyList : undefined,
+					getSubterm : undefined,
+					head : undefined,
+					tail : undefined,
+					getSubtermCount : undefined,
+					getConstructor : undefined,
+					ctorEquals : undefined,
+					getAnnotations : undefined,
+					match : undefined,
+					termType : termType,
+					INT : INT,
+					REAL : REAL,
+					STRING : STRING,
+					LIST : LIST,
+					TUPLE : TUPLE,
+					APPL : APPL
 				}
 			}
 		}

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Nov 18 18:27:32 2010	(r21377)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Thu Nov 18 19:37:21 2010	(r21378)
@@ -11,6 +11,7 @@
   lib/dr-scoping
   signatures
   term-construction
+  term-deconstruction
     		
 strategies
 	
@@ -308,7 +309,6 @@
     ; s3'       := <translate-strategy(|succ,f)> s3
   	
   translate-Scope(|s,f) = fail // TODO (karltk)
-  translate-Match(|s,f) = fail // TODO (karltk)
   translate-Let(|s,f) = fail // TODO (karltk)
   translate-ImportTerm(|s,f) = fail // TODO (karltk)
   translate-Escape(|s,f) = fail // TODO (karltk)

Added: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Thu Nov 18 19:37:21 2010	(r21378)
@@ -0,0 +1,216 @@
+module term-deconstruction
+imports
+ libstrc
+
+signature
+ constructors
+ 	AssignTo: Str -> Term
+ 	 
+strategies
+	
+  translate-Match(|s,f) :
+    Match(t) -> result
+    with
+      result := <translate-Match(|s,f)> Match(t, AssignTo("term"))
+
+  translate-Match(|s,f) :
+    Match(Wld(), trm) -> ""
+
+  translate-Match(|s,f) :
+    Match(As(t1,t2), trm) ->
+    $[ 
+      [match1];
+      [match2];
+    ]
+    with 
+      match1 := <translate-Match(|s,f)> Match(t1,trm)
+    ; match2 := <translate-Match(|s,f)> Match(t2,trm)
+
+  translate-Match(|s,f) :
+    Match(Var(x){"unbound"}, trm) -> assign
+    with
+      assign := <js-VarToWrite> (x, trm)
+
+  translate-Match(|s,f) :
+    Match(Var(x){"bound"}, AssignTo(e)) ->
+    $[
+      if ([e] != [e_var] && !factory.match([e_var],[e])) 
+        break Fail;
+     ]
+    with
+      e_var := <js-VarToReadRef> Var(x)
+
+  translate-Match(|s,f) :
+    Match(Var(x){"(un)bound"}, AssignTo(e)) ->
+    $[
+      if ([e_var] == null)
+        [stm_assign];
+      else if ([e_var] != [e] && ![e_var].match([e]))
+        break Fail;
+    ]
+    with 
+      e_var      := <js-VarToReadRef> Var(x)
+    ; stm_assign := <js-VarToWrite> (x, e)
+
+  translate-Match(|s,f) :
+    Match(Var(x){}, trm) -> <translate-Match(|s,f)> Match(Var(x){"(un)bound"}, trm)
+
+  translate-Match(|s,f) :
+    Match(Explode(t1, t2), e') ->
+    ${ 
+      var {x_cons} = ctx.invokePrimitive("SSL_get_constructor", term, [], [{e}]);
+      {<translate-Match(|s,f)> Match(t1, AssignTo(x_cons))};
+      var {x_args} = ctx.invokePrimitive("SSL_get_arguments", term, [], [{e}]);
+      {<translate-Match(|s,f)> Match(t2, AssignTo(x_args))};
+     }
+  with
+      !e' => AssignTo(e)
+    ; x_cons := <newname> "cons"
+    ; x_args := <newname> "args"
+
+  translate-Match(|s,f) =
+       ( translate-MatchNoAnno(|s,f)
+      <+ translate-MatchAnno(|s,f) )
+
+  translate-MatchNoAnno(|s,f) :
+    Match(Anno(pt1, Wld()), e) -> result
+  with
+  	result := <translate-Match(|s,f)> Match(pt1, e)
+
+  translate-MatchAnno(|s,f) :
+    Match(Anno(pt1, pt2), AssignTo(e)) -> 
+    $[
+      [stm0];
+      var [x] = factory.getAnnotations([e]);
+      [stm1];
+    ]
+  where 
+      <not(Wld)> pt2
+  with
+      x    := <newname> "annos"
+    ; stm0 := <translate-Match(|s,f)> Match(pt1, e)
+    ; stm1 := <translate-Match(|s,f)> Match(pt2, AssignTo(x))
+
+  // String constants are not cached for comparison,
+  // since we do comparison modulo annotations
+  translate-Match(|s,f) :
+    Match(Str(str), e') -> 
+    $[
+      if (factory.termType([e]) != factory.STRING
+         || "[e_str]" !== [e])
+        break Fail;
+    ]
+  with
+      !e' => AssignTo(e)
+    ; e_str := <escape> str
+
+  translate-Match(|s,feil) :
+    Match(Int(i), e') -> 
+    $[
+      if (factory.termType([e]) !== factory.INT
+         || [e_int] !==  [e])
+        break [feil];
+    ]
+  with
+      !e' => AssignTo(e)
+    ; e_int := <js-mk-int-const> i
+
+  translate-Match(|s,feil) :
+    Match(Real(r), e') -> 
+    $[
+      if (factory.termType([e]) !== factory.REAL 
+          || [e_real] !== [e])
+        break [feil];
+    ]
+  with
+      !e' => AssignTo(e)
+    ; e_real := <try(real-to-string)> r
+
+  /**
+   * Translate a match of an Op, but not a Cons/2 , Nil/0, or tuple.
+   */
+  translate-Match(|s,feil) :
+    Match(op at Op(c, ts), AssignTo(e)) ->
+    $[
+      // (this pattern is matched and optimized in java-postprocess)
+      if (factory.termType([e]) != factory.APPL || [e_nomatch])
+        break [feil];
+      [match-args]
+    ]
+  where
+    <not(is-ListOp + is-TupleOp)> op
+  with
+    e_cons     := <js-ConstructorName-expr> (c, <length> ts)
+  ; match-args := <translate-Match-args(|s,feil)> (e, ts)
+  ; if not(<get-config> "-sc" => "off") then
+      e_nomatch := $[ !factory.ctorEquals([e_cons], factory.getConstructor([e])) ]
+    else
+      e_nomatch := $[ !factory.ctorEquals([e_cons], factory.getConstructor([e])) ]
+    end
+
+  /**
+   * Translate a match of a tuple.
+   */
+  translate-Match(|s,feil) :
+    Match(op at Op(c, ts), AssignTo(e)) ->
+    $[
+      if (factory.termType([e]) !== factory.TUPLE || factory.getSubtermCount([e]) !== i)
+        break [feil];
+      [match-args]
+    ]
+  where
+    <is-TupleOp> op
+  with
+    i:= <write-to-string> <length> ts
+  ; match-args := <translate-Match-args(|s,feil)> (e, ts)
+  
+  translate-Match-args(|s,f) :
+    (e, terms) -> bstm_matcharg*
+    with
+      (bstm_matcharg*, _) :=
+        <thread-map(\ (t,i) -> (
+               <java-MatchArg1(|s,f) <+ java-MatchArg2(|s,f)> 
+                  (t, $[ factory.getSubterm([e], [<js-mk-int-const> i]) ])
+             , <add>(i, 1)
+             )
+           \ )> (terms,0)
+
+  java-MatchArg1(|s,f) : 
+    (Var(x){t*}, e) -> result
+  with 
+      result := <translate-Match(|s,f)> Match(Var(x){t*}, e)
+
+  java-MatchArg2(|s,f) : 
+    (t, AssignTo(e)) -> 
+    $[
+      stm1;
+      stm2;
+    ]
+    with
+      x    := <newname> "arg"
+    ; stm2 := <translate-Match(|s,f)> Match(t, AssignTo(x))
+    ; if !stm2 => "" then
+       stm1 := ""
+      else 
+       stm1 := $[ var [x] = [e]; ]
+     end
+
+  translate-Match(|s,feil) :
+    Match(Op("Nil", []), AssignTo(e)) ->
+    $[
+      if (factory.termType([e]) !== factory.LIST || !factory.isEmptyList([e]))
+        break [feil];
+    ]
+
+  translate-Match(|s,feil) :
+    Match(Op("Cons", [hd, tl]), AssignTo(e)) ->
+    $[
+      if (factory.termType([e]) !== factory.LIST || factory.isEmptyList([e]))
+          break [feil];
+      [match-args]
+    ]
+  with 
+    match-args := 
+      <map(java-MatchArg1(|s,feil) <+ java-MatchArg2(|s,feil))> 
+        [ (hd, $[ factory.head([e]) ])
+        , (tl, $[ factory.tail([e]) ]) ]

Added: strategoxt-javascript-backend/trunk/tests/core/match_int.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_int.str	Thu Nov 18 19:37:21 2010	(r21378)
@@ -0,0 +1,3 @@
+module match_int
+imports libstratego-lib
+rules main = ?42

Added: strategoxt-javascript-backend/trunk/tests/core/match_list_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_list_1.str	Thu Nov 18 19:37:21 2010	(r21378)
@@ -0,0 +1,3 @@
+module build_list
+imports libstratego-lib
+rules main = ?[1,2,3]

Added: strategoxt-javascript-backend/trunk/tests/core/match_list_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_list_2.str	Thu Nov 18 19:37:21 2010	(r21378)
@@ -0,0 +1,3 @@
+module build_list
+imports libstratego-lib
+rules main = ?[]

Added: strategoxt-javascript-backend/trunk/tests/core/match_list_3.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_list_3.str	Thu Nov 18 19:37:21 2010	(r21378)
@@ -0,0 +1,3 @@
+module build_list
+imports libstratego-lib
+rules main = ![1 | _]

Added: strategoxt-javascript-backend/trunk/tests/core/match_real.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_real.str	Thu Nov 18 19:37:21 2010	(r21378)
@@ -0,0 +1,4 @@
+module build_real
+imports libstratego-lib
+rules main = ?43.2
+

Added: strategoxt-javascript-backend/trunk/tests/core/match_str.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_str.str	Thu Nov 18 19:37:21 2010	(r21378)
@@ -0,0 +1,3 @@
+module build_str
+imports libstratego-lib
+rules main = ?"foo"

Added: strategoxt-javascript-backend/trunk/tests/core/match_tuple_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_tuple_1.str	Thu Nov 18 19:37:21 2010	(r21378)
@@ -0,0 +1,3 @@
+module build_list
+imports libstratego-lib
+rules main = ?(1,2,3)

Added: strategoxt-javascript-backend/trunk/tests/core/match_var.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_var.str	Thu Nov 18 19:37:21 2010	(r21378)
@@ -0,0 +1,3 @@
+module build_list
+imports libstratego-lib
+rules main = !x

From R.B.Vermaas at tudelft.nl  Fri Nov 19 10:28:15 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 19 Nov 2010 09:28:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21379 -
	strategoxt-java-backend/trunk/META-INF
Message-ID: <201011190928.oAJ9SFNU006353@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Fri Nov 19 09:28:15 2010
New Revision: 21379
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21379&sc=1

Log:
add org.strategoxt.tools package to MANIFEST exported packages

Modified:
   strategoxt-java-backend/trunk/META-INF/MANIFEST.MF

Modified: strategoxt-java-backend/trunk/META-INF/MANIFEST.MF
==============================================================================
--- strategoxt-java-backend/trunk/META-INF/MANIFEST.MF	Thu Nov 18 19:37:21 2010	(r21378)
+++ strategoxt-java-backend/trunk/META-INF/MANIFEST.MF	Fri Nov 19 09:28:15 2010	(r21379)
@@ -66,6 +66,7 @@
  org.strategoxt.stratego_xtc,
  org.strategoxt.strc,
  org.strategoxt.strj,
+ org.strategoxt.tools,
  shared
 Require-Bundle: org.spoofax.aterm,
  org.spoofax.interpreter.core,

From karltk at strategoxt.org  Fri Nov 19 11:18:19 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 19 Nov 2010 10:18:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21380 - in
	strategoxt-javascript-backend/trunk: src/stratego tests/core
Message-ID: <201011191018.oAJAIJVA007359@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Fri Nov 19 10:18:19 2010
New Revision: 21380
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21380&sc=1

Log:
* Added support for matching strings and reals.

Modified:
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/tests/core/match_real.str
   strategoxt-javascript-backend/trunk/tests/core/match_str.str

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Fri Nov 19 09:28:15 2010	(r21379)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Fri Nov 19 10:18:19 2010	(r21380)
@@ -31,22 +31,22 @@
     with
       assign := <js-VarToWrite> (x, trm)
 
-  translate-Match(|s,f) :
+  translate-Match(|s,feil) :
     Match(Var(x){"bound"}, AssignTo(e)) ->
     $[
       if ([e] != [e_var] && !factory.match([e_var],[e])) 
-        break Fail;
+        break [feil];
      ]
     with
       e_var := <js-VarToReadRef> Var(x)
 
-  translate-Match(|s,f) :
+  translate-Match(|s,feil) :
     Match(Var(x){"(un)bound"}, AssignTo(e)) ->
     $[
       if ([e_var] == null)
         [stm_assign];
       else if ([e_var] != [e] && ![e_var].match([e]))
-        break Fail;
+        break [feil];
     ]
     with 
       e_var      := <js-VarToReadRef> Var(x)
@@ -93,12 +93,12 @@
 
   // String constants are not cached for comparison,
   // since we do comparison modulo annotations
-  translate-Match(|s,f) :
+  translate-Match(|s,feil) :
     Match(Str(str), e') -> 
     $[
       if (factory.termType([e]) != factory.STRING
          || "[e_str]" !== [e])
-        break Fail;
+        break [feil];
     ]
   with
       !e' => AssignTo(e)

Modified: strategoxt-javascript-backend/trunk/tests/core/match_real.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_real.str	Fri Nov 19 09:28:15 2010	(r21379)
+++ strategoxt-javascript-backend/trunk/tests/core/match_real.str	Fri Nov 19 10:18:19 2010	(r21380)
@@ -1,4 +1,4 @@
-module build_real
+module match_real
 imports libstratego-lib
 rules main = ?43.2
 

Modified: strategoxt-javascript-backend/trunk/tests/core/match_str.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_str.str	Fri Nov 19 09:28:15 2010	(r21379)
+++ strategoxt-javascript-backend/trunk/tests/core/match_str.str	Fri Nov 19 10:18:19 2010	(r21380)
@@ -1,3 +1,3 @@
-module build_str
+module match_str
 imports libstratego-lib
 rules main = ?"foo"

From karltk at strategoxt.org  Fri Nov 19 11:35:17 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 19 Nov 2010 10:35:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21381 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests/core
Message-ID: <201011191035.oAJAZHlY007772@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Fri Nov 19 10:35:17 2010
New Revision: 21381
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21381&sc=1

Log:
* Added support for list matching, including with wildcard.

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/tests/core/match_list_1.str
   strategoxt-javascript-backend/trunk/tests/core/match_list_2.str
   strategoxt-javascript-backend/trunk/tests/core/match_list_3.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Fri Nov 19 10:18:19 2010	(r21380)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Fri Nov 19 10:35:17 2010	(r21381)
@@ -134,10 +134,16 @@
 					prettify : function(term) {
 						return doPrettify(term, [], false).join("");
 					},
-					isEmptyList : undefined,
+					isEmptyList : function(term) {
+						return typeof(term) === 'object' && term.length === 1 && term[0] == "[]"; 
+					},
 					getSubterm : undefined,
-					head : undefined,
-					tail : undefined,
+					head : function(list) {
+						return list[1];
+					},
+					tail : function(list) {
+						return list[2];
+					},
 					getSubtermCount : undefined,
 					getConstructor : undefined,
 					ctorEquals : undefined,

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Fri Nov 19 10:18:19 2010	(r21380)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Fri Nov 19 10:35:17 2010	(r21381)
@@ -169,31 +169,34 @@
     with
       (bstm_matcharg*, _) :=
         <thread-map(\ (t,i) -> (
-               <java-MatchArg1(|s,f) <+ java-MatchArg2(|s,f)> 
+               <js-MatchArg1(|s,f) <+ js-MatchArg2(|s,f)> 
                   (t, $[ factory.getSubterm([e], [<js-mk-int-const> i]) ])
              , <add>(i, 1)
              )
            \ )> (terms,0)
 
-  java-MatchArg1(|s,f) : 
+  js-MatchArg1(|s,f) : 
     (Var(x){t*}, e) -> result
-  with 
-      result := <translate-Match(|s,f)> Match(Var(x){t*}, e)
+  with
+  	<is-string> e 
+  ; result := <translate-Match(|s,f)> Match(Var(x){t*}, e)
 
-  java-MatchArg2(|s,f) : 
-    (t, AssignTo(e)) -> 
+  js-MatchArg2(|s,f) : 
+    (t, e) -> 
     $[
-      stm1;
-      stm2;
+      [stm1];
+      [stm2];
     ]
-    with
-      x    := <newname> "arg"
-    ; stm2 := <translate-Match(|s,f)> Match(t, AssignTo(x))
-    ; if !stm2 => "" then
-       stm1 := ""
-      else 
-       stm1 := $[ var [x] = [e]; ]
-     end
+  with
+    debug(!"foo")
+  ; <is-string> e
+  ; x    := <newname> "arg"
+  ; stm2 := <translate-Match(|s,f)> Match(t, AssignTo(x))
+  ; if !stm2 => "" then
+     stm1 := ""
+    else 
+     stm1 := $[ var [x] = [e]; ]
+    end
 
   translate-Match(|s,feil) :
     Match(Op("Nil", []), AssignTo(e)) ->
@@ -211,6 +214,6 @@
     ]
   with 
     match-args := 
-      <map(java-MatchArg1(|s,feil) <+ java-MatchArg2(|s,feil))> 
+      <map(js-MatchArg1(|s,feil) <+ js-MatchArg2(|s,feil))> 
         [ (hd, $[ factory.head([e]) ])
         , (tl, $[ factory.tail([e]) ]) ]

Modified: strategoxt-javascript-backend/trunk/tests/core/match_list_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_list_1.str	Fri Nov 19 10:18:19 2010	(r21380)
+++ strategoxt-javascript-backend/trunk/tests/core/match_list_1.str	Fri Nov 19 10:35:17 2010	(r21381)
@@ -1,3 +1,3 @@
-module build_list
+module match_list_1
 imports libstratego-lib
 rules main = ?[1,2,3]

Modified: strategoxt-javascript-backend/trunk/tests/core/match_list_2.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_list_2.str	Fri Nov 19 10:18:19 2010	(r21380)
+++ strategoxt-javascript-backend/trunk/tests/core/match_list_2.str	Fri Nov 19 10:35:17 2010	(r21381)
@@ -1,3 +1,3 @@
-module build_list
+module match_list_2
 imports libstratego-lib
 rules main = ?[]

Modified: strategoxt-javascript-backend/trunk/tests/core/match_list_3.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_list_3.str	Fri Nov 19 10:18:19 2010	(r21380)
+++ strategoxt-javascript-backend/trunk/tests/core/match_list_3.str	Fri Nov 19 10:35:17 2010	(r21381)
@@ -1,3 +1,3 @@
-module build_list
+module match_list_3
 imports libstratego-lib
-rules main = ![1 | _]
+rules main = ?[1 | _]

From karltk at strategoxt.org  Fri Nov 19 11:46:32 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 19 Nov 2010 10:46:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21382 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests/core
Message-ID: <201011191046.oAJAkWIu007898@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Fri Nov 19 10:46:32 2010
New Revision: 21382
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21382&sc=1

Log:
* Added support for tuple matching.

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/tests/core/match_tuple_1.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Fri Nov 19 10:35:17 2010	(r21381)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Fri Nov 19 10:46:32 2010	(r21382)
@@ -32,7 +32,7 @@
 				return INVALID;
 			}
 			var doPrettify = function(term, builder, inlist) {
-				tp = termType(term);
+				var tp = termType(term);
 				switch(tp) {
 				case INT:
 				case REAL:
@@ -119,13 +119,13 @@
 						return ["[]", car, cdr];
 					},
 					makeTuple : function(args) {
-						r = ["()"];
+						var r = ["()"];
 						for(var i = 0; i < arguments.length; i++)
 							r.push(arguments[i]);
 						return r;
 					},
 					makeAppl : function(ctor, args) {
-						r = [ctor.name];
+						var r = [ctor.name];
 						assert("ctor arity != argument count", ctor.arity == args.length);
 						for(var i = 1; i < arguments.length; i++)
 							r.push(arguments[i]);
@@ -137,14 +137,29 @@
 					isEmptyList : function(term) {
 						return typeof(term) === 'object' && term.length === 1 && term[0] == "[]"; 
 					},
-					getSubterm : undefined,
+					getSubterm : function(term, idx) {
+						var tp = termType(term);
+						switch(tp) {
+						case TUPLE: 
+						case APPLE: return term[idx + 1];
+						default:
+							throw "not implemented";
+						}
+					},
 					head : function(list) {
 						return list[1];
 					},
 					tail : function(list) {
 						return list[2];
 					},
-					getSubtermCount : undefined,
+					getSubtermCount : function(term) {
+						var tp = termType(term);
+						switch(tp) {
+						case TUPLE: return term.length - 1;
+						default:
+							throw "not implemented";
+						}
+					},
 					getConstructor : undefined,
 					ctorEquals : undefined,
 					getAnnotations : undefined,

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Fri Nov 19 10:35:17 2010	(r21381)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Fri Nov 19 10:46:32 2010	(r21382)
@@ -154,14 +154,14 @@
   translate-Match(|s,feil) :
     Match(op at Op(c, ts), AssignTo(e)) ->
     $[
-      if (factory.termType([e]) !== factory.TUPLE || factory.getSubtermCount([e]) !== i)
+      if (factory.termType([e]) !== factory.TUPLE || factory.getSubtermCount([e]) !== [i])
         break [feil];
       [match-args]
     ]
   where
     <is-TupleOp> op
   with
-    i:= <write-to-string> <length> ts
+    i := <write-to-string> <length> ts
   ; match-args := <translate-Match-args(|s,feil)> (e, ts)
   
   translate-Match-args(|s,f) :

Modified: strategoxt-javascript-backend/trunk/tests/core/match_tuple_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_tuple_1.str	Fri Nov 19 10:35:17 2010	(r21381)
+++ strategoxt-javascript-backend/trunk/tests/core/match_tuple_1.str	Fri Nov 19 10:46:32 2010	(r21382)
@@ -1,3 +1,3 @@
-module build_list
+module match_tuple_1
 imports libstratego-lib
 rules main = ?(1,2,3)

From karltk at strategoxt.org  Fri Nov 19 12:54:22 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 19 Nov 2010 11:54:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21383 - in
	strategoxt-javascript-backend/trunk: src/javascript tests/core
Message-ID: <201011191154.oAJBsMwG009102@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Fri Nov 19 11:54:22 2010
New Revision: 21383
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21383&sc=1

Log:
* Added support for appl matching.

Added:
   strategoxt-javascript-backend/trunk/tests/core/match_appl_1.str
   strategoxt-javascript-backend/trunk/tests/core/match_appl_2.str
   strategoxt-javascript-backend/trunk/tests/core/match_appl_3.str
   strategoxt-javascript-backend/trunk/tests/core/match_appl_4.str
Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Fri Nov 19 10:46:32 2010	(r21382)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Fri Nov 19 11:54:22 2010	(r21383)
@@ -65,8 +65,8 @@
 				case APPL:
 					builder.push(term[0]);
 					builder.push("(");
-					for(var i = 0; i < term[1].length; i++) {
-						doPrettify(term[1][i], builder, false);
+					for(var i = 1; i < term.length; i++) {
+						doPrettify(term[i], builder, false);
 						builder.push(",");
 					}
 					builder[builder.length-1] = ")";
@@ -127,8 +127,7 @@
 					makeAppl : function(ctor, args) {
 						var r = [ctor.name];
 						assert("ctor arity != argument count", ctor.arity == args.length);
-						for(var i = 1; i < arguments.length; i++)
-							r.push(arguments[i]);
+						r = r.concat(args);
 						return r;
 					},
 					prettify : function(term) {
@@ -140,8 +139,8 @@
 					getSubterm : function(term, idx) {
 						var tp = termType(term);
 						switch(tp) {
-						case TUPLE: 
-						case APPLE: return term[idx + 1];
+						case TUPLE:
+						case APPL: return term[idx + 1];
 						default:
 							throw "not implemented";
 						}
@@ -160,8 +159,12 @@
 							throw "not implemented";
 						}
 					},
-					getConstructor : undefined,
-					ctorEquals : undefined,
+					getConstructor : function(appl) {
+						return { name : appl[0], arity : appl.length-1}
+					},
+					ctorEquals : function(ctor1, ctor2) {
+						return ctor1.name == ctor2.name && ctor1.arity == ctor2.arity; 
+					},
 					getAnnotations : undefined,
 					match : undefined,
 					termType : termType,

Added: strategoxt-javascript-backend/trunk/tests/core/match_appl_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_appl_1.str	Fri Nov 19 11:54:22 2010	(r21383)
@@ -0,0 +1,7 @@
+module match_appl_1
+imports libstratego-lib
+signature
+ constructors
+   Foo : Term * Term -> Term
+rules
+  main = ?Foo(1,2)

Added: strategoxt-javascript-backend/trunk/tests/core/match_appl_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_appl_2.str	Fri Nov 19 11:54:22 2010	(r21383)
@@ -0,0 +1,7 @@
+module match_appl_2
+imports libstratego-lib
+signature
+ constructors
+   Foo : Term * Term -> Term
+rules
+  main = ?Foo(1,"foo")

Added: strategoxt-javascript-backend/trunk/tests/core/match_appl_3.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_appl_3.str	Fri Nov 19 11:54:22 2010	(r21383)
@@ -0,0 +1,7 @@
+module match_appl_3
+imports libstratego-lib
+signature
+ constructors
+   Foo : Term * Term -> Term
+rules
+  main = ?Foo(1,[1,2,3])

Added: strategoxt-javascript-backend/trunk/tests/core/match_appl_4.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_appl_4.str	Fri Nov 19 11:54:22 2010	(r21383)
@@ -0,0 +1,7 @@
+module match_appl_4
+imports libstratego-lib
+signature
+ constructors
+   Foo : Term * Term -> Term
+rules
+  main = ?Foo(1,Foo(1,2))

From karltk at strategoxt.org  Fri Nov 19 13:34:06 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 19 Nov 2010 12:34:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21384 - in
	strategoxt-javascript-backend/trunk: src/stratego tests/core
Message-ID: <201011191234.oAJCY6ip010132@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Fri Nov 19 12:34:04 2010
New Revision: 21384
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21384&sc=1

Log:
* Added support for matching variables.

Added:
   strategoxt-javascript-backend/trunk/tests/core/match_var_1.str
   strategoxt-javascript-backend/trunk/tests/core/match_var_2.str
   strategoxt-javascript-backend/trunk/tests/core/match_var_3.str
   strategoxt-javascript-backend/trunk/tests/core/match_var_4.str
   strategoxt-javascript-backend/trunk/tests/core/match_var_5.str
Deleted:
   strategoxt-javascript-backend/trunk/tests/core/match_var.str
Modified:
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/src/stratego/variable-access.str

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Fri Nov 19 11:54:22 2010	(r21383)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Fri Nov 19 12:34:04 2010	(r21384)
@@ -308,7 +308,18 @@
   	; s2'       := <translate-strategy(|succ,outerfeil)> s2
     ; s3'       := <translate-strategy(|succ,f)> s3
   	
-  translate-Scope(|s,f) = fail // TODO (karltk)
+    translate-Scope(|s,f) : 
+    Scope(vars, body) -> 
+    $[
+      // { // TODO: using an actual scope might reduce the # of local variable slots
+        [decl*]
+        [body']
+      // }
+    ]
+    with
+      decl* := <map(to-js-vardecl)> vars
+    ; body'  := <translate-strategy(|s,f)> body
+
   translate-Let(|s,f) = fail // TODO (karltk)
   translate-ImportTerm(|s,f) = fail // TODO (karltk)
   translate-Escape(|s,f) = fail // TODO (karltk)

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Fri Nov 19 11:54:22 2010	(r21383)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Fri Nov 19 12:34:04 2010	(r21384)
@@ -4,14 +4,14 @@
 
 signature
  constructors
- 	AssignTo: Str -> Term
+ 	ReadFrom: Str -> Term
  	 
 strategies
 	
   translate-Match(|s,f) :
     Match(t) -> result
     with
-      result := <translate-Match(|s,f)> Match(t, AssignTo("term"))
+      result := <translate-Match(|s,f)> Match(t, ReadFrom("term"))
 
   translate-Match(|s,f) :
     Match(Wld(), trm) -> ""
@@ -32,7 +32,7 @@
       assign := <js-VarToWrite> (x, trm)
 
   translate-Match(|s,feil) :
-    Match(Var(x){"bound"}, AssignTo(e)) ->
+    Match(Var(x){"bound"}, ReadFrom(e)) ->
     $[
       if ([e] != [e_var] && !factory.match([e_var],[e])) 
         break [feil];
@@ -41,12 +41,13 @@
       e_var := <js-VarToReadRef> Var(x)
 
   translate-Match(|s,feil) :
-    Match(Var(x){"(un)bound"}, AssignTo(e)) ->
+    Match(Var(x){"(un)bound"}, ReadFrom(e)) ->
     $[
-      if ([e_var] == null)
-        [stm_assign];
-      else if ([e_var] != [e] && ![e_var].match([e]))
+      if ([e_var] == null) {
+        [stm_assign]
+      }?else if ([e_var] != [e] && ![e_var].match([e])) {
         break [feil];
+      }
     ]
     with 
       e_var      := <js-VarToReadRef> Var(x)
@@ -59,12 +60,12 @@
     Match(Explode(t1, t2), e') ->
     ${ 
       var {x_cons} = ctx.invokePrimitive("SSL_get_constructor", term, [], [{e}]);
-      {<translate-Match(|s,f)> Match(t1, AssignTo(x_cons))};
+      {<translate-Match(|s,f)> Match(t1, ReadFrom(x_cons))};
       var {x_args} = ctx.invokePrimitive("SSL_get_arguments", term, [], [{e}]);
-      {<translate-Match(|s,f)> Match(t2, AssignTo(x_args))};
+      {<translate-Match(|s,f)> Match(t2, ReadFrom(x_args))};
      }
   with
-      !e' => AssignTo(e)
+      !e' => ReadFrom(e)
     ; x_cons := <newname> "cons"
     ; x_args := <newname> "args"
 
@@ -78,7 +79,7 @@
   	result := <translate-Match(|s,f)> Match(pt1, e)
 
   translate-MatchAnno(|s,f) :
-    Match(Anno(pt1, pt2), AssignTo(e)) -> 
+    Match(Anno(pt1, pt2), ReadFrom(e)) -> 
     $[
       [stm0];
       var [x] = factory.getAnnotations([e]);
@@ -89,7 +90,7 @@
   with
       x    := <newname> "annos"
     ; stm0 := <translate-Match(|s,f)> Match(pt1, e)
-    ; stm1 := <translate-Match(|s,f)> Match(pt2, AssignTo(x))
+    ; stm1 := <translate-Match(|s,f)> Match(pt2, ReadFrom(x))
 
   // String constants are not cached for comparison,
   // since we do comparison modulo annotations
@@ -101,7 +102,7 @@
         break [feil];
     ]
   with
-      !e' => AssignTo(e)
+      !e' => ReadFrom(e)
     ; e_str := <escape> str
 
   translate-Match(|s,feil) :
@@ -112,7 +113,7 @@
         break [feil];
     ]
   with
-      !e' => AssignTo(e)
+      !e' => ReadFrom(e)
     ; e_int := <js-mk-int-const> i
 
   translate-Match(|s,feil) :
@@ -123,14 +124,14 @@
         break [feil];
     ]
   with
-      !e' => AssignTo(e)
+      !e' => ReadFrom(e)
     ; e_real := <try(real-to-string)> r
 
   /**
    * Translate a match of an Op, but not a Cons/2 , Nil/0, or tuple.
    */
   translate-Match(|s,feil) :
-    Match(op at Op(c, ts), AssignTo(e)) ->
+    Match(op at Op(c, ts), ReadFrom(e)) ->
     $[
       // (this pattern is matched and optimized in java-postprocess)
       if (factory.termType([e]) != factory.APPL || [e_nomatch])
@@ -152,7 +153,7 @@
    * Translate a match of a tuple.
    */
   translate-Match(|s,feil) :
-    Match(op at Op(c, ts), AssignTo(e)) ->
+    Match(op at Op(c, ts), ReadFrom(e)) ->
     $[
       if (factory.termType([e]) !== factory.TUPLE || factory.getSubtermCount([e]) !== [i])
         break [feil];
@@ -170,7 +171,7 @@
       (bstm_matcharg*, _) :=
         <thread-map(\ (t,i) -> (
                <js-MatchArg1(|s,f) <+ js-MatchArg2(|s,f)> 
-                  (t, $[ factory.getSubterm([e], [<js-mk-int-const> i]) ])
+                  (t, ReadFrom($[ factory.getSubterm([e], [<js-mk-int-const> i]) ]))
              , <add>(i, 1)
              )
            \ )> (terms,0)
@@ -178,20 +179,19 @@
   js-MatchArg1(|s,f) : 
     (Var(x){t*}, e) -> result
   with
-  	<is-string> e 
-  ; result := <translate-Match(|s,f)> Match(Var(x){t*}, e)
+  	result := <translate-Match(|s,f)> Match(Var(x){t*}, e)
 
   js-MatchArg2(|s,f) : 
-    (t, e) -> 
+    (t, e') -> 
     $[
       [stm1];
       [stm2];
     ]
   with
     debug(!"foo")
-  ; <is-string> e
+  ; !e' => ReadFrom(e) 
   ; x    := <newname> "arg"
-  ; stm2 := <translate-Match(|s,f)> Match(t, AssignTo(x))
+  ; stm2 := <translate-Match(|s,f)> Match(t, ReadFrom(x))
   ; if !stm2 => "" then
      stm1 := ""
     else 
@@ -199,14 +199,14 @@
     end
 
   translate-Match(|s,feil) :
-    Match(Op("Nil", []), AssignTo(e)) ->
+    Match(Op("Nil", []), ReadFrom(e)) ->
     $[
       if (factory.termType([e]) !== factory.LIST || !factory.isEmptyList([e]))
         break [feil];
     ]
 
   translate-Match(|s,feil) :
-    Match(Op("Cons", [hd, tl]), AssignTo(e)) ->
+    Match(Op("Cons", [hd, tl]), ReadFrom(e)) ->
     $[
       if (factory.termType([e]) !== factory.LIST || factory.isEmptyList([e]))
           break [feil];
@@ -215,5 +215,5 @@
   with 
     match-args := 
       <map(js-MatchArg1(|s,feil) <+ js-MatchArg2(|s,feil))> 
-        [ (hd, $[ factory.head([e]) ])
-        , (tl, $[ factory.tail([e]) ]) ]
+        [ (hd, ReadFrom($[ factory.head([e]) ]))
+        , (tl, ReadFrom($[ factory.tail([e]) ])) ]

Modified: strategoxt-javascript-backend/trunk/src/stratego/variable-access.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/variable-access.str	Fri Nov 19 11:54:22 2010	(r21383)
+++ strategoxt-javascript-backend/trunk/src/stratego/variable-access.str	Fri Nov 19 12:34:04 2010	(r21384)
@@ -11,10 +11,10 @@
 rules
   
   to-js-vardecl :
-    x{} -> $[ var x = null; ]
+    x{} -> $[ var [x] = null; ]
 
   to-js-vardecl:
-    x{Offset(i), Escapes()} -> $[ var x = new TermReference(); ]
+    x{Offset(i), Escapes()} -> $[ var [x] = new TermReference(); ]
 
   js-VarToWrite :
     (x{}, e) -> $[ [x] = [e]; ]

Added: strategoxt-javascript-backend/trunk/tests/core/match_var_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_var_1.str	Fri Nov 19 12:34:04 2010	(r21384)
@@ -0,0 +1,3 @@
+module match_var
+imports libstratego-lib
+rules main = ?x

Added: strategoxt-javascript-backend/trunk/tests/core/match_var_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_var_2.str	Fri Nov 19 12:34:04 2010	(r21384)
@@ -0,0 +1,4 @@
+module match_var_2
+imports libstratego-lib
+signature constructors Foo : Term * Term -> Term
+rules main = ?Foo(1,x)

Added: strategoxt-javascript-backend/trunk/tests/core/match_var_3.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_var_3.str	Fri Nov 19 12:34:04 2010	(r21384)
@@ -0,0 +1,3 @@
+module match_var_3
+imports libstratego-lib
+rules main = ?[x|_]

Added: strategoxt-javascript-backend/trunk/tests/core/match_var_4.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_var_4.str	Fri Nov 19 12:34:04 2010	(r21384)
@@ -0,0 +1,3 @@
+module match_var_4
+imports libstratego-lib
+rules main = ?[_, x, _]

Added: strategoxt-javascript-backend/trunk/tests/core/match_var_5.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/match_var_5.str	Fri Nov 19 12:34:04 2010	(r21384)
@@ -0,0 +1,3 @@
+module match_var_5
+imports libstratego-lib
+rules main = ?(1, x, 3)

From karltk at strategoxt.org  Fri Nov 19 13:44:00 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 19 Nov 2010 12:44:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21385 -
	strategoxt-javascript-backend/trunk/tests/core
Message-ID: <201011191244.oAJCi0W8010512@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Fri Nov 19 12:44:00 2010
New Revision: 21385
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21385&sc=1

Log:
* Added some simple build-match tests.

Added:
   strategoxt-javascript-backend/trunk/tests/core/build_match_1.str
   strategoxt-javascript-backend/trunk/tests/core/build_match_2.str

Added: strategoxt-javascript-backend/trunk/tests/core/build_match_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/build_match_1.str	Fri Nov 19 12:44:00 2010	(r21385)
@@ -0,0 +1,3 @@
+module build_match_1
+imports libstratego-lib
+rules main = !1 ; ?x ; !2 ; !x

Added: strategoxt-javascript-backend/trunk/tests/core/build_match_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/build_match_2.str	Fri Nov 19 12:44:00 2010	(r21385)
@@ -0,0 +1,3 @@
+module build_match_2
+imports libstratego-lib
+rules main = ![1,2] ; ?x ; !2 ; !x

From karltk at strategoxt.org  Fri Nov 19 13:46:11 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 19 Nov 2010 12:46:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21386 -
	strategoxt-javascript-backend/trunk/src/stratego
Message-ID: <201011191246.oAJCkBQ1010551@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Fri Nov 19 12:46:10 2010
New Revision: 21386
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21386&sc=1

Log:
* Fixed imports.

Modified:
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/signatures.str
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Fri Nov 19 12:44:00 2010	(r21385)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Fri Nov 19 12:46:10 2010	(r21386)
@@ -12,7 +12,9 @@
   signatures
   term-construction
   term-deconstruction
-    		
+  utils
+  variable-access
+      		
 strategies
 	
 	main = io-wrap(s2js ; echo ; ![])
@@ -104,7 +106,15 @@
   			var t = main_0_0(rootCtx, term);
   			if(t == null)
   				rootCtx.debugLog("rewriting failed");
-  			else {
+  			else {//
+ //  Signatures
+ //
+ 
+strategies
+	
+  
+  	
+
   				rootCtx.debugLog(factory.prettify(t));
   			}
   			return t;
@@ -195,7 +205,15 @@
   	body := <translate-definition-body>
   	
  //
- //  Strategies
+ //  Strategies//
+ //  Signatures
+ //
+ 
+strategies
+	
+  
+  	
+
  //
 strategies
 	
@@ -356,20 +374,7 @@
   lifted-call-to-function-instance = fail     	    		 
   
   
- //
- //  Signatures
- //
- 
-strategies
-	
-  js-ConstructorName:
-  	(c, n) -> <conc-strings> ("_cons_", c', "_", n')
-  with
-  	c' := <jsify> c
-  ; n' := <int-to-string> n 
- 
-  	
-  	  	
+   	  	
 rules
 	
   JSTranslate = 

Modified: strategoxt-javascript-backend/trunk/src/stratego/signatures.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/signatures.str	Fri Nov 19 12:44:00 2010	(r21385)
+++ strategoxt-javascript-backend/trunk/src/stratego/signatures.str	Fri Nov 19 12:46:10 2010	(r21386)
@@ -11,3 +11,4 @@
     with
       c' := <jsify> c
     ; n' := <int-to-string> n
+ 
\ No newline at end of file

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Fri Nov 19 12:44:00 2010	(r21385)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Fri Nov 19 12:46:10 2010	(r21386)
@@ -3,8 +3,10 @@
   libstratego-lib
   libstrc
 
+  signatures
   variable-access
-  				
+  utils
+    				
 strategies
 
   js-construct-term =

From karltk at strategoxt.org  Fri Nov 19 14:48:29 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 19 Nov 2010 13:48:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21387 - in
	strategoxt-javascript-backend/trunk: src/stratego tests/core
Message-ID: <201011191348.oAJDmT6P011630@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Fri Nov 19 13:48:29 2010
New Revision: 21387
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21387&sc=1

Log:
* Call with no args works.

Added:
   strategoxt-javascript-backend/trunk/src/stratego/variable-lifting.str
   strategoxt-javascript-backend/trunk/tests/core/call_1.str
   strategoxt-javascript-backend/trunk/tests/core/call_2.str
Modified:
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/src/stratego/utils.str

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Fri Nov 19 12:46:10 2010	(r21386)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Fri Nov 19 13:48:29 2010	(r21387)
@@ -14,6 +14,14 @@
   term-deconstruction
   utils
   variable-access
+  variable-lifting
+
+overlays
+
+  // Number of term/strategy arguments allowed by the default overloads of Strategy.invoke()
+  // The number 5 was chosen mostly to support Aster-generated strategies.
+  MAX_STATIC_TARGS = 5
+  MAX_STATIC_SARGS = 5
       		
 strategies
 	
@@ -106,20 +114,13 @@
   			var t = main_0_0(rootCtx, term);
   			if(t == null)
   				rootCtx.debugLog("rewriting failed");
-  			else {//
- //  Signatures
- //
- 
-strategies
-	
-  
-  	
-
+  			else {
   				rootCtx.debugLog(factory.prettify(t));
   			}
   			return t;
   		}
   	]	
+
  //
  // Strategy and rule definitions
  //
@@ -168,13 +169,24 @@
   with
   	{| 
   		IsStrategyArg, CurrentLiftedFrame:
-//  		java-CheckBuild, java-CheckBuild, IsLiftedTVar,
+//  		js-CheckBuild, js-CheckBuild, IsLiftedTVar,
 //  		IsLiftedSVar, LiftedTVars, LiftedSVars:
   			
-  		(s'*, [])         := <translate-params> s*
+  		debug(!"def-body")	
+  	  ;	(s'*, [])         := <translate-params> s*
+  	  ;	debug(!"sparams")
   	  ; (t'*, bstm-init*) := <translate-params> t*
-  	  ; param*            := <conc> (s'*, t'*)
+  	  ;	debug(!"tparams")
+  	  ; formal*           := <conc> (s'*, t'*)
+      ; param*            := < 
+        	if !formal* => [] then
+        		!""
+        	else 
+        		![", " | formal*]
+        	end>
+  	  ;	debug(!"conc")
   	  ; feil              := <newname> "Fail_"
+  	  ;	debug(!"about to body")
   	  ; bstm              := <translate-strategy(|"ERROR", feil)> s
   	|}  	  	
 
@@ -183,41 +195,106 @@
   ; (id, concat)
     
   translate-param: 
-  	VarDec(x{}, ConstType(_)) -> x
+  	VarDec(x{}, ConstType(_)) -> ($[[x]], [])
   	
   translate-param:
-  	VarDec(x{Offset(_), Escapes()}, ConstType(_)) -> $[var ref_[x] = termRef([x'])]
+  	VarDec(x{Offset(_), Escapes()}, ConstType(_)) -> ($[[x']], $[var ref_[x] = termRef([x'])])
   with
   	x' := <conc-strings> ("ref_", x)
   	
   translate-param:
-  	VarDec(x, FunType(_, _)) -> x
+  	VarDec(x, FunType(_, _)) -> ($[[x]], [])
   with
   	 frame := <CurrentLiftedFrame>
    ; rules(IsStrategyArg: (frame, x))
   
-  translate-inner-definition:
-  	SDefT(x, s*, t*, s) ->
-  	$[
-  		var [x] = [body];
-  	]
-  with
-  	body := <translate-definition-body>
+
+//  translate-inner-definition:
+//  	SDefT(x, s*, t*, s) ->
+//  	$[
+//  		var [x] = [body];
+//  	]
+//  with
+//  	body := <translate-definition-body>
+
+  translate-inner-definition :
+    SDefT(x, s*, t*, s) ->
+    $[
+       var [x] = function() {
+         [instance-field*]
+         [lifted-tfield*]
+         [lifted-sfield*]
+         
+         [body]
+         [invokedynamic*]
+       }
+    ]
+    with
+      ?def
+    ; lifted-tvar*   := <collect-lifted-tvars> def
+    ; lifted-svar*   := <collect-lifted-svars> def
+    ; lifted-sfield* := <map(\y -> $[ var [y]; ] \)> lifted-svar*
+    ; lifted-tfield* := <map(\y -> $[ var [y]; ] \)> lifted-tvar*
+    ; lifted-args    := <conc> (lifted-svar*, lifted-tvar*)
+    with
+      if !lifted-tvar* => lifted-svar* => [] then
+        instance-field* := $[ var [x] = this; ]
+      else
+        instance-field* := []
+      end
+    with
+      {| CurrentLiftedFrame :
+        rules(CurrentLiftedFrame := x{})
+      ; body           := <translate-definition-body>
+      ; invokedynamic* := <maybe-make-invoke-dynamic> (s*, t*)
+      |}
+
+  maybe-make-invoke-dynamic :
+    (s*, t*) -> invokedynamic*
+    with
+      if is-dynamic-signature(|s*, t*) then
+        invokedynamic* := [<make-invoke-dynamic> (s*, t*)]
+      else
+        invokedynamic* := []
+      end
+    
+  make-invoke-dynamic :
+    (s*, t*) ->
+    $[ var invokeDynamic = function(context, term, sargs, targs) {
+         if (sargs === null || targs === null || sargs.length !== [slength] || targs.length !== [tlength])
+           throw "Illegal arguments for " + getName();
+         
+         return invoke(context, term [args]);
+       }
+    ]
+    with
+      slength := <write-to-string> <length> s*
+    ; tlength := <write-to-string> <length> t*
+    ; s'*     := <number(\(_,n) -> <write-to-string> n \)> s*
+    ; t'*     := <number(\(_,n) -> <write-to-string> n \)> t*
+    ; arg*    := <conc> (s'*, t'*)
+    ; args    := 
+      	<if !arg* => [] then
+      		!""
+      	else
+      		!["," | arg*]
+      	end>
+      	
+  is-dynamic-signature(|s*, t*) =
+    where(
+      <gt> (<length> s*, MAX_STATIC_SARGS())
+    + <gt> (<length> t*, MAX_STATIC_TARGS())
+    )
+      	 
   	
  //
- //  Strategies//
- //  Signatures
+ //  Strategies
  //
  
 strategies
-	
-  
-  	
 
- //
-strategies
 	
-	// TODO (karltk) replace s,f with dynrules? do we really need s?
+  // TODO (karltk) replace s,f with dynrules? do we really need s at all?
   translate-strategy(|s,f) = 
   	 (
   	 	translate-CallT-dynamic(|s,f)
@@ -244,13 +321,19 @@
   translate-CallT(|s,feil):
   	CallT(SVar(x), s*, t*) -> 
   	$[
-        term = [x](ctx, term, s'*, t'*);	
+        term = [x](ctx, term [args]);	
         if(term == null) 
             break [feil];
   	]
   with
       s'* := <map(lifted-strategy-to-function)> s*
   	; t'* := <map(js-construct-term)> t*
+  	; arg* := <conc> (s'*, t'*)
+  	; if !arg* => [] then
+  	  	args := ""
+  	  else
+  	  	args := <concat-strings> [", " | arg*]
+  	  end
   	
   translate-Build(|s,f) :
   	Build(t) -> 
@@ -335,7 +418,7 @@
       // }
     ]
     with
-      decl* := <map(to-js-vardecl)> vars
+      decl*  := <map(to-js-vardecl)> vars
     ; body'  := <translate-strategy(|s,f)> body
 
   translate-Let(|s,f) = fail // TODO (karltk)
@@ -371,7 +454,10 @@
   lifted-call-to-function-from-frame = fail
   lifted-call-to-function-with-args = fail
   lifted-call-to-function-direct = fail
-  lifted-call-to-function-instance = fail     	    		 
+  
+  lifted-call-to-function-instance:
+    CallT(SVar(x), _, _) -> x
+  	    		 
   
   
    	  	

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Fri Nov 19 12:46:10 2010	(r21386)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Fri Nov 19 13:48:29 2010	(r21387)
@@ -2,6 +2,9 @@
 imports
  libstrc
 
+ term-construction 
+ variable-access
+ 
 signature
  constructors
  	ReadFrom: Str -> Term

Modified: strategoxt-javascript-backend/trunk/src/stratego/utils.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/utils.str	Fri Nov 19 12:46:10 2010	(r21386)
+++ strategoxt-javascript-backend/trunk/src/stratego/utils.str	Fri Nov 19 13:48:29 2010	(r21387)
@@ -15,3 +15,5 @@
         ; drop(|<string-length> c)
         ; implode-string
       end
+
+

Added: strategoxt-javascript-backend/trunk/src/stratego/variable-lifting.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/stratego/variable-lifting.str	Fri Nov 19 13:48:29 2010	(r21387)
@@ -0,0 +1,97 @@
+/**
+ * Lifting of local variables.
+ *
+ * @author Lennart Kats
+ * @author Karl Trygve Kalleberg
+ */
+module variable-lifting
+imports
+  libstrc
+  
+rules
+ 
+  quiet = rules(InnerDefinition :+= None())
+  
+  collect-lifted-tvars :
+    SDefT(x, _, _, s) -> lifted-tvars
+    with
+      x' := x{}
+    with
+      lifted-tvars  := <LiftedTVars> x'
+    <+
+      tvars         := <tvars> s
+    ; svars         := <svars> s
+    ; direct-lifted := <collect-direct-lifted-vars(|x')> tvars
+    ; rules(
+        // TODO: Do we need to do a fixpoint to find all lifted defs?
+        //       Or is setting an intermediate value sufficient..?
+        LiftedTVars: x' -> direct-lifted
+      )
+    ; indirect-lifted := <collect-indirect-lifted-tvars> svars
+    ; lifted-tvars    := <flatten-list; make-set-with-annos> [direct-lifted, indirect-lifted]
+    ; rules(
+        LiftedTVars: x' -> lifted-tvars
+      )
+  
+  collect-lifted-svars :
+    SDefT(x, _, _, s) -> lifted-svars
+    with
+      x' := x{}
+    with
+      lifted-svars  := <LiftedSVars> x'
+    <+
+      svars         := <svars> s
+    ; direct-lifted := <collect-direct-lifted-vars(|x')> svars
+    ; rules(
+        LiftedSVars: x' -> direct-lifted
+      )
+    ; indirect-lifted := <collect-indirect-lifted-svars> svars
+    ; lifted-svars    := <flatten-list; make-set-with-annos> [direct-lifted, indirect-lifted]
+    ; rules(
+        LiftedSVars: x' -> lifted-svars
+      )
+    ; list-loop({ y:
+        y := <id>{}
+      ; rules(IsStrategyArg: (x', y)) // is field for frame x'
+      })
+  
+  collect-direct-lifted-vars(|lifted-name) =
+    filter(
+      where(
+        get-annos
+      ; one(Frames(one(?lifted-name)))
+      ; one(?Offset(_))
+      )
+    ; not(is-self-call)
+    //; where(write-to-string; debug(!"  lifted:          "))
+    //<+
+    //  where(write-to-string; debug(!"  not lifted:      "); fail)
+    )
+
+  collect-indirect-lifted-tvars =
+    filter({ x:
+      ?x
+    ; <InnerDefinition> x{}
+    ; collect-lifted-tvars
+    ; not([])
+    //; where(<debug(!"  lifted-indirect: ")> (x{}, <id>))
+    })
+
+  collect-indirect-lifted-svars =
+    filter({ x:
+      ?x
+    ; <InnerDefinition> x{}
+    ; collect-lifted-svars
+    ; not([])
+    //; where(<debug(!"  lifted-indirect: ")> (x{}, <id>))
+    })
+  
+  make-set-with-annos =
+    foldr(![], union(strip-annos; eq), ![<id>])
+  
+  is-self-call =
+    with(
+      x := <id>{}
+    )
+  ; get-annos
+  ; one(?Frames([x]))

Added: strategoxt-javascript-backend/trunk/tests/core/call_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/call_1.str	Fri Nov 19 13:48:29 2010	(r21387)
@@ -0,0 +1,3 @@
+module call_1.str
+imports libstratego-lib
+rules main = foo foo = !2

Added: strategoxt-javascript-backend/trunk/tests/core/call_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/call_2.str	Fri Nov 19 13:48:29 2010	(r21387)
@@ -0,0 +1,5 @@
+module call_1.str
+imports libstratego-lib
+rules 
+  main = foo(!2)
+  foo(s) = s

From karltk at strategoxt.org  Fri Nov 19 15:59:55 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Fri, 19 Nov 2010 14:59:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21388 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests/core
Message-ID: <201011191459.oAJExtEM012876@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Fri Nov 19 14:59:54 2010
New Revision: 21388
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21388&sc=1

Log:
* Added support for calling with strategy and term arguments.
 * Fixed a bug in list construction where tails weren't checked properly.

Added:
   strategoxt-javascript-backend/trunk/tests/core/call_3.str
   strategoxt-javascript-backend/trunk/tests/core/call_4.str
   strategoxt-javascript-backend/trunk/tests/core/call_5.str
   strategoxt-javascript-backend/trunk/tests/core/call_6.str
Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Fri Nov 19 13:48:29 2010	(r21387)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Fri Nov 19 14:59:54 2010	(r21388)
@@ -167,6 +167,11 @@
 					},
 					getAnnotations : undefined,
 					match : undefined,
+					checkListTail : function(term) {
+						if(!(typeof(term) === "object" && term.length > 0 && term[0] == "[]"))
+							throw "invalid list tail, " + termType(term);
+						return term;
+					},
 					termType : termType,
 					INT : INT,
 					REAL : REAL,

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Fri Nov 19 13:48:29 2010	(r21387)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Fri Nov 19 14:59:54 2010	(r21388)
@@ -178,11 +178,12 @@
   	  ; (t'*, bstm-init*) := <translate-params> t*
   	  ;	debug(!"tparams")
   	  ; formal*           := <conc> (s'*, t'*)
+  	  ;	debug(!"formal*")
       ; param*            := < 
-        	if !formal* => [] then
+        	if !formal* => "" then
         		!""
         	else 
-        		![", " | formal*]
+        		<string-join(|",")> ["" | formal*]
         	end>
   	  ;	debug(!"conc")
   	  ; feil              := <newname> "Fail_"
@@ -216,76 +217,6 @@
 //  	]
 //  with
 //  	body := <translate-definition-body>
-
-  translate-inner-definition :
-    SDefT(x, s*, t*, s) ->
-    $[
-       var [x] = function() {
-         [instance-field*]
-         [lifted-tfield*]
-         [lifted-sfield*]
-         
-         [body]
-         [invokedynamic*]
-       }
-    ]
-    with
-      ?def
-    ; lifted-tvar*   := <collect-lifted-tvars> def
-    ; lifted-svar*   := <collect-lifted-svars> def
-    ; lifted-sfield* := <map(\y -> $[ var [y]; ] \)> lifted-svar*
-    ; lifted-tfield* := <map(\y -> $[ var [y]; ] \)> lifted-tvar*
-    ; lifted-args    := <conc> (lifted-svar*, lifted-tvar*)
-    with
-      if !lifted-tvar* => lifted-svar* => [] then
-        instance-field* := $[ var [x] = this; ]
-      else
-        instance-field* := []
-      end
-    with
-      {| CurrentLiftedFrame :
-        rules(CurrentLiftedFrame := x{})
-      ; body           := <translate-definition-body>
-      ; invokedynamic* := <maybe-make-invoke-dynamic> (s*, t*)
-      |}
-
-  maybe-make-invoke-dynamic :
-    (s*, t*) -> invokedynamic*
-    with
-      if is-dynamic-signature(|s*, t*) then
-        invokedynamic* := [<make-invoke-dynamic> (s*, t*)]
-      else
-        invokedynamic* := []
-      end
-    
-  make-invoke-dynamic :
-    (s*, t*) ->
-    $[ var invokeDynamic = function(context, term, sargs, targs) {
-         if (sargs === null || targs === null || sargs.length !== [slength] || targs.length !== [tlength])
-           throw "Illegal arguments for " + getName();
-         
-         return invoke(context, term [args]);
-       }
-    ]
-    with
-      slength := <write-to-string> <length> s*
-    ; tlength := <write-to-string> <length> t*
-    ; s'*     := <number(\(_,n) -> <write-to-string> n \)> s*
-    ; t'*     := <number(\(_,n) -> <write-to-string> n \)> t*
-    ; arg*    := <conc> (s'*, t'*)
-    ; args    := 
-      	<if !arg* => [] then
-      		!""
-      	else
-      		!["," | arg*]
-      	end>
-      	
-  is-dynamic-signature(|s*, t*) =
-    where(
-      <gt> (<length> s*, MAX_STATIC_SARGS())
-    + <gt> (<length> t*, MAX_STATIC_TARGS())
-    )
-      	 
   	
  //
  //  Strategies
@@ -326,13 +257,13 @@
             break [feil];
   	]
   with
-      s'* := <map(lifted-strategy-to-function)> s*
-  	; t'* := <map(js-construct-term)> t*
+      s'* := <map(lift-strategy-to-function)> s*
+  	; t'* := <map(js-construct-term(|feil))> t*
   	; arg* := <conc> (s'*, t'*)
   	; if !arg* => [] then
   	  	args := ""
   	  else
-  	  	args := <concat-strings> [", " | arg*]
+  	  	args := <string-join(|",")> ["" | arg*]
   	  end
   	
   translate-Build(|s,f) :
@@ -345,8 +276,8 @@
   with
   	{| js-CheckBuild : 
         where(<debug(!"constructing ")> t)
-  	  ; e := <js-construct-term> t
-  	  ; (dec*, stm*) := <bagof-js-CheckBuild ; unzip ; (id, reverse ; concat)> e    
+  	  ; e := <js-construct-term(|f)> t
+  	  ; (dec*, stm*) := <bagof-js-CheckBuild ; debug(!"checkbuild") ; unzip /* FIXME reverse? */> e    
   		
   	|}
   	
@@ -412,10 +343,8 @@
     translate-Scope(|s,f) : 
     Scope(vars, body) -> 
     $[
-      // { // TODO: using an actual scope might reduce the # of local variable slots
-        [decl*]
-        [body']
-      // }
+      [decl*]
+      [body']
     ]
     with
       decl*  := <map(to-js-vardecl)> vars
@@ -432,34 +361,17 @@
 
 strategies
 	
-  lifted-strategy-to-function =
-  	if ?CallT(_, _, _) then
-  	  lifted-call-to-function
-  	else
-  	    with(
-  		  !SDefT(<newname => x> "jslifted", [], [], <id>)
-  		; rules(DefInit :+= <translate-inner-definition>)
-  		)
-  	  ; <lifted-call-to-function> CallT(SVar(x), [], [])
-    end
+  lift-strategy-to-function =
+  	   lift-call-to-function
+  	<+ lift-other-to-function
 
-  lifted-call-to-function = 
-  	   lifted-call-to-function-self-call
-  	<+ lifted-call-to-function-from-frame
-  	<+ lifted-call-to-function-with-args
-  	<+ lifted-call-to-function-direct
-  	<+ lifted-call-to-function-instance     	    		 
-  
-  lifted-call-to-function-self-call = fail
-  lifted-call-to-function-from-frame = fail
-  lifted-call-to-function-with-args = fail
-  lifted-call-to-function-direct = fail
-  
-  lifted-call-to-function-instance:
+  lift-call-to-function:
     CallT(SVar(x), _, _) -> x
-  	    		 
-  
   
+  lift-other-to-function:
+  	s -> fun 
+  with 
+  	fun := <translate-definition-body> SDefT(<newname => x> "jslifted", [], [], <id>)
    	  	
 rules
 	

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Fri Nov 19 13:48:29 2010	(r21387)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Fri Nov 19 14:59:54 2010	(r21388)
@@ -9,12 +9,12 @@
     				
 strategies
 
-  js-construct-term =
+  js-construct-term(|f) =
        //java-Cache 
     //<+ 
-       js-ConstructAnnoVar
+       js-ConstructAnnoVar(|f)
     <+ js-ConstructVar
-    <+ js-ConstructTerm
+    <+ js-ConstructTerm(|f)
 //    <+ !(<id>, <js-ConstructTerm>)
 //       ; (java-CacheConstant-again <+ java-CacheConstant <+ Snd)
 
@@ -32,16 +32,16 @@
   
 rules
 
-  js-ConstructTerm :
+  js-ConstructTerm(|f) :
     Int(i) -> $[ factory.makeInt([<js-mk-int-const> i]) ]
     
-  js-ConstructTerm :
+  js-ConstructTerm(|f) :
     Real(x) -> $[ factory.makeReal([<try(real-to-string)> x]) ]
 
-  js-ConstructTerm :
+  js-ConstructTerm(|f) :
     Str(x) -> $[ factory.makeString("[<escape> x]") ]
 
-  js-ConstructTerm : // HACK: BAFReader work-around
+  js-ConstructTerm(|f) : // HACK: BAFReader work-around
     Str([]) -> $< factory.makeString("[]") >
     
   js-ConstructVar :
@@ -49,35 +49,35 @@
   with 
       e := <js-VarToReadRef> x
 
-  js-ConstructAnnoVar :
-    Anno(Var(x), pt2) -> $[ factory.annotateTerm(e, checkListAnnos(factory, [<js-construct-term> pt2])) ]
+  js-ConstructAnnoVar(|f) :
+    Anno(Var(x), pt2) -> $[ factory.annotateTerm(e, checkListAnnos(factory, [<js-construct-term(|f)> pt2])) ]
   where
       <js-ConstructVar> Var(x) => e
 
-  js-ConstructTerm :
-    Anno(pt1, Op("Nil", [])) -> <js-construct-term> pt1
+  js-ConstructTerm(|f) :
+    Anno(pt1, Op("Nil", [])) -> <js-construct-term(|f)> pt1
   where 
       <not(?Var(_))> pt1
 
-  js-ConstructTerm :
-    Anno(pt1, pt2) -> $[ factory.annotateTerm([<js-construct-term> pt1], checkListAnnos(termFactory,[<js-construct-term> pt2])) ]
+  js-ConstructTerm(|f) :
+    Anno(pt1, pt2) -> $[ factory.annotateTerm([<js-construct-term(|f)> pt1], checkListAnnos(termFactory,[<js-construct-term(|f)> pt2])) ]
   where 
       <not(?Op("Nil", []))> pt2
     ; <not(?Var(_))> pt1
 
-  js-ConstructTerm :
+  js-ConstructTerm(|f) :
     Op(c, t*) -> ${ factory.makeAppl({cons}, [{arg*}]) }
   where
       not(is-ListOp + is-TupleOp)
   with
       cons := <js-ConstructorName-expr> (c, <length> t*)
-    ; arg* := <map(js-construct-term) ; string-join(|",")> t*
+    ; arg* := <map(js-construct-term(|f)) ; string-join(|",")> t*
     
-  js-ConstructTerm :
+  js-ConstructTerm(|f) :
     Explode(t1, t2) -> x
     with
-      e_t1 := <js-construct-term> t1
-    ; e_t2 := <js-construct-term> t2
+      e_t1 := <js-construct-term(|f)> t1
+    ; e_t2 := <js-construct-term(|f)> t2
     ; x    := <newname> "mkterm"
     ; rules(
         js-CheckBuild :+=
@@ -90,54 +90,36 @@
       )
   // TODO dynrule for fail ?
   
-  js-ConstructTerm : 
+  js-ConstructTerm(|f) : 
     Op("", args) -> $[ factory.makeTuple([args']) ]
   with
-      args' := <map(js-construct-term) ; string-join(|",")> args
+      args' := <map(js-construct-term(|f)) ; string-join(|",")> args
     
-  js-ConstructTerm :
+  js-ConstructTerm(|f) :
     Op("Nil", []) -> $[ factory.makeList() ]
 
-  js-ConstructTerm :
-    Op("Cons", [t1, t2]) ->  $[ factory.makeListCons([<js-construct-term> t1], [e]) ]
-    with
-      <js-construct-term> t2
-        ; if <not(Anno(is-ListOp, id))> t2 then 
-            js-check-aterm-list 
-          else
-        	id  	
-//              if ?|[ x_constants.x_constant ]| + ?expr |[ x ]| then
-//                !|[ (IStrategoList) ~expr:<id> ]|
-//              else
-//                try(java-UncastATerm)
-//              end
-//              ; try(java-CastATermListSetAnnotations)
-            end => e
+  js-ConstructTerm(|f) :
+    Op("Cons", [t1, t2]) ->  $[ factory.makeListCons([<js-construct-term(|f)> t1], [e]) ]
+  with
+    <js-construct-term(|f)> t2
+  ; if <not(Anno(is-ListOp, id))> t2 then 
+      js-check-aterm-list(|f)
+    else
+      id  	
+    end => e
 
-  js-check-aterm-list :
+  js-check-aterm-list(|feil) :
     e -> x
   with 
     x := <newname> "list"
   ; rules(
-      java-CheckBuild :+=
+      js-CheckBuild :+=
         ( $[ var [x]; ]
         , $[
-            x = checkListTail(e);
-            if (x == null) break Fail;
+            [x] = factory.checkListTail([e]);
+            if ([x] == null) break [feil];
           ]
         )
     )
     
   js-ConstructorName-expr = js-ConstructorName
-      
-/*        
-  js-ConstructorName-expr =
-    with(
-      IsLocalOpDecl
-    <+
-      // HACK: locally redefine external constructors to avoid ambiguous imports
-      //       (should this be done for congruences as well?)
-      JavaCopyConstructor
-    )
-  ; !expr |[ ~x:<MainClassName>.~x:<java-ConstructorName> ]|
-        */
\ No newline at end of file

Added: strategoxt-javascript-backend/trunk/tests/core/call_3.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/call_3.str	Fri Nov 19 14:59:54 2010	(r21388)
@@ -0,0 +1,5 @@
+module call_3
+imports libstratego-lib
+rules 
+  main = foo(|2)
+  foo(|t) = !t

Added: strategoxt-javascript-backend/trunk/tests/core/call_4.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/call_4.str	Fri Nov 19 14:59:54 2010	(r21388)
@@ -0,0 +1,5 @@
+module call_4
+imports libstratego-lib
+rules 
+  main = foo(!2|3)
+  foo(s|t) = ![<s>,t]

Added: strategoxt-javascript-backend/trunk/tests/core/call_5.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/call_5.str	Fri Nov 19 14:59:54 2010	(r21388)
@@ -0,0 +1,5 @@
+module call_5
+imports libstratego-lib
+rules 
+  main = foo(!2)
+  foo(s) = s

Added: strategoxt-javascript-backend/trunk/tests/core/call_6.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/core/call_6.str	Fri Nov 19 14:59:54 2010	(r21388)
@@ -0,0 +1,5 @@
+module call_6
+imports libstratego-lib
+rules 
+  main = !3 ; ?a ; foo(fail, !2 | [1,2,3], a)
+  foo(s1, s2 | t1, t2) = s1 <+ ![<s2>, t2 | t1]

From karltk at strategoxt.org  Sun Nov 21 12:00:42 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 21 Nov 2010 11:00:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21389 - in
	strategoxt-javascript-backend/trunk: . scripts src/javascript
	tests tests/core
Message-ID: <201011211100.oALB0gXT015310@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Sun Nov 21 11:00:41 2010
New Revision: 21389
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21389&sc=1

Log:
* Initial makefile for building and running all core tests; still need to handle input/output.

Added:
   strategoxt-javascript-backend/trunk/scripts/
   strategoxt-javascript-backend/trunk/scripts/add-cli-wrapper.sh   (contents, props changed)
   strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
   strategoxt-javascript-backend/trunk/tests/Makefile
Modified:
   strategoxt-javascript-backend/trunk/AUTHORS
   strategoxt-javascript-backend/trunk/README
   strategoxt-javascript-backend/trunk/tests/core/   (props changed)

Modified: strategoxt-javascript-backend/trunk/AUTHORS
==============================================================================
--- strategoxt-javascript-backend/trunk/AUTHORS	Fri Nov 19 14:59:54 2010	(r21388)
+++ strategoxt-javascript-backend/trunk/AUTHORS	Sun Nov 21 11:00:41 2010	(r21389)
@@ -0,0 +1,2 @@
+ * Karl Trygve Kalleberg
+ * Lennart Kats

Modified: strategoxt-javascript-backend/trunk/README
==============================================================================
--- strategoxt-javascript-backend/trunk/README	Fri Nov 19 14:59:54 2010	(r21388)
+++ strategoxt-javascript-backend/trunk/README	Sun Nov 21 11:00:41 2010	(r21389)
@@ -2,6 +2,6 @@
  Build Time Dependencies
 --------------------------
 
- * Mozilla Rhino: lib/js.jar
+ * Mozilla Rhino, place as lib/js.jar
  * Stratego/XT 0.17 or newer
  

Added: strategoxt-javascript-backend/trunk/scripts/add-cli-wrapper.sh
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/scripts/add-cli-wrapper.sh	Sun Nov 21 11:00:41 2010	(r21389)
@@ -0,0 +1,4 @@
+#! /bin/bash -x
+
+bp=$(dirname $0)
+cat ${bp}/../src/javascript/srts.js - ${bp}/../src/javascript/cli-wrapper.js

Added: strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Sun Nov 21 11:00:41 2010	(r21389)
@@ -0,0 +1,2 @@
+debug.main(["[]", []]);
+

Added: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Sun Nov 21 11:00:41 2010	(r21389)
@@ -0,0 +1,16 @@
+
+COREFILES  := $(wildcard core/*.str)
+TESTFILES  := $(COREFILES)
+CTREEFILES := $(subst .str,.ctree,$(TESTFILES))
+TESTRUNS   := $(subst .str,.run,$(TESTFILES))
+
+all: $(TESTRUNS)
+
+%.ctree : %.str
+	strc -i $< -F -o $@
+
+%.js : %.ctree
+	../trans/s2js -i $< | ../scripts/add-cli-wrapper.sh > $@
+
+%.run : %.js
+	java -jar ../lib/js.jar $< && touch $@

From karltk at strategoxt.org  Sun Nov 21 12:09:04 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 21 Nov 2010 11:09:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21390 -
	strategoxt-javascript-backend/trunk/scripts
Message-ID: <201011211109.oALB94NO015586@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Sun Nov 21 11:09:04 2010
New Revision: 21390
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21390&sc=1

Log:
* First implementation of script to compile then execute any .str file on the Rhino JS engine -- somewhat like the old stri. 
 * Missing I/O.

Added:
   strategoxt-javascript-backend/trunk/scripts/strjsi   (contents, props changed)

Added: strategoxt-javascript-backend/trunk/scripts/strjsi
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/scripts/strjsi	Sun Nov 21 11:09:04 2010	(r21390)
@@ -0,0 +1,11 @@
+#! /bin/bash
+#
+# Usage: strjsi <file.str>
+#
+
+bp=$(dirname $0)
+bn=$(basename $1)
+strc -S -i $1 -F -o /tmp/${bn}.ctree
+${bp}/../src/stratego/s2js -i /tmp/${bn}.ctree > /tmp/${bn}.js.t
+cat ${bp}/../src/javascript/srts.js /tmp/${bn}.js.t ${bp}/../src/javascript/cli-wrapper.js > /tmp/${bn}.js
+java -jar lib/js.jar /tmp/${bn}.js

From karltk at strategoxt.org  Sun Nov 21 16:06:45 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 21 Nov 2010 15:06:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21391 - in
	strategoxt-javascript-backend/trunk: scripts src/javascript
	src/stratego
Message-ID: <201011211506.oALF6j6b019002@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Sun Nov 21 15:06:45 2010
New Revision: 21391
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21391&sc=1

Log:
* Added support for command line arguments with Rhino.

Modified:
   strategoxt-javascript-backend/trunk/scripts/strjsi
   strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str

Modified: strategoxt-javascript-backend/trunk/scripts/strjsi
==============================================================================
--- strategoxt-javascript-backend/trunk/scripts/strjsi	Sun Nov 21 11:09:04 2010	(r21390)
+++ strategoxt-javascript-backend/trunk/scripts/strjsi	Sun Nov 21 15:06:45 2010	(r21391)
@@ -8,4 +8,4 @@
 strc -S -i $1 -F -o /tmp/${bn}.ctree
 ${bp}/../src/stratego/s2js -i /tmp/${bn}.ctree > /tmp/${bn}.js.t
 cat ${bp}/../src/javascript/srts.js /tmp/${bn}.js.t ${bp}/../src/javascript/cli-wrapper.js > /tmp/${bn}.js
-java -jar lib/js.jar /tmp/${bn}.js
+java -jar lib/js.jar /tmp/${bn}.js $2 $3 $4 $5 $6 $7 $9 $10

Modified: strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Sun Nov 21 11:09:04 2010	(r21390)
+++ strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Sun Nov 21 15:06:45 2010	(r21391)
@@ -1,2 +1,2 @@
-debug.main(["[]", []]);
+debug.main(arguments);
 

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Sun Nov 21 11:09:04 2010	(r21390)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Sun Nov 21 15:06:45 2010	(r21391)
@@ -1,4 +1,15 @@
 SRTS = {
+		cliArgumentsToList : function(jslist, factory) {
+			var r = factory.makeList();
+			print(factory.prettify(r));
+			for(var i = jslist.length-2; i >= 0; i--) {
+				print(jslist[i]);
+				r = factory.makeListCons(jslist[i], r);
+			}
+			r = factory.makeListCons(jslist[jslist.length-1], r)
+			print(factory.prettify(r));
+			return r;
+		},
 		initContext : function() {
 			var stack = [];
 			var log = function() {

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Sun Nov 21 11:09:04 2010	(r21390)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Sun Nov 21 15:06:45 2010	(r21391)
@@ -111,7 +111,7 @@
   js-main-method =
   	!$[
   		c.main = function(term) {
-  			var t = main_0_0(rootCtx, term);
+  			var t = main_0_0(rootCtx, SRTS.cliArgumentsToList(term, factory));
   			if(t == null)
   				rootCtx.debugLog("rewriting failed");
   			else {

From karltk at strategoxt.org  Sun Nov 21 17:03:29 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 21 Nov 2010 16:03:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21392 - in
	strategoxt-javascript-backend/trunk/src: javascript stratego
Message-ID: <201011211603.oALG3TZx020020@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Sun Nov 21 16:03:29 2010
New Revision: 21392
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21392&sc=1

Log:
* Added support for parsing aterms from string; missing annotations and placeholders.

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Sun Nov 21 15:06:45 2010	(r21391)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Sun Nov 21 16:03:29 2010	(r21392)
@@ -1,6 +1,7 @@
 SRTS = {
+
 		cliArgumentsToList : function(jslist, factory) {
-			var r = factory.makeList();
+			var r = factory.makeEmptyList();
 			print(factory.prettify(r));
 			for(var i = jslist.length-2; i >= 0; i--) {
 				print(jslist[i]);
@@ -10,6 +11,7 @@
 			print(factory.prettify(r));
 			return r;
 		},
+
 		initContext : function() {
 			var stack = [];
 			var log = function() {
@@ -87,66 +89,302 @@
 				}
 				return builder;
 			}
-			
-			return {
-				debugLog : log,
-				popOnFailure : function() {
-					nextStackPos--;
-				},
-				printStackTrace : function() {
-					log("Rewriting failed at:");
-					for(var i = 0; i < maxStackPos; i++)
-						log(stack[i]);
-				},
-				popOnSuccess : function() {
-					maxStackPos--;
-					nextStackPos--;
-				},
-				push : function(funName) {
-					if(nextStackPos < stack.length)
-						stack[nextStackPos] = funName;
-					else
-						stack.push(funName);
-					nextStackPos++;
-					maxStackPos = nextStackPos;
-				},
-				factory : {
+			var PushbackStringIterator = function(text) {
+				this.offset = 0;
+				this.text = text;
+				this.read = function() {
+					return text[this.offset++];
+				}
+				this.unread = function() {
+					this.offset--;
+				}
+			};
+
+			function isLetter(ch) {
+				return ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z';
+			}
+
+			function isDigit(ch) {
+				return ch >= '0' && ch <= '9'; 
+			}
+
+			function isLetterOrDigit(ch) {
+				return isLetter(ch) || isDigit(ch);
+			}
+
+			var parseFromStream = function(stringIterator) {
+				parseSkip(stringIterator);
+				var ch = stringIterator.read();
+				switch(ch) {
+				case '[': return parseAnno(stringIterator, parseList(stringIterator));
+				case '(': return parseAnno(stringIterator, parseTuple(stringIterator));
+				case '"': return parseAnno(stringIterator, parseString(stringIterator));
+				case '<': return parsePlaceholder(stringIterator);
+				default:
+					stringIterator.unread(ch);
+				if (isLetter(ch)) {
+					return parseAnno(stringIterator, parseAppl(stringIterator));
+				}
+				else if(isDigit(ch)) {
+					return parseAnno(stringIterator, parseNumber(stringIterator));
+				}
+				}
+				throw new ParseError("Invalid term: '" + ch + "'");
+			};
+
+			var parseAnno = function(stringIterator, term) {
+				parseSkip(stringIterator);
+				var ch = stringIterator.read();
+				if (ch == '{') {
+					var annos = parseTermSequence(stringIterator, '}');
+					return annotateTerm(term, factory.makeList(annos));
+				} else {
+					stringIterator.unread(ch);
+					return term;
+				}
+			};
+
+			var parseString = function(stringIterator) {
+				var ch = stringIterator.read();
+				if(ch == '"') {
+					return factory.makeString("");
+				}
+				var sb = [];
+				var escaped = false;
+				do {
+					escaped = false;
+					if(ch == '\\') {
+						escaped = true;
+						ch = stringIterator.read();
+					}
+					if(escaped) {
+						switch(ch) {
+						case 'n':
+							sb.push('\n');
+							break;
+						case 't':
+							sb.push('\t');
+							break;
+						case 'b':
+							sb.push('\b');
+							break;
+						case 'f':
+							sb.push('\f');
+							break;
+						case 'r':
+							sb.push('\r');
+							break;
+						case '\\':
+							sb.push('\\');
+							break;
+						case '\'':
+							sb.push('\'');
+							break;
+						case '\"':
+							sb.push('\"');
+							break;
+						case '0':
+						case '1':
+						case '2':
+						case '3':
+						case '4':
+						case '5':
+						case '6':
+						case '7':
+						case '8':
+						case '9':
+							throw new NotImplementedException();
+						default:
+							sb.push("\\" + ch);
+						}
+						ch = stringIterator.read();
+					} else if(ch != '\"') {
+						if (ch == -1) {
+							throw new ParseError("Unterminated string: " + sb);
+						}
+						sb.push(ch);
+						ch = stringIterator.read();
+					}
+				} while(escaped || ch != '\"');
+				return factory.makeString(sb.join(""));
+			};
+
+			var parseAppl = function(stringIterator) {
+				//System.err.println("appl");
+				// TODO: share stringbuilder instances?
+				var sb = [];
+				var ch = stringIterator.read();
+				do {
+					sb.push(ch);
+					ch = stringIterator.read();
+				} // TODO: use a switch for this
+				while(isLetterOrDigit(ch) || ch == '_' || ch == '-'
+					|| ch == '+' || ch == '*' || ch == '$');
+
+				//System.err.println(" - " + sb.toString());
+
+				stringIterator.unread(ch);
+				parseSkip(stringIterator);
+				ch = stringIterator.read();
+
+				if(ch == '(') {
+					var l = parseTermSequence(stringIterator, ')');
+					var c = factory.makeCtor(sb.join(""), l.length);
+					return factory.makeAppl(c, l);
+				} else {
+					stringIterator.unread(ch);
+					var c = factory.makeCtor(sb.join(""), 0);
+					return factory.makeAppl(c, EMPTY);
+				}
+			};
+
+			var parsePlaceholder = function(stringIterator) {
+				var template = parseFromStream(stringIterator);
+				parseSkip(stringIterator);
+				if (stringIterator.read() != '>') {
+					throw new ParseError("Expected: '>'");
+				}
+				return makePlaceholder(template);
+			};
+
+			var parseTuple = function(stringIterator) {
+				//System.err.println("tuple");
+				return factory.makeTuple(parseTermSequence(stringIterator, ')'));
+			};
+
+
+			var parseTermSequence = function(stringIterator, endChar) {
+				//System.err.println("sequence");
+				var pos = stringIterator.offset;
+				var els = [];
+				parseSkip(stringIterator);
+				var ch = stringIterator.read();
+				if(ch == endChar) {
+					return els;
+				}
+				stringIterator.unread(ch);
+				do {
+					els.push(parseFromStream(stringIterator));
+					parseSkip(stringIterator);
+					ch = stringIterator.read();
+				} while(ch == ',');
+
+				if (ch != endChar) {
+					stringIterator.unread(ch);
+					parseSkip(stringIterator);
+					ch = stringIterator.read();
+				}
+
+				if(ch != endChar) {
+					throw new ParseError("Sequence starting at offset " + pos + " must end with '" + endChar + "', saw '" + ch + "'");
+				}
+				return els;
+			};
+
+			var parseList = function(stringIterator) {
+				return factory.makeList(parseTermSequence(stringIterator, ']'));
+			};
+
+			var parseNumber = function(stringIterator) {
+				//System.err.println("number");
+				var whole = parseDigitSequence(stringIterator);
+				var ch = stringIterator.read();
+				if(ch == '.') {
+					var frac = parseDigitSequence(stringIterator);
+					ch = stringIterator.read();
+					if(ch == 'e' || ch == 'E') {
+						var exp = parseDigitSequence(stringIterator);
+						var d = parseFloat(whole + "." + frac + "e" + exp);
+						return factory.makeReal(d);
+					}
+					stringIterator.unread(ch);
+					var d = parseFloat(whole + "." + frac);
+					return factory.makeReal(d);
+				}
+				stringIterator.unread(ch);
+				return factory.makeInt(parseInt(whole));
+			};
+
+			var parseDigitSequence = function(stringIterator) {
+				var sb = [];
+				var ch = stringIterator.read();
+				do {
+					sb.push(ch);
+					ch = stringIterator.read();
+				} while(isDigit(ch));
+				stringIterator.unread(ch);
+				return sb.join("");
+			};
+
+			var parseSkip = function(stringIterator){
+				for (;;) {
+					var b = stringIterator.read();
+					switch (b) {
+					case ' ': case '\t': case '\n':
+						continue;
+					default:
+						stringIterator.unread(b);
+					return;
+					}
+				}
+			};
+
+			var factory = {
 					makeCtor : function(name, arity) { 
 						return { name : name, arity : arity };
 					},
+
 					makeInt : function(val) {
 						return Math.round(val);
 					},
+
 					makeReal : function(val) {
 						return val;
 					},
+
 					makeString : function(val) {
 						return val;
 					},
-					makeList : function() {
+
+					makeList : function(list) {
+						var r = factory.makeEmptyList();
+						for(var i = list.length-1; i >= 0; i--) {
+							r = factory.makeListCons(list[i], r);
+						}
+						return r;
+					},
+					
+					makeEmptyList : function() {
 						return ["[]", []];
 					},
+
 					makeListCons : function(car, cdr) {
 						return ["[]", car, cdr];
 					},
+
 					makeTuple : function(args) {
 						var r = ["()"];
-						for(var i = 0; i < arguments.length; i++)
-							r.push(arguments[i]);
+						for(var i = 0; i < args.length; i++) {
+							r.push(args[i]);
+						}
 						return r;
 					},
+
 					makeAppl : function(ctor, args) {
 						var r = [ctor.name];
 						assert("ctor arity != argument count", ctor.arity == args.length);
 						r = r.concat(args);
 						return r;
 					},
+
 					prettify : function(term) {
 						return doPrettify(term, [], false).join("");
 					},
+
 					isEmptyList : function(term) {
 						return typeof(term) === 'object' && term.length === 1 && term[0] == "[]"; 
 					},
+
 					getSubterm : function(term, idx) {
 						var tp = termType(term);
 						switch(tp) {
@@ -156,12 +394,15 @@
 							throw "not implemented";
 						}
 					},
+
 					head : function(list) {
 						return list[1];
 					},
+
 					tail : function(list) {
 						return list[2];
 					},
+
 					getSubtermCount : function(term) {
 						var tp = termType(term);
 						switch(tp) {
@@ -170,27 +411,61 @@
 							throw "not implemented";
 						}
 					},
+
 					getConstructor : function(appl) {
 						return { name : appl[0], arity : appl.length-1}
 					},
+
 					ctorEquals : function(ctor1, ctor2) {
 						return ctor1.name == ctor2.name && ctor1.arity == ctor2.arity; 
 					},
+
 					getAnnotations : undefined,
 					match : undefined,
+
 					checkListTail : function(term) {
 						if(!(typeof(term) === "object" && term.length > 0 && term[0] == "[]"))
 							throw "invalid list tail, " + termType(term);
 						return term;
 					},
+
 					termType : termType,
+
 					INT : INT,
 					REAL : REAL,
 					STRING : STRING,
 					LIST : LIST,
 					TUPLE : TUPLE,
-					APPL : APPL
-				}
+					APPL : APPL,
+
+					parse : function(text) {
+						return parseFromStream(new PushbackStringIterator(text));
+					}
+			};
+
+			return {
+				debugLog : log,
+				popOnFailure : function() {
+					nextStackPos--;
+				},
+				printStackTrace : function() {
+					log("Rewriting failed at:");
+					for(var i = 0; i < maxStackPos; i++)
+						log(stack[i]);
+				},
+				popOnSuccess : function() {
+					maxStackPos--;
+					nextStackPos--;
+				},
+				push : function(funName) {
+					if(nextStackPos < stack.length)
+						stack[nextStackPos] = funName;
+					else
+						stack.push(funName);
+					nextStackPos++;
+					maxStackPos = nextStackPos;
+				},
+				factory : factory
 			}
 		}
 };

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Sun Nov 21 15:06:45 2010	(r21391)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Sun Nov 21 16:03:29 2010	(r21392)
@@ -16,13 +16,6 @@
   variable-access
   variable-lifting
 
-overlays
-
-  // Number of term/strategy arguments allowed by the default overloads of Strategy.invoke()
-  // The number 5 was chosen mostly to support Aster-generated strategies.
-  MAX_STATIC_TARGS = 5
-  MAX_STATIC_SARGS = 5
-      		
 strategies
 	
 	main = io-wrap(s2js ; echo ; ![])

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Sun Nov 21 15:06:45 2010	(r21391)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Sun Nov 21 16:03:29 2010	(r21392)
@@ -91,12 +91,12 @@
   // TODO dynrule for fail ?
   
   js-ConstructTerm(|f) : 
-    Op("", args) -> $[ factory.makeTuple([args']) ]
+    Op("", args) -> $< factory.makeTuple([<args'>]) >
   with
       args' := <map(js-construct-term(|f)) ; string-join(|",")> args
     
   js-ConstructTerm(|f) :
-    Op("Nil", []) -> $[ factory.makeList() ]
+    Op("Nil", []) -> $[ factory.makeEmptyList() ]
 
   js-ConstructTerm(|f) :
     Op("Cons", [t1, t2]) ->  $[ factory.makeListCons([<js-construct-term(|f)> t1], [e]) ]

From karltk at strategoxt.org  Sun Nov 21 18:06:35 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 21 Nov 2010 17:06:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21393 - in
	strategoxt-javascript-backend/trunk: src/javascript tests
Message-ID: <201011211706.oALH6Zw9020883@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Sun Nov 21 17:06:34 2010
New Revision: 21393
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21393&sc=1

Log:
* Added early support for annotations.

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/tests/Makefile

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Sun Nov 21 16:03:29 2010	(r21392)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Sun Nov 21 17:06:34 2010	(r21393)
@@ -1,14 +1,17 @@
+/**
+ * @author Karl Trygve Kalleberg
+ * @author Lennart Kats
+ */
+
 SRTS = {
 
 		cliArgumentsToList : function(jslist, factory) {
 			var r = factory.makeEmptyList();
-			print(factory.prettify(r));
 			for(var i = jslist.length-2; i >= 0; i--) {
-				print(jslist[i]);
 				r = factory.makeListCons(jslist[i], r);
 			}
-			r = factory.makeListCons(jslist[jslist.length-1], r)
-			print(factory.prettify(r));
+			if(jslist.length > 0)
+				r = factory.makeListCons(jslist[jslist.length-1], r)
 			return r;
 		},
 
@@ -28,23 +31,27 @@
 			}
 			var nextStackPos = 0;
 			var maxStackPos = 0;
-			var INT = 1, REAL = 2, STRING = 3, LIST = 4, TUPLE = 5, APPL = 6, INVALID = -1;
+			var INT = 1, REAL = 2, STRING = 3, LIST = 4, TUPLE = 5, APPL = 6, ANNO = 7, PLACEHOLDER = 8, INVALID = -1;
+
 			var termType = function (term) {
 				var tp = typeof(term);
 				if(tp === 'number')
 					return Math.round(term) == term ? INT : REAL; // FIXME (karltk) too cheeky, might need to tag the values
 				if(tp === 'string')
 					return STRING;
-				if(tp === 'object' && typeof(term[0]) === 'string') {
-					if(term[0] === "[]")
-						return LIST;
-					if(term[0] === "()")
-						return TUPLE;
-					return APPL;
-				}
+				if(tp === 'object')
+					return term.termType;
 				return INVALID;
 			}
+			
 			var doPrettify = function(term, builder, inlist) {
+				if(typeof(term.anno) !== 'undefined') {
+					doPrettify(term[1], builder, false);
+					builder.push("{");
+					doPrettify(term[2], builder, true);
+					builder.push("}");
+					return builder;
+				}
 				var tp = termType(term);
 				switch(tp) {
 				case INT:
@@ -89,6 +96,7 @@
 				}
 				return builder;
 			}
+			
 			var PushbackStringIterator = function(text) {
 				this.offset = 0;
 				this.text = text;
@@ -137,7 +145,7 @@
 				var ch = stringIterator.read();
 				if (ch == '{') {
 					var annos = parseTermSequence(stringIterator, '}');
-					return annotateTerm(term, factory.makeList(annos));
+					return factory.annotateTerm(term, factory.makeList(annos));
 				} else {
 					stringIterator.unread(ch);
 					return term;
@@ -210,19 +218,14 @@
 			};
 
 			var parseAppl = function(stringIterator) {
-				//System.err.println("appl");
-				// TODO: share stringbuilder instances?
 				var sb = [];
 				var ch = stringIterator.read();
 				do {
 					sb.push(ch);
 					ch = stringIterator.read();
-				} // TODO: use a switch for this
-				while(isLetterOrDigit(ch) || ch == '_' || ch == '-'
+				} while(isLetterOrDigit(ch) || ch == '_' || ch == '-'
 					|| ch == '+' || ch == '*' || ch == '$');
 
-				//System.err.println(" - " + sb.toString());
-
 				stringIterator.unread(ch);
 				parseSkip(stringIterator);
 				ch = stringIterator.read();
@@ -248,13 +251,11 @@
 			};
 
 			var parseTuple = function(stringIterator) {
-				//System.err.println("tuple");
 				return factory.makeTuple(parseTermSequence(stringIterator, ')'));
 			};
 
 
 			var parseTermSequence = function(stringIterator, endChar) {
-				//System.err.println("sequence");
 				var pos = stringIterator.offset;
 				var els = [];
 				parseSkip(stringIterator);
@@ -286,7 +287,6 @@
 			};
 
 			var parseNumber = function(stringIterator) {
-				//System.err.println("number");
 				var whole = parseDigitSequence(stringIterator);
 				var ch = stringIterator.read();
 				if(ch == '.') {
@@ -355,11 +355,17 @@
 					},
 					
 					makeEmptyList : function() {
-						return ["[]", []];
+						var r = ["[]", []];
+						r.subtermCount = 0;
+						r.termType = LIST;
+						return r;
 					},
 
 					makeListCons : function(car, cdr) {
-						return ["[]", car, cdr];
+						var r = ["[]", car, cdr];
+						r.subtermCount = cdr.subtermCount + 1;
+						r.termType = LIST;
+						return r;
 					},
 
 					makeTuple : function(args) {
@@ -367,6 +373,11 @@
 						for(var i = 0; i < args.length; i++) {
 							r.push(args[i]);
 						}
+						r.termType = TUPLE;
+						r.subtermCount = args.length;
+						r.getSubTerm = function(index) {
+							return r[index + 1];
+						}
 						return r;
 					},
 
@@ -374,6 +385,11 @@
 						var r = [ctor.name];
 						assert("ctor arity != argument count", ctor.arity == args.length);
 						r = r.concat(args);
+						r.termType = APPL;
+						r.subtermCount = args.length;
+						r.getSubterm = function(index) {
+							return r[index + 1];
+						}
 						return r;
 					},
 
@@ -386,13 +402,7 @@
 					},
 
 					getSubterm : function(term, idx) {
-						var tp = termType(term);
-						switch(tp) {
-						case TUPLE:
-						case APPL: return term[idx + 1];
-						default:
-							throw "not implemented";
-						}
+						return term.getSubterm(idx);
 					},
 
 					head : function(list) {
@@ -404,15 +414,10 @@
 					},
 
 					getSubtermCount : function(term) {
-						var tp = termType(term);
-						switch(tp) {
-						case TUPLE: return term.length - 1;
-						default:
-							throw "not implemented";
-						}
+						return term.subtermCount;
 					},
 
-					getConstructor : function(appl) {
+					getCtor : function(appl) {
 						return { name : appl[0], arity : appl.length-1}
 					},
 
@@ -420,7 +425,10 @@
 						return ctor1.name == ctor2.name && ctor1.arity == ctor2.arity; 
 					},
 
-					getAnnotations : undefined,
+					getAnnotations : function(annoterm) {
+						return annoterm[2];
+					},
+					
 					match : undefined,
 
 					checkListTail : function(term) {
@@ -440,6 +448,32 @@
 
 					parse : function(text) {
 						return parseFromStream(new PushbackStringIterator(text));
+					},
+					
+					annotateTerm : function(term, anno) {
+						var r = ["{}", term, anno];
+						r.anno = true;
+						switch(factory.termType(term)) {
+						case ANNO:
+						case TUPLE:
+						case LIST:
+						case APPL:
+							r.termType = term.termType;
+							r.getSubtermCount = term.getSubtermCount;
+							r.getSubterm = term.getSubterm;
+							r.isEmptyList = term.isEmptyList;
+							break;
+						case STRING: 
+							r.termType = STRING;
+							break;
+						case REAL:
+							r.termType = REAL;
+							break;
+						case INT:
+							r.termType = INT;
+							break; 
+						};
+						return r;
 					}
 			};
 

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Sun Nov 21 16:03:29 2010	(r21392)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Sun Nov 21 17:06:34 2010	(r21393)
@@ -14,3 +14,6 @@
 
 %.run : %.js
 	java -jar ../lib/js.jar $< && touch $@
+
+clean:
+	rm -f core/*.run core/*.dep core/*.ctree

From karltk at strategoxt.org  Sun Nov 21 18:51:43 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 21 Nov 2010 17:51:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21394 - in
	strategoxt-javascript-backend/trunk: src/stratego tests
Message-ID: <201011211751.oALHphhC021305@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Sun Nov 21 17:51:43 2010
New Revision: 21394
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21394&sc=1

Log:
* Enabled backend simplifications. 
 * Added support for Lets. 
 * Temporary workaround for passing fail as higher-order function until we have the SSL in place.

Modified:
   strategoxt-javascript-backend/trunk/src/stratego/backend-simplify.str
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/tests/Makefile

Modified: strategoxt-javascript-backend/trunk/src/stratego/backend-simplify.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/backend-simplify.str	Sun Nov 21 17:06:34 2010	(r21393)
+++ strategoxt-javascript-backend/trunk/src/stratego/backend-simplify.str	Sun Nov 21 17:51:43 2010	(r21394)
@@ -19,7 +19,7 @@
   backend-simplify =
     dr-scope-all-verbose(
       dollars-for-capitals-top
-    ; lift-definitions
+//    ; lift-definitions
     ; canonicalize
     ; simplify1
     ; mark-bound-unbound-vars

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Sun Nov 21 17:06:34 2010	(r21393)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Sun Nov 21 17:51:43 2010	(r21394)
@@ -26,7 +26,7 @@
           ; record-main-closurename
       	)
 	 ; log-timed(
-        id //backend-simplify
+        backend-simplify ; debug
       | "Backend preprocessing succeeded", 1
       )
     ; log-timed(
@@ -48,6 +48,7 @@
          var rootCtx = SRTS.initContext();
          var factory = rootCtx.factory;
          var TRACES_ENABLED = true;
+         var _Fail = function() { return null; }; // FIXME SSL_fail()
          [ctor-decl*]
          [ctor-init*]
          [function-def*]
@@ -122,26 +123,20 @@
 
   translate-constant-definition = !"" // TODO(karltk)
 	
-  translate-outer-definition =
-     translate-outer-definition-plain
-  <+ translate-outer-definition-override
-  <+ translate-outer-definition-extend
-  <+ translate-outer-definition-internal
-  <+ translate-outer-definition-conflict
-	
-
-  translate-outer-definition-plain :
+  translate-outer-definition :
   	SDefT(x, s*, t*, s){a*} -> $[
-  		[x] = [body];
+  		var [x] = [body];
   		c.[x] = [x];
   	]	
   with
   	body := <translate-definition-body>
 
-  translate-outer-definition-override = fail
-  translate-outer-definition-extend = fail
-  translate-outer-definition-internal = fail
-  translate-outer-definition-conflict = fail
+  translate-inner-definition :
+  	SDefT(x, s*, t*, s){a*} -> $[
+  		var [x] = [body];
+  	]	
+  with
+  	body := <translate-definition-body>
   
   
   translate-definition-body:
@@ -165,22 +160,16 @@
 //  		js-CheckBuild, js-CheckBuild, IsLiftedTVar,
 //  		IsLiftedSVar, LiftedTVars, LiftedSVars:
   			
-  		debug(!"def-body")	
-  	  ;	(s'*, [])         := <translate-params> s*
-  	  ;	debug(!"sparams")
+  	    (s'*, [])         := <translate-params> s*
   	  ; (t'*, bstm-init*) := <translate-params> t*
-  	  ;	debug(!"tparams")
   	  ; formal*           := <conc> (s'*, t'*)
-  	  ;	debug(!"formal*")
       ; param*            := < 
         	if !formal* => "" then
         		!""
         	else 
         		<string-join(|",")> ["" | formal*]
         	end>
-  	  ;	debug(!"conc")
   	  ; feil              := <newname> "Fail_"
-  	  ;	debug(!"about to body")
   	  ; bstm              := <translate-strategy(|"ERROR", feil)> s
   	|}  	  	
 
@@ -268,10 +257,8 @@
   	]
   with
   	{| js-CheckBuild : 
-        where(<debug(!"constructing ")> t)
-  	  ; e := <js-construct-term(|f)> t
-  	  ; (dec*, stm*) := <bagof-js-CheckBuild ; debug(!"checkbuild") ; unzip /* FIXME reverse? */> e    
-  		
+  	    e := <js-construct-term(|f)> t
+  	  ; (dec*, stm*) := <bagof-js-CheckBuild ; unzip /* FIXME reverse? */> e    
   	|}
   	
 
@@ -343,7 +330,18 @@
       decl*  := <map(to-js-vardecl)> vars
     ; body'  := <translate-strategy(|s,f)> body
 
-  translate-Let(|s,f) = fail // TODO (karltk)
+  translate-Let(|s,f) : 
+    Let(defs, body) -> $[
+    	{
+    		[def*]
+    		[body']
+    	}
+    ]
+  with 
+    def* := <map(translate-inner-definition)> defs
+  ; body' := <translate-strategy(|s,f)> body
+  
+
   translate-ImportTerm(|s,f) = fail // TODO (karltk)
   translate-Escape(|s,f) = fail // TODO (karltk)
   

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Sun Nov 21 17:06:34 2010	(r21393)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Sun Nov 21 17:51:43 2010	(r21394)
@@ -30,7 +30,7 @@
     ; match2 := <translate-Match(|s,f)> Match(t2,trm)
 
   translate-Match(|s,f) :
-    Match(Var(x){"unbound"}, trm) -> assign
+    Match(Var(x){"unbound"}, ReadFrom(trm)) -> assign
     with
       assign := <js-VarToWrite> (x, trm)
 

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Sun Nov 21 17:06:34 2010	(r21393)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Sun Nov 21 17:51:43 2010	(r21394)
@@ -1,13 +1,14 @@
 
 COREFILES  := $(wildcard core/*.str)
-TESTFILES  := $(COREFILES)
+BASICFILES := $(wildcard basic/*.str)
+TESTFILES  := $(COREFILES) $(BASICFILES)
 CTREEFILES := $(subst .str,.ctree,$(TESTFILES))
 TESTRUNS   := $(subst .str,.run,$(TESTFILES))
 
 all: $(TESTRUNS)
 
-%.ctree : %.str
-	strc -i $< -F -o $@
+%.ctree : %.str ../src/stratego/s2js
+	strc -S -i $< -F -o $@
 
 %.js : %.ctree
 	../trans/s2js -i $< | ../scripts/add-cli-wrapper.sh > $@
@@ -16,4 +17,6 @@
 	java -jar ../lib/js.jar $< && touch $@
 
 clean:
-	rm -f core/*.run core/*.dep core/*.ctree
+	rm -f $(CTREEFILES) $(TESTRUNS)
+
+

From karltk at strategoxt.org  Sun Nov 21 20:19:44 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 21 Nov 2010 19:19:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21395 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests
Message-ID: <201011211919.oALJJipJ022543@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Sun Nov 21 19:19:43 2010
New Revision: 21395
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21395&sc=1

Log:
* In the middle of adding basic annotation support to backend.

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/tests/Makefile

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Sun Nov 21 17:51:43 2010	(r21394)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Sun Nov 21 19:19:43 2010	(r21395)
@@ -426,11 +426,19 @@
 					},
 
 					getAnnotations : function(annoterm) {
+						if(typeof(annoterm.anno) === 'undefined')
+							return makeEmptyList();
 						return annoterm[2];
 					},
 					
 					match : undefined,
 
+					checkListAnnos : function(factory, term) {
+						if(termType(term) != LIST)
+							return makeList([term]);
+						return term;
+					},
+					
 					checkListTail : function(term) {
 						if(!(typeof(term) === "object" && term.length > 0 && term[0] == "[]"))
 							throw "invalid list tail, " + termType(term);

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Sun Nov 21 17:51:43 2010	(r21394)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Sun Nov 21 19:19:43 2010	(r21395)
@@ -26,7 +26,7 @@
           ; record-main-closurename
       	)
 	 ; log-timed(
-        backend-simplify ; debug
+        backend-simplify
       | "Backend preprocessing succeeded", 1
       )
     ; log-timed(
@@ -69,7 +69,7 @@
   	rules(
   		CurrentLiftedFrame := None()
   	)
-  ; function-def* := <map(translate-outer-definition)> defs
+  ; function-def* := <map(translate-outer-definition <+ debug(!"bombed "))> defs
   ; add-default-constructors
   ; constant-def* := <map(translate-constant-definition)> defs
   ; lifted-def*   := "" // TODO <bagof-LiftedDef>
@@ -131,6 +131,9 @@
   with
   	body := <translate-definition-body>
 
+  translate-outer-definition :
+    ExtSDef(_, _, _) -> ""
+
   translate-inner-definition :
   	SDefT(x, s*, t*, s){a*} -> $[
   		var [x] = [body];

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Sun Nov 21 17:51:43 2010	(r21394)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Sun Nov 21 19:19:43 2010	(r21395)
@@ -50,7 +50,7 @@
       e := <js-VarToReadRef> x
 
   js-ConstructAnnoVar(|f) :
-    Anno(Var(x), pt2) -> $[ factory.annotateTerm(e, checkListAnnos(factory, [<js-construct-term(|f)> pt2])) ]
+    Anno(Var(x), pt2) -> $[ factory.annotateTerm([e], factory.checkListAnnos(factory, [<js-construct-term(|f)> pt2])) ]
   where
       <js-ConstructVar> Var(x) => e
 
@@ -60,7 +60,7 @@
       <not(?Var(_))> pt1
 
   js-ConstructTerm(|f) :
-    Anno(pt1, pt2) -> $[ factory.annotateTerm([<js-construct-term(|f)> pt1], checkListAnnos(termFactory,[<js-construct-term(|f)> pt2])) ]
+    Anno(pt1, pt2) -> $[ factory.annotateTerm([<js-construct-term(|f)> pt1], factory.checkListAnnos(factory,[<js-construct-term(|f)> pt2])) ]
   where 
       <not(?Op("Nil", []))> pt2
     ; <not(?Var(_))> pt1

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Sun Nov 21 17:51:43 2010	(r21394)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Sun Nov 21 19:19:43 2010	(r21395)
@@ -92,7 +92,7 @@
       <not(Wld)> pt2
   with
       x    := <newname> "annos"
-    ; stm0 := <translate-Match(|s,f)> Match(pt1, e)
+    ; stm0 := <translate-Match(|s,f)> Match(pt1, ReadFrom(e))
     ; stm1 := <translate-Match(|s,f)> Match(pt2, ReadFrom(x))
 
   // String constants are not cached for comparison,
@@ -191,8 +191,7 @@
       [stm2];
     ]
   with
-    debug(!"foo")
-  ; !e' => ReadFrom(e) 
+    !e' => ReadFrom(e) 
   ; x    := <newname> "arg"
   ; stm2 := <translate-Match(|s,f)> Match(t, ReadFrom(x))
   ; if !stm2 => "" then

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Sun Nov 21 17:51:43 2010	(r21394)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Sun Nov 21 19:19:43 2010	(r21395)
@@ -2,6 +2,7 @@
 COREFILES  := $(wildcard core/*.str)
 BASICFILES := $(wildcard basic/*.str)
 TESTFILES  := $(COREFILES) $(BASICFILES)
+#TESTFILES  := $(BASICFILES)
 CTREEFILES := $(subst .str,.ctree,$(TESTFILES))
 TESTRUNS   := $(subst .str,.run,$(TESTFILES))
 

From karltk at strategoxt.org  Sun Nov 21 21:55:37 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Sun, 21 Nov 2010 20:55:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21396 - in
	strategoxt-javascript-backend/trunk: scripts src/javascript
	src/stratego tests tests/basic
Message-ID: <201011212055.oALKtbLk023627@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Sun Nov 21 20:55:36 2010
New Revision: 21396
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21396&sc=1

Log:
* Revamped runtime system layout totally.
 * Added separate library modules for SRTS and SSL.
 * Added a stratego-lib emulation layer for testing purposes.
 * Sketched support for dynamic loading and resolving of libraries.
 * Added basic test suite from the Java backend. Does not pass yet.
 * Started implementing the most important SRTS and SSL functions, but far from complete.

Added:
   strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
   strategoxt-javascript-backend/trunk/src/javascript/terms.js
   strategoxt-javascript-backend/trunk/tests/basic/   (props changed)
   strategoxt-javascript-backend/trunk/tests/basic/annos_1.str
   strategoxt-javascript-backend/trunk/tests/basic/annos_2.str
   strategoxt-javascript-backend/trunk/tests/basic/build_0.str
   strategoxt-javascript-backend/trunk/tests/basic/build_1.str
   strategoxt-javascript-backend/trunk/tests/basic/build_2.str
   strategoxt-javascript-backend/trunk/tests/basic/build_3.str
   strategoxt-javascript-backend/trunk/tests/basic/camelCase_1.str
   strategoxt-javascript-backend/trunk/tests/basic/chars_1.str
   strategoxt-javascript-backend/trunk/tests/basic/dynrules_1.str
   strategoxt-javascript-backend/trunk/tests/basic/dynrules_2.str
   strategoxt-javascript-backend/trunk/tests/basic/dynrules_3.str
   strategoxt-javascript-backend/trunk/tests/basic/dynrules_4.str
   strategoxt-javascript-backend/trunk/tests/basic/dynrules_5.str
   strategoxt-javascript-backend/trunk/tests/basic/extend_1.str
   strategoxt-javascript-backend/trunk/tests/basic/fetch_1.str
   strategoxt-javascript-backend/trunk/tests/basic/gchoice_1.str
   strategoxt-javascript-backend/trunk/tests/basic/gchoice_2.str
   strategoxt-javascript-backend/trunk/tests/basic/internal_1.str
   strategoxt-javascript-backend/trunk/tests/basic/internal_2.str
   strategoxt-javascript-backend/trunk/tests/basic/iset_1.str
   strategoxt-javascript-backend/trunk/tests/basic/iset_2.str
   strategoxt-javascript-backend/trunk/tests/basic/lchoice_1.str
   strategoxt-javascript-backend/trunk/tests/basic/lchoice_2.str
   strategoxt-javascript-backend/trunk/tests/basic/mapconcat_1.str
   strategoxt-javascript-backend/trunk/tests/basic/match_1.str
   strategoxt-javascript-backend/trunk/tests/basic/match_2.str
   strategoxt-javascript-backend/trunk/tests/basic/match_3.str
   strategoxt-javascript-backend/trunk/tests/basic/match_4.str
   strategoxt-javascript-backend/trunk/tests/basic/match_5.str
   strategoxt-javascript-backend/trunk/tests/basic/override_1.str
   strategoxt-javascript-backend/trunk/tests/basic/pp_java5_to_string.str
   strategoxt-javascript-backend/trunk/tests/basic/readterm_1.str
   strategoxt-javascript-backend/trunk/tests/basic/scopes_1.str
   strategoxt-javascript-backend/trunk/tests/basic/scopes_2.str
   strategoxt-javascript-backend/trunk/tests/basic/shared_var_1.str
   strategoxt-javascript-backend/trunk/tests/basic/shared_var_2.str
   strategoxt-javascript-backend/trunk/tests/basic/shared_var_3.str
   strategoxt-javascript-backend/trunk/tests/basic/shared_var_4.str
   strategoxt-javascript-backend/trunk/tests/basic/shared_var_5.str
   strategoxt-javascript-backend/trunk/tests/basic/traversal_1.str
Modified:
   strategoxt-javascript-backend/trunk/scripts/add-cli-wrapper.sh
   strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/   (props changed)
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/tests/Makefile

Modified: strategoxt-javascript-backend/trunk/scripts/add-cli-wrapper.sh
==============================================================================
--- strategoxt-javascript-backend/trunk/scripts/add-cli-wrapper.sh	Sun Nov 21 19:19:43 2010	(r21395)
+++ strategoxt-javascript-backend/trunk/scripts/add-cli-wrapper.sh	Sun Nov 21 20:55:36 2010	(r21396)
@@ -1,4 +1,11 @@
 #! /bin/bash -x
 
 bp=$(dirname $0)
-cat ${bp}/../src/javascript/srts.js - ${bp}/../src/javascript/cli-wrapper.js
+cat \
+	${bp}/../src/javascript/strategojs.js \
+	${bp}/../src/javascript/terms.js \
+	${bp}/../src/javascript/srts.js \
+	${bp}/../src/javascript/ssl.js \
+	${bp}/../src/javascript/emu-stratego-lib.js \
+	- \
+	${bp}/../src/javascript/cli-wrapper.js

Modified: strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Sun Nov 21 19:19:43 2010	(r21395)
+++ strategoxt-javascript-backend/trunk/src/javascript/cli-wrapper.js	Sun Nov 21 20:55:36 2010	(r21396)
@@ -1,2 +1,5 @@
-debug.main(arguments);
+StrategoJS.registerLibrary(StrategoJS.SSL);
+StrategoJS.registerLibrary(StrategoJS.SRTS);
+StrategoJS.registerLibrary(StrategoJS.StrategoLib);
+debug().main(arguments);
 

Added: strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,9 @@
+/**
+ * @author Karl Trygve Kalleberg
+ */
+
+StrategoJS.StrategoLib = {}
+
+StrategoJS.StrategoLib.inc_0_0 = function(term) {
+	return term + 1;
+}
\ No newline at end of file

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Sun Nov 21 19:19:43 2010	(r21395)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Sun Nov 21 20:55:36 2010	(r21396)
@@ -3,515 +3,75 @@
  * @author Lennart Kats
  */
 
-SRTS = {
+StrategoJS.SRTS = {};
 
-		cliArgumentsToList : function(jslist, factory) {
-			var r = factory.makeEmptyList();
-			for(var i = jslist.length-2; i >= 0; i--) {
-				r = factory.makeListCons(jslist[i], r);
-			}
-			if(jslist.length > 0)
-				r = factory.makeListCons(jslist[jslist.length-1], r)
-			return r;
-		},
-
-		initContext : function() {
-			var stack = [];
-			var log = function() {
-				if (typeof(console) !== 'undefined' && typeof(console.log) !== 'undefined')
-					return console.log;
-				if (typeof(print) !== 'undefined') {
-					return print;
-				}
-				return function() {}; 
-			}();
-			var assert = function(msg, e) {
-				if(e == false)
-					throw msg;
-			}
-			var nextStackPos = 0;
-			var maxStackPos = 0;
-			var INT = 1, REAL = 2, STRING = 3, LIST = 4, TUPLE = 5, APPL = 6, ANNO = 7, PLACEHOLDER = 8, INVALID = -1;
-
-			var termType = function (term) {
-				var tp = typeof(term);
-				if(tp === 'number')
-					return Math.round(term) == term ? INT : REAL; // FIXME (karltk) too cheeky, might need to tag the values
-				if(tp === 'string')
-					return STRING;
-				if(tp === 'object')
-					return term.termType;
-				return INVALID;
-			}
-			
-			var doPrettify = function(term, builder, inlist) {
-				if(typeof(term.anno) !== 'undefined') {
-					doPrettify(term[1], builder, false);
-					builder.push("{");
-					doPrettify(term[2], builder, true);
-					builder.push("}");
-					return builder;
-				}
-				var tp = termType(term);
-				switch(tp) {
-				case INT:
-				case REAL:
-					builder.push("" + term);
-					break;
-				case STRING:
-					builder.push("\"" + term + "\"");
-					break;
-				case LIST:
-					if(!inlist)
-						builder.push("[");
-					if(term.length == 3) {
-						doPrettify(term[1], builder, false);
-						builder.push(",");
-						doPrettify(term[2], builder, true);
-					} else if (inlist) {
-						builder[builder.length-1] = "";
-					}
-					if(!inlist)
-						builder.push("]");
-					break;
-				case TUPLE:
-					builder.push("(");
-					for(var i = 1; i < term.length; i++) {
-						doPrettify(term[i], builder, false);
-						builder.push(",");
-					}
-					builder[builder.length-1] = ")";
-					break;
-				case APPL:
-					builder.push(term[0]);
-					builder.push("(");
-					for(var i = 1; i < term.length; i++) {
-						doPrettify(term[i], builder, false);
-						builder.push(",");
-					}
-					builder[builder.length-1] = ")";
-					break;
-				default:
-					builder.push("<invalid subterm>");
-				}
-				return builder;
-			}
-			
-			var PushbackStringIterator = function(text) {
-				this.offset = 0;
-				this.text = text;
-				this.read = function() {
-					return text[this.offset++];
-				}
-				this.unread = function() {
-					this.offset--;
-				}
-			};
-
-			function isLetter(ch) {
-				return ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z';
-			}
-
-			function isDigit(ch) {
-				return ch >= '0' && ch <= '9'; 
-			}
-
-			function isLetterOrDigit(ch) {
-				return isLetter(ch) || isDigit(ch);
-			}
-
-			var parseFromStream = function(stringIterator) {
-				parseSkip(stringIterator);
-				var ch = stringIterator.read();
-				switch(ch) {
-				case '[': return parseAnno(stringIterator, parseList(stringIterator));
-				case '(': return parseAnno(stringIterator, parseTuple(stringIterator));
-				case '"': return parseAnno(stringIterator, parseString(stringIterator));
-				case '<': return parsePlaceholder(stringIterator);
-				default:
-					stringIterator.unread(ch);
-				if (isLetter(ch)) {
-					return parseAnno(stringIterator, parseAppl(stringIterator));
-				}
-				else if(isDigit(ch)) {
-					return parseAnno(stringIterator, parseNumber(stringIterator));
-				}
-				}
-				throw new ParseError("Invalid term: '" + ch + "'");
-			};
-
-			var parseAnno = function(stringIterator, term) {
-				parseSkip(stringIterator);
-				var ch = stringIterator.read();
-				if (ch == '{') {
-					var annos = parseTermSequence(stringIterator, '}');
-					return factory.annotateTerm(term, factory.makeList(annos));
-				} else {
-					stringIterator.unread(ch);
-					return term;
-				}
-			};
-
-			var parseString = function(stringIterator) {
-				var ch = stringIterator.read();
-				if(ch == '"') {
-					return factory.makeString("");
-				}
-				var sb = [];
-				var escaped = false;
-				do {
-					escaped = false;
-					if(ch == '\\') {
-						escaped = true;
-						ch = stringIterator.read();
-					}
-					if(escaped) {
-						switch(ch) {
-						case 'n':
-							sb.push('\n');
-							break;
-						case 't':
-							sb.push('\t');
-							break;
-						case 'b':
-							sb.push('\b');
-							break;
-						case 'f':
-							sb.push('\f');
-							break;
-						case 'r':
-							sb.push('\r');
-							break;
-						case '\\':
-							sb.push('\\');
-							break;
-						case '\'':
-							sb.push('\'');
-							break;
-						case '\"':
-							sb.push('\"');
-							break;
-						case '0':
-						case '1':
-						case '2':
-						case '3':
-						case '4':
-						case '5':
-						case '6':
-						case '7':
-						case '8':
-						case '9':
-							throw new NotImplementedException();
-						default:
-							sb.push("\\" + ch);
-						}
-						ch = stringIterator.read();
-					} else if(ch != '\"') {
-						if (ch == -1) {
-							throw new ParseError("Unterminated string: " + sb);
-						}
-						sb.push(ch);
-						ch = stringIterator.read();
-					}
-				} while(escaped || ch != '\"');
-				return factory.makeString(sb.join(""));
-			};
-
-			var parseAppl = function(stringIterator) {
-				var sb = [];
-				var ch = stringIterator.read();
-				do {
-					sb.push(ch);
-					ch = stringIterator.read();
-				} while(isLetterOrDigit(ch) || ch == '_' || ch == '-'
-					|| ch == '+' || ch == '*' || ch == '$');
-
-				stringIterator.unread(ch);
-				parseSkip(stringIterator);
-				ch = stringIterator.read();
-
-				if(ch == '(') {
-					var l = parseTermSequence(stringIterator, ')');
-					var c = factory.makeCtor(sb.join(""), l.length);
-					return factory.makeAppl(c, l);
-				} else {
-					stringIterator.unread(ch);
-					var c = factory.makeCtor(sb.join(""), 0);
-					return factory.makeAppl(c, EMPTY);
-				}
-			};
-
-			var parsePlaceholder = function(stringIterator) {
-				var template = parseFromStream(stringIterator);
-				parseSkip(stringIterator);
-				if (stringIterator.read() != '>') {
-					throw new ParseError("Expected: '>'");
-				}
-				return makePlaceholder(template);
-			};
-
-			var parseTuple = function(stringIterator) {
-				return factory.makeTuple(parseTermSequence(stringIterator, ')'));
-			};
-
-
-			var parseTermSequence = function(stringIterator, endChar) {
-				var pos = stringIterator.offset;
-				var els = [];
-				parseSkip(stringIterator);
-				var ch = stringIterator.read();
-				if(ch == endChar) {
-					return els;
-				}
-				stringIterator.unread(ch);
-				do {
-					els.push(parseFromStream(stringIterator));
-					parseSkip(stringIterator);
-					ch = stringIterator.read();
-				} while(ch == ',');
-
-				if (ch != endChar) {
-					stringIterator.unread(ch);
-					parseSkip(stringIterator);
-					ch = stringIterator.read();
-				}
-
-				if(ch != endChar) {
-					throw new ParseError("Sequence starting at offset " + pos + " must end with '" + endChar + "', saw '" + ch + "'");
-				}
-				return els;
-			};
-
-			var parseList = function(stringIterator) {
-				return factory.makeList(parseTermSequence(stringIterator, ']'));
-			};
-
-			var parseNumber = function(stringIterator) {
-				var whole = parseDigitSequence(stringIterator);
-				var ch = stringIterator.read();
-				if(ch == '.') {
-					var frac = parseDigitSequence(stringIterator);
-					ch = stringIterator.read();
-					if(ch == 'e' || ch == 'E') {
-						var exp = parseDigitSequence(stringIterator);
-						var d = parseFloat(whole + "." + frac + "e" + exp);
-						return factory.makeReal(d);
-					}
-					stringIterator.unread(ch);
-					var d = parseFloat(whole + "." + frac);
-					return factory.makeReal(d);
-				}
-				stringIterator.unread(ch);
-				return factory.makeInt(parseInt(whole));
-			};
-
-			var parseDigitSequence = function(stringIterator) {
-				var sb = [];
-				var ch = stringIterator.read();
-				do {
-					sb.push(ch);
-					ch = stringIterator.read();
-				} while(isDigit(ch));
-				stringIterator.unread(ch);
-				return sb.join("");
-			};
-
-			var parseSkip = function(stringIterator){
-				for (;;) {
-					var b = stringIterator.read();
-					switch (b) {
-					case ' ': case '\t': case '\n':
-						continue;
-					default:
-						stringIterator.unread(b);
-					return;
-					}
-				}
-			};
-
-			var factory = {
-					makeCtor : function(name, arity) { 
-						return { name : name, arity : arity };
-					},
-
-					makeInt : function(val) {
-						return Math.round(val);
-					},
-
-					makeReal : function(val) {
-						return val;
-					},
-
-					makeString : function(val) {
-						return val;
-					},
-
-					makeList : function(list) {
-						var r = factory.makeEmptyList();
-						for(var i = list.length-1; i >= 0; i--) {
-							r = factory.makeListCons(list[i], r);
-						}
-						return r;
-					},
-					
-					makeEmptyList : function() {
-						var r = ["[]", []];
-						r.subtermCount = 0;
-						r.termType = LIST;
-						return r;
-					},
-
-					makeListCons : function(car, cdr) {
-						var r = ["[]", car, cdr];
-						r.subtermCount = cdr.subtermCount + 1;
-						r.termType = LIST;
-						return r;
-					},
-
-					makeTuple : function(args) {
-						var r = ["()"];
-						for(var i = 0; i < args.length; i++) {
-							r.push(args[i]);
-						}
-						r.termType = TUPLE;
-						r.subtermCount = args.length;
-						r.getSubTerm = function(index) {
-							return r[index + 1];
-						}
-						return r;
-					},
-
-					makeAppl : function(ctor, args) {
-						var r = [ctor.name];
-						assert("ctor arity != argument count", ctor.arity == args.length);
-						r = r.concat(args);
-						r.termType = APPL;
-						r.subtermCount = args.length;
-						r.getSubterm = function(index) {
-							return r[index + 1];
-						}
-						return r;
-					},
-
-					prettify : function(term) {
-						return doPrettify(term, [], false).join("");
-					},
-
-					isEmptyList : function(term) {
-						return typeof(term) === 'object' && term.length === 1 && term[0] == "[]"; 
-					},
-
-					getSubterm : function(term, idx) {
-						return term.getSubterm(idx);
-					},
-
-					head : function(list) {
-						return list[1];
-					},
-
-					tail : function(list) {
-						return list[2];
-					},
-
-					getSubtermCount : function(term) {
-						return term.subtermCount;
-					},
-
-					getCtor : function(appl) {
-						return { name : appl[0], arity : appl.length-1}
-					},
-
-					ctorEquals : function(ctor1, ctor2) {
-						return ctor1.name == ctor2.name && ctor1.arity == ctor2.arity; 
-					},
-
-					getAnnotations : function(annoterm) {
-						if(typeof(annoterm.anno) === 'undefined')
-							return makeEmptyList();
-						return annoterm[2];
-					},
-					
-					match : undefined,
-
-					checkListAnnos : function(factory, term) {
-						if(termType(term) != LIST)
-							return makeList([term]);
-						return term;
-					},
-					
-					checkListTail : function(term) {
-						if(!(typeof(term) === "object" && term.length > 0 && term[0] == "[]"))
-							throw "invalid list tail, " + termType(term);
-						return term;
-					},
-
-					termType : termType,
-
-					INT : INT,
-					REAL : REAL,
-					STRING : STRING,
-					LIST : LIST,
-					TUPLE : TUPLE,
-					APPL : APPL,
-
-					parse : function(text) {
-						return parseFromStream(new PushbackStringIterator(text));
-					},
-					
-					annotateTerm : function(term, anno) {
-						var r = ["{}", term, anno];
-						r.anno = true;
-						switch(factory.termType(term)) {
-						case ANNO:
-						case TUPLE:
-						case LIST:
-						case APPL:
-							r.termType = term.termType;
-							r.getSubtermCount = term.getSubtermCount;
-							r.getSubterm = term.getSubterm;
-							r.isEmptyList = term.isEmptyList;
-							break;
-						case STRING: 
-							r.termType = STRING;
-							break;
-						case REAL:
-							r.termType = REAL;
-							break;
-						case INT:
-							r.termType = INT;
-							break; 
-						};
-						return r;
-					}
-			};
-
-			return {
-				debugLog : log,
-				popOnFailure : function() {
-					nextStackPos--;
-				},
-				printStackTrace : function() {
-					log("Rewriting failed at:");
-					for(var i = 0; i < maxStackPos; i++)
-						log(stack[i]);
-				},
-				popOnSuccess : function() {
-					maxStackPos--;
-					nextStackPos--;
-				},
-				push : function(funName) {
-					if(nextStackPos < stack.length)
-						stack[nextStackPos] = funName;
-					else
-						stack.push(funName);
-					nextStackPos++;
-					maxStackPos = nextStackPos;
-				},
-				factory : factory
-			}
-		}
+StrategoJS.SRTS._cliArgumentsToList = function(jslist, factory) {
+	var r = factory.makeEmptyList();
+	for(var i = jslist.length-2; i >= 0; i--) {
+		r = factory.makeListCons(jslist[i], r);
+	}
+	if(jslist.length > 0)
+		r = factory.makeListCons(jslist[jslist.length-1], r);
+	return r;
 };
 
-doImport = function (file) {
-	return SRTS;
+StrategoJS.SRTS._initContext = function() {
+	var stack = [];
+	var nextStackPos = 0;
+	var maxStackPos = 0;
+
+	return {
+		debugLog : StrategoJS.log,
+		popOnFailure : function() {
+			nextStackPos--;
+		},
+		printStackTrace : function() {
+			log("Rewriting failed at:");
+			for(var i = 0; i < maxStackPos; i++)
+				log(stack[i]);
+		},
+		popOnSuccess : function() {
+			maxStackPos--;
+			nextStackPos--;
+		},
+		push : function(funName) {
+			if(nextStackPos < stack.length)
+				stack[nextStackPos] = funName;
+			else
+				stack.push(funName);
+			nextStackPos++;
+			maxStackPos = nextStackPos;
+		},
+		factory : StrategoJS.Term
+	};
 };
+
+StrategoJS.SRTS.SRTS_one = function(ctx, term, fun) {
+	var factory = ctx.factory;
+	switch(factory.termType(term)) {
+	case REAL:
+	case INT:
+	case STRING: 
+		return fun(ctx, term);
+	case LIST: 
+		var r = null;
+		while(!factory.isEmptyList(term)) {
+			var r = fun(ctx, factory.head(term));
+			if(r !== null)
+				return r;
+			term = factory.tail();
+		}
+		return null;
+	case TUPLE:
+	case APPL:
+		var l = factory.getSubtermCount();
+		for(var i = 0; i < l; i++) {
+			var r = fun(ctx, factor.getSubterm(i));
+			if(r !== null)
+				return r;
+		}
+		return null;
+	default:
+		throw new "invalid term type ";
+	}
+}
\ No newline at end of file

Added: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,10 @@
+/**
+ * @author Karl Trygve Kalleberg
+ */
+
+StrategoJS.SSL = {}
+
+StrategoJS.SSL.SSL_fail = function(term) {
+	return null;
+}
+

Added: strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,49 @@
+/**
+ * @author Karl Trygve Kalleberg
+ */
+
+ // The global namespace for Stratego JavaScript backend
+
+StrategoJS = {}
+
+var dummy = function() {
+	var knownLibraries = [];
+	
+	StrategoJS.registerLibrary = function(lib) {
+		knownLibraries.push(lib);
+	};
+	
+	StrategoJS.resolveImport = function(funName) {
+		for(var i = 0; i < knownLibraries.length; i++) {
+			var lib = knownLibraries[i];
+			if(typeof(lib[funName]) !== 'undefined') {
+				return lib[funName];
+			}
+		}
+		throw "function " + funName + " has not be resolved"; 
+	}
+	
+	StrategoJS.log = function() {
+		if (typeof(console) !== 'undefined' && typeof(console.log) !== 'undefined')
+			return console.log;
+		if (typeof(print) !== 'undefined') {
+			return print;
+		}
+		return function() {}; 
+	}();
+	
+	StrategoJS.assert = function(msg, e) {
+		if(e == false)
+			throw msg;
+	}
+
+	
+}();
+
+ // include order:
+ //  1) stratego.js
+ //  2) terms.js
+ //  3) srts.js
+ //  4) ssl.js
+ //  5) <program>
+ //  6) cli-wrapper.js (if you run it on the CLI through Rhino)

Added: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,477 @@
+/**
+ * @author Karl Trygve Kalleberg
+ * @author Lennart Kats
+ */
+
+StrategoJS.Term = function() {
+
+	//
+	//  private term implementation
+	//
+	
+	var INT = 1; 
+	var REAL = 2;
+	var STRING = 3;
+	var LIST = 4; 
+	var TUPLE = 5;
+	var APPL = 6;
+	var ANNO = 7;
+	var PLACEHOLDER = 8;
+	var INVALID = -1;
+
+	function termType(term) {
+		var tp = typeof(term);
+		if(tp === 'number')
+			return Math.round(term) == term ? INT : REAL; // FIXME (karltk) too cheeky, might need to tag the values
+		if(tp === 'string')
+			return STRING;
+		if(tp === 'object')
+			return term.termType;
+		return INVALID;
+	}
+
+	function doPrettify(term, builder, inlist) {
+		if(typeof(term.anno) !== 'undefined') {
+			doPrettify(term[1], builder, false);
+			builder.push("{");
+			doPrettify(term[2], builder, true);
+			builder.push("}");
+			return builder;
+		}
+		var tp = termType(term);
+		switch(tp) {
+		case INT:
+		case REAL:
+			builder.push("" + term);
+			break;
+		case STRING:
+			builder.push("\"" + term + "\"");
+			break;
+		case LIST:
+			if(!inlist)
+				builder.push("[");
+			if(term.length == 3) {
+				doPrettify(term[1], builder, false);
+				builder.push(",");
+				doPrettify(term[2], builder, true);
+			} else if (inlist) {
+				builder[builder.length-1] = "";
+			}
+			if(!inlist)
+				builder.push("]");
+			break;
+		case TUPLE:
+			builder.push("(");
+			for(var i = 1; i < term.length; i++) {
+				doPrettify(term[i], builder, false);
+				builder.push(",");
+			}
+			builder[builder.length-1] = ")";
+			break;
+		case APPL:
+			builder.push(term[0]);
+			builder.push("(");
+			for(var i = 1; i < term.length; i++) {
+				doPrettify(term[i], builder, false);
+				builder.push(",");
+			}
+			builder[builder.length-1] = ")";
+			break;
+		default:
+			builder.push("<invalid subterm>");
+		}
+		return builder;
+	}
+
+	var PushbackStringIterator = function(text) {
+		this.offset = 0;
+		this.text = text;
+		this.read = function() {
+			return text[this.offset++];
+		}
+		this.unread = function() {
+			this.offset--;
+		}
+	};
+
+	function isLetter(ch) {
+		return ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z';
+	}
+
+	function isDigit(ch) {
+		return ch >= '0' && ch <= '9'; 
+	}
+
+	function isLetterOrDigit(ch) {
+		return isLetter(ch) || isDigit(ch);
+	}
+
+	function parseFromStream(stringIterator) {
+		parseSkip(stringIterator);
+		var ch = stringIterator.read();
+		switch(ch) {
+		case '[': return parseAnno(stringIterator, parseList(stringIterator));
+		case '(': return parseAnno(stringIterator, parseTuple(stringIterator));
+		case '"': return parseAnno(stringIterator, parseString(stringIterator));
+		case '<': return parsePlaceholder(stringIterator);
+		default:
+			stringIterator.unread(ch);
+		if (isLetter(ch)) {
+			return parseAnno(stringIterator, parseAppl(stringIterator));
+		}
+		else if(isDigit(ch)) {
+			return parseAnno(stringIterator, parseNumber(stringIterator));
+		}
+		}
+		throw new ParseError("Invalid term: '" + ch + "'");
+	};
+
+	function parseAnno(stringIterator, term) {
+		parseSkip(stringIterator);
+		var ch = stringIterator.read();
+		if (ch == '{') {
+			var annos = parseTermSequence(stringIterator, '}');
+			return factory.annotateTerm(term, factory.makeList(annos));
+		} else {
+			stringIterator.unread(ch);
+			return term;
+		}
+	};
+
+	function parseString(stringIterator) {
+		var ch = stringIterator.read();
+		if(ch == '"') {
+			return factory.makeString("");
+		}
+		var sb = [];
+		var escaped = false;
+		do {
+			escaped = false;
+			if(ch == '\\') {
+				escaped = true;
+				ch = stringIterator.read();
+			}
+			if(escaped) {
+				switch(ch) {
+				case 'n':
+					sb.push('\n');
+					break;
+				case 't':
+					sb.push('\t');
+					break;
+				case 'b':
+					sb.push('\b');
+					break;
+				case 'f':
+					sb.push('\f');
+					break;
+				case 'r':
+					sb.push('\r');
+					break;
+				case '\\':
+					sb.push('\\');
+					break;
+				case '\'':
+					sb.push('\'');
+					break;
+				case '\"':
+					sb.push('\"');
+					break;
+				case '0':
+				case '1':
+				case '2':
+				case '3':
+				case '4':
+				case '5':
+				case '6':
+				case '7':
+				case '8':
+				case '9':
+					throw new NotImplementedException();
+				default:
+					sb.push("\\" + ch);
+				}
+				ch = stringIterator.read();
+			} else if(ch != '\"') {
+				if (ch == -1) {
+					throw new ParseError("Unterminated string: " + sb);
+				}
+				sb.push(ch);
+				ch = stringIterator.read();
+			}
+		} while(escaped || ch != '\"');
+		return factory.makeString(sb.join(""));
+	};
+
+	var parseAppl = function(stringIterator) {
+		var sb = [];
+		var ch = stringIterator.read();
+		do {
+			sb.push(ch);
+			ch = stringIterator.read();
+		} while(isLetterOrDigit(ch) || ch == '_' || ch == '-'
+			|| ch == '+' || ch == '*' || ch == '$');
+
+		stringIterator.unread(ch);
+		parseSkip(stringIterator);
+		ch = stringIterator.read();
+
+		if(ch == '(') {
+			var l = parseTermSequence(stringIterator, ')');
+			var c = factory.makeCtor(sb.join(""), l.length);
+			return factory.makeAppl(c, l);
+		} else {
+			stringIterator.unread(ch);
+			var c = factory.makeCtor(sb.join(""), 0);
+			return factory.makeAppl(c, EMPTY);
+		}
+	};
+
+	var parsePlaceholder = function(stringIterator) {
+		var template = parseFromStream(stringIterator);
+		parseSkip(stringIterator);
+		if (stringIterator.read() != '>') {
+			throw new ParseError("Expected: '>'");
+		}
+		return makePlaceholder(template);
+	};
+
+	var parseTuple = function(stringIterator) {
+		return factory.makeTuple(parseTermSequence(stringIterator, ')'));
+	};
+
+
+	var parseTermSequence = function(stringIterator, endChar) {
+		var pos = stringIterator.offset;
+		var els = [];
+		parseSkip(stringIterator);
+		var ch = stringIterator.read();
+		if(ch == endChar) {
+			return els;
+		}
+		stringIterator.unread(ch);
+		do {
+			els.push(parseFromStream(stringIterator));
+			parseSkip(stringIterator);
+			ch = stringIterator.read();
+		} while(ch == ',');
+
+		if (ch != endChar) {
+			stringIterator.unread(ch);
+			parseSkip(stringIterator);
+			ch = stringIterator.read();
+		}
+
+		if(ch != endChar) {
+			throw new ParseError("Sequence starting at offset " + pos + " must end with '" + endChar + "', saw '" + ch + "'");
+		}
+		return els;
+	};
+
+	var parseList = function(stringIterator) {
+		return factory.makeList(parseTermSequence(stringIterator, ']'));
+	};
+
+	var parseNumber = function(stringIterator) {
+		var whole = parseDigitSequence(stringIterator);
+		var ch = stringIterator.read();
+		if(ch == '.') {
+			var frac = parseDigitSequence(stringIterator);
+			ch = stringIterator.read();
+			if(ch == 'e' || ch == 'E') {
+				var exp = parseDigitSequence(stringIterator);
+				var d = parseFloat(whole + "." + frac + "e" + exp);
+				return factory.makeReal(d);
+			}
+			stringIterator.unread(ch);
+			var d = parseFloat(whole + "." + frac);
+			return factory.makeReal(d);
+		}
+		stringIterator.unread(ch);
+		return factory.makeInt(parseInt(whole));
+	};
+
+	var parseDigitSequence = function(stringIterator) {
+		var sb = [];
+		var ch = stringIterator.read();
+		do {
+			sb.push(ch);
+			ch = stringIterator.read();
+		} while(isDigit(ch));
+		stringIterator.unread(ch);
+		return sb.join("");
+	};
+
+	var parseSkip = function(stringIterator){
+		for (;;) {
+			var b = stringIterator.read();
+			switch (b) {
+			case ' ': case '\t': case '\n':
+				continue;
+			default:
+				stringIterator.unread(b);
+			return;
+			}
+		}
+	};
+
+	//
+	//  public Term interface
+	//
+	var factory = {
+			makeCtor : function(name, arity) { 
+				return { name : name, arity : arity };
+			},
+
+			makeInt : function(val) {
+				return Math.round(val);
+			},
+
+			makeReal : function(val) {
+				return val;
+			},
+
+			makeString : function(val) {
+				return val;
+			},
+
+			makeList : function(list) {
+				var r = factory.makeEmptyList();
+				for(var i = list.length-1; i >= 0; i--) {
+					r = factory.makeListCons(list[i], r);
+				}
+				return r;
+			},
+
+			makeEmptyList : function() {
+				var r = ["[]", []];
+				r.subtermCount = 0;
+				r.termType = LIST;
+				return r;
+			},
+
+			makeListCons : function(car, cdr) {
+				var r = ["[]", car, cdr];
+				r.subtermCount = cdr.subtermCount + 1;
+				r.termType = LIST;
+				return r;
+			},
+
+			makeTuple : function(args) {
+				var r = ["()"];
+				for(var i = 0; i < args.length; i++) {
+					r.push(args[i]);
+				}
+				r.termType = TUPLE;
+				r.subtermCount = args.length;
+				r.getSubTerm = function(index) {
+					return r[index + 1];
+				}
+				return r;
+			},
+
+			makeAppl : function(ctor, args) {
+				var r = [ctor.name];
+				StrategoJS.assert("ctor arity != argument count", ctor.arity == args.length);
+				r = r.concat(args);
+				r.termType = APPL;
+				r.subtermCount = args.length;
+				r.getSubterm = function(index) {
+					return r[index + 1];
+				}
+				return r;
+			},
+
+			prettify : function(term) {
+				return doPrettify(term, [], false).join("");
+			},
+
+			isEmptyList : function(term) {
+				return typeof(term) === 'object' && term.length === 1 && term[0] == "[]"; 
+			},
+
+			getSubterm : function(term, idx) {
+				return term.getSubterm(idx);
+			},
+
+			head : function(list) {
+				return list[1];
+			},
+
+			tail : function(list) {
+				return list[2];
+			},
+
+			getSubtermCount : function(term) {
+				return term.subtermCount;
+			},
+
+			getCtor : function(appl) {
+				return { name : appl[0], arity : appl.length-1}
+			},
+
+			ctorEquals : function(ctor1, ctor2) {
+				return ctor1.name == ctor2.name && ctor1.arity == ctor2.arity; 
+			},
+
+			getAnnotations : function(annoterm) {
+				if(typeof(annoterm.anno) === 'undefined')
+					return makeEmptyList();
+				return annoterm[2];
+			},
+
+			match : undefined,
+
+			checkListAnnos : function(factory, term) {
+				if(termType(term) != LIST)
+					return makeList([term]);
+				return term;
+			},
+
+			checkListTail : function(term) {
+				if(!(typeof(term) === "object" && term.length > 0 && term[0] == "[]"))
+					throw "invalid list tail, " + termType(term);
+				return term;
+			},
+
+			termType : termType,
+
+			INT : INT,
+			REAL : REAL,
+			STRING : STRING,
+			LIST : LIST,
+			TUPLE : TUPLE,
+			APPL : APPL,
+
+			parse : function(text) {
+				return parseFromStream(new PushbackStringIterator(text));
+			},
+
+			annotateTerm : function(term, anno) {
+				var r = ["{}", term, anno];
+				r.anno = true;
+				switch(factory.termType(term)) {
+				case ANNO:
+				case TUPLE:
+				case LIST:
+				case APPL:
+					r.termType = term.termType;
+					r.getSubtermCount = term.getSubtermCount;
+					r.getSubterm = term.getSubterm;
+					r.isEmptyList = term.isEmptyList;
+					break;
+				case STRING: 
+					r.termType = STRING;
+					break;
+				case REAL:
+					r.termType = REAL;
+					break;
+				case INT:
+					r.termType = INT;
+					break; 
+				};
+				return r;
+			}
+	};
+	return factory;
+}();

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Sun Nov 21 19:19:43 2010	(r21395)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -43,9 +43,9 @@
     Specification([Signature([Constructors(ops)]), Strategies(defs)]) ->
     $[
        [closure-name] = function() {
-         var SRTS = doImport("srts.js");
+         var SRTS = StrategoJS.SRTS;
          var c = {};
-         var rootCtx = SRTS.initContext();
+         var rootCtx = SRTS._initContext();
          var factory = rootCtx.factory;
          var TRACES_ENABLED = true;
          var _Fail = function() { return null; }; // FIXME SSL_fail()
@@ -55,7 +55,7 @@
          [lifted-def*]
          [main-method]
          return c;
-       }();
+       };
     ]
   with
   	alltd(JSTranslate)
@@ -105,7 +105,7 @@
   js-main-method =
   	!$[
   		c.main = function(term) {
-  			var t = main_0_0(rootCtx, SRTS.cliArgumentsToList(term, factory));
+  			var t = main_0_0(rootCtx, SRTS._cliArgumentsToList(term, factory));
   			if(t == null)
   				rootCtx.debugLog("rewriting failed");
   			else {
@@ -132,7 +132,10 @@
   	body := <translate-definition-body>
 
   translate-outer-definition :
-    ExtSDef(_, _, _) -> ""
+    ExtSDef(n, _, _) -> 
+    $[
+    	var [n] = StrategoJS.resolveImport("[n]");
+    ]
 
   translate-inner-definition :
   	SDefT(x, s*, t*, s){a*} -> $[

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Sun Nov 21 19:19:43 2010	(r21395)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Sun Nov 21 20:55:36 2010	(r21396)
@@ -4,6 +4,7 @@
 TESTFILES  := $(COREFILES) $(BASICFILES)
 #TESTFILES  := $(BASICFILES)
 CTREEFILES := $(subst .str,.ctree,$(TESTFILES))
+JSFILES    := $(subst .str,.js,$(TESTFILES))
 TESTRUNS   := $(subst .str,.run,$(TESTFILES))
 
 all: $(TESTRUNS)
@@ -18,6 +19,6 @@
 	java -jar ../lib/js.jar $< && touch $@
 
 clean:
-	rm -f $(CTREEFILES) $(TESTRUNS)
+	rm -f $(CTREEFILES) $(JSFILES) $(TESTRUNS)
 
 

Added: strategoxt-javascript-backend/trunk/tests/basic/annos_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/annos_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,34 @@
+module annos_1
+
+imports libstratego-lib
+
+strategies
+
+  main =
+    ![1 | [2,3]{4}]
+  ; one(inc); debug(!1)
+  ; ?[2 | [2,3]{4}]; debug(!2)
+  
+  ; some(inc); debug(!3)
+  ; ?[3 | [3,4]]
+  
+  ; ![1 | [2,3]{4}]
+  ; all(id); debug(!4)
+  ; ?[1 | [2,3]{4}]
+  
+  ; ![0, 1 | [2,3]{4}]
+  ; all(try(\1 -> 2\)); debug(!5)
+  ; ?[0, 2 | [2,3]{}]
+    
+  ; ![0, 1 | [2,3]{4}]
+  ; filter(try(\1 -> 2\)); debug(!6)
+  ; ?[0, 2 | [2,3]{4}]
+  
+  ; ![0, 1 | [2,3]{}]
+  ; some(\1 -> 2\); debug(!7)
+  ; ?[0, 2 | [2,3]{}]
+  
+  ; ![0, 1 | [2,3]{}]
+  ; filter(try(\1 -> 2\)); debug(!8)
+  ; ?[0, 2 | [2,3]{}]
+  

Added: strategoxt-javascript-backend/trunk/tests/basic/annos_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/annos_2.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,47 @@
+module annos_2
+
+imports
+  libstratego-lib
+
+signature constructors
+  Var : Term -> Term
+
+strategies
+
+  main =
+    test-strings
+  ; test-vars
+  
+  test-strings =
+    a := "a"
+  ; b := "a"{"b"}; debug
+  ; not(?a)
+  
+  ; c := "a"{"b"}; debug
+  ; ?b
+  
+  ; !<id>{"c"}; debug
+  ; not(?b)
+  
+  ; !<id>{"b"}; debug
+  ; ?b
+  
+  ; !<id>{}; debug
+  ; ?a
+  
+  test-vars =
+    a := Var("a")
+  ; b := Var("a"){"b"}; debug
+  ; not(?a)
+  
+  ; c := Var("a"){"b"}; debug
+  ; ?b
+  
+  ; !<id>{"c"}; debug
+  ; not(?b)
+  
+  ; !<id>{"b"}; debug
+  ; ?b
+  
+  ; !<id>{}; debug
+  ; ?a

Added: strategoxt-javascript-backend/trunk/tests/basic/build_0.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/build_0.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,11 @@
+module build_0
+imports
+  stratego-lib
+
+signature
+  constructors
+   Foo : Term * Term -> Term
+
+strategies
+
+  main = !Foo(1,2)

Added: strategoxt-javascript-backend/trunk/tests/basic/build_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/build_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,19 @@
+module build_1
+imports libstratego-lib
+
+signature
+  constructors
+    Imports : List(String) -> Section
+    Module  : String * List(a) -> Module(a)
+    Content : String -> Section
+
+strategies
+
+  main = 
+    !("module1", 
+      [Module("module3",[Imports(["module1"]),Content("module3")]),
+       Module("module2",[Imports([]),Content("module2")]),
+       Module("module1",[Imports(["module2","module3"]),Content("module1")])])
+  ; debug
+  ; collect-one(?Imports(<id>))
+  ; length => 1

Added: strategoxt-javascript-backend/trunk/tests/basic/build_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/build_2.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,10 @@
+module build_2
+
+imports libstratego-lib
+
+strategies
+
+  main =
+    !Some("a"){1, 2}
+    ; try(\Some(s){ts*} -> Some(s){Some(ts*)}\)
+    ; ?Some("a"){Some([1,2])}

Added: strategoxt-javascript-backend/trunk/tests/basic/build_3.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/build_3.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,17 @@
+module build_3
+
+imports libstratego-lib
+
+signature constructors
+
+  Foo  : Term * Term -> Term
+  Foo2 : Term * Term -> Term 
+
+strategies
+
+  main =
+    !""#([1,2]) => (1,2);
+    !Foo(1,2); to-foo2; debug => Foo2(1,2)
+  
+  to-foo2:
+    _#(kids) -> "Foo2"#(kids)

Added: strategoxt-javascript-backend/trunk/tests/basic/camelCase_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/camelCase_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,9 @@
+module camelCase_1
+
+imports
+
+  libstratego-lib
+
+strategies
+
+  camelCase_1 = debug(!"success")

Added: strategoxt-javascript-backend/trunk/tests/basic/chars_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/chars_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,17 @@
+module chars_1
+
+imports
+  libstratego-lib
+  libstratego-sglr
+
+rules
+
+  main =
+    !"??";
+    explode-string;
+    implode-string; debug => "??";
+    
+    !"module foo rules bar = !\"??\"";
+    parse-string(|<import-term(Stratego-Sugar.tbl); open-parse-table>);
+    debug;
+    oncetd(?"\"??\"")

Added: strategoxt-javascript-backend/trunk/tests/basic/dynrules_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/dynrules_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,11 @@
+module dynrules_1
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+     !Some(1); ?x; rules(Rule: Some(2) -> 2 Rule: x -> 1)
+   ; !Some(2); Rule; debug
+   ; !Some(1); Rule; debug

Added: strategoxt-javascript-backend/trunk/tests/basic/dynrules_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/dynrules_2.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,9 @@
+module dynrules_2
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+     rules(Foo :+= 1 Foo :+=2); bagof-Foo

Added: strategoxt-javascript-backend/trunk/tests/basic/dynrules_3.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/dynrules_3.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,16 @@
+module dynrules_3
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+     rules(Foo+1 := 1)
+   ; {| Foo:
+       rules(Foo+2 := 2)
+     ; Foo; debug => 2
+     ; rules(Foo.1 := 3)
+     ; Foo; debug => 3
+     |}
+   ; Foo; debug => 3

Added: strategoxt-javascript-backend/trunk/tests/basic/dynrules_4.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/dynrules_4.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,15 @@
+module dynrules_4
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+     rules(
+       Foo: Some("2") -> 1
+       Foo: None()    -> None()
+       Foo: ("a", 2)  -> 3
+     )
+   ; dr-all-keys(|"Foo"); debug => [Some("2"), None(), (a, 2)]
+   ; map(Foo) => [1{}, None(){}, 3{}]

Added: strategoxt-javascript-backend/trunk/tests/basic/dynrules_5.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/dynrules_5.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,19 @@
+module dynrules_5
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+     rules(
+       Foo :+ Some("2") -> 1
+       Foo :+ None()    -> None()
+       Foo :+ ("a", 2)  -> 3
+       Foo :+ ("a", 2)  -> 4
+     )
+   ; rules(
+       Foo :- None()
+     )
+   ; dr-all-keys(|"Foo"); debug => [Some("2"), None(), (a, 2)]
+   ; map(bagof-Foo); debug => [[1], [], [4,3]]

Added: strategoxt-javascript-backend/trunk/tests/basic/extend_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/extend_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,14 @@
+module extend_1
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+    <cify> "foo-bar" => "foo_bar"
+  ; <cify> "foosbar" => "foobar"
+    
+  extend Cify(s) :
+    ['s' | tail] -> <s> tail
+

Added: strategoxt-javascript-backend/trunk/tests/basic/fetch_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/fetch_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,9 @@
+module fetch_1
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+     ![1,2,3]; fetch(inc) => [2,2,3]

Added: strategoxt-javascript-backend/trunk/tests/basic/gchoice_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/gchoice_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,14 @@
+module gchoice_1
+
+imports
+  libstratego-lib
+
+signature constructors
+  Nil  : Nil
+  Cons : Term -> Cons
+
+rules
+
+  main =
+    (id < id + ?never)
+  ; not(!never)

Added: strategoxt-javascript-backend/trunk/tests/basic/gchoice_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/gchoice_2.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,17 @@
+module gchoice_2
+
+imports
+  libstratego-lib
+
+signature constructors
+  Nil  : Nil
+  Cons : Term -> Cons
+
+rules
+
+  main =
+    not(
+      id
+      < (id < fail + !3)
+      + !2
+    )

Added: strategoxt-javascript-backend/trunk/tests/basic/internal_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/internal_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,15 @@
+module internal_1
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+    <cify> "foo-bar" => "foo_bar"
+  ; not(<cify> "foosbar" => "foobar")
+  ; <Cify(id)> ['s'] => []
+    
+  internal Cify(s) :
+    ['s' | tail] -> <s> tail
+

Added: strategoxt-javascript-backend/trunk/tests/basic/internal_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/internal_2.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,11 @@
+module internal_2
+
+imports
+  libstratego-lib
+
+rules
+
+  main = privaat
+    
+  internal privaat = debug
+

Added: strategoxt-javascript-backend/trunk/tests/basic/iset_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/iset_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,9 @@
+module iset_1
+
+imports libstratego-lib
+
+strategies
+
+  main =
+    new-iset
+  ; iset-add(|1)

Added: strategoxt-javascript-backend/trunk/tests/basic/iset_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/iset_2.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,15 @@
+module iset_2
+
+imports libstratego-lib
+
+strategies
+
+  main =
+    set := <new-iset>
+  ; iset-add(|1)
+  ; iset-clear
+  ; iset-addlist(|[2,3,4])
+  ; with(iset-get-index(|3); debug => 1)
+  ; with(iset-add(inc | 3); debug => 2)
+  ; with(iset-add(inc | 5))
+  ; iset-elements; debug => [2,3,4,5]

Added: strategoxt-javascript-backend/trunk/tests/basic/lchoice_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/lchoice_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,7 @@
+module lchoice_1
+imports
+  stratego-lib
+
+strategies
+
+  main = id < !0 + !1

Added: strategoxt-javascript-backend/trunk/tests/basic/lchoice_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/lchoice_2.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,7 @@
+module lchoice_2
+imports
+  stratego-lib
+
+strategies
+
+  main = fail < !0 + !1

Added: strategoxt-javascript-backend/trunk/tests/basic/mapconcat_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/mapconcat_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,10 @@
+module mapconcat_1
+
+imports libstratego-lib
+
+strategies
+
+  main =
+    ![1,2,3]
+  ; mapconcat(![<id>]) => [1,2,3]
+

Added: strategoxt-javascript-backend/trunk/tests/basic/match_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/match_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,13 @@
+module match_1
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+    b := "foo"{2}
+  ; c := "foo"{2}
+  ; !b
+  ; ?c
+  

Added: strategoxt-javascript-backend/trunk/tests/basic/match_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/match_2.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,13 @@
+module match_2
+
+imports
+  libstratego-lib
+
+signature constructors
+  Foo : Term
+  Bar : Term
+
+rules
+
+  main = !1; (?Foo() <+ ?Bar() <+ ?1)
+  

Added: strategoxt-javascript-backend/trunk/tests/basic/match_3.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/match_3.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,12 @@
+module match_3
+
+imports libstratego-lib
+
+rules
+
+  main =
+    x := 1
+  ; y := x
+  ; z := y
+  ; !x
+    

Added: strategoxt-javascript-backend/trunk/tests/basic/match_4.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/match_4.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,11 @@
+module match_4
+
+imports
+  libstratego-lib
+
+strategies
+
+  main =
+    a := 1
+  ; b := 2
+  ; not(?a)

Added: strategoxt-javascript-backend/trunk/tests/basic/match_5.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/match_5.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,15 @@
+module match_5
+
+imports
+  libstratego-lib
+
+strategies
+
+  main =
+    x := 0
+  ; !1
+  ; switch !x
+      case fail: !"nested case condition"
+      case is-int: id
+    end
+  ; ?1

Added: strategoxt-javascript-backend/trunk/tests/basic/override_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/override_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,14 @@
+module override_1
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+    not(<cify> "foo-bar" => "foo_bar")
+  ; <cify> "foosbar" => "foobar"
+    
+  override Cify(s) :
+    ['s' | tail] -> <s> tail
+

Added: strategoxt-javascript-backend/trunk/tests/basic/pp_java5_to_string.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/pp_java5_to_string.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,10 @@
+module pp-java5-to-string
+
+imports libjava-front libstratego-lib
+
+rules
+
+  main =
+    !CompilationUnit(None,[],[ClassDec(ClassDecHead([],Id("Foo"),None,None,None),ClassBody([]))])
+  ; pp-java5-to-string
+  ; is-string

Added: strategoxt-javascript-backend/trunk/tests/basic/readterm_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/readterm_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,20 @@
+module readterm_1
+
+imports
+  libstratego-lib
+
+strategies
+  
+  main =
+    t := Some([1,2{3}]{4}){5};
+    debug(!"Writing ");
+    <WriteToTextFile> ("readterm_1.trm", t);
+    <ReadFromFile> "readterm_1.trm" => t;
+    <ReadFromFile> "readterm_1.trm" => t;
+    
+    t2 := Some([1,2]);
+    debug(!"Writing ");
+    <WriteToTextFile> ("readterm_1.trm", t2);
+    <ReadFromFile> "readterm_1.trm" => t2;
+    <ReadFromFile> "readterm_1.trm" => t2
+

Added: strategoxt-javascript-backend/trunk/tests/basic/scopes_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/scopes_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,15 @@
+module scopes_1
+
+imports libstratego-lib
+
+rules
+
+  main =
+    { x:
+      { y:
+        y := <debug> 1;
+        x := y
+      };
+      !x
+    }
+    

Added: strategoxt-javascript-backend/trunk/tests/basic/scopes_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/scopes_2.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,17 @@
+module scopes_2
+
+imports libstratego-lib
+
+rules
+
+  main =
+    { x:
+      if debug then
+        { y:
+          y := <debug> 1;
+          x := y
+        }
+      end;
+      !x
+    }
+    

Added: strategoxt-javascript-backend/trunk/tests/basic/shared_var_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/shared_var_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,14 @@
+module shared_var_1
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+    let
+      a = x := 1
+      b = !x
+    in
+      a; b
+    end

Added: strategoxt-javascript-backend/trunk/tests/basic/shared_var_2.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/shared_var_2.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,15 @@
+module shared_var_2
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+    let
+      a = b
+      b = x := 1
+      c = !x
+    in
+      a; c
+    end

Added: strategoxt-javascript-backend/trunk/tests/basic/shared_var_3.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/shared_var_3.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,14 @@
+module shared_var_2
+
+imports
+  libstratego-lib
+
+rules
+
+  main =
+    let
+      a = map(b); ?x
+      b = ?y
+    in
+      not(map(a))
+    end

Added: strategoxt-javascript-backend/trunk/tests/basic/shared_var_4.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/shared_var_4.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,23 @@
+module shared_var_4
+
+imports
+  libstratego-lib
+
+strategies
+
+  main = rtg-remove-injection-rules
+
+  rtg-remove-injection-rules =
+      let
+        is-injection =
+          id
+ 
+        ensure-injection =
+          is-injection
+ 
+        remove-injection(|ps) =
+          map(ensure-injection)
+      in
+        try(remove-injection(|1))
+      end
+

Added: strategoxt-javascript-backend/trunk/tests/basic/shared_var_5.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/shared_var_5.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,16 @@
+module shared_var_5
+
+signature constructors
+  Cons : Term * List(Term) -> List(Term)
+  Nil  : List(Term)
+
+strategies
+
+  main =
+      let
+        a = ?x; b; a
+        b = not(?x); a; b
+      in
+        not(<a> 1); not(<b> 1)
+      end
+

Added: strategoxt-javascript-backend/trunk/tests/basic/traversal_1.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/basic/traversal_1.str	Sun Nov 21 20:55:36 2010	(r21396)
@@ -0,0 +1,15 @@
+module traversal_1
+
+imports libstratego-lib
+
+signature constructors
+  Fork : Term * Term -> Term
+
+strategies
+
+  main =
+    !Fork(Fork(2,5), 7)
+  ; oncetd(inc)
+  ; ?Fork(Fork(3,5), 7)
+    
+  

From R.B.Vermaas at tudelft.nl  Mon Nov 22 14:17:02 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 22 Nov 2010 13:17:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21397 -
	spoofax-imp/trunk/org.strategoxt.imp.generator
Message-ID: <201011221317.oAMDH2nS006149@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Mon Nov 22 13:17:02 2010
New Revision: 21397
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21397&sc=1

Log:
use vars in Makefile in stead of hardcoded \~/.nix-profile.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	Sun Nov 21 20:55:36 2010	(r21396)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	Mon Nov 22 13:17:02 2010	(r21397)
@@ -1,5 +1,9 @@
 # HACK: Assume nix installation in Makefile
 
+STRATEGOXT ?= ${HOME}/.nix-profile
+JAVA_FRONT ?= ${HOME}/.nix-profile
+SDF        ?= ${HOME}/.nix-profile
+
 STRS     = $(wildcard src/*.str) \
            $(wildcard src/sdf2imp/*.str) \
            $(wildcard src/sdf2imp/lib/*.str) \
@@ -23,13 +27,13 @@
     -la stratego-rtg \
     -la stratego-sdf \
     -la stratego-aterm \
-    -I ${HOME}/.nix-profile/share/java-front \
-    -I ${HOME}/.nix-profile/share/gpp \
-    -I ${HOME}/.nix-profile/share/xml-front \
-    -I ${HOME}/.nix-profile/share/sdf-tools \
-    -I ${HOME}/.nix-profile/share/stratego-front \
-    -I ${HOME}/.nix-profile/share/xtc \
-    -I ${HOME}/.nix-profile/share/pgen \
+    -I ${JAVA_FRONT}/share/java-front \
+    -I ${STRATEGOXT}/share/gpp \
+    -I ${STRATEGOXT}/share/xml-front \
+    -I ${STRATEGOXT}/share/sdf-tools \
+    -I ${STRATEGOXT}/share/stratego-front \
+    -I ${STRATEGOXT}/share/xtc \
+    -I ${SDF}/share/pgen \
     `pkg-config --variable=strcxtcflags strategoxt`
 
 JAVACFLAGS=-J-Xmx256m -J-Xms100m -J-server -J-XX:+UseParallelGC -cp strategoxt.jar -source 5 -nowarn
@@ -37,18 +41,18 @@
 STRJ=`if which strj >/dev/null; then echo strj; elif [ -e strategoxt.jar ]; then echo java -server -Xss4m -jar strategoxt.jar; else echo Please install strj or put strategoxt.jar into the current directory. >&2; exit 1; fi`
 
 SDFINCLUDES = \
-    -Idef ${HOME}/.nix-profile/share/java-front/Stratego-Java-EBlock.def
+    -Idef ${JAVA_FRONT}/share/java-front/Stratego-Java-EBlock.def
 
 # I don't care much for nullary constructor warnings unless it's about lowercase ones, such as 'start'
 STRCSTFU=2>&1 | grep -vE 'warning ] Nullary constructor .*[A-Z]|warning ] multiple external| \[ExtSDef\(|stratego-trm|module-name-checked|module-name-checked"' \
                  >&2
 
 STRINCLUDES = \
-	-I ${HOME}/.nix-profile/share/sdf/xml-front \
-	-I ${HOME}/.nix-profile/share/sdf/gpp \
-	-I ${HOME}/.nix-profile/share/sdf/stratego-regular \
-	-I ${HOME}/.nix-profile/share/sdf/sdf-front \
-	-I ${HOME}/.nix-profile/share/java-front \
+	-I ${STRATEGOXT}/share/sdf/xml-front \
+	-I ${STRATEGOXT}/share/sdf/gpp \
+	-I ${STRATEGOXT}/share/sdf/stratego-regular \
+	-I ${STRATEGOXT}/share/sdf/sdf-front \
+	-I ${JAVA_FRONT}/share/java-front \
 	-I src/syntax \
     `pkg-config --variable=strcflags java-front`
 
@@ -66,7 +70,7 @@
 
 sdf2imp : $(RTREES) $(SYNTAX) Makefile src/include/rtg.tbl
 	strc -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
-	     -la ${HOME}/.nix-profile/lib/libjava-front.la
+	     -la ${JAVA_FRONT}/lib/libjava-front.la
 	rm -f sdf2imp.c sdf2imp.lo sdf2imp.o
 
 src-gen/org/strategoxt/imp/generator/sdf2imp.java : $(RTREES) $(SYNTAX) Makefile src/include/rtg.tbl
@@ -122,7 +126,7 @@
 	sdf2table -m Stratego-Java-EditorService -i $< -o $@
 
 # We need a better solution for this
-src/include/rtg.tbl : ~/.nix-profile/share/sdf/stratego-regular/rtg.tbl
+src/include/rtg.tbl : ${STRATEGOXT}/share/sdf/stratego-regular/rtg.tbl
 	[ -e src/include ] || mkdir src/include
 	baf2trm  -i $< -o $@ # cp $< $@
 

From R.B.Vermaas at tudelft.nl  Mon Nov 22 15:30:58 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 22 Nov 2010 14:30:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21398 - hydra/jobs
Message-ID: <201011221430.oAMEUwuT007319@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Mon Nov 22 14:30:57 2010
New Revision: 21398
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21398&sc=1

Log:
building spoofax-imp with some nice impurities

Added:
   hydra/jobs/spoofax-imp.nix

Added: hydra/jobs/spoofax-imp.nix
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ hydra/jobs/spoofax-imp.nix	Mon Nov 22 14:30:57 2010	(r21398)
@@ -0,0 +1,206 @@
+{ nixpkgs ? ../../nixpkgs
+, spoofax ? { outPath = ../../spoofax/spoofax ; rev = 1234; }
+, spoofaxImp ? { outPath = ../../spoofax-imp ; rev = 1234; }
+, lpgRuntime ? { outPath = ../../sglr-recovery/lpg.runtime.java ; rev = 1234; }
+, strategoxtJavaBackend ? { outPath = ../../strategoxt-java-backend ; rev = 1234; } 
+, strcJava ? /nix/store/v2my52ix09km27fq1ziylx8g9h4anbs4-strc-java-0.17.92pre21118
+}:
+let 
+  pkgs = import nixpkgs { system = "x86_64-linux"; };
+
+  orgEclipseImp = pkgs.fetchsvn {
+    url = http://dev.eclipse.org/svnroot/technology/org.eclipse.imp/trunk;
+    rev = 22255;
+    sha256 = "0mknky2wpqvpcaqnz1l6wh6p1p8zjmd299hlf1nnwm91paiqmm85";
+  };
+
+  shrike = pkgs.fetchsvn {
+    url = https://wala.svn.sourceforge.net/svnroot/wala/trunk/com.ibm.wala.shrike;
+    rev = 3073;
+    sha256 = "0y13i31xlhian5glk4cahbzxg4mky4q61qzc5g03qkg4d67k12zd";
+  };
+
+  eclipseLinux64 = pkgs.fetchurl {
+    url = http://download.springsource.com/release/ECLIPSE/helios/SR1/eclipse-SDK-3.6.1-linux-gtk-x86_64.tar.gz ;
+    sha256 = "1cg9rrb5w978sdqbzz9lnli1lds9zhb6wfsj3wp725bqf1i6v9lg";
+  };
+
+  eclipseFun = 
+  	{ updatesites ? [], installIUs ? [], name, src ? eclipseLinux64 } :
+  	with pkgs;	
+    stdenv.mkDerivation {
+      inherit name src;
+      buildInputs = [jdk makeWrapper perl];
+      buildCommand = ''
+        ensureDir $out/bin
+        ensureDir $out/eclipse
+        
+        unpackPhase
+        cd eclipse
+        
+        header "Changing eclipse.ini"
+
+        # remove vm args
+        sed -i 's|-Xms[0-9]*m||' eclipse.ini
+        sed -i 's|-Xss[0-9]*m||' eclipse.ini
+        sed -i 's|-Xmx[0-9]*m||' eclipse.ini
+        sed -i 's|-XX:MaxPermSize=[0-9]*m||' eclipse.ini
+        sed -i '/^$/d' eclipse.ini
+        perl -pi -e "s/^\r\n//" eclipse.ini
+
+        # add own default vmwargs
+        echo "-Xms256m" >> eclipse.ini
+        echo "-Xss8m" >> eclipse.ini
+        echo "-Xmx1024m" >> eclipse.ini
+        echo "-XX:MaxPermSize=256m" >> eclipse.ini
+        echo "-server" >> eclipse.ini
+            
+        stopNest
+ 
+        header "Installing editors"
+        ALL_SITES="${lib.concatStringsSep "," updatesites}"       
+        ${lib.concatMapStrings (installIU: ''
+            header "Installing Editor ${installIU}..."
+            java -Xmx512m -jar plugins/org.eclipse.equinox.launcher_*.jar  \
+                 -application org.eclipse.equinox.p2.director \
+                 -metadataRepository $ALL_SITES \
+                 -artifactRepository $ALL_SITES \
+                 -installIU ${installIU} \
+                 -data ../data \
+                 -consolelog
+            stopNest     
+          '') installIUs
+        }
+        stopNest
+        
+        header "Fixing"
+        cp -R . $out/eclipse
+        
+	    # Patch binaries
+	    interpreter=$(echo ${stdenv.glibc}/lib/ld-linux*.so.2)
+	    patchelf --set-interpreter $interpreter $out/eclipse/eclipse
+	    patchelf --set-rpath ${freetype}/lib:${fontconfig}/lib:${xlibs.libX11}/lib:${xlibs.libXrender}/lib:${zlib}/lib $out/eclipse/libcairo-swt.so
+	
+	    # Create wrapper script
+	    makeWrapper $out/eclipse/eclipse $out/bin/eclipse \
+	      --prefix PATH : ${jre}/bin \
+	      --prefix LD_LIBRARY_PATH : ${glib}/lib:${gtk}/lib:${xlibs.libXtst}/lib
+	
+	    # Create desktop item
+	    ensureDir $out/share/applications
+
+	    stopNest        
+      '';
+      
+      __noChroot = installIUs != [];
+    };
+    
+  eclipse = eclipseFun {
+  name = "spoofax";
+  updatesites = [
+  #  "http://www.lclnet.nl/update"
+  #  "http://download.eclipse.org/releases/helios"
+  ];
+  installIUs = [
+  #  "org.strategoxt.imp.feature.group"
+  ];
+  }; 
+    
+  jobs = with pkgs.lib;
+	{
+	    src = pkgs.stdenv.mkDerivation {
+	      name = "spoofax-imp-src-r${toString spoofaxImp.rev}";
+	      buildCommand = ''
+	        ensureDir $out
+	        cd $out
+	        
+	        header "Preparing org.eclipse.imp"
+	
+	        for d in ${orgEclipseImp}/org.eclipse.imp.cheatsheets \
+	                 ${orgEclipseImp}/org.eclipse.imp.java.hosted \
+	                 ${orgEclipseImp}/org.eclipse.imp.lpg \
+	                 ${orgEclipseImp}/org.eclipse.imp.lpg.ide \
+	                 ${orgEclipseImp}/org.eclipse.imp.lpg.metatooling \
+	                 ${orgEclipseImp}/org.eclipse.imp.metatooling \
+	                 ${orgEclipseImp}/org.eclipse.imp.preferences \
+	                 ${orgEclipseImp}/org.eclipse.imp.prefspecs \
+	                 ${orgEclipseImp}/org.eclipse.imp.presentation \
+	                 ${orgEclipseImp}/org.eclipse.imp.runtime \
+	                 ${orgEclipseImp}/org.eclipse.imp.smapi \
+	                 ${orgEclipseImp}/org.eclipse.imp.smapifier \
+	                 ${orgEclipseImp}/org.eclipse.imp.xform \
+	                 ${spoofax}/org.spoofax.aterm \
+	                 ${spoofax}/org.spoofax.compiler \
+	                 ${spoofax}/org.spoofax.interpreter \
+	                 ${spoofax}/org.spoofax.interpreter.adapter.aterm \
+	                 ${spoofax}/org.spoofax.interpreter.core \
+	                 ${spoofax}/org.spoofax.interpreter.library.jsglr \
+	                 ${spoofax}/org.spoofax.jsglr \
+                     ${spoofaxImp}/org.strategoxt.imp.editors.aster \
+	                 ${spoofaxImp}/org.strategoxt.imp.editors.aterm \
+	                 ${spoofaxImp}/org.strategoxt.imp.editors.editorservice \
+	                 ${spoofaxImp}/org.strategoxt.imp.editors.pp \
+	                 ${spoofaxImp}/org.strategoxt.imp.editors.sdf \
+	                 ${spoofaxImp}/org.strategoxt.imp.editors.spoofax \
+	                 ${spoofaxImp}/org.strategoxt.imp.editors.stratego \
+	                 ${spoofaxImp}/org.strategoxt.imp.feature \
+	                 ${spoofaxImp}/org.strategoxt.imp.generator \
+	                 ${spoofaxImp}/org.strategoxt.imp.metatooling \
+	                 ${spoofaxImp}/org.strategoxt.imp.nativebundle \
+	                 ${spoofaxImp}/org.strategoxt.imp.runtime \
+	                 ${spoofaxImp}/org.strategoxt.imp.updatesite 
+	        do
+	            header "Copying $d"
+	                cp -R $d .
+	            stopNest
+	        done
+	        
+	        cp -R ${shrike} com.ibm.wala.shrike
+	        cp -R ${lpgRuntime} lpg.runtime.java
+	        cp -R ${strategoxtJavaBackend} org.strategoxt.strj
+	        
+	        chmod -R +w .
+
+	        header "Patching org.eclipse.imp using ${spoofaxImp}/org.eclipse.imp/org.eclipse.imp.runtime.patch"
+	            patch -p0 < ${spoofaxImp}/org.eclipse.imp/org.eclipse.imp.runtime.patch
+	        stopNest
+	                
+	        stopNest
+	
+	      '';
+	    };
+	
+	    build = pkgs.stdenv.mkDerivation rec {
+	      name = "spoofax-imp-r${toString spoofaxImp.rev}";
+	      inherit (jobs) src;
+	      
+	      buildInputs = [ pkgs.maven3 strcJava pkgs.pkgconfig pkgs.which pkgs.ecj pkgs.jdk];
+	      mvnFlags = "-Dmaven.repo.local=/tmp/m3";
+	      buildPhase = ''
+            export M2_REPO=/tmp/m3
+            export STRATEGOXT=${pkgs.strategoPackages.strategoxt}
+            export JAVA_FRONT=${pkgs.strategoPackages.javafront}
+            export SDF=${pkgs.strategoPackages.sdf}
+
+            mvn org.sonatype.tycho:maven-tycho-plugin:generate-poms -Dversion=1.0.0-SNAPSHOT -DgroupId=spoofax -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags}
+
+            cp ${strcJava}/share/strc-java/strategoxt.jar org.strategoxt.strj/java
+
+            header "Building org.strategoxt.imp.generator"
+            make -C org.strategoxt.imp.generator all
+            stopNest
+	        
+            mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e
+	      '';
+	      
+	      installPhase = ''
+	        ensureDir $out/nix-support
+            cp -Rv org.strategoxt.imp.updatesite/target/site $out/
+	      '';
+	        
+	      __noChroot = true;
+	    } ;
+     
+    } ;
+
+in jobs

From karltk at strategoxt.org  Mon Nov 22 15:33:09 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 22 Nov 2010 14:33:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21399 -
	strategoxt-javascript-backend/trunk/tests/basic
Message-ID: <201011221433.oAMEX9Fd007345@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Mon Nov 22 14:33:08 2010
New Revision: 21399
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21399&sc=1

Log:
Reorg.

Deleted:
   strategoxt-javascript-backend/trunk/tests/basic/

From karltk at strategoxt.org  Mon Nov 22 15:34:32 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 22 Nov 2010 14:34:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21400 -
	strategoxt-javascript-backend/trunk/tests/basic
Message-ID: <201011221434.oAMEYWPo007357@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Mon Nov 22 14:34:32 2010
New Revision: 21400
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21400&sc=1

Log:
* Copy basic tests from Java backend, to retain history.

Added:
   strategoxt-javascript-backend/trunk/tests/basic/
      - copied from r21399, strategoxt-java-backend/trunk/test/basic/

From R.B.Vermaas at tudelft.nl  Mon Nov 22 15:41:13 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 22 Nov 2010 14:41:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21401 - hydra/jobs
Message-ID: <201011221441.oAMEfDhM007463@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Mon Nov 22 14:41:12 2010
New Revision: 21401
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21401&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Mon Nov 22 14:34:32 2010	(r21400)
+++ hydra/jobs/spoofax-imp.nix	Mon Nov 22 14:41:12 2010	(r21401)
@@ -196,6 +196,8 @@
 	      installPhase = ''
 	        ensureDir $out/nix-support
             cp -Rv org.strategoxt.imp.updatesite/target/site $out/
+            touch $out/site/index.html
+            echo "file site $out/site" >> $out/nix-support/hydra-build-products
 	      '';
 	        
 	      __noChroot = true;

From karltk at strategoxt.org  Mon Nov 22 16:33:43 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 22 Nov 2010 15:33:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21402 - in
	strategoxt-javascript-backend/trunk/src: javascript stratego
Message-ID: <201011221533.oAMFXhHj008948@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Mon Nov 22 15:33:42 2010
New Revision: 21402
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21402&sc=1

Log:
* Added primitive traversal operations one, some, all.
 * Extended stratego-lib emulation layer a bit.
 * Fixed bug in constructor initialization compilation scheme.

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/utils.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js	Mon Nov 22 14:41:12 2010	(r21401)
+++ strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js	Mon Nov 22 15:33:42 2010	(r21402)
@@ -4,6 +4,19 @@
 
 StrategoJS.StrategoLib = {}
 
-StrategoJS.StrategoLib.inc_0_0 = function(term) {
-	return term + 1;
+StrategoJS.StrategoLib.inc_0_0 = function(ctx, ct) { return ct + 1; }
+StrategoJS.StrategoLib.debug_0_0 = function(ctx, ct, fun) { print(ctx.factory.prettify(ct)); }
+StrategoJS.StrategoLib.debug_1_0 = function(ctx, ct, fun) { var t = fun(ctx, ct); print(ctx.factory.prettify(t)); }
+StrategoJS.StrategoLib.try_1_0 = function(ctx, ct, fun) { var nt = fun(ctx, ct); return nt === null ? ct : nt; }
+StrategoJS.StrategoLib.filter_1_0 = function(ctx, ct, fun) {
+	var factory = ctx.factory;
+	var r = [];
+	var list = ct;
+	while(!factory.isEmptyList(list)) {
+		var x = fun(factory.head(list));
+		if(x !== null)
+			r.push(x);
+		list = factory.tail(list);
+	}
+	return factory.makeList(r);
 }
\ No newline at end of file

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Mon Nov 22 14:41:12 2010	(r21401)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Mon Nov 22 15:33:42 2010	(r21402)
@@ -47,14 +47,14 @@
 };
 
 StrategoJS.SRTS.SRTS_one = function(ctx, term, fun) {
+	print("SRTS_one");
 	var factory = ctx.factory;
 	switch(factory.termType(term)) {
-	case REAL:
-	case INT:
-	case STRING: 
+	case factory.REAL:
+	case factory.INT:
+	case factory.STRING:
 		return fun(ctx, term);
-	case LIST: 
-		var r = null;
+	case factory.LIST:
 		while(!factory.isEmptyList(term)) {
 			var r = fun(ctx, factory.head(term));
 			if(r !== null)
@@ -62,11 +62,11 @@
 			term = factory.tail();
 		}
 		return null;
-	case TUPLE:
-	case APPL:
+	case factory.TUPLE:
+	case factory.APPL:
 		var l = factory.getSubtermCount();
 		for(var i = 0; i < l; i++) {
-			var r = fun(ctx, factor.getSubterm(i));
+			var r = fun(ctx, factory.getSubterm(i));
 			if(r !== null)
 				return r;
 		}
@@ -74,4 +74,74 @@
 	default:
 		throw new "invalid term type ";
 	}
+}
+
+StrategoJS.SRTS.SRTS_all = function(ctx, term, fun) {
+	print("SRTS_all");
+	var factory = ctx.factory;
+	switch(factory.termType(term)) {
+	case factory.REAL:
+	case factory.INT:
+	case factory.STRING: 
+		return fun(ctx, term);
+	case factory.LIST: 
+		var r = factory.makeEmptyList();
+		while(!factory.isEmptyList(term)) {
+			var x = fun(ctx, factory.head(term));
+			if(x === null)
+				return null;
+			r = factory.makeList(x, r);
+			term = factory.tail();
+		}
+		return null;
+	case factory.TUPLE:
+	case factory.APPL:
+		var l = factory.getSubtermCount();
+		var r = factory.makeEmptyList();
+		for(var i = 0; i < l; i++) {
+			var x = fun(ctx, factory.getSubterm(i));
+			if(r === null)
+				return null;
+			r = factory.makeList(x, r);
+		}
+		return null;
+	default:
+		throw new "invalid term type ";
+	}
+}
+
+StrategoJS.SRTS.SRTS_some = function(ctx, term, fun) {
+	print("SRTS_some");
+	var factory = ctx.factory;
+	switch(factory.termType(term)) {
+	case factory.REAL:
+	case factory.INT:
+	case factory.STRING: 
+		return fun(ctx, term);
+	case factory.LIST: 
+		var r = factory.makeEmptyList();
+		while(!factory.isEmptyList(term)) {
+			var x = fun(ctx, factory.head(term));
+			if(x !== null)
+				r = factory.makeList(x, r);
+			term = factory.tail();
+		}
+		if(factory.isEmptyList(r))
+			return null;
+		return r;
+	case factory.TUPLE:
+	case factory.APPL:
+		var l = factory.getSubtermCount();
+		var r = factory.makeEmptyList();
+		for(var i = 0; i < l; i++) {
+			var x = fun(ctx, factory.getSubterm(i));
+			if(r !== null)
+				r = factory.makeList(x, r);
+		}
+		if(factory.isEmptyList(r))
+			return null;
+		return r;
+	default:
+		throw new "invalid term type ";
+	}
 }
\ No newline at end of file

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Mon Nov 22 14:41:12 2010	(r21401)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Mon Nov 22 15:33:42 2010	(r21402)
@@ -48,7 +48,10 @@
          var rootCtx = SRTS._initContext();
          var factory = rootCtx.factory;
          var TRACES_ENABLED = true;
-         var _Fail = function() { return null; }; // FIXME SSL_fail()
+         var _Fail = StrategoJS.resolveImport("SSL_fail");
+         var SRTS_one = StrategoJS.resolveImport("SRTS_one");
+         var SRTS_all = StrategoJS.resolveImport("SRTS_all");
+         var SRTS_some = StrategoJS.resolveImport("SRTS_some");
          [ctor-decl*]
          [ctor-init*]
          [function-def*]
@@ -149,6 +152,7 @@
   	SDefT(x, s*, t*, s) ->
   	$[
      function(ctx, term [param*]) {
+     	print("[x]");
        [bstm-init*]
        if(TRACES_ENABLED) ctx.push("[x]");
        [feil]: {
@@ -380,7 +384,10 @@
     )
     
   JSDeclareConstructor: 
-  	OpDecl(c, t) -> $[ [x] /* ctor */ ]
+  	OpDecl(c, t) -> 
+  	$[ 
+  		/* constructor [x] */  
+  	]
   where
   	not(OpDecl("", id) + OpDecl("Cons", [id, id]) + OpDecl("Nil", []))
   with
@@ -400,7 +407,9 @@
     
     
   JSInitConstructor:
-  	OpDecl(c, t) -> $[var [x] = factory.makeCtor("[c]", [<js-mk-int-const> ar])]
+  	OpDecl(c, t) -> $[
+  		var [x] = factory.makeCtor("[c]", [<js-mk-int-const> ar]);
+  	]
   where
   	ar := <Arity <+ is-int> t
   ; x  := <js-ConstructorName> (c, ar)

Modified: strategoxt-javascript-backend/trunk/src/stratego/utils.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/utils.str	Mon Nov 22 14:41:12 2010	(r21401)
+++ strategoxt-javascript-backend/trunk/src/stratego/utils.str	Mon Nov 22 15:33:42 2010	(r21402)
@@ -7,11 +7,11 @@
   jsify = cify
 
   string-join(|c) =
-          <foldl(\(x,y) -> <concat-strings> [y, c, x]\)> (<id>, "")
-        ; if ?"" then
-                id
-          else
-                explode-string
+      <foldl(\(x,y) -> <concat-strings> [y, c, x]\)> (<id>, "")
+    ; if ?"" then
+        id
+      else
+          explode-string
         ; drop(|<string-length> c)
         ; implode-string
       end

From karltk at strategoxt.org  Mon Nov 22 17:38:58 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 22 Nov 2010 16:38:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21403 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests tests/basic tests/testlib
Message-ID: <201011221638.oAMGcwMi010022@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Mon Nov 22 16:38:58 2010
New Revision: 21403
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21403&sc=1

Log:
* Started on a minimal stratego library subset for tests only; placed in tests/testlib/emu-libstatego-lib.str
 * Added minimal cut of a SSL_mkterm() that supports creating list conses.
 * First sketch of term implode/explode support.
 * Removed Java-like TermReference constructor -- by constraining lifting, we can use JS closures to get what we need.

Added:
   strategoxt-javascript-backend/trunk/tests/testlib/
   strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str
Modified:
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/src/javascript/terms.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
   strategoxt-javascript-backend/trunk/src/stratego/variable-access.str
   strategoxt-javascript-backend/trunk/tests/Makefile
   strategoxt-javascript-backend/trunk/tests/basic/build_1.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Mon Nov 22 15:33:42 2010	(r21402)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Mon Nov 22 16:38:58 2010	(r21403)
@@ -8,3 +8,28 @@
 	return null;
 }
 
+StrategoJS.SSL.SSL_id = function(term) {
+	return term;
+}
+
+StrategoJS.SSL.SSL_stdin_stream = function(term) {
+	return 1;
+}
+
+StrategoJS.SSL.SSL_stdout_stream = function(term) {
+	return 2;
+}
+
+StrategoJS.SSL.SSL_stderr_stream = function(term) {
+	return 3;
+}
+
+StrategoJS.SSL.SSL_mkterm = function(term, ctorName, args) {
+	// FIXME find a factory
+	
+	if(ctorName === "[]") {
+		return StrategoJS.Term.makeListCons(args[0], args[1]);
+	}
+	
+	throw "not implemented;"
+}

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Mon Nov 22 15:33:42 2010	(r21402)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Mon Nov 22 16:38:58 2010	(r21403)
@@ -364,7 +364,7 @@
 				}
 				r.termType = TUPLE;
 				r.subtermCount = args.length;
-				r.getSubTerm = function(index) {
+				r.getSubterm = function(index) {
 					return r[index + 1];
 				}
 				return r;
@@ -406,7 +406,7 @@
 				return term.subtermCount;
 			},
 
-			getCtor : function(appl) {
+			getConstructor : function(appl) {
 				return { name : appl[0], arity : appl.length-1}
 			},
 
@@ -416,7 +416,7 @@
 
 			getAnnotations : function(annoterm) {
 				if(typeof(annoterm.anno) === 'undefined')
-					return makeEmptyList();
+					return factory.makeEmptyList();
 				return annoterm[2];
 			},
 

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Mon Nov 22 15:33:42 2010	(r21402)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Mon Nov 22 16:38:58 2010	(r21403)
@@ -49,6 +49,7 @@
          var factory = rootCtx.factory;
          var TRACES_ENABLED = true;
          var _Fail = StrategoJS.resolveImport("SSL_fail");
+         var _Id = StrategoJS.resolveImport("SSL_id");
          var SRTS_one = StrategoJS.resolveImport("SRTS_one");
          var SRTS_all = StrategoJS.resolveImport("SRTS_all");
          var SRTS_some = StrategoJS.resolveImport("SRTS_some");
@@ -251,12 +252,17 @@
   with
       s'* := <map(lift-strategy-to-function)> s*
   	; t'* := <map(js-construct-term(|feil))> t*
-  	; arg* := <conc> (s'*, t'*)
-  	; if !arg* => [] then
-  	  	args := ""
-  	  else
-  	  	args := <string-join(|",")> ["" | arg*]
-  	  end
+  	; args := <js-join-args> (s'*, t'*)
+  	  
+  js-join-args:
+ 	(s'*, t'*) -> args
+  with 
+  	arg* := <conc> (s'*, t'*)
+  ; if !arg* => [] then
+      args := ""
+  	else
+  	  args := <string-join(|",")> ["" | arg*]
+  	end
   	
   translate-Build(|s,f) :
   	Build(t) -> 
@@ -277,7 +283,19 @@
   		[<translate-strategy(|s,f)> s1]
   		[<translate-strategy(|s,f)> s2]
   	]
-  translate-PrimT(|s,f) = fail // TODO (karltk)
+  	
+  translate-PrimT(|s,feil) :
+    PrimT(f, s*, t*) ->
+    $[ 
+      term = StrategoJS.SSL.[f](ctx, term [args]);
+      if (term == null) break [feil];
+    ]
+    with
+        s'*  := <map(lift-strategy-to-function)> s*
+      ; t'*  := <map(js-construct-term(|feil))> t*
+      ; args := <js-join-args> (s'*, t'*)
+        
+
   
   translate-Id(|s,f):
   	Id() -> "/* id */"

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Mon Nov 22 15:33:42 2010	(r21402)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Mon Nov 22 16:38:58 2010	(r21403)
@@ -73,22 +73,21 @@
       cons := <js-ConstructorName-expr> (c, <length> t*)
     ; arg* := <map(js-construct-term(|f)) ; string-join(|",")> t*
     
-  js-ConstructTerm(|f) :
+  js-ConstructTerm(|feil) :
     Explode(t1, t2) -> x
     with
-      e_t1 := <js-construct-term(|f)> t1
-    ; e_t2 := <js-construct-term(|f)> t2
+      e_t1 := <js-construct-term(|feil)> t1
+    ; e_t2 := <js-construct-term(|feil)> t2
     ; x    := <newname> "mkterm"
     ; rules(
         js-CheckBuild :+=
           ( $[ var [x]; ]
-          , $[
-               [x] = ctx.invokePrimitive("SSL_mkterm", term, ["[]"], ["["] [e_t1], [e_t2] ["]"]);
-               if (x == null)
-                 break Fail;
-            ])
+          , ${
+               {x} = StrategoJS.SSL.SSL_mkterm(term, "[]", [{e_t1}, {e_t2}]);
+               if ({x} == null)
+                 break {feil};
+            })
       )
-  // TODO dynrule for fail ?
   
   js-ConstructTerm(|f) : 
     Op("", args) -> $< factory.makeTuple([<args'>]) >

Modified: strategoxt-javascript-backend/trunk/src/stratego/variable-access.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/variable-access.str	Mon Nov 22 15:33:42 2010	(r21402)
+++ strategoxt-javascript-backend/trunk/src/stratego/variable-access.str	Mon Nov 22 16:38:58 2010	(r21403)
@@ -14,7 +14,7 @@
     x{} -> $[ var [x] = null; ]
 
   to-js-vardecl:
-    x{Offset(i), Escapes()} -> $[ var [x] = new TermReference(); ]
+    x{Offset(i), Escapes()} -> $[ var [x] /* = new TermReference()*/; ]
 
   js-VarToWrite :
     (x{}, e) -> $[ [x] = [e]; ]
@@ -23,7 +23,7 @@
     (x{Frames([])}, e) -> $[ [x] = [e]; ]
 
   js-VarToWrite : 
-    (x{Offset(i), Frames(_)}, e) -> $[ [x].value = [e]; ]
+    (x{Offset(i), Frames(_)}, e) -> $[ [x]/*.value*/ = [e]; ]
 
   js-VarToReadRef : 
     Var(x{}) -> x 
@@ -32,4 +32,4 @@
     Var(x{Frames([])}) ->  x
 
   js-VarToReadRef :
-    Var(x{Offset(i), Frames(_)}) -> $[ [x].value ]
+    Var(x{Offset(i), Frames(_)}) -> $[ [x]/*.value*/ ]

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Mon Nov 22 15:33:42 2010	(r21402)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Mon Nov 22 16:38:58 2010	(r21403)
@@ -10,7 +10,7 @@
 all: $(TESTRUNS)
 
 %.ctree : %.str ../src/stratego/s2js
-	strc -S -i $< -F -o $@
+	strc -S -I testlib -i $< -F -o $@
 
 %.js : %.ctree
 	../trans/s2js -i $< | ../scripts/add-cli-wrapper.sh > $@

Modified: strategoxt-javascript-backend/trunk/tests/basic/build_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/basic/build_1.str	Mon Nov 22 15:33:42 2010	(r21402)
+++ strategoxt-javascript-backend/trunk/tests/basic/build_1.str	Mon Nov 22 16:38:58 2010	(r21403)
@@ -1,5 +1,6 @@
 module build_1
-imports libstratego-lib
+imports 
+	emu-libstratego-lib
 
 signature
   constructors

Added: strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str	Mon Nov 22 16:38:58 2010	(r21403)
@@ -0,0 +1,86 @@
+module emu-libstratego-lib
+
+signature
+  constructors
+    : ()
+    : a -> (a)
+    : a * b -> (a, b)
+    : a * b * c -> (a, b, c)
+    : a * b * c * d -> (a, b, c, d)
+    : a * b * c * d * e -> (a, b, c, d, e)
+    : a * b * c * d * e * f -> (a, b, c, d, e, f)
+    : a * b * c * d * e * f * g -> (a, b, c, d, e, f, g)
+    : a * b * c * d * e * f * g * h -> (a, b, c, d, e, f, g, h)
+    : a * b * c * d * e * f * g * h * i -> (a, b, c, d, e, f, g, h, i)
+    : a * b * c * d * e * f * g * h * i * j -> (a, b, c, d, e, f, g, h, i, j)
+    : a * b * c * d * e * f * g * h * i * j * k -> (a, b, c, d, e, f, g, h, i, j, k)
+    : a * b * c * d * e * f * g * h * i * j * k * l -> (a, b, c, d, e, f, g, h, i, j, k, l)
+    : a * b * c * d * e * f * g * h * i * j * k * l * m -> (a, b, c, d, e, f, g, h, i, j, k, l, m)
+    : a * b * c * d * e * f * g * h * i * j * k * l * m * n -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
+    : a * b * c * d * e * f * g * h * i * j * k * l * m * n * o -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
+    : a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
+    : a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p * q -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
+    : a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p * q * r -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
+
+signature
+  sorts List(a)
+  constructors
+    Nil  : List(a)
+    Cons : a * List(a) -> List(a)
+    Conc : List(a) * List(a) -> List(a)
+
+signature
+  constructors
+  	Stream    : ImplDep -> Stream
+    stderr    : FileLoc
+    stdout    : FileLoc
+    stdin    : FileLoc
+
+strategies 	 
+
+  oncetd(s) = rec x(s <+ one(x))
+
+  collect-one(s) = oncetd(s; ?t); !t
+  
+  length = ?t; prim("SSL_get_list_length", t)
+  
+  debug = where(<fprintnl> (stderr(), [<id>]))
+  
+  debug(msg) = where(<fprintnl> (stderr(), [<msg>,<id>]))
+  
+  fprint =
+    (?Stream(_) <+ stdio-stream, id)
+    ; ?(stream, <id>)
+    ; map(
+        where(
+          is-string
+        < <fputs> (<id>, stream)
+        + <write-in-text-to-stream> (stream, <id>)
+        )
+      )
+    ; !stream
+
+  fprintnl =
+    fprint; <fputc> ('\n', <?Stream(_) <+ stdio-stream>)
+
+  write-in-text-to-stream =
+    ?(Stream(stream), term); prim("SSL_write_term_to_stream_text", stream, term); !Stream(<id>)
+    
+  fputs =
+    ?(str, Stream(stream)); prim("SSL_fputs", str, stream); !Stream(<id>)
+    
+  map(s) =
+    rec x([] + [s | x])
+
+  fputc =
+    ?(c, Stream(stream)); prim("SSL_fputc", c, stream); !Stream(<id>)
+    
+  stdio-stream = ?stdin() ; stdin-stream
+  stdio-stream = ?stdout(); stdout-stream
+  stdio-stream = ?stderr(); stderr-stream
+  
+  stdin-stream  = prim("SSL_stdin_stream") ; !Stream(<id>)
+  stdout-stream = prim("SSL_stdout_stream"); !Stream(<id>)
+  stderr-stream = prim("SSL_stderr_stream"); !Stream(<id>)
+
+  is-string = ?x; prim("SSL_is_string", x)

From karltk at strategoxt.org  Mon Nov 22 21:57:09 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 22 Nov 2010 20:57:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21404 - in
	strategoxt-javascript-backend/trunk: scripts src/javascript
	src/stratego tests
Message-ID: <201011222057.oAMKv9L7013721@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Mon Nov 22 20:57:08 2010
New Revision: 21404
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21404&sc=1

Log:
* In the process of adding support for term imports.
 * At the same time, running for the Ugliest Compiler Hack 2010 contest.

Added:
   strategoxt-javascript-backend/trunk/scripts/quote-term-imports.sh   (contents, props changed)
Modified:
   strategoxt-javascript-backend/trunk/src/javascript/terms.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/tests/Makefile

Added: strategoxt-javascript-backend/trunk/scripts/quote-term-imports.sh
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/scripts/quote-term-imports.sh	Mon Nov 22 20:57:08 2010	(r21404)
@@ -0,0 +1,2 @@
+#! /bin/bash
+exec sed -e '/@@.*@@/ s/"/\\u0022/g' -e "s/@@/\"/g"

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Mon Nov 22 16:38:58 2010	(r21403)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Mon Nov 22 20:57:08 2010	(r21404)
@@ -123,7 +123,7 @@
 			return parseAnno(stringIterator, parseNumber(stringIterator));
 		}
 		}
-		throw new ParseError("Invalid term: '" + ch + "'");
+		throw "Invalid term: '" + ch + "'";
 	};
 
 	function parseAnno(stringIterator, term) {
@@ -194,7 +194,7 @@
 				ch = stringIterator.read();
 			} else if(ch != '\"') {
 				if (ch == -1) {
-					throw new ParseError("Unterminated string: " + sb);
+					throw "Unterminated string: " + sb;
 				}
 				sb.push(ch);
 				ch = stringIterator.read();
@@ -223,7 +223,7 @@
 		} else {
 			stringIterator.unread(ch);
 			var c = factory.makeCtor(sb.join(""), 0);
-			return factory.makeAppl(c, EMPTY);
+			return factory.makeAppl(c, []);
 		}
 	};
 
@@ -231,7 +231,7 @@
 		var template = parseFromStream(stringIterator);
 		parseSkip(stringIterator);
 		if (stringIterator.read() != '>') {
-			throw new ParseError("Expected: '>'");
+			throw "Expected: '>'";
 		}
 		return makePlaceholder(template);
 	};
@@ -263,7 +263,7 @@
 		}
 
 		if(ch != endChar) {
-			throw new ParseError("Sequence starting at offset " + pos + " must end with '" + endChar + "', saw '" + ch + "'");
+			throw "Sequence starting at offset " + pos + " must end with '" + endChar + "', saw '" + ch + "'";
 		}
 		return els;
 	};

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Mon Nov 22 16:38:58 2010	(r21403)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Mon Nov 22 20:57:08 2010	(r21404)
@@ -18,14 +18,14 @@
 
 strategies
 	
-	main = io-wrap(s2js ; echo ; ![])
+  main = io-wrap(s2js ; echo ; ![])
 	
-	s2js =
-		with(
-        	s2js-init-options
-          ; record-main-closurename
-      	)
-	 ; log-timed(
+  s2js =
+      with(
+          s2js-init-options
+        ; record-main-closurename
+      )
+	; log-timed(
         backend-simplify
       | "Backend preprocessing succeeded", 1
       )
@@ -34,8 +34,8 @@
       | "Backend transformation succeeded", 1
       )
   
-	s2js-init-options = id
-	s2js-options = id
+  s2js-init-options = id
+  s2js-options = id
 	
 rules
 	
@@ -55,6 +55,8 @@
          var SRTS_some = StrategoJS.resolveImport("SRTS_some");
          [ctor-decl*]
          [ctor-init*]
+         [const-decl*]
+         [const-init*]
          [function-def*]
          [lifted-def*]
          [main-method]
@@ -80,8 +82,8 @@
   ; ctor-decl*    := <bagof-ConstructorDecl>
   ; ctor-init*    := <bagof-ConstructorInit>
   ; def-init*     := "" // TODO <bagof-DefInit>
-  ; const-decl*   := "" // TODO <bagof-ConstDecl>
-  ; const-init*   := "" // TODO <bagof-ConstInit ; concat ; reverse>
+  ; const-decl*   := <bagof-ConstDecl>
+  ; const-init*   := <bagof-ConstInit>
 
   js-imports = <get-config> "-la" ; map(js-import) <+ ![]    
     
@@ -370,7 +372,79 @@
   ; body' := <translate-strategy(|s,f)> body
   
 
-  translate-ImportTerm(|s,f) = fail // TODO (karltk)
+  translate-ImportTerm(|s,f) :
+    ImportTerm(file) -> $[ term = /*x_constants.*/[x_constant]; ]
+  with
+      inputfile  := <find-import-term-file> file // (exits on error)
+    ; contents   := <ReadFromFile> inputfile
+  with
+      inputname     := <file-name-to-identifier> inputfile
+    ; inputname'    := <not(IsImported) <+ newname> inputname
+    ; x_constant    := <conc-strings> ("const", inputname')
+    ; x_getconstant := <conc-strings> ("get",   inputname')
+//    ; x_constants   := <ConstantContainerClass>
+    ; rules(
+        IsImported : inputname
+        ConstDecl :+= $[
+          var [x_constant];
+        ]
+        ConstDecl :+= $[]
+        ConstInit :+= $[
+          [x_constant] = StrategoJS.Term.parse(@@[<write-to-string> contents]@@);
+        ] /*[x_constants],*/
+      )
+
+   output-dirname =
+     OutputDirName
+   <+
+     <get-config> "-o"
+   ; if has-extension(|"java") + has-extension(|"ctree") then
+       dirname
+     end
+   ; try(file-exists <+ mkdir <+ fatal-err(|"Output directory does not exist"))
+   ; rules(OutputDirName := <id>)
+   <+
+     strc-getoutfile(!"")
+   ; dirname
+   ; try(file-exists <+ mkdir)
+   ; rules(OutputDirName := <id>)
+
+  file-name-to-identifier =
+    base-filename
+  ; string-as-chars(
+      listtd(try(['.', to-upper | id]))
+    ; filter(is-alphanum)
+    ; [to-upper | id]
+    )
+
+  find-import-term-file :
+    file -> file'
+  with
+      pack-stratego-options-wrap(
+        pack-include-path
+      ; getfirst(pack-find-from-dir(|file)) => file'
+      <+
+        basefile := <base-filename> file
+      ; pack-include-path
+      ; getfirst(pack-find-from-dir(|basefile)) => file'
+      )
+    <+
+      file' := <file-exists> file
+    <+
+      fatal-err(|["file ", file, " for imported term not found"])
+      
+  pack-stratego-options-wrap(s) =
+    finally(
+      with(
+        include* := <get-config <+ ![]> "-I"
+      ; <set-config> ("-I", [])
+      ; <parse-options(pack-stratego-options, system-usage, id)> [<whoami>, include*, "-I", "."]
+      )
+    ; s
+    , <set-config> ("-I", include*)
+    )
+
+  
   translate-Escape(|s,f) = fail // TODO (karltk)
   
   

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Mon Nov 22 16:38:58 2010	(r21403)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Mon Nov 22 20:57:08 2010	(r21404)
@@ -1,8 +1,8 @@
 
 COREFILES  := $(wildcard core/*.str)
 BASICFILES := $(wildcard basic/*.str)
-TESTFILES  := $(COREFILES) $(BASICFILES)
-#TESTFILES  := $(BASICFILES)
+#TESTFILES  := $(COREFILES) $(BASICFILES)
+TESTFILES  := $(BASICFILES)
 CTREEFILES := $(subst .str,.ctree,$(TESTFILES))
 JSFILES    := $(subst .str,.js,$(TESTFILES))
 TESTRUNS   := $(subst .str,.run,$(TESTFILES))
@@ -13,7 +13,7 @@
 	strc -S -I testlib -i $< -F -o $@
 
 %.js : %.ctree
-	../trans/s2js -i $< | ../scripts/add-cli-wrapper.sh > $@
+	../trans/s2js -i $< | ../scripts/quote-term-imports.sh | ../scripts/add-cli-wrapper.sh > $@
 
 %.run : %.js
 	java -jar ../lib/js.jar $< && touch $@

From R.B.Vermaas at tudelft.nl  Tue Nov 23 15:38:33 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 23 Nov 2010 14:38:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21405 -
	sglr-recovery/trunk/lpg.runtime.java
Message-ID: <201011231438.oANEcXhT028586@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Tue Nov 23 14:38:31 2010
New Revision: 21405
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21405&sc=1

Log:
small change to build.properties

Modified:
   sglr-recovery/trunk/lpg.runtime.java/build.properties

Modified: sglr-recovery/trunk/lpg.runtime.java/build.properties
==============================================================================
--- sglr-recovery/trunk/lpg.runtime.java/build.properties	Mon Nov 22 20:57:08 2010	(r21404)
+++ sglr-recovery/trunk/lpg.runtime.java/build.properties	Tue Nov 23 14:38:31 2010	(r21405)
@@ -4,7 +4,8 @@
                META-INF/,\
                lpgexe/,\
                templates/,\
-               classes/
+               classes/,\
+               lpgruntime.jar
 src.includes = .classpath,\
                .project,\
                META-INF/,\

From r.t.lindeman at student.tudelft.nl  Tue Nov 23 16:17:14 2010
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Tue, 23 Nov 2010 15:17:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21406 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.core
	org.strategoxt.imp.debug.core/META-INF
	org.strategoxt.imp.debug.core/lib
	org.strategoxt.imp.debug.core/src/org/...
Message-ID: <201011231517.oANFHEPD029205@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Tue Nov 23 15:17:14 2010
New Revision: 21406
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21406&sc=1

Log:
* added experimental support for showing dynamic rules in debug.stratego.core
 * added test stratego programs

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-runtime-java.jar   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/localvar.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/run.input
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/run.output
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileDynamic.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestDynamic.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testfail/testfail2.tes
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-transformer.jar
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoStackFrame.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_enter_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_exit_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_enter_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_exit_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_step_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_var_0_5.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/localvar.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileLocalVar.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/localvar.tes
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testfail/testfail.tes
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-entry.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/str-reader.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoLaunchShortcut.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/.classpath	Tue Nov 23 15:17:14 2010	(r21406)
@@ -1,12 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry exported="true" kind="lib" path="lib/stratego-transformer.jar"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="lib" path="lib/stratego-debug-core.jar"/>
 	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.transformer/utils/strategoxt.jar"/>
-	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.transformer/include/stratego-transformer.jar"/>
+	<classpathentry kind="lib" path="lib/stratego-transformer.jar"/>
+	<classpathentry kind="lib" path="lib/stratego-debug-runtime-java.jar"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.USER_LIBRARY/compiler-tools"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Tue Nov 23 15:17:14 2010	(r21406)
@@ -16,5 +16,6 @@
  org.strjdbg.eclipse.core.str.model
 Bundle-ClassPath: .,
  lib/stratego-debug-core.jar,
- lib/stratego-transformer.jar
+ lib/stratego-transformer.jar,
+ lib/stratego-debug-runtime-java.jar
 Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/build.properties
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/build.properties	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/build.properties	Tue Nov 23 15:17:14 2010	(r21406)
@@ -4,5 +4,6 @@
                .,\
                plugin.xml,\
                lib/stratego-debug-core.jar,\
-               lib/stratego-transformer.jar
+               lib/stratego-transformer.jar,\
+               lib/stratego-debug-runtime-java.jar
 jars.compile.order = .

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar
==============================================================================
Binary file (source and/or target). No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-runtime-java.jar
==============================================================================
Binary file. No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-transformer.jar
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoLaunchDelegate.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/launching/StrategoLaunchDelegate.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -162,6 +162,11 @@
 		
 		// set up vm arguments
 		String classToLaunch = projectName + "." + projectName;
+		
+		String strategoxtjar = DebugSessionSettings.strategoxtjar;
+		String libstrategodebuglib = DebugSessionSettings.libstrategodebuglib;
+		String strjdebugruntime = DebugSessionSettings.strjdebugruntime;
+		
 		String[] classPath = new String[] { binBase, strategoxtjar, libstrategodebuglib, strjdebugruntime};
 		VMRunnerConfiguration vmRunnerConfiguration = new VMRunnerConfiguration(classToLaunch, classPath);
 		
@@ -230,13 +235,6 @@
 		}
 	}
 
-	
-	private static String strj_dbg_core = "/home/rlindeman/workspace/strj-dbg-core";
-
-	private static String strategoxtjar = strj_dbg_core + "/lib/strategoxt.jar";
-	private static String libstrategodebuglib = strj_dbg_core + "/lib/strj_dbg_runtime_lib.jar";
-	private static String strjdebugruntime = strj_dbg_core + "/lib/strj_dbg_runtime_lib-java.jar";
-	
 
 	
 	/*

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -48,6 +48,12 @@
 		extractVariablesFromFrame();
 	}
 	
+	/**
+	 * Saves the variables that are active in the current frame in fVariables.
+	 * The local variables emitted by the s-var debugger calls are shown
+	 * as well as the current Term, with the label *current* 
+	 * but also the dynamic rules.
+	 */
 	private void extractVariablesFromFrame()
 	{		
 		List<EStrategoVariable> vars = new ArrayList<EStrategoVariable>();

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath	Tue Nov 23 15:17:14 2010	(r21406)
@@ -5,5 +5,6 @@
 	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.transformer/utils/strategoxt.jar"/>
 	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.transformer/include/stratego-transformer.jar"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.USER_LIBRARY/compiler-tools"/>
+	<classpathentry kind="lib" path="/org.strategoxt.imp.debug.stratego.runtime/include/stratego-debug-runtime-java.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -3,7 +3,10 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.List;
 
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.debug.core.control.events.EventHandler;
 import org.strategoxt.debug.core.control.events.RuleEnterHandler;
 import org.strategoxt.debug.core.control.events.RuleExitHandler;
@@ -15,9 +18,11 @@
 import org.strategoxt.debug.core.model.LocationInfo;
 import org.strategoxt.debug.core.model.StrategoStackFrame;
 import org.strategoxt.debug.core.model.StrategoState;
+import org.strategoxt.debug.core.util.StrategoTermBuilder;
 
 import com.sun.jdi.Field;
 import com.sun.jdi.IncompatibleThreadStateException;
+import com.sun.jdi.Method;
 import com.sun.jdi.ThreadReference;
 import com.sun.jdi.Value;
 import com.sun.jdi.event.ExceptionEvent;
@@ -159,6 +164,27 @@
 				LocationInfo locationInfo = h.getLocationInfo();
 				//this.strategoState.setLocationInfo(locationInfo); // LocationInfo should be set on the current Frame
 				this.strategoState.currentFrame().setCurrentLocationInfo(locationInfo);
+				
+				// if the thread will be suspended, update the Dynamic Rules. But first get it from the vm while it is suspended
+
+				Method method = null;
+				List<Value> arguments = new ArrayList<Value>();
+				// java method "getDRKeySet" calls a stratego strategy and returns a list of strings for each dynamic rule
+				List<Method> methods = h.getStackFrame().thisObject().referenceType().methodsByName("getDRKeySet");
+				// should be only one method!
+				method = methods.get(0);
+				arguments.add(h.getContextValue());
+
+				if (suspendThread)
+				{
+					System.out.println("suspend");
+					Value output = h.getStackFrame().thisObject().invokeMethod(thread, method, arguments, ThreadReference.INVOKE_SINGLE_THREADED);
+					//Value output = thread.invokeMethod(thread, method, arguments, ThreadReference.INVOKE_SINGLE_THREADED);
+					System.out.println(output.toString());
+					StrategoTermBuilder builder = new StrategoTermBuilder();
+					IStrategoTerm term = builder.buildIStrategoTerm(output); // instance of org.strategoxt.lang.terms.StrategoList(id=1193)
+					System.out.println(term.toString());
+				}
 			} catch(Exception e)
 			{
 				System.err.println("Event handle threw an Exception: " + e.getMessage());

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -104,7 +104,11 @@
 	}
 	
 	private StackFrame stackFrame = null;
-	private StackFrame getStackFrame()
+	/**
+	 * Returns the current stack frame
+	 * @return
+	 */
+	public StackFrame getStackFrame()
 	{
 		if (stackFrame == null)
 		{
@@ -202,7 +206,7 @@
 	 * 
 	 * @return
 	 */
-	protected Value getContextValue()
+	public Value getContextValue()
 	{
 		StackFrame fr = getStackFrame();
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoStackFrame.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoStackFrame.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoStackFrame.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -114,6 +114,11 @@
 		this.currentLocationInfo = currentLocationInfo;
 	}
 	
+	/**
+	 * Call this method when a new variable was used in this frame. (We received a s-var call from the debugger)
+	 * @param varname
+	 * @param value
+	 */
 	public void addVariable(String varname, IStrategoTerm value)
 	{
 		this.variables.put(varname, value);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -23,15 +23,6 @@
 	//public static final String WORKING_DIR = "/home/rlindeman/workspace/strj-dbg-app/working";
 	private String workingDir = null;
 	
-	// jars needed for compiling java to class
-	private static String strj_dbg_core = "/home/rlindeman/workspace/strj-dbg-core";
-
-	protected static String strategoxtjar = strj_dbg_core + "/lib/strategoxt.jar";
-	protected static String libstrategodebuglib = strj_dbg_core + "/lib/strj_dbg_runtime_lib.jar";
-	protected static String strjdebugruntime = strj_dbg_core + "/lib/strj_dbg_runtime_lib-java.jar";
-	
-	private static String strategodebuglib_rtree_dir = strj_dbg_core + "/lib";
-	
 	public DebugCompiler(String workingDir)
 	{
 		this.workingDir = workingDir;
@@ -268,11 +259,13 @@
 	 * @param libraryName
 	 * @param compiledStrategoFilename
 	 */
-	protected static void compileStratego(String inputStrategoFilename, String libraryName, String compiledStrategoFilename)
+	protected void compileStratego(String inputStrategoFilename, String libraryName, String compiledStrategoFilename)
 	{
 		System.out.println("Generated file at " + inputStrategoFilename);
 		System.out.println("Compile str to java...");
 		// compile the stratego file at $outputFilename
+		String strategodebuglib_rtree_dir = DebugSessionSettings.strategodebuglib_rtree_dir;
+		String javaImportName = "org.strategoxt.imp.debug.stratego.runtime.trans"; // was: "org.strategoxt.libstrategodebuglib"
 		String[] strj_args = new String[] {
 			"-i", 	inputStrategoFilename
 			, "-o", compiledStrategoFilename // output will be java, so folders should match the library name
@@ -280,7 +273,7 @@
 			, "-p", libraryName // will be the package name
 			//, "--silent"
 			, "--clean" // remove previous java
-			, "-la", "org.strategoxt.libstrategodebuglib" // used as java import
+			, "-la", javaImportName // used as java import
 		};
 		try {
 			org.strategoxt.strj.Main.mainNoExit(strj_args);
@@ -309,8 +302,12 @@
 		// import org.strategoxt.stratego_lib.*;
 		// import org.strategoxt.libstrategodebuglib.*;
 		// import org.strategoxt.lang.*;
-		String classPath = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + sourceBasedir;
+		String strategoxtjar = DebugSessionSettings.strategoxtjar;
+		String libstrategodebuglib = DebugSessionSettings.libstrategodebuglib;
+		String strjdebugruntime = DebugSessionSettings.strjdebugruntime;
 		
+		String classPath = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + sourceBasedir;
+		System.out.println(classPath);
 		// http://www.javaworld.com/javatips/jw-javatip131.html
 		String filename = sourceBasedir + "/" + mainSourceFileName;
 		String[] args = new String[] {

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -1,6 +1,7 @@
 package org.strategoxt.debug.core.util;
 
 import org.strategoxt.debug.core.control.events.EventHandler;
+import org.strategoxt.imp.debug.stratego.runtime.strategies.*;
 
 import com.sun.jdi.VirtualMachine;
 import com.sun.jdi.request.ClassPrepareRequest;
@@ -15,13 +16,12 @@
 	/**
 	 * package name of the runtime library, should match the package in 'strj_dbg_runtime_lib-java.jar'
 	 */
-	private static final String STRJ_DBG_RUNTIME_PACKAGE = "strjdbgruntimelib.strategies";
-	private static final String STRJ_DBG_RUNTIME_LIB_S_ENTER = STRJ_DBG_RUNTIME_PACKAGE+ ".java_s_enter_0_4";
-	private static final String STRJ_DBG_RUNTIME_LIB_S_EXIT = STRJ_DBG_RUNTIME_PACKAGE+ ".java_s_exit_0_4";
-	private static final String STRJ_DBG_RUNTIME_LIB_R_ENTER = STRJ_DBG_RUNTIME_PACKAGE+ ".java_r_enter_0_4";
-	private static final String STRJ_DBG_RUNTIME_LIB_R_EXIT = STRJ_DBG_RUNTIME_PACKAGE+ ".java_r_exit_0_4";
-	private static final String STRJ_DBG_RUNTIME_LIB_S_STEP = STRJ_DBG_RUNTIME_PACKAGE+ ".java_s_step_0_4";
-	private static final String STRJ_DBG_RUNTIME_LIB_S_VAR = STRJ_DBG_RUNTIME_PACKAGE+ ".java_s_var_0_5";
+	private static final String STRJ_DBG_RUNTIME_LIB_S_ENTER = java_s_enter_0_4.getFullClassName();
+	private static final String STRJ_DBG_RUNTIME_LIB_S_EXIT = java_s_exit_0_4.getFullClassName();
+	private static final String STRJ_DBG_RUNTIME_LIB_R_ENTER = java_r_enter_0_4.getFullClassName();
+	private static final String STRJ_DBG_RUNTIME_LIB_R_EXIT = java_r_exit_0_4.getFullClassName();
+	private static final String STRJ_DBG_RUNTIME_LIB_S_STEP = java_s_step_0_4.getFullClassName();
+	private static final String STRJ_DBG_RUNTIME_LIB_S_VAR = java_s_var_0_5.getFullClassName();
 	
 	private static final String EVENT_TYPE = "event-type";
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -50,4 +50,12 @@
 		}
 		return javaDirectory;
 	}
+	
+	private static String root = "/home/rlindeman/Documents/TU/webdsl/spoofax-imp/source";
+	public static String strategoxtjar = root+"/org.strategoxt.imp.debug.stratego.transformer/utils/strategoxt.jar";
+	public static String libstrategodebuglib = root + "/org.strategoxt.imp.debug.stratego.runtime/include/stratego-debug-runtime.jar";
+	public static String strjdebugruntime = root + "/org.strategoxt.imp.debug.stratego.runtime/include/stratego-debug-runtime-java.jar";
+	//public static String strategodebuglib_rtree_dir = root + "/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.rtree";
+	
+	public static String strategodebuglib_rtree_dir = root + "/org.strategoxt.imp.debug.stratego.runtime/str-lib";
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -25,7 +25,7 @@
     public final String defaultClasspath = "/home/rlindeman/workspace/short-examples/bin" +
     		":/home/rlindeman/workspace/strj-dbg-generated/bin";
 	
-    public final String defaultJars = DebugCompiler.strategoxtjar + ":" + DebugCompiler.libstrategodebuglib + ":" + DebugCompiler.strjdebugruntime;    
+    public final String defaultJars = DebugSessionSettings.strategoxtjar + ":" + DebugSessionSettings.libstrategodebuglib + ":" + DebugSessionSettings.strjdebugruntime;    
     
 	private VirtualMachineManager vmManager = null;
     

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -0,0 +1,27 @@
+package org.strategoxt.imp.debug.stratego.runtime.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.debug.stratego.runtime.trans.dr_get_key_set_0_0;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public abstract class DebugCallStrategy extends Strategy {
+	
+	public IStrategoTerm getDRKeySet(Context context)
+	{
+		//Context context;
+		IStrategoTerm term = null; // the current term, can this be null?
+		IStrategoTerm keyList = dr_get_key_set_0_0.instance.invoke(context, term);
+		return keyList;
+	}
+
+	/*
+	public String getFullClassName(){
+		
+		System.out.println(this.getClass().getName());
+		System.out.println(this.getClass().getCanonicalName());
+		System.out.println(this.getClass().getSimpleName());
+		
+		return this.getClass().getName();
+	}*/
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_enter_0_4.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_enter_0_4.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_enter_0_4.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -2,7 +2,6 @@
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
 
 /**
  * Called right after the rule matches the current term.
@@ -10,7 +9,7 @@
  * @author rlindeman
  * 
  */
-public class java_r_enter_0_4 extends Strategy {
+public class java_r_enter_0_4 extends DebugCallStrategy {
 	public static java_r_enter_0_4 instance = new java_r_enter_0_4();
 
 	@Override
@@ -18,4 +17,9 @@
 		//context.getIOAgent().printError("Input for java_r_enter_0_4: " + current);
 		return current;
 	}
+	
+	public static String getFullClassName()
+	{
+		return instance.getClass().getName();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_exit_0_4.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_exit_0_4.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_exit_0_4.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -2,7 +2,6 @@
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
 
 /**
  * Called right before the rule returns a new term.
@@ -10,7 +9,7 @@
  * @author rlindeman
  * 
  */
-public class java_r_exit_0_4 extends Strategy {
+public class java_r_exit_0_4 extends DebugCallStrategy {
 	public static java_r_exit_0_4 instance = new java_r_exit_0_4();
 
 	@Override
@@ -18,4 +17,9 @@
 		//context.getIOAgent().printError("Input for java_r_exit_0_4: " + current);
 		return current;
 	}
+	
+	public static String getFullClassName()
+	{
+		return instance.getClass().getName();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_enter_0_4.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_enter_0_4.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_enter_0_4.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -2,7 +2,6 @@
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
 
 /**
  * Called when a strategy is entered.
@@ -10,7 +9,7 @@
  * @author rlindeman
  * 
  */
-public class java_s_enter_0_4 extends Strategy {
+public class java_s_enter_0_4 extends DebugCallStrategy {
 	public static java_s_enter_0_4 instance = new java_s_enter_0_4();
 
 	@Override
@@ -18,4 +17,9 @@
 		//context.getIOAgent().printError("Input for java_s_enter_0_4: " + current);
 		return current;
 	}
+	
+	public static String getFullClassName()
+	{
+		return instance.getClass().getName();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_exit_0_4.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_exit_0_4.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_exit_0_4.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -2,7 +2,6 @@
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
 
 /**
  * Called right before the strategy exits
@@ -10,7 +9,7 @@
  * @author rlindeman
  * 
  */
-public class java_s_exit_0_4 extends Strategy {
+public class java_s_exit_0_4 extends DebugCallStrategy {
 	public static java_s_exit_0_4 instance = new java_s_exit_0_4();
 
 	@Override
@@ -18,4 +17,9 @@
 		//context.getIOAgent().printError("Input for java_s_exit_0_4: " + current);
 		return current;
 	}
+	
+	public static String getFullClassName()
+	{
+		return instance.getClass().getName();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_step_0_4.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_step_0_4.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_step_0_4.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -2,7 +2,6 @@
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
 
 /**
  * 
@@ -15,7 +14,7 @@
  * @author rlindeman
  *
  */
-public class java_s_step_0_4 extends Strategy {
+public class java_s_step_0_4 extends DebugCallStrategy {
 	
 	public static java_s_step_0_4 instance = new java_s_step_0_4();
 
@@ -24,5 +23,9 @@
 		//context.getIOAgent().printError("Input for java_s_exit_0_4: " + current);
 		return current;
 	}
-
+	
+	public static String getFullClassName()
+	{
+		return instance.getClass().getName();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_var_0_5.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_var_0_5.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_var_0_5.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -2,9 +2,8 @@
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
 
-public class java_s_var_0_5 extends Strategy {
+public class java_s_var_0_5 extends DebugCallStrategy {
 
 	
 	public static java_s_var_0_5 instance = new java_s_var_0_5();
@@ -14,4 +13,9 @@
 		//context.getIOAgent().printError("Input for java_s_exit_0_4: " + current);
 		return current;
 	}
+	
+	public static String getFullClassName()
+	{
+		return instance.getClass().getName();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str	Tue Nov 23 15:17:14 2010	(r21406)
@@ -76,3 +76,8 @@
     	//where (<debug(!"s-var: ")> <to-string> (name, loc))
     	where (java-s-var(|filename, name, var-name, loc, t))
     	
+strategies // strategies to collect the active dynamic rules
+	
+	// returns a list of strings
+	dr-get-key-set = prim("SSL_hashtable_keys",  <dr-rule-sets-hashtable>); debug(!"dr-get-key-set:")
+	
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/localvar.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/localvar.str	Tue Nov 23 15:17:14 2010	(r21406)
@@ -0,0 +1,105 @@
+module localvar
+// use local vars in rules and strategies to store temp result
+
+imports
+  libstrategolib
+
+
+signature
+  sorts
+    Prop
+
+  constructors
+  	
+  	Var		: String -> Expression
+  	Number	: Int -> Expression
+  	Add		: Expression * Expression -> Expression
+  	Sub		: Expression * Expression -> Expression
+  	
+  	Print	: Expression -> Statement
+  	Assign	: String * Expression -> Statement
+  	
+  	Function : String * List(Statement) -> Definition
+  	
+  	Comment : String * String -> Definition
+  	
+  	Program : String * List(Definition) -> Program
+  	
+
+    
+strategies
+  main =
+    io-wrap(execute)
+    
+rules
+  // show Comment and Function that have the same name
+	
+  execute:
+  	input -> output
+  	with
+  	  output := <match-comments> input
+
+rules
+	match-comments :
+		// match program
+		Program(_, definitions*) -> out
+		with
+			f* := <find-functions> definitions* // find functions
+			; c* := <find-comments> definitions* // find comments
+			; out := <match-f-and-c> (f*, c*)
+
+		
+	find-functions:
+		definition* -> functions*
+		with
+			functions* := <filter(?Function(_,_))> definition*
+			
+	find-comments:
+		definition* -> comments*
+		with
+			comments* := <filter(?Comment(_,_))> definition*
+			
+	match-f-and-c:
+		(f*, c*) -> matches*
+		with
+			//matches* := <map(find-comment-match(|c*))> f*
+			matches* := <map(try-find-comment-by-name(|c*))> f*
+		
+	try-find-comment-by-name(|c*) = find-comment-match(|c*) // <+ (debug(!"fail"); !"fail")	
+		
+	find-comment-match(|c*):
+		f -> (f, c)
+		// f should be a Function
+		where
+			name := <get-function-name> f
+			; rules (
+			  	get-current-name : input -> name
+			  )
+			; c := <find-comment-by-name(|name)> c*
+			  
+	get-function-name:
+		Function(name, _) -> name
+			
+	find-comment-by-name(|name):
+		c* -> comment
+		where <debug(!"find-comment-by-name ")> name
+		where c := <get-current-name>; <debug(!"get-current-name ")> c
+		with 
+		c-filtered* := <filter(?Comment(name, _))> c*
+		; comment := (<debug(!"stuff:"); first> c-filtered*) //  <+ !Comment(name, "created!!")
+		//; comment := <first> c-filtered*
+		; dr-rule-sets-hashtable
+		; debug(!"dr-rule-sets-hashtable: ")
+
+
+	old-first : c-list* -> out
+	where out := <last> c-list* <+ build-c
+	
+	is-empty = ?[] 
+	
+	
+	first = 
+		debug(!"first: ") ;
+		(is-empty < build-c + last)
+		
+	build-c = !Comment("new", "created!!")
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/run.input
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/run.input	Tue Nov 23 15:17:14 2010	(r21406)
@@ -0,0 +1,23 @@
+Program("progname",
+[
+	Comment("fname", "laalalalalalalalalal")
+	, Comment("this", "this text")
+	, Comment("that", "that text")
+	, Function("fname",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+	, Function("nocomment",
+		[
+			Assign("var_foo"
+				, 
+				Add(Number(2),Number(7))
+				)
+			, Print("var_foo")
+		])
+]
+)

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/run.output
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/run.output	Tue Nov 23 15:17:14 2010	(r21406)
@@ -0,0 +1 @@
+[(Function("fname",[Assign("var_foo",Add(Number(2),Number(7))),Print("var_foo")]),Comment("fname","laalalalalalalalalal")),(Function("nocomment",[Assign("var_foo",Add(Number(2),Number(7))),Print("var_foo")]),Comment("new","created!!"))]

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/localvar.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/localvar.str	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/localvar/localvar.str	Tue Nov 23 15:17:14 2010	(r21406)
@@ -1,6 +1,6 @@
 module localvar
 // use local vars in rules and strategies to store temp result
-
+// This file is used as test input, do not modify!
 imports
   libstrategolib
 

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileDynamic.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileDynamic.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -0,0 +1,55 @@
+package org.strategoxt.debug.core;
+
+import java.io.IOException;
+
+import org.StrategoFileManager;
+import org.strategoxt.debug.core.util.DebugCompiler;
+import org.strategoxt.debug.core.util.DebugSessionSettings;
+
+public class DebugCompileDynamic {
+
+	public static void main(String[] args) {
+		//testDebugCompileLocalVar();
+		testDebugCompileDynamic();
+	}
+	
+	public static void testDebugCompileDynamic() {
+		//String inputBase = StrategoFileManager.BASE;
+		String inputFilePath = "src/stratego/dynamic/localvar.str";
+		//String strategoFilePath = inputBase + "/" + inputFilename;
+		String projectName = "dynamic";
+		DebugCompiler debugCompiler = new DebugCompiler(StrategoFileManager.WORKING_DIR);
+		// mkdir localvar/stratego in workingdir
+		// mkdir localvar/java
+		// mkdir localvar/class
+		String binBase = null;
+		boolean compileSucces = false;
+		try {
+			binBase = debugCompiler.debugCompile(StrategoFileManager.BASE, inputFilePath, projectName);
+			compileSucces = true;
+		} catch (IOException e) {
+			e.printStackTrace();
+		} catch (Exception e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		boolean runjava = true;
+		// run .class
+		if (runjava && compileSucces)
+		{
+			String input = StrategoFileManager.BASE + "/src/stratego/dynamic/run.input";
+			String argsForMainClass = "-i " + input;
+			String mainClass = "dynamic.dynamic";
+			String mainArgs = mainClass + " " + argsForMainClass;
+			
+			String strategoxtjar = DebugSessionSettings.strategoxtjar;
+			String libstrategodebuglib = DebugSessionSettings.libstrategodebuglib;
+			String strjdebugruntime = DebugSessionSettings.strjdebugruntime;
+			
+			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String classpath = cp;
+			org.strategoxt.debug.core.util.Runner.run(projectName, mainArgs, classpath);
+		}
+	}
+	
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileLocalVar.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileLocalVar.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompileLocalVar.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -1,13 +1,58 @@
 package org.strategoxt.debug.core;
 
+import java.io.IOException;
+
+import org.StrategoFileManager;
+import org.strategoxt.debug.core.util.DebugCompiler;
+import org.strategoxt.debug.core.util.DebugSessionSettings;
+
 public class DebugCompileLocalVar {
 
 	/**
 	 * @param args
 	 */
 	public static void main(String[] args) {
-		// TODO Auto-generated method stub
+		testDebugCompileLocalVar();
 
 	}
+	
+	public static void testDebugCompileLocalVar() {
+		//String inputBase = StrategoFileManager.BASE;
+		String inputFilePath = "src/stratego/localvar/localvar.str";
+		//String strategoFilePath = inputBase + "/" + inputFilename;
+		String projectName = "localvar";
+		DebugCompiler debugCompiler = new DebugCompiler(StrategoFileManager.WORKING_DIR);
+		// mkdir localvar/stratego in workingdir
+		// mkdir localvar/java
+		// mkdir localvar/class
+		String binBase = null;
+		boolean compileSucces = false;
+		try {
+			binBase = debugCompiler.debugCompile(StrategoFileManager.BASE, inputFilePath, projectName);
+			compileSucces = true;
+		} catch (IOException e) {
+			e.printStackTrace();
+		} catch (Exception e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		boolean runjava = true;
+		// run .class
+		if (runjava && compileSucces)
+		{
+			String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
+			String argsForMainClass = "-i " + input;
+			String mainClass = "localvar.localvar";
+			String mainArgs = mainClass + " " + argsForMainClass;
+			
+			String strategoxtjar = DebugSessionSettings.strategoxtjar;
+			String libstrategodebuglib = DebugSessionSettings.libstrategodebuglib;
+			String strjdebugruntime = DebugSessionSettings.strjdebugruntime;
+			
+			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String classpath = cp;
+			org.strategoxt.debug.core.util.Runner.run(projectName, mainArgs, classpath);
+		}
+	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/DebugCompilerTest.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -4,53 +4,21 @@
 
 import org.StrategoFileManager;
 import org.strategoxt.debug.core.util.DebugCompiler;
+import org.strategoxt.debug.core.util.DebugSessionSettings;
 
 public class DebugCompilerTest {
 	
 	public static void main(String[] args) {
-		//testDebugCompileLocalVar();
 		testDebugCompileLocalVarDebug();
 	}
 	
-	public static void testDebugCompileLocalVar() {
-		//String inputBase = StrategoFileManager.BASE;
-		String inputFilePath = "src/stratego/localvar/localvar.str";
-		//String strategoFilePath = inputBase + "/" + inputFilename;
-		String projectName = "localvar";
-		DebugCompiler debugCompiler = new DebugCompiler(StrategoFileManager.WORKING_DIR);
-		// mkdir localvar/stratego in workingdir
-		// mkdir localvar/java
-		// mkdir localvar/class
-		String binBase = null;
-		boolean compileSucces = false;
-		try {
-			binBase = debugCompiler.debugCompile(StrategoFileManager.BASE, inputFilePath, projectName);
-			compileSucces = true;
-		} catch (IOException e) {
-			e.printStackTrace();
-		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		boolean runjava = true;
-		// run .class
-		if (runjava && compileSucces)
-		{
-			String input = StrategoFileManager.BASE + "/src/strategies/terms/test.prog";
-			String argsForMainClass = "-i " + input;
-			String mainClass = "localvar.localvar";
-			String mainArgs = mainClass + " " + argsForMainClass;
-			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
-			String classpath = cp;
-			org.strategoxt.debug.core.util.Runner.run(projectName, mainArgs, classpath);
-		}
-	}
+
 	
 	public static void testDebugCompileLocalVarDebug() {
 		//String inputBase = StrategoFileManager.BASE;
 		String inputFilePath = "src/stratego/localvardebug/localvar.str";
 		//String strategoFilePath = inputBase + "/" + inputFilename;
-		String projectName = "localvar";
+		String projectName = "localvardebug";
 		DebugCompiler debugCompiler = new DebugCompiler(StrategoFileManager.WORKING_DIR);
 		// mkdir localvar/stratego in workingdir
 		// mkdir localvar/java
@@ -72,17 +40,18 @@
 		{
 			String input = StrategoFileManager.BASE + "/src/stratego/localvardebug/run.input";
 			String argsForMainClass = "-i " + input;
-			String mainClass = "localvar.localvar";
+			String mainClass = "localvardebug.localvardebug";
 			String mainArgs = mainClass + " " + argsForMainClass;
+			
+			String strategoxtjar = DebugSessionSettings.strategoxtjar;
+			String libstrategodebuglib = DebugSessionSettings.libstrategodebuglib;
+			String strjdebugruntime = DebugSessionSettings.strjdebugruntime;
+			
 			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
 			String classpath = cp;
 			org.strategoxt.debug.core.util.Runner.run(projectName, mainArgs, classpath);
 		}
 	}
-	
-	private static String strj_dbg_core = "/home/rlindeman/workspace/strj-dbg-core";
 
-	private static String strategoxtjar = strj_dbg_core + "/lib/strategoxt.jar";
-	private static String libstrategodebuglib = strj_dbg_core + "/lib/strj_dbg_runtime_lib.jar";
-	private static String strjdebugruntime = strj_dbg_core + "/lib/strj_dbg_runtime_lib-java.jar";
+
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestDynamic.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestDynamic.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -0,0 +1,164 @@
+package org.strategoxt.debug.core.control;
+
+import java.util.List;
+import java.util.Map.Entry;
+
+import junit.framework.Assert;
+
+import org.StrategoFileManager;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;
+import org.strategoxt.debug.core.model.StrategoState;
+import org.strategoxt.debug.core.util.DebugSessionSettings;
+import org.strategoxt.debug.core.util.table.EventEntry;
+import org.strategoxt.debug.core.util.table.EventTable;
+
+public class DSMTestDynamic {
+
+	public static void main(String[] args) {
+		DSMTestDynamic test = new DSMTestDynamic();
+		test.testStepBreakPoint();
+	}
+	
+	@org.junit.Test
+	public void testStepBreakPoint()
+	{
+		String projectName = "dynamic";
+		DebugSessionSettings debugSessionSettings = new DebugSessionSettings(StrategoFileManager.WORKING_DIR, projectName);
+		
+		//String binBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/class";
+		//String strategoBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/stratego";
+		
+		String input = StrategoFileManager.BASE + "/src/stratego/dynamic/run.input";
+		String argsForMainClass = "-i " + input;
+		String mainClass = "dynamic.dynamic";
+		String mainArgs = mainClass + " " + argsForMainClass;
+		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory(); // was binBase
+		String classpath = cp;
+		
+		VMMonitorTestImpl1 vmMonitor = new VMMonitorTestImpl1();
+		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
+		vmMonitor.setDSM(dsm);
+		
+		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
+		//EventTable eventTable = EventTable.readEventTable(location);
+		EventTable eventTable = dsm.getEventSpecManager().getEventTable();
+		Assert.assertEquals(57, eventTable.size());
+		
+		// 78, 8
+		// ; c := <find-comment-by-name(|name)> c*
+		// right after a definition of a local rule
+		// in rule "find-comment-match"
+		List<EventEntry> entries = eventTable.getEventEntries(78, 8, "s-step");
+		Assert.assertEquals(1, entries.size());
+		
+		BreakPoint bp = null;
+		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 78);
+		dsm.getEventSpecManager().add(bp);
+
+		
+		// 89, 6
+		// ; comment := (<debug(!"stuff:"); first> c-filtered*) //  <+ !Comment(name, "created!!")
+		// current active rule calls a dynamic strategy
+		// in rule "find-comment-by-name"
+		entries = eventTable.getEventEntries(89, 6, "s-step");
+		Assert.assertEquals(1, entries.size());
+		
+		bp = null;
+		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 89);
+		dsm.getEventSpecManager().add(bp);
+
+		// TODO: test set breakpoint on dynamic rule
+		/*
+		// 49, 8
+		// out := <match-f-and-c> (f*, c*)
+		entries = eventTable.getEventEntries(49, 8, "s-step");
+		Assert.assertEquals(1, entries.size());
+		
+		bp = null;
+		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 49);
+		dsm.getEventSpecManager().add(bp);
+		*/
+		
+		
+		// which breakpoints will be hit?
+		VMStateTester vmStateTester = new VMStateTester();
+		vmStateTester.addName("find-comment-match");
+		vmStateTester.addName("find-comment-by-name");
+		vmStateTester.addName("find-comment-match");
+		vmStateTester.addName("find-comment-by-name");
+		vmMonitor.setVMStateTester(vmStateTester);
+		
+
+		System.out.println("RUN");
+		// start the debug session
+		start(dsm, mainArgs, classpath);
+	}
+	
+	/**
+	 * classPath contains the binary files of the compiled strj program
+	 * @param mainArgs
+	 * @param classpath
+	 */
+	public static DebugSessionManager start(DebugSessionManager manager, String mainArgs, String classpath)
+	{
+		manager.initVM(mainArgs, classpath);
+		//manager.initVM(mainArgs);
+		manager.setupEventListeners();
+		manager.redirectOutput();
+		manager.runVM();		
+		return manager;
+	}
+	
+	
+	class VMMonitorTestImpl1 implements VMMonitor {
+
+		private DebugSessionManager debugSessionManager;
+		private VMStateTester vmStateTester;
+		
+		public VMMonitorTestImpl1() {
+
+		}
+		
+		public void setVMStateTester(VMStateTester vmStateTester) {
+			this.vmStateTester = vmStateTester;
+		}
+
+		public void setDSM(DebugSessionManager dsm)
+		{
+			this.debugSessionManager = dsm;
+		}
+		
+		public void stateChanged(StrategoState state) {
+			//System.out.println("state changed");
+			String name = state.currentFrame().getName();
+			boolean expected = vmStateTester.isNextHit(name);
+			System.out.println("expected: " + expected);
+			String message = "Hit " + name + ", but expected to hit " + vmStateTester.currentHit();
+			Assert.assertTrue(message, expected);
+			String termString = state.currentFrame().getCurrentTerm().toString();
+			System.out.println("current: " + termString);
+			for ( Entry<String, IStrategoTerm> entry : state.currentFrame().getVariables().entrySet() )
+			{
+				System.out.println("variable entry " + entry.getKey() + " # " + entry.getValue());
+			}
+			this.debugSessionManager.resumeVM();
+		}
+
+		public void vmEvent(String event) {
+			System.out.println("vmEvent: " + event);
+			if ("VMDEATH".equals(event))
+			{
+				// vm terminated
+				if (this.vmStateTester.hasNextHit())
+				{
+					Assert.fail("VM has terminated but there are still some expected hits left...");
+				}
+			}
+		}
+		
+	}
+
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -48,7 +48,7 @@
 		String classpath = cp;
 		
 		VMMonitorTestImpl1 vmMonitor = new VMMonitorTestImpl1();
-		DebugSessionManager dsm = this.setUp(debugSessionSettings, mainArgs, classpath, vmMonitor);
+		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
 		vmMonitor.setDSM(dsm);
 		
 		// which breakpoints will be hit?
@@ -61,7 +61,10 @@
 		BreakPoint bp = null;
 		bp = new RuleEnterBreakPoint("find-comment-match", -1); // should hit "find-comment-by-name" two times
 		dsm.getEventSpecManager().add(bp);
+		
 		System.out.println("RUN");
+		// start the debug session
+		start(dsm, mainArgs, classpath);
 	}
 	
 	// stratego program should already be compiled
@@ -81,7 +84,7 @@
 		String classpath = cp;
 		
 		VMMonitorTestImpl1 vmMonitor = new VMMonitorTestImpl1();
-		DebugSessionManager dsm = this.setUp(debugSessionSettings, mainArgs, classpath, vmMonitor);
+		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
 		vmMonitor.setDSM(dsm);
 		
 		// which breakpoints will be hit?
@@ -99,6 +102,8 @@
 		bp = new StrategyEnterBreakPoint("first", -1); // should hit two times
 		dsm.getEventSpecManager().add(bp);
 		System.out.println("RUN");
+		// start the debug session
+		start(dsm, mainArgs, classpath);
 	}
 	
 	@org.junit.Test
@@ -110,7 +115,7 @@
 		//String binBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/class";
 		//String strategoBase = DebugCompilerTest.WORKING_DIR + "/" + projectName + "/stratego";
 		
-		String input = StrategoFileManager.BASE + "/src/strategies/terms/test2.prog";
+		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
@@ -118,13 +123,13 @@
 		String classpath = cp;
 		
 		VMMonitorTestImpl1 vmMonitor = new VMMonitorTestImpl1();
-		DebugSessionManager dsm = this.setUp(debugSessionSettings, mainArgs, classpath, vmMonitor);
+		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
 		vmMonitor.setDSM(dsm);
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
 		EventTable eventTable = dsm.getEventSpecManager().getEventTable();
-		Assert.assertEquals(46, eventTable.size());
+		Assert.assertEquals(51, eventTable.size());
 		
 		// 47, 8
 		// f* := <find-functions> definitions* // find functions
@@ -167,6 +172,8 @@
 		
 
 		System.out.println("RUN");
+		// start the debug session
+		start(dsm, mainArgs, classpath);
 	}
 	
 	@org.junit.Test
@@ -186,7 +193,7 @@
 		String classpath = cp;
 		
 		VMMonitorTestImpl1 vmMonitor = new VMMonitorTestImpl1();
-		DebugSessionManager dsm = this.setUp(debugSessionSettings, mainArgs, classpath, vmMonitor);
+		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
 		vmMonitor.setDSM(dsm);
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
@@ -235,6 +242,8 @@
 		
 
 		System.out.println("RUN");
+		// start the debug session
+		start(dsm, mainArgs, classpath);
 	}
 	
 	@org.junit.Test
@@ -255,7 +264,7 @@
 		String classpath = cp;
 		
 		VMMonitorTestImpl1 vmMonitor = new VMMonitorTestImpl1();
-		DebugSessionManager dsm = this.setUp(debugSessionSettings, mainArgs, classpath, vmMonitor);
+		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
 		vmMonitor.setDSM(dsm);
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
@@ -288,6 +297,8 @@
 		bp = new RuleEnterBreakPoint(rEnter.getStrategyName(), -1); // should hit "find-comment-by-name" two times
 		dsm.getEventSpecManager().add(bp);
 		System.out.println("RUN");
+		// start the debug session
+		start(dsm, mainArgs, classpath);
 	}
 	
 	/**
@@ -295,16 +306,16 @@
 	 * @param mainArgs
 	 * @param classpath
 	 */
-	public DebugSessionManager setUp(DebugSessionSettings debugSessionSettings, String mainArgs, String classpath, VMMonitor vmMonitor)
+	public static DebugSessionManager start(DebugSessionManager manager, String mainArgs, String classpath)
 	{
-		DebugSessionManager manager = new DebugSessionManager(debugSessionSettings, vmMonitor);
 		manager.initVM(mainArgs, classpath);
 		//manager.initVM(mainArgs);
 		manager.setupEventListeners();
 		manager.redirectOutput();
+		manager.runVM();		
 		return manager;
-		//manager.runVM();		
 	}
+	
 
 	
 	class VMMonitorTestImpl1 implements VMMonitor {
@@ -317,7 +328,6 @@
 		}
 		
 		public void setVMStateTester(VMStateTester vmStateTester) {
-			// TODO Auto-generated method stub
 			this.vmStateTester = vmStateTester;
 		}
 
@@ -327,7 +337,6 @@
 		}
 		
 		public void stateChanged(StrategoState state) {
-			// TODO Auto-generated method stub
 			//System.out.println("state changed");
 			String name = state.currentFrame().getName();
 			boolean expected = vmStateTester.isNextHit(name);
@@ -344,8 +353,7 @@
 		}
 
 		public void vmEvent(String event) {
-			// TODO Auto-generated method stub
-			//System.out.println("vmEvent: " + event);
+			System.out.println("vmEvent: " + event);
 			if ("VMDEATH".equals(event))
 			{
 				// vm terminated
@@ -357,4 +365,5 @@
 		}
 		
 	}
+
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/localvar.tes
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/localvar.tes	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/localvar/localvar.tes	Tue Nov 23 15:17:14 2010	(r21406)
@@ -3,7 +3,7 @@
 
 imports
   libstrategolib
-
+  dynamic-rules
 
 signature
   sorts
@@ -72,6 +72,9 @@
 		// f should be a Function
 		where
 			name := <get-function-name> f
+			; rules (
+			  	get-current-name : input -> name
+			  )
 			; c := <find-comment-by-name(|name)> c*
 			  
 	get-function-name:
@@ -79,10 +82,13 @@
 			
 	find-comment-by-name(|name):
 		c* -> comment
+		where <debug(!"find-comment-by-name ")> name
+		where debug(!"get-current-name ")
 		with 
 		c-filtered* := <filter(?Comment(name, _))> c*
 		; comment := (<debug(!"stuff:"); first> c-filtered*) //  <+ !Comment(name, "created!!")
 		//; comment := <first> c-filtered*
+		; <debug(!"dr-rule-sets-hashtable: ")> dr-rule-sets-hashtable
 
 
 	old-first : c-list* -> out

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testfail/testfail.tes
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testfail/testfail.tes	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testfail/testfail.tes	Tue Nov 23 15:17:14 2010	(r21406)
@@ -28,10 +28,15 @@
 		input -> output
 		where
 			i' := create-input
-			; output := test-i
+			; output := test-i <+ test-i2
 			
-	
+	test-i2:
+		input -> output
+		with
+			output := <fail>
 			
+	test-ii2(s1, s2| t) =
+		\ input -> output with output := <fail> ; test := t \ < s1 + (s2; fail)
 strategies
 	create-input = !["fda"]
 	

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testfail/testfail2.tes
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testfail/testfail2.tes	Tue Nov 23 15:17:14 2010	(r21406)
@@ -0,0 +1,60 @@
+module testfail
+
+signature
+
+
+  constructors
+  	
+  	Var		: String -> Expression
+  	Number	: Int -> Expression
+  	Add		: Expression * Expression -> Expression
+  	Sub		: Expression * Expression -> Expression
+  	
+  	Print	: Expression -> Statement
+  	Assign	: String * Expression -> Statement
+  	
+  	Function : String * List(Statement) -> Definition
+  	
+  	Comment : String * String -> Definition
+  	
+  	Program : String * List(Definition) -> Program
+  	
+strategies
+  main =
+    io-wrap(execute)
+
+rules
+	execute :
+		input -> output
+		where
+			i' := <create-input>
+			; output := <test-i <+ test-i2 <+ test-i3>
+			; debug(!"output")
+			  
+	test-i = is-empty
+	
+			
+	test-i2:
+		input -> output
+		where
+			bar := <create-term>
+			; output := <fail>
+	
+	test-ii2 = \ 
+			input -> output
+		where
+			bar := <create-term>
+			; output := <fail>
+	\
+	
+	test-i4 :
+		input -> <fail>
+		
+	test-ii4 =
+		\ input -> <fail> \
+	
+	test-i3:
+		input -> input
+			
+strategies
+	create-input = !["fda"]
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-entry.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-entry.str	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/gen-debug-entry.str	Tue Nov 23 15:17:14 2010	(r21406)
@@ -7,4 +7,26 @@
   libstratego-lib
   include/Test
   assert
-  location-util
\ No newline at end of file
+  location-util
+  
+  
+// Rule sort is used in:
+/*
+DynRuleId ":" Rule "depends" "on" Term 	-> DynRuleDef {cons("SetDynRuleDepends")}
+Id ":" Rule 							-> RuleDef {cons("RDefNoArgs")}
+Id "(" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDef")}
+
+Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" ":" Rule 	-> RuleDef {cons("RDefT")}
+       
+Term "->" Term           	    		-> Rule {cons("RuleNoCond")} %% backward comp.
+Term "->" Term "where" Strategy 		-> Rule {cons("Rule")}       %% backward comp.
+Term "->" Term RuleCond+	    		-> Rule {cons("Rule"), avoid}
+
+"where" Strategy 						-> RuleCond {cons("WhereClause")}
+"with"  Strategy 						-> RuleCond {cons("WithClause")}
+    
+"\\" Rule "\\" 			 				-> Strategy {cons("LRule")}
+"(" Rule ")" 			  				-> Strategy {cons("SRule")}
+
+*/
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/str-reader.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/str-reader.str	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/str-reader.str	Tue Nov 23 15:17:14 2010	(r21406)
@@ -72,11 +72,12 @@
   // ignore current term, just return the ast of a stratego program	
   get-anno-ast(|file-path) = 
       where(
-      	tbl-path := <get-tbl-path>;
-        <ReadFromFile> tbl-path; 
-        open-parse-table => tbl;
-        //<debug(!"filenam")> file-path;
-        <read-text-file> file-path => file
+      	tbl-path := <get-tbl-path>
+        ; <ReadFromFile> tbl-path 
+        ; open-parse-table => tbl
+        //; <debug(!"file-path: ")> file-path
+        ; <read-text-file> file-path => file
+        //; <debug(!"read file from: ")> file-path
       )
     ; <parse-with-asfix-anno(|tbl)> file
       
@@ -85,7 +86,9 @@
   // current term should be result of: <read-text-file> file-path
   // with file-path the path to a text file    
   parse-with-asfix-anno(|tbl) =
-    parse-string-pt(|tbl)
+    parse-string-pt(on-parse-error|tbl)
     ; asfix-anno-location
     ; implode-asfix
+      
+  on-parse-error = debug(!"Parse error: ")
 	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str	Tue Nov 23 15:17:14 2010	(r21406)
@@ -40,7 +40,8 @@
   // the foo rules can be used to debug the transformation process. Use example.sma
 strategies
 	
-	get-project-dir = !"/home/rlindeman/workspace/strj-dbg-transformer"	
+	//get-project-dir = !"/home/rlindeman/workspace/strj-dbg-transformer"	
+	get-project-dir = !"/home/rlindeman/Documents/TU/webdsl/spoofax-imp/source/org.strategoxt.imp.debug.stratego.transformer"
 
   // show ast with complete location annotation
   foo1 = 
@@ -183,20 +184,33 @@
 	// inputfilePath is relative to sourceBasedir.
 	// sourceBasedir should be treated as a project directory
 	// the generated file will be saved at outputfilename
-  apply-debug-trans :
+  apply-debug-trans = apply-debug-trans-internal <+ apply-debug-trans-error
+	
+
+  apply-debug-trans-internal :
   	(sourceBasedir, inputfilePath, outputfilename) -> (status, outputfilename)
   	where(
   	absPath := 	<concat-strings> [sourceBasedir, "/", inputfilePath]
   	; get-anno-ast(|absPath)
+  	//; debug(!"get-anno-ast")
   	; assert-module
+  	//; debug(!"assert-module")
   	; filter-location
+  	//; debug(!"filter-location")
   	; add-debug-info(|inputfilePath)
+  	//; debug(!"add-debug-info(|inputfilePath)")
   	; pp-stratego-ast
+  	//; debug(!"pp-stratego-ast")
   	; write-stratego(|outputfilename)
   	; status := "SUCCES"  		
   	)
+  
+  apply-debug-trans-debug :
+  	input -> output
+  	where debug(!"transform (debug=true)")
+  	with output := input
   	
-  apply-debug-trans :
+  apply-debug-trans-error :
   	false-arguments -> (status, outputfilename)
   	where(
   		not(?(i_sourceBasedir, i_inputfilePath, i_outputfilename))
@@ -215,4 +229,5 @@
   test-apply-debug-1 = !("asdf", "ddfg"); apply-debug-trans
   test-apply-debug-2 = !("asdf", "ddfg", "asfd"); apply-debug-trans
   test-apply-debug-3 = !"asdf"; apply-debug-trans
+
   	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoLaunchShortcut.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoLaunchShortcut.java	Tue Nov 23 14:38:31 2010	(r21405)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strjdbg/eclipse/ui/str/launching/StrategoLaunchShortcut.java	Tue Nov 23 15:17:14 2010	(r21406)
@@ -1,8 +1,10 @@
 package org.strjdbg.eclipse.ui.str.launching;
 
+import org.eclipse.core.resources.IFile;
 import org.eclipse.debug.ui.ILaunchShortcut;
 import org.eclipse.jface.viewers.ISelection;
 import org.eclipse.jface.viewers.IStructuredSelection;
+import org.eclipse.ui.IEditorInput;
 import org.eclipse.ui.IEditorPart;
 
 public class StrategoLaunchShortcut implements ILaunchShortcut {
@@ -19,6 +21,12 @@
 	 */
 	public void launch(IEditorPart editor, String mode) {
 		System.out.println("Launch from editor");
+        IEditorInput input = editor.getEditorInput();
+        IFile file = (IFile) input.getAdapter(IFile.class);
+        if (file != null) {
+        	System.out.println("File: " + file.getFullPath());
+        	// /stratego-resources/src-str/test/localvar/localvar.str
+        }
 		/*
         IEditorInput input = editor.getEditorInput();
         IJavaElement javaElement = 
@@ -52,7 +60,8 @@
             if (type != null) {
              launch(type, mode);
             }
-        }*/
+        }
+        */
     }
 
     protected void launch(/*IType type, */String mode) {

From r.t.lindeman at student.tudelft.nl  Tue Nov 23 17:25:00 2010
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Tue, 23 Nov 2010 16:25:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21407 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.core/lib
	org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model
	org.strategoxt.imp.debug.stratego.core...
Message-ID: <201011231625.oANGP0bx030243@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Tue Nov 23 16:25:00 2010
New Revision: 21407
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21407&sc=1

Log:
Experimental: Added available dynamic rules to the Variables Window in the eclipse debugger. Currently only the names of the rules are shown.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoStackFrame.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java	Tue Nov 23 15:17:14 2010	(r21406)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java	Tue Nov 23 16:25:00 2010	(r21407)
@@ -9,8 +9,10 @@
 import org.eclipse.debug.core.model.IStackFrame;
 import org.eclipse.debug.core.model.IThread;
 import org.eclipse.debug.core.model.IVariable;
+import org.spoofax.interpreter.terms.BasicStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.debug.core.model.StrategoStackFrame;
+import org.strategoxt.lang.terms.StrategoString;
 
 public class EStrategoStackFrame extends StrategoDebugElement implements IStackFrame {
 
@@ -66,6 +68,16 @@
 			v.setValueChanged(true);
 			vars.add(v);
 		}
+		// add dynamic rules
+		if (this.frameData.getDynamicRules() != null)
+		{
+			for(String dynamicRuleName : this.frameData.getDynamicRules())
+			{
+				EStrategoVariable v = new EStrategoVariable(this.fTarget, new BasicStrategoString("rule contents"), dynamicRuleName);
+				v.setValueChanged(true);
+				vars.add(v);
+			}
+		}
 		// TODO: use this.frameData to determine if the value was changed
 		fVariables = new IVariable[vars.size()];
 		fVariables = vars.toArray(fVariables);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Tue Nov 23 15:17:14 2010	(r21406)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Tue Nov 23 16:25:00 2010	(r21407)
@@ -184,6 +184,8 @@
 					StrategoTermBuilder builder = new StrategoTermBuilder();
 					IStrategoTerm term = builder.buildIStrategoTerm(output); // instance of org.strategoxt.lang.terms.StrategoList(id=1193)
 					System.out.println(term.toString());
+					String[] dynamicRuleNames = builder.convertToStringArray(term);
+					this.strategoState.currentFrame().setDynamicRuleNames(dynamicRuleNames);
 				}
 			} catch(Exception e)
 			{

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoStackFrame.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoStackFrame.java	Tue Nov 23 15:17:14 2010	(r21406)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/StrategoStackFrame.java	Tue Nov 23 16:25:00 2010	(r21407)
@@ -124,6 +124,18 @@
 		this.variables.put(varname, value);
 	}
 	
+	private String[] dynamicRuleNames = null;
+	
+	public void setDynamicRuleNames(String[] dynamicRuleNames) {
+		// TODO Auto-generated method stub
+		this.dynamicRuleNames = dynamicRuleNames;
+	}
+	
+	public String[] getDynamicRules()
+	{
+		return this.dynamicRuleNames;
+	}
+	
 	@Override
 	public boolean equals(Object obj) {
 		if (this == obj)
@@ -168,4 +180,5 @@
 		
 		return result;
 	}
+
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java	Tue Nov 23 15:17:14 2010	(r21406)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java	Tue Nov 23 16:25:00 2010	(r21407)
@@ -13,6 +13,7 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.strategoxt.lang.terms.StrategoList;
 import org.strategoxt.lang.terms.TermFactory;
 
 import com.sun.jdi.ArrayReference;
@@ -262,6 +263,7 @@
 		{
 			return buildStrategoAppl(value);
 		}
+		// org.spoofax.interpreter.library.ssl.StrategoHashMap
 		else
 		{
 			System.err.println("Missing type " + type);
@@ -289,5 +291,24 @@
 		IStrategoConstructor strategoConstructor = f.makeConstructor(name, arity);
 		return strategoConstructor;
 	}
+	
+	public String[] convertToStringArray(IStrategoTerm term)
+	{
+		if (term instanceof org.strategoxt.lang.terms.StrategoList)
+		{
+			StrategoList list = (StrategoList) term;
+			int size = list.size();
+			String[] items = new String[size];
+			for(int i = 0; i < size; i++)
+			{
+				items[i] = list.get(i).toString();
+			}
+			return items;
+		}
+		else
+		{
+			return null;
+		}
+	}
 
 }

From tobivollebregt at gmail.com  Tue Nov 23 17:32:52 2010
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 23 Nov 2010 16:32:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21408 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.rtg: .
	.externalToolBuilders META-INF editor editor/java
	editor/java/org editor/java/org/strategoxt editor/java/org...
Message-ID: <201011231632.oANGWq4r030376@proliant.st.ewi.tudelft.nl>

Author: tvo
Date: Tue Nov 23 16:32:51 2010
New Revision: 21408
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21408&sc=1

Log:
Spoofax/297: editor plugin for RTG files

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/.externalToolBuilders/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/.externalToolBuilders/rtg build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/.project
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/META-INF/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/RtgParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/RtgParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/RtgValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/strategies/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/strategies/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/strategies/java_strategy_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Folding.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Outliner.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/lib/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/syntax/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/syntax/rtg.def
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/syntax/rtg.text.tbl
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/test/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/test/example.rtg
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/trans/
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/trans/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/trans/rtg.str

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/.classpath	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/.externalToolBuilders/rtg build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/.externalToolBuilders/rtg build.main.xml.launch	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.rtg/build.main.xml}"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.editors.rtg}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/.project	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>org.strategoxt.imp.editors.rtg</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/rtg build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/META-INF/MANIFEST.MF	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,22 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: RTG Editor Plug-in
+Bundle-SymbolicName: org.strategoxt.imp.editors.rtg; singleton:=true
+Bundle-Version: 0.1.0.0
+Bundle-Activator: org.strategoxt.imp.editors.rtg.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.aterm,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Export-Package: org.strategoxt.imp.editors.rtg
+Bundle-Vendor: Spoofax.org

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.generated.xml	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,440 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,  java.jar,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${build}/org/strategoxt/imp/editors/rtg/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la org.strategoxt.imp.editors.rtg.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-t"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
+                <path><fileset dir="${basedir}" includes="*.astr"/></path>
+            </pathconvert>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <fileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </fileset>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${src-gen}/trans/Main.java"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.main.xml	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="rtg" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="rtg"/>
+        <property name="metasdfmodule" value="Stratego-rtg"/>
+        <property name="esvmodule" value="rtg"/>
+        <property name="strmodule" value="rtg"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/build.properties	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/Activator.java	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,44 @@
+package org.strategoxt.imp.editors.rtg;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "Rtg";
+
+  public static final String kLanguageName = "Rtg";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/RtgParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/RtgParseController.java	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,4 @@
+package org.strategoxt.imp.editors.rtg;
+
+public class RtgParseController extends RtgParseControllerGenerated 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/RtgParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/RtgParseControllerGenerated.java	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,89 @@
+package org.strategoxt.imp.editors.rtg;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class RtgParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("rtg");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = RtgParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = RtgParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(RtgParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return RtgParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/RtgValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/RtgValidator.java	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,12 @@
+package org.strategoxt.imp.editors.rtg;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class RtgValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return RtgParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/strategies/InteropRegisterer.java	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,14 @@
+package org.strategoxt.imp.editors.rtg.strategies;
+
+       import org.strategoxt.lang.JavaInteropRegisterer;
+       import org.strategoxt.lang.Strategy;
+
+       /**
+        * Helper class for {@link java_strategy_0_0}.
+        */
+       public class InteropRegisterer extends JavaInteropRegisterer {
+
+         public InteropRegisterer() {
+           super(new Strategy[] { java_strategy_0_0.instance });
+         }
+       }

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/strategies/Main.java	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,11 @@
+package org.strategoxt.imp.editors.rtg.strategies;
+
+       import org.strategoxt.lang.Context;
+       
+       public class Main {
+         
+         public static void init(Context context) {
+           // Called when the editor is being initialized
+         }
+       
+       }

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/java/org/strategoxt/imp/editors/rtg/strategies/java_strategy_0_0.java	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,32 @@
+package org.strategoxt.imp.editors.rtg.strategies;
+
+       import org.spoofax.interpreter.terms.IStrategoTerm;
+       import org.spoofax.interpreter.terms.ITermFactory;
+       import org.strategoxt.lang.Context;
+       import org.strategoxt.lang.Strategy;
+       
+       /**
+        * Example Java strategy implementation.
+        *
+        * This strategy can be used by editor services and can be called
+        * in Stratego modules by declaring it as an external strategy
+        * as follows:
+        *
+        * <code>
+        *  external java-strategy(|)
+        * </code>
+        *
+        * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+        */
+       public class java_strategy_0_0 extends Strategy {
+         
+         public static java_strategy_0_0 instance = new java_strategy_0_0();
+       
+         @Override
+         public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+           context.getIOAgent().printError("Input for java-strategy: " + current);
+           ITermFactory factory = context.getFactory();
+           return factory.makeString("Regards from java-strategy");
+         }
+       
+       }

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Builders.esv	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,21 @@
+
+module rtg-Builders
+
+imports rtg-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                                               
+  provider                  : include/rtg.ctree                                                                                
+  provider                  : include/rtg-java.jar                                                                             
+                                                                                                                               
+  observer                  : editor-analyze                                                                                   
+                                                                                                                               
+  builder                   : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+                                                                                                                               
+  // on save: generate-java                                                                                                    
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Colorer.esv	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,11 @@
+module rtg-Colorer
+
+imports rtg-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.
+
+  number     : black

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Completions.esv	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,38 @@
+module rtg-Completions
+
+imports rtg-Completions.generated
+
+completions
+
+  // This file is used to define content completion.
+  //
+  // See the imported file for a brief introduction and examples.
+
+
+completions
+
+  // Syntax completion:
+
+/*
+  // basic file structure
+  completion template :
+    RTG = "regular tree grammar\nstart\nproductions" (blank)
+
+  // a set of productions that will be converted to List(Foo) by rtg2sig
+  completion template :
+    ProdRule =
+      "ListStarOfFoo -> ListPlusOfFoo\n"
+      "ListStarOfFoo -> <nil>()\n"
+      "ListStarOfFoo -> <conc>(ListStarOfFoo, ListStarOfFoo)\n"
+      "ListPlusOfFoo -> <conc>(ListStarOfFoo, ListPlusOfFoo)\n"
+      "ListPlusOfFoo -> <conc>(ListPlusOfFoo, ListStarOfFoo)\n"
+      "ListPlusOfFoo -> <conc>(ListPlusOfFoo, ListPlusOfFoo)\n"
+      "ListPlusOfFoo -> <cons>(Foo, ListStarOfFoo)\n" (blank)
+*/
+
+completions
+  // Semantic (identifier) completion:
+
+  completion proposer                  : editor-complete
+
+  //completion trigger                   : ":"

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Folding.esv	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,11 @@
+module rtg-Folding
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
+
+  Start.Start
+  ProdRules.ProdRules
+  ProdRule.ProdRule

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Outliner.esv	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,12 @@
+module rtg-Outliner
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
+
+  // FIXME: org.strategoxt.imp.runtime.services.LabelProvider isn't smart
+  // enough to figure out what to display as captions in the outline view.
+
+  //ProdRule.ProdRule

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-References.esv	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,15 @@
+module rtg-References
+
+imports rtg-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  //hover _     : editor-hover

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg-Syntax.esv	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,9 @@
+module rtg-Syntax
+
+imports rtg-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/editor/rtg.main.esv	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,16 @@
+module rtg.main
+
+imports rtg-Builders rtg-Colorer rtg-Completions rtg-Folding rtg-Outliner rtg-References rtg-Syntax
+
+language General properties
+                  
+  name          : rtg
+  id            : org.strategoxt.imp.editors.rtg
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the rtg language"
+  url           : http://strategoxt.org
+                  
+  extensions    : rtg
+  table         : syntax/rtg.text.tbl
+  start symbols : RTG

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/lib/editor-common.generated.str	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,254 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-rtg-file
+  parse-rtg-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/rtg.tbl)>
+    )
+
+  parse-string = parse-rtg-string
+  parse-rtg-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/rtg.tbl)>
+    )
+  
+  parse-stream = parse-rtg-stream
+  parse-rtg-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/rtg.tbl)>
+    )
+
+  pp-rtg-string =
+    ast2abox(|[<import-term(include/rtg.generated.pp.af)>,
+               <import-term(include/rtg.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "rtg", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    !Some(<id>); all(s); ?Some(<id>)
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/rtg.str file. These definitions should also be automatically 
+  // generated in the imported include/rtg.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/plugin.xml	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="rtg" description="rtg" language="rtg" derivedFrom="DynamicRoot" validator="org.strategoxt.imp.editors.rtg.RtgValidator" validatorClass="org.strategoxt.imp.editors.rtg.RtgValidator"></language>
+       </extension>
+       <extension id="org.strategoxt.imp.editors.rtg.parser" name="rtg Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="org.strategoxt.imp.editors.rtg.RtgParseController" language="rtg">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/syntax/rtg.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/syntax/rtg.def	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,103 @@
+definition
+module rg-layout
+exports
+  lexical syntax
+    [\ \t\n] -> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n]
+
+  sorts
+    LongCom
+    CommChar
+    Asterisk
+
+  lexical syntax
+    "/*" CommChar+ "*/" -> LAYOUT
+    ~[\*]    -> CommChar
+    "*"      -> Asterisk
+    Asterisk -> CommChar
+
+  lexical restrictions
+    Asterisk -/- [\/]
+
+module rg-identifier
+exports
+  sorts Id QuotedIdPart
+  syntax
+    Id -> <Id-CF>
+
+    <PlainIdChars-LEX>    -> Id {cons("Plain")}
+    "[" QuotedIdPart* "]" -> Id {cons("Quoted")}
+
+    <QuotedIdChars-LEX> -> QuotedIdPart {cons("Chars")}
+     "\\" [\\\]]        -> QuotedIdPart {cons("EscapeSeq")}
+
+  sorts PlainIdChars QuotedIdChars
+  lexical syntax
+    ~[\\\]]+           -> QuotedIdChars
+    [a-zA-Z0-9\'\-\_]+ -> PlainIdChars
+
+  lexical restrictions
+    QuotedIdChars -/- ~[\\\]]
+    PlainIdChars  -/- [a-zA-Z0-9\'\-\_]
+
+module rg-nonterm
+imports rg-identifier
+exports
+  sorts NonTerm
+  context-free syntax
+    Id         -> NonTerm {cons("Nonterm")}
+    "<string>" -> NonTerm {cons("String")}
+    "<int>"    -> NonTerm {cons("Int")}
+
+module rg-term
+imports rg-identifier
+exports
+  sorts Term IntConst
+  context-free syntax
+    Id       -> Term {cons("Term")}
+    "<conc>" -> Term {cons("ConcTerm")}
+    "<cons>" -> Term {cons("ConsTerm")}
+    "<nil>"  -> Term {cons("NilTerm")}
+    "<(" IntConst ")>" -> Term {cons("TupleTerm")}
+
+    "<some>" -> Term {cons("SomeTerm")}
+    "<none>" -> Term {cons("NoneTerm")}
+
+    "<string>" -> Term {cons("StringTerm")}
+    "<int>"    -> Term {cons("IntTerm")}
+
+  lexical syntax
+    [0-9]+   -> IntConst
+
+
+module rtg
+imports rg-term rg-nonterm rg-identifier rg-layout
+hiddens
+  context-free start-symbols RTG ProdRule TreeFN AnnoTreeFN NonTerm
+
+exports
+  sorts RTG Start ProdRule ProdRules AnnoTreeFN TreeFN Labelled 
+  context-free syntax
+
+    "regular" "tree" "grammar" Start ProdRules -> RTG {cons("RTG")}
+    "start" NonTerm+ -> Start {cons("Start")}
+    "productions" ProdRule+ -> ProdRules {cons("ProdRules")}
+
+    NonTerm "->" {AnnoTreeFN "|"}+ -> ProdRule {cons("ProdRule")}
+
+    TreeFN -> AnnoTreeFN
+    TreeFN Labelled+ -> AnnoTreeFN {cons("Annotated")}
+
+    Term "(" {AnnoTreeFN ","}* ")" -> TreeFN {cons("Appl")}
+    NonTerm -> TreeFN {cons("Ref")}
+
+    "." Term AnnoTreeFN -> Labelled {cons("Labelled")}
+
+  %%%
+   %% Special non-terminals used for tracing purposes
+   %%%
+  context-free syntax
+    "{" {NonTerm ","}+ "}" -> NonTerm {cons("Set")}
+    "<<" TreeFN ">>"       -> NonTerm {cons("Generated")}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/syntax/rtg.text.tbl
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/syntax/rtg.text.tbl	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1 @@
+parse-table(6,0,[label(prod([sort("<START>"),char-class([256])],sort("<Start>"),no-attrs),473),label(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),472),label(prod([sort("Id")],cf(sort("Id")),no-attrs),471),label(prod([lex(sort("PlainIdChars"))],sort("Id"),attrs([term(cons("Plain"))])),470),label(prod([lit("["),iter-star(sort("QuotedIdPart")),lit("]")],sort("Id"),attrs([term(cons("Quoted"))])),469),label(prod([lex(sort("QuotedIdChars"))],sort("QuotedIdPart"),attrs([term(cons("Chars"))])),468),label(prod([lit("\\"),char-class([range(92,93)])],sort("QuotedIdPart"),attrs([term(cons("EscapeSeq"))])),467),label(prod([lex(iter(char-class([range(0,91),range(94,255)])))],lex(sort("QuotedIdChars")),no-attrs),466),label(prod([lex(sort("QuotedIdChars"))],cf(sort("QuotedIdChars")),no-attrs),465),label(prod([lex(iter(char-class([39,45,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("PlainIdChars")),no-attrs),464),label(prod([lex(sort("PlainIdChars"))],cf(sort("Pl!
 ainIdChars")),no-attrs),463),label(prod([lex(iter(char-class([range(48,57)])))],lex(sort("IntConst")),no-attrs),462),label(prod([lex(sort("IntConst"))],cf(sort("IntConst")),no-attrs),461),label(prod([cf(sort("Id"))],cf(sort("Term")),attrs([term(cons("Term"))])),460),label(prod([lit("<conc>")],cf(sort("Term")),attrs([term(cons("ConcTerm"))])),459),label(prod([lit("<cons>")],cf(sort("Term")),attrs([term(cons("ConsTerm"))])),458),label(prod([lit("<nil>")],cf(sort("Term")),attrs([term(cons("NilTerm"))])),457),label(prod([lit("<("),cf(opt(layout)),cf(sort("IntConst")),cf(opt(layout)),lit(")>")],cf(sort("Term")),attrs([term(cons("TupleTerm"))])),456),label(prod([lit("<some>")],cf(sort("Term")),attrs([term(cons("SomeTerm"))])),455),label(prod([lit("<none>")],cf(sort("Term")),attrs([term(cons("NoneTerm"))])),454),label(prod([lit("<string>")],cf(sort("Term")),attrs([term(cons("StringTerm"))])),453),label(prod([lit("<int>")],cf(sort("Term")),attrs([term(cons("IntTerm"))])),452),label!
 (prod([cf(sort("Id"))],cf(sort("NonTerm")),attrs([term(cons("Nonterm
])),451),label(prod([lit("<string>")],cf(sort("NonTerm")),attrs([term(cons("String"))])),450),label(prod([lit("<int>")],cf(sort("NonTerm")),attrs([term(cons("Int"))])),449),label(prod([char-class([range(0,47),range(58,64),range(91,94),96,range(123,255)])],lex(sort("WATERTOKENSTART")),attrs([term(recover),avoid])),448),label(prod([lex(sort("WATERTOKENSTART"))],cf(sort("WATERTOKENSTART")),no-attrs),447),label(prod([lex(sort("WATERTOKENSTART")),lex(iter-star(char-class([range(48,57),range(65,90),95,range(97,122)])))],lex(sort("WATERTOKEN")),no-attrs),446),label(prod([lex(sort("WATERTOKEN"))],cf(sort("WATERTOKEN")),no-attrs),445),label(prod([char-class([range(0,8),11,range(14,31),range(33,41),range(43,47),range(58,64),range(91,94),96,range(123,255)])],lex(sort("WATERTOKENSEPARATOR")),attrs([term(recover),avoid])),444),label(prod([lex(sort("WATERTOKENSEPARATOR"))],cf(sort("WATERTOKENSEPARATOR")),no-attrs),443),label(prod([lit("*")],lex(sort("WATERTOKENSTAR")),attrs([term(recover)!
 ,avoid])),442),label(prod([lex(sort("WATERTOKENSTAR"))],cf(sort("WATERTOKENSTAR")),no-attrs),441),label(prod([lex(sort("WATERTOKEN"))],lex(sort("WATER")),no-attrs),440),label(prod([lex(sort("WATER"))],cf(sort("WATER")),no-attrs),439),label(prod([lex(sort("WATERTOKENSEPARATOR"))],lex(sort("WATER")),no-attrs),438),label(prod([lex(sort("WATERTOKENSTAR"))],lex(sort("WATER")),no-attrs),437),label(prod([],lex(sort("WATEREOF")),no-attrs),436),label(prod([lex(sort("WATEREOF"))],cf(sort("WATEREOF")),no-attrs),435),label(prod([cf(sort("WATER"))],cf(layout),attrs([term(cons("WATER"))])),434),label(prod([lit("/*")],lex(sort("INSERTSTART3")),attrs([term(recover)])),433),label(prod([lex(sort("INSERTSTART3"))],cf(sort("INSERTSTART3")),no-attrs),432),label(prod([lex(sort("INSERTSTART3")),lex(iter(sort("CommChar"))),lex(sort("WATEREOF"))],lex(layout),attrs([term(cons("INSERTEND"))])),431),label(prod([lex(layout)],cf(layout),no-attrs),430),label(prod([],lit(")>"),attrs([term(recover),term(co!
 ns("INSERTION"))])),429),label(prod([lit(")>")],lit(")>"),no-attrs),
),label(prod([],lit("<("),attrs([term(recover),term(cons("INSERTION"))])),427),label(prod([lit("<(")],lit("<("),no-attrs),426),label(prod([],lit("regular"),attrs([term(recover),term(cons("INSERTION"))])),425),label(prod([lit("regular")],lit("regular"),no-attrs),424),label(prod([],lit("tree"),attrs([term(recover),term(cons("INSERTION"))])),423),label(prod([lit("tree")],lit("tree"),no-attrs),422),label(prod([],lit("grammar"),attrs([term(recover),term(cons("INSERTION"))])),421),label(prod([lit("grammar")],lit("grammar"),no-attrs),420),label(prod([],lit("start"),attrs([term(recover),term(cons("INSERTION"))])),419),label(prod([lit("start")],lit("start"),no-attrs),418),label(prod([],lit("productions"),attrs([term(recover),term(cons("INSERTION"))])),417),label(prod([lit("productions")],lit("productions"),no-attrs),416),label(prod([],lit("->"),attrs([term(recover),term(cons("INSERTION"))])),415),label(prod([lit("->")],lit("->"),no-attrs),414),label(prod([],lit("|"),attrs([term(recov!
 er),term(cons("INSERTION"))])),413),label(prod([lit("|")],lit("|"),no-attrs),412),label(prod([],lit("}"),attrs([term(recover),term(cons("INSERTION"))])),411),label(prod([lit("}")],lit("}"),no-attrs),410),label(prod([],lit(","),attrs([term(recover),term(cons("INSERTION"))])),409),label(prod([lit(",")],lit(","),no-attrs),408),label(prod([],lit(">>"),attrs([term(recover),term(cons("INSERTION"))])),407),label(prod([lit(">>")],lit(">>"),no-attrs),406),label(prod([char-class([range(9,10),32])],lex(layout),no-attrs),405),label(prod([lit("/*"),lex(iter(sort("CommChar"))),lit("*/")],lex(layout),no-attrs),404),label(prod([char-class([range(0,41),range(43,255)])],lex(sort("CommChar")),no-attrs),403),label(prod([lex(sort("CommChar"))],cf(sort("CommChar")),no-attrs),402),label(prod([lit("*")],lex(sort("Asterisk")),no-attrs),401),label(prod([lex(sort("Asterisk"))],cf(sort("Asterisk")),no-attrs),400),label(prod([lex(sort("Asterisk"))],lex(sort("CommChar")),no-attrs),399),label(prod([cf(op!
 t(layout)),cf(sort("RTG")),cf(opt(layout))],sort("<START>"),no-attrs
98),label(prod([cf(opt(layout)),cf(sort("ProdRule")),cf(opt(layout))],sort("<START>"),no-attrs),397),label(prod([cf(opt(layout)),cf(sort("TreeFN")),cf(opt(layout))],sort("<START>"),no-attrs),396),label(prod([cf(opt(layout)),cf(sort("AnnoTreeFN")),cf(opt(layout))],sort("<START>"),no-attrs),395),label(prod([cf(opt(layout)),cf(sort("NonTerm")),cf(opt(layout))],sort("<START>"),no-attrs),394),label(prod([lit("regular"),cf(opt(layout)),lit("tree"),cf(opt(layout)),lit("grammar"),cf(opt(layout)),cf(sort("Start")),cf(opt(layout)),cf(sort("ProdRules"))],cf(sort("RTG")),attrs([term(cons("RTG"))])),393),label(prod([lit("start"),cf(opt(layout)),cf(iter(sort("NonTerm")))],cf(sort("Start")),attrs([term(cons("Start"))])),392),label(prod([lit("productions"),cf(opt(layout)),cf(iter(sort("ProdRule")))],cf(sort("ProdRules")),attrs([term(cons("ProdRules"))])),391),label(prod([cf(sort("NonTerm")),cf(opt(layout)),lit("->"),cf(opt(layout)),cf(iter-sep(sort("AnnoTreeFN"),lit("|")))],cf(sort("ProdRul!
 e")),attrs([term(cons("ProdRule"))])),390),label(prod([cf(sort("TreeFN"))],cf(sort("AnnoTreeFN")),no-attrs),389),label(prod([cf(sort("TreeFN")),cf(opt(layout)),cf(iter(sort("Labelled")))],cf(sort("AnnoTreeFN")),attrs([term(cons("Annotated"))])),388),label(prod([cf(sort("Term")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("AnnoTreeFN"),lit(","))),cf(opt(layout)),lit(")")],cf(sort("TreeFN")),attrs([term(cons("Appl"))])),387),label(prod([cf(sort("NonTerm"))],cf(sort("TreeFN")),attrs([term(cons("Ref"))])),386),label(prod([lit("."),cf(opt(layout)),cf(sort("Term")),cf(opt(layout)),cf(sort("AnnoTreeFN"))],cf(sort("Labelled")),attrs([term(cons("Labelled"))])),385),label(prod([lit("{"),cf(opt(layout)),cf(iter-sep(sort("NonTerm"),lit(","))),cf(opt(layout)),lit("}")],cf(sort("NonTerm")),attrs([term(cons("Set"))])),384),label(prod([lit("<<"),cf(opt(layout)),cf(sort("TreeFN")),cf(opt(layout)),lit(">>")],cf(sort("NonTerm")),attrs([term(cons("Generated"))])),383),label(!
 prod([sort("QuotedIdPart")],iter(sort("QuotedIdPart")),no-attrs),382
abel(prod([iter(sort("QuotedIdPart")),iter(sort("QuotedIdPart"))],iter(sort("QuotedIdPart")),attrs([assoc(left)])),381),label(prod([iter(sort("QuotedIdPart")),iter-star(sort("QuotedIdPart"))],iter(sort("QuotedIdPart")),no-attrs),380),label(prod([iter-star(sort("QuotedIdPart")),iter(sort("QuotedIdPart"))],iter(sort("QuotedIdPart")),no-attrs),379),label(prod([iter-star(sort("QuotedIdPart")),iter-star(sort("QuotedIdPart"))],iter-star(sort("QuotedIdPart")),attrs([assoc(left)])),378),label(prod([],iter-star(sort("QuotedIdPart")),no-attrs),377),label(prod([iter(sort("QuotedIdPart"))],iter-star(sort("QuotedIdPart")),no-attrs),376),label(prod([char-class([range(0,91),range(94,255)])],lex(iter(char-class([range(0,91),range(94,255)]))),no-attrs),375),label(prod([lex(iter(char-class([range(0,91),range(94,255)])))],cf(iter(char-class([range(0,91),range(94,255)]))),no-attrs),374),label(prod([lex(iter(char-class([range(0,91),range(94,255)]))),lex(iter(char-class([range(0,91),range(94,255)!
 ])))],lex(iter(char-class([range(0,91),range(94,255)]))),attrs([assoc(left)])),373),label(prod([lex(iter(char-class([range(0,91),range(94,255)]))),lex(iter-star(char-class([range(0,91),range(94,255)])))],lex(iter(char-class([range(0,91),range(94,255)]))),no-attrs),372),label(prod([lex(iter-star(char-class([range(0,91),range(94,255)]))),lex(iter(char-class([range(0,91),range(94,255)])))],lex(iter(char-class([range(0,91),range(94,255)]))),no-attrs),371),label(prod([lex(iter-star(char-class([range(0,91),range(94,255)]))),lex(iter-star(char-class([range(0,91),range(94,255)])))],lex(iter-star(char-class([range(0,91),range(94,255)]))),attrs([assoc(left)])),370),label(prod([lex(iter-star(char-class([range(0,91),range(94,255)])))],cf(iter-star(char-class([range(0,91),range(94,255)]))),no-attrs),369),label(prod([],lex(iter-star(char-class([range(0,91),range(94,255)]))),no-attrs),368),label(prod([lex(iter(char-class([range(0,91),range(94,255)])))],lex(iter-star(char-class([range(0,91!
 ),range(94,255)]))),no-attrs),367),label(prod([char-class([39,45,ran
48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),366),label(prod([lex(iter(char-class([39,45,range(48,57),range(65,90),95,range(97,122)])))],cf(iter(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),365),label(prod([lex(iter(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([39,45,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),364),label(prod([lex(iter(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),lex(iter-star(char-class([39,45,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),363),label(prod([lex(iter-star(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([39,45,range(48,57),range(65,90),95,range(97,122)])))],le!
 x(iter(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),362),label(prod([lex(iter-star(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),lex(iter-star(char-class([39,45,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),361),label(prod([lex(iter-star(char-class([39,45,range(48,57),range(65,90),95,range(97,122)])))],cf(iter-star(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),360),label(prod([],lex(iter-star(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),359),label(prod([lex(iter(char-class([39,45,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([39,45,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),358),label(prod([char-class([range(48,57)])],lex(iter(char-class([range(48,57)]))),no-attrs),357),label(prod([lex(iter(char-class([range(48,57)])))],cf(ite!
 r(char-class([range(48,57)]))),no-attrs),356),label(prod([lex(iter(c
-class([range(48,57)]))),lex(iter(char-class([range(48,57)])))],lex(iter(char-class([range(48,57)]))),attrs([assoc(left)])),355),label(prod([lex(iter(char-class([range(48,57)]))),lex(iter-star(char-class([range(48,57)])))],lex(iter(char-class([range(48,57)]))),no-attrs),354),label(prod([lex(iter-star(char-class([range(48,57)]))),lex(iter(char-class([range(48,57)])))],lex(iter(char-class([range(48,57)]))),no-attrs),353),label(prod([lex(iter-star(char-class([range(48,57)]))),lex(iter-star(char-class([range(48,57)])))],lex(iter-star(char-class([range(48,57)]))),attrs([assoc(left)])),352),label(prod([lex(iter-star(char-class([range(48,57)])))],cf(iter-star(char-class([range(48,57)]))),no-attrs),351),label(prod([],lex(iter-star(char-class([range(48,57)]))),no-attrs),350),label(prod([lex(iter(char-class([range(48,57)])))],lex(iter-star(char-class([range(48,57)]))),no-attrs),349),label(prod([char-class([range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([range(48,57)!
 ,range(65,90),95,range(97,122)]))),no-attrs),348),label(prod([lex(iter(char-class([range(48,57),range(65,90),95,range(97,122)])))],cf(iter(char-class([range(48,57),range(65,90),95,range(97,122)]))),no-attrs),347),label(prod([lex(iter(char-class([range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),346),label(prod([lex(iter(char-class([range(48,57),range(65,90),95,range(97,122)]))),lex(iter-star(char-class([range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([range(48,57),range(65,90),95,range(97,122)]))),no-attrs),345),label(prod([lex(iter-star(char-class([range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([range(48,57),range(65,90),95,range(97,122)]))),no-attrs),344),label(prod([lex(iter-star(char-class([range(48,57),range(!
 65,90),95,range(97,122)]))),lex(iter-star(char-class([range(48,57),r
e(65,90),95,range(97,122)])))],lex(iter-star(char-class([range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),343),label(prod([lex(iter-star(char-class([range(48,57),range(65,90),95,range(97,122)])))],cf(iter-star(char-class([range(48,57),range(65,90),95,range(97,122)]))),no-attrs),342),label(prod([],lex(iter-star(char-class([range(48,57),range(65,90),95,range(97,122)]))),no-attrs),341),label(prod([lex(iter(char-class([range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([range(48,57),range(65,90),95,range(97,122)]))),no-attrs),340),label(prod([lex(sort("CommChar"))],lex(iter(sort("CommChar"))),no-attrs),339),label(prod([lex(iter(sort("CommChar")))],cf(iter(sort("CommChar"))),no-attrs),338),label(prod([lex(iter(sort("CommChar"))),lex(iter(sort("CommChar")))],lex(iter(sort("CommChar"))),attrs([assoc(left)])),337),label(prod([lex(iter(sort("CommChar"))),lex(iter-star(sort("CommChar")))],lex(iter(sort("CommChar"))),no-attrs),336),label(prod([!
 lex(iter-star(sort("CommChar"))),lex(iter(sort("CommChar")))],lex(iter(sort("CommChar"))),no-attrs),335),label(prod([lex(iter-star(sort("CommChar"))),lex(iter-star(sort("CommChar")))],lex(iter-star(sort("CommChar"))),attrs([assoc(left)])),334),label(prod([lex(iter-star(sort("CommChar")))],cf(iter-star(sort("CommChar"))),no-attrs),333),label(prod([],lex(iter-star(sort("CommChar"))),no-attrs),332),label(prod([lex(iter(sort("CommChar")))],lex(iter-star(sort("CommChar"))),no-attrs),331),label(prod([cf(sort("NonTerm"))],cf(iter(sort("NonTerm"))),no-attrs),330),label(prod([cf(iter(sort("NonTerm"))),cf(opt(layout)),cf(iter(sort("NonTerm")))],cf(iter(sort("NonTerm"))),attrs([assoc(left)])),329),label(prod([cf(iter(sort("NonTerm"))),cf(opt(layout)),cf(iter-star(sort("NonTerm")))],cf(iter(sort("NonTerm"))),no-attrs),328),label(prod([cf(iter-star(sort("NonTerm"))),cf(opt(layout)),cf(iter(sort("NonTerm")))],cf(iter(sort("NonTerm"))),no-attrs),327),label(prod([cf(iter-star(sort("NonTerm!
 "))),cf(opt(layout)),cf(iter-star(sort("NonTerm")))],cf(iter-star(so
"NonTerm"))),attrs([assoc(left)])),326),label(prod([],cf(iter-star(sort("NonTerm"))),no-attrs),325),label(prod([cf(iter(sort("NonTerm")))],cf(iter-star(sort("NonTerm"))),no-attrs),324),label(prod([cf(sort("ProdRule"))],cf(iter(sort("ProdRule"))),no-attrs),323),label(prod([cf(iter(sort("ProdRule"))),cf(opt(layout)),cf(iter(sort("ProdRule")))],cf(iter(sort("ProdRule"))),attrs([assoc(left)])),322),label(prod([cf(iter(sort("ProdRule"))),cf(opt(layout)),cf(iter-star(sort("ProdRule")))],cf(iter(sort("ProdRule"))),no-attrs),321),label(prod([cf(iter-star(sort("ProdRule"))),cf(opt(layout)),cf(iter(sort("ProdRule")))],cf(iter(sort("ProdRule"))),no-attrs),320),label(prod([cf(iter-star(sort("ProdRule"))),cf(opt(layout)),cf(iter-star(sort("ProdRule")))],cf(iter-star(sort("ProdRule"))),attrs([assoc(left)])),319),label(prod([],cf(iter-star(sort("ProdRule"))),no-attrs),318),label(prod([cf(iter(sort("ProdRule")))],cf(iter-star(sort("ProdRule"))),no-attrs),317),label(prod([cf(sort("AnnoTreeFN!
 "))],cf(iter-sep(sort("AnnoTreeFN"),lit("|"))),no-attrs),316),label(prod([cf(iter-sep(sort("AnnoTreeFN"),lit("|"))),cf(opt(layout)),lit("|"),cf(opt(layout)),cf(iter-sep(sort("AnnoTreeFN"),lit("|")))],cf(iter-sep(sort("AnnoTreeFN"),lit("|"))),attrs([assoc(left)])),315),label(prod([cf(iter-sep(sort("AnnoTreeFN"),lit("|"))),cf(opt(layout)),lit("|"),cf(opt(layout)),cf(iter-star-sep(sort("AnnoTreeFN"),lit("|")))],cf(iter-sep(sort("AnnoTreeFN"),lit("|"))),no-attrs),314),label(prod([cf(iter-star-sep(sort("AnnoTreeFN"),lit("|"))),cf(opt(layout)),lit("|"),cf(opt(layout)),cf(iter-sep(sort("AnnoTreeFN"),lit("|")))],cf(iter-sep(sort("AnnoTreeFN"),lit("|"))),no-attrs),313),label(prod([cf(iter-star-sep(sort("AnnoTreeFN"),lit("|"))),cf(opt(layout)),lit("|"),cf(opt(layout)),cf(iter-star-sep(sort("AnnoTreeFN"),lit("|")))],cf(iter-star-sep(sort("AnnoTreeFN"),lit("|"))),attrs([assoc(left)])),312),label(prod([],cf(iter-star-sep(sort("AnnoTreeFN"),lit("|"))),no-attrs),311),label(prod([cf(iter-s!
 ep(sort("AnnoTreeFN"),lit("|")))],cf(iter-star-sep(sort("AnnoTreeFN"
it("|"))),no-attrs),310),label(prod([cf(sort("Labelled"))],cf(iter(sort("Labelled"))),no-attrs),309),label(prod([cf(iter(sort("Labelled"))),cf(opt(layout)),cf(iter(sort("Labelled")))],cf(iter(sort("Labelled"))),attrs([assoc(left)])),308),label(prod([cf(iter(sort("Labelled"))),cf(opt(layout)),cf(iter-star(sort("Labelled")))],cf(iter(sort("Labelled"))),no-attrs),307),label(prod([cf(iter-star(sort("Labelled"))),cf(opt(layout)),cf(iter(sort("Labelled")))],cf(iter(sort("Labelled"))),no-attrs),306),label(prod([cf(iter-star(sort("Labelled"))),cf(opt(layout)),cf(iter-star(sort("Labelled")))],cf(iter-star(sort("Labelled"))),attrs([assoc(left)])),305),label(prod([],cf(iter-star(sort("Labelled"))),no-attrs),304),label(prod([cf(iter(sort("Labelled")))],cf(iter-star(sort("Labelled"))),no-attrs),303),label(prod([cf(sort("AnnoTreeFN"))],cf(iter-sep(sort("AnnoTreeFN"),lit(","))),no-attrs),302),label(prod([cf(iter-sep(sort("AnnoTreeFN"),lit(","))),cf(opt(layout)),lit(","),cf(opt(layout)),cf(!
 iter-sep(sort("AnnoTreeFN"),lit(",")))],cf(iter-sep(sort("AnnoTreeFN"),lit(","))),attrs([assoc(left)])),301),label(prod([cf(iter-sep(sort("AnnoTreeFN"),lit(","))),cf(opt(layout)),lit(","),cf(opt(layout)),cf(iter-star-sep(sort("AnnoTreeFN"),lit(",")))],cf(iter-sep(sort("AnnoTreeFN"),lit(","))),no-attrs),300),label(prod([cf(iter-star-sep(sort("AnnoTreeFN"),lit(","))),cf(opt(layout)),lit(","),cf(opt(layout)),cf(iter-sep(sort("AnnoTreeFN"),lit(",")))],cf(iter-sep(sort("AnnoTreeFN"),lit(","))),no-attrs),299),label(prod([cf(iter-star-sep(sort("AnnoTreeFN"),lit(","))),cf(opt(layout)),lit(","),cf(opt(layout)),cf(iter-star-sep(sort("AnnoTreeFN"),lit(",")))],cf(iter-star-sep(sort("AnnoTreeFN"),lit(","))),attrs([assoc(left)])),298),label(prod([],cf(iter-star-sep(sort("AnnoTreeFN"),lit(","))),no-attrs),297),label(prod([cf(iter-sep(sort("AnnoTreeFN"),lit(",")))],cf(iter-star-sep(sort("AnnoTreeFN"),lit(","))),no-attrs),296),label(prod([cf(sort("NonTerm"))],cf(iter-sep(sort("NonTerm"),lit!
 (","))),no-attrs),295),label(prod([cf(iter-sep(sort("NonTerm"),lit("
)),cf(opt(layout)),lit(","),cf(opt(layout)),cf(iter-sep(sort("NonTerm"),lit(",")))],cf(iter-sep(sort("NonTerm"),lit(","))),attrs([assoc(left)])),294),label(prod([cf(iter-sep(sort("NonTerm"),lit(","))),cf(opt(layout)),lit(","),cf(opt(layout)),cf(iter-star-sep(sort("NonTerm"),lit(",")))],cf(iter-sep(sort("NonTerm"),lit(","))),no-attrs),293),label(prod([cf(iter-star-sep(sort("NonTerm"),lit(","))),cf(opt(layout)),lit(","),cf(opt(layout)),cf(iter-sep(sort("NonTerm"),lit(",")))],cf(iter-sep(sort("NonTerm"),lit(","))),no-attrs),292),label(prod([cf(iter-star-sep(sort("NonTerm"),lit(","))),cf(opt(layout)),lit(","),cf(opt(layout)),cf(iter-star-sep(sort("NonTerm"),lit(",")))],cf(iter-star-sep(sort("NonTerm"),lit(","))),attrs([assoc(left)])),291),label(prod([],cf(iter-star-sep(sort("NonTerm"),lit(","))),no-attrs),290),label(prod([cf(iter-sep(sort("NonTerm"),lit(",")))],cf(iter-star-sep(sort("NonTerm"),lit(","))),no-attrs),289),label(prod([],cf(opt(layout)),no-attrs),288),label(prod([cf(!
 layout)],cf(opt(layout)),no-attrs),287),label(prod([char-class([91])],lit("["),no-attrs),286),label(prod([char-class([93])],lit("]"),no-attrs),285),label(prod([char-class([92])],lit("\\"),no-attrs),284),label(prod([char-class([60]),char-class([99]),char-class([111]),char-class([110]),char-class([99]),char-class([62])],lit("<conc>"),no-attrs),283),label(prod([char-class([60]),char-class([99]),char-class([111]),char-class([110]),char-class([115]),char-class([62])],lit("<cons>"),no-attrs),282),label(prod([char-class([60]),char-class([110]),char-class([105]),char-class([108]),char-class([62])],lit("<nil>"),no-attrs),281),label(prod([char-class([60]),char-class([115]),char-class([111]),char-class([109]),char-class([101]),char-class([62])],lit("<some>"),no-attrs),280),label(prod([char-class([60]),char-class([110]),char-class([111]),char-class([110]),char-class([101]),char-class([62])],lit("<none>"),no-attrs),279),label(prod([char-class([60]),char-class([115]),char-class([116]),ch!
 ar-class([114]),char-class([105]),char-class([110]),char-class([103]
har-class([62])],lit("<string>"),no-attrs),278),label(prod([char-class([60]),char-class([105]),char-class([110]),char-class([116]),char-class([62])],lit("<int>"),no-attrs),277),label(prod([char-class([41]),char-class([62])],lit(")>"),no-attrs),276),label(prod([char-class([60]),char-class([40])],lit("<("),no-attrs),275),label(prod([char-class([47]),char-class([42])],lit("/*"),no-attrs),274),label(prod([char-class([42]),char-class([47])],lit("*/"),no-attrs),273),label(prod([char-class([42])],lit("*"),no-attrs),272),label(prod([char-class([114]),char-class([101]),char-class([103]),char-class([117]),char-class([108]),char-class([97]),char-class([114])],lit("regular"),no-attrs),271),label(prod([char-class([116]),char-class([114]),char-class([101]),char-class([101])],lit("tree"),no-attrs),270),label(prod([char-class([103]),char-class([114]),char-class([97]),char-class([109]),char-class([109]),char-class([97]),char-class([114])],lit("grammar"),no-attrs),269),label(prod([char-class(!
 [115]),char-class([116]),char-class([97]),char-class([114]),char-class([116])],lit("start"),no-attrs),268),label(prod([char-class([112]),char-class([114]),char-class([111]),char-class([100]),char-class([117]),char-class([99]),char-class([116]),char-class([105]),char-class([111]),char-class([110]),char-class([115])],lit("productions"),no-attrs),267),label(prod([char-class([45]),char-class([62])],lit("->"),no-attrs),266),label(prod([char-class([40])],lit("("),no-attrs),265),label(prod([char-class([41])],lit(")"),no-attrs),264),label(prod([char-class([46])],lit("."),no-attrs),263),label(prod([char-class([123])],lit("{"),no-attrs),262),label(prod([char-class([125])],lit("}"),no-attrs),261),label(prod([char-class([60]),char-class([60])],lit("<<"),no-attrs),260),label(prod([char-class([62]),char-class([62])],lit(">>"),no-attrs),259),label(prod([char-class([124])],lit("|"),no-attrs),258),label(prod([char-class([44])],lit(","),no-attrs),257)],states([state-rec(0,[goto([47],19),goto!
 ([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31)
nge(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([473],14),goto([394],1),goto([287],2),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],2),goto([395],1),goto([396],1),goto([397],1),goto([398],1)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(1,[goto([256],20)],[action([256],[accept])]),state-rec(2,[goto([114],48),goto([60],47),goto([123],46),goto([91],45),goto([39,45,range(48,57),!
 range(65,90),95,range(97,113),range(115,122)],44),goto([393],43),goto([271],42),goto([424],42),goto([425],42),goto([390],41),goto([383],36),goto([260],40),goto([384],36),goto([262],39),goto([449],36),goto([277],38),goto([450],36),goto([278],37),goto([451],36),goto([471],35),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30),goto([386],29),goto([387],29),goto([452],22),goto([453],22),goto([454],22),goto([279],28),goto([455],22),goto([280],27),goto([456],22),goto([275],26),goto([426],26),goto([427],26),goto([457],22),goto([281],25),goto([458],22),goto([282],24),goto([459],22),goto([283],23),goto([460],22),goto([388],21),goto([389],21)],[action([range(0,38),range(40,44),range(46,47),range(58,59),range(61,64),range(92,94),96,range(124,256)],[reduce(0,425,0),reduce(0,427,0)]),action([114],[reduce(0,427,0),shift(48),reduce(0,425,0)]),action([60],[reduce(0,427,0),shift(47),reduce(0,425,0)]),action(!
 [123],[reduce(0,427,0),shift(46),reduce(0,425,0)]),action([91],[redu
0,427,0),shift(45),reduce(0,425,0)]),action([39,45,range(48,57),range(65,90),95,range(97,113),range(115,122)],[reduce(0,427,0),shift(44),reduce(0,425,0)])]),state-rec(3,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([430],49),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],49),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(1,287,0)]),action([47],[shift(19),reduce(1,287,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(1,287,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(1,287,0)]),action([range(12,13)],[shift(15),reduce(1,287,0)])]),state-rec(4,[goto!
 ([range(48,57),range(65,90),95,range(97,122)],53),goto([340],50),goto([344],51),goto([343],52),goto([345],51),goto([346],51),goto([348],51),goto([341],50)],[action([range(0,47),range(58,64),range(91,94),96,range(123,256)],[reduce(0,341,0)]),action([range(48,57),range(65,90),95,range(97,122)],[shift(53),reduce(0,341,0)])]),state-rec(5,[],[action([range(0,256)],[reduce(1,440,0)])]),state-rec(6,[],[action([range(0,256)],[reduce(1,439,0)])]),state-rec(7,[],[action([range(0,256)],[reduce(1,438,0)])]),state-rec(8,[],[action([range(0,46),range(48,256)],[reduce(1,442,4)])]),state-rec(9,[],[action([range(0,256)],[reduce(1,437,0)])]),state-rec(10,[],[action([range(0,256)],[reduce(1,434,0)])]),state-rec(11,[goto([42],60),goto([range(0,41),range(43,255)],59),goto([335],57),goto([334],58),goto([336],57),goto([337],57),goto([339],57),goto([399],54),goto([401],56),goto([272],55),goto([403],54)],[action([42],[shift(60)]),action([range(0,41),range(43,255)],[shift(59)])]),state-rec(12,[],[ac!
 tion([range(0,256)],[reduce(1,430,0)])]),state-rec(13,[goto([42],60)
to([range(0,41),range(43,255)],59),goto([335],61),goto([334],58),goto([336],61),goto([337],61),goto([339],61),goto([399],54),goto([401],56),goto([272],55),goto([403],54)],[action([256],[reduce(1,433,0)]),action([42],[shift(60),reduce(1,433,0)]),action([range(0,41),range(43,255)],[shift(59),reduce(1,433,0)])]),state-rec(14,[],[]),state-rec(15,[],[action([range(0,256)],[reduce(1,448,4)])]),state-rec(16,[],[action([range(0,256)],[reduce(1,448,4),reduce(1,444,4)])]),state-rec(17,[],[action([range(0,256)],[reduce(1,448,4),reduce(1,272,0)])]),state-rec(18,[],[action([range(0,256)],[reduce(1,448,4),reduce(1,405,0)])]),state-rec(19,[goto([42],62)],[action([range(0,41),range(43,256)],[reduce(1,448,4),reduce(1,444,4)]),action([42],[reduce(1,444,4),shift(62),reduce(1,448,4)])]),state-rec(20,[],[]),state-rec(21,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,!
 13)],15),goto([287],63),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],63)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(22,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],64),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),got!
 o([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),
o([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],64)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(23,[],[action([range(0,256)],[reduce(1,459,0)])]),state-rec(24,[],[action([range(0,256)],[reduce(1,458,0)])]),state-rec(25,[],[action([range(0,256)],[reduce(1,457,0)])]),state-rec(26,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],65),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437]!
 ,6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],65)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(1,426,0),reduce(0,288,0)]),action([47],[reduce(0,288,0),shift(19),reduce(1,426,0)]),action([range(9,10),32],[shift(18),reduce(1,426,0)]),action([42],[reduce(0,288,0),shift(17),reduce(1,426,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(0,288,0),shift(16),reduce(1,426,0)]),action([range(12,13)],[reduce(0,288,0),shift(15),reduce(1,426,0)])]),state-rec(27,[],[action([range(0,256)],[reduce(1,455,0)])]),state-rec(28,[],[action([range(0,256)],[reduce(1,454,0)])]),state-rec(29,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],66),goto([430],3),goto([404],12),goto([274],13!
 ),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([4
,10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],66)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(1,389,0),reduce(0,288,0)]),action([47],[reduce(0,288,0),shift(19),reduce(1,389,0)]),action([range(9,10),32],[shift(18),reduce(1,389,0)]),action([42],[reduce(0,288,0),shift(17),reduce(1,389,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(0,288,0),shift(16),reduce(1,389,0)]),action([range(12,13)],[reduce(0,288,0),shift(15),reduce(1,389,0)])]),state-rec(30,[goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([366],67)],[action([range(0,38),range(40,44),range(46,47),range(58,64),range(91,94),96,range(123,256)],[reduce(1,464,0)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44)])]),state-rec(31,[goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([366],68)]!
 ,[action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44)])]),state-rec(32,[],[action([range(0,256)],[reduce(1,470,0)])]),state-rec(33,[],[action([range(0,256)],[reduce(1,471,0)])]),state-rec(34,[goto([92],78),goto([range(0,91),range(94,255)],77),goto([376],69),goto([379],75),goto([378],76),goto([380],75),goto([381],75),goto([382],75),goto([467],73),goto([284],74),goto([468],73),goto([466],72),goto([371],70),goto([370],71),goto([372],70),goto([373],70),goto([375],70),goto([377],69)],[action([93],[reduce(0,377,0)]),action([92],[shift(78)]),action([range(0,91),range(94,255)],[shift(77)])]),state-rec(35,[],[action([range(0,256)],[reduce(1,460,0),reduce(1,451,0)])]),state-rec(36,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],79),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),!
 goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],
goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],79)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0),reduce(1,386,0)]),action([47],[reduce(1,386,0),shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18),reduce(1,386,0)]),action([42],[reduce(1,386,0),shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(1,386,0),shift(16),reduce(0,288,0)]),action([range(12,13)],[reduce(1,386,0),shift(15),reduce(0,288,0)])]),state-rec(37,[],[action([range(0,256)],[reduce(1,453,0),reduce(1,450,0)])]),state-rec(38,[],[action([range(0,256)],[reduce(1,452,0),reduce(1,449,0)])]),state-rec(39,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],80),goto([430],3),goto([404],12),goto([274],13)!
 ,goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],80)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(40,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],81),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6)!
 ,goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],
goto([288],81)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(41,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],82),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],82)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]!
 ),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(42,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],83),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],83)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(1,424,0),reduce(0,288,0)]),action([47],[reduce(0,288,0),shift(19),reduce(1,424,0)]),action([range(9,10),32],[shift(18),reduce(1,424,0)]),action([42],[reduce(0,288,0),shift(17),redu!
 ce(1,424,0)]),action([range(0,8),11,range(14,31),range(33,41),range(
46),range(58,64),range(91,94),96,range(123,255)],[reduce(0,288,0),shift(16),reduce(1,424,0)]),action([range(12,13)],[reduce(0,288,0),shift(15),reduce(1,424,0)])]),state-rec(43,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],84),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],84)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)]!
 ,[shift(15),reduce(0,288,0)])]),state-rec(44,[],[action([range(0,256)],[reduce(1,366,0)])]),state-rec(45,[],[action([range(0,255)],[reduce(1,286,0)])]),state-rec(46,[],[action([range(0,256)],[reduce(1,262,0)])]),state-rec(47,[goto([99],90),goto([110],89),goto([40],88),goto([115],87),goto([105],86),goto([60],85)],[action([99],[shift(90)]),action([110],[shift(89)]),action([40],[shift(88)]),action([115],[shift(87)]),action([105],[shift(86)]),action([60],[shift(85)])]),state-rec(48,[goto([101],91)],[action([range(0,100),range(102,256)],[reduce(1,366,0)]),action([101],[shift(91),reduce(1,366,0)])]),state-rec(49,[],[action([range(0,256)],[reduce(2,472,0)])]),state-rec(50,[],[action([range(0,47),range(58,64),range(91,94),96,range(123,256)],[reduce(2,446,0)])]),state-rec(51,[goto([range(48,57),range(65,90),95,range(97,122)],53),goto([348],92)],[action([range(0,47),range(58,64),range(91,94),96,range(123,256)],[reduce(1,340,0)]),action([range(48,57),range(65,90),95,range(97,122)],[sh!
 ift(53),reduce(1,340,0)])]),state-rec(52,[goto([range(48,57),range(6
0),95,range(97,122)],53),goto([348],93)],[action([range(0,47),range(58,64),range(91,94),96,range(123,256)],[reduce(2,446,0)]),action([range(48,57),range(65,90),95,range(97,122)],[shift(53)])]),state-rec(53,[],[action([range(0,256)],[reduce(1,348,0)])]),state-rec(54,[],[action([range(0,256)],[reduce(1,339,0)])]),state-rec(55,[],[action([range(0,46),range(48,256)],[reduce(1,401,0)])]),state-rec(56,[],[action([range(0,256)],[reduce(1,399,0)])]),state-rec(57,[goto([42],60),goto([range(0,41),range(43,255)],59),goto([339],95),goto([399],54),goto([401],56),goto([272],55),goto([403],54),goto([436],94)],[action([256],[reduce(0,436,0)]),action([42],[shift(60)]),action([range(0,41),range(43,255)],[shift(59)])]),state-rec(58,[goto([42],60),goto([range(0,41),range(43,255)],59),goto([339],96),goto([399],54),goto([401],56),goto([272],55),goto([403],54)],[action([42],[shift(60)]),action([range(0,41),range(43,255)],[shift(59)])]),state-rec(59,[],[action([range(0,256)],[reduce(1,403,0)])]),st!
 ate-rec(60,[],[action([range(0,256)],[reduce(1,272,0)])]),state-rec(61,[goto([42],98),goto([range(0,41),range(43,255)],59),goto([339],95),goto([399],54),goto([401],56),goto([272],55),goto([403],54),goto([273],97)],[action([42],[shift(98)]),action([range(0,41),range(43,255)],[shift(59)])]),state-rec(62,[],[action([range(0,256)],[reduce(2,274,0)])]),state-rec(63,[],[action([256],[reduce(3,395,0)])]),state-rec(64,[goto([40],100),goto([265],99)],[action([40],[shift(100)])]),state-rec(65,[goto([range(48,57)],105),goto([461],104),goto([462],103),goto([353],101),goto([352],102),goto([354],101),goto([355],101),goto([357],101)],[action([range(48,57)],[shift(105)])]),state-rec(66,[goto([46],110),goto([306],108),goto([305],109),goto([307],108),goto([308],108),goto([309],108),goto([385],107),goto([263],106)],[action([256],[reduce(3,396,0)]),action([46],[shift(110)])]),state-rec(67,[],[action([range(0,256)],[reduce(2,364,0)])]),state-rec(68,[],[action([range(0,256)],[reduce(2,362,0)])])!
 ,state-rec(69,[goto([93],112),goto([285],111)],[action([93],[shift(1
])]),state-rec(70,[goto([range(0,91),range(94,255)],77),goto([375],113)],[action([range(92,93)],[reduce(1,466,0)]),action([range(0,91),range(94,255)],[shift(77)])]),state-rec(71,[goto([range(0,91),range(94,255)],77),goto([375],114)],[action([range(0,91),range(94,255)],[shift(77)])]),state-rec(72,[],[action([range(0,255)],[reduce(1,468,0)])]),state-rec(73,[],[action([range(0,255)],[reduce(1,382,0)])]),state-rec(74,[goto([range(92,93)],115)],[action([range(92,93)],[shift(115)])]),state-rec(75,[goto([92],78),goto([range(0,91),range(94,255)],77),goto([382],116),goto([467],73),goto([284],74),goto([468],73),goto([466],72),goto([371],70),goto([370],71),goto([372],70),goto([373],70),goto([375],70)],[action([93],[reduce(1,376,0)]),action([92],[shift(78)]),action([range(0,91),range(94,255)],[shift(77)])]),state-rec(76,[goto([92],78),goto([range(0,91),range(94,255)],77),goto([93],112),goto([382],117),goto([467],73),goto([284],74),goto([468],73),goto([466],72),goto([371],70),goto([370],!
 71),goto([372],70),goto([373],70),goto([375],70),goto([285],111)],[action([92],[shift(78)]),action([range(0,91),range(94,255)],[shift(77)]),action([93],[shift(112)])]),state-rec(77,[],[action([range(0,255)],[reduce(1,375,0)])]),state-rec(78,[],[action([range(92,93)],[reduce(1,284,0)])]),state-rec(79,[goto([45],119),goto([266],118),goto([414],118),goto([415],118)],[action([range(0,44),range(46,255)],[reduce(0,415,0)]),action([256],[reduce(0,415,0),reduce(3,394,0)]),action([45],[shift(119),reduce(0,415,0)])]),state-rec(80,[goto([60],126),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([292],124),goto([291],125),goto([293],124),goto([294],124),goto([295],124),goto([383],121),goto([260],40),goto([384],121),goto([262],39),goto([449],121),goto([277],123),goto([450],121),goto([278],122),goto([451],121),goto([471],120),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30)!
 ,goto([366],30)],[action([60],[shift(126)]),action([123],[shift(46)]
ction([91],[shift(45)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44)])]),state-rec(81,[goto([60],47),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([386],127),goto([383],128),goto([260],40),goto([384],128),goto([262],39),goto([449],128),goto([277],38),goto([450],128),goto([278],37),goto([451],128),goto([471],35),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30),goto([387],127),goto([452],22),goto([453],22),goto([454],22),goto([279],28),goto([455],22),goto([280],27),goto([456],22),goto([275],26),goto([426],26),goto([427],26),goto([457],22),goto([281],25),goto([458],22),goto([282],24),goto([459],22),goto([283],23),goto([460],22)],[action([range(0,38),range(40,44),range(46,47),range(58,59),range(61,64),range(92,94),96,range(124,256)],[reduce(0,427,0)]),action([60],[shift(47),reduce(0,427,0)]),action([123],[shift(46),reduce(0!
 ,427,0)]),action([91],[shift(45),reduce(0,427,0)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44),reduce(0,427,0)])]),state-rec(82,[],[action([256],[reduce(3,397,0)])]),state-rec(83,[goto([116],130),goto([270],129),goto([422],129),goto([423],129)],[action([range(0,115),range(117,256)],[reduce(0,423,0)]),action([116],[shift(130),reduce(0,423,0)])]),state-rec(84,[],[action([256],[reduce(3,398,0)])]),state-rec(85,[],[action([range(0,256)],[reduce(2,260,0)])]),state-rec(86,[goto([110],131)],[action([110],[shift(131)])]),state-rec(87,[goto([116],133),goto([111],132)],[action([116],[shift(133)]),action([111],[shift(132)])]),state-rec(88,[],[action([range(0,256)],[reduce(2,275,0)])]),state-rec(89,[goto([111],135),goto([105],134)],[action([111],[shift(135)]),action([105],[shift(134)])]),state-rec(90,[goto([111],136)],[action([111],[shift(136)])]),state-rec(91,[goto([103],137)],[action([103],[shift(137)])]),state-rec(92,[],[action([range(0,256)],[reduce(2,346,0!
 )])]),state-rec(93,[],[action([range(0,256)],[reduce(2,344,0)])]),st
-rec(94,[],[action([range(0,256)],[reduce(3,431,0)])]),state-rec(95,[],[action([range(0,256)],[reduce(2,337,0)])]),state-rec(96,[],[action([range(0,256)],[reduce(2,335,0)])]),state-rec(97,[],[action([range(0,256)],[reduce(3,404,0)])]),state-rec(98,[goto([47],138)],[action([range(0,46),range(48,256)],[reduce(1,272,0)]),action([47],[shift(138),reduce(1,272,0)])]),state-rec(99,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],139),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],139)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(!
 18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(100,[],[action([range(0,255)],[reduce(1,265,0)])]),state-rec(101,[goto([range(48,57)],105),goto([357],140)],[action([range(0,47),range(58,256)],[reduce(1,462,0)]),action([range(48,57)],[shift(105),reduce(1,462,0)])]),state-rec(102,[goto([range(48,57)],105),goto([357],141)],[action([range(48,57)],[shift(105)])]),state-rec(103,[],[action([range(0,256)],[reduce(1,461,0)])]),state-rec(104,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],142),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([!
 272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto
48],4),goto([472],3),goto([288],142)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(105,[],[action([range(0,256)],[reduce(1,357,0)])]),state-rec(106,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],143),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],143)],[action([range(48,57),range(6!
 5,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(107,[],[action([range(0,256)],[reduce(1,309,0)])]),state-rec(108,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],144),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],144)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0),reduce(3,388,0)]),act!
 ion([47],[reduce(3,388,0),shift(19),reduce(0,288,0)]),action([range(
0),32],[shift(18),reduce(3,388,0)]),action([42],[reduce(3,388,0),shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(3,388,0),shift(16),reduce(0,288,0)]),action([range(12,13)],[reduce(3,388,0),shift(15),reduce(0,288,0)])]),state-rec(109,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],145),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],145)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),act!
 ion([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(110,[],[action([range(0,256)],[reduce(1,263,0)])]),state-rec(111,[],[action([range(0,256)],[reduce(3,469,0)])]),state-rec(112,[],[action([range(0,256)],[reduce(1,285,0)])]),state-rec(113,[],[action([range(0,255)],[reduce(2,373,0)])]),state-rec(114,[],[action([range(0,255)],[reduce(2,371,0)])]),state-rec(115,[],[action([range(0,255)],[reduce(2,467,0)])]),state-rec(116,[],[action([range(0,255)],[reduce(2,381,0)])]),state-rec(117,[],[action([range(0,255)],[reduce(2,379,0)])]),state-rec(118,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],146),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434!
 ],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([
],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],146)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(1,414,0),reduce(0,288,0)]),action([47],[reduce(0,288,0),shift(19),reduce(1,414,0)]),action([range(9,10),32],[shift(18),reduce(1,414,0)]),action([42],[reduce(0,288,0),shift(17),reduce(1,414,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(0,288,0),shift(16),reduce(1,414,0)]),action([range(12,13)],[reduce(0,288,0),shift(15),reduce(1,414,0)])]),state-rec(119,[goto([62],147)],[action([62],[shift(147)])]),state-rec(120,[],[action([range(0,256)],[reduce(1,451,0)])]),state-rec(121,[],[action([range(0,256)],[reduce(1,295,0)])]),state-rec(122,[],[action([range(0,256)],[reduce(1,450,0)])]),state-rec(123,[],[action([range(0,256)],[reduce(1,449,0)])]),state-rec(124,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41)!
 ,range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],148),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],148)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(125,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],149),goto([430],3),goto([404]!
 ,12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),got
434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],149)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(126,[goto([115],150),goto([105],86),goto([60],85)],[action([115],[shift(150)]),action([105],[shift(86)]),action([60],[shift(85)])]),state-rec(127,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],151),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([4!
 33],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],151)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(128,[],[action([range(0,256)],[reduce(1,386,0)])]),state-rec(129,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],152),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),g!
 oto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5)
to([448],4),goto([472],3),goto([288],152)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(1,422,0),reduce(0,288,0)]),action([47],[reduce(0,288,0),shift(19),reduce(1,422,0)]),action([range(9,10),32],[shift(18),reduce(1,422,0)]),action([42],[reduce(0,288,0),shift(17),reduce(1,422,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(0,288,0),shift(16),reduce(1,422,0)]),action([range(12,13)],[reduce(0,288,0),shift(15),reduce(1,422,0)])]),state-rec(130,[goto([114],153)],[action([114],[shift(153)])]),state-rec(131,[goto([116],154)],[action([116],[shift(154)])]),state-rec(132,[goto([109],155)],[action([109],[shift(155)])]),state-rec(133,[goto([114],156)],[action([114],[shift(156)])]),state-rec(134,[goto([108],157)],[action([108],[shift(157)])]),state-rec(135,[goto([110],158)],[action([110],[shift(158)])]),state-rec(136,[goto([110],159)],[action([110],[shift(159)])]),state-rec(137,[goto([117],160)],[!
 action([117],[shift(160)])]),state-rec(138,[],[action([range(0,256)],[reduce(2,273,0)])]),state-rec(139,[goto([60],47),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([296],161),goto([299],164),goto([298],165),goto([300],164),goto([301],164),goto([302],164),goto([388],162),goto([386],163),goto([383],128),goto([260],40),goto([384],128),goto([262],39),goto([449],128),goto([277],38),goto([450],128),goto([278],37),goto([451],128),goto([471],35),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30),goto([387],163),goto([452],22),goto([453],22),goto([454],22),goto([279],28),goto([455],22),goto([280],27),goto([456],22),goto([275],26),goto([426],26),goto([427],26),goto([457],22),goto([281],25),goto([458],22),goto([282],24),goto([459],22),goto([283],23),goto([460],22),goto([389],162),goto([297],161)],[action([range(48,57),range(65,90),95,range(97,122)],[shif!
 t(44),reduce(0,427,0)]),action([256],[reduce(0,427,0)]),action([rang
,38),range(40,44),range(46,47),range(58,59),range(61,64),range(92,94),96,range(124,255)],[reduce(0,427,0),reduce(0,297,0)]),action([60],[reduce(0,297,0),shift(47),reduce(0,427,0)]),action([123],[reduce(0,297,0),shift(46),reduce(0,427,0)]),action([91],[reduce(0,297,0),shift(45),reduce(0,427,0)]),action([39,45],[reduce(0,297,0),shift(44),reduce(0,427,0)])]),state-rec(140,[],[action([range(0,256)],[reduce(2,355,0)])]),state-rec(141,[],[action([range(0,256)],[reduce(2,353,0)])]),state-rec(142,[goto([41],167),goto([276],166),goto([428],166),goto([429],166)],[action([range(0,40),range(42,256)],[reduce(0,429,0)]),action([41],[shift(167),reduce(0,429,0)])]),state-rec(143,[goto([60],172),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([452],169),goto([277],171),goto([453],169),goto([278],170),goto([454],169),goto([279],28),goto([455],169),goto([280],27),goto([456],169),goto([275],26),goto([426],26),goto([427],26),goto([457],169),goto([281],25),goto([458!
 ],169),goto([282],24),goto([459],169),goto([283],23),goto([460],169),goto([471],168),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30)],[action([range(0,38),range(40,44),range(46,47),range(58,59),range(61,64),range(92,94),96,range(123,256)],[reduce(0,427,0)]),action([60],[shift(172),reduce(0,427,0)]),action([91],[shift(45),reduce(0,427,0)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44),reduce(0,427,0)])]),state-rec(144,[goto([46],110),goto([309],173),goto([385],107),goto([263],106)],[action([46],[shift(110)])]),state-rec(145,[goto([46],110),goto([309],174),goto([385],107),goto([263],106)],[action([46],[shift(110)])]),state-rec(146,[goto([60],47),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([313],176),goto([312],177),goto([314],176),goto([315],176),goto([316],176),goto([388],175),goto([386],163),goto([383],128),goto([260!
 ],40),goto([384],128),goto([262],39),goto([449],128),goto([277],38),
o([450],128),goto([278],37),goto([451],128),goto([471],35),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30),goto([387],163),goto([452],22),goto([453],22),goto([454],22),goto([279],28),goto([455],22),goto([280],27),goto([456],22),goto([275],26),goto([426],26),goto([427],26),goto([457],22),goto([281],25),goto([458],22),goto([282],24),goto([459],22),goto([283],23),goto([460],22),goto([389],175)],[action([range(0,38),range(40,44),range(46,47),range(58,59),range(61,64),range(92,94),96,range(124,256)],[reduce(0,427,0)]),action([60],[shift(47),reduce(0,427,0)]),action([123],[shift(46),reduce(0,427,0)]),action([91],[shift(45),reduce(0,427,0)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44),reduce(0,427,0)])]),state-rec(147,[],[action([range(0,256)],[reduce(2,266,0)])]),state-rec(148,[goto([125],181),goto([44],180),goto([261],179),goto([410],179),goto([411],179),goto([257],178)!
 ,goto([408],178),goto([409],178)],[action([range(0,43),range(45,124),range(126,256)],[reduce(0,411,0),reduce(0,409,0)]),action([125],[reduce(0,409,0),shift(181),reduce(0,411,0)]),action([44],[reduce(0,409,0),shift(180),reduce(0,411,0)])]),state-rec(149,[goto([44],180),goto([257],182),goto([408],182),goto([409],182)],[action([range(0,43),range(45,256)],[reduce(0,409,0)]),action([44],[shift(180),reduce(0,409,0)])]),state-rec(150,[goto([116],133)],[action([116],[shift(133)])]),state-rec(151,[goto([62],184),goto([259],183),goto([406],183),goto([407],183)],[action([range(0,61),range(63,256)],[reduce(0,407,0)]),action([62],[shift(184),reduce(0,407,0)])]),state-rec(152,[goto([103],186),goto([269],185),goto([420],185),goto([421],185)],[action([range(0,102),range(104,256)],[reduce(0,421,0)]),action([103],[shift(186),reduce(0,421,0)])]),state-rec(153,[goto([101],187)],[action([101],[shift(187)])]),state-rec(154,[goto([62],188)],[action([62],[shift(188)])]),state-rec(155,[goto([101],1!
 89)],[action([101],[shift(189)])]),state-rec(156,[goto([105],190)],[
ion([105],[shift(190)])]),state-rec(157,[goto([62],191)],[action([62],[shift(191)])]),state-rec(158,[goto([101],192)],[action([101],[shift(192)])]),state-rec(159,[goto([115],194),goto([99],193)],[action([115],[shift(194)]),action([99],[shift(193)])]),state-rec(160,[goto([108],195)],[action([108],[shift(195)])]),state-rec(161,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],196),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],196)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),act!
 ion([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(162,[],[action([range(0,255)],[reduce(1,302,0)])]),state-rec(163,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],197),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],197)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(1,389,0),reduce(0,288,0)]),action([47],[reduce(0,288,0),shift(19),reduce(1,389,0)]),action([range(9,10),32],[shift(18),reduce(1,389,0)]),action([42],[reduce(0,288,0),shift(17),reduce(1,389,0)]),actio!
 n([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64)
nge(91,94),96,range(123,255)],[reduce(0,288,0),shift(16),reduce(1,389,0)]),action([range(12,13)],[reduce(0,288,0),shift(15),reduce(1,389,0)])]),state-rec(164,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],198),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],198)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[reduce(1,296,0),shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18),reduce(1,296,0)]),action([42],[reduce(1,296,0),shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(1,296,0),s!
 hift(16),reduce(0,288,0)]),action([range(12,13)],[reduce(1,296,0),shift(15),reduce(0,288,0)])]),state-rec(165,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],199),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],199)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(166,[],[action([range!
 (0,256)],[reduce(1,428,0),reduce(5,456,0)])]),state-rec(167,[goto([6
200)],[action([62],[shift(200)])]),state-rec(168,[],[action([range(0,256)],[reduce(1,460,0)])]),state-rec(169,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],201),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],201)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(170,[],[action([range(!
 0,256)],[reduce(1,453,0)])]),state-rec(171,[],[action([range(0,256)],[reduce(1,452,0)])]),state-rec(172,[goto([99],90),goto([110],89),goto([40],88),goto([115],87),goto([105],86)],[action([99],[shift(90)]),action([110],[shift(89)]),action([40],[shift(88)]),action([115],[shift(87)]),action([105],[shift(86)])]),state-rec(173,[],[action([range(0,256)],[reduce(3,308,0)])]),state-rec(174,[],[action([range(0,256)],[reduce(3,306,0)])]),state-rec(175,[],[action([range(0,256)],[reduce(1,316,0)])]),state-rec(176,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],202),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],202)],[action([range(48!
 ,57),range(65,90),95,range(97,122),256],[reduce(0,288,0),reduce(5,39
)]),action([47],[reduce(5,390,0),shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18),reduce(5,390,0)]),action([42],[reduce(5,390,0),shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(5,390,0),shift(16),reduce(0,288,0)]),action([range(12,13)],[reduce(5,390,0),shift(15),reduce(0,288,0)])]),state-rec(177,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],203),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],203)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),act!
 ion([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(178,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],204),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],204)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0),reduce(1,408,0)]),action([47],[reduce(1,408,0),shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18),reduce(1,408,0)]),action([42],[reduce(1,408,0),shift(17),reduce!
 (0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43
),range(58,64),range(91,94),96,range(123,255)],[reduce(1,408,0),shift(16),reduce(0,288,0)]),action([range(12,13)],[reduce(1,408,0),shift(15),reduce(0,288,0)])]),state-rec(179,[],[action([range(0,256)],[reduce(1,410,0),reduce(5,384,0)])]),state-rec(180,[],[action([range(0,256)],[reduce(1,257,0)])]),state-rec(181,[],[action([range(0,256)],[reduce(1,261,0)])]),state-rec(182,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],205),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],205)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0),reduce(1,408,0)]),action([47],[reduce(1,408,0),shift(19),reduce(0,288,0)]),ac!
 tion([range(9,10),32],[shift(18),reduce(1,408,0)]),action([42],[reduce(1,408,0),shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(1,408,0),shift(16),reduce(0,288,0)]),action([range(12,13)],[reduce(1,408,0),shift(15),reduce(0,288,0)])]),state-rec(183,[],[action([range(0,256)],[reduce(1,406,0),reduce(5,383,0)])]),state-rec(184,[goto([62],206)],[action([62],[shift(206)])]),state-rec(185,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],207),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],207)],[action([range(48,57),range(65,90),95,range(9!
 7,122),256],[reduce(1,420,0),reduce(0,288,0)]),action([47],[reduce(0
8,0),shift(19),reduce(1,420,0)]),action([range(9,10),32],[shift(18),reduce(1,420,0)]),action([42],[reduce(0,288,0),shift(17),reduce(1,420,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(0,288,0),shift(16),reduce(1,420,0)]),action([range(12,13)],[reduce(0,288,0),shift(15),reduce(1,420,0)])]),state-rec(186,[goto([114],208)],[action([114],[shift(208)])]),state-rec(187,[goto([101],209)],[action([101],[shift(209)])]),state-rec(188,[],[action([range(0,256)],[reduce(5,277,0)])]),state-rec(189,[goto([62],210)],[action([62],[shift(210)])]),state-rec(190,[goto([110],211)],[action([110],[shift(211)])]),state-rec(191,[],[action([range(0,256)],[reduce(5,281,0)])]),state-rec(192,[goto([62],212)],[action([62],[shift(212)])]),state-rec(193,[goto([62],213)],[action([62],[shift(213)])]),state-rec(194,[goto([62],214)],[action([62],[shift(214)])]),state-rec(195,[goto([97],215)],[action([97],[shift(215)])]),state-rec(196,[got!
 o([41],217),goto([264],216)],[action([41],[shift(217)])]),state-rec(197,[goto([46],110),goto([306],108),goto([305],109),goto([307],108),goto([308],108),goto([309],108),goto([385],107),goto([263],106)],[action([46],[shift(110)])]),state-rec(198,[goto([44],180),goto([257],218),goto([408],218),goto([409],218)],[action([range(0,43),range(45,256)],[reduce(0,409,0)]),action([44],[shift(180),reduce(0,409,0)])]),state-rec(199,[goto([41],217),goto([44],180),goto([264],216),goto([257],219),goto([408],219),goto([409],219)],[action([range(0,40),range(42,43),range(45,256)],[reduce(0,409,0)]),action([41],[shift(217),reduce(0,409,0)]),action([44],[shift(180),reduce(0,409,0)])]),state-rec(200,[],[action([range(0,256)],[reduce(2,276,0)])]),state-rec(201,[goto([60],47),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([388],220),goto([386],163),goto([383],128),goto([260],40),goto([384],128),goto([262],39),goto([449],128),goto([277],38),goto([450],1!
 28),goto([278],37),goto([451],128),goto([471],35),goto([469],33),got
286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30),goto([387],163),goto([452],22),goto([453],22),goto([454],22),goto([279],28),goto([455],22),goto([280],27),goto([456],22),goto([275],26),goto([426],26),goto([427],26),goto([457],22),goto([281],25),goto([458],22),goto([282],24),goto([459],22),goto([283],23),goto([460],22),goto([389],220)],[action([range(0,38),range(40,44),range(46,47),range(58,59),range(61,64),range(92,94),96,range(124,256)],[reduce(0,427,0)]),action([60],[shift(47),reduce(0,427,0)]),action([123],[shift(46),reduce(0,427,0)]),action([91],[shift(45),reduce(0,427,0)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44),reduce(0,427,0)])]),state-rec(202,[goto([124],222),goto([258],221),goto([412],221),goto([413],221)],[action([range(0,123),range(125,256)],[reduce(0,413,0)]),action([124],[shift(222),reduce(0,413,0)])]),state-rec(203,[goto([124],222),goto([258],223),goto([412],223),goto(!
 [413],223)],[action([range(0,123),range(125,256)],[reduce(0,413,0)]),action([124],[shift(222),reduce(0,413,0)])]),state-rec(204,[goto([60],126),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([295],224),goto([383],121),goto([260],40),goto([384],121),goto([262],39),goto([449],121),goto([277],123),goto([450],121),goto([278],122),goto([451],121),goto([471],120),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30)],[action([60],[shift(126)]),action([123],[shift(46)]),action([91],[shift(45)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44)])]),state-rec(205,[goto([60],126),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([295],225),goto([383],121),goto([260],40),goto([384],121),goto([262],39),goto([449],121),goto([277],123),goto([450],121),goto([278],122),goto([451],121),goto([471],120),g!
 oto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362
0),goto([361],31),goto([363],30),goto([364],30),goto([366],30)],[action([60],[shift(126)]),action([123],[shift(46)]),action([91],[shift(45)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44)])]),state-rec(206,[],[action([range(0,256)],[reduce(2,259,0)])]),state-rec(207,[goto([115],228),goto([392],227),goto([268],226),goto([418],226),goto([419],226)],[action([range(0,114),range(116,256)],[reduce(0,419,0)]),action([115],[shift(228),reduce(0,419,0)])]),state-rec(208,[goto([97],229)],[action([97],[shift(229)])]),state-rec(209,[],[action([range(0,256)],[reduce(4,270,0)])]),state-rec(210,[],[action([range(0,256)],[reduce(6,280,0)])]),state-rec(211,[goto([103],230)],[action([103],[shift(230)])]),state-rec(212,[],[action([range(0,256)],[reduce(6,279,0)])]),state-rec(213,[],[action([range(0,256)],[reduce(6,283,0)])]),state-rec(214,[],[action([range(0,256)],[reduce(6,282,0)])]),state-rec(215,[goto([114],231)],[action([114],[shift(231)])]),state-rec(216,[],[action([!
 range(0,256)],[reduce(7,387,0)])]),state-rec(217,[],[action([range(0,256)],[reduce(1,264,0)])]),state-rec(218,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],232),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],232)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0),reduce(1,408,0)]),action([47],[reduce(1,408,0),shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18),reduce(1,408,0)]),action([42],[reduce(1,408,0),shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(1,408,0),shift(16),reduce(0,288,0)]),acti!
 on([range(12,13)],[reduce(1,408,0),shift(15),reduce(0,288,0)])]),sta
rec(219,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],233),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],233)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0),reduce(1,408,0)]),action([47],[reduce(1,408,0),shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18),reduce(1,408,0)]),action([42],[reduce(1,408,0),shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(1,408,0),shift(16),reduce(0,288,0)]),action([range(12,13)],[reduce(1,408,0),shift(15),reduce(0,288,0)])]),state-rec(220,[],[action([range(0,256)!
 ],[reduce(5,385,0)])]),state-rec(221,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],234),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],234)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0),reduce(1,412,0)]),action([47],[reduce(1,412,0),shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18),reduce(1,412,0)]),action([42],[reduce(1,412,0),shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(1,412,0),shift(16),reduce(0,288,0)]),action([range(12,13)],[reduce(1,412,0),shift(15),reduce(0,288,0)])]),state-re!
 c(222,[],[action([range(0,256)],[reduce(1,258,0)])]),state-rec(223,[
o([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],235),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],235)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0),reduce(1,412,0)]),action([47],[reduce(1,412,0),shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18),reduce(1,412,0)]),action([42],[reduce(1,412,0),shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(1,412,0),shift(16),reduce(0,288,0)]),action([range(12,13)],[reduce(1,412,0),shift(15),reduce(0,288,0)])]),state-rec(224,[],[action([range(0,256)],[reduce(5,!
 294,0)])]),state-rec(225,[],[action([range(0,256)],[reduce(5,292,0)])]),state-rec(226,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],236),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],236)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(1,418,0),reduce(0,288,0)]),action([47],[reduce(0,288,0),shift(19),reduce(1,418,0)]),action([range(9,10),32],[shift(18),reduce(1,418,0)]),action([42],[reduce(0,288,0),shift(17),reduce(1,418,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(0,288,0),shift(16),reduce(1,418,0)]),action([range(12,13)],[reduc!
 e(0,288,0),shift(15),reduce(1,418,0)])]),state-rec(227,[goto([47],19
oto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],237),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],237)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(228,[goto([116],238)],[action([116],[shift(238)])]),state-rec(229,[goto([109],239)],[action([109],[shift(239)])]),state-rec(230,[goto([62],240)],[ac!
 tion([62],[shift(240)])]),state-rec(231,[],[action([range(0,256)],[reduce(7,271,0)])]),state-rec(232,[goto([60],47),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([302],241),goto([388],162),goto([386],163),goto([383],128),goto([260],40),goto([384],128),goto([262],39),goto([449],128),goto([277],38),goto([450],128),goto([278],37),goto([451],128),goto([471],35),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30),goto([387],163),goto([452],22),goto([453],22),goto([454],22),goto([279],28),goto([455],22),goto([280],27),goto([456],22),goto([275],26),goto([426],26),goto([427],26),goto([457],22),goto([281],25),goto([458],22),goto([282],24),goto([459],22),goto([283],23),goto([460],22),goto([389],162)],[action([range(0,38),range(40,44),range(46,47),range(58,59),range(61,64),range(92,94),96,range(124,256)],[reduce(0,427,0)]),action([60],[shift(47),reduce(0,4!
 27,0)]),action([123],[shift(46),reduce(0,427,0)]),action([91],[shift
),reduce(0,427,0)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44),reduce(0,427,0)])]),state-rec(233,[goto([60],47),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([302],242),goto([388],162),goto([386],163),goto([383],128),goto([260],40),goto([384],128),goto([262],39),goto([449],128),goto([277],38),goto([450],128),goto([278],37),goto([451],128),goto([471],35),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30),goto([387],163),goto([452],22),goto([453],22),goto([454],22),goto([279],28),goto([455],22),goto([280],27),goto([456],22),goto([275],26),goto([426],26),goto([427],26),goto([457],22),goto([281],25),goto([458],22),goto([282],24),goto([459],22),goto([283],23),goto([460],22),goto([389],162)],[action([range(0,38),range(40,44),range(46,47),range(58,59),range(61,64),range(92,94),96,range(124,256)],[reduce(0,427,0)]),action([60],!
 [shift(47),reduce(0,427,0)]),action([123],[shift(46),reduce(0,427,0)]),action([91],[shift(45),reduce(0,427,0)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44),reduce(0,427,0)])]),state-rec(234,[goto([60],47),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([316],243),goto([388],175),goto([386],163),goto([383],128),goto([260],40),goto([384],128),goto([262],39),goto([449],128),goto([277],38),goto([450],128),goto([278],37),goto([451],128),goto([471],35),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30),goto([387],163),goto([452],22),goto([453],22),goto([454],22),goto([279],28),goto([455],22),goto([280],27),goto([456],22),goto([275],26),goto([426],26),goto([427],26),goto([457],22),goto([281],25),goto([458],22),goto([282],24),goto([459],22),goto([283],23),goto([460],22),goto([389],175)],[action([range(0,38),range(40,44),range(46,!
 47),range(58,59),range(61,64),range(92,94),96,range(124,256)],[reduc
,427,0)]),action([60],[shift(47),reduce(0,427,0)]),action([123],[shift(46),reduce(0,427,0)]),action([91],[shift(45),reduce(0,427,0)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44),reduce(0,427,0)])]),state-rec(235,[goto([60],47),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([316],244),goto([388],175),goto([386],163),goto([383],128),goto([260],40),goto([384],128),goto([262],39),goto([449],128),goto([277],38),goto([450],128),goto([278],37),goto([451],128),goto([471],35),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30),goto([387],163),goto([452],22),goto([453],22),goto([454],22),goto([279],28),goto([455],22),goto([280],27),goto([456],22),goto([275],26),goto([426],26),goto([427],26),goto([457],22),goto([281],25),goto([458],22),goto([282],24),goto([459],22),goto([283],23),goto([460],22),goto([389],175)],[action([range(0,38),r!
 ange(40,44),range(46,47),range(58,59),range(61,64),range(92,94),96,range(124,256)],[reduce(0,427,0)]),action([60],[shift(47),reduce(0,427,0)]),action([123],[shift(46),reduce(0,427,0)]),action([91],[shift(45),reduce(0,427,0)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44),reduce(0,427,0)])]),state-rec(236,[goto([60],126),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([327],246),goto([326],247),goto([328],246),goto([329],246),goto([330],246),goto([383],245),goto([260],40),goto([384],245),goto([262],39),goto([449],245),goto([277],123),goto([450],245),goto([278],122),goto([451],245),goto([471],120),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30)],[action([60],[shift(126)]),action([123],[shift(46)]),action([91],[shift(45)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44)])]),state-rec(237,[goto([112],250!
 ),goto([391],249),goto([267],248),goto([416],248),goto([417],248)],[
ion([range(0,111),range(113,256)],[reduce(0,417,0)]),action([112],[shift(250),reduce(0,417,0)])]),state-rec(238,[goto([97],251)],[action([97],[shift(251)])]),state-rec(239,[goto([109],252)],[action([109],[shift(252)])]),state-rec(240,[],[action([range(0,256)],[reduce(8,278,0)])]),state-rec(241,[],[action([range(0,255)],[reduce(5,301,0)])]),state-rec(242,[],[action([range(0,255)],[reduce(5,299,0)])]),state-rec(243,[],[action([range(0,256)],[reduce(5,315,0)])]),state-rec(244,[],[action([range(0,256)],[reduce(5,313,0)])]),state-rec(245,[],[action([range(0,256)],[reduce(1,330,0)])]),state-rec(246,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],253),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7!
 ),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],253)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0),reduce(3,392,0)]),action([47],[reduce(3,392,0),shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18),reduce(3,392,0)]),action([42],[reduce(3,392,0),shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(3,392,0),shift(16),reduce(0,288,0)]),action([range(12,13)],[reduce(3,392,0),shift(15),reduce(0,288,0)])]),state-rec(247,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],254),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),g!
 oto([448],4),goto([472],3),goto([288],254)],[action([range(48,57),ra
(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(248,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],255),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],255)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(1,416,0),reduce(0,288,0)]),action([47],[reduce(0,288,0),shift(19),reduce(1,416,0)]),action!
 ([range(9,10),32],[shift(18),reduce(1,416,0)]),action([42],[reduce(0,288,0),shift(17),reduce(1,416,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(0,288,0),shift(16),reduce(1,416,0)]),action([range(12,13)],[reduce(0,288,0),shift(15),reduce(1,416,0)])]),state-rec(249,[],[action([range(0,47),range(58,64),range(91,94),96,range(123,256)],[reduce(9,393,0)])]),state-rec(250,[goto([114],256)],[action([114],[shift(256)])]),state-rec(251,[goto([114],257)],[action([114],[shift(257)])]),state-rec(252,[goto([97],258)],[action([97],[shift(258)])]),state-rec(253,[goto([60],126),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([330],259),goto([383],245),goto([260],40),goto([384],245),goto([262],39),goto([449],245),goto([277],123),goto([450],245),goto([278],122),goto([451],245),goto([471],120),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([36!
 1],31),goto([363],30),goto([364],30),goto([366],30)],[action([60],[s
t(126)]),action([123],[shift(46)]),action([91],[shift(45)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44)])]),state-rec(254,[goto([60],126),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([330],260),goto([383],245),goto([260],40),goto([384],245),goto([262],39),goto([449],245),goto([277],123),goto([450],245),goto([278],122),goto([451],245),goto([471],120),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30)],[action([60],[shift(126)]),action([123],[shift(46)]),action([91],[shift(45)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44)])]),state-rec(255,[goto([60],126),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([320],263),goto([319],264),goto([321],263),goto([322],263),goto([323],263),goto([390],262),goto([383],261),goto([260],40),goto([384],261),goto([262],39)!
 ,goto([449],261),goto([277],123),goto([450],261),goto([278],122),goto([451],261),goto([471],120),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30)],[action([60],[shift(126)]),action([123],[shift(46)]),action([91],[shift(45)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44)])]),state-rec(256,[goto([111],265)],[action([111],[shift(265)])]),state-rec(257,[goto([116],266)],[action([116],[shift(266)])]),state-rec(258,[goto([114],267)],[action([114],[shift(267)])]),state-rec(259,[],[action([range(0,256)],[reduce(3,329,0)])]),state-rec(260,[],[action([range(0,256)],[reduce(3,327,0)])]),state-rec(261,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],268),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto(!
 [433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),g
([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto([448],4),goto([472],3),goto([288],268)],[action([range(48,57),range(65,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(262,[],[action([range(0,256)],[reduce(1,323,0)])]),state-rec(263,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],269),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),g!
 oto([448],4),goto([472],3),goto([288],269)],[action([range(48,57),range(65,90),95,range(97,122)],[reduce(0,288,0)]),action([256],[reduce(0,288,0),reduce(3,391,0)]),action([47],[reduce(3,391,0),shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18),reduce(3,391,0)]),action([42],[reduce(3,391,0),shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[reduce(3,391,0),shift(16),reduce(0,288,0)]),action([range(12,13)],[reduce(3,391,0),shift(15),reduce(0,288,0)])]),state-rec(264,[goto([47],19),goto([range(9,10),32],18),goto([42],17),goto([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],16),goto([range(12,13)],15),goto([287],270),goto([430],3),goto([404],12),goto([274],13),goto([405],12),goto([431],12),goto([433],11),goto([434],3),goto([439],10),goto([437],6),goto([442],9),goto([272],8),goto([438],6),goto([444],7),goto([440],6),goto([446],5),goto!
 ([448],4),goto([472],3),goto([288],270)],[action([range(48,57),range
,90),95,range(97,122),256],[reduce(0,288,0)]),action([47],[shift(19),reduce(0,288,0)]),action([range(9,10),32],[shift(18)]),action([42],[shift(17),reduce(0,288,0)]),action([range(0,8),11,range(14,31),range(33,41),range(43,46),range(58,64),range(91,94),96,range(123,255)],[shift(16),reduce(0,288,0)]),action([range(12,13)],[shift(15),reduce(0,288,0)])]),state-rec(265,[goto([100],271)],[action([100],[shift(271)])]),state-rec(266,[],[action([range(0,256)],[reduce(5,268,0)])]),state-rec(267,[],[action([range(0,256)],[reduce(7,269,0)])]),state-rec(268,[goto([45],119),goto([266],118),goto([414],118),goto([415],118)],[action([range(0,44),range(46,256)],[reduce(0,415,0)]),action([45],[shift(119),reduce(0,415,0)])]),state-rec(269,[goto([60],126),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([323],272),goto([390],262),goto([383],261),goto([260],40),goto([384],261),goto([262],39),goto([449],261),goto([277],123),goto([450],261),goto([278],12!
 2),goto([451],261),goto([471],120),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30)],[action([60],[shift(126)]),action([123],[shift(46)]),action([91],[shift(45)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44)])]),state-rec(270,[goto([60],126),goto([123],46),goto([91],45),goto([39,45,range(48,57),range(65,90),95,range(97,122)],44),goto([323],273),goto([390],262),goto([383],261),goto([260],40),goto([384],261),goto([262],39),goto([449],261),goto([277],123),goto([450],261),goto([278],122),goto([451],261),goto([471],120),goto([469],33),goto([286],34),goto([470],33),goto([464],32),goto([362],30),goto([361],31),goto([363],30),goto([364],30),goto([366],30)],[action([60],[shift(126)]),action([123],[shift(46)]),action([91],[shift(45)]),action([39,45,range(48,57),range(65,90),95,range(97,122)],[shift(44)])]),state-rec(271,[goto([117],274)],[action([117],[shift(274)])]),state-re!
 c(272,[],[action([range(0,256)],[reduce(3,322,0)])]),state-rec(273,[
action([range(0,256)],[reduce(3,320,0)])]),state-rec(274,[goto([99],275)],[action([99],[shift(275)])]),state-rec(275,[goto([116],276)],[action([116],[shift(276)])]),state-rec(276,[goto([105],277)],[action([105],[shift(277)])]),state-rec(277,[goto([111],278)],[action([111],[shift(278)])]),state-rec(278,[goto([110],279)],[action([110],[shift(279)])]),state-rec(279,[goto([115],280)],[action([115],[shift(280)])]),state-rec(280,[],[action([range(0,256)],[reduce(11,267,0)])])]),priorities([arg-gtr-prio(294,4,294),arg-gtr-prio(294,4,291),arg-gtr-prio(294,4,289),arg-gtr-prio(294,4,290),arg-gtr-prio(292,4,292),arg-gtr-prio(292,4,291),arg-gtr-prio(292,4,289),arg-gtr-prio(292,4,290),arg-gtr-prio(293,4,289),arg-gtr-prio(293,4,290),arg-gtr-prio(301,4,301),arg-gtr-prio(301,4,298),arg-gtr-prio(301,4,296),arg-gtr-prio(301,4,297),arg-gtr-prio(299,4,299),arg-gtr-prio(299,4,298),arg-gtr-prio(299,4,296),arg-gtr-prio(299,4,297),arg-gtr-prio(300,4,296),arg-gtr-prio(300,4,297),arg-gtr-prio(308,2,3!
 08),arg-gtr-prio(308,2,305),arg-gtr-prio(308,2,303),arg-gtr-prio(308,2,304),arg-gtr-prio(306,2,306),arg-gtr-prio(306,2,305),arg-gtr-prio(306,2,303),arg-gtr-prio(306,2,304),arg-gtr-prio(307,2,303),arg-gtr-prio(307,2,304),arg-gtr-prio(315,4,315),arg-gtr-prio(315,4,312),arg-gtr-prio(315,4,310),arg-gtr-prio(315,4,311),arg-gtr-prio(313,4,313),arg-gtr-prio(313,4,312),arg-gtr-prio(313,4,310),arg-gtr-prio(313,4,311),arg-gtr-prio(314,4,310),arg-gtr-prio(314,4,311),arg-gtr-prio(322,2,322),arg-gtr-prio(322,2,319),arg-gtr-prio(322,2,317),arg-gtr-prio(322,2,318),arg-gtr-prio(320,2,320),arg-gtr-prio(320,2,319),arg-gtr-prio(320,2,317),arg-gtr-prio(320,2,318),arg-gtr-prio(321,2,317),arg-gtr-prio(321,2,318),arg-gtr-prio(329,2,329),arg-gtr-prio(329,2,326),arg-gtr-prio(329,2,324),arg-gtr-prio(329,2,325),arg-gtr-prio(327,2,327),arg-gtr-prio(327,2,326),arg-gtr-prio(327,2,324),arg-gtr-prio(327,2,325),arg-gtr-prio(328,2,324),arg-gtr-prio(328,2,325),arg-gtr-prio(337,1,337),arg-gtr-prio(337,1,334),!
 arg-gtr-prio(337,1,331),arg-gtr-prio(337,1,332),arg-gtr-prio(335,1,3
,arg-gtr-prio(335,1,334),arg-gtr-prio(335,1,331),arg-gtr-prio(335,1,332),arg-gtr-prio(336,1,331),arg-gtr-prio(336,1,332),arg-gtr-prio(346,1,346),arg-gtr-prio(346,1,343),arg-gtr-prio(346,1,340),arg-gtr-prio(346,1,341),arg-gtr-prio(344,1,344),arg-gtr-prio(344,1,343),arg-gtr-prio(344,1,340),arg-gtr-prio(344,1,341),arg-gtr-prio(345,1,340),arg-gtr-prio(345,1,341),arg-gtr-prio(355,1,355),arg-gtr-prio(355,1,352),arg-gtr-prio(355,1,349),arg-gtr-prio(355,1,350),arg-gtr-prio(353,1,353),arg-gtr-prio(353,1,352),arg-gtr-prio(353,1,349),arg-gtr-prio(353,1,350),arg-gtr-prio(354,1,349),arg-gtr-prio(354,1,350),arg-gtr-prio(364,1,364),arg-gtr-prio(364,1,361),arg-gtr-prio(364,1,358),arg-gtr-prio(364,1,359),arg-gtr-prio(362,1,362),arg-gtr-prio(362,1,361),arg-gtr-prio(362,1,358),arg-gtr-prio(362,1,359),arg-gtr-prio(363,1,358),arg-gtr-prio(363,1,359),arg-gtr-prio(373,1,373),arg-gtr-prio(373,1,370),arg-gtr-prio(373,1,367),arg-gtr-prio(373,1,368),arg-gtr-prio(371,1,371),arg-gtr-prio(371,1,370),arg-!
 gtr-prio(371,1,367),arg-gtr-prio(371,1,368),arg-gtr-prio(372,1,367),arg-gtr-prio(372,1,368),arg-gtr-prio(381,1,381),arg-gtr-prio(381,1,378),arg-gtr-prio(381,1,376),arg-gtr-prio(381,1,377),arg-gtr-prio(379,1,379),arg-gtr-prio(379,1,378),arg-gtr-prio(379,1,376),arg-gtr-prio(379,1,377),arg-gtr-prio(380,1,376),arg-gtr-prio(380,1,377),arg-gtr-prio(294,4,292),arg-gtr-prio(294,4,293),arg-gtr-prio(292,4,294),arg-gtr-prio(292,4,293),arg-gtr-prio(293,4,291),gtr-prio(291,289),gtr-prio(291,290),gtr-prio(292,289),gtr-prio(292,290),gtr-prio(293,289),gtr-prio(293,290),gtr-prio(294,289),gtr-prio(294,290),arg-gtr-prio(301,4,299),arg-gtr-prio(301,4,300),arg-gtr-prio(299,4,301),arg-gtr-prio(299,4,300),arg-gtr-prio(300,4,298),gtr-prio(298,296),gtr-prio(298,297),gtr-prio(299,296),gtr-prio(299,297),gtr-prio(300,296),gtr-prio(300,297),gtr-prio(301,296),gtr-prio(301,297),arg-gtr-prio(308,2,306),arg-gtr-prio(308,2,307),arg-gtr-prio(306,2,308),arg-gtr-prio(306,2,307),arg-gtr-prio(307,2,305),gtr-prio!
 (305,303),gtr-prio(305,304),gtr-prio(306,303),gtr-prio(306,304),gtr-
o(307,303),gtr-prio(307,304),gtr-prio(308,303),gtr-prio(308,304),arg-gtr-prio(315,4,313),arg-gtr-prio(315,4,314),arg-gtr-prio(313,4,315),arg-gtr-prio(313,4,314),arg-gtr-prio(314,4,312),gtr-prio(312,310),gtr-prio(312,311),gtr-prio(313,310),gtr-prio(313,311),gtr-prio(314,310),gtr-prio(314,311),gtr-prio(315,310),gtr-prio(315,311),arg-gtr-prio(322,2,320),arg-gtr-prio(322,2,321),arg-gtr-prio(320,2,322),arg-gtr-prio(320,2,321),arg-gtr-prio(321,2,319),gtr-prio(319,317),gtr-prio(319,318),gtr-prio(320,317),gtr-prio(320,318),gtr-prio(321,317),gtr-prio(321,318),gtr-prio(322,317),gtr-prio(322,318),arg-gtr-prio(329,2,327),arg-gtr-prio(329,2,328),arg-gtr-prio(327,2,329),arg-gtr-prio(327,2,328),arg-gtr-prio(328,2,326),gtr-prio(326,324),gtr-prio(326,325),gtr-prio(327,324),gtr-prio(327,325),gtr-prio(328,324),gtr-prio(328,325),gtr-prio(329,324),gtr-prio(329,325),arg-gtr-prio(337,1,335),arg-gtr-prio(337,1,336),arg-gtr-prio(335,1,337),arg-gtr-prio(335,1,336),arg-gtr-prio(336,1,334),gtr-prio(334!
 ,331),gtr-prio(334,332),gtr-prio(335,331),gtr-prio(335,332),gtr-prio(336,331),gtr-prio(336,332),gtr-prio(337,331),gtr-prio(337,332),arg-gtr-prio(346,1,344),arg-gtr-prio(346,1,345),arg-gtr-prio(344,1,346),arg-gtr-prio(344,1,345),arg-gtr-prio(345,1,343),gtr-prio(343,340),gtr-prio(343,341),gtr-prio(344,340),gtr-prio(344,341),gtr-prio(345,340),gtr-prio(345,341),gtr-prio(346,340),gtr-prio(346,341),arg-gtr-prio(355,1,353),arg-gtr-prio(355,1,354),arg-gtr-prio(353,1,355),arg-gtr-prio(353,1,354),arg-gtr-prio(354,1,352),gtr-prio(352,349),gtr-prio(352,350),gtr-prio(353,349),gtr-prio(353,350),gtr-prio(354,349),gtr-prio(354,350),gtr-prio(355,349),gtr-prio(355,350),arg-gtr-prio(364,1,362),arg-gtr-prio(364,1,363),arg-gtr-prio(362,1,364),arg-gtr-prio(362,1,363),arg-gtr-prio(363,1,361),gtr-prio(361,358),gtr-prio(361,359),gtr-prio(362,358),gtr-prio(362,359),gtr-prio(363,358),gtr-prio(363,359),gtr-prio(364,358),gtr-prio(364,359),arg-gtr-prio(373,1,371),arg-gtr-prio(373,1,372),arg-gtr-prio(371!
 ,1,373),arg-gtr-prio(371,1,372),arg-gtr-prio(372,1,370),gtr-prio(370
7),gtr-prio(370,368),gtr-prio(371,367),gtr-prio(371,368),gtr-prio(372,367),gtr-prio(372,368),gtr-prio(373,367),gtr-prio(373,368),arg-gtr-prio(381,1,379),arg-gtr-prio(381,1,380),arg-gtr-prio(379,1,381),arg-gtr-prio(379,1,380),arg-gtr-prio(380,1,378),gtr-prio(378,376),gtr-prio(378,377),gtr-prio(379,376),gtr-prio(379,377),gtr-prio(380,376),gtr-prio(380,377),gtr-prio(381,376),gtr-prio(381,377),arg-gtr-prio(294,4,294),arg-gtr-prio(294,4,294),arg-gtr-prio(294,4,294),arg-gtr-prio(291,4,291),arg-gtr-prio(291,4,291),arg-gtr-prio(291,4,291),arg-gtr-prio(294,4,294),arg-gtr-prio(294,4,294),arg-gtr-prio(301,4,301),arg-gtr-prio(301,4,301),arg-gtr-prio(301,4,301),arg-gtr-prio(298,4,298),arg-gtr-prio(298,4,298),arg-gtr-prio(298,4,298),arg-gtr-prio(301,4,301),arg-gtr-prio(301,4,301),arg-gtr-prio(308,2,308),arg-gtr-prio(308,2,308),arg-gtr-prio(308,2,308),arg-gtr-prio(305,2,305),arg-gtr-prio(305,2,305),arg-gtr-prio(305,2,305),arg-gtr-prio(308,2,308),arg-gtr-prio(308,2,308),arg-gtr-prio(315,4,3!
 15),arg-gtr-prio(315,4,315),arg-gtr-prio(315,4,315),arg-gtr-prio(312,4,312),arg-gtr-prio(312,4,312),arg-gtr-prio(312,4,312),arg-gtr-prio(315,4,315),arg-gtr-prio(315,4,315),arg-gtr-prio(322,2,322),arg-gtr-prio(322,2,322),arg-gtr-prio(322,2,322),arg-gtr-prio(319,2,319),arg-gtr-prio(319,2,319),arg-gtr-prio(319,2,319),arg-gtr-prio(322,2,322),arg-gtr-prio(322,2,322),arg-gtr-prio(329,2,329),arg-gtr-prio(329,2,329),arg-gtr-prio(329,2,329),arg-gtr-prio(326,2,326),arg-gtr-prio(326,2,326),arg-gtr-prio(326,2,326),arg-gtr-prio(329,2,329),arg-gtr-prio(329,2,329),arg-gtr-prio(337,1,337),arg-gtr-prio(337,1,337),arg-gtr-prio(337,1,337),arg-gtr-prio(334,1,334),arg-gtr-prio(334,1,334),arg-gtr-prio(334,1,334),arg-gtr-prio(337,1,337),arg-gtr-prio(337,1,337),arg-gtr-prio(346,1,346),arg-gtr-prio(346,1,346),arg-gtr-prio(346,1,346),arg-gtr-prio(343,1,343),arg-gtr-prio(343,1,343),arg-gtr-prio(343,1,343),arg-gtr-prio(346,1,346),arg-gtr-prio(346,1,346),arg-gtr-prio(355,1,355),arg-gtr-prio(355,1,355),!
 arg-gtr-prio(355,1,355),arg-gtr-prio(352,1,352),arg-gtr-prio(352,1,3
,arg-gtr-prio(352,1,352),arg-gtr-prio(355,1,355),arg-gtr-prio(355,1,355),arg-gtr-prio(364,1,364),arg-gtr-prio(364,1,364),arg-gtr-prio(364,1,364),arg-gtr-prio(361,1,361),arg-gtr-prio(361,1,361),arg-gtr-prio(361,1,361),arg-gtr-prio(364,1,364),arg-gtr-prio(364,1,364),arg-gtr-prio(373,1,373),arg-gtr-prio(373,1,373),arg-gtr-prio(373,1,373),arg-gtr-prio(370,1,370),arg-gtr-prio(370,1,370),arg-gtr-prio(370,1,370),arg-gtr-prio(373,1,373),arg-gtr-prio(373,1,373),arg-gtr-prio(381,1,381),arg-gtr-prio(381,1,381),arg-gtr-prio(381,1,381),arg-gtr-prio(378,1,378),arg-gtr-prio(378,1,378),arg-gtr-prio(378,1,378),arg-gtr-prio(381,1,381),arg-gtr-prio(381,1,381),arg-gtr-prio(472,1,472)]))

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/test/example.rtg
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/test/example.rtg	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,18 @@
+regular tree grammar
+
+start 
+  X
+
+productions
+
+	X -> f(<string>, X)
+	   | f(B)
+
+	/* nonterminal not declared */
+	X -> W
+
+	/* nonterminal not reachable */
+	A -> f(B)
+
+	B -> <int>
+  B -> <string>

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/trans/check.str	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,55 @@
+module check
+
+imports
+  libstratego-lib
+  include/rtg
+  lib/editor-common.generated
+
+rules
+
+  analyze:
+    t -> t
+    with
+      <topdown(try(record-nonterm))> t;
+      <one(mark-reachable)> t
+
+  // Creates a mapping (GetProduction) from nonterminal -> production.
+  record-nonterm:
+    p@ ProdRule(Nonterm(Plain(x)), _) -> p
+    with
+      rules(
+        GetProduction :+ x -> p
+      )
+
+  // Marks productions as reachable (IsReachable).
+  mark-reachable:
+    t@ RTG(Start(xs), _) -> t
+    with
+      <all(try(mark-reachable))> xs
+
+  mark-reachable:
+    t@ Nonterm(Plain(x)) -> t
+    with
+      <bagof-GetProduction; all(mark-reachable)> x
+
+  mark-reachable:
+    p@ ProdRule(_, xs) -> p
+    with
+      if not(IsReachable) then //break cycles 
+        rules(
+          IsReachable :+ p -> p
+        );
+        <topdown(try(mark-reachable))> xs
+      end
+
+rules
+
+  regular-tree-grammar-error:
+    Nonterm(Plain(x)) -> (x, $[Nonterminal [x] is not declared])
+    where
+    	not(<GetProduction> x)
+
+  regular-tree-grammar-warning:
+    p at ProdRule(_, _) -> (p, $[Production is not reachable from the start symbol(s)])
+    where
+      not(<IsReachable> p)

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/trans/rtg.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/trans/rtg.str	Tue Nov 23 16:32:51 2010	(r21408)
@@ -0,0 +1,52 @@
+module rtg
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/rtg
+  lib/editor-common.generated
+  check
+
+rules // Main editor interface (defined by editor/rtg-Builders and -References.esv)
+
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast, errors, warnings, notes)
+    with
+      editor-init;
+      analyze;
+      errors   := <collect-all(regular-tree-grammar-error, conc)> ast;
+      warnings := <collect-all(regular-tree-grammar-warning, conc)> ast;
+      notes    := []  //<collect-all(regular-tree-grammar-note, conc)> ast
+
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Plain(_) for which GetProduction is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
+    where
+      //<debug(!"Resolve: ")> node;
+      Plain(x) := node;
+      target   := <GetProduction> x
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  // editor-hover:
+  //   (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) -> proposals
+    where
+      if !node => Plain(COMPLETION(prefix)) then
+        proposals := <all-keys-GetProduction>
+      end

From L.C.L.Kats at tudelft.nl  Tue Nov 23 18:20:37 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 23 Nov 2010 17:20:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21409 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.rtg/META-INF
	org.strategoxt.imp.feature
Message-ID: <201011231720.oANHKbYw031147@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Tue Nov 23 17:20:36 2010
New Revision: 21409
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21409&sc=1

Log:
Added RTG to Spoofax feature.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/META-INF/MANIFEST.MF	Tue Nov 23 16:32:51 2010	(r21408)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.rtg/META-INF/MANIFEST.MF	Tue Nov 23 17:20:36 2010	(r21409)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: RTG Editor Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.editors.rtg; singleton:=true
-Bundle-Version: 0.1.0.0
+Bundle-Version: 0.1.0.qualifier
 Bundle-Activator: org.strategoxt.imp.editors.rtg.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
 Require-Bundle: org.eclipse.core.runtime,

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Tue Nov 23 16:32:51 2010	(r21408)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Tue Nov 23 17:20:36 2010	(r21409)
@@ -279,4 +279,11 @@
          version="0.1.0.qualifier"
          unpack="false"/>
 
+   <plugin
+         id="org.strategoxt.imp.editors.rtg"
+         download-size="0"
+         install-size="0"
+         version="0.1.0.qualifier"
+         unpack="false"/>
+
 </feature>

From L.C.L.Kats at tudelft.nl  Tue Nov 23 20:52:23 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 23 Nov 2010 19:52:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21410 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.aster/syntax
Message-ID: <201011231952.oANJqNUU000458@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Tue Nov 23 19:52:22 2010
New Revision: 21410
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21410&sc=1

Log:
Removed symbolic link for now.

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aster/syntax/Stratego-Attributes.def

From L.C.L.Kats at tudelft.nl  Tue Nov 23 20:53:02 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 23 Nov 2010 19:53:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21411 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.aster/syntax
Message-ID: <201011231953.oANJr2cp000467@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Tue Nov 23 19:53:02 2010
New Revision: 21411
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21411&sc=1

Log:
Changed Stratego-Attributes.def symbolic link into a regular file for now.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aster/syntax/Stratego-Attributes.def

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aster/syntax/Stratego-Attributes.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aster/syntax/Stratego-Attributes.def	Tue Nov 23 19:53:02 2010	(r21411)
@@ -0,0 +1,1082 @@
+definition
+module ResultTerms
+
+imports
+  Stratego-Sugar
+
+exports
+
+  sorts
+    LineEnd
+    TermNoApp
+    ResultTerm
+    SingleLineLayout
+
+  context-free syntax
+
+    TermNoApp -> ResultTerm
+
+    Term                  -> TermNoApp
+    StrategyAngle         -> TermNoApp {reject}
+    "<" Strategy ">" Term -> TermNoApp {reject}
+
+  lexical syntax
+  
+    ShortCom -> SingleLineLayout
+    LongCom  -> SingleLineLayout
+    [\ \t]+  -> SingleLineLayout
+    [\n\r]   -> LineEnd
+    Eof      -> LineEnd
+  
+  syntax
+  
+    %% <s>\n -> RootApp
+    
+    <StrategyAngle-CF> <SingleLineLayout*-LEX> <LineEnd-CF> -> <ResultTerm-CF> {ast("RootApp(<1>)")}
+    
+    %% <s>A -> App
+    
+    "<" <LAYOUT?-CF> <Strategy-CF> <LAYOUT?-CF> ">" <SingleLineLayout*-LEX>
+        <Term-CF>                                                           -> <ResultTerm-CF> {ast("App(<1>, <3>)")}
+
+module Stratego-Sugar-Overlays
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Terms
+
+exports
+  sorts Overlay
+  context-free syntax
+    Id 			 "=" Term 	-> Overlay {cons("OverlayNoArgs")}
+    Id "(" {Id ","}* ")" "=" Term 	-> Overlay {cons("Overlay")}
+
+module Stratego-Sugar-DynamicRules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+
+exports
+ 
+  sorts ScopeLabels
+  context-free syntax
+
+    "{|" ScopeLabels ":" Strategy "|}" -> Strategy {cons("DynRuleScope")}
+
+    {DynRuleScopeId ","}*   -> ScopeLabels
+    "~" Term		    -> ScopeLabels {cons("ScopeLabels")}
+
+  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
+  context-free syntax
+
+    "rules" "(" DynRuleDef* ")" -> Strategy {cons("GenDynRules")}
+
+    Id "+" Term                 -> DynRuleDef {cons("AddScopeLabel")} 
+    DynRuleId ":-"  Term        -> DynRuleDef {cons("UndefineDynRule")}
+    DynRuleId ":"   Rule        -> DynRuleDef {cons("SetDynRule")}
+    DynRuleId ":+"  Rule        -> DynRuleDef {cons("AddDynRule")}
+    DynRuleId ":"   Term        -> DynRuleDef {cons("SetDynRuleMatch")}
+
+    DynRuleId ":="  Term        -> DynRuleDef {cons("DynRuleAssign")}
+    DynRuleId ":+="  Term       -> DynRuleDef {cons("DynRuleAssignAdd")}
+
+    DynRuleId ":"   Rule "depends" "on" Term -> DynRuleDef {cons("SetDynRuleDepends")}
+
+    RuleDec "." Term            -> DynRuleId {cons("LabeledDynRuleId")}
+    RuleDec "+" Term            -> DynRuleId {cons("AddLabelDynRuleId")}
+    RuleDec                     -> DynRuleId {cons("DynRuleId")}
+
+    Id "." Term                 -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
+    Id                          -> DynRuleScopeId {cons("DynRuleScopeId")}
+
+  context-free syntax
+
+    Id                          -> RuleDec {cons("RDecNoArgs")}
+    Id "(" {Typedid ","}* ")"   -> RuleDec {cons("RDec")}
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"   -> RuleDec {cons("RDecT")}
+
+  sorts RuleNames
+  context-free syntax
+    {Id ","}*				  -> RuleNames
+    "~" Term				  -> RuleNames {cons("RuleNames")}
+
+    "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+
+  syntax
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+
+  context-free syntax
+    Strategy "/" RuleNames"\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+    Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+
+    Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+
+  priorities
+    <StrategyAngle-CF> <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("BA")}
+  > {
+
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    }
+  > <Strategy-CF> <LAYOUT?-CF> "=>" <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("AM")}
+
+  context-free priorities
+    StrategyAngle Term 		          -> Strategy {cons("BA")}
+  > "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+  > Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+  > Strategy "/" RuleNames "\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+  > Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+  > Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+
+module Stratego-Sugar-Rules
+imports Stratego-Sugar-Strategies
+exports
+
+  sorts RuleDef
+  context-free syntax
+    Id ":" Rule 				-> RuleDef {cons("RDefNoArgs")}
+    
+    Anno+ RuleDef               -> Def {cons("AnnoDef")}
+
+    Id "(" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDef")}
+
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDefT")}
+
+  sorts Rule RuleCond
+  context-free syntax
+    Term "->" Term           	    -> Rule {cons("RuleNoCond")} %% backward comp.
+    Term "->" Term "where" Strategy -> Rule {cons("Rule")}       %% backward comp.
+    Term "->" Term RuleCond+	    -> Rule {cons("Rule"), avoid}
+
+    "where" Strategy -> RuleCond {cons("WhereClause")}
+    "with"  Strategy -> RuleCond {cons("WithClause")}
+
+module Stratego-Sugar-Strategies
+imports
+  Stratego-Core-Strategies
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Constants
+  Stratego-Sugar-Signatures
+
+exports
+  context-free syntax
+    Id  		      "=" Strategy -> StrategyDef {cons("SDefNoArgs")}
+    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
+
+  context-free syntax
+    ID 				  	  -> Typedid {cons("DefaultVarDec")}
+
+  sorts Rule
+
+  sorts StrategyParen StrategyCurly StrategyAngle
+  context-free syntax
+
+    %% Abstraction
+
+    SVar "(" {Strategy ","}* ")" 	  -> Strategy {cons("Call")}
+
+    %% Match and build
+
+    "{" Strategy "}" 			  -> Strategy {cons("ScopeDefault")}
+
+     %%"<" Strategy ">" Term 		  -> Strategy {cons("BA")}
+     StrategyAngle Term 		  -> Strategy {cons("BA")}
+     "<" Strategy ">"			  -> StrategyAngle {bracket} %% {cons("AngleStrat")}
+
+    %% Combinators
+
+    Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
+
+    "rec" Id "(" Strategy ")" 		  -> Strategy {cons("Rec")}
+
+    "not"   "(" Strategy ")" 		  -> Strategy {cons("Not")}
+    "where" "(" Strategy ")" 		  -> Strategy {cons("Where")}
+    "with"  "(" Strategy ")" 		  -> Strategy {cons("With"), prefer}
+    "test"  "(" Strategy ")" 		  -> Strategy {cons("Test")}
+
+    %% Primitives
+
+    "prim" "(" String ")" 		  -> Strategy {cons("PrimNoArgs")}
+    "prim" "(" String "," {Term ","}* ")" -> Strategy {cons("Prim")}
+
+    %% Congruence operators
+
+    String 				  -> Strategy {cons("StrCong")}
+    Int 				  -> Strategy {cons("IntCong")}
+    Real 				  -> Strategy {cons("RealCong")}
+    Char 			 	  -> Strategy {cons("CharCong")}
+
+    String "(" {Strategy ","}* ")" 	  -> Strategy {cons("CongQ")}
+
+    %%"(" {Strategy ","}* ")" 		  -> Strategy {cons("TupleCong"),avoid}
+
+    Strategy StrategyCurly		  -> Strategy {cons("AnnoCong")}
+    
+    "{" Strategy "}"		  	  -> StrategyCurly {cons("StrategyCurly")}
+
+    "("  ")" 		  		  -> Strategy {cons("EmptyTupleCong")}
+   "(" Strategy  ")" 		          -> Strategy {bracket}
+    "(" Strategy "," {Strategy ","}+ ")"  -> Strategy {cons("TupleCong")}
+
+%%    Mod 	  			  -> Strategy {cons("ModCongNoArgs")}
+%%    Mod "(" {Strategy ","}* ")"	  	  -> Strategy {cons("ModCong")}
+%%    Id "^" Id				  -> Mod {cons("Mod")}
+    "[" {Strategy ","}* "]" 		  -> Strategy {cons("ListCongNoTail")}
+    "[" {Strategy ","}* "|" Strategy "]"  -> Strategy {cons("ListCong")}
+
+%%    Strategy "#" "(" StrategyInj ")" 	  -> Strategy {cons("ExplodeCong")}
+%%    Strategy "#" "(" Strategy ")" 	  -> Strategy {cons("ExplodeCong")}
+    Strategy "#" StrategyParen	  	  -> Strategy {cons("ExplodeCong")}
+
+  %% Syntactic sugar sugar
+
+  sorts SwitchCase
+  context-free syntax
+
+    SVar  		  		  -> Strategy {cons("CallNoArgs")}
+    "\\" Rule "\\" 			  -> Strategy {cons("LRule")}
+    "(" Rule ")" 			  -> Strategy {cons("SRule")}
+    Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
+    Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
+
+    "proceed" "(" {Strategy "," }+ ")" -> Strategy {cons("Proceed"), prefer}
+
+    "if" Strategy "then" Strategy 
+                  "else" Strategy "end"   -> Strategy {cons("CondChoice")}
+    "if" Strategy "then" Strategy "end"   -> Strategy {cons("IfThen")}
+
+    "switch" Strategy SwitchCase* "end"   -> Strategy {cons("SwitchChoiceNoOtherwise")}
+    "switch" Strategy SwitchCase*
+         "otherwise" ":" Strategy "end"   -> Strategy {cons("SwitchChoice")}
+
+    "case" Strategy ":" Strategy          -> SwitchCase {cons("SwitchCase")}
+
+    Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+
+    Term ":=" Term			  -> Strategy {cons("Assign")}
+
+  %% Priorities
+
+  context-free priorities
+    { Strategy StrategyCurly		  -> Strategy
+      Strategy "#" StrategyParen          -> Strategy
+    }
+  > { "!" Term 				  -> Strategy
+      "?" Term 				  -> Strategy
+    }
+  > StrategyAngle Term 		          -> Strategy
+  > Strategy "=>" Term 		  	  -> Strategy
+  > Strategy ";" Strategy 		  -> Strategy
+  > {right: 
+     Strategy "+" Strategy 		  -> Strategy
+     Strategy "<+" Strategy 		  -> Strategy
+     Strategy "+>" Strategy 		  -> Strategy
+     
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy
+    }
+
+  context-free priorities
+    Strategy 				  -> StrategyMid
+  > Strategy "+" Strategy 		  -> Strategy
+
+  context-free priorities
+    { Strategy StrategyCurly      -> Strategy
+      Strategy "#" StrategyParen  -> Strategy
+    }
+    .> Term ":=" Term -> Strategy
+
+
+module Stratego-Sugar-Terms
+imports
+  Stratego-Core-Terms
+  Stratego-Sugar-Strategies
+
+exports
+  sorts LID
+  context-free syntax
+    LId 			-> LID  {cons("ListVar")}
+    LID				-> Var  {cons("Var")}
+    LID				-> ID
+
+  context-free syntax
+    "_" PreTerm 		 -> PreTerm {cons("BuildDefaultPT")}
+    "_" Term 			 -> Term {cons("BuildDefault"),prefer}
+
+    Char 			 -> PreTerm {cons("Char")}
+
+    PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+    PreTerm                      -> Term {cons("NoAnnoList")}
+
+    "<" Strategy ">" Term 	 -> PreTerm {cons("App")}
+    "<" Strategy ">" Term 	 -> Term {cons("App"),prefer}
+
+    StrategyAngle		 -> PreTerm {cons("RootApp")}
+    StrategyAngle		 -> Term {cons("RootApp"),prefer}
+
+    "(" {Term ","}* ")" 	 -> PreTerm {cons("Tuple")}
+    "[" {Term ","}* "]" 	 -> PreTerm {cons("List")}
+    "[" {Term ","}* "|" Term "]" -> PreTerm {cons("ListTail")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Sugar-Signatures
+imports
+  Stratego-Core-Signatures
+  Stratego-Sugar-Constants
+
+exports
+
+  sorts Sort
+  context-free syntax
+    "[" {Sort ","}* "]"		 -> Sort {cons("SortList")}
+    "[" {Sort ","}* "|" Sort "]" -> Sort {cons("SortListTl")}
+    "(" {Sort ","}* ")"		 -> Sort {cons("SortTuple")}
+
+  sorts Kind
+  context-free syntax
+    "*" 			-> Kind {cons("Star")}
+    "**" 			-> Kind {cons("StarStar")}
+
+module Stratego-Core-Signatures
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+exports
+  sorts Sdecl
+  context-free syntax
+    "sorts" Sort* 		-> Sdecl {cons("Sorts")}
+    "constructors" Opdecl* 	-> Sdecl {cons("Constructors")}
+
+  sorts Sort
+  context-free syntax
+    LCID 			 -> Sort {cons("SortVar")}
+    UCID 			 -> Sort {cons("SortNoArgs")}
+    Id "(" {Sort ","}* ")" 	 -> Sort {cons("Sort")}
+
+  sorts Opdecl
+  context-free syntax
+    Id     ":" Type 		-> Opdecl {cons("OpDecl")}
+    String ":" Type 		-> Opdecl {cons("OpDeclQ")}
+           ":" Type 		-> Opdecl {cons("OpDeclInj")}
+
+  context-free syntax
+    "external" Id     ":" Type 	-> Opdecl {cons("ExtOpDecl")}
+    "external" String ":" Type 	-> Opdecl {cons("ExtOpDeclQ")}
+    "external"        ":" Type 	-> Opdecl {cons("ExtOpDeclInj")}
+
+  sorts Type ArgType ConstType FunType RetType
+  context-free syntax
+    Sort	                -> ConstType {cons("ConstType")}
+    {ArgType "*"}+ "->" RetType -> FunType {cons("FunType")}
+    "(" Type ")"                -> ArgType {bracket}
+    ConstType			-> ArgType
+    Type	                -> RetType
+    FunType			-> RetType {reject}
+
+    FunType			-> Type
+    ConstType			-> Type
+
+  %%%
+   %% Restriction is required for the Sort* in Sdecl: List(a) is
+   %% ambiguous.
+   %%%
+  context-free restrictions
+    Sort -/- [\(]
+
+module Stratego-Core-Terms
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+
+exports
+  sorts ID Var Wld
+  context-free syntax
+    Id 				-> Var  {cons("Var")}
+    Id				-> ID
+    %% ":" Var                  -> Var  {cons("SeqVar")}
+
+  sorts Term PreTerm
+  context-free syntax
+    Var 			 -> PreTerm 
+    Var 			 -> Term {prefer}
+
+    "_" 			 -> Wld {cons("Wld")}
+    Wld 			 -> PreTerm
+    Wld 			 -> Term {prefer}
+
+    Int 			 -> PreTerm {cons("Int")}
+    Real 			 -> PreTerm {cons("Real")}
+    String 			 -> PreTerm {cons("Str")}
+
+    Id "(" {Term ","}* ")" 	 -> PreTerm {cons("Op")}
+    String "(" {Term ","}* ")" 	 -> PreTerm {cons("OpQ")}
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+
+    PreTerm "{^" PreTerm "}"	 -> Term {cons("Anno")}
+
+    Var "@" Term 		 -> Term {cons("As"),prefer}
+    Var "@" PreTerm 		 -> PreTerm {cons("As")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Core-Strategies
+imports
+  Stratego-Core-Terms
+  Stratego-Core-Constants
+  Stratego-Core-Signatures
+
+exports
+  sorts Def
+  context-free syntax
+    StrategyDef					 -> Def 
+    Id						 -> SVar {cons("SVar")}
+    "let" Def* "in" Strategy "end"		 -> Strategy {cons("Let")}
+    SVar "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallT")}
+
+    "call" "(" Term "|" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallDynamic")}
+
+
+  sorts StrategyDef
+  context-free syntax
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDefT")}
+
+    Anno+ StrategyDef -> Def {cons("AnnoDef")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("ExtSDefInl")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
+
+    "external"
+    EmptyId "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
+
+
+  sorts EmptyId
+  lexical syntax
+  
+    -> EmptyId
+
+  sorts Anno
+  context-free syntax
+    "extend"      -> Anno {cons("Extend")}
+    "override"    -> Anno {cons("Override")}
+    "internal"    -> Anno {cons("Internal")}
+%%  "sealed"      -> Anno {cons("Sealed")}
+%%  "extensible"  -> Anno {cons("Extensible")}
+%%  "overridable" -> Anno {cons("Overridable")}
+
+  lexical syntax
+    
+    "extend"      -> Keyword
+    "override"    -> Keyword
+    "internal"    -> Keyword
+    "sealed"      -> Keyword
+    "extensible"  -> Keyword
+    "overridable" -> Keyword
+
+  lexical restrictions
+  
+    "extend"
+    "override"
+    "internal"
+    "sealed"
+    "extensible"
+    "overridable" -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Typedid
+  context-free syntax
+    ID ":" Type 			  -> Typedid {cons("VarDec")}
+
+
+  sorts Strategy SVar StrategyParen StrategyMid 
+  context-free syntax
+    "(" Strategy ")"			  -> StrategyParen {cons("ParenStrat")}
+
+    "fail" 				  -> Strategy {cons("Fail")}
+    "id" 				  -> Strategy {cons("Id")}
+
+    "proceed" "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("ProceedT"), prefer}
+    "proceed"                                         -> Strategy {cons("ProceedNoArgs"), prefer}
+
+    %% Match and build
+
+    "?" Term 				  -> Strategy {cons("Match")}
+    "!" Term 				  -> Strategy {cons("Build")}
+    "{" {ID ","}* ":" Strategy "}" 	  -> Strategy {cons("Scope")}
+
+    %% Combinators
+
+    Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+    Strategy "<" StrategyMid 
+             "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    Strategy 				  -> StrategyMid
+
+    %% Primitives
+
+    "prim" "(" String "," {Strategy ","}* "|" {Term ","}*")"  -> Strategy {cons("PrimT")}
+
+    %% Traversal
+
+    "some" "(" Strategy ")" 		  -> Strategy {cons("Some")}
+    "one" "(" Strategy ")" 		  -> Strategy {cons("One")}
+    "all" "(" Strategy ")" 		  -> Strategy {cons("All")}
+
+  %% Priorities
+
+  context-free priorities
+    { "!" Term 				  -> Strategy {cons("Build")}
+      "?" Term 				  -> Strategy {cons("Match")}
+    }
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+  > {right: 
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    }
+
+  context-free syntax
+    "import-term" "(" ModName ")" -> Strategy {cons("ImportTerm")}
+
+module Stratego-Core-Modules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Strategies
+  Stratego-Core-Signatures
+
+exports 
+  sorts Module
+  context-free syntax
+    "module" ModName Decl* 	 -> Module {cons("Module")}
+    "specification" Decl*	 -> Module {cons("Specification")}
+
+  sorts Decl 
+  context-free syntax
+    "imports" ImportModName* 	-> Decl {cons("Imports")}
+    "strategies" Def* 		-> Decl {cons("Strategies")}
+    "signature" Sdecl*  	-> Decl {cons("Signature")}
+
+  sorts ImportModName
+  context-free syntax
+    ModName              -> ImportModName {cons("Import")}
+  syntax
+    <ModName-CF> "/" "-" -> <ImportModName-CF> {cons("ImportWildcard")}
+
+module Stratego-Sugar-Modules
+imports
+  Stratego-Core-Modules
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Overlays
+  Stratego-Sugar-Rules
+
+exports 
+
+  sorts Decl Def
+  context-free syntax
+    "rules" Def* 		-> Decl {cons("Rules")}
+    "overlays" Overlay* 	-> Decl {cons("Overlays")}
+
+    RuleDef 			-> Def 
+
+
+module Stratego-Sugar-StringQuotations
+exports
+
+  sorts
+    StringQuotation
+    StringQuotedPart1 StringQuotedChars1 DollarOpen1 DollarClose1 QuotedBracket1 Dollar1
+    StringQuotedPart2 StringQuotedChars2 DollarOpen2 DollarClose2 QuotedBracket2 Dollar2
+    StringQuotedPart3 StringQuotedChars3 DollarOpen3 DollarClose3 QuotedBracket3 Dollar3
+    StringQuotedPart4 StringQuotedChars4 DollarOpen4 DollarClose4 QuotedBracket4  Dollar4
+    Padding
+
+  context-free syntax
+
+    StringQuotation -> PreTerm
+
+  syntax
+
+    StringQuotation -> <PreTerm-CF>
+
+    "$" "[" Padding StringQuotedPart1*               "]"    -> StringQuotation {cons("StringQuotation1") }
+     Padding "[" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "]"    -> StringQuotedPart1 {cons("StringEscape1")}
+    <StringQuotedChars1-LEX>                                -> StringQuotedPart1 {cons("QStr")}
+    <Dollar1-LEX>                                           -> StringQuotedPart1 {cons("QDollar")}
+    "$" <QuotedBracket1-LEX> "$"                            -> StringQuotedPart1 {cons("QBr")}
+    ~[\[\]\$]+                                              -> <StringQuotedChars1-LEX>
+    [\[\]]                                                  -> <QuotedBracket1-LEX>
+    "$"                                                     -> <Dollar1-LEX>
+
+    "$" "{" Padding StringQuotedPart2*               "}"    -> StringQuotation {cons("StringQuotation2") }
+     Padding "{" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "}"    -> StringQuotedPart2 {cons("StringEscape2")}
+    <StringQuotedChars2-LEX>                                -> StringQuotedPart2 {cons("QStr")}
+    <Dollar2-LEX>                                           -> StringQuotedPart2 {cons("QDollar")}
+    "$" <QuotedBracket2-LEX> "$"                            -> StringQuotedPart2 {cons("QBr")}
+    ~[\{\}\$]+                                              -> <StringQuotedChars2-LEX>
+    [\{\}]                                                  -> <QuotedBracket2-LEX>
+    "$"                                                     -> <Dollar2-LEX>
+
+    "$" "(" Padding StringQuotedPart3*              ")"     -> StringQuotation {cons("StringQuotation3") }
+    Padding "(" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ")"     -> StringQuotedPart3 {cons("StringEscape3")}
+    <StringQuotedChars3-LEX>                                -> StringQuotedPart3 {cons("QStr")}
+    <Dollar3-LEX>                                           -> StringQuotedPart3 {cons("QDollar")}
+    "$" <QuotedBracket3-LEX> "$"                            -> StringQuotedPart3 {cons("QBr")}
+    ~[\(\)\$]+                                              -> <StringQuotedChars3-LEX>
+    [\(\)]                                                  -> <QuotedBracket3-LEX>
+    "$"                                                     -> <Dollar3-LEX>
+
+    "$" "<" Padding StringQuotedPart4*               ">"    -> StringQuotation {cons("StringQuotation4") }
+    Padding "<"  <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ">"    -> StringQuotedPart4 {cons("StringEscape4")}
+    <StringQuotedChars4-LEX>                                -> StringQuotedPart4 {cons("QStr")}
+    <Dollar4-LEX>                                           -> StringQuotedPart4 {cons("QDollar")}
+    "$" <QuotedBracket4-LEX> "$"                            -> StringQuotedPart4 {cons("QBr")}
+    ~[\<\>\$]+                                              -> <StringQuotedChars4-LEX>
+    [\<\>]                                                  -> <QuotedBracket4-LEX>
+    "$"                                                     -> <Dollar4-LEX>
+   
+    %% Padding is a dummy lexical that will contain the indentation prefix of every quotation
+    <Padding-LEX>                                           -> Padding
+                                                            -> <Padding-LEX> {indentpadding}
+
+  lexical restrictions
+
+    StringQuotedChars1 -/- ~[\[\]\$]   
+    StringQuotedChars2 -/- ~[\{\}\$]    
+    StringQuotedChars3 -/- ~[\(\)\$]    
+    StringQuotedChars4 -/- ~[\<\>\$]
+    Dollar1            -/- [\[\]] . [\$]
+    Dollar2            -/- [\{\}] . [\$]
+    Dollar3            -/- [\(\)] . [\$]
+    Dollar4            -/- [\<\>] . [\$]
+
+module Stratego-Core-Constants
+exports
+  sorts Int Real String StrChar
+  lexical syntax
+    [\-]? [0-9]+ 		-> Int
+    [\-]? [0-9]+ [\.] [0-9]+ 	-> Real
+    "\"" StrChar* "\"" 		-> String
+    ~[\"\\] 			-> StrChar
+    [\\] [\"tnr\\] 		-> StrChar
+
+
+module Stratego-Sugar-Constants
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+  Stratego-Sugar-StringQuotations
+exports
+  sorts Char CharChar
+  lexical syntax
+    "'" CharChar "'"		-> Char
+    ~[\']			-> CharChar
+    [\\] [\'ntr\ ]		-> CharChar
+    Char		 	-> Id {reject}
+
+module Stratego-Core-Identifiers
+exports
+  sorts ModName ModNamePart
+  lexical syntax
+    {ModNamePart "/"}+ -> ModName
+    [a-zA-Z\.\_] [a-zA-Z0-9\'\.\-\_]* -> ModNamePart
+  lexical restrictions
+    ModName -/- [a-zA-Z0-9\'\.\-\_]
+  lexical syntax
+    "imports" 		-> ModName {reject}
+    "overlays" 		-> ModName {reject}
+    "rules" 		-> ModName {reject}
+    "signature" 	-> ModName {reject}
+    "strategies" 	-> ModName {reject}
+
+  sorts Id LId LCID UCID Wld
+  lexical syntax
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]*     -> Id
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]* "*" -> LId
+    [\'] [a-z]+                       -> Id
+
+    [a-z] [a-zA-Z0-9\'\-\_]*  -> LCID
+    [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
+
+  lexical restrictions
+    Id   -/- [a-zA-Z0-9\'\-\_\*]
+    LId  -/- [a-zA-Z0-9\'\-\_]
+    LCID -/- [a-zA-Z0-9\'\-\_]
+    UCID -/- [a-zA-Z0-9\'\-\_]
+
+  lexical syntax
+    "_"     -> Id {reject}
+    "'"     -> Id {reject}
+
+    Keyword -> Id   {reject}
+    Keyword -> LId  {reject}
+    Keyword -> LCID {reject}
+    Keyword -> UCID {reject}
+
+  lexical restrictions
+    "all"
+    "case" %% not reserved kw
+    "constructors"
+    "else" %% not reserved kw
+    "end" %% not reserved kw
+    "external" %% not reserved kw
+    "fail"
+    "id"
+    "if" %% not reserved kw
+    "in"
+    "imports" %% not reserved kw
+    "let"
+    "module"
+    "not"
+    "one"
+    "overlays"
+    "otherwise" %% not reserved kw
+    "prim"
+    "rec" %% not reserved kw
+    "rules"
+    "script"
+    "signature"
+    "some"
+    "sorts"
+    "strategies"
+    "stratego"
+    "switch" %% not reserved kw
+    "test"
+    "then" %% not reserved kw
+    "where"
+    "import-term"
+      -/- [a-zA-Z0-9\'\-\_]
+  
+  context-free restrictions
+    Wld -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Keyword
+  lexical syntax
+    "all"               -> Keyword
+    "constructors" 	-> Keyword
+    "fail" 		-> Keyword
+    "id" 		-> Keyword
+    "in" 		-> Keyword
+    "let" 		-> Keyword
+    "module" 		-> Keyword
+    "not" 		-> Keyword
+    "one" 		-> Keyword
+    "overlays" 		-> Keyword
+    "prim" 		-> Keyword
+    "rules" 		-> Keyword
+    "script" 		-> Keyword
+    "signature" 	-> Keyword
+    "some" 		-> Keyword
+    "sorts" 		-> Keyword
+    "strategies" 	-> Keyword
+    "stratego" 		-> Keyword
+    "test" 		-> Keyword
+    "where" 		-> Keyword
+    "import-term"	-> Keyword
+
+
+module Stratego-Core-Layout
+exports
+  sorts Ws ShortCom LongCom CommChar Asterisk Eof 
+  lexical syntax
+    [\t\ \n\r]			-> Ws
+
+    "//" ~[\n]* ([\n] | Eof)	-> ShortCom
+    "/*" CommChar* "*/"	-> LongCom
+				-> Eof  
+
+    ~[\*]     -> CommChar
+
+    "*"       -> Asterisk
+    Asterisk  -> CommChar
+
+  lexical restrictions
+    Asterisk -/- [\/]
+    Eof      -/- ~[]
+
+  lexical syntax
+    ShortCom 	-> LAYOUT
+    LongCom 	-> LAYOUT
+    Ws 		-> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\*]
+    LAYOUT? -/- [\/].[\/]
+
+module Stratego-Sugar-Layout
+imports Stratego-Core-Layout
+%%exports
+%%  sorts VeryLongCom Eof VLCchar Backslash
+%%  lexical syntax
+%%    "\\end{code}" VLCchar* "\\begin{code}" -> VeryLongCom
+%%    "\\begin{code}" 			   -> VeryLongCom
+%%    "\\end{code}" VLCchar* Eof 		   -> VeryLongCom
+%%    "\\literate" VLCchar* "\\begin{code}"  -> VeryLongCom
+%%    ~[\\] 				   -> VLCchar
+%%    Backslash 				   -> VLCchar
+%%    [\\] 				   -> Backslash
+
+%%  lexical restrictions
+%%    Backslash -/- [b].[e].[g].[i].[n].[\{].[c].[o].[d].[e].[\}]
+%%    Eof -/- ~[]
+
+%%  lexical syntax
+%%    VeryLongCom -> LAYOUT
+
+
+
+module Stratego-Sugar
+imports
+  Stratego-Sugar-Layout
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Constants 
+  Stratego-Sugar-Modules
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+  Stratego-Sugar-DynamicRules
+  Stratego-Sugar-Overlays
+
+hiddens
+  context-free start-symbols Module
+
+module Stratego-Attributes
+
+imports
+  Stratego-Sugar
+  ResultTerms
+
+hiddens
+  context-free start-symbols
+    Module
+    Decl
+
+exports
+  sorts
+    DefType
+    Pattern
+    ADef
+    AttributeDef
+    AttributeRef
+    AttributeCall
+    AttributeCallLHS
+    AttributeDecl
+    AttributeType
+    AttributeTypeNoSort
+    DecoratorRef
+    DecoratorRefNoArgs
+    DecoratorId
+    AttributeKeyword
+    ChildDot
+    DotChild
+    AttributeId
+    AttributeDeclId
+    OptChildDot
+    OptDotChild
+    OptSortDot
+    NoSortDot
+    AttributeNameValue
+    NameDefBlockDef
+    PatternDefBlockDef
+    Where
+    NoWhere
+    UNDEFINED %% matches nothing
+  
+  lexical syntax
+  
+    %% Unreserve some Id's specifically for (built-in) attributes
+
+    "all"       -> AttributeId
+    "one"       -> AttributeId
+    "some"      -> AttributeId
+    "test"      -> AttributeId
+    "in"        -> AttributeId
+    "signature" -> AttributeId
+  
+  context-free restrictions
+  
+    AttributeId -/- [a-zA-Z0-9\'\-\_\*]
+
+    DecoratorRefNoArgs -/- [\(]  %% decorator(arg,y) vs. decorator (tuple, y)
+  
+  context-free syntax %% identifiers
+  
+    Id               -> AttributeId {prefer}
+  
+    AttributeId      -> AttributeDeclId
+    AttributeKeyword -> AttributeDeclId {reject}
+
+    AttributeId      -> DecoratorId
+    "*"              -> DecoratorId
+    "plain"          -> DecoratorId {prefer} %% treat as keyword
+    AttributeKeyword -> DecoratorId {reject}
+  
+  context-free syntax %% attributes
+    
+    AttributeDeclId "(" { Typedid "," }* "|" { Term "," }* ")" -> AttributeDecl {cons("Attribute")}
+    AttributeDeclId "(" { Typedid "," }*                   ")" -> AttributeDecl {cons("AttributeNoTerms")}
+    AttributeDeclId                                            -> AttributeDecl {cons("AttributeNoArgs")}
+    
+    AttributeId "(" { Typedid "," }* "|" { Term "," }* ")" -> AttributeDef {cons("Attribute")}
+    AttributeId "(" { Typedid "," }*                   ")" -> AttributeDef {cons("AttributeNoTerms")}
+    AttributeId                                            -> AttributeDef {cons("AttributeNoArgs")}
+    
+    AttributeId "(" { Strategy "," }* "|" { Term "," }* ")" -> AttributeRef {cons("Attribute")}
+    AttributeId "(" { Strategy "," }*                   ")" -> AttributeRef {cons("AttributeNoTerms")}
+    AttributeId                                             -> AttributeRef {cons("AttributeNoArgs")}
+    
+    DecoratorId "(" { Strategy "," }* "|" { Term "," }* ")" -> DecoratorRef {cons("Decorator")}
+    DecoratorId "(" { Strategy "," }*                   ")" -> DecoratorRef {cons("DecoratorNoTerms")}
+    DecoratorRefNoArgs                                      -> DecoratorRef
+    DecoratorId                                             -> DecoratorRefNoArgs {cons("DecoratorNoArgs")}
+
+    AttributeCallLHS "." AttributeRef -> AttributeCall {cons("AttributeRef")}
+    Term                              -> AttributeCallLHS
+    "<" Strategy ">" Term             -> AttributeCallLHS {reject}
+    
+    AttributeCall -> Strategy {prefer}
+    AttributeCall -> PreTerm {cons("AttributeTerm")}
+   
+  context-free syntax %% attribute equations: core syntax
+
+    "attributes" ADef* -> Decl {cons("Attributes")}
+
+    AttributeType { AttributeDecl "," }+               -> ADef {cons("ADecl")}
+    AttributeTypeNoSort Pattern "." AttributeNameValue -> ADef {cons("ADef")}
+    
+    DefType DecoratorRef* OptSortDot -> AttributeType {cons("Type")}
+    DefType DecoratorRef* NoSortDot  -> AttributeTypeNoSort {cons("Type")}
+    
+    OptChildDot AttributeDef "="  Strategy -> AttributeNameValue {cons("ADefStrategy")}
+    
+    "eq"        -> DefType {cons("Eq")}
+    "def"       -> DefType {cons("Def")}
+    "decorator" -> DefType {cons("Decorator")}
+    
+    Id "."     -> ChildDot {cons("Child")}
+    "." Id     -> DotChild {cons("DotChild")}
+    "id" "."   -> ChildDot {cons("IdChild"), prefer}    %% sugar
+    "." "id"   -> DotChild {cons("DotIdChild"), prefer} %% sugar
+    "root" "." -> ChildDot {reject}                     %% confusing
+    "." "root" -> DotChild {reject}                     %% confusing
+    
+    ChildDot   -> OptChildDot
+               -> OptChildDot {cons("NoChild")}
+    DotChild   -> OptDotChild
+               -> OptDotChild {cons("NoChild")}
+    
+    Sort "." -> OptSortDot {cons("Sort")}
+             -> OptSortDot {cons("NoSort")}
+             -> NoSortDot {cons("NoSort")}
+    
+    Term             -> Pattern
+    AttributeKeyword -> Pattern {reject}
+    AttributeCall    -> Pattern {reject}
+    "root"           -> Pattern {cons("Root"), prefer}
+
+  context-free syntax %% attribute equations: syntactic sugar
+ 
+    "decorators" ADef* -> Decl {cons("Decorators")}
+
+    %% Single-line attribute definitions
+    AttributeTypeNoSort AttributeNameValue    -> ADef {cons("ADefNoPattern"), avoid}
+    OptChildDot AttributeDef ":=" Term Where* -> AttributeNameValue {cons("ADefTerm")}
+    
+    %% Attribute definition blocks/groups
+    AttributeType Pattern      ":" NameDefBlockDef+    -> ADef {cons("NameDefBlock")}
+    AttributeType AttributeDef ":" PatternDefBlockDef+ -> ADef {cons("PatternDefBlock")}
+    
+    %% Definitions grouped in a NameDefBlock
+    ChildDot AttributeDef ":=" Term     Where* -> NameDefBlockDef {cons("ADefTerm")}
+    ChildDot AttributeDef "="  Strategy        -> NameDefBlockDef {cons("ADefStrategy")}
+
+    %% Definitions grouped in a PatternDefBlock
+    Pattern OptDotChild "->" ResultTerm NoWhere* -> PatternDefBlockDef {cons("APDefTerm")}
+    Pattern OptDotChild "->" Term       Where+   -> PatternDefBlockDef {cons("APDefTerm")}
+
+    "where" Strategy -> Where {cons("Where")}
+    "with" Strategy  -> Where {cons("With")}
+    UNDEFINED        -> NoWhere
+
+  context-free syntax %% Misc.
+    
+    "rewrite" Pattern "->" Term Where* -> ADef {cons("AnonymousRewriteRule")}
+      
+    "id"   -> PreTerm {cons("IdTerm")}
+    "fail" -> Term {cons("FailTerm")}
+
+  context-free syntax
+
+    %%  Either reject suffices, but the first may be too specific/confusing
+    %%  "<" Strategy ">" AttributeKeyword -> Term {reject}
+    AttributeKeyword -> Var {reject}
+    
+    AttributeKeyword -> ImportModName {reject}
+  
+  lexical syntax
+    
+    "eq"         -> AttributeKeyword
+    "def"        -> AttributeKeyword
+    "attributes" -> AttributeKeyword
+    "decorators" -> AttributeKeyword
+    "decorator"  -> AttributeKeyword
+    "rewrite"    -> AttributeKeyword
+  
+  context-free restrictions
+  
+    "eq"
+    "def"
+    "root"
+    "rewrite"
+    "decorator"
+    "decorators"
+    "attributes" -/- [a-zA-Z0-9\'\-\_]
\ No newline at end of file

From R.B.Vermaas at tudelft.nl  Tue Nov 23 21:25:04 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 23 Nov 2010 20:25:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21412 - hydra/jobs
Message-ID: <201011232025.oANKP4Cf000926@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Tue Nov 23 20:25:03 2010
New Revision: 21412
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21412&sc=1

Log:
build editors first using ant

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Tue Nov 23 19:53:02 2010	(r21411)
+++ hydra/jobs/spoofax-imp.nix	Tue Nov 23 20:25:03 2010	(r21412)
@@ -136,13 +136,7 @@
 	                 ${spoofax}/org.spoofax.interpreter.core \
 	                 ${spoofax}/org.spoofax.interpreter.library.jsglr \
 	                 ${spoofax}/org.spoofax.jsglr \
-                     ${spoofaxImp}/org.strategoxt.imp.editors.aster \
-	                 ${spoofaxImp}/org.strategoxt.imp.editors.aterm \
-	                 ${spoofaxImp}/org.strategoxt.imp.editors.editorservice \
-	                 ${spoofaxImp}/org.strategoxt.imp.editors.pp \
-	                 ${spoofaxImp}/org.strategoxt.imp.editors.sdf \
-	                 ${spoofaxImp}/org.strategoxt.imp.editors.spoofax \
-	                 ${spoofaxImp}/org.strategoxt.imp.editors.stratego \
+                     ${spoofaxImp}/org.strategoxt.imp.editors.* \
 	                 ${spoofaxImp}/org.strategoxt.imp.feature \
 	                 ${spoofaxImp}/org.strategoxt.imp.generator \
 	                 ${spoofaxImp}/org.strategoxt.imp.metatooling \
@@ -174,13 +168,22 @@
 	      name = "spoofax-imp-r${toString spoofaxImp.rev}";
 	      inherit (jobs) src;
 	      
-	      buildInputs = [ pkgs.maven3 strcJava pkgs.pkgconfig pkgs.which pkgs.ecj pkgs.jdk];
+	      buildInputs = [ 
+	      	pkgs.maven3
+	      	strcJava 
+	      	pkgs.pkgconfig 
+	      	pkgs.which 
+	      	pkgs.ecj 
+	      	pkgs.jdk 
+	      	pkgs.ant
+	      ];
 	      mvnFlags = "-Dmaven.repo.local=/tmp/m3";
 	      buildPhase = ''
             export M2_REPO=/tmp/m3
             export STRATEGOXT=${pkgs.strategoPackages.strategoxt}
             export JAVA_FRONT=${pkgs.strategoPackages.javafront}
             export SDF=${pkgs.strategoPackages.sdf}
+            ulimit -s unlimited
 
             mvn org.sonatype.tycho:maven-tycho-plugin:generate-poms -Dversion=1.0.0-SNAPSHOT -DgroupId=spoofax -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags}
 
@@ -189,7 +192,24 @@
             header "Building org.strategoxt.imp.generator"
             make -C org.strategoxt.imp.generator all
             stopNest
-	        
+
+            for e in *.editors.* 
+            do
+                mkdir -p $e/utils/
+                cp -v org.strategoxt.imp.generator/lib/*.jar $e/utils/
+                cp -v org.strategoxt.strj/java/strategoxt.jar $e/utils/
+	            header "Pre-building $e"
+	            cd $e
+                export LOCALCLASSPATH="utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar"
+                export CLASSPATH="utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar"
+                export ANT_OPTS="-Xss8m -Xmx768m"
+                export NIX_ANT_OPTS="-Xss8m -Xmx768m"
+                 
+	            ant -f build.main.xml -Declipse.spoofaximp.jars=utils/ 
+	            cd ..
+	            stopNest
+            done
+            	        
             mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e
 	      '';
 	      

From R.B.Vermaas at tudelft.nl  Tue Nov 23 22:01:34 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 23 Nov 2010 21:01:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21413 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/META-INF
Message-ID: <201011232101.oANL1YeC001625@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Tue Nov 23 21:01:34 2010
New Revision: 21413
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21413&sc=1

Log:
add strj to deps

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/META-INF/MANIFEST.MF	Tue Nov 23 20:25:03 2010	(r21412)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/META-INF/MANIFEST.MF	Tue Nov 23 21:01:34 2010	(r21413)
@@ -15,6 +15,7 @@
   org.eclipse.ui.workbench.texteditor,
   org.strategoxt.imp.runtime,
   org.spoofax.aterm,
-  org.spoofax.jsglr
+  org.spoofax.jsglr,
+  org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.strategoxt.imp.editors.stratego

From R.B.Vermaas at tudelft.nl  Tue Nov 23 22:01:43 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 23 Nov 2010 21:01:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21414 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF
Message-ID: <201011232101.oANL1hJa001628@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Tue Nov 23 21:01:43 2010
New Revision: 21414
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21414&sc=1

Log:
add strj to deps

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF	Tue Nov 23 21:01:34 2010	(r21413)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF	Tue Nov 23 21:01:43 2010	(r21414)
@@ -15,7 +15,8 @@
   org.eclipse.ui.workbench.texteditor,
   org.strategoxt.imp.runtime,
   org.spoofax.aterm,
-  org.spoofax.jsglr
+  org.spoofax.jsglr,
+  org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.strategoxt.imp.editors.aterm
 Bundle-Vendor: Spoofax.org

From R.B.Vermaas at tudelft.nl  Tue Nov 23 22:01:49 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 23 Nov 2010 21:01:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21415 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.aster/META-INF
Message-ID: <201011232101.oANL1nIS001631@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Tue Nov 23 21:01:49 2010
New Revision: 21415
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21415&sc=1

Log:
add strj to deps

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aster/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aster/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aster/META-INF/MANIFEST.MF	Tue Nov 23 21:01:43 2010	(r21414)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aster/META-INF/MANIFEST.MF	Tue Nov 23 21:01:49 2010	(r21415)
@@ -15,7 +15,8 @@
   org.eclipse.ui.workbench.texteditor,
   org.strategoxt.imp.runtime,
   org.spoofax.aterm,
-  org.spoofax.jsglr
+  org.spoofax.jsglr,
+  org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.strategoxt.imp.editors.aster
 Bundle-Vendor: Spoofax.org

From R.B.Vermaas at tudelft.nl  Tue Nov 23 22:01:55 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 23 Nov 2010 21:01:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21416 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF
Message-ID: <201011232101.oANL1tYY001634@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Tue Nov 23 21:01:54 2010
New Revision: 21416
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21416&sc=1

Log:
add strj to deps

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF	Tue Nov 23 21:01:49 2010	(r21415)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF	Tue Nov 23 21:01:54 2010	(r21416)
@@ -15,7 +15,8 @@
   org.eclipse.ui.workbench.texteditor,
   org.strategoxt.imp.runtime,
   org.spoofax.aterm,
-  org.spoofax.jsglr
+  org.spoofax.jsglr,
+  org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.strategoxt.imp.editors.sdf
 Bundle-Vendor: Spoofax.org

From R.B.Vermaas at tudelft.nl  Tue Nov 23 22:24:51 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 23 Nov 2010 21:24:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21417 -
	spoofax-imp/trunk/org.strategoxt.imp.updatesite
Message-ID: <201011232124.oANLOpvp001895@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Tue Nov 23 21:24:51 2010
New Revision: 21417
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21417&sc=1

Log:
use qualifier for feature version

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Tue Nov 23 21:01:54 2010	(r21416)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Tue Nov 23 21:24:51 2010	(r21417)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.5.3.94.jar" id="org.strategoxt.imp" version="0.5.3.94">
+   <feature url="features/org.strategoxt.imp_0.5.3.qualifier.jar" id="org.strategoxt.imp" version="0.5.3.qualifier">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From R.B.Vermaas at tudelft.nl  Tue Nov 23 22:25:29 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 23 Nov 2010 21:25:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21418 -
	spoofax-imp/trunk/org.strategoxt.imp.feature
Message-ID: <201011232125.oANLPTPD001912@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Tue Nov 23 21:25:29 2010
New Revision: 21418
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21418&sc=1

Log:
use qualifier for feature version

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Tue Nov 23 21:24:51 2010	(r21417)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Tue Nov 23 21:25:29 2010	(r21418)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.5.3.94"
+      version="0.5.3.qualifier"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

From m.dejonge at tudelft.nl  Wed Nov 24 10:30:52 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 24 Nov 2010 09:30:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21419 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201011240930.oAO9UqOB010928@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Nov 24 09:30:51 2010
New Revision: 21419
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21419&sc=1

Log:
use JSGLRI instead of AbstractSGLR

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	Tue Nov 23 21:25:29 2010	(r21418)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	Wed Nov 24 09:30:51 2010	(r21419)
@@ -240,7 +240,7 @@
         } catch (Exception e) {
             e.printStackTrace();
         }
-        return "/*" + errorFragment + "*/";
+        return  errorFragment;
     }
     
     private void tryParsing(String fragment, boolean asLayout) throws IOException{

From karltk at strategoxt.org  Wed Nov 24 10:36:51 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 24 Nov 2010 09:36:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21420 -
	strategoxt-javascript-backend/trunk/src/javascript
Message-ID: <201011240936.oAO9apJq011004@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Wed Nov 24 09:36:51 2010
New Revision: 21420
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21420&sc=1

Log:
* Fixed a few problems with SRTS_one, and annotations. More to go.
 * Term library now represent lists, tuples, appls and annos as objects, not lists. Strings, reals and ints are still primitives.

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/javascript/terms.js

Modified: strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js	Wed Nov 24 09:30:51 2010	(r21419)
+++ strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js	Wed Nov 24 09:36:51 2010	(r21420)
@@ -6,7 +6,12 @@
 
 StrategoJS.StrategoLib.inc_0_0 = function(ctx, ct) { return ct + 1; }
 StrategoJS.StrategoLib.debug_0_0 = function(ctx, ct, fun) { print(ctx.factory.prettify(ct)); }
-StrategoJS.StrategoLib.debug_1_0 = function(ctx, ct, fun) { var t = fun(ctx, ct); print(ctx.factory.prettify(t)); }
+StrategoJS.StrategoLib.debug_1_0 = function(ctx, ct, fun) {
+	var t = fun(ctx, ct); 
+	print(ctx.factory.prettify(t)); 
+	print(ctx.factory.prettify(ct));
+	return ct;
+}
 StrategoJS.StrategoLib.try_1_0 = function(ctx, ct, fun) { var nt = fun(ctx, ct); return nt === null ? ct : nt; }
 StrategoJS.StrategoLib.filter_1_0 = function(ctx, ct, fun) {
 	var factory = ctx.factory;

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Wed Nov 24 09:30:51 2010	(r21419)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Wed Nov 24 09:36:51 2010	(r21420)
@@ -55,13 +55,27 @@
 	case factory.STRING:
 		return fun(ctx, term);
 	case factory.LIST:
+		var tmp = [];
+		var success = false;
 		while(!factory.isEmptyList(term)) {
-			var r = fun(ctx, factory.head(term));
-			if(r !== null)
-				return r;
-			term = factory.tail();
+			var ot = factory.head(term);
+			var nt = fun(ctx, ot);
+			term = factory.tail(term);
+			if(nt === null)
+				tmp.push(ot);
+			else {
+				tmp.push(nt);
+				success = true;
+				break;
+			}
 		}
-		return null;
+		if(!success)
+			return null;
+		r = term;
+		for(var i = tmp.length-1; i >= 0; i--) {
+			r = factory.makeListCons(tmp[i], r);
+		}
+		return r;
 	case factory.TUPLE:
 	case factory.APPL:
 		var l = factory.getSubtermCount();

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Wed Nov 24 09:30:51 2010	(r21419)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Wed Nov 24 09:36:51 2010	(r21420)
@@ -31,10 +31,13 @@
 	}
 
 	function doPrettify(term, builder, inlist) {
-		if(typeof(term.anno) !== 'undefined') {
-			doPrettify(term[1], builder, false);
+		if(typeof(term.annoType) !== 'undefined') {
+			if(inlist && term.termType == LIST) { // FIXME(karltk) how to print annotated list conses?
+				builder[builder.length-1] = '|';
+			}
+			doPrettify(term.term, builder, false);
 			builder.push("{");
-			doPrettify(term[2], builder, true);
+			doPrettify(term.annos, builder, true);
 			builder.push("}");
 			return builder;
 		}
@@ -50,10 +53,10 @@
 		case LIST:
 			if(!inlist)
 				builder.push("[");
-			if(term.length == 3) {
-				doPrettify(term[1], builder, false);
+			if(term.head !== null) {
+				doPrettify(term.head, builder, false);
 				builder.push(",");
-				doPrettify(term[2], builder, true);
+				doPrettify(term.tail, builder, true);
 			} else if (inlist) {
 				builder[builder.length-1] = "";
 			}
@@ -62,17 +65,17 @@
 			break;
 		case TUPLE:
 			builder.push("(");
-			for(var i = 1; i < term.length; i++) {
+			for(var i = 0; i < term.length; i++) {
 				doPrettify(term[i], builder, false);
 				builder.push(",");
 			}
 			builder[builder.length-1] = ")";
 			break;
 		case APPL:
-			builder.push(term[0]);
+			builder.push(term.getConstructor().name);
 			builder.push("(");
-			for(var i = 1; i < term.length; i++) {
-				doPrettify(term[i], builder, false);
+			for(var i = 0; i < term.args.length; i++) {
+				doPrettify(term.args[i], builder, false);
 				builder.push(",");
 			}
 			builder[builder.length-1] = ")";
@@ -344,21 +347,27 @@
 			},
 
 			makeEmptyList : function() {
-				var r = ["[]", []];
-				r.subtermCount = 0;
-				r.termType = LIST;
+				var r = {
+					subtermCount : 0,
+					termType : LIST,
+					head : null,
+					tail : null
+				};
 				return r;
 			},
 
-			makeListCons : function(car, cdr) {
-				var r = ["[]", car, cdr];
-				r.subtermCount = cdr.subtermCount + 1;
-				r.termType = LIST;
+			makeListCons : function(hd, tl) {
+				var r = {
+					subtermCount : tl.subtermCount + 1,
+					termType : LIST,
+					head : hd,
+					tail : tl
+				};
 				return r;
 			},
 
 			makeTuple : function(args) {
-				var r = ["()"];
+				var r = [];
 				for(var i = 0; i < args.length; i++) {
 					r.push(args[i]);
 				}
@@ -371,14 +380,19 @@
 			},
 
 			makeAppl : function(ctor, args) {
-				var r = [ctor.name];
 				StrategoJS.assert("ctor arity != argument count", ctor.arity == args.length);
-				r = r.concat(args);
-				r.termType = APPL;
-				r.subtermCount = args.length;
-				r.getSubterm = function(index) {
-					return r[index + 1];
-				}
+				var r = {
+					name : ctor.name, 
+					args : [].concat(args),
+					termType : APPL,
+					subtermCount : args.length,
+					getSubterm : function(index) {
+						return r[index + 1];
+					},
+					getConstructor : function() {
+						return { name : ctor.name, arity : args.length };
+					}
+				};
 				return r;
 			},
 
@@ -386,20 +400,24 @@
 				return doPrettify(term, [], false).join("");
 			},
 
-			isEmptyList : function(term) {
-				return typeof(term) === 'object' && term.length === 1 && term[0] == "[]"; 
+			isEmptyList : function(listTerm) {
+				StrategoJS.assert(listTerm.termType == LIST);
+				return listTerm.subtermCount == 0; 
 			},
 
 			getSubterm : function(term, idx) {
+				StrategoJS.assert(term.termType == APPL || term.termType == TUPLE);
 				return term.getSubterm(idx);
 			},
 
-			head : function(list) {
-				return list[1];
+			head : function(listTerm) {
+				StrategoJS.assert(listTerm.termType == LIST);
+				return listTerm.head;
 			},
 
 			tail : function(list) {
-				return list[2];
+				StrategoJS.assert(list.termType == LIST);
+				return list.tail;
 			},
 
 			getSubtermCount : function(term) {
@@ -407,7 +425,8 @@
 			},
 
 			getConstructor : function(appl) {
-				return { name : appl[0], arity : appl.length-1}
+				StrategoJS.assert(appl.termType == APPL);
+				return appl.getConstructor();
 			},
 
 			ctorEquals : function(ctor1, ctor2) {
@@ -415,9 +434,10 @@
 			},
 
 			getAnnotations : function(annoterm) {
-				if(typeof(annoterm.anno) === 'undefined')
+				if(annoterm.annoType === ANNO)
+					return annoterm.annos;
+				else
 					return factory.makeEmptyList();
-				return annoterm[2];
 			},
 
 			match : undefined,
@@ -429,7 +449,7 @@
 			},
 
 			checkListTail : function(term) {
-				if(!(typeof(term) === "object" && term.length > 0 && term[0] == "[]"))
+				if(term.termType === LIST)
 					throw "invalid list tail, " + termType(term);
 				return term;
 			},
@@ -447,18 +467,25 @@
 				return parseFromStream(new PushbackStringIterator(text));
 			},
 
-			annotateTerm : function(term, anno) {
-				var r = ["{}", term, anno];
-				r.anno = true;
+			annotateTerm : function(term, annos) {
+				var r = {
+					annoType : ANNO,
+					annos : annos,
+					term : term
+				};
+
 				switch(factory.termType(term)) {
+				case LIST:
+					r.termType = LIST;
+					r.tail = term.tail;
+					r.head = term.head;
+					break;
 				case ANNO:
 				case TUPLE:
-				case LIST:
 				case APPL:
 					r.termType = term.termType;
 					r.getSubtermCount = term.getSubtermCount;
 					r.getSubterm = term.getSubterm;
-					r.isEmptyList = term.isEmptyList;
 					break;
 				case STRING: 
 					r.termType = STRING;

From karltk at strategoxt.org  Wed Nov 24 17:52:32 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 24 Nov 2010 16:52:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21421 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests/basic tests/testlib
Message-ID: <201011241652.oAOGqWUU018571@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Wed Nov 24 16:52:32 2010
New Revision: 21421
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21421&sc=1

Log:
* More changes to the term library; lists -> objects rewrite. 
 * Some new SSL primities for I/O.
 * Fixes to term (de)construction.

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/src/javascript/terms.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/tests/basic/   (props changed)
   strategoxt-javascript-backend/trunk/tests/basic/annos_1.str
   strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js	Wed Nov 24 09:36:51 2010	(r21420)
+++ strategoxt-javascript-backend/trunk/src/javascript/emu-stratego-lib.js	Wed Nov 24 16:52:32 2010	(r21421)
@@ -2,26 +2,4 @@
  * @author Karl Trygve Kalleberg
  */
 
-StrategoJS.StrategoLib = {}
-
-StrategoJS.StrategoLib.inc_0_0 = function(ctx, ct) { return ct + 1; }
-StrategoJS.StrategoLib.debug_0_0 = function(ctx, ct, fun) { print(ctx.factory.prettify(ct)); }
-StrategoJS.StrategoLib.debug_1_0 = function(ctx, ct, fun) {
-	var t = fun(ctx, ct); 
-	print(ctx.factory.prettify(t)); 
-	print(ctx.factory.prettify(ct));
-	return ct;
-}
-StrategoJS.StrategoLib.try_1_0 = function(ctx, ct, fun) { var nt = fun(ctx, ct); return nt === null ? ct : nt; }
-StrategoJS.StrategoLib.filter_1_0 = function(ctx, ct, fun) {
-	var factory = ctx.factory;
-	var r = [];
-	var list = ct;
-	while(!factory.isEmptyList(list)) {
-		var x = fun(factory.head(list));
-		if(x !== null)
-			r.push(x);
-		list = factory.tail(list);
-	}
-	return factory.makeList(r);
-}
\ No newline at end of file
+StrategoJS.StrategoLib = {}
\ No newline at end of file

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Wed Nov 24 09:36:51 2010	(r21420)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Wed Nov 24 16:52:32 2010	(r21421)
@@ -99,15 +99,19 @@
 	case factory.STRING: 
 		return fun(ctx, term);
 	case factory.LIST: 
-		var r = factory.makeEmptyList();
+		var tmp = [];
 		while(!factory.isEmptyList(term)) {
-			var x = fun(ctx, factory.head(term));
-			if(x === null)
+			var nt = fun(ctx, factory.head(term));
+			if(nt === null)
 				return null;
-			r = factory.makeList(x, r);
-			term = factory.tail();
+			tmp.push(nt);
+			term = factory.tail(term);
 		}
-		return null;
+		r = term;
+		for(var i = tmp.length-1; i >= 0; i--) {
+			r = factory.makeListCons(tmp[i], r);
+		}
+		return r;
 	case factory.TUPLE:
 	case factory.APPL:
 		var l = factory.getSubtermCount();
@@ -133,15 +137,25 @@
 	case factory.STRING: 
 		return fun(ctx, term);
 	case factory.LIST: 
-		var r = factory.makeEmptyList();
+		var tmp = [];
+		var success = false;
 		while(!factory.isEmptyList(term)) {
-			var x = fun(ctx, factory.head(term));
-			if(x !== null)
-				r = factory.makeList(x, r);
-			term = factory.tail();
+			var ot = factory.head(term);
+			var nt = fun(ctx, ot);
+			term = factory.tail(term);
+			if(nt === null)
+				tmp.push(ot);
+			else {
+				tmp.push(nt);
+				success = true;
+			}
 		}
-		if(factory.isEmptyList(r))
+		if(!success)
 			return null;
+		r = term;
+		for(var i = tmp.length-1; i >= 0; i--) {
+			r = factory.makeListCons(tmp[i], r);
+		}
 		return r;
 	case factory.TUPLE:
 	case factory.APPL:
@@ -158,4 +172,16 @@
 	default:
 		throw new "invalid term type ";
 	}
-}
\ No newline at end of file
+}
+
+StrategoJS.SRTS._checkListAnnos = function(factory, term) {
+	if(StrategoJS.Term.termType(term) !== StrategoJS.Term.LIST)
+		return makeList([term]);
+	return term;
+}
+
+StrategoJS.SRTS._checkListTail = function(term) {
+	if(StrategoJS.Term.termType(term) !== StrategoJS.Term.LIST)
+		throw "invalid list tail, " + termType(term);
+	return term;
+},

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Wed Nov 24 09:36:51 2010	(r21420)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Wed Nov 24 16:52:32 2010	(r21421)
@@ -2,29 +2,34 @@
  * @author Karl Trygve Kalleberg
  */
 
-StrategoJS.SSL = {}
+StrategoJS.SSL = {
+		_stdin  : StrategoJS.Term.makeCtor("stdin", 0),
+		_stdout : StrategoJS.Term.makeCtor("stdout", 0),
+		_stderr : StrategoJS.Term.makeCtor("stderr", 0)
+};
 
-StrategoJS.SSL.SSL_fail = function(term) {
+
+StrategoJS.SSL.SSL_fail = function(ctx, term) {
 	return null;
 }
 
-StrategoJS.SSL.SSL_id = function(term) {
+StrategoJS.SSL.SSL_id = function(ctx, term) {
 	return term;
 }
 
-StrategoJS.SSL.SSL_stdin_stream = function(term) {
-	return 1;
+StrategoJS.SSL.SSL_stdin_stream = function(ctx, term) {
+	return ctx.factory.makeAppl(StrategoJS.SSL._stdin, []);
 }
 
-StrategoJS.SSL.SSL_stdout_stream = function(term) {
-	return 2;
+StrategoJS.SSL.SSL_stdout_stream = function(ctx, term) {
+	return ctx.factory.makeAppl(StrategoJS.SSL._stdout, []);
 }
 
-StrategoJS.SSL.SSL_stderr_stream = function(term) {
-	return 3;
+StrategoJS.SSL.SSL_stderr_stream = function(ctx, term) {
+	return ctx.factory.makeAppl(StrategoJS.SSL._stderr, []);
 }
 
-StrategoJS.SSL.SSL_mkterm = function(term, ctorName, args) {
+StrategoJS.SSL.SSL_mkterm = function(ctx, term, ctorName, args) {
 	// FIXME find a factory
 	
 	if(ctorName === "[]") {
@@ -33,3 +38,41 @@
 	
 	throw "not implemented;"
 }
+
+StrategoJS.SSL.SSL_addi = function(ctx, term, lhs, rhs) {
+	return lhs + rhs;
+}
+
+StrategoJS.SSL.SSL_write_term_to_stream_text = function(ctx, term, stream, outputTerm) {
+	var ctor = ctx.factory.getConstructor(stream);
+	if(ctx.factory.ctorEquals(ctor, StrategoJS.SSL._stdout) || ctx.factory.ctorEquals(ctor, StrategoJS.SSL._stderr))
+		print(ctx.factory.prettify(outputTerm));
+	else
+		throw "SSL_write_term_to_stream_text not fully implemented; cannot write to arbitrary streams";
+	return term;
+}
+
+StrategoJS.SSL.SSL_is_string = function(ctx, term, arg) {
+	if(ctx.factory.getTermType(arg) === ctx.factory.STRING)
+		return arg;
+	return null;
+}
+
+StrategoJS.SSL.SSL_fputs = function(ctx, term, string, stream) {
+	var ctor = ctx.factory.getConstructor(stream);
+	if(ctx.factory.ctorEquals(StrategoJS.SSL._stdout) || ctx.factory.ctorEquals(StrategoJS.SSL._stderr))
+		print(string);
+	else
+		throw "SSL_fputs not fully implemented; cannot write to arbitrary streams";
+}
+
+StrategoJS.SSL.SSL_fputc = function(ctx, term, ch, stream) {
+	var ctor = ctx.factory.getConstructor(stream);
+	if(ctx.factory.ctorEquals(ctor, StrategoJS.SSL._stdout) || ctx.factory.ctorEquals(ctor, StrategoJS.SSL._stderr))
+		print(String.fromCharCode(ch));
+	else
+		throw "SSL_fputc not fully implemented; cannot write to arbitrary streams";
+	return term;
+}
+
+

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Wed Nov 24 09:36:51 2010	(r21420)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Wed Nov 24 16:52:32 2010	(r21421)
@@ -30,14 +30,12 @@
 		return INVALID;
 	}
 
-	function doPrettify(term, builder, inlist) {
+	function doPrettify(term, builder) {
 		if(typeof(term.annoType) !== 'undefined') {
-			if(inlist && term.termType == LIST) { // FIXME(karltk) how to print annotated list conses?
-				builder[builder.length-1] = '|';
-			}
-			doPrettify(term.term, builder, false);
+			// FIXME(karltk) how to print annotated list conses?
+			doPrettify(term.term, builder);
 			builder.push("{");
-			doPrettify(term.annos, builder, true);
+			listPrettify(term.annos, builder);
 			builder.push("}");
 			return builder;
 		}
@@ -51,41 +49,74 @@
 			builder.push("\"" + term + "\"");
 			break;
 		case LIST:
-			if(!inlist)
-				builder.push("[");
-			if(term.head !== null) {
-				doPrettify(term.head, builder, false);
-				builder.push(",");
-				doPrettify(term.tail, builder, true);
-			} else if (inlist) {
-				builder[builder.length-1] = "";
-			}
-			if(!inlist)
-				builder.push("]");
+			listPrettify(term, builder);
 			break;
 		case TUPLE:
-			builder.push("(");
-			for(var i = 0; i < term.length; i++) {
-				doPrettify(term[i], builder, false);
-				builder.push(",");
-			}
-			builder[builder.length-1] = ")";
+			tuplePrettify(term, builder);
 			break;
 		case APPL:
-			builder.push(term.getConstructor().name);
-			builder.push("(");
-			for(var i = 0; i < term.args.length; i++) {
-				doPrettify(term.args[i], builder, false);
-				builder.push(",");
-			}
-			builder[builder.length-1] = ")";
+			applPrettify(term, builder);
 			break;
 		default:
-			builder.push("<invalid subterm>");
+			reportInvalidSubterm(term, builder);
 		}
 		return builder;
 	}
 
+	var reportInvalidSubterm = function(term, builder) {
+		var s = "";
+		if(term === undefined) {
+			s += "undefined"
+		} else if(typeof(term) === "object") {
+			for(var x in term) {
+				s += x;
+				s += "|";
+			}
+		} else if(typeof(term) == 'boolean'){
+			s += "boolean";
+		} else {
+			s += "weird non-object";
+		}
+		builder.push("<invalid subterm:" + s + ">");
+	} 
+	
+	var applPrettify = function(applTerm, builder) {
+		builder.push(applTerm.getConstructor().name);
+		builder.push("(");
+		for(var i = 0; i < applTerm.args.length; i++) {
+			doPrettify(applTerm.args[i], builder);
+			if(i < applTerm.args.length - 1)
+				builder.push(",");
+		}
+		builder.push(")");
+	}
+
+	var tuplePrettify = function(tupleTerm, builder) {
+		builder.push("(");
+		for(var i = 0; i < tupleTerm.length; i++) {
+			doPrettify(tupleTerm[i], builder, false);
+			if(i < tupleTerm.length-1)
+				builder.push(",");
+		}
+		builder.push(")");
+	}
+	
+	var doListPrettify = function(listTerm, builder) {
+		if(listTerm.head === null)
+			return;
+		doPrettify(listTerm.head, builder);
+		var tail = listTerm.tail;
+		if(tail.head !== null)
+			builder.push(",");
+		doListPrettify(tail, builder);
+	}
+	
+	var listPrettify = function(list, builder) {
+		builder.push("[");
+		doListPrettify(list, builder);
+		builder.push("]");
+	}
+
 	var PushbackStringIterator = function(text) {
 		this.offset = 0;
 		this.text = text;
@@ -374,7 +405,7 @@
 				r.termType = TUPLE;
 				r.subtermCount = args.length;
 				r.getSubterm = function(index) {
-					return r[index + 1];
+					return r[index];
 				}
 				return r;
 			},
@@ -387,7 +418,7 @@
 					termType : APPL,
 					subtermCount : args.length,
 					getSubterm : function(index) {
-						return r[index + 1];
+						return r.args[index];
 					},
 					getConstructor : function() {
 						return { name : ctor.name, arity : args.length };
@@ -405,6 +436,10 @@
 				return listTerm.subtermCount == 0; 
 			},
 
+			getTermType : function(term) {
+				return termType(term);
+			},
+			
 			getSubterm : function(term, idx) {
 				StrategoJS.assert(term.termType == APPL || term.termType == TUPLE);
 				return term.getSubterm(idx);
@@ -442,18 +477,6 @@
 
 			match : undefined,
 
-			checkListAnnos : function(factory, term) {
-				if(termType(term) != LIST)
-					return makeList([term]);
-				return term;
-			},
-
-			checkListTail : function(term) {
-				if(term.termType === LIST)
-					throw "invalid list tail, " + termType(term);
-				return term;
-			},
-
 			termType : termType,
 
 			INT : INT,
@@ -484,7 +507,7 @@
 				case TUPLE:
 				case APPL:
 					r.termType = term.termType;
-					r.getSubtermCount = term.getSubtermCount;
+					r.subtermCount = term.subtermCount;
 					r.getSubterm = term.getSubterm;
 					break;
 				case STRING: 

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Wed Nov 24 09:36:51 2010	(r21420)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Wed Nov 24 16:52:32 2010	(r21421)
@@ -155,7 +155,7 @@
   	SDefT(x, s*, t*, s) ->
   	$[
      function(ctx, term [param*]) {
-     	print("[x]");
+     	print("[x] : " + ctx.factory.prettify(term));
        [bstm-init*]
        if(TRACES_ENABLED) ctx.push("[x]");
        [feil]: {

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Wed Nov 24 09:36:51 2010	(r21420)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Wed Nov 24 16:52:32 2010	(r21421)
@@ -50,7 +50,7 @@
       e := <js-VarToReadRef> x
 
   js-ConstructAnnoVar(|f) :
-    Anno(Var(x), pt2) -> $[ factory.annotateTerm([e], factory.checkListAnnos(factory, [<js-construct-term(|f)> pt2])) ]
+    Anno(Var(x), pt2) -> $[ factory.annotateTerm([e], StrategoJS.SRTS._checkListAnnos(factory, [<js-construct-term(|f)> pt2])) ]
   where
       <js-ConstructVar> Var(x) => e
 
@@ -60,7 +60,7 @@
       <not(?Var(_))> pt1
 
   js-ConstructTerm(|f) :
-    Anno(pt1, pt2) -> $[ factory.annotateTerm([<js-construct-term(|f)> pt1], factory.checkListAnnos(factory,[<js-construct-term(|f)> pt2])) ]
+    Anno(pt1, pt2) -> $[ factory.annotateTerm([<js-construct-term(|f)> pt1], StrategoJS.SRTS._checkListAnnos(factory,[<js-construct-term(|f)> pt2])) ]
   where 
       <not(?Op("Nil", []))> pt2
     ; <not(?Var(_))> pt1
@@ -115,7 +115,7 @@
       js-CheckBuild :+=
         ( $[ var [x]; ]
         , $[
-            [x] = factory.checkListTail([e]);
+            [x] = StrategoJS.SRTS._checkListTail([e]);
             if ([x] == null) break [feil];
           ]
         )

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Wed Nov 24 09:36:51 2010	(r21420)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Wed Nov 24 16:52:32 2010	(r21421)
@@ -136,7 +136,6 @@
   translate-Match(|s,feil) :
     Match(op at Op(c, ts), ReadFrom(e)) ->
     $[
-      // (this pattern is matched and optimized in java-postprocess)
       if (factory.termType([e]) != factory.APPL || [e_nomatch])
         break [feil];
       [match-args]

Modified: strategoxt-javascript-backend/trunk/tests/basic/annos_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/basic/annos_1.str	Wed Nov 24 09:36:51 2010	(r21420)
+++ strategoxt-javascript-backend/trunk/tests/basic/annos_1.str	Wed Nov 24 16:52:32 2010	(r21421)
@@ -1,6 +1,6 @@
 module annos_1
 
-imports libstratego-lib
+imports emu-libstratego-lib
 
 strategies
 

Modified: strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str	Wed Nov 24 09:36:51 2010	(r21420)
+++ strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str	Wed Nov 24 16:52:32 2010	(r21421)
@@ -34,7 +34,7 @@
   	Stream    : ImplDep -> Stream
     stderr    : FileLoc
     stdout    : FileLoc
-    stdin    : FileLoc
+    stdin     : FileLoc
 
 strategies 	 
 
@@ -84,3 +84,11 @@
   stderr-stream = prim("SSL_stderr_stream"); !Stream(<id>)
 
   is-string = ?x; prim("SSL_is_string", x)
+
+  filter(s) = [] + [s | filter(s)] <+ ?[_ | <filter(s)> ]
+  
+  try(s) = s <+ id
+  
+  inc = <add>  (<id>, 1)
+  
+  add  = ?(x,y); (prim("SSL_addi",x,y) <+ prim("SSL_addr",x,y))

From karltk at strategoxt.org  Wed Nov 24 18:41:28 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Wed, 24 Nov 2010 17:41:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21422 - in
	strategoxt-javascript-backend/trunk: scripts src/javascript
	tests tests/basic
Message-ID: <201011241741.oAOHfSIl019216@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Wed Nov 24 17:41:27 2010
New Revision: 21422
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21422&sc=1

Log:
* Started on deep term equality support in factory.
 * Added convenience script to stop make exec if a test fails to rewrite

Added:
   strategoxt-javascript-backend/trunk/scripts/no-fail-check.sh   (contents, props changed)
Modified:
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/src/javascript/terms.js
   strategoxt-javascript-backend/trunk/tests/Makefile
   strategoxt-javascript-backend/trunk/tests/basic/annos_2.str

Added: strategoxt-javascript-backend/trunk/scripts/no-fail-check.sh
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-javascript-backend/trunk/scripts/no-fail-check.sh	Wed Nov 24 17:41:27 2010	(r21422)
@@ -0,0 +1,6 @@
+#! /bin/bash
+
+f="/tmp/strjs.exec.trace"
+tee $f
+x=$(tail -n 1 $f | grep "failed")
+[ "$x" == "" ]

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Wed Nov 24 16:52:32 2010	(r21421)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Wed Nov 24 17:41:27 2010	(r21422)
@@ -60,7 +60,7 @@
 
 StrategoJS.SSL.SSL_fputs = function(ctx, term, string, stream) {
 	var ctor = ctx.factory.getConstructor(stream);
-	if(ctx.factory.ctorEquals(StrategoJS.SSL._stdout) || ctx.factory.ctorEquals(StrategoJS.SSL._stderr))
+	if(ctx.factory.ctorEquals(ctor, StrategoJS.SSL._stdout) || ctx.factory.ctorEquals(ctor, StrategoJS.SSL._stderr))
 		print(string);
 	else
 		throw "SSL_fputs not fully implemented; cannot write to arbitrary streams";

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Wed Nov 24 16:52:32 2010	(r21421)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Wed Nov 24 17:41:27 2010	(r21422)
@@ -30,6 +30,27 @@
 		return INVALID;
 	}
 
+	function doEquals(lhs, rhs) {
+		var lt = typeof(lhs);
+		var rt = typeof(rhs);
+		if(lt !== rt) {
+			if(lhs.annoType || rhs.annoType)
+				return doAnnoEquals(lhs, rhs);
+			return false;
+		}
+		if(lt === 'number')
+			return lhs === rhs;
+		if(lt === 'string')
+			return lhs === rhs;
+		return lhs.equals(rhs);
+	}
+	
+	function doAnnoEquals(lhs, rhs) {
+		var l = lhs.annoType ? lhs : rhs;
+		var r = lhs.annoType ? rhs : lhs;
+		return l.equals(r);
+	}
+	
 	function doPrettify(term, builder) {
 		if(typeof(term.annoType) !== 'undefined') {
 			// FIXME(karltk) how to print annotated list conses?
@@ -382,7 +403,10 @@
 					subtermCount : 0,
 					termType : LIST,
 					head : null,
-					tail : null
+					tail : null,
+					equals : function(other) {
+						return other.termType == LIST && other.head == null;
+					}
 				};
 				return r;
 			},
@@ -392,7 +416,11 @@
 					subtermCount : tl.subtermCount + 1,
 					termType : LIST,
 					head : hd,
-					tail : tl
+					tail : tl,
+					equals : function(other) {
+						return other.termType == LIST && doEquals(hd, other.hd) && tl.equals(other.tail);
+					}
+
 				};
 				return r;
 			},
@@ -407,6 +435,14 @@
 				r.getSubterm = function(index) {
 					return r[index];
 				}
+				r.equals = function(other) {
+					if(other.termType !== TUPLE || other.subtermCount != r.subtermCount)
+						return false;
+					for(var i = 0; i < args.length; i++)
+						if(!doEquals(r[i], other.getSubterm(i)))
+							return false;
+					return true;
+				}
 				return r;
 			},
 
@@ -422,6 +458,18 @@
 					},
 					getConstructor : function() {
 						return { name : ctor.name, arity : args.length };
+					}, 
+					equals : function(other) {
+						if(other.termType !== APPL)
+							return false;
+						var otherCtor = other.getConstructor();
+						if(ctor.name !== otherCtor.name || ctor.arity !== r.subtermCount)
+							return false;
+						for(var i = 0; i < r.subtermCount; i++) {
+							if(!doEquals(r.args[i], other.getSubterm(i)))
+								return false;
+						}
+						return true;
 					}
 				};
 				return r;
@@ -475,7 +523,7 @@
 					return factory.makeEmptyList();
 			},
 
-			match : undefined,
+			match : doEquals,
 
 			termType : termType,
 
@@ -502,22 +550,42 @@
 					r.termType = LIST;
 					r.tail = term.tail;
 					r.head = term.head;
+					r.equals = term.equals;
 					break;
 				case ANNO:
 				case TUPLE:
 				case APPL:
 					r.termType = term.termType;
+					r.equals = term.equals;
 					r.subtermCount = term.subtermCount;
 					r.getSubterm = term.getSubterm;
 					break;
 				case STRING: 
 					r.termType = STRING;
+					r.equals = function(other) {
+						if(other.annoType)
+							return term === other.term;
+						else
+							return term === other;
+					}
 					break;
 				case REAL:
 					r.termType = REAL;
+					r.equals = function(other) {
+						if(other.annoType)
+							return term === other.term;
+						else
+							return term === other;
+					}
 					break;
 				case INT:
 					r.termType = INT;
+					r.equals = function(other) {
+						if(other.annoType)
+							return term === other.term;
+						else
+							return term === other;
+					}
 					break; 
 				};
 				return r;

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Wed Nov 24 16:52:32 2010	(r21421)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Wed Nov 24 17:41:27 2010	(r21422)
@@ -16,7 +16,7 @@
 	../trans/s2js -i $< | ../scripts/quote-term-imports.sh | ../scripts/add-cli-wrapper.sh > $@
 
 %.run : %.js
-	java -jar ../lib/js.jar $< && touch $@
+	java -jar ../lib/js.jar $< | ../scripts/no-fail-check.sh && touch $@
 
 clean:
 	rm -f $(CTREEFILES) $(JSFILES) $(TESTRUNS)

Modified: strategoxt-javascript-backend/trunk/tests/basic/annos_2.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/basic/annos_2.str	Wed Nov 24 16:52:32 2010	(r21421)
+++ strategoxt-javascript-backend/trunk/tests/basic/annos_2.str	Wed Nov 24 17:41:27 2010	(r21422)
@@ -1,7 +1,7 @@
 module annos_2
 
 imports
-  libstratego-lib
+  emu-libstratego-lib
 
 signature constructors
   Var : Term -> Term

From r.t.lindeman at student.tudelft.nl  Thu Nov 25 13:40:39 2010
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Thu, 25 Nov 2010 12:40:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21423 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events
	org.strategoxt.imp.debug.stratego.core/src/org/strategoxt...
Message-ID: <201011251240.oAPCeduX003168@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Thu Nov 25 12:40:39 2010
New Revision: 21423
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21423&sc=1

Log:
Fixed line breakpoint handling with multiple statements on a single line

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/AbstractDSMTest.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/BreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleEnterBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleExitBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyEnterBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyExitBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyStepBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/LocationInfo.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/localvar.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestDynamic.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -19,7 +19,7 @@
 	protected BreakPoint createBreakPoint() {
 		String name = this.getName(); // the name of the rule
 		LocationInfo locationInfo = getLocationInfo();
-		RuleEnterBreakPoint b = new RuleEnterBreakPoint(name, locationInfo.getStart_line_num());
+		RuleEnterBreakPoint b = new RuleEnterBreakPoint(name, locationInfo.getStart_line_num(), locationInfo.getStart_token_pos());
 		return b;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -17,7 +17,7 @@
 	protected BreakPoint createBreakPoint() {
 		String name = this.getName(); // the name of the rule
 		LocationInfo locationInfo = getLocationInfo();
-		RuleExitBreakPoint b = new RuleExitBreakPoint(name, locationInfo.getStart_line_num());
+		RuleExitBreakPoint b = new RuleExitBreakPoint(name, locationInfo.getStart_line_num(), locationInfo.getStart_token_pos());
 		return b;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -19,7 +19,7 @@
 	protected BreakPoint createBreakPoint() {
 		String name = this.getName(); // the name of the strategy
 		LocationInfo locationInfo = getLocationInfo();
-		StrategyEnterBreakPoint b = new StrategyEnterBreakPoint(name, locationInfo.getStart_line_num());
+		StrategyEnterBreakPoint b = new StrategyEnterBreakPoint(name, locationInfo.getStart_line_num(), locationInfo.getStart_token_pos());
 		return b;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -22,7 +22,7 @@
 	protected BreakPoint createBreakPoint() {
 		String name = this.getName(); // the name of the strategy
 		LocationInfo locationInfo = getLocationInfo();
-		StrategyExitBreakPoint b = new StrategyExitBreakPoint(name, locationInfo.getStart_line_num());
+		StrategyExitBreakPoint b = new StrategyExitBreakPoint(name, locationInfo.getStart_line_num(), locationInfo.getStart_token_pos());
 		return b;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -17,7 +17,7 @@
 	protected BreakPoint createBreakPoint() {
 		String name = this.getName(); // the name of the strategy
 		LocationInfo locationInfo = getLocationInfo();
-		StrategyStepBreakPoint b = new StrategyStepBreakPoint(name, locationInfo.getStart_line_num());
+		StrategyStepBreakPoint b = new StrategyStepBreakPoint(name, locationInfo.getStart_line_num(), locationInfo.getStart_token_pos());
 		return b;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/BreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/BreakPoint.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/BreakPoint.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -4,10 +4,19 @@
 
 	private String name;
 	private int lineNumber;
+	private int startTokenPosition;
 	
-	public BreakPoint(String name, int lineNumber) {
+	/**
+	 * Represents a BreakPoint at the given linenumber (1-based) and given startTokenPosition (1-based).
+	 * The startTokenPosition should be used when multiple statements can be placed at a single line and the debugger is able to distinguish between them.
+	 * @param name
+	 * @param lineNumber
+	 * @param startTokenPosition
+	 */
+	public BreakPoint(String name, int lineNumber, int startTokenPosition) {
 		this.name = name;
 		this.lineNumber = lineNumber;
+		this.startTokenPosition = startTokenPosition;
 	}
 
 	public String getName() {
@@ -25,4 +34,12 @@
 	public void setLineNumber(int lineNumber) {
 		this.lineNumber = lineNumber;
 	}
+
+	public int getStartTokenPosition() {
+		return startTokenPosition;
+	}
+
+	public void setStartTokenPosition(int startTokenPosition) {
+		this.startTokenPosition = startTokenPosition;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleEnterBreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleEnterBreakPoint.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleEnterBreakPoint.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -2,8 +2,8 @@
 
 public class RuleEnterBreakPoint extends BreakPoint {
 	
-	public RuleEnterBreakPoint(String name, int lineNumber) {
-		super(name, lineNumber);
+	public RuleEnterBreakPoint(String name, int lineNumber, int startTokenPosition) {
+		super(name, lineNumber, startTokenPosition);
 	}
 
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleExitBreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleExitBreakPoint.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleExitBreakPoint.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -1,9 +1,9 @@
 package org.strategoxt.debug.core.eventspec;
 
 public class RuleExitBreakPoint extends BreakPoint {
-
-	public RuleExitBreakPoint(String name, int lineNumber) {
-		super(name, lineNumber);
+	
+	public RuleExitBreakPoint(String name, int lineNumber, int startTokenPosition) {
+		super(name, lineNumber, startTokenPosition);
 	}
 
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyEnterBreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyEnterBreakPoint.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyEnterBreakPoint.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -2,8 +2,8 @@
 
 public class StrategyEnterBreakPoint extends BreakPoint {
 	
-	public StrategyEnterBreakPoint(String name, int lineNumber) {
-		super(name, lineNumber);
+	public StrategyEnterBreakPoint(String name, int lineNumber, int startTokenPosition) {
+		super(name, lineNumber, startTokenPosition);
 	}
 
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyExitBreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyExitBreakPoint.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyExitBreakPoint.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -1,9 +1,9 @@
 package org.strategoxt.debug.core.eventspec;
 
 public class StrategyExitBreakPoint extends BreakPoint {
-
-	public StrategyExitBreakPoint(String name, int lineNumber) {
-		super(name, lineNumber);
+	
+	public StrategyExitBreakPoint(String name, int lineNumber, int startTokenPosition) {
+		super(name, lineNumber, startTokenPosition);
 	}
 
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyStepBreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyStepBreakPoint.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyStepBreakPoint.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -3,8 +3,8 @@
 
 public class StrategyStepBreakPoint extends BreakPoint {
 
-	public StrategyStepBreakPoint(String name, int lineNumber) {
-		super(name, lineNumber);
+	public StrategyStepBreakPoint(String name, int lineNumber, int startTokenPosition) {
+		super(name, lineNumber, startTokenPosition);
 	}
 
 	@Override
@@ -12,6 +12,7 @@
 		final int prime = 47;
 		int result = 1;
 		result = prime * result + getLineNumber();
+		result = prime * result + getStartTokenPosition();
 		result = prime * result
 				+ ((getName() == null) ? 0 : getName().hashCode());
 		return result;
@@ -38,6 +39,8 @@
 		}
 		if (getLineNumber() != other.getLineNumber())
 			return false;
+		if (getStartTokenPosition() != other.getStartTokenPosition())
+			return false;
 		return true;
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/LocationInfo.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/LocationInfo.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/model/LocationInfo.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -46,6 +46,10 @@
 		
 	}
 
+	/**
+	 * Gets the 1-based start linenumber of the selection.
+	 * @return
+	 */
 	public int getStart_line_num() {
 		return start_line_num;
 	}
@@ -54,6 +58,12 @@
 		start_line_num = startLineNum;
 	}
 
+	/**
+	 * Gets the 1-based start token position of the selection.
+	 * The position is relative to the start linenumber.
+	 * The character at position start_token_pos is included in the selectio.
+	 * @return
+	 */
 	public int getStart_token_pos() {
 		return start_token_pos;
 	}
@@ -62,6 +72,10 @@
 		start_token_pos = startTokenPos;
 	}
 
+	/**
+	 * Gets the 1-based end linenumber of the selection.
+	 * @return
+	 */
 	public int getEnd_line_num() {
 		return end_line_num;
 	}
@@ -70,6 +84,12 @@
 		end_line_num = endLineNum;
 	}
 
+	/**
+	 * Gets the 1-based end token position
+	 * The position is relative to the end linenumber.
+	 * The charachter at position (end_token_pos-1) is the last token in the selection.
+	 * @return
+	 */
 	public int getEnd_token_pos() {
 		return end_token_pos;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/localvar.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/localvar.str	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/dynamic/localvar.str	Thu Nov 25 12:40:39 2010	(r21423)
@@ -84,12 +84,16 @@
 		c* -> comment
 		where <debug(!"find-comment-by-name ")> name
 		where c := <get-current-name>; <debug(!"get-current-name ")> c
+		// add dynamic rule, will this one also show up in find-comment-match? Yes! but only if we hit that strategy again
+		where rules (
+			baz-rule : input -> "output"
+		)
 		with 
 		c-filtered* := <filter(?Comment(name, _))> c*
 		; comment := (<debug(!"stuff:"); first> c-filtered*) //  <+ !Comment(name, "created!!")
 		//; comment := <first> c-filtered*
-		; dr-rule-sets-hashtable
-		; debug(!"dr-rule-sets-hashtable: ")
+		//; dr-rule-sets-hashtable
+		//; debug(!"dr-rule-sets-hashtable: ")
 
 
 	old-first : c-list* -> out

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/AbstractDSMTest.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/AbstractDSMTest.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -0,0 +1,29 @@
+package org.strategoxt.debug.core.control;
+
+import java.util.List;
+
+import junit.framework.Assert;
+
+import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;
+import org.strategoxt.debug.core.util.table.EventEntry;
+import org.strategoxt.debug.core.util.table.EventTable;
+
+public abstract class AbstractDSMTest {
+
+	
+	protected void addBP(DebugSessionManager dsm, int lineNumber, int startTokenPosition, String eventType)
+	{
+		EventTable eventTable = dsm.getEventSpecManager().getEventTable();
+		List<EventEntry> entries = eventTable.getEventEntries(lineNumber, startTokenPosition, eventType);
+		Assert.assertEquals(1, entries.size());
+		
+		// a breakpoint may be placed at any place in the LocationInfo that is defined by a statement
+		// lineNumber and startTokenPosition should lie in the selection defined by LocationInfo
+		// use these to lookup the actual LocationInfo used by the breakpoint
+		EventEntry match = entries.get(0);
+		BreakPoint bp = null;
+		bp = new StrategyStepBreakPoint(match.getStrategyName(), match.getLocationInfo().getStart_line_num(), match.getLocationInfo().getStart_token_pos());
+		dsm.getEventSpecManager().add(bp);
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestDynamic.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestDynamic.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestDynamic.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -1,20 +1,16 @@
 package org.strategoxt.debug.core.control;
 
-import java.util.List;
 import java.util.Map.Entry;
 
 import junit.framework.Assert;
 
 import org.StrategoFileManager;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.debug.core.eventspec.BreakPoint;
-import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;
 import org.strategoxt.debug.core.model.StrategoState;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.table.EventEntry;
 import org.strategoxt.debug.core.util.table.EventTable;
 
-public class DSMTestDynamic {
+public class DSMTestDynamic extends AbstractDSMTest {
 
 	public static void main(String[] args) {
 		DSMTestDynamic test = new DSMTestDynamic();
@@ -44,31 +40,29 @@
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
 		EventTable eventTable = dsm.getEventSpecManager().getEventTable();
-		Assert.assertEquals(57, eventTable.size());
+		Assert.assertEquals(56, eventTable.size());
 		
 		// 78, 8
 		// ; c := <find-comment-by-name(|name)> c*
 		// right after a definition of a local rule
 		// in rule "find-comment-match"
-		List<EventEntry> entries = eventTable.getEventEntries(78, 8, "s-step");
-		Assert.assertEquals(1, entries.size());
-		
-		BreakPoint bp = null;
-		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 78);
-		dsm.getEventSpecManager().add(bp);
-
+		// only the dynamic rule "get-current-name" should be available at the first suspend
+		// at the second suspend, also "baz-rule" will be available
+		int lineNumber = 78;
+		int startTokenPosition = 8;
+		String eventType = "s-step";
+		this.addBP(dsm, lineNumber, startTokenPosition, eventType);
 		
-		// 89, 6
+		// 93, 6
 		// ; comment := (<debug(!"stuff:"); first> c-filtered*) //  <+ !Comment(name, "created!!")
 		// current active rule calls a dynamic strategy
 		// in rule "find-comment-by-name"
-		entries = eventTable.getEventEntries(89, 6, "s-step");
-		Assert.assertEquals(1, entries.size());
+		// will show 2 dynamic rules: "get-current-name" and "baz-rule"
+		lineNumber = 93;
+		startTokenPosition = 6;
+		eventType = "s-step";
+		this.addBP(dsm, lineNumber, startTokenPosition, eventType);
 		
-		bp = null;
-		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 89);
-		dsm.getEventSpecManager().add(bp);
-
 		// TODO: test set breakpoint on dynamic rule
 		/*
 		// 49, 8

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java	Wed Nov 24 17:41:27 2010	(r21422)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DebugSessionManagerTest.java	Thu Nov 25 12:40:39 2010	(r21423)
@@ -10,13 +10,12 @@
 import org.strategoxt.debug.core.eventspec.BreakPoint;
 import org.strategoxt.debug.core.eventspec.RuleEnterBreakPoint;
 import org.strategoxt.debug.core.eventspec.StrategyEnterBreakPoint;
-import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;
 import org.strategoxt.debug.core.model.StrategoState;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
 import org.strategoxt.debug.core.util.table.EventEntry;
 import org.strategoxt.debug.core.util.table.EventTable;
 
-public class DebugSessionManagerTest {
+public class DebugSessionManagerTest extends AbstractDSMTest {
 	
 	public static void main(String[] args) {
 		runLocalVar();
@@ -59,7 +58,7 @@
 		
 		// create a breakpoint
 		BreakPoint bp = null;
-		bp = new RuleEnterBreakPoint("find-comment-match", -1); // should hit "find-comment-by-name" two times
+		bp = new RuleEnterBreakPoint("find-comment-match", -1, -1); // should hit "find-comment-by-name" two times
 		dsm.getEventSpecManager().add(bp);
 		
 		System.out.println("RUN");
@@ -97,9 +96,9 @@
 		
 		// create a breakpoint
 		BreakPoint bp = null;
-		bp = new RuleEnterBreakPoint("find-comment-match", -1); // should hit "find-comment-by-name" two times
+		bp = new RuleEnterBreakPoint("find-comment-match", -1, -1); // should hit "find-comment-by-name" two times
 		dsm.getEventSpecManager().add(bp);
-		bp = new StrategyEnterBreakPoint("first", -1); // should hit two times
+		bp = new StrategyEnterBreakPoint("first", -1, -1); // should hit two times
 		dsm.getEventSpecManager().add(bp);
 		System.out.println("RUN");
 		// start the debug session
@@ -134,34 +133,26 @@
 		// 47, 8
 		// f* := <find-functions> definitions* // find functions
 		// in rule "match-comments"
-		List<EventEntry> entries = eventTable.getEventEntries(47, 8, "s-step");
-		Assert.assertEquals(1, entries.size());
-		
-		BreakPoint bp = null;
-		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 47);
-		dsm.getEventSpecManager().add(bp);
+		int lineNumber = 47;
+		int startTokenPosition = 8;
+		String eventType = "s-step";
+		this.addBP(dsm, lineNumber, startTokenPosition, eventType);
 
 		
 		// 48, 8
 		// c* := <find-comments> definitions* // find comments
-		entries = eventTable.getEventEntries(48, 8, "s-step");
-		Assert.assertEquals(1, entries.size());
-		
-		bp = null;
-		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 48);
-		dsm.getEventSpecManager().add(bp);
-
+		lineNumber = 48;
+		startTokenPosition = 8;
+		eventType = "s-step";
+		this.addBP(dsm, lineNumber, startTokenPosition, eventType);
 		
 		// 49, 8
 		// out := <match-f-and-c> (f*, c*)
-		entries = eventTable.getEventEntries(49, 8, "s-step");
-		Assert.assertEquals(1, entries.size());
-		
-		bp = null;
-		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 49);
-		dsm.getEventSpecManager().add(bp);
-
-		
+		lineNumber = 49;
+		startTokenPosition = 8;
+		eventType = "s-step";
+		this.addBP(dsm, lineNumber, startTokenPosition, eventType);
+	
 		
 		// which breakpoints will be hit?
 		VMStateTester vmStateTester = new VMStateTester();
@@ -204,32 +195,26 @@
 		// 47, 8
 		// f* := <find-functions> definitions* // find functions
 		// in rule "match-comments"
-		List<EventEntry> entries = eventTable.getEventEntries(47, 8, "s-step");
-		Assert.assertEquals(1, entries.size());
-		
-		BreakPoint bp = null;
-		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 47);
-		dsm.getEventSpecManager().add(bp);
+		int lineNumber = 47;
+		int startTokenPosition = 8;
+		String eventType = "s-step";
+		this.addBP(dsm, lineNumber, startTokenPosition, eventType);
 
 		
 		// 48, 8
 		// c* := <find-comments> definitions* // find comments
-		entries = eventTable.getEventEntries(48, 8, "s-step");
-		Assert.assertEquals(1, entries.size());
-		
-		bp = null;
-		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 48);
-		dsm.getEventSpecManager().add(bp);
+		lineNumber = 48;
+		startTokenPosition = 8;
+		eventType = "s-step";
+		this.addBP(dsm, lineNumber, startTokenPosition, eventType);
 
 		
 		// 49, 8
 		// out := <match-f-and-c> (f*, c*)
-		entries = eventTable.getEventEntries(49, 8, "s-step");
-		Assert.assertEquals(1, entries.size());
-		
-		bp = null;
-		bp = new StrategyStepBreakPoint(entries.get(0).getStrategyName(), 49);
-		dsm.getEventSpecManager().add(bp);
+		lineNumber = 49;
+		startTokenPosition = 8;
+		eventType = "s-step";
+		this.addBP(dsm, lineNumber, startTokenPosition, eventType);
 
 		
 		
@@ -294,7 +279,7 @@
 		
 		// create a breakpoint
 		BreakPoint bp = null;
-		bp = new RuleEnterBreakPoint(rEnter.getStrategyName(), -1); // should hit "find-comment-by-name" two times
+		bp = new RuleEnterBreakPoint(rEnter.getStrategyName(), -1, -1); // should hit "find-comment-by-name" two times
 		dsm.getEventSpecManager().add(bp);
 		System.out.println("RUN");
 		// start the debug session

From r.t.lindeman at student.tudelft.nl  Thu Nov 25 13:51:17 2010
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Thu, 25 Nov 2010 12:51:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21424 - in
	spoofax-imp/trunk/org.strategoxt.imp.debug.core: lib
	src/org/strjdbg/eclipse/core/str/model
Message-ID: <201011251251.oAPCpHg2003259@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Thu Nov 25 12:51:16 2010
New Revision: 21424
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21424&sc=1

Log:
Fixed line breakpoint handling with multiple statements on a single line in Eclipse plugin

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoDebugTarget.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/lib/stratego-debug-core.jar
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java	Thu Nov 25 12:40:39 2010	(r21423)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/EStrategoStackFrame.java	Thu Nov 25 12:51:16 2010	(r21424)
@@ -12,7 +12,6 @@
 import org.spoofax.interpreter.terms.BasicStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.debug.core.model.StrategoStackFrame;
-import org.strategoxt.lang.terms.StrategoString;
 
 public class EStrategoStackFrame extends StrategoDebugElement implements IStackFrame {
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoDebugTarget.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoDebugTarget.java	Thu Nov 25 12:40:39 2010	(r21423)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strjdbg/eclipse/core/str/model/StrategoDebugTarget.java	Thu Nov 25 12:51:16 2010	(r21424)
@@ -441,7 +441,7 @@
 		if (stepEvent != null)
 		{
 			//create a step breakpoint
-			bp = new StrategyStepBreakPoint(stepEvent.getStrategyName(), linenumber);
+			bp = new StrategyStepBreakPoint(stepEvent.getStrategyName(), stepEvent.getLocationInfo().getStart_line_num(), stepEvent.getLocationInfo().getStart_token_pos());
 		}
 		else
 		{
@@ -455,11 +455,11 @@
 			{
 				if ("s-enter".equals(enterEvent.getEventType()))
 				{
-					bp = new StrategyEnterBreakPoint(enterEvent.getStrategyName(), linenumber);
+					bp = new StrategyEnterBreakPoint(enterEvent.getStrategyName(), enterEvent.getLocationInfo().getStart_line_num(), enterEvent.getLocationInfo().getStart_token_pos());
 				}
 				else if ("r-enter".equals(enterEvent.getEventType()))
 				{
-					bp = new RuleEnterBreakPoint(enterEvent.getStrategyName(), linenumber);
+					bp = new RuleEnterBreakPoint(enterEvent.getStrategyName(), enterEvent.getLocationInfo().getStart_line_num(), enterEvent.getLocationInfo().getStart_token_pos());
 				}
 				else
 				{

From karltk at strategoxt.org  Thu Nov 25 16:37:04 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 25 Nov 2010 15:37:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21425 - in
	strategoxt-javascript-backend/trunk: scripts src/javascript
	tests tests/basic tests/testlib
Message-ID: <201011251537.oAPFb4rB005788@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Thu Nov 25 15:37:03 2010
New Revision: 21425
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21425&sc=1

Log:
* Added support for annotating annotations (collapsing them).
 * Test run now also stops when javascript exceptions are thrown.
 * Use the emu-libstratego-lib whenever necessary.

Modified:
   strategoxt-javascript-backend/trunk/scripts/no-fail-check.sh
   strategoxt-javascript-backend/trunk/src/javascript/terms.js
   strategoxt-javascript-backend/trunk/tests/Makefile
   strategoxt-javascript-backend/trunk/tests/basic/build_1.str
   strategoxt-javascript-backend/trunk/tests/basic/build_2.str
   strategoxt-javascript-backend/trunk/tests/basic/build_3.str
   strategoxt-javascript-backend/trunk/tests/basic/camelCase_1.str
   strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str

Modified: strategoxt-javascript-backend/trunk/scripts/no-fail-check.sh
==============================================================================
--- strategoxt-javascript-backend/trunk/scripts/no-fail-check.sh	Thu Nov 25 12:51:16 2010	(r21424)
+++ strategoxt-javascript-backend/trunk/scripts/no-fail-check.sh	Thu Nov 25 15:37:03 2010	(r21425)
@@ -2,5 +2,5 @@
 
 f="/tmp/strjs.exec.trace"
 tee $f
-x=$(tail -n 1 $f | grep "failed")
+x=$(tail -n 2 $f | egrep "failed|uncaught")
 [ "$x" == "" ]

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Thu Nov 25 12:51:16 2010	(r21424)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Thu Nov 25 15:37:03 2010	(r21425)
@@ -370,6 +370,89 @@
 		}
 	};
 
+	function listMerge(list1, list2) {
+		var tmp = []
+		while(!factory.isEmptyList(list1)) {
+			tmp.push(factory.head(list1));
+			list1 = factory.tail(list1);
+		}
+		for(var i = tmp.length-1; i >= 0; i--) {
+			list2 = factory.makeListCons(tmp[i], list2);
+		}
+		return list2;
+	}
+	
+	function fuseAnnotations(annotatedTerm, newAnnos) {
+		var r = {
+				annoType : ANNO,
+				annos : listMerge(annotatedTerm.annos, newAnnos),
+				term : annotatedTerm.term,
+				termType : annotatedTerm.termType,
+				head : annotatedTerm.head,
+				tail : annotatedTerm.tail,
+				equals : annotatedTerm.equals,
+				subtermCount : annotatedTerm.subtermCont,
+				getSubterm : annotatedTerm.getSubterm,
+				getConstructor : annotatedTerm.getConstructor
+		}
+		return r;
+	}
+	
+	function wrapInAnnotation(term, annos) { 
+		var r = {
+				annoType : ANNO,
+				annos : annos,
+				term : term
+		};
+
+		switch(factory.termType(term)) {
+		case LIST:
+			r.termType = LIST;
+			r.tail = term.tail;
+			r.head = term.head;
+			r.equals = term.equals;
+			break;
+		case APPL:
+			r.getConstructor = term.getConstructor;
+		case ANNO:
+		case TUPLE:
+			r.termType = term.termType;
+			r.equals = term.equals;
+			r.subtermCount = term.subtermCount;
+			r.getSubterm = term.getSubterm;
+			break;
+		case STRING: 
+			r.termType = STRING;
+			r.equals = function(other) {
+				if(other.annoType)
+					return term === other.term;
+				else
+					return term === other;
+			}
+			break;
+		case REAL:
+			r.termType = REAL;
+			r.equals = function(other) {
+				if(other.annoType)
+					return term === other.term;
+				else
+					return term === other;
+			}
+			break;
+		case INT:
+			r.termType = INT;
+			r.equals = function(other) {
+				if(other.annoType)
+					return term === other.term;
+				else
+					return term === other;
+			}
+			break; 
+		};
+		return r;
+	}
+
+
 	//
 	//  public Term interface
 	//
@@ -539,56 +622,10 @@
 			},
 
 			annotateTerm : function(term, annos) {
-				var r = {
-					annoType : ANNO,
-					annos : annos,
-					term : term
-				};
-
-				switch(factory.termType(term)) {
-				case LIST:
-					r.termType = LIST;
-					r.tail = term.tail;
-					r.head = term.head;
-					r.equals = term.equals;
-					break;
-				case ANNO:
-				case TUPLE:
-				case APPL:
-					r.termType = term.termType;
-					r.equals = term.equals;
-					r.subtermCount = term.subtermCount;
-					r.getSubterm = term.getSubterm;
-					break;
-				case STRING: 
-					r.termType = STRING;
-					r.equals = function(other) {
-						if(other.annoType)
-							return term === other.term;
-						else
-							return term === other;
-					}
-					break;
-				case REAL:
-					r.termType = REAL;
-					r.equals = function(other) {
-						if(other.annoType)
-							return term === other.term;
-						else
-							return term === other;
-					}
-					break;
-				case INT:
-					r.termType = INT;
-					r.equals = function(other) {
-						if(other.annoType)
-							return term === other.term;
-						else
-							return term === other;
-					}
-					break; 
-				};
-				return r;
+				if(term.annoType)
+					return fuseAnnotations(term, annos);
+				else
+					return wrapInAnnotation(term, annos);
 			}
 	};
 	return factory;

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Thu Nov 25 12:51:16 2010	(r21424)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Thu Nov 25 15:37:03 2010	(r21425)
@@ -16,7 +16,7 @@
 	../trans/s2js -i $< | ../scripts/quote-term-imports.sh | ../scripts/add-cli-wrapper.sh > $@
 
 %.run : %.js
-	java -jar ../lib/js.jar $< | ../scripts/no-fail-check.sh && touch $@
+	java -jar ../lib/js.jar $< 2>&1 | ../scripts/no-fail-check.sh && touch $@
 
 clean:
 	rm -f $(CTREEFILES) $(JSFILES) $(TESTRUNS)

Modified: strategoxt-javascript-backend/trunk/tests/basic/build_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/basic/build_1.str	Thu Nov 25 12:51:16 2010	(r21424)
+++ strategoxt-javascript-backend/trunk/tests/basic/build_1.str	Thu Nov 25 15:37:03 2010	(r21425)
@@ -1,6 +1,6 @@
 module build_1
 imports 
-	emu-libstratego-lib
+  emu-libstratego-lib
 
 signature
   constructors

Modified: strategoxt-javascript-backend/trunk/tests/basic/build_2.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/basic/build_2.str	Thu Nov 25 12:51:16 2010	(r21424)
+++ strategoxt-javascript-backend/trunk/tests/basic/build_2.str	Thu Nov 25 15:37:03 2010	(r21425)
@@ -1,6 +1,6 @@
 module build_2
-
-imports libstratego-lib
+imports 
+  emu-libstratego-lib
 
 strategies
 

Modified: strategoxt-javascript-backend/trunk/tests/basic/build_3.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/basic/build_3.str	Thu Nov 25 12:51:16 2010	(r21424)
+++ strategoxt-javascript-backend/trunk/tests/basic/build_3.str	Thu Nov 25 15:37:03 2010	(r21425)
@@ -1,6 +1,6 @@
 module build_3
-
-imports libstratego-lib
+imports 
+  emu-libstratego-lib
 
 signature constructors
 

Modified: strategoxt-javascript-backend/trunk/tests/basic/camelCase_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/basic/camelCase_1.str	Thu Nov 25 12:51:16 2010	(r21424)
+++ strategoxt-javascript-backend/trunk/tests/basic/camelCase_1.str	Thu Nov 25 15:37:03 2010	(r21425)
@@ -1,9 +1,9 @@
 module camelCase_1
 
 imports
-
-  libstratego-lib
+  emu-libstratego-lib
 
 strategies
 
+  main = camelCase_1
   camelCase_1 = debug(!"success")

Modified: strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str	Thu Nov 25 12:51:16 2010	(r21424)
+++ strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str	Thu Nov 25 15:37:03 2010	(r21425)
@@ -36,6 +36,10 @@
     stdout    : FileLoc
     stdin     : FileLoc
 
+signature
+  constructors
+    Some : a -> Option(a)
+    
 strategies 	 
 
   oncetd(s) = rec x(s <+ one(x))

From karltk at strategoxt.org  Thu Nov 25 18:34:43 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 25 Nov 2010 17:34:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21426 - in
	strategoxt-javascript-backend/trunk: src/javascript tests tests/core
Message-ID: <201011251734.oAPHYhGZ007351@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Thu Nov 25 17:34:42 2010
New Revision: 21426
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21426&sc=1

Log:
* Fixed core tests so that they will always succeed under normal operation.
 * Started debugging infinite recursion in basic/build_1.str

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/javascript/terms.js
   strategoxt-javascript-backend/trunk/tests/Makefile
   strategoxt-javascript-backend/trunk/tests/core/_fail.str
   strategoxt-javascript-backend/trunk/tests/core/match_appl_1.str
   strategoxt-javascript-backend/trunk/tests/core/match_appl_2.str
   strategoxt-javascript-backend/trunk/tests/core/match_appl_3.str
   strategoxt-javascript-backend/trunk/tests/core/match_appl_4.str
   strategoxt-javascript-backend/trunk/tests/core/match_int.str
   strategoxt-javascript-backend/trunk/tests/core/match_list_1.str
   strategoxt-javascript-backend/trunk/tests/core/match_list_2.str
   strategoxt-javascript-backend/trunk/tests/core/match_list_3.str
   strategoxt-javascript-backend/trunk/tests/core/match_real.str
   strategoxt-javascript-backend/trunk/tests/core/match_str.str
   strategoxt-javascript-backend/trunk/tests/core/match_tuple_1.str
   strategoxt-javascript-backend/trunk/tests/core/match_var_2.str
   strategoxt-javascript-backend/trunk/tests/core/match_var_3.str
   strategoxt-javascript-backend/trunk/tests/core/match_var_4.str
   strategoxt-javascript-backend/trunk/tests/core/match_var_5.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Thu Nov 25 17:34:42 2010	(r21426)
@@ -48,8 +48,10 @@
 
 StrategoJS.SRTS.SRTS_one = function(ctx, term, fun) {
 	print("SRTS_one");
+	print(ctx.factory.prettify(term));
 	var factory = ctx.factory;
-	switch(factory.termType(term)) {
+	var termType = factory.termType(term)
+	switch(termType) {
 	case factory.REAL:
 	case factory.INT:
 	case factory.STRING:
@@ -78,13 +80,35 @@
 		return r;
 	case factory.TUPLE:
 	case factory.APPL:
-		var l = factory.getSubtermCount();
-		for(var i = 0; i < l; i++) {
-			var r = fun(ctx, factory.getSubterm(i));
-			if(r !== null)
-				return r;
+		print("TUPLE");
+		var l = factory.getSubtermCount(term);
+		var tmp = [];
+		var success = false;
+		var i;
+		for(i = 0; i < l; i++) {
+			var ot = factory.getSubterm(term, i); 
+			print("Z", factory.prettify(ot));
+			var nt = fun(ctx, ot);
+			if(nt === null) {
+				tmp.push(ot);
+			} else {
+				success = true;
+				tmp.push(nt);
+				break;
+			}
+		}
+		for(; i < l; i++) {
+			tmp.push(factory.getSubterm(term, i));
+		}
+		print(tmp.length);
+		if(success && termType == factory.APPL) {
+			var ctor = factory.getConstructor(term);
+			return factory.makeAppl(ctor, tmp);
+		} if(success && termType == factory.TUPLE) {
+			return factory.makeTuple(tmp);
+		} else {
+			return null;
 		}
-		return null;
 	default:
 		throw new "invalid term type ";
 	}
@@ -114,15 +138,21 @@
 		return r;
 	case factory.TUPLE:
 	case factory.APPL:
-		var l = factory.getSubtermCount();
-		var r = factory.makeEmptyList();
+		throw "not implemented";
+		var l = factory.getSubtermCount(term);
+		var tmp = [];
+		var success = false;
 		for(var i = 0; i < l; i++) {
-			var x = fun(ctx, factory.getSubterm(i));
-			if(r === null)
-				return null;
-			r = factory.makeList(x, r);
+			var ot = factory.getSubterm(term, i); 
+			var nt = fun(ctx, ot);
+			tmp.push(nt === null ? ot : ot);
+			success = nt !== null || success;
+		}
+		if(success) {
+			
+		} else {
+			return null;
 		}
-		return null;
 	default:
 		throw new "invalid term type ";
 	}
@@ -159,16 +189,21 @@
 		return r;
 	case factory.TUPLE:
 	case factory.APPL:
-		var l = factory.getSubtermCount();
-		var r = factory.makeEmptyList();
+		throw "not implemented";
+		var l = factory.getSubtermCount(term);
+		var tmp = [];
+		var success = false;
 		for(var i = 0; i < l; i++) {
-			var x = fun(ctx, factory.getSubterm(i));
-			if(r !== null)
-				r = factory.makeList(x, r);
+			var ot = factory.getSubterm(term, i); 
+			var nt = fun(ctx, ot);
+			tmp.push(nt === null ? ot : ot);
+			success = nt !== null || success;
 		}
-		if(factory.isEmptyList(r))
+		if(success) {
+			
+		} else {
 			return null;
-		return r;
+		}
 	default:
 		throw new "invalid term type ";
 	}

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Thu Nov 25 17:34:42 2010	(r21426)
@@ -521,7 +521,7 @@
 				r.equals = function(other) {
 					if(other.termType !== TUPLE || other.subtermCount != r.subtermCount)
 						return false;
-					for(var i = 0; i < args.length; i++)
+					for(var i = 0; i < r.subtermCount; i++)
 						if(!doEquals(r[i], other.getSubterm(i)))
 							return false;
 					return true;
@@ -540,17 +540,18 @@
 						return r.args[index];
 					},
 					getConstructor : function() {
-						return { name : ctor.name, arity : args.length };
+						return { name : r.name, arity : r.subtermCount };
 					}, 
 					equals : function(other) {
 						if(other.termType !== APPL)
 							return false;
-						var otherCtor = other.getConstructor();
-						if(ctor.name !== otherCtor.name || ctor.arity !== r.subtermCount)
+						var ctor = other.getConstructor();
+						if(r.name !== ctor.name || r.subtermCount !== ctor.arity)
 							return false;
 						for(var i = 0; i < r.subtermCount; i++) {
-							if(!doEquals(r.args[i], other.getSubterm(i)))
+							if(!doEquals(r.args[i], other.getSubterm(i))) {
 								return false;
+							}
 						}
 						return true;
 					}

Modified: strategoxt-javascript-backend/trunk/tests/Makefile
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/Makefile	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/Makefile	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,8 +1,8 @@
 
 COREFILES  := $(wildcard core/*.str)
 BASICFILES := $(wildcard basic/*.str)
-#TESTFILES  := $(COREFILES) $(BASICFILES)
-TESTFILES  := $(BASICFILES)
+TESTFILES  := $(COREFILES) $(BASICFILES)
+#TESTFILES  := $(BASICFILES)
 CTREEFILES := $(subst .str,.ctree,$(TESTFILES))
 JSFILES    := $(subst .str,.js,$(TESTFILES))
 TESTRUNS   := $(subst .str,.run,$(TESTFILES))

Modified: strategoxt-javascript-backend/trunk/tests/core/_fail.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/_fail.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/_fail.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,2 +1,2 @@
 module _fail
-rules main = fail
+rules main = fail <+ id  // FIXME Should actually fail, but test harness can't cope

Modified: strategoxt-javascript-backend/trunk/tests/core/match_appl_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_appl_1.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_appl_1.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -4,4 +4,4 @@
  constructors
    Foo : Term * Term -> Term
 rules
-  main = ?Foo(1,2)
+  main = !Foo(1,2) ; ?Foo(1,2)

Modified: strategoxt-javascript-backend/trunk/tests/core/match_appl_2.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_appl_2.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_appl_2.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -4,4 +4,4 @@
  constructors
    Foo : Term * Term -> Term
 rules
-  main = ?Foo(1,"foo")
+  main = !Foo(1, "foo") ; ?Foo(1,"foo")

Modified: strategoxt-javascript-backend/trunk/tests/core/match_appl_3.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_appl_3.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_appl_3.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -4,4 +4,4 @@
  constructors
    Foo : Term * Term -> Term
 rules
-  main = ?Foo(1,[1,2,3])
+  main = !Foo(1, [1,2,3]) ; ?Foo(1,[1,2,3])

Modified: strategoxt-javascript-backend/trunk/tests/core/match_appl_4.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_appl_4.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_appl_4.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -4,4 +4,4 @@
  constructors
    Foo : Term * Term -> Term
 rules
-  main = ?Foo(1,Foo(1,2))
+  main = !Foo(1, Foo(1,2)) ; ?Foo(1,Foo(1,2))

Modified: strategoxt-javascript-backend/trunk/tests/core/match_int.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_int.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_int.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,3 +1,3 @@
 module match_int
 imports libstratego-lib
-rules main = ?42
+rules main = !42 ; ?42

Modified: strategoxt-javascript-backend/trunk/tests/core/match_list_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_list_1.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_list_1.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,3 +1,3 @@
 module match_list_1
 imports libstratego-lib
-rules main = ?[1,2,3]
+rules main = ![1,2,3] ; ?[1,2,3]

Modified: strategoxt-javascript-backend/trunk/tests/core/match_list_2.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_list_2.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_list_2.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,3 +1,3 @@
 module match_list_2
 imports libstratego-lib
-rules main = ?[]
+rules main = ![] ; ?[]

Modified: strategoxt-javascript-backend/trunk/tests/core/match_list_3.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_list_3.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_list_3.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,3 +1,3 @@
 module match_list_3
 imports libstratego-lib
-rules main = ?[1 | _]
+rules main = ![1,2] ; ?[1 | _]

Modified: strategoxt-javascript-backend/trunk/tests/core/match_real.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_real.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_real.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,4 +1,4 @@
 module match_real
 imports libstratego-lib
-rules main = ?43.2
+rules main = !43.2 ; ?43.2
 

Modified: strategoxt-javascript-backend/trunk/tests/core/match_str.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_str.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_str.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,3 +1,3 @@
 module match_str
 imports libstratego-lib
-rules main = ?"foo"
+rules main = !"foo" ; ?"foo"

Modified: strategoxt-javascript-backend/trunk/tests/core/match_tuple_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_tuple_1.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_tuple_1.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,3 +1,3 @@
 module match_tuple_1
 imports libstratego-lib
-rules main = ?(1,2,3)
+rules main = !(1,2,3) ; ?(1,2,3)

Modified: strategoxt-javascript-backend/trunk/tests/core/match_var_2.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_var_2.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_var_2.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,4 +1,4 @@
 module match_var_2
 imports libstratego-lib
 signature constructors Foo : Term * Term -> Term
-rules main = ?Foo(1,x)
+rules main = !Foo(1,2) ; ?Foo(1,x)

Modified: strategoxt-javascript-backend/trunk/tests/core/match_var_3.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_var_3.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_var_3.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,3 +1,3 @@
 module match_var_3
 imports libstratego-lib
-rules main = ?[x|_]
+rules main = ![1,2] ; ?[x|_]

Modified: strategoxt-javascript-backend/trunk/tests/core/match_var_4.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_var_4.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_var_4.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,3 +1,3 @@
 module match_var_4
 imports libstratego-lib
-rules main = ?[_, x, _]
+rules main = ![1,2,3] ; ?[_, x, _]

Modified: strategoxt-javascript-backend/trunk/tests/core/match_var_5.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/core/match_var_5.str	Thu Nov 25 15:37:03 2010	(r21425)
+++ strategoxt-javascript-backend/trunk/tests/core/match_var_5.str	Thu Nov 25 17:34:42 2010	(r21426)
@@ -1,3 +1,3 @@
 module match_var_5
 imports libstratego-lib
-rules main = ?(1, x, 3)
+rules main = !(1,2,3) ; ?(1, x, 3)

From r.t.lindeman at student.tudelft.nl  Thu Nov 25 22:15:16 2010
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Thu, 25 Nov 2010 21:15:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21427 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans
Message-ID: <201011252115.oAPLFGjK010187@proliant.st.ewi.tudelft.nl>

Author: RickyLindeman
Date: Thu Nov 25 21:15:15 2010
New Revision: 21427
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21427&sc=1

Log:
Use pack-stratego to determine all the stratego files that are needed to compile a stratego program. We need this information to determine to which files we want to add debug information.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/traverse-imports.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str	Thu Nov 25 17:34:42 2010	(r21426)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/trans-str.str	Thu Nov 25 21:15:15 2010	(r21427)
@@ -6,7 +6,8 @@
   gen-debug-info
   assert
   gen-lookup
-  
+  traverse-imports // show all files used as import
+  	
 rules
 // transform stratego to stratego but add debug statements
 	generate-str:
@@ -186,7 +187,9 @@
 	// the generated file will be saved at outputfilename
   apply-debug-trans = apply-debug-trans-internal <+ apply-debug-trans-error
 	
-
+	// inputfilePath is relative to sourceBasedir.
+	// sourceBasedir should be treated as a project directory
+	// the generated file will be saved at outputfilename
   apply-debug-trans-internal :
   	(sourceBasedir, inputfilePath, outputfilename) -> (status, outputfilename)
   	where(
@@ -229,5 +232,73 @@
   test-apply-debug-1 = !("asdf", "ddfg"); apply-debug-trans
   test-apply-debug-2 = !("asdf", "ddfg", "asfd"); apply-debug-trans
   test-apply-debug-3 = !"asdf"; apply-debug-trans
+  
+  test-list-imports-1 = 
+  	echo(|"test-list-imports-1")
+  	; get-project-dir => project-dir
+  	; !"test/src" => input-base-dir
+  	; !"testimports/localvar.str" => main-str-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", main-str-file] => absolute-location
+  	; echo(|"reading ast from: ")
+  	; echo(|absolute-location)
+  	//; !["-i",  absolute-location, "-I", "."]
+  	; args := ["-i", absolute-location]
+  	; <list-imports(|args)> absolute-location
+  	; ?(files, _)
+  	; <debug(!"files: ")> files
+  	  
+  test-list-imports-2 = 
+  	echo(|"test-list-imports-2")
+  	; get-project-dir => project-dir
+  	; !"test/src" => input-base-dir
+  	; !"testogetarts/ogetarts.str" => main-str-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", main-str-file] => absolute-location
+  	; echo(|"reading ast from: ")
+  	; echo(|absolute-location)
+  	//; !["-i",  absolute-location, "-I", "."]
+  	; args := ["-i", absolute-location]
+  	; <list-imports(|args)> absolute-location
+  	; ?(files, _)
+  	; <debug(!"files: ")> files
+  	  
+  test-list-imports-3 = 
+  	echo(|"test-list-imports-3")
+  	; get-project-dir => project-dir
+  	; !"trans" => input-base-dir
+  	; !"stratego-transformer.str" => main-str-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", main-str-file] => absolute-location
+  	; echo(|"reading ast from: ")
+  	; echo(|absolute-location)
+  	//; !["-i",  absolute-location, "-I", "."]
+  	; include-dir := <concat-strings> [project-dir, "/", "include"]
+  	; lib-dir := <concat-strings> [project-dir, "/", "lib"] 
+  	; syntax-dir := <concat-strings> [project-dir, "/", "syntax"]
+  	; args := [/*"pack-stratego-io", */"--slack", "--imports", "-i", absolute-location, "-I", include-dir, "-I", lib-dir, "-I", syntax-dir, "-I", project-dir]
+  	; debug(!"arguments: ")
+  	; incl := [include-dir, lib-dir, syntax-dir, project-dir]
+  	; <set-config> ("-I", incl)  
+  	; <set-config> ("-i", absolute-location)
+  	; <list-imports(|args)> absolute-location
+  	; ?(files, _)
+  	; <debug(!"files: ")> files
 
+/*
+  test-list-imports-4 = 
+  	echo(|"test-list-imports-3")
+  	; get-project-dir => project-dir
+  	; !"trans" => input-base-dir
+  	; !"stratego-transformer.str" => main-str-file
+  	; <concat-strings> [project-dir, "/", input-base-dir, "/", main-str-file] => absolute-location
+  	; echo(|"reading ast from: ")
+  	; echo(|absolute-location)
+  	//; !["-i",  absolute-location, "-I", "."]
+  	; include-dir := <concat-strings> [project-dir, "/", "include"]
+  	; lib-dir := <concat-strings> [project-dir, "/", "lib"] 
+  	; syntax-dir := <concat-strings> [project-dir, "/", "syntax"]
+  	; args := ["pack-stratego-io", "--slack", "--imports", "-i", absolute-location, "-I", include-dir, "-I", lib-dir, "-I", syntax-dir, "-I", project-dir]
+  	; debug(!"arguments: ")
+  	; pack-stratego-io // when -o is missing it prints to stdout
+  	; ?(files, _)
+  	; <debug(!"files: ")> files
+*/
   	
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/traverse-imports.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/traverse-imports.str	Thu Nov 25 21:15:15 2010	(r21427)
@@ -0,0 +1,79 @@
+module traverse-imports
+	
+// traverse all imports used in the stratego program
+imports
+	libstrc
+//	pack-stratego
+  libstratego-xtc 
+  libstratego-rtg
+  
+strategies
+	// current term should be a string pointing to a stratego file
+	list-imports(|args) =
+		?ffile
+		; !FILE(ffile)
+		//; pack-stratego-trm(|args)
+	; where(id
+      ; incl := <get-config <+ ![]> "-I"
+      ; debug(!"incl: ")
+      //; <set-config> ("-I", [])
+      //; debug(!"set: ")
+      //; incl2 := <get-config <+ ![]> "-I"
+      //; debug(!"incl2: ")
+      ; <parse-options(pack-stratego-options <+ input-options, system-usage, id)> 
+          [<whoami <+ !"strc"> | args]
+    )
+    ; debug(!"where: ")
+    ; pack-process-options
+    ; pack-report-options
+    ; debug(!"config:")
+    ; where(!"-I"; get-config; debug(!"IIII: "))
+      // current is FILE
+    ; pack-stratego(|<pack-include-path>) => (files, spec)
+    /*
+    ; <pack-maybe-create-depfile> files
+    ; !spec
+    ; where(<set-config>("-I", incl))
+	*/
+	
+	/*
+	  pack-strategoXX(|mkpt) =
+	  	?g; debug(!"g"); 
+      \ FILE(s) -> IncludePathName(s) \
+      ;debug(!"File: ")
+    ; !(<id>, mkpt, [])
+    ; graph-nodes-undef(
+        { file:
+          pack-stratego-parse-stratego => (file,_)
+        ; rules( FileDependencies :+= file )
+        ; if <get-config> "--dump-aterms" then
+            where({fn, trm: 
+                ?(fn, trm)
+                ; if <string-ends-with(|".str")> fn then
+                    rules ( StrAsts :+= (fn, trm) )
+                  end
+                })
+          end
+        }
+      , pack-get-stratego-imports 
+        ; map(IncludePathName(id) <+ !IncludeFromPath(<id>))
+      , \ (n,x,xs) -> [x|xs] \
+      )
+    ; (uniq,id)
+    ; debug(!"uniq: ")
+    ; if ?(_, []) then
+       Fst
+       ; unzip
+       ; (id, pack-flatten-stratego)
+      else
+        if not(<get-config>"--slack") then
+          Snd 
+          ; map(pack-report-module-not-found)
+          ; <xtc-exit> 1
+        else 
+          Fst
+        ; unzip
+        ; (id, pack-flatten-stratego)
+        end
+      end
+*/
\ No newline at end of file

From R.B.Vermaas at tudelft.nl  Fri Nov 26 10:33:53 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 26 Nov 2010 09:33:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21428 - in hydra: .
	jobs
Message-ID: <201011260933.oAQ9Xr4a018820@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Fri Nov 26 09:33:53 2010
New Revision: 21428
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21428&sc=1

Log:
refactored some of the release expressions

Added:
   hydra/eclipse.nix
   hydra/spoofax-fun.nix
Modified:
   hydra/jobs/org.spoofax.jsglr.nix
   hydra/jobs/spoofax-imp.nix

Added: hydra/eclipse.nix
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ hydra/eclipse.nix	Fri Nov 26 09:33:53 2010	(r21428)
@@ -0,0 +1,76 @@
+pkgs:
+let 
+  eclipseLinux64 = pkgs.fetchurl {
+    url = http://download.springsource.com/release/ECLIPSE/helios/SR1/eclipse-SDK-3.6.1-linux-gtk-x86_64.tar.gz ;
+    sha256 = "1cg9rrb5w978sdqbzz9lnli1lds9zhb6wfsj3wp725bqf1i6v9lg";
+  };
+in
+{ updatesites ? [], installIUs ? [], name, src ? eclipseLinux64} :
+with pkgs;	
+stdenv.mkDerivation {
+    inherit name src;
+    buildInputs = [jdk makeWrapper perl];
+    buildCommand = ''
+      ensureDir $out/bin
+      ensureDir $out/eclipse
+       
+      unpackPhase
+      cd eclipse
+        
+      header "Changing eclipse.ini"
+
+      # remove vm args
+      sed -i 's|-Xms[0-9]*m||' eclipse.ini
+      sed -i 's|-Xss[0-9]*m||' eclipse.ini
+      sed -i 's|-Xmx[0-9]*m||' eclipse.ini
+      sed -i 's|-XX:MaxPermSize=[0-9]*m||' eclipse.ini
+      sed -i '/^$/d' eclipse.ini
+      perl -pi -e "s/^\r\n//" eclipse.ini
+
+      # add own default vmwargs
+      echo "-Xms256m" >> eclipse.ini
+      echo "-Xss8m" >> eclipse.ini
+      echo "-Xmx1024m" >> eclipse.ini
+      echo "-XX:MaxPermSize=256m" >> eclipse.ini
+      echo "-server" >> eclipse.ini
+            
+      stopNest
+ 
+      header "Installing editors"
+      ALL_SITES="${lib.concatStringsSep "," updatesites}"       
+      ${lib.concatMapStrings (installIU: ''
+          header "Installing Editor ${installIU}..."
+          java -Xmx512m -jar plugins/org.eclipse.equinox.launcher_*.jar  \
+               -application org.eclipse.equinox.p2.director \
+               -metadataRepository $ALL_SITES \
+               -artifactRepository $ALL_SITES \
+               -installIU ${installIU} \
+               -data ../data \
+               -consolelog
+          stopNest     
+        '') installIUs
+      }
+      stopNest
+        
+      header "Fixing"
+      cp -R . $out/eclipse
+        
+      # Patch binaries
+	  interpreter=$(echo ${stdenv.glibc}/lib/ld-linux*.so.2)
+	  patchelf --set-interpreter $interpreter $out/eclipse/eclipse
+	  patchelf --set-rpath ${freetype}/lib:${fontconfig}/lib:${xlibs.libX11}/lib:${xlibs.libXrender}/lib:${zlib}/lib $out/eclipse/libcairo-swt.so
+	  
+	  # Create wrapper script
+	    makeWrapper $out/eclipse/eclipse $out/bin/eclipse \
+	      --prefix PATH : ${jre}/bin \
+	      --prefix LD_LIBRARY_PATH : ${glib}/lib:${gtk}/lib:${xlibs.libXtst}/lib
+	
+      # Create desktop item
+      ensureDir $out/share/applications
+
+      stopNest        
+    '';
+      
+    __noChroot = installIUs != [];
+}
+    

Modified: hydra/jobs/org.spoofax.jsglr.nix
==============================================================================
--- hydra/jobs/org.spoofax.jsglr.nix	Thu Nov 25 21:15:15 2010	(r21427)
+++ hydra/jobs/org.spoofax.jsglr.nix	Fri Nov 26 09:33:53 2010	(r21428)
@@ -17,6 +17,7 @@
       };
   };
   extraJars = with jars; [ junit antjunit ];
+
 in
 { 
   build = pkgs.releaseTools.antBuild {
@@ -34,5 +35,10 @@
     preConfigure = ''
       mkdir -p lib/
     '';
+
+    jarWrappers = [
+      { name = "jsglr"; classPath = "${spoofaxATerm}/lib/java/*"; mainClass = "org.spoofax.jsglr.Main"; }
+    ];
   };
+
 }

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Nov 25 21:15:15 2010	(r21427)
+++ hydra/jobs/spoofax-imp.nix	Fri Nov 26 09:33:53 2010	(r21428)
@@ -20,90 +20,12 @@
     sha256 = "0y13i31xlhian5glk4cahbzxg4mky4q61qzc5g03qkg4d67k12zd";
   };
 
-  eclipseLinux64 = pkgs.fetchurl {
-    url = http://download.springsource.com/release/ECLIPSE/helios/SR1/eclipse-SDK-3.6.1-linux-gtk-x86_64.tar.gz ;
-    sha256 = "1cg9rrb5w978sdqbzz9lnli1lds9zhb6wfsj3wp725bqf1i6v9lg";
-  };
-
-  eclipseFun = 
-  	{ updatesites ? [], installIUs ? [], name, src ? eclipseLinux64 } :
-  	with pkgs;	
-    stdenv.mkDerivation {
-      inherit name src;
-      buildInputs = [jdk makeWrapper perl];
-      buildCommand = ''
-        ensureDir $out/bin
-        ensureDir $out/eclipse
-        
-        unpackPhase
-        cd eclipse
-        
-        header "Changing eclipse.ini"
-
-        # remove vm args
-        sed -i 's|-Xms[0-9]*m||' eclipse.ini
-        sed -i 's|-Xss[0-9]*m||' eclipse.ini
-        sed -i 's|-Xmx[0-9]*m||' eclipse.ini
-        sed -i 's|-XX:MaxPermSize=[0-9]*m||' eclipse.ini
-        sed -i '/^$/d' eclipse.ini
-        perl -pi -e "s/^\r\n//" eclipse.ini
-
-        # add own default vmwargs
-        echo "-Xms256m" >> eclipse.ini
-        echo "-Xss8m" >> eclipse.ini
-        echo "-Xmx1024m" >> eclipse.ini
-        echo "-XX:MaxPermSize=256m" >> eclipse.ini
-        echo "-server" >> eclipse.ini
-            
-        stopNest
- 
-        header "Installing editors"
-        ALL_SITES="${lib.concatStringsSep "," updatesites}"       
-        ${lib.concatMapStrings (installIU: ''
-            header "Installing Editor ${installIU}..."
-            java -Xmx512m -jar plugins/org.eclipse.equinox.launcher_*.jar  \
-                 -application org.eclipse.equinox.p2.director \
-                 -metadataRepository $ALL_SITES \
-                 -artifactRepository $ALL_SITES \
-                 -installIU ${installIU} \
-                 -data ../data \
-                 -consolelog
-            stopNest     
-          '') installIUs
-        }
-        stopNest
-        
-        header "Fixing"
-        cp -R . $out/eclipse
-        
-	    # Patch binaries
-	    interpreter=$(echo ${stdenv.glibc}/lib/ld-linux*.so.2)
-	    patchelf --set-interpreter $interpreter $out/eclipse/eclipse
-	    patchelf --set-rpath ${freetype}/lib:${fontconfig}/lib:${xlibs.libX11}/lib:${xlibs.libXrender}/lib:${zlib}/lib $out/eclipse/libcairo-swt.so
-	
-	    # Create wrapper script
-	    makeWrapper $out/eclipse/eclipse $out/bin/eclipse \
-	      --prefix PATH : ${jre}/bin \
-	      --prefix LD_LIBRARY_PATH : ${glib}/lib:${gtk}/lib:${xlibs.libXtst}/lib
-	
-	    # Create desktop item
-	    ensureDir $out/share/applications
-
-	    stopNest        
-      '';
-      
-      __noChroot = installIUs != [];
-    };
+  eclipseFun = import ../eclipse.nix pkgs ; 
     
   eclipse = eclipseFun {
-  name = "spoofax";
-  updatesites = [
-  #  "http://www.lclnet.nl/update"
-  #  "http://download.eclipse.org/releases/helios"
-  ];
-  installIUs = [
-  #  "org.strategoxt.imp.feature.group"
-  ];
+    name = "spoofax";
+    updatesites = [];
+    installIUs = [];
   }; 
     
   jobs = with pkgs.lib;
@@ -201,9 +123,7 @@
 	            header "Pre-building $e"
 	            cd $e
                 export LOCALCLASSPATH="utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar"
-                export CLASSPATH="utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar"
                 export ANT_OPTS="-Xss8m -Xmx768m"
-                export NIX_ANT_OPTS="-Xss8m -Xmx768m"
                  
 	            ant -f build.main.xml -Declipse.spoofaximp.jars=utils/ 
 	            cd ..

Added: hydra/spoofax-fun.nix
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ hydra/spoofax-fun.nix	Fri Nov 26 09:33:53 2010	(r21428)
@@ -0,0 +1,59 @@
+{ pkgs
+, src
+, name 
+, version
+, ...
+} @ args :
+let 
+  eclipseFun = import ./eclipse.nix pkgs ; 
+    
+  eclipse = eclipseFun {
+    name = "spoofax-unstable";
+    updatesites = ["http://www.lclnet.nl/update/unstable"];
+    installIUs = ["org.strategoxt.imp.feature.group"];
+  }; 
+in
+    
+with pkgs.lib;
+pkgs.stdenv.mkDerivation ( removeAttrs args ["pkgs"] // {
+  name = "${name}-r${toString src.rev}";
+  inherit src;
+    
+  buildInputs = [ pkgs.maven3 pkgs.ant ];
+
+  buildPhase = 
+  let
+    mvnFlags = "-Dmaven.repo.local=/tmp/m3";
+  in ''
+    export M2_REPO=/tmp/m3
+
+    export LOCALCLASSPATH="utils/aster.jar:utils/make_permissive.jar:utils/sdf2imp.jar:utils/strategoxt.jar"
+    export ANT_OPTS="-Xss8m -Xmx2048m"
+
+    for d in */build.main.xml ; do
+      header "Prebuilding `dirname $d`..."
+      cd `dirname $d`
+      echo `pwd`
+      ls -l 
+      mkdir -p utils 
+      cp -Rv `find ${eclipse} -name strategoxt.jar` utils/
+      cp -Rv `find ${eclipse} -name aster.jar` utils/
+      cp -Rv `find ${eclipse} -name sdf2imp.jar` utils/
+      cp -Rv `find ${eclipse} -name make_permissive.jar` utils/
+      ant -f build.main.xml -Declipse.spoofaximp.jars=utils all
+      cd ..
+    done
+
+    mvn org.sonatype.tycho:maven-tycho-plugin:generate-poms -Dversion=${version}-SNAPSHOT -DgroupId=${name} -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags}
+    mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e
+  '';
+	      
+  installPhase = ''
+    ensureDir $out/nix-support
+    cp -Rv *update*site/target/site $out/
+    touch $out/site/index.html
+    echo "file site $out/site" >> $out/nix-support/hydra-build-products
+  '';
+	        
+  __noChroot = true;
+} )

From R.B.Vermaas at tudelft.nl  Fri Nov 26 10:57:44 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 26 Nov 2010 09:57:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21429 - hydra
Message-ID: <201011260957.oAQ9viqT019134@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Fri Nov 26 09:57:44 2010
New Revision: 21429
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21429&sc=1

Log:
remove debugs

Modified:
   hydra/spoofax-fun.nix

Modified: hydra/spoofax-fun.nix
==============================================================================
--- hydra/spoofax-fun.nix	Fri Nov 26 09:33:53 2010	(r21428)
+++ hydra/spoofax-fun.nix	Fri Nov 26 09:57:44 2010	(r21429)
@@ -33,8 +33,6 @@
     for d in */build.main.xml ; do
       header "Prebuilding `dirname $d`..."
       cd `dirname $d`
-      echo `pwd`
-      ls -l 
       mkdir -p utils 
       cp -Rv `find ${eclipse} -name strategoxt.jar` utils/
       cp -Rv `find ${eclipse} -name aster.jar` utils/

From R.B.Vermaas at tudelft.nl  Fri Nov 26 11:38:34 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 26 Nov 2010 10:38:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21430 - hydra
Message-ID: <201011261038.oAQAcYB3019745@proliant.st.ewi.tudelft.nl>

Author: rob
Date: Fri Nov 26 10:38:33 2010
New Revision: 21430
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21430&sc=1

Log:
spoofax-fun.nix: add eclipse to env, set stacksize

Modified:
   hydra/spoofax-fun.nix

Modified: hydra/spoofax-fun.nix
==============================================================================
--- hydra/spoofax-fun.nix	Fri Nov 26 09:57:44 2010	(r21429)
+++ hydra/spoofax-fun.nix	Fri Nov 26 10:38:33 2010	(r21430)
@@ -17,15 +17,16 @@
 with pkgs.lib;
 pkgs.stdenv.mkDerivation ( removeAttrs args ["pkgs"] // {
   name = "${name}-r${toString src.rev}";
-  inherit src;
+  inherit src eclipse;
     
-  buildInputs = [ pkgs.maven3 pkgs.ant ];
+  buildInputs = [ pkgs.maven3 pkgs.ant ] ++ optional (args ? buildInputs) args.buildInputs ;
 
   buildPhase = 
   let
     mvnFlags = "-Dmaven.repo.local=/tmp/m3";
   in ''
     export M2_REPO=/tmp/m3
+    ulimit -s unlimited
 
     export LOCALCLASSPATH="utils/aster.jar:utils/make_permissive.jar:utils/sdf2imp.jar:utils/strategoxt.jar"
     export ANT_OPTS="-Xss8m -Xmx2048m"

From L.C.L.Kats at tudelft.nl  Mon Nov 29 10:36:50 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 29 Nov 2010 09:36:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21431 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.aster/syntax
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib
	spoofax-imp/trunk/org.strategoxt.imp.editors.str...
Message-ID: <201011290936.oAT9aoKq009241@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: Mon Nov 29 09:36:49 2010
New Revision: 21431
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21431&sc=1

Log:
Minor syntax change to Stratego: module foo rules a:b->c is now a legal Stratego program (relaxed follow restriction to allow a -> directly after an identifier)

Replaced:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-Attributes.def
      - copied, changed from r21408, spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aster/syntax/Stratego-Attributes.def
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def
   strategoxt/trunk/stratego-front/syn/Stratego-Core-Identifiers.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aster/syntax/Stratego-Attributes.def
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aster/syntax/Stratego-Attributes.def	Fri Nov 26 10:38:33 2010	(r21430)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aster/syntax/Stratego-Attributes.def	Mon Nov 29 09:36:49 2010	(r21431)
@@ -4,6 +4,10 @@
 imports
   Stratego-Sugar
 
+exports %% RECOVERY RULES START HERE
+  lexical syntax
+      -> ";" {recover, cons("INSERTION")}
+
 exports
 
   sorts
@@ -746,7 +750,8 @@
     [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
 
   lexical restrictions
-    Id   -/- [a-zA-Z0-9\'\-\_\*]
+    Id   -/- [a-zA-Z0-9\'\_\*]
+    Id   -/- [\-].~[\>]
     LId  -/- [a-zA-Z0-9\'\-\_]
     LCID -/- [a-zA-Z0-9\'\-\_]
     UCID -/- [a-zA-Z0-9\'\-\_]
@@ -1079,4 +1084,4 @@
     "rewrite"
     "decorator"
     "decorators"
-    "attributes" -/- [a-zA-Z0-9\'\-\_]
\ No newline at end of file
+    "attributes" -/- [a-zA-Z0-9\'\-\_]

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-Attributes.def (from r21408, spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def	Tue Nov 23 16:32:51 2010	(r21408, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-Attributes.def	Mon Nov 29 09:36:49 2010	(r21431)
@@ -241,7 +241,6 @@
     Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
     Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
 
-    "proceed"                          -> Strategy {cons("ProceedNoArgs"), prefer}
     "proceed" "(" {Strategy "," }+ ")" -> Strategy {cons("Proceed"), prefer}
 
     "if" Strategy "then" Strategy 
@@ -711,7 +710,8 @@
     [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
 
   lexical restrictions
-    Id   -/- [a-zA-Z0-9\'\-\_\*]
+    Id   -/- [a-zA-Z0-9\'\_\*]
+    Id   -/- [\-].~[\>]
     LId  -/- [a-zA-Z0-9\'\-\_]
     LCID -/- [a-zA-Z0-9\'\-\_]
     UCID -/- [a-zA-Z0-9\'\-\_]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def	Fri Nov 26 10:38:33 2010	(r21430)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def	Mon Nov 29 09:36:49 2010	(r21431)
@@ -241,7 +241,6 @@
     Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
     Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
 
-    "proceed"                          -> Strategy {cons("ProceedNoArgs"), prefer}
     "proceed" "(" {Strategy "," }+ ")" -> Strategy {cons("Proceed"), prefer}
 
     "if" Strategy "then" Strategy 
@@ -711,7 +710,8 @@
     [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
 
   lexical restrictions
-    Id   -/- [a-zA-Z0-9\'\-\_\*]
+    Id   -/- [a-zA-Z0-9\'\_\*]
+    Id   -/- [\-].~[\>]
     LId  -/- [a-zA-Z0-9\'\-\_]
     LCID -/- [a-zA-Z0-9\'\-\_]
     UCID -/- [a-zA-Z0-9\'\-\_]

Modified: strategoxt/trunk/stratego-front/syn/Stratego-Core-Identifiers.sdf
==============================================================================
--- strategoxt/trunk/stratego-front/syn/Stratego-Core-Identifiers.sdf	Fri Nov 26 10:38:33 2010	(r21430)
+++ strategoxt/trunk/stratego-front/syn/Stratego-Core-Identifiers.sdf	Mon Nov 29 09:36:49 2010	(r21431)
@@ -23,7 +23,8 @@
     [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
 
   lexical restrictions
-    Id   -/- [a-zA-Z0-9\'\-\_\*]
+    Id   -/- [a-zA-Z0-9\'\_\*]
+    Id   -/- [\-].~[\>]
     LId  -/- [a-zA-Z0-9\'\-\_]
     LCID -/- [a-zA-Z0-9\'\-\_]
     UCID -/- [a-zA-Z0-9\'\-\_]

From tobivollebregt at gmail.com  Mon Nov 29 11:45:42 2010
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 29 Nov 2010 10:45:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21432 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor
Message-ID: <201011291045.oATAjgsU010358@proliant.st.ewi.tudelft.nl>

Author: tvo
Date: Mon Nov 29 10:45:41 2010
New Revision: 21432
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21432&sc=1

Log:
Spoofax/305: provide sdf editor services in .def files

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF.main.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF.main.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF.main.esv	Mon Nov 29 09:36:49 2010	(r21431)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF.main.esv	Mon Nov 29 10:45:41 2010	(r21432)
@@ -18,6 +18,6 @@
   description   : "Spoofax/IMP-generated editor for the SDF language"
   url           : http://strategoxt.org
                   
-  extensions    : sdf
+  extensions    : sdf, def
   table         : include/SDF.tbl
   start symbols : Module

From karltk at strategoxt.org  Mon Nov 29 17:04:32 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 29 Nov 2010 16:04:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21433 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests/basic
Message-ID: <201011291604.oATG4W0V015499@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Mon Nov 29 16:04:32 2010
New Revision: 21433
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21433&sc=1

Log:
* Added support for term (de)construction.

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/tests/basic/build_3.str
   strategoxt-javascript-backend/trunk/tests/basic/chars_1.str
   strategoxt-javascript-backend/trunk/tests/basic/dynrules_1.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Mon Nov 29 10:45:41 2010	(r21432)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Mon Nov 29 16:04:32 2010	(r21433)
@@ -80,14 +80,12 @@
 		return r;
 	case factory.TUPLE:
 	case factory.APPL:
-		print("TUPLE");
 		var l = factory.getSubtermCount(term);
 		var tmp = [];
 		var success = false;
 		var i;
 		for(i = 0; i < l; i++) {
 			var ot = factory.getSubterm(term, i); 
-			print("Z", factory.prettify(ot));
 			var nt = fun(ctx, ot);
 			if(nt === null) {
 				tmp.push(ot);
@@ -100,7 +98,6 @@
 		for(; i < l; i++) {
 			tmp.push(factory.getSubterm(term, i));
 		}
-		print(tmp.length);
 		if(success && termType == factory.APPL) {
 			var ctor = factory.getConstructor(term);
 			return factory.makeAppl(ctor, tmp);
@@ -138,7 +135,7 @@
 		return r;
 	case factory.TUPLE:
 	case factory.APPL:
-		throw "not implemented";
+		throw "not implemented all";
 		var l = factory.getSubtermCount(term);
 		var tmp = [];
 		var success = false;
@@ -189,7 +186,7 @@
 		return r;
 	case factory.TUPLE:
 	case factory.APPL:
-		throw "not implemented";
+		throw "not implemented some";
 		var l = factory.getSubtermCount(term);
 		var tmp = [];
 		var success = false;

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Mon Nov 29 10:45:41 2010	(r21432)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Mon Nov 29 16:04:32 2010	(r21433)
@@ -9,56 +9,99 @@
 };
 
 
-StrategoJS.SSL.SSL_fail = function(ctx, term) {
+StrategoJS.SSL.SSL_fail = function(ctx, currentTerm) {
 	return null;
 }
 
-StrategoJS.SSL.SSL_id = function(ctx, term) {
-	return term;
+StrategoJS.SSL.SSL_id = function(ctx, currentTerm) {
+	return currentTerm;
 }
 
-StrategoJS.SSL.SSL_stdin_stream = function(ctx, term) {
+StrategoJS.SSL.SSL_stdin_stream = function(ctx, currentTerm) {
 	return ctx.factory.makeAppl(StrategoJS.SSL._stdin, []);
 }
 
-StrategoJS.SSL.SSL_stdout_stream = function(ctx, term) {
+StrategoJS.SSL.SSL_stdout_stream = function(ctx, currentTerm) {
 	return ctx.factory.makeAppl(StrategoJS.SSL._stdout, []);
 }
 
-StrategoJS.SSL.SSL_stderr_stream = function(ctx, term) {
+StrategoJS.SSL.SSL_stderr_stream = function(ctx, currentTerm) {
 	return ctx.factory.makeAppl(StrategoJS.SSL._stderr, []);
 }
 
-StrategoJS.SSL.SSL_mkterm = function(ctx, term, ctorName, args) {
-	// FIXME find a factory
-	
-	if(ctorName === "[]") {
-		return StrategoJS.Term.makeListCons(args[0], args[1]);
+StrategoJS.SSL._makeString = function(factory, string) {
+	return factory.makeString(string);
+}
+
+StrategoJS.SSL._makeAppl = function(factory, ctorName, args) {
+	var tmp = [];
+	print("makeAppl");
+	print(ctorName);
+	print(factory.prettify(args));
+	while(!factory.isEmptyList(args)) {
+		print(args);
+		tmp.push(factory.head(args));
+		args = factory.tail(args);
+	}
+
+	print("willmake");
+	if(ctorName.length == 0) {
+		return factory.makeTuple(tmp);
+	} else {
+		var ctor = factory.makeCtor(ctorName, tmp.length);
+		print("ctor");
+		print(ctor);
+		return factory.makeAppl(ctor, tmp);
+	}
+}
+
+StrategoJS.SSL.SSL_mkterm = function(ctx, currentTerm, ctorTerm, args) {
+	var factory = ctx.factory;
+	print("SSL_mkterm");
+	print(ctorTerm);
+	print(factory.prettify(args));
+	switch(factory.termType(ctorTerm)) {
+	case factory.STRING:
+		// FIXME how to make a string?
+		var r = StrategoJS.SSL._makeAppl(factory, ctorTerm, args);
+		print("x");
+		print(r);
+		return r;
+	case factory.INT:
+	case factory.REAL:
+		return args[0];
+	case factory.LIST:
+		if(factory.termType(args[1]) == factory.LIST)
+			return args[1];
+		else
+			return null;
+	default:
+		return null;
 	}
-	
-	throw "not implemented;"
 }
 
-StrategoJS.SSL.SSL_addi = function(ctx, term, lhs, rhs) {
+
+
+StrategoJS.SSL.SSL_addi = function(ctx, currentTerm, lhs, rhs) {
 	return lhs + rhs;
 }
 
-StrategoJS.SSL.SSL_write_term_to_stream_text = function(ctx, term, stream, outputTerm) {
+StrategoJS.SSL.SSL_write_term_to_stream_text = function(ctx, currentTerm, stream, outputTerm) {
 	var ctor = ctx.factory.getConstructor(stream);
 	if(ctx.factory.ctorEquals(ctor, StrategoJS.SSL._stdout) || ctx.factory.ctorEquals(ctor, StrategoJS.SSL._stderr))
 		print(ctx.factory.prettify(outputTerm));
 	else
 		throw "SSL_write_term_to_stream_text not fully implemented; cannot write to arbitrary streams";
-	return term;
+	return currentTerm;
 }
 
-StrategoJS.SSL.SSL_is_string = function(ctx, term, arg) {
+StrategoJS.SSL.SSL_is_string = function(ctx, currentTerm, arg) {
 	if(ctx.factory.getTermType(arg) === ctx.factory.STRING)
 		return arg;
 	return null;
 }
 
-StrategoJS.SSL.SSL_fputs = function(ctx, term, string, stream) {
+StrategoJS.SSL.SSL_fputs = function(ctx, currentTerm, string, stream) {
 	var ctor = ctx.factory.getConstructor(stream);
 	if(ctx.factory.ctorEquals(ctor, StrategoJS.SSL._stdout) || ctx.factory.ctorEquals(ctor, StrategoJS.SSL._stderr))
 		print(string);
@@ -66,13 +109,34 @@
 		throw "SSL_fputs not fully implemented; cannot write to arbitrary streams";
 }
 
-StrategoJS.SSL.SSL_fputc = function(ctx, term, ch, stream) {
+StrategoJS.SSL.SSL_fputc = function(ctx, currentTerm, ch, stream) {
 	var ctor = ctx.factory.getConstructor(stream);
 	if(ctx.factory.ctorEquals(ctor, StrategoJS.SSL._stdout) || ctx.factory.ctorEquals(ctor, StrategoJS.SSL._stderr))
 		print(String.fromCharCode(ch));
 	else
 		throw "SSL_fputc not fully implemented; cannot write to arbitrary streams";
-	return term;
+	return currentTerm;
+}
+
+StrategoJS.SSL.SSL_get_constructor = function(ctx, currentTerm, term) {
+	return ctx.factory.getConstructor(term);
 }
 
+StrategoJS.SSL.SSL_get_arguments = function(ctx, currentTerm, term) {
+	var tmp = [];
+	var factory = ctx.factory;
+	switch(factory.termType(term)) {
+	case factory.LIST:
+		return term;
+	case factory.APPL:
+		var r = factory.makeEmptyList();
+		for(var i = factory.getSubtermCount(term) - 1; i >= 0; i--) {
+			r = factory.makeListCons(factory.getSubterm(term, i), r);
+		}
+		return r;
+	default:
+		throw "not implemented SSL_get_arguments fully";
+	}
+	
+}
 

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-construction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Mon Nov 29 10:45:41 2010	(r21432)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-construction.str	Mon Nov 29 16:04:32 2010	(r21433)
@@ -83,7 +83,7 @@
         js-CheckBuild :+=
           ( $[ var [x]; ]
           , ${
-               {x} = StrategoJS.SSL.SSL_mkterm(term, "[]", [{e_t1}, {e_t2}]);
+               {x} = StrategoJS.SSL.SSL_mkterm(ctx, term, {e_t1}, {e_t2});
                if ({x} == null)
                  break {feil};
             })

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Mon Nov 29 10:45:41 2010	(r21432)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Mon Nov 29 16:04:32 2010	(r21433)
@@ -62,9 +62,9 @@
   translate-Match(|s,f) :
     Match(Explode(t1, t2), e') ->
     ${ 
-      var {x_cons} = ctx.invokePrimitive("SSL_get_constructor", term, [], [{e}]);
+      var {x_cons} = StrategoJS.SSL.SSL_get_constructor(ctx, term, {e});
       {<translate-Match(|s,f)> Match(t1, ReadFrom(x_cons))};
-      var {x_args} = ctx.invokePrimitive("SSL_get_arguments", term, [], [{e}]);
+      var {x_args} = StrategoJS.SSL.SSL_get_arguments(ctx, term, {e});
       {<translate-Match(|s,f)> Match(t2, ReadFrom(x_args))};
      }
   with

Modified: strategoxt-javascript-backend/trunk/tests/basic/build_3.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/basic/build_3.str	Mon Nov 29 10:45:41 2010	(r21432)
+++ strategoxt-javascript-backend/trunk/tests/basic/build_3.str	Mon Nov 29 16:04:32 2010	(r21433)
@@ -10,8 +10,8 @@
 strategies
 
   main =
-    !""#([1,2]) => (1,2);
-    !Foo(1,2); to-foo2; debug => Foo2(1,2)
+    !""#([1,2]) ; debug(!"11") => (1,2) ; debug(!"22");
+    !Foo(1,2); to-foo2; debug(!"33") => Foo2(1,2)
   
   to-foo2:
     _#(kids) -> "Foo2"#(kids)

Modified: strategoxt-javascript-backend/trunk/tests/basic/chars_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/basic/chars_1.str	Mon Nov 29 10:45:41 2010	(r21432)
+++ strategoxt-javascript-backend/trunk/tests/basic/chars_1.str	Mon Nov 29 16:04:32 2010	(r21433)
@@ -1,17 +1,18 @@
 module chars_1
 
 imports
-  libstratego-lib
-  libstratego-sglr
+  emu-libstratego-lib
+  //libstratego-sglr
 
 rules
 
-  main =
-    !"??";
-    explode-string;
-    implode-string; debug => "??";
+  main = !"FIXME: must implement libsglr for javascript"
+
+//    !"??";
+//    explode-string;
+//    implode-string; debug => "??";
     
-    !"module foo rules bar = !\"??\"";
-    parse-string(|<import-term(Stratego-Sugar.tbl); open-parse-table>);
-    debug;
-    oncetd(?"\"??\"")
+//    !"module foo rules bar = !\"??\"";
+//    parse-string(|<import-term(Stratego-Sugar.tbl); open-parse-table>);
+//    debug;
+//    oncetd(?"\"??\"")

Modified: strategoxt-javascript-backend/trunk/tests/basic/dynrules_1.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/basic/dynrules_1.str	Mon Nov 29 10:45:41 2010	(r21432)
+++ strategoxt-javascript-backend/trunk/tests/basic/dynrules_1.str	Mon Nov 29 16:04:32 2010	(r21433)
@@ -1,7 +1,7 @@
 module dynrules_1
 
 imports
-  libstratego-lib
+  emu-libstratego-lib
 
 rules
 

From karltk at strategoxt.org  Mon Nov 29 17:30:56 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 29 Nov 2010 16:30:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21434 -
	strategoxt-javascript-backend/trunk/src/javascript
Message-ID: <201011291630.oATGUuiu015881@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Mon Nov 29 16:30:56 2010
New Revision: 21434
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21434&sc=1

Log:
* Fixed SRTS_one.

Modified:
   strategoxt-javascript-backend/trunk/src/javascript/srts.js
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/src/javascript/terms.js

Modified: strategoxt-javascript-backend/trunk/src/javascript/srts.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/srts.js	Mon Nov 29 16:04:32 2010	(r21433)
+++ strategoxt-javascript-backend/trunk/src/javascript/srts.js	Mon Nov 29 16:30:56 2010	(r21434)
@@ -48,14 +48,13 @@
 
 StrategoJS.SRTS.SRTS_one = function(ctx, term, fun) {
 	print("SRTS_one");
-	print(ctx.factory.prettify(term));
 	var factory = ctx.factory;
 	var termType = factory.termType(term)
 	switch(termType) {
 	case factory.REAL:
 	case factory.INT:
 	case factory.STRING:
-		return fun(ctx, term);
+		return null;
 	case factory.LIST:
 		var tmp = [];
 		var success = false;
@@ -92,6 +91,7 @@
 			} else {
 				success = true;
 				tmp.push(nt);
+				i++; // for(;;i++) is exec'ed *after* the loop body, compensate 
 				break;
 			}
 		}

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Mon Nov 29 16:04:32 2010	(r21433)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Mon Nov 29 16:30:56 2010	(r21434)
@@ -140,3 +140,6 @@
 	
 }
 
+StrategoJS.SSL.SSL_get_list_length = function(ctx, currentTerm, term) {
+	return ctx.factory.getSubtermCount(term);
+}
\ No newline at end of file

Modified: strategoxt-javascript-backend/trunk/src/javascript/terms.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/terms.js	Mon Nov 29 16:04:32 2010	(r21433)
+++ strategoxt-javascript-backend/trunk/src/javascript/terms.js	Mon Nov 29 16:30:56 2010	(r21434)
@@ -530,7 +530,14 @@
 			},
 
 			makeAppl : function(ctor, args) {
-				StrategoJS.assert("ctor arity != argument count", ctor.arity == args.length);
+				if(ctor.arity != args.length) {
+					print("blowup");
+					print(ctor.name+"/"+ctor.arity)
+					for(var x = 0; x < args.length; x++) {
+						print(factory.prettify(args[x]));
+					}
+				}
+				StrategoJS.assert("ctor arity (" + ctor.arity + ") != argument count (" + args.length + ")", ctor.arity == args.length);
 				var r = {
 					name : ctor.name, 
 					args : [].concat(args),

From karltk at strategoxt.org  Mon Nov 29 21:25:10 2010
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 29 Nov 2010 20:25:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r21435 - in
	strategoxt-javascript-backend/trunk: src/javascript
	src/stratego tests/basic tests/testlib
Message-ID: <201011292025.oATKPAKb019206@proliant.st.ewi.tudelft.nl>

Author: karltk
Date: Mon Nov 29 20:25:09 2010
New Revision: 21435
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=21435&sc=1

Log:
* Baby steps towards dynamic rule support.

Added:
   strategoxt-javascript-backend/trunk/tests/basic/dynrules_0.str
      - copied, changed from r21433, strategoxt-javascript-backend/trunk/tests/basic/dynrules_1.str
Modified:
   strategoxt-javascript-backend/trunk/src/javascript/ssl.js
   strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
   strategoxt-javascript-backend/trunk/src/stratego/s2js.str
   strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
   strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str

Modified: strategoxt-javascript-backend/trunk/src/javascript/ssl.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Mon Nov 29 16:30:56 2010	(r21434)
+++ strategoxt-javascript-backend/trunk/src/javascript/ssl.js	Mon Nov 29 20:25:09 2010	(r21435)
@@ -142,4 +142,93 @@
 
 StrategoJS.SSL.SSL_get_list_length = function(ctx, currentTerm, term) {
 	return ctx.factory.getSubtermCount(term);
+}
+
+StrategoJS.SSL.SSL_perror = function(ctx, currentTerm, term) {
+	var msg = ctx.factory.termType(term) == ctx.factory.STRING ? term : "(no details on this error; perror not supported)";
+	print("ERROR: " + msg);
+	return currentTerm;
+}
+
+StrategoJS.SSL.SSL_is_real = function(ctx, currentTerm, term) {
+	return ctx.factory.termType(term) == ctx.factory.REAL;
+}
+
+StrategoJS.SSL._hashtables = [{}];
+StrategoJS.SSL._indexedSets = [];
+StrategoJS.SSL._counter = 0;
+
+function _makeIndexedSet() {
+	return {
+		_counter : 0,
+		_hash : {},
+		getIndex: function(key) {
+			return this._hash[key]; 
+		},
+		containsKey: function(key) {
+			return this._hash[key] !== undefined;
+		},
+		put: function(key) {
+			var idx = this._counter++;
+			this._hash[key] = idx; 
+			return idx;
+		}
+	}
+}
+
+function _makeHashtable() {
+	return {};
+}
+
+StrategoJS.SSL.SSL_dynamic_rules_hashtable = function(ctx, currentTerm) {
+	print("SSL_dynamic_rules_hashtable");
+	return 1;
+}
+
+StrategoJS.SSL.SSL_hashtable_get = function(ctx, currentTerm, tableReference, key) {
+	print("SSL_hashtable_get : " + tableReference);
+	var tbl = StrategoJS.SSL._hashtables[tableReference];
+	if(!tbl)
+		return null;
+	var keyAsString = ctx.factory.prettify(key);
+	return tbl[keyAsString] || null;
+}
+
+StrategoJS.SSL.SSL_indexedSet_create = function(ctx, currentTerm, initialSize, maxLoad) {
+	print("SSL_indexedSet_create");
+	StrategoJS.SSL._indexedSets.push(_makeIndexedSet());
+	return StrategoJS.SSL._indexedSets.length - 1;
+}
+
+StrategoJS.SSL.SSL_indexedSet_put = function(ctx, currentTerm, strategy, setIndex, key) {
+	var set = StrategoJS.SSL._indexedSets[setIndex];
+	var keyAsString = ctx.factory.prettify(key);
+	print("SSL_indexedSet_put " + setIndex + " " + keyAsString);
+	if(set.containsKey(keyAsString))
+		return strategy(set.getIndex(keyAsString));
+	else
+		return set.put(keyAsString);
+}
+
+StrategoJS.SSL.SSL_indexedSet_getIndex = function(ctx, currentTerm, setIndex, key) {
+	var set = StrategoJS.SSL._indexedSets[setIndex];
+	var keyAsString = ctx.factory.prettify(key);
+	print("SSL_indexedSet_getIndex " + setIndex + " " + keyAsString);
+	var r = set.getIndex(keyAsString);
+	print(r);
+	return r === undefined ? null : r;
+}
+
+StrategoJS.SSL.SSL_hashtable_create = function(ctx, currentTerm, initialSize, maxLoad) {
+	print("SSL_hashtable_create");
+	StrategoJS.SSL._hashtables.push(_makeHashtable());
+	return StrategoJS.SSL._hashtables.length - 1;
+}
+
+StrategoJS.SSL.SSL_hashtable_put = function(ctx, currentTerm, hashIndex, key, value) {
+	var hash = StrategoJS.SSL._hashtables[hashIndex];
+	var keyAsString = ctx.factory.prettify(key);
+	print("SSL_hashtable_put " + hashIndex + " " + keyAsString);
+	hash[keyAsString] = value;
+	return hashIndex;
 }
\ No newline at end of file

Modified: strategoxt-javascript-backend/trunk/src/javascript/strategojs.js
==============================================================================
--- strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Mon Nov 29 16:30:56 2010	(r21434)
+++ strategoxt-javascript-backend/trunk/src/javascript/strategojs.js	Mon Nov 29 20:25:09 2010	(r21435)
@@ -6,6 +6,16 @@
 
 StrategoJS = {}
 
+// Stolen from Crockford
+
+if (typeof Object.create !== 'function') {
+    Object.create = function (o) {
+        function F() {}
+        F.prototype = o;
+        return new F();
+    };
+}
+
 var dummy = function() {
 	var knownLibraries = [];
 	

Modified: strategoxt-javascript-backend/trunk/src/stratego/s2js.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Mon Nov 29 16:30:56 2010	(r21434)
+++ strategoxt-javascript-backend/trunk/src/stratego/s2js.str	Mon Nov 29 20:25:09 2010	(r21435)
@@ -172,7 +172,7 @@
   		IsStrategyArg, CurrentLiftedFrame:
 //  		js-CheckBuild, js-CheckBuild, IsLiftedTVar,
 //  		IsLiftedSVar, LiftedTVars, LiftedSVars:
-  			
+  		
   	    (s'*, [])         := <translate-params> s*
   	  ; (t'*, bstm-init*) := <translate-params> t*
   	  ; formal*           := <conc> (s'*, t'*)
@@ -187,14 +187,14 @@
   	|}  	  	
 
   translate-params = 
-  	unzip(translate-param)
+  	unzip(translate-param <+ debug(!"Bombed : "))
   ; (id, concat)
     
   translate-param: 
   	VarDec(x{}, ConstType(_)) -> ($[[x]], [])
   	
   translate-param:
-  	VarDec(x{Offset(_), Escapes()}, ConstType(_)) -> ($[[x']], $[var ref_[x] = termRef([x'])])
+  	VarDec(x{Offset(_), Escapes()}, ConstType(_)) -> ($[[x]], []) //($[[x']], [$[var ref_[x] = termRef([x']);]])
   with
   	x' := <conc-strings> ("ref_", x)
   	
@@ -248,8 +248,10 @@
   	CallT(SVar(x), s*, t*) -> 
   	$[
         term = [x](ctx, term [args]);	
-        if(term == null) 
+        if(term == null) {
+        	print("[feil]"); 
             break [feil];
+        }
   	]
   with
       s'* := <map(lift-strategy-to-function)> s*
@@ -290,7 +292,10 @@
     PrimT(f, s*, t*) ->
     $[ 
       term = StrategoJS.SSL.[f](ctx, term [args]);
-      if (term == null) break [feil];
+      if (term == null) {
+      	print("[feil]");
+      	break [feil];
+      }
     ]
     with
         s'*  := <map(lift-strategy-to-function)> s*
@@ -303,7 +308,7 @@
   	Id() -> "/* id */"
   	
   translate-Fail(|s, feil):
-  	Fail() -> $[ break [feil]; ]
+  	Fail() -> $[ {?print("[feil]"); break [feil]; } ]
   	
   translate-Override(|s,f) = fail // TODO (karltk)
   

Modified: strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str
==============================================================================
--- strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Mon Nov 29 16:30:56 2010	(r21434)
+++ strategoxt-javascript-backend/trunk/src/stratego/term-deconstruction.str	Mon Nov 29 20:25:09 2010	(r21435)
@@ -37,8 +37,10 @@
   translate-Match(|s,feil) :
     Match(Var(x){"bound"}, ReadFrom(e)) ->
     $[
-      if ([e] != [e_var] && !factory.match([e_var],[e])) 
+      if ([e] != [e_var] && !factory.match([e_var],[e])) {
+      	print("[feil]"); 
         break [feil];
+      }
      ]
     with
       e_var := <js-VarToReadRef> Var(x)
@@ -49,6 +51,7 @@
       if ([e_var] == null) {
         [stm_assign]
       }?else if ([e_var] != [e] && ![e_var].match([e])) {
+      	print("[feil]");
         break [feil];
       }
     ]
@@ -100,9 +103,10 @@
   translate-Match(|s,feil) :
     Match(Str(str), e') -> 
     $[
-      if (factory.termType([e]) != factory.STRING
-         || "[e_str]" !== [e])
+      if (factory.termType([e]) != factory.STRING || "[e_str]" !== [e]) {
+      	print("[feil]");
         break [feil];
+      }
     ]
   with
       !e' => ReadFrom(e)
@@ -111,9 +115,10 @@
   translate-Match(|s,feil) :
     Match(Int(i), e') -> 
     $[
-      if (factory.termType([e]) !== factory.INT
-         || [e_int] !==  [e])
+      if (factory.termType([e]) !== factory.INT || [e_int] !==  [e]) {
+        print("[feil]");
         break [feil];
+      }
     ]
   with
       !e' => ReadFrom(e)
@@ -122,9 +127,10 @@
   translate-Match(|s,feil) :
     Match(Real(r), e') -> 
     $[
-      if (factory.termType([e]) !== factory.REAL 
-          || [e_real] !== [e])
+      if (factory.termType([e]) !== factory.REAL || [e_real] !== [e]) {
+      	print("[feil]");
         break [feil];
+      }
     ]
   with
       !e' => ReadFrom(e)
@@ -136,8 +142,10 @@
   translate-Match(|s,feil) :
     Match(op at Op(c, ts), ReadFrom(e)) ->
     $[
-      if (factory.termType([e]) != factory.APPL || [e_nomatch])
+      if (factory.termType([e]) != factory.APPL || [e_nomatch]) {
+      	print("[feil]");
         break [feil];
+      }
       [match-args]
     ]
   where
@@ -157,8 +165,10 @@
   translate-Match(|s,feil) :
     Match(op at Op(c, ts), ReadFrom(e)) ->
     $[
-      if (factory.termType([e]) !== factory.TUPLE || factory.getSubtermCount([e]) !== [i])
+      if (factory.termType([e]) !== factory.TUPLE || factory.getSubtermCount([e]) !== [i]) {
+      	print("[feil]");
         break [feil];
+      }
       [match-args]
     ]
   where
@@ -202,15 +212,19 @@
   translate-Match(|s,feil) :
     Match(Op("Nil", []), ReadFrom(e)) ->
     $[
-      if (factory.termType([e]) !== factory.LIST || !factory.isEmptyList([e]))
+      if(factory.termType([e]) !== factory.LIST || !factory.isEmptyList([e])) {
+      	print("[feil]");
         break [feil];
+      }
     ]
 
   translate-Match(|s,feil) :
     Match(Op("Cons", [hd, tl]), ReadFrom(e)) ->
     $[
-      if (factory.termType([e]) !== factory.LIST || factory.isEmptyList([e]))
-          break [feil];
+      if(factory.termType([e]) !== factory.LIST || factory.isEmptyList([e])) {
+      	print("[feil]");
+        break [feil];
+      }
       [match-args]
     ]
   with 

Copied and modified: strategoxt-javascript-backend/trunk/tests/basic/dynrules_0.str (from r21433, strategoxt-javascript-backend/trunk/tests/basic/dynrules_1.str)
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/basic/dynrules_1.str	Mon Nov 29 16:04:32 2010	(r21433, copy source)
+++ strategoxt-javascript-backend/trunk/tests/basic/dynrules_0.str	Mon Nov 29 20:25:09 2010	(r21435)
@@ -6,6 +6,9 @@
 rules
 
   main =
-     !Some(1); ?x; rules(Rule: Some(2) -> 2 Rule: x -> 1)
+     !Some(1); ?x 
+   ; debug(!"10")
+   ; rules(Rule: Some(2) -> 2)
+   ; debug(!"11")
    ; !Some(2); Rule; debug
-   ; !Some(1); Rule; debug
+

Modified: strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str
==============================================================================
--- strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str	Mon Nov 29 16:30:56 2010	(r21434)
+++ strategoxt-javascript-backend/trunk/tests/testlib/emu-libstratego-lib.str	Mon Nov 29 20:25:09 2010	(r21435)
@@ -1,5 +1,7 @@
 module emu-libstratego-lib
-
+imports
+	lang/dynamic-rules.str
+	
 signature
   constructors
     : ()
@@ -96,3 +98,9 @@
   inc = <add>  (<id>, 1)
   
   add  = ?(x,y); (prim("SSL_addi",x,y) <+ prim("SSL_addr",x,y))
+   
+  perror = ?s; prim("SSL_perror", s)
+  
+  is-real = ?x; prim("SSL_is_real", x)
+  
+  report-run-time = <fprintnl> (stderr(), ["report-run-time not supported"])

