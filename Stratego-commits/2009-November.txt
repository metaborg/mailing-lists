From L.C.L.Kats at tudelft.nl  Mon Nov  2 16:53:15 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 02 Nov 2009 15:53:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20190 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens
Message-ID: <200911021553.nA2FrFWH008802@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-02 15:53:15 +0000 (Mon, 02 Nov 2009)
New Revision: 20190

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20190&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ColorerService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens/SGLRTokenizer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_implode_string.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/CoarseGrainedRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedRepair.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java

Log:
- Black color for most(?) syntax errors
- Fixed "Syntax error: insert 'token'"  messages


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_implode_string.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_implode_string.java	2009-10-29 18:04:29 UTC (rev 20189)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_implode_string.java	2009-11-02 15:53:15 UTC (rev 20190)
@@ -28,13 +28,19 @@
         if(!Tools.isTermList(t))
             return false;
 
-        StringBuilder result = new StringBuilder(targs.length);
+        String result = call((IStrategoList) t);
+        env.setCurrent(env.getFactory().makeString(result));
+        return true;
+    }
 
-        for (IStrategoList l = (IStrategoList) t; !l.isEmpty(); l = l.tail()) {
-            IStrategoInt v = (IStrategoInt) l.head();
-            result.append((char)v.intValue());
+    public static String call(IStrategoList chars) {
+        StringBuilder result = new StringBuilder(chars.size());
+
+        while (!chars.isEmpty()) {
+            IStrategoInt v = (IStrategoInt) chars.head();
+            result.append((char) v.intValue());
+            chars = chars.tail();
         }
-        env.setCurrent(env.getFactory().makeString(result.toString()));
-        return true;
+        return result.toString();
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/CoarseGrainedRecovery.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/CoarseGrainedRecovery.java	2009-10-29 18:04:29 UTC (rev 20189)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/CoarseGrainedRecovery.java	2009-11-02 15:53:15 UTC (rev 20190)
@@ -50,7 +50,7 @@
         recoverNodes.add(rn);   
         if(recoverNodes.size()>MAX_RECOVER_NODES) //removing early inserted positions improves non-error parsing performance
         { 
-            int halfMax = MAX_RECOVER_NODES/2;
+            final int halfMax = MAX_RECOVER_NODES/2;
             ArrayList<RecoverNode> cleanedPositions = new ArrayList<RecoverNode>();
             cleanedPositions.addAll(recoverNodes.subList(halfMax, recoverNodes.size()-1));                
             recoverNodes=cleanedPositions;                

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedRepair.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedRepair.java	2009-10-29 18:04:29 UTC (rev 20189)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedRepair.java	2009-11-02 15:53:15 UTC (rev 20190)
@@ -11,6 +11,10 @@
 
 public class FineGrainedRepair {
     
+    private static final int MAX_RECOVERIES_PER_REGION = 3;
+    
+    private static final int RECOVERY_COUNT_REGION_SIZE = 25;
+
     private SGLR myParser;
     private ArrayList<IndentInfo> newLinePoints; 
     private int indexLineRecovery;
@@ -23,8 +27,8 @@
     
     public FineGrainedRepair(SGLR sglr){
         myParser=sglr;  
-        myParser.setMaxNrOfRecoveries(3);
-        myParser.setLengthAvoidCheck(25);
+        myParser.setMaxNrOfRecoveries(MAX_RECOVERIES_PER_REGION);
+        myParser.setLengthAvoidCheck(RECOVERY_COUNT_REGION_SIZE);
         newLinePoints=new ArrayList<IndentInfo>();
         indexLineRecovery=-1;
         indentComparer=new IndentationDisambiguator();

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2009-10-29 18:04:29 UTC (rev 20189)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2009-11-02 15:53:15 UTC (rev 20190)
@@ -645,7 +645,7 @@
     private void reducer(Frame st0, State s, Production prod, List<IParseNode> kids, Path path) throws IOException {
         int length = path.getLength();        
         int numberOfRecoveries = calcRecoverCount(prod, path); 
-        if(fineGrainemode && calcRecoverCountResricted(prod, path) > maxNrOfRecoveries)
+        if(fineGrainemode && calcRecoverCountRestricted(prod, path) > maxNrOfRecoveries)
             return;
         IParseNode t = prod.apply(kids);
         Frame st1; 
@@ -787,7 +787,7 @@
         return numberOfRecoveries;
     }
     
-    private int calcRecoverCountResricted(Production prod, Path path) {
+    private int calcRecoverCountRestricted(Production prod, Path path) {
         int numberOfRecoveries = path.getRecoverCount(lengthAvoidCheck);
         if(prod.isRecoverProduction())
         {

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str	2009-10-29 18:04:29 UTC (rev 20189)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str	2009-11-02 15:53:15 UTC (rev 20190)
@@ -22,12 +22,18 @@
 
 // Example ", name, " program
 
-entity Foo {
-  bar : String
-  baz : String
+entity User {
+  name     : String
+  password : String
+  homepage : URL
 }
 
-entity Qux {
-  foo : Foo
+entity BlogPosting {
+  poster : User
+  body   : String
+}
+
+entity URL {
+  location : String
 }"
 )
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-trans.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-trans.str	2009-10-29 18:04:29 UTC (rev 20189)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-trans.str	2009-11-02 15:53:15 UTC (rev 20190)
@@ -5,7 +5,7 @@
 
 strategies
   
-  trans-module-name =
+  trans-module-name = // TODO: move "undefined" type error to x subterm? remove/fix x_declaration hack?
      get-sdf-main-module;
      lower-case;
      cify;
@@ -94,13 +94,13 @@
   /**
    * Reports an error if an entity is defined more than once.
    * This constraint is implemented by testing if the \"bag\" of
-   * all entities x is a list with at least two items.
+   * all entities x is not an empty list.
    * This error is reported on the entity name x.
    */
   constraint-error:
     Entity(x, _) -> (x, \"Duplicate entity name\")
     where
-      <bagof-GetEntity> x => [_, _ | _]
+      not(<bagof-GetEntity> x => [])
   
   /**
    * Reports a warning if an entity name does not start with a capital.
@@ -138,4 +138,4 @@
   Property : ID * Type           -> Property
   Type     : ID                  -> Type
 "
-)
\ No newline at end of file
+)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ColorerService.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ColorerService.sdf	2009-10-29 18:04:29 UTC (rev 20189)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ColorerService.sdf	2009-11-02 15:53:15 UTC (rev 20190)
@@ -38,7 +38,7 @@
     "keyword"    -> TokenKindName {cons("TK_KEYWORD")}
     "operator"   -> TokenKindName {cons("TK_OPERATOR")}
     "var"        -> TokenKindName {cons("TK_VAR")}
-    "junk"       -> TokenKindName {cons("TK_JUNK")}
+    "error"      -> TokenKindName {cons("TK_ERROR")}
     "unknown"    -> TokenKindName {cons("TK_UNKNOWN")}
     
                     -> Font {cons("NORMAL")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java	2009-10-29 18:04:29 UTC (rev 20189)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java	2009-11-02 15:53:15 UTC (rev 20190)
@@ -81,7 +81,7 @@
 					(startSymbol == null ? "" : startSymbol),
 					"-2"
 			};
-			caller.call(commandArgs, null, System.out, System.err);
+			caller.call(commandArgs, new String[0], null, System.out, System.err);
 			
 			ATermAppl result = (ATermAppl) factory.readFromFile(outputFile.getAbsolutePath());
 			

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-10-29 18:04:29 UTC (rev 20189)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-11-02 15:53:15 UTC (rev 20190)
@@ -1,6 +1,10 @@
 package org.strategoxt.imp.runtime.parser;
 
 import static org.spoofax.jsglr.Term.*;
+
+import java.util.ArrayList;
+import java.util.List;
+
 import lpg.runtime.IToken;
 
 import org.eclipse.core.resources.IMarker;
@@ -14,9 +18,11 @@
 import org.strategoxt.imp.runtime.parser.ast.AsfixImploder;
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
 import org.strategoxt.imp.runtime.parser.tokens.SGLRTokenizer;
+import org.strategoxt.imp.runtime.parser.tokens.TokenKind;
 
 import aterm.ATerm;
 import aterm.ATermAppl;
+import aterm.ATermInt;
 import aterm.ATermList;
 
 /**
@@ -63,6 +69,8 @@
 	private int offset;
 	
 	private boolean inLexicalContext;
+	
+	private List<Runnable> errorReports = new ArrayList<Runnable>(); // HACK
 
 	public ParseErrorHandler(ISourceInfo sourceInfo) {
 		this.sourceInfo = sourceInfo;
@@ -93,8 +101,9 @@
 	/**
 	 * Report WATER + INSERT errors from parse tree
 	 */
-	public void reportNonFatalErrors(SGLRTokenizer tokenizer, ATerm top) {
+	public void gatherNonFatalErrors(SGLRTokenizer tokenizer, ATerm top) {
 		try {
+			errorReports.clear();
 			offset = 0;
 			reportSkippedFragments(tokenizer);
 			ATermAppl asfix = termAt(top, 0);
@@ -103,6 +112,12 @@
 			reportError(tokenizer, e);
 		}
 	}
+	
+	public void applyMarkers() {
+		for (Runnable marker : errorReports) {
+			marker.run();
+		}
+	}
 
     /**
      * Report recoverable errors (e.g., inserted brackets).
@@ -145,15 +160,19 @@
 		//post visit: report error				
 		if (isErrorProduction(attrs, WATER)) {
 			IToken token = tokenizer.makeErrorToken(startOffset, offset - 1);
+			tokenizer.changeTokenKinds(startOffset, offset - 1, TokenKind.TK_ERROR);
 			reportErrorAtTokens(token, token, "Syntax error, '" + token + "' not expected here");
 		} else if (isErrorProduction(attrs, INSERT_END)) {
 			IToken token = tokenizer.makeErrorToken(startOffset, offset - 1);
+			tokenizer.changeTokenKinds(startOffset, offset - 1, TokenKind.TK_ERROR);
 			reportErrorAtTokens(token, token, "Syntax error, Closing of '" + token + "' is expected here");
 		} else if (isErrorProduction(attrs, INSERT)) {
 			IToken token = tokenizer.makeErrorTokenSkipLayout(startOffset, offset + 1, outerStartOffset2);
 			String inserted = "token";
-			if (rhs.getName() == "lit") {
+			if (rhs.getName().equals("lit")) {
 				inserted = applAt(rhs, 0).getName();
+			} else if (rhs.getName().equals("char-class")) {
+				inserted = toString(listAt(rhs, 0));
 			}
 			if (token.getLine() == tokenizer.getLexStream().getLine(outerStartOffset2) && !token.toString().equals(inserted)) {
 				reportErrorAtTokens(token, token, "Syntax error, expected: '" + inserted + "'");
@@ -167,6 +186,19 @@
 		if (lexicalStart) inLexicalContext = false;
 	}
 	
+	private static String toString(ATermList chars) {
+		// TODO: move to SSL_implode_string.call() ?
+        StringBuilder result = new StringBuilder(chars.getLength());
+
+        while (chars.getFirst() != null) {
+        	ATermInt v = (ATermInt) chars.getFirst();
+            result.append((char) v.getInt());
+            chars = chars.getNext();
+        }
+        
+        return result.toString();
+    }
+	
 	private void reportAmbiguity(SGLRTokenizer tokenizer, ATermAppl amb, int startOffset) {
 		if (!inLexicalContext && hasContextFreeNode(amb)) {
 			IToken token = tokenizer.makeErrorToken(startOffset, offset - 1);
@@ -206,6 +238,7 @@
 						break;
 				}
 				IToken token = tokenizer.makeErrorToken(beginSkipped, endSkipped);
+				tokenizer.changeTokenKinds(beginSkipped, endSkipped, TokenKind.TK_ERROR);
 				reportErrorAtTokens(token, token, "Could not parse this fragment");
 			} else if (c == UNEXPECTED_EOF_CHAR) {
 				// Recovered using a forced reduction
@@ -219,7 +252,8 @@
 		int treeEnd = tokenizer.getParseStream().getTokenAt(tokenizer.getParseStream().getStreamLength() - 1).getEndOffset();
 		if (treeEnd < inputChars.length) {
 			IToken token = tokenizer.makeErrorToken(treeEnd + 1, inputChars.length);
-			reportErrorAtTokens(token, token, "Could not parse this fragment");
+			reportErrorAtTokens(token, token, "Could not parse the remainder of this file");
+			tokenizer.changeTokenKinds(treeEnd + 1, inputChars.length, TokenKind.TK_ERROR);
 		}
 	}
 	
@@ -251,24 +285,30 @@
 		reportErrorAtFirstLine(message);
 	}
 	
-	private void reportErrorAtTokens(IToken left, IToken right, String message) {
+	private void reportErrorAtTokens(final IToken left, final IToken right, String message) {
 		// UNDONE: Using IMP message handler
 		// TODO: Cleanup - remove messages field and related code
 		//messages.handleSimpleMessage(
 		// 		message, max(0, left.getStartOffset()), max(0, right.getEndOffset()),
 		// 		left.getColumn(), right.getEndColumn(), left.getLine(), right.getEndLine());
 		
-		if (!isRecoveryAvailable)
-			message += " (recovery unavailable)";
+		final String message2 = isRecoveryAvailable ? message : message + " (recovery unavailable)";
 		
-		handler.addMarker(sourceInfo.getResource(), left, right, message, IMarker.SEVERITY_ERROR);
+		errorReports.add(new Runnable() {
+			public void run() {
+				handler.addMarker(sourceInfo.getResource(), left, right, message2, IMarker.SEVERITY_ERROR);
+			}
+		});
 	}
 	
 	private void reportErrorAtFirstLine(String message) {
-		if (!isRecoveryAvailable)
-			message += " (recovery unavailable)";
+		final String message2 = isRecoveryAvailable ? message : message + " (recovery unavailable)";
 		
-		handler.addMarkerFirstLine(sourceInfo.getResource(), message, IMarker.SEVERITY_ERROR);
+		errorReports.add(new Runnable() {
+			public void run() {
+				handler.addMarkerFirstLine(sourceInfo.getResource(), message2, IMarker.SEVERITY_ERROR);
+			}
+		});
 	}	
 	
 	private static boolean isErrorProduction(ATermAppl attrs, String consName) {		

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-10-29 18:04:29 UTC (rev 20189)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-11-02 15:53:15 UTC (rev 20190)
@@ -188,9 +188,10 @@
 				//
 				// TODO: Consider using Display.asyncExec for reporting errors;
 				//       this could be integrated into the AstMessageHandler class!
+				errorHandler.setRecoveryAvailable(true);
+				errorHandler.gatherNonFatalErrors(parser.getTokenizer(), asfix);
 				errorHandler.clearErrors();
-				errorHandler.setRecoveryAvailable(true);
-				errorHandler.reportNonFatalErrors(parser.getTokenizer(), asfix);
+				errorHandler.applyMarkers();
 			}
 				
 			Debug.stopTimer("File parsed: " + filename);
@@ -200,26 +201,32 @@
 			errorHandler.clearErrors();
 			errorHandler.setRecoveryAvailable(false);
 			errorHandler.reportError(parser.getTokenizer(), e);
+			errorHandler.applyMarkers();
 		} catch (TokenExpectedException e) {
 			errorHandler.clearErrors(); // (must not be synchronized; uses workspace lock)
 			errorHandler.reportError(parser.getTokenizer(), e);
+			errorHandler.applyMarkers();
 		} catch (BadTokenException e) {
 			errorHandler.clearErrors();
 			errorHandler.setRecoveryAvailable(false);
 			errorHandler.reportError(parser.getTokenizer(), e);
+			errorHandler.applyMarkers();
 		} catch (SGLRException e) {
 			errorHandler.clearErrors();
 			errorHandler.setRecoveryAvailable(false);
 			errorHandler.reportError(parser.getTokenizer(), e);
+			errorHandler.applyMarkers();
 		} catch (IOException e) {
 			errorHandler.clearErrors();
 			errorHandler.setRecoveryAvailable(false);
 			errorHandler.reportError(parser.getTokenizer(), e);
+			errorHandler.applyMarkers();
 		} catch (OperationCanceledException e) {
 			return null;
 		} catch (RuntimeException e) {
 			Environment.logException("Internal parser error", e);
 			errorHandler.reportError(parser.getTokenizer(), e);
+			errorHandler.applyMarkers();
 		} finally {
 			if (isStartupParsed)
 				Job.getJobManager().endRule(resource);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens/SGLRTokenizer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens/SGLRTokenizer.java	2009-10-29 18:04:29 UTC (rev 20189)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens/SGLRTokenizer.java	2009-11-02 15:53:15 UTC (rev 20190)
@@ -1,6 +1,7 @@
 package org.strategoxt.imp.runtime.parser.tokens;
 
 import static org.strategoxt.imp.runtime.parser.tokens.TokenKind.*;
+import lpg.runtime.IPrsStream;
 import lpg.runtime.IToken;
 import lpg.runtime.LexStream;
 import lpg.runtime.PrsStream;
@@ -137,6 +138,17 @@
 		return new Token(parseStream, beginOffset, endOffset, TK_ERROR.ordinal());
 	}
 	
+	public void changeTokenKinds(int beginOffset, int endOffset, TokenKind kind) {
+		IPrsStream tokens = lexStream.getIPrsStream();
+		for (int i = 0, end = tokens.getSize(); i < end; i++) {
+			IToken token = tokens.getIToken(i);
+			if (token.getEndOffset() >= beginOffset)
+				token.setKind(kind.ordinal());
+			if (token.getEndOffset() > endOffset)
+				return;
+		}
+	}
+	
 	/**
 	 * Creates an error token on stream part, backwards skipping whitespace
 	 * 



From L.C.L.Kats at tudelft.nl  Wed Nov  4 15:18:37 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 04 Nov 2009 14:18:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20191 - LennartKats -
	strc-java/trunk/java
Message-ID: <200911041418.nA4EIbcj013909@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-04 14:18:37 +0000 (Wed, 04 Nov 2009)
New Revision: 20191

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20191&view=rev

Modified:
   strc-java/trunk/java/spoofax-libs.jar

Log:
Fixed the interpreter "improving" the variable unbinding semantics (STR-9).

Changes:

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Wed Nov  4 15:21:29 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 04 Nov 2009 14:21:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20192 - LennartKats -
 in spoofax-imp/trunk: org.strategoxt.imp.generator/lib
 org.strategoxt.imp.generator/src/sdf2imp
 org.strategoxt.imp.generator/src/sdf2imp/project
 org.strategoxt.imp.generator/src/sdf2imp/services
 org.strategoxt.imp.generator/src/syntax
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
 org.strategoxt.imp.runtime org.strategoxt.imp.runtime/META-INF
 org.strategoxt.imp.runtime/icons
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
 org.strategoxt.imp.runtime/src/org/strategoxt/i! mp/runtime/stratego
Message-ID: <200911041421.nA4ELTJW014014@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-04 14:21:28 +0000 (Wed, 04 Nov 2009)
New Revision: 20192

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20192&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.meta
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/
   spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/error_decorator.gif
   spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/sample_decorator.gif
   spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/stratego.png
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/StrategoObserverFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilderMap.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderMap.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/BuilderButtonDelegate.java
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-analysis-descriptor.meta
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-analysis-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-occurrences-descriptor.meta
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-occurrences-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/AnalysisService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OccurrencesService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/StrategoFeedbackFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoFeedback.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ReferencesService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.runtime/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/AbstractService.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicStrategoFeedback.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ReferenceResolverFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java

Log:
* Added a new Builders descriptor language, and moved the Analysis descriptor to that .esv component
  - as an example, the entities language now has a real-time updating "pp-aterm" view

* Added Eclipse console support for debugging undeployed editors
  - pops up on errors

* Some refactoring
  - references and Occurrences service descriptors are now in the same .esv file
  - renamed StrategoFeedback to StrategoObserver

* Minor fixes/improvements
  - fixed some more cases where syntax errors were highlighted as comments
  - no more long, multi-line errors in small tooltips
  - mark errors on subtrees if they span multiple lines
  - the Stratego interface rules now get a relative path and a project path


Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-11-04 14:21:28 UTC (rev 20192)
@@ -108,8 +108,7 @@
     create-folding-descriptor;
     create-outliner-descriptor;
     create-colorer-descriptor;
-    create-analysis-descriptor;
-    create-occurrences-descriptor;
+    create-builders-descriptor;
     create-references-descriptor;
 
     create-packed-descriptor-file;

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-04 14:21:28 UTC (rev 20192)
@@ -2,7 +2,7 @@
 
 imports
   sdf2imp/util/-
-  sdf2imp/project/create-trans
+  sdf2imp/project/create-example-trans
 
 strategies
 
@@ -42,7 +42,7 @@
         <property name="build.strategoxt" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm
                         -I ${user.home}/.nix-profile/share/java-front
                         -I ${basedir}
                         -la ${user.home}/.nix-profile/lib/libjava-front.la"/>

Copied: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str (from rev 20190, spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-trans.str)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-04 14:21:28 UTC (rev 20192)
@@ -0,0 +1,154 @@
+module sdf2imp/project/create-trans
+
+imports
+  sdf2imp/util/-
+
+strategies
+  
+  trans-module-name = // TODO: move "undefined" type error to x subterm? remove/fix x_declaration hack?
+     get-sdf-main-module;
+     lower-case;
+     cify;
+     string-replace(|"_", "-")
+  
+  create-trans =
+    <file-exists> <conc-strings> ("trans/", <trans-module-name>, ".str")
+  <+
+    name     := <trans-module-name>;
+    sdf-name := <get-sdf-main-module>;
+    
+    <output-text-file(|["trans"], <conc-strings> (name, ".str"))>
+    <conc-strings>
+(
+"module ", name, "
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/", sdf-name, "
+
+strategies // Main editor interface (defined by the .esv files)
+
+  main-", name, " =
+    fatal-err(|\"No main strategy\")
+  
+  /**
+   * Analyzes the current program.
+   * Returns a Tuple with errors, warnings, and notes;
+   * each a list of (term, message) tuples.
+   */
+  editor-analyze:
+    (ast, path, project-path) -> (errors, warnings, notes)
+    with
+      // Analysis: scope and record dynamic rules
+      try(dr-scope-all-end);
+      dr-scope-all-start;
+      alltd(record-entity)
+    with
+      errors   := <collect-all(include-origin(constraint-error))> ast;
+      warnings := <collect-all(include-origin(constraint-warning))> ast;
+      notes    := <collect-all(include-origin(constraint-note))> ast
+  
+  /**
+   * Resolves a reference when the user control-clicks or presses F3 in the editor.
+   * For the entities language, only Type(_) nodes are resolved by default.
+   */
+  editor-resolve:
+    (Type(type), position, ast, path, project-path) -> target
+    where
+      target := <GetEntity> type
+
+  /**
+   * Returns \"hover help\" information for a particular node in the editor.
+   * For references, this rule is invoked using the resolved term.
+   */
+  editor-hover:
+    (target, position, ast, path, project-path) -> <conc-strings> (\"Hover help: \", <write-to-string> target)
+  
+  generate-java:
+    (selected, position, ast, path, project-path) -> (\"filename\", \"result-string\")
+    with
+      fatal-err(|\"Not implemented\")
+  
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result-string)
+    with
+      filename      := <guarantee-extension(|\"aterm\")> path;
+      result-string := <pp-aterm-box; box2text-string(|120)> selected
+  
+  /**
+   * Adds the originating term to the result of a constraint rule,
+   * and concatenates strings in the resulting message if necessary.
+   */
+  include-origin(s):
+    t -> (t', message')
+    where
+      result := <s> t
+    with
+      if not(!result => (t', message)) then
+        message := result;
+        t'      := t
+      end;
+      message' := <try(all(is-string <+ write-to-string); concat-strings)> message
+
+rules // Semantic rules
+    
+  /**
+   * Reports an error if a property type is undefined.
+   */
+  constraint-error:
+    Property(x, Type(type)) -> [\"Type \", type, \" is not defined\"]
+    where
+      not(!type => \"String\");
+      not(!type => \"Int\");
+      not(<GetEntity> type)
+  
+  /**
+   * Reports an error if an entity is defined more than once.
+   * This constraint is implemented by testing if the \"bag\" of
+   * all entities x is not a singleton list.
+   * This error is reported on the entity name x.
+   */
+  constraint-error:
+    Entity(x, _) -> (x, \"Duplicate entity name\")
+    where
+      not(<bagof-GetEntity> x => [_])
+  
+  /**
+   * Reports a warning if an entity name does not start with a capital.
+   * This error is reported on the entity name x.
+   */
+  constraint-warning:
+    Entity(x, _) -> (x, \"Entity names must start with a capital\")
+    where
+      not(<explode-string; Hd; is-upper> x)
+  
+  /**
+   * Adds a note to modules named \"example.\"
+   */
+  constraint-note:
+    Module(\"example\", _) -> \"This is just an example program in the \\\"entities\\\" language\"
+
+  /**
+   * Records the definition of an entity in a dynamic rule GetEntity.
+   */
+  record-entity:
+    Entity(x_declaration, body) -> Entity(x_declaration, body)
+    with
+      x_reference := x_declaration;
+      rules(
+        GetEntity :+ x_reference -> x_declaration
+      )
+
+signature constructors
+
+  // These definitions are not strictly necessary, but they
+  // ensure that the build doesn't break if the example syntax
+  // is changed and these constructors no longer exist.
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+"
+)

Deleted: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-trans.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-trans.str	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-trans.str	2009-11-04 14:21:28 UTC (rev 20192)
@@ -1,141 +0,0 @@
-module sdf2imp/project/create-trans
-
-imports
-  sdf2imp/util/-
-
-strategies
-  
-  trans-module-name = // TODO: move "undefined" type error to x subterm? remove/fix x_declaration hack?
-     get-sdf-main-module;
-     lower-case;
-     cify;
-     string-replace(|"_", "-")
-  
-  create-trans =
-    <file-exists> <conc-strings> ("trans/", <trans-module-name>, ".str")
-  <+
-    name     := <trans-module-name>;
-    sdf-name := <get-sdf-main-module>;
-    
-    <output-text-file(|["trans"], <conc-strings> (name, ".str"))>
-    <conc-strings>
-(
-"module ", name, "
-
-imports
-  libstratego-lib
-  include/", sdf-name, "
-
-strategies // Main editor interface
-
-  main-", name, " =
-    fatal-err(|\"No main strategy\")
-  
-  /**
-   * Analyzes the current program.
-   * Returns a Tuple with errors, warnings, and notes;
-   * each a list of (term, message) tuples.
-   */
-  editor-analyze:
-    (ast, path, absolute-path) -> (errors, warnings, notes)
-    with
-      // Analysis: scope and record dynamic rules
-      try(dr-scope-all-end);
-      dr-scope-all-start;
-      alltd(record-entity)
-    with
-      errors   := <collect-all(include-origin(constraint-error))> ast;
-      warnings := <collect-all(include-origin(constraint-warning))> ast;
-      notes    := <collect-all(include-origin(constraint-note))> ast
-  
-  /**
-   * Resolves a reference when the user control-clicks or presses F3 in the editor.
-   * For the entities language, only Type(_) nodes are resolved by default.
-   */
-  editor-resolve:
-    (Type(type), position, ast, path, absolute-path) -> target
-    where
-      target := <GetEntity> type
-
-  /**
-   * Returns \"hover help\" information for a particular node in the editor.
-   * For references, this rule is invoked using the resolved term.
-   */
-  editor-hover:
-    (target, position, ast, path, fullpath) -> <conc-strings> (\"Hover help: \", <write-to-string> target)
-   
-  /**
-   * Adds the originating term to the result of a constraint rule,
-   * and concatenates strings in the resulting message if necessary.
-   */
-  include-origin(s):
-    t -> (t', message')
-    where
-      result := <s> t
-    with
-      if not(!result => (t', message)) then
-        message := result;
-        t'      := t
-      end;
-      message' := <try(all(is-string <+ write-to-string); concat-strings)> message
-
-rules // Semantic rules
-    
-  /**
-   * Reports an error if a property type is undefined.
-   */
-  constraint-error:
-    Property(x, Type(type)) -> [\"Type \", type, \" is not defined\"]
-    where
-      not(!type => \"String\");
-      not(!type => \"Int\");
-      not(<GetEntity> type)
-  
-  /**
-   * Reports an error if an entity is defined more than once.
-   * This constraint is implemented by testing if the \"bag\" of
-   * all entities x is not an empty list.
-   * This error is reported on the entity name x.
-   */
-  constraint-error:
-    Entity(x, _) -> (x, \"Duplicate entity name\")
-    where
-      not(<bagof-GetEntity> x => [])
-  
-  /**
-   * Reports a warning if an entity name does not start with a capital.
-   * This error is reported on the entity name x.
-   */
-  constraint-warning:
-    Entity(x, _) -> (x, \"Entity names must start with a capital\")
-    where
-      not(<explode-string; Hd; is-upper> x)
-  
-  /**
-   * Adds a note to modules named \"example.\"
-   */
-  constraint-note:
-    Module(\"example\", _) -> \"This is just an example program in the \\\"entities\\\" language\"
-
-  /**
-   * Records the definition of an entity in a dynamic rule GetEntity.
-   */
-  record-entity:
-    Entity(x_declaration, body) -> Entity(x_declaration, body)
-    with
-      x_reference := x_declaration;
-      rules(
-        GetEntity :+ x_reference -> x_declaration
-      )
-
-signature constructors
-
-  // These definitions are not strictly necessary, but they
-  // ensure that the build doesn't break if the example syntax
-  // is changed and these constructors no longer exist.
-  Module   : ID * List(Entity)   -> Module
-  Entity   : ID * List(Property) -> Entity
-  Property : ID * Type           -> Property
-  Type     : ID                  -> Type
-"
-)

Deleted: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-analysis-descriptor.meta
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-analysis-descriptor.meta	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-analysis-descriptor.meta	2009-11-04 14:21:28 UTC (rev 20192)
@@ -1 +0,0 @@
-Meta([Syntax("Stratego-Java-EditorService")])

Deleted: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-analysis-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-analysis-descriptor.str	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-analysis-descriptor.str	2009-11-04 14:21:28 UTC (rev 20192)
@@ -1,48 +0,0 @@
-module sdf2imp/services/create-analysis-descriptor
-
-imports
-  libstratego-lib
-  
-  sdf2imp/util/-
-  sdf2imp/project/create-trans
-
-strategies
-
-  create-analysis-descriptor =
-    output-initial-descriptor-file(
-      <descriptor-name> "-Analysis"
-    , provider := <conc-strings> ("include/", <trans-module-name>, ".ctree");
-      !|[
-        module <descriptor-name> "-Analysis"
-        
-        imports <descriptor-name> "-Analysis.generated"
-        
-        analysis
-          ~
-          ~// This file can be used for custom analysis rules.
-          ~// See the imported file for a brief introduction and examples.
-          ~
-          provider: ~provider
-          observer: editor-analyze
-          ~
-          ~// observer: analyze
-      ]|
-    );
-    
-    output-derived-descriptor-file(
-      <descriptor-name> "-Analysis.generated"
-    ,
-      !|[
-        module <descriptor-name> "-Analysis.generated"
-        
-        analysis
-          ~
-          ~// Analysis can be provided by an external Stratego program:
-          ~//
-          ~//   provider : stratego-program.ctree // (built using strc -F)
-          ~//
-          ~// Analysis is carried out by a rule of the form (ast, path, fullpath) -> (errors, warnings, infos)
-          ~//
-          ~//   observer : analysis-rule
-      ]|
-    )

Copied: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.meta (from rev 20176, spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-analysis-descriptor.meta)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.meta	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.meta	2009-11-04 14:21:28 UTC (rev 20192)
@@ -0,0 +1 @@
+Meta([Syntax("Stratego-Java-EditorService")])


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.meta
___________________________________________________________________
Added: svn:mergeinfo
   + /spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/sdf2imp/services/create-analysis-descriptor.meta:19707-19736

Copied: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str (from rev 20176, spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-analysis-descriptor.str)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	2009-11-04 14:21:28 UTC (rev 20192)
@@ -0,0 +1,66 @@
+module sdf2imp/services/create-analysis-descriptor
+
+imports
+  libstratego-lib
+  
+  sdf2imp/util/-
+  sdf2imp/project/create-example-trans
+
+strategies
+
+  create-builders-descriptor =
+    output-initial-descriptor-file(
+      <descriptor-name> "-Builders"
+    , provider := <conc-strings> ("include/", <trans-module-name>, ".ctree");
+      !|[
+        module <descriptor-name> "-Builders"
+        
+        imports <descriptor-name> "-Builders.generated"
+        
+        builders
+          ~
+          ~// This file can be used for custom analysis and builder rules.
+          ~// See the imported file for a brief introduction and examples.
+          ~
+          provider: ~provider
+          observer: editor-analyze
+          builder: "Generate Java code" = generate-java  (openeditor) (realtime)
+          builder: "Show ATerm"         = generate-aterm (openeditor) (realtime)
+      ]|
+    );
+    
+    output-derived-descriptor-file(
+      <descriptor-name> "-Builders.generated"
+    ,
+      !|[
+        module <descriptor-name> "-Builders.generated"
+        
+        analysis
+          ~
+          ~// Building and analysis is defined in Stratego program or programs:
+          ~//
+          ~//   provider : stratego-program.ctree
+          ~//   provider : stratego-library.jar
+          ~
+          ~// Analysis is carried out by a Stratego rule that can be selected as follows:
+          ~//
+          ~//   observer : analysis-rule
+          ~//
+          ~// Any dynamic rules set in the analysis may be used by other semantic services,
+          ~// such as reference resolving or the builders.
+          ~
+          ~// Builders may carry out custom transformations on a file or selection,
+          ~// and can be selected as follows:
+          ~//
+          ~//   builder : "Generate Java code" = generate-java (openeditor) (persistent) (realtime)
+          ~//
+          ~// In this example, the caption "Generate Java code" is used in the build button dropdown menu,
+          ~// and the generate-java rule is used to carry out the tranformation.
+          ~// Builder definitions can also specify any combination of the following annotations:
+          ~//
+          ~//   (openeditor)  Indicates an editor should be opened with the result.
+          ~//   (persistent)  Indicates that the resulting file should be saved to disk.
+          ~//   (realtime)    Indicates that the resulting editor should be updated in real-time
+          ~//                 as the source file is edited.
+      ]|
+    )


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
___________________________________________________________________
Added: svn:mergeinfo
   + /spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/sdf2imp/services/create-analysis-descriptor.str:19707-19736

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str	2009-11-04 14:21:28 UTC (rev 20192)
@@ -30,10 +30,9 @@
       module <main-descriptor-name>
       
       imports
-        <descriptor-name> "-Analysis"
+        <descriptor-name> "-Builders"
         <descriptor-name> "-Colorer"
         <descriptor-name> "-Folding"
-        <descriptor-name> "-Occurrences"
         <descriptor-name> "-Outliner"
         <descriptor-name> "-References"
         <descriptor-name> "-Syntax"

Deleted: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-occurrences-descriptor.meta
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-occurrences-descriptor.meta	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-occurrences-descriptor.meta	2009-11-04 14:21:28 UTC (rev 20192)
@@ -1 +0,0 @@
-Meta([Syntax("Stratego-Java-EditorService")])

Deleted: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-occurrences-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-occurrences-descriptor.str	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-occurrences-descriptor.str	2009-11-04 14:21:28 UTC (rev 20192)
@@ -1,42 +0,0 @@
-module sdf2imp/services/create-occurrences-descriptor
-
-imports
-  libstratego-lib
-  
-  sdf2imp/util/-
-
-strategies
-
-  create-occurrences-descriptor =
-    output-initial-descriptor-file(
-      <descriptor-name> "-Occurrences"
-    , !|[
-        module <descriptor-name> "-Occurrences"
-        
-        imports <descriptor-name> "-Occurrences.generated"
-        
-        occurrences
-          ~
-          ~// This file can be used for custom occurrence highlighting rules.
-          ~// See the imported file for a brief introduction and examples.
-      ]|
-    );
-    
-    output-derived-descriptor-file(
-      <descriptor-name> "-Occurrences.generated"
-    ,
-      !|[
-        module <descriptor-name> "-Occurrences.generated"
-        
-        occurrences
-          ~
-          ~// Occurrence highlighting functionality may be provided by an external Stratego program:
-          ~//
-          ~//   provider stratego-program.ctree // (built using strc -F)
-          ~//
-          ~// Occurence rules can specify the syntax constructors for which
-          ~// a reference resolving function is available:
-          ~//
-          ~//   occurrence FunctionCall : occurrences
-      ]|
-    )

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str	2009-11-04 14:21:28 UTC (rev 20192)
@@ -17,7 +17,8 @@
         
         references
           ~
-          ~// This file can be used for custom reference resolving rules.
+          ~// This file can be used for custom reference resolving and
+          ~// occurrence highlighting rules.
           ~// See the imported file for a brief introduction and examples.
           ~
           reference _ : editor-resolve editor-hover
@@ -32,11 +33,12 @@
         
         references
           ~
-          ~// Reference resolving functionality may be provided by an external Stratego program:
+          ~// Building and analysis is defined in Stratego program or programs:
           ~//
-          ~//   provider stratego-program.ctree // (built using strc -F)
-          ~//
-          ~// Occurence rules can specify the syntax constructors for which
+          ~//   provider : stratego-program.ctree
+          ~//   provider : stratego-library.jar
+          ~
+          ~// Reference resolving rules can specify the syntax constructors for which
           ~// a reference resolving function is available:
           ~//
           ~//   reference FunctionCall : resolve-function-call hover-help-function-call
@@ -44,5 +46,12 @@
           ~// This defines that for each FunctionCall, resolve-function-call
           ~// will retrieve the AST node that declares it, and hover-help-function-call
           ~// returns hover help information.
+          ~
+          ~// Likewise, occurrence highlighting functionality may be specified as follows:
+          ~//
+          ~//   occurrence FunctionCall : find-occurrences
+          ~
+          ~// The reference resolver and occurences service can use any dynamic rules
+          ~// created by the analysis service.
       ]|
     )

Deleted: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/AnalysisService.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/AnalysisService.sdf	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/AnalysisService.sdf	2009-11-04 14:21:28 UTC (rev 20192)
@@ -1,16 +0,0 @@
-module AnalysisService
-
-imports
-  SemanticServices
-
-exports
-
-  syntax
-  
-    "analysis" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Analysis")}
-
-    "analysis" -> <ReservedName-CF>
-
-  context-free syntax
-    
-    "observer" ":" StrategoCall -> SemanticRule {cons("SemanticObserver")}
\ No newline at end of file

Copied: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf (from rev 20176, spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/AnalysisService.sdf)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf	2009-11-04 14:21:28 UTC (rev 20192)
@@ -0,0 +1,28 @@
+module BuildersService
+
+imports
+  SemanticServices
+
+exports
+  
+  syntax
+  
+    "builders" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Builders")}
+
+    "builders" -> <ReservedName-CF>
+    
+    %% deprecated:
+  
+    "analysis" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Builders")}
+
+    "analysis" -> <ReservedName-CF>
+
+  context-free syntax
+    
+    "observer" ":" StrategoCall                           -> SemanticRule {cons("SemanticObserver")}
+    "builder"  ":" String "=" StrategoCall BuilderOption* -> SemanticRule {cons("Builder")}
+    
+    
+    "(openeditor)" -> BuilderOption {cons("OpenEditor")}
+    "(realtime)"   -> BuilderOption {cons("RealTime")}
+    "(persistent)" -> BuilderOption {cons("Persistent")}


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf
___________________________________________________________________
Added: svn:mergeinfo
   + /spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/syntax/AnalysisService.sdf:19707-19736

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2009-11-04 14:21:28 UTC (rev 20192)
@@ -1,15 +1,22 @@
 [
    ReferenceRule        -- R [ H [ KW["reference"] _1 ] H [ KW[":"] _2 ] _3 ],
    OccurrenceRule       -- R [ H [ KW["occurrence"] _1 ] H [ KW[":"] _2 ] ],
-   SemanticProvider     -- H hs=0 [ KW["provider"] H [ KW[":"] _1 ] ],
+   SemanticProvider     -- R [ H [ KW["provider" ] KW[":"] _1 ] ],
+   SemanticObserver     -- R [ H [ KW["observer"] KW[":"] _1 ] ],
+   Builder              -- R [ H [ KW["builder"] KW[":"] _1 KW["="] _2 _3 ] ],
+   Builder.3:iter-star  -- _1,
+   OpenEditor           -- KW["(openeditor)"],
+   RealTime             -- KW["(realtime)"],
+   Persistent           -- KW["(persistent)"],
    Strategy             -- _1,
    Attribute            -- H hs=0 [ KW["id"] KW["."] _1 ],
-   SemanticObserver     -- H hs=0 [ KW["observer"] H [ KW[":"] _1 ] ],
    Analysis             -- V is=2 [H hs=0 [ KW["analysis"] _1 ] A(l,l,l) [_2] ],
    References           -- V is=2 [H hs=0 [ KW["references"] _1 ] A(l,l,l) [_2] ],
    Occurrences          -- V is=2 [H hs=0 [ KW["occurrences"] _1 ] A(l,l,l) [_2] ],
    Strategy             -- _1,
    Attribute            -- H hs=0 [ KW["id"] KW["."] _1 ],
+   Builders             -- V is=2 [H hs=0 [KW["builders"] _1] A(l,l,l,l,l,l) [_2]],
+   Builders.2:iter-star -- _1,
    Colorer              -- V is=2 [H hs=0 [KW["colorer"] _1] A(l,l,l,l,l,l) [_2]],
    Colorer.2:iter-star  -- _1,
    ColorDef             -- R [ _1 KW["="] _2],

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService.sdf	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService.sdf	2009-11-04 14:21:28 UTC (rev 20192)
@@ -6,9 +6,8 @@
   FoldingService
   OutlinerService
   ColorerService
-  AnalysisService
   ReferencesService
-  OccurrencesService
+  BuildersService
 
 exports
 

Deleted: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OccurrencesService.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OccurrencesService.sdf	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OccurrencesService.sdf	2009-11-04 14:21:28 UTC (rev 20192)
@@ -1,16 +0,0 @@
-module OccurrencesService
-
-imports
-  SemanticServices
-
-exports
-
-  syntax
-  
-    "occurrences" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Occurrences")}
-
-    "occurrences" -> <ReservedName-CF>
-
-  context-free syntax
-  
-    "occurrence" SemanticNode ":" StrategoCall -> SemanticRule {cons("OccurrenceRule")}
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ReferencesService.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ReferencesService.sdf	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ReferencesService.sdf	2009-11-04 14:21:28 UTC (rev 20192)
@@ -10,8 +10,18 @@
     "references" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("References")}
 
     "references" -> <ReservedName-CF>
+    
+    %% Deprecated:
+  
+    "occurrences" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Occurrences")}
 
+    "occurrences" -> <ReservedName-CF>
+
   context-free syntax
   
+    %% TODO: separate "hover" syntax
+  
     "reference" SemanticNode ":" StrategoCall StrategoCall -> SemanticRule {cons("ReferenceRule")}
 %%  "reference" "*"          ":" StrategoCall StrategoCall -> SemanticRule {cons("AllReferenceRule")}
+  
+    "occurrence" SemanticNode ":" StrategoCall -> SemanticRule {cons("OccurrenceRule")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-11-04 14:21:28 UTC (rev 20192)
@@ -83,8 +83,9 @@
 			IStrategoTerm result = invokeBuilder(mainFile);
 			if (result == null) {
 				String log = agent.getLog().trim();
-				messageHandler.addMarkerFirstLine(mainFile,
-						"Unable to build descriptor: \n" + log, SEVERITY_ERROR);
+				Environment.logException("Unable to build descriptor:\n" + log);
+				messageHandler.addMarkerFirstLine(mainFile, "Unable to build descriptor (see error log)", SEVERITY_ERROR);
+				EditorIOAgent.activateConsole();
 				return;
 			}
 			
@@ -93,7 +94,7 @@
 			
 		} catch (IOException e) {
 			Environment.logException("Unable to build descriptor for " + mainFile, e);
-			messageHandler.addMarkerFirstLine(mainFile, "Internal error building descriptor:" + e, SEVERITY_ERROR);
+			messageHandler.addMarkerFirstLine(mainFile, "Internal error building descriptor (see error log)", SEVERITY_ERROR);
 		}
 	}
 
@@ -119,13 +120,15 @@
 			//context.getExceptionHandler().setEnabled(true);
 			return sdf2imp_jvm_0_0.instance.invoke(context, input);
 		} catch (StrategoErrorExit e) {
-			Environment.logException("Fatal error exit in dynamic builder", e);
-			messageHandler.addMarkerFirstLine(mainFile, "Error building descriptor:" + e.getMessage(), SEVERITY_ERROR);
+			Environment.logException("Fatal error exit in dynamic builder, log:\n" + agent.getLog().trim(), e);
+			messageHandler.addMarkerFirstLine(mainFile, "Fatal error building descriptor:" + e.getMessage(), SEVERITY_ERROR);
+			EditorIOAgent.activateConsole();
 			return null;
 		} catch (StrategoExit e) {
-			Environment.logException("Unexpected exit in dynamic builder", e);
+			Environment.logException("Unexpected exit in dynamic builder, log:\n" + agent.getLog().trim(), e);
 			context.printStackTrace();
-			messageHandler.addMarkerFirstLine(mainFile, "Error building descriptor:" + e + "\n" + agent.getLog(), SEVERITY_ERROR);
+			messageHandler.addMarkerFirstLine(mainFile, "Error building descriptor (see error log)", SEVERITY_ERROR);
+			EditorIOAgent.activateConsole();
 			return null;
 		} finally {
 			//context.getExceptionHandler().setEnabled(false);

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-11-04 14:21:28 UTC (rev 20192)
@@ -24,6 +24,7 @@
 import org.strategoxt.imp.metatooling.building.DynamicDescriptorBuilder;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
 
@@ -149,7 +150,8 @@
 			asyncMessageHandler.clearMarkers(descriptor);
 			
 			IFile file = descriptor.getProject().getFile(descriptor.getProjectRelativePath());
-			DescriptorFactory.load(file);
+			Descriptor result = DescriptorFactory.load(file);
+			result.setDynamicallyLoaded(true);
 			
 		} catch (BadDescriptorException e) {
 			Environment.logException("Error in descriptor " + descriptor, e);

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-11-04 14:21:28 UTC (rev 20192)
@@ -4,7 +4,6 @@
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 
-import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IWorkspace;
@@ -13,20 +12,17 @@
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.jobs.Job;
-import org.eclipse.imp.editor.UniversalEditor;
 import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.jface.operation.IRunnableWithProgress;
 import org.eclipse.jface.viewers.IStructuredSelection;
 import org.eclipse.jface.wizard.Wizard;
+import org.eclipse.swt.widgets.Display;
 import org.eclipse.ui.INewWizard;
 import org.eclipse.ui.IWorkbench;
-import org.eclipse.ui.IWorkbenchPage;
-import org.eclipse.ui.PartInitException;
-import org.eclipse.ui.PlatformUI;
-import org.eclipse.ui.ide.IDE;
 import org.spoofax.interpreter.core.Interpreter;
 import org.strategoxt.imp.generator.sdf2imp;
 import org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater;
+import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.lang.Context;
@@ -161,15 +157,16 @@
 			}
 			
 			monitor.setTaskName("Opening editors");
-			openEditor(project, "/trans/" + toStrategoName(languageName) +  ".str", true);
+			Display display = getShell().getDisplay();
+			EditorState.asyncOpenEditor(display,  project, "/trans/" + toStrategoName(languageName) +  ".str", true);
 			monitor.worked(1);
-			openEditor(project, "/editor/" + languageName +  ".main.esv", true);
+			EditorState.asyncOpenEditor(display, project, "/editor/" + languageName +  ".main.esv", true);
 			monitor.worked(1);
-			openEditor(project, "/syntax/" + languageName +  ".sdf", true);
+			EditorState.asyncOpenEditor(display, project, "/syntax/" + languageName +  ".sdf", true);
 			monitor.worked(1);
-			openEditor(project, "/test/example." + extensions.split(",")[0], false);
+			EditorState.asyncOpenEditor(display, project, "/test/example." + extensions.split(",")[0], false);
 			monitor.worked(1);
-			openEditor(project, "/syntax/" + languageName +  ".sdf", true); // honestly, give this one focus
+			EditorState.asyncOpenEditor(display, project, "/syntax/" + languageName +  ".sdf", true); // honestly, give this one focus
 			monitor.done();
 			
 			success = true;
@@ -185,25 +182,6 @@
  	private static String toStrategoName(String languageName) {
  		return Interpreter.cify(languageName.toLowerCase()).replace('_', '-');
  	}
-	
-	private void openEditor(IProject project, String filename, final boolean activate) {
-		final IResource file = (IResource) project.findMember(filename);
-		if (!file.exists() || !(file instanceof IFile)) {
-			Environment.logException("Cannot open an editor for " + filename);
-			return;
-		}
-		getShell().getDisplay().asyncExec(new Runnable() {
-			public void run() {
-				IWorkbenchPage page =
-					PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
-				try {
-					IDE.openEditor(page, (IFile) file, UniversalEditor.EDITOR_ID, activate);
-				} catch (PartInitException e) {
-					Environment.logException("Cannot open an editor for " + file, e);
-				}
-			}
-		});
-	}
 
 	/*
 	private void throwCoreException(String message) throws CoreException {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	2009-11-04 14:21:28 UTC (rev 20192)
@@ -19,6 +19,9 @@
  org.eclipse.ui.editors,
  org.eclipse.ui.workbench,
  org.eclipse.ui,
+ org.eclipse.ui.ide,
+ org.eclipse.ui.console,
+ org.eclipse.debug.ui;bundle-version="3.4.2",
  org.spoofax.compiler,
  org.strategoxt.imp.generator,
  org.strategoxt.strj

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/build.properties	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/build.properties	2009-11-04 14:21:28 UTC (rev 20192)
@@ -2,4 +2,5 @@
 output.. = bin/
 bin.includes = META-INF/,\
                plugin.xml,\
-               .
+               .,\
+               icons/

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/error_decorator.gif
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/error_decorator.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/sample_decorator.gif
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/sample_decorator.gif
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Copied: spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/stratego.png (from rev 20161, spoofax/trunk/spoofax/org.spoofax.editor/icons/spoofax.png)
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/stratego.png
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:mergeinfo
   + 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-04 14:18:37 UTC (rev 20191)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-04 14:21:28 UTC (rev 20192)
@@ -146,8 +146,28 @@
             verticalRulerPreferenceValue="true"/>
    </extension>
 
-   <!-- Extension point not implemented; manually called from SGLRParseController instead
    <extension
+         point="org.eclipse.ui.actionSets">
+      <actionSet
+            description="Spoofax actions"
+            id="org.strategoxt.imp.runtime.ui.actionSet"

(2099 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Thu Nov  5 09:51:48 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 05 Nov 2009 08:51:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20193 - LennartKats -
 in spoofax-imp/trunk: . org.strategoxt.imp.editors.aterm
 org.strategoxt.imp.editors.aterm/.externalToolBuilders
 org.strategoxt.imp.editors.aterm/META-INF
 org.strategoxt.imp.editors.aterm/editor
 org.strategoxt.imp.editors.aterm/editor/java
 org.strategoxt.imp.editors.aterm/editor/java/org
 org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt
 org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp
 org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors
 org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm
 org.strategoxt.imp.editors.aterm/syntax org.strategoxt.imp.feature
 org.strategoxt.imp.generator/src/syntax org.strategoxt.imp.runtime
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
 org.strategoxt.imp.runtime/s! rc/org/strategoxt/imp/runtime/stratego
Message-ID: <200911050851.nA58pmYh029883@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-05 08:51:46 +0000 (Thu, 05 Nov 2009)
New Revision: 20193

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20193&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.project
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/aux/
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Folding.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Outliner.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderMap.java
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderMap.java
Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/BuilderButtonDelegate.java

Log:
* Added an ATerm editor

* Fixed a token/ast node binding problem so the colorer works better now
  (should fix Zef's coloring problem)

* Improvements to builder button

* Fixed bad formatting of editor tooltips


Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2009-11-04 14:21:28 UTC (rev 20192)
+++ spoofax-imp/trunk/Makefile	2009-11-05 08:51:46 UTC (rev 20193)
@@ -3,6 +3,7 @@
 	(cd org.strategoxt.imp.editors.editorservice && ant -Dexternaldef=../org.strategoxt.imp.generator/src/syntax/EditorService.def)
 	(cd org.strategoxt.imp.editors.sdf && ant -Dexternaldef=syntax/SDF.def)
 	(cd org.strategoxt.imp.editors.stratego && ant -Dexternaldef=syntax/Stratego-Sugar.def)
+	(cd org.strategoxt.imp.editors.aterm && ant -Dexternaldef=syntax/ATerm.def)
 
 check : all
 	$(MAKE) -C org.strategoxt.imp.generator check

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.classpath
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.classpath	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.classpath	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="lib" path="aux/strategoxt.jar"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/aux&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.aterm/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.strategoxt.imp.editors.aterm/build.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.editors.aterm"/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<mapAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_PROPERTIES">
+<mapEntry key="externaldef" value="syntax/ATerm.def"/>
+</mapAttribute>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.aterm/build.xml}"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.editors.aterm}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.project
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.project	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.project	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>org.strategoxt.imp.editors.aterm</name>
+      <comment></comment>
+      <buildSpec>
+		<buildCommand>
+			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+				<dictionary>
+					<key>LaunchConfigHandle</key>
+					<value>&lt;project&gt;/.externalToolBuilders/ATerm build.xml.launch</value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,20 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: ATerm Plug-in
+Bundle-SymbolicName: org.strategoxt.imp.editors.aterm; singleton:=true
+Bundle-Version: 0.1.0.2802
+Bundle-Activator: org.strategoxt.imp.editors.aterm.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.aterm,
+  org.spoofax.jsglr
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Export-Package: org.strategoxt.imp.editors.aterm

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.properties	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.properties	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               .,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               .

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,268 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="ATerm" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="ATerm"/>
+        <property name="esvmodule" value="ATerm"/>
+        <property name="strmodule" value="aterm"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- External .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+        
+        <!-- Environment configuration -->
+        <property name="build.strategoxt" location="${user.home}/.nix-profile/bin"/>
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm
+                        -I ${user.home}/.nix-profile/share/java-front
+                        -I ${basedir}
+                        -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
+        
+        <!-- Initialization -->
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <available file="${build.strategoxt}/strj" property="build.stratego.usenativestrj"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <fail if="externaljar" unless="externaljarflags"/>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="include"/>
+    
+        <target name="all" depends="stratego.ctree,sdf2table,sdf2imp"/>
+
+        <target name="sdf2imp" depends="sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" depends="sdf2table" if="eclipse.running">
+            <!-- In Eclipse, we trigger the Eclipse builder rather than build it here -->
+            <touch file="include/${esvmodule}.packed.esv"/>
+            <eclipse.refreshLocal resource="include/${esvmodule}.packed.esv"/>
+        </target>
+        
+        <target name="sdf2imp.standalone" depends="sdf2table,aux-files" unless="eclipse.running">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="aux/sdf2imp.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="-ss4m -server"/> 
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${basedir}/include/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt}/sdf2table" dest="include" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="include/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="include/${sdfmodule}.def"/>
+                <targetfileset file="include/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="include/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="aux-files">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/include/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${basedir}/include/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="aux-files">
+            <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
+            <mkdir dir="aux"/>
+            <parallel>
+              <get src="${site}/strategoxt.jar" dest="aux/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
+              <get src="${site}/make_permissive.jar" dest="aux/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
+              <get src="${site}/sdf2imp.jar" dest="aux/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
+            </parallel>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfilelist dir="${syntax}" files="**/*.sdf"/>
+                <targetfileset file="${syntax}/${sdfmodule}.def"/>
+            </dependset>
+            <apply executable="${build.strategoxt}/pack-sdf" failonerror="true" dest="include">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-I"/>
+                <arg value="${trans}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${build.sdf.imports}"/>
+                
+                <fileset file="${syntax}/${sdfmodule}.sdf"/>
+                <mapper type="glob" from="*.sdf" to="*.def"/>
+            </apply>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" todir="include" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="include" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled" unless="external-def">
+            <apply executable="${build.strategoxt}/rtg2sig" dest="include" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="include/${sdfmodule}.rtg"/>
+                <mapper type="glob" from="*.rtg" to="*.str"/>
+            </apply>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled" unless="external-def">
+            <apply executable="${build.strategoxt}/sdf2rtg" dest="include" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="--ignore-missing-cons"/>
+                
+                <fileset file="include/${sdfmodule}.def"/>
+                <mapper type="glob" from="*.def" to="*.rtg"/>
+            </apply>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                  <include name="**/*.str"/>
+                </srcfileset>
+                <targetfileset file="include/${strmodule}.ctree"/>
+            </dependset>
+            <available file="include/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>            
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value="-F --library"/>
+                <param name="build.stratego.extension" value="ctree"/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.java" depends="stratego.java.native,stratego.java.jvm"/>
+    
+        <target name="stratego.java.native" if="build.stratego.usenativestrj"> 
+            <antcall target="stratego.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/${src-gen}"/>
+                <param name="build.stratego.extraargs" value="-la java-front"/>
+                <param name="build.stratego.extension" value="java"/>
+                <param name="build.stratego.compiler" value="strj"/>
+            </antcall>
+        </target>
+    
+        <target name="stratego.java.jvm" unless="build.stratego.usenativestrj">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                  <include name="**/*.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/${src-gen}/trans"/>
+                <param name="build.stratego.extraargs" value="-la java-front"/>
+                <param name="build.stratego.extension" value="java"/>
+            </antcall>
+            <javac classpath="aux/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
+            <jar basedir="${build}" includes="trans/**" destfile="include/${strmodule}.jar"/>
+        </target>
+            
+        <target name="stratego.jvm.helper" depends="aux-files,rtg2sig" unless="strc-java.available" if="build.stratego.enabled">
+            <java classname="org.strategoxt.strj.Main" classpath="aux/strategoxt.jar:aux/sdf2imp.jar" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputpath}/${strmodule}.${build.stratego.extension}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="-clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+            </java>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${src-gen}/trans/Main.java"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Builders.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Builders.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Builders.esv	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,8 @@
+module ATerm-Builders
+
+imports ATerm-Builders.generated
+
+builders
+                                                                             
+  // This file can be used for custom analysis and builder rules.            
+  // See the imported file for a brief introduction and examples.        
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Colorer.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Colorer.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Colorer.esv	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,11 @@
+module ATerm-Colorer
+
+imports ATerm-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  // See the imported file for a brief introduction and examples.
+  
+  _.quoted : 0 0 192
+  _.list   : 0 128 0 bold
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Folding.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Folding.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Folding.esv	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,11 @@
+module ATerm-Folding
+
+imports ATerm-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  // See the imported file for a brief introduction and examples.
+  
+  ATerm.appl
+  ATerm.list
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Outliner.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Outliner.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Outliner.esv	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,11 @@
+module ATerm-Outliner
+
+imports ATerm-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  // See the imported file for a brief introduction and examples.
+  
+  ATerm.appl
+  ATerm.list
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-References.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-References.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-References.esv	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,10 @@
+
+module ATerm-References
+
+imports ATerm-References.generated
+
+references
+                                                                                   
+  // This file can be used for custom reference resolving and                      
+  // occurrence highlighting rules.                                                
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Syntax.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Syntax.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Syntax.esv	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,4 @@
+module ATerm-Syntax
+
+language
+  fences : ( ) // [ ] (square brackets were problematic before? IMP issue?)
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm.main.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm.main.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm.main.esv	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,16 @@
+module ATerm.main
+
+imports ATerm-Builders ATerm-Colorer ATerm-Folding ATerm-Outliner ATerm-References ATerm-Syntax
+
+language General properties
+                  
+  name          : ATerm
+  id            : org.strategoxt.imp.editors.aterm
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the ATerm language"
+  url           : http://strategoxt.org
+                  
+  extensions    : aterm,term
+  table         : include/ATerm.tbl
+  start symbols : ATerm

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermParseController.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermParseController.java	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,89 @@
+package org.strategoxt.imp.editors.aterm;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class ATermParseController extends DynamicParseController 
+{ 
+  private static final String LANGUAGE = "ATerm";
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = ATermParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = ATermParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(ATermParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return ATermParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermValidator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermValidator.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermValidator.java	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,12 @@
+package org.strategoxt.imp.editors.aterm;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class ATermValidator extends MetaFileLanguageValidator 
+{ 
+  public Descriptor getDescriptor()
+  { 
+    return ATermParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/Activator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/Activator.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/Activator.java	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,50 @@
+package org.strategoxt.imp.editors.aterm;
+
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "ATerm";
+
+  public static final String kLanguageName = "ATerm";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  protected static PreferencesService preferencesService = null;
+
+  public static PreferencesService getPreferencesService()
+  { 
+    if(preferencesService == null)
+    { 
+      preferencesService = new PreferencesService(ResourcesPlugin.getWorkspace().getRoot().getProject());
+      preferencesService.setLanguageName(kLanguageName);
+    }
+    return preferencesService;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/plugin.xml	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/plugin.xml	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="aterm" description="ATerm" language="ATerm" derivedFrom="DynamicRoot" validator="org.strategoxt.imp.editors.aterm.ATermValidator" validatorClass="org.strategoxt.imp.editors.aterm.ATermValidator"></language>
+       </extension>
+       <extension id="org.strategoxt.imp.editors.aterm.parser" name="ATerm Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="org.strategoxt.imp.editors.aterm.ATermParseController" language="ATerm">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def	2009-11-05 08:51:46 UTC (rev 20193)
@@ -0,0 +1,124 @@
+definition
+module basic/IdentifierCon
+
+exports
+
+sorts IdCon
+
+lexical syntax
+
+head:[A-Za-z] tail:[A-Za-z\-0-9]* -> IdCon {cons("default")}
+
+lexical restrictions
+
+IdCon -/- [A-Za-z\-0-9]
+
+module basic/StrCon
+
+exports
+
+sorts StrCon StrChar
+
+lexical syntax
+    "\\n"                      -> StrChar {cons("newline")}
+    "\\t"                      -> StrChar {cons("tab")}
+    "\\\""                     -> StrChar {cons("quote")}
+    "\\\\"                     -> StrChar {cons("backslash")}
+    "\\" a:[0-9]b:[0-9]c:[0-9] -> StrChar {cons("decimal")}
+    ~[\0-\31\n\t\"\\]          -> StrChar {cons("normal")}
+
+    [\"] chars:StrChar* [\"]   -> StrCon  {cons("default")}
+
+module languages/aterm/syntax/RealCon
+
+imports languages/aterm/syntax/IntCon
+
+hiddens
+  context-free start-symbols 
+    RealCon
+
+exports
+  sorts OptExp RealCon
+
+  context-free syntax
+    "e" IntCon -> OptExp {cons("present")}
+               -> OptExp {cons("absent")}
+
+    base:IntCon "." decimal:NatCon exp:OptExp  -> RealCon {cons("real-con")}
+
+module basic/NatCon
+
+exports
+
+sorts NatCon
+
+lexical syntax
+  
+ [0-9]+ -> NatCon {cons("digits")}
+
+lexical restrictions
+
+ NatCon -/- [0-9]
+
+module basic/Whitespace
+
+exports
+  lexical syntax
+    [\ \t\n\r]	-> LAYOUT {cons("whitespace")}
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+
+module languages/aterm/syntax/IntCon
+
+imports basic/Whitespace
+	basic/NatCon
+
+hiddens
+  context-free start-symbols 
+    IntCon
+
+exports
+  sorts IntCon
+  context-free syntax
+    NatCon         -> IntCon {cons("natural")}
+    pos:"+" NatCon -> IntCon {cons("positive")}
+    neg:"-" NatCon -> IntCon {cons("negative")}
+
+module languages/aterm/syntax/ATerms
+
+imports languages/aterm/syntax/IntCon 
+        languages/aterm/syntax/RealCon
+	basic/StrCon
+	basic/IdentifierCon
+
+exports
+  sorts AFun ATerm Annotation
+
+  context-free syntax
+	StrCon 	-> AFun {cons("quoted")}
+	IdCon 	-> AFun {cons("unquoted")}
+
+  context-free syntax
+	IntCon 					-> ATerm {cons("int")}
+	RealCon					-> ATerm {cons("real")}
+	fun:AFun 				-> ATerm {cons("fun")}
+	fun:AFun "(" args:{ATerm ","}* ")" 	-> ATerm {cons("appl")} %% HACK: changed from + to * for Stratego/XT
+	"<" type:ATerm ">" 			-> ATerm {cons("placeholder")}
+	"[" elems:{ATerm ","}* "]" 		-> ATerm {cons("list")}
+	trm:ATerm Annotation 			-> ATerm {cons("annotated")}
+
+  context-free syntax
+	"{" annos:{ ATerm ","}+ "}" 		-> Annotation {cons("default")}
+
+hiddens
+  context-free start-symbols 
+    ATerm
+
+module ATerm
+imports
+  languages/aterm/syntax/ATerms
+
+hiddens
+  context-free start-symbols
+    ATerm


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def
___________________________________________________________________
Added: svn:mergeinfo
   + 

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-04 14:21:28 UTC (rev 20192)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-05 08:51:46 UTC (rev 20193)
@@ -247,4 +247,11 @@
          version="1.0.10.42"
          fragment="true"/>
 
+   <plugin
+         id="org.strategoxt.imp.editors.aterm"
+         download-size="0"
+         install-size="0"
+         version="0.0.0"
+         unpack="false"/>
+
 </feature>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2009-11-04 14:21:28 UTC (rev 20192)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2009-11-05 08:51:46 UTC (rev 20193)
@@ -1,9 +1,9 @@
 [
    ReferenceRule        -- R [ H [ KW["reference"] _1 ] H [ KW[":"] _2 ] _3 ],
    OccurrenceRule       -- R [ H [ KW["occurrence"] _1 ] H [ KW[":"] _2 ] ],
-   SemanticProvider     -- R [ H [ KW["provider" ] KW[":"] _1 ] ],
-   SemanticObserver     -- R [ H [ KW["observer"] KW[":"] _1 ] ],
-   Builder              -- R [ H [ KW["builder"] KW[":"] _1 KW["="] _2 _3 ] ],
+   SemanticProvider     -- R [ H [ KW["provider" ] ] KW[":"] _1 ],
+   SemanticObserver     -- R [ H [ KW["observer"] ]  KW[":"] _1 ],
+   Builder              -- R [ H [ KW["builder"] ]   KW[":"] _1 H [ KW["="] _2 _3 ] ],
    Builder.3:iter-star  -- _1,
    OpenEditor           -- KW["(openeditor)"],
    RealTime             -- KW["(realtime)"],

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-04 14:21:28 UTC (rev 20192)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-05 08:51:46 UTC (rev 20193)
@@ -164,6 +164,13 @@
                tooltip="Apply transformation to file in current editor"/>
       </actionSet>
    </extension>
+   <extension
+         point="org.eclipse.imp.runtime.annotationHover">
+      <annotationHover
+            class="org.strategoxt.imp.runtime.services.AnnotationHover"
+            language="DynamicRoot">
+      </annotationHover>
+   </extension>
 
    <!-- Extension point not implemented?
         manually called from SGLRParseController instead

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	2009-11-04 14:21:28 UTC (rev 20192)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	2009-11-05 08:51:46 UTC (rev 20193)
@@ -2,17 +2,16 @@
 
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.*;
 
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Set;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.services.BuilderMap;
 import org.strategoxt.imp.runtime.services.IBuilder;
 import org.strategoxt.imp.runtime.services.IBuilderMap;
 import org.strategoxt.imp.runtime.services.StrategoBuilder;
-import org.strategoxt.imp.runtime.services.StrategoBuilderMap;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -21,7 +20,7 @@
 
 	@Override
 	public IBuilderMap create(Descriptor d) throws BadDescriptorException {
-		Set<IBuilder> builders = new HashSet<IBuilder>();
+		Set<IBuilder> builders = new LinkedHashSet<IBuilder>();
 		
 		for (IStrategoAppl builder : collectTerms(d.getDocument(), "Builder")) {
 			String caption = termContents(termAt(builder, 0));
@@ -45,7 +44,7 @@
 			builders.add(new StrategoBuilder(d.getStrategoObserver(), caption, strategy, openEditor, realTime, persistent));
 		}
 		
-		return new StrategoBuilderMap(builders);
+		return new BuilderMap(builders);
 	}
 
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-11-04 14:21:28 UTC (rev 20192)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-11-05 08:51:46 UTC (rev 20193)
@@ -104,8 +104,8 @@
 			}
 
 			IMarker marker = file.createMarker(markerType);
-			String[] attrs =  { LINE_NUMBER,    CHAR_START,            CHAR_END,                 MESSAGE,        SEVERITY, PRIORITY,      TRANSIENT};
-			Object[] values = { left.getLine(), left.getStartOffset(), right.getEndOffset() + 1, message + "\n", severity, PRIORITY_HIGH, false };
+			String[] attrs =  { LINE_NUMBER,    CHAR_START,            CHAR_END,                 MESSAGE, SEVERITY, PRIORITY,      TRANSIENT};
+			Object[] values = { left.getLine(), left.getStartOffset(), right.getEndOffset() + 1, message, severity, PRIORITY_HIGH, false };
 			marker.setAttributes(attrs, values);
 			synchronized (activeMarkers) {
 				activeMarkers.add(marker);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2009-11-04 14:21:28 UTC (rev 20192)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2009-11-05 08:51:46 UTC (rev 20193)
@@ -147,10 +147,11 @@
 			
 			while (tokenIndex < childStart) {
 				SGLRToken token = (SGLRToken) parseStream.getTokenAt(tokenIndex++);
-				token.setAstNode(this);
+				if (token.getAstNode() == null)
+					token.setAstNode(this);
 			}
 			
-			tokenIndex = childEnd; 
+			tokenIndex = childEnd + 1; 
 		}
 		

(450 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Thu Nov  5 10:09:51 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 05 Nov 2009 09:09:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20194 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <200911050909.nA599pYu030270@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-05 09:09:50 +0000 (Thu, 05 Nov 2009)
New Revision: 20194

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20194&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java

Log:
Enabled realtime builder view update again :o

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2009-11-05 08:51:46 UTC (rev 20193)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2009-11-05 09:09:50 UTC (rev 20194)
@@ -35,7 +35,7 @@
 	
 	private long lastChanged;
 	
-	private boolean enabled;
+	private boolean enabled = true;
 	
 	public StrategoBuilderListener(EditorState editor, IEditorPart targetEditor, IFile targetFile,
 			String builder, StrategoTermPath selectionPath, String selectionConstructor) {



From L.C.L.Kats at tudelft.nl  Thu Nov  5 11:30:56 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 05 Nov 2009 10:30:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20195 - LennartKats - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter:
	core stratego
Message-ID: <200911051030.nA5AUuoq031358@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-05 10:30:55 +0000 (Thu, 05 Nov 2009)
New Revision: 20195

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20195&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java

Log:
Fixed the interpreter "improving" the variable unbinding semantics (STR-9).

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java	2009-11-05 09:09:50 UTC (rev 20194)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java	2009-11-05 10:30:55 UTC (rev 20195)
@@ -137,6 +137,7 @@
         DebugUtil.debug(s);
     }
     
+    @Deprecated
     public BindingInfo saveUnboundVars() {
         return saveUnboundVars(new BindingInfo());
     }
@@ -154,6 +155,7 @@
         return bi;
     }
 
+    @Deprecated
     public void restoreUnboundVars(BindingInfo bi) {
         
         List<Pair<VarScope, String>> bindings = bi.getBindings();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java	2009-11-05 09:09:50 UTC (rev 20194)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java	2009-11-05 10:30:55 UTC (rev 20195)
@@ -38,7 +38,7 @@
     		return s;
     	}
     	else {
-    		final BindingInfo bi = env.getVarScope().saveUnboundVars();
+    		//final BindingInfo bi = env.getVarScope().saveUnboundVars();
         	final IStrategoTerm oldCurrent = env.current();
         	final Strategy second = children[n].second;
         	Strategy first = children[n].first;
@@ -49,7 +49,7 @@
     			}
         		public IConstruct onFailure(IContext env) throws InterpreterException {
     	        	env.setCurrent(oldCurrent);
-    	        	env.getVarScope().restoreUnboundVars(bi);    				
+    	        	//env.getVarScope().restoreUnboundVars(bi);    				
     				return eval(env, n+1);
     			}
         	});



From L.C.L.Kats at tudelft.nl  Thu Nov  5 11:31:43 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 05 Nov 2009 10:31:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20196 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
	strc-java/trunk strc-java/trunk/java
	strc-java/trunk/java/runtime/org/strategoxt
	strc-java/trunk/java/runtime/org/strategoxt/lang
Message-ID: <200911051031.nA5AVhLU031364@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-05 10:31:42 +0000 (Thu, 05 Nov 2009)
New Revision: 20196

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20196&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterErrorExit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java
   strc-java/trunk/AUTHORS
   strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoErrorExit.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
Refined the interpreter exceptions.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	2009-11-05 10:30:55 UTC (rev 20195)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	2009-11-05 10:31:42 UTC (rev 20196)
@@ -54,7 +54,9 @@
      * @throws InterpreterException
      *             In case of an internal error or other interpreter exception.
      */
-    public boolean invoke(String name) throws InterpreterExit, InterpreterException {
+    public boolean invoke(String name)
+            throws InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
+        
         StackTracer stackTracer = getContext().getStackTracer();
         SDefT def = context.lookupSVar(cify(name) + "_0_0");
         
@@ -63,7 +65,7 @@
         }
 
         if (def == null) {
-            throw new InterpreterException("Definition '" + name + "' not found");
+            throw new UndefinedStrategyException("Definition '" + name + "' not found");
         }
         
         stackTracer.push(def.getName());
Added: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterErrorExit.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterErrorExit.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterErrorExit.java	2009-11-05 10:31:42 UTC (rev 20196)
@@ -0,0 +1,34 @@
+package org.spoofax.interpreter.core;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * Exception thrown when the application exits with an fatal error message.
+ *
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class InterpreterErrorExit extends InterpreterExit {
+    
+    private static final long serialVersionUID = -1230869980986338311L;
+    
+    private final IStrategoTerm term;
+
+    public InterpreterErrorExit(String message, IStrategoTerm term) {
+        this(message, term, null);
+    }
+
+    public InterpreterErrorExit(String message, IStrategoTerm term, Throwable cause) {
+        super(1, message, cause);
+        this.term = term;
+    }
+    
+    public IStrategoTerm getTerm() {
+        return term;
+    }
+    
+    @Override
+    public String getLocalizedMessage() { // used for toString() and stacktraces
+        return getMessage() + (getTerm() == null ? "" : "\n\t" + getTerm());
+    }
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java	2009-11-05 10:30:55 UTC (rev 20195)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java	2009-11-05 10:31:42 UTC (rev 20196)
@@ -16,7 +16,7 @@
     private final int value;
     
     public InterpreterExit(int value) {
-        this(value, null);
+        this(value, (Throwable) null);
     }
     
     public InterpreterExit(int value, Throwable cause) {
@@ -24,6 +24,16 @@
         this.value = value;
     }
     
+    public InterpreterExit(int value, String message) {
+        super(message);
+        this.value = value;
+    }
+    
+    public InterpreterExit(int value, String message, Throwable cause) {
+        super(message, cause);
+        this.value = value;
+    }
+    
     public int getValue() {
         return value;
     }

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/UndefinedStrategyException.java	2009-11-05 10:31:42 UTC (rev 20196)
@@ -0,0 +1,22 @@
+package org.spoofax.interpreter.core;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class UndefinedStrategyException extends InterpreterException {
+
+    private static final long serialVersionUID = 6886950665182075267L;
+
+    public UndefinedStrategyException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public UndefinedStrategyException(String message) {
+        super(message);
+    }
+
+    public UndefinedStrategyException(Exception cause) {
+        super(cause);
+    }
+
+}

Modified: strc-java/trunk/AUTHORS
===================================================================
--- strc-java/trunk/AUTHORS	2009-11-05 10:30:55 UTC (rev 20195)
+++ strc-java/trunk/AUTHORS	2009-11-05 10:31:42 UTC (rev 20196)
@@ -1,8 +1,8 @@
 STRJ and the Stratego/J runtime have been developed by:
 
-* Lennart Kats (main STRJ development; Stratego/J compatibility components)
+* Lennart Kats (main STRJ development and maintainer; Stratego/J compatibility components)
 * Karl Trygve Kalleberg (main Stratego/J and JSGLR development; original s2j prototype)
-* Valentin David (Stratego/J runtime)
+* Valentin David (parts of the Stratego/J runtime)
 
 The development of STRJ would not have been possible without the
 efforts of Eelco Visser and his team in developing the STRC reference

Modified: strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-11-05 10:30:55 UTC (rev 20195)
+++ strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-11-05 10:31:42 UTC (rev 20196)
@@ -11,9 +11,11 @@
 import org.spoofax.interpreter.adapter.aterm.BAFBasicTermFactory;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.StackTracer;
+import org.spoofax.interpreter.core.UndefinedStrategyException;
 import org.spoofax.interpreter.library.IOperatorRegistry;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
@@ -151,8 +153,15 @@
 		return compiledContext;
 	}
 	
+	/**
+	 * Invokes a compiled or interpreted strategy bound to this instance.
+	 * 
+	 * Wraps any StrategoException into checked InterpreterException exceptions.
+	 */
 	@Override
-	public boolean invoke(String name) throws InterpreterExit, InterpreterException {
+	public boolean invoke(String name)
+			throws InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
+		
 		try {
 			return super.invoke(name);
         } catch (StrategoExit e) {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoErrorExit.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoErrorExit.java	2009-11-05 10:30:55 UTC (rev 20195)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoErrorExit.java	2009-11-05 10:31:42 UTC (rev 20196)
@@ -3,6 +3,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
+ * Exception thrown when the application exits with an fatal error message.
+ * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class StrategoErrorExit extends StrategoExit {

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Thu Nov  5 15:02:07 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 05 Nov 2009 14:02:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20197 - LennartKats -
	in strc-java/trunk/java/runtime/org/strategoxt: . lang
Message-ID: <200911051402.nA5E274e002377@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-05 14:02:06 +0000 (Thu, 05 Nov 2009)
New Revision: 20197

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20197&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java

Log:
Exception propagation tweaking.

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-11-05 10:31:42 UTC (rev 20196)
+++ strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-11-05 14:02:06 UTC (rev 20197)
@@ -21,6 +21,7 @@
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.InteropRegisterer;
+import org.strategoxt.lang.StrategoErrorExit;
 import org.strategoxt.lang.StrategoException;
 import org.strategoxt.lang.StrategoExit;
 import org.strategoxt.stratego_lib.stratego_lib;
@@ -164,6 +165,8 @@
 		
 		try {
 			return super.invoke(name);
+		} catch (StrategoErrorExit e) {
+			throw new InterpreterErrorExit(e.getMessage(), e.getTerm(), e);
         } catch (StrategoExit e) {
             throw new InterpreterExit(e.getValue(), e);
         } catch (StrategoException e) {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java	2009-11-05 10:31:42 UTC (rev 20196)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java	2009-11-05 14:02:06 UTC (rev 20197)
@@ -2,6 +2,7 @@
 
 import org.spoofax.interpreter.core.IConstruct;
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.VarScope;
@@ -165,6 +166,8 @@
 		IStrategoTerm result;
 		try {
 			result = getStrategy().invokeDynamic(compiledContext, env.current(), sdefargs, targs);
+		} catch (StrategoErrorExit e) {
+			throw new InterpreterErrorExit(e.getMessage(), e.getTerm(), e);
 		} catch (StrategoExit e) {
 			throw new InterpreterExit(e.getValue(), e);
 		}



From L.C.L.Kats at tudelft.nl  Thu Nov  5 15:32:05 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 05 Nov 2009 14:32:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20198 - LennartKats -
	in strc-java/trunk/java/runtime/org/strategoxt/lang/compat: .
	strc_compat
Message-ID: <200911051432.nA5EW6Sk002604@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-05 14:32:05 +0000 (Thu, 05 Nov 2009)
New Revision: 20198

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20198&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/strc_compat/Main.java

Log:


Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-11-05 14:02:06 UTC (rev 20197)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-11-05 14:32:05 UTC (rev 20198)
@@ -6,8 +6,6 @@
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
 import org.strategoxt.lang.Context;
-import org.strategoxt.lang.SRTS_all;
-import org.strategoxt.lang.StackSaver;
 import org.strategoxt.lang.compat.sglr.SGLRCompatLibrary;
 
 /**

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java	2009-11-05 14:02:06 UTC (rev 20197)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java	2009-11-05 14:32:05 UTC (rev 20198)
@@ -43,7 +43,7 @@
 			PrintStream stderr = io.getOutputStream(IOAgent.CONST_STDERR);
 			
 			// Invocation
-			int returnCode = caller.call(commandArgs, dir, stdout, stderr);
+			int returnCode = caller.call(commandArgs, new String[0], dir, stdout, stderr);
 			env.setCurrent(env.getFactory().makeInt(returnCode));
 			return true;
 			

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/strc_compat/Main.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/strc_compat/Main.java	2009-11-05 14:02:06 UTC (rev 20197)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/strc_compat/Main.java	2009-11-05 14:32:05 UTC (rev 20198)
@@ -1,8 +1,6 @@
 package org.strategoxt.lang.compat.strc_compat;
 
-import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
 import org.strategoxt.lang.Context;
-import org.strategoxt.lang.compat.StringValuePrimitive;
 
 /**
  * Configures the strc_compat overrides.



From L.C.L.Kats at tudelft.nl  Thu Nov  5 15:38:32 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 05 Nov 2009 14:38:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20199 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.runtime/.settings
	org.strategoxt.imp.runtime/META-INF
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter
Message-ID: <200911051438.nA5EcWkM002653@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-05 14:38:31 +0000 (Thu, 05 Nov 2009)
New Revision: 20199

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20199&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/.settings/org.eclipse.jdt.core.prefs
   spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/ISourceInfo.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/RuntimeActivator.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java

Log:
- Stratego exception handling refactoring and improvements
- Made ISourceInfo deprecated and removed most references to it


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-05 14:38:31 UTC (rev 20199)
@@ -28,7 +28,7 @@
   libstratego-aterm
   include/", sdf-name, "
 
-strategies // Main editor interface (defined by the .esv files)
+rules // Main editor interface (defined by the .esv files)
 
   main-", name, " =
     fatal-err(|\"No main strategy\")

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/.settings/org.eclipse.jdt.core.prefs
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/.settings/org.eclipse.jdt.core.prefs	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/.settings/org.eclipse.jdt.core.prefs	2009-11-05 14:38:31 UTC (rev 20199)
@@ -1,4 +1,4 @@
-#Tue Dec 09 14:48:18 CET 2008
+#Thu Nov 05 11:02:03 CET 2009
 eclipse.preferences.version=1
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
@@ -16,7 +16,7 @@
 org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
 org.eclipse.jdt.core.compiler.problem.emptyStatement=ignore
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=warning
 org.eclipse.jdt.core.compiler.problem.fatalOptionalError=enabled
 org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
 org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
@@ -24,7 +24,7 @@
 org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
 org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
 org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
-org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=ignore
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
 org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
 org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
 org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
@@ -51,7 +51,7 @@
 org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=warning
 org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
 org.eclipse.jdt.core.compiler.problem.unnecessaryElse=ignore
-org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=ignore
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
 org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
 org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=ignore
 org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	2009-11-05 14:38:31 UTC (rev 20199)
@@ -21,7 +21,7 @@
  org.eclipse.ui,
  org.eclipse.ui.ide,
  org.eclipse.ui.console,
- org.eclipse.debug.ui;bundle-version="3.4.2",
+ org.eclipse.debug.ui,
  org.spoofax.compiler,
  org.strategoxt.imp.generator,
  org.strategoxt.strj

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -98,7 +98,7 @@
 	 * Exceptions are swallowed and logged.
 	 */
 	public static void asyncOpenEditor(Display display, IProject project, String filename, final boolean activate) {
-		final IResource file = (IResource) project.findMember(filename);
+		final IResource file = project.findMember(filename);
 		if (!file.exists() || !(file instanceof IFile)) {
 			Environment.logException("Cannot open an editor for " + filename);
 			return;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/ISourceInfo.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/ISourceInfo.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/ISourceInfo.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -10,10 +10,13 @@
 public interface ISourceInfo {
 	// TODO: Just use a IResource or IFile instead of ISourceInfo
 	//       now that it no longer provides the active language
-	
+
+	@Deprecated
 	IPath getPath();
-	
+
+	@Deprecated
 	IResource getResource();
-	
+
+	@Deprecated
 	ISourceProject getProject();
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/RuntimeActivator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/RuntimeActivator.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/RuntimeActivator.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -10,6 +10,8 @@
 import org.eclipse.ui.plugin.AbstractUIPlugin;
 
 public class RuntimeActivator extends AbstractUIPlugin {
+	
+	public static final String PLUGIN_ID = new String("org.strategoxt.imp.runtime"); 
 
 	private static RuntimeActivator instance; 
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -102,7 +102,7 @@
 		try {
 			for (AbstractServiceFactory<T> factory : serviceFactories) {
 				if (factory.canCreate(type)) {
-					T result = (T) factory.create(this);
+					T result = factory.create(this);
 					foundFactory = true;
 					if (result != null) return result;
 				}
@@ -314,7 +314,7 @@
 			return defaultValue;
 
 		if (termAt(result, 0).getTermType() == IStrategoTerm.APPL
-				&& cons((IStrategoAppl) termAt(result, 0)).equals("Values")) {
+				&& cons(termAt(result, 0)).equals("Values")) {
 			return concatTermStrings(termAt(result, 0));
 		} else {
 			return termContents(result);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -266,6 +266,6 @@
 	public int hashCode() {
 		// (Ignores parse table hash code)
 		return 12125125 * (startSymbol == null ? 42 : startSymbol.hashCode())
-			^ Arrays.hashCode((char[]) input);
+			^ Arrays.hashCode(input);
 	}
 }
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -14,7 +14,6 @@
 import org.spoofax.jsglr.RecoveryConnector;
 import org.spoofax.jsglr.TokenExpectedException;
 import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.ISourceInfo;
 import org.strategoxt.imp.runtime.parser.ast.AsfixImploder;
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
 import org.strategoxt.imp.runtime.parser.tokens.SGLRTokenizer;
@@ -60,7 +59,7 @@
 	
 	private final AstMessageHandler handler = new AstMessageHandler(AstMessageHandler.PARSE_MARKER_TYPE);
 	
-	private final ISourceInfo sourceInfo;
+	private final SGLRParseController source;
 	
 	private boolean isRecoveryAvailable = true;
 
@@ -70,10 +69,10 @@
 	
 	private boolean inLexicalContext;
 	
-	private List<Runnable> errorReports = new ArrayList<Runnable>(); // HACK
+	private List<Runnable> errorReports = new ArrayList<Runnable>();
 
-	public ParseErrorHandler(ISourceInfo sourceInfo) {
-		this.sourceInfo = sourceInfo;
+	public ParseErrorHandler(SGLRParseController source) {
+		this.source = source;
 	}
 	
 	public void clearErrors() {
@@ -83,7 +82,7 @@
 			// Might happen if editor is closed
 			Environment.logException("Exception occurred in clearing error markers", e);
 		}
-		handler.clearMarkers(sourceInfo.getResource());
+		handler.clearMarkers(source.getResource());
 	}
 	
 	public void setMessages(IMessageHandler messages) {
@@ -296,7 +295,7 @@
 		
 		errorReports.add(new Runnable() {
 			public void run() {
-				handler.addMarker(sourceInfo.getResource(), left, right, message2, IMarker.SEVERITY_ERROR);
+				handler.addMarker(source.getResource(), left, right, message2, IMarker.SEVERITY_ERROR);
 			}
 		});
 	}
@@ -306,7 +305,7 @@
 		
 		errorReports.add(new Runnable() {
 			public void run() {
-				handler.addMarkerFirstLine(sourceInfo.getResource(), message2, IMarker.SEVERITY_ERROR);
+				handler.addMarkerFirstLine(source.getResource(), message2, IMarker.SEVERITY_ERROR);
 			}
 		});
 	}	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -396,7 +396,7 @@
 		char inputChar = inputChars[offset];
 		
 		if (parsedChar != inputChar) {
-			if (RecoveryConnector.isLayoutCharacter((char) parsedChar)) {
+			if (RecoveryConnector.isLayoutCharacter(parsedChar)) {
 				// Remember that the parser skipped the current character
 				// for later error reporting. (Cannot modify the immutable
 				// parse tree here; changing the original stream instead.)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -86,7 +86,7 @@
 		IToken left = node.getLeftIToken();
 		IToken right = node.getRightIToken();
 
-		IResource file = ((IStrategoAstNode) node).getSourceInfo().getResource();
+		IResource file = ((IStrategoAstNode) node).getResource();
 		
 		addMarker(file, left, right, message, severity);
 	}
@@ -204,7 +204,7 @@
 	}
 	
 	public final void clearMarkers(IStrategoAstNode node) {
-		clearMarkers(node.getSourceInfo().getResource());
+		clearMarkers(node.getResource());
 	}
 	
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -9,6 +9,7 @@
 import lpg.runtime.IPrsStream;
 import lpg.runtime.IToken;
 
+import org.eclipse.core.resources.IResource;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.interpreter.terms.InlinePrinter;
@@ -58,10 +59,15 @@
 		return false;
 	}
 	
+	@Deprecated
 	public ISourceInfo getSourceInfo() {
 		return getRoot().getSourceInfo();
 	}
 	
+	public IResource getResource() {
+		return getRoot().getResource();
+	}
+	
 	// (concrete type exposed by IAst interface)
 	public final ArrayList<AstNode> getChildren() {
 		assert EMPTY_LIST.size() == 0;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -38,17 +38,17 @@
 	}
 	
 	public int getStartOffset(Object token) {
-	    	if (token instanceof AstNode)
-	    	    token = ((AstNode) token).getLeftIToken();
-	    	    
+		if (token instanceof AstNode)
+			token = ((AstNode) token).getLeftIToken();
+
 		return ((IToken) token).getStartOffset();
 	}
-	
+
 	public int getEndOffset(Object token) {
-            if (token instanceof AstNode)
-                token = ((AstNode) token).getRightIToken();
-            
-            return ((IToken) token).getEndOffset();
+		if (token instanceof AstNode)
+			token = ((AstNode) token).getRightIToken();
+
+		return ((IToken) token).getEndOffset();
 	}
 	
 	public int getLength(Object token) {
@@ -56,10 +56,10 @@
 	}
 	
 	public IPath getPath(Object node) {
-	   if (node instanceof SGLRToken)
-            	node = ((SGLRToken) node).getAstNode();
-            
-            return ((IStrategoAstNode) node).getSourceInfo().getPath(); 
+		if (node instanceof SGLRToken)
+			node = ((SGLRToken) node).getAstNode();
+
+		return ((IStrategoAstNode) node).getResource().getFullPath();
 	}
 	
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -4,18 +4,26 @@
 
 import lpg.runtime.IToken;
 
+import org.eclipse.core.resources.IResource;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.strategoxt.imp.runtime.ISourceInfo;
 
 public class RootAstNode extends AstNode {
+	
 	private final ISourceInfo sourceInfo;
 
 	@Override
+	@Deprecated
 	public ISourceInfo getSourceInfo() {
 		return sourceInfo;
 	}
 	
 	@Override
+	public IResource getResource() {
+		return sourceInfo.getResource();
+	}
+	
+	@Override
 	public IStrategoAppl getTerm() {
 		return (IStrategoAppl) super.getTerm();
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -9,6 +9,7 @@
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.jface.dialogs.ErrorDialog;
 import org.eclipse.ui.IEditorPart;
@@ -16,12 +17,16 @@
 import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.ide.IDE;
+import org.spoofax.interpreter.core.InterpreterErrorExit;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.InterpreterExit;
+import org.spoofax.interpreter.core.UndefinedStrategyException;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.RuntimeActivator;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
-import org.strategoxt.lang.StrategoException;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -37,8 +42,11 @@
 	
 	private final String builderRule;
 	
-	private final boolean realTime, persistent;
+	private final boolean realTime;
 	
+	@SuppressWarnings("unused")
+	private final boolean persistent;
+	
 	private boolean openEditor;
 	
 	public StrategoBuilder(StrategoObserver observer, String caption, String builderRule, boolean openEditor, boolean realTime, boolean persistent) {
@@ -68,23 +76,25 @@
 			if (node == null)
 				node = editor.getParseController().getCurrentAst();
 			if (node == null) {
-				ErrorDialog.openError(editor.getEditor().getSite().getShell(),
-						"Spoofax/IMP building", "Editor is still analyzing", Status.OK_STATUS);
+				openError(editor, "Editor is still analyzing");
 				return;
 			}
-				
 			
 			IStrategoTerm resultTerm = observer.invoke(builderRule, node);
 			if (resultTerm == null) {
+				if (editor.getDescriptor().isDynamicallyLoaded()) EditorIOAgent.activateConsole();
+				Environment.logException("Builder failed:\n" + observer.getLog());
 				if (!observer.isUpdateStarted())
 					observer.asyncUpdate(editor.getParseController());
+				openError(editor, "Builder failed (see error log)");
 				return;
 			}
 	
 			// TODO: support "None()" result
 			if (!isTermTuple(resultTerm) || !isTermString(resultTerm.getSubterm(0))
 					|| !isTermString(resultTerm.getSubterm(0))) {
-				throw new StrategoException("Illegal builder result (must be a filename/string tuple)");
+				Environment.logException("Illegal builder result (must be a filename/string tuple)");
+				openError(editor, "Illegal builder result (must be a filename/string tuple): " + resultTerm);
 			}
 			
 			IStrategoTerm filenameTerm = termAt(resultTerm, 0);
@@ -104,17 +114,36 @@
 			}
 		} catch (CoreException e) {
 			Environment.logException("Builder failed", e);
-			ErrorDialog.openError(editor.getEditor().getSite().getShell(),
-					"Spoofax/IMP builder", "Builder failed (see error log)", Status.OK_STATUS); 
+			openError(editor, "Builder failed (see error log)");
+		} catch (InterpreterErrorExit e) {
+			Environment.logException("Builder failed:\n" + observer.getLog(), e);
+			if (editor.getDescriptor().isDynamicallyLoaded()) EditorIOAgent.activateConsole();
+			openError(editor, e.getMessage());
+		} catch (UndefinedStrategyException e) {
+			reportException(editor, e);
+		} catch (InterpreterExit e) {
+			reportException(editor, e);
+		} catch (InterpreterException e) {
+			reportException(editor, e);
 		} catch (RuntimeException e) {
-			Environment.logException("Builder failed", e);
-			if (editor.getDescriptor().isDynamicallyLoaded())
-				EditorIOAgent.activateConsole();
-			ErrorDialog.openError(editor.getEditor().getSite().getShell(),
-					"Spoofax/IMP builder", "Builder failed (see error log)", Status.OK_STATUS); 
+			reportException(editor, e);
 		}
 	}
 
+	private void reportException(EditorState editor, Exception e) {
+		Environment.logException("Builder failed", e);
+		if (editor.getDescriptor().isDynamicallyLoaded()) EditorIOAgent.activateConsole();
+		Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, e.getLocalizedMessage(), e);
+		ErrorDialog.openError(editor.getEditor().getSite().getShell(),
+				"Spoofax/IMP builder", null, status);
+	}
+	
+	private static void openError(EditorState editor, String message) {
+		Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
+		ErrorDialog.openError(editor.getEditor().getSite().getShell(),
+				"Spoofax/IMP builder", null, status);
+	}
+
 	private IFile createFile(EditorState editor, String filename, String result) throws CoreException {
 		IFile file = editor.getProject().getRawProject().getFile(filename);
 		InputStream resultStream = new ByteArrayInputStream(result.getBytes());

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -21,9 +21,10 @@
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.parser.IModelListener;
 import org.eclipse.imp.parser.IParseController;
-import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
+import org.spoofax.interpreter.core.UndefinedStrategyException;
 import org.spoofax.interpreter.library.LoggingIOAgent;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
@@ -33,10 +34,8 @@
 import org.strategoxt.IncompatibleJarException;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.ISourceInfo;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
-import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.StrategoTermPath;
@@ -89,6 +88,10 @@
 	public AstMessageHandler getMessages() {
 		return messages;
 	}
+
+	public String getLog() {
+		return ((EditorIOAgent) runtime.getIOAgent()).getLog().trim();
+	}
 	
 	private void init(IProgressMonitor monitor) {
 		monitor.subTask("Instantiating analysis runtime");
@@ -195,35 +198,23 @@
 		if (feedbackFunction == null || monitor.isCanceled())
 			return;
 		
-		IStrategoTerm feedback;
-		String log;
+		IStrategoAstNode ast = (IStrategoAstNode) parseController.getCurrentAst();
+		IStrategoTerm feedback = null;
 		
 		synchronized (Environment.getSyncRoot()) {
 			if (runtime == null)
 				init(monitor);
 
-			ITermFactory factory = Environment.getTermFactory();
-			IStrategoAstNode ast = (IStrategoAstNode) parseController.getCurrentAst();
-			if (ast == null || ast.getConstructor() == null) return;
-
-			String path = ast.getSourceInfo().getResource().getProjectRelativePath().toPortableString();
-			String absolutePath = ast.getSourceInfo().getProject().getRawProject().getLocation().toOSString();
-
-			IStrategoTerm[] inputParts = {
-					ast.getTerm(),
-					factory.makeString(path),
-					factory.makeString(absolutePath)
-			};
-			IStrategoTerm input = factory.makeTuple(inputParts);
+			if (ast == null || ast.getConstructor() == null)
+				return;
 			
-			feedback = invoke(feedbackFunction, input, ast.getSourceInfo());
-			log = ((LoggingIOAgent) runtime.getIOAgent()).getLog().trim();
+			feedback = invokeSilent(feedbackFunction, ast.getResource(), makeInputTerm(ast, false));
 		}
 		
 		// TODO: figure out how this was supposed to be synchronized
 		// synchronized (feedback) {
-			if (!monitor.isCanceled())
-				presentToUser((ISourceInfo) parseController, feedback, log);
+			if (feedback != null && !monitor.isCanceled())
+				presentToUser(ast.getResource(), feedback);
 		// }
 	}
 	
@@ -243,12 +234,12 @@
 	}
 	*/
 
-	private void presentToUser(ISourceInfo sourceInfo, IStrategoTerm feedback, String log) {
+	private void presentToUser(IResource resource, IStrategoTerm feedback) {
+		assert feedback != null;
 		messages.clearAllMarkers();
-		messages.clearMarkers(sourceInfo.getResource());
+		messages.clearMarkers(resource);
 
-		if (feedback != null
-				&& feedback.getTermType() == TUPLE
+		if (feedback.getTermType() == TUPLE
 				&& termAt(feedback, 0).getTermType() == LIST
 				&& termAt(feedback, 1).getTermType() == LIST
 				&& termAt(feedback, 2).getTermType() == LIST) {
@@ -256,24 +247,16 @@
 		    IStrategoList errors = termAt(feedback, 0);
 		    IStrategoList warnings = termAt(feedback, 1);
 		    IStrategoList notes = termAt(feedback, 2);
-		    feedbackToMarkers(sourceInfo, errors, IMarker.SEVERITY_ERROR);
-		    feedbackToMarkers(sourceInfo, warnings, IMarker.SEVERITY_WARNING);
-		    feedbackToMarkers(sourceInfo, notes, IMarker.SEVERITY_INFO);
-		} else if (feedback == null) {
-			// Note that this condition may also be reached when
-			// the semantic service hasn't been loaded yet
-			IResource resource = ((SGLRParseController) sourceInfo).getResource();
-			// TODO: report or throw last exception if strategy not found etc.?
-			Environment.logException(log.length() == 0 ? "Analysis failed" : "Analysis failed:\n" + log);
-			messages.addMarkerFirstLine(resource, "Analysis failed (see error log)", IMarker.SEVERITY_ERROR);
-			if (descriptor.isDynamicallyLoaded()) EditorIOAgent.activateConsole();
+		    feedbackToMarkers(resource, errors, IMarker.SEVERITY_ERROR);
+		    feedbackToMarkers(resource, warnings, IMarker.SEVERITY_WARNING);
+		    feedbackToMarkers(resource, notes, IMarker.SEVERITY_INFO);
 		} else {
 			// Throw an exception to trigger an Eclipse pop-up  
 			throw new StrategoException("Illegal output from " + feedbackFunction + " (should be (errors,warnings,notes) tuple: " + feedback);
 		}
 	}
 	
-	private final void feedbackToMarkers(ISourceInfo sourceInfo, IStrategoList feedbacks, int severity) {
+	private final void feedbackToMarkers(IResource resource, IStrategoList feedbacks, int severity) {
 	    for (IStrategoTerm feedback : feedbacks.getAllSubterms()) {
 	    	if (feedback.getSubtermCount() != 2 || feedback.getSubterm(1).getTermType() != STRING) {
 				// Throw an exception to trigger an Eclipse pop-up
@@ -282,7 +265,6 @@
 	    	}
 	        IStrategoTerm term = termAt(feedback, 0);
 			IStrategoString message = termAt(feedback, 1);
-			IResource resource = sourceInfo.getResource();
 			messages.addMarker(resource, term, message.stringValue(), severity);
 	    }
 	}	
@@ -292,76 +274,108 @@
 	 * 
 	 * @see #getAstNode(IStrategoTerm)  To retrieve the AST node associated with the resulting term.
 	 */
-	public IStrategoTerm invoke(String function, IStrategoAstNode node) {
-		synchronized (Environment.getSyncRoot()) {
-			ITermFactory factory = Environment.getTermFactory();
-			String path = node.getSourceInfo().getResource().getProjectRelativePath().toPortableString();
-			String absolutePath = node.getSourceInfo().getProject().getRawProject().getLocation().toOSString();
+	public IStrategoTerm invoke(String function, IStrategoAstNode node)
+			throws UndefinedStrategyException, InterpreterErrorExit, InterpreterExit, InterpreterException {
+
+		IStrategoTerm input = makeInputTerm(node, true);
+		return invoke(function, input, node.getResource());
+	}
+
+	private static IStrategoTerm makeInputTerm(IStrategoAstNode node, boolean includeSubNode) {
+		ITermFactory factory = Environment.getTermFactory();
+		String path = node.getResource().getProjectRelativePath().toPortableString();
+		String absolutePath = node.getResource().getProject().getLocation().toOSString();
+		
+		if (includeSubNode) {
 			IStrategoTerm[] inputParts = {
 					node.getTerm(),
 					StrategoTermPath.createPath(node),
 					getRoot(node).getTerm(),
 					factory.makeString(path),
 					factory.makeString(absolutePath)
-			};
-			IStrategoTerm input = factory.makeTuple(inputParts);
-			
-			return invoke(function, input, node.getSourceInfo());
+				};
+			return factory.makeTuple(inputParts);
+		} else {
+			IStrategoTerm[] inputParts = {
+					node.getTerm(),
+					factory.makeString(path),
+					factory.makeString(absolutePath)
+				};
+			return factory.makeTuple(inputParts);
 		}
 	}
 	
 	/**
 	 * Invoke a Stratego function with a specific term its input,
 	 * given a particular working directory.
-	 * 
-	 * @see #getAstNode(IStrategoTerm)  To retrieve the AST node associated with the resulting term.
 	 */
-	public IStrategoTerm invoke(String function, IStrategoTerm term, ISourceInfo sourceInfo) {
+	public IStrategoTerm invoke(String function, IStrategoTerm term, IResource resource)
+			throws UndefinedStrategyException, InterpreterErrorExit, InterpreterExit, InterpreterException {
+		
 		if (runtime == null)
 			return null;
 		
 		synchronized (Environment.getSyncRoot()) {
 		    Debug.startTimer();
-		    boolean success;
-			try {
-				// TODO: Make Context support monitor.isCanceled()?
-				//       (e.g., overriding Context.lookupPrimitive to throw an OperationCanceledException) 
-				
-				runtime.setCurrent(term);
-				initInterpreterPath(sourceInfo.getPath().removeLastSegments(1));
-	
-				((LoggingIOAgent) runtime.getIOAgent()).clearLog();
-				success = runtime.invoke(function);
+			// TODO: Make Context support monitor.isCanceled()?
+			//       (e.g., overriding Context.lookupPrimitive to throw an OperationCanceledException) 
+			
+			runtime.setCurrent(term);
+			IPath path = resource.getProject().getLocation().append(resource.getProjectRelativePath());
+			initInterpreterPath(path.removeLastSegments(1));
 
-			} catch (InterpreterExit e) {
-				// (source marker should be added by invoking method) 
-				if (descriptor.isDynamicallyLoaded()) EditorIOAgent.activateConsole();
-				Environment.logException("Runtime exited when evaluating strategy " + function, e);
-				// Successful exit code or not, we needed to return a result term
-				return null;
-			} catch (InterpreterException e) {
-				// TODO: for asyncUpdate(), programmer errors like these should just be thrown, triggering a pop-up
-				// (source marker should be added by invoking method) 
-				if (runtime.getContext().getVarScope().lookupSVar(Interpreter.cify(function)) == null) {
-					Environment.logException("Strategy does not exist: " + function, e);
-				} else {
-					if (descriptor.isDynamicallyLoaded()) EditorIOAgent.activateConsole();
-					Environment.logException("Internal error evaluating strategy " + function, e);
-				}
-				return null;
-			} catch (RuntimeException e) {
-				// (source marker should be added by invoking method) 
-				if (descriptor.isDynamicallyLoaded()) EditorIOAgent.activateConsole();
-				Environment.logException("Internal error evaluating strategy " + function, e);
-				return null;
-			}
+			((LoggingIOAgent) runtime.getIOAgent()).clearLog();
+			boolean success = runtime.invoke(function);
 			
 			Debug.stopTimer("Evaluated strategy " + function + (success ? "" : " (failed)"));
-			if (!success) return null;
-			return runtime.current();
+			return success ? runtime.current() : null;
 		}
 	}
 
+	/**
+	 * Invoke a Stratego function with a specific AST node as its input,
+	 * logging and swallowing all exceptions.
+	 * 
+	 * @see #getAstNode(IStrategoTerm)  To retrieve the AST node associated with the resulting term.
+	 */
+	public IStrategoTerm invokeSilent(String function, IStrategoAstNode node) {
+		return invokeSilent(function, node.getResource(), makeInputTerm(node, true));
+	}
+	
+	/**
+	 * Invoke a Stratego function with a specific term its input,
+	 * given a particular working directory.
+	 * Logs and swallows all exceptions.
+	 */
+	public IStrategoTerm invokeSilent(String function, IResource resource, IStrategoTerm input) {
+		IStrategoTerm result = null;
+		
+		try {
+			result = invoke(function, input, resource);
+			if (result == null) {
+				if (descriptor.isDynamicallyLoaded()) EditorIOAgent.activateConsole();
+				String log = getLog();
+				Environment.logException(log.length() == 0 ? "Analysis failed" : "Analysis failed:\n" + log);
+				messages.addMarkerFirstLine(resource, "Analysis failed (see error log)", IMarker.SEVERITY_ERROR);
+			}
+		} catch (InterpreterExit e) {
+			if (descriptor.isDynamicallyLoaded()) EditorIOAgent.activateConsole();
+			messages.addMarkerFirstLine(resource, "Analysis failed", IMarker.SEVERITY_ERROR);
+			Environment.logException("Runtime exited when evaluating strategy " + function, e);
+		} catch (UndefinedStrategyException e) {
+			// Note that this condition may also be reached when the semantic service hasn't been loaded yet
+			Environment.logException("Strategy does not exist: " + function, e);
+		} catch (InterpreterException e) {
+			Environment.logException("Internal error evaluating strategy " + function, e);
+			if (descriptor.isDynamicallyLoaded()) EditorIOAgent.activateConsole();
+		} catch (RuntimeException e) {
+			Environment.logException("Internal error evaluating strategy " + function, e);
+			if (descriptor.isDynamicallyLoaded()) EditorIOAgent.activateConsole();
+		}
+		
+		return result;
+	}
+
 	public IAst getAstNode(IStrategoTerm term) {
 		if (term == null) return null;
 			

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -45,7 +45,7 @@
 			return null;
 		}
 		
-		IStrategoTerm resultTerm = observer.invoke(function, node);
+		IStrategoTerm resultTerm = observer.invokeSilent(function, node);
 		if (resultTerm == null && !observer.isUpdateStarted())
 			observer.asyncUpdate(parseController);
 		return observer.getAstNode(resultTerm);
@@ -61,7 +61,7 @@
 			return null;
 		}
 		
-		IStrategoTerm result = observer.invoke(function, node);
+		IStrategoTerm result = observer.invokeSilent(function, node);
 		if (result == null) {
 			return null;
 		} else if (isTermString(result)) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -4,6 +4,7 @@
 
 import lpg.runtime.IAst;
 
+import org.eclipse.core.resources.IResource;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.ISourceInfo;
 
@@ -22,8 +23,11 @@
 	
 	String getSort();
 	
+	@Deprecated
 	ISourceInfo getSourceInfo();
 	
+	IResource getResource();
+	
 	String yield();
 	
 	// SPECIALIZED FROM PARENT INTERFACE

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java	2009-11-05 14:32:05 UTC (rev 20198)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java	2009-11-05 14:38:31 UTC (rev 20199)
@@ -80,7 +80,7 @@
 	
 	private IStrategoTerm ensureLink(IStrategoTerm term, IStrategoTerm oldTerm) {
 		if (term instanceof IWrappedAstNode) {
-			return (IWrappedAstNode) term;
+			return term;
 		} else if (oldTerm instanceof IWrappedAstNode) {
 			return new WrappedAstNodeLink(this, term, ((IWrappedAstNode) oldTerm).getNode());
 		} else {



From L.C.L.Kats at tudelft.nl  Thu Nov  5 15:44:33 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 05 Nov 2009 14:44:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20200 - LennartKats - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	. dynamicloading parser parser/ast stratego/adapter
Message-ID: <200911051444.nA5EiX6r002712@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-05 14:44:32 +0000 (Thu, 05 Nov 2009)
New Revision: 20200

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20200&view=rev

Removed:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/ISourceInfo.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java

Log:
Removed ISourceInfo.

Changes:

Deleted: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/ISourceInfo.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/ISourceInfo.java	2009-11-05 14:38:31 UTC (rev 20199)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/ISourceInfo.java	2009-11-05 14:44:32 UTC (rev 20200)
@@ -1,22 +0,0 @@
-package org.strategoxt.imp.runtime;
-
-import org.eclipse.core.resources.IResource;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.imp.model.ISourceProject;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public interface ISourceInfo {
-	// TODO: Just use a IResource or IFile instead of ISourceInfo
-	//       now that it no longer provides the active language
-
-	@Deprecated
-	IPath getPath();
-
-	@Deprecated
-	IResource getResource();
-
-	@Deprecated
-	ISourceProject getProject();
-}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-11-05 14:38:31 UTC (rev 20199)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-11-05 14:44:32 UTC (rev 20200)
@@ -16,7 +16,6 @@
 import org.eclipse.imp.services.ILanguageSyntaxProperties;
 import org.eclipse.jface.text.IRegion;
 import org.strategoxt.imp.runtime.EditorState;
-import org.strategoxt.imp.runtime.ISourceInfo;
 
 /**
  * Dynamic proxy class to a parse controller.
@@ -25,7 +24,7 @@
  * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class DynamicParseController extends AbstractService<IParseController> implements IParseController, ISourceInfo {
+public class DynamicParseController extends AbstractService<IParseController> implements IParseController {
 	
 	private static final int REINIT_PARSE_DELAY = 100;
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-11-05 14:38:31 UTC (rev 20199)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-11-05 14:44:32 UTC (rev 20200)
@@ -157,7 +157,7 @@
 	 */
 	protected RootAstNode internalImplode(ATerm asfix) {
 		AstNode imploded = imploder.implode(asfix, currentTokenizer);
-		return RootAstNode.makeRoot(imploded, getController());		
+		return RootAstNode.makeRoot(imploded, getController() == null ? null : getController().getResource());
 	}
 	
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-11-05 14:38:31 UTC (rev 20199)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-11-05 14:44:32 UTC (rev 20200)
@@ -38,7 +38,6 @@
 import org.spoofax.jsglr.Tools;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.ISourceInfo;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.parser.ast.AstNode;
 import org.strategoxt.imp.runtime.parser.ast.AstNodeLocator;
@@ -56,7 +55,7 @@
  * @author Lennart Kats <L.C.L.Kats add tudelft.nl>
  * @author Karl Trygve Kalleberg <karltk add strategoxt.org>
  */
-public class SGLRParseController implements IParseController, ISourceInfo {
+public class SGLRParseController implements IParseController {
 	
 	private final static int PARSE_TIMEOUT = 4 * 1000;
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2009-11-05 14:38:31 UTC (rev 20199)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2009-11-05 14:44:32 UTC (rev 20200)
@@ -14,7 +14,6 @@
 import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.interpreter.terms.InlinePrinter;
 import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.ISourceInfo;
 import org.strategoxt.imp.runtime.parser.tokens.SGLRToken;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 
@@ -59,11 +58,6 @@
 		return false;
 	}
 	
-	@Deprecated
-	public ISourceInfo getSourceInfo() {
-		return getRoot().getSourceInfo();
-	}
-	
 	public IResource getResource() {
 		return getRoot().getResource();
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java	2009-11-05 14:38:31 UTC (rev 20199)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java	2009-11-05 14:44:32 UTC (rev 20200)
@@ -6,21 +6,14 @@
 
 import org.eclipse.core.resources.IResource;
 import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.strategoxt.imp.runtime.ISourceInfo;
 
 public class RootAstNode extends AstNode {
 	
-	private final ISourceInfo sourceInfo;
-
-	@Override
-	@Deprecated
-	public ISourceInfo getSourceInfo() {
-		return sourceInfo;
-	}
+	private final IResource resource;
 	
 	@Override
 	public IResource getResource() {
-		return sourceInfo.getResource();
+		return resource;
 	}
 	
 	@Override
@@ -29,16 +22,16 @@
 	}
 
 	protected RootAstNode(String sort, IToken leftToken, IToken rightToken, String constructor,
-			ArrayList<AstNode> children, ISourceInfo sourceInfo) {
+			ArrayList<AstNode> children, IResource resource) {
 		
 		super(sort, leftToken, rightToken, constructor, children);
 		
-		this.sourceInfo = sourceInfo;
+		this.resource = resource;
 	}
 	
-	public static RootAstNode makeRoot(AstNode ast, ISourceInfo sourceInfo) {
+	public static RootAstNode makeRoot(AstNode ast, IResource resource) {
 		return new RootAstNode(
 				ast.getSort(), ast.getLeftIToken(), ast.getRightIToken(), ast.getConstructor(),
-				ast.getChildren(), sourceInfo);
+				ast.getChildren(), resource);
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	2009-11-05 14:38:31 UTC (rev 20199)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	2009-11-05 14:44:32 UTC (rev 20200)
@@ -6,7 +6,6 @@
 
 import org.eclipse.core.resources.IResource;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.runtime.ISourceInfo;
 
 /**
  * Interface for an AST node that can be converted into an ATerm. 
@@ -23,9 +22,6 @@
 	
 	String getSort();
 	
-	@Deprecated
-	ISourceInfo getSourceInfo();
-	
 	IResource getResource();
 	
 	String yield();



From L.C.L.Kats at tudelft.nl  Thu Nov  5 15:49:28 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 05 Nov 2009 14:49:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20201 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <200911051449.nA5EnSPG002770@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-05 14:49:28 +0000 (Thu, 05 Nov 2009)
New Revision: 20201

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20201&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java

Log:
Fixed coloring of comments at the start and end of a file.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java	2009-11-05 14:44:32 UTC (rev 20200)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java	2009-11-05 14:49:28 UTC (rev 20201)
@@ -65,6 +65,8 @@
 			return addEnvColoring(result, node, tokenKind); // TODO: noWhitespaceBackground?
 		} else if (nodeColor == null) {
 			result = getColoring(envMappings, constructor, sort, tokenKind);
+			if (result == null)
+				result = tokenColor;
 		}
 		
 		if (result == null) return null;



From L.C.L.Kats at tudelft.nl  Sun Nov  8 11:09:01 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 08 Nov 2009 10:09:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20202 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
	strategoxt/trunk/strc-core/lib/stratego/strc/front
	strategoxt/trunk/strc-core/lib/stratego/strc/match
	strategoxt/trunk/strc-core/lib/stratego/strc/opt
Message-ID: <200911081009.nA8A91Ip001360@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-08 10:09:00 +0000 (Sun, 08 Nov 2009)
New Revision: 20202

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20202&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   strategoxt/trunk/strc-core/lib/stratego/strc/front/lift-dynamic-rules.str
   strategoxt/trunk/strc-core/lib/stratego/strc/match/desugar-case.str
   strategoxt/trunk/strc-core/lib/stratego/strc/match/match-to-matrix.str
   strategoxt/trunk/strc-core/lib/stratego/strc/match/matrix-to-dfa.str
   strategoxt/trunk/strc-core/lib/stratego/strc/opt/build-match-laws.str
   strategoxt/trunk/strc-core/lib/stratego/strc/opt/define-congruences.str
   strategoxt/trunk/strc-core/lib/stratego/strc/opt/fusion.str
   strategoxt/trunk/strc-core/lib/stratego/strc/opt/stratego-laws.str

Log:
Changing Stratego Law (only for Java builds): without maximal sharing, ?x; !x cannot be simplified unless x is unbound.
This change eliminates the need for the dynamic rule hack seen in the Spoofax/IMP entities example.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-05 14:49:28 UTC (rev 20201)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-08 10:09:00 UTC (rev 20202)
@@ -5,7 +5,7 @@
 
 strategies
   
-  trans-module-name = // TODO: move "undefined" type error to x subterm? remove/fix x_declaration hack?
+  trans-module-name =
      get-sdf-main-module;
      lower-case;
      cify;
@@ -134,11 +134,11 @@
    * Records the definition of an entity in a dynamic rule GetEntity.
    */
   record-entity:
-    Entity(x_declaration, body) -> Entity(x_declaration, body)
+    Entity(x, body) -> Entity(x, body)
     with
       x_reference := x_declaration;
       rules(
-        GetEntity :+ x_reference -> x_declaration
+        GetEntity :+ x -> x
       )
 
 signature constructors

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/lift-dynamic-rules.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/lift-dynamic-rules.str	2009-11-05 14:49:28 UTC (rev 20201)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/lift-dynamic-rules.str	2009-11-08 10:09:00 UTC (rev 20202)
@@ -416,8 +416,12 @@
     |[ rules(  f(a1*|a2*) : t1 -> t2 where s ) ]| -> t*
     where
       <tvars; map(!Var(<id>))> t1 => keys
-      ; <tvars; filter(test(ContextVar); !Var(<id>))> (t1, t2, s) => vals
-      ; <diff> (vals, keys) => t*
+      ; <tvars; filter(test(ContextVar); !Var(<id>))> (t2, s) => vals
+      ; if AssumeSharedTerms => 1 then
+          t* := <diff> (vals, keys)
+        else
+          t* := vals
+        end
 
   /**
    * Get a stamp for a dynamic rule closure based on its standardized renaming,
@@ -470,8 +474,13 @@
         ; <closure> drd => t*
         ; new => x // holding entire lhs
         ; <tvars; map(!DefaultVarDec(<id>))> t1 => a3* // variables in lhs
+        ; if AssumeSharedTerms => 1 then
+            a3'* := a3*
+          else
+            a3'* := <map(DefaultVarDec({ a: ?a; if <one(Var(?a))> t* then new end }))> a3* // ignore lhs vars
+          end
         ; add-def(||[ 
-            g(a1*|a2*, a3*, x) : (~str:stamp, t*) -> t2 where <s> x 
+            g(a1*|a2*, a3'*, x) : (~str:stamp, t*) -> t2 where <s> x 
           ]|)
       end
 

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/match/desugar-case.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/match/desugar-case.str	2009-11-05 14:49:28 UTC (rev 20201)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/match/desugar-case.str	2009-11-08 10:09:00 UTC (rev 20202)
@@ -6,7 +6,8 @@
 strategies
 
   desugar-case =
-    topdown(repeat(DesugarAssign + DesugarCase + Optimize))
+    where(assume-shared-terms := <AssumeSharedTerms>)
+  ; topdown(repeat(DesugarAssign + DesugarCase + Optimize(|assume-shared-terms)))
 
   DesugarAssign :
     Assign(Var(x), t) -> Seq(Build(t), Match(Var(x)))

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/match/match-to-matrix.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/match/match-to-matrix.str	2009-11-05 14:49:28 UTC (rev 20201)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/match/match-to-matrix.str	2009-11-08 10:09:00 UTC (rev 20202)
@@ -7,7 +7,8 @@
 strategies
 
   match-to-matrix_OLD =
-    downup(repeat(MatchToMatrix + MatrixMerge + Simplify))
+    where(assume-shared-terms := <AssumeSharedTerms>)
+  ; downup(repeat(MatchToMatrix + MatrixMerge + Simplify(|assume-shared-terms)))
 
   match-to-matrix =
   (

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/match/matrix-to-dfa.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/match/matrix-to-dfa.str	2009-11-05 14:49:28 UTC (rev 20201)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/match/matrix-to-dfa.str	2009-11-08 10:09:00 UTC (rev 20202)
@@ -15,7 +15,8 @@
 
   matrix-to-dfa = 
     {| MatrixSeenBefore :
-       rec x(repeat(reduce-matrix + MatrixScope + Simplify); all(x))
+       where(assume-shared-terms := <AssumeSharedTerms>)
+     ; rec x(repeat(reduce-matrix + MatrixScope + Simplify(|assume-shared-terms)); all(x))
     |}
 
   reduce-matrix = 

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/opt/build-match-laws.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/opt/build-match-laws.str	2009-11-05 14:49:28 UTC (rev 20201)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/opt/build-match-laws.str	2009-11-08 10:09:00 UTC (rev 20202)
@@ -3,9 +3,22 @@
 
 rules // combinations of match and build
 
-  BuildMatch = 
+  BuildMatch =
+    BuildMatch(|<AssumeSharedTerms>)
+
+  BuildMatch(|assume-shared-terms) = 
     MisMatch + BuildMatchFusion 
-    + MatchIdem + BuildMatchIdem + MatchBuildIdemVar + BuildMatchIdemVar
+    + MatchIdem
+    + BuildMatchIdem
+    
+    + // TODO: use bound/unboundness java-based optimization?
+      // Without maximal sharing, there's no guaranteed relation between term equality and identity
+      if !assume-shared-terms => 1 then
+        MatchBuildIdemVar
+      else
+        MatchBuildIdemVarUnbound
+      end
+
 	// + MatchBuildIdem + BuildBuild
     + BuildAlwaysSucceeds
 
@@ -71,11 +84,11 @@
 //  MatchBuildIdem :
 //    Seq(Match(t), Build(t)) -> Match(t)
   
-  BuildMatchIdemVar :
+  MatchBuildIdemVar :
     Seq(Match(Var(x)), Seq(Match(t), Seq(Build(Var(x)), s))) ->
     Seq(Match(Var(x)), Seq(Match(t),                    s))
   
-  BuildMatchIdemVar :
+  MatchBuildIdemVar :
     Seq(Match(Var(x)), Seq(Match(t), Build(Var(x)))) ->
     Seq(Match(Var(x)),     Match(t))
  
@@ -84,8 +97,22 @@
 
   MatchBuildIdemVar :
     Seq(Match(Var(x)), Seq(Build(Var(x)), s)) -> Seq(Match(Var(x)), s)
+  
+  MatchBuildIdemVarUnbound :
+    Seq(Match(Var(x){"unbound"}), Seq(Match(t), Seq(Build(Var(x)), s))) ->
+    Seq(Match(Var(x){"unbound"}), Seq(Match(t),                    s))
+  
+  MatchBuildIdemVarUnbound :
+    Seq(Match(Var(x){"unbound"}), Seq(Match(t), Build(Var(x)))) ->
+    Seq(Match(Var(x){"unbound"}),     Match(t))
+ 
+  MatchBuildIdemVarUnbound :
+    Seq(Match(Var(x){"unbound"}), Build(Var(x))) -> Match(Var(x){"unbound"})
 
+  MatchBuildIdemVarUnbound :
+    Seq(Match(Var(x){"unbound"}), Seq(Build(Var(x)), s)) -> Seq(Match(Var(x){"unbound"}), s)
 
+
 rules // other rules 
 
   MatchSimplify = 

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/opt/define-congruences.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/opt/define-congruences.str	2009-11-05 14:49:28 UTC (rev 20201)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/opt/define-congruences.str	2009-11-08 10:09:00 UTC (rev 20202)
@@ -6,11 +6,13 @@
 strategies
 
   define-congruences =
-    apply-to-bodies(
-      bottomup(repeat(DefineCongruences + Simplify))
+    where(assume-shared-terms := <AssumeSharedTerms>)
+  ; apply-to-bodies(
+      bottomup(repeat(DefineCongruences + Simplify(|assume-shared-terms)))
       ; simplify
     )
 
   define-congruences-def =
-    bottomup(repeat(DefineCongruences + Simplify))
+    where(assume-shared-terms := <AssumeSharedTerms>)
+  ; bottomup(repeat(DefineCongruences + Simplify(|assume-shared-terms)))
     ; simplify

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/opt/fusion.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/opt/fusion.str	2009-11-05 14:49:28 UTC (rev 20201)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/opt/fusion.str	2009-11-08 10:09:00 UTC (rev 20202)
@@ -32,8 +32,9 @@
     )
 
   inline-rules = 
-    rec x(try(
-        Simplify
+    where(assume-shared-terms := <AssumeSharedTerms>)
+  ; rec x(try(
+        Simplify(|assume-shared-terms)
         <+ GuardedLChoice(x, x, x)
 	<+ Scope(id, Seq(Match(id), id))
 	<+ InlineStrat; x

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/opt/stratego-laws.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/opt/stratego-laws.str	2009-11-05 14:49:28 UTC (rev 20201)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/opt/stratego-laws.str	2009-11-08 10:09:00 UTC (rev 20202)
@@ -13,8 +13,8 @@
   stratego/strc/opt/build-match-laws
 
 strategies
-
-  Simplify = 
+  
+  Simplify(|assume-shared-terms) =
     ElimId
     + ElimFail 
     + AssociateR
@@ -22,14 +22,31 @@
     + EmptyScope
     + LetNoDefs
     + LetHoist
-    + BuildMatch
+    + BuildMatch(|assume-shared-terms)
     + MatchSimplify
 
+  // Provided for compatibility; for performance,
+  // assume-shared-terms argument should be locally cached
+  Simplify = 
+    Simplify(|<AssumeSharedTerms>)
+  
+  /**
+   * On Java, where non-shared terms may be used, 
+   * there's no guaranteed relation between term equality and identity,
+   * which has impact on certain optimizations.
+   */
+  AssumeSharedTerms =
+    if <get-config> "JAVA_PLATFORM" + <get-config> "-F" then
+      !0
+    else
+      !1
+    end
+
   DefineCongruences =
     (MatchingCongruence <+ TransformingAnnoCongruence <+ TransformingCongruence)
 
-  Optimize =
-    Simplify
+  Optimize(|assume-shared-terms) =
+    Simplify(|assume-shared-terms)
     + HoistLet 
     + FuseScope
     + WidenScope
@@ -41,13 +58,21 @@
     + RecIsSugar
     + Desugar
 
+  // Provided for compatibility; for performance,
+  // assume-shared-terms argument should be locally cached
+  Optimize =
+    Optimize(|<AssumeSharedTerms>)
 
-  simplify0 = 
-    downup(repeat(Simplify))
+  simplify0 =
+    where(assume-shared-terms := <AssumeSharedTerms>)
+  ; downup(repeat(Simplify(|assume-shared-terms)))
 
-  simplify = 
-    bottomup(
-      repeat( AssociateR ; simplify <+ Optimize )
+  simplify =
+    where(assume-shared-terms := <AssumeSharedTerms>)
+  ; rec rec(
+      bottomup(
+        repeat( AssociateR ; rec <+ Optimize(|assume-shared-terms) )
+      )
     )
     
 //    innermost(Optimize)



From L.C.L.Kats at tudelft.nl  Sun Nov  8 11:43:31 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 08 Nov 2009 10:43:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20203 - LennartKats -
	strategoxt/trunk/stratego-front/pp
	strategoxt/trunk/stratego-front/syn
	strategoxt/trunk/strc-core/lib/stratego/strc/c
	strategoxt/trunk/strc-core/lib/stratego/strc/opt
	strategoxt/trunk/strc-core/lib/stratego/strc/pp
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
	strc-java/trunk/trans
Message-ID: <200911081043.nA8AhVPI001609@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-08 10:43:31 +0000 (Sun, 08 Nov 2009)
New Revision: 20203

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20203&view=rev

Modified:
   strategoxt/trunk/stratego-front/pp/Stratego-Core-pretty.pp
   strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp
   strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp
   strategoxt/trunk/stratego-front/syn/Stratego-Core-Strategies.sdf
   strategoxt/trunk/stratego-front/syn/Stratego-Sugar-Strategies.sdf
   strategoxt/trunk/strc-core/lib/stratego/strc/c/s2c.str
   strategoxt/trunk/strc-core/lib/stratego/strc/opt/build-match-laws.str
   strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/strc-compat.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
   strc-java/trunk/trans/java-optimize.str
   strc-java/trunk/trans/s2j.str

Log:
New "proceed" keyword that replaces the "override" strategy.

Changes:

Modified: strategoxt/trunk/stratego-front/pp/Stratego-Core-pretty.pp
===================================================================
--- strategoxt/trunk/stratego-front/pp/Stratego-Core-pretty.pp	2009-11-08 10:09:00 UTC (rev 20202)
+++ strategoxt/trunk/stratego-front/pp/Stratego-Core-pretty.pp	2009-11-08 10:43:31 UTC (rev 20203)
@@ -17,6 +17,12 @@
    Override                  -- KW["override"],
    Extend                    -- KW["extend"],
    Internal                  -- KW["internal"],
+   ProceedNoArgs             -- KW["proceed"],
+   Proceed                   -- KW["proceed"] KW["("] _1 KW[")"],
+   Proceed.1:iter-star-sep   -- _1 KW[","],
+   ProceedT                  -- KW["proceed"] KW["("] _1 KW["|"] _2 KW[")"],
+   ProceedT.1:iter-star-sep  -- _1 KW[","],
+   ProceedT.1:iter-star-sep  -- _1 KW[","],
    AnnoDef                   -- H [ _1 _2 ], 
    VarDec                    -- _1 KW[":"] _2,
    SVar                      -- _1,

Modified: strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp
===================================================================
--- strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp	2009-11-08 10:09:00 UTC (rev 20202)
+++ strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp	2009-11-08 10:43:31 UTC (rev 20203)
@@ -255,6 +255,12 @@
    Override                                           -- KW["override"],
    Extend                                             -- KW["extend"],
    Internal                                           -- KW["internal"],
+   ProceedNoArgs                                      -- KW["proceed"],
+   Proceed                                            -- KW["proceed"] KW["("] _1 KW[")"],
+   Proceed.1:iter-star-sep                            -- _1 KW[","],
+   ProceedT                                           -- KW["proceed"] KW["("] _1 KW["|"] _2 KW[")"],
+   ProceedT.1:iter-star-sep                           -- _1 KW[","],
+   ProceedT.1:iter-star-sep                           -- _1 KW[","],
    AnnoDef                                            -- H [ _1 _2 ], 
    ExtSDefInl                                         -- V is=2 [H  [KW["external"] H hs=0 [_1 KW["("] H  [_2]] KW["|"] H hs=0 [H  [_3] KW[")"]] KW["="]] _4],
    ExtSDefInl.2:iter-star-sep                         -- _1 KW[","],

Modified: strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp
===================================================================
--- strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp	2009-11-08 10:09:00 UTC (rev 20202)
+++ strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp	2009-11-08 10:43:31 UTC (rev 20203)
@@ -243,6 +243,12 @@
    Override                                           -- KW["override"],
    Extend                                             -- KW["extend"],
    Internal                                           -- KW["internal"],
+   ProceedNoArgs                                      -- KW["proceed"],
+   Proceed                                            -- KW["proceed"] KW["("] _1 KW[")"],
+   Proceed.1:iter-star-sep                            -- _1 KW[","],
+   ProceedT                                           -- KW["proceed"] KW["("] _1 KW["|"] _2 KW[")"],
+   ProceedT.1:iter-star-sep                           -- _1 KW[","],
+   ProceedT.1:iter-star-sep                           -- _1 KW[","],
    AnnoDef                                            -- H [ _1 _2 ], 
    ExtSDefInl                                         -- V is=2 [H  [KW["external"] H hs=0 [_1 KW["("] H  [_2]] KW["|"] H hs=0 [H  [_3] KW[")"]] KW["="]] _4],
    ExtSDefInl.2:iter-star-sep                         -- _1 KW[","],

Modified: strategoxt/trunk/stratego-front/syn/Stratego-Core-Strategies.sdf
===================================================================
--- strategoxt/trunk/stratego-front/syn/Stratego-Core-Strategies.sdf	2009-11-08 10:09:00 UTC (rev 20202)
+++ strategoxt/trunk/stratego-front/syn/Stratego-Core-Strategies.sdf	2009-11-08 10:43:31 UTC (rev 20203)
@@ -69,8 +69,10 @@
 
     "fail" 				  -> Strategy {cons("Fail")}
     "id" 				  -> Strategy {cons("Id")}
-    "override" 			  -> Strategy {cons("Override")}
 
+    "proceed" "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("ProceedT"), prefer}
+    "proceed"                                         -> Strategy {cons("ProceedNoArgs"), prefer}
+
     %% Match and build
 
     "?" Term 				  -> Strategy {cons("Match")}

Modified: strategoxt/trunk/stratego-front/syn/Stratego-Sugar-Strategies.sdf
===================================================================
--- strategoxt/trunk/stratego-front/syn/Stratego-Sugar-Strategies.sdf	2009-11-08 10:09:00 UTC (rev 20202)
+++ strategoxt/trunk/stratego-front/syn/Stratego-Sugar-Strategies.sdf	2009-11-08 10:43:31 UTC (rev 20203)
@@ -86,6 +86,9 @@
     Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
     Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
 
+    "proceed"                          -> Strategy {cons("ProceedNoArgs"), prefer}
+    "proceed" "(" {Strategy "," }+ ")" -> Strategy {cons("Proceed"), prefer}
+
     "if" Strategy "then" Strategy 
                   "else" Strategy "end"   -> Strategy {cons("CondChoice")}
     "if" Strategy "then" Strategy "end"   -> Strategy {cons("IfThen")}

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/c/s2c.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/c/s2c.str	2009-11-08 10:09:00 UTC (rev 20202)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/c/s2c.str	2009-11-08 10:43:31 UTC (rev 20203)
@@ -393,7 +393,13 @@
     Fail() -> stm|[ goto ~id:F; ]|
   
   TranslateStrat(|S,F) :
-    Override() -> <fatal-err(|"override call not supported on this platform")>
+    ProceedNoArgs() -> <fatal-err(|"proceed not yet supported on this platform")>
+  
+  TranslateStrat(|S,F) :
+    ProceedT(_, _) -> <fatal-err(|"proceed not yet supported on this platform")>
+  
+  TranslateStrat(|S,F) :
+    Proceed(_) -> <fatal-err(|"proceed not yet supported on this platform")>
 
   TranslateStrat(|S,F) :
     Scope(xs, s) -> 

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/opt/build-match-laws.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/opt/build-match-laws.str	2009-11-08 10:09:00 UTC (rev 20202)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/opt/build-match-laws.str	2009-11-08 10:43:31 UTC (rev 20203)
@@ -11,8 +11,7 @@
     + MatchIdem
     + BuildMatchIdem
     
-    + // TODO: use bound/unboundness java-based optimization?
-      // Without maximal sharing, there's no guaranteed relation between term equality and identity
+    + // Without maximal sharing, there's no guaranteed relation between term equality and identity
       if !assume-shared-terms => 1 then
         MatchBuildIdemVar
       else

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str	2009-11-08 10:09:00 UTC (rev 20202)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str	2009-11-08 10:43:31 UTC (rev 20203)
@@ -453,9 +453,15 @@
    Extend() -> KW ["extend"]
 
   stratego-to-abox : 
-   Override() -> KW ["override"]
+   ProceedNoArgs() -> KW ["proceed"]
 
   stratego-to-abox : 
+   ProceedT(s*, t*) -> <stratego-to-abox> CallT("proceed", s*, t*)
+
+  stratego-to-abox : 
+   Proceed(s*) -> <stratego-to-abox> Call("proceed", s*)
+
+  stratego-to-abox : 
    Internal() -> KW ["internal"]
 
 rules

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/strc-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/strc-compat.str	2009-11-08 10:09:00 UTC (rev 20202)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/strc-compat.str	2009-11-08 10:43:31 UTC (rev 20203)
@@ -37,7 +37,7 @@
    extend pack-stratego-parse-stratego:
      (IncludeFromPath("libjava-front"), includes) -> result
      where
-       override => result // prefer local (-I) definition
+       proceed => result // prefer local (-I) definition
      <+
        result := ("", <import-term(libjava-front.rtree)>)
    

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-11-08 10:09:00 UTC (rev 20202)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-11-08 10:43:31 UTC (rev 20203)
@@ -13,7 +13,7 @@
 
   override xtc-find =
     warn-msg(|[<whoami <+ !"application">, " uses xtc to find non-local file ", <id>]);
-    override
+    proceed
   <+
     id // HACK: try to find something on the path instead
 

Modified: strc-java/trunk/trans/java-optimize.str
===================================================================
--- strc-java/trunk/trans/java-optimize.str	2009-11-08 10:09:00 UTC (rev 20202)
+++ strc-java/trunk/trans/java-optimize.str	2009-11-08 10:43:31 UTC (rev 20203)
@@ -41,7 +41,8 @@
     where
       not(x := y)
     ; <has-no-side-effects> e1
-    ; e2' := <sometd((ExprName(Id(x)) -> e1))> e2
+    ; e2' := <alltd((ExprName(Id(x)) -> e1))> e2
+    ; not(e2' := e2)
   
   optimize-assignments :
     bstm* |[ x = y; x = z; bstm* ]| ->

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-11-08 10:09:00 UTC (rev 20202)
+++ strc-java/trunk/trans/s2j.str	2009-11-08 10:43:31 UTC (rev 20203)
@@ -610,7 +610,9 @@
   translate-Platform :
     CallT(SVar("if_c_platform_1_0"), [s], []) ->  Empty()
 
-  // TODO: support Proceed(s*, t*)
+  // TODO: Proceed(s*) / ProceedT(s*, t*)
+  translate-Proceed :
+    <Proceed(id) + ProceedT(id, id)> -> <fatal-err(|"proceed with arguments is not implemented yet")>
 
   translate-Proceed :
     <ProceedNoArgs() + Override()> -> // TODO: remove "override" strategy keyword
@@ -621,7 +623,7 @@
     with
       e_outer := <ProceedInvoke>
     <+
-      fatal-err(|"override call illegal in this context")
+      fatal-err(|"proceed illegal in this context")
 
   translate-Escape :
     Escape(java) -> java



From R.B.Vermaas at tudelft.nl  Mon Nov  9 09:43:22 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 09 Nov 2009 08:43:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20204 - rob - hydra
Message-ID: <200911090843.nA98hM0i016572@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-11-09 08:43:22 +0000 (Mon, 09 Nov 2009)
New Revision: 20204

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20204&view=rev

Modified:
   hydra/build.nix

Log:
duplicate config flag for docs

Changes:

Modified: hydra/build.nix
===================================================================
--- hydra/build.nix	2009-11-08 10:43:31 UTC (rev 20203)
+++ hydra/build.nix	2009-11-09 08:43:22 UTC (rev 20204)
@@ -206,7 +206,7 @@
           ln -s $src${subdirSrc} ${packageName}
         fi
 
-        ${easyBuild pkgsDefault specs.xdoc}/bin/xdoc ${xdocFlags} --title "${title}" --html $out/docs --xdoc-info $out/docs/${packageName}.xdocinfo --config xdoc.conf
+        ${easyBuild pkgsDefault specs.xdoc}/bin/xdoc ${xdocFlags} --title "${title}" --html $out/docs --xdoc-info $out/docs/${packageName}.xdocinfo
 	rm -f $out/docs/${packageName}.xdocinfo
         chmod -R 755 $out/docs
       '';



From L.C.L.Kats at tudelft.nl  Mon Nov  9 10:34:45 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 09 Nov 2009 09:34:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20205 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	strategoxt/trunk/stratego-regular/xtc
	strc-java/trunk/META-INF strc-java/trunk/java
	strc-java/trunk/java/runtime
	strc-java/trunk/java/runtime/org/strategoxt
	strc-java/trunk/java/runtime/org/strategoxt/lang
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/stratego_rtg_compat
	strc-java/trunk/java/runtime/org/strategoxt/lang/terms
	strc-java/trunk/java/tools/org/strategoxt/tools
	strc-java/trunk/java/tools/org/strategoxt/tools/lib
	strc-java/trunk/test strc-java/trunk/tools
Message-ID: <200911090934.nA99Yj8e017398@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-09 09:34:44 +0000 (Mon, 09 Nov 2009)
New Revision: 20205

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20205&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_repeat_1_0.java
   strc-java/trunk/test/test-tools.sh
Removed:
   strc-java/trunk/java/tools/org/strategoxt/tools/sdf2rtg/
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
   strategoxt/trunk/stratego-regular/xtc/regular-xtc-tools.str
   strc-java/trunk/META-INF/MANIFEST.MF
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/NativeCallHelper.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/stratego_rtg_compat/strrtg_repeat_1_0.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoInt.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoReal.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java
   strc-java/trunk/java/runtime/start.java
   strc-java/trunk/java/spoofax-libs.jar
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/core-sdf-grammar2rtg.str
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/pack-sdf.str
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/rtg2sig.str
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str
   strc-java/trunk/test/Makefile.am
   strc-java/trunk/tools/strj-jar

Log:
- Print stacktraces to the IOAgent output stream
- Minimized XTC dependencies in org.strategoxt.tool
- Replaced repeat(s) with strrtg-repeat(s)


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Context.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -15,6 +15,7 @@
 
 import org.spoofax.DebugUtil;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.IOperatorRegistry;
 import org.spoofax.interpreter.library.java.JFFLibrary;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
@@ -62,22 +63,33 @@
         if (!skipStandardLibraries) {
            addOperatorRegistry(new SSLLibrary());
            addOperatorRegistry(new JFFLibrary(factory));
+           stackTracer.setIOAgent(getIOAgent());
         }
     }
 
     public IStrategoTerm current() {
         return current;
     }
+
+    public void setCurrent(IStrategoTerm term) {
+        current = term;
+    }
     
     public StackTracer getStackTracer() {
         return stackTracer;
     }
-
-    public void setCurrent(IStrategoTerm term) {
-        current = term;
+    
+    public IOAgent getIOAgent() {
+        SSLLibrary op = (SSLLibrary) getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+        return op == null ? null : op.getIOAgent();
     }
+    
+    public void setIOAgent(IOAgent ioAgent) {
+        SSLLibrary op = (SSLLibrary) getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+        if (op == null) throw new IllegalStateException("No SSL library");
+        op.setIOAgent(ioAgent);
+    }
 
-
     public static void debug(Object... s) {
 
         // A bit of a hack but saves 17% of time (according to JProfiler)...

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -115,7 +115,8 @@
     
     public void setIOAgent(IOAgent ioAgent) {
         SSLLibrary op = (SSLLibrary) getContext().getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        op.setIOAgent(ioAgent);
+        op.setIOAgent(ioAgent);
+        getContext().getStackTracer().setIOAgent(ioAgent);
     }
     
     /**
Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -1,5 +1,9 @@
 package org.spoofax.interpreter.core;
 
+import java.io.PrintStream;
+
+import org.spoofax.interpreter.library.IOAgent;
+
 /**
  * Stack tracing support.
  * 
@@ -11,6 +15,8 @@
     
     private static final int MAX_REPORTED_FRAMES_TAIL = 30;
     
+    private IOAgent ioAgent; 
+    
     private String[] frames = new String[50];
     
     private int currentDepth;
@@ -42,6 +48,14 @@
         if (success) failureDepth = 0;
     }
     
+    public IOAgent getIOAgent() {
+        return ioAgent;
+    }
+    
+    public void setIOAgent(IOAgent ioAgent) {
+        this.ioAgent = ioAgent;
+    }
+    
     /**
      *  Returns the current stack trace depth.
      */
@@ -86,29 +100,41 @@
     }
     
     /**
-     * Prints the stack trace to the standard error output.
+     * Prints the stack trace to the error output stream of the IOAgent.
      */
-    public void printStackTrace() {
+    public final void printStackTrace() {
         printStackTrace(false);
     }
 
     /**
-     * Prints the stack trace to the standard error output.
+     * Prints the stack trace to the error output stream of the IOAgent.
      * 
      * @param onlyCurrent
      *            true if only the current frames on the stack should be
      *            printed, and not any failed frames.
      */
-    public void printStackTrace(boolean onlyCurrent) {
+    public final void printStackTrace(boolean onlyCurrent) {
+        PrintStream stream = getIOAgent() == null ? System.err : getIOAgent().getOutputStream(IOAgent.CONST_STDERR);
+        printStackTrace(stream, onlyCurrent);
+    }
+
+    /**
+     * Prints the stack trace to the default error output.
+     * 
+     * @param onlyCurrent
+     *            true if only the current frames on the stack should be
+     *            printed, and not any failed frames.
+     */
+    public void printStackTrace(PrintStream stream, boolean onlyCurrent) {
         int depth = onlyCurrent ? currentDepth : failureDepth;
         String[] frames = this.frames.clone(); // avoid _most_ race conditions (for UncaughtExceptionHandler)
         
         for (int i = 0; i < depth; i++) {
             if (i == MAX_REPORTED_FRAMES - MAX_REPORTED_FRAMES_TAIL) {
-                System.err.println("...truncated...");
+                stream.println("...truncated...");
                 i = Math.max(i + 1, depth - MAX_REPORTED_FRAMES_TAIL);
             }
-            System.err.println("\t" + frames[i]);
+            stream.println("\t" + frames[i]);
         }
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractStrategoOperatorRegistry.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -12,12 +12,21 @@
 
 public abstract class AbstractStrategoOperatorRegistry implements IOperatorRegistry {
 
-    protected Map<String, AbstractPrimitive> registry;
+    private final Map<String, AbstractPrimitive> registry;
     
     protected AbstractStrategoOperatorRegistry() {
-        registry = new HashMap<String, AbstractPrimitive>();
+        this(16);
     }
     
+    protected AbstractStrategoOperatorRegistry(int initialCapacity) {
+        registry = new HashMap<String, AbstractPrimitive>(initialCapacity);
+    }
+
+    @Deprecated
+    protected Map<String, AbstractPrimitive> getRegistry() {
+        return registry;
+    }
+    
     // FIXME kill - this is superflouse
     @Deprecated
     protected void add(String name, AbstractPrimitive prim) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -7,8 +7,6 @@
  */
 package org.spoofax.interpreter.library.ssl;
 
-import java.util.Map;
-
 import org.spoofax.interpreter.core.Context;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.library.AbstractPrimitive;
@@ -28,6 +26,7 @@
     private StrategoHashMap tableTable;
 
     public SSLLibrary() {
+        super(150);
         initRegistry();
         init();
     }
@@ -141,10 +140,6 @@
         add(new SSL_stacktrace_get_all_frame_names());
      }
 
-    protected Map<String, AbstractPrimitive> getRegistry() {
-        return registry;
-    }
-
     public AbstractPrimitive lookup(String s) {
         return get(s);
     }

Modified: strategoxt/trunk/stratego-regular/xtc/regular-xtc-tools.str
===================================================================
--- strategoxt/trunk/stratego-regular/xtc/regular-xtc-tools.str	2009-11-09 08:43:22 UTC (rev 20204)
+++ strategoxt/trunk/stratego-regular/xtc/regular-xtc-tools.str	2009-11-09 09:34:44 UTC (rev 20205)
@@ -2,12 +2,20 @@
 imports
   pp-rtg
   libstratego-sglr
+  libstrc
 
 strategies
 
   xtc-pp-abstract-stratego =
-    xtc-transform(!"pp-stratego", !["--abstract" | <pass-verbose> ()])
-
+    with(
+      file   := <xtc-new-file>
+    ; stream := <open-stream> (file, "w")
+    )
+  ; finally(
+      pp-stratego-stream(|stream), <fclose> stream
+    )
+  ; !FILE(file)
+  
   /**
    * @type FILE -> RTG
    */

Modified: strc-java/trunk/META-INF/MANIFEST.MF
===================================================================
--- strc-java/trunk/META-INF/MANIFEST.MF	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/META-INF/MANIFEST.MF	2009-11-09 09:34:44 UTC (rev 20205)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: Stratego/XT Java runtime
 Bundle-SymbolicName: org.strategoxt.strj;singleton:=true
-Bundle-Version: 0.2.3
+Bundle-Version: 0.2.3.qualifier
 Export-Package: .,
  aterm,
  aterm.pure,

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/Makefile.am	2009-11-09 09:34:44 UTC (rev 20205)
@@ -219,7 +219,7 @@
 ###### TOOLS #######
 
 tools/org/strategoxt/tools/Main.java : $(TOOLSTRS:.str=.rtree)
-	$(STRJ) -i tools/org/strategoxt/tools/tools.rtree -o $@ $(STRJFLAGS) -p org.strategoxt.tools -la stratego-lib -la stratego-xtc -la stratego-gpp -la stratego-rtg -la stratego-sglr -la stratego-tool-doc -la stratego-sdf -I $(STRATEGOXT)/share/sdf/xml-front -I tools/org/strategoxt/tools/lib -I $(STRATEGOXT)/share/sdf/gpp -I $(STRATEGOXT)/share/sdf/stratego-regular -I $(STRATEGOXT)/share/stratego-regular -I $(STRATEGOXT)/share/sdf/sdf-front
+	$(STRJ) -i tools/org/strategoxt/tools/tools.rtree -o $@ $(STRJFLAGS) -p org.strategoxt.tools -la stratego-lib -la stratego-xtc -la stratego-gpp -la stratego-rtg -la stratego-sglr -la stratego-tool-doc -la stratego-sdf -la stratego-aterm -la strc -I $(STRATEGOXT)/share/sdf/xml-front -I tools/org/strategoxt/tools/lib -I $(STRATEGOXT)/share/sdf/gpp -I $(STRATEGOXT)/share/sdf/stratego-regular -I $(STRATEGOXT)/share/stratego-regular -I $(STRATEGOXT)/share/sdf/sdf-front
 
 ###### COMPILER #######
 

Modified: strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -73,10 +73,7 @@
 	public void load(IStrategoTerm term) throws InterpreterException {
 		// Lazily register library strategies
 		// (since this interpreter may only be used with compiled strategies)
-		if (!registeredLibraries) {
-			registeredLibraries = true;
-			registerLibraries();
-		}
+		init();
 		super.load(term);
 	}
 
@@ -129,6 +126,17 @@
 			}
 		}
 	}
+
+	/**
+	 * Eagerly initializes this interpreter, loading the standard libraries.
+	 * (If not invoked, load() ensures lazy initialization.)
+	 */
+	public void init() {
+		if (!registeredLibraries) {
+			registeredLibraries = true;
+			registerLibraries();
+		}
+	}
 	
 	/**
 	 * Initialize the interpreter register with all standard library strategies.

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -89,14 +89,18 @@
 		return exceptionHandler;
 	}
 	
-    public final IOAgent getIOAgent() {
-        SSLLibrary op = (SSLLibrary) getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        return op.getIOAgent();
+    @Override
+	public IOAgent getIOAgent() {
+		SSLLibrary op = (SSLLibrary) getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+		return op == null ? null : op.getIOAgent();
     }
     
-    public final void setIOAgent(IOAgent ioAgent) {
+    @Override
+    public void setIOAgent(IOAgent ioAgent) {
         SSLLibrary op = (SSLLibrary) getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+        if (op == null) throw new IllegalStateException("No SSL library");
         op.setIOAgent(ioAgent);
+        super.setIOAgent(ioAgent);
     }
 	
 	/**

Copied: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_repeat_1_0.java (from rev 20133, strc-java/trunk/java/runtime/org/strategoxt/lang/compat/stratego_rtg_compat/strrtg_repeat_1_0.java)
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_repeat_1_0.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_repeat_1_0.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -0,0 +1,23 @@
+package org.strategoxt.lang;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SRTS_EXT_repeat_1_0 extends Strategy {
+	public static SRTS_EXT_repeat_1_0 instance = new SRTS_EXT_repeat_1_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+		IStrategoTerm result = current;
+		IStrategoTerm next = s.invoke(context, result);
+		
+		while (next != null) {
+			result = next;
+			next = s.invoke(context, result);
+		}
+
+		return result;
+	}
+}
\ No newline at end of file

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/NativeCallHelper.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/NativeCallHelper.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/NativeCallHelper.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -14,7 +14,6 @@
  */
 public class NativeCallHelper {	
 	
-	@Deprecated
 	public int call(String[] commandArgs, File workingDir, PrintStream outStream, PrintStream errorStream)
 		throws InterruptedException, IOException {
 		return call(commandArgs, null, workingDir, outStream, errorStream);

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -31,10 +31,28 @@
 			throws InterpreterException {
 		
 		try {
-			if (!isTermString(tvars[0]) || !isTermList(tvars[1])) return false;
+			String program;
+			String[] environment = null;
 			
-			String[] commandArgs = toCommandArgs(tvars);
+			if (!isTermList(tvars[1])) 
+				return false;
+			if (isTermTuple(tvars[0])) {
+				if (tvars[0].getSubtermCount() != 2 || !isTermString(tvars[0].getSubterm(0)))
+					return false;
+				program = asJavaString(tvars[0].getSubterm(0));
+				environment = toEnvironment(tvars[0].getSubterm(1));
+				if (environment == null)
+					return false;
+			} else if (isTermString(tvars[0])) {
+				program = asJavaString(tvars[0]);
+			} else {
+				return false;
+			}
 			
+			String[] commandArgs = toCommandArgs(program, tvars);
+			if (commandArgs == null)
+				return false;
+			
 			// I/O setup
 			SSLLibrary op = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
 			IOAgent io = op.getIOAgent();
@@ -43,7 +61,7 @@
 			PrintStream stderr = io.getOutputStream(IOAgent.CONST_STDERR);
 			
 			// Invocation
-			int returnCode = caller.call(commandArgs, new String[0], dir, stdout, stderr);
+			int returnCode = caller.call(commandArgs, environment, dir, stdout, stderr);
 			env.setCurrent(env.getFactory().makeInt(returnCode));
 			return true;
 			
@@ -56,17 +74,29 @@
 		}
 	}
 
-	private String[] toCommandArgs(IStrategoTerm[] tvars) throws IllegalArgumentException {
+	private String[] toCommandArgs(String program, IStrategoTerm[] tvars) throws IllegalArgumentException {
 		IStrategoList args = (IStrategoList) tvars[1];
 		String[] result = new String[1 + args.size()];
-		result[0] = javaString(tvars[0]);
+		result[0] = program;
 		
 		for (int i = 0; i < args.size(); i++) {
 			if (!isTermString(args.get(i)))
-				throw new IllegalArgumentException();
+				return null;
 			result[i+1] = javaString(args.get(i));
 		}
 		
 		return result;
 	}
+	
+	private String[] toEnvironment(IStrategoTerm env) {
+		if (!isTermList(env)) return null;
+
+		String[] results = new String[env.getSubtermCount()];
+		for (int i = 0; i < results.length; i++) {
+			if (!isTermString(env.getSubterm(i))) return null;
+			results[i] = asJavaString(env.getSubterm(i));
+		}
+		
+		return results;
+	}
 }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str	2009-11-09 09:34:44 UTC (rev 20205)
@@ -13,6 +13,7 @@
   // TODO: also implement fork-and-wait?
   
   override call =
+    // (Java extension)
     ?(program, args);
     <is-substring(!".")> program;
     if <is-list> args then
@@ -26,7 +27,13 @@
 
     log(|Info(), ["Calling external tool ", program, " ", <try(separate-by(|" "); concat-strings)> args]);
     prim("SSL_EXT_call", program, args) => 0
+  <+
+    // (Java extension)
+    ?(program, env, args);
 
+    log(|Info(), ["Calling external tool ", program, " ", <try(separate-by(|" "); concat-strings)> args]);
+    prim("SSL_EXT_call", (program, env), args) => 0
+
   override fork(child) =
     fatal-err(|"Forking of applications is not supported on Java at this time")
 

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	2009-11-09 09:34:44 UTC (rev 20205)
@@ -41,6 +41,9 @@
   override foldr(nul, sum, s) =
     ?[_ | _] < SRTS-EXT-crush(nul, sum, s) + []; nul
   
+  override repeat(s) =
+    SRTS-EXT-repeat(s)
+  
   override filter(s) =
     SRTS-EXT-filter(s)
   
@@ -52,3 +55,5 @@
   external SRTS-EXT-filter(s|)
 
   external SRTS-EXT-at-end(s|)
+
+  external SRTS-EXT-repeat(s|)

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/stratego_rtg_compat/strrtg_repeat_1_0.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/stratego_rtg_compat/strrtg_repeat_1_0.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/stratego_rtg_compat/strrtg_repeat_1_0.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -1,25 +1,10 @@
 package org.strategoxt.lang.compat.stratego_rtg_compat;
 
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
+import org.strategoxt.lang.SRTS_EXT_repeat_1_0;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class strrtg_repeat_1_0 extends Strategy {
-	public static strrtg_repeat_1_0 instance = new strrtg_repeat_1_0();
-	
-	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
-		IStrategoTerm result = current;
-		IStrategoTerm next = s.invoke(context, result);
-		
-		while (next != null) {
-			result = next;
-			next = s.invoke(context, result);
-		}
+public class strrtg_repeat_1_0 extends SRTS_EXT_repeat_1_0 {
 
-		return result;
-	}
-}
\ No newline at end of file
+}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoInt.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoInt.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoInt.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -39,7 +39,7 @@
     }
 
     public IStrategoTerm getSubterm(int index) {
-        throw new ArrayIndexOutOfBoundsException();
+        throw new IndexOutOfBoundsException();
     }
 
     public int getSubtermCount() {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoReal.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoReal.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoReal.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -39,7 +39,7 @@
     }
 
     public IStrategoTerm getSubterm(int index) {
-        throw new ArrayIndexOutOfBoundsException();
+        throw new IndexOutOfBoundsException();
     }
 
     public int getSubtermCount() {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -31,7 +31,7 @@
     }
     
     public IStrategoTerm getSubterm(int index) {
-        throw new ArrayIndexOutOfBoundsException();
+        throw new IndexOutOfBoundsException();
     }
 
     public IStrategoTerm[] getAllSubterms() {

Modified: strc-java/trunk/java/runtime/start.java
===================================================================
--- strc-java/trunk/java/runtime/start.java	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/runtime/start.java	2009-11-09 09:34:44 UTC (rev 20205)
@@ -11,6 +11,10 @@
  */
 public class start {
 	public static void main(String[] strategyArgs) {
+		if (strategyArgs == null || strategyArgs.length < 1) {
+			System.out.println("Usage: start <package>.<strategy> <args>");
+			System.exit(127);
+		}
 		String strategy = strategyArgs[0];
 		String[] args = new String[strategyArgs.length - 1];
 		System.arraycopy(strategyArgs, 1, args, 0, args.length);
@@ -29,7 +33,6 @@
 				context.printStackTrace();
 				System.exit(1);
 			} else {
-				System.out.println(result);
 				System.exit(0);
 			}
 		} catch (MissingStrategyException e) {

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/core-sdf-grammar2rtg.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/core-sdf-grammar2rtg.str	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/core-sdf-grammar2rtg.str	2009-11-09 09:34:44 UTC (rev 20205)
@@ -8,7 +8,6 @@
   libstratego-lib
   libstratego-rtg
   libstratego-sdf
-  sdf/tool/xtc
   libstratego-xtc
 
 strategies
@@ -201,6 +200,8 @@
       ; if y := <get-cnstr-name> attrs then
           !rtg |[ A -> y(t*) ]|
         else
+          // TODO: restore constructor errors?
+          //
           //log-prod(|Error(), "No constructor name specified in production:", p)
           //;    log(|Error(), "Resolution: please add a cons attribute to this production.")
           //; if-verbose1(log(|Error(), "Production in abstract syntax: ", p))
@@ -596,9 +597,11 @@
     where(
       xtc-temp-files(
         !prod
-      ; write-to
-      ; xtc-pp-sdf2
-      ; ?FILE(<read-text-file; trim-chars('\n' + '\r' + ' ' + '\t'); string-as-chars(filter(not('\n' + '\r')))>)
+      // TODO: restore log-prod?
+      //; write-to
+      //; xtc-pp-sdf2
+      //; ?FILE(<read-text-file; trim-chars('\n' + '\r' + ' ' + '\t'); string-as-chars(filter(not('\n' + '\r')))>)
+      ; write-to-string
       ; ?prodtxt
       )
     ; log(|severity, msg)

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/pack-sdf.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/pack-sdf.str	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/pack-sdf.str	2009-11-09 09:34:44 UTC (rev 20205)
@@ -14,7 +14,7 @@
   libstratego-lib
   libstratego-xtc
   libstratego-sglr
-  strategoxt-xtc-tools
+  // strategoxt-xtc-tools (in libstrc)
   lib/asfix-abstractions
   lib/pack-sdf-options
 
@@ -68,7 +68,7 @@
 
      in get-module-name => module-name
       ; <fprintnl> (stderr(), ["pack-sdf: error: module ", module-name, " not found"])
-      ; <bagof-ImportedFrom> module-name
+      ; <bagof-ImportedFrom'> module-name
       ; if [] then
           id
         else if ?[mod] then
@@ -238,7 +238,7 @@
     ; where(
         map({import:
             ?import
-          ; rules(ImportedFrom :+ import -> mod)
+          ; rules(ImportedFrom' :+ import -> mod)
         })
       )
     <+ debug(!"a -------------------- "); fail

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/rtg2sig.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/rtg2sig.str	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/rtg2sig.str	2009-11-09 09:34:44 UTC (rev 20205)
@@ -24,7 +24,6 @@
     , ![]
     , xtc-rtg-front-end
       ; core-rtg2sig(|<guess-module-name>)
-      ; write-to
       ; xtc-pp-abstract-stratego
     )
 

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str	2009-11-09 09:34:44 UTC (rev 20205)
@@ -7,33 +7,60 @@
   lib/sdf-options
   lib/core-sdf-grammar2rtg
   regular-xtc-tools
+  sdf-desugar
 
 strategies
 
   main-sdf2rtg =
     xtc-io-wrap(
-      sdf-main-module-option + ignore-option
+      sdf-main-module-option + ignore-option + native-executables-option
     , sdf2rtg-usage
     , sdf2rtg-about
-    , !["sdf2table", "implodePT", "sdf-desugar"]
+    , !["sdf2table", "implodePT"]
     , sdf2rtg
     )
 
   sdf2rtg = 
-      xtc-transform(!"sdf2table", !["-n", "-m", <get-sdf-main-module> | <pass-v-verbose>])
-    ; xtc-transform(!"implodePT")
-    ; xtc-transform(!"sdf-desugar", pass-verbose)
+      native-transform(!"sdf2table", !["-n", "-m", <get-sdf-main-module> | <pass-v-verbose>])
+    ; native-transform(!"implodePT", ![])
     ; read-from
+    ; sdf-desugar
     ; core-sdf-grammar2rtg
     ; xtc-pp-rtg
     <+ <xtc-exit> 1
 
+  native-transform(tool, args) =
+    if <get-config> "-Xnativepath" => nativepath then
+      xtc-ensure-file => FILE(file)
+    ; xtc-new-file    => file'
+    ; tool' := <conc-strings> (nativepath, "/bin/", <tool>)
+    ; lib   := <conc-strings> ("LD_LIBRARY_PATH=", nativepath, "/lib")
+    ; <call> (tool', [lib], ["-i", file, "-o", file' | <args>])
+    ; !FILE(file')
+    else
+      xtc-transform(tool, args)
+    end
+  <+
+    fatal-err(|[<tool>, " failed"])
+
+  native-executables-option =
+    ArgOption("-Xnativepath"
+    , <set-config> ("-Xnativepath", <id>)
+    , !HelpString("-Xnativepath", "Sets the path to the native sdf2table and implodePT executables")
+    )
+
   ignore-option =
     Option("--ignore-missing-cons"
     , <set-config> (IgnoreMissingCons(), ())
     , !HelpString("--ignore-missing-cons", "Ignore productions that do not have a constructor (default: produce error)")
     )
 
+  module-option =
+    ArgOption("--module"
+    , where(<set-config> ("--module", <id>))
+    , !"--module n       Generated module has name n"
+    )
+
   sdf2rtg-usage =
     <tool-doc>
       [ Usage("sdf2rtg [OPTIONS]")

Modified: strc-java/trunk/test/Makefile.am
===================================================================
--- strc-java/trunk/test/Makefile.am	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/test/Makefile.am	2009-11-09 09:34:44 UTC (rev 20205)
@@ -7,7 +7,15 @@
 RUNNERFILES = $(subst .java,.runner,$(JAVAFILES))
 CLEANFILES  = $(JAVAFILES) $(CLASSFILES) $(CTREEFILES)
 
-EXTRA_DIST = $(wildcard */*.str) $(wildcard */*.meta) $(wildcard */*.sdf) $(wildcard */*.tbl) $(wildcard */*.trm) $(wildcard */*.in) $(wildcard */*.res)
+EXTRA_DIST = \
+  $(wildcard */*.str) \
+  $(wildcard */*.meta) \
+  $(wildcard */*.sdf) \
+  $(wildcard */*.tbl) \
+  $(wildcard */*.trm) \
+  $(wildcard */*.in) \
+  $(wildcard */*.res) \
+  test-tools.sh
 
 STRC1TESTS=test01 test02 test03 test04 test05				 \
 		  test06 test07 test08 test09 test10 test11 test12		 \
@@ -71,7 +79,7 @@
 
 # nobase_pkgdata_DATA = $(CTREEFILES) $(JAVAFILES)
 
-TESTS=$(RUNNERFILES)
+TESTS=test-tools.sh $(RUNNERFILES)
 
 CLASSPATH=../java/spoofax-libs.jar:../java/bin:../java/strategoxt.jar:.
 JAVACFLAGS=-J-Xmx256m -J-XX:+UseParallelGC -cp $(CLASSPATH) -source 5 -nowarn
@@ -93,10 +101,10 @@
 	$(JAVAC) $(JAVACFLAGS) $<
 
 %.run : %.class
-	cd `dirname $<`; java -client -Xss2m -cp `echo .:$(CLASSPATH) | sed 's!:../!:../../!g'` `basename $< .class`
+	cd `dirname $<`; java -client -Xverify:none -Xss2m -cp `echo .:$(CLASSPATH) | sed 's!:../!:../../!g'` `basename $< .class`
 
 %.runner : %.class
-	@ echo "cd `dirname $<`; java -client -Xss2m -cp `echo .:$(CLASSPATH) | sed 's!:../!:../../!g'` `basename $< .class`" > $@
+	@ echo "cd `dirname $<`; java -client -Xverify:none -Xss2m -cp `echo .:$(CLASSPATH) | sed 's!:../!:../../!g'` `basename $< .class`" > $@
 	@ chmod 755 $@
 
 ExpStratego.def : Expressions.sdf ExpStratego.sdf

Added: strc-java/trunk/test/test-tools.sh
===================================================================
--- strc-java/trunk/test/test-tools.sh	                        (rev 0)
+++ strc-java/trunk/test/test-tools.sh	2009-11-09 09:34:44 UTC (rev 20205)
@@ -0,0 +1,4 @@
+#!/bin/sh -e
+
+java -cp ../java/strategoxt.jar start org.strategoxt.tools.main-sdf2rtg -i strc1/Expressions.def -m Expressions | \
+java -cp ../java/strategoxt.jar start org.strategoxt.tools.main-rtg2sig --module Expressions > /dev/null


Property changes on: strc-java/trunk/test/test-tools.sh
___________________________________________________________________
Added: svn:executable
   + *

Modified: strc-java/trunk/tools/strj-jar
===================================================================
--- strc-java/trunk/tools/strj-jar	2009-11-09 08:43:22 UTC (rev 20204)
+++ strc-java/trunk/tools/strj-jar	2009-11-09 09:34:44 UTC (rev 20205)
@@ -74,7 +74,7 @@
 INPUT2=
 INPUT3=
 if head -n 1 $INPUT | grep '^package' &>/dev/null; then
-  # PACKAGE=`head $INPUT -n 1 | sed 's/package //; s/\;//'`
+  PACKAGE="`head $INPUT -n 1 | sed 's/package //; s/\;//'`."
   # PACKAGEDIR=`echo "$PACKAGE" | sed 's!\.!/!g	'`
   INPUT2="$INPUTDIR/Main.java"
   INPUTDIR2=`cd $INPUTDIR; pwd` # canonicalize
@@ -103,10 +103,9 @@
 
 MAINCLASS="`head -n1 $INPUT | grep "package [^;];" | sed 's/package ([^;]*);/$1\./'``basename $INPUT .java`"
 echo "Manifest-Version: 1.0" > $TEMPDIR/MANIFEST.MF
-echo "Main-Class: $MAINCLASS" >> $TEMPDIR/MANIFEST.MF
+echo "Main-Class: $PACKAGE$MAINCLASS" >> $TEMPDIR/MANIFEST.MF
 echo "Class-Path: strategoxt.jar" >> $TEMPDIR/MANIFEST.MF
 echo >> $TEMPDIR/MANIFEST.MF
-cat $TEMPDIR/MANIFEST.MF
 
 if ls $INPUTDIR/*.str &>/dev/null; then
   echo "WARNING: using this build directory may mean non-term files are included as attachments" >&2



From m.dejonge at tudelft.nl  Mon Nov  9 11:14:31 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 09 Nov 2009 10:14:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20206 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200911091014.nA9AEVEq017948@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-09 10:14:30 +0000 (Mon, 09 Nov 2009)
New Revision: 20206

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20206&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipper.java

Log:
- fixed bug with wrongly selected regions
- possibility to recognize typical opening closing tokens


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipper.java	2009-11-09 09:34:44 UTC (rev 20205)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureSkipper.java	2009-11-09 10:14:30 UTC (rev 20206)
@@ -25,15 +25,32 @@
         SAME_INDENT
     }
     
-    private boolean useCurlyBraces;
+    private boolean useOpeningClosingDefaults;
+    private final static char[] closingTokens={'}', ')', ']', '>', '|'};
+    private final static char[] openingTokens={'{', '(', '[', '<', '|'};
     
+    private boolean isClosingChar(char c){
+        return contains(c, closingTokens);
+    }
     
+    private boolean isOpeningChar(char c){
+        return contains(c, openingTokens);
+    }
+
+    private boolean contains(char c, char[] chars) {
+        for (int i = 0; i < chars.length; i++) {
+            if(chars[i]==c)
+                return true;
+        }
+        return false;
+    }
+    
     public boolean isUsingCurlyBraces() {
-        return useCurlyBraces;
+        return useOpeningClosingDefaults;
     }
 
     public void setUseCurlyBraces(boolean useCurlyBraces) {
-        this.useCurlyBraces = useCurlyBraces;
+        this.useOpeningClosingDefaults = useCurlyBraces;
     }
 
     private SGLR myParser;
@@ -484,9 +501,11 @@
     
 
     private boolean isClosingLine(int indexLine) {             
-        IndentInfo currLine= getHistory().getLine(indexLine);        
-        if(useCurlyBraces)
-            return getHistory().recoverTokenStream[currLine.getTokensSeen()]=='}';  
+        IndentInfo currLine= getHistory().getLine(indexLine);  
+        if (isClosingChar(getHistory().recoverTokenStream[currLine.getTokensSeen()]))
+            return true;
+        else if (useOpeningClosingDefaults)
+            return false;  
         if(indexLine==0)
             return false;
         IndentInfo prevLine=getHistory().getLine(indexLine - 1);
@@ -502,17 +521,23 @@
         return true;
     }
     
-    private boolean isErrorOnClosingLine(int indexLine) {
+    private boolean isErrorOnClosingLine(int indexLine) throws IOException {
         IndentInfo line = getHistory().getLine(indexLine);
-        if(useCurlyBraces)
-            return getHistory().recoverTokenStream[line.getTokensSeen()]=='}';
+        if (isClosingChar(getHistory().recoverTokenStream[line.getTokensSeen()]))
+            return true;
+        else if (useOpeningClosingDefaults)
+            return false;
         if (indexLine==0)
             return false;
         IndentInfo prevLine=getHistory().getLine(indexLine-1);
         if(prevLine.getIndentValue()<= line.getIndentValue())
             return false;
-        int startTokLine=line.structureStartPosition();
-        if(startTokLine==0)
+        IndentInfo nextLine=viewNextLine(line);
+        if(nextLine.getIndentValue()>line.getIndentValue())
+            return false;
+        int startReduction=line.structureStartPosition();
+        int startConstruct = getHistory().getLine(findParentBegin(indexLine-1)).getTokensSeen();
+        if(startReduction==0 || startReduction > startConstruct) //construct unfinished
             return true;
         if(getHistory().getLastChar()==SGLR.EOF)
             return true;
@@ -532,8 +557,10 @@
         if(indexLine==0)
             return false;
         IndentInfo line = getHistory().getLine(indexLine);
-        if(useCurlyBraces)
-            return getHistory().recoverTokenStream[line.getTokensSeen()]=='{';
+        if (isOpeningChar(getHistory().recoverTokenStream[line.getTokensSeen()]))
+            return true;
+        else if(useOpeningClosingDefaults)
+            return false;
         IndentInfo prevLine = getHistory().getLine(indexLine-1);        
         boolean sameIndent = prevLine.getIndentValue()==line.getIndentValue();
         boolean smallReduce = line.structureStartPosition() >= prevLine.getTokensSeen()-1;
@@ -541,17 +568,21 @@
     }
 
     private boolean isOpeningLine(IndentInfo currLine) throws IOException {
-        if(useCurlyBraces)
-            return myParser.currentToken=='{';
+        if(isOpeningChar((char)myParser.currentToken))
+            return true;
+        else if (useOpeningClosingDefaults)
+            return false;
         IndentInfo nextLine = viewNextLine(currLine);
         if(nextLine.getIndentValue()<=currLine.getIndentValue())
             return false;
         return true;
     }
 
-    private boolean isClosingLine(IndentInfo currLine) throws IOException {        
-        if(useCurlyBraces)
-            return myParser.currentToken=='}';
+    private boolean isClosingLine(IndentInfo currLine) throws IOException {
+        if (isClosingChar((char)myParser.currentToken))
+            return true;
+        else if (useOpeningClosingDefaults)
+            return false;
         IndentInfo nextLine = viewNextLine(currLine);
         if(nextLine.getIndentValue()>currLine.getIndentValue())
             return false;



From L.C.L.Kats at tudelft.nl  Mon Nov  9 16:08:59 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 09 Nov 2009 15:08:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20208 - LennartKats -
 in spoofax-imp/trunk: org.strategoxt.imp.editors.aterm
 org.strategoxt.imp.editors.aterm/META-INF
 org.strategoxt.imp.editors.editorservice
 org.strategoxt.imp.editors.editorservice/META-INF
 org.strategoxt.imp.editors.sdf org.strategoxt.imp.editors.sdf/META-INF
 org.strategoxt.imp.editors.stratego
 org.strategoxt.imp.editors.stratego/META-INF org.strategoxt.imp.feature
 org.strategoxt.imp.generator org.strategoxt.imp.generator/META-INF
 org.strategoxt.imp.generator/src/sdf2imp
 org.strategoxt.imp.generator/src/sdf2imp/project
 org.strategoxt.imp.metatooling org.strategoxt.imp.metatooling/META-INF
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
 org.strategoxt.imp.runtime org.strategoxt.imp.ru! ntime/META-INF
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <200911091508.nA9F8x8e022849@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-09 15:08:57 +0000 (Mon, 09 Nov 2009)
New Revision: 20208

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20208&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.generator/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoConsole.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/SDFBundleCommand.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorRegistry.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens/SGLRToken.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/BuilderButtonDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java

Log:
* Better builders
  - Support realtime building of a freely editable selected text fragment
  - New control-T key binding

* Improved portability and revised build.xml
  - Re-enabled the native tool bundle
  - Revised build.xml to use org.strategoxt.tools instead of native pack-sdf/sdf2rtg/rtg2sig
  - Removed native strj from build.xml for now
  - Spawned Java jobs now use the client VM for better load-time performance

* Refactoring
  - Moved console methods to a new StrategoConsole class

* Other fixes
  - Term path is now reversed
  - Project name validation fixes in wizard and generator
  - Fixed project creation if auto-building is disabled
  - Refined exception handling related to native tool bundle and project creation


Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF	2009-11-09 12:57:46 UTC (rev 20207)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/META-INF/MANIFEST.MF	2009-11-09 15:08:57 UTC (rev 20208)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: ATerm Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.editors.aterm; singleton:=true
-Bundle-Version: 0.1.0.2802
+Bundle-Version: 0.1.1.qualifier
 Bundle-Activator: org.strategoxt.imp.editors.aterm.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
 Require-Bundle: org.eclipse.core.runtime,

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-11-09 12:57:46 UTC (rev 20207)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-11-09 15:08:57 UTC (rev 20208)
@@ -11,6 +11,7 @@
         <property name="trans" location="trans"/>
         <property name="src-gen" location="editor/java"/>
         <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
         <property name="lib" location="lib"/>
         <property name="build" location="bin"/>
         <property name="dist" location="bin/dist"/>
@@ -20,19 +21,26 @@
         <property name="externaljar" value="../lib.jar"/>
         <property name="externaljarflags" value="-la org.lib"/>
         -->
-        
-        <!-- Environment configuration -->
-        <property name="build.strategoxt" location="${user.home}/.nix-profile/bin"/>
+    
+        <!--
+            Environment configuration:
+            Spoofax/IMP includes native versions of the SDF executables (build.strategoxt.sdf),
+            and Java alternatives for the Stratego alternatives (build.strategoxt.stratego)
+        -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
                         -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm
                         -I ${user.home}/.nix-profile/share/java-front
                         -I ${basedir}
                         -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
+	    <property name="build.jvmargs" value="-client -Xverify:none -ss4m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
-        <available file="${build.strategoxt}/strj" property="build.stratego.usenativestrj"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
         <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
             <isset property="externaldef"/>
@@ -40,6 +48,7 @@
         <condition property="externaljarimport" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
+        <property name="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/"/>
         <fail if="externaljar" unless="externaljarflags"/>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
@@ -47,7 +56,8 @@
         <mkdir dir="${build}"/>
         <mkdir dir="${src-gen}"/>
         <mkdir dir="${dist}"/>
-        <mkdir dir="include"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
     
         <target name="all" depends="stratego.ctree,sdf2table,sdf2imp"/>
 
@@ -55,22 +65,23 @@
         
         <target name="sdf2imp.eclipse" depends="sdf2table" if="eclipse.running">
             <!-- In Eclipse, we trigger the Eclipse builder rather than build it here -->
-            <touch file="include/${esvmodule}.packed.esv"/>
-            <eclipse.refreshLocal resource="include/${esvmodule}.packed.esv"/>
+            <touch file="${include}/${esvmodule}.packed.esv"/>
+            <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
         <target name="sdf2imp.standalone" depends="sdf2table,aux-files" unless="eclipse.running">
             <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="aux/sdf2imp.jar:aux/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="-ss4m -server"/> 
+                <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
                 <arg value="-p"/>
-                <arg value="${basedir}/include/${sdfmodule}.tbl"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
             </java>
         </target>
     
         <target name="sdf2table" depends="make-permissive">
-            <apply executable="${build.strategoxt}/sdf2table" dest="include" failonerror="true">
+            <apply executable="${build.strategoxt.sdf.bin}sdf2table" dest="${include}" failonerror="true">
+                <env key="LD_LIBRARY_PATH" path="${build.strategoxt.sdf}/lib"/>
                 <arg value="-i"/>
                 <srcfile/>
                 <arg value="-o"/>
@@ -78,110 +89,136 @@
                 <arg value="-m"/>
                 <arg value="${sdfmodule}"/>
                 
-                <fileset file="include/${sdfmodule}-Permissive.def"/>
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
                 <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
             </apply>
         </target>
         
         <target name="make-permissive" depends="pack-sdf,copy-sdf">
             <dependset>
-                <srcfileset file="include/${sdfmodule}.def"/>
-                <targetfileset file="include/${sdfmodule}-Permissive.def"/>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
             </dependset>
-            <available file="include/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
             <antcall target="make-permissive.helper"/>
         </target>
     
         <target name="make-permissive.helper" unless="permissive-grammar.available" depends="aux-files">
-            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
-                <arg value="${basedir}/include/${sdfmodule}.def"/>
+                <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-o"/>
-                <arg value="${basedir}/include/${sdfmodule}-Permissive.def"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
                 <arg line="--optimize on"/>
             </java>
         </target>
 
-        <target name="aux-files">
+        <target name="aux-files" unless="aux-files.available">
             <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
+        	<property name="aux-files.available" value="1"/>
             <mkdir dir="aux"/>
             <parallel>
-              <get src="${site}/strategoxt.jar" dest="aux/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
-              <get src="${site}/make_permissive.jar" dest="aux/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
-              <get src="${site}/sdf2imp.jar" dest="aux/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/strategoxt.jar" dest="aux/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/make_permissive.jar" dest="aux/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/sdf2imp.jar" dest="aux/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
             </parallel>
         </target>
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfilelist dir="${syntax}" files="**/*.sdf"/>
-                <targetfileset file="${syntax}/${sdfmodule}.def"/>
+                <srcfileset dir="${syntax}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
-            <apply executable="${build.strategoxt}/pack-sdf" failonerror="true" dest="include">
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
                 <arg value="-i"/>
-                <srcfile/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
                 <arg value="-o"/>
-                <targetfile/>
+                <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-I"/>
                 <arg value="${trans}"/>
                 <arg value="-I"/>
                 <arg value="${lib}"/>
                 <arg line="${build.sdf.imports}"/>
-                
-                <fileset file="${syntax}/${sdfmodule}.sdf"/>
-                <mapper type="glob" from="*.sdf" to="*.def"/>
-            </apply>
+            </java>
         </target>
     
         <target name="copy-sdf" if="externaldef">
-            <copy file="${externaldef}" todir="include" preservelastmodified="true"/>
+            <copy file="${externaldef}" todir="${include}" preservelastmodified="true"/>
         </target>
     
         <target name="copy-jar" if="externaljar">
-            <copy file="${externaljar}" todir="include" preservelastmodified="true"/>
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
         <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled" unless="external-def">
-            <apply executable="${build.strategoxt}/rtg2sig" dest="include" failonerror="true">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
                 <arg value="-i"/>
-                <srcfile/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
                 <arg value="-o"/>
-                <targetfile/>
+                <arg value="${include}/${sdfmodule}.str"/>
                 <arg value="--module"/>
                 <arg value="${sdfmodule}"/>
-                
-                <fileset file="include/${sdfmodule}.rtg"/>
-                <mapper type="glob" from="*.rtg" to="*.str"/>
-            </apply>
+            </java>
         </target>
         
         <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled" unless="external-def">
-            <apply executable="${build.strategoxt}/sdf2rtg" dest="include" failonerror="true">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
                 <arg value="-i"/>
-                <srcfile/>
+                <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-m"/>
                 <arg value="${sdfmodule}"/>
                 <arg value="-o"/>
-                <targetfile/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
                 <arg value="--ignore-missing-cons"/>
-                
-                <fileset file="include/${sdfmodule}.def"/>
-                <mapper type="glob" from="*.def" to="*.rtg"/>
-            </apply>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
         </target>
     
         <!-- Stratego to Java interpreter -->
-        <target name="stratego.ctree">
+        <target name="stratego.ctree" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
-                  <include name="**/*.str"/>
+                    <include name="**/*.str"/>
                 </srcfileset>
-                <targetfileset file="include/${strmodule}.ctree"/>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
-            <available file="include/${strmodule}.ctree" property="strc-java.available"/>
-            <antcall target="copy-jar"/>            
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
             <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.outputpath" value="${include}"/>
                 <param name="build.stratego.extraargs" value="-F --library"/>
                 <param name="build.stratego.extension" value="ctree"/>
                 <param name="build.stratego.compiler" value="strc"/>
@@ -189,37 +226,27 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.java" depends="stratego.java.native,stratego.java.jvm"/>
-    
-        <target name="stratego.java.native" if="build.stratego.usenativestrj"> 
-            <antcall target="stratego.helper">
-                <param name="build.stratego.outputpath" value="${basedir}/${src-gen}"/>
-                <param name="build.stratego.extraargs" value="-la java-front"/>
-                <param name="build.stratego.extension" value="java"/>
-                <param name="build.stratego.compiler" value="strj"/>
-            </antcall>
-        </target>
-    
-        <target name="stratego.java.jvm" unless="build.stratego.usenativestrj">
+        <target name="stratego.jar" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
-                  <include name="**/*.str"/>
+                    <include name="**/*.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
             <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
             <antcall target="copy-jar"/>
             <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${basedir}/${src-gen}/trans"/>
+                <param name="build.stratego.outputpath" value="${src-gen}/trans"/>
                 <param name="build.stratego.extraargs" value="-la java-front"/>
                 <param name="build.stratego.extension" value="java"/>
             </antcall>
             <javac classpath="aux/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
-            <jar basedir="${build}" includes="trans/**" destfile="include/${strmodule}.jar"/>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="aux-files,rtg2sig" unless="strc-java.available" if="build.stratego.enabled">
-            <java classname="org.strategoxt.strj.Main" classpath="aux/strategoxt.jar:aux/sdf2imp.jar" failonerror="true">
+        <target name="stratego.jvm.helper" depends="aux-files" unless="strc-java.available" if="build.stratego.enabled">
+            <java classname="org.strategoxt.strj.Main" classpath="aux/strategoxt.jar:aux/sdf2imp.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${trans}/${strmodule}.str"/>
                 <arg value="-o"/>
@@ -247,7 +274,7 @@
         
         <!-- Helper target for calling the stratego compiler -->
         <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
-            <apply executable="${build.strategoxt}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>
                 <arg value="-o"/>
@@ -265,4 +292,4 @@
             <delete dir="${build}"/>
             <delete file="${src-gen}/trans/Main.java"/>
         </target>
-    </project>
\ No newline at end of file
+    </project>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/META-INF/MANIFEST.MF	2009-11-09 12:57:46 UTC (rev 20207)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/META-INF/MANIFEST.MF	2009-11-09 15:08:57 UTC (rev 20208)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: EditorService Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.editors.editorservice; singleton:=true
-Bundle-Version: 0.1.0.2802
+Bundle-Version: 0.1.1.qualifier
 Bundle-Activator: org.strategoxt.imp.editors.editorservice.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
 Require-Bundle: org.eclipse.core.runtime,

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml	2009-11-09 12:57:46 UTC (rev 20207)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml	2009-11-09 15:08:57 UTC (rev 20208)
@@ -11,6 +11,7 @@
         <property name="trans" location="trans"/>
         <property name="src-gen" location="editor/java"/>
         <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
         <property name="lib" location="lib"/>
         <property name="build" location="bin"/>
         <property name="dist" location="bin/dist"/>
@@ -20,19 +21,26 @@
         <property name="externaljar" value="../lib.jar"/>
         <property name="externaljarflags" value="-la org.lib"/>
         -->
-        
-        <!-- Environment configuration -->
-        <property name="build.strategoxt" location="${user.home}/.nix-profile/bin"/>
+    
+        <!--
+            Environment configuration:
+            Spoofax/IMP includes native versions of the SDF executables (build.strategoxt.sdf),
+            and Java alternatives for the Stratego alternatives (build.strategoxt.stratego)
+        -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm
                         -I ${user.home}/.nix-profile/share/java-front
                         -I ${basedir}
                         -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
+	    <property name="build.jvmargs" value="-client -Xverify:none -ss4m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
-        <available file="${build.strategoxt}/strj" property="build.stratego.usenativestrj"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
         <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
             <isset property="externaldef"/>
@@ -40,6 +48,7 @@
         <condition property="externaljarimport" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
+        <property name="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/"/>
         <fail if="externaljar" unless="externaljarflags"/>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
@@ -47,7 +56,8 @@
         <mkdir dir="${build}"/>
         <mkdir dir="${src-gen}"/>
         <mkdir dir="${dist}"/>
-        <mkdir dir="include"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
     
         <target name="all" depends="stratego.ctree,sdf2table,sdf2imp"/>
 
@@ -55,22 +65,23 @@
         
         <target name="sdf2imp.eclipse" depends="sdf2table" if="eclipse.running">
             <!-- In Eclipse, we trigger the Eclipse builder rather than build it here -->
-            <touch file="include/${esvmodule}.packed.esv"/>
-            <eclipse.refreshLocal resource="include/${esvmodule}.packed.esv"/>
+            <touch file="${include}/${esvmodule}.packed.esv"/>
+            <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
         <target name="sdf2imp.standalone" depends="sdf2table,aux-files" unless="eclipse.running">
             <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="aux/sdf2imp.jar:aux/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="-ss4m -server"/> 
+                <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
                 <arg value="-p"/>
-                <arg value="${basedir}/include/${sdfmodule}.tbl"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
             </java>
         </target>
     
         <target name="sdf2table" depends="make-permissive">
-            <apply executable="${build.strategoxt}/sdf2table" dest="include" failonerror="true">
+            <apply executable="${build.strategoxt.sdf.bin}sdf2table" dest="${include}" failonerror="true">
+                <env key="LD_LIBRARY_PATH" path="${build.strategoxt.sdf}/lib"/>
                 <arg value="-i"/>
                 <srcfile/>
                 <arg value="-o"/>
@@ -78,32 +89,34 @@
                 <arg value="-m"/>
                 <arg value="${sdfmodule}"/>
                 
-                <fileset file="include/${sdfmodule}-Permissive.def"/>
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
                 <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
             </apply>
         </target>
         
         <target name="make-permissive" depends="pack-sdf,copy-sdf">
             <dependset>
-                <srcfileset file="include/${sdfmodule}.def"/>
-                <targetfileset file="include/${sdfmodule}-Permissive.def"/>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
             </dependset>
-            <available file="include/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
             <antcall target="make-permissive.helper"/>
         </target>
     
         <target name="make-permissive.helper" unless="permissive-grammar.available" depends="aux-files">
             <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="-ss4m -server"/>
+                <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
-                <arg value="${basedir}/include/${sdfmodule}.def"/>
+                <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-o"/>
-                <arg value="${basedir}/include/${sdfmodule}-Permissive.def"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
             </java>
         </target>
 
-        <target name="aux-files">
+        <target name="aux-files" unless="aux-files.available">
             <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
+        	<property name="aux-files.available" value="1"/>
             <mkdir dir="aux"/>
             <parallel>
                 <get src="${site}/strategoxt.jar" dest="aux/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
@@ -114,74 +127,98 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfilelist dir="${syntax}" files="**/*.sdf"/>
-                <targetfileset file="${syntax}/${sdfmodule}.def"/>
+                <srcfileset dir="${syntax}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
-            <apply executable="${build.strategoxt}/pack-sdf" failonerror="true" dest="include">
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
                 <arg value="-i"/>
-                <srcfile/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
                 <arg value="-o"/>
-                <targetfile/>
+                <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-I"/>
                 <arg value="${trans}"/>
                 <arg value="-I"/>
                 <arg value="${lib}"/>
                 <arg line="${build.sdf.imports}"/>
-                
-                <fileset file="${syntax}/${sdfmodule}.sdf"/>
-                <mapper type="glob" from="*.sdf" to="*.def"/>
-            </apply>
+            </java>
         </target>
     
         <target name="copy-sdf" if="externaldef">
-            <copy file="${externaldef}" todir="include" preservelastmodified="true"/>
+            <copy file="${externaldef}" todir="${include}" preservelastmodified="true"/>
         </target>
     
         <target name="copy-jar" if="externaljar">
-            <copy file="${externaljar}" todir="include" preservelastmodified="true"/>
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
         <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled" unless="external-def">
-            <apply executable="${build.strategoxt}/rtg2sig" dest="include" failonerror="true">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
                 <arg value="-i"/>
-                <srcfile/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
                 <arg value="-o"/>
-                <targetfile/>
+                <arg value="${include}/${sdfmodule}.str"/>
                 <arg value="--module"/>
                 <arg value="${sdfmodule}"/>
-                
-                <fileset file="include/${sdfmodule}.rtg"/>
-                <mapper type="glob" from="*.rtg" to="*.str"/>
-            </apply>
+            </java>
         </target>
         
         <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled" unless="external-def">
-            <apply executable="${build.strategoxt}/sdf2rtg" dest="include" failonerror="true">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
                 <arg value="-i"/>
-                <srcfile/>
+                <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-m"/>
                 <arg value="${sdfmodule}"/>
                 <arg value="-o"/>
-                <targetfile/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
                 <arg value="--ignore-missing-cons"/>
-                
-                <fileset file="include/${sdfmodule}.def"/>
-                <mapper type="glob" from="*.def" to="*.rtg"/>
-            </apply>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
         </target>
     
         <!-- Stratego to Java interpreter -->
-        <target name="stratego.ctree">
+        <target name="stratego.ctree" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
-                  <include name="**/*.str"/>
+                    <include name="**/*.str"/>
                 </srcfileset>
-                <targetfileset file="${include}/{strmodule}.ctree"/>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
-            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
-            <antcall target="copy-jar"/>            
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
             <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.outputpath" value="${include}"/>
                 <param name="build.stratego.extraargs" value="-F --library"/>
                 <param name="build.stratego.extension" value="ctree"/>
                 <param name="build.stratego.compiler" value="strc"/>
@@ -189,37 +226,27 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.java" depends="stratego.java.native,stratego.java.jvm"/>
-    
-        <target name="stratego.java.native" if="build.stratego.usenativestrj"> 
-            <antcall target="stratego.helper">
-                <param name="build.stratego.outputpath" value="${basedir}/${src-gen}"/>
-                <param name="build.stratego.extraargs" value="-la java-front"/>
-                <param name="build.stratego.extension" value="java"/>
-                <param name="build.stratego.compiler" value="strj"/>
-            </antcall>
-        </target>
-    
-        <target name="stratego.java.jvm" unless="build.stratego.usenativestrj">
+        <target name="stratego.jar" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
-                  <include name="**/*.str"/>
+                    <include name="**/*.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
             <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
             <antcall target="copy-jar"/>
             <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${basedir}/${src-gen}/trans"/>
+                <param name="build.stratego.outputpath" value="${src-gen}/trans"/>
                 <param name="build.stratego.extraargs" value="-la java-front"/>
                 <param name="build.stratego.extension" value="java"/>
             </antcall>
             <javac classpath="aux/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
-            <jar basedir="${build}" includes="trans/**" destfile="include/${strmodule}.jar"/>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="aux-files,rtg2sig" unless="strc-java.available" if="build.stratego.enabled">
-            <java classname="org.strategoxt.strj.Main" classpath="aux/strategoxt.jar:aux/sdf2imp.jar" failonerror="true">
+        <target name="stratego.jvm.helper" depends="aux-files" unless="strc-java.available" if="build.stratego.enabled">
+            <java classname="org.strategoxt.strj.Main" classpath="aux/strategoxt.jar:aux/sdf2imp.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${trans}/${strmodule}.str"/>
                 <arg value="-o"/>
@@ -247,7 +274,7 @@
         
         <!-- Helper target for calling the stratego compiler -->
         <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
-            <apply executable="${build.strategoxt}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>
                 <arg value="-o"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF	2009-11-09 12:57:46 UTC (rev 20207)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF	2009-11-09 15:08:57 UTC (rev 20208)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: SDF Editor Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.editors.sdf; singleton:=true
-Bundle-Version: 0.1.0.2802
+Bundle-Version: 0.1.1.qualifier
 Bundle-Activator: org.strategoxt.imp.editors.sdf.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
 Require-Bundle: org.eclipse.core.runtime,

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-11-09 12:57:46 UTC (rev 20207)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-11-09 15:08:57 UTC (rev 20208)
@@ -11,6 +11,7 @@
         <property name="trans" location="trans"/>
         <property name="src-gen" location="editor/java"/>
         <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
         <property name="lib" location="lib"/>
         <property name="build" location="bin"/>
         <property name="dist" location="bin/dist"/>
@@ -20,19 +21,26 @@
         <property name="externaljar" value="../lib.jar"/>
         <property name="externaljarflags" value="-la org.lib"/>
         -->
-        
-        <!-- Environment configuration -->
-        <property name="build.strategoxt" location="${user.home}/.nix-profile/bin"/>
+    
+        <!--
+            Environment configuration:
+            Spoofax/IMP includes native versions of the SDF executables (build.strategoxt.sdf),
+            and Java alternatives for the Stratego alternatives (build.strategoxt.stratego)
+        -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm
                         -I ${user.home}/.nix-profile/share/java-front
                         -I ${basedir}
                         -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
+	    <property name="build.jvmargs" value="-client -Xverify:none -ss4m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
-        <available file="${build.strategoxt}/strj" property="build.stratego.usenativestrj"/>
         <dirname property="externaldefdir" file="${externaldef}"/>
         <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
             <isset property="externaldef"/>
@@ -40,6 +48,7 @@
         <condition property="externaljarimport" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
+        <property name="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/"/>
         <fail if="externaljar" unless="externaljarflags"/>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
@@ -47,7 +56,8 @@
         <mkdir dir="${build}"/>
         <mkdir dir="${src-gen}"/>
         <mkdir dir="${dist}"/>
-        <mkdir dir="include"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
     
         <target name="all" depends="stratego.ctree,sdf2table,sdf2imp"/>
 
@@ -55,22 +65,23 @@
         
         <target name="sdf2imp.eclipse" depends="sdf2table" if="eclipse.running">
             <!-- In Eclipse, we trigger the Eclipse builder rather than build it here -->
-            <touch file="include/${esvmodule}.packed.esv"/>
-            <eclipse.refreshLocal resource="include/${esvmodule}.packed.esv"/>
+            <touch file="${include}/${esvmodule}.packed.esv"/>
+            <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
         <target name="sdf2imp.standalone" depends="sdf2table,aux-files" unless="eclipse.running">
             <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="aux/sdf2imp.jar:aux/strategoxt.jar" failonerror="true" fork="true">
-                <jvmarg line="-ss4m -server"/> 
+                <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
                 <arg value="-p"/>
-                <arg value="${basedir}/include/${sdfmodule}.tbl"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
             </java>
         </target>
     
         <target name="sdf2table" depends="make-permissive">
-            <apply executable="${build.strategoxt}/sdf2table" dest="include" failonerror="true">
+            <apply executable="${build.strategoxt.sdf.bin}sdf2table" dest="${include}" failonerror="true">
+                <env key="LD_LIBRARY_PATH" path="${build.strategoxt.sdf}/lib"/>
                 <arg value="-i"/>
                 <srcfile/>
                 <arg value="-o"/>
@@ -78,31 +89,34 @@
                 <arg value="-m"/>
                 <arg value="${sdfmodule}"/>
                 
-                <fileset file="include/${sdfmodule}-Permissive.def"/>
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
                 <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
             </apply>
         </target>
         
         <target name="make-permissive" depends="pack-sdf,copy-sdf">
             <dependset>
-                <srcfileset file="include/${sdfmodule}.def"/>
-                <targetfileset file="include/${sdfmodule}-Permissive.def"/>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
             </dependset>
-            <available file="include/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
             <antcall target="make-permissive.helper"/>
         </target>
     
         <target name="make-permissive.helper" unless="permissive-grammar.available" depends="aux-files">
-            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
-                <arg value="${basedir}/include/${sdfmodule}.def"/>
+                <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-o"/>
-                <arg value="${basedir}/include/${sdfmodule}-Permissive.def"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
             </java>
         </target>
 
-        <target name="aux-files">
+        <target name="aux-files" unless="aux-files.available">
             <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
+        	<property name="aux-files.available" value="1"/>
             <mkdir dir="aux"/>
             <parallel>
                 <get src="${site}/strategoxt.jar" dest="aux/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
@@ -113,74 +127,98 @@
     
         <target name="pack-sdf" unless="externaldef">
             <dependset>
-                <srcfilelist dir="${syntax}" files="**/*.sdf"/>
-                <targetfileset file="${syntax}/${sdfmodule}.def"/>
+                <srcfileset dir="${syntax}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
             </dependset>
-            <apply executable="${build.strategoxt}/pack-sdf" failonerror="true" dest="include">
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
                 <arg value="-i"/>
-                <srcfile/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
                 <arg value="-o"/>
-                <targetfile/>
+                <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-I"/>
                 <arg value="${trans}"/>
                 <arg value="-I"/>
                 <arg value="${lib}"/>
                 <arg line="${build.sdf.imports}"/>
-                
-                <fileset file="${syntax}/${sdfmodule}.sdf"/>
-                <mapper type="glob" from="*.sdf" to="*.def"/>
-            </apply>
+            </java>
         </target>
     
         <target name="copy-sdf" if="externaldef">
-            <copy file="${externaldef}" todir="include" preservelastmodified="true"/>
+            <copy file="${externaldef}" todir="${include}" preservelastmodified="true"/>
         </target>
     
         <target name="copy-jar" if="externaljar">
-            <copy file="${externaljar}" todir="include" preservelastmodified="true"/>
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
         <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled" unless="external-def">
-            <apply executable="${build.strategoxt}/rtg2sig" dest="include" failonerror="true">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
                 <arg value="-i"/>
-                <srcfile/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
                 <arg value="-o"/>
-                <targetfile/>
+                <arg value="${include}/${sdfmodule}.str"/>
                 <arg value="--module"/>
                 <arg value="${sdfmodule}"/>
-                
-                <fileset file="include/${sdfmodule}.rtg"/>
-                <mapper type="glob" from="*.rtg" to="*.str"/>
-            </apply>
+            </java>
         </target>
         
         <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled" unless="external-def">
-            <apply executable="${build.strategoxt}/sdf2rtg" dest="include" failonerror="true">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
                 <arg value="-i"/>
-                <srcfile/>
+                <arg value="${include}/${sdfmodule}.def"/>
                 <arg value="-m"/>
                 <arg value="${sdfmodule}"/>
                 <arg value="-o"/>
-                <targetfile/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
                 <arg value="--ignore-missing-cons"/>
-                
-                <fileset file="include/${sdfmodule}.def"/>
-                <mapper type="glob" from="*.def" to="*.rtg"/>
-            </apply>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
         </target>
     
         <!-- Stratego to Java interpreter -->
-        <target name="stratego.ctree">
+        <target name="stratego.ctree" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
-                  <include name="**/*.str"/>
+                    <include name="**/*.str"/>
                 </srcfileset>
-                <targetfileset file="${include}/{strmodule}.ctree"/>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
             </dependset>
-            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
-            <antcall target="copy-jar"/>            
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
             <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.outputpath" value="${include}"/>
                 <param name="build.stratego.extraargs" value="-F --library"/>
                 <param name="build.stratego.extension" value="ctree"/>
                 <param name="build.stratego.compiler" value="strc"/>
@@ -188,37 +226,27 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.java" depends="stratego.java.native,stratego.java.jvm"/>
-    
-        <target name="stratego.java.native" if="build.stratego.usenativestrj"> 
-            <antcall target="stratego.helper">
-                <param name="build.stratego.outputpath" value="${basedir}/${src-gen}"/>
-                <param name="build.stratego.extraargs" value="-la java-front"/>
-                <param name="build.stratego.extension" value="java"/>
-                <param name="build.stratego.compiler" value="strj"/>
-            </antcall>
-        </target>
-    
-        <target name="stratego.java.jvm" unless="build.stratego.usenativestrj">
+        <target name="stratego.jar" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
-                  <include name="**/*.str"/>
+                    <include name="**/*.str"/>
                 </srcfileset>
                 <targetfileset file="${src-gen}/trans/Main.java"/>
             </dependset>
             <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
             <antcall target="copy-jar"/>
             <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${basedir}/${src-gen}/trans"/>
+                <param name="build.stratego.outputpath" value="${src-gen}/trans"/>
                 <param name="build.stratego.extraargs" value="-la java-front"/>
                 <param name="build.stratego.extension" value="java"/>
             </antcall>
             <javac classpath="aux/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
-            <jar basedir="${build}" includes="trans/**" destfile="include/${strmodule}.jar"/>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="aux-files,rtg2sig" unless="strc-java.available" if="build.stratego.enabled">
-            <java classname="org.strategoxt.strj.Main" classpath="aux/strategoxt.jar:aux/sdf2imp.jar" failonerror="true">
+        <target name="stratego.jvm.helper" depends="aux-files" unless="strc-java.available" if="build.stratego.enabled">
+            <java classname="org.strategoxt.strj.Main" classpath="aux/strategoxt.jar:aux/sdf2imp.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${trans}/${strmodule}.str"/>

(2728 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Tue Nov 10 11:48:53 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 10 Nov 2009 10:48:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20209 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
	strc-java/trunk/java
Message-ID: <200911101048.nAAAmr3t005130@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-10 10:48:53 +0000 (Tue, 10 Nov 2009)
New Revision: 20209

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20209&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
Fixed a parse table loading bug.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2009-11-09 15:08:57 UTC (rev 20208)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2009-11-10 10:48:53 UTC (rev 20209)
@@ -117,7 +117,10 @@
         ATermList prods = Term.listAt(prioritiesTerm, 0);
         List<Priority> ret = new ArrayList<Priority>();
         
-        for (ATermAppl a = (ATermAppl) prods.getFirst(); !prods.getNext().isEmpty(); prods = prods.getNext()) {
+        while (!prods.isEmpty()) {
+            ATermAppl a = (ATermAppl) prods.getFirst();
+            prods = prods.getNext();
+            
             int left = Term.intAt(a, 0);
             int right = Term.intAt(a, 1);
             if (a.getName().equals("left-prio")) {

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Tue Nov 10 11:52:51 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 10 Nov 2009 10:52:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20210 - LennartKats -
	strc-java/trunk/java/tools/org/strategoxt/tools/lib
Message-ID: <200911101052.nAAAqpVn005160@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-10 10:52:51 +0000 (Tue, 10 Nov 2009)
New Revision: 20210

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20210&view=rev

Modified:
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str

Log:


Changes:

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str	2009-11-10 10:48:53 UTC (rev 20209)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str	2009-11-10 10:52:51 UTC (rev 20210)
@@ -30,7 +30,7 @@
     <+ <xtc-exit> 1
 
   native-transform(tool, args) =
-    if <get-config> "-Xnativepath" => nativepath then
+    if <get-config> "-Xnativepath" => nativepath; not("") then
       xtc-ensure-file => FILE(file)
     ; xtc-new-file    => file'
     ; tool' := <conc-strings> (nativepath, "/bin/", <tool>)



From L.C.L.Kats at tudelft.nl  Tue Nov 10 13:23:44 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 10 Nov 2009 12:23:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20211 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.aterm
	org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.editors.editorservice/editor
	org.strategoxt.imp.editors.sdf org.strategoxt.imp.editors.sdf/editor
	org.strategoxt.imp.editors.stratego
	org.strategoxt.imp.editors.stratego/editor
	org.strategoxt.imp.editors.stratego/trans
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/syntax org.strategoxt.imp.runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <200911101223.nAACNiwJ006566@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-10 12:23:44 +0000 (Tue, 10 Nov 2009)
New Revision: 20211

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20211&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.esv
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ReferencesService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ReferenceResolverFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/BuilderButtonDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoConsole.java

Log:
- Added support for {deprecated}/{deprecated("message")} annotations in SDF
- New syntax for editor references/hover definitions (deprecated the old)
- Added rudimentary Stratego reference resolving
- Prettier builder errors
- Console now activates on new messages
- Resolved some project building problems


Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-11-10 12:23:44 UTC (rev 20211)
@@ -30,6 +30,9 @@
         <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
             <isset property="eclipse.spoofaximp.nativeprefix"/>
         </condition>
+        <condition property="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
@@ -37,7 +40,7 @@
                         -I ${user.home}/.nix-profile/share/java-front
                         -I ${basedir}
                         -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
-	    <property name="build.jvmargs" value="-client -Xverify:none -ss4m"/>
+	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
@@ -48,7 +51,6 @@
         <condition property="externaljarimport" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
-        <property name="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/"/>
         <fail if="externaljar" unless="externaljarflags"/>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
@@ -136,7 +138,7 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" unless="pack-sdf.available">
+        <target name="pack-sdf.helper" depends="aux-files" unless="pack-sdf.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
@@ -169,7 +171,7 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" unless="rtg2sig.available">
+        <target name="rtg2sig.helper" depends="aux-files" unless="rtg2sig.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
@@ -191,7 +193,7 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+        <target name="sdf2rtg.helper" depends="aux-files" unless="sdf2rtg.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml	2009-11-10 12:23:44 UTC (rev 20211)
@@ -30,6 +30,9 @@
         <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
             <isset property="eclipse.spoofaximp.nativeprefix"/>
         </condition>
+        <condition property="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
@@ -37,7 +40,7 @@
                         -I ${user.home}/.nix-profile/share/java-front
                         -I ${basedir}
                         -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
-	    <property name="build.jvmargs" value="-client -Xverify:none -ss4m"/>
+	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
@@ -48,7 +51,6 @@
         <condition property="externaljarimport" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
-        <property name="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/"/>
         <fail if="externaljar" unless="externaljarflags"/>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
@@ -136,7 +138,7 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" unless="pack-sdf.available">
+        <target name="pack-sdf.helper" depends="aux-files" unless="pack-sdf.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
@@ -169,7 +171,7 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" unless="rtg2sig.available">
+        <target name="rtg2sig.helper" depends="aux-files" unless="rtg2sig.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
@@ -191,7 +193,7 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+        <target name="sdf2rtg.helper" depends="aux-files" unless="sdf2rtg.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService.main.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService.main.esv	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService.main.esv	2009-11-10 12:23:44 UTC (rev 20211)
@@ -1,10 +1,9 @@
 module EditorService.main
 
 imports
-  EditorService-Analysis
+  EditorService-Builders
   EditorService-Colorer
   EditorService-Folding
-  EditorService-Occurrences
   EditorService-Outliner
   EditorService-References
   EditorService-Syntax

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-11-10 12:23:44 UTC (rev 20211)
@@ -30,6 +30,9 @@
         <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
             <isset property="eclipse.spoofaximp.nativeprefix"/>
         </condition>
+        <condition property="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
@@ -37,7 +40,7 @@
                         -I ${user.home}/.nix-profile/share/java-front
                         -I ${basedir}
                         -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
-	    <property name="build.jvmargs" value="-client -Xverify:none -ss4m"/>
+	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
@@ -48,7 +51,6 @@
         <condition property="externaljarimport" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
-        <property name="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/"/>
         <fail if="externaljar" unless="externaljarflags"/>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
@@ -136,7 +138,7 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" unless="pack-sdf.available">
+        <target name="pack-sdf.helper" depends="aux-files" unless="pack-sdf.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
@@ -169,7 +171,7 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" unless="rtg2sig.available">
+        <target name="rtg2sig.helper" depends="aux-files" unless="rtg2sig.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
@@ -191,7 +193,7 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+        <target name="sdf2rtg.helper" depends="aux-files" unless="sdf2rtg.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.esv	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.esv	2009-11-10 12:23:44 UTC (rev 20211)
@@ -1,13 +0,0 @@
-module SDF-Analysis
-
-imports
-  SDF-Analysis.generated
-
-analysis
-  
-
-
-
-// This file can be used for custom analysis rules.
-
-// See the imported file for a brief introduction and examples.
\ No newline at end of file

Copied: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv (from rev 20207, spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.esv)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv	2009-11-10 12:23:44 UTC (rev 20211)
@@ -0,0 +1,13 @@
+module SDF-Builders
+
+imports
+  SDF-Builders.generated
+
+analysis
+  
+
+
+
+// This file can be used for custom analysis rules.
+
+// See the imported file for a brief introduction and examples.
\ No newline at end of file

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.esv	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.esv	2009-11-10 12:23:44 UTC (rev 20211)
@@ -1,13 +0,0 @@
-module SDF-Occurrences
-
-imports
-  SDF-Occurrences.generated
-
-occurrences
-  
-
-
-
-// This file can be used for custom occurrence highlighting rules.
-
-// See the imported file for a brief introduction and examples.
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF.main.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF.main.esv	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF.main.esv	2009-11-10 12:23:44 UTC (rev 20211)
@@ -1,10 +1,9 @@
 module SDF.main
 
 imports
-  SDF-Analysis
+  SDF-Builders
   SDF-Colorer
   SDF-Folding
-  SDF-Occurrences
   SDF-Outliner
   SDF-References
   SDF-Syntax

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml	2009-11-10 12:23:44 UTC (rev 20211)
@@ -5,7 +5,7 @@
         <!-- Key input modules -->
         <property name="sdfmodule" value="Stratego-Sugar"/>
         <property name="esvmodule" value="Stratego-Sugar"/>
-        <property name="strmodule" value="stratego-sugar"/>
+        <property name="strmodule" value="stratego_sugar"/>
     
         <!-- Project directories -->
         <property name="trans" location="trans"/>
@@ -30,6 +30,9 @@
         <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
             <isset property="eclipse.spoofaximp.nativeprefix"/>
         </condition>
+        <condition property="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
@@ -37,7 +40,7 @@
                         -I ${user.home}/.nix-profile/share/java-front
                         -I ${basedir}
                         -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
-	    <property name="build.jvmargs" value="-client -Xverify:none -ss4m"/>
+	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
@@ -48,7 +51,6 @@
         <condition property="externaljarimport" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
-        <property name="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/"/>
         <fail if="externaljar" unless="externaljarflags"/>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
@@ -136,7 +138,7 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" unless="pack-sdf.available">
+        <target name="pack-sdf.helper" depends="aux-files" unless="pack-sdf.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
@@ -169,7 +171,7 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" unless="rtg2sig.available">
+        <target name="rtg2sig.helper" depends="aux-files" unless="rtg2sig.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
@@ -191,7 +193,7 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+        <target name="sdf2rtg.helper" depends="aux-files" unless="sdf2rtg.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>
@@ -292,4 +294,4 @@
             <delete dir="${build}"/>
             <delete file="${src-gen}/trans/Main.java"/>
         </target>
-    </project>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	2009-11-10 12:23:44 UTC (rev 20211)
@@ -0,0 +1,11 @@
+
+module Stratego-Sugar-Builders
+
+imports Stratego-Sugar-Builders.generated
+
+analysis
+                                                                                      
+  // This file can be used for custom analysis rules.                                 
+  // See the imported file for a brief introduction and examples.                     
+                                                                                      
+  provider : include/stratego_sugar.ctree
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv	2009-11-10 12:23:44 UTC (rev 20211)
@@ -0,0 +1,10 @@
+module Stratego-Sugar-References
+
+imports Stratego-Sugar-References.generated
+
+references
+                                                                   
+  // This file can be used for custom reference resolving rules.   
+  // See the imported file for a brief introduction and examples.  
+                                                                                   
+  reference _ : editor-resolve
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar.main.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar.main.esv	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar.main.esv	2009-11-10 12:23:44 UTC (rev 20211)
@@ -1,6 +1,6 @@
 module Stratego-Sugar.main
 
-imports Stratego-Sugar-Analysis Stratego-Sugar-Colorer Stratego-Sugar-Folding Stratego-Sugar-Occurrences Stratego-Sugar-Outliner Stratego-Sugar-References Stratego-Sugar-Syntax
+imports Stratego-Sugar-Builders Stratego-Sugar-Colorer Stratego-Sugar-Folding Stratego-Sugar-Outliner Stratego-Sugar-References Stratego-Sugar-Syntax
 
 language General properties
                   

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2009-11-10 12:23:44 UTC (rev 20211)
@@ -0,0 +1,40 @@
+module stratego_sugar
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  libstrc
+
+rules
+
+  editor-resolve:
+    (selected, position, ast, path, project-path) -> target
+    where
+      CallT(SVar(x), s*, t*) := <try(Desugar)> selected
+    <+
+      CallT(SVar(x), s*, t*) := <try(Desugar)> <position-to-parent> (position, ast)
+    with
+      s-length := <length> s*;
+      t-length := <length> t* 
+    where
+      <collect-one(
+        SDefT(?x, length => s-length, length => t-length, id)
+      + SDef(?x, length => s-length, id)
+      + SDefNoArgs(?x, id)
+      + RDefT(?x, length => s-length, length => t-length, id)
+      + RDef(?x, length => s-length, id)
+      + RDefNoArgs(?x, id)
+      )> ast;
+      one(?target)
+
+  position-to-parent:
+    ([position, _], _#(t*)) -> parent
+    with
+      parent := <index(|<inc> position)> t*
+  
+  position-to-parent:
+    ([position, _, _ | _], _#(t*)) -> <position-to-parent> (position', ancestor)
+    where
+      [_ | position'] := <Fst>;
+      ancestor        := <index(|<inc> position)> t*

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-10 12:23:44 UTC (rev 20211)
@@ -49,6 +49,9 @@
         <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
             <isset property="eclipse.spoofaximp.nativeprefix"/>
         </condition>
+        <condition property="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
@@ -56,7 +59,7 @@
                         -I ${user.home}/.nix-profile/share/java-front
                         -I ${basedir}
                         -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
-	    <property name="build.jvmargs" value="-client -Xverify:none -ss4m"/>
+	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
@@ -67,7 +70,6 @@
         <condition property="externaljarimport" value=":${externaljar}" else="">
             <isset property="externaljar"/>
         </condition>
-        <property name="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/"/>
         <fail if="externaljar" unless="externaljarflags"/>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
@@ -155,7 +157,7 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" unless="pack-sdf.available">
+        <target name="pack-sdf.helper" depends="aux-files" unless="pack-sdf.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
@@ -188,7 +190,7 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" unless="rtg2sig.available">
+        <target name="rtg2sig.helper" depends="aux-files" unless="rtg2sig.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
@@ -210,7 +212,7 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+        <target name="sdf2rtg.helper" depends="aux-files" unless="sdf2rtg.available">
             <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str	2009-11-10 12:23:44 UTC (rev 20211)
@@ -17,11 +17,12 @@
         
         references
           ~
-          ~// This file can be used for custom reference resolving and
-          ~// occurrence highlighting rules.
+          ~// This file can be used for custom reference resolving,
+          ~// hover help, occurrence highlighting rules.
           ~// See the imported file for a brief introduction and examples.
           ~
-          reference _ : editor-resolve editor-hover
+          reference _ : editor-resolve
+          hover     _ : editor-hover
       ]|
     );
     
@@ -41,17 +42,18 @@
           ~// Reference resolving rules can specify the syntax constructors for which
           ~// a reference resolving function is available:
           ~//
-          ~//   reference FunctionCall : resolve-function-call hover-help-function-call
+          ~//   reference FunctionCall : resolve-function-call 
           ~//
           ~// This defines that for each FunctionCall, resolve-function-call
-          ~// will retrieve the AST node that declares it, and hover-help-function-call
-          ~// returns hover help information.
+          ~// will retrieve the AST node that declares it.
           ~
-          ~// Likewise, occurrence highlighting functionality may be specified as follows:
+          ~// Likewise, hover help and occurrence highlighting functionality and can be
+          ~// specified as follows:
           ~//
-          ~//   occurrence FunctionCall : find-occurrences
+          ~//   hover      FunctionCall : hover-help-function-call
+          ~//   occurrence _            : find-occurrences
           ~
-          ~// The reference resolver and occurences service can use any dynamic rules
-          ~// created by the analysis service.
+          ~// The reference resolver, hover help, and occurences service may use any
+          ~// dynamic rules created by the analysis service.
       ]|
     )

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2009-11-10 12:23:44 UTC (rev 20211)
@@ -1,5 +1,7 @@
 [
-   ReferenceRule        -- R [ H [ KW["reference"] _1 ] H [ KW[":"] _2 ] _3 ],
+   ReferenceHoverRule   -- R [ H [ KW["reference"] _1 ] KW[":"] H [ _2 _3 ] ],
+   ReferenceRule        -- R [ H [ KW["reference"] _1 ] KW[":"] _2 ],
+   HoverRule            -- R [ H [ KW["hover"]     _1 ] KW[":"] _2 ],
    OccurrenceRule       -- R [ H [ KW["occurrence"] _1 ] H [ KW[":"] _2 ] ],
    SemanticProvider     -- R [ H [ KW["provider" ] ] KW[":"] _1 ],
    SemanticObserver     -- R [ H [ KW["observer"] ]  KW[":"] _1 ],

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ReferencesService.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ReferencesService.sdf	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ReferencesService.sdf	2009-11-10 12:23:44 UTC (rev 20211)
@@ -19,9 +19,19 @@
 
   context-free syntax
   
-    %% TODO: separate "hover" syntax
+    "reference"  SemanticNode ":" StrategoCall StrategoCall -> SemanticRule {cons("ReferenceHoverRule"), deprecated}
+
+    "reference"  SemanticNode ":" StrategoCall -> SemanticRule {cons("ReferenceRule")}
+
+    "hover"      SemanticNode ":" StrategoCall -> SemanticRule {cons("HoverRule")}
   
-    "reference" SemanticNode ":" StrategoCall StrategoCall -> SemanticRule {cons("ReferenceRule")}
-%%  "reference" "*"          ":" StrategoCall StrategoCall -> SemanticRule {cons("AllReferenceRule")}
+    "occurrence" SemanticNode ":" StrategoCall -> SemanticRule {cons("OccurrenceRule")}
   
-    "occurrence" SemanticNode ":" StrategoCall -> SemanticRule {cons("OccurrenceRule")}
+  context-free syntax
+  
+    "reference"  -> StrategoCall {reject}
+    "hover"      -> StrategoCall {reject}
+    "observer"   -> StrategoCall {reject}
+    "builder"    -> StrategoCall {reject}
+    "occurrence" -> StrategoCall {reject}
+    ReservedName -> StrategoCall {reject}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-10 12:23:44 UTC (rev 20211)
@@ -77,23 +77,30 @@
       point="org.eclipse.ui.editors.annotationTypes">
    <!-- (ignore any reference errors here *sigh*) -->
    <type
-      name="org.strategoxt.imp.runtime.parseannotation"
+      name="org.strategoxt.imp.runtime.parseerror"
       super="org.eclipse.ui.workbench.texteditor.error"
       markerType="org.strategoxt.imp.runtime.parsemarker"
       markerSeverity="2">
    </type>
    <type
+      name="org.strategoxt.imp.runtime.parsewarning"
+      super="org.eclipse.ui.workbench.texteditor.warning"
+      markerType="org.strategoxt.imp.runtime.parsemarker"
+      markerSeverity="1">
+   </type>
+   <type
       name="org.strategoxt.imp.runtime.analysisannotation"
       super="org.eclipse.ui.workbench.texteditor.error"
       markerType="org.strategoxt.imp.runtime.analysismarker"
       markerSeverity="2">
    </type>
    </extension>
+
    <extension
          id="org.strategoxt.imp.runtime.parsemarkerspec"
          point="org.eclipse.ui.editors.markerAnnotationSpecification">
       <specification
-            annotationType="org.strategoxt.imp.runtime.parseannotation"
+            annotationType="org.strategoxt.imp.runtime.parseerror"
             colorPreferenceKey="spiParseAnnotationColor"
             colorPreferenceValue="255,128,147"
             contributesToHeader="true"
@@ -107,7 +114,7 @@
             label="Spoofax/IMP Parser Annotation"
             overviewRulerPreferenceKey="parseAnnotationOverviewKey"
             overviewRulerPreferenceValue="true"
-            presentationLayer="2"
+            presentationLayer="1"
             showInNextPrevDropdownToolbarAction="true"
             symbolicIcon="error"
             textPreferenceKey="parseAnnotationTextKey"
@@ -117,7 +124,38 @@
             verticalRulerPreferenceKey="parseAnnotationVerticalKey"
             verticalRulerPreferenceValue="true"/>
    </extension>
+
+   <!-- TODO: proper red and orange colors for errors and warnings --> 
    <extension
+         id="org.strategoxt.imp.runtime.parsemarkerspec"
+         point="org.eclipse.ui.editors.markerAnnotationSpecification">
+      <specification
+            annotationType="org.strategoxt.imp.runtime.parsewarning"
+            colorPreferenceKey="spiParseAnnotationColor"
+            colorPreferenceValue="255,148,127"
+            contributesToHeader="true"
+            highlightPreferenceKey="parseAnnotationHighlightKey"
+            highlightPreferenceValue="false"
+            includeOnPreferencePage="false"
+            isGoToNextNavigationTarget="true"
+            isGoToNextNavigationTargetKey="parseAnnotationIsGotoNextKey"
+            isGoToPreviousNavigationTarget="true"
+            isGoToPreviousNavigationTargetKey="parseAnnotationIsGotoPrevKey"
+            label="Spoofax/IMP Parser Annotation"
+            overviewRulerPreferenceKey="parseAnnotationOverviewKey"
+            overviewRulerPreferenceValue="true"
+            presentationLayer="1"
+            showInNextPrevDropdownToolbarAction="true"
+            symbolicIcon="warning"
+            textPreferenceKey="parseAnnotationTextKey"
+            textPreferenceValue="true"
+            textStylePreferenceKey="parseAnnotationTextStyleKey"
+            textStylePreferenceValue="SQUIGGLES"
+            verticalRulerPreferenceKey="parseAnnotationVerticalKey"
+            verticalRulerPreferenceValue="true"/>
+   </extension>
+
+   <extension
          id="org.strategoxt.imp.runtime.analysismarkerspec"
          point="org.eclipse.ui.editors.markerAnnotationSpecification">
       <specification
@@ -135,7 +173,7 @@
             label="Spoofax/IMP Analysis Annotation"
             overviewRulerPreferenceKey="analysisAnnotationOverviewKey"
             overviewRulerPreferenceValue="true"
-            presentationLayer="2"
+            presentationLayer="1"
             showInNextPrevDropdownToolbarAction="true"
             symbolicIcon="error"
             textPreferenceKey="analysisAnnotationTextKey"
@@ -187,7 +225,7 @@
          point="org.eclipse.ui.handlers">
       <handler
             class="org.strategoxt.imp.runtime.stratego.BuilderButtonDelegate"
-            commandId="org.strategoxt.imp.runtime.commands.sampleCommand">
+            commandId="org.strategoxt.imp.runtime.transformCommand">
       </handler>
    </extension>
    <extension

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-11-10 12:23:44 UTC (rev 20211)
@@ -99,6 +99,8 @@
 		
 		boolean foundFactory = false;
 		
+		// TODO: caching of builders and reference resolvers?
+		
 		try {
 			for (AbstractServiceFactory<T> factory : serviceFactories) {
 				if (factory.canCreate(type)) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ReferenceResolverFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ReferenceResolverFactory.java	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ReferenceResolverFactory.java	2009-11-10 12:23:44 UTC (rev 20211)
@@ -29,11 +29,19 @@
 		List<NodeMapping<String>> resolverFunctions = new ArrayList<NodeMapping<String>>();
 		List<NodeMapping<String>> helpFunctions = new ArrayList<NodeMapping<String>>();
 		
-		for (IStrategoAppl rule : collectTerms(descriptorFile, "ReferenceRule")) {
+		for (IStrategoAppl rule : collectTerms(descriptorFile, "ReferenceHoverRule")) {
 			resolverFunctions.add(NodeMapping.create(termAt(rule, 0), termContents(termAt(rule, 1))));
 			helpFunctions.add(NodeMapping.create(termAt(rule, 0), termContents(termAt(rule, 2))));
 		}
 		
+		for (IStrategoAppl rule : collectTerms(descriptorFile, "ReferenceRule")) {
+			resolverFunctions.add(NodeMapping.create(termAt(rule, 0), termContents(termAt(rule, 1))));
+		}
+		
+		for (IStrategoAppl rule : collectTerms(descriptorFile, "HoverRule")) {
+			helpFunctions.add(NodeMapping.create(termAt(rule, 0), termContents(termAt(rule, 1))));
+		}
+		
 		return new StrategoReferenceResolver(feedback, resolverFunctions, helpFunctions);
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-11-10 12:23:44 UTC (rev 20211)
@@ -46,6 +46,8 @@
 	 */
 	public static final String INSERT_END = "INSERTEND";
 	
+	public static final String DEPRECATED = "deprecated";
+	
 	/**
 	 * The parse stream character that indicates a character has
 	 * been skipped by the parser.
@@ -180,6 +182,9 @@
 				// (or reporting a missing } at another })
 				reportErrorAtTokens(token, token, "Syntax error, insert '" + inserted + "' to complete construct");
 			}
+		} else if (getDeprecatedProductionMessage(attrs) != null) {
+			IToken token = tokenizer.makeErrorToken(startOffset, offset - 1);
+			reportWarnningAtTokens(token, token, getDeprecatedProductionMessage(attrs));
 		}
 		
 		if (lexicalStart) inLexicalContext = false;
@@ -285,12 +290,6 @@
 	}
 	
 	private void reportErrorAtTokens(final IToken left, final IToken right, String message) {
-		// UNDONE: Using IMP message handler
-		// TODO: Cleanup - remove messages field and related code
-		//messages.handleSimpleMessage(
-		// 		message, max(0, left.getStartOffset()), max(0, right.getEndOffset()),
-		// 		left.getColumn(), right.getEndColumn(), left.getLine(), right.getEndLine());
-		
 		final String message2 = isRecoveryAvailable ? message : message + " (recovery unavailable)";
 		
 		errorReports.add(new Runnable() {
@@ -300,6 +299,14 @@
 		});
 	}
 	
+	private void reportWarnningAtTokens(final IToken left, final IToken right, final String message) {
+		errorReports.add(new Runnable() {
+			public void run() {
+				handler.addMarker(source.getResource(), left, right, message, IMarker.SEVERITY_WARNING);
+			}
+		});
+	}
+	
 	private void reportErrorAtFirstLine(String message) {
 		final String message2 = isRecoveryAvailable ? message : message + " (recovery unavailable)";
 		
@@ -314,17 +321,40 @@
 		if ("attrs".equals(attrs.getName())) {
 			ATermList attrList = termAt(attrs, 0);
 		
-			for (int i=0; i<attrList.getLength(); i++) {							
-			ATermAppl term = termAt(attrList, i);
-			if (term.getName().equals("term")) {
-				ATermAppl details = applAt(term, 0);
-				if (details.getName().equals("cons")) {
-					details = applAt(details, 0);					
-					return details.getName().equals(consName);
+			while (!attrList.isEmpty()) {
+				ATermAppl attr = (ATermAppl) attrList.getFirst();
+				attrList = attrList.getNext();
+				if (attr.getName().equals("term")) {
+					ATermAppl details = applAt(attr, 0);
+					if (details.getName().equals("cons")) {
+						details = applAt(details, 0);					
+						return details.getName().equals(consName);
+					}
 				}
 			}
-			}
 		}
 		return false;
 	}
+	
+	private static String getDeprecatedProductionMessage(ATermAppl attrs) {
+		if ("attrs".equals(attrs.getName())) {
+			ATermList attrList = termAt(attrs, 0);
+			while (!attrList.isEmpty()) {
+				ATermAppl attr = (ATermAppl) attrList.getFirst();
+				attrList = attrList.getNext();
+				if (attr.getName().equals("term")) {
+					ATermAppl details = applAt(attr, 0);
+					if (details.getName().equals("deprecated")) {
+						if (details.getChildCount() == 1) {
+							details = termAt(details, 0);
+							return "Deprecated syntactic construct:" + details.getName();
+						} else {
+							return "Deprecated syntactic construct";
+						}
+					}
+				}
+			}
+		}
+		return null;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-11-10 12:23:44 UTC (rev 20211)
@@ -192,6 +192,9 @@
 				errorHandler.applyMarkers();
 			}
 			
+			// TODO: Delay parse error markers for newly typed text
+			//       (the new ast should then also be delayed as to get the old coloring)
+			
 			currentAst = ast;
 				
 			Debug.stopTimer("File parsed: " + filename);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-10 12:23:44 UTC (rev 20211)
@@ -137,13 +137,13 @@
 		if (editor.getDescriptor().isDynamicallyLoaded()) StrategoConsole.activateConsole();
 		Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, e.getLocalizedMessage(), e);
 		ErrorDialog.openError(editor.getEditor().getSite().getShell(),
-				"Spoofax/IMP builder", null, status);
+				caption, null, status);
 	}
 	
-	private static void openError(EditorState editor, String message) {
+	private void openError(EditorState editor, String message) {
 		Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
 		ErrorDialog.openError(editor.getEditor().getSite().getShell(),
-				"Spoofax/IMP builder", null, status);
+				caption, null, status);
 	}
 
 	private IFile createFile(EditorState editor, String filename, String contents) throws CoreException {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-10 12:23:44 UTC (rev 20211)
@@ -17,6 +17,7 @@
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.parser.IModelListener;
@@ -344,10 +345,10 @@
 	public IStrategoTerm invoke(String function, IStrategoTerm term, IResource resource)
 			throws UndefinedStrategyException, InterpreterErrorExit, InterpreterExit, InterpreterException {
 		
-		if (runtime == null)
-			return null;
-		
 		synchronized (Environment.getSyncRoot()) {
+			if (runtime == null) init(new NullProgressMonitor());
+			if (runtime == null) return null;
+			
 		    Debug.startTimer();
 			// TODO: Make Context support monitor.isCanceled()?
 			//       (e.g., overriding Context.lookupPrimitive to throw an OperationCanceledException) 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	2009-11-10 12:23:44 UTC (rev 20211)
@@ -57,7 +57,7 @@
 		String function = NodeMapping.getFirstAttribute(helpFunctions, node.getConstructor(), null, 0);
 		if (function == null) function = wildcardHelperFunction;
 		if (function == null || function.equals("_"))  {
-			Debug.log("No reference info available for node of type ", node.getConstructor());
+			Debug.log("No hover help available for node of type ", node.getConstructor());
 			return null;
 		}
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/BuilderButtonDelegate.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/BuilderButtonDelegate.java	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/BuilderButtonDelegate.java	2009-11-10 12:23:44 UTC (rev 20211)
@@ -3,6 +3,7 @@
 import org.eclipse.core.commands.AbstractHandler;
 import org.eclipse.core.commands.ExecutionEvent;
 import org.eclipse.core.commands.ExecutionException;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.ActionContributionItem;
@@ -17,6 +18,7 @@
 import org.eclipse.ui.IWorkbenchWindowPulldownDelegate;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.RuntimeActivator;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.services.IBuilder;
 import org.strategoxt.imp.runtime.services.IBuilderMap;
@@ -40,15 +42,21 @@
 
 	public void run(IAction action) {
 		EditorState editor = EditorState.getActiveEditor();
-		if (editor == null) return;
+		if (editor == null) {
+			openError("No builders defined for this editor");
+			return;
+		}
 		
 		IBuilderMap builders = getBuilders(editor);
 		IBuilder builder = builders.get(lastAction);
 		if (builder == null && builders.getAll().size() > 0) {
 			builder = builders.getAll().iterator().next();
 		}
-		if (builder != null)
+		if (builder == null) {
+			openError("No builders defined for this editor");
+		} else {
 			builder.execute(editor, null);
+		}
 	}
 
 	public Object execute(ExecutionEvent event) throws ExecutionException {
@@ -92,13 +100,16 @@
 			builders = editor.getDescriptor().createService(IBuilderMap.class);
 		} catch (BadDescriptorException e) {
 			Environment.logException("Could not load builder", e);
-			// TODO: fix error dialog not showing?
-			ErrorDialog.openError(editor.getEditor().getSite().getShell(),
-					"Spoofax/IMP building", "Could not load builders", Status.OK_STATUS);
+			openError("Could not load builders");
 			throw new RuntimeException(e);
 		}
 		return builders;
 	}
+
+	private void openError(String message) {
+		Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
+		ErrorDialog.openError(null, "Spoofax/IMP builder", null, status);
+	}
 		
 	@Override
 	public void dispose() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java	2009-11-10 12:23:44 UTC (rev 20211)
@@ -58,8 +58,10 @@
 	public PrintStream getOutputStream(int fd) {
 		// TODO: close console streams after use?
 		if (fd == CONST_STDOUT && descriptor != null && descriptor.isDynamicallyLoaded()) {
+			StrategoConsole.activateConsole(true);
 			return StrategoConsole.getOutputStream();
 		} else if (fd == CONST_STDERR && descriptor != null && descriptor.isDynamicallyLoaded()) {
+			StrategoConsole.activateConsole(true);
 			return StrategoConsole.getErrorStream();
 		} else {
 			return super.getOutputStream(fd);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoConsole.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoConsole.java	2009-11-10 10:52:51 UTC (rev 20210)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoConsole.java	2009-11-10 12:23:44 UTC (rev 20211)
@@ -74,7 +74,7 @@
 		consoles.addConsoles(new IConsole[] { result });
 		return result;

(40 diff lines omitted)


From R.B.Vermaas at tudelft.nl  Tue Nov 10 14:12:30 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 10 Nov 2009 13:12:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20212 - rob - hydra/jobs
Message-ID: <200911101312.nAADCUsa007382@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-11-10 13:12:30 +0000 (Tue, 10 Nov 2009)
New Revision: 20212

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20212&view=rev

Modified:
   hydra/jobs/strategoxt.nix

Log:
use 20203 as baseline

Changes:

Modified: hydra/jobs/strategoxt.nix
===================================================================
--- hydra/jobs/strategoxt.nix	2009-11-10 12:23:44 UTC (rev 20211)
+++ hydra/jobs/strategoxt.nix	2009-11-10 13:12:30 UTC (rev 20212)
@@ -11,8 +11,8 @@
     pkgs.stdenv.mkDerivation {
       name = "strategoxt-baseline";
       src = pkgs.fetchurl {
-              url = "http://hydra.nixos.org/build/82252/download/1/strategoxt-0.18pre20033.tar.gz";
-              sha256 = "070052cff1fd27b2ca4bed8b6aa0238574a18922b21feae2506e6df5d2201c1c";
+              url = "http://hydra.nixos.org/build/122167/download/1/strategoxt-0.18pre20203.tar.gz";
+              sha256 = "1d298c1e28b63b74d15f58c4e31ee2fba460b911b1cfdfed4c51d99800725a66";
             };
 
       buildInputs = defaultBuildInputs pkgs ;



From R.B.Vermaas at tudelft.nl  Tue Nov 10 14:40:42 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 10 Nov 2009 13:40:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20213 - rob - hydra/jobs
Message-ID: <200911101340.nAADegtp007576@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-11-10 13:40:42 +0000 (Tue, 10 Nov 2009)
New Revision: 20213

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20213&view=rev

Modified:
   hydra/jobs/strategoxt.nix

Log:


Changes:

Modified: hydra/jobs/strategoxt.nix
===================================================================
--- hydra/jobs/strategoxt.nix	2009-11-10 13:12:30 UTC (rev 20212)
+++ hydra/jobs/strategoxt.nix	2009-11-10 13:40:42 UTC (rev 20213)
@@ -11,8 +11,8 @@
     pkgs.stdenv.mkDerivation {
       name = "strategoxt-baseline";
       src = pkgs.fetchurl {
-              url = "http://hydra.nixos.org/build/122167/download/1/strategoxt-0.18pre20203.tar.gz";
-              sha256 = "1d298c1e28b63b74d15f58c4e31ee2fba460b911b1cfdfed4c51d99800725a66";
+              url = "http://hydra.nixos.org/build/92596/download/1/strategoxt-0.18pre20081.tar.gz";
+              sha256 = "4ce45c6925ff8eec0ba8a127b046b590ec68c3f7e5053a2f5f8241e78d3ac9ce";
             };
 
       buildInputs = defaultBuildInputs pkgs ;



From R.B.Vermaas at tudelft.nl  Tue Nov 10 14:57:12 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 10 Nov 2009 13:57:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20214 - rob - hydra/jobs
Message-ID: <200911101357.nAADvC6D007741@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-11-10 13:57:12 +0000 (Tue, 10 Nov 2009)
New Revision: 20214

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20214&view=rev

Modified:
   hydra/jobs/strategoxt.nix

Log:
use 20033 again as baseline

Changes:

Modified: hydra/jobs/strategoxt.nix
===================================================================
--- hydra/jobs/strategoxt.nix	2009-11-10 13:40:42 UTC (rev 20213)
+++ hydra/jobs/strategoxt.nix	2009-11-10 13:57:12 UTC (rev 20214)
@@ -11,8 +11,8 @@
     pkgs.stdenv.mkDerivation {
       name = "strategoxt-baseline";
       src = pkgs.fetchurl {
-              url = "http://hydra.nixos.org/build/92596/download/1/strategoxt-0.18pre20081.tar.gz";
-              sha256 = "4ce45c6925ff8eec0ba8a127b046b590ec68c3f7e5053a2f5f8241e78d3ac9ce";
+              url = "ftp://ftp.strategoxt.org/pub/stratego/StrategoXT/strategoxt-0.18pre20033.tar.gz";
+              sha256 = "07dlwmvs69qscx6dayjkmwjgyi4lzdzd9dagb9lkmwiw2n1hqprw";
             };
 
       buildInputs = defaultBuildInputs pkgs ;



From L.C.L.Kats at tudelft.nl  Tue Nov 10 15:02:38 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 10 Nov 2009 14:02:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20215 - LennartKats -
	in strc-java/trunk/java: . tools/org/strategoxt/tools
	tools/org/strategoxt/tools/lib
Message-ID: <200911101402.nAAE2cuV008037@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-10 14:02:38 +0000 (Tue, 10 Nov 2009)
New Revision: 20215

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20215&view=rev

Added:
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/ppgen.str
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf-2-pp-lib.str
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf-2-pp-table.str
Modified:
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/tools/org/strategoxt/tools/tools.str

Log:
Added ppgen to org.strategoxt.tools and hacked out all the xtc bits.

Changes:

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-11-10 13:57:12 UTC (rev 20214)
+++ strc-java/trunk/java/Makefile.am	2009-11-10 14:02:38 UTC (rev 20215)
@@ -219,7 +219,7 @@
 ###### TOOLS #######
 
 tools/org/strategoxt/tools/Main.java : $(TOOLSTRS:.str=.rtree)
-	$(STRJ) -i tools/org/strategoxt/tools/tools.rtree -o $@ $(STRJFLAGS) -p org.strategoxt.tools -la stratego-lib -la stratego-xtc -la stratego-gpp -la stratego-rtg -la stratego-sglr -la stratego-tool-doc -la stratego-sdf -la stratego-aterm -la strc -I $(STRATEGOXT)/share/sdf/xml-front -I tools/org/strategoxt/tools/lib -I $(STRATEGOXT)/share/sdf/gpp -I $(STRATEGOXT)/share/sdf/stratego-regular -I $(STRATEGOXT)/share/stratego-regular -I $(STRATEGOXT)/share/sdf/sdf-front
+	$(STRJ) -i tools/org/strategoxt/tools/tools.rtree -o $@ $(STRJFLAGS) -p org.strategoxt.tools -la stratego-lib -la stratego-xtc -la stratego-gpp -la stratego-rtg -la stratego-sglr -la stratego-tool-doc -la stratego-sdf -la stratego-aterm -la strc -I $(STRATEGOXT)/share/sdf/xml-front -I tools/org/strategoxt/tools/lib -I $(STRATEGOXT)/share/sdf/gpp -I $(STRATEGOXT)/share/gpp -I $(STRATEGOXT)/share/sdf/stratego-regular -I $(STRATEGOXT)/share/stratego-regular -I $(STRATEGOXT)/share/sdf/sdf-front
 
 ###### COMPILER #######
 

Copied: strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str (from rev 20211, strategoxt/trunk/gpp/tools/pp-pp-table.str)
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str	                        (rev 0)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str	2009-11-10 14:02:38 UTC (rev 20215)
@@ -0,0 +1,17 @@
+module pp-pp-table
+imports 
+  libstratego-lib
+  libstratego-xtc
+  libstratego-gpp
+
+strategies
+
+  main-pp-pp-table =
+    xtc-io-wrap(
+      pp-pp-table
+    )
+  
+  pp-pp-table =
+    ast2abox(|[<import-term(pp-table-pretty.pp.af)>])
+  ; box2text-string(|80)
+


Property changes on: strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str
___________________________________________________________________
Added: svn:mergeinfo
   + /strategoxt/branches/strategoxt-annos/gpp/tools/pp-pp-table.str:19217-19721
/strategoxt/branches/strategoxt-with/gpp/tools/pp-pp-table.str:18038-18120

Copied: strc-java/trunk/java/tools/org/strategoxt/tools/lib/ppgen.str (from rev 20211, strategoxt/trunk/gpp/tools/ppgen.str)
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/ppgen.str	                        (rev 0)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/ppgen.str	2009-11-10 14:02:38 UTC (rev 20215)
@@ -0,0 +1,47 @@
+module ppgen
+imports
+  libstratego-lib
+  libstratego-xtc
+  libstratego-sdf
+  sdf-2-pp-table
+  pp-pp-table
+
+signature
+  constructors
+    PlainText : InputType
+    ParseTree : InputType
+    AST       : InputType
+
+strategies
+  
+  main-ppgen =
+    xtc-io-wrap(ppgen-options, ppgen)
+
+  ppgen = 
+    <pre-process-sdf> (<get-input-type>, <id>)
+    ; ppgenerate
+    ; if not(<get-config> "--output-type" => AST()) then
+        pp-pp-table; print-to
+      end
+
+  pre-process-sdf : (PlainText(), f) -> <xtc-ensure-file => FILE(<id>); parse-sdf-definition-file> f
+  pre-process-sdf : (ParseTree(), f) -> <implode-asfix> f
+  pre-process-sdf : (AST()      , f) -> f
+
+  get-input-type =
+    <get-config> "--input-type"  <+ !PlainText()
+
+  ppgen-options =
+      Option("-A"
+      , where(<set-config> ("--input-type", ParseTree()))
+      ,	!"-A          Input is parse tree."
+      )
+    + Option("-a"
+      , where(<set-config> ("--input-type", AST()))
+      ,	!"-a          Input is abstract syntax tree."
+      )
+    + Option("-t"
+      , where(<set-config> ("--output-type", AST()))
+      ,	!"-t          Output is abstract syntax tree."
+      )
+


Property changes on: strc-java/trunk/java/tools/org/strategoxt/tools/lib/ppgen.str
___________________________________________________________________
Added: svn:mergeinfo
   + /strategoxt/branches/strategoxt-annos/gpp/tools/ppgen.str:19217-19721
/strategoxt/branches/strategoxt-with/gpp/tools/ppgen.str:18038-18120

Copied: strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf-2-pp-lib.str (from rev 20211, strategoxt/trunk/gpp/tools/sdf-2-pp-lib.str)
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf-2-pp-lib.str	                        (rev 0)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf-2-pp-lib.str	2009-11-10 14:02:38 UTC (rev 20215)
@@ -0,0 +1,241 @@
+/**
+ * @author  Merijn de Jonge <mdjonge at cwi.nl>
+ */
+module sdf-2-pp-lib
+imports
+  pp-table
+  Bracket-Symbol
+  sdf/production/utils
+  sdf/production/attributes
+
+strategies
+
+  /**
+   * Obtain the constructor name of the production, number all non-terminal
+   * symbols of the production and generate pretty-print entries for the
+   * symbols
+   */
+  generate-pp-entries =
+    ?prod(syms, sym, attrs)
+  ; ( <?attrs(<id>); get-cnstr-name> attrs => cons-name
+    < <symbols2pp-entries(!cons-name)> syms
+    + ignore-prod
+      < ![]
+      + if-verbose1(missing-constructor-warning)
+        ; ![]
+    )
+
+  missing-constructor-warning =
+    // TODO: restore constructor warnings?
+    // xtc-temp-files(
+    //  write-to
+    //; xtc-pp-sdf2
+    // ; ?FILE(<read-text-file; trim-chars('\n' + '\r' + ' ' + '\t')>)
+    // )
+      fatal-err(|"No constructor defined for production")
+
+strategies
+
+  ignore-prod =
+      is-inject-prod
+    + is-bracket-prod
+    + is-reject-prod
+
+  /**
+   * Ignore a bracket production that injects A into A.
+   */
+  ignore-prod =
+    ?prod(syms, cf(sort(x)), attrs(attrs))
+    ; where(
+        <contains-bracket> attrs
+      ; <not(get-cnstr-name)> attrs
+      )
+
+strategies
+
+  number-nonterminals =
+      no-labels
+    ; number-node(NonTerminal)
+
+  NonTerminal = not(lit(id))
+
+  no-labels = map(try( \ label(a,b) -> b \ ))
+
+symbols2pp-entries( constr-name ) =
+   number-nonterminals;
+   // Make template for a sequence of symbols
+   where( make => aboxes );
+   // recursively construct tempates for nested symbols
+   where( map( symbol2abox( !(<constr-name>(),[]) ) ); concat => pp-entries );
+
+   // Yield a list of pretty-print entries as result.
+   ![PP-Entry( Path1(<constr-name>()), aboxes ) | pp-entries]
+
+symbol2abox(path) = 
+   // tuple ( (constr, selectors), symbol) is used here
+   // constr denotes the constructor name of the production,
+   // selectors a list of selectors pointing to the symbol
+   split( <path>() ,id);
+   rec x ( 
+      // No special box templates are required for literals, so we return an
+      // empty list.
+      ?(_, lit(_)); ![]
+   <+ 
+      // For sort non-terminals we don't generate a specific formatting
+      // rule, so we just retrurn an empty list.
+      ?(_,(_,sort(_))); ![]
+   <+
+      // Idem for character classes
+      ?(_,(_,char-class(_))); ![]
+
+   <+
+      // Nested alternatives are first flattened: alt(a,(alt(b,c) )
+      // becomes alt(a,b,c)
+      {a, b, c,arguments, f: 
+      ?((constr, selectors), (n, alt(a,alt(b, c))));
+      <flat-alt>alt(a, alt(b, c)) => arguments;
+      <mkterm>("alt", arguments) => f;
+      <x>((constr, selectors),(n,f));
+
+      // The pp entry for an SDF alternative consists of a list of literals
+      // or equally numberd place holder symbols. For instance:
+      //    S.1.alt -- "aap" _1 _1 _1
+      // Therefore, we replace the place holder symbols (which are numberd
+      // increasingly by default) by Arg(1)
+      [topdown(try( Arg(id);!Arg(1)))|id]
+      }
+   <+
+      {constr, selectors, n, s:
+      
+      ?((constr, selectors), (n, bracket-symbol(s)));
+      <x>((constr, selectors), (n, s ))
+      }
+   <+
+      // For all other SDF symbols (opt, seq, etc), we recursively generate
+      // BOX templates for their argument symbols, and a template for the
+      // symbol itself.
+      { constr, selectors, selectors', abox-list, 
+        aboxes, n, symbol, arguments:
+   
+      ?((constr, selectors), (n, symbol#(arguments)));
+      <conc>(selectors, [selector(n, symbol)]) => selectors';
+
+      // First construct a list of argument symbols of which all
+      // non-terminal symbols are numbered.
+      <argument-list; number-nonterminals>arguments;
+
+      // Then create a BOX template for the argument symbols.
+      where( make  => abox-list );
+      
+      // Recursively generate BOX templates for each argument symbol.
+      map( {s, abox: \ s -> abox
+         where
+            !((constr, selectors'), s);x => abox
+             \ } );concat => aboxes;
+      
+      // Return a list consisting of the recursively generated BOX
+      // templates, and the BOX template for the symbol itself.
+      ![PP-Entry( Path( constr, selectors'), abox-list ) | aboxes ]
+      }
+   )   
+
+
+  flat-alt =
+    rec x ({a,b,s:
+      ?alt( a, alt(b, s ) );
+       ![a|<x>alt(b,s)]
+      <+
+      ?alt( a, b );
+       ![a,b]
+     })
+
+   /**
+    * Build a list of arguments. The strategy is used to 'flatten' the
+    * arguments of Sdf's sequence symbol, which is defined as a binary function
+    *   seq( Symbol, [Symbol+] )
+    * The strategy argument-list is a generic strategy which flattens these
+    * arguments and returns the list [Symbol | Symbol+].
+    */
+  argument-list = 
+      map( try( \ e -> [e]
+         where
+            not(is-list) \ ) ); 
+      concat
+
+  /**
+   * Replace each element e in a list by the tuple (n, e) when e satisfies s. 
+   * The number n denotes that e is the nth matching element in the list. The
+   * strategy is used in the generation of BOX templates to enable the
+   * replacement of non-terminal symbols in productions by numbered place
+   * holders.
+   */
+  number-node(s) =
+   split( !1, id );
+   rec x ( {n, e, e',es, es':
+         (id, []); ![]
+      <+
+         ?(n, [e|es] );
+         <s>e;
+         ![(n,e)|<x>(<add>(n,1),es)]
+      <+
+         ?(n, [e|es] );
+         ![e|<x>(n,es)]
+         
+   } )
+         
+
+/*         
+   Construct a box template for a list of symbols. All symbols but literals
+   are considered to be numbered tuples: (n,s) where n denotes the number
+   and s the symbol.  A numbered symbol (n,s) is replaced by the numbered
+   place holder Arg(n). A literal lit(s) is replaced by the box string S(s).
+
+   The following patterns in the productions are recognized and translated
+   specially. L stands for literal, I for iter or iter-sep.
+
+   1)
+      L+ I+ ==> V[H[L+] I+]
+      L+ I* ==> V[H[L+] I*]
+   
+   2)
+      (L I+ )+ L ==> V[ V is=2[L I+] ... L]
+      (L I* )+ L ==> V[ V is=2[L I*] ... L]
+   
+*/
+  make =
+   (
+      // Recognize pattern 1
+      reverse;[(id,iter(id)+
+                   iter-star(id) + 
+                   iter-sep(id,id)+
+                   iter-star-sep(id,id));Make|map( lit(id);Make )];
+      ?[iter|lits];
+      not([id]);
+      !V( [], [H([], <reverse>lits), iter])
+   <+
+      // Recognize pattern 2
+      reverse;[Make=>lit|not([]);reverse=>xs];
+      !xs;pair;
+      map(  {a,b: (lit(id);Make=>a,
+                   (id,iter(id)+iter-star(id));Make=>b);
+                   !V([SOpt(VS(),"2")],[a,b])
+            }) => v;
+      !V([],[v, lit])
+
+   <+
+      // Rule for all unrecognized patters
+      map( Make )
+   )
+
+  // Builds a list of pairs from a list
+  pair = 
+    rec x (
+      [] <+ \ [a, b | xs ] -> [(a,b) | <x> xs] \
+   )
+
+rules
+
+  Make : (i, _ ) -> Arg( i )
+
+  // Literals are pretty-printed as keywords
+  Make : lit(s)  -> FBOX(KW(), S(s))


Property changes on: strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf-2-pp-lib.str
___________________________________________________________________
Added: svn:mergeinfo
   + /strategoxt/branches/strategoxt-annos/gpp/tools/sdf-2-pp-lib.str:19217-19721
/strategoxt/branches/strategoxt-with/gpp/tools/sdf-2-pp-lib.str:18038-18120

Copied: strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf-2-pp-table.str (from rev 20211, strategoxt/trunk/gpp/tools/sdf-2-pp-table.str)
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf-2-pp-table.str	                        (rev 0)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf-2-pp-table.str	2009-11-10 14:02:38 UTC (rev 20215)
@@ -0,0 +1,43 @@
+module sdf-2-pp-table
+imports
+  sdf-2-pp-lib
+  Bracket-Symbol
+
+strategies
+
+  /**
+   * A pretty-print table is generated by collecting all context-free
+   * prodcutions from an sdf module or definition and generating BOX templates
+   * for each production and, recursively for each nested symbol of the
+   * production.
+   */
+  ppgenerate = 
+      // Obtain all context-free productions
+      collect(?context-free-syntax(<id>))
+    ; concat
+
+      // De-quote all strings
+    ; topdown(
+        try(
+          cons(un-double-quote)
+        + lit( un-double-quote)
+        + sort(un-double-quote)
+        + \ lit(s) -> lit(<un-double-quote> s) \
+        )
+      )
+   
+      // Create BOX templates for each production
+    ; map(generate-pp-entries)
+    ; filter( not(?[]) )
+    ; concat => pp-entries
+
+    // Construct a valid AST for the pretty-print table
+    ; !PP-Table(pp-entries)
+
+    ; topdown(
+        try(
+          Arg(int-to-string)
+        + selector(int-to-string, id)
+        + S(double-quote)
+        )
+      )


Property changes on: strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf-2-pp-table.str
___________________________________________________________________
Added: svn:mergeinfo
   + /strategoxt/branches/strategoxt-annos/gpp/tools/sdf-2-pp-table.str:19217-19721
/strategoxt/branches/strategoxt-with/gpp/tools/sdf-2-pp-table.str:18038-18120

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/tools.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/tools.str	2009-11-10 13:57:12 UTC (rev 20214)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/tools.str	2009-11-10 14:02:38 UTC (rev 20215)
@@ -4,3 +4,4 @@
   lib/rtg2sig
   lib/sdf2rtg
   lib/pack-sdf
+  lib/ppgen



From L.C.L.Kats at tudelft.nl  Tue Nov 10 15:29:46 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 10 Nov 2009 14:29:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20216 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <200911101429.nAAETkGm008264@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-10 14:29:46 +0000 (Tue, 10 Nov 2009)
New Revision: 20216

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20216&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2009-11-10 14:02:38 UTC (rev 20215)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2009-11-10 14:29:46 UTC (rev 20216)
@@ -25,6 +25,9 @@
       + RDefT(?x, length => s-length, length => t-length, id)
       + RDef(?x, length => s-length, id)
       + RDefNoArgs(?x, id)
+      + RDecT(?x, length => s-length, length => t-length)
+      + RDec(?x, length => s-length)
+      + RDecNoArgs(?x)
       )> ast;
       one(?target)
 



From L.C.L.Kats at tudelft.nl  Wed Nov 11 10:11:54 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 11 Nov 2009 09:11:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20217 - LennartKats -
	strategoxt/trunk/stratego-regular/xtc
	strc-java/trunk/java/tools/org/strategoxt/tools/lib
Message-ID: <200911110911.nAB9BsGS023173@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-11 09:11:54 +0000 (Wed, 11 Nov 2009)
New Revision: 20217

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20217&view=rev

Added:
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/regular-xtc-tools.str
Modified:
   strategoxt/trunk/stratego-regular/xtc/regular-xtc-tools.str

Log:
Undid the XTC-independency-related changes to STRC, since the libstrc import tended to propagate changes throughout the entire toolset. Copied the file to STRJ instead, where being XTC-independent has a higher priority.

Changes:

Modified: strategoxt/trunk/stratego-regular/xtc/regular-xtc-tools.str
===================================================================
--- strategoxt/trunk/stratego-regular/xtc/regular-xtc-tools.str	2009-11-10 14:29:46 UTC (rev 20216)
+++ strategoxt/trunk/stratego-regular/xtc/regular-xtc-tools.str	2009-11-11 09:11:54 UTC (rev 20217)
@@ -2,20 +2,12 @@
 imports
   pp-rtg
   libstratego-sglr
-  libstrc
 
 strategies
 
   xtc-pp-abstract-stratego =
-    with(
-      file   := <xtc-new-file>
-    ; stream := <open-stream> (file, "w")
-    )
-  ; finally(
-      pp-stratego-stream(|stream), <fclose> stream
-    )
-  ; !FILE(file)
-  
+    xtc-transform(!"pp-stratego", !["--abstract" | <pass-verbose> ()])
+
   /**
    * @type FILE -> RTG
    */

Copied: strc-java/trunk/java/tools/org/strategoxt/tools/lib/regular-xtc-tools.str (from rev 20211, strategoxt/trunk/stratego-regular/xtc/regular-xtc-tools.str)
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/regular-xtc-tools.str	                        (rev 0)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/regular-xtc-tools.str	2009-11-11 09:11:54 UTC (rev 20217)
@@ -0,0 +1,55 @@
+module regular-xtc-tools
+imports
+  pp-rtg
+  libstratego-sglr
+  libstrc
+
+strategies
+
+  xtc-pp-abstract-stratego =
+    with(
+      file   := <xtc-new-file>
+    ; stream := <open-stream> (file, "w")
+    )
+  ; finally(
+      pp-stratego-stream(|stream), <fclose> stream
+    )
+  ; !FILE(file)
+  
+  /**
+   * @type FILE -> RTG
+   */
+  xtc-rtg-front-end =
+    xtc-ensure-file
+    ; ?FILE(<id>)
+    ; parse-rtg-file
+    ; rtg-reduce
+    ; rtg-group-productions
+
+
+  /**
+   * @type RTG -> FILE
+   */
+  xtc-pp-rtg =
+    where(f := <xtc-new-file>)
+    ; pp-rtg-file(|f)
+    ; !FILE(f)
+
+/**
+ * Bootstrap problem
+ */
+strategies
+
+  my-parse-rtg-file =
+    where(tbl := <my-get-rtg-parse-table>)
+    ; parse-file(|tbl)
+    ; rtg-parsefix
+
+  my-get-rtg-parse-table =
+    MyMemoRTGParseTable
+    <+ get-rtg-parse-table
+       ; open-parse-table
+       ; ?tbl
+       ; rules(MyMemoRTGParseTable: _ -> tbl)
+
+  external STRRTG-get-rtg-parsetable(|)


Property changes on: strc-java/trunk/java/tools/org/strategoxt/tools/lib/regular-xtc-tools.str
___________________________________________________________________
Added: svn:mergeinfo
   + /strategoxt/branches/strategoxt-annos/stratego-regular/xtc/regular-xtc-tools.str:19217-19721
/strategoxt/branches/strategoxt-with/stratego-regular/xtc/regular-xtc-tools.str:18038-18120



From L.C.L.Kats at tudelft.nl  Thu Nov 12 10:22:40 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 12 Nov 2009 09:22:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20218 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200911120922.nAC9MeHI009446@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-12 09:22:40 +0000 (Thu, 12 Nov 2009)
New Revision: 20218

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20218&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java

Log:
Only allocate one timer object to eliminate the "out of native threads" problem reported by Maartje.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2009-11-11 09:11:54 UTC (rev 20217)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2009-11-12 09:22:40 UTC (rev 20218)
@@ -31,6 +31,10 @@
     static final int EOF = ParseTable.NUM_CHARS;
     
     static final int TAB_SIZE = 8;
+    
+    private static final Timer abortTimer = new Timer();
+    
+    private int abortTimerJobId;
 
     protected static boolean WORK_AROUND_MULTIPLE_LOOKAHEAD;
     
@@ -45,8 +49,6 @@
     
     private long startTime;
     
-    private Timer abortTimer;
-    
     private volatile boolean asyncAborted;
     
     private ATermFactory factory;
@@ -281,18 +283,26 @@
     }
     
     private void initParseTimer() {
-        asyncAborted = false;
         if (Tools.timeout > 0) {
-            if (abortTimer != null)
-                abortTimer.cancel();
-            abortTimer = new Timer();
+            // We use a single shared timer to conserve native threads
+            // and a jobId to recognize stale abort events
+            synchronized (abortTimer) {
+                asyncAborted = false;
+                ++abortTimerJobId;
+            }
+            final int jobId = abortTimerJobId;
             abortTimer.schedule(new TimerTask() {
                 @Override
                 public void run() {
-                    asyncAbort();
+                    synchronized (abortTimer) {
+                        if (abortTimerJobId == jobId)
+                            asyncAbort();
+                    }
                 }
             }, Tools.timeout
             );
+        } else {
+            asyncAborted = false;
         }
     }
 



From L.C.L.Kats at tudelft.nl  Thu Nov 12 10:53:31 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 12 Nov 2009 09:53:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20219 - LennartKats -
	in spoofax-imp/trunk/org.strategoxt.imp.runtime: .
	src/org/strategoxt/imp/runtime/services
	src/org/strategoxt/imp/runtime/stratego/adapter
Message-ID: <200911120953.nAC9rVl9009688@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-12 09:53:31 +0000 (Thu, 12 Nov 2009)
New Revision: 20219

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20219&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java

Log:
Fixed Stratego node/builder bugs reported by Maartje.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-12 09:22:40 UTC (rev 20218)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-12 09:53:31 UTC (rev 20219)
@@ -237,6 +237,8 @@
             sequence="CTRL+T">
       </key>
    </extension>
+   
+   <!-- TODO: control-shift-b binding for build current project?-->
 
    <!-- Extension point not implemented?
         manually called from SGLRParseController instead

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-12 09:22:40 UTC (rev 20218)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-12 09:53:31 UTC (rev 20219)
@@ -133,11 +133,15 @@
 	}
 
 	private void reportException(EditorState editor, Exception e) {
-		Environment.logException("Builder failed", e);
-		if (editor.getDescriptor().isDynamicallyLoaded()) StrategoConsole.activateConsole();
-		Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, e.getLocalizedMessage(), e);
-		ErrorDialog.openError(editor.getEditor().getSite().getShell(),
-				caption, null, status);
+		boolean isDynamic = editor.getDescriptor().isDynamicallyLoaded();
+		Environment.logException("Builder failed for " + (isDynamic ? "" : "non-") + "dynamically loaded editor", e);
+		if (isDynamic) StrategoConsole.activateConsole();
+		
+		if (EditorState.isUIThread()) {
+			// Only show if builder runs interactively (and not from the StrategoBuilderListener background builder)
+			Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, e.getLocalizedMessage(), e);
+			ErrorDialog.openError(editor.getEditor().getSite().getShell(), caption, null, status);
+		}
 	}
 	
 	private void openError(EditorState editor, String message) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java	2009-11-12 09:22:40 UTC (rev 20218)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java	2009-11-12 09:53:31 UTC (rev 20219)
@@ -138,25 +138,25 @@
 
 	public IStrategoConstructor getConstructor() {
 		if (getTermType() != APPL)
-			throw new AnnotationWrapperException("Called getConstructor() on a term that is not of type LIST");
+			throw new AnnotationWrapperException("Called getConstructor() on a term that is not of type APPL");
 		return ((IStrategoAppl) wrapped).getConstructor();
 	}
 
 	public int intValue() {
-		if (getTermType() != APPL)
-			throw new AnnotationWrapperException("Called intValue() on a term that is not of type LIST");
+		if (getTermType() != INT)
+			throw new AnnotationWrapperException("Called intValue() on a term that is not of type INT");
 		return ((IStrategoInt) wrapped).intValue();
 	}
 
 	public double realValue() {
-		if (getTermType() != APPL)
-			throw new AnnotationWrapperException("Called realValue() on a term that is not of type LIST");
+		if (getTermType() != REAL)
+			throw new AnnotationWrapperException("Called realValue() on a term that is not of type APPL");
 		return ((IStrategoReal) wrapped).realValue();
 	}
 
 	public String stringValue() {
 		if (getTermType() != STRING)
-			throw new AnnotationWrapperException("Called stringValue() on a term that is not of type LIST");
+			throw new AnnotationWrapperException("Called stringValue() on a term that is not of type STRING");
 		return ((IStrategoString) wrapped).stringValue();
 	}
 }



From L.C.L.Kats at tudelft.nl  Thu Nov 12 13:07:19 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 12 Nov 2009 12:07:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20220 - LennartKats -
	strc-java/trunk/java/runtime/org/strategoxt/lang
Message-ID: <200911121207.nACC7Jfm011701@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-12 12:07:19 +0000 (Thu, 12 Nov 2009)
New Revision: 20220

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20220&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_fatal_err_0_2.java

Log:


Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_fatal_err_0_2.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_fatal_err_0_2.java	2009-11-12 09:53:31 UTC (rev 20219)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_fatal_err_0_2.java	2009-11-12 12:07:19 UTC (rev 20220)
@@ -3,6 +3,7 @@
 import static org.spoofax.interpreter.core.Tools.*;
 import static org.spoofax.interpreter.terms.IStrategoTerm.*;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.stratego_lib.concat_strings_0_0;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -12,7 +13,9 @@
 	
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm message, IStrategoTerm term) {
-		if (message.getTermType() != STRING)
+		if (message.getTermType() == LIST)
+			message = concat_strings_0_0.instance.invoke(context, message);
+		if (message == null || message.getTermType() != STRING)
 			return null;
 		
 		if (term.getTermType() == TUPLE && term.getSubtermCount() == 0) {



From L.C.L.Kats at tudelft.nl  Thu Nov 12 16:28:17 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 12 Nov 2009 15:28:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20221 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.metatooling/META-INF
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <200911121528.nACFSHn7014634@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-12 15:28:17 +0000 (Thu, 12 Nov 2009)
New Revision: 20221

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20221&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-validator.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-colorer-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/SemanticServices.sdf
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/SDFBundleCommand.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoConsole.java

Log:
- Fixed issues with spaces in path names as seen on Eelco's Mac
- Better project/language name validation in wizard
- Improved editor service documentation
- Trigger realtime builders after editor definition is updated
- Some other minor bugfixes


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-12 15:28:17 UTC (rev 20221)
@@ -54,7 +54,7 @@
         </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
-        <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
+        <property name="build.stratego.args" value="--library -I ${trans} -I ${build} -I ${lib}
                         -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm
                         -I ${user.home}/.nix-profile/share/java-front
                         -I ${basedir}
@@ -181,7 +181,7 @@
             <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
-        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled" unless="external-def">
+        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.rtg"/>
                 <targetfileset file="${include}/${sdfmodule}.str"/>
@@ -203,7 +203,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled" unless="external-def">
+        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -227,9 +227,29 @@
                 <arg value="${build.strategoxt.sdf}"/>
             </java>
         </target>
+        
+        <target name="ppgen" depends="pack-sdf" if="build.stratego.enabled">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.pp"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.pp" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+        </target>
     
+        <target name="ppgen.helper" depends="aux-files" unless="ppgen.available">
+            <java classname="start" dir="${include}" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${sdfmodule}.pp"/>
+            </java>
+        </target>
+    
         <!-- Stratego to Java interpreter -->
-        <target name="stratego.ctree" depends="rtg2sig">
+        <target name="stratego.ctree" depends="rtg2sig,ppgen">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -247,7 +267,7 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig">
+        <target name="stratego.jar" depends="rtg2sig,ppgen">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -294,7 +314,7 @@
         </target>
         
         <!-- Helper target for calling the stratego compiler -->
-        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+        <target name="stratego.c.helper" depends="rtg2sig,ppgen" if="build.stratego.enabled">
             <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-11-12 15:28:17 UTC (rev 20221)
@@ -40,9 +40,11 @@
     ?(input, output, options);
     <xtc-command(!"sdf2table")> ["-i", <abspath> input, "-o", <abspath> output, "-m", <get-sdf-main-module> | <conc> (options, <pass-v-verbose>)]
   <+
-    <xtc-command(!"sdf2table")> ["-V"] // ensure it's available
-  <+
-    fatal-err(|["Internal error: could not call sdf2table"])
+    if <xtc-command(!"sdf2table")> ["-V"] then // ensure it's available
+      fatal-err(|["Internal error: parse table creation failed"])
+    else
+      fatal-err(|["Internal error: could not call sdf2table"])
+    end
   
   create-permissive-grammar:
     FILE(input) -> FILE(output)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-validator.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-validator.str	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-validator.str	2009-11-12 15:28:17 UTC (rev 20221)
@@ -24,6 +24,7 @@
       import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
 
       public class x_name extends MetaFileLanguageValidator {
+          @Override
           public Descriptor getDescriptor() {
               // Lazily get the descriptor
               return x_parser.getDescriptor();

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	2009-11-12 15:28:17 UTC (rev 20221)
@@ -49,8 +49,9 @@
           ~// Any dynamic rules set in the analysis may be used by other semantic services,
           ~// such as reference resolving or the builders.
           ~
-          ~// Builders may carry out custom transformations on a file or selection,
-          ~// and can be selected as follows:
+          ~// Builders may carry out custom transformations on a file or selection.
+          ~// (At run-time, they can be accessed using the toolbar button with the star icon.)
+          ~// Builders can be specified as follows:
           ~//
           ~//   builder : "Generate Java code" = generate-java (openeditor) (persistent) (realtime)
           ~//

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-colorer-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-colorer-descriptor.str	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-colorer-descriptor.str	2009-11-12 15:28:17 UTC (rev 20221)
@@ -47,13 +47,13 @@
         
         colorer Default, token-based highlighting
         ~
-          keyword    : "Keywords"    = 127 0 85     bold
-          identifier : "Identifiers" = default
-          string     : "Strings"     = blue
-          number     : "Numbers"     = darkgreen
-          var        : "Variables"   = 255 0 100    italic
-          operator   : "Operators"   = 0 0 128
-          layout     : "Comments"    = 100 100 0    italic
+          keyword    = 127 0 85     bold
+          identifier = default
+          string     = blue
+          number     = darkgreen
+          var        = 255 0 100    italic
+          operator   = 0 0 128
+          layout     = 100 100 0    italic
         
         colorer System colors
         ~

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str	2009-11-12 15:28:17 UTC (rev 20221)
@@ -48,7 +48,7 @@
           ~// will retrieve the AST node that declares it.
           ~
           ~// Likewise, hover help and occurrence highlighting functionality and can be
-          ~// specified as follows:
+          ~// specified as follows: (note: occurrence highlighting is not implemented at this time)
           ~//
           ~//   hover      FunctionCall : hover-help-function-call
           ~//   occurrence _            : find-occurrences

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf	2009-11-12 15:28:17 UTC (rev 20221)
@@ -10,10 +10,8 @@
     "builders" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Builders")}
 
     "builders" -> <ReservedName-CF>
-    
-    %% deprecated:
   
-    "analysis" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Builders")}
+    "analysis" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Builders"), deprecated("Use 'builders' instead")}
 
     "analysis" -> <ReservedName-CF>
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/SemanticServices.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/SemanticServices.sdf	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/SemanticServices.sdf	2009-11-12 15:28:17 UTC (rev 20221)
@@ -21,7 +21,7 @@
 
   context-free syntax
 
-    "provider"     PropertyValue -> SemanticRule {cons("SemanticProvider"),deprecated}
+    "provider"     PropertyValue -> SemanticRule {cons("SemanticProvider"), deprecated("Use 'provider :'")}
     "provider" ":" PropertyValue -> SemanticRule {cons("SemanticProvider")}
 
              StrategoId -> StrategoCall {cons("Strategy")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	2009-11-12 15:28:17 UTC (rev 20221)
@@ -26,6 +26,7 @@
  org.strategoxt.strj,
  org.strategoxt.imp.editors.editorservice,
  org.strategoxt.imp.editors.sdf,
+ org.strategoxt.imp.editors.aterm,
  org.eclipse.ant.core,
  sdf_eclipse_installer;bundle-version="1.0.10"
 Bundle-RequiredExecutionEnvironment: J2SE-1.5

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/SDFBundleCommand.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/SDFBundleCommand.java	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/SDFBundleCommand.java	2009-11-12 15:28:17 UTC (rev 20221)
@@ -29,6 +29,8 @@
  */
 public class SDFBundleCommand extends xtc_command_1_0 {
 	
+	private static final boolean ENABLED = false;
+	
 	private final xtc_command_1_0 proceed = xtc_command_1_0.instance;
 
 	private File binaryPrefix;
@@ -36,7 +38,7 @@
 	private String binaryPostfix;
 	
 	public void init() throws IOException {
-		if (binaryPostfix != null) return;
+		if (!ENABLED || binaryPostfix != null) return;
 		Activator sdfBundle = Activator.getInstance();
 		binaryPrefix = sdfBundle.getBinaryPrefix();
 		binaryPostfix = sdfBundle.getBinaryPostfix();
@@ -73,7 +75,7 @@
 		}
 		
 		IStrategoTerm commandTerm = commandStrategy.invoke(context, args);
-		if (commandTerm.getTermType() != STRING)
+		if (!ENABLED || commandTerm.getTermType() != STRING)
 			return proceed.invoke(context, args, commandStrategy);
 		
 		String command = ((IStrategoString) commandTerm).stringValue();
@@ -150,7 +152,7 @@
 			PrintStream err = io.getOutputStream(IOAgent.CONST_STDERR);
 			command = binaryPrefix + "/" + command + binaryPostfix;
 			// /bin/sh should exist even on NixOS
-			String[] commandArgs = { "/bin/sh", "-c", "chmod +x " + command };
+			String[] commandArgs = { "/bin/sh", "-c", "chmod +x \"" + command + "\"" };
 			int result = new NativeCallHelper().call(commandArgs, binaryPrefix, out, err);
 			return result == 0;
 		} catch (InterruptedException e) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-11-12 15:28:17 UTC (rev 20221)
@@ -21,10 +21,10 @@
 
 public class NewEditorWizardPage extends WizardPage {
 	
+	private Text inputProjectName;
+	
 	private Text inputLanguageName;
 	
-	private Text inputProjectName;
-	
 	private Text inputPackageName;
 	
 	private Text inputExtensions;
@@ -77,25 +77,25 @@
 		});
 		*/
 				
-		new Label(container, SWT.NULL).setText("&Language name:");
-		inputLanguageName = new Text(container, SWT.BORDER | SWT.SINGLE);
-		inputLanguageName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
-		inputLanguageName.addModifyListener(new ModifyListener() {
+		new Label(container, SWT.NULL).setText("&Project name:");
+		inputProjectName = new Text(container, SWT.BORDER | SWT.SINGLE);
+		inputProjectName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
+		inputProjectName.addModifyListener(new ModifyListener() {
 			public void modifyText(ModifyEvent e) {
 				if (!ignoreEvents) {
-					distributeLanguageName();
+					distributeProjectName();
 					onChange();
 				}
 			}
 		});
 				
-		new Label(container, SWT.NULL).setText("&Project name:");
-		inputProjectName = new Text(container, SWT.BORDER | SWT.SINGLE);
-		inputProjectName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
-		inputProjectName.addModifyListener(new ModifyListener() {
+		new Label(container, SWT.NULL).setText("&Language name:");
+		inputLanguageName = new Text(container, SWT.BORDER | SWT.SINGLE);
+		inputLanguageName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
+		inputLanguageName.addModifyListener(new ModifyListener() {
 			public void modifyText(ModifyEvent e) {
 				if (!ignoreEvents) {
-					distributeProjectName();
+					distributeLanguageName();
 					isInputProjectNameChanged = true;
 					onChange();
 				}
@@ -128,32 +128,32 @@
 
 		setControl(container);
 		setPageComplete(false);
-		inputLanguageName.setFocus();
+		inputProjectName.setFocus();
 	}
 
-	private void distributeLanguageName() {
-		if (!isInputProjectNameChanged || getInputProjectName().length() == 0
-				|| getInputProjectName().equals(getInputLanguageName())) {
+	private void distributeProjectName() {
+		if (!isInputProjectNameChanged || getInputLanguageName().length() == 0
+				|| getInputLanguageName().equals(toLanguageName(getInputProjectName()))) {
 			ignoreEvents = true;
-			inputProjectName.setText(getInputLanguageName());
+			inputLanguageName.setText(toLanguageName(getInputProjectName()));
 			isInputProjectNameChanged = false;
 			ignoreEvents = false;
-			distributeProjectName();
+			distributeLanguageName();
 		}
 		if (!isInputExtensionsChanged || getInputExtensions().length() == 0
-				|| getInputExtensions().equals(toExtension(getInputLanguageName()))) {
+				|| getInputExtensions().equals(toExtension(getInputProjectName()))) {
 			ignoreEvents = true;
-			inputExtensions.setText(toExtension(getInputLanguageName()));
+			inputExtensions.setText(toExtension(getInputProjectName()));
 			isInputExtensionsChanged = false;
 			ignoreEvents = false;
 		}
 	}
 
-	private void distributeProjectName() {
+	private void distributeLanguageName() {
 		if (!isInputPackageNameChanged || getInputPackageName().length() == 0
-				|| getInputPackageName().equals(toPackageName(getInputProjectName()))) {
+				|| getInputPackageName().equals(toPackageName(getInputLanguageName()))) {
 			ignoreEvents = true;
-			inputPackageName.setText(toPackageName(getInputProjectName()));
+			inputPackageName.setText(toPackageName(getInputLanguageName()));
 			isInputPackageNameChanged = false;
 			ignoreEvents = false;
 		}
@@ -162,75 +162,97 @@
 	/**
 	 * Ensures that both text fields are set.
 	 */
-	private void onChange() {		
-		if (getInputLanguageName().length() == 0) {
-			updateStatus("Language name must be specified");
-			return;
-		}
+	private void onChange() {
+		
 		if (getInputProjectName().length() == 0) {
-			updateStatus("Project name must be specified");
+			setErrorStatus("Project name must be specified");
 			return;
 		}
-		if (getInputLanguageName().replace('\\', '/').indexOf('/', 1) > -1
-				|| getInputLanguageName().indexOf(' ') > -1
-				|| getInputLanguageName().equals("DynamicRoot")
-				|| getInputLanguageName().equals("Common")) {
-			updateStatus("Language name must be valid");
+		if (getInputLanguageName().length() == 0) {
+			setErrorStatus("Language name must be specified");
 			return;
+		}	
+		
+		if (!isValidProjectName(getInputProjectName())) {
+			setErrorStatus("Project name must be valid");
+			return;
 		}
-		if (getInputProjectName().replace('\\', '/').indexOf('/', 1) > -1) {
-			updateStatus("Project name must be valid");
+		if (!toLanguageName(getInputLanguageName()).equals(getInputLanguageName())) {
+			setErrorStatus("Language name must be valid");
 			return;
 		}
 
 		if (getInputPackageName().length() == 0) {
-			updateStatus("Package name must be specified");
+			setErrorStatus("Package name must be specified");
 			return;
 		}
 		if (!getInputPackageName().toLowerCase().equals(toPackageName(getInputPackageName()))
 				|| getInputPackageName().indexOf("..") != -1) {
-			updateStatus("Package name must be valid");
+			setErrorStatus("Package name must be valid");
 			return;
 		}
 
 		if (getInputExtensions().length() == 0) {
-			updateStatus("File extension must be specified");
+			setErrorStatus("File extension must be specified");
 			return;
 		}
 		if (getInputExtensions().indexOf(".") != -1 || getInputExtensions().replace('\\', '/').indexOf("/") != -1
 				|| getInputExtensions().indexOf(":") > -1){
-			updateStatus("File extension must be valid");
+			setErrorStatus("File extension must be valid");
 			return;
 		}
 
 		IWorkspace workspace = ResourcesPlugin.getWorkspace();
-		if (workspace.getRoot().getProject(getInputProjectName()).exists()) {
-			updateStatus("A project with this name already exists");
+		if (workspace.getRoot().getProject(getInputLanguageName()).exists()) {
+			setErrorStatus("A project with this name already exists");
 			return;
 		}
 	
-		updateStatus(null);
+
+		if (getInputProjectName().indexOf(' ') != -1) {
+			setWarningStatus("Project names with spaces may not be supported depending on your configuration");
+		} else if (ResourcesPlugin.getWorkspace().getRoot().getRawLocation().toOSString().indexOf(' ') != -1) {
+			setWarningStatus("A workspace directory with spaces may not be supported depending on your configuration");
+		} else {
+			setErrorStatus(null);
+		}
 	}
-	
-	private static String toPackageName(String name) {
-		char[] input = name.toLowerCase().replace('-', '_').replace(' ', '_').toCharArray();
+
+	private static boolean isValidProjectName(String name) {
+		for (char c : name.toCharArray()) {
+			if (!(Character.isLetterOrDigit(c) || c == '_' || c == ' ' || c == '-' || c == '.'
+				|| c == '(' || c == ')' || c == '#' || c == '+' || c =='[' || c == ']' || c == '@'))
+				return false;
+		}
+		return true;
+	}
+
+	private static String toLanguageName(String name) {
+		// TODO: be more flexible in language names
+		char[] input = name.replace(' ', '-').toCharArray();
 		StringBuilder output = new StringBuilder();
 		int i = 0;
 		while (i < input.length) {
 			char c = input[i++];
-			if (Character.isLetter(c) || c == '_') {
+			if (Character.isLetter(c) || c == '-' || c == '_') {
 				output.append(c);
 				break;
 			}
 		}
 		while (i < input.length) {
 			char c = input[i++];
-			if (Character.isLetterOrDigit(c) || c == '_' || c == '.')
+			if (Character.isLetterOrDigit(c) || c == '-' || c == '_' || c == '.')
 				output.append(c);
 		}
+		if (output.length() > 0)
+			output.setCharAt(0, Character.toUpperCase(output.charAt(0))); // SDF wants a capital here
 		return output.toString();
 	}
 	
+	private static String toPackageName(String name) {
+		return toLanguageName(name).toLowerCase().replace('-', '_');
+	}
+	
 	private static String toExtension(String name) {
 		String input = name.toLowerCase().replace("-", "").replace(".", "").replace(" ", "").replace(":", "");
 		String prefix = input.substring(0, Math.min(input.length(), 3));
@@ -245,19 +267,23 @@
 		}
 	}
 
-	private void updateStatus(String message) {
+	private void setErrorStatus(String message) {
 		setErrorMessage(message);
 		setPageComplete(message == null);
 	}
-	
-	public String getInputLanguageName() {
-		return inputLanguageName.getText().trim();
+
+	private void setWarningStatus(String message) {
+		setErrorMessage(message);
 	}
 	
 	public String getInputProjectName() {
 		return inputProjectName.getText().trim();
 	}
 	
+	public String getInputLanguageName() {
+		return inputLanguageName.getText().trim();
+	}
+	
 	public String getInputPackageName() {
 		return inputPackageName.getText().trim();
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2009-11-12 15:28:17 UTC (rev 20221)
@@ -130,6 +130,10 @@
 		return getParseController().getProject();
 	}
 	
+	public final IStrategoAstNode getCurrentAst() {
+		return getParseController().getCurrentAst();
+	}
+	
 	/**
 	 * Gets the document model for this editor, which can be used to manipulate
 	 * the contents of the editor.

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-11-12 15:28:17 UTC (rev 20221)
@@ -24,6 +24,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+import org.strategoxt.imp.runtime.services.StrategoBuilderListener;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
 
 /**
@@ -84,6 +85,7 @@
 		for (AbstractService service : services.keySet())
 			service.reinitialize(newDescriptor);
 		attachedFiles = null;
+		StrategoBuilderListener.rescheduleAllListeners();
 	}
 	
 	// LOADING SERVICES

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-11-12 15:28:17 UTC (rev 20221)
@@ -26,7 +26,7 @@
  */
 public class DynamicParseController extends AbstractService<IParseController> implements IParseController {
 	
-	private static final int REINIT_PARSE_DELAY = 100;
+	public static final int REINIT_PARSE_DELAY = 100;
 	
 	private EditorState lastEditor;
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-12 15:28:17 UTC (rev 20221)
@@ -4,8 +4,6 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
-import java.util.Map;
-import java.util.WeakHashMap;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.runtime.CoreException;
@@ -25,17 +23,18 @@
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.RuntimeActivator;
+import org.strategoxt.imp.runtime.dynamicloading.TermReader;
 import org.strategoxt.imp.runtime.stratego.StrategoConsole;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
+import org.strategoxt.lang.Context;
+import org.strategoxt.stratego_aterm.pp_aterm_box_0_0;
+import org.strategoxt.stratego_gpp.box2text_string_0_1;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class StrategoBuilder implements IBuilder {
 	
-	private final Map<EditorState, StrategoBuilderListener> listeners =
-		new WeakHashMap<EditorState, StrategoBuilderListener>();
-	
 	private final StrategoObserver observer;
 
 	private final String caption;
@@ -91,27 +90,24 @@
 				return;
 			}
 	
-			// TODO: support "None()" result
-			if (!isTermTuple(resultTerm) || !isTermString(resultTerm.getSubterm(0))
-					|| !isTermString(resultTerm.getSubterm(0))) {
+			if (isTermAppl(resultTerm) && "None".equals(TermReader.cons(resultTerm))) {
+				return;
+			} else if (!isTermTuple(resultTerm) || !isTermString(termAt(resultTerm, 0))) {
 				Environment.logException("Illegal builder result (must be a filename/string tuple)");
 				openError(editor, "Illegal builder result (must be a filename/string tuple): " + resultTerm);
 			}
-			
+
 			IStrategoTerm filenameTerm = termAt(resultTerm, 0);
 			String filename = asJavaString(filenameTerm);
-			String result = asJavaString(termAt(resultTerm, 1));
+			String result = isTermString(termAt(resultTerm, 1))
+					? asJavaString(termAt(resultTerm, 1))
+					: ppATerm(termAt(resultTerm, 1));
 			IFile file = createFile(editor, filename, result);
 			// TODO: if not persistent, create IEditorInput from result String
 			if (openEditor) {
 				IEditorPart target = openEditor(file, !realTime);
-				if (realTime) {
-					StrategoBuilderListener listener = listeners.get(editor);
-					if (listener != null) listener.setEnabled(false);
-					listener = new StrategoBuilderListener(editor, target, file, getCaption(), node);
-					listeners.put(editor, listener);
-					editor.getEditor().addModelListener(listener);
-				}
+				if (realTime)
+					StrategoBuilderListener.addListener(editor, target, file, getCaption(), node);
 			}
 		} catch (CoreException e) {
 			Environment.logException("Builder failed", e);
@@ -132,6 +128,13 @@
 		}
 	}
 
+	private String ppATerm(IStrategoTerm term) {
+		Context context = observer.getRuntime().getCompiledContext();
+		term = pp_aterm_box_0_0.instance.invoke(context, term);
+		term = box2text_string_0_1.instance.invoke(context, term, Environment.getTermFactory().makeInt(120));
+		return asJavaString(term);
+	}
+
 	private void reportException(EditorState editor, Exception e) {
 		boolean isDynamic = editor.getDescriptor().isDynamicallyLoaded();
 		Environment.logException("Builder failed for " + (isDynamic ? "" : "non-") + "dynamically loaded editor", e);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2009-11-12 15:28:17 UTC (rev 20221)
@@ -1,10 +1,14 @@
 package org.strategoxt.imp.runtime.services;
 
 import java.lang.ref.WeakReference;
+import java.util.Map;
+import java.util.WeakHashMap;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.parser.IModelListener;
 import org.eclipse.imp.parser.IParseController;
 import org.eclipse.jface.dialogs.ErrorDialog;
@@ -12,6 +16,7 @@
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
 import org.strategoxt.imp.runtime.stratego.StrategoTermPath;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 
@@ -19,6 +24,12 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class StrategoBuilderListener implements IModelListener {
+
+	/**
+	 * Maps target editors to their builder listener.
+	 */
+	private static final Map<EditorState, StrategoBuilderListener> asyncListeners =
+		new WeakHashMap<EditorState, StrategoBuilderListener>();
 	
 	private final String builder;
 	
@@ -34,7 +45,7 @@
 	
 	private boolean enabled = true;
 	
-	public StrategoBuilderListener(EditorState editor, IEditorPart targetEditor, IFile targetFile,
+	private  StrategoBuilderListener(EditorState editor, IEditorPart targetEditor, IFile targetFile,
 			String builder, IStrategoAstNode selection) {
 		
 		this.editor = new WeakReference<EditorState>(editor);
@@ -44,6 +55,16 @@
 		this.lastChanged = targetFile.getLocalTimeStamp();
 		this.selection = selection;
 	}
+
+	public static void addListener(EditorState editor, IEditorPart target, IFile file, String builder, IStrategoAstNode node) {
+		synchronized (asyncListeners) {
+			StrategoBuilderListener listener = asyncListeners.get(editor);
+			if (listener != null) listener.setEnabled(false);
+			listener = new StrategoBuilderListener(editor, target, file, builder, node);
+			asyncListeners.put(editor, listener);
+			editor.getEditor().addModelListener(listener);
+		}
+	}
 	
 	public AnalysisRequired getAnalysisRequired() {
 		return AnalysisRequired.SYNTACTIC_ANALYSIS;
@@ -52,19 +73,30 @@
 	public void setEnabled(boolean enabled) {
 		this.enabled = enabled;
 	}
-
-	public void update(IParseController parseController, IProgressMonitor monitor) {
+	
+	public boolean isEnabled() {
 		EditorState editor = this.editor.get();
 		IEditorPart targetEditor = this.targetEditor.get();
 		
-		// FIXME: Don't update if the editor is closed
 		if (!enabled || editor == null || targetEditor == null || targetEditor.isDirty()
 				|| targetEditor.getTitleImage().isDisposed() // editor closed
 				|| targetFile.getLocalTimeStamp() > lastChanged) {
 			enabled = false;
 			selection = null;
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void update(IParseController parseController, IProgressMonitor monitor) {
+		update(monitor);
+	}
+
+	public void update(IProgressMonitor monitor) {
+		EditorState editor = this.editor.get(); // (must appear first; garbage might be collected)
+		if (!isEnabled())
 			return;
-		}
 		
 		try {
 			IBuilderMap builders = editor.getDescriptor().createService(IBuilderMap.class);
@@ -89,6 +121,36 @@
 	private IStrategoAstNode findNewSelection(EditorState editor) {
 		if (selection == null) return null;
 		IStrategoAstNode newAst = editor.getParseController().getCurrentAst();
+		if (newAst == null) return null;
 		return StrategoTermPath.findCorrespondingSubtree(newAst, selection);
 	}
+
+	public static void rescheduleAllListeners() {
+		boolean required = false;
+		synchronized (asyncListeners) {
+			for (StrategoBuilderListener listener : asyncListeners.values()) {
+				if (listener.isEnabled()) {
+					required = true;
+					break;
+				}
+			}
+		}
+		if (required) {
+			new Job("Rebuild derived files") {
+				@Override
+				protected IStatus run(IProgressMonitor monitor) {
+					synchronized (asyncListeners) {
+						for (StrategoBuilderListener listener : asyncListeners.values()) {
+							try {
+								listener.update(monitor);
+							} catch (Exception e) {
+								Environment.logException("Could not update builder", e);
+							}
+						}
+					}
+					return Status.OK_STATUS;
+				}
+			}.schedule(DynamicParseController.REINIT_PARSE_DELAY * 3);
+		}
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-12 15:28:17 UTC (rev 20221)
@@ -429,5 +429,9 @@
 			node = node.getParent();
 		return node;
 	}
+	
+	public HybridInterpreter getRuntime() {
+		return runtime;
+	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoConsole.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoConsole.java	2009-11-12 12:07:19 UTC (rev 20220)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoConsole.java	2009-11-12 15:28:17 UTC (rev 20221)
@@ -37,25 +37,25 @@
 
 	public static PrintStream getErrorStream() {
 		MessageConsole console = getConsole();
-		if (console == lastConsole) {
+		if (console == lastConsole && lastConsoleErrorStream != null) {
 			return lastConsoleErrorStream;
 		} else {
-			lastConsole = console;
 			IOConsoleOutputStream stream = console.newOutputStream();
 			// A red color doesn't seem to make sense for Stratego
 			// stream.setColor(DebugUIPlugin.getPreferenceColor(IDebugPreferenceConstants.CONSOLE_SYS_ERR_COLOR));
 			lastConsoleErrorStream = new PrintStream(stream);
+			lastConsole = console;
 			return lastConsoleErrorStream;
 		}
 	}
 
 	public static PrintStream getOutputStream() {
 		MessageConsole console = getConsole();
-		if (console == lastConsole) {
+		if (console == lastConsole && lastConsoleOutputStream != null) {
 			return lastConsoleOutputStream;
 		} else {
+			lastConsoleOutputStream = new PrintStream(console.newOutputStream());
 			lastConsole = console;
-			lastConsoleOutputStream = new PrintStream(console.newOutputStream());
 			return lastConsoleOutputStream;
 		}
 	}



From L.C.L.Kats at tudelft.nl  Thu Nov 12 16:59:05 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 12 Nov 2009 15:59:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20222 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans
	strc-java/trunk/java/tools/org/strategoxt/tools/lib
Message-ID: <200911121559.nACFx5XY014994@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-12 15:59:05 +0000 (Thu, 12 Nov 2009)
New Revision: 20222

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20222&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/core-rtg2sig.str
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str

Log:
Added "Show PP rules for selection" to the SDF editor. Made a start with "show RTG."

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch	2009-11-12 15:28:17 UTC (rev 20221)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch	2009-11-12 15:59:05 UTC (rev 20222)
@@ -2,7 +2,7 @@
 <launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
 <stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
 <booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/SDF/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/SDF/aux&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/SDF/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
+<stringAttribute key="org.eclipse.debug.core.ATTR_REFRESH_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.editors.sdf/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
 <listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
 <listEntry value="/org.strategoxt.imp.editors.sdf/build.xml"/>
 </listAttribute>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv	2009-11-12 15:28:17 UTC (rev 20221)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv	2009-11-12 15:59:05 UTC (rev 20222)
@@ -3,11 +3,12 @@
 imports
   SDF-Builders.generated
 
-analysis
+builders
   
+  provider : include/sdf.ctree
 
+  builder : "Show pretty printer rules (for selection)" =
+    generate-pp-rules (realtime) (openeditor)
 
-
-// This file can be used for custom analysis rules.
-
-// See the imported file for a brief introduction and examples.
\ No newline at end of file
+  builder : "Show abstract syntax signature (for selection)" =
+    generate-rtg (realtime) (openeditor)
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2009-11-12 15:59:05 UTC (rev 20222)
@@ -0,0 +1,53 @@
+module sdf
+
+imports
+  libstratego-lib
+  libstratego-sdf
+  libstrc
+
+signature constructors
+
+  context-free-syntax : Term -> Term
+
+rules
+
+  generate-pp-rules:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    where
+      filename  := <guarantee-extension(|"pp")> path;
+      selected' := <add-context; sdf-desugar> (selected, ast, project-path);
+      result    := <ppgenerate; pp-pp-table> selected'
+    <+
+      fatal-err(|"Could not generate pretty printer rules for this selection.\n Only productions with {cons()} attributes are supported.")
+  
+  generate-rtg:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    where
+      filename  := <guarantee-extension(|"pp")> path;
+      selected' := <add-context; sdf-desugar> (selected, ast, project-path);
+      result    := <core-rtg2sig; pp-stratego-string> selected'
+    <+
+      fatal-err(|"Could not generate abstract syntax signatures for this selection.\n Only productions with {cons()} attributes are supported.")
+  
+  add-context =
+    if not(oncetd(?context-free-syntax(_))) then
+      if is-list then
+        !context-free-syntax(<id>)
+      else
+        !context-free-syntax([<id>])
+      end
+    end
+
+rules // External tools not included in the standard libraries
+
+  ppgenerate =
+    <call> ("org.strategoxt.tools.ppgenerate", [<id>])
+
+  core-rtg2sig =
+    <call> ("org.strategoxt.tools.core-rtg2sig", [<id>])
+
+  pp-pp-table =
+    <call> ("org.strategoxt.tools.pp-pp-table", [<id>])
+  
+  sdf-desugar =
+    <call> ("org.strategoxt.tools.sdf-desugar", [<id>])

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/core-rtg2sig.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/core-rtg2sig.str	2009-11-12 15:28:17 UTC (rev 20221)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/core-rtg2sig.str	2009-11-12 15:59:05 UTC (rev 20222)
@@ -38,6 +38,10 @@
             Conc : List(a) * List(a) -> List(a)
       ]|
 
+  core-rtg2sig =
+    ?[_, modulename, sdf]
+  ; <core-rtg2sig(|modulename)> sdf
+
 /**
  * @todo  Create at least some constructors for labelled content models
  * @todo  Anonymous term applications

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str	2009-11-12 15:28:17 UTC (rev 20221)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str	2009-11-12 15:59:05 UTC (rev 20222)
@@ -12,6 +12,9 @@
     )
   
   pp-pp-table =
-    ast2abox(|[<import-term(pp-table-pretty.pp.af)>])
+    if [is-string, is-list => l] then // HACK: allow calling with <call>
+      ![l]
+    end
+  ; ast2abox(|[<import-term(pp-table-pretty.pp.af)>])
   ; box2text-string(|80)
 



From L.C.L.Kats at tudelft.nl  Thu Nov 12 16:59:21 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 12 Nov 2009 15:59:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20223 - LennartKats -
	strategoxt/trunk/strc-core/tools
Message-ID: <200911121559.nACFxL2O014997@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-12 15:59:21 +0000 (Thu, 12 Nov 2009)
New Revision: 20223

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20223&view=rev

Modified:
   strategoxt/trunk/strc-core/tools/str

Log:


Changes:

Modified: strategoxt/trunk/strc-core/tools/str
===================================================================
--- strategoxt/trunk/strc-core/tools/str	2009-11-12 15:59:05 UTC (rev 20222)
+++ strategoxt/trunk/strc-core/tools/str	2009-11-12 15:59:21 UTC (rev 20223)
@@ -107,13 +107,14 @@
 echo "$PROGRAM" |
   perl -pe 's/\blibstratego-lib\b//; s/module\s+[\w\-'']+\b/$& imports libstratego-lib strategies/' > $TEMPFILE
 
-(strc $FOPTION $LOPTION $COPTION $OOPTION $IOPTION $LAOPTION --format-check 0 -Xcc -O0 -la stratego-lib -la stratego-xtc -la strc -la stratego-sglr -la stratego-rtg -I . -i $TEMPFILE -o $TEMPFILE.out --statistics 0; RET=$?) 2>&1 | grep -vE '^ *[ig]cc|warning ] Mismatch between basename|info ] Compiling|libtool: '
+(strc $FOPTION $LOPTION $COPTION $OOPTION $IOPTION $LAOPTION --format-check 0 -Xcc -O0 -la stratego-lib -la stratego-xtc -la strc -la stratego-sglr -la stratego-rtg -I . -i $TEMPFILE -o $TEMPFILE.out --statistics 0 || exit 1) 2>&1 | grep -vE '^ *[ig]cc|warning ] Mismatch between basename|info ] Compiling|libtool: '
+RET=$?
 
 rm $TEMPFILE
 
 if [ -e $TEMPFILE.out ]; then
   if [ $FOPTION ]; then
-    pp-stratego -a -i $TEMPFILE.out
+    (pp-stratego -a -i $TEMPFILE.out || pp-aterm -i $TEMPFILE.out)
   elif [ $GOPTION ]; then
     echo 'run
           backtrace' > $TEMPFILE.gdb



From L.C.L.Kats at tudelft.nl  Thu Nov 12 18:58:23 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 12 Nov 2009 17:58:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20224 - LennartKats -
	in spoofax-imp/trunk: .
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.metatooling/META-INF
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego
	org.strategoxt.imp.nativebundle
	org.strategoxt.imp.nativebundle/.settings
	org.strategoxt.imp.nativebundle/META-INF
	org.strategoxt.imp.nativebundle/native
	org.strategoxt.imp.nativebundle/native/cygwin
	org.strategoxt.imp.nativebundle/native/linux
	org.strategoxt.imp.nativebundle/native/macosx
	org.strategoxt.imp.nativebundle/src
	org.strategoxt.imp.nativebundle/src/org
	org.strategoxt.imp.nativebundle/src/org/strategoxt
	org.strategoxt.imp.nativebundle/src/org/strategoxt/imp
	org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle
Message-ID: <200911121758.nACHwNMm016715@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-12 17:58:23 +0000 (Thu, 12 Nov 2009)
New Revision: 20224

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20224&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.project
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.settings/
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.settings/org.eclipse.jdt.core.prefs
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/cygwin/
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/cygwin/implodePT.exe
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/cygwin/sdf2table.exe
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/implodePT
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/sdf2table
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/macosx/
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/macosx/implodePT
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/macosx/sdf2table
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/SDFBundleCommand.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java

Log:
Added a new "native tool bundle" plugin, using Rob's binaries. Seems to work on Linux.


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-12 15:59:21 UTC (rev 20223)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-12 17:58:23 UTC (rev 20224)
@@ -49,9 +49,6 @@
         <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
             <isset property="eclipse.spoofaximp.nativeprefix"/>
         </condition>
-        <condition property="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/" else="">
-            <isset property="eclipse.spoofaximp.nativeprefix"/>
-        </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="--library -I ${trans} -I ${build} -I ${lib}
@@ -101,8 +98,7 @@
         </target>
     
         <target name="sdf2table" depends="make-permissive">
-            <apply executable="${build.strategoxt.sdf.bin}sdf2table" dest="${include}" failonerror="true">
-                <env key="LD_LIBRARY_PATH" path="${build.strategoxt.sdf}/lib"/>
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>
                 <arg value="-o"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	2009-11-12 15:59:21 UTC (rev 20223)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	2009-11-12 17:58:23 UTC (rev 20224)
@@ -26,9 +26,10 @@
  org.strategoxt.strj,
  org.strategoxt.imp.editors.editorservice,
  org.strategoxt.imp.editors.sdf,
+ org.strategoxt.imp.editors.stratego,
  org.strategoxt.imp.editors.aterm,
  org.eclipse.ant.core,
- sdf_eclipse_installer;bundle-version="1.0.10"
+ org.strategoxt.imp.nativebundle
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-Activator: org.strategoxt.imp.metatooling.MetatoolingActivator
 Bundle-ActivationPolicy: lazy

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java	2009-11-12 15:59:21 UTC (rev 20223)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java	2009-11-12 17:58:23 UTC (rev 20224)
@@ -3,9 +3,8 @@
 import java.io.IOException;
 
 import org.eclipse.ant.core.IAntPropertyValueProvider;
-import org.strategoxt.imp.metatooling.stratego.SDFBundleCommand;
+import org.strategoxt.imp.nativebundle.SDFBundleCommand;
 import org.strategoxt.imp.runtime.Environment;
-import org.syntax_definition.sdf.Activator;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -15,8 +14,7 @@
 	public String getAntPropertyValue(String antPropertyName) {
 		try {
 			// Ensure proper chmod first
-			SDFBundleCommand.getInstance().init();
-			return Activator.getInstance().getBinaryPrefix().getParentFile().getAbsolutePath();
+			return SDFBundleCommand.getInstance().getBinaryPath().getAbsolutePath();
 		} catch (IOException e) {
 			Environment.logException("Could not determine the prefix path for the native tool bundle", e);
 			return ".";

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java	2009-11-12 15:59:21 UTC (rev 20223)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java	2009-11-12 17:58:23 UTC (rev 20224)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.metatooling.stratego;
 
+import org.strategoxt.imp.nativebundle.SDFBundleCommand;
 import org.strategoxt.stratego_xtc.xtc_command_1_0;
 
 /**
@@ -7,6 +8,7 @@
  */
 public class MetaIMPLibrary {
 	public static void init() {
+		// It's a small library, okay?
 		xtc_command_1_0.instance = new SDFBundleCommand();
 	}
 }

Deleted: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/SDFBundleCommand.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/SDFBundleCommand.java	2009-11-12 15:59:21 UTC (rev 20223)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/SDFBundleCommand.java	2009-11-12 17:58:23 UTC (rev 20224)
@@ -1,166 +0,0 @@
-package org.strategoxt.imp.metatooling.stratego;
-
-import static org.spoofax.interpreter.terms.IStrategoTerm.*;
-
-import java.io.File;
-import java.io.IOException;
-import java.io.PrintStream;
-import java.util.Arrays;
-
-import org.eclipse.core.runtime.Platform;
-import org.spoofax.interpreter.library.IOAgent;
-import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoString;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.runtime.Debug;
-import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.StrategoException;
-import org.strategoxt.lang.compat.NativeCallHelper;
-import org.strategoxt.stratego_xtc.xtc_command_1_0;
-import org.syntax_definition.sdf.Activator;
-
-/**
- * Overrides the xtc-command strategy to use sdf2table
- * from the SDF plugin.
- * 
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class SDFBundleCommand extends xtc_command_1_0 {
-	
-	private static final boolean ENABLED = false;
-	
-	private final xtc_command_1_0 proceed = xtc_command_1_0.instance;
-
-	private File binaryPrefix;
-	
-	private String binaryPostfix;
-	
-	public void init() throws IOException {
-		if (!ENABLED || binaryPostfix != null) return;
-		Activator sdfBundle = Activator.getInstance();
-		binaryPrefix = sdfBundle.getBinaryPrefix();
-		binaryPostfix = sdfBundle.getBinaryPostfix();
-		String os = Platform.getOS();
-		if (os.equals(Platform.OS_LINUX) || os.equals(Platform.OS_MACOSX)) {
-			// Some of these are used from Ant and should always be executable
-			EditorIOAgent agent = new EditorIOAgent();
-			boolean success = makeExecutable(agent, "sdf2table") && makeExecutable(agent, "sglr") && makeExecutable(agent, "implodePT");
-			if (!success)
-				Environment.logException("chmod of native tool bundle executables failed:\n" + agent.getLog());
-		}
-		Debug.log("Initialized the native tool bundle in " + binaryPrefix);
-	}
-	
-	public static SDFBundleCommand getInstance() {
-		return (SDFBundleCommand) instance;
-	}
-	
-	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm args,
-			org.strategoxt.lang.Strategy commandStrategy) {
-		
-		try {
-			init();
-		} catch (IOException e) {
-			Environment.logException("Could not determine the prefix path for the native tool bundle (" 
-					+ Platform.getOS() + "/" + Platform.getOSArch()
-					+ ")", e);
-			return proceed.invoke(context, args, commandStrategy);
-		} catch (RuntimeException e) {
-			Environment.logException("Failed to initialize the native tool bundle (" + Platform.getOS()
-					+ "/" + Platform.getOSArch() + ")", e);
-			return proceed.invoke(context, args, commandStrategy);
-		}
-		
-		IStrategoTerm commandTerm = commandStrategy.invoke(context, args);
-		if (!ENABLED || commandTerm.getTermType() != STRING)
-			return proceed.invoke(context, args, commandStrategy);
-		
-		String command = ((IStrategoString) commandTerm).stringValue();
-		if (!new File(binaryPrefix + "/" + command + binaryPostfix).exists()) {
-			if (command.equals("sdf2table") || command.equals("implodePT")) {
-				Environment.logException("Could not find the native tool bundle command "
-						+ command + " in " + binaryPrefix);
-			}
-			return proceed.invoke(context, args, commandStrategy);
-		}
-		
-		if (args.getTermType() != LIST)
-			return null;
-		
-		String os = Platform.getOS();
-		if (os.equals(Platform.OS_LINUX) || os.equals(Platform.OS_MACOSX)) {
-			if (!makeExecutable(context.getIOAgent(), command)) {
-				EditorIOAgent io = (EditorIOAgent) context.getIOAgent();
-				Environment.logException("chmod of " + binaryPrefix + command + binaryPostfix + " failed, log:\n" + io.getLog());
-				return proceed.invoke(context, args, commandStrategy); // (already logged)
-			}
-		}
-		
-		return invoke(context, command, ((IStrategoList) args).getAllSubterms())
-			? args
-			: null;
-	}
-
-	private boolean invoke(Context context, String command, IStrategoTerm[] argList) throws StrategoException {
-		try {
- 			String[] commandArgs = toCommandArgs(command, argList);
-			if (commandArgs == null) return false;
-			String path = binaryPrefix.getAbsolutePath() + System.getProperty("path.separator") + System.getenv("PATH");
-			String[] environment = { "PATH=" + path, 
-					                 "LD_LIBRARY_PATH=" + binaryPrefix.getParentFile().getAbsolutePath() + "/lib" };
-			IOAgent io = context.getIOAgent();
-			PrintStream out = io.getOutputStream(IOAgent.CONST_STDOUT);
-			PrintStream err = io.getOutputStream(IOAgent.CONST_STDERR);
-
-			Debug.log("Invoking " + binaryPrefix + "/" + command + binaryPostfix + " " + Arrays.toString(argList));
-			int result = new NativeCallHelper().call(commandArgs, environment, new File(io.getWorkingDir()), out, err);
-			if (result != 0) {
-				Environment.logException("Native tool " + command
-						+ " exited with error code " + result
-						+ "\nCommand:\n  " + Arrays.toString(commandArgs)
-						+ "\nWorking dir:\n  " + io.getWorkingDir()
-						+ "\nEnvironment:\n  " + Arrays.toString(environment));
-			}
-			return result == 0;
-		} catch (IOException e) {
-			return false;
-		} catch (InterruptedException e) {
-			throw new StrategoException("Could not call " + command, e);
-		}
-	}
-
-	private String[] toCommandArgs(String command, IStrategoTerm[] argList) {
-		StringBuilder allArgs = new StringBuilder();
-		String[] commandArgs = new String[argList.length + 1];
-		int i = 1;
-		for (IStrategoTerm arg : argList) {
-			if (arg.getTermType() != STRING) return null;
-			allArgs.append(' ');
-			allArgs.append(((IStrategoString) arg).stringValue());
-			commandArgs[i++] = ((IStrategoString) arg).stringValue();
-		}
-		commandArgs[0] = binaryPrefix + "/" + command + binaryPostfix;
-		return commandArgs;
-	}
-	
-	private boolean makeExecutable(IOAgent io, String command) {
-		try {
-			PrintStream out = io.getOutputStream(IOAgent.CONST_STDOUT);
-			PrintStream err = io.getOutputStream(IOAgent.CONST_STDERR);
-			command = binaryPrefix + "/" + command + binaryPostfix;
-			// /bin/sh should exist even on NixOS
-			String[] commandArgs = { "/bin/sh", "-c", "chmod +x \"" + command + "\"" };
-			int result = new NativeCallHelper().call(commandArgs, binaryPrefix, out, err);
-			return result == 0;
-		} catch (InterruptedException e) {
-			Environment.logException("chmod failed: /bin/sh -c \"chmod +x " + command + "\"", e);
-			return false;
-		} catch (IOException e) {
-			Environment.logException("chmod failed: /bin/sh -c \"chmod +x " + command + "\"", e);
-			return false;
-		}
-	}
-}

Added: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.classpath
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.classpath	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.classpath	2009-11-12 17:58:23 UTC (rev 20224)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.project
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.project	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.project	2009-11-12 17:58:23 UTC (rev 20224)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.strategoxt.imp.nativebundle</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Copied: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.settings/org.eclipse.jdt.core.prefs (from rev 20207, spoofax-imp/trunk/org.strategoxt.imp.runtime/.settings/org.eclipse.jdt.core.prefs)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.settings/org.eclipse.jdt.core.prefs	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.settings/org.eclipse.jdt.core.prefs	2009-11-12 17:58:23 UTC (rev 20224)
@@ -0,0 +1,326 @@
+#Thu Nov 05 11:02:03 CET 2009
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.deprecation=warning
+org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
+org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
+org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
+org.eclipse.jdt.core.compiler.problem.emptyStatement=ignore
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=warning
+org.eclipse.jdt.core.compiler.problem.fatalOptionalError=enabled
+org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
+org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
+org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
+org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
+org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
+org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
+org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
+org.eclipse.jdt.core.compiler.problem.nullReference=error
+org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
+org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.compiler.problem.rawTypeReference=ignore
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
+org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
+org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
+org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
+org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=warning
+org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryElse=ignore
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
+org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
+org.eclipse.jdt.core.compiler.problem.unusedImport=warning
+org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
+org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
+org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
+org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
+org.eclipse.jdt.core.compiler.source=1.5
+org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_assignment=0
+org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
+org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=80
+org.eclipse.jdt.core.formatter.alignment_for_enum_constants=0
+org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
+org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=16
+org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
+org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_after_package=1
+org.eclipse.jdt.core.formatter.blank_lines_before_field=1
+org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=0
+org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
+org.eclipse.jdt.core.formatter.blank_lines_before_method=1
+org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=1
+org.eclipse.jdt.core.formatter.blank_lines_before_package=0
+org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
+org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
+org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
+org.eclipse.jdt.core.formatter.comment.format_block_comments=true
+org.eclipse.jdt.core.formatter.comment.format_header=false
+org.eclipse.jdt.core.formatter.comment.format_html=true
+org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
+org.eclipse.jdt.core.formatter.comment.format_line_comments=true
+org.eclipse.jdt.core.formatter.comment.format_source_code=true
+org.eclipse.jdt.core.formatter.comment.indent_parameter_description=true
+org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
+org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
+org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=insert
+org.eclipse.jdt.core.formatter.comment.line_length=80
+org.eclipse.jdt.core.formatter.compact_else_if=true
+org.eclipse.jdt.core.formatter.continuation_indentation=2
+org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
+org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
+org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_empty_lines=false
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
+org.eclipse.jdt.core.formatter.indentation.size=4
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_member=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
+org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.lineSplit=100
+org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
+org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=1
+org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
+org.eclipse.jdt.core.formatter.tabulation.char=tab
+org.eclipse.jdt.core.formatter.tabulation.size=4
+org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
+org.eclipse.jdt.core.formatter.wrap_before_binary_operator=true


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/.settings/org.eclipse.jdt.core.prefs
___________________________________________________________________
Added: svn:mergeinfo
   + 

Added: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	2009-11-12 17:58:23 UTC (rev 20224)
@@ -0,0 +1,14 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: Nativebundle Plug-in
+Bundle-SymbolicName: org.strategoxt.imp.nativebundle
+Bundle-Version: 0.1.1
+Bundle-Activator: org.strategoxt.imp.nativebundle.Activator
+Bundle-ActivationPolicy: lazy
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.spoofax.aterm,
+ org.strategoxt.strj,
+ org.eclipse.core.runtime,
+ org.strategoxt.imp.runtime
+Export-Package: org.strategoxt.imp.nativebundle

Added: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties	2009-11-12 17:58:23 UTC (rev 20224)
@@ -0,0 +1,4 @@
+source.. = src/
+output.. = bin/
+bin.includes = META-INF/,\
+               .

Added: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/cygwin/implodePT.exe
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/cygwin/implodePT.exe
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + application/octet-stream

Added: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/cygwin/sdf2table.exe
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/cygwin/sdf2table.exe
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + application/octet-stream

Added: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/implodePT
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/implodePT
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + application/octet-stream

Added: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/sdf2table
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/sdf2table
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + application/octet-stream

Added: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/macosx/implodePT
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/macosx/implodePT
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + application/octet-stream

Added: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/macosx/sdf2table
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/macosx/sdf2table
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + application/octet-stream

Added: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/Activator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/Activator.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/Activator.java	2009-11-12 17:58:23 UTC (rev 20224)
@@ -0,0 +1,29 @@
+package org.strategoxt.imp.nativebundle;
+
+import org.osgi.framework.BundleActivator;
+import org.osgi.framework.BundleContext;
+
+public class Activator implements BundleActivator {
+	
+	private static Activator instance;
+	
+	private BundleContext context;
+
+	public void start(BundleContext context) throws Exception {
+		instance = this;
+		this.context = context;
+	}
+
+	public void stop(BundleContext context) throws Exception {
+		// Nothing here
+	}
+	
+	public BundleContext getContext() {
+		return context;
+	}
+	
+	public static Activator getInstance() {
+		return instance;
+	}
+
+}

Copied: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java (from rev 20221, spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/SDFBundleCommand.java)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	2009-11-12 17:58:23 UTC (rev 20224)
@@ -0,0 +1,192 @@
+package org.strategoxt.imp.nativebundle;
+
+import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.PrintStream;
+import java.net.URL;
+import java.util.Arrays;
+
+import org.eclipse.core.runtime.FileLocator;
+import org.eclipse.core.runtime.Platform;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.Debug;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.StrategoException;
+import org.strategoxt.lang.compat.NativeCallHelper;
+import org.strategoxt.stratego_xtc.xtc_command_1_0;
+
+/**
+ * Overrides the xtc-command strategy to use sdf2table
+ * from the SDF plugin.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SDFBundleCommand extends xtc_command_1_0 {
+	
+	private static final String NATIVE_PATH = "native/";
+	
+	private static final boolean ENABLED = true;
+	
+	private final xtc_command_1_0 proceed = xtc_command_1_0.instance;
+	
+	private File binaryPath;
+	
+	private String binaryExtension;
+	
+	public void init() throws IOException {
+		binaryPath = getBinaryPath();
+		binaryExtension = getBinaryExtension();
+		String os = Platform.getOS();
+		if (os.equals(Platform.OS_LINUX) || os.equals(Platform.OS_MACOSX)) {
+			// Some of these are used from Ant and should always be executable
+			EditorIOAgent agent = new EditorIOAgent();
+			boolean success = makeExecutable(agent, "sdf2table") && makeExecutable(agent, "sglr") && makeExecutable(agent, "implodePT");
+			if (!success)
+				Environment.logException("chmod of native tool bundle executables failed:\n" + agent.getLog());
+		}
+		Debug.log("Initialized the native tool bundle in " + getBinaryPath());
+	}
+	
+	public File getBinaryPath() throws IOException, UnsupportedOperationException {
+		String os = Platform.getOS();
+		String subdir;
+		if (os.equals(Platform.OS_LINUX)) {
+			subdir = "linux";
+		} else if (os.equals(Platform.OS_WIN32)){
+			subdir = "cygwin";
+		} else if (os.equals(Platform.OS_MACOSX)) {
+			subdir = "macosx";
+		} else {
+			throw new UnsupportedOperationException("Platform is not supported"); // TODO: print platform
+		}
+		
+		URL url = Activator.getInstance().getContext().getBundle().getResource(NATIVE_PATH + subdir);
+		File result = new File(FileLocator.toFileURL(url).getPath());
+		if (!result.exists())
+			throw new FileNotFoundException(result.getAbsolutePath());
+		return result;
+	}
+	
+	public String getBinaryExtension() {
+		return Platform.getOS().equals(Platform.OS_WIN32) ? ".exe" : "";
+	}
+	
+	public static SDFBundleCommand getInstance() {
+		return (SDFBundleCommand) instance;
+	}
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm args,
+			org.strategoxt.lang.Strategy commandStrategy) {
+		
+		try {
+			init();
+		} catch (IOException e) {
+			Environment.logException("Could not determine the prefix path for the native tool bundle (" 
+					+ Platform.getOS() + "/" + Platform.getOSArch()
+					+ ")", e);
+			return proceed.invoke(context, args, commandStrategy);
+		} catch (RuntimeException e) {
+			Environment.logException("Failed to initialize the native tool bundle (" + Platform.getOS()
+					+ "/" + Platform.getOSArch() + ")", e);
+			return proceed.invoke(context, args, commandStrategy);
+		}
+		
+		IStrategoTerm commandTerm = commandStrategy.invoke(context, args);
+		if (!ENABLED || commandTerm.getTermType() != STRING)
+			return proceed.invoke(context, args, commandStrategy);
+		
+		String command = ((IStrategoString) commandTerm).stringValue();
+		if (!new File(binaryPath + "/" + command + binaryExtension).exists()) {
+			if (command.equals("sdf2table") || command.equals("implodePT")) {
+				Environment.logException("Could not find the native tool bundle command "
+						+ command + " in " + binaryPath);
+			}
+			return proceed.invoke(context, args, commandStrategy);
+		}
+		
+		if (args.getTermType() != LIST)
+			return null;
+		
+		String os = Platform.getOS();
+		if (os.equals(Platform.OS_LINUX) || os.equals(Platform.OS_MACOSX)) {
+			if (!makeExecutable(context.getIOAgent(), command)) {
+				EditorIOAgent io = (EditorIOAgent) context.getIOAgent();
+				Environment.logException("chmod of " + binaryPath + command + binaryExtension + " failed, log:\n" + io.getLog());
+				return proceed.invoke(context, args, commandStrategy); // (already logged)
+			}
+		}
+		
+		return invoke(context, command, ((IStrategoList) args).getAllSubterms())
+			? args
+			: null;
+	}
+
+	private boolean invoke(Context context, String command, IStrategoTerm[] argList) throws StrategoException {
+		try {
+ 			String[] commandArgs = toCommandArgs(command, argList);
+			if (commandArgs == null) return false;
+			String path = binaryPath.getAbsolutePath() + System.getProperty("path.separator") + System.getenv("PATH");
+			String[] environment = { "PATH=" + path, 
+					                 "LD_LIBRARY_PATH=" + binaryPath.getParentFile().getAbsolutePath() + "/lib" };
+			IOAgent io = context.getIOAgent();
+			PrintStream out = io.getOutputStream(IOAgent.CONST_STDOUT);
+			PrintStream err = io.getOutputStream(IOAgent.CONST_STDERR);
+
+			Debug.log("Invoking " + binaryPath + "/" + command + binaryExtension + " " + Arrays.toString(argList));
+			int result = new NativeCallHelper().call(commandArgs, environment, new File(io.getWorkingDir()), out, err);
+			if (result != 0) {
+				Environment.logException("Native tool " + command
+						+ " exited with error code " + result
+						+ "\nCommand:\n  " + Arrays.toString(commandArgs)
+						+ "\nWorking dir:\n  " + io.getWorkingDir()
+						+ "\nEnvironment:\n  " + Arrays.toString(environment));
+			}
+			return result == 0;
+		} catch (IOException e) {
+			return false;
+		} catch (InterruptedException e) {
+			throw new StrategoException("Could not call " + command, e);
+		}
+	}
+
+	private String[] toCommandArgs(String command, IStrategoTerm[] argList) {
+		StringBuilder allArgs = new StringBuilder();
+		String[] commandArgs = new String[argList.length + 1];
+		int i = 1;
+		for (IStrategoTerm arg : argList) {
+			if (arg.getTermType() != STRING) return null;
+			allArgs.append(' ');
+			allArgs.append(((IStrategoString) arg).stringValue());
+			commandArgs[i++] = ((IStrategoString) arg).stringValue();
+		}
+		commandArgs[0] = binaryPath + "/" + command + binaryExtension;
+		return commandArgs;
+	}
+	
+	private boolean makeExecutable(IOAgent io, String command) {
+		try {
+			PrintStream out = io.getOutputStream(IOAgent.CONST_STDOUT);
+			PrintStream err = io.getOutputStream(IOAgent.CONST_STDERR);
+			command = binaryPath + "/" + command + binaryExtension;
+			// /bin/sh should exist even on NixOS
+			String[] commandArgs = { "/bin/sh", "-c", "chmod +x \"" + command + "\"" };
+			int result = new NativeCallHelper().call(commandArgs, binaryPath, out, err);
+			return result == 0;
+		} catch (InterruptedException e) {
+			Environment.logException("chmod failed: /bin/sh -c \"chmod +x " + command + "\"", e);
+			return false;
+		} catch (IOException e) {
+			Environment.logException("chmod failed: /bin/sh -c \"chmod +x " + command + "\"", e);
+			return false;
+		}
+	}
+}


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
___________________________________________________________________
Added: svn:mergeinfo
   + 



From L.C.L.Kats at tudelft.nl  Thu Nov 12 19:00:10 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 12 Nov 2009 18:00:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20225 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.nativebundle/META-INF
Message-ID: <200911121800.nACI0AGQ016743@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-12 18:00:10 +0000 (Thu, 12 Nov 2009)
New Revision: 20225

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20225&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF

Log:
Added nativebundle plugin to feature.xml.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-12 17:58:23 UTC (rev 20224)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-12 18:00:10 UTC (rev 20225)
@@ -254,4 +254,10 @@
          version="0.1.1.qualifier"
          unpack="false"/>
 
+   <plugin
+         id="org.strategoxt.imp.nativebundle"
+         download-size="0"
+         install-size="0"
+         version="0.1.1.qualifier"/>
+
 </feature>

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	2009-11-12 17:58:23 UTC (rev 20224)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	2009-11-12 18:00:10 UTC (rev 20225)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: Nativebundle Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.nativebundle
-Bundle-Version: 0.1.1
+Bundle-Version: 0.1.1.qualifier
 Bundle-Activator: org.strategoxt.imp.nativebundle.Activator
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5



From L.C.L.Kats at tudelft.nl  Thu Nov 12 20:01:41 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 12 Nov 2009 19:01:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20226 - LennartKats -
	in strategoxt/trunk: stratego-front/pp stratego-front/syn
	stratego-libraries/lib/spec/term
	stratego-libraries/sglr/lib/stratego/asfix
	stratego-libraries/sglr/lib/stratego/asfix/implode
	strc-core/lib/stratego/strc/front
	strc-core/lib/stratego/strc/pp strc-core/tests/test1
Message-ID: <200911121901.nACJ1fgb017608@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-12 19:01:40 +0000 (Thu, 12 Nov 2009)
New Revision: 20226

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20226&view=rev

Added:
   strategoxt/trunk/stratego-front/syn/Stratego-Sugar-StringQuotations.sdf
   strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode/indent-padding.str
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.meta
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
   strategoxt/trunk/strc-core/tests/test1/test112.str
Modified:
   strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp
   strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp
   strategoxt/trunk/stratego-front/syn/Stratego-Sugar-Constants.sdf
   strategoxt/trunk/stratego-libraries/lib/spec/term/string.str
   strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode.str
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar.str
   strategoxt/trunk/strc-core/lib/stratego/strc/front/frontend.str
   strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str
   strategoxt/trunk/strc-core/tests/test1/Makefile.am

Log:
Added a new indentation-safe string quotation syntax, which
can be (ab)used to quickly construct strings. Strings
can be quoted using $[ ... ], and anti-quoted using [ ... ].
Alternatively, ${, $(, or $< and corresponding anti-quotations
may also be used.

Example:

  x      := $[ A extends B ];
  method := $[ void foo() {
                 ...
               }
            ];
  !$[
      class Foo [x] {
        [method]
      }
  ]

is equivalent to (note the indentation):

!$[
class Foo A extends B {
  void foo() {
    ...
  }
}
]

and is evaluated by a concat-strings application, resulting in
a nicely indented string.

Internally, asfix-imploder takes care of the indentation using a
new {indentpadding} SDF annotation, which adds indentation padding
to any lexical. (Using backtracking, this asfix-imploder modification
should have very little performance effect on existing applications.)

Use it responsibly!


Changes:

Modified: strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp
===================================================================
--- strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp	2009-11-12 18:00:10 UTC (rev 20225)
+++ strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp	2009-11-12 19:01:40 UTC (rev 20226)
@@ -4,6 +4,8 @@
    Env -- H hs=0["{" H[_1] "}"],
    Env.1:iter-sep -- H hs=0[_1 ","],
 
+   Assign -- H[_1 KW[":="] _2],
+
    --saved-entry--TupleCong                           -- H hs=0 [KW["("] _1 KW[")"]],
    --saved-entry--SwitchChoice.2:iter-star            -- V is=2 vs=0 [H hs=1 [KW["case"] _1 KW[":"]] _2],
    --saved-entry--SwitchChoice                        -- V  [V is=2 vs=0 [H hs=1 [KW["switch"] _1] _2 V is=2 vs=0 [H hs=1 [KW["otherwise"] KW[":"]] _2]] KW["end"]],
@@ -262,6 +264,19 @@
    ProceedT.1:iter-star-sep                           -- _1 KW[","],
    ProceedT.1:iter-star-sep                           -- _1 KW[","],
    AnnoDef                                            -- H [ _1 _2 ], 
+   StringQuotation1                                   -- H hs=0 [ KW["$["] _2 KW["]"] ],
+   StringQuotation2                                   -- H hs=0 [ KW["${"] _2 KW["}"] ],
+   StringQuotation3                                   -- H hs=0 [ KW["$("] _2 KW[")"] ],
+   StringQuotation4                                   -- H hs=0 [ KW["$<"] _2 KW[">"] ],
+   StringQuotation1.1:iter-star                       -- _1,
+   StringQuotation2.1:iter-star                       -- _1,
+   StringQuotation3.1:iter-star                       -- _1,
+   StringQuotation4.1:iter-star                       -- _1,
+   StringEscape1                                      -- H hs=0 [ KW["["] _2 KW["]"] ],
+   StringEscape2                                      -- H hs=0 [ KW["{"] _2 KW["}"] ],
+   StringEscape3                                      -- H hs=0 [ KW["("] _2 KW[")"] ],
+   StringEscape4                                      -- H hs=0 [ KW["<"] _2 KW[">"] ],
+   QStr                                               -- _1,
    ExtSDefInl                                         -- V is=2 [H  [KW["external"] H hs=0 [_1 KW["("] H  [_2]] KW["|"] H hs=0 [H  [_3] KW[")"]] KW["="]] _4],
    ExtSDefInl.2:iter-star-sep                         -- _1 KW[","],
    ExtSDefInl.3:iter-star-sep                         -- _1 KW[","],

Modified: strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp
===================================================================
--- strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp	2009-11-12 18:00:10 UTC (rev 20225)
+++ strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp	2009-11-12 19:01:40 UTC (rev 20226)
@@ -250,6 +250,19 @@
    ProceedT.1:iter-star-sep                           -- _1 KW[","],
    ProceedT.1:iter-star-sep                           -- _1 KW[","],
    AnnoDef                                            -- H [ _1 _2 ], 
+   StringQuotation1                                   -- H hs=0 [ KW["$["] _2 KW["]"] ],
+   StringQuotation2                                   -- H hs=0 [ KW["${"] _2 KW["}"] ],
+   StringQuotation3                                   -- H hs=0 [ KW["$("] _2 KW[")"] ],
+   StringQuotation4                                   -- H hs=0 [ KW["$<"] _2 KW[">"] ],
+   StringQuotation1.1:iter-star                       -- _1,
+   StringQuotation2.1:iter-star                       -- _1,
+   StringQuotation3.1:iter-star                       -- _1,
+   StringQuotation4.1:iter-star                       -- _1,
+   StringEscape1                                      -- H hs=0 [ KW["["] _2 KW["]"] ],
+   StringEscape2                                      -- H hs=0 [ KW["{"] _2 KW["}"] ],
+   StringEscape3                                      -- H hs=0 [ KW["("] _2 KW[")"] ],
+   StringEscape4                                      -- H hs=0 [ KW["<"] _2 KW[">"] ],
+   QStr                                               -- _1,
    ExtSDefInl                                         -- V is=2 [H  [KW["external"] H hs=0 [_1 KW["("] H  [_2]] KW["|"] H hs=0 [H  [_3] KW[")"]] KW["="]] _4],
    ExtSDefInl.2:iter-star-sep                         -- _1 KW[","],
    ExtSDefInl.3:iter-star-sep                         -- _1 KW[","],

Modified: strategoxt/trunk/stratego-front/syn/Stratego-Sugar-Constants.sdf
===================================================================
--- strategoxt/trunk/stratego-front/syn/Stratego-Sugar-Constants.sdf	2009-11-12 18:00:10 UTC (rev 20225)
+++ strategoxt/trunk/stratego-front/syn/Stratego-Sugar-Constants.sdf	2009-11-12 19:01:40 UTC (rev 20226)
@@ -1,5 +1,8 @@
 module Stratego-Sugar-Constants
-imports Stratego-Core-Identifiers Stratego-Core-Constants
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+  Stratego-Sugar-StringQuotations
 exports
   sorts Char CharChar
   lexical syntax

Added: strategoxt/trunk/stratego-front/syn/Stratego-Sugar-StringQuotations.sdf
===================================================================
--- strategoxt/trunk/stratego-front/syn/Stratego-Sugar-StringQuotations.sdf	                        (rev 0)
+++ strategoxt/trunk/stratego-front/syn/Stratego-Sugar-StringQuotations.sdf	2009-11-12 19:01:40 UTC (rev 20226)
@@ -0,0 +1,51 @@
+module Stratego-Sugar-StringQuotations
+exports
+
+  sorts
+    StringQuotation
+    StringQuotedPart1 StringQuotedChars1
+    StringQuotedPart2 StringQuotedChars2
+    StringQuotedPart3 StringQuotedChars3
+    StringQuotedPart4 StringQuotedChars4
+    Padding
+
+  context-free syntax
+
+    StringQuotation -> PreTerm
+
+  syntax
+  
+    %% TODO: use $[ to escape [ ?
+
+    StringQuotation -> <PreTerm-CF>
+
+    "$" "[" Padding StringQuotedPart1*               "]"    -> StringQuotation {cons("StringQuotation1") }
+     Padding "[" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "]"    -> StringQuotedPart1 {cons("StringEscape1")}
+    <StringQuotedChars1-LEX>                                -> StringQuotedPart1 {cons("QStr")}
+    ~[\[\]]+                                                -> <StringQuotedChars1-LEX>
+
+    "$" "{" Padding StringQuotedPart2*               "}"    -> StringQuotation {cons("StringQuotation2") }
+     Padding "{" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "}"    -> StringQuotedPart2 {cons("StringEscape2")}
+    <StringQuotedChars2-LEX>                                -> StringQuotedPart2 {cons("QStr")}
+    ~[\{\}]+                                                -> <StringQuotedChars2-LEX>
+
+    "$" "(" Padding StringQuotedPart3*              ")"     -> StringQuotation {cons("StringQuotation3") }
+    Padding "(" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ")"     -> StringQuotedPart3 {cons("StringEscape3")}
+    <StringQuotedChars3-LEX>                                -> StringQuotedPart3 {cons("QStr")}
+    ~[\[\]]*                                                -> <StringQuotedChars3-LEX>
+
+    "$" "<" Padding StringQuotedPart4*               ">"    -> StringQuotation {cons("StringQuotation4") }
+    Padding "<"  <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ">"    -> StringQuotedPart4 {cons("StringEscape4")}
+    <StringQuotedChars4-LEX>                                -> StringQuotedChars4 {cons("QStr")}
+    ~[\<\>]+                                                -> <StringQuotedChars4-LEX>
+   
+    %% Padding is a dummy lexical that will contain the indentation prefix of every quotation
+    <Padding-LEX>                                           -> Padding
+                                                            -> <Padding-LEX> {indentpadding}
+
+  lexical restrictions
+
+    StringQuotedChars1 -/- ~[\[\]]   
+    StringQuotedChars2 -/- ~[\{\}]    
+    StringQuotedChars3 -/- ~[\(\)]    
+    StringQuotedChars4 -/- ~[\<\>]

Modified: strategoxt/trunk/stratego-libraries/lib/spec/term/string.str
===================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/term/string.str	2009-11-12 18:00:10 UTC (rev 20225)
+++ strategoxt/trunk/stratego-libraries/lib/spec/term/string.str	2009-11-12 19:01:40 UTC (rev 20226)
@@ -7,6 +7,7 @@
  * 
  * @author Eelco Visser <visser at acm.org>
  * @author Karl Trygve Kalleberg <karltk at strategoxt.org>
+ * @author Lennart Kats <lennart add lclnet.nl>
  */
 module term/string
 imports 
@@ -603,6 +604,37 @@
     <align-right> (<s> (), <Fst>, <Snd>)
 
   /**
+   * Remove padding from a string.
+   *
+   * @internal
+   * @since 0.18
+   */
+  remove-padding =
+    string-as-chars(
+      split-at-newlines
+    ; where(padding := <length> <Hd>)
+    ; remove-padding(|padding, padding)
+    ; at-last(rtrim(' ' + '\t'))
+    ; separate-by(|['\n'])
+    ; concat
+    )
+  
+  internal remove-padding(|max, n) =
+    where(<leq> (n, 0))
+  ; [id | remove-padding(|max, max)]
+  <+
+    [?[' '  | <id>] | id]
+  ; remove-padding(|max, <dec> n)
+  <+
+    [?['\t' | <id>] | id]
+  ; remove-padding(|max, <subt> (n, 4))
+  <+
+    where(max' := <subt> (max, n))
+  ; [id | remove-padding(|max', max')]
+  <+
+    []
+
+  /**
    * @type Char * String * Int -> String
    */
   align-right :
@@ -944,19 +976,18 @@
    */
   get-lines =
     explode-string
-    ; let split-at-newlines = {tl: 
-            at-suffix(
-               (['\n'       | tl] -> [])
-            <+ (['\r', '\n' | tl] -> [])
-            <+ (['\r'       | tl] -> [])
-            )
-            ; ![<id> | <split-at-newlines> tl]
-            <+ ![<id>]
-          }
-       in split-at-newlines
-      end
+    ; split-at-newlines
     ; map(implode-string)
 
+  internal split-at-newlines =
+    at-suffix(
+       (['\n'       | tl] -> [])
+    <+ (['\r', '\n' | tl] -> [])
+    <+ (['\r'       | tl] -> [])
+    )
+    ; ![<id> | <split-at-newlines> tl]
+    <+ ![<id>]
+
   /**
    * Applies a strategy to all lines in a string.
    *

Added: strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode/indent-padding.str
===================================================================
--- strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode/indent-padding.str	                        (rev 0)
+++ strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode/indent-padding.str	2009-11-12 19:01:40 UTC (rev 20226)
@@ -0,0 +1,127 @@
+/**
+ * Indent-padding annotation.
+ *
+ * @author Lennart Kats
+ */
+module stratego/asfix/implode/indent-padding
+imports
+  stratego/concrete-syntax/markers
+
+signature constructors
+
+  AddPadding     : Term -> AddPadding
+  PaddingContext : Term -> PaddingContext
+  PaddingId      : Term -> PaddingId
+  PaddingStart   : PaddingStart
+  indentpadding  : Attr
+
+strategies
+    
+  /**
+   * Add an annotation uniquely identifying each {indentpadding} lexical.
+   */
+  AddPaddedLexicalAnno :
+    appl(prod(_, _, attrs(a*)), _) -> <id> {PaddingId(<new>)}
+    where
+      <one(term(indentpadding()))> a* 
+    
+  ImplodePaddedLexical :
+    appl(prod(_, _, attrs(a*)), _) -> AddPadding(imploded) {PaddingContext(<id>)}
+    where
+      <one(term(indentpadding()))> a*
+    with
+      imploded := <asfix-yield-appl>
+
+  AddIndentPadding(|asfix) :
+    AddPadding(t) -> t'
+    with
+      if !asfix => appl(_, _) then
+        where(
+          asfix'  := <strip-tree-before(?_{PaddingId(_)})> asfix
+        ; padding := <asfix-yield-appl-chars> asfix'
+        //; <debug(!"  padding1: ")> <write-to-string> <implode-string> <asfix-yield-appl-chars> asfix
+        //; <debug(!"  padding2: ")> <write-to-string> <implode-string> padding
+        )
+      ; if (!asfix => _{PaddingId(_)} <+ <not(one('\n'))> padding) then
+          t' := <id> // keep constructor (add padding later)
+        else
+          t' := <add-indent-padding-string(|asfix)> t
+        end
+      else
+        t' := <id> // keep constructor (add padding later)
+      end
+
+  /**
+   * The yield of an AsFixTerm are the characters at the leaves of the tree.
+   */
+  asfix-yield-appl-chars =
+    let yield(|chars) =
+            asfix-yield-acc(yield | chars)
+
+     in ?appl(_, <id>)
+      ; yield(|[])
+    end
+  
+  add-indent-padding-string(|asfix) =
+    topdown(try(AddIndentPaddingString(|asfix)))
+  ; conc-to-cons
+  
+  AddIndentPaddingString(|asfix) :
+    AddPadding(s){a*} -> s'
+    with
+      if !a* => [PaddingContext(context)] then
+        asfix'   := <strip-tree-before(?context)> asfix
+      ; padding  := <asfix-yield-appl-chars; chars-after-newlines> asfix'
+      ; padding' := <chars-to-whitespace> padding
+      ; s'       := <conc; implode-string> (padding', <explode-string> s)
+      else
+        s' := s
+      end
+  
+  strip-tree-before(s) =
+    if is-list then
+      [s | id]; ![]
+    <+
+      try(strip-tree-before-list(s))
+    else
+      all(strip-tree-before(s))
+    end
+  
+  strip-tree-before-list(s) :
+    [i | i*] -> stripped*
+    where
+      if <oncetd(s)> i then
+        stripped* := [<strip-tree-before(s)> i]
+      else
+        stripped* := [i | <strip-tree-before(s)> i*]
+      end
+  
+  chars-to-whitespace :
+    [c | c*] -> c'*
+    where
+      if !c => '\t' then
+        c'* := ['\t' | <chars-to-whitespace> c*]
+      else
+        c'* := [' '  | <chars-to-whitespace> c*]
+      end
+    
+  chars-to-whitespace :
+    [] -> []
+  
+  chars-after-newlines :
+    input @ [c | c*] -> c''*
+    where
+      if !c => '\n' + !c => '\r' then
+        c''* := <chars-after-newlines> c*
+      else
+        c'* := <chars-after-newlines> c*
+      ; if !c'* => c* then
+          c''* := input
+        else
+          c''* := c'*
+        end
+      end
+  
+  chars-after-newlines :
+    [] -> []
+

Modified: strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode.str
===================================================================
--- strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode.str	2009-11-12 18:00:10 UTC (rev 20225)
+++ strategoxt/trunk/stratego-libraries/sglr/lib/stratego/asfix/implode.str	2009-11-12 19:01:40 UTC (rev 20226)
@@ -16,6 +16,7 @@
   stratego/asfix/implode/list
   stratego/asfix/implode/sort
   stratego/asfix/implode/tuple
+  stratego/asfix/implode/indent-padding
 
 /**
  * Main entry points for implosion of AsFix
@@ -33,24 +34,55 @@
    */
   implode-asfix(implode-concrete) =
     ?parsetree(<id>, _)
-    ; rec x(
-         ImplodeLexical
+    ; topdown(try(AddPaddedLexicalAnno))
+    ; ?asfix
+    ; rec x({
+        ?asfix
+      ; (
+           ImplodePaddedLexical
+      
+        <+ ImplodeLexical
+  
+        <+ where(not(implode-concrete))
+           ; skip-concrete(x)
+  
+        <+ appl(id, filter(not(is-ignorable-syntax)))
+           ; ( ImplodeOptionalList; x; (?AddPadding(_) < !AddPadding(<x>) + x)
+            <+ ReplCons({ asfixchild:
+                   ?asfixchild
+                 ; x
+                 ; if ?AddPadding(_) then
+                     AddIndentPadding(|asfixchild)
+                   ; try(?p @ AddPadding(_))
+                   end
+               })
+               ; if !p then
+                   !AddPadding(<id>)
+                 end
+            <+ ImplodeInjection;   (?AddPadding(_) < !AddPadding(<x>) + x)
+            <+ ImplodeTuple;       (?AddPadding(_) < !AddPadding(<x>) + x)
+            <+ ImplodeAlternative; (?AddPadding(_) < !AddPadding(<x>) + x)
+            )
+  
+        <+ amb(map(x))
+        
+        <+ [id | x]
+           ; if ?[_ | AddPadding(_)] then
+               !AddPadding(<[x | id]>)
+             else
+               [x | id]
+             end
+  
+        <+ all(x)
+        )
+      ; if ?AddPadding(_) then
+          AddIndentPadding(|asfix)
+        end
+      })
+    ; if ?AddPadding(_) then
+        add-indent-padding-string(|asfix)
+      end
 
-      <+ where(not(implode-concrete))
-         ; skip-concrete(x)
-
-      <+ appl(id, filter(not(is-ignorable-syntax)))
-         ; ( ImplodeOptionalList; x
-          <+ ReplCons(x)
-          <+ ImplodeInjection; x
-          <+ ImplodeTuple; x
-          <+ ImplodeAlternative; x)
-
-      <+ amb(map(x))
-
-      <+ all(x)
-      )
-
 strategies
 
   /**

Added: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.meta
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.meta	                        (rev 0)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.meta	2009-11-12 19:01:40 UTC (rev 20226)
@@ -0,0 +1 @@
+Meta([Syntax("Stratego-Sugar-in-Stratego")])

Added: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	                        (rev 0)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-11-12 19:01:40 UTC (rev 20226)
@@ -0,0 +1,165 @@
+/**
+ * Desugar $[ string quotations. ]
+ *
+ * @author Lennart Kats
+ */
+
+module desugar-string-quotations
+
+strategies
+
+  Desugar :
+    StringQuotation4(s, t*) -> <Desugar> StringQuotation1(s, t*)
+
+  Desugar :
+    StringQuotation3(s, t*) -> <Desugar> StringQuotation1(s, t*)
+
+  Desugar :
+    StringQuotation2(s, t*) -> <Desugar> StringQuotation1(s, t*)
+
+  Desugar :
+    StringQuotation1(s, t*) ->
+    (Term |[ <concat-strings(|)> [t''*] ]|)
+    with
+      t'*     := <normalize-quoted(|s)> t*
+    ; t''*    :=  t'*{"quoted"}
+  
+  /*
+  normalize-quoted(|padding) =
+    // Add initial padding before each fragment's first newline
+    if ?[QStr(_) | _] then
+      [QStr(<conc-strings> (padding, <id>) => initial) | id]
+    ; where(
+        padding'       := <string-as-chars(get-padding-chars)> initial
+      ; padding-length := <string-length> padding'
+      )
+    ; [id | map(try(QStr(<conc-strings> (padding', <id>))))]
+    else
+      where(
+        padding-length := <string-length> padding
+      )
+    ; map(try(QStr(<conc-strings> (padding, <id>))))
+    end
+  ; map(try(DesugarQuoted))
+  ; string-quotation-padd(|padding-length)
+  ; try(at-last([QStr(string-as-chars(rtrim(' ' + '\t')))]))
+  ; map(try(DesugarQStr))
+  */
+  
+  normalize-quoted(|padding) =
+    if ?[QStr(_) | _] then
+      // Combine padding before the initial string with the padding inside it
+      [QStr(<conc-strings> (padding, <id>) => initial) | id]
+    ; where(
+        padding'       := <string-as-chars(get-padding-chars)> initial
+      ; padding-length := <string-length> padding'
+      )
+      // Unpadd the initial string
+    ; [QStr(string-as-chars(![<id>]; remove-padding(|<string-length> initial, <string-length> initial) => ([<id>], _))) | id]
+    else
+      where(
+        padding-length := <string-length> padding
+      )
+    end
+  ; map(try(DesugarQuoted))
+  ; string-quotation-padd(|padding-length)
+  ; try(at-last([QStr(string-as-chars(rtrim(' ' + '\t')))]))
+  ; map(try(DesugarQStr))
+  
+  internal get-padding-chars =
+    [' ' + '\t' | get-padding-chars]
+  <+
+    ![]
+  
+  /**
+   * Remove balanced padding from quoted strings,
+   * and expand anti-quotations with padding.
+   *
+   * @param max  Maximum number of padding characters to remove.
+   */
+  string-quotation-padd(|max) =
+    [string-literal-unpadd(|max) => (<id>, max') | string-quotation-padd(|max')]
+  <+
+    [string-escape-padd(|max) | string-quotation-padd(|max)]
+  <+
+    []
+  <+
+    with(fail)
+
+  /**
+   * Remove padding from quoted string literals.
+   *
+   * @type List(List(Char)) -> (List(List(Char)), Int)
+   */
+  string-literal-unpadd(|max) =
+    QStr(string-as-chars(
+      split-at-newlines
+    ; try([id | remove-padding(|max, max) => (<id>, max')])
+    ; separate-by(|['\n'])
+    ; concat
+    ))
+    ; !(<id>, max')
+  
+  /**
+   * Remove padding characters from a list of character lists
+   * (each representing a line).
+   *
+   * @param max  Maximum number of padding characters to remove.
+   * @param n    Current number of padding characters to remove
+   *             (decreases with recursion).
+   *
+   * @type List(List(Char)) -> (List(List(Char)), Int)
+   */
+  remove-padding(|max, n) =
+    where(<leq> (n, 0))
+  ; [id | remove-padding(|max, max) => (<id>, max')]
+  ; !(<id>, max')
+  <+
+    [?[' '  | <id>] | id]
+  ; remove-padding(|max, <dec> n)
+  <+
+    [?['\t' | <id>] | id]
+  ; remove-padding(|max, <subt> (n, 4))
+  <+
+    ?[_ | _]
+  ; where(max' := <subt> (max, n))
+  ; [id | remove-padding(|max', max') => (<id>, max'')]
+  ; !(<id>, max'')
+  <+
+    []
+  ; !([], max)
+
+  internal split-at-newlines =
+    at-suffix(
+       (['\n'       | tl] -> [])
+    <+ (['\r', '\n' | tl] -> [])
+    <+ (['\r'       | tl] -> [])
+    )
+    ; ![<id> | <split-at-newlines> tl]
+    <+ ![<id>]
+  
+  /**
+   * Adjust padding of quoted string escapes.
+   */
+  string-escape-padd(|n) :
+    StringEscape1(s, t) -> <desugar> Term |[
+      <!t
+       ; (map(is-string(|) <+ write-to-string(|)|); concat-strings(|)
+          <+ (is-string(|) <+ write-to-string(|)))
+       ; string-replace(|"\n", t_padded)>
+    ]|
+    with
+      t_padded := Anno(Str(<string-as-chars(!['\n' | <drop(!n)>])> s), Op("Nil", []))
+
+  DesugarQuoted :
+    StringEscape2(s, t) -> StringEscape1(s, t)
+
+  DesugarQuoted :
+    StringEscape3(s, t) -> StringEscape1(s, t)
+
+  DesugarQuoted :
+    StringEscape4(s, t) -> StringEscape1(s, t)
+
+  DesugarQStr :
+    QStr(s) -> Anno(Str(s), Op("Nil", []))
+

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar.str	2009-11-12 18:00:10 UTC (rev 20225)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar.str	2009-11-12 19:01:40 UTC (rev 20226)
@@ -10,6 +10,7 @@
   Stratego-Sugar
   stratego/strc/lib/stratlib
   stratego/strc/front/DefaultStrat
+  stratego/strc/front/desugar-string-quotations
 
 strategies // Desugaring Strategies
 

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/frontend.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/frontend.str	2009-11-12 18:00:10 UTC (rev 20225)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/frontend.str	2009-11-12 19:01:40 UTC (rev 20226)
@@ -132,6 +132,7 @@
     Match(oncetd(fail
       <+ ?BuildDefault(_) 
       <+ ?BuildDefaultPT(_)
+      <+ ?_{"quoted"}
     ))
     ; err(|"build symbols in match pattern")
   

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str	2009-11-12 18:00:10 UTC (rev 20225)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str	2009-11-12 19:01:40 UTC (rev 20226)
@@ -329,6 +329,33 @@
       else
         !|[ H hs=0 [ "\"" ~lit:i "\""] ]|
       end
+  
+  stratego-to-abox :
+    StringQuotation1(s, t) -> H hs=0 [ KW["$["] ~*t KW["]"] ]
+  
+  stratego-to-abox :
+    StringQuotation2(s, t) -> H hs=0 [ KW["${"] ~*t KW["}"] ]
+  
+  stratego-to-abox :
+    StringQuotation3(s, t) -> H hs=0 [ KW["$("] ~*t KW[")"] ]
+  
+  stratego-to-abox :
+    StringQuotation4(s, t) -> H hs=0 [ KW["$<"] ~*t KW[">"] ]
+  
+  stratego-to-abox :
+    StringEscape1(_, t) -> H hs=0 [ KW["["] ~t KW["]"] ]
+  
+  stratego-to-abox :
+    StringEscape2(_, t) -> H hs=0 [ KW["{"] ~t KW["}"] ]
+  
+  stratego-to-abox :
+    StringEscape3(_, t) -> H hs=0 [ KW["("] ~t KW[")"] ]
+  
+  stratego-to-abox :
+    StringEscape4(_, t) -> H hs=0 [ KW["<"] ~t KW[">"] ]
+  
+  stratego-to-abox :
+    QStr(i) -> S(i)
 
   stratego-to-abox =
     ?Char(i)

Modified: strategoxt/trunk/strc-core/tests/test1/Makefile.am
===================================================================
--- strategoxt/trunk/strc-core/tests/test1/Makefile.am	2009-11-12 18:00:10 UTC (rev 20225)
+++ strategoxt/trunk/strc-core/tests/test1/Makefile.am	2009-11-12 19:01:40 UTC (rev 20226)
@@ -26,7 +26,7 @@
 		  test84 test85 test86 test87 test88 test89 test90		 \
 		  test91 test92 test93 test94 test95 test96			 \
 		  test97 test98	test99 test100 test101 test102 test103		 \
-		  test104 test105 test106 test107 test108 test109 test110 test111	 \
+		  test104 test105 test106 test107 test108 test109 test110 test111 test112	 \
 		  io-test10 io-test11 io-test1 io-test2 io-test3 io-test4	 \
                   qcons-test01 qcons-test02 qcons-test03 qcons-test04		 \
                   test-chain01 test-chain02 test-chain03			 \

Added: strategoxt/trunk/strc-core/tests/test1/test112.str
===================================================================
--- strategoxt/trunk/strc-core/tests/test1/test112.str	                        (rev 0)
+++ strategoxt/trunk/strc-core/tests/test1/test112.str	2009-11-12 19:01:40 UTC (rev 20226)
@@ -0,0 +1,47 @@
+/**
+ * Test for $[ string quotation syntax. ]
+ * As this tests for indentation using the regular string syntax,
+ * this test is ironically very badly formatted.
+ */
+module test112
+imports libstratego-lib
+
+strategies
+  
+  show(|s) = where(write-to-string; debug(!s)); say(id)
+
+  main =
+    x := $[ 1
+            2 ];
+    !$[ Indent me: [x]]; show(|1) =>
+"Indent me: 1
+           2";
+    
+    !$[ Indent
+           me too: [x] ]; show(|2) =>
+"Indent
+   me too: 1
+           2";
+    
+    y := $[- [x] -
+             3];
+    
+    !${ me
+    [three]: {y} }; show(|3) =>
+"me
+[three]: - 1
+           2 -
+           3";
+    
+    !$[]; show(|4) => "";
+    !$[[""]]; show(|5) => "";
+    !$[ - ["a"]
+          b
+      ]; show(|6) =>
+"- a
+  b
+";
+    !$[ 1
+[2]3]; show(|7) =>
+"1
+23"



From L.C.L.Kats at tudelft.nl  Thu Nov 12 21:08:45 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 12 Nov 2009 20:08:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20227 - LennartKats -
	strategoxt/trunk/strc-core/tests/test1
Message-ID: <200911122008.nACK8jfs018421@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-12 20:08:44 +0000 (Thu, 12 Nov 2009)
New Revision: 20227

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20227&view=rev

Modified:
   strategoxt/trunk/strc-core/tests/test1/Makefile.am

Log:
buildfix

Changes:

Modified: strategoxt/trunk/strc-core/tests/test1/Makefile.am
===================================================================
--- strategoxt/trunk/strc-core/tests/test1/Makefile.am	2009-11-12 19:01:40 UTC (rev 20226)
+++ strategoxt/trunk/strc-core/tests/test1/Makefile.am	2009-11-12 20:08:44 UTC (rev 20227)
@@ -120,6 +120,7 @@
 test107_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
 test108_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
 test109_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
+test112_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
 
 test_chain01_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
 test_chain02_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
@@ -250,6 +251,7 @@
 nodist_test109_SOURCES = test109.c
 nodist_test110_SOURCES = test110.c
 nodist_test111_SOURCES = test111.c
+nodist_test112_SOURCES = test112.c
 
 nodist_test_chain01_SOURCES = test-chain01.c
 nodist_test_chain02_SOURCES = test-chain02.c



From L.C.L.Kats at tudelft.nl  Fri Nov 13 09:31:56 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 13 Nov 2009 08:31:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20228 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
Message-ID: <200911130831.nAD8Vu34027735@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-13 08:31:55 +0000 (Fri, 13 Nov 2009)
New Revision: 20228

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20228&view=rev

Removed:
   spoofax-imp/trunk/org.strategoxt.imp.generator/plugin.xml
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java

Log:
Added a new (meta) annotation for builders that should only be shown to metaprogrammers.

Changes:

Deleted: spoofax-imp/trunk/org.strategoxt.imp.generator/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/plugin.xml	2009-11-12 20:08:44 UTC (rev 20227)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/plugin.xml	2009-11-13 08:31:55 UTC (rev 20228)
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<?eclipse version="3.4"?>
-<plugin>
-
-</plugin>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	2009-11-12 20:08:44 UTC (rev 20227)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	2009-11-13 08:31:55 UTC (rev 20228)
@@ -25,7 +25,7 @@
           provider: ~provider
           observer: editor-analyze
           builder: "Generate Java code" = generate-java  (openeditor) (realtime)
-          builder: "Show ATerm"         = generate-aterm (openeditor) (realtime)
+          builder: "Show ATerm"         = generate-aterm (openeditor) (realtime) (meta)
       ]|
     );
     
@@ -59,6 +59,8 @@
           ~// and the generate-java rule is used to carry out the tranformation.
           ~// Builder definitions can also specify any combination of the following annotations:
           ~//
+          ~//   (meta)        Indicates the builder should only be available to meta-programmers
+          ~//                 (i.e., not when the plugin is deployed to end-users)
           ~//   (openeditor)  Indicates an editor should be opened with the result.
           ~//   (persistent)  Indicates that the resulting file should be saved to disk.
           ~//   (realtime)    Indicates that the resulting editor should be updated in real-time

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf	2009-11-12 20:08:44 UTC (rev 20227)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf	2009-11-13 08:31:55 UTC (rev 20228)
@@ -24,3 +24,4 @@
     "(openeditor)" -> BuilderOption {cons("OpenEditor")}
     "(realtime)"   -> BuilderOption {cons("RealTime")}
     "(persistent)" -> BuilderOption {cons("Persistent")}
+    "(meta)"       -> BuilderOption {cons("Meta")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	2009-11-12 20:08:44 UTC (rev 20227)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	2009-11-13 08:31:55 UTC (rev 20228)
@@ -26,9 +26,12 @@
 			String caption = termContents(termAt(builder, 0));
 			String strategy = termContents(termAt(builder, 1));
 			IStrategoList options = termAt(builder, 2);
+			
 			boolean openEditor = false;
 			boolean realTime = false;
 			boolean persistent = false;
+			boolean meta = false;
+			
 			for (IStrategoTerm option : options.getAllSubterms()) {
 				String type = cons(option);
 				if (type.equals("OpenEditor")) {
@@ -37,11 +40,14 @@
 					realTime = true;
 				} else if (type.equals("Persistent")) {
 					persistent = true;
+				} else if (type.equals("Meta")) {
+					meta = true;
 				} else {
 					throw new BadDescriptorException("Unknown builder annotation: " + type);
 				}
 			}
-			builders.add(new StrategoBuilder(d.getStrategoObserver(), caption, strategy, openEditor, realTime, persistent));
+			if (!meta || d.isDynamicallyLoaded())			
+				builders.add(new StrategoBuilder(d.getStrategoObserver(), caption, strategy, openEditor, realTime, persistent));
 		}
 		
 		return new BuilderMap(builders);



From L.C.L.Kats at tudelft.nl  Fri Nov 13 10:25:13 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 13 Nov 2009 09:25:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20229 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/cygwin
Message-ID: <200911130925.nAD9PDbQ028712@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-13 09:25:13 +0000 (Fri, 13 Nov 2009)
New Revision: 20229

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20229&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/cygwin/cygwin1.dll

Log:
Added cygwin1.dll. The executables seem to run on Windows as well now.

Changes:

Added: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/cygwin/cygwin1.dll
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/cygwin/cygwin1.dll
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + application/octet-stream



From L.C.L.Kats at tudelft.nl  Fri Nov 13 11:08:23 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 13 Nov 2009 10:08:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20230 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
	org.strategoxt.imp.nativebundle
	org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <200911131008.nADA8NSB029285@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-13 10:08:22 +0000 (Fri, 13 Nov 2009)
New Revision: 20230

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20230&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java

Log:
Fixes.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2009-11-13 09:25:13 UTC (rev 20229)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2009-11-13 10:08:22 UTC (rev 20230)
@@ -10,6 +10,7 @@
    OpenEditor           -- KW["(openeditor)"],
    RealTime             -- KW["(realtime)"],
    Persistent           -- KW["(persistent)"],
+   Persistent           -- KW["(meta)"],
    Strategy             -- _1,
    Attribute            -- H hs=0 [ KW["id"] KW["."] _1 ],
    Analysis             -- V is=2 [H hs=0 [ KW["analysis"] _1 ] A(l,l,l) [_2] ],

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-11-13 09:25:13 UTC (rev 20229)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-11-13 10:08:22 UTC (rev 20230)
@@ -163,6 +163,7 @@
 	 * Ensures that both text fields are set.
 	 */
 	private void onChange() {
+		setErrorMessage(null);
 		
 		if (getInputProjectName().length() == 0) {
 			setErrorStatus("Project name must be specified");
@@ -273,7 +274,8 @@
 	}
 
 	private void setWarningStatus(String message) {
-		setErrorMessage(message);
+		if (getErrorMessage() == null)
+			setErrorMessage(message);
 	}
 	
 	public String getInputProjectName() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties	2009-11-13 09:25:13 UTC (rev 20229)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/build.properties	2009-11-13 10:08:22 UTC (rev 20230)
@@ -1,4 +1,10 @@
 source.. = src/
 output.. = bin/
 bin.includes = META-INF/,\
-               .
+               .,\
+               native/
+bin.excludes = native/sdf.tar.gz,\
+               native/macosx/.svn/,\
+               native/linux/.svn/,\
+               native/cygwin/.svn/,\
+               native/.svn/

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	2009-11-13 09:25:13 UTC (rev 20229)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	2009-11-13 10:08:22 UTC (rev 20230)
@@ -46,9 +46,8 @@
 		binaryExtension = getBinaryExtension();
 		String os = Platform.getOS();
 		if (os.equals(Platform.OS_LINUX) || os.equals(Platform.OS_MACOSX)) {
-			// Some of these are used from Ant and should always be executable
 			EditorIOAgent agent = new EditorIOAgent();
-			boolean success = makeExecutable(agent, "sdf2table") && makeExecutable(agent, "sglr") && makeExecutable(agent, "implodePT");
+			boolean success = makeExecutable(agent, "sdf2table") && makeExecutable(agent, "implodePT");
 			if (!success)
 				Environment.logException("chmod of native tool bundle executables failed:\n" + agent.getLog());
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-13 09:25:13 UTC (rev 20229)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-13 10:08:22 UTC (rev 20230)
@@ -11,10 +11,12 @@
 import org.eclipse.core.runtime.Status;
 import org.eclipse.jface.dialogs.ErrorDialog;
 import org.eclipse.ui.IEditorPart;
+import org.eclipse.ui.IPerspectiveFactory;
 import org.eclipse.ui.IWorkbenchPage;
 import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.ide.IDE;
+import org.eclipse.ui.internal.PageLayout;
 import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;



From L.C.L.Kats at tudelft.nl  Fri Nov 13 12:51:28 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 13 Nov 2009 11:51:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20231 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
	org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle
Message-ID: <200911131151.nADBpSEl031234@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-13 11:51:28 +0000 (Fri, 13 Nov 2009)
New Revision: 20231

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20231&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java

Log:
Fixes related to paths with spaces (e.g, C:\Documents and Settings\Chippie Dippie).

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-13 10:08:22 UTC (rev 20230)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-13 11:51:28 UTC (rev 20231)
@@ -51,11 +51,12 @@
         </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
-        <property name="build.stratego.args" value="--library -I ${trans} -I ${build} -I ${lib}
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm
-                        -I ${user.home}/.nix-profile/share/java-front
-                        -I ${basedir}
-                        -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
+        <property name="build.stratego.args" value="--library
+        	            -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr
+        	            -la stratego-gpp -la stratego-xtc
+        	            -la stratego-aterm"/>
 	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2009-11-13 10:08:22 UTC (rev 20230)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2009-11-13 11:51:28 UTC (rev 20231)
@@ -10,7 +10,7 @@
    OpenEditor           -- KW["(openeditor)"],
    RealTime             -- KW["(realtime)"],
    Persistent           -- KW["(persistent)"],
-   Persistent           -- KW["(meta)"],
+   Meta                 -- KW["(meta)"],
    Strategy             -- _1,
    Attribute            -- H hs=0 [ KW["id"] KW["."] _1 ],
    Analysis             -- V is=2 [H hs=0 [ KW["analysis"] _1 ] A(l,l,l) [_2] ],

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-11-13 10:08:22 UTC (rev 20230)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-11-13 11:51:28 UTC (rev 20231)
@@ -212,8 +212,6 @@
 
 		if (getInputProjectName().indexOf(' ') != -1) {
 			setWarningStatus("Project names with spaces may not be supported depending on your configuration");
-		} else if (ResourcesPlugin.getWorkspace().getRoot().getRawLocation().toOSString().indexOf(' ') != -1) {
-			setWarningStatus("A workspace directory with spaces may not be supported depending on your configuration");
 		} else {
 			setErrorStatus(null);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	2009-11-13 10:08:22 UTC (rev 20230)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	2009-11-13 11:51:28 UTC (rev 20231)
@@ -158,14 +158,11 @@
 	}
 
 	private String[] toCommandArgs(String command, IStrategoTerm[] argList) {
-		StringBuilder allArgs = new StringBuilder();
 		String[] commandArgs = new String[argList.length + 1];
 		int i = 1;
 		for (IStrategoTerm arg : argList) {
 			if (arg.getTermType() != STRING) return null;
-			allArgs.append(' ');
-			allArgs.append(((IStrategoString) arg).stringValue());
-			commandArgs[i++] = ((IStrategoString) arg).stringValue();
+			commandArgs[i++] = handleSpacesInPath(((IStrategoString) arg).stringValue());
 		}
 		commandArgs[0] = binaryPath + "/" + command + binaryExtension;
 		return commandArgs;
@@ -188,4 +185,10 @@
 			return false;
 		}
 	}
+	
+	private String handleSpacesInPath(String potentialPath) {
+		return (potentialPath.indexOf(' ') != -1 && Platform.getOS().equals(Platform.OS_WIN32))
+				? "\"" + potentialPath + "\""
+				: potentialPath;
+	}
 }



From L.C.L.Kats at tudelft.nl  Fri Nov 13 13:55:34 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 13 Nov 2009 12:55:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20232 - LennartKats -
	in strc-java/trunk/java: runtime/org/strategoxt/lang/compat
	runtime/org/strategoxt/lang/compat/override
	tools/org/strategoxt/tools/lib
Message-ID: <200911131255.nADCtYVI032224@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-13 12:55:34 +0000 (Fri, 13 Nov 2009)
New Revision: 20232

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20232&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str

Log:
Fixes related to calling executables on Windows.

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java	2009-11-13 11:51:28 UTC (rev 20231)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java	2009-11-13 12:55:34 UTC (rev 20232)
@@ -82,12 +82,23 @@
 		for (int i = 0; i < args.size(); i++) {
 			if (!isTermString(args.get(i)))
 				return null;
-			result[i+1] = javaString(args.get(i));
+			result[i+1] = handleSpacesInPath(javaString(args.get(i)));
 		}
 		
 		return result;
 	}
 	
+	private String handleSpacesInPath(String potentialPath) {
+		return (potentialPath.indexOf(' ') != -1 && isWindows())
+				? "\"" + potentialPath + "\""
+				: potentialPath;
+	}
+	
+	private static boolean isWindows() {
+		// Java only publishes this as a string
+		return System.getProperty("os.name").toLowerCase().indexOf("win") != -1;
+	}
+	
 	private String[] toEnvironment(IStrategoTerm env) {
 		if (!isTermList(env)) return null;
 

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-11-13 11:51:28 UTC (rev 20231)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-11-13 12:55:34 UTC (rev 20232)
@@ -65,6 +65,7 @@
 		if (!isTermInt(tvars[2])) return false;
 
 		String className = ((IStrategoString) tvars[0]).stringValue();
+		if (className.indexOf('/') != -1) return false;
 		IStrategoTerm input = tvars[1];
 		Context parentContext = ((InteropContext) env).getContext();
 		boolean sameContext = ((IStrategoInt) tvars[2]).intValue() != 0;

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str	2009-11-13 11:51:28 UTC (rev 20231)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str	2009-11-13 12:55:34 UTC (rev 20232)
@@ -15,7 +15,7 @@
   override call =
     // (Java extension)
     ?(program, args);
-    <is-substring(!".")> program;
+    <is-substring(!"."); not(is-substring(!"/"))> program;
     if <is-list> args then
       prim("SSL_EXT_java_call", program, [program | args], 0)
     else

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str	2009-11-13 11:51:28 UTC (rev 20231)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str	2009-11-13 12:55:34 UTC (rev 20232)
@@ -31,17 +31,22 @@
 
   native-transform(tool, args) =
     if <get-config> "-Xnativepath" => nativepath; not("") then
-      xtc-ensure-file => FILE(file)
-    ; xtc-new-file    => file'
-    ; tool' := <conc-strings> (nativepath, "/bin/", <tool>)
-    ; lib   := <conc-strings> ("LD_LIBRARY_PATH=", nativepath, "/lib")
-    ; <call> (tool', [lib], ["-i", file, "-o", file' | <args>])
-    ; !FILE(file')
+      xtc-ensure-file => FILE(input)
+    ; xtc-new-file    => output
+    ; input' := <abspath> input
+    ; cwd    := <getcwd>
+    ; <chdir <+ fatal-err(|"Native tool path not found")> nativepath
+    ; <call> (<tool>, ["-i", input', "-o", output | <args>])
+    ; if not(<file-exists> output) then // (shouldn't be reachable)
+        fatal-err(|["Native tool ", <tool>, " failed to produce an output file."])
+      end
+    ; <chdir> cwd
+    ; !FILE(output)
     else
       xtc-transform(tool, args)
     end
   <+
-    fatal-err(|[<tool>, " failed"])
+    <fatal-err(|[<tool>, " failed"])> <args <+ !"<args?>">
 
   native-executables-option =
     ArgOption("-Xnativepath"



From L.C.L.Kats at tudelft.nl  Fri Nov 13 14:24:11 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 13 Nov 2009 13:24:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20233 - LennartKats -
	strc-java/trunk/java/tools/org/strategoxt/tools/lib
Message-ID: <200911131324.nADDOBbm000373@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-13 13:24:11 +0000 (Fri, 13 Nov 2009)
New Revision: 20233

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20233&view=rev

Modified:
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str

Log:
Work around for absolute path handling issue on Windows (STR-782).

Changes:

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str	2009-11-13 12:55:34 UTC (rev 20232)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str	2009-11-13 13:24:11 UTC (rev 20233)
@@ -33,7 +33,7 @@
     if <get-config> "-Xnativepath" => nativepath; not("") then
       xtc-ensure-file => FILE(input)
     ; xtc-new-file    => output
-    ; input' := <abspath> input
+    ; input' := <try(abspath; file-exists)> input
     ; cwd    := <getcwd>
     ; <chdir <+ fatal-err(|"Native tool path not found")> nativepath
     ; <call> (<tool>, ["-i", input', "-o", output | <args>])



From R.B.Vermaas at tudelft.nl  Fri Nov 13 14:36:17 2009
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 13 Nov 2009 13:36:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20234 - rob - hydra/jobs
Message-ID: <200911131336.nADDaHp4000469@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2009-11-13 13:36:17 +0000 (Fri, 13 Nov 2009)
New Revision: 20234

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20234&view=rev

Modified:
   hydra/jobs/strategoxt.nix

Log:
r20227 as strategoxt baseline

Changes:

Modified: hydra/jobs/strategoxt.nix
===================================================================
--- hydra/jobs/strategoxt.nix	2009-11-13 13:24:11 UTC (rev 20233)
+++ hydra/jobs/strategoxt.nix	2009-11-13 13:36:17 UTC (rev 20234)
@@ -11,8 +11,8 @@
     pkgs.stdenv.mkDerivation {
       name = "strategoxt-baseline";
       src = pkgs.fetchurl {
-              url = "ftp://ftp.strategoxt.org/pub/stratego/StrategoXT/strategoxt-0.18pre20033.tar.gz";
-              sha256 = "07dlwmvs69qscx6dayjkmwjgyi4lzdzd9dagb9lkmwiw2n1hqprw";
+              url = "http://hydra.nixos.org/build/124117/download/1/strategoxt-0.18pre20227.tar.gz";
+              sha256 = "c2c7a68f76c6dfaf470ed9f7bad71cddebb620b709f20b01231c3a6fd93d8150";
             };
 
       buildInputs = defaultBuildInputs pkgs ;



From L.C.L.Kats at tudelft.nl  Sun Nov 15 11:52:35 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 15 Nov 2009 10:52:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20235 - LennartKats -
	in strc-java/trunk: . java java/runtime
	java/runtime/org/strategoxt java/runtime/org/strategoxt/lang
	java/runtime/org/strategoxt/lang/compat
	java/runtime/org/strategoxt/lang/compat/override
	java/tools/org/strategoxt/tools/lib test
Message-ID: <200911151052.nAFAqZlr012739@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-15 10:52:34 +0000 (Sun, 15 Nov 2009)
New Revision: 20235

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20235&view=rev

Added:
   strc-java/trunk/java/runtime/run.java
Modified:
   strc-java/trunk/build.properties
   strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/MissingStrategyException.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/NativeCallHelper.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str
   strc-java/trunk/java/runtime/start.java
   strc-java/trunk/java/spoofax-libs.jar
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str
   strc-java/trunk/test/Makefile.am

Log:
- Windows-related fixes
- New 'run' class, allowing invocation of the HybridInterpreter and dynamic loading of jars like so:
  java -cp strategoxt.jar run foo.ctree bar.jar main-foobar arg1 arg2

Changes:

Modified: strc-java/trunk/build.properties
===================================================================
--- strc-java/trunk/build.properties	2009-11-13 13:36:17 UTC (rev 20234)
+++ strc-java/trunk/build.properties	2009-11-15 10:52:34 UTC (rev 20235)
@@ -1,5 +1,4 @@
 bin.includes = META-INF/,\
-               java/runtime/,\
                java/strategoxt.jar,\
                .
 source.. = java/runtime/

Modified: strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-11-13 13:36:17 UTC (rev 20234)
+++ strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-11-15 10:52:34 UTC (rev 20235)
@@ -1,5 +1,6 @@
 package org.strategoxt;
 
+import java.io.File;
 import java.io.IOException;
 import java.net.JarURLConnection;
 import java.net.URL;
@@ -17,10 +18,14 @@
 import org.spoofax.interpreter.core.StackTracer;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
 import org.spoofax.interpreter.library.IOperatorRegistry;
+import org.spoofax.interpreter.stratego.SDefT;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.InteropRegisterer;
+import org.strategoxt.lang.InteropSDefT;
+import org.strategoxt.lang.MissingStrategyException;
 import org.strategoxt.lang.StrategoErrorExit;
 import org.strategoxt.lang.StrategoException;
 import org.strategoxt.lang.StrategoExit;
@@ -42,9 +47,14 @@
  */
 public class HybridInterpreter extends Interpreter {
 	
+	private static final String USAGE = "Uses: run [FILE.ctree | FILE.jar]... MAINCLASS [ARGUMENT]...\n" +
+	                                    "      run                    PACKAGE.MAINCLASS [ARGUMENT]...";
+
 	private final HybridCompiledContext compiledContext;
 	
 	private boolean registeredLibraries;
+	
+	private boolean loadedJars;
 
 	public HybridInterpreter() {
 		this(new BAFBasicTermFactory());
@@ -61,9 +71,106 @@
 	}
 	
 	public static void main(String... args) {
-		// TODO: HybridInterpreter.main()
+		if (args == null || args.length < 1) {
+			System.out.println(USAGE);
+			System.exit(127);
+		}
+		HybridInterpreter interpreter = new HybridInterpreter();
+		int i = mainLoadAll(interpreter, args);
+		boolean nothingLoaded = i == 0;
+		
+		String main = args[i++];
+
+		if (nothingLoaded)
+			warnUnqualifiedInvoke(interpreter, main);
+		
+		IStrategoString[] mainArgs = new IStrategoString[args.length - i + 1];
+		mainArgs[0] = interpreter.getFactory().makeString(main);
+		
+		for (int j = 1; j < mainArgs.length; i++, j++) {
+			mainArgs[j] = interpreter.getFactory().makeString(args[i]);
+		}
+		interpreter.setCurrent(interpreter.getFactory().makeList(mainArgs));
+		try {
+			interpreter.invoke(main);
+		} catch (InterpreterExit e) {
+			System.exit(e.getValue());
+		} catch (UndefinedStrategyException e) {
+			System.err.println(e.getMessage());
+			System.exit(125);
+		} catch (InterpreterException e) {
+			e.printStackTrace();
+			System.exit(124);
+		}
 	}
+
+	private static void warnUnqualifiedInvoke(HybridInterpreter interpreter, String main) {
+		interpreter.init();
+		SDefT invoked = interpreter.lookupUncifiedSVar(main);
+		if (invoked != null) {
+			String name = ((InteropSDefT) invoked).getStrategy().getClass().getName();
+			System.err.println("Warning: unqualified invocation of " + name);
+		}
+	}
+
+	private static int mainLoadAll(HybridInterpreter interpreter, String... args) {
+		int i = 0;
+		while (i < args.length) {
+			try {
+				if (args[i].endsWith(".ctree")) {
+					interpreter.load(args[i++]);
+				} else if (args[i].endsWith(".jar")) {
+					URL[] jars = { new File(args[i++]).toURL() };
+					interpreter.loadJars(jars);
+				} else {
+					break;
+				}
+			} catch (Exception e) {
+				System.err.println("Could not open input file " + args[i]
+						+ ": " + e.getClass().getSimpleName() + " - "
+						+ e.getMessage());
+				System.exit(126);
+			}
+		}
+		boolean nothingLoaded = i == 0;
+		if (i == args.length || (!nothingLoaded && args[i].indexOf('.') > -1)) {
+			System.err.println(USAGE);
+			System.exit(1);
+		} else if (nothingLoaded && args[i].indexOf('.') > -1) {
+			mainLocalJar(args); // avoid HybridInterpreter/InteropRegisters
+		}
+		return i;
+	}
 	
+	private static void mainLocalJar(String... args) {
+		String strategy = args[0];
+		String[] mainArgs = new String[args.length - 1];
+		System.arraycopy(args, 1, mainArgs, 0, mainArgs.length);
+		try {
+			Context context = new Context();
+			IStrategoTerm result;
+			try {
+				result = context.invokeStrategyCLI(strategy, strategy, mainArgs);
+			} finally {
+				context.getIOAgent().closeAllFiles();
+			}
+			if (result == null) {
+				System.err.println(strategy + (context.getTraceDepth() != 0
+								? ": rewriting failed, trace:"
+								: ": rewriting failed"));
+				context.printStackTrace();
+				System.exit(1);
+			} else {
+				System.exit(0);
+			}
+		} catch (MissingStrategyException e) {
+			System.err.println(e.getMessage());
+			System.exit(125);
+		} catch (StrategoExit e) {
+			System.exit(e.getValue());
+		}
+	}
+	
 	@Override
 	protected org.spoofax.interpreter.core.Context createContext(ITermFactory termFactory, ITermFactory programFactory) {
 		return new HybridContext(termFactory, programFactory);
@@ -87,6 +194,7 @@
 			throws SecurityException, IncompatibleJarException, IOException {
 
 		URLClassLoader classLoader = new URLClassLoader(jars, stratego_lib.class.getClassLoader());
+		loadedJars = true;
 		
 		for (URL jar : jars) {
 		    registerJar(classLoader, jar);
@@ -145,16 +253,18 @@
 		IContext context = getContext();
 		Context compiledContext = getCompiledContext();
 		
+		// FIXME: HybridInterpreter loads all libs into the same namespace
+		//        Which may affect interpreted code and invoke()
+		org.strategoxt.tools.Main.registerInterop(context, compiledContext);
+		org.strategoxt.stratego_gpp.Main.registerInterop(context, compiledContext);
 		org.strategoxt.stratego_aterm.Main.registerInterop(context, compiledContext);
-		org.strategoxt.stratego_lib.Main.registerInterop(context, compiledContext);
 		org.strategoxt.stratego_rtg.Main.registerInterop(context, compiledContext);
 		org.strategoxt.stratego_sdf.Main.registerInterop(context, compiledContext);
-		org.strategoxt.stratego_xtc.Main.registerInterop(context, compiledContext);
 		org.strategoxt.stratego_sglr.Main.registerInterop(context, compiledContext);
 		org.strategoxt.stratego_tool_doc.Main.registerInterop(context, compiledContext);
-		org.strategoxt.stratego_rtg.Main.registerInterop(context, compiledContext);
-		org.strategoxt.stratego_gpp.Main.registerInterop(context, compiledContext);
+		org.strategoxt.stratego_xtc.Main.registerInterop(context, compiledContext);
 		org.strategoxt.java_front.Main.registerInterop(context, compiledContext);
+		org.strategoxt.stratego_lib.Main.registerInterop(context, compiledContext);
 		org.strategoxt.strc.Main.registerInterop(context, compiledContext);
 	}
 	
@@ -172,11 +282,14 @@
 			throws InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
 		
 		try {
+			if (!loadedJars) init();
 			return super.invoke(name);
 		} catch (StrategoErrorExit e) {
 			throw new InterpreterErrorExit(e.getMessage(), e.getTerm(), e);
         } catch (StrategoExit e) {
             throw new InterpreterExit(e.getValue(), e);
+        } catch (MissingStrategyException e) {
+        	throw new UndefinedStrategyException(e);
         } catch (StrategoException e) {
             throw new InterpreterException(e);
         }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java	2009-11-13 13:36:17 UTC (rev 20234)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java	2009-11-15 10:52:34 UTC (rev 20235)
@@ -81,6 +81,9 @@
 		String name = getName();
 		int countEnd = name.lastIndexOf('_');
 		int countStart = name.lastIndexOf('_', countEnd - 1);
+		if (countStart == -1 || countEnd == -1) {
+			return NO_SVARS; // FIXME: properly handle "lifted" InteropSDefT strategies
+		}
 		int count = Integer.parseInt(name.substring(countStart + 1, countEnd));
 		
 		if (count == 0) return NO_SVARS;
@@ -100,15 +103,21 @@
 		
 		String name = getName();
 		int countStart = name.lastIndexOf('_');
-		int count = Integer.parseInt(name.substring(countStart + 1));
+		int count;
+		try {
+			count = Integer.parseInt(name.substring(countStart + 1));
+		} catch (NumberFormatException e) {
+			// FIXME: properly handle "lifted" InteropSDefT strategies
+			return NO_STRINGS;
+		}
 		
 		if (count == 0) return NO_STRINGS;
-		
+	
 		results = new String[count];
 		for (int i = 0; i < results.length; i++) {
 			results[i] = "t" + i;
 		}
-		
+	
 		return results;
 	}
 	
@@ -170,6 +179,9 @@
 			throw new InterpreterErrorExit(e.getMessage(), e.getTerm(), e);
 		} catch (StrategoExit e) {
 			throw new InterpreterExit(e.getValue(), e);
+		} catch (MissingStrategyException e) {
+			// Programmer error: not the same as a UndefinedStrategyException
+			throw new InterpreterException(e);
 		}
 		
 		if (result != null) {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/MissingStrategyException.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/MissingStrategyException.java	2009-11-13 13:36:17 UTC (rev 20234)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/MissingStrategyException.java	2009-11-15 10:52:34 UTC (rev 20235)
@@ -1,9 +1,15 @@
 package org.strategoxt.lang;
 
+import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.strategoxt.lang.compat.SSL_EXT_java_call;
+
 /**
  * An exception thrown when a dynamically invoked strategy
  * was not found or could otherwise not be used.
  * 
+ * Only relates to strategies called with {@link SSL_EXT_java_call};
+ * for unloaded interpreter strategies see {@link UndefinedStrategyException}.
+ * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class MissingStrategyException extends StrategoException {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/NativeCallHelper.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/NativeCallHelper.java	2009-11-13 13:36:17 UTC (rev 20234)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/NativeCallHelper.java	2009-11-15 10:52:34 UTC (rev 20235)
@@ -1,10 +1,8 @@
 package org.strategoxt.lang.compat;
 
-import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.InputStreamReader;
 import java.io.PrintStream;
 
 import org.strategoxt.lang.StrategoException;
@@ -47,16 +45,13 @@
 		@Override
 		public void run() {
 			try {
-				InputStreamReader streamReader = new InputStreamReader(input);
-				BufferedReader reader = new BufferedReader(streamReader);
-				
-				// NOTE: This might block if exceptionally long lines are printed
-				String line;
-				while ((line = reader.readLine()) != null) {
-					output.println(line);
+				byte[] buffer = new byte[512];
+				int read = 0;
+				while ((read = input.read(buffer, 0, 512)) != -1) {
+					output.write(buffer, 0, read);
 				}
 				
-				reader.close();
+				input.close();
 				output.flush();
 			} catch (IOException e) {
 				throw new StrategoException("IO Exception redirecting output from Process", e);

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java	2009-11-13 13:36:17 UTC (rev 20234)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java	2009-11-15 10:52:34 UTC (rev 20235)
@@ -12,7 +12,6 @@
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
@@ -49,7 +48,7 @@
 				return false;
 			}
 			
-			String[] commandArgs = toCommandArgs(program, tvars);
+			String[] commandArgs = toCommandArgs(program, tvars[1].getAllSubterms());
 			if (commandArgs == null)
 				return false;
 			
@@ -74,26 +73,34 @@
 		}
 	}
 
-	private String[] toCommandArgs(String program, IStrategoTerm[] tvars) throws IllegalArgumentException {
-		IStrategoList args = (IStrategoList) tvars[1];
-		String[] result = new String[1 + args.size()];
-		result[0] = program;
+	public static String[] toCommandArgs(String program, IStrategoTerm[] args) throws IllegalArgumentException {
+		String[] results = new String[1 + args.length];
+		results[0] = handleSpacesInPath(addExecutableExtension(program));
 		
-		for (int i = 0; i < args.size(); i++) {
-			if (!isTermString(args.get(i)))
+		for (int i = 0; i < args.length; i++) {
+			if (!isTermString(args[i]))
 				return null;
-			result[i+1] = handleSpacesInPath(javaString(args.get(i)));
+			results[i+1] = handleSpacesInPath(javaString(args[i]));
 		}
 		
-		return result;
+		return results;
 	}
 	
-	private String handleSpacesInPath(String potentialPath) {
-		return (potentialPath.indexOf(' ') != -1 && isWindows())
-				? "\"" + potentialPath + "\""
-				: potentialPath;
+	private static String handleSpacesInPath(String potentialPath) {
+		if (potentialPath.indexOf(' ') != -1 && isWindows() && !potentialPath.startsWith("\"")) {
+			return "\"" + potentialPath + "\"";
+		} else {
+			return potentialPath;
+		}
 	}
 	
+	private static String addExecutableExtension(String command) {
+		if (!new File(command).exists() && isWindows()) {
+			if (new File(command + ".exe").exists()) return command + ".exe";
+		}
+		return command;
+	}
+	
 	private static boolean isWindows() {
 		// Java only publishes this as a string
 		return System.getProperty("os.name").toLowerCase().indexOf("win") != -1;

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-11-13 13:36:17 UTC (rev 20234)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-11-15 10:52:34 UTC (rev 20235)
@@ -177,7 +177,7 @@
 			return cached;
 			
 		} catch (ClassNotFoundException e) {
-			throw new MissingStrategyException("Could not dynamically call strategy " + className, e);
+			throw new MissingStrategyException("Could not load dynamically called strategy " + className, e);
 		} catch (IllegalArgumentException e) {
 			throw new MissingStrategyException("Could not dynamically call strategy " + className, e);
 		} catch (NoSuchFieldException e) {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str	2009-11-13 13:36:17 UTC (rev 20234)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/native-calls-compat.str	2009-11-15 10:52:34 UTC (rev 20235)
@@ -13,9 +13,9 @@
   // TODO: also implement fork-and-wait?
   
   override call =
-    // (Java extension)
+    // (Java extension) // FIXME: properly detect that <call> isn't invoking a class
     ?(program, args);
-    <is-substring(!"."); not(is-substring(!"/"))> program;
+    <where(is-substring(!".")); not(is-substring(!"/") + is-substring(!"\\") + file-exists)> program;
     if <is-list> args then
       prim("SSL_EXT_java_call", program, [program | args], 0)
     else

Added: strc-java/trunk/java/runtime/run.java
===================================================================
--- strc-java/trunk/java/runtime/run.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/run.java	2009-11-15 10:52:34 UTC (rev 20235)
@@ -0,0 +1,13 @@
+import org.strategoxt.HybridInterpreter;
+
+/**
+ * A helper class to invoke strategies using the command-line interface.
+ * Alias of start.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class run {
+	public static void main(String[] args) {
+		HybridInterpreter.main(args);
+	}
+}

Modified: strc-java/trunk/java/runtime/start.java
===================================================================
--- strc-java/trunk/java/runtime/start.java	2009-11-13 13:36:17 UTC (rev 20234)
+++ strc-java/trunk/java/runtime/start.java	2009-11-15 10:52:34 UTC (rev 20235)
@@ -1,45 +1,13 @@
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.MissingStrategyException;
-import org.strategoxt.lang.StrategoExit;
+import org.strategoxt.HybridInterpreter;
 
 /**
- * A helper class to invoke strategies using the command-line interface
- * (example usage: java -cp strategoxt.jar start org.strategoxt.strj.main).
+ * A helper class to invoke strategies using the command-line interface.
+ * Alias of run.
  * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class start {
-	public static void main(String[] strategyArgs) {
-		if (strategyArgs == null || strategyArgs.length < 1) {
-			System.out.println("Usage: start <package>.<strategy> <args>");
-			System.exit(127);
-		}
-		String strategy = strategyArgs[0];
-		String[] args = new String[strategyArgs.length - 1];
-		System.arraycopy(strategyArgs, 1, args, 0, args.length);
-		try {
-			Context context = new Context();
-			IStrategoTerm result;
-			try {
-				result = context.invokeStrategyCLI(strategy, strategy, args);
-			} finally {
-				context.getIOAgent().closeAllFiles();
-			}
-			if (result == null) {
-				System.err.println(strategy + (context.getTraceDepth() != 0
-								? ": rewriting failed, trace:"
-								: ": rewriting failed"));
-				context.printStackTrace();
-				System.exit(1);
-			} else {
-				System.exit(0);
-			}
-		} catch (MissingStrategyException e) {
-			e.printStackTrace();
-			System.exit(127);
-		} catch (StrategoExit e) {
-			System.exit(e.getValue());
-		}
+	public static void main(String[] args) {
+		HybridInterpreter.main(args);
 	}
 }

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str	2009-11-13 13:36:17 UTC (rev 20234)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/sdf2rtg.str	2009-11-15 10:52:34 UTC (rev 20235)
@@ -33,12 +33,13 @@
     if <get-config> "-Xnativepath" => nativepath; not("") then
       xtc-ensure-file => FILE(input)
     ; xtc-new-file    => output
-    ; input' := <try(abspath; file-exists)> input
+    ; tool'  := <conc-strings> (nativepath, <tool>)
+    ; input' := <abspath> input
     ; cwd    := <getcwd>
     ; <chdir <+ fatal-err(|"Native tool path not found")> nativepath
-    ; <call> (<tool>, ["-i", input', "-o", output | <args>])
+    ; <call> (tool', ["-i", input', "-o", output | <args>])
     ; if not(<file-exists> output) then // (shouldn't be reachable)
-        fatal-err(|["Native tool ", <tool>, " failed to produce an output file."])
+        fatal-err(|["Native tool ", tool', " failed to produce an output file."])
       end
     ; <chdir> cwd
     ; !FILE(output)
@@ -46,7 +47,7 @@
       xtc-transform(tool, args)
     end
   <+
-    <fatal-err(|[<tool>, " failed"])> <args <+ !"<args?>">
+    <fatal-err(|["Native tool ", <tool>, " failed"])> <args <+ !"<args?>">
 
   native-executables-option =
     ArgOption("-Xnativepath"

Modified: strc-java/trunk/test/Makefile.am
===================================================================
--- strc-java/trunk/test/Makefile.am	2009-11-13 13:36:17 UTC (rev 20234)
+++ strc-java/trunk/test/Makefile.am	2009-11-15 10:52:34 UTC (rev 20235)
@@ -1,11 +1,12 @@
 include $(top_srcdir)/Makefile.xt
 
-TESTFILES   = $(BASICTESTFILES) $(STRC1TESTFILES) $(STRC2TESTFILES) $(ASTERTESTFILES)
-JAVAFILES   = $(subst .str,.java,$(subst -,_,$(TESTFILES)))
-CLASSFILES  = $(subst .str,.java,$(subst -,_,$(TESTFILES)))
-CTREEFILES  = $(subst .java,.ctree,$(JAVAFILES))
-RUNNERFILES = $(subst .java,.runner,$(JAVAFILES))
-CLEANFILES  = $(JAVAFILES) $(CLASSFILES) $(CTREEFILES)
+TESTFILES    = $(BASICTESTFILES) $(STRC1TESTFILES) $(STRC2TESTFILES) $(ASTERTESTFILES)
+JAVAFILES    = $(subst .str,.java,$(subst -,_,$(TESTFILES)))
+CLASSFILES   = $(subst .str,.java,$(subst -,_,$(TESTFILES)))
+CTREEFILES   = $(subst .java,.ctree,$(JAVAFILES))
+RUNNERFILES  = $(subst .java,.runner,$(JAVAFILES))
+IRUNNERFILES = $(subst .java,.irunner,$(JAVAFILES))
+CLEANFILES   = $(JAVAFILES) $(CLASSFILES) $(CTREEFILES)
 
 EXTRA_DIST = \
   $(wildcard */*.str) \
@@ -107,6 +108,13 @@
 	@ echo "cd `dirname $<`; java -client -Xverify:none -Xss2m -cp `echo .:$(CLASSPATH) | sed 's!:../!:../../!g'` `basename $< .class`" > $@
 	@ chmod 755 $@
 
+%.irun : %.ctree
+	cd `dirname $<`; java -client -Xverify:none -Xss2m -cp `echo .:$(CLASSPATH) | sed 's!:../!:../../!g'` run `basename $<` main
+
+%.irunner : %.ctree
+	@ echo "cd `dirname $<`; java -client -Xverify:none -Xss2m -cp `echo .:$(CLASSPATH) | sed 's!:../!:../../!g'` run `basename $<` main" > $@
+	@ chmod 755 $@
+
 ExpStratego.def : Expressions.sdf ExpStratego.sdf
 PGEN_FLAGS = -m `basename $*`
 SDF2RTG_FLAGS = -m `basename $*`



From L.C.L.Kats at tudelft.nl  Sun Nov 15 12:06:26 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 15 Nov 2009 11:06:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20236 - LennartKats -
 in spoofax-imp/trunk:
 org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm
 org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego
 org.strategoxt.imp.feature org.strategoxt.imp.generator
 org.strategoxt.imp.generator/src/sdf2imp/project
 org.strategoxt.imp.generator/src/sdf2imp/services
 org.strategoxt.imp.generator/src/sdf2imp/util
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
 org.strategoxt.imp.nativebundle/META-INF
 org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle
 org.strategoxt.imp.runtime
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
 org.str! ategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter
 org.strategoxt.imp.updatesite org.strategoxt.imp.updatesite/features
 org.strategoxt.imp.updatesite/plugins
Message-ID: <200911151106.nAFB6QeX013056@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-15 11:06:25 +0000 (Sun, 15 Nov 2009)
New Revision: 20236

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20236&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/features/org.strategoxt.imp_0.1.0.2802.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/com.ibm.wala.shrike_1.1.3.200910251503.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.spoofax.aterm_0.2.3.200910251503.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.spoofax.compiler_0.3.9.200910251503.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.spoofax.interpreter.adapter.aterm_0.3.11.200910251503.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.spoofax.interpreter.core_0.3.13.200910251503.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.spoofax.interpreter.library.jsglr_0.3.9.200910251503.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.spoofax.interpreter_0.3.11.200910251503.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.spoofax.jsglr_0.2.1.200910251503.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.strategoxt.imp.editors.editorservice_0.1.0.2802.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.strategoxt.imp.editors.sdf_0.1.0.2802.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.strategoxt.imp.editors.stratego_0.1.0.2802.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.strategoxt.imp.generator_0.1.0.2802.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.strategoxt.imp.metatooling_0.1.0.2802.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.strategoxt.imp.runtime_0.1.0.2802.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/org.strategoxt.strj_0.2.3.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/sdf_eclipse_installer_1.0.10.42.jar
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/plugins/sdf_eclipse_installer_linux_x86_1.0.10.42.jar
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/StrategoSugarValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-classpath.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-colorer-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TokenColorerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixAnalyzer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/ProductionAttributeReader.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StringAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens/SGLRToken.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
Various fixes: runs on freaking Windows, out of the box.


Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermValidator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermValidator.java	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermValidator.java	2009-11-15 11:06:25 UTC (rev 20236)
@@ -5,7 +5,7 @@
 
 public class ATermValidator extends MetaFileLanguageValidator 
 { 
-  public Descriptor getDescriptor()
+  @Override public Descriptor getDescriptor()
   { 
     return ATermParseController.getDescriptor();
   }

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/StrategoSugarValidator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/StrategoSugarValidator.java	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/StrategoSugarValidator.java	2009-11-15 11:06:25 UTC (rev 20236)
@@ -5,7 +5,7 @@
 
 public class StrategoSugarValidator extends MetaFileLanguageValidator 
 { 
-  public Descriptor getDescriptor()
+  @Override public Descriptor getDescriptor()
   { 
     return StrategoSugarParseController.getDescriptor();
   }

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-15 11:06:25 UTC (rev 20236)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.1.1"
+      version="0.1.1.3"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">
@@ -215,39 +215,6 @@
          unpack="false"/>
 
    <plugin
-         id="sdf_eclipse_installer"
-         download-size="0"
-         install-size="0"
-         version="1.0.10.42"/>
-
-   <plugin
-         id="sdf_eclipse_installer_win32_x86"
-         os="win32"
-         arch="x86"
-         download-size="0"
-         install-size="0"
-         version="1.0.10.42"
-         fragment="true"/>
-
-   <plugin
-         id="sdf_eclipse_installer_linux_x86"
-         os="linux"
-         arch="x86"
-         download-size="0"
-         install-size="0"
-         version="1.0.10.42"
-         fragment="true"/>
-
-   <plugin
-         id="sdf_eclipse_installer_macosx_x86"
-         os="macosx"
-         arch="x86"
-         download-size="0"
-         install-size="0"
-         version="1.0.10.42"
-         fragment="true"/>
-
-   <plugin
          id="org.strategoxt.imp.editors.aterm"
          download-size="0"
          install-size="0"
@@ -258,6 +225,6 @@
          id="org.strategoxt.imp.nativebundle"
          download-size="0"
          install-size="0"
-         version="0.1.1.qualifier"/>
+         version="0.1.1.1"/>
 
 </feature>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties	2009-11-15 11:06:25 UTC (rev 20236)
@@ -2,7 +2,7 @@
 source.includes = src,src-gen/
 bin.includes = META-INF/,\
                includes,\
-               bin/,\
                lib/make_permissive.jar,\
                lib/sdf2imp.jar
-src.includes = src/
+src.includes = src/,\
+               lib/

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str	2009-11-15 11:06:25 UTC (rev 20236)
@@ -4,20 +4,11 @@
   libstratego-lib
 
 strategies
-
-  /* TODO: instead of copying jar files, use an Ant task to download them
-  <copy todir="dest" flatten="true">
-      <resources>
-      <file file="src_dir/file1.txt"/>
-      <url url="http://ant.apache.org/index.html"/>
-    </resources>
-  </copy>
-  */  
   
   copy-jars =
     if JarLocations then
       verbose-msg(!"Copying jar files", JarLocations; separate-by(|","); concat-strings);
-      <file-exists <+ mkdir> "aux/";
+      <file-exists <+ mkdir> "utils";
       JarLocations;
-      list-loop(<copy-file> (<id>, "aux/"))
+      list-loop(<copy-file> (<id>, "utils"))
     end

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-15 11:06:25 UTC (rev 20236)
@@ -88,8 +88,8 @@
             <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
-        <target name="sdf2imp.standalone" depends="sdf2table,aux-files" unless="eclipse.running">
-            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="aux/sdf2imp.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="sdf2imp.standalone" depends="sdf2table,utils-files" unless="eclipse.running">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="utils/sdf2imp.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
@@ -121,8 +121,8 @@
             <antcall target="make-permissive.helper"/>
         </target>
     
-        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="aux-files">
-            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="utils-files">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="utils/make_permissive.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.def"/>
@@ -132,14 +132,14 @@
             </java>
         </target>
 
-        <target name="aux-files" unless="aux-files.available">
+        <target name="utils-files" unless="utils-files.available">
             <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
-        	<property name="aux-files.available" value="1"/>
-            <mkdir dir="aux"/>
+        	<property name="utils-files.available" value="1"/>
+            <mkdir dir="utils"/>
             <parallel>
-                <get src="${site}/strategoxt.jar" dest="aux/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/make_permissive.jar" dest="aux/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/sdf2imp.jar" dest="aux/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/sdf2imp.jar" dest="utils/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
             </parallel>
         </target>
     
@@ -154,8 +154,8 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" depends="aux-files" unless="pack-sdf.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="pack-sdf.helper" depends="utils-files" unless="pack-sdf.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
                 <arg value="-i"/>
@@ -187,8 +187,8 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" depends="aux-files" unless="rtg2sig.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="rtg2sig.helper" depends="utils-files" unless="rtg2sig.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
                 <arg value="-i"/>
@@ -209,8 +209,8 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" depends="aux-files" unless="sdf2rtg.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="sdf2rtg.helper" depends="utils-files" unless="sdf2rtg.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>
                 <arg value="-i"/>
@@ -234,8 +234,8 @@
             <antcall target="ppgen.helper"/>
         </target>
     
-        <target name="ppgen.helper" depends="aux-files" unless="ppgen.available">
-            <java classname="start" dir="${include}" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="ppgen.helper" depends="utils-files" unless="ppgen.available">
+            <java classname="start" dir="${include}" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-ppgen"/>
                 <arg value="-i"/>
@@ -278,12 +278,12 @@
                 <param name="build.stratego.extraargs" value="-la java-front"/>
                 <param name="build.stratego.extension" value="java"/>
             </antcall>
-            <javac classpath="aux/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="aux-files" unless="strc-java.available" if="build.stratego.enabled">
-            <java classname="org.strategoxt.strj.Main" classpath="aux/strategoxt.jar:aux/sdf2imp.jar" failonerror="true" fork="true">
+        <target name="stratego.jvm.helper" depends="utils-files" unless="strc-java.available" if="build.stratego.enabled">
+            <java classname="org.strategoxt.strj.Main" classpath="utils/strategoxt.jar:utils/sdf2imp.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${trans}/${strmodule}.str"/>
@@ -343,7 +343,7 @@
                 <param name="build.stratego.extension" value="java"/>
                 <param name="build.stratego.compiler" value="strj"/>
             </antcall>
-            <javac classpath="aux/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
 */

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-11-15 11:06:25 UTC (rev 20236)
@@ -25,7 +25,7 @@
 <launchConfiguration type=\"org.eclipse.ant.AntLaunchConfigurationType\">
 <stringAttribute key=\"bad_container_name\" value=\".externalToolBuilders\"/>
 <booleanAttribute key=\"org.eclipse.ant.ui.DEFAULT_VM_INSTALL\" value=\"false\"/>
-<stringAttribute key=\"org.eclipse.debug.core.ATTR_REFRESH_SCOPE\" value=\"${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/", project-name, "/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/", project-name, "/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/", project-name, "/aux&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}\"/>
+<stringAttribute key=\"org.eclipse.debug.core.ATTR_REFRESH_SCOPE\" value=\"${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/", project-name, "/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/", project-name, "/editor/java&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/", project-name, "/utils&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}\"/>
 <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">
 <listEntry value=\"/", project-name, "/build.xml\"/>
 </listAttribute>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-classpath.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-classpath.str	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-classpath.str	2009-11-15 11:06:25 UTC (rev 20236)
@@ -14,7 +14,7 @@
 	<classpathentry kind="src" path="editor/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="lib" path="aux/strategoxt.jar"/>
+	<classpathentry kind="lib" path="utils/strategoxt.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
     <%

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-15 11:06:25 UTC (rev 20236)
@@ -27,32 +27,50 @@
   libstratego-aterm
   include/", sdf-name, "
 
-rules // Main editor interface (defined by the .esv files)
+/**
+ * Main editor interface
+ * (defined by the ", sdf-name, "-Builders/-References.esv files)
+ */
+rules
   
   /**
    * Analyzes the current program.
-   * Returns a Tuple with errors, warnings, and notes;
-   * each a list of (term, message) tuples.
+   * Returns a tuple with errors, warnings, and notes;
+   * each a list of (term, message) tuples or simply (message) terms.
    */
   editor-analyze:
     (ast, path, project-path) -> (errors, warnings, notes)
     with
-      // Analysis: scope and record dynamic rules
+      // Ensure all dynamic rules are properly scoped
       try(dr-scope-all-end);
       dr-scope-all-start;
+      // Analysis: record all entity declarations
       alltd(record-entity)
     with
-      errors   := <collect-all(include-origin(constraint-error))> ast;
-      warnings := <collect-all(include-origin(constraint-warning))> ast;
-      notes    := <collect-all(include-origin(constraint-note))> ast
+      // Collect all feedback markers
+      errors   := <collect-all(constraint-error)> ast;
+      warnings := <collect-all(constraint-warning)> ast;
+      notes    := <collect-all(constraint-note)> ast
+
+  /**
+   * Records the definition of an entity in a dynamic rule GetEntity.
+   */
+  record-entity:
+    Entity(x, body) -> Entity(x, body)
+    with
+      rules(
+        GetEntity :+ x -> x
+      )
   
   /**
    * Resolves a reference when the user control-clicks or presses F3 in the editor.
-   * For the entities language, only Type(_) nodes are resolved by default.
+   * For the entities language, we only resolve references for Type(_) nodes.
    */
   editor-resolve:
     (Type(type), position, ast, path, project-path) -> target
     where
+      // This rule only successfully evaluates if it can 
+      // lookup the entity for this type, as recorded in record-entity.
       target := <GetEntity> type
 
   /**
@@ -78,33 +96,22 @@
     with
       filename      := <guarantee-extension(|\"aterm\")> path;
       result-string := <pp-aterm-box; box2text-string(|120)> selected
-  
-  /**
-   * Adds the originating term to the result of a constraint rule,
-   * and concatenates strings in the resulting message if necessary.
-   */
-  include-origin(s):
-    t -> (t', message')
-    where
-      result := <s> t
-    with
-      if not(!result => (t', message)) then
-        message := result;
-        t'      := t
-      end;
-      message' := <try(all(is-string <+ write-to-string); concat-strings)> message
 
-rules // Semantic rules
+/**
+ * Semantic rules
+ */
+rules
     
   /**
    * Reports an error if a property type is undefined.
+   * This error is reported on the type name.
    */
   constraint-error:
-    Property(x, Type(type)) -> [\"Type \", type, \" is not defined\"]
+    Property(x, Type(type)) -> (type, [\"Type \", type, \" is not defined\"])
     where
-      not(!type => \"String\");
+      not(!type => \"String\"); // String and Int are built-in types
       not(!type => \"Int\");
-      not(<GetEntity> type)
+      not(<GetEntity> type) // no entity for this type
   
   /**
    * Reports an error if an entity is defined more than once.
@@ -130,23 +137,20 @@
    * Adds a note to modules named \"example.\"
    */
   constraint-note:
-    Module(\"example\", _) -> \"This is just an example program in the \\\"entities\\\" language (this note is defined in trans/", name, ".str)\"
+    Module(x, _) -> (x, [\"This is just an example program in the \\\"entities\\\" language,\"
+                         \" (this note is defined in trans/", name, ".str) ])\"])
+    where
+      !x => \"example\"
 
-  /**
-   * Records the definition of an entity in a dynamic rule GetEntity.
-   */
-  record-entity:
-    Entity(x, body) -> Entity(x, body)
-    with
-      rules(
-        GetEntity :+ x -> x
-      )
-
 signature constructors
 
-  // These definitions are not strictly necessary, but they
-  // ensure that the build doesn't break if the example syntax
-  // is changed and these constructors no longer exist.
+  // HACK: Below are copies of the signatures of the terms used in this file.
+  // These definitions are actually automatically generated in the imported
+  // include/", sdf-name, ".str module. However, to ensure that this example
+  // file doesn't break if the syntax is changed, we also include them here.
+  // Consider this a newbie treat; now that you got this far reading through
+  // this file, just try removing them and see if the build still works! ;)
+  
   Module   : ID * List(Entity)   -> Module
   Entity   : ID * List(Property) -> Entity
   Property : ID * Type           -> Property

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-colorer-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-colorer-descriptor.str	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-colorer-descriptor.str	2009-11-15 11:06:25 UTC (rev 20236)
@@ -47,13 +47,13 @@
         
         colorer Default, token-based highlighting
         ~
-          keyword    = 127 0 85     bold
-          identifier = default
-          string     = blue
-          number     = darkgreen
-          var        = 255 0 100    italic
-          operator   = 0 0 128
-          layout     = 100 100 0    italic
+          keyword    : 127 0 85     bold
+          identifier : default
+          string     : blue
+          number     : darkgreen
+          var        : 255 0 100    italic
+          operator   : 0 0 128
+          layout     : 100 100 0    italic
         
         colorer System colors
         ~

Added: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str	2009-11-15 11:06:25 UTC (rev 20236)
@@ -0,0 +1,24 @@
+module sdf2imp/util/common
+
+imports
+
+  libstratego-lib
+
+strategies
+
+  // (Used from StrategoObserver.java)
+  postprocess-feedback-results =
+    flatten-list;
+    map(
+      (is-tuple <+ !(<id>, <id>));
+      (id, postprocess-feedback-message)
+    )
+  
+  internal postprocess-feedback-message =
+    if is-list then
+      flatten-list;
+      map(is-string <+ write-to-string);
+      concat-strings
+    else
+      is-string <+ write-to-string
+    end
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/NativePrefixAntPropertyProvider.java	2009-11-15 11:06:25 UTC (rev 20236)
@@ -14,7 +14,7 @@
 	public String getAntPropertyValue(String antPropertyName) {
 		try {
 			// Ensure proper chmod first
-			return SDFBundleCommand.getInstance().getBinaryPath().getAbsolutePath();
+			return SDFBundleCommand.getInstance().getBinaryPath();
 		} catch (IOException e) {
 			Environment.logException("Could not determine the prefix path for the native tool bundle", e);
 			return ".";

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-11-15 11:06:25 UTC (rev 20236)
@@ -13,6 +13,7 @@
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.jface.operation.IRunnableWithProgress;
@@ -113,7 +114,8 @@
 		monitor.beginTask("Creating " + languageName + " project", TASK_COUNT);
 		
 		monitor.setTaskName("Preparing project builder");
-		EditorIOAgent agent = new EditorIOAgent();		
+		EditorIOAgent agent = new EditorIOAgent();
+		agent.setAlwaysActivateConsole(true);
 		Context context = new Context(Environment.getTermFactory(), agent);
 		context.registerClassLoader(make_permissive.class.getClassLoader());
 		sdf2imp.init(context);
@@ -128,15 +130,21 @@
 
 		agent.setWorkingDir(project.getLocation().toOSString());
 		try {
+			
 			String jar1 = org.strategoxt.stratego_lib.Main.class.getProtectionDomain().getCodeSource().getLocation().getFile();
 			String jar2 = make_permissive.class.getProtectionDomain().getCodeSource().getLocation().getFile();
 			String jar3 = sdf2imp.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+			if (Platform.getOS().equals(Platform.OS_WIN32)) { // FIXME: proper paths on Windows
+				jar1 = jar1.substring(1);
+				jar2 = jar2.substring(1);
+				jar3 = jar3.substring(1);
+			}
 			if (!jar1.endsWith(".jar")) { // ensure correct jar at development time
 				String jar1a = jar1 + "/../strategoxt.jar";
 				if (new File(jar1a).exists()) jar1 = jar1a;
 			}
 			assert jar1.endsWith(".jar") && jar2.endsWith(".jar") && jar3.endsWith(".jar") : "Library files are not in JAR"; // please refresh the strj projectin Eclipse
-			sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "-jar", jar1, jar2, jar3);
+			sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "--verbose", "2", "-jar", jar1, jar2, jar3);
 		} catch (StrategoErrorExit e) {
 			Environment.logException(e);
 			throw new StrategoException("Project builder failed: " + e.getMessage() + "\nLog follows:\n\n"

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	2009-11-15 11:06:25 UTC (rev 20236)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: Nativebundle Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.nativebundle
-Bundle-Version: 0.1.1.qualifier
+Bundle-Version: 0.1.1.1
 Bundle-Activator: org.strategoxt.imp.nativebundle.Activator
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	2009-11-15 11:06:25 UTC (rev 20236)
@@ -21,6 +21,7 @@
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoException;
 import org.strategoxt.lang.compat.NativeCallHelper;
+import org.strategoxt.lang.compat.SSL_EXT_call;
 import org.strategoxt.stratego_xtc.xtc_command_1_0;
 
 /**
@@ -37,13 +38,17 @@
 	
 	private final xtc_command_1_0 proceed = xtc_command_1_0.instance;
 	
-	private File binaryPath;
+	private String binaryPath;
 	
 	private String binaryExtension;
 	
+	private boolean initialized;
+	
 	public void init() throws IOException {
+		if (initialized) return;
 		binaryPath = getBinaryPath();
 		binaryExtension = getBinaryExtension();
+		
 		String os = Platform.getOS();
 		if (os.equals(Platform.OS_LINUX) || os.equals(Platform.OS_MACOSX)) {
 			EditorIOAgent agent = new EditorIOAgent();
@@ -52,9 +57,10 @@
 				Environment.logException("chmod of native tool bundle executables failed:\n" + agent.getLog());
 		}
 		Debug.log("Initialized the native tool bundle in " + getBinaryPath());
+		initialized = true;
 	}
 	
-	public File getBinaryPath() throws IOException, UnsupportedOperationException {
+	public String getBinaryPath() throws IOException, UnsupportedOperationException {
 		String os = Platform.getOS();
 		String subdir;
 		if (os.equals(Platform.OS_LINUX)) {
@@ -71,7 +77,7 @@
 		File result = new File(FileLocator.toFileURL(url).getPath());
 		if (!result.exists())
 			throw new FileNotFoundException(result.getAbsolutePath());
-		return result;
+		return result.getAbsolutePath() + File.separator;
 	}
 	
 	public String getBinaryExtension() {
@@ -89,7 +95,7 @@
 		try {
 			init();
 		} catch (IOException e) {
-			Environment.logException("Could not determine the prefix path for the native tool bundle (" 
+			Environment.logException("Could not determine the binary path for the native tool bundle (" 
 					+ Platform.getOS() + "/" + Platform.getOSArch()
 					+ ")", e);
 			return proceed.invoke(context, args, commandStrategy);
@@ -104,10 +110,10 @@
 			return proceed.invoke(context, args, commandStrategy);
 		
 		String command = ((IStrategoString) commandTerm).stringValue();
-		if (!new File(binaryPath + "/" + command + binaryExtension).exists()) {
+		if (!new File(binaryPath + command + binaryExtension).exists()) {
 			if (command.equals("sdf2table") || command.equals("implodePT")) {
-				Environment.logException("Could not find the native tool bundle command "
-						+ command + " in " + binaryPath);
+				throw new StrategoException("Could not find the native tool bundle command "
+						+ command + " in " + binaryPath + command + binaryExtension);
 			}
 			return proceed.invoke(context, args, commandStrategy);
 		}
@@ -130,52 +136,44 @@
 	}
 
 	private boolean invoke(Context context, String command, IStrategoTerm[] argList) throws StrategoException {
+		String[] commandArgs = SSL_EXT_call.toCommandArgs(binaryPath + command, argList);
+		IOAgent io = context.getIOAgent();
+		
 		try {
- 			String[] commandArgs = toCommandArgs(command, argList);
 			if (commandArgs == null) return false;
-			String path = binaryPath.getAbsolutePath() + System.getProperty("path.separator") + System.getenv("PATH");
-			String[] environment = { "PATH=" + path, 
-					                 "LD_LIBRARY_PATH=" + binaryPath.getParentFile().getAbsolutePath() + "/lib" };
-			IOAgent io = context.getIOAgent();
 			PrintStream out = io.getOutputStream(IOAgent.CONST_STDOUT);
 			PrintStream err = io.getOutputStream(IOAgent.CONST_STDERR);
 
-			Debug.log("Invoking " + binaryPath + "/" + command + binaryExtension + " " + Arrays.toString(argList));
-			int result = new NativeCallHelper().call(commandArgs, environment, new File(io.getWorkingDir()), out, err);
+			err.println(("Invoking native tool " + binaryPath + command + binaryExtension + " " + Arrays.toString(argList)));
+			int result = new NativeCallHelper().call(commandArgs, null, new File(io.getWorkingDir()), out, err);
 			if (result != 0) {
 				Environment.logException("Native tool " + command
 						+ " exited with error code " + result
 						+ "\nCommand:\n  " + Arrays.toString(commandArgs)
-						+ "\nWorking dir:\n  " + io.getWorkingDir()
-						+ "\nEnvironment:\n  " + Arrays.toString(environment));
+						+ "\nWorking dir:\n  " + io.getWorkingDir());
 			}
 			return result == 0;
 		} catch (IOException e) {
-			return false;
+			throw new StrategoException("Could not call native tool " + command
+					+ "\nCommand:\n  " + Arrays.toString(commandArgs)
+					+ "\nWorking dir:\n  " + io.getWorkingDir(), e);
 		} catch (InterruptedException e) {
 			throw new StrategoException("Could not call " + command, e);
+		} catch (RuntimeException e) {
+			throw new StrategoException("Could not call native tool " + command
+					+ "\nCommand:\n  " + Arrays.toString(commandArgs)
+					+ "\nWorking dir:\n  " + io.getWorkingDir(), e);
 		}
 	}
-
-	private String[] toCommandArgs(String command, IStrategoTerm[] argList) {
-		String[] commandArgs = new String[argList.length + 1];
-		int i = 1;
-		for (IStrategoTerm arg : argList) {
-			if (arg.getTermType() != STRING) return null;
-			commandArgs[i++] = handleSpacesInPath(((IStrategoString) arg).stringValue());
-		}
-		commandArgs[0] = binaryPath + "/" + command + binaryExtension;
-		return commandArgs;
-	}
 	
 	private boolean makeExecutable(IOAgent io, String command) {
 		try {
 			PrintStream out = io.getOutputStream(IOAgent.CONST_STDOUT);
 			PrintStream err = io.getOutputStream(IOAgent.CONST_STDERR);
-			command = binaryPath + "/" + command + binaryExtension;
+			command = binaryPath + command + binaryExtension;
 			// /bin/sh should exist even on NixOS
 			String[] commandArgs = { "/bin/sh", "-c", "chmod +x \"" + command + "\"" };
-			int result = new NativeCallHelper().call(commandArgs, binaryPath, out, err);
+			int result = new NativeCallHelper().call(commandArgs, new File(binaryPath), out, err);
 			return result == 0;
 		} catch (InterruptedException e) {
 			Environment.logException("chmod failed: /bin/sh -c \"chmod +x " + command + "\"", e);
@@ -185,10 +183,4 @@
 			return false;
 		}
 	}
-	
-	private String handleSpacesInPath(String potentialPath) {
-		return (potentialPath.indexOf(' ') != -1 && Platform.getOS().equals(Platform.OS_WIN32))
-				? "\"" + potentialPath + "\""
-				: potentialPath;
-	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch	2009-11-15 11:06:25 UTC (rev 20236)
@@ -12,7 +12,7 @@
 <stringAttribute key="configLocation" value="${workspace_loc}/.metadata/.plugins/org.eclipse.pde.core/Spoofax-IMP (with assertions)"/>
 <booleanAttribute key="default" value="true"/>
 <booleanAttribute key="includeOptional" value="true"/>
-<stringAttribute key="location" value="${workspace_loc}/../runtime-spoofax-imp"/>
+<stringAttribute key="location" value="${workspace_loc}/../runtime-spoofax-imp (with spaces)"/>
 <stringAttribute key="org.eclipse.debug.core.source_locator_id" value="org.eclipse.pde.ui.launcher.PDESourceLookupDirector"/>
 <stringAttribute key="org.eclipse.debug.core.source_locator_memento" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;sourceLookupDirector&gt;&#10;&lt;sourceContainers duplicates=&quot;false&quot;&gt;&#10;&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;folder nest=&amp;quot;false&amp;quot; path=&amp;quot;/webdsl/src/bin&amp;quot;/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.debug.core.containerType.folder&quot;/&gt;&#10;&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;default/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.debug.core.containerType.default&quot;/&gt;&#10;&lt;/sourceContainers&gt;&#10;&lt;/sourceLookupDirector&gt;&#10;"/>
 <listAttribute key="org.eclipse.debug.ui.favoriteGroups">

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2009-11-15 11:06:25 UTC (rev 20236)
@@ -130,6 +130,9 @@
 		return getParseController().getProject();
 	}
 	
+	/**
+	 * @see SGLRParseController#getCurrentAst
+	 */
 	public final IStrategoAstNode getCurrentAst() {
 		return getParseController().getCurrentAst();
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java	2009-11-15 11:06:25 UTC (rev 20236)
@@ -1,23 +1,21 @@
 package org.strategoxt.imp.runtime.dynamicloading;
 
-import static org.spoofax.interpreter.core.Tools.*;
 import static org.spoofax.interpreter.terms.IStrategoTerm.*;
 
 import java.util.ArrayList;
 
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
- * Term reading utility class.
+ * Term reading utility class, extending {@link org.spoofax.interpreter.core.Tools}
+ * with new methods specific for reading descriptors.s
  * 
- * @see org.spoofax.interpreter.core.Tools
- * 	    A similar utility class, not specific for reading descriptors.
- * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class TermReader {
+public class TermReader extends Tools {
 	private TermReader() {
 		// TermReader cannot be constructed
 	}
@@ -86,7 +84,7 @@
 		return results.toString();
 	}
 	
-	public static int intAt(IStrategoTerm t, int index) {
+	public static int parseIntAt(IStrategoTerm t, int index) {
 		return Integer.parseInt(termContents(t.getSubterm(index)));
 	}
 	
@@ -95,9 +93,4 @@
 			return null;
 		return ((IStrategoAppl) t).getConstructor().getName();
 	}
-
-    @SuppressWarnings("unchecked") // casting is inherently unsafe, but doesn't warrant a warning here
-    public static<T extends IStrategoTerm> T termAt(IStrategoTerm t, int index) {
-        return (T) t.getSubterm(index);
-    }
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TokenColorerFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TokenColorerFactory.java	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TokenColorerFactory.java	2009-11-15 11:06:25 UTC (rev 20236)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.runtime.dynamicloading;
 
+import static org.spoofax.interpreter.core.Tools.*;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.*;
 
 import java.util.ArrayList;
@@ -104,7 +105,7 @@
 		if (cons(color).equals("ColorDefault") || cons(color).equals("NoColor")) {
 			return null;
 		} else if (cons(color).equals("ColorRGB")) {
-			return new LazyColor(intAt(color, 0), intAt(color, 1), intAt(color, 2));
+			return new LazyColor(parseIntAt(color, 0), parseIntAt(color, 1), parseIntAt(color, 2));
 		} else {
 			throw new IllegalArgumentException("Unknown color of type " + cons(color));
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2009-11-15 11:06:25 UTC (rev 20236)
@@ -5,6 +5,7 @@
 
 import org.spoofax.jsglr.BadTokenException;
 import org.spoofax.jsglr.Disambiguator;
+import org.spoofax.jsglr.FilterException;
 import org.spoofax.jsglr.NoRecovery;
 import org.spoofax.jsglr.NoRecoveryRulesException;
 import org.spoofax.jsglr.ParseTable;
@@ -30,6 +31,8 @@
 	
 	private SGLR parser;
 	
+	private boolean filtersBorked;
+	
 	// Initialization and parsing
 	
 	public JSGLRI(ParseTable parseTable, String startSymbol,
@@ -72,13 +75,12 @@
 	 */
 	void resetState() {
 		parser = Environment.createSGLR(parseTable);
+		parser.getDisambiguator().setFilterPriorities(!filtersBorked);
 		try {
 			parser.setRecoverHandler(recoverHandler);
 		} catch (NoRecoveryRulesException e) {
 			// Already handled/logged this error in setRecoverHandler()
 		}
-		// XXX: Must run with filters enabled, when they're no longer b0rked
-		parser.getDisambiguator().setFilterPriorities(false);
 	}
 	
 	private ATerm doParseNoImplode(InputStream inputStream, char[] inputChars)
@@ -89,6 +91,13 @@
 		
 		// Read stream using tokenizer/lexstream
 		
-		return parser.parse(inputStream, getStartSymbol());
+		try {
+			return parser.parse(inputStream, getStartSymbol());
+		} catch (FilterException e) {
+			Environment.logException("Parse filter failure - disabling priority filters and trying again", e);
+			filtersBorked = true;
+			parser.getDisambiguator().setFilterPriorities(false);
+			return parser.parse(inputStream, getStartSymbol());
+		}
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-11-15 11:06:25 UTC (rev 20236)
@@ -14,7 +14,7 @@
 import org.spoofax.jsglr.RecoveryConnector;
 import org.spoofax.jsglr.TokenExpectedException;
 import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.parser.ast.AsfixImploder;
+import org.strategoxt.imp.runtime.parser.ast.AsfixAnalyzer;
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
 import org.strategoxt.imp.runtime.parser.tokens.SGLRTokenizer;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKind;
@@ -144,7 +144,7 @@
 		ATermList contents = termAt(term, 1);
 		boolean lexicalStart = false;
 		
-		if (!inLexicalContext && AsfixImploder.isLexicalNode(rhs) || AsfixImploder.isVariableNode(rhs)) {
+		if (!inLexicalContext && AsfixAnalyzer.isLexicalNode(rhs) || AsfixAnalyzer.isVariableNode(rhs)) {
 			inLexicalContext = lexicalStart = true;
 		}
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-11-15 10:52:34 UTC (rev 20235)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-11-15 11:06:25 UTC (rev 20236)
@@ -4,6 +4,7 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.Iterator;
+import java.util.concurrent.locks.ReentrantLock;
 
 import lpg.runtime.IPrsStream;
 import lpg.runtime.IToken;
@@ -71,15 +72,26 @@
 	
 	private RootAstNode currentAst;
 	
+	private IPrsStream currentParseStream;
+	
 	private ISourceProject project;
 	
 	private IPath path;
 	
-	private boolean isStartupParsed;
+	private volatile boolean isStartupParsed;
+	
+	private ReentrantLock startupParseLock = new ReentrantLock();
 
 	// Simple accessors
 	
-	public final synchronized AstNode getCurrentAst() { 
+	/**
+	 * Gets the last parsed AST for this editor, or
+	 * tries to parse the file if it hasn't been parsed yet.
+	 * 
+	 * @return The parsed AST, or null if the file could not be parsed (yet).
+	 */
+	public final AstNode getCurrentAst() {
+		if (currentAst == null) forceInitialParse();
 		return currentAst;
 	}
 
@@ -147,8 +159,10 @@
     }
 
 	public AstNode parse(String input, boolean scanOnly, IProgressMonitor monitor) {
-		if (input.length() == 0)
+		if (input.length() == 0) {
+			currentParseStream = null;
 			return currentAst = null;
+		}
 		
 		if (getPath() == null)
 		    throw new IllegalStateException("SGLR parse controller not initialized");
@@ -163,8 +177,11 @@
 		try {
 			// while (PlatformUI.getWorkbench().getDisplay().readAndDispatch());
 			
+			// Can't do resource locking when Eclipse is still starting up; causes deadlock
 			if (isStartupParsed)
 				Job.getJobManager().beginRule(resource, monitor); // enter lock
+			else
+				startupParseLock.lock();
 			
 			Debug.startTimer();
 			
@@ -196,6 +213,7 @@
 			//       (the new ast should then also be delayed as to get the old coloring)
 			
 			currentAst = ast;
+			currentParseStream = parser.getParseStream();
 				
 			Debug.stopTimer("File parsed: " + filename);
 		} catch (ParseTimeoutException e) {
@@ -231,10 +249,12 @@
 			errorHandler.reportError(parser.getTokenizer(), e);
 			errorHandler.applyMarkers();
 		} finally {
-			if (isStartupParsed)
+			if (isStartupParsed) {
 				Job.getJobManager().endRule(resource);
-			else 
+			} else { 
 				isStartupParsed = true;
+				startupParseLock.unlock();
+			}
 		}
 		
 		if (!monitor.isCanceled())
@@ -294,27 +314,36 @@
 	 * Get a parse stream for the current file, enforcing a new parse
 	 * if it hasn't been parsed before.
 	 */
-	public IPrsStream getParseStream() {
+	private IPrsStream getParseStream() {
+		if (currentParseStream != null)
+			return currentParseStream;
+
+		forceInitialParse();
+		return currentParseStream;
+	}
+
+	private void forceInitialParse() {
 		try {
-			IPrsStream stream = parser.getParseStream();
+			if (!isStartupParsed) {
+				startupParseLock.lock();
+				startupParseLock.unlock();
+			}
+			if (currentAst != null && currentParseStream != null)
+				return;
 			
-			if (stream == null) {
-				InputStream input = getResource().getContents();
-	            InputStreamReader reader = new InputStreamReader(input);
-	            StringBuilder contents = new StringBuilder();
-	            char[] buffer = new char[2048];
-	            
-	            for (int read = 0; read != -1; read = reader.read(buffer))

(659 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Sun Nov 15 12:12:40 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 15 Nov 2009 11:12:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20237 - LennartKats -
	in strategoxt/trunk: stratego-libraries/lib/spec/system/io
	strc-core/lib/stratego/strc/pack
Message-ID: <200911151112.nAFBCeBU013093@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-15 11:12:40 +0000 (Sun, 15 Nov 2009)
New Revision: 20237

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20237&view=rev

Modified:
   strategoxt/trunk/stratego-libraries/lib/spec/system/io/file.str
   strategoxt/trunk/strc-core/lib/stratego/strc/pack/pack-stratego.str

Log:
STR-782: is-abspath and pack-stratego now recognize Windows-style X:\ and \ paths as absolute paths.


Changes:

Modified: strategoxt/trunk/stratego-libraries/lib/spec/system/io/file.str
===================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/system/io/file.str	2009-11-15 11:06:25 UTC (rev 20236)
+++ strategoxt/trunk/stratego-libraries/lib/spec/system/io/file.str	2009-11-15 11:12:40 UTC (rev 20237)
@@ -181,14 +181,15 @@
   /**
    * Succeeds if the input pathname is an absolute path.
    *
-   * A pathname is absolute if it starts with a /.
+   * A pathname is considered absolute if it starts with a /, a \,
+   * or X:\ for any letter X.
    *
    * @type  String -> String
    * @since 0.9.4
    * @inc   is-abs-path
    */
   is-abspath =
-    where(explode-string; ?['/' | _])
+    where(explode-string; (?['/'  | _] + ?[is-alpha, ':', '\' | _] + ?['\' | _]))
 
   /**
    * Succeeds if the input pathname is a relative path.

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/pack/pack-stratego.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/pack/pack-stratego.str	2009-11-15 11:06:25 UTC (rev 20236)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/pack/pack-stratego.str	2009-11-15 11:12:40 UTC (rev 20237)
@@ -128,7 +128,7 @@
             end
   
          pack-is-qualified =
-           ?['/' | _] + ?['.' | _ ]
+           ?['/' | _] + ?['.' | _ ] + ?['\' | _] + [is-alpha, ':', '\' | id]
 
      in ?(IncludePathName(<pack-qualify-pathname>), _)
       ; if file-exists then



From E.Visser at tudelft.nl  Mon Nov 16 10:27:32 2009
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 16 Nov 2009 09:27:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20238 - visser -
	bibtex-tools/trunk/pp
Message-ID: <200911160927.nAG9RWGH031831@proliant.st.ewi.tudelft.nl>

Author: visser
Date: 2009-11-16 09:27:32 +0000 (Mon, 16 Nov 2009)
New Revision: 20238

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20238&view=rev

Modified:
   bibtex-tools/trunk/pp/BibTeX-pretty.pp

Log:
pretty-print page fields

Changes:

Modified: bibtex-tools/trunk/pp/BibTeX-pretty.pp
===================================================================
--- bibtex-tools/trunk/pp/BibTeX-pretty.pp	2009-11-15 11:12:40 UTC (rev 20237)
+++ bibtex-tools/trunk/pp/BibTeX-pretty.pp	2009-11-16 09:27:32 UTC (rev 20238)
@@ -30,7 +30,7 @@
    Entries                    -- V[_1 _2 _3],
    Entries.2:iter-star        -- _1,
    Entries.2:iter-star.1:seq  -- _1 _2,
-   PagesField                 -- H[ "pages" "=" _1 ],
-   Pages                      -- H[ _1 "-" _2 ],
+   PagesField                 -- H[ "pages" "=" H hs=0["{" _1 "}" ","] ],
+   Pages                      -- H hs=0[ _1 "-" _2 ],
    Page                       -- H[ _1 ]
 ]



From L.C.L.Kats at tudelft.nl  Mon Nov 16 11:37:38 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 16 Nov 2009 10:37:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20239 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter
Message-ID: <200911161037.nAGAbcdR032747@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-16 10:37:37 +0000 (Mon, 16 Nov 2009)
New Revision: 20239

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20239&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeTuple.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeAppl.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java

Log:
Ensured the WrappedAstNode* classes have the exact same hashCode/equals/toString as the standard StrategoTerms.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeAppl.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeAppl.java	2009-11-16 09:27:32 UTC (rev 20238)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeAppl.java	2009-11-16 10:37:37 UTC (rev 20239)
@@ -78,16 +78,13 @@
 	
 	@Override
 	public int hashFunction() {
-        long r = constructorHashCode();
+        long r = constructor.hashCode();
         int accum = 6673;
-        for(int i = 0; i < getSubtermCount(); i++) {
-            r += getSubterm(i).hashCode() * accum;
+        IStrategoTerm[] kids = getAllSubterms();
+        for(int i = 0; i < kids.length; i++) {
+            r += kids[i].hashCode() * accum;
             accum *= 7703;
         }
         return (int)(r >> 12);
 	}
-	
-	private int constructorHashCode() {
-		return constructor.hashCode() + 5407 * getSubtermCount();
-	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java	2009-11-16 09:27:32 UTC (rev 20238)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java	2009-11-16 10:37:37 UTC (rev 20239)
@@ -27,7 +27,9 @@
 		} else if (node instanceof ListAstNode) {
 			return new WrappedAstNodeList(this, node);
 		} else {
-			return new WrappedAstNodeAppl(this, node);
+			return "()".equals(node.getConstructor())
+				? new WrappedAstNodeTuple(this, node)
+				: new WrappedAstNodeAppl(this, node);
 		}
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java	2009-11-16 09:27:32 UTC (rev 20238)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java	2009-11-16 10:37:37 UTC (rev 20239)
@@ -26,19 +26,33 @@
 
 	@Override
 	protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
-		if (second.getTermType() != IStrategoTerm.LIST)
-			return false;
-
-		IStrategoList snd = (IStrategoList) second;
-		if (size() != snd.size())
-			return false;
-		if (!getAnnotations().match(second.getAnnotations()))
-			return false;
-		for (int i = 0, sz = size(); i < sz; i++) {
-			if (!get(i).match(snd.get(i)))
-				return false;
-		}
-		return true;
+        if(second.getTermType() != IStrategoTerm.LIST)
+            return false;
+        
+        final IStrategoList snd = (IStrategoList) second;
+        if (size() != snd.size())
+            return false;
+        
+        if (!isEmpty()) {
+        	IStrategoTerm head = head();
+        	IStrategoTerm head2 = snd.head();
+        	if (head != head2 && !head.match(head2))
+        		return false;
+        	
+        	IStrategoList tail = tail();
+        	IStrategoList tail2 = snd.tail();
+        
+	        for (IStrategoList cons = tail, cons2 = tail2; !cons.isEmpty(); cons = cons.tail(), cons2 = cons2.tail()) {
+	            IStrategoTerm consHead = cons.head();
+				IStrategoTerm cons2Head = cons2.head();
+				if (consHead != cons2Head && !consHead.match(cons2Head))
+	                return false;
+	        }
+        }
+        
+        IStrategoList annotations = getAnnotations();
+        IStrategoList secondAnnotations = second.getAnnotations();
+        return annotations == secondAnnotations || annotations.match(secondAnnotations);
 	}
 
 	public final IStrategoTerm get(int index) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java	2009-11-16 09:27:32 UTC (rev 20238)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java	2009-11-16 10:37:37 UTC (rev 20239)
@@ -24,7 +24,7 @@
 
     public void prettyPrint(ITermPrinter pp) {
     	pp.print("\"");
-    	pp.print(wrappee.getValue().replace("\"", "\\\""));
+    	pp.print(stringValue().replace("\\", "\\\\").replace("\"", "\\\""));
     	pp.print("\"");
     	printAnnotations(pp);
     }

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeTuple.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeTuple.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeTuple.java	2009-11-16 10:37:37 UTC (rev 20239)
@@ -0,0 +1,97 @@
+package org.strategoxt.imp.runtime.stratego.adapter;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class WrappedAstNodeTuple extends WrappedAstNode implements IStrategoTuple {
+
+	protected WrappedAstNodeTuple(WrappedAstNodeFactory factory, IStrategoAstNode node) {
+		super(factory, node);
+	}
+
+	@Override
+	protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        if (second.getTermType() != IStrategoTerm.TUPLE)
+            return false;
+
+        IStrategoTuple snd = (IStrategoTuple) second;
+        if (size() != snd.size())
+            return false;
+
+        // TODO: optimize WrappedAstNodeTuple.doSlowMatch
+        //       (getAllSubterms() creates new arrays)
+        IStrategoTerm[] kids = getAllSubterms();
+        IStrategoTerm[] secondKids = snd.getAllSubterms();
+        if (kids != secondKids) {
+	        for (int i = 0, sz = kids.length; i < sz; i++) {
+	            IStrategoTerm kid = kids[i];
+				IStrategoTerm secondKid = secondKids[i];
+				if (kid != secondKid && !kid.match(secondKid)) {
+	                return false;
+	            }
+	        }
+        }
+        
+        IStrategoList annotations = getAnnotations();
+        IStrategoList secondAnnotations = second.getAnnotations();
+        return annotations == secondAnnotations || annotations.match(secondAnnotations);
+	}
+
+	public final IStrategoTerm get(int index) {
+		return getSubterm(index);
+	}
+
+	public final IStrategoTerm head() {
+		return getSubtermCount() == 0 ? null : get(0);
+	}
+
+	public final boolean isEmpty() {
+		return getSubtermCount() == 0;
+	}
+
+	public final int size() {
+		return getSubtermCount();
+	}
+
+	public int getTermType() {
+		return TUPLE;
+	}
+
+	public void prettyPrint(ITermPrinter pp) {
+        int sz = size();
+        if(sz > 0) {
+            pp.println("(");
+            pp.indent(2);
+            get(0).prettyPrint(pp);
+            for(int i = 1; i < sz; i++) {
+                pp.print(",");
+                pp.nextIndentOff();
+                get(i).prettyPrint(pp);
+                pp.println("");
+            }
+            pp.println("");
+            pp.print(")");
+            pp.outdent(2);
+
+        } else {
+            pp.print("()");
+        }
+        printAnnotations(pp);
+	}
+
+	@Override
+	public int hashFunction() {
+        long hc = 4831;
+        IStrategoTerm[] kids = getAllSubterms();
+        for(int i=0; i< kids.length;i++) {
+            hc *= kids[i].hashCode();
+        }
+        return (int)(hc >> 10);
+	}
+
+}



From L.C.L.Kats at tudelft.nl  Mon Nov 16 11:50:32 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 16 Nov 2009 10:50:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20240 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200911161050.nAGAoWf3000425@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-16 10:50:32 +0000 (Mon, 16 Nov 2009)
New Revision: 20240

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20240&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java

Log:


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2009-11-16 10:37:37 UTC (rev 20239)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2009-11-16 10:50:32 UTC (rev 20240)
@@ -32,7 +32,7 @@
     
     static final int TAB_SIZE = 8;
     
-    private static final Timer abortTimer = new Timer();
+    private static final Timer abortTimer = new Timer(true);
     
     private int abortTimerJobId;
 
@@ -273,7 +273,7 @@
     public final ATerm parse(String input) throws IOException, BadTokenException,
             TokenExpectedException, ParseException, SGLRException {
         
-        return parse(input);
+        return parse(input, null);
     }
     
     public ATerm parse(String input, String startSymbol) throws IOException, BadTokenException, TokenExpectedException, ParseException,
@@ -1036,7 +1036,7 @@
             //Tools.debug("Total Time: " + parseTime);
             m.setParseTime(parseTime);
             //Tools.debug("Total Count: " + parseCount);
-            Measures.setParseCount(parseCount);
+            Measures.setParseCount(++parseCount);
             //Tools.debug("Average Time: " + (int)parseTime / parseCount);
             m.setAverageParseTime((int)parseTime / parseCount);
             m.setRecoverTime(recoverHandler.getRecoverTime());



From L.C.L.Kats at tudelft.nl  Mon Nov 16 11:59:20 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 16 Nov 2009 10:59:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20241 - LennartKats -
	strc-java/trunk/java/runtime/org/strategoxt/lang
Message-ID: <200911161059.nAGAxK1B000563@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-16 10:59:20 +0000 (Mon, 16 Nov 2009)
New Revision: 20241

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20241&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java

Log:
Sanity check: WrappedATermFactory doesn't work atm.

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-11-16 10:50:32 UTC (rev 20240)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-11-16 10:59:20 UTC (rev 20241)
@@ -5,6 +5,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.StackTracer;
@@ -62,6 +63,9 @@
         addOperatorRegistry(ssl);
 
     	if (ioAgent != null) setIOAgent(ioAgent);
+    	
+    	if (factory instanceof WrappedATermFactory)
+    		throw new IllegalArgumentException("WrappedATermFactory is not supported at this time");
 
         compat.init();
     }



From L.C.L.Kats at tudelft.nl  Mon Nov 16 13:08:02 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 16 Nov 2009 12:08:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20242 - LennartKats -
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive
	sglr-recovery/trunk/recovery-runtime/src/sglrbridges
	spoofax-imp/trunk/org.strategoxt.imp.generator/lib
Message-ID: <200911161208.nAGC82fU001929@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-16 12:08:02 +0000 (Mon, 16 Nov 2009)
New Revision: 20242

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20242&view=rev

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr
   sglr-recovery/trunk/recovery-runtime/src/sglrbridges/StandardParser.java
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar

Log:
Disabled open bracket insertion rules by default: they were causing problems for some reason.

Changes:

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr	2009-11-16 10:59:20 UTC (rev 20241)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr	2009-11-16 12:08:02 UTC (rev 20242)
@@ -68,7 +68,7 @@
     )
   + SwitchOption(|
       OPEN_BRACKETS_ON()
-    , "on"
+    , "off"
     , "Add insertion rules for opening brackets"
     )
   + SwitchOption(|

Modified: sglr-recovery/trunk/recovery-runtime/src/sglrbridges/StandardParser.java
===================================================================
--- sglr-recovery/trunk/recovery-runtime/src/sglrbridges/StandardParser.java	2009-11-16 10:59:20 UTC (rev 20241)
+++ sglr-recovery/trunk/recovery-runtime/src/sglrbridges/StandardParser.java	2009-11-16 12:08:02 UTC (rev 20242)
@@ -8,6 +8,7 @@
 import org.spoofax.jsglr.BadTokenException;
 import org.spoofax.jsglr.InvalidParseTableException;
 import org.spoofax.jsglr.SGLRException;
+import org.spoofax.jsglr.StructureRecoveryAlgorithm;
 import org.spoofax.jsglr.TokenExpectedException;
 import org.strategoxt.imp.runtime.parser.CSGLRI;
 import org.strategoxt.imp.runtime.parser.StandAloneSGLRI;
@@ -59,6 +60,11 @@
 			FileNotFoundException, TokenExpectedException, BadTokenException,
 			SGLRException {
 
+		try {
+			parser.setRecoverHandler(new StructureRecoveryAlgorithm());
+		} catch (Exception e) {
+			throw new RuntimeException(e);
+		}
 		return parser.parse(new FileInputStream(path), path);
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Mon Nov 16 13:42:00 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 16 Nov 2009 12:42:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20243 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
	strc-java/trunk/java
Message-ID: <200911161242.nAGCg0XM002415@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-16 12:42:00 +0000 (Mon, 16 Nov 2009)
New Revision: 20243

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20243&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
- Fixed a critical (but silly) bug in the eagerness post-parse filter,
  which caused some ambiguities to remain in the tree, triggering an
  exception in the priorities filter.

- Enabled the priorities filter by default.

- Added a new setFilterStrict() accessor to enable or disable strict
  checking in the priorities filter (some ambiguities remain
  unfiltered causing this problem right now).


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2009-11-16 12:08:02 UTC (rev 20242)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2009-11-16 12:42:00 UTC (rev 20243)
@@ -48,6 +48,8 @@
     
     private boolean filterPriorities;
     
+    private boolean filterStrict;
+    
     // Current parser state
 
     private AmbiguityManager ambiguityManager;
@@ -131,6 +133,19 @@
         return filterPriorities;
     }
     
+    /**
+     * Sets whether to enable strict filtering, triggering a
+     * FilterException when the priorities filter encounters
+     * an unfiltered ambiguity.
+     */
+    public void setFilterStrict(boolean filterStrict) {
+        this.filterStrict = filterStrict;
+    }
+    
+    public boolean getFilterStrict() {
+        return filterStrict;
+    }
+    
     public final void setHeuristicFilters(boolean heuristicFilters) {
         setFilterIndirectPreference(heuristicFilters);
         setFilterPreferenceCount(heuristicFilters);
@@ -146,7 +161,7 @@
     }
     
     public final void setDefaultFilters() {
-        filterAny = true; // TODO: filter by default
+        filterAny = true;
         filterCycles = false; // TODO: filterCycles; enable by default
         filterDirectPreference = true;        
         filterIndirectPreference = false;        
@@ -155,37 +170,41 @@
         filterTopSort = true;        
         filterReject = true;
         filterAssociativity = true;
-        filterPriorities = false; // XXX: filterPriorities true by default when no longer borked
+        filterPriorities = true;
+        filterStrict = false; // TODO: disable filterStrict hack
     }
     
     public Disambiguator() {
         setDefaultFilters();
     }
 
-    public ATerm applyFilters(SGLR parser, IParseNode root, String sort, int inputLength) throws SGLRException {
+    public ATerm applyFilters(SGLR parser, IParseNode root, String sort, int inputLength) throws SGLRException, FilterException {
+        try {
+            if(SGLR.isDebugging()) {
+                Tools.debug("applyFilters()");
+            }
+            
+            initializeFromParser(parser);
+    
+            IParseNode t = root;
+    
+            t = applyTopSortFilter(sort, t);
+            
+            if (filterAny) {
+                t = applyCycleDetectFilter(t);
         
-        if(SGLR.isDebugging()) {
-            Tools.debug("applyFilters()");
+                // SG_FilterTree
+                ambiguityManager.resetClustersVisitedCount();
+                t = filterTree(t, false);
+            }
+            
+            // TODO: Move convertToATerm to SGLR.java and support IStrategoTerms
+            ATerm result = convertToATerm(t);
+            assert Term.asAppl(result).getAFun().getName().equals("parsetree");
+            return result;
+        } catch (RuntimeException e) {
+            throw new FilterException(parser, "Runtime exception when applying filters", e);
         }
-        
-        initializeFromParser(parser);
-
-        IParseNode t = root;
-
-        t = applyTopSortFilter(sort, t);
-        
-        if (filterAny) {
-            t = applyCycleDetectFilter(t);
-    
-            // SG_FilterTree
-            ambiguityManager.resetClustersVisitedCount();
-            t = filterTree(t, false);
-        }
-        
-        // TODO: Move convertToATerm to SGLR.java and support IStrategoTerms
-        ATerm result = convertToATerm(t);
-        assert Term.asAppl(result).getAFun().getName().equals("parsetree");
-        return result;
     }
 
     private void initializeFromParser(SGLR parser) {
@@ -476,7 +495,6 @@
 
     private IParseNode applyPriorityFilter(ParseNode t, Label prodLabel) throws FilterException {
         // SG_Priority_Filter
-        // - fishy
         
         if(SGLR.isDebugging()) {
             Tools.debug("applyPriorityFilter() - ", t);
@@ -489,9 +507,9 @@
         int l0 = prodLabel.labelNumber;
         int kidnumber = 0;
 
-        for (IParseNode alt : kids) {
-            IParseNode newKid = alt;
-            IParseNode injection = jumpOverInjections(alt);
+        for (IParseNode kid : kids) {
+            IParseNode newKid = kid;
+            IParseNode injection = jumpOverInjections(kid);
 
             if (injection instanceof Amb) {
                 List<IParseNode> ambs = ((Amb) injection).getAlternatives();
@@ -515,9 +533,15 @@
                     } else {
                         n = newAmbiguities.get(0);
                     }
-                    newKid = replaceUnderInjections(alt, injection, n);
+                    newKid = replaceUnderInjections(kid, injection, n);
                 } else {
-                    throw new FilterException(parser);
+                    // fishy: another filter might be borked
+                    if (filterStrict) {
+                        throw new FilterException(parser);
+                    } else {
+                        // TODO: log or whatever?
+                        return t;
+                    }
                 }
             } else if (injection instanceof ParseNode) {
                 int l1 = ((ParseNode) injection).label;
@@ -675,7 +699,7 @@
             List<IParseNode> oldAmbiguities = new LinkedList<IParseNode>();
             oldAmbiguities.addAll(newAmbiguities);
             for (IParseNode amb : oldAmbiguities) {
-                if (newAmbiguities.remove(amb)) {
+                if (newAmbiguities.remove(amb)) { // TODO: optimize - use index (avoid equals() check)
                     newAmbiguities = filterAmbiguityList(newAmbiguities, amb);
                 }
             }
@@ -907,7 +931,7 @@
         if (left instanceof Amb || right instanceof Amb)
             return FILTER_DRAW;
 
-        if (!left.equals(right))
+        if (!getLabel(left).equals(getLabel(right)))
             return filterOnDirectPrefers(left, right);
 
         ParseNode l = (ParseNode) left;
@@ -939,6 +963,7 @@
             Tools.debug("filterOnDirectPrefers()");
         }
 
+        // TODO: optimize - move up the jumpOverInjectionsModuloEagerness calls
         if (isLeftMoreEager(left, right))
             return FILTER_LEFT_WINS;
         if (isLeftMoreEager(right, left))

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Mon Nov 16 16:26:34 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 16 Nov 2009 15:26:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20244 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200911161526.nAGFQYQO005129@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-16 15:26:33 +0000 (Mon, 16 Nov 2009)
New Revision: 20244

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20244&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java

Log:
Post-parse filter work-around for SPI-5 (permissive grammars introduce ambiguities for literals).

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2009-11-16 12:42:00 UTC (rev 20243)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2009-11-16 15:26:33 UTC (rev 20244)
@@ -782,6 +782,21 @@
                 return r;
         }
 
+        return filterPermissiveLiterals(left, right);
+    }
+    
+    private int filterPermissiveLiterals(IParseNode left, IParseNode right) {
+        // Work-around for http://bugs.strategoxt.org/browse/SPI-5 (Permissive grammars introduce ambiguities for literals)
+        
+        if (left instanceof ParseNode && right instanceof ParseNode) {
+            List<IParseNode> leftKids = ((ParseNode) left).kids;
+            List<IParseNode> rightKids = ((ParseNode) right).kids;
+            if (leftKids.size() > 0 && rightKids.size() == 1) {
+                if (leftKids.get(0) instanceof ParseProductionNode && rightKids.get(0).equals(left)) {
+                    return FILTER_LEFT_WINS;
+                }
+            }
+        }
         return FILTER_DRAW;
     }
 



From L.C.L.Kats at tudelft.nl  Mon Nov 16 16:28:31 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 16 Nov 2009 15:28:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20245 - LennartKats -
	strc-java/trunk/java
Message-ID: <200911161528.nAGFSVhD005176@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-16 15:28:31 +0000 (Mon, 16 Nov 2009)
New Revision: 20245

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20245&view=rev

Modified:
   strc-java/trunk/java/spoofax-libs.jar

Log:


Changes:

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From m.dejonge at tudelft.nl  Tue Nov 17 13:30:07 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 12:30:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20246 - MaartjeDeJonge
	- sglr-recovery/trunk
Message-ID: <200911171230.nAHCU7q9023337@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 12:30:06 +0000 (Tue, 17 Nov 2009)
New Revision: 20246

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20246&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/

Log:
Initial import.

Changes:



From m.dejonge at tudelft.nl  Tue Nov 17 13:31:52 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 12:31:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20247 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: . src
	src/ProcessingTestFiles
Message-ID: <200911171231.nAHCVqOf023354@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 12:31:52 +0000 (Tue, 17 Nov 2009)
New Revision: 20247

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20247&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath
   sglr-recovery/trunk/Evaluation_RegionRecovery/.project
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Evaluation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/ExpectedRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Testsuite.java

Log:


Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath	2009-11-17 12:31:52 UTC (rev 20247)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry excluding="evaluationData/" kind="src" path="src"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/.project
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/.project	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/.project	2009-11-17 12:31:52 UTC (rev 20247)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>Evaluation_RegionRecovery</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Evaluation.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Evaluation.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Evaluation.java	2009-11-17 12:31:52 UTC (rev 20247)
@@ -0,0 +1,11 @@
+package ProcessingTestFiles;
+
+public enum Evaluation {
+	EXACT,
+	GOOD,
+	POOR,
+	MIS_DIAGNOSED,
+	NO_REGION_FOUND, 
+	TOO_SMALL,
+	WRONG_DATA
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/ExpectedRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/ExpectedRegion.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/ExpectedRegion.java	2009-11-17 12:31:52 UTC (rev 20247)
@@ -0,0 +1,42 @@
+package ProcessingTestFiles;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+public class ExpectedRegion {
+
+	private int startLine;
+	private int endLine;
+	
+	public int getStartLine() {
+		return startLine;
+	}
+	
+	public int getEndLine() {
+		return endLine;
+	}
+	
+	public ExpectedRegion() {
+		startLine=-1;
+		endLine=-1;
+	}	
+
+	public void processFileContent(String s) {
+		String[] lines=s.split("\n");
+	    for (int i = 0; i < lines.length; i++) {
+	    	String aLine = lines[i];
+	    	if(aLine.contains("@START")){
+	    		//System.out.println(aLine);
+	    		//System.out.println(i);
+	    		startLine=i;
+    		}
+	    	if(aLine.contains("@END")){
+	    		//System.out.println(aLine);
+	    		//System.out.println(i);
+	    		endLine=i;
+    		}
+		}
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Statistics.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Statistics.java	2009-11-17 12:31:52 UTC (rev 20247)
@@ -0,0 +1,101 @@
+package ProcessingTestFiles;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class Statistics {
+	private ArrayList<String> exactResults;
+	private ArrayList<String> goodResults;
+	private ArrayList<String> poorResults;
+	private ArrayList<String> tooSmallResults;
+	private ArrayList<String> misDignosedResults;
+	private ArrayList<String> diagnoseFailedResults;
+	
+	private ArrayList<String> errorInDataResults;
+	private int numberOfFiles;
+	
+	public HashMap<Evaluation, String> getOverviewResults(){
+		HashMap<Evaluation, String> overview = new HashMap<Evaluation, String>();
+		overview.put(Evaluation.EXACT, ""+exactResults.size());
+		overview.put(Evaluation.GOOD, ""+goodResults.size());
+		overview.put(Evaluation.POOR, ""+poorResults.size());
+		overview.put(Evaluation.TOO_SMALL, ""+tooSmallResults.size());
+		overview.put(Evaluation.MIS_DIAGNOSED, ""+misDignosedResults.size());
+		overview.put(Evaluation.NO_REGION_FOUND, ""+diagnoseFailedResults.size());
+		overview.put(Evaluation.WRONG_DATA, ""+errorInDataResults.size());
+		return overview;		
+	}
+	
+	public Statistics() {
+		exactResults=new ArrayList<String>();
+		goodResults=new ArrayList<String>();
+		poorResults=new ArrayList<String>();
+		tooSmallResults=new ArrayList<String>();
+		misDignosedResults=new ArrayList<String>();
+		diagnoseFailedResults=new ArrayList<String>();
+		errorInDataResults=new ArrayList<String>();
+		numberOfFiles=0;
+	}
+	
+	public void processFileResult(Testcase testFile) {
+		Evaluation result=testFile.getResult();
+		String fileName = testFile.getFileName();
+		getResultList(result).add(fileName);
+		numberOfFiles++;
+	}
+
+	private ArrayList<String> getResultList(Evaluation result) {
+		switch (result) {
+			case EXACT:
+				return exactResults;		
+			case GOOD:
+				return goodResults;				
+			case POOR:
+				return poorResults;				
+			case TOO_SMALL:
+				return tooSmallResults;				
+			case MIS_DIAGNOSED:
+				return misDignosedResults;				
+			case NO_REGION_FOUND:
+				return diagnoseFailedResults;				
+			case WRONG_DATA:
+				return errorInDataResults;				
+			default:
+				return null;
+			}
+	}
+	
+	public ArrayList<String> getExactResults() {
+		return exactResults;
+	}
+
+	public ArrayList<String> getGoodResults() {
+		return goodResults;
+	}
+
+	public ArrayList<String> getPoorResults() {
+		return poorResults;		
+	}
+
+	public ArrayList<String> getTooSmallResults() {
+		return tooSmallResults;
+	}
+
+	public ArrayList<String> getMisDiagnosedResults() {
+		return misDignosedResults;
+	}
+
+	public ArrayList<String> getDiagnoseFailedResults() {
+		return diagnoseFailedResults;
+	}
+
+	public ArrayList<String> getErrorInDataResults() {
+		return errorInDataResults;
+	}
+
+	public int getNumberOfFiles() {
+		return numberOfFiles;
+		
+	}
+
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Testcase.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Testcase.java	2009-11-17 12:31:52 UTC (rev 20247)
@@ -0,0 +1,52 @@
+package ProcessingTestFiles;
+
+
+public class Testcase {
+
+	private static final int SMALL_REGION_CRITERIA = 6;
+	private Evaluation fileResult;
+	private String fileName;
+	
+	public Testcase(String fileName) {
+		this.fileName=fileName;
+	}
+
+	public void processRegionData(int expectedStartLine,
+			int expectedEndLine, int actualStartLine, int actualEndLine) {		
+		if(invalidRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine))
+			fileResult=Evaluation.WRONG_DATA;
+		else if(actualStartLine < 0 || actualEndLine <0)
+			fileResult=Evaluation.NO_REGION_FOUND;
+		else if(actualStartLine==expectedStartLine && actualEndLine==expectedEndLine)
+			fileResult=Evaluation.EXACT;
+		else if (expectedStartLine>=actualStartLine && expectedEndLine <= actualEndLine){
+			if(((expectedStartLine-actualStartLine) + (actualEndLine-expectedEndLine))<=SMALL_REGION_CRITERIA){
+				fileResult=Evaluation.GOOD;
+			}
+			else
+				fileResult=Evaluation.POOR;
+		}
+		else if(expectedStartLine<=actualStartLine && expectedEndLine >= actualEndLine)
+			fileResult=Evaluation.TOO_SMALL;
+		else
+			fileResult=Evaluation.MIS_DIAGNOSED;
+	}
+
+	
+
+	private boolean invalidRegionData(int expectedStartLine,
+			int expectedEndLine, int actualStartLine, int actualEndLine) {
+		return expectedEndLine<expectedStartLine || expectedStartLine<0 || actualEndLine<actualStartLine;
+	}
+
+	public Evaluation getResult() {
+		return fileResult;
+	}
+
+	public String getFileName() {
+		return fileName;
+	}
+	
+	
+
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Testsuite.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Testsuite.java	2009-11-17 12:31:52 UTC (rev 20247)
@@ -0,0 +1,108 @@
+package ProcessingTestFiles;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+
+public class Testsuite {
+	
+	public final static String ROOTDIR="Input";
+	private ArrayList<String> directories;
+	private ArrayList<String> extensions;
+	private boolean useAllExtensions;
+	private boolean useAllDirectories;
+	private String testsuiteName;
+	private Statistics statistics;
+	
+	public String getTestSuiteName() {
+		return testsuiteName;
+	}
+
+	public void setTestsuiteName(String testsuite) {
+		testsuiteName=testsuite;
+	}
+	
+	public Testsuite(String suiteName){
+		testsuiteName=suiteName;
+		directories=new ArrayList<String>();
+		extensions=new ArrayList<String>();
+		useAllExtensions=true;
+		useAllDirectories=true;
+		statistics = new Statistics();
+	}
+	
+	public void runTestcases() throws IOException{
+		if(useAllDirectories){
+			directories.clear();
+			for (String subDir : new File(ROOTDIR).list()) {
+				addDir(subDir);
+			}
+		}
+		if(useAllExtensions){
+			extensions.clear();
+			extensions.add("");
+		}
+		for (String aDir : directories) {
+			for (String anExtension : extensions) {
+				processFiles(aDir, anExtension);
+			}			
+		}		
+	}
+	
+	public Statistics getStatistics() {
+		return statistics;
+	}
+
+	
+	private static String readFromFile(String filePath) throws FileNotFoundException,
+	IOException {
+		byte[] buffer = new byte[(int) new File(filePath).length()];
+		FileInputStream f = new FileInputStream(filePath);
+		f.read(buffer);
+		String s= new String(buffer);
+		return s;
+	}
+	
+	public void processFiles(String inputDirectory, String extension) throws IOException{	
+		File dir = new File(ROOTDIR + "/"+inputDirectory);
+        if(!dir.exists())
+        	throw new IOException("Directory: "+dir + "does not exist");
+        String[] children = dir.list(); 
+        for (int i = 0; i < children.length; i++) {
+        	String fileName=children[i];
+        	String filePath=dir+"/"+fileName;
+        	if (!new File(filePath).isDirectory() && (useAllExtensions || fileName.endsWith(extension))){
+				String s = readFromFile(filePath);
+				ExpectedRegion r=new ExpectedRegion();
+				r.processFileContent(s);
+				Testcase file = new Testcase(fileName);
+				file.processRegionData(r.getStartLine(), r.getEndLine(), 0, 0);
+				statistics.processFileResult(file);				
+				System.out.println(filePath);
+			}
+		}	
+	}
+
+	public Testsuite addDir(String dirName) {
+		useAllDirectories=false;
+		directories.add(dirName);
+		return this;
+	}
+
+	public Testsuite addExtension(String ext) {
+		useAllExtensions=false;
+		extensions.add(ext);
+		return this;
+	}
+
+	public void setAllExtensions(boolean useAll) {
+		useAllExtensions=useAll;
+	}
+
+	public void setAllDirectories(boolean useAll) {
+		useAllExtensions=useAll;
+	}
+
+}



From m.dejonge at tudelft.nl  Tue Nov 17 13:38:39 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 12:38:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20248 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/src: . tests
Message-ID: <200911171238.nAHCcdtq023409@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 12:38:39 +0000 (Tue, 17 Nov 2009)
New Revision: 20248

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20248&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java

Log:
unit tests

Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java	2009-11-17 12:38:39 UTC (rev 20248)
@@ -0,0 +1,49 @@
+package tests;
+
+import static org.junit.Assert.assertEquals;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+import org.junit.Test;
+
+import evaluating.*;
+
+
+public class Test_ExpectedRegion {
+	
+	ExpectedRegion errorRegion;
+	
+	public Test_ExpectedRegion() {
+		errorRegion=new ExpectedRegion();
+	}
+	
+	@Test
+	public void testRegionStartLine(){
+		assertEquals(-1, errorRegion.getStartLine());
+	}
+	
+	@Test
+	public void testRegionEndLine(){
+		assertEquals(-1, errorRegion.getEndLine());
+	}
+	
+	@Test
+	public void testProcessFile() throws IOException{		
+		errorRegion.processFileContent(readFromFile("Input/Common/test1.java"));
+		assertEquals(15, errorRegion.getStartLine());
+		assertEquals(17, errorRegion.getEndLine());
+	}
+	
+	private String readFromFile(String filePath) throws FileNotFoundException,
+	IOException {
+		byte[] buffer = new byte[(int) new File(filePath).length()];
+		FileInputStream f = new FileInputStream(filePath);
+		f.read(buffer);
+		String s= new String(buffer);
+		return s;
+	}
+
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java	2009-11-17 12:38:39 UTC (rev 20248)
@@ -0,0 +1,74 @@
+package tests;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import junit.framework.Assert;
+import org.junit.Test;
+
+import evaluating.*;
+
+
+public class Test_Statistics {
+	
+	private Statistics statistics;
+	
+	public Test_Statistics(){
+		statistics=new Statistics();
+	}
+	
+	@Test
+	public void testFileLists(){		
+		assertEquals(0, statistics.getExactResults().size());
+		processTestData();
+		assertEquals(9, statistics.getNumberOfFiles());
+		assertEquals(2, statistics.getExactResults().size());
+		assertTrue(statistics.getExactResults().contains("Exact1.java"));
+		assertTrue(statistics.getExactResults().contains("Exact2.java"));
+		assertEquals(1, statistics.getGoodResults().size());
+		assertTrue(statistics.getGoodResults().contains("Good.java"));
+		assertEquals(1, statistics.getPoorResults().size());
+		assertTrue(statistics.getPoorResults().contains("Bad.java"));
+		assertEquals(2, statistics.getErrorInDataResults().size());
+		assertTrue(statistics.getErrorInDataResults().contains("ErrorInData1.java"));
+		assertTrue(statistics.getErrorInDataResults().contains("ErrorInData2.java"));
+		assertEquals(1, statistics.getTooSmallResults().size());
+		assertTrue(statistics.getTooSmallResults().contains("TooSmall.java"));
+		assertEquals(1, statistics.getMisDiagnosedResults().size());
+		assertTrue(statistics.getMisDiagnosedResults().contains("MisDiagnosed.java"));
+		assertEquals(1, statistics.getDiagnoseFailedResults().size());
+		assertTrue(statistics.getDiagnoseFailedResults().contains("Failed.java"));
+	}
+	
+	@Test
+	public void testResultOverView(){
+		processTestData();
+		assertEquals(7, statistics.getOverviewResults().size());
+		assertEquals("2", statistics.getOverviewResults().get(Evaluation.EXACT));
+		assertEquals("1", statistics.getOverviewResults().get(Evaluation.GOOD));
+		assertEquals("1", statistics.getOverviewResults().get(Evaluation.POOR));
+		assertEquals("1", statistics.getOverviewResults().get(Evaluation.TOO_SMALL));
+		assertEquals("1", statistics.getOverviewResults().get(Evaluation.MIS_DIAGNOSED));
+		assertEquals("1", statistics.getOverviewResults().get(Evaluation.NO_REGION_FOUND));
+		assertEquals("2", statistics.getOverviewResults().get(Evaluation.WRONG_DATA));	
+	}
+	
+	private void processTestData(){
+		processFile(4,6,4,6, "Exact1.java");
+		processFile(14,60,14,60, "Exact2.java");
+		processFile(4,6,3,7, "Good.java");
+		processFile(14,60,4,62, "Bad.java");
+		processFile(-1,60,-1,62, "ErrorInData1.java");
+		processFile(14,60,20,50, "TooSmall.java");
+		processFile(14,60,40,62, "MisDiagnosed.java");
+		processFile(14,6,1,62, "ErrorInData2.java");
+		processFile(14,60,-1,62, "Failed.java");
+	}
+
+	private void processFile(int expStart, int expEnd, int actStart, int actEnd, String fname) {
+		Testcase aTest = new Testcase(fname);
+		aTest.processRegionData(expStart, expEnd, actStart, actEnd);
+		statistics.processFileResult(aTest);
+	}
+
+
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-17 12:38:39 UTC (rev 20248)
@@ -0,0 +1,113 @@
+package tests;
+
+
+import static org.junit.Assert.*;
+import junit.framework.Assert;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import evaluating.*;
+
+
+public class Test_Testcase {
+
+	private Testcase regionSelectionData;
+	
+	public Test_Testcase(){
+		regionSelectionData = new Testcase("testfile");
+	}
+	
+	@Before
+	public void setUp() throws Exception {
+	}
+
+	@After
+	public void tearDown() throws Exception {
+	}
+	
+	@Test
+	public void testResult_Exact() throws Exception{
+		int expectedStartLine=5;
+		int expectedEndLine=10;
+		int actualStartLine=5;
+		int actualEndLine=10;
+		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
+		Assert.assertEquals(Evaluation.EXACT, regionSelectionData.getResult());
+	}
+	
+	@Test
+	public void testResult_ContainedSmall() throws Exception{
+		int expectedStartLine=5;
+		int expectedEndLine=10;
+		int actualStartLine=4;
+		int actualEndLine=15;		
+		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
+		Assert.assertEquals(Evaluation.GOOD, regionSelectionData.getResult());
+	}
+	
+	@Test
+	public void testResult_ContainedBig() throws Exception{
+		int expectedStartLine=5;
+		int expectedEndLine=10;
+		int actualStartLine=2;
+		int actualEndLine=14;
+		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
+		Assert.assertEquals(Evaluation.POOR, regionSelectionData.getResult());
+	}
+	
+	@Test
+	public void testResult_TooSmall() throws Exception{
+		int expectedStartLine=5;
+		int expectedEndLine=10;
+		int actualStartLine=6;
+		int actualEndLine=8;
+		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
+		Assert.assertEquals(Evaluation.TOO_SMALL, regionSelectionData.getResult());
+	}
+	
+	@Test
+	public void testResult_MisDiagnosed() throws Exception{
+		int expectedStartLine=5;
+		int expectedEndLine=10;
+		int actualStartLine=7;
+		int actualEndLine=13;
+		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
+		Assert.assertEquals(Evaluation.MIS_DIAGNOSED, regionSelectionData.getResult());
+	}
+	
+	@Test
+	public void testResult_DiagnoseFailed() throws Exception{
+		int expectedStartLine=5;
+		int expectedEndLine=10;
+		int actualStartLine=-1;
+		int actualEndLine=-1;
+		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
+		assertEquals(Evaluation.NO_REGION_FOUND, regionSelectionData.getResult());
+	}
+	
+	@Test
+	public void testInvalidInput1() throws Exception{
+		int expectedStartLine=5;
+		int expectedEndLine=3;
+		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, 10, 12);
+		assertEquals(Evaluation.WRONG_DATA, regionSelectionData.getResult());
+	}
+	
+	@Test
+	public void testInvalidInput2() throws Exception{
+		int expectedStartLine=-1;
+		regionSelectionData.processRegionData(expectedStartLine, 6, 7, 9);
+		assertEquals(Evaluation.WRONG_DATA, regionSelectionData.getResult());
+	}
+	
+	@Test
+	public void testInvalidInput3() throws Exception{
+		int actualStartLine=5;
+		int actualEndLine=3;
+		regionSelectionData.processRegionData(3, 5, actualStartLine, actualEndLine);
+		assertEquals(Evaluation.WRONG_DATA, regionSelectionData.getResult());
+	}
+	
+	
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-17 12:38:39 UTC (rev 20248)
@@ -0,0 +1,91 @@
+package tests;
+
+
+import java.io.IOException;
+
+import junit.framework.Assert;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import evaluating.*;
+
+public class Test_Testsuite {
+	
+	private Testsuite myTestcases;
+	
+	public Test_Testsuite() {
+		myTestcases=new Testsuite("a testsuite");
+	}
+	
+	@Test
+	public void test_Constructor_Defined_Suite(){
+		myTestcases=new Testsuite("MyTestCases");
+		Assert.assertEquals("MyTestCases", myTestcases.getTestSuiteName());
+	}
+	
+	@Test
+	public void test_allDir_allExtensions() throws IOException{
+		myTestcases.runTestcases();
+	}
+	
+	@Test
+	public void MoreDirs_OneExtension() throws IOException{
+		myTestcases.addDir("Practice")
+					.addDir("Common")
+					.addExtension("java");
+		myTestcases.runTestcases();
+	}
+	
+	@Test
+	public void OneDir_MoreExtensions() throws IOException{
+		myTestcases.addDir("Common")
+					.addExtension("java")
+					.addExtension("str");
+		myTestcases.runTestcases();
+	}
+		
+	@Test
+	public void test_Default_isAll() throws IOException{
+		myTestcases.runTestcases();
+	}
+	
+	@Test
+	public void test_setAll() throws IOException{
+		myTestcases.addExtension("java");
+		myTestcases.addDir("Common");
+		myTestcases.setAllExtensions(true);	
+		myTestcases.setAllDirectories(true);
+		myTestcases.runTestcases();
+	}
+	
+	@Test
+	public void test_Processing() throws IOException{		
+		myTestcases.processFiles("Common", "");
+		Assert.assertEquals(3, myTestcases.getStatistics().getNumberOfFiles());	
+		myTestcases.processFiles("Practice", "");
+		Assert.assertEquals(5, myTestcases.getStatistics().getNumberOfFiles());	
+	}
+	
+	
+	@Test
+	public void test_Processing_extension() throws IOException{
+		myTestcases.addExtension("m");
+		myTestcases.processFiles("Common","cs");
+		Assert.assertEquals(0, myTestcases.getStatistics().getNumberOfFiles());	
+		Testsuite processing_java=new Testsuite("bla");
+		processing_java.addExtension("m");
+		processing_java.processFiles("Common","java");
+		Assert.assertEquals(2, processing_java.getStatistics().getNumberOfFiles());	
+		myTestcases.processFiles("Common","str");
+		Assert.assertEquals(1, myTestcases.getStatistics().getNumberOfFiles());	
+	}
+	
+	@Test(expected=IOException.class)
+	public void test_Processing_Dir_not_Exist() throws IOException{		
+		myTestcases.processFiles("Nonsense", "");
+		Assert.assertEquals(2, myTestcases.getStatistics().getNumberOfFiles());	
+	}
+
+}



From L.C.L.Kats at tudelft.nl  Tue Nov 17 13:39:21 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 17 Nov 2009 12:39:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20249 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
	spoofax/trunk/spoofax/org.spoofax.jsglr/tests2 strc-java/trunk/java
Message-ID: <200911171239.nAHCdL19023414@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-17 12:39:20 +0000 (Tue, 17 Nov 2009)
New Revision: 20249

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20249&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/
   spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction1-1.in
   spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction1.def
   spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2-1.in
   spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2-2.in
   spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2-3.in
   spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2.def
   spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/Makefile
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ReduceLookahead.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
Fixes to lookahead assertions. Added a new test suite that tests the WebDSL test files.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2009-11-17 12:38:39 UTC (rev 20248)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2009-11-17 12:39:20 UTC (rev 20249)
@@ -332,7 +332,7 @@
                 int productionArity = Term.intAt(a, 0);
                 int label = Term.intAt(a, 1);
                 int status = Term.intAt(a, 2);
-                Range[] charClasses = parseCharClasses(Term.listAt(a, 3));
+                RangeList[] charClasses = parseCharRanges(Term.listAt(a, 3));
                 item = makeReduceLookahead(productionArity, label, status, charClasses);
                 
             } else if (a.getName().equals("accept")) {
@@ -348,9 +348,9 @@
         return ret;
     }
 
-    private Range[] parseCharClasses(ATermList list) throws InvalidParseTableException {
-        Range[] ret = new Range[list.getLength()];
-        for(int i=0;i<ret.length; i++) {
+    private RangeList[] parseCharRanges(ATermList list) throws InvalidParseTableException {
+        RangeList[] ret = new RangeList[list.getLength()];
+        for (int i=0;i<ret.length; i++) {
             ATermAppl t = Term.asAppl(list.getFirst());
             list = list.getNext();
             ATermList l, n;            
@@ -363,27 +363,32 @@
                 n = Term.listAt(t, 0).getNext();
             }
             
+            // FIXME: multiple lookahead are not fully supported or tested
+            //        (and should work for both 2.4 and 2.6 tables)
+            
             if (Term.termAt(l, 1) == null) {
-                if (SGLR.WORK_AROUND_MULTIPLE_LOOKAHEAD) {
-                    if (!printedWarning) {
-                        printedWarning = true;
-                        System.err.println("Warning: using multiple lookahead work-around");
-                    }
-                    ret[i] = new Range(Term.intAt(l, 0), Term.intAt(l, 0));
-                } else {
-                    throw new InvalidParseTableException("Multiple lookahead not supported");
-                }
-            } else if(n.getLength() > 0) {
-                // TODO: Is this a legal state?
-                throw new InvalidParseTableException("Multiple lookahead not supported");
-            } else {            
-                ret[i] = new Range(Term.intAt(l, 0), Term.intAt(l, 1));
+                // This handles restrictions like:
+                //   LAYOUT? -/- [\/].[\/]
+                // where there is no other restriction that starts with a [\/]
+                
+                ret[i] = new RangeList(new Range(Term.intAt(l, 0)));
+            } else if (n.getLength() > 0) {
+                // This handles restrictions like:
+                //   LAYOUT? -/- [\/].[\/\+].[\*]
+                throw new InvalidParseTableException("Multiple lookahead not fully supported");
+            } else {
+                // This handles restrictions like:
+                //   LAYOUT? -/- [\/].[\/]
+                //   LAYOUT? -/- [\/].[\*]
+                //   LAYOUT? -/- [\/].[\{]
+                
+                ret[i] = parseRanges(l);
             }
         }
         return ret;
     }
 
-    private ActionItem makeReduceLookahead(int productionArity, int label, int status, Range[] charClasses) {
+    private ActionItem makeReduceLookahead(int productionArity, int label, int status, RangeList[] charClasses) {
         return new ReduceLookahead(productionArity, label, status, charClasses);
     }
     

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java	2009-11-17 12:38:39 UTC (rev 20248)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java	2009-11-17 12:39:20 UTC (rev 20249)
@@ -13,7 +13,7 @@
 public class RangeList {
     private final int[] ranges;
     
-    public RangeList(Range[] ranges) {
+    public RangeList(Range... ranges) {
         // Assume unsanitized input
         List<Range> sortedRanges = toSortedList(ranges);
         List<Range> sanitizedRanges = mergeOverlap(sortedRanges);

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ReduceLookahead.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ReduceLookahead.java	2009-11-17 12:38:39 UTC (rev 20248)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ReduceLookahead.java	2009-11-17 12:39:20 UTC (rev 20249)
@@ -19,15 +19,15 @@
 
     public final Production production;
 
-    protected final Range[] charClasses;
+    protected final RangeList[] charRanges;
     
-    public ReduceLookahead(int arity, int label, int status, Range[] charClasses) {
+    public ReduceLookahead(int arity, int label, int status, RangeList[] charClasses) {
         super(REDUCE_LOOKAHEAD);
 
         this.arity = arity;
         this.label = label;
         this.status = status;
-        this.charClasses = charClasses;
+        this.charRanges = charClasses;
 
         production = new Production(arity, label, status, false);
     }
@@ -49,7 +49,7 @@
         return "reduce(" + arity + ", " + label + ", " + status + ")";
     }
 
-    public Range[] getCharClasses() {
-        return charClasses;
+    public RangeList[] getCharRanges() {
+        return charRanges;
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2009-11-17 12:38:39 UTC (rev 20248)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2009-11-17 12:39:20 UTC (rev 20249)
@@ -466,9 +466,9 @@
                 fillForActorWithRecoverFrames(); //Fills foractor, clears recover actor
                 recoverTolerance-=1;
                 reduceRecoverOnly=true;
-            }
-                
+            }    
         }
+        return;
     }
 
     private void fillForActorWithDelayedFrames() {
@@ -558,10 +558,10 @@
     }    
 
     private boolean checkLookahead(ReduceLookahead red) throws IOException {
-        return doCheckLookahead(red, red.getCharClasses(), 0);
+        return doCheckLookahead(red, red.getCharRanges(), 0);
     }
     
-    private boolean doCheckLookahead(ReduceLookahead red, Range[] charClass, int pos) throws IOException {
+    private boolean doCheckLookahead(ReduceLookahead red, RangeList[] charClass, int pos) throws IOException {
         if(Tools.tracing) {
             TRACE("SG_CheckLookAhead() - ");
         }
@@ -979,6 +979,7 @@
         return rejectCount;
     }
     
+    @Deprecated
     public static void setWorkAroundMultipleLookahead(boolean value) {
         WORK_AROUND_MULTIPLE_LOOKAHEAD = value;
     }   

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction1-1.in
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction1-1.in	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction1-1.in	2009-11-17 12:39:20 UTC (rev 20249)
@@ -0,0 +1 @@
+/x/.
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction1.def
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction1.def	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction1.def	2009-11-17 12:39:20 UTC (rev 20249)
@@ -0,0 +1,21 @@
+definition
+module Main
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+
+    RegexExp "."  -> Start {cons("Call")}
+
+    "/" Pattern "/" -> RegexExp { cons("RegexPattern") }
+  
+  lexical syntax
+  
+    [a-z]* -> Pattern
+
+  context-free restrictions
+    LAYOUT? -/- [\/].[\*]
+    LAYOUT? -/- [\/].[\/]

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2-1.in
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2-1.in	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2-1.in	2009-11-17 12:39:20 UTC (rev 20249)
@@ -0,0 +1 @@
+/x/./*comment*/

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2-2.in
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2-2.in	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2-2.in	2009-11-17 12:39:20 UTC (rev 20249)
@@ -0,0 +1 @@
+/*comment*//x/.

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2-3.in
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2-3.in	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2-3.in	2009-11-17 12:39:20 UTC (rev 20249)
@@ -0,0 +1 @@
+/x/*comment*//.

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2.def
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2.def	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/FollowRestriction2.def	2009-11-17 12:39:20 UTC (rev 20249)
@@ -0,0 +1,28 @@
+definition
+module Main
+
+exports
+
+  context-free start-symbols
+    Start
+
+  context-free syntax
+
+    RegexExp "."  -> Start {cons("Call")}
+
+    "/" Pattern "/" -> RegexExp { cons("RegexPattern") }
+  
+  lexical syntax
+  
+    [a-z]*                       -> Pattern
+    "/*" CommentChar* "*/"       -> LAYOUT
+    "\n"                         -> LAYOUT
+    ~[\*]                        -> CommentChar
+    Asterisk                     -> CommentChar
+    [\*]                         -> Asterisk
+    [a-z]* -> Pattern
+
+  context-free restrictions
+    LAYOUT?   -/- [\/].[\*]
+    LAYOUT?   -/- [\/].[\/]
+    Asterisk  -/- [\/]

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/Makefile
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/Makefile	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/Makefile	2009-11-17 12:39:20 UTC (rev 20249)
@@ -0,0 +1,65 @@
+DEFS=$(wildcard *.def)
+INS=$(wildcard *.in)
+OUTS=$(INS:.in=.out)
+TBLS=$(DEFS:.def=.tbl)
+
+WDINS=$(wildcard $(WD)/test/*/*.app)
+WDOUTS=$(WDINS:.app=.aapp)
+
+PARSE=java -client -cp ../bin:`strj-jar -p` org.spoofax.jsglr.Main
+
+all : $(TBLS)
+
+check : $(TBLS) $(OUTS) check-webdsl
+
+check-webdsl : $(WDOUTS)
+	if [ "$(WD)" = "" ]; then \
+	  echo 'check-webdsl: This test requires a $(WD) environment variable to be set.'; \
+	  exit 1; \
+	fi
+
+clean :
+	rm -f $(TBLS) $(OUTS) $(WDOUTS)
+
+%.tbl : %.def
+	sdf2table -i $< -o $@
+
+%-1.out : %-1.in %.tbl
+	@echo Parsing $<
+	@sglri    -p $*.tbl -i $< > /dev/null  || (echo "ERROR: Standard sglr parser failed"; exit 1)
+	@$(PARSE) -p $*.tbl -i $< -o $@ || (rm $@; exit 1)
+	@cat $< | grep 'amb(' && exit 1 || exit 0
+
+%-2.out : %-1.in %.tbl
+	@echo Parsing $<
+	@sglri    -p $*.tbl -i $< > /dev/null  || (echo "ERROR: Standard sglr parser failed"; exit 1)
+	@$(PARSE) -p $*.tbl -i $< -o $@ || (rm $@; exit 1)
+	@cat $< | grep 'amb(' && exit 1 || exit 0
+
+%-3.out : %-1.in %.tbl
+	@echo Parsing $<
+	@sglri    -p $*.tbl -i $< > /dev/null  || (echo "ERROR: Standard sglr parser failed"; exit 1)
+	@$(PARSE) -p $*.tbl -i $< -o $@ || (rm $@; exit 1)
+	@cat $< | grep 'amb(' && exit 1 || exit 0
+
+%-4.out : %-1.in %.tbl
+	@echo Parsing $<
+	@sglri    -p $*.tbl -i $< > /dev/null  || (echo "ERROR: Standard sglr parser failed"; exit 1)
+	@$(PARSE) -p $*.tbl -i $< -o $@ || (rm $@; exit 1)
+	@cat $< | grep 'amb(' && exit 1 || exit 0
+
+%-5.out : %-1.in %.tbl
+	@echo Parsing $<
+	@sglri    -p $*.tbl -i $< > /dev/null || (echo "ERROR: Standard sglr parser failed"; exit 1)
+	@$(PARSE) -p $*.tbl -i $< -o $@ || (rm $@; exit 1)
+	@cat $< | grep 'amb(' && exit 1 || exit 0
+
+WebDSL.tbl : $(WD)/src/org/webdsl/dsl/syntax/WebDSL.def
+	sdf2table -i $< -o $@ -m WebDSL
+
+%.aapp : %.app WebDSL.tbl
+	@echo Parsing $<
+	@sglri    -p WebDSL.tbl -s Unit -i $< > /dev/null || (echo "ERROR: Standard sglr parser failed"; exit 1)
+	@$(PARSE) -p WebDSL.tbl -s Unit -i $< -o $@ || (rm $@; exit 1)
+	@cat $< | grep 'amb(' && exit 1 || exit 0
+

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From m.dejonge at tudelft.nl  Tue Nov 17 13:39:45 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 12:39:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20250 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/src: . evaluating
Message-ID: <200911171239.nAHCdjJK023419@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 12:39:45 +0000 (Tue, 17 Nov 2009)
New Revision: 20250

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20250&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ExpectedRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java

Log:


Changes:


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating
___________________________________________________________________
Added: svn:mergeinfo
   + 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Evaluation.java	2009-11-17 12:31:52 UTC (rev 20247)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java	2009-11-17 12:39:45 UTC (rev 20250)
@@ -1,4 +1,4 @@
-package ProcessingTestFiles;
+package evaluating;
 
 public enum Evaluation {
 	EXACT,

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ExpectedRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/ExpectedRegion.java	2009-11-17 12:31:52 UTC (rev 20247)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ExpectedRegion.java	2009-11-17 12:39:45 UTC (rev 20250)
@@ -1,4 +1,4 @@
-package ProcessingTestFiles;
+package evaluating;
 
 import java.io.File;
 import java.io.FileInputStream;

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Statistics.java	2009-11-17 12:31:52 UTC (rev 20247)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-17 12:39:45 UTC (rev 20250)
@@ -1,4 +1,4 @@
-package ProcessingTestFiles;
+package evaluating;
 
 import java.util.ArrayList;
 import java.util.HashMap;

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Testcase.java	2009-11-17 12:31:52 UTC (rev 20247)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-17 12:39:45 UTC (rev 20250)
@@ -1,4 +1,4 @@
-package ProcessingTestFiles;
+package evaluating;
 
 
 public class Testcase {

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/ProcessingTestFiles/Testsuite.java	2009-11-17 12:31:52 UTC (rev 20247)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-17 12:39:45 UTC (rev 20250)
@@ -1,4 +1,4 @@
-package ProcessingTestFiles;
+package evaluating;
 
 import java.io.File;
 import java.io.FileInputStream;



From m.dejonge at tudelft.nl  Tue Nov 17 13:40:08 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 12:40:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20251 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: . Input
	Input/Common Input/Practice
Message-ID: <200911171240.nAHCe8Lj023440@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 12:40:08 +0000 (Tue, 17 Nov 2009)
New Revision: 20251

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20251&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/test1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/test1.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/test2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Practice/
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Practice/test1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Practice/test2.cs

Log:


Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/test1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/test1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/test1.java	2009-11-17 12:40:08 UTC (rev 20251)
@@ -0,0 +1,30 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+
+class X {
+
+	private int correctMethod1() {
+		corr2();
+		return corrInt;
+	}
+
+	private int erroneousMethod() {
+		corr2();
+		if(true){ //@START
+			foo();
+			bar(); //@END
+		return 5;
+	}
+
+	private int correctMethod2() {
+		int corrLine1;
+		if (true) {
+			corrLine2();
+		}
+		corrLine3();
+		corrLine4();
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/test1.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/test1.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/test1.str	2009-11-17 12:40:08 UTC (rev 20251)
@@ -0,0 +1,26 @@
+module evaluation
+
+imports
+  libstratego-lib
+
+rules
+  
+  evaluate: mult(ea1, ea2) -> r where  r:= <mulS>(<evaluate> ea1, <evaluate> ea2)
+  evaluate: add(ea1, ea2) -> r where  r:= <addS>(<evaluate> ea1, <evaluate> ea2)
+  evaluate: sub(ea1, ea2) -> r where r:= <subtS>(<evaluate> ea1, <evaluate> ea2)
+  evaluate: div(ea1, ea2) -> r where  r:= <divS>(<evaluate> ea1, <evaluate> ea2)
+  evaluate: num(x) -> x
+  evaluate: ident(x) -> <substitute> x  
+  evaluate: with_expr(name, value, body) -> r  
+  where /*|} @START */ 
+  {|
+       substitute: rules (substitute: name -> <try-eval>(value)); 
+       r:= <try-eval> (body) /* @END */ 
+    
+  
+   evaluate-exprlist: Expressions(exprlist) -> <map(try-eval)> exprlist  
+   try-eval=evaluate <+ all(try-eval)
+   
+strategies
+
+  eval = evaluate-exprlist
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/test2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/test2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/test2.java	2009-11-17 12:40:08 UTC (rev 20251)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      bla bla bla
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Practice/test1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Practice/test1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Practice/test1.java	2009-11-17 12:40:08 UTC (rev 20251)
@@ -0,0 +1,30 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+
+class X {
+
+	private int correctMethod1() {
+		corr2();
+		return corrInt;
+	}
+
+	private int erroneousMethod() {
+		corr2();
+		if(true){ //@START
+			foo();
+			bar(); //@END
+		return 5;
+	}
+
+	private int correctMethod2() {
+		int corrLine1;
+		if (true) {
+			corrLine2();
+		}
+		corrLine3();
+		corrLine4();
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Practice/test2.cs
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Practice/test2.cs	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Practice/test2.cs	2009-11-17 12:40:08 UTC (rev 20251)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      bla bla bla
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+



From m.dejonge at tudelft.nl  Tue Nov 17 13:41:45 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 12:41:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20252 - MaartjeDeJonge
	- sglr-recovery/trunk/Evaluation_RegionRecovery
Message-ID: <200911171241.nAHCfjsW023452@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 12:41:45 +0000 (Tue, 17 Nov 2009)
New Revision: 20252

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20252&view=rev

Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/

Log:


Changes:


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery
___________________________________________________________________
Added: svn:ignore
   + BackUp




From m.dejonge at tudelft.nl  Tue Nov 17 13:57:47 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 12:57:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20253 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: . TestInput
Message-ID: <200911171257.nAHCvlPX023572@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 12:57:47 +0000 (Tue, 17 Nov 2009)
New Revision: 20253

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20253&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/

Log:


Changes:


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput
___________________________________________________________________
Added: svn:mergeinfo
   + 



From m.dejonge at tudelft.nl  Tue Nov 17 14:03:31 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 13:03:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20254 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/src:
	evaluating tests
Message-ID: <200911171303.nAHD3VWL023864@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 13:03:31 +0000 (Tue, 17 Nov 2009)
New Revision: 20254

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20254&view=rev

Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java

Log:


Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-17 12:57:47 UTC (rev 20253)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-17 13:03:31 UTC (rev 20254)
@@ -8,7 +8,7 @@
 
 public class Testsuite {
 	
-	public final static String ROOTDIR="Input";
+	private static String RoorDir;
 	private ArrayList<String> directories;
 	private ArrayList<String> extensions;
 	private boolean useAllExtensions;
@@ -36,7 +36,7 @@
 	public void runTestcases() throws IOException{
 		if(useAllDirectories){
 			directories.clear();
-			for (String subDir : new File(ROOTDIR).list()) {
+			for (String subDir : new File(RoorDir).list()) {
 				addDir(subDir);
 			}
 		}
@@ -66,7 +66,7 @@
 	}
 	
 	public void processFiles(String inputDirectory, String extension) throws IOException{	
-		File dir = new File(ROOTDIR + "/"+inputDirectory);
+		File dir = new File(RoorDir + "/"+inputDirectory);
         if(!dir.exists())
         	throw new IOException("Directory: "+dir + "does not exist");
         String[] children = dir.list(); 
@@ -105,4 +105,8 @@
 		useAllExtensions=useAll;
 	}
 
+	public void setRootDir(String dir) {
+		RoorDir=dir;		
+	}
+
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java	2009-11-17 12:57:47 UTC (rev 20253)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java	2009-11-17 13:03:31 UTC (rev 20254)
@@ -32,7 +32,7 @@
 	
 	@Test
 	public void testProcessFile() throws IOException{		
-		errorRegion.processFileContent(readFromFile("Input/Common/test1.java"));
+		errorRegion.processFileContent(readFromFile("TestInput/Common/test1.java"));
 		assertEquals(15, errorRegion.getStartLine());
 		assertEquals(17, errorRegion.getEndLine());
 	}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-17 12:57:47 UTC (rev 20253)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-17 13:03:31 UTC (rev 20254)
@@ -17,6 +17,7 @@
 	
 	public Test_Testsuite() {
 		myTestcases=new Testsuite("a testsuite");
+		myTestcases.setRootDir("TestInput");
 	}
 	
 	@Test



From L.C.L.Kats at tudelft.nl  Tue Nov 17 14:14:03 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 17 Nov 2009 13:14:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20255 - LennartKats -
	in spoofax-imp/trunk: . org.strategoxt.imp.editors.aterm
	org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.editors.editorservice/editor
	org.strategoxt.imp.editors.sdf org.strategoxt.imp.editors.sdf/trans
	org.strategoxt.imp.editors.stratego/syntax
	org.strategoxt.imp.feature org.strategoxt.imp.generator/META-INF
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.metatooling
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
	org.strategoxt.imp.runtime org.strategoxt.imp.runtime/icons
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.updatesite
Message-ID: <200911171314.nAHDE3NI023948@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-17 13:14:02 +0000 (Tue, 17 Nov 2009)
New Revision: 20255

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20255&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/SPIJarsAntPropertyProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/StrategoJarAntPropertyProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/builder.png
Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-syntax-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
- Working on SDF editor errors/warnings
- Working on new ant properties to eliminate the download from build.xml
- Updated Stratego editor syntax
- Really rebuild builders after editor changes, even after a garbage collect
- More fixes and other uncommitted changes, I guess


Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/Makefile	2009-11-17 13:14:02 UTC (rev 20255)
@@ -10,7 +10,6 @@
 
 clean :
 	$(MAKE) -C org.strategoxt.imp.generator clean
-	$(MAKE) -C org.strategoxt.imp.editors.editorservice clean
 
 new-libs :
 	$(MAKE) -C org.strategoxt.imp.generator new-libs

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.classpath
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.classpath	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.classpath	2009-11-17 13:14:02 UTC (rev 20255)
@@ -4,6 +4,6 @@
 	<classpathentry kind="src" path="editor/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="lib" path="aux/strategoxt.jar"/>
+	<classpathentry kind="lib" path="utils/strategoxt.jar"/>
 	<classpathentry kind="output" path="bin"/>
-</classpath>
\ No newline at end of file
+</classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-11-17 13:14:02 UTC (rev 20255)
@@ -30,16 +30,14 @@
         <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
             <isset property="eclipse.spoofaximp.nativeprefix"/>
         </condition>
-        <condition property="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/" else="">
-            <isset property="eclipse.spoofaximp.nativeprefix"/>
-        </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
-        <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm
-                        -I ${user.home}/.nix-profile/share/java-front
-                        -I ${basedir}
-                        -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
+        <property name="build.stratego.args" value="--library
+        	            -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr
+        	            -la stratego-gpp -la stratego-xtc
+        	            -la stratego-aterm"/>
 	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
@@ -71,8 +69,8 @@
             <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
-        <target name="sdf2imp.standalone" depends="sdf2table,aux-files" unless="eclipse.running">
-            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="aux/sdf2imp.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="sdf2imp.standalone" depends="sdf2table,utils-files" unless="eclipse.running">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="utils/sdf2imp.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
@@ -82,8 +80,7 @@
         </target>
     
         <target name="sdf2table" depends="make-permissive">
-            <apply executable="${build.strategoxt.sdf.bin}sdf2table" dest="${include}" failonerror="true">
-                <env key="LD_LIBRARY_PATH" path="${build.strategoxt.sdf}/lib"/>
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>
                 <arg value="-o"/>
@@ -105,8 +102,8 @@
             <antcall target="make-permissive.helper"/>
         </target>
     
-        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="aux-files">
-            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="utils-files">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="utils/make_permissive.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.def"/>
@@ -116,14 +113,14 @@
             </java>
         </target>
 
-        <target name="aux-files" unless="aux-files.available">
+        <target name="utils-files" unless="utils-files.available">
             <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
-        	<property name="aux-files.available" value="1"/>
-            <mkdir dir="aux"/>
+        	<property name="utils-files.available" value="1"/>
+            <mkdir dir="utils"/>
             <parallel>
-                <get src="${site}/strategoxt.jar" dest="aux/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/make_permissive.jar" dest="aux/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/sdf2imp.jar" dest="aux/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/sdf2imp.jar" dest="utils/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
             </parallel>
         </target>
     
@@ -138,8 +135,8 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" depends="aux-files" unless="pack-sdf.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="pack-sdf.helper" depends="utils-files" unless="pack-sdf.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
                 <arg value="-i"/>
@@ -162,7 +159,7 @@
             <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
-        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled" unless="external-def">
+        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.rtg"/>
                 <targetfileset file="${include}/${sdfmodule}.str"/>
@@ -171,8 +168,8 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" depends="aux-files" unless="rtg2sig.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="rtg2sig.helper" depends="utils-files" unless="rtg2sig.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
                 <arg value="-i"/>
@@ -184,7 +181,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled" unless="external-def">
+        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -193,8 +190,8 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" depends="aux-files" unless="sdf2rtg.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="sdf2rtg.helper" depends="utils-files" unless="sdf2rtg.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>
                 <arg value="-i"/>
@@ -208,9 +205,29 @@
                 <arg value="${build.strategoxt.sdf}"/>
             </java>
         </target>
+        
+        <target name="ppgen" depends="pack-sdf" if="build.stratego.enabled">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.pp"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.pp" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+        </target>
     
+        <target name="ppgen.helper" depends="utils-files" unless="ppgen.available">
+            <java classname="start" dir="${include}" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${sdfmodule}.pp"/>
+            </java>
+        </target>
+    
         <!-- Stratego to Java interpreter -->
-        <target name="stratego.ctree" depends="rtg2sig">
+        <target name="stratego.ctree" depends="rtg2sig,ppgen">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -228,7 +245,7 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig">
+        <target name="stratego.jar" depends="rtg2sig,ppgen">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -242,12 +259,12 @@
                 <param name="build.stratego.extraargs" value="-la java-front"/>
                 <param name="build.stratego.extension" value="java"/>
             </antcall>
-            <javac classpath="aux/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="aux-files" unless="strc-java.available" if="build.stratego.enabled">
-            <java classname="org.strategoxt.strj.Main" classpath="aux/strategoxt.jar:aux/sdf2imp.jar" failonerror="true" fork="true">
+        <target name="stratego.jvm.helper" depends="utils-files" unless="strc-java.available" if="build.stratego.enabled">
+            <java classname="org.strategoxt.strj.Main" classpath="utils/strategoxt.jar:utils/sdf2imp.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${trans}/${strmodule}.str"/>
@@ -275,7 +292,7 @@
         </target>
         
         <!-- Helper target for calling the stratego compiler -->
-        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+        <target name="stratego.c.helper" depends="rtg2sig,ppgen" if="build.stratego.enabled">
             <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml	2009-11-17 13:14:02 UTC (rev 20255)
@@ -30,16 +30,14 @@
         <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
             <isset property="eclipse.spoofaximp.nativeprefix"/>
         </condition>
-        <condition property="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/" else="">
-            <isset property="eclipse.spoofaximp.nativeprefix"/>
-        </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
-        <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm
-                        -I ${user.home}/.nix-profile/share/java-front
-                        -I ${basedir}
-                        -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
+        <property name="build.stratego.args" value="--library
+        	            -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr
+        	            -la stratego-gpp -la stratego-xtc
+        	            -la stratego-aterm"/>
 	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
@@ -71,8 +69,8 @@
             <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
-        <target name="sdf2imp.standalone" depends="sdf2table,aux-files" unless="eclipse.running">
-            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="aux/sdf2imp.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="sdf2imp.standalone" depends="sdf2table,utils-files" unless="eclipse.running">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="utils/sdf2imp.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
@@ -82,8 +80,7 @@
         </target>
     
         <target name="sdf2table" depends="make-permissive">
-            <apply executable="${build.strategoxt.sdf.bin}sdf2table" dest="${include}" failonerror="true">
-                <env key="LD_LIBRARY_PATH" path="${build.strategoxt.sdf}/lib"/>
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>
                 <arg value="-o"/>
@@ -105,8 +102,8 @@
             <antcall target="make-permissive.helper"/>
         </target>
     
-        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="aux-files">
-            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="utils-files">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="utils/make_permissive.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.def"/>
@@ -116,14 +113,14 @@
             </java>
         </target>
 
-        <target name="aux-files" unless="aux-files.available">
+        <target name="utils-files" unless="utils-files.available">
             <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
-        	<property name="aux-files.available" value="1"/>
-            <mkdir dir="aux"/>
+        	<property name="utils-files.available" value="1"/>
+            <mkdir dir="utils"/>
             <parallel>
-                <get src="${site}/strategoxt.jar" dest="aux/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/make_permissive.jar" dest="aux/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/sdf2imp.jar" dest="aux/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/sdf2imp.jar" dest="utils/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
             </parallel>
         </target>
     
@@ -138,8 +135,8 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" depends="aux-files" unless="pack-sdf.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="pack-sdf.helper" depends="utils-files" unless="pack-sdf.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
                 <arg value="-i"/>
@@ -162,7 +159,7 @@
             <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
-        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled" unless="external-def">
+        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.rtg"/>
                 <targetfileset file="${include}/${sdfmodule}.str"/>
@@ -171,8 +168,8 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" depends="aux-files" unless="rtg2sig.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="rtg2sig.helper" depends="utils-files" unless="rtg2sig.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
                 <arg value="-i"/>
@@ -184,7 +181,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled" unless="external-def">
+        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -193,8 +190,8 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" depends="aux-files" unless="sdf2rtg.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="sdf2rtg.helper" depends="utils-files" unless="sdf2rtg.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>
                 <arg value="-i"/>
@@ -208,9 +205,29 @@
                 <arg value="${build.strategoxt.sdf}"/>
             </java>
         </target>
+        
+        <target name="ppgen" depends="pack-sdf" if="build.stratego.enabled">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.pp"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.pp" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+        </target>
     
+        <target name="ppgen.helper" depends="utils-files" unless="ppgen.available">
+            <java classname="start" dir="${include}" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${sdfmodule}.pp"/>
+            </java>
+        </target>
+    
         <!-- Stratego to Java interpreter -->
-        <target name="stratego.ctree" depends="rtg2sig">
+        <target name="stratego.ctree" depends="rtg2sig,ppgen">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -228,7 +245,7 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig">
+        <target name="stratego.jar" depends="rtg2sig,ppgen">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -242,12 +259,12 @@
                 <param name="build.stratego.extraargs" value="-la java-front"/>
                 <param name="build.stratego.extension" value="java"/>
             </antcall>
-            <javac classpath="aux/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="aux-files" unless="strc-java.available" if="build.stratego.enabled">
-            <java classname="org.strategoxt.strj.Main" classpath="aux/strategoxt.jar:aux/sdf2imp.jar" failonerror="true" fork="true">
+        <target name="stratego.jvm.helper" depends="utils-files" unless="strc-java.available" if="build.stratego.enabled">
+            <java classname="org.strategoxt.strj.Main" classpath="utils/strategoxt.jar:utils/sdf2imp.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${trans}/${strmodule}.str"/>
@@ -275,7 +292,7 @@
         </target>
         
         <!-- Helper target for calling the stratego compiler -->
-        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+        <target name="stratego.c.helper" depends="rtg2sig,ppgen" if="build.stratego.enabled">
             <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Builders.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Builders.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Builders.esv	2009-11-17 13:14:02 UTC (rev 20255)
@@ -0,0 +1,13 @@
+module EditorService-Builders
+
+imports
+  EditorService-Builders.generated
+
+analysis
+  
+
+
+
+// This file can be used for custom analysis rules.
+
+// See the imported file for a brief introduction and examples.
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-11-17 13:14:02 UTC (rev 20255)
@@ -6,6 +6,8 @@
         <property name="sdfmodule" value="SDF"/>
         <property name="esvmodule" value="SDF"/>
         <property name="strmodule" value="sdf"/>
+
+        <!-- Standard build file below, but without the ppgen dependency -->
     
         <!-- Project directories -->
         <property name="trans" location="trans"/>
@@ -30,16 +32,14 @@
         <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
             <isset property="eclipse.spoofaximp.nativeprefix"/>
         </condition>
-        <condition property="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/" else="">
-            <isset property="eclipse.spoofaximp.nativeprefix"/>
-        </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
-        <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm
-                        -I ${user.home}/.nix-profile/share/java-front
-                        -I ${basedir}
-                        -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
+        <property name="build.stratego.args" value="--library
+        	            -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr
+        	            -la stratego-gpp -la stratego-xtc
+        	            -la stratego-aterm"/>
 	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
@@ -71,8 +71,8 @@
             <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
-        <target name="sdf2imp.standalone" depends="sdf2table,aux-files" unless="eclipse.running">
-            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="aux/sdf2imp.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="sdf2imp.standalone" depends="sdf2table,utils-files" unless="eclipse.running">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="utils/sdf2imp.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
@@ -82,8 +82,7 @@
         </target>
     
         <target name="sdf2table" depends="make-permissive">
-            <apply executable="${build.strategoxt.sdf.bin}sdf2table" dest="${include}" failonerror="true">
-                <env key="LD_LIBRARY_PATH" path="${build.strategoxt.sdf}/lib"/>
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>
                 <arg value="-o"/>
@@ -105,8 +104,8 @@
             <antcall target="make-permissive.helper"/>
         </target>
     
-        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="aux-files">
-            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="utils-files">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="utils/make_permissive.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.def"/>
@@ -116,14 +115,14 @@
             </java>
         </target>
 
-        <target name="aux-files" unless="aux-files.available">
+        <target name="utils-files" unless="utils-files.available">
             <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
-        	<property name="aux-files.available" value="1"/>
-            <mkdir dir="aux"/>
+        	<property name="utils-files.available" value="1"/>
+            <mkdir dir="utils"/>
             <parallel>
-                <get src="${site}/strategoxt.jar" dest="aux/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/make_permissive.jar" dest="aux/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/sdf2imp.jar" dest="aux/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/sdf2imp.jar" dest="utils/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
             </parallel>
         </target>
     
@@ -138,8 +137,8 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" depends="aux-files" unless="pack-sdf.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="pack-sdf.helper" depends="utils-files" unless="pack-sdf.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
                 <arg value="-i"/>
@@ -162,7 +161,7 @@
             <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
-        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled" unless="external-def">
+        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.rtg"/>
                 <targetfileset file="${include}/${sdfmodule}.str"/>
@@ -171,8 +170,8 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" depends="aux-files" unless="rtg2sig.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="rtg2sig.helper" depends="utils-files" unless="rtg2sig.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
                 <arg value="-i"/>
@@ -184,7 +183,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled" unless="external-def">
+        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -193,8 +192,8 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" depends="aux-files" unless="sdf2rtg.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="sdf2rtg.helper" depends="utils-files" unless="sdf2rtg.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>
                 <arg value="-i"/>
@@ -208,7 +207,27 @@
                 <arg value="${build.strategoxt.sdf}"/>
             </java>
         </target>
+        
+        <target name="ppgen" depends="pack-sdf" if="build.stratego.enabled">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.pp"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.pp" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+        </target>
     
+        <target name="ppgen.helper" depends="utils-files" unless="ppgen.available">
+            <java classname="start" dir="${include}" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${sdfmodule}.pp"/>
+            </java>
+        </target>
+    
         <!-- Stratego to Java interpreter -->
         <target name="stratego.ctree" depends="rtg2sig">
             <dependset>
@@ -228,7 +247,7 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig">
+        <target name="stratego.jar" depends="rtg2sig,ppgen">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -242,12 +261,12 @@
                 <param name="build.stratego.extraargs" value="-la java-front"/>
                 <param name="build.stratego.extension" value="java"/>
             </antcall>
-            <javac classpath="aux/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="aux-files" unless="strc-java.available" if="build.stratego.enabled">
-            <java classname="org.strategoxt.strj.Main" classpath="aux/strategoxt.jar:aux/sdf2imp.jar" failonerror="true" fork="true">
+        <target name="stratego.jvm.helper" depends="utils-files" unless="strc-java.available" if="build.stratego.enabled">
+            <java classname="org.strategoxt.strj.Main" classpath="utils/strategoxt.jar:utils/sdf2imp.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${trans}/${strmodule}.str"/>
@@ -275,7 +294,7 @@
         </target>
         
         <!-- Helper target for calling the stratego compiler -->
-        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+        <target name="stratego.c.helper" depends="rtg2sig,ppgen" if="build.stratego.enabled">
             <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2009-11-17 13:14:02 UTC (rev 20255)
@@ -8,9 +8,31 @@
 signature constructors
 
   context-free-syntax : Term -> Term
+  sort                : Term -> Term
+  term                : Term -> Term
+  cons                : Term -> Term
+  iter-star           : Term -> Term
+  iter-plus           : Term -> Term
+  iter-star-sep       : Term * Term -> Term
+  iter-plus-sep       : Term * Term -> Term
+  prod                : Term * Term * Term -> Term
+  
 
 rules
 
+  editor-analyze:
+    (ast, path, project-path) -> (errors, [], [])
+    with
+      errors := <alltd(context-free-syntax(collect-all(context-free-syntax-error)))> ast
+  
+  context-free-syntax-error:
+    prod(s*, s, a*) -> (s, "Production should contain a {cons(\"Label\")} attribute used as a label in the abstract syntax")
+    where
+      <collect(?sort(_) + ?iter-star(_) + ?iter-plus(_) + ?iter-star-sep(_, _) + ?iter-plus-sep(_, _))> s;
+      <not(one(?term(cons(_))))> a*
+
+rules
+
   generate-pp-rules:
     (selected, position, ast, path, project-path) -> (filename, result)
     where

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def	2009-11-17 13:14:02 UTC (rev 20255)
@@ -237,6 +237,9 @@
     Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
     Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
 
+    "proceed"                          -> Strategy {cons("ProceedNoArgs"), prefer}
+    "proceed" "(" {Strategy "," }+ ")" -> Strategy {cons("Proceed"), prefer}
+
     "if" Strategy "then" Strategy 
                   "else" Strategy "end"   -> Strategy {cons("CondChoice")}
     "if" Strategy "then" Strategy "end"   -> Strategy {cons("IfThen")}
@@ -492,8 +495,10 @@
 
     "fail" 				  -> Strategy {cons("Fail")}
     "id" 				  -> Strategy {cons("Id")}
-    "override" 			  -> Strategy {cons("Override")}
 
+    "proceed" "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("ProceedT"), prefer}
+    "proceed"                                         -> Strategy {cons("ProceedNoArgs"), prefer}
+
     %% Match and build
 
     "?" Term 				  -> Strategy {cons("Match")}
@@ -574,6 +579,58 @@
     RuleDef 			-> Def 
 
 
+module Stratego-Sugar-StringQuotations
+exports
+
+  sorts
+    StringQuotation
+    StringQuotedPart1 StringQuotedChars1
+    StringQuotedPart2 StringQuotedChars2
+    StringQuotedPart3 StringQuotedChars3
+    StringQuotedPart4 StringQuotedChars4
+    Padding
+
+  context-free syntax
+
+    StringQuotation -> PreTerm
+
+  syntax
+  
+    %% TODO: use $[ to escape [ ?
+
+    StringQuotation -> <PreTerm-CF>
+
+    "$" "[" Padding StringQuotedPart1*               "]"    -> StringQuotation {cons("StringQuotation1") }
+     Padding "[" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "]"    -> StringQuotedPart1 {cons("StringEscape1")}
+    <StringQuotedChars1-LEX>                                -> StringQuotedPart1 {cons("QStr")}
+    ~[\[\]]+                                                -> <StringQuotedChars1-LEX>
+
+    "$" "{" Padding StringQuotedPart2*               "}"    -> StringQuotation {cons("StringQuotation2") }
+     Padding "{" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "}"    -> StringQuotedPart2 {cons("StringEscape2")}
+    <StringQuotedChars2-LEX>                                -> StringQuotedPart2 {cons("QStr")}
+    ~[\{\}]+                                                -> <StringQuotedChars2-LEX>
+
+    "$" "(" Padding StringQuotedPart3*              ")"     -> StringQuotation {cons("StringQuotation3") }
+    Padding "(" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ")"     -> StringQuotedPart3 {cons("StringEscape3")}
+    <StringQuotedChars3-LEX>                                -> StringQuotedPart3 {cons("QStr")}
+    ~[\[\]]*                                                -> <StringQuotedChars3-LEX>
+
+    "$" "<" Padding StringQuotedPart4*               ">"    -> StringQuotation {cons("StringQuotation4") }
+    Padding "<"  <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ">"    -> StringQuotedPart4 {cons("StringEscape4")}
+    <StringQuotedChars4-LEX>                                -> StringQuotedChars4 {cons("QStr")}
+    ~[\<\>]+                                                -> <StringQuotedChars4-LEX>
+   
+    %% Padding is a dummy lexical that will contain the indentation prefix of every quotation
+    <Padding-LEX>                                           -> Padding
+                                                            -> <Padding-LEX> {indentpadding}
+
+  lexical restrictions
+
+    StringQuotedChars1 -/- ~[\[\]]   
+    StringQuotedChars2 -/- ~[\{\}]    
+    StringQuotedChars3 -/- ~[\(\)]    
+    StringQuotedChars4 -/- ~[\<\>]
+
 module Stratego-Core-Constants
 exports
   sorts Int Real String StrChar
@@ -586,7 +643,10 @@
 
 
 module Stratego-Sugar-Constants
-imports Stratego-Core-Identifiers Stratego-Core-Constants
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+  Stratego-Sugar-StringQuotations
 exports
   sorts Char CharChar
   lexical syntax

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-17 13:14:02 UTC (rev 20255)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.1.1.3"
+      version="0.1.1.4"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">
@@ -198,7 +198,7 @@
          id="org.strategoxt.imp.generator"
          download-size="0"
          install-size="0"
-         version="0.1.1.qualifier"/>
+         version="0.1.2.qualifier"/>
 
    <plugin
          id="org.strategoxt.imp.editors.sdf"

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF	2009-11-17 13:14:02 UTC (rev 20255)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: Spoofax/IMP Metatooling
 Bundle-SymbolicName: org.strategoxt.imp.generator;singleton:=true
-Bundle-Version: 0.1.1.qualifier
+Bundle-Version: 0.1.2.qualifier
 Bundle-ClassPath: lib/make_permissive.jar,
  lib/sdf2imp.jar
 Require-Bundle: org.spoofax.aterm,

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-17 13:14:02 UTC (rev 20255)
@@ -136,6 +136,7 @@
             <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
         	<property name="utils-files.available" value="1"/>
             <mkdir dir="utils"/>
+            <!-- TODO: <copy file="${}" todir="${include}" preservelastmodified="true"/> -->
             <parallel>
                 <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
                 <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-17 13:14:02 UTC (rev 20255)
@@ -137,7 +137,7 @@
    * Adds a note to modules named \"example.\"
    */
   constraint-note:
-    Module(x, _) -> (x, [\"This is just an example program in the \\\"entities\\\" language,\"
+    Module(x, _) -> (x, [\"This is just an example program in the \\\"entities\\\" language,\",
                          \" (this note is defined in trans/", name, ".str) ])\"])
     where
       !x => \"example\"

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-syntax-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-syntax-descriptor.str	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-syntax-descriptor.str	2009-11-17 13:14:02 UTC (rev 20255)
@@ -36,7 +36,5 @@
           fences: [  ]
                   (  )
                   {  }
-                  |[ ]|
-                  <? ?>
       ]|
     )

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml	2009-11-17 13:14:02 UTC (rev 20255)
@@ -34,5 +34,13 @@
             class="org.strategoxt.imp.metatooling.NativePrefixAntPropertyProvider"
             name="eclipse.spoofaximp.nativeprefix">
       </antProperty>
+      <antProperty
+            class="org.strategoxt.imp.metatooling.StrategoJarAntPropertyProvider"
+            name="eclipse.spoofaximp.strategojar">
+      </antProperty>
+      <antProperty
+            class="org.strategoxt.imp.metatooling.SPIJarsAntPropertyProvider"
+            name="eclipse.spoofaximp.jars">
+      </antProperty>
    </extension>
 </plugin>

Added: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/SPIJarsAntPropertyProvider.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/SPIJarsAntPropertyProvider.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/SPIJarsAntPropertyProvider.java	2009-11-17 13:14:02 UTC (rev 20255)
@@ -0,0 +1,21 @@
+package org.strategoxt.imp.metatooling;
+
+import org.eclipse.ant.core.IAntPropertyValueProvider;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SPIJarsAntPropertyProvider implements IAntPropertyValueProvider {
+	
+	public String getAntPropertyValue(String antPropertyName) {
+		/* TODO
+		String result = new File(make_permissive.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getParent();
+		if (Platform.getOS().equals(Platform.OS_WIN32)) {
+			// FIXME: proper paths on Windows
+			result = result.substring(1);
+		}
+		return result;
+		*/
+		return "<notimplemented>";
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/StrategoJarAntPropertyProvider.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/StrategoJarAntPropertyProvider.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/StrategoJarAntPropertyProvider.java	2009-11-17 13:14:02 UTC (rev 20255)
@@ -0,0 +1,19 @@
+package org.strategoxt.imp.metatooling;
+
+import org.eclipse.ant.core.IAntPropertyValueProvider;
+import org.eclipse.core.runtime.Platform;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class StrategoJarAntPropertyProvider implements IAntPropertyValueProvider {
+	
+	public String getAntPropertyValue(String antPropertyName) {
+		String result = org.strategoxt.stratego_lib.Main.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+		if (Platform.getOS().equals(Platform.OS_WIN32)) {
+			// FIXME: proper paths on Windows
+			result = result.substring(1);
+		}
+		return result;
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-11-17 13:14:02 UTC (rev 20255)
@@ -130,7 +130,6 @@
 
 		agent.setWorkingDir(project.getLocation().toOSString());
 		try {
-			
 			String jar1 = org.strategoxt.stratego_lib.Main.class.getProtectionDomain().getCodeSource().getLocation().getFile();
 			String jar2 = make_permissive.class.getProtectionDomain().getCodeSource().getLocation().getFile();
 			String jar3 = sdf2imp.class.getProtectionDomain().getCodeSource().getLocation().getFile();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch	2009-11-17 13:14:02 UTC (rev 20255)
@@ -12,7 +12,7 @@
 <stringAttribute key="configLocation" value="${workspace_loc}/.metadata/.plugins/org.eclipse.pde.core/Spoofax-IMP (with assertions)"/>
 <booleanAttribute key="default" value="true"/>
 <booleanAttribute key="includeOptional" value="true"/>
-<stringAttribute key="location" value="${workspace_loc}/../runtime-spoofax-imp (with spaces)"/>
+<stringAttribute key="location" value="${workspace_loc}/../runtime-spoofax-imp"/>
 <stringAttribute key="org.eclipse.debug.core.source_locator_id" value="org.eclipse.pde.ui.launcher.PDESourceLookupDirector"/>
 <stringAttribute key="org.eclipse.debug.core.source_locator_memento" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;sourceLookupDirector&gt;&#10;&lt;sourceContainers duplicates=&quot;false&quot;&gt;&#10;&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;folder nest=&amp;quot;false&amp;quot; path=&amp;quot;/webdsl/src/bin&amp;quot;/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.debug.core.containerType.folder&quot;/&gt;&#10;&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;default/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.debug.core.containerType.default&quot;/&gt;&#10;&lt;/sourceContainers&gt;&#10;&lt;/sourceLookupDirector&gt;&#10;"/>
 <listAttribute key="org.eclipse.debug.ui.favoriteGroups">

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/builder.png
===================================================================
(Binary files differ)


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.runtime/icons/builder.png
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-17 13:14:02 UTC (rev 20255)
@@ -201,12 +201,12 @@
          <action
                class="org.strategoxt.imp.runtime.stratego.BuilderButtonDelegate"
                definitionId="org.strategoxt.imp.runtime.transformCommand"
-               icon="icons/builder.png"
                id="org.strategoxt.imp.runtime.stratego.builder"
                label="Apply transformation"
                style="pulldown"
                toolbarPath="spoofax"
                tooltip="Apply transformation to file in current editor"/>
+               <!-- TODO: icon="icons/builder.png" -->
       </actionSet>
    </extension>
    <extension

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2009-11-17 13:03:31 UTC (rev 20254)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2009-11-17 13:14:02 UTC (rev 20255)
@@ -13,6 +13,7 @@
 import org.spoofax.jsglr.SGLR;
 import org.spoofax.jsglr.SGLRException;
 import org.spoofax.jsglr.TokenExpectedException;
+import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKindManager;
 
@@ -80,6 +81,8 @@
 			parser.setRecoverHandler(recoverHandler);
 		} catch (NoRecoveryRulesException e) {
 			// Already handled/logged this error in setRecoverHandler()

(133 diff lines omitted)


From m.dejonge at tudelft.nl  Tue Nov 17 14:14:55 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 13:14:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20256 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/src:
	evaluating tests
Message-ID: <200911171314.nAHDEtXY023953@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 13:14:55 +0000 (Tue, 17 Nov 2009)
New Revision: 20256

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20256&view=rev

Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java

Log:


Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-17 13:14:02 UTC (rev 20255)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-17 13:14:55 UTC (rev 20256)
@@ -37,7 +37,8 @@
 		if(useAllDirectories){
 			directories.clear();
 			for (String subDir : new File(RoorDir).list()) {
-				addDir(subDir);
+				if(!subDir.equals(".svn"))
+					addDir(subDir);
 			}
 		}
 		if(useAllExtensions){
@@ -102,7 +103,7 @@
 	}
 
 	public void setAllDirectories(boolean useAll) {
-		useAllExtensions=useAll;
+		useAllDirectories=useAll;
 	}
 
 	public void setRootDir(String dir) {

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-17 13:14:02 UTC (rev 20255)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-17 13:14:55 UTC (rev 20256)
@@ -29,6 +29,7 @@
 	@Test
 	public void test_allDir_allExtensions() throws IOException{
 		myTestcases.runTestcases();
+		Assert.assertEquals(5, myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
@@ -37,6 +38,7 @@
 					.addDir("Common")
 					.addExtension("java");
 		myTestcases.runTestcases();
+		Assert.assertEquals(3, myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
@@ -45,11 +47,13 @@
 					.addExtension("java")
 					.addExtension("str");
 		myTestcases.runTestcases();
+		Assert.assertEquals(3, myTestcases.getStatistics().getNumberOfFiles());
 	}
 		
 	@Test
 	public void test_Default_isAll() throws IOException{
 		myTestcases.runTestcases();
+		Assert.assertEquals(5, myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
@@ -59,6 +63,7 @@
 		myTestcases.setAllExtensions(true);	
 		myTestcases.setAllDirectories(true);
 		myTestcases.runTestcases();
+		Assert.assertEquals(5, myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
@@ -85,8 +90,7 @@
 	
 	@Test(expected=IOException.class)
 	public void test_Processing_Dir_not_Exist() throws IOException{		
-		myTestcases.processFiles("Nonsense", "");
-		Assert.assertEquals(2, myTestcases.getStatistics().getNumberOfFiles());	
+		myTestcases.processFiles("Nonsense", "");			
 	}
 
 }



From m.dejonge at tudelft.nl  Tue Nov 17 14:45:56 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 13:45:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20257 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: . Input
Message-ID: <200911171345.nAHDjuGh024219@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 13:45:56 +0000 (Tue, 17 Nov 2009)
New Revision: 20257

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20257&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/MessyIndent/
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Problematic/
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/

Log:
InputFiles

Changes:



From m.dejonge at tudelft.nl  Tue Nov 17 14:48:44 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 13:48:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20258 - MaartjeDeJonge -
	sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples
Message-ID: <200911171348.nAHDmitk024402@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 13:48:44 +0000 (Tue, 17 Nov 2009)
New Revision: 20258

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20258&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/delme2.del
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/erroneous.app
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/javafragment.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/line-before-comment.str

Log:
Examples from Spoofax

Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/delme2.del
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/delme2.del	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/delme2.del	2009-11-17 13:48:44 UTC (rev 20258)
@@ -0,0 +1,12 @@
+module example
+
+// Example delme2 program
+
+entity Foo {
+  bar : String
+  baz : String
+}
+
+entity Qux {
+  foo : Foo
+}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/erroneous.app
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/erroneous.app	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/erroneous.app	2009-11-17 13:48:44 UTC (rev 20258)
@@ -0,0 +1,29 @@
+module notrecoverednicely
+
+ entity PublicationList {
+    publications -> Set<Publication>
+
+    buckets <> Set<PublicationBucket>
+
+    function add(pub : Publication) {
+      publications.add(pub);
+    }
+    function insert(val : String, pub : Publication) {
+      for(b : PublicationBucket in buckets) {
+        if(b.key == val) {
+          b.add(pub);
+          b.size := b.size + 1;
+         return;
+        }
+      }
+      buckets.add(PublicationBucket{ publications := x }
+    }
+
+    publicationKey -> PublicationKey
+
+    function foo() {
+      for(pub : Publication in this.publications) {
+        insert(pub.year, pub);
+      }
+    }
+  }
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str	2009-11-17 13:48:44 UTC (rev 20258)
@@ -0,0 +1,70 @@
+module foo
+
+imports
+  libstratego-lib
+  foo
+
+strategie\
+
+  main-foo =
+    fatal-err(|"No main strategy")
+        
+  editor-analyze:
+    (ast, path, fullpath) -> (errors, warnings, notes)
+    with
+      // Analysis: scope and record dynamic rules
+      try(dr-scope-all-end);
+      dr-scope-all-start;
+      alltd(record-entity)
+    with
+      errors   := <collect-all(include-origin(constraint-error))> ast;
+      warnings := <collect-all(include-origin(constraint-warning))> ast;
+      notes    := <collect-all(include-origin(constraint-note))> ast
+   
+  include-origin(s):
+    t -> (t, message)
+    where
+      message := <s; try(all(is-string <+ write-to-string)); try(concat-strings)> t
+  
+  editor-resolve:
+    (Type(type), position, ast, path, fullpath) -> target
+    where
+      target := <GetEntity> type
+
+  editor-hover:
+    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term)
+
+rules
+
+  record-entity:
+    Entity(x_declaration, body) -> Entity(x_declaration, body)
+    with
+      x_reference := x_declaration;
+      rules(
+        GetEntity: x_reference -> x_declaration
+      )
+    
+  constraint-error:
+    Property(x, Type(type)) -> ["Type ", type, " is not defined"]
+    where
+      not(!type => "String");
+      not(!type => "Int");
+      not(<GetEntity> type)
+  
+  constraint-warning:
+    Entity(x, _) -> "Entity names must start with a capital"
+    where
+      not(<explode-string; Hd; is-upper> x)
+  
+  constraint-note:
+    Module("example", _) -> "This is just an example program in the \"entities\" language"
+
+signature constructors
+
+  // These definitions are not strictly necessary,
+  // but they ensure that the build doesn't break if the syntax
+  // is changed and these constructors no longer exist
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/javafragment.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/javafragment.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/javafragment.java	2009-11-17 13:48:44 UTC (rev 20258)
@@ -0,0 +1,21 @@
+package test;
+
+public class example {
+	
+	public int i;
+	
+	public example(){
+		i=0;
+	}
+	
+	public boolean answerTrue(boolean question){
+		boolean answer=question;
+		if(!answer){
+			answer = !answer;
+			return answerTrue(answer)
+		}
+		else{
+			return answer;
+		}
+	}
+}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/line-before-comment.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/line-before-comment.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/line-before-comment.str	2009-11-17 13:48:44 UTC (rev 20258)
@@ -0,0 +1,142 @@
+module arithmetic
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/Arithmetic
+
+rules // Main editor interface (defined by the .esv files)
+  
+  /**
+   * Analyzes the current program.
+   * Returns a Tuple with errors, warnings, and notes;
+   * each a list of (term, message) tuples.
+   */
+  editor-analyze:
+    (ast, path, project-path) -> (errors, warnings, notes)
+    with
+      // Analysis: scope and record dynamic rules
+      try(dr-scope-all-end);
+      dr-scope-all-start;
+      alltd(record-entity)
+    with
+      errors   := <collect-all(include-origin(constraint-error))> ast;
+      warnings := <collect-all(include-origin(constraint-warning))> ast;
+      notes    := <collect-all(include-origin(constraint-note))> ast
+  
+  /**
+   * Resolves a reference when the user control-clicks or presses F3 in the editor.
+   * For the entities language, only Type(_) nodes are resolved by default.
+   */
+  editor-resolve:
+    (Type(type), position, ast, path, project-path) -> target
+    where
+      target := <GetEntity> type
+
+  /**
+   * Returns "hover help" information for a particular node in the editor.
+   * For references, this rule is invoked using the resolved term.
+   */
+  editor-hover:
+    (target, position, ast, path, project-path) -> <conc-strings> ("Hover help: ", <write-to-string> target)
+  
+  /**
+   * Transforms a selection to Java.
+   */
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result-string)
+    with
+      filename      := <guarantee-extension(|"ppa")> path;
+      result-string := <eval /*; pp-aterm-box; box2text-string(|120) */> selected
+  
+  eval = innermost(evaluate); topdown(try(int-to-string)) //; topdown(del-origin; try(inc; dec))
+  evaluate: add(ea1, ea2) -> r with  r:= <add>(<string-to-int> ea1, <string-to-int> ea2)
+  evaluate: num(x) -> x
+  del-origin =
+    Expressions([del-origin'; dec; inc]; del-origin'); del-origin'
+  
+  del-origin': x#(c*) -> x#(c*)
+  de //errorline
+  
+  /**
+   * Prints the abstract syntax ATerm of a selection.
+   */
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result-string)
+    with
+      filename      := <guarantee-extension(|"aterm")> path;
+      result-string := <pp-aterm-box; box2text-string(|120)> selected
+  
+  /**
+   * Adds the originating term to the result of a constraint rule,
+   * and concatenates strings in the resulting message if necessary.
+   */
+  include-origin(s):
+    t -> (t', message')
+    where
+      result := <s> t
+    with
+      if not(!result => (t', message)) then
+        message := result;
+        t'      := t
+      end;
+      message' := <try(all(is-string <+ write-to-string); concat-strings)> message
+
+rules // Semantic rules
+    
+  /**
+   * Reports an error if a property type is undefined.
+   */
+  constraint-error:
+    Property(x, Type(type)) -> ["Type ", type, " is not defined"]
+    where
+      not(!type => "String");
+      not(!type => "Int");
+      not(<GetEntity> type)
+  
+  /**
+   * Reports an error if an entity is defined more than once.
+   * This constraint is implemented by testing if the "bag" of
+   * all entities x is not a singleton list.
+   * This error is reported on the entity name x.
+   */
+  constraint-error:
+    Entity(x, _) -> (x, "Duplicate entity name")
+    where
+      not(<bagof-GetEntity> x => [_])
+  
+  /**
+   * Reports a warning if an entity name does not start with a capital.
+   * This error is reported on the entity name x.
+   */
+  constraint-warning:
+    Entity(x, _) -> (x, "Entity names must start with a capital")
+    where
+      not(<explode-string; Hd; is-upper> x)
+  
+  /**
+   * Adds a note to modules named "example."
+   */
+  constraint-note:
+    Module("example", _) -> "This is just an example program in the \"entities\" language (this note is defined in trans/arithmetic.str)"
+
+  /**
+   * Records the definition of an entity in a dynamic rule GetEntity.
+   */
+  record-entity:
+    Entity(x, body) -> Entity(x, body)
+    with
+      rules(
+        GetEntity :+ x -> x
+      )
+
+signature constructors
+
+  // These definitions are not strictly necessary, but they
+  // ensure that the build doesn't break if the example syntax
+  // is changed and these constructors no longer exist.
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type



From m.dejonge at tudelft.nl  Tue Nov 17 14:57:39 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 13:57:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20259 - MaartjeDeJonge -
	sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples
Message-ID: <200911171357.nAHDvdPP024482@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 13:57:39 +0000 (Tue, 17 Nov 2009)
New Revision: 20259

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20259&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with1.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with2.str

Log:


Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with1.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with1.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with1.str	2009-11-17 13:57:39 UTC (rev 20259)
@@ -0,0 +1,7 @@
+module m
+
+  rules
+ 
+    r:
+      (a b) -> c
+      with d; e
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with2.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with2.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with2.str	2009-11-17 13:57:39 UTC (rev 20259)
@@ -0,0 +1,8 @@
+module m
+
+  rules
+ 
+    r:
+      (a b) -> c
+      with d; e; 
+        f
\ No newline at end of file



From L.C.L.Kats at tudelft.nl  Tue Nov 17 14:59:05 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 17 Nov 2009 13:59:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20260 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.aterm
	org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.editors.sdf org.strategoxt.imp.editors.stratego
	org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <200911171359.nAHDx5pO024505@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-17 13:59:05 +0000 (Tue, 17 Nov 2009)
New Revision: 20260

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20260&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Log:
Fixes for clean builds.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-11-17 13:57:39 UTC (rev 20259)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-11-17 13:59:05 UTC (rev 20260)
@@ -6,6 +6,8 @@
         <property name="sdfmodule" value="ATerm"/>
         <property name="esvmodule" value="ATerm"/>
         <property name="strmodule" value="aterm"/>
+        
+        <!-- Standard build file without ppgen dependency follows -->
     
         <!-- Project directories -->
         <property name="trans" location="trans"/>
@@ -117,6 +119,7 @@
             <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
         	<property name="utils-files.available" value="1"/>
             <mkdir dir="utils"/>
+            <!-- TODO: <copy file="${}" todir="${include}" preservelastmodified="true"/> -->
             <parallel>
                 <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
                 <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
@@ -181,7 +184,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled">
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -227,7 +230,7 @@
         </target>
     
         <!-- Stratego to Java interpreter -->
-        <target name="stratego.ctree" depends="rtg2sig,ppgen">
+        <target name="stratego.ctree" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -245,7 +248,7 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig,ppgen">
+        <target name="stratego.jar" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -292,7 +295,7 @@
         </target>
         
         <!-- Helper target for calling the stratego compiler -->
-        <target name="stratego.c.helper" depends="rtg2sig,ppgen" if="build.stratego.enabled">
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
             <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml	2009-11-17 13:57:39 UTC (rev 20259)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml	2009-11-17 13:59:05 UTC (rev 20260)
@@ -6,6 +6,8 @@
         <property name="sdfmodule" value="EditorService"/>
         <property name="esvmodule" value="EditorService"/>
         <property name="strmodule" value="editorservice"/>
+        
+        <!-- Standard build file without ppgen dependency follows -->
     
         <!-- Project directories -->
         <property name="trans" location="trans"/>
@@ -117,6 +119,7 @@
             <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
         	<property name="utils-files.available" value="1"/>
             <mkdir dir="utils"/>
+            <!-- TODO: <copy file="${}" todir="${include}" preservelastmodified="true"/> -->
             <parallel>
                 <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
                 <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
@@ -181,7 +184,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled">
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -227,7 +230,7 @@
         </target>
     
         <!-- Stratego to Java interpreter -->
-        <target name="stratego.ctree" depends="rtg2sig,ppgen">
+        <target name="stratego.ctree" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -245,7 +248,7 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig,ppgen">
+        <target name="stratego.jar" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -292,7 +295,7 @@
         </target>
         
         <!-- Helper target for calling the stratego compiler -->
-        <target name="stratego.c.helper" depends="rtg2sig,ppgen" if="build.stratego.enabled">
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
             <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-11-17 13:57:39 UTC (rev 20259)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-11-17 13:59:05 UTC (rev 20260)
@@ -6,8 +6,8 @@
         <property name="sdfmodule" value="SDF"/>
         <property name="esvmodule" value="SDF"/>
         <property name="strmodule" value="sdf"/>
-
-        <!-- Standard build file below, but without the ppgen dependency -->
+        
+        <!-- Standard build file without ppgen dependency follows -->
     
         <!-- Project directories -->
         <property name="trans" location="trans"/>
@@ -119,6 +119,7 @@
             <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
         	<property name="utils-files.available" value="1"/>
             <mkdir dir="utils"/>
+            <!-- TODO: <copy file="${}" todir="${include}" preservelastmodified="true"/> -->
             <parallel>
                 <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
                 <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
@@ -183,7 +184,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled">
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -247,7 +248,7 @@
         </target>
     
         <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig,ppgen">
+        <target name="stratego.jar" depends="rtg2sig">
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.str"/>
@@ -294,7 +295,7 @@
         </target>
         
         <!-- Helper target for calling the stratego compiler -->
-        <target name="stratego.c.helper" depends="rtg2sig,ppgen" if="build.stratego.enabled">
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
             <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml	2009-11-17 13:57:39 UTC (rev 20259)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml	2009-11-17 13:59:05 UTC (rev 20260)
@@ -6,6 +6,8 @@
         <property name="sdfmodule" value="Stratego-Sugar"/>
         <property name="esvmodule" value="Stratego-Sugar"/>
         <property name="strmodule" value="stratego_sugar"/>
+        
+        <!-- Standard build file without ppgen dependency follows -->
     
         <!-- Project directories -->
         <property name="trans" location="trans"/>
@@ -30,16 +32,14 @@
         <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
             <isset property="eclipse.spoofaximp.nativeprefix"/>
         </condition>
-        <condition property="build.strategoxt.sdf.bin" value="${eclipse.spoofaximp.nativeprefix}/bin/" else="">
-            <isset property="eclipse.spoofaximp.nativeprefix"/>
-        </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
-        <property name="build.stratego.args" value="-m main-${strmodule} --library -I ${trans} -I ${build} -I ${lib}
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm
-                        -I ${user.home}/.nix-profile/share/java-front
-                        -I ${basedir}
-                        -la ${user.home}/.nix-profile/lib/libjava-front.la"/>
+        <property name="build.stratego.args" value="--library
+        	            -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr
+        	            -la stratego-gpp -la stratego-xtc
+        	            -la stratego-aterm"/>
 	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
@@ -71,8 +71,8 @@
             <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
-        <target name="sdf2imp.standalone" depends="sdf2table,aux-files" unless="eclipse.running">
-            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="aux/sdf2imp.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="sdf2imp.standalone" depends="sdf2table,utils-files" unless="eclipse.running">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="utils/sdf2imp.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
@@ -82,8 +82,7 @@
         </target>
     
         <target name="sdf2table" depends="make-permissive">
-            <apply executable="${build.strategoxt.sdf.bin}sdf2table" dest="${include}" failonerror="true">
-                <env key="LD_LIBRARY_PATH" path="${build.strategoxt.sdf}/lib"/>
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>
                 <arg value="-o"/>
@@ -105,8 +104,8 @@
             <antcall target="make-permissive.helper"/>
         </target>
     
-        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="aux-files">
-            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="utils-files">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="utils/make_permissive.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.def"/>
@@ -116,14 +115,15 @@
             </java>
         </target>
 
-        <target name="aux-files" unless="aux-files.available">
+        <target name="utils-files" unless="utils-files.available">
             <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
-        	<property name="aux-files.available" value="1"/>
-            <mkdir dir="aux"/>
+        	<property name="utils-files.available" value="1"/>
+            <mkdir dir="utils"/>
+            <!-- TODO: <copy file="${}" todir="${include}" preservelastmodified="true"/> -->
             <parallel>
-                <get src="${site}/strategoxt.jar" dest="aux/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/make_permissive.jar" dest="aux/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/sdf2imp.jar" dest="aux/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
+                <get src="${site}/sdf2imp.jar" dest="utils/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
             </parallel>
         </target>
     
@@ -138,8 +138,8 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" depends="aux-files" unless="pack-sdf.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="pack-sdf.helper" depends="utils-files" unless="pack-sdf.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
                 <arg value="-i"/>
@@ -162,7 +162,7 @@
             <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
-        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled" unless="external-def">
+        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.rtg"/>
                 <targetfileset file="${include}/${sdfmodule}.str"/>
@@ -171,8 +171,8 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" depends="aux-files" unless="rtg2sig.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="rtg2sig.helper" depends="utils-files" unless="rtg2sig.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
                 <arg value="-i"/>
@@ -184,7 +184,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled" unless="external-def">
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -193,8 +193,8 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" depends="aux-files" unless="sdf2rtg.available">
-            <java classname="start" classpath="aux/strategoxt.jar" failonerror="true" fork="true">
+        <target name="sdf2rtg.helper" depends="utils-files" unless="sdf2rtg.available">
+            <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>
                 <arg value="-i"/>
@@ -208,7 +208,27 @@
                 <arg value="${build.strategoxt.sdf}"/>
             </java>
         </target>
+        
+        <target name="ppgen" depends="pack-sdf" if="build.stratego.enabled">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.pp"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.pp" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+        </target>
     
+        <target name="ppgen.helper" depends="utils-files" unless="ppgen.available">
+            <java classname="start" dir="${include}" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
+                <jvmarg line="${build.jvmargs}"/>
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${sdfmodule}.pp"/>
+            </java>
+        </target>
+    
         <!-- Stratego to Java interpreter -->
         <target name="stratego.ctree" depends="rtg2sig">
             <dependset>
@@ -242,12 +262,12 @@
                 <param name="build.stratego.extraargs" value="-la java-front"/>
                 <param name="build.stratego.extension" value="java"/>
             </antcall>
-            <javac classpath="aux/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
+            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="aux-files" unless="strc-java.available" if="build.stratego.enabled">
-            <java classname="org.strategoxt.strj.Main" classpath="aux/strategoxt.jar:aux/sdf2imp.jar" failonerror="true" fork="true">
+        <target name="stratego.jvm.helper" depends="utils-files" unless="strc-java.available" if="build.stratego.enabled">
+            <java classname="org.strategoxt.strj.Main" classpath="utils/strategoxt.jar:utils/sdf2imp.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
                 <arg value="${trans}/${strmodule}.str"/>
@@ -294,4 +314,4 @@
             <delete dir="${build}"/>
             <delete file="${src-gen}/trans/Main.java"/>
         </target>
-    </project>
\ No newline at end of file
+    </project>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-17 13:57:39 UTC (rev 20259)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-17 13:59:05 UTC (rev 20260)
@@ -201,7 +201,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf" if="build.stratego.enabled">
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf" if="build.stratego.enabled">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>



From L.C.L.Kats at tudelft.nl  Tue Nov 17 15:29:15 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 17 Nov 2009 14:29:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20261 - LennartKats -
	sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples
Message-ID: <200911171429.nAHETFg8024997@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-17 14:29:14 +0000 (Tue, 17 Nov 2009)
New Revision: 20261

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20261&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.def
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.tbl

Log:
Added a case with unexplicably bad performance.

Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.def
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.def	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.def	2009-11-17 14:29:14 UTC (rev 20261)
@@ -0,0 +1,632 @@
+definition
+
+module Stratego-Sugar-Overlays
+imports Stratego-Core-Identifiers Stratego-Sugar-Terms
+
+exports
+  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR
+
+  lexical syntax
+    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover}
+    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
+    ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {recover}
+    WATERTOKEN                     -> WATER               
+    WATERTOKENSEPARATOR            -> WATER               
+
+  lexical restrictions
+    WATERTOKEN -/- [A-Za-z0-9\_]
+
+  context-free syntax
+    WATER -> LAYOUT {cons("WATER")}
+
+  (
+
+  sorts WATEREOF
+
+  lexical restrictions
+    WATEREOF -/- ~[]
+
+  lexical syntax
+    %% Lexical insertion recovery rules                     
+                                        -> "="              {recover, cons("INSERTION")}
+                                        -> "|}"             {recover, cons("INSERTION")}
+                                        -> "("              {recover, cons("INSERTION")}
+                                        -> "|"              {recover, cons("INSERTION")}
+                                        -> ","              {recover, cons("INSERTION")}
+                                        -> ">"              {recover, cons("INSERTION")}
+                                        -> "\\"             {recover, cons("INSERTION")}
+                                        -> "]"              {recover, cons("INSERTION")}
+                                        -> "sorts"          {recover, cons("INSERTION")}
+                                        -> "constructors"   {recover, cons("INSERTION")}
+                                        -> "external"       {recover, cons("INSERTION")}
+                                        -> "end"            {recover, cons("INSERTION")}
+                                        -> ":"              {recover, cons("INSERTION")}
+                                        -> "}"              {recover, cons("INSERTION")}
+                                        -> ")"              {recover, cons("INSERTION")}
+                                        -> "module"         {recover, cons("INSERTION")}
+                                        -> "specification"  {recover, cons("INSERTION")}
+                                        -> "imports"        {recover, cons("INSERTION")}
+                                        -> "strategies"     {recover, cons("INSERTION")}
+                                        -> "signature"      {recover, cons("INSERTION")}
+                                        -> "rules"          {recover, cons("INSERTION")}
+                                        -> "overlays"       {recover, cons("INSERTION")}
+    "\""                                -> INSERTOPENQUOTE0 {recover}
+    INSERTOPENQUOTE0 StrChar* "\n"      -> String           {cons("INSERTEND")}
+    INSERTOPENQUOTE0 StrChar* WATEREOF  -> String           {cons("INSERTEND")}
+    "'"                                 -> INSERTOPENQUOTE1 {recover}
+    INSERTOPENQUOTE1 CharChar "\n"      -> Char             {cons("INSERTEND")}
+    INSERTOPENQUOTE1 CharChar WATEREOF  -> Char             {cons("INSERTEND")}
+    "/*"                                -> INSERTSTART0     {recover}
+    INSERTSTART0 CommChar* WATEREOF     -> LongCom          {cons("INSERTEND")}
+
+  syntax
+    %% Kernel syntax insertion recovery rules   
+
+  )
+
+  (
+
+  sorts Overlay
+
+  context-free syntax
+    Id "=" Term                   -> Overlay {cons("OverlayNoArgs")}
+    Id "(" {Id ","}* ")" "=" Term -> Overlay {cons("Overlay")}
+
+  )
+
+module Stratego-Sugar-DynamicRules
+imports Stratego-Core-Identifiers Stratego-Sugar-Strategies Stratego-Sugar-Rules
+
+exports
+  sorts ScopeLabels
+
+  context-free syntax
+    "{|" ScopeLabels ":" Strategy "|}" -> Strategy    {cons("DynRuleScope")}
+    {DynRuleScopeId ","}*              -> ScopeLabels 
+    "~" Term                           -> ScopeLabels {cons("ScopeLabels")}
+
+  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
+
+  context-free syntax
+    "rules" "(" DynRuleDef* ")"            -> Strategy       {cons("GenDynRules")}
+    Id "+" Term                            -> DynRuleDef     {cons("AddScopeLabel")}
+    DynRuleId ":-" Term                    -> DynRuleDef     {cons("UndefineDynRule")}
+    DynRuleId ":" Rule                     -> DynRuleDef     {cons("SetDynRule")}
+    DynRuleId ":+" Rule                    -> DynRuleDef     {cons("AddDynRule")}
+    DynRuleId ":" Term                     -> DynRuleDef     {cons("SetDynRuleMatch")}
+    DynRuleId ":=" Term                    -> DynRuleDef     {cons("DynRuleAssign")}
+    DynRuleId ":+=" Term                   -> DynRuleDef     {cons("DynRuleAssignAdd")}
+    DynRuleId ":" Rule "depends" "on" Term -> DynRuleDef     {cons("SetDynRuleDepends")}
+    RuleDec "." Term                       -> DynRuleId      {cons("LabeledDynRuleId")}
+    RuleDec "+" Term                       -> DynRuleId      {cons("AddLabelDynRuleId")}
+    RuleDec                                -> DynRuleId      {cons("DynRuleId")}
+    Id "." Term                            -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
+    Id                                     -> DynRuleScopeId {cons("DynRuleScopeId")}
+
+  context-free syntax
+    Id                                           -> RuleDec {cons("RDecNoArgs")}
+    Id "(" {Typedid ","}* ")"                    -> RuleDec {cons("RDec")}
+    Id "(" {Typedid ","}* "|" {Typedid ","}* ")" -> RuleDec {cons("RDecT")}
+
+  sorts RuleNames
+
+  context-free syntax
+    {Id ","}*                    -> RuleNames 
+    "~" Term                     -> RuleNames {cons("RuleNames")}
+    "/" RuleNames "\\*" Strategy -> Strategy  {cons("DynRuleIntersectFix")}
+
+  syntax
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>                                               -> <Strategy-CF> {cons("DynRuleUnionFix")}
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>                                              -> <Strategy-CF> {cons("DynRuleUnionFix")}
+    "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>  -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+    "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF> -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+  context-free syntax
+    Strategy "/" RuleNames "\\" Strategy               -> Strategy {cons("DynRuleIntersect"), right}
+    Strategy "\\" RuleNames "/" Strategy               -> Strategy {cons("DynRuleUnion"), right}
+    Strategy "/" RuleNames "\\" RuleNames "/" Strategy -> Strategy {cons("DynRuleIntersectUnion"), right}
+
+  priorities
+    <StrategyAngle-CF> <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("BA")} >
+    { "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF> ->
+      <Strategy-CF> {cons("DynRuleUnionFix")}
+      "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF> ->
+      <Strategy-CF> {cons("DynRuleUnionFix")}
+      
+      "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+      
+      "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")} } >
+    <Strategy-CF> <LAYOUT?-CF> "=>" <LAYOUT?-CF> <Term-CF> -> <Strategy-CF>
+    {cons("AM")}
+
+  context-free priorities
+    StrategyAngle Term -> Strategy {cons("BA")} >
+    "/" RuleNames "\\*" Strategy -> Strategy {cons("DynRuleIntersectFix")} >
+    Strategy "=>" Term -> Strategy {cons("AM")} >
+    Strategy "/" RuleNames "\\" Strategy -> Strategy
+    {cons("DynRuleIntersect"), right} >
+    Strategy "\\" RuleNames "/" Strategy -> Strategy
+    {cons("DynRuleUnion"), right} >
+    Strategy "/" RuleNames "\\" RuleNames "/" Strategy -> Strategy
+    {cons("DynRuleIntersectUnion"), right} >
+    Strategy ";" Strategy -> Strategy {cons("Seq"), right}
+
+module Stratego-Sugar-Rules
+imports Stratego-Sugar-Strategies
+
+exports
+  sorts RuleDef
+
+  context-free syntax
+    Id ":" Rule                                           -> RuleDef {cons("RDefNoArgs")}
+    Anno+ RuleDef                                         -> Def     {cons("AnnoDef")}
+    Id "(" {Typedid ","}* ")" ":" Rule                    -> RuleDef {cons("RDef")}
+    Id "(" {Typedid ","}* "|" {Typedid ","}* ")" ":" Rule -> RuleDef {cons("RDefT")}
+
+  sorts Rule RuleCond
+
+  context-free syntax
+    Term "->" Term                  -> Rule     {cons("RuleNoCond")}
+    Term "->" Term "where" Strategy -> Rule     {cons("Rule")}
+    Term "->" Term RuleCond+        -> Rule     {cons("Rule"), avoid}
+    "where" Strategy                -> RuleCond {cons("WhereClause")}
+    "with" Strategy                 -> RuleCond {cons("WithClause")}
+
+module Stratego-Sugar-Strategies
+imports Stratego-Core-Strategies Stratego-Sugar-Terms Stratego-Sugar-Constants
+        Stratego-Sugar-Signatures
+
+exports
+  context-free syntax
+    Id "=" Strategy                        -> StrategyDef {cons("SDefNoArgs")}
+    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
+
+  context-free syntax
+    ID -> Typedid {cons("DefaultVarDec")}
+
+  sorts Rule
+
+  sorts StrategyParen StrategyCurly StrategyAngle
+
+  context-free syntax
+    SVar "(" {Strategy ","}* ")"          -> Strategy      {cons("Call")}
+    "{" Strategy "}"                      -> Strategy      {cons("ScopeDefault")}
+    StrategyAngle Term                    -> Strategy      {cons("BA")}
+    "<" Strategy ">"                      -> StrategyAngle {bracket}
+    Strategy "<+" Strategy                -> Strategy      {cons("LChoice"), right}
+    "rec" Id "(" Strategy ")"             -> Strategy      {cons("Rec")}
+    "not" "(" Strategy ")"                -> Strategy      {cons("Not")}
+    "where" "(" Strategy ")"              -> Strategy      {cons("Where")}
+    "with" "(" Strategy ")"               -> Strategy      {cons("With"), prefer}
+    "test" "(" Strategy ")"               -> Strategy      {cons("Test")}
+    "prim" "(" String ")"                 -> Strategy      {cons("PrimNoArgs")}
+    "prim" "(" String "," {Term ","}* ")" -> Strategy      {cons("Prim")}
+    String                                -> Strategy      {cons("StrCong")}
+    Int                                   -> Strategy      {cons("IntCong")}
+    Real                                  -> Strategy      {cons("RealCong")}
+    Char                                  -> Strategy      {cons("CharCong")}
+    String "(" {Strategy ","}* ")"        -> Strategy      {cons("CongQ")}
+    Strategy StrategyCurly                -> Strategy      {cons("AnnoCong")}
+    "{" Strategy "}"                      -> StrategyCurly {cons("StrategyCurly")}
+    "(" ")"                               -> Strategy      {cons("EmptyTupleCong")}
+    "(" Strategy ")"                      -> Strategy      {bracket}
+    "(" Strategy "," {Strategy ","}+ ")"  -> Strategy      {cons("TupleCong")}
+    "[" {Strategy ","}* "]"               -> Strategy      {cons("ListCongNoTail")}
+    "[" {Strategy ","}* "|" Strategy "]"  -> Strategy      {cons("ListCong")}
+    Strategy "#" StrategyParen            -> Strategy      {cons("ExplodeCong")}
+
+  sorts SwitchCase
+
+  context-free syntax
+    SVar                                                         -> Strategy   {cons("CallNoArgs")}
+    "\\" Rule "\\"                                               -> Strategy   {cons("LRule")}
+    "(" Rule ")"                                                 -> Strategy   {cons("SRule")}
+    Strategy "+" Strategy                                        -> Strategy   {cons("Choice"), right}
+    Strategy "+>" Strategy                                       -> Strategy   {cons("RChoice"), right}
+    "if" Strategy "then" Strategy "else" Strategy "end"          -> Strategy   {cons("CondChoice")}
+    "if" Strategy "then" Strategy "end"                          -> Strategy   {cons("IfThen")}
+    "switch" Strategy SwitchCase* "end"                          -> Strategy   {cons("SwitchChoiceNoOtherwise")}
+    "switch" Strategy SwitchCase* "otherwise" ":" Strategy "end" -> Strategy   {cons("SwitchChoice")}
+    "case" Strategy ":" Strategy                                 -> SwitchCase {cons("SwitchCase")}
+    Strategy "=>" Term                                           -> Strategy   {cons("AM")}
+    Term ":=" Term                                               -> Strategy   {cons("Assign")}
+
+  context-free priorities
+    { Strategy StrategyCurly -> Strategy 
+      Strategy "#" StrategyParen -> Strategy  } >
+    { "!" Term -> Strategy 
+      "?" Term -> Strategy  } >
+    StrategyAngle Term -> Strategy  >
+    Strategy "=>" Term -> Strategy  >
+    Strategy ";" Strategy -> Strategy  >
+    {right:
+      Strategy "+" Strategy -> Strategy 
+      Strategy "<+" Strategy -> Strategy 
+      Strategy "+>" Strategy -> Strategy 
+      Strategy "<" StrategyMid "+" Strategy -> Strategy 
+    }
+
+  context-free priorities
+    Strategy -> StrategyMid  >
+    Strategy "+" Strategy -> Strategy 
+
+  context-free priorities
+    { Strategy StrategyCurly -> Strategy 
+      Strategy "#" StrategyParen -> Strategy  } . >
+    Term ":=" Term -> Strategy 
+
+module Stratego-Sugar-Terms
+imports Stratego-Core-Terms Stratego-Sugar-Strategies
+
+exports
+  sorts LID
+
+  context-free syntax
+    LId -> LID {cons("ListVar")}
+    LID -> Var {cons("Var")}
+    LID -> ID  
+
+  context-free syntax
+    "_" PreTerm                  -> PreTerm {cons("BuildDefaultPT")}
+    "_" Term                     -> Term    {cons("BuildDefault"), prefer}
+    Char                         -> PreTerm {cons("Char")}
+    PreTerm "{" {Term ","}* "}"  -> Term    {cons("AnnoList")}
+    PreTerm                      -> Term    {cons("NoAnnoList")}
+    "<" Strategy ">" Term        -> PreTerm {cons("App")}
+    "<" Strategy ">" Term        -> Term    {cons("App"), prefer}
+    StrategyAngle                -> PreTerm {cons("RootApp")}
+    StrategyAngle                -> Term    {cons("RootApp"), prefer}
+    "(" {Term ","}* ")"          -> PreTerm {cons("Tuple")}
+    "[" {Term ","}* "]"          -> PreTerm {cons("List")}
+    "[" {Term ","}* "|" Term "]" -> PreTerm {cons("ListTail")}
+
+  context-free priorities
+    Term "#" "(" Term ")" -> PreTerm {cons("Explode")} >
+    PreTerm "{" {Term ","}* "}" -> Term {cons("AnnoList")} >
+    Var "@" Term -> Term {cons("As")}
+
+module Stratego-Sugar-Signatures
+imports Stratego-Core-Signatures Stratego-Sugar-Constants
+
+exports
+  sorts Sort
+
+  context-free syntax
+    "[" {Sort ","}* "]"          -> Sort {cons("SortList")}
+    "[" {Sort ","}* "|" Sort "]" -> Sort {cons("SortListTl")}
+    "(" {Sort ","}* ")"          -> Sort {cons("SortTuple")}
+
+  sorts Kind
+
+  context-free syntax
+    "*"  -> Kind {cons("Star")}
+    "**" -> Kind {cons("StarStar")}
+
+module Stratego-Core-Signatures
+imports Stratego-Core-Identifiers Stratego-Core-Constants
+
+exports
+  sorts Sdecl
+
+  context-free syntax
+    "sorts" Sort*          -> Sdecl {cons("Sorts")}
+    "constructors" Opdecl* -> Sdecl {cons("Constructors")}
+
+  sorts Sort
+
+  context-free syntax
+    LCID                   -> Sort {cons("SortVar")}
+    UCID                   -> Sort {cons("SortNoArgs")}
+    Id "(" {Sort ","}* ")" -> Sort {cons("Sort")}
+
+  sorts Opdecl
+
+  context-free syntax
+    Id ":" Type     -> Opdecl {cons("OpDecl")}
+    String ":" Type -> Opdecl {cons("OpDeclQ")}
+    ":" Type        -> Opdecl {cons("OpDeclInj")}
+
+  context-free syntax
+    "external" Id ":" Type     -> Opdecl {cons("ExtOpDecl")}
+    "external" String ":" Type -> Opdecl {cons("ExtOpDeclQ")}
+    "external" ":" Type        -> Opdecl {cons("ExtOpDeclInj")}
+
+  sorts Type ArgType ConstType FunType RetType
+
+  context-free syntax
+    Sort                        -> ConstType {cons("ConstType")}
+    {ArgType "*"}+ "->" RetType -> FunType   {cons("FunType")}
+    "(" Type ")"                -> ArgType   {bracket}
+    ConstType                   -> ArgType   
+    Type                        -> RetType   
+    FunType                     -> RetType   {reject}
+    FunType                     -> Type      
+    ConstType                   -> Type      
+
+  context-free restrictions
+    Sort -/- [\(]
+
+module Stratego-Core-Terms
+imports Stratego-Core-Identifiers Stratego-Core-Constants
+
+exports
+  sorts ID Var Wld
+
+  context-free syntax
+    Id -> Var {cons("Var")}
+    Id -> ID  
+
+  sorts Term PreTerm
+
+  context-free syntax
+    Var                        -> PreTerm 
+    Var                        -> Term    {prefer}
+    "_"                        -> Wld     {cons("Wld")}
+    Wld                        -> PreTerm 
+    Wld                        -> Term    {prefer}
+    Int                        -> PreTerm {cons("Int")}
+    Real                       -> PreTerm {cons("Real")}
+    String                     -> PreTerm {cons("Str")}
+    Id "(" {Term ","}* ")"     -> PreTerm {cons("Op")}
+    String "(" {Term ","}* ")" -> PreTerm {cons("OpQ")}
+    Term "#" "(" Term ")"      -> PreTerm {cons("Explode")}
+    PreTerm "{^" PreTerm "}"   -> Term    {cons("Anno")}
+    Var "@" Term               -> Term    {cons("As"), prefer}
+    Var "@" PreTerm            -> PreTerm {cons("As")}
+
+  context-free priorities
+    Term "#" "(" Term ")" -> PreTerm {cons("Explode")} >
+    Var "@" Term -> Term {cons("As")}
+
+module Stratego-Core-Strategies
+imports Stratego-Core-Terms Stratego-Core-Constants Stratego-Core-Signatures
+
+exports
+  sorts Def
+
+  context-free syntax
+    StrategyDef                                             -> Def      
+    Id                                                      -> SVar     {cons("SVar")}
+    "let" Def* "in" Strategy "end"                          -> Strategy {cons("Let")}
+    SVar "(" {Strategy ","}* "|" {Term ","}* ")"            -> Strategy {cons("CallT")}
+    "call" "(" Term "|" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallDynamic")}
+
+  sorts StrategyDef
+
+  context-free syntax
+    Id "(" {Typedid ","}* "|" {Typedid ","}* ")" "=" Strategy            -> StrategyDef {cons("SDefT")}
+    Anno+ StrategyDef                                                    -> Def         {cons("AnnoDef")}
+    "external" Id "(" {Typedid ","}* "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("ExtSDefInl")}
+    "external" Id "(" {Typedid ","}* "|" {Typedid ","}* ")"              -> StrategyDef {cons("ExtSDef")}
+
+  sorts Anno
+
+  context-free syntax
+    "extend"   -> Anno {cons("Extend")}
+    "override" -> Anno {cons("Override")}
+    "internal" -> Anno {cons("Internal")}
+
+  lexical syntax
+    "extend"      -> Keyword 
+    "override"    -> Keyword 
+    "internal"    -> Keyword 
+    "sealed"      -> Keyword 
+    "extensible"  -> Keyword 
+    "overridable" -> Keyword 
+
+  lexical restrictions
+    "extend" "override" "internal" "sealed" "extensible" "overridable"
+    -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Typedid
+
+  context-free syntax
+    ID ":" Type -> Typedid {cons("VarDec")}
+
+  sorts Strategy SVar StrategyParen StrategyMid
+
+  context-free syntax
+    "(" Strategy ")"                                          -> StrategyParen {cons("ParenStrat")}
+    "fail"                                                    -> Strategy      {cons("Fail")}
+    "id"                                                      -> Strategy      {cons("Id")}
+    "override"                                                -> Strategy      {cons("Override")}
+    "?" Term                                                  -> Strategy      {cons("Match")}
+    "!" Term                                                  -> Strategy      {cons("Build")}
+    "{" {ID ","}* ":" Strategy "}"                            -> Strategy      {cons("Scope")}
+    Strategy ";" Strategy                                     -> Strategy      {cons("Seq"), right}
+    Strategy "<" StrategyMid "+" Strategy                     -> Strategy      {cons("GuardedLChoice"), right}
+    Strategy                                                  -> StrategyMid   
+    "prim" "(" String "," {Strategy ","}* "|" {Term ","}* ")" -> Strategy      {cons("PrimT")}
+    "some" "(" Strategy ")"                                   -> Strategy      {cons("Some")}
+    "one" "(" Strategy ")"                                    -> Strategy      {cons("One")}
+    "all" "(" Strategy ")"                                    -> Strategy      {cons("All")}
+
+  context-free priorities
+    { "!" Term -> Strategy {cons("Build")}
+      "?" Term -> Strategy {cons("Match")} } >
+    Strategy ";" Strategy -> Strategy {cons("Seq"), right} >
+    {right:
+      Strategy "<" StrategyMid "+" Strategy -> Strategy
+      {cons("GuardedLChoice"), right}
+    }
+
+  context-free syntax
+    "import-term" "(" ModName ")" -> Strategy {cons("ImportTerm")}
+
+module Stratego-Core-Modules
+imports Stratego-Core-Identifiers Stratego-Core-Strategies
+        Stratego-Core-Signatures
+
+exports
+  sorts Module
+
+  context-free syntax
+    "module" ModName Decl* -> Module {cons("Module")}
+    "specification" Decl*  -> Module {cons("Specification")}
+
+  sorts Decl
+
+  context-free syntax
+    "imports" ImportModName* -> Decl {cons("Imports")}
+    "strategies" Def*        -> Decl {cons("Strategies")}
+    "signature" Sdecl*       -> Decl {cons("Signature")}
+
+  sorts ImportModName
+
+  context-free syntax
+    ModName -> ImportModName {cons("Import")}
+
+  syntax
+    <ModName-CF> "/" "-" -> <ImportModName-CF> {cons("ImportWildcard")}
+
+module Stratego-Sugar-Modules
+imports Stratego-Core-Modules Stratego-Sugar-Strategies
+        Stratego-Sugar-Signatures Stratego-Sugar-Overlays Stratego-Sugar-Rules
+
+exports
+  sorts Decl Def
+
+  context-free syntax
+    "rules" Def*        -> Decl {cons("Rules")}
+    "overlays" Overlay* -> Decl {cons("Overlays")}
+    RuleDef             -> Def  
+
+module Stratego-Core-Constants
+exports
+  sorts Int Real String StrChar
+
+  lexical syntax
+    [\-]? [0-9]+             -> Int     
+    [\-]? [0-9]+ [\.] [0-9]+ -> Real    
+    "\"" StrChar* "\""       -> String  
+    ~[\"\\]                  -> StrChar 
+    [\\] [\"tnr\\]           -> StrChar 
+
+module Stratego-Sugar-Constants
+imports Stratego-Core-Identifiers Stratego-Core-Constants
+
+exports
+  sorts Char CharChar
+
+  lexical syntax
+    "'" CharChar "'" -> Char     
+    ~[\']            -> CharChar 
+    [\\] [\'ntr\ ]   -> CharChar 
+    Char             -> Id       {reject}
+
+module Stratego-Core-Identifiers
+exports
+  sorts ModName ModNamePart
+
+  lexical syntax
+    {ModNamePart "/"}+                -> ModName     
+    [a-zA-Z\.\_] [a-zA-Z0-9\'\.\-\_]* -> ModNamePart 
+
+  lexical restrictions
+    ModName -/- [a-zA-Z0-9\'\.\-\_]
+
+  lexical syntax
+    "imports"    -> ModName {reject}
+    "overlays"   -> ModName {reject}
+    "rules"      -> ModName {reject}
+    "signature"  -> ModName {reject}
+    "strategies" -> ModName {reject}
+
+  sorts Id LId LCID UCID Wld
+
+  lexical syntax
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]*     -> Id   
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]* "*" -> LId  
+    [\'] [a-z]+                       -> Id   
+    [a-z] [a-zA-Z0-9\'\-\_]*          -> LCID 
+    [A-Z] [a-zA-Z0-9\'\-\_]*          -> UCID 
+
+  lexical restrictions
+    Id -/- [a-zA-Z0-9\'\-\_\*]
+    LId -/- [a-zA-Z0-9\'\-\_]
+    LCID -/- [a-zA-Z0-9\'\-\_]
+    UCID -/- [a-zA-Z0-9\'\-\_]
+
+  lexical syntax
+    "_"     -> Id   {reject}
+    "'"     -> Id   {reject}
+    Keyword -> Id   {reject}
+    Keyword -> LId  {reject}
+    Keyword -> LCID {reject}
+    Keyword -> UCID {reject}
+
+  lexical restrictions
+    "all" "case" "constructors" "else" "end" "external" "fail" "id" "if" "in"
+    "imports" "let" "module" "not" "one" "overlays" "otherwise" "prim" "rec"
+    "rules" "script" "signature" "some" "sorts" "strategies" "stratego" "switch"
+    "test" "then" "where" "import-term" -/- [a-zA-Z0-9\'\-\_]
+
+  context-free restrictions
+    Wld -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Keyword
+
+  lexical syntax
+    "all"          -> Keyword 
+    "constructors" -> Keyword 
+    "fail"         -> Keyword 
+    "id"           -> Keyword 
+    "in"           -> Keyword 
+    "let"          -> Keyword 
+    "module"       -> Keyword 
+    "not"          -> Keyword 
+    "one"          -> Keyword 
+    "overlays"     -> Keyword 
+    "prim"         -> Keyword 
+    "rules"        -> Keyword 
+    "script"       -> Keyword 
+    "signature"    -> Keyword 
+    "some"         -> Keyword 
+    "sorts"        -> Keyword 
+    "strategies"   -> Keyword 
+    "stratego"     -> Keyword 
+    "test"         -> Keyword 
+    "where"        -> Keyword 
+    "import-term"  -> Keyword 
+
+module Stratego-Core-Layout
+exports
+  sorts Ws ShortCom LongCom CommChar Asterisk Eof
+
+  lexical syntax
+    [\t\ \n\r]             -> Ws       
+    "//" ~[\n]* [\n] | Eof -> ShortCom 
+    "/*" CommChar* "*/"    -> LongCom  
+                           -> Eof      
+    ~[\*]                  -> CommChar 
+    "*"                    -> Asterisk 
+    Asterisk               -> CommChar 
+
+  lexical restrictions
+    Asterisk -/- [\/]
+    Eof -/- ~[]
+
+  lexical syntax
+    ShortCom -> LAYOUT 
+    LongCom  -> LAYOUT 
+    Ws       -> LAYOUT 
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/] . [\*]
+    LAYOUT? -/- [\/] . [\/]
+
+module Stratego-Sugar-Layout
+imports Stratego-Core-Layout
+
+module Stratego-Sugar
+imports Stratego-Sugar-Layout Stratego-Core-Identifiers Stratego-Sugar-Constants
+        Stratego-Sugar-Modules Stratego-Sugar-Signatures Stratego-Sugar-Terms
+        Stratego-Sugar-Strategies Stratego-Sugar-Rules
+        Stratego-Sugar-DynamicRules Stratego-Sugar-Overlays
+
+hiddens
+  context-free start-symbols
+    Module
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.str	2009-11-17 14:29:14 UTC (rev 20261)
@@ -0,0 +1,75 @@
+module sdf
+
+imports
+  libstratego-lib
+  libstratego-sdf
+  libstrc
+
+signature constructors
+
+  context-free-syntax : Term -> Term
+  sort                : Term -> Term
+  term                : Term -> Term
+  cons                : Term -> Term
+  iter-star           : Term -> Term
+  iter-plus           : Term -> Term
+  iter-star-sep       : Term * Term -> Term
+  iter-plus-sep       : Term * Term -> Term
+  prod                : Term * Term * Term -> Term
+  
+
+rules
+
+  editor-analyze:
+    (ast, path, project-path) -> (errors, [], [])
+    with
+      errors := <alltd(context-free-syntax(collect-all(context-free-syntax-error)))> ast
+  
+  context-free-syntax-error:
+    prod(s*, s, a*) -> (s, "Production should contain a {cons(\"Label\")} attribute used as a label in the abstract syntax")
+    where
+      <collect(?sort(_) + ?iter-star(_) + ?iter-plus(_) + ?iter-star-sep(_, _) + ?iter-plus-sep(_, _))> s;
+      <not(one(?term(cons(_))))> a*
+
+rules
+
+  generate-pp-rules:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    where
+      filename  := <guarantee-extension(|"pp")> path;
+      selected' := <add-context; sdf-desugar> (selected, ast, project-path);
+      result    := <ppgenerate; pp-pp-table> selected'
+    <+
+      fatal-err(|"Could not generate pretty printer rules for this selection.\n Only productions with {cons()} attributes are supported.")
+  
+  generate-rtg:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    where
+      filename  := <guarantee-extension(|"pp")> path;
+      selected' := <add-context; sdf-desugar> (selected, ast, project-path);
+      result    := <core-rtg2sig; pp-stratego-string> selected'
+    <+
+      fatal-err(|"Could not generate abstract syntax signatures for this selection.\n Only productions with {cons()} attributes are supported.")
+  
+  add-context =
+    if not(oncetd(?context-free-syntax(_))) then
+      if is-list then
+        !context-free-syntax(<id>)
+      else
+        !context-free-syntax([<id>])
+      end
+    end
+
+rules // External tools not included in the standard libraries
+
+  ppgenerate =
+    <call> ("org.strategoxt.tools.ppgenerate", [<id>])
+
+  core-rtg2sig =
+    <call> ("org.strategoxt.tools.core-rtg2sig", [<id>])
+
+  pp-pp-table =
+    <call> ("org.strategoxt.tools.pp-pp-table", [<id>])
+  
+  sdf-desugar =
+    <call> ("org.strategoxt.tools.sdf-desugar", [<id>]

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.tbl
===================================================================
(Binary files differ)


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.tbl
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream



From m.dejonge at tudelft.nl  Tue Nov 17 15:43:28 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 14:43:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20262 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: .
	Grammars Input/SpoofaxExamples
Message-ID: <200911171443.nAHEhShZ025141@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 14:43:28 +0000 (Tue, 17 Nov 2009)
New Revision: 20262

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20262&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.def
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.tbl
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.def
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.tbl

Log:
Directory for Grammars

Changes (first 1000 lines of the diffs):

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.def (from rev 20261, sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.def)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.def	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.def	2009-11-17 14:43:28 UTC (rev 20262)
@@ -0,0 +1,632 @@
+definition
+
+module Stratego-Sugar-Overlays
+imports Stratego-Core-Identifiers Stratego-Sugar-Terms
+
+exports
+  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR
+
+  lexical syntax
+    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover}
+    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
+    ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {recover}
+    WATERTOKEN                     -> WATER               
+    WATERTOKENSEPARATOR            -> WATER               
+
+  lexical restrictions
+    WATERTOKEN -/- [A-Za-z0-9\_]
+
+  context-free syntax
+    WATER -> LAYOUT {cons("WATER")}
+
+  (
+
+  sorts WATEREOF
+
+  lexical restrictions
+    WATEREOF -/- ~[]
+
+  lexical syntax
+    %% Lexical insertion recovery rules                     
+                                        -> "="              {recover, cons("INSERTION")}
+                                        -> "|}"             {recover, cons("INSERTION")}
+                                        -> "("              {recover, cons("INSERTION")}
+                                        -> "|"              {recover, cons("INSERTION")}
+                                        -> ","              {recover, cons("INSERTION")}
+                                        -> ">"              {recover, cons("INSERTION")}
+                                        -> "\\"             {recover, cons("INSERTION")}
+                                        -> "]"              {recover, cons("INSERTION")}
+                                        -> "sorts"          {recover, cons("INSERTION")}
+                                        -> "constructors"   {recover, cons("INSERTION")}
+                                        -> "external"       {recover, cons("INSERTION")}
+                                        -> "end"            {recover, cons("INSERTION")}
+                                        -> ":"              {recover, cons("INSERTION")}
+                                        -> "}"              {recover, cons("INSERTION")}
+                                        -> ")"              {recover, cons("INSERTION")}
+                                        -> "module"         {recover, cons("INSERTION")}
+                                        -> "specification"  {recover, cons("INSERTION")}
+                                        -> "imports"        {recover, cons("INSERTION")}
+                                        -> "strategies"     {recover, cons("INSERTION")}
+                                        -> "signature"      {recover, cons("INSERTION")}
+                                        -> "rules"          {recover, cons("INSERTION")}
+                                        -> "overlays"       {recover, cons("INSERTION")}
+    "\""                                -> INSERTOPENQUOTE0 {recover}
+    INSERTOPENQUOTE0 StrChar* "\n"      -> String           {cons("INSERTEND")}
+    INSERTOPENQUOTE0 StrChar* WATEREOF  -> String           {cons("INSERTEND")}
+    "'"                                 -> INSERTOPENQUOTE1 {recover}
+    INSERTOPENQUOTE1 CharChar "\n"      -> Char             {cons("INSERTEND")}
+    INSERTOPENQUOTE1 CharChar WATEREOF  -> Char             {cons("INSERTEND")}
+    "/*"                                -> INSERTSTART0     {recover}
+    INSERTSTART0 CommChar* WATEREOF     -> LongCom          {cons("INSERTEND")}
+
+  syntax
+    %% Kernel syntax insertion recovery rules   
+
+  )
+
+  (
+
+  sorts Overlay
+
+  context-free syntax
+    Id "=" Term                   -> Overlay {cons("OverlayNoArgs")}
+    Id "(" {Id ","}* ")" "=" Term -> Overlay {cons("Overlay")}
+
+  )
+
+module Stratego-Sugar-DynamicRules
+imports Stratego-Core-Identifiers Stratego-Sugar-Strategies Stratego-Sugar-Rules
+
+exports
+  sorts ScopeLabels
+
+  context-free syntax
+    "{|" ScopeLabels ":" Strategy "|}" -> Strategy    {cons("DynRuleScope")}
+    {DynRuleScopeId ","}*              -> ScopeLabels 
+    "~" Term                           -> ScopeLabels {cons("ScopeLabels")}
+
+  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
+
+  context-free syntax
+    "rules" "(" DynRuleDef* ")"            -> Strategy       {cons("GenDynRules")}
+    Id "+" Term                            -> DynRuleDef     {cons("AddScopeLabel")}
+    DynRuleId ":-" Term                    -> DynRuleDef     {cons("UndefineDynRule")}
+    DynRuleId ":" Rule                     -> DynRuleDef     {cons("SetDynRule")}
+    DynRuleId ":+" Rule                    -> DynRuleDef     {cons("AddDynRule")}
+    DynRuleId ":" Term                     -> DynRuleDef     {cons("SetDynRuleMatch")}
+    DynRuleId ":=" Term                    -> DynRuleDef     {cons("DynRuleAssign")}
+    DynRuleId ":+=" Term                   -> DynRuleDef     {cons("DynRuleAssignAdd")}
+    DynRuleId ":" Rule "depends" "on" Term -> DynRuleDef     {cons("SetDynRuleDepends")}
+    RuleDec "." Term                       -> DynRuleId      {cons("LabeledDynRuleId")}
+    RuleDec "+" Term                       -> DynRuleId      {cons("AddLabelDynRuleId")}
+    RuleDec                                -> DynRuleId      {cons("DynRuleId")}
+    Id "." Term                            -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
+    Id                                     -> DynRuleScopeId {cons("DynRuleScopeId")}
+
+  context-free syntax
+    Id                                           -> RuleDec {cons("RDecNoArgs")}
+    Id "(" {Typedid ","}* ")"                    -> RuleDec {cons("RDec")}
+    Id "(" {Typedid ","}* "|" {Typedid ","}* ")" -> RuleDec {cons("RDecT")}
+
+  sorts RuleNames
+
+  context-free syntax
+    {Id ","}*                    -> RuleNames 
+    "~" Term                     -> RuleNames {cons("RuleNames")}
+    "/" RuleNames "\\*" Strategy -> Strategy  {cons("DynRuleIntersectFix")}
+
+  syntax
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>                                               -> <Strategy-CF> {cons("DynRuleUnionFix")}
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>                                              -> <Strategy-CF> {cons("DynRuleUnionFix")}
+    "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>  -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+    "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF> -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+  context-free syntax
+    Strategy "/" RuleNames "\\" Strategy               -> Strategy {cons("DynRuleIntersect"), right}
+    Strategy "\\" RuleNames "/" Strategy               -> Strategy {cons("DynRuleUnion"), right}
+    Strategy "/" RuleNames "\\" RuleNames "/" Strategy -> Strategy {cons("DynRuleIntersectUnion"), right}
+
+  priorities
+    <StrategyAngle-CF> <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("BA")} >
+    { "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF> ->
+      <Strategy-CF> {cons("DynRuleUnionFix")}
+      "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF> ->
+      <Strategy-CF> {cons("DynRuleUnionFix")}
+      
+      "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+      
+      "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")} } >
+    <Strategy-CF> <LAYOUT?-CF> "=>" <LAYOUT?-CF> <Term-CF> -> <Strategy-CF>
+    {cons("AM")}
+
+  context-free priorities
+    StrategyAngle Term -> Strategy {cons("BA")} >
+    "/" RuleNames "\\*" Strategy -> Strategy {cons("DynRuleIntersectFix")} >
+    Strategy "=>" Term -> Strategy {cons("AM")} >
+    Strategy "/" RuleNames "\\" Strategy -> Strategy
+    {cons("DynRuleIntersect"), right} >
+    Strategy "\\" RuleNames "/" Strategy -> Strategy
+    {cons("DynRuleUnion"), right} >
+    Strategy "/" RuleNames "\\" RuleNames "/" Strategy -> Strategy
+    {cons("DynRuleIntersectUnion"), right} >
+    Strategy ";" Strategy -> Strategy {cons("Seq"), right}
+
+module Stratego-Sugar-Rules
+imports Stratego-Sugar-Strategies
+
+exports
+  sorts RuleDef
+
+  context-free syntax
+    Id ":" Rule                                           -> RuleDef {cons("RDefNoArgs")}
+    Anno+ RuleDef                                         -> Def     {cons("AnnoDef")}
+    Id "(" {Typedid ","}* ")" ":" Rule                    -> RuleDef {cons("RDef")}
+    Id "(" {Typedid ","}* "|" {Typedid ","}* ")" ":" Rule -> RuleDef {cons("RDefT")}
+
+  sorts Rule RuleCond
+
+  context-free syntax
+    Term "->" Term                  -> Rule     {cons("RuleNoCond")}
+    Term "->" Term "where" Strategy -> Rule     {cons("Rule")}
+    Term "->" Term RuleCond+        -> Rule     {cons("Rule"), avoid}
+    "where" Strategy                -> RuleCond {cons("WhereClause")}
+    "with" Strategy                 -> RuleCond {cons("WithClause")}
+
+module Stratego-Sugar-Strategies
+imports Stratego-Core-Strategies Stratego-Sugar-Terms Stratego-Sugar-Constants
+        Stratego-Sugar-Signatures
+
+exports
+  context-free syntax
+    Id "=" Strategy                        -> StrategyDef {cons("SDefNoArgs")}
+    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
+
+  context-free syntax
+    ID -> Typedid {cons("DefaultVarDec")}
+
+  sorts Rule
+
+  sorts StrategyParen StrategyCurly StrategyAngle
+
+  context-free syntax
+    SVar "(" {Strategy ","}* ")"          -> Strategy      {cons("Call")}
+    "{" Strategy "}"                      -> Strategy      {cons("ScopeDefault")}
+    StrategyAngle Term                    -> Strategy      {cons("BA")}
+    "<" Strategy ">"                      -> StrategyAngle {bracket}
+    Strategy "<+" Strategy                -> Strategy      {cons("LChoice"), right}
+    "rec" Id "(" Strategy ")"             -> Strategy      {cons("Rec")}
+    "not" "(" Strategy ")"                -> Strategy      {cons("Not")}
+    "where" "(" Strategy ")"              -> Strategy      {cons("Where")}
+    "with" "(" Strategy ")"               -> Strategy      {cons("With"), prefer}
+    "test" "(" Strategy ")"               -> Strategy      {cons("Test")}
+    "prim" "(" String ")"                 -> Strategy      {cons("PrimNoArgs")}
+    "prim" "(" String "," {Term ","}* ")" -> Strategy      {cons("Prim")}
+    String                                -> Strategy      {cons("StrCong")}
+    Int                                   -> Strategy      {cons("IntCong")}
+    Real                                  -> Strategy      {cons("RealCong")}
+    Char                                  -> Strategy      {cons("CharCong")}
+    String "(" {Strategy ","}* ")"        -> Strategy      {cons("CongQ")}
+    Strategy StrategyCurly                -> Strategy      {cons("AnnoCong")}
+    "{" Strategy "}"                      -> StrategyCurly {cons("StrategyCurly")}
+    "(" ")"                               -> Strategy      {cons("EmptyTupleCong")}
+    "(" Strategy ")"                      -> Strategy      {bracket}
+    "(" Strategy "," {Strategy ","}+ ")"  -> Strategy      {cons("TupleCong")}
+    "[" {Strategy ","}* "]"               -> Strategy      {cons("ListCongNoTail")}
+    "[" {Strategy ","}* "|" Strategy "]"  -> Strategy      {cons("ListCong")}
+    Strategy "#" StrategyParen            -> Strategy      {cons("ExplodeCong")}
+
+  sorts SwitchCase
+
+  context-free syntax
+    SVar                                                         -> Strategy   {cons("CallNoArgs")}
+    "\\" Rule "\\"                                               -> Strategy   {cons("LRule")}
+    "(" Rule ")"                                                 -> Strategy   {cons("SRule")}
+    Strategy "+" Strategy                                        -> Strategy   {cons("Choice"), right}
+    Strategy "+>" Strategy                                       -> Strategy   {cons("RChoice"), right}
+    "if" Strategy "then" Strategy "else" Strategy "end"          -> Strategy   {cons("CondChoice")}
+    "if" Strategy "then" Strategy "end"                          -> Strategy   {cons("IfThen")}
+    "switch" Strategy SwitchCase* "end"                          -> Strategy   {cons("SwitchChoiceNoOtherwise")}
+    "switch" Strategy SwitchCase* "otherwise" ":" Strategy "end" -> Strategy   {cons("SwitchChoice")}
+    "case" Strategy ":" Strategy                                 -> SwitchCase {cons("SwitchCase")}
+    Strategy "=>" Term                                           -> Strategy   {cons("AM")}
+    Term ":=" Term                                               -> Strategy   {cons("Assign")}
+
+  context-free priorities
+    { Strategy StrategyCurly -> Strategy 
+      Strategy "#" StrategyParen -> Strategy  } >
+    { "!" Term -> Strategy 
+      "?" Term -> Strategy  } >
+    StrategyAngle Term -> Strategy  >
+    Strategy "=>" Term -> Strategy  >
+    Strategy ";" Strategy -> Strategy  >
+    {right:
+      Strategy "+" Strategy -> Strategy 
+      Strategy "<+" Strategy -> Strategy 
+      Strategy "+>" Strategy -> Strategy 
+      Strategy "<" StrategyMid "+" Strategy -> Strategy 
+    }
+
+  context-free priorities
+    Strategy -> StrategyMid  >
+    Strategy "+" Strategy -> Strategy 
+
+  context-free priorities
+    { Strategy StrategyCurly -> Strategy 
+      Strategy "#" StrategyParen -> Strategy  } . >
+    Term ":=" Term -> Strategy 
+
+module Stratego-Sugar-Terms
+imports Stratego-Core-Terms Stratego-Sugar-Strategies
+
+exports
+  sorts LID
+
+  context-free syntax
+    LId -> LID {cons("ListVar")}
+    LID -> Var {cons("Var")}
+    LID -> ID  
+
+  context-free syntax
+    "_" PreTerm                  -> PreTerm {cons("BuildDefaultPT")}
+    "_" Term                     -> Term    {cons("BuildDefault"), prefer}
+    Char                         -> PreTerm {cons("Char")}
+    PreTerm "{" {Term ","}* "}"  -> Term    {cons("AnnoList")}
+    PreTerm                      -> Term    {cons("NoAnnoList")}
+    "<" Strategy ">" Term        -> PreTerm {cons("App")}
+    "<" Strategy ">" Term        -> Term    {cons("App"), prefer}
+    StrategyAngle                -> PreTerm {cons("RootApp")}
+    StrategyAngle                -> Term    {cons("RootApp"), prefer}
+    "(" {Term ","}* ")"          -> PreTerm {cons("Tuple")}
+    "[" {Term ","}* "]"          -> PreTerm {cons("List")}
+    "[" {Term ","}* "|" Term "]" -> PreTerm {cons("ListTail")}
+
+  context-free priorities
+    Term "#" "(" Term ")" -> PreTerm {cons("Explode")} >
+    PreTerm "{" {Term ","}* "}" -> Term {cons("AnnoList")} >
+    Var "@" Term -> Term {cons("As")}
+
+module Stratego-Sugar-Signatures
+imports Stratego-Core-Signatures Stratego-Sugar-Constants
+
+exports
+  sorts Sort
+
+  context-free syntax
+    "[" {Sort ","}* "]"          -> Sort {cons("SortList")}
+    "[" {Sort ","}* "|" Sort "]" -> Sort {cons("SortListTl")}
+    "(" {Sort ","}* ")"          -> Sort {cons("SortTuple")}
+
+  sorts Kind
+
+  context-free syntax
+    "*"  -> Kind {cons("Star")}
+    "**" -> Kind {cons("StarStar")}
+
+module Stratego-Core-Signatures
+imports Stratego-Core-Identifiers Stratego-Core-Constants
+
+exports
+  sorts Sdecl
+
+  context-free syntax
+    "sorts" Sort*          -> Sdecl {cons("Sorts")}
+    "constructors" Opdecl* -> Sdecl {cons("Constructors")}
+
+  sorts Sort
+
+  context-free syntax
+    LCID                   -> Sort {cons("SortVar")}
+    UCID                   -> Sort {cons("SortNoArgs")}
+    Id "(" {Sort ","}* ")" -> Sort {cons("Sort")}
+
+  sorts Opdecl
+
+  context-free syntax
+    Id ":" Type     -> Opdecl {cons("OpDecl")}
+    String ":" Type -> Opdecl {cons("OpDeclQ")}
+    ":" Type        -> Opdecl {cons("OpDeclInj")}
+
+  context-free syntax
+    "external" Id ":" Type     -> Opdecl {cons("ExtOpDecl")}
+    "external" String ":" Type -> Opdecl {cons("ExtOpDeclQ")}
+    "external" ":" Type        -> Opdecl {cons("ExtOpDeclInj")}
+
+  sorts Type ArgType ConstType FunType RetType
+
+  context-free syntax
+    Sort                        -> ConstType {cons("ConstType")}
+    {ArgType "*"}+ "->" RetType -> FunType   {cons("FunType")}
+    "(" Type ")"                -> ArgType   {bracket}
+    ConstType                   -> ArgType   
+    Type                        -> RetType   
+    FunType                     -> RetType   {reject}
+    FunType                     -> Type      
+    ConstType                   -> Type      
+
+  context-free restrictions
+    Sort -/- [\(]
+
+module Stratego-Core-Terms
+imports Stratego-Core-Identifiers Stratego-Core-Constants
+
+exports
+  sorts ID Var Wld
+
+  context-free syntax
+    Id -> Var {cons("Var")}
+    Id -> ID  
+
+  sorts Term PreTerm
+
+  context-free syntax
+    Var                        -> PreTerm 
+    Var                        -> Term    {prefer}
+    "_"                        -> Wld     {cons("Wld")}
+    Wld                        -> PreTerm 
+    Wld                        -> Term    {prefer}
+    Int                        -> PreTerm {cons("Int")}
+    Real                       -> PreTerm {cons("Real")}
+    String                     -> PreTerm {cons("Str")}
+    Id "(" {Term ","}* ")"     -> PreTerm {cons("Op")}
+    String "(" {Term ","}* ")" -> PreTerm {cons("OpQ")}
+    Term "#" "(" Term ")"      -> PreTerm {cons("Explode")}
+    PreTerm "{^" PreTerm "}"   -> Term    {cons("Anno")}
+    Var "@" Term               -> Term    {cons("As"), prefer}
+    Var "@" PreTerm            -> PreTerm {cons("As")}
+
+  context-free priorities
+    Term "#" "(" Term ")" -> PreTerm {cons("Explode")} >
+    Var "@" Term -> Term {cons("As")}
+
+module Stratego-Core-Strategies
+imports Stratego-Core-Terms Stratego-Core-Constants Stratego-Core-Signatures
+
+exports
+  sorts Def
+
+  context-free syntax
+    StrategyDef                                             -> Def      
+    Id                                                      -> SVar     {cons("SVar")}
+    "let" Def* "in" Strategy "end"                          -> Strategy {cons("Let")}
+    SVar "(" {Strategy ","}* "|" {Term ","}* ")"            -> Strategy {cons("CallT")}
+    "call" "(" Term "|" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallDynamic")}
+
+  sorts StrategyDef
+
+  context-free syntax
+    Id "(" {Typedid ","}* "|" {Typedid ","}* ")" "=" Strategy            -> StrategyDef {cons("SDefT")}
+    Anno+ StrategyDef                                                    -> Def         {cons("AnnoDef")}
+    "external" Id "(" {Typedid ","}* "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("ExtSDefInl")}
+    "external" Id "(" {Typedid ","}* "|" {Typedid ","}* ")"              -> StrategyDef {cons("ExtSDef")}
+
+  sorts Anno
+
+  context-free syntax
+    "extend"   -> Anno {cons("Extend")}
+    "override" -> Anno {cons("Override")}
+    "internal" -> Anno {cons("Internal")}
+
+  lexical syntax
+    "extend"      -> Keyword 
+    "override"    -> Keyword 
+    "internal"    -> Keyword 
+    "sealed"      -> Keyword 
+    "extensible"  -> Keyword 
+    "overridable" -> Keyword 
+
+  lexical restrictions
+    "extend" "override" "internal" "sealed" "extensible" "overridable"
+    -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Typedid
+
+  context-free syntax
+    ID ":" Type -> Typedid {cons("VarDec")}
+
+  sorts Strategy SVar StrategyParen StrategyMid
+
+  context-free syntax
+    "(" Strategy ")"                                          -> StrategyParen {cons("ParenStrat")}
+    "fail"                                                    -> Strategy      {cons("Fail")}
+    "id"                                                      -> Strategy      {cons("Id")}
+    "override"                                                -> Strategy      {cons("Override")}
+    "?" Term                                                  -> Strategy      {cons("Match")}
+    "!" Term                                                  -> Strategy      {cons("Build")}
+    "{" {ID ","}* ":" Strategy "}"                            -> Strategy      {cons("Scope")}
+    Strategy ";" Strategy                                     -> Strategy      {cons("Seq"), right}
+    Strategy "<" StrategyMid "+" Strategy                     -> Strategy      {cons("GuardedLChoice"), right}
+    Strategy                                                  -> StrategyMid   
+    "prim" "(" String "," {Strategy ","}* "|" {Term ","}* ")" -> Strategy      {cons("PrimT")}
+    "some" "(" Strategy ")"                                   -> Strategy      {cons("Some")}
+    "one" "(" Strategy ")"                                    -> Strategy      {cons("One")}
+    "all" "(" Strategy ")"                                    -> Strategy      {cons("All")}
+
+  context-free priorities
+    { "!" Term -> Strategy {cons("Build")}
+      "?" Term -> Strategy {cons("Match")} } >
+    Strategy ";" Strategy -> Strategy {cons("Seq"), right} >
+    {right:
+      Strategy "<" StrategyMid "+" Strategy -> Strategy
+      {cons("GuardedLChoice"), right}
+    }
+
+  context-free syntax
+    "import-term" "(" ModName ")" -> Strategy {cons("ImportTerm")}
+
+module Stratego-Core-Modules
+imports Stratego-Core-Identifiers Stratego-Core-Strategies
+        Stratego-Core-Signatures
+
+exports
+  sorts Module
+
+  context-free syntax
+    "module" ModName Decl* -> Module {cons("Module")}
+    "specification" Decl*  -> Module {cons("Specification")}
+
+  sorts Decl
+
+  context-free syntax
+    "imports" ImportModName* -> Decl {cons("Imports")}
+    "strategies" Def*        -> Decl {cons("Strategies")}
+    "signature" Sdecl*       -> Decl {cons("Signature")}
+
+  sorts ImportModName
+
+  context-free syntax
+    ModName -> ImportModName {cons("Import")}
+
+  syntax
+    <ModName-CF> "/" "-" -> <ImportModName-CF> {cons("ImportWildcard")}
+
+module Stratego-Sugar-Modules
+imports Stratego-Core-Modules Stratego-Sugar-Strategies
+        Stratego-Sugar-Signatures Stratego-Sugar-Overlays Stratego-Sugar-Rules
+
+exports
+  sorts Decl Def
+
+  context-free syntax
+    "rules" Def*        -> Decl {cons("Rules")}
+    "overlays" Overlay* -> Decl {cons("Overlays")}
+    RuleDef             -> Def  
+
+module Stratego-Core-Constants
+exports
+  sorts Int Real String StrChar
+
+  lexical syntax
+    [\-]? [0-9]+             -> Int     
+    [\-]? [0-9]+ [\.] [0-9]+ -> Real    
+    "\"" StrChar* "\""       -> String  
+    ~[\"\\]                  -> StrChar 
+    [\\] [\"tnr\\]           -> StrChar 
+
+module Stratego-Sugar-Constants
+imports Stratego-Core-Identifiers Stratego-Core-Constants
+
+exports
+  sorts Char CharChar
+
+  lexical syntax
+    "'" CharChar "'" -> Char     
+    ~[\']            -> CharChar 
+    [\\] [\'ntr\ ]   -> CharChar 
+    Char             -> Id       {reject}
+
+module Stratego-Core-Identifiers
+exports
+  sorts ModName ModNamePart
+
+  lexical syntax
+    {ModNamePart "/"}+                -> ModName     
+    [a-zA-Z\.\_] [a-zA-Z0-9\'\.\-\_]* -> ModNamePart 
+
+  lexical restrictions
+    ModName -/- [a-zA-Z0-9\'\.\-\_]
+
+  lexical syntax
+    "imports"    -> ModName {reject}
+    "overlays"   -> ModName {reject}
+    "rules"      -> ModName {reject}
+    "signature"  -> ModName {reject}
+    "strategies" -> ModName {reject}
+
+  sorts Id LId LCID UCID Wld
+
+  lexical syntax
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]*     -> Id   
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]* "*" -> LId  
+    [\'] [a-z]+                       -> Id   
+    [a-z] [a-zA-Z0-9\'\-\_]*          -> LCID 
+    [A-Z] [a-zA-Z0-9\'\-\_]*          -> UCID 
+
+  lexical restrictions
+    Id -/- [a-zA-Z0-9\'\-\_\*]
+    LId -/- [a-zA-Z0-9\'\-\_]
+    LCID -/- [a-zA-Z0-9\'\-\_]
+    UCID -/- [a-zA-Z0-9\'\-\_]
+
+  lexical syntax
+    "_"     -> Id   {reject}
+    "'"     -> Id   {reject}
+    Keyword -> Id   {reject}
+    Keyword -> LId  {reject}
+    Keyword -> LCID {reject}
+    Keyword -> UCID {reject}
+
+  lexical restrictions
+    "all" "case" "constructors" "else" "end" "external" "fail" "id" "if" "in"
+    "imports" "let" "module" "not" "one" "overlays" "otherwise" "prim" "rec"
+    "rules" "script" "signature" "some" "sorts" "strategies" "stratego" "switch"
+    "test" "then" "where" "import-term" -/- [a-zA-Z0-9\'\-\_]
+
+  context-free restrictions
+    Wld -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Keyword
+
+  lexical syntax
+    "all"          -> Keyword 
+    "constructors" -> Keyword 
+    "fail"         -> Keyword 
+    "id"           -> Keyword 
+    "in"           -> Keyword 
+    "let"          -> Keyword 
+    "module"       -> Keyword 
+    "not"          -> Keyword 
+    "one"          -> Keyword 
+    "overlays"     -> Keyword 
+    "prim"         -> Keyword 
+    "rules"        -> Keyword 
+    "script"       -> Keyword 
+    "signature"    -> Keyword 
+    "some"         -> Keyword 
+    "sorts"        -> Keyword 
+    "strategies"   -> Keyword 
+    "stratego"     -> Keyword 
+    "test"         -> Keyword 
+    "where"        -> Keyword 
+    "import-term"  -> Keyword 
+
+module Stratego-Core-Layout
+exports
+  sorts Ws ShortCom LongCom CommChar Asterisk Eof
+
+  lexical syntax
+    [\t\ \n\r]             -> Ws       
+    "//" ~[\n]* [\n] | Eof -> ShortCom 
+    "/*" CommChar* "*/"    -> LongCom  
+                           -> Eof      
+    ~[\*]                  -> CommChar 
+    "*"                    -> Asterisk 
+    Asterisk               -> CommChar 
+
+  lexical restrictions
+    Asterisk -/- [\/]
+    Eof -/- ~[]
+
+  lexical syntax
+    ShortCom -> LAYOUT 
+    LongCom  -> LAYOUT 
+    Ws       -> LAYOUT 
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/] . [\*]
+    LAYOUT? -/- [\/] . [\/]
+
+module Stratego-Sugar-Layout
+imports Stratego-Core-Layout
+
+module Stratego-Sugar
+imports Stratego-Sugar-Layout Stratego-Core-Identifiers Stratego-Sugar-Constants
+        Stratego-Sugar-Modules Stratego-Sugar-Signatures Stratego-Sugar-Terms
+        Stratego-Sugar-Strategies Stratego-Sugar-Rules
+        Stratego-Sugar-DynamicRules Stratego-Sugar-Overlays
+
+hiddens
+  context-free start-symbols
+    Module
\ No newline at end of file


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.def
___________________________________________________________________
Added: svn:mergeinfo
   + 

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.tbl (from rev 20261, sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.tbl)
===================================================================
(Binary files differ)


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.tbl
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream
Added: svn:mergeinfo
   + 

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.def
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.def	2009-11-17 14:29:14 UTC (rev 20261)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.def	2009-11-17 14:43:28 UTC (rev 20262)
@@ -1,632 +0,0 @@
-definition
-
-module Stratego-Sugar-Overlays
-imports Stratego-Core-Identifiers Stratego-Sugar-Terms
-
-exports
-  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR
-
-  lexical syntax
-    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover}
-    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
-    ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {recover}
-    WATERTOKEN                     -> WATER               
-    WATERTOKENSEPARATOR            -> WATER               
-
-  lexical restrictions
-    WATERTOKEN -/- [A-Za-z0-9\_]
-
-  context-free syntax
-    WATER -> LAYOUT {cons("WATER")}
-
-  (
-
-  sorts WATEREOF
-
-  lexical restrictions
-    WATEREOF -/- ~[]
-
-  lexical syntax
-    %% Lexical insertion recovery rules                     
-                                        -> "="              {recover, cons("INSERTION")}
-                                        -> "|}"             {recover, cons("INSERTION")}
-                                        -> "("              {recover, cons("INSERTION")}
-                                        -> "|"              {recover, cons("INSERTION")}
-                                        -> ","              {recover, cons("INSERTION")}
-                                        -> ">"              {recover, cons("INSERTION")}
-                                        -> "\\"             {recover, cons("INSERTION")}
-                                        -> "]"              {recover, cons("INSERTION")}
-                                        -> "sorts"          {recover, cons("INSERTION")}
-                                        -> "constructors"   {recover, cons("INSERTION")}
-                                        -> "external"       {recover, cons("INSERTION")}
-                                        -> "end"            {recover, cons("INSERTION")}
-                                        -> ":"              {recover, cons("INSERTION")}
-                                        -> "}"              {recover, cons("INSERTION")}
-                                        -> ")"              {recover, cons("INSERTION")}
-                                        -> "module"         {recover, cons("INSERTION")}
-                                        -> "specification"  {recover, cons("INSERTION")}
-                                        -> "imports"        {recover, cons("INSERTION")}
-                                        -> "strategies"     {recover, cons("INSERTION")}
-                                        -> "signature"      {recover, cons("INSERTION")}
-                                        -> "rules"          {recover, cons("INSERTION")}
-                                        -> "overlays"       {recover, cons("INSERTION")}
-    "\""                                -> INSERTOPENQUOTE0 {recover}
-    INSERTOPENQUOTE0 StrChar* "\n"      -> String           {cons("INSERTEND")}
-    INSERTOPENQUOTE0 StrChar* WATEREOF  -> String           {cons("INSERTEND")}
-    "'"                                 -> INSERTOPENQUOTE1 {recover}
-    INSERTOPENQUOTE1 CharChar "\n"      -> Char             {cons("INSERTEND")}
-    INSERTOPENQUOTE1 CharChar WATEREOF  -> Char             {cons("INSERTEND")}
-    "/*"                                -> INSERTSTART0     {recover}
-    INSERTSTART0 CommChar* WATEREOF     -> LongCom          {cons("INSERTEND")}
-
-  syntax
-    %% Kernel syntax insertion recovery rules   
-
-  )
-
-  (
-
-  sorts Overlay
-
-  context-free syntax
-    Id "=" Term                   -> Overlay {cons("OverlayNoArgs")}
-    Id "(" {Id ","}* ")" "=" Term -> Overlay {cons("Overlay")}
-
-  )
-
-module Stratego-Sugar-DynamicRules
-imports Stratego-Core-Identifiers Stratego-Sugar-Strategies Stratego-Sugar-Rules
-
-exports
-  sorts ScopeLabels
-
-  context-free syntax
-    "{|" ScopeLabels ":" Strategy "|}" -> Strategy    {cons("DynRuleScope")}
-    {DynRuleScopeId ","}*              -> ScopeLabels 
-    "~" Term                           -> ScopeLabels {cons("ScopeLabels")}
-
-  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
-
-  context-free syntax
-    "rules" "(" DynRuleDef* ")"            -> Strategy       {cons("GenDynRules")}
-    Id "+" Term                            -> DynRuleDef     {cons("AddScopeLabel")}
-    DynRuleId ":-" Term                    -> DynRuleDef     {cons("UndefineDynRule")}
-    DynRuleId ":" Rule                     -> DynRuleDef     {cons("SetDynRule")}
-    DynRuleId ":+" Rule                    -> DynRuleDef     {cons("AddDynRule")}
-    DynRuleId ":" Term                     -> DynRuleDef     {cons("SetDynRuleMatch")}
-    DynRuleId ":=" Term                    -> DynRuleDef     {cons("DynRuleAssign")}
-    DynRuleId ":+=" Term                   -> DynRuleDef     {cons("DynRuleAssignAdd")}
-    DynRuleId ":" Rule "depends" "on" Term -> DynRuleDef     {cons("SetDynRuleDepends")}
-    RuleDec "." Term                       -> DynRuleId      {cons("LabeledDynRuleId")}
-    RuleDec "+" Term                       -> DynRuleId      {cons("AddLabelDynRuleId")}
-    RuleDec                                -> DynRuleId      {cons("DynRuleId")}
-    Id "." Term                            -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
-    Id                                     -> DynRuleScopeId {cons("DynRuleScopeId")}
-
-  context-free syntax
-    Id                                           -> RuleDec {cons("RDecNoArgs")}
-    Id "(" {Typedid ","}* ")"                    -> RuleDec {cons("RDec")}
-    Id "(" {Typedid ","}* "|" {Typedid ","}* ")" -> RuleDec {cons("RDecT")}
-
-  sorts RuleNames
-
-  context-free syntax
-    {Id ","}*                    -> RuleNames 
-    "~" Term                     -> RuleNames {cons("RuleNames")}
-    "/" RuleNames "\\*" Strategy -> Strategy  {cons("DynRuleIntersectFix")}
-
-  syntax
-    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>                                               -> <Strategy-CF> {cons("DynRuleUnionFix")}
-    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>                                              -> <Strategy-CF> {cons("DynRuleUnionFix")}
-    "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>  -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
-    "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF> -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
-
-  context-free syntax
-    Strategy "/" RuleNames "\\" Strategy               -> Strategy {cons("DynRuleIntersect"), right}
-    Strategy "\\" RuleNames "/" Strategy               -> Strategy {cons("DynRuleUnion"), right}
-    Strategy "/" RuleNames "\\" RuleNames "/" Strategy -> Strategy {cons("DynRuleIntersectUnion"), right}
-
-  priorities
-    <StrategyAngle-CF> <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("BA")} >
-    { "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF> ->
-      <Strategy-CF> {cons("DynRuleUnionFix")}
-      "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF> ->
-      <Strategy-CF> {cons("DynRuleUnionFix")}
-      
-      "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
-      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
-      
-      "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
-      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")} } >
-    <Strategy-CF> <LAYOUT?-CF> "=>" <LAYOUT?-CF> <Term-CF> -> <Strategy-CF>
-    {cons("AM")}
-
-  context-free priorities
-    StrategyAngle Term -> Strategy {cons("BA")} >
-    "/" RuleNames "\\*" Strategy -> Strategy {cons("DynRuleIntersectFix")} >
-    Strategy "=>" Term -> Strategy {cons("AM")} >
-    Strategy "/" RuleNames "\\" Strategy -> Strategy
-    {cons("DynRuleIntersect"), right} >
-    Strategy "\\" RuleNames "/" Strategy -> Strategy
-    {cons("DynRuleUnion"), right} >
-    Strategy "/" RuleNames "\\" RuleNames "/" Strategy -> Strategy
-    {cons("DynRuleIntersectUnion"), right} >
-    Strategy ";" Strategy -> Strategy {cons("Seq"), right}
-
-module Stratego-Sugar-Rules
-imports Stratego-Sugar-Strategies
-
-exports
-  sorts RuleDef
-
-  context-free syntax
-    Id ":" Rule                                           -> RuleDef {cons("RDefNoArgs")}
-    Anno+ RuleDef                                         -> Def     {cons("AnnoDef")}
-    Id "(" {Typedid ","}* ")" ":" Rule                    -> RuleDef {cons("RDef")}
-    Id "(" {Typedid ","}* "|" {Typedid ","}* ")" ":" Rule -> RuleDef {cons("RDefT")}
-
-  sorts Rule RuleCond
-
-  context-free syntax
-    Term "->" Term                  -> Rule     {cons("RuleNoCond")}
-    Term "->" Term "where" Strategy -> Rule     {cons("Rule")}
-    Term "->" Term RuleCond+        -> Rule     {cons("Rule"), avoid}
-    "where" Strategy                -> RuleCond {cons("WhereClause")}
-    "with" Strategy                 -> RuleCond {cons("WithClause")}
-
-module Stratego-Sugar-Strategies
-imports Stratego-Core-Strategies Stratego-Sugar-Terms Stratego-Sugar-Constants
-        Stratego-Sugar-Signatures
-
-exports
-  context-free syntax
-    Id "=" Strategy                        -> StrategyDef {cons("SDefNoArgs")}
-    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
-
-  context-free syntax
-    ID -> Typedid {cons("DefaultVarDec")}
-
-  sorts Rule
-
-  sorts StrategyParen StrategyCurly StrategyAngle
-
-  context-free syntax
-    SVar "(" {Strategy ","}* ")"          -> Strategy      {cons("Call")}
-    "{" Strategy "}"                      -> Strategy      {cons("ScopeDefault")}
-    StrategyAngle Term                    -> Strategy      {cons("BA")}
-    "<" Strategy ">"                      -> StrategyAngle {bracket}
-    Strategy "<+" Strategy                -> Strategy      {cons("LChoice"), right}
-    "rec" Id "(" Strategy ")"             -> Strategy      {cons("Rec")}
-    "not" "(" Strategy ")"                -> Strategy      {cons("Not")}
-    "where" "(" Strategy ")"              -> Strategy      {cons("Where")}
-    "with" "(" Strategy ")"               -> Strategy      {cons("With"), prefer}
-    "test" "(" Strategy ")"               -> Strategy      {cons("Test")}
-    "prim" "(" String ")"                 -> Strategy      {cons("PrimNoArgs")}
-    "prim" "(" String "," {Term ","}* ")" -> Strategy      {cons("Prim")}
-    String                                -> Strategy      {cons("StrCong")}
-    Int                                   -> Strategy      {cons("IntCong")}
-    Real                                  -> Strategy      {cons("RealCong")}
-    Char                                  -> Strategy      {cons("CharCong")}
-    String "(" {Strategy ","}* ")"        -> Strategy      {cons("CongQ")}
-    Strategy StrategyCurly                -> Strategy      {cons("AnnoCong")}
-    "{" Strategy "}"                      -> StrategyCurly {cons("StrategyCurly")}
-    "(" ")"                               -> Strategy      {cons("EmptyTupleCong")}
-    "(" Strategy ")"                      -> Strategy      {bracket}
-    "(" Strategy "," {Strategy ","}+ ")"  -> Strategy      {cons("TupleCong")}
-    "[" {Strategy ","}* "]"               -> Strategy      {cons("ListCongNoTail")}
-    "[" {Strategy ","}* "|" Strategy "]"  -> Strategy      {cons("ListCong")}
-    Strategy "#" StrategyParen            -> Strategy      {cons("ExplodeCong")}
-
-  sorts SwitchCase
-
-  context-free syntax
-    SVar                                                         -> Strategy   {cons("CallNoArgs")}
-    "\\" Rule "\\"                                               -> Strategy   {cons("LRule")}
-    "(" Rule ")"                                                 -> Strategy   {cons("SRule")}
-    Strategy "+" Strategy                                        -> Strategy   {cons("Choice"), right}
-    Strategy "+>" Strategy                                       -> Strategy   {cons("RChoice"), right}
-    "if" Strategy "then" Strategy "else" Strategy "end"          -> Strategy   {cons("CondChoice")}
-    "if" Strategy "then" Strategy "end"                          -> Strategy   {cons("IfThen")}
-    "switch" Strategy SwitchCase* "end"                          -> Strategy   {cons("SwitchChoiceNoOtherwise")}
-    "switch" Strategy SwitchCase* "otherwise" ":" Strategy "end" -> Strategy   {cons("SwitchChoice")}
-    "case" Strategy ":" Strategy                                 -> SwitchCase {cons("SwitchCase")}
-    Strategy "=>" Term                                           -> Strategy   {cons("AM")}
-    Term ":=" Term                                               -> Strategy   {cons("Assign")}
-
-  context-free priorities
-    { Strategy StrategyCurly -> Strategy 
-      Strategy "#" StrategyParen -> Strategy  } >
-    { "!" Term -> Strategy 
-      "?" Term -> Strategy  } >
-    StrategyAngle Term -> Strategy  >
-    Strategy "=>" Term -> Strategy  >
-    Strategy ";" Strategy -> Strategy  >
-    {right:
-      Strategy "+" Strategy -> Strategy 
-      Strategy "<+" Strategy -> Strategy 
-      Strategy "+>" Strategy -> Strategy 
-      Strategy "<" StrategyMid "+" Strategy -> Strategy 
-    }
-
-  context-free priorities
-    Strategy -> StrategyMid  >
-    Strategy "+" Strategy -> Strategy 
-
-  context-free priorities
-    { Strategy StrategyCurly -> Strategy 
-      Strategy "#" StrategyParen -> Strategy  } . >
-    Term ":=" Term -> Strategy 
-
-module Stratego-Sugar-Terms
-imports Stratego-Core-Terms Stratego-Sugar-Strategies
-
-exports
-  sorts LID
-
-  context-free syntax
-    LId -> LID {cons("ListVar")}
-    LID -> Var {cons("Var")}
-    LID -> ID  
-
-  context-free syntax
-    "_" PreTerm                  -> PreTerm {cons("BuildDefaultPT")}
-    "_" Term                     -> Term    {cons("BuildDefault"), prefer}
-    Char                         -> PreTerm {cons("Char")}
-    PreTerm "{" {Term ","}* "}"  -> Term    {cons("AnnoList")}
-    PreTerm                      -> Term    {cons("NoAnnoList")}
-    "<" Strategy ">" Term        -> PreTerm {cons("App")}
-    "<" Strategy ">" Term        -> Term    {cons("App"), prefer}
-    StrategyAngle                -> PreTerm {cons("RootApp")}
-    StrategyAngle                -> Term    {cons("RootApp"), prefer}
-    "(" {Term ","}* ")"          -> PreTerm {cons("Tuple")}
-    "[" {Term ","}* "]"          -> PreTerm {cons("List")}
-    "[" {Term ","}* "|" Term "]" -> PreTerm {cons("ListTail")}
-
-  context-free priorities
-    Term "#" "(" Term ")" -> PreTerm {cons("Explode")} >
-    PreTerm "{" {Term ","}* "}" -> Term {cons("AnnoList")} >
-    Var "@" Term -> Term {cons("As")}
-
-module Stratego-Sugar-Signatures
-imports Stratego-Core-Signatures Stratego-Sugar-Constants
-
-exports
-  sorts Sort
-
-  context-free syntax
-    "[" {Sort ","}* "]"          -> Sort {cons("SortList")}
-    "[" {Sort ","}* "|" Sort "]" -> Sort {cons("SortListTl")}
-    "(" {Sort ","}* ")"          -> Sort {cons("SortTuple")}
-
-  sorts Kind
-
-  context-free syntax
-    "*"  -> Kind {cons("Star")}
-    "**" -> Kind {cons("StarStar")}
-
-module Stratego-Core-Signatures
-imports Stratego-Core-Identifiers Stratego-Core-Constants
-
-exports
-  sorts Sdecl
-
-  context-free syntax
-    "sorts" Sort*          -> Sdecl {cons("Sorts")}
-    "constructors" Opdecl* -> Sdecl {cons("Constructors")}
-
-  sorts Sort
-
-  context-free syntax
-    LCID                   -> Sort {cons("SortVar")}
-    UCID                   -> Sort {cons("SortNoArgs")}
-    Id "(" {Sort ","}* ")" -> Sort {cons("Sort")}
-
-  sorts Opdecl
-
-  context-free syntax
-    Id ":" Type     -> Opdecl {cons("OpDecl")}
-    String ":" Type -> Opdecl {cons("OpDeclQ")}
-    ":" Type        -> Opdecl {cons("OpDeclInj")}
-
-  context-free syntax
-    "external" Id ":" Type     -> Opdecl {cons("ExtOpDecl")}
-    "external" String ":" Type -> Opdecl {cons("ExtOpDeclQ")}
-    "external" ":" Type        -> Opdecl {cons("ExtOpDeclInj")}
-
-  sorts Type ArgType ConstType FunType RetType
-
-  context-free syntax

(300 diff lines omitted)


From m.dejonge at tudelft.nl  Tue Nov 17 17:17:20 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 17 Nov 2009 16:17:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20263 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	TestInput/Common TestInput/Practice src/evaluating src/tests
Message-ID: <200911171617.nAHGHKwI026757@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-17 16:17:20 +0000 (Tue, 17 Nov 2009)
New Revision: 20263

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20263&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ExpectedRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test2.cs
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java

Log:
- all erroneous regions in a file can be found by looking at @START and @END
- exceptions if START and END are not correctly nested

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test2.java	2009-11-17 14:43:28 UTC (rev 20262)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test2.java	2009-11-17 16:17:20 UTC (rev 20263)
@@ -13,7 +13,7 @@
   private int ErrorFragment(){
       int corrLine1;
       corrLine2();
-      bla bla bla
+      bla bla bla //@START @END
       corrLine3();
   }      
   

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test2.cs
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test2.cs	2009-11-17 14:43:28 UTC (rev 20262)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test2.cs	2009-11-17 16:17:20 UTC (rev 20263)
@@ -12,7 +12,7 @@
 
   private int ErrorFragment(){
       int corrLine1;
-      corrLine2();
+      corrLine2() //@START //@END
       bla bla bla
       corrLine3();
   }      

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java (from rev 20252, sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ExpectedRegion.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-17 16:17:20 UTC (rev 20263)
@@ -0,0 +1,57 @@
+package evaluating;
+
+import java.util.ArrayList;
+
+public class ErroneousRegion {
+
+	private int startLine;
+	public void setStartLine(int startLine) {
+		this.startLine = startLine;
+	}
+
+	public void setEndLine(int endLine) {
+		this.endLine = endLine;
+	}
+
+	private int endLine;
+	
+	public int getStartLine() {
+		return startLine;
+	}
+	
+	public int getEndLine() {
+		return endLine;
+	}
+	
+	public ErroneousRegion() {
+		startLine=-1;
+		endLine=-1;
+	}	
+
+	public static ArrayList<ErroneousRegion> processFileContent(String s) throws Exception {
+		ArrayList<ErroneousRegion> result = new ArrayList<ErroneousRegion>();
+		String[] lines=s.split("\n");
+		int StartLine=-1;
+	    for (int i = 0; i < lines.length; i++) {
+	    	String aLine = lines[i];
+	    	if(aLine.contains("@START")){
+	    		if(StartLine!=-1)
+		    		throw(new Exception("Double //@START in Region Definition"));
+	    		StartLine=i;
+    		}
+	    	if(aLine.contains("@END")){
+	    		if(StartLine==-1){
+	    			throw(new Exception("Missing //@START in Region Definition"));
+	    		}
+	    		ErroneousRegion detectedRegion = new ErroneousRegion(); 
+	    		detectedRegion.setStartLine(StartLine);
+	    		detectedRegion.setEndLine(i);
+	    		result.add(detectedRegion);
+	    		StartLine=-1;
+    		}
+		}
+	    if(StartLine!=-1)
+	    	throw(new Exception("Missing //@END in Region Definition"));
+	    return result;
+	}
+}


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ExpectedRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ExpectedRegion.java	2009-11-17 14:43:28 UTC (rev 20262)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ExpectedRegion.java	2009-11-17 16:17:20 UTC (rev 20263)
@@ -1,42 +0,0 @@
-package evaluating;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-
-public class ExpectedRegion {
-
-	private int startLine;
-	private int endLine;
-	
-	public int getStartLine() {
-		return startLine;
-	}
-	
-	public int getEndLine() {
-		return endLine;
-	}
-	
-	public ExpectedRegion() {
-		startLine=-1;
-		endLine=-1;
-	}	
-
-	public void processFileContent(String s) {
-		String[] lines=s.split("\n");
-	    for (int i = 0; i < lines.length; i++) {
-	    	String aLine = lines[i];
-	    	if(aLine.contains("@START")){
-	    		//System.out.println(aLine);
-	    		//System.out.println(i);
-	    		startLine=i;
-    		}
-	    	if(aLine.contains("@END")){
-	    		//System.out.println(aLine);
-	    		//System.out.println(i);
-	    		endLine=i;
-    		}
-		}
-	}
-}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-17 14:43:28 UTC (rev 20262)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-17 16:17:20 UTC (rev 20263)
@@ -3,11 +3,18 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
+import java.io.FilenameFilter;
 import java.io.IOException;
 import java.util.ArrayList;
 
 public class Testsuite {
 	
+	class SVNFilter implements FilenameFilter {
+	    public boolean accept(File dir, String name) {
+	        return (!name.endsWith(".svn"));
+	    }
+	}
+	
 	private static String RoorDir;
 	private ArrayList<String> directories;
 	private ArrayList<String> extensions;
@@ -33,12 +40,11 @@
 		statistics = new Statistics();
 	}
 	
-	public void runTestcases() throws IOException{
+	public void runTestcases() throws Exception{
 		if(useAllDirectories){
 			directories.clear();
-			for (String subDir : new File(RoorDir).list()) {
-				if(!subDir.equals(".svn"))
-					addDir(subDir);
+			for (String subDir : new File(RoorDir).list(new SVNFilter())) {
+				addDir(subDir);
 			}
 		}
 		if(useAllExtensions){
@@ -66,22 +72,24 @@
 		return s;
 	}
 	
-	public void processFiles(String inputDirectory, String extension) throws IOException{	
+	public void processFiles(String inputDirectory, String extension) throws Exception{	
 		File dir = new File(RoorDir + "/"+inputDirectory);
         if(!dir.exists())
         	throw new IOException("Directory: "+dir + "does not exist");
-        String[] children = dir.list(); 
+        String[] children = dir.list(new SVNFilter());
         for (int i = 0; i < children.length; i++) {
         	String fileName=children[i];
         	String filePath=dir+"/"+fileName;
         	if (!new File(filePath).isDirectory() && (useAllExtensions || fileName.endsWith(extension))){
 				String s = readFromFile(filePath);
-				ExpectedRegion r=new ExpectedRegion();
-				r.processFileContent(s);
-				Testcase file = new Testcase(fileName);
-				file.processRegionData(r.getStartLine(), r.getEndLine(), 0, 0);
-				statistics.processFileResult(file);				
-				System.out.println(filePath);
+				ArrayList<ErroneousRegion> expectedRegions=ErroneousRegion.processFileContent(s);
+				for (int j = 0; j < expectedRegions.size(); j++) {
+					ErroneousRegion expected = expectedRegions.get(j);
+					Testcase file = new Testcase(fileName);
+					file.processRegionData(expected.getStartLine(), expected.getEndLine(), 0, 0);
+					statistics.processFileResult(file);
+				}
+				//System.out.println(filePath);
 			}
 		}	
 	}

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java (from rev 20254, sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java	2009-11-17 16:17:20 UTC (rev 20263)
@@ -0,0 +1,75 @@
+package tests;
+
+import static org.junit.Assert.assertEquals;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+
+import org.junit.Test;
+
+import evaluating.*;
+
+
+public class Test_ErroneousRegion {
+	
+	ErroneousRegion errorRegion;
+	
+	public Test_ErroneousRegion() {
+		errorRegion=new ErroneousRegion();
+	}
+	
+	@Test
+	public void testRegionStartLine(){
+		assertEquals(-1, errorRegion.getStartLine());
+	}
+	
+	@Test
+	public void testRegionEndLine(){
+		assertEquals(-1, errorRegion.getEndLine());
+	}
+	
+	@Test
+	public void testProcessFile() throws Exception{		
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.processFileContent(readFromFile("TestInput/Common/test1.java"));
+		assertEquals(15, regions.get(0).getStartLine());
+		assertEquals(17, regions.get(0).getEndLine());
+	}
+	
+	@Test(expected=Exception.class)
+	public void testDoubleStart() throws Exception{		
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.processFileContent("m @START \n m @START");
+	}
+	
+	@Test(expected=Exception.class)
+	public void testMissingStart() throws Exception{		
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.processFileContent("m @START \n m @END \n m @END");
+	}
+	@Test
+	public void testNoRegions() throws Exception{		
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.processFileContent("m ");
+		assertEquals(0, regions.size());
+	}
+	@Test
+	public void testSameLine() throws Exception{		
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.processFileContent("@START @END ");
+		assertEquals(1, regions.size());
+	}
+	
+	@Test(expected=Exception.class)
+	public void testMissingEnd() throws Exception{		
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.processFileContent("m @START \n m \n @ END \n @START");
+	}
+	
+	private String readFromFile(String filePath) throws FileNotFoundException,
+	IOException {
+		byte[] buffer = new byte[(int) new File(filePath).length()];
+		FileInputStream f = new FileInputStream(filePath);
+		f.read(buffer);
+		String s= new String(buffer);
+		return s;
+	}
+
+}


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java	2009-11-17 14:43:28 UTC (rev 20262)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ExpectedRegion.java	2009-11-17 16:17:20 UTC (rev 20263)
@@ -1,49 +0,0 @@
-package tests;
-
-import static org.junit.Assert.assertEquals;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-
-import org.junit.Test;
-
-import evaluating.*;
-
-
-public class Test_ExpectedRegion {
-	
-	ExpectedRegion errorRegion;
-	
-	public Test_ExpectedRegion() {
-		errorRegion=new ExpectedRegion();
-	}
-	
-	@Test
-	public void testRegionStartLine(){
-		assertEquals(-1, errorRegion.getStartLine());
-	}
-	
-	@Test
-	public void testRegionEndLine(){
-		assertEquals(-1, errorRegion.getEndLine());
-	}
-	
-	@Test
-	public void testProcessFile() throws IOException{		
-		errorRegion.processFileContent(readFromFile("TestInput/Common/test1.java"));
-		assertEquals(15, errorRegion.getStartLine());
-		assertEquals(17, errorRegion.getEndLine());
-	}
-	
-	private String readFromFile(String filePath) throws FileNotFoundException,
-	IOException {
-		byte[] buffer = new byte[(int) new File(filePath).length()];
-		FileInputStream f = new FileInputStream(filePath);
-		f.read(buffer);
-		String s= new String(buffer);
-		return s;
-	}
-
-}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-17 14:43:28 UTC (rev 20262)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-17 16:17:20 UTC (rev 20263)
@@ -27,13 +27,13 @@
 	}
 	
 	@Test
-	public void test_allDir_allExtensions() throws IOException{
+	public void test_allDir_allExtensions() throws Exception{
 		myTestcases.runTestcases();
 		Assert.assertEquals(5, myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
-	public void MoreDirs_OneExtension() throws IOException{
+	public void MoreDirs_OneExtension() throws Exception{
 		myTestcases.addDir("Practice")
 					.addDir("Common")
 					.addExtension("java");
@@ -42,7 +42,7 @@
 	}
 	
 	@Test
-	public void OneDir_MoreExtensions() throws IOException{
+	public void OneDir_MoreExtensions() throws Exception{
 		myTestcases.addDir("Common")
 					.addExtension("java")
 					.addExtension("str");
@@ -51,13 +51,13 @@
 	}
 		
 	@Test
-	public void test_Default_isAll() throws IOException{
+	public void test_Default_isAll() throws Exception{
 		myTestcases.runTestcases();
 		Assert.assertEquals(5, myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
-	public void test_setAll() throws IOException{
+	public void test_setAll() throws Exception{
 		myTestcases.addExtension("java");
 		myTestcases.addDir("Common");
 		myTestcases.setAllExtensions(true);	
@@ -67,7 +67,7 @@
 	}
 	
 	@Test
-	public void test_Processing() throws IOException{		
+	public void test_Processing() throws Exception{		
 		myTestcases.processFiles("Common", "");
 		Assert.assertEquals(3, myTestcases.getStatistics().getNumberOfFiles());	
 		myTestcases.processFiles("Practice", "");
@@ -76,7 +76,7 @@
 	
 	
 	@Test
-	public void test_Processing_extension() throws IOException{
+	public void test_Processing_extension() throws Exception{
 		myTestcases.addExtension("m");
 		myTestcases.processFiles("Common","cs");
 		Assert.assertEquals(0, myTestcases.getStatistics().getNumberOfFiles());	
@@ -89,7 +89,7 @@
 	}
 	
 	@Test(expected=IOException.class)
-	public void test_Processing_Dir_not_Exist() throws IOException{		
+	public void test_Processing_Dir_not_Exist() throws Exception{		
 		myTestcases.processFiles("Nonsense", "");			
 	}
 



From L.C.L.Kats at tudelft.nl  Tue Nov 17 22:44:50 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 17 Nov 2009 21:44:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20264 - LennartKats -
	in spoofax/trunk/spoofax/org.spoofax.jsglr:
	src/org/spoofax/jsglr tests2
Message-ID: <200911172144.nAHLioDH030721@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-17 21:44:50 +0000 (Tue, 17 Nov 2009)
New Revision: 20264

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20264&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/InvalidParseTableException.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Tools.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/Makefile

Log:
More post-parse filter fixes.


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2009-11-17 16:17:20 UTC (rev 20263)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2009-11-17 21:44:50 UTC (rev 20264)
@@ -335,19 +335,17 @@
 
         if (t instanceof Amb) {
             if (!inAmbiguityCluster) {
+                // (some cycle stuff should be done here)
                 List<IParseNode> ambs = ((Amb)t).getAlternatives();
                 t = filterAmbiguities(ambs);
             } else {
-            	// TODO: Test me?
+            	// FIXME: hasRejectProd(Amb) can never succeed?
                 if (filterReject && parseTable.hasRejects() && hasRejectProd(t)) {
                     return null;
                 }
                 List<IParseNode> ambs = ((Amb) t).getAlternatives();
-                ambs = filterTree(ambs, false);
-                
-                if (ambs == null) return null;
-                
-                return new Amb(ambs);
+                return filterAmbiguities(ambs);
+
             }
         } else if(t instanceof ParseNode) {
             ParseNode node = (ParseNode) t;
@@ -691,7 +689,8 @@
         List<IParseNode> newAmbiguities = new ArrayList<IParseNode>();
 
         for (IParseNode amb : ambs) {
-            newAmbiguities.add(filterTree(amb, true));
+            IParseNode newAmb = filterTree(amb, true);
+            if (newAmb != null) newAmbiguities.add(newAmb);
         }
 
         if (newAmbiguities.size() > 1) {
@@ -1063,7 +1062,7 @@
         // countDistinctArguments
         int r = 0;
         for (int i = 0; i < leftArgs.size(); i++) {
-            if (!leftArgs.equals(rightArgs))
+            if (!leftArgs.get(i).equals(rightArgs.get(i)))
                 r++;
         }
         return r;

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/InvalidParseTableException.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/InvalidParseTableException.java	2009-11-17 16:17:20 UTC (rev 20263)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/InvalidParseTableException.java	2009-11-17 21:44:50 UTC (rev 20264)
@@ -11,13 +11,8 @@
 public class InvalidParseTableException extends Exception {
 
     private static final long serialVersionUID = 7932152591235406499L;
-    private final String reason;
     
-    public InvalidParseTableException(String reason) {
-        this.reason = reason;
+    public InvalidParseTableException(String message) {
+        super(message);
     }
-
-    public String toString() {
-        return reason;
-    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java	2009-11-17 16:17:20 UTC (rev 20263)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java	2009-11-17 21:44:50 UTC (rev 20264)
@@ -76,8 +76,6 @@
         Tools.setLogging(logging);
         sglr.getDisambiguator().setFilterCycles(detectCycles);
         sglr.getDisambiguator().setFilterAny(filter);
-        sglr.setFilter(false);
-        //sglr.setFilter(false); //mj
         
         InputStream fis = null;
         if(input == null)

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Tools.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Tools.java	2009-11-17 16:17:20 UTC (rev 20263)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Tools.java	2009-11-17 21:44:50 UTC (rev 20264)
@@ -76,7 +76,7 @@
 
     public static void setLogging(boolean enableLogging) {
         logging = enableLogging;
-        setOutput(".jsglr-log");
+        if (enableLogging) setOutput(outfile);
     }
     
     // Measuring

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/Makefile
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/Makefile	2009-11-17 16:17:20 UTC (rev 20263)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/tests2/Makefile	2009-11-17 21:44:50 UTC (rev 20264)
@@ -1,13 +1,15 @@
 DEFS=$(wildcard *.def)
-INS=$(wildcard *.in)
+INS=$(wildcard *.in) $(wildcard *.app)
 OUTS=$(INS:.in=.out)
 TBLS=$(DEFS:.def=.tbl)
+CLASSES=$(wildcard ../bin/org/spoofax/jsglr/*.class)
 
-WDINS=$(wildcard $(WD)/test/*/*.app)
+WDINS=$(wildcard *.app) $(wildcard $(WD)/test/*/*.app)
 WDOUTS=$(WDINS:.app=.aapp)
 
-PARSE=java -client -cp ../bin:`strj-jar -p` org.spoofax.jsglr.Main
+PARSE=java -Xverify:none -client -cp ../bin:`strj-jar -p` org.spoofax.jsglr.Main
 
+
 all : $(TBLS)
 
 check : $(TBLS) $(OUTS) check-webdsl
@@ -24,42 +26,57 @@
 %.tbl : %.def
 	sdf2table -i $< -o $@
 
-%-1.out : %-1.in %.tbl
+%-1.out : %-1.in %.tbl $(CLASSES)
 	@echo Parsing $<
 	@sglri    -p $*.tbl -i $< > /dev/null  || (echo "ERROR: Standard sglr parser failed"; exit 1)
 	@$(PARSE) -p $*.tbl -i $< -o $@ || (rm $@; exit 1)
-	@cat $< | grep 'amb(' && exit 1 || exit 0
+	@if `cat $@ | grep 'amb(' >/dev/null`; then \
+	   implode-asfix -i $@ | pp-aterm; exit 1; \
+	 fi
 
-%-2.out : %-1.in %.tbl
+%-2.out : %-1.in %.tbl $(CLASSES)
 	@echo Parsing $<
 	@sglri    -p $*.tbl -i $< > /dev/null  || (echo "ERROR: Standard sglr parser failed"; exit 1)
 	@$(PARSE) -p $*.tbl -i $< -o $@ || (rm $@; exit 1)
-	@cat $< | grep 'amb(' && exit 1 || exit 0
+	@if `cat $@ | grep 'amb(' >/dev/null`; then \
+	   implode-asfix -i $@ | pp-aterm; exit 1; \
+	 fi
 
-%-3.out : %-1.in %.tbl
+%-3.out : %-1.in %.tbl $(CLASSES)
 	@echo Parsing $<
 	@sglri    -p $*.tbl -i $< > /dev/null  || (echo "ERROR: Standard sglr parser failed"; exit 1)
 	@$(PARSE) -p $*.tbl -i $< -o $@ || (rm $@; exit 1)
-	@cat $< | grep 'amb(' && exit 1 || exit 0
+	@if `cat $@ | grep 'amb(' >/dev/null`; then \
+	   implode-asfix -i $@ | pp-aterm; exit 1; \
+	 fi
 
-%-4.out : %-1.in %.tbl
+%-4.out : %-1.in %.tbl $(CLASSES)
 	@echo Parsing $<
 	@sglri    -p $*.tbl -i $< > /dev/null  || (echo "ERROR: Standard sglr parser failed"; exit 1)
 	@$(PARSE) -p $*.tbl -i $< -o $@ || (rm $@; exit 1)
-	@cat $< | grep 'amb(' && exit 1 || exit 0
+	@if `cat $@ | grep 'amb(' >/dev/null`; then \
+	   implode-asfix -i $@ | pp-aterm; exit 1; \
+	 fi
 
-%-5.out : %-1.in %.tbl
+%-5.out : %-1.in %.tbl $(CLASSES)
 	@echo Parsing $<
 	@sglri    -p $*.tbl -i $< > /dev/null || (echo "ERROR: Standard sglr parser failed"; exit 1)
 	@$(PARSE) -p $*.tbl -i $< -o $@ || (rm $@; exit 1)
-	@cat $< | grep 'amb(' && exit 1 || exit 0
+	@if `cat $@ | grep 'amb(' >/dev/null`; then \
+	   implode-asfix -i $@ | pp-aterm; exit 1; \
+	 fi
 
-WebDSL.tbl : $(WD)/src/org/webdsl/dsl/syntax/WebDSL.def
+WebDSL.tbl : WebDSL.def
 	sdf2table -i $< -o $@ -m WebDSL
 
-%.aapp : %.app WebDSL.tbl
+WebDSL.def : $(WD)/src/org/webdsl/dsl/syntax/WebDSL.def
+	cp $< $@
+
+%.aapp : %.app WebDSL.tbl $(CLASSES)
 	@echo Parsing $<
 	@sglri    -p WebDSL.tbl -s Unit -i $< > /dev/null || (echo "ERROR: Standard sglr parser failed"; exit 1)
 	@$(PARSE) -p WebDSL.tbl -s Unit -i $< -o $@ || (rm $@; exit 1)
-	@cat $< | grep 'amb(' && exit 1 || exit 0
+	@if `cat $@ | grep 'amb(' >/dev/null`; then \
+	   implode-asfix -i $@ | pp-aterm; exit 1; \
+	 fi
 



From L.C.L.Kats at tudelft.nl  Tue Nov 17 22:53:04 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 17 Nov 2009 21:53:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20265 - LennartKats -
	strc-java/trunk/java
Message-ID: <200911172153.nAHLr45V030794@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-17 21:53:04 +0000 (Tue, 17 Nov 2009)
New Revision: 20265

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20265&view=rev

Modified:
   strc-java/trunk/java/spoofax-libs.jar

Log:


Changes:

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From m.dejonge at tudelft.nl  Wed Nov 18 13:02:04 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 18 Nov 2009 12:02:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20266 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/src:
	evaluating tests
Message-ID: <200911181202.nAIC24mf012162@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-18 12:02:04 +0000 (Wed, 18 Nov 2009)
New Revision: 20266

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20266&view=rev

Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java

Log:


Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-17 21:53:04 UTC (rev 20265)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-18 12:02:04 UTC (rev 20266)
@@ -27,8 +27,16 @@
 		startLine=-1;
 		endLine=-1;
 	}	
+	
+	/*//TODO collectSelectedRegions, fileInputStream as interface  
+	public static ArrayList<ErroneousRegion> collectSelectedRegions(String s) throws Exception {
+		ArrayList<ErroneousRegion> result = new ArrayList<ErroneousRegion>();
+		return result;
+	}
+	*/
 
-	public static ArrayList<ErroneousRegion> processFileContent(String s) throws Exception {
+	//TODO refactor:fileInputStream as interface 
+	public static ArrayList<ErroneousRegion> collectExpectedRegions(String s) throws Exception {
 		ArrayList<ErroneousRegion> result = new ArrayList<ErroneousRegion>();
 		String[] lines=s.split("\n");
 		int StartLine=-1;

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-17 21:53:04 UTC (rev 20265)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-18 12:02:04 UTC (rev 20266)
@@ -82,7 +82,7 @@
         	String filePath=dir+"/"+fileName;
         	if (!new File(filePath).isDirectory() && (useAllExtensions || fileName.endsWith(extension))){
 				String s = readFromFile(filePath);
-				ArrayList<ErroneousRegion> expectedRegions=ErroneousRegion.processFileContent(s);
+				ArrayList<ErroneousRegion> expectedRegions=ErroneousRegion.collectExpectedRegions(s);
 				for (int j = 0; j < expectedRegions.size(); j++) {
 					ErroneousRegion expected = expectedRegions.get(j);
 					Testcase file = new Testcase(fileName);

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java	2009-11-17 21:53:04 UTC (rev 20265)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java	2009-11-18 12:02:04 UTC (rev 20266)
@@ -33,34 +33,34 @@
 	
 	@Test
 	public void testProcessFile() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.processFileContent(readFromFile("TestInput/Common/test1.java"));
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegions(readFromFile("TestInput/Common/test1.java"));
 		assertEquals(15, regions.get(0).getStartLine());
 		assertEquals(17, regions.get(0).getEndLine());
 	}
 	
 	@Test(expected=Exception.class)
 	public void testDoubleStart() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.processFileContent("m @START \n m @START");
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegions("m @START \n m @START");
 	}
 	
 	@Test(expected=Exception.class)
 	public void testMissingStart() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.processFileContent("m @START \n m @END \n m @END");
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegions("m @START \n m @END \n m @END");
 	}
 	@Test
 	public void testNoRegions() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.processFileContent("m ");
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegions("m ");
 		assertEquals(0, regions.size());
 	}
 	@Test
 	public void testSameLine() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.processFileContent("@START @END ");
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegions("@START @END ");
 		assertEquals(1, regions.size());
 	}
 	
 	@Test(expected=Exception.class)
 	public void testMissingEnd() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.processFileContent("m @START \n m \n @ END \n @START");
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegions("m @START \n m \n @ END \n @START");
 	}
 	
 	private String readFromFile(String filePath) throws FileNotFoundException,



From L.C.L.Kats at tudelft.nl  Wed Nov 18 16:08:48 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 18 Nov 2009 15:08:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20267 - LennartKats -
	in strc-java/trunk: java
	java/runtime/org/strategoxt/lang/compat/override
	java/runtime/org/strategoxt/lang/compat/sglr test test/sglr
Message-ID: <200911181508.nAIF8mKr014943@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-18 15:08:48 +0000 (Wed, 18 Nov 2009)
New Revision: 20267

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20267&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/STRSGLR_anno_location.java
   strc-java/trunk/test/sglr/asfix_anno_location_tests.str
Modified:
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser-compat.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java
   strc-java/trunk/test/Makefile.am

Log:
Added a Java implementation of asfix-anno-location, and fixed some of the libstratego-sglr interface strategies.

Changes:

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-11-18 12:02:04 UTC (rev 20266)
+++ strc-java/trunk/java/Makefile.am	2009-11-18 15:08:48 UTC (rev 20267)
@@ -159,7 +159,7 @@
 	$(STRJ) -I $(STRATEGOXT)/share -I $(STRATEGOXT)/share/xtc -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.stratego_xtc -la stratego-lib -la org.strategoxt.lang.compat.override.xtc_compat -D GetInternalDefaultXtcRepository_0_0=None -D PACKAGE_NAME_TERM='"<package name>"'
 
 lib/org/strategoxt/stratego_sglr/Main.java : $(STRATEGOXT)/share/libstratego-sglr.ctree ../trans/strj runtime/org/strategoxt/lang/compat/override/jsglr_parser/Main.java runtime/org/strategoxt/lang/compat/override/jsglr_parser_compat/Main.java
-	$(STRJ) -I $(STRATEGOXT)/share -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.stratego_sglr -la stratego-lib -la stratego-xtc -la org.strategoxt.lang.compat.override.jsglr_parser -la org.strategoxt.lang.compat.override.jsglr_parser_compat
+	$(STRJ) -I $(STRATEGOXT)/share -i $< -o $@ $(STRJFLAGS) -O 2 -p org.strategoxt.stratego_sglr -la stratego-lib -la stratego-xtc -la org.strategoxt.lang.compat.override.jsglr_parser -la org.strategoxt.lang.compat.override.jsglr_parser_compat # compile with limited inlining for all the overridden overloads
 
 lib/org/strategoxt/stratego_rtg/Main.java : $(STRATEGOXT)/share/libstratego-rtg.ctree ../trans/strj runtime/org/strategoxt/lang/compat/stratego_rtg_compat/Main.java lib/org/strategoxt/stratego_rtg/rtg.tbl
 	$(STRJ) -I lib/org/strategoxt/stratego_rtg -I $(STRATEGOXT)/share -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.stratego_rtg -la stratego-lib -la stratego-sglr -la org.strategoxt.lang.compat.stratego_rtg_compat

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser-compat.str	2009-11-18 12:02:04 UTC (rev 20266)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser-compat.str	2009-11-18 15:08:48 UTC (rev 20267)
@@ -20,6 +20,9 @@
    */
   override open-parse-table =
     jsglr-open-parsetable
+  
+  override close-parse-table =
+    jsglr-open-parsetable
 
   override parse-file(on-open-error, on-parse-error | tbl, start-symbol, path) =
     where(!tbl => ParseTable(internal-tbl))
@@ -83,15 +86,8 @@
 strategies // location information
 
   override asfix-anno-location =
-    // TODO: asfix-anno-location?
-    // TODO: asfix-anno-location should be a (fatal?) error by default
-    AsfixAnnoLocationWarned
-  <+
-    rules(AsfixAnnoLocationWarned: _);
-    warn-msg(|"Asfix location annotation not implemented for this platform")
+    prim("STRSGLR_anno_location", <id>)
 
   override asfix-anno-position-info(|name) =
-    with(
-      <warn(|"Asfix position annotation not supported for this platform; try asfix-anno-location instead")> name
-    )
+    <fatal-err(|"Old-style asfix position annotation not supported on this platform; use asfix-anno-location instead")> name
 

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str	2009-11-18 12:02:04 UTC (rev 20266)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str	2009-11-18 15:08:48 UTC (rev 20267)
@@ -17,6 +17,9 @@
       ?tbl
     ; prim("JSGLR_open_parsetable_compat", tbl) => int
     ; !ParseTable(int)
+  
+  jsglr-close-parsetable =
+    id // no such thing
     
   /* UNDONE: JSGLR_parse_string_compat not implemented
    * TODO: Optimize - implement JSGLR_parse_string without TermConverter usage

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java	2009-11-18 12:02:04 UTC (rev 20266)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java	2009-11-18 15:08:48 UTC (rev 20267)
@@ -28,6 +28,7 @@
 		add(new JSGLR_open_parsetable_compat(wrappedFactory));
 		add(new STRSGLR_get_parse_error(wrappedFactory));
 		add(new STRSGLR_clear_parse_error());
+		add(new STRSGLR_anno_location());
 	}
 
 	private void initFilterSettings() {

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/STRSGLR_anno_location.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/STRSGLR_anno_location.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/STRSGLR_anno_location.java	2009-11-18 15:08:48 UTC (rev 20267)
@@ -0,0 +1,197 @@
+package org.strategoxt.lang.compat.sglr;
+
+import static org.spoofax.interpreter.core.Tools.*;
+import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+
+import java.util.LinkedList;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+/**
+ * Asfix location annotation.
+ */
+public class STRSGLR_anno_location extends AbstractPrimitive {
+
+	private static final String NAME = "STRSGLR_anno_location";
+
+	private static final int FIRST_LINE = 1;
+
+	private static final int FIRST_COLUMN = 1;
+
+	protected STRSGLR_anno_location() {
+		super(NAME, 0, 1);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+
+		if (tvars[0].getTermType() != APPL
+				|| !"parsetree".equals(((IStrategoAppl) tvars[0]).getConstructor().getName())
+				|| tvars[0].getSubtermCount() != 2)
+			return false;
+
+		env.setCurrent(annoLocation(env.getFactory(), (IStrategoAppl) tvars[0]));
+		return true;
+	}
+
+	public IStrategoTerm annoLocation(ITermFactory factory, IStrategoAppl parseTree) {
+		IStrategoTerm top = termAt(parseTree, 0);
+		IStrategoTerm metadata = termAt(parseTree, 1);
+		top = new AsfixAnnoLocation(factory).traverse(top);
+		return factory.makeAppl(factory.makeConstructor("parsetree", 2), top, metadata);
+	}
+
+	/**
+	 * Stateful asfix annotation traversal class.
+	 */
+	private class AsfixAnnoLocation {
+
+		private int line = FIRST_LINE;
+
+		private int column = FIRST_COLUMN;
+
+		private final ITermFactory factory;
+
+		private final IStrategoTerm layout;
+
+		private final IStrategoConstructor appl;
+
+		private final IStrategoConstructor amb;
+
+		private final IStrategoConstructor location;
+
+		public AsfixAnnoLocation(ITermFactory factory) {
+			this.factory = factory;
+			layout = factory.makeAppl(factory.makeConstructor("cf", 1), factory
+					.makeAppl(factory.makeConstructor("opt", 1), factory
+							.makeAppl(factory.makeConstructor("layout", 0))));
+			appl = factory.makeConstructor("appl", 2);
+			amb = factory.makeConstructor("amb", 1);
+			location = factory.makeConstructor("Location", 4);
+		}
+
+		private boolean isTreeChar(IStrategoTerm t) {
+			return t.getTermType() == INT;
+		}
+
+		private boolean isTreeAppl(IStrategoTerm t) {
+			return t.getTermType() == APPL
+					&& ((IStrategoAppl) t).getConstructor() == appl;
+		}
+
+		private boolean isTreeLayout(IStrategoTerm t) {
+			return t.getTermType() == APPL
+					&& termAt(termAt(t, 0), 1).equals(layout);
+		}
+
+		private IStrategoAppl makeTreeAppl(IStrategoTerm prod,
+				IStrategoList args) {
+			return factory.makeAppl(appl, prod, args);
+		}
+
+		private boolean isTreeAmb(IStrategoTerm t) {
+			return t.getTermType() == APPL
+					&& ((IStrategoAppl) t).getConstructor() == amb;
+		}
+
+		private IStrategoTerm makeTreeAmb(IStrategoTerm[] ts) {
+			return factory.makeAppl(amb, ts);
+		}
+
+		private int getTreeChar(IStrategoTerm tree) {
+			return asJavaInt(tree);
+		}
+
+		private IStrategoTerm setLocation(IStrategoTerm t, int firstLine,
+				int firstColumn, int lastLine, int lastColumn) {
+
+			IStrategoList annos = t.getAnnotations();
+			assert annos != null;
+			IStrategoTerm anno = factory.makeAppl(location, factory
+					.makeInt(firstLine), factory.makeInt(firstColumn), factory
+					.makeInt(lastLine), factory.makeInt(lastColumn));
+			annos = factory.makeListCons(anno, annos);
+
+			return factory.annotateTerm(t, annos);
+		}
+
+		private void scan(IStrategoTerm t) {
+			if (isTreeChar(t)) {
+				if (getTreeChar(t) == '\n') {
+					column = FIRST_COLUMN;
+					line++;
+				} else {
+					column++;
+				}
+			} else if (isTreeAppl(t)) {
+				IStrategoList args = termAt(t, 1);
+				while (!args.isEmpty()) {
+					scan(args.head());
+					args = args.tail();
+				}
+			} else if (isTreeAmb(t)) {
+				scan(termAt(termAt(t, 0), 0));
+			} else {
+				System.err.println(NAME + ": unhandled tree - " + t);
+			}
+		}
+
+		private IStrategoList traverseArgs(IStrategoList args) {
+			if (args.isEmpty()) {
+				return args;
+			} else {
+				IStrategoTerm arg = traverse(args.head());
+				return factory.makeListCons(arg, traverseArgs(args.tail()));
+			}
+		}
+
+		public IStrategoTerm traverse(IStrategoTerm t) {
+			int firstLine = line;
+			int firstColumn = column;
+
+			if (isTreeChar(t)) {
+				if (getTreeChar(t) == '\n') {
+					column = FIRST_COLUMN;
+					line++;
+				} else {
+					column++;
+				}
+				return t;
+			} else if (isTreeLayout(t)) {
+				scan(t);
+				return t;
+			} else if (isTreeAppl(t)) {
+				IStrategoList args = traverseArgs((IStrategoList) termAt(t, 1));
+				t = makeTreeAppl(termAt(t, 0), args);
+			} else if (isTreeAmb(t)) {
+				IStrategoList args = (IStrategoList) termAt(t, 0);
+				LinkedList<IStrategoTerm> newArgs = new LinkedList<IStrategoTerm>();
+				int line = this.line;
+				int column = this.column;
+
+				while (!args.isEmpty()) {
+					this.line = line;
+					this.column = column;
+					newArgs.addFirst(traverse(args.head()));
+					args = args.tail();
+				}
+
+				t = makeTreeAmb(((IStrategoTerm[]) newArgs.toArray()));
+			} else {
+				System.err.println(NAME + ": unhandled tree - " + t);
+			}
+
+			return setLocation(t, firstLine, firstColumn, line, column);
+		}
+	}
+
+}

Modified: strc-java/trunk/test/Makefile.am
===================================================================
--- strc-java/trunk/test/Makefile.am	2009-11-18 12:02:04 UTC (rev 20266)
+++ strc-java/trunk/test/Makefile.am	2009-11-18 15:08:48 UTC (rev 20267)
@@ -130,7 +130,7 @@
 
 %.crun : %.str
 	strc -la strc -la stratego-lib -i $<
-	`dirname $<`/`basename $< .str`
+	(cd `dirname $<`; ./`basename $< .str`)
 
 strc1/cs_test01.ctree : strc1/ExpStratego.tbl strc1/Expressions.def strc1/Expressions.str
 strc1/cs_test02.ctree : strc1/ExpStratego.tbl

Copied: strc-java/trunk/test/sglr/asfix_anno_location_tests.str (from rev 20263, strc-java/trunk/test/sglr/stratego-sglr-tests.str)
===================================================================
--- strc-java/trunk/test/sglr/asfix_anno_location_tests.str	                        (rev 0)
+++ strc-java/trunk/test/sglr/asfix_anno_location_tests.str	2009-11-18 15:08:48 UTC (rev 20267)
@@ -0,0 +1,190 @@
+/**
+ * Based on: Tests for the Stratego SGLR Library.
+ *
+ * @author  Martin Bravenboer <martin.bravenboer at gmail.com>
+ */
+module asfix-anno-location-tests
+imports
+  libstratego-lib
+  libstratego-xtc
+  libstratego-sglr
+  ExpInt
+
+strategies
+
+  main =
+    test-suite(!"asfix-anno-location",
+      asfix-anno-location-tests
+    )
+
+  asfix-anno-location-tests =
+      where(
+        <ReadFromFile> "ExpInt.tbl"; open-parse-table => tbl
+      )
+
+    ; asfix-anno-location-test(|"Location of a simple expression", tbl
+      , "1 + 2"
+      , Plus(
+          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
+        , Int("2"{Location(1,5,1,6)}){Location(1,5,1,6)}
+        ){Location(1,1,1,6)}
+      )
+
+    ; asfix-anno-location-test(|"Location with newline 1", tbl
+      , "1 \n + 2"
+      , Plus(
+          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
+        , Int("2"{Location(2,4,2,5)}){Location(2,4,2,5)}
+        ){Location(1,1,2,5)}
+      )
+
+    ; asfix-anno-location-test(|"Location with newline 2", tbl
+      , "1 \n\n + 2"
+      , Plus(
+          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
+        , Int("2"{Location(3,4,3,5)}){Location(3,4,3,5)}
+        ){Location(1,1,3,5)}
+      )
+
+    ; asfix-anno-location-test(|"Location with newline 3", tbl
+      , "1 \n\n + \n\n 2"
+      , Plus(
+          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
+        , Int("2"{Location(5,2,5,3)}){Location(5,2,5,3)}
+        ){Location(1,1,5,3)}
+      )
+
+    ; asfix-anno-location-test(|"Location with newline 4", tbl
+      , "1\n+\n2"
+      , Plus(
+          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
+        , Int("2"{Location(3,1,3,2)}){Location(3,1,3,2)}
+        ){Location(1,1,3,2)}
+      )
+
+    ; asfix-anno-location-test(|"Location with newline 5", tbl
+      , "1\n\n+\n\n2"
+      , Plus(
+          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
+        , Int("2"{Location(5,1,5,2)}){Location(5,1,5,2)}
+        ){Location(1,1,5,2)}
+      )
+
+    ; asfix-anno-location-test(|"Location with \\r newline 1", tbl
+      , "1 \r\n + 2"
+      , Plus(
+          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
+        , Int("2"{Location(2,4,2,5)}){Location(2,4,2,5)}
+        ){Location(1,1,2,5)}
+      )
+
+    ; asfix-anno-location-test(|"Location of a simple expression", tbl
+      , "1 + 234"
+      , Plus(
+          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
+        , Int("234"{Location(1,5,1,8)}){Location(1,5,1,8)}
+        ){Location(1,1,1,8)}
+      )
+
+    ; asfix-anno-location-test(|"Location of a simple expression with some whitespace", tbl
+      , "   1 + 234  "
+      , Plus(
+          Int("1"{Location(1,4,1,5)}){Location(1,4,1,5)}
+        , Int("234"{Location(1,8,1,11)}){Location(1,8,1,11)}
+        ){Location(1,4,1,11)}
+      )
+
+    ; asfix-anno-location-test(|"Location of simple expression with some whitespace", tbl
+      , "   1   +   234  "
+      , Plus(
+          Int("1"{Location(1,4,1,5)}){Location(1,4,1,5)}
+        , Int("234"{Location(1,12,1,15)}){Location(1,12,1,15)}
+        ){Location(1,4,1,15)}
+      )
+
+    ; where(
+        <close-parse-table> tbl
+      )
+
+    ; where(
+        <ReadFromFile> "ExpIntAmb.tbl"; open-parse-table => ambtbl
+      )
+
+    ; apply-and-check(!"Location for a simple ambiguous expression"
+      , asfix-anno-location-test-strategy(|ambtbl)
+      , !"1 + 2 + 3"
+      , ?amb(<id>)
+        ; fetch(
+            ?Plus(
+              Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
+            , Plus(
+                Int("2"{Location(1,5,1,6)}){Location(1,5,1,6)}
+              , Int("3"{Location(1,9,1,10)}){Location(1,9,1,10)}
+              ){Location(1,5,1,10)}
+            ){Location(1,1,1,10)}
+          )
+        ; fetch(
+            ?Plus(
+              Plus(
+                Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
+              , Int("2"{Location(1,5,1,6)}){Location(1,5,1,6)}
+              ){Location(1,1,1,6)}
+            , Int("3"{Location(1,9,1,10)}){Location(1,9,1,10)}
+            ){Location(1,1,1,10)}
+         )
+      )
+
+    ; where(
+        <close-parse-table> ambtbl
+      )
+
+  asfix-anno-location-test(|msg, tbl, string, term) =
+      apply-test(!msg
+      , asfix-anno-location-test-strategy(|tbl)
+      , !string
+      , !term
+      )
+
+  asfix-anno-location-test-strategy(|tbl) =
+    parse-string-pt(|tbl)
+    ; asfix-anno-location
+    ; implode-asfix
+
+signature
+  constructors
+    WithAnno   : A * B -> C
+    ToTerm     : A -> B
+    ToMetaExpr :  A -> B
+    FromTerm   : A -> B
+    FromApp    : A -> B
+    Empty      : A
+    appl       : A * B -> C
+
+    Iter : A -> B
+    Iter-sep : A -> B
+    Iter-star : A -> B
+    Iter-star-sep : A -> B
+    Nesting-iter-sep1 : A -> B
+    Nesting-iter-sep2 : A -> B
+    Nesting-iter-star-sep : A -> B
+    Empty-iter-star-sep : A -> B
+    
+    IterN : A -> B
+    IterSepN : A -> B
+
+    Alt1a : A -> B
+    Alt2a : A * B -> C
+    Alt4a : A -> B
+    Var1  : A -> B
+
+    Call : Id * List(Exp) -> B
+    Plus : A -> B    
+    Minus : A -> B
+    Id : A -> B
+    True : A
+    
+    Foo : A -> A
+    Foo : A * A -> A
+    Foo : A * A * A -> A
+
+    pos-info : AnnoKey


Property changes on: strc-java/trunk/test/sglr/asfix_anno_location_tests.str
___________________________________________________________________
Added: svn:mergeinfo
   + /strategoxt/branches/strategoxt-with/stratego-libraries/sglr/tests/stratego-sglr-tests.str:18038-18120
/strc-java/branches/one-file-per-strategy/test/sglr/stratego-sglr-tests.str:19806



From m.dejonge at tudelft.nl  Wed Nov 18 17:49:39 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 18 Nov 2009 16:49:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20268 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: .
	Grammars OutputRegionSkip TestInput/Common src/evaluating src/tests
Message-ID: <200911181649.nAIGndlS016403@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-18 16:49:39 +0000 (Wed, 18 Nov 2009)
New Revision: 20268

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20268&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Java-15.tbl
   sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/
   sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java.pt
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java

Log:
- Collect expected erroneous region by @START and @END comments 
- Collect skipped regions by comparing the generated outputstring (parse => asfix-yield) with the input
- TODO: call asfix-yield in java code    

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath	2009-11-18 15:08:48 UTC (rev 20267)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath	2009-11-18 16:49:39 UTC (rev 20268)
@@ -3,5 +3,7 @@
 	<classpathentry excluding="evaluationData/" kind="src" path="src"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="src" path="/org.spoofax.jsglr [spoofax-recovery branch]"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.aterm"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Java-15.tbl
===================================================================
(Binary files differ)


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Java-15.tbl
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java	2009-11-18 16:49:39 UTC (rev 20268)
@@ -0,0 +1,30 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+
+class X {
+
+	private int correctMethod1() {
+		corr2();
+		return corrInt;
+	}
+
+	private int erroneousMethod() {
+		        
+		                  
+			      
+			                
+		         
+	}
+
+	private int correctMethod2() {
+		int corrLine1;
+		if (true) {
+			corrLine2();
+		}
+		corrLine3();
+		corrLine4();
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java.pt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java.pt	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java.pt	2009-11-18 16:49:39 UTC (rev 20268)
@@ -0,0 +1 @@
+parsetree(appl(prod([cf(opt(layout)),cf(sort("CompilationUnit")),cf(opt(layout))],sort("<START>"),no-attrs),[appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(opt(sort("PackageDec"))),cf(opt(layout)),cf(iter-star(sort("ImportDec"))),cf(opt(layout)),cf(iter(sort("TypeDec")))],cf(sort("CompilationUnit")),attrs([term(cons("CompilationUnit"))])),[appl(prod([cf(sort("PackageDec"))],cf(opt(sort("PackageDec"))),no-attrs),[appl(prod([cf(iter-star(sort("Anno"))),cf(opt(layout)),lit("package"),cf(opt(layout)),cf(sort("PackageName")),cf(opt(layout)),lit(";")],cf(sort("PackageDec")),attrs([term(cons("PackageDec"))])),[appl(prod([],cf(iter-star(sort("Anno"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([112]),char-class([97]),char-class([99]),char-class([107]),char-class([97]),char-class([103]),char-class([101])],lit("package"),no-attrs),[112,97,99,107,97,103,101]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layo!
 ut),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(iter-sep(sort("Id"),lit(".")))],cf(sort("PackageName")),attrs([term(cons("PackageName"))])),[appl(prod([cf(sort("Id"))],cf(iter-sep(sort("Id"),lit("."))),no-attrs),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[116,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[!
 appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,rang
7,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[115])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32]!
 )],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])])]),appl(prod([cf(iter(sort("ImportDec")))],cf(iter-star(sort("ImportDec"))),no-attrs),[appl(prod([cf(iter(sort("ImportDec"))),cf(opt(layout)),cf(iter(sort("ImportDec")))],cf(iter(sort("ImportDec"))),attrs([assoc(left)])),[appl(prod([cf(iter(sort("ImportDec"))),cf(opt(layout)),cf(iter(sort("ImportDec")))],cf(iter(sort("ImportDec"))),attrs([assoc(left)])),[appl(prod([cf(sort("ImportDec"))],cf(iter(sort("ImportDec"))),no-attrs),[appl(prod([lit("import"),cf(opt(layout)),cf(sort("TypeName")),cf(opt(layout)),lit(";")],cf(sort("ImportDec")),attrs([term(cons("TypeImportDec"))])),[appl(prod([char-class([105]),char-class([109]),char-class([112]),char-class([111]),char-class([114]),char-class([116])],lit("import"),no-attrs),[105,109,112,111,114,116]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],!
 cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13
2])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("PackageOrTypeName")),cf(opt(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("TypeName")),attrs([term(cons("TypeName"))])),[appl(prod([cf(sort("PackageOrTypeName")),cf(opt(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[106,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,rang!
 e(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[97]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[118])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[97])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46!
 ])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),
,appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[105,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(4!
 8,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[73,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[app!
 l(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(9
22)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(9!
 7,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[79]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[69])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[120])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(!
 char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-att
,[99])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[112])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])])])])])])]!
 ),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([cf(sort("ImportDec"))],cf(iter(sort("ImportDec"))),no-attrs),[appl(prod([lit("import"),cf(opt(layout)),cf(sort("TypeName")),cf(opt(layout)),lit(";")],cf(sort("ImportDec")),attrs([term(cons("TypeImportDec"))])),[appl(prod([char-class([105]),char-class([109]),char-class([112]),char-class([111]),char-class([114]),char-class([116])],lit("import"),no-attrs),[105,109,112,111,114,116]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("PackageOrTypeName")),cf(opt(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("TypeName")),attrs([te!
 rm(cons("TypeName"))])),[appl(prod([cf(sort("PackageOrTypeName")),cf
t(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[106,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65!
 ,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[117]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,!
 122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(9
22)]))),no-attrs),[116])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[102,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([3!
 6,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-clas!
 s([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-
ss([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[97])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[109])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-cla!
 ss([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[119])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[107])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([3!
 6,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no
trs),[65,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,ra!
 nge(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[115]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[115])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]!
 )])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([ch
class([59])],lit(";"),no-attrs),[59])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([cf(sort("ImportDec"))],cf(iter(sort("ImportDec"))),no-attrs),[appl(prod([lit("import"),cf(opt(layout)),cf(sort("TypeName")),cf(opt(layout)),lit(";")],cf(sort("ImportDec")),attrs([term(cons("TypeImportDec"))])),[appl(prod([char-class([105]),char-class([109]),char-class([112]),char-class([111]),char-class([114]),char-class([116])],lit("import"),no-attrs),[105,109,112,111,114,116]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("PackageOrTypeName")),cf(opt(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("TypeName")),attrs([term(cons("TypeName"))])),[appl(prod([cf(sort("PackageOrTypeNa!
 me")),cf(opt(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("PackageOrTypeName")),cf(opt(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[111,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),ra!
 nge(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57
ange(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[103])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[115,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[a!
 ppl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])!
 ),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,r
e(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[112]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[102])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[97])]),ap!
 pl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[120])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[106,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,12!
 2)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,ran
48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[115]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[103])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[108])]),appl(prod([char-class([36,range(48,57),range(65,90!
 ),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[83,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter!
 (char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(i
(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(i!
 ter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),l!
 ex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))
lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[71]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[76])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[82])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[69])]),appl(!
 prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[120])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[99])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[112])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class(!
 [36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-clas
36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])])]),appl(prod([cf(sort("TypeDec"))],cf(iter(sort("TypeDec"))),no-attrs),[appl(prod([cf(sort("ClassDec"))],cf(sort("TypeDec")),no-attrs),[appl(prod([cf(sort("ClassDecHead")),cf(opt(layout)),cf(sort("ClassBody"))],cf(sort("ClassDec")),attrs([term(cons("ClassDec"))]))!
 ,[appl(prod([cf(iter-star(alt(sort("Anno"),sort("ClassMod")))),cf(opt(layout)),lit("class"),cf(opt(layout)),cf(sort("Id")),cf(opt(layout)),cf(opt(sort("TypeParams"))),cf(opt(layout)),cf(opt(sort("Super"))),cf(opt(layout)),cf(opt(sort("Interfaces")))],cf(sort("ClassDecHead")),attrs([term(cons("ClassDecHead"))])),[appl(prod([],cf(iter-star(alt(sort("Anno"),sort("ClassMod")))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([99]),char-class([108]),char-class([97]),char-class([115]),char-class([115])],lit("class"),no-attrs),[99,108,97,115,115]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),rang!
 e(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[88,appl(pr
[],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([],cf(opt(sort("TypeParams"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(opt(sort("Super"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(opt(sort("Interfaces"))),no-attrs),[])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([lit("{"),cf(opt(layout)),cf(iter-star(sort("ClassBodyDec"))),cf(opt(layout)),lit("}")],cf(sort("ClassBody")),attrs([term(cons("ClassBody"))])),[appl(prod([char-class([123])],lit("{"),no-attrs),[123]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layou!
 t)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(iter(sort("ClassBodyDec")))],cf(iter-star(sort("ClassBodyDec"))),no-attrs),[appl(prod([cf(iter(sort("ClassBodyDec"))),cf(opt(layout)),cf(iter(sort("ClassBodyDec")))],cf(iter(sort("ClassBodyDec"))),attrs([assoc(left)])),[appl(prod([cf(iter(sort("ClassBodyDec"))),cf(opt(layout)),cf(iter(sort("ClassBodyDec")))],cf(iter(sort("ClassBodyDec"))),attrs([assoc(left)])),[appl(prod([cf(sort("ClassBodyDec"))],cf(iter(sort("ClassBodyDec"))),no-attrs),[appl(prod([cf(sort("ClassMemberDec"))],cf(sort("ClassBodyDec")),no-attrs),[appl(prod([cf(sort("MethodDec"))],cf(sort("ClassMemberDec")),no-attrs),[appl(prod!
 ([cf(sort("MethodDecHead")),cf(opt(layout)),cf(sort("MethodBody"))],
sort("MethodDec")),attrs([term(cons("MethodDec"))])),[appl(prod([cf(iter-star(alt(sort("Anno"),sort("MethodMod")))),cf(opt(layout)),cf(opt(sort("TypeParams"))),cf(opt(layout)),cf(sort("ResultType")),cf(opt(layout)),cf(sort("Id")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("FormalParam"),lit(","))),cf(opt(layout)),lit(")"),cf(opt(layout)),cf(opt(sort("Throws")))],cf(sort("MethodDecHead")),attrs([term(cons("MethodDecHead"))])),[appl(prod([cf(iter(alt(sort("Anno"),sort("MethodMod"))))],cf(iter-star(alt(sort("Anno"),sort("MethodMod")))),no-attrs),[appl(prod([cf(alt(sort("Anno"),sort("MethodMod")))],cf(iter(alt(sort("Anno"),sort("MethodMod")))),no-attrs),[appl(prod([cf(sort("MethodMod"))],cf(alt(sort("Anno"),sort("MethodMod"))),no-attrs),[appl(prod([cf(sort("Private"))],cf(sort("MethodMod")),no-attrs),[appl(prod([lit("private")],cf(sort("Private")),attrs([term(cons("Private"))])),[appl(prod([char-class([112]),char-class([114]),char-class([105]),char-class([118!
 ]),char-class([97]),char-class([116]),char-class([101])],lit("private"),no-attrs),[112,114,105,118,97,116,101])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([],cf(opt(sort("TypeParams"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("Type"))],cf(sort("ResultType")),no-attrs),[appl(prod([cf(sort("PrimType"))],cf(sort("Type")),no-attrs),[appl(prod([cf(sort("NumType"))],cf(sort("PrimType")),no-attrs),[appl(prod([cf(sort("IntType"))],cf(sort("NumType")),no-attrs),[appl(prod([lit("int")],cf(sort("IntType")),attrs([term(cons("Int"))])),[appl(prod([char-class([105]),char-class([110]),char-class([116])],lit("int"),no-attrs),[105,110,116])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],l!
 ex(layout),no-attrs),[32])])]),appl(prod([cf(sort("ID"))],cf(sort("I
),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,1!
 22)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(!
 97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,ran
97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,ran!
 ge(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-!
 attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),
range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[99])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[77])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[104])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],le!
 x(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[100])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[49])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("FormalParam"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([],cf(opt(sort("Throws"))),no-attrs),[])]),appl(prod([],cf(opt(la!
 yout)),no-attrs),[]),appl(prod([cf(sort("Block"))],cf(sort("MethodBo
)),no-attrs),[appl(prod([lit("{"),cf(opt(layout)),cf(iter-star(sort("BlockStm"))),cf(opt(layout)),lit("}")],cf(sort("Block")),attrs([term(cons("Block"))])),[appl(prod([char-class([123])],lit("{"),no-attrs),[123]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(iter(sort("BlockStm")))],cf(iter-star(sort("BlockStm"))),no-attrs),[appl(prod([cf(iter(sort("BlockStm"))),cf(opt(layout)),cf(iter(sort("BlockStm")))],cf(iter(sort("BlockStm"))),attrs!
 ([assoc(left)])),[appl(prod([cf(sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("Stm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([cf(sort("ExprStm"))],cf(sort("Stm")),no-attrs),[appl(prod([cf(sort("Expr")),cf(opt(layout)),lit(";")],cf(sort("ExprStm")),attrs([term(cons("ExprStm"))])),[appl(prod([cf(sort("MethodSpec")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("Expr"),lit(","))),cf(opt(layout)),lit(")")],cf(sort("Expr")),attrs([term(cons("Invoke"))])),[appl(prod([cf(sort("MethodName"))],cf(sort("MethodSpec")),attrs([term(cons("Method"))])),[appl(prod([cf(sort("Id"))],cf(sort("MethodName")),attrs([term(cons("MethodName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(it!
 er(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],le
ter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),app!
 l(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[50])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("Expr"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)!
 ],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)
f(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("Stm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([lit("return"),cf(opt(layout)),cf(opt(sort("Expr"))),cf(opt(layout)),lit(";")],cf(sort("Stm")),attrs([term(cons("Return"))])),[appl(prod([char-class([114]),char-class([101]),char-class([116]),char-class([117]),char-class([114]),char-class([110])],lit("return"),no-attrs),[114,101,116,117,114,110]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([rang!
 e(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("Expr"))],cf(opt(sort("Expr"))),no-attrs),[appl(prod([cf(sort("ExprName"))],cf(sort("Expr")),no-attrs),[appl(prod([cf(sort("Id"))],cf(sort("ExprName")),attrs([term(cons("ExprName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(it!
 er(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex
er(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char!
 -class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[73])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs)!
 ,[59])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[a
(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([char-class([125])],lit("}"),no-attrs),[125])])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf!
 (sort("ClassBodyDec"))],cf(iter(sort("ClassBodyDec"))),no-attrs),[appl(prod([cf(sort("ClassMemberDec"))],cf(sort("ClassBodyDec")),no-attrs),[appl(prod([cf(sort("MethodDec"))],cf(sort("ClassMemberDec")),no-attrs),[appl(prod([cf(sort("MethodDecHead")),cf(opt(layout)),cf(sort("MethodBody"))],cf(sort("MethodDec")),attrs([term(cons("MethodDec"))])),[appl(prod([cf(iter-star(alt(sort("Anno"),sort("MethodMod")))),cf(opt(layout)),cf(opt(sort("TypeParams"))),cf(opt(layout)),cf(sort("ResultType")),cf(opt(layout)),cf(sort("Id")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("FormalParam"),lit(","))),cf(opt(layout)),lit(")"),cf(opt(layout)),cf(opt(sort("Throws")))],cf(sort("MethodDecHead")),attrs([term(cons("MethodDecHead"))])),[appl(prod([cf(iter(alt(sort("Anno"),sort("MethodMod"))))],cf(iter-star(alt(sort("Anno"),sort("MethodMod")))),no-attrs),[appl(prod([cf(alt(sort("Anno"),sort("MethodMod")))],cf(iter(alt(sort("Anno"),sort("MethodMod")))),no-attrs),[appl(prod([cf(so!
 rt("MethodMod"))],cf(alt(sort("Anno"),sort("MethodMod"))),no-attrs),
pl(prod([cf(sort("Private"))],cf(sort("MethodMod")),no-attrs),[appl(prod([lit("private")],cf(sort("Private")),attrs([term(cons("Private"))])),[appl(prod([char-class([112]),char-class([114]),char-class([105]),char-class([118]),char-class([97]),char-class([116]),char-class([101])],lit("private"),no-attrs),[112,114,105,118,97,116,101])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([],cf(opt(sort("TypeParams"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("Type"))],cf(sort("ResultType")),no-attrs),[appl(prod([cf(sort("PrimType"))],cf(sort("Type")),no-attrs),[appl(prod([cf(sort("NumType"))],cf(sort("PrimType")),no-attrs),[appl(prod([cf(sort("IntType"))],cf(sort("NumType")),no-attrs),[appl(prod([lit("int")],cf(sort("IntType")),attrs([term(cons("Int"))])),[appl(prod([char-class([105]),char-class([!
 110]),char-class([116])],lit("int"),no-attrs),[105,110,116])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[101,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-cl!
 ass([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char
ass([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char!
 -class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(!
 char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(i
(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])!
 ,appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[117])]),appl(prod([char!
 -class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(ch
class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[115])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[77])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[104])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48!
 ,57),range(65,90),95,range(97,122)]))),no-attrs),[100])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("FormalParam"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([],cf(opt(sort("Throws"))),no-attrs),[])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("Block"))],cf(sort("MethodBody")),no-attrs),[appl(prod([lit("{"),cf(opt(layout)),cf(iter-star(sort("BlockStm"))),cf(opt(layout)),lit("}")],cf(sort("Block")),attrs([term(cons("Block"))])),[appl(prod([char-class([123])],lit("{"),no-attrs),[123]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layou!
 t),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layou
cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(l!
 eft)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(la!
 yout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(la
t)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),!
 [appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],c!
 f(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],c
ayout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(!
 9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([!
 lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10
ange(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(la!
 yout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),!
 range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(la
t)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),rang!
 e(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layou!
 t)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(1
3),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(!
 layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,1!
 3),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(
out),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),3!
 2])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(la!
 yout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32]
lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([],cf(iter-star(sort("BlockStm"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([125])],lit("}"),no-attrs),[125])])])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(p!
 rod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(sort("ClassBodyDec"))],cf(iter(sort("ClassBodyDec"))),no-attrs),[appl(prod([cf(sort("ClassMemberDec"))],cf(sort("ClassBodyDec")),no-attrs),[appl(prod([cf(sort("MethodDec"))],cf(sort("ClassMemberDec")),no-attrs),[appl(prod([cf(sort("MethodDecHead")),cf(opt(layout)),cf(sort("MethodBody"))],cf(sort("MethodDec")),attrs([term(cons("MethodDec"))])),[appl(prod([cf(iter-star(alt(sort("Anno"),sort("MethodMod")))),cf(opt(layout)),cf(opt(sort("TypeParams"))),cf(opt(layout)),cf(sort("ResultType")),cf(opt(layout)),cf(sort("I!
 d")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort(
rmalParam"),lit(","))),cf(opt(layout)),lit(")"),cf(opt(layout)),cf(opt(sort("Throws")))],cf(sort("MethodDecHead")),attrs([term(cons("MethodDecHead"))])),[appl(prod([cf(iter(alt(sort("Anno"),sort("MethodMod"))))],cf(iter-star(alt(sort("Anno"),sort("MethodMod")))),no-attrs),[appl(prod([cf(alt(sort("Anno"),sort("MethodMod")))],cf(iter(alt(sort("Anno"),sort("MethodMod")))),no-attrs),[appl(prod([cf(sort("MethodMod"))],cf(alt(sort("Anno"),sort("MethodMod"))),no-attrs),[appl(prod([cf(sort("Private"))],cf(sort("MethodMod")),no-attrs),[appl(prod([lit("private")],cf(sort("Private")),attrs([term(cons("Private"))])),[appl(prod([char-class([112]),char-class([114]),char-class([105]),char-class([118]),char-class([97]),char-class([116]),char-class([101])],lit("private"),no-attrs),[112,114,105,118,97,116,101])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[3!
 2])])]),appl(prod([],cf(opt(sort("TypeParams"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("Type"))],cf(sort("ResultType")),no-attrs),[appl(prod([cf(sort("PrimType"))],cf(sort("Type")),no-attrs),[appl(prod([cf(sort("NumType"))],cf(sort("PrimType")),no-attrs),[appl(prod([cf(sort("IntType"))],cf(sort("NumType")),no-attrs),[appl(prod([lit("int")],cf(sort("IntType")),attrs([term(cons("Int"))])),[appl(prod([char-class([105]),char-class([110]),char-class([116])],lit("int"),no-attrs),[105,110,116])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(so!
 rt("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,
,range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),ran!
 ge(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57)!
 ,range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48
),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48!
 ,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[99])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,9!
 0),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36
nge(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[77])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[104])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[100])]),appl(prod([char-class([36,range(48,57),range(6!
 5,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[50])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("FormalParam"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([],cf(opt(sort("Throws"))),no-attrs),[])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("Block"))],cf(sort("MethodBody")),no-attrs),[appl(prod([lit("{"),cf(opt(layout)),cf(iter-star(sort("BlockStm"))),cf(opt(layout)),lit("}")],cf(sort("Block")),attrs([term(cons("Block"))])),[appl(prod([char-class([123])],lit("{"),no-attrs),[123]),appl(prod([c!
 f(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layou
,cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(iter(sort("BlockStm")))],cf(iter-star(sort("BlockStm"))),no-attrs),[appl(prod([cf(iter(sort("BlockStm"))),cf(opt(layout)),cf(iter(sort("BlockStm")))],cf(iter(sort("BlockStm"))),attrs([assoc(left)])),[appl(prod([cf(iter(sort("BlockStm"))),cf(opt(layout)),cf(iter(sort("BlockStm")))],cf(iter(sort("BlockStm"))),attrs([assoc(left)])),[appl(prod([cf(iter(sort("BlockStm"))),cf(opt(layout)),cf(iter(sort("BlockStm")))],cf(iter(sort("BlockStm"))),attrs([assoc(left)])),[appl(prod([cf(!
 sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("LocalVarDecStm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([cf(sort("LocalVarDec")),cf(opt(layout)),lit(";")],cf(sort("LocalVarDecStm")),attrs([term(cons("LocalVarDecStm"))])),[appl(prod([cf(iter-star(alt(sort("Anno"),sort("VarMod")))),cf(opt(layout)),cf(sort("Type")),cf(opt(layout)),cf(iter-sep(sort("VarDec"),lit(",")))],cf(sort("LocalVarDec")),attrs([term(cons("LocalVarDec"))])),[appl(prod([],cf(iter-star(alt(sort("Anno"),sort("VarMod")))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("PrimType"))],cf(sort("Type")),no-attrs),[appl(prod([cf(sort("NumType"))],cf(sort("PrimType")),no-attrs),[appl(prod([cf(sort("IntType"))],cf(sort("NumType")),no-attrs),[appl(prod([lit("int")],cf(sort("IntType")),attrs([term(cons("Int"))])),[appl(prod([char-class([105]),char-class([110]),char-class([116])],lit("int"),no-attrs),[105,110,116])])])])]),appl(prod([cf(layout)],cf(opt(layout!
 )),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(pro
char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("VarDec"))],cf(iter-sep(sort("VarDec"),lit(","))),no-attrs),[appl(prod([cf(sort("VarDecId"))],cf(sort("VarDec")),attrs([term(cons("VarDec"))])),[appl(prod([cf(sort("Id"))],cf(sort("VarDecId")),no-attrs),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([!
 assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),att!
 rs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),
ge(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range!
 (97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[76])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[49])])])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[app!
 l(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[app
rod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("Stm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([lit("if"),cf(opt(layout)),lit("("),cf(opt(layout)),cf(sort("Expr")),cf(opt(layout)),lit(")"),cf(opt(layout)),cf(sort("Stm"))],cf(sort("Stm")),attrs([prefer,term(cons("If"))])),[appl(prod([char-class([105]),char-class([102])],lit("if"),no-attrs),[105,102]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([char-class!
 ([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("Literal"))],cf(sort("Expr")),attrs([term(cons("Lit"))])),[appl(prod([cf(sort("BoolLiteral"))],cf(sort("Literal")),no-attrs),[appl(prod([cf(sort("Bool"))],cf(sort("BoolLiteral")),attrs([term(cons("Bool"))])),[appl(prod([lit("true")],cf(sort("Bool")),attrs([term(cons("True"))])),[appl(prod([char-class([116]),char-class([114]),char-class([117]),char-class([101])],lit("true"),no-attrs),[116,114,117,101])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("Block"))],cf(sort("Stm")),no-attrs),[appl(prod([lit("{"),cf(opt(layout)),cf(iter-star(sort("BlockStm"))),cf(opt(layout)),lit("}")],cf(sort("Block")),attrs([term(cons("Block"))])),[a!
 ppl(prod([char-class([123])],lit("{"),no-attrs),[123]),appl(prod([cf
yout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(iter(sort("BlockStm")))],cf(iter-star(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("Stm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([cf!
 (sort("ExprStm"))],cf(sort("Stm")),no-attrs),[appl(prod([cf(sort("Expr")),cf(opt(layout)),lit(";")],cf(sort("ExprStm")),attrs([term(cons("ExprStm"))])),[appl(prod([cf(sort("MethodSpec")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("Expr"),lit(","))),cf(opt(layout)),lit(")")],cf(sort("Expr")),attrs([term(cons("Invoke"))])),[appl(prod([cf(sort("MethodName"))],cf(sort("MethodSpec")),attrs([term(cons("Method"))])),[appl(prod([cf(sort("Id"))],cf(sort("MethodName")),attrs([term(cons("MethodName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod!
 ([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)
),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)!
 ]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])])!
 ,appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122
],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[76])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[50])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("!
 ("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("Expr"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([char-class([125])],lit("}"),no-attrs),[125])])])])])])]),app!
 l(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout)
(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("Stm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([cf(sort("ExprStm"))],cf(sort("Stm")),no-attrs),[appl(prod([cf(sort("Expr")),cf(opt(layout)),lit(";")],cf(sort("ExprStm")),attrs([term(cons("ExprStm"))])),[appl(prod([cf(sort("MethodSpec")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("Expr"),lit(","))),cf(opt(layout)),lit(")")],cf(sort("Expr")),attrs([term(cons("Invoke"))!
 ])),[appl(prod([cf(sort("MethodName"))],cf(sort("MethodSpec")),attrs([term(cons("Method"))])),[appl(prod([cf(sort("Id"))],cf(sort("MethodName")),attrs([term(cons("MethodName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-clas!
 s([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-
ss([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-!
 class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[76])]),appl(prod([char!
 -class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(ch
class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[51])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("Expr"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])])])])]),ap!
 pl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("Stm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([cf(sort("ExprStm"))],cf(sort("Stm")),no-attrs),[appl(prod([cf(sort("Expr")),cf(opt(layout)),lit(";")],cf(sort("ExprStm")),attrs([term(cons("ExprStm"))])),[appl(prod([cf(sort("MethodSpec")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("Expr"),lit(",")!
 )),cf(opt(layout)),lit(")")],cf(sort("Expr")),attrs([term(cons("Invo
))])),[appl(prod([cf(sort("MethodName"))],cf(sort("MethodSpec")),attrs([term(cons("Method"))])),[appl(prod([cf(sort("Id"))],cf(sort("MethodName")),attrs([term(cons("MethodName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-cla!
 ss([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char!
 -class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(
r-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[76])]),appl(prod([cha!
 r-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[52])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("Expr"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41])]),appl(prod([],cf(opt(layout)),no-attr!
 s),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])])])])
),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([char-class([125])],lit("}"),no-attrs),[125])])])])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([char-class([125])],lit("}"),no-attrs),[125])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])])]),0)
\ No newline at end of file

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test1.java	2009-11-18 15:08:48 UTC (rev 20267)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test1.java	2009-11-18 16:49:39 UTC (rev 20268)
@@ -15,7 +15,7 @@
 		corr2();
 		if(true){ //@START
 			foo();
-			bar(); //@END
+			bar();//} //@END
 		return 5;
 	}
 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-18 15:08:48 UTC (rev 20267)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-18 16:49:39 UTC (rev 20268)
@@ -1,9 +1,26 @@
 package evaluating;
 
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
 import java.util.ArrayList;
 
+import org.spoofax.jsglr.InvalidParseTableException;
+import org.spoofax.jsglr.NoRecoveryRulesException;
+import org.spoofax.jsglr.ParseTable;
+import org.spoofax.jsglr.ParseTableManager;
+import org.spoofax.jsglr.SGLR;
+import org.spoofax.jsglr.SGLRException;
+
+import aterm.ATerm;
+
 public class ErroneousRegion {
 
+	private static final String PARSETREE_EXTENSION = ".pt";
+	private static final String OUTPUT_REGION_SKIP = "OutputRegionSkip/";
 	private int startLine;
 	public void setStartLine(int startLine) {
 		this.startLine = startLine;
@@ -28,15 +45,92 @@
 		endLine=-1;
 	}	
 	
-	/*//TODO collectSelectedRegions, fileInputStream as interface  
-	public static ArrayList<ErroneousRegion> collectSelectedRegions(String s) throws Exception {
+	//TODO collectSelectedRegions, fileInputStream as interface  
+	@SuppressWarnings("deprecation")
+	public static ArrayList<ErroneousRegion> collectSkippedRegions(String testFile, String parseTable) throws Exception {
+		String recoveredFile = writeRecoveredFile(testFile, parseTable);		
+		return findSkippedRegions(readFromFile(testFile), readFromFile(recoveredFile));
+	}
+
+	private static String writeRecoveredFile(String testFile, String parseTable)
+			throws FileNotFoundException, IOException,
+			InvalidParseTableException, NoRecoveryRulesException, SGLRException {
+		String fileName=testFile.substring(testFile.lastIndexOf('/')+1);
+		String recoveredFile=OUTPUT_REGION_SKIP+fileName;
+		String parseTreeFile = OUTPUT_REGION_SKIP+fileName+PARSETREE_EXTENSION;
+		writeParseTree(testFile, parseTable, parseTreeFile);
+		//yield-asfix		
+		yieldAsfix(parseTreeFile, recoveredFile);
+		return recoveredFile;
+	}
+
+	public static ArrayList<ErroneousRegion> findSkippedRegions(String originalString, String recoveredString) throws Exception{
 		ArrayList<ErroneousRegion> result = new ArrayList<ErroneousRegion>();
+		String[] recoveredLines=recoveredString.split("\n");
+		String[] originalLines=originalString.split("\n");
+		if(recoveredString.toCharArray().length!=originalString.length()){
+			throw(new Exception("Not the same number of characters"));
+		}
+		if(recoveredLines.length!=originalLines.length){
+			throw(new Exception("Not the same number of lines"));
+		}
+		int startLine=-1;
+		int endLine=-1;
+	    for (int i = 0; i < recoveredLines.length; i++) {
+	    	String aRecoveredLine = recoveredLines[i];
+	    	String anOriginalLine = originalLines[i];
+	    	if(!anOriginalLine.trim().equals("")){
+		    	if(!aRecoveredLine.equals(anOriginalLine) && startLine==-1){
+		    		 startLine=i;
+	    		}	    	
+	    		if(aRecoveredLine.equals(anOriginalLine) && startLine!=-1){
+		    		 ErroneousRegion skippedRegion=new ErroneousRegion();
+		    		 skippedRegion.setStartLine(startLine);
+		    		 skippedRegion.setEndLine(endLine);
+		    		 result.add(skippedRegion);
+		    		 endLine=-1;
+		    		 startLine=-1;
+		    	}
+	    		else
+	    			endLine=i;
+	    	}
+	    	   	
+    	}
+	    if(startLine!=-1){
+	    	ErroneousRegion skippedRegion=new ErroneousRegion();
+   		 	skippedRegion.setStartLine(startLine);
+   		 	skippedRegion.setEndLine(endLine);
+   		 	result.add(skippedRegion);
+	    }
 		return result;
 	}
-	*/
 
+	private static void yieldAsfix(String inputFile, String outputFile) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	private static void writeParseTree(String testFile, String parseTable,
+			String parseTreeFile) throws FileNotFoundException, IOException,
+			InvalidParseTableException, NoRecoveryRulesException, SGLRException {
+		FileInputStream fis=new FileInputStream(testFile);		
+		ParseTableManager ptm = new ParseTableManager();
+		ParseTable pt = ptm.loadFromFile(parseTable);
+        SGLR sglr = new SGLR(ptm.getFactory(),pt); 
+        sglr.setUseStructureRecovery(true);
+        sglr.getDisambiguator().setFilterAny(false);   
+		ATerm tree = sglr.parse(fis);
+		OutputStream ous = new FileOutputStream(parseTreeFile);
+        if(tree != null)
+            ous.write(tree.toString().getBytes());
+	}
+	
+	public static ArrayList<ErroneousRegion> collectExpectedRegions(String filePath) throws Exception {
+		return collectExpectedRegionsFromString(readFromFile(filePath));
+	}
+	
 	//TODO refactor:fileInputStream as interface 
-	public static ArrayList<ErroneousRegion> collectExpectedRegions(String s) throws Exception {
+	public static ArrayList<ErroneousRegion> collectExpectedRegionsFromString(String s) throws Exception {
 		ArrayList<ErroneousRegion> result = new ArrayList<ErroneousRegion>();
 		String[] lines=s.split("\n");
 		int StartLine=-1;
@@ -62,4 +156,14 @@
 	    	throw(new Exception("Missing //@END in Region Definition"));
 	    return result;
 	}
+	
+	private static String readFromFile(String filePath) throws FileNotFoundException,
+	IOException {
+		byte[] buffer = new byte[(int) new File(filePath).length()];
+		FileInputStream f = new FileInputStream(filePath);
+		f.read(buffer);
+		String s= new String(buffer);
+		return s;
+	}
+	
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-18 15:08:48 UTC (rev 20267)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-18 16:49:39 UTC (rev 20268)
@@ -62,16 +62,6 @@
 		return statistics;
 	}
 
-	
-	private static String readFromFile(String filePath) throws FileNotFoundException,
-	IOException {
-		byte[] buffer = new byte[(int) new File(filePath).length()];
-		FileInputStream f = new FileInputStream(filePath);
-		f.read(buffer);
-		String s= new String(buffer);
-		return s;
-	}
-	
 	public void processFiles(String inputDirectory, String extension) throws Exception{	
 		File dir = new File(RoorDir + "/"+inputDirectory);
         if(!dir.exists())
@@ -81,8 +71,7 @@
         	String fileName=children[i];
         	String filePath=dir+"/"+fileName;
         	if (!new File(filePath).isDirectory() && (useAllExtensions || fileName.endsWith(extension))){
-				String s = readFromFile(filePath);
-				ArrayList<ErroneousRegion> expectedRegions=ErroneousRegion.collectExpectedRegions(s);
+				ArrayList<ErroneousRegion> expectedRegions=ErroneousRegion.collectExpectedRegions(filePath);
 				for (int j = 0; j < expectedRegions.size(); j++) {
 					ErroneousRegion expected = expectedRegions.get(j);
 					Testcase file = new Testcase(fileName);

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java	2009-11-18 15:08:48 UTC (rev 20267)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java	2009-11-18 16:49:39 UTC (rev 20268)
@@ -9,6 +9,8 @@
 import java.util.ArrayList;
 
 import org.junit.Test;
+import org.spoofax.jsglr.InvalidParseTableException;
+import org.spoofax.jsglr.SGLRException;
 
 import evaluating.*;
 
@@ -33,34 +35,35 @@
 	
 	@Test
 	public void testProcessFile() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegions(readFromFile("TestInput/Common/test1.java"));
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString(readFromFile("TestInput/Common/test1.java"));
+		assertEquals(1, regions.size());
 		assertEquals(15, regions.get(0).getStartLine());
 		assertEquals(17, regions.get(0).getEndLine());
 	}
 	
 	@Test(expected=Exception.class)
 	public void testDoubleStart() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegions("m @START \n m @START");
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString("m @START \n m @START");
 	}
 	
 	@Test(expected=Exception.class)
 	public void testMissingStart() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegions("m @START \n m @END \n m @END");
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString("m @START \n m @END \n m @END");
 	}
 	@Test
 	public void testNoRegions() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegions("m ");
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString("m ");
 		assertEquals(0, regions.size());
 	}
 	@Test
 	public void testSameLine() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegions("@START @END ");
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString("@START @END ");
 		assertEquals(1, regions.size());
 	}
 	
 	@Test(expected=Exception.class)
 	public void testMissingEnd() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegions("m @START \n m \n @ END \n @START");
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString("m @START \n m \n @END \n @START");
 	}
 	
 	private String readFromFile(String filePath) throws FileNotFoundException,
@@ -71,5 +74,106 @@
 		String s= new String(buffer);
 		return s;
 	}
+	
+	//@Test
+	public void testRegionSkip() throws Exception{
+		ErroneousRegion.collectSkippedRegions("TestInput/Common/test1.java", "Grammars/Java-15.tbl");
+	}	
+	
+	@Test
+	public void testcollectExpected() throws Exception{		
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString("ccc \n fff @START \n fff @END \n ccc ");
+		assertEquals(1, regions.get(0).getStartLine());
+		assertEquals(2, regions.get(0).getEndLine());
+	}
+	
+	@Test
+	public void testFindRegionSkip() throws Exception {
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc \n fff \n fff \n ccc", "ccc \n     \n     \n ccc");
+		assertEquals(1, regions.size());
+		assertEquals(1, regions.get(0).getStartLine());
+		assertEquals(2, regions.get(0).getEndLine());
+	}
+	
+	@Test
+	public void testFindRegionSkip_EmptyLine() throws Exception {
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc \n fff \n fff \n     \n ccc", "ccc \n     \n     \n     \n ccc");
+		assertEquals(1, regions.size());
+		assertEquals(1, regions.get(0).getStartLine());
+		assertEquals(2, regions.get(0).getEndLine());
+	}
+	
+	@Test
+	public void testFindRegionSkip_EmptyLine_Inside() throws Exception {
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc \n fff \n     \n fff \n ccc", "ccc \n     \n     \n     \n ccc");
+		assertEquals(1, regions.size());
+		assertEquals(1, regions.get(0).getStartLine());
+		assertEquals(3, regions.get(0).getEndLine());
+	}
+	
+	@Test
+	public void testFindRegionSkip_EOF1() throws Exception {
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc \n fff \n     \n fff \n ", "ccc \n     \n     \n     \n ");
+		assertEquals(1, regions.size());
+		assertEquals(1, regions.get(0).getStartLine());
+		assertEquals(3, regions.get(0).getEndLine());
+	}
+	
+	@Test
+	public void testFindRegionSkip_EOF2() throws Exception {
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc \n fff \n     \n fff", "ccc \n     \n     \n    ");
+		assertEquals(1, regions.size());
+		assertEquals(1, regions.get(0).getStartLine());
+		assertEquals(3, regions.get(0).getEndLine());
+	}
+	
+	@Test
+	public void testFindRegionExpected_TwoRegions() throws Exception {
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString("ccc \n fff @START @END \n ccc  \n fff @START \n fff @END");
+		assertEquals(2, regions.size());
+		assertEquals(1, regions.get(0).getStartLine());
+		assertEquals(1, regions.get(0).getEndLine());
+		assertEquals(3, regions.get(1).getStartLine());
+		assertEquals(4, regions.get(1).getEndLine());
+	}
+	
+	@Test
+	public void testFindRegionSkip_TwoRegions() throws Exception {
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc \n fff \n ccc  \n fff \n fff ", "ccc \n     \n ccc  \n     \n     ");
+		assertEquals(2, regions.size());
+		assertEquals(1, regions.get(0).getStartLine());
+		assertEquals(1, regions.get(0).getEndLine());
+		assertEquals(3, regions.get(1).getStartLine());
+		assertEquals(4, regions.get(1).getEndLine());
+	}
+	
+	@Test
+	public void testFindRegionSkip_ZeroRegions() throws Exception {
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc \n ", "ccc \n ");
+		assertEquals(0, regions.size());
+	}
+	
+	@Test(expected=Exception.class)
+	public void sameNumberOfLines1() throws Exception {
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc z y x", "ccc \n \n \n");
+	}
+	
+	@Test(expected=Exception.class)
+	public void sameNumberOfLines2() throws Exception {
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc \n \n c", "ccc \n c c");
+	}
+	
+	@Test(expected=Exception.class)
+	public void sameNumberOfChars() throws Exception {
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc \n ff", "ccc \n     ");
+	}
+	
+	@Test
+	public void skippedRegionsFromFile() throws Exception {
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectSkippedRegions("TestInput/Common/test1.java", "Grammars/Java-15.tbl");
+		assertEquals(1, regions.size());
+		assertEquals(14, regions.get(0).getStartLine());
+		assertEquals(18, regions.get(0).getEndLine());
+	}
 
 }



From m.dejonge at tudelft.nl  Wed Nov 18 18:25:59 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 18 Nov 2009 17:25:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20269 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: .
	OutputRegionSkip src/evaluating src/tests
Message-ID: <200911181725.nAIHPxTZ016889@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-18 17:25:59 +0000 (Wed, 18 Nov 2009)
New Revision: 20269

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20269&view=rev

Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java.pt
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java

Log:
call to yield-asfix from java code

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath	2009-11-18 16:49:39 UTC (rev 20268)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath	2009-11-18 17:25:59 UTC (rev 20269)
@@ -5,5 +5,6 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
 	<classpathentry kind="src" path="/org.spoofax.jsglr [spoofax-recovery branch]"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.aterm"/>
+	<classpathentry kind="src" path="/strc-java"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java	2009-11-18 16:49:39 UTC (rev 20268)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java	2009-11-18 17:25:59 UTC (rev 20269)
@@ -1,30 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-
-class X {
-
-	private int correctMethod1() {
-		corr2();
-		return corrInt;
-	}
-
-	private int erroneousMethod() {
-		        
-		                  
-			      
-			                
-		         
-	}
-
-	private int correctMethod2() {
-		int corrLine1;
-		if (true) {
-			corrLine2();
-		}
-		corrLine3();
-		corrLine4();
-	}
-}

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java.pt
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java.pt	2009-11-18 16:49:39 UTC (rev 20268)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/test1.java.pt	2009-11-18 17:25:59 UTC (rev 20269)
@@ -1 +0,0 @@
-parsetree(appl(prod([cf(opt(layout)),cf(sort("CompilationUnit")),cf(opt(layout))],sort("<START>"),no-attrs),[appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(opt(sort("PackageDec"))),cf(opt(layout)),cf(iter-star(sort("ImportDec"))),cf(opt(layout)),cf(iter(sort("TypeDec")))],cf(sort("CompilationUnit")),attrs([term(cons("CompilationUnit"))])),[appl(prod([cf(sort("PackageDec"))],cf(opt(sort("PackageDec"))),no-attrs),[appl(prod([cf(iter-star(sort("Anno"))),cf(opt(layout)),lit("package"),cf(opt(layout)),cf(sort("PackageName")),cf(opt(layout)),lit(";")],cf(sort("PackageDec")),attrs([term(cons("PackageDec"))])),[appl(prod([],cf(iter-star(sort("Anno"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([112]),char-class([97]),char-class([99]),char-class([107]),char-class([97]),char-class([103]),char-class([101])],lit("package"),no-attrs),[112,97,99,107,97,103,101]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layo!
 ut),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(iter-sep(sort("Id"),lit(".")))],cf(sort("PackageName")),attrs([term(cons("PackageName"))])),[appl(prod([cf(sort("Id"))],cf(iter-sep(sort("Id"),lit("."))),no-attrs),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[116,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[!
 appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,rang
7,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[115])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32]!
 )],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])])]),appl(prod([cf(iter(sort("ImportDec")))],cf(iter-star(sort("ImportDec"))),no-attrs),[appl(prod([cf(iter(sort("ImportDec"))),cf(opt(layout)),cf(iter(sort("ImportDec")))],cf(iter(sort("ImportDec"))),attrs([assoc(left)])),[appl(prod([cf(iter(sort("ImportDec"))),cf(opt(layout)),cf(iter(sort("ImportDec")))],cf(iter(sort("ImportDec"))),attrs([assoc(left)])),[appl(prod([cf(sort("ImportDec"))],cf(iter(sort("ImportDec"))),no-attrs),[appl(prod([lit("import"),cf(opt(layout)),cf(sort("TypeName")),cf(opt(layout)),lit(";")],cf(sort("ImportDec")),attrs([term(cons("TypeImportDec"))])),[appl(prod([char-class([105]),char-class([109]),char-class([112]),char-class([111]),char-class([114]),char-class([116])],lit("import"),no-attrs),[105,109,112,111,114,116]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],!
 cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13
2])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("PackageOrTypeName")),cf(opt(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("TypeName")),attrs([term(cons("TypeName"))])),[appl(prod([cf(sort("PackageOrTypeName")),cf(opt(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[106,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,rang!
 e(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[97]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[118])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[97])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46!
 ])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),
,appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[105,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(4!
 8,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[73,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[app!
 l(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(9
22)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(9!
 7,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[79]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[69])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[120])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(!
 char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-att
,[99])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[112])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])])])])])])]!
 ),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([cf(sort("ImportDec"))],cf(iter(sort("ImportDec"))),no-attrs),[appl(prod([lit("import"),cf(opt(layout)),cf(sort("TypeName")),cf(opt(layout)),lit(";")],cf(sort("ImportDec")),attrs([term(cons("TypeImportDec"))])),[appl(prod([char-class([105]),char-class([109]),char-class([112]),char-class([111]),char-class([114]),char-class([116])],lit("import"),no-attrs),[105,109,112,111,114,116]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("PackageOrTypeName")),cf(opt(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("TypeName")),attrs([te!
 rm(cons("TypeName"))])),[appl(prod([cf(sort("PackageOrTypeName")),cf
t(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[106,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65!
 ,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[117]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,!
 122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(9
22)]))),no-attrs),[116])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[102,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([3!
 6,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-clas!
 s([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-
ss([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[97])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[109])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-cla!
 ss([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[119])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[107])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([3!
 6,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no
trs),[65,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,ra!
 nge(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[115]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[115])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]!
 )])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([ch
class([59])],lit(";"),no-attrs),[59])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([cf(sort("ImportDec"))],cf(iter(sort("ImportDec"))),no-attrs),[appl(prod([lit("import"),cf(opt(layout)),cf(sort("TypeName")),cf(opt(layout)),lit(";")],cf(sort("ImportDec")),attrs([term(cons("TypeImportDec"))])),[appl(prod([char-class([105]),char-class([109]),char-class([112]),char-class([111]),char-class([114]),char-class([116])],lit("import"),no-attrs),[105,109,112,111,114,116]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("PackageOrTypeName")),cf(opt(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("TypeName")),attrs([term(cons("TypeName"))])),[appl(prod([cf(sort("PackageOrTypeNa!
 me")),cf(opt(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("PackageOrTypeName")),cf(opt(layout)),lit("."),cf(opt(layout)),cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("Id"))],cf(sort("PackageOrTypeName")),attrs([term(cons("PackageOrTypeName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[111,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),ra!
 nge(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57
ange(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[103])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[115,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[a!
 ppl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])!
 ),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,r
e(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[112]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[102])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[97])]),ap!
 pl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[120])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[106,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,12!
 2)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,ran
48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[115]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[103])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[108])]),appl(prod([char-class([36,range(48,57),range(65,90!
 ),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([46])],lit("."),no-attrs),[46]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[83,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter!
 (char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(i
(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(i!
 ter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),l!
 ex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))
lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[71]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[76])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[82])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[69])]),appl(!
 prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[120])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[99])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[112])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class(!
 [36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-clas
36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])])]),appl(prod([cf(sort("TypeDec"))],cf(iter(sort("TypeDec"))),no-attrs),[appl(prod([cf(sort("ClassDec"))],cf(sort("TypeDec")),no-attrs),[appl(prod([cf(sort("ClassDecHead")),cf(opt(layout)),cf(sort("ClassBody"))],cf(sort("ClassDec")),attrs([term(cons("ClassDec"))]))!
 ,[appl(prod([cf(iter-star(alt(sort("Anno"),sort("ClassMod")))),cf(opt(layout)),lit("class"),cf(opt(layout)),cf(sort("Id")),cf(opt(layout)),cf(opt(sort("TypeParams"))),cf(opt(layout)),cf(opt(sort("Super"))),cf(opt(layout)),cf(opt(sort("Interfaces")))],cf(sort("ClassDecHead")),attrs([term(cons("ClassDecHead"))])),[appl(prod([],cf(iter-star(alt(sort("Anno"),sort("ClassMod")))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([99]),char-class([108]),char-class([97]),char-class([115]),char-class([115])],lit("class"),no-attrs),[99,108,97,115,115]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),rang!
 e(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[88,appl(pr
[],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([],cf(opt(sort("TypeParams"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(opt(sort("Super"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(opt(sort("Interfaces"))),no-attrs),[])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([lit("{"),cf(opt(layout)),cf(iter-star(sort("ClassBodyDec"))),cf(opt(layout)),lit("}")],cf(sort("ClassBody")),attrs([term(cons("ClassBody"))])),[appl(prod([char-class([123])],lit("{"),no-attrs),[123]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layou!
 t)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(iter(sort("ClassBodyDec")))],cf(iter-star(sort("ClassBodyDec"))),no-attrs),[appl(prod([cf(iter(sort("ClassBodyDec"))),cf(opt(layout)),cf(iter(sort("ClassBodyDec")))],cf(iter(sort("ClassBodyDec"))),attrs([assoc(left)])),[appl(prod([cf(iter(sort("ClassBodyDec"))),cf(opt(layout)),cf(iter(sort("ClassBodyDec")))],cf(iter(sort("ClassBodyDec"))),attrs([assoc(left)])),[appl(prod([cf(sort("ClassBodyDec"))],cf(iter(sort("ClassBodyDec"))),no-attrs),[appl(prod([cf(sort("ClassMemberDec"))],cf(sort("ClassBodyDec")),no-attrs),[appl(prod([cf(sort("MethodDec"))],cf(sort("ClassMemberDec")),no-attrs),[appl(prod!
 ([cf(sort("MethodDecHead")),cf(opt(layout)),cf(sort("MethodBody"))],
sort("MethodDec")),attrs([term(cons("MethodDec"))])),[appl(prod([cf(iter-star(alt(sort("Anno"),sort("MethodMod")))),cf(opt(layout)),cf(opt(sort("TypeParams"))),cf(opt(layout)),cf(sort("ResultType")),cf(opt(layout)),cf(sort("Id")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("FormalParam"),lit(","))),cf(opt(layout)),lit(")"),cf(opt(layout)),cf(opt(sort("Throws")))],cf(sort("MethodDecHead")),attrs([term(cons("MethodDecHead"))])),[appl(prod([cf(iter(alt(sort("Anno"),sort("MethodMod"))))],cf(iter-star(alt(sort("Anno"),sort("MethodMod")))),no-attrs),[appl(prod([cf(alt(sort("Anno"),sort("MethodMod")))],cf(iter(alt(sort("Anno"),sort("MethodMod")))),no-attrs),[appl(prod([cf(sort("MethodMod"))],cf(alt(sort("Anno"),sort("MethodMod"))),no-attrs),[appl(prod([cf(sort("Private"))],cf(sort("MethodMod")),no-attrs),[appl(prod([lit("private")],cf(sort("Private")),attrs([term(cons("Private"))])),[appl(prod([char-class([112]),char-class([114]),char-class([105]),char-class([118!
 ]),char-class([97]),char-class([116]),char-class([101])],lit("private"),no-attrs),[112,114,105,118,97,116,101])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([],cf(opt(sort("TypeParams"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("Type"))],cf(sort("ResultType")),no-attrs),[appl(prod([cf(sort("PrimType"))],cf(sort("Type")),no-attrs),[appl(prod([cf(sort("NumType"))],cf(sort("PrimType")),no-attrs),[appl(prod([cf(sort("IntType"))],cf(sort("NumType")),no-attrs),[appl(prod([lit("int")],cf(sort("IntType")),attrs([term(cons("Int"))])),[appl(prod([char-class([105]),char-class([110]),char-class([116])],lit("int"),no-attrs),[105,110,116])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],l!
 ex(layout),no-attrs),[32])])]),appl(prod([cf(sort("ID"))],cf(sort("I
),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,1!
 22)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(!
 97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,ran
97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,ran!
 ge(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-!
 attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),
range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[99])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[77])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[104])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],le!
 x(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[100])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[49])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("FormalParam"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([],cf(opt(sort("Throws"))),no-attrs),[])]),appl(prod([],cf(opt(la!
 yout)),no-attrs),[]),appl(prod([cf(sort("Block"))],cf(sort("MethodBo
)),no-attrs),[appl(prod([lit("{"),cf(opt(layout)),cf(iter-star(sort("BlockStm"))),cf(opt(layout)),lit("}")],cf(sort("Block")),attrs([term(cons("Block"))])),[appl(prod([char-class([123])],lit("{"),no-attrs),[123]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(iter(sort("BlockStm")))],cf(iter-star(sort("BlockStm"))),no-attrs),[appl(prod([cf(iter(sort("BlockStm"))),cf(opt(layout)),cf(iter(sort("BlockStm")))],cf(iter(sort("BlockStm"))),attrs!
 ([assoc(left)])),[appl(prod([cf(sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("Stm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([cf(sort("ExprStm"))],cf(sort("Stm")),no-attrs),[appl(prod([cf(sort("Expr")),cf(opt(layout)),lit(";")],cf(sort("ExprStm")),attrs([term(cons("ExprStm"))])),[appl(prod([cf(sort("MethodSpec")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("Expr"),lit(","))),cf(opt(layout)),lit(")")],cf(sort("Expr")),attrs([term(cons("Invoke"))])),[appl(prod([cf(sort("MethodName"))],cf(sort("MethodSpec")),attrs([term(cons("Method"))])),[appl(prod([cf(sort("Id"))],cf(sort("MethodName")),attrs([term(cons("MethodName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(it!
 er(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],le
ter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),app!
 l(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[50])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("Expr"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)!
 ],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)
f(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("Stm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([lit("return"),cf(opt(layout)),cf(opt(sort("Expr"))),cf(opt(layout)),lit(";")],cf(sort("Stm")),attrs([term(cons("Return"))])),[appl(prod([char-class([114]),char-class([101]),char-class([116]),char-class([117]),char-class([114]),char-class([110])],lit("return"),no-attrs),[114,101,116,117,114,110]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([rang!
 e(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("Expr"))],cf(opt(sort("Expr"))),no-attrs),[appl(prod([cf(sort("ExprName"))],cf(sort("Expr")),no-attrs),[appl(prod([cf(sort("Id"))],cf(sort("ExprName")),attrs([term(cons("ExprName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(it!
 er(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex
er(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char!
 -class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[73])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs)!
 ,[59])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[a
(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([char-class([125])],lit("}"),no-attrs),[125])])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf!
 (sort("ClassBodyDec"))],cf(iter(sort("ClassBodyDec"))),no-attrs),[appl(prod([cf(sort("ClassMemberDec"))],cf(sort("ClassBodyDec")),no-attrs),[appl(prod([cf(sort("MethodDec"))],cf(sort("ClassMemberDec")),no-attrs),[appl(prod([cf(sort("MethodDecHead")),cf(opt(layout)),cf(sort("MethodBody"))],cf(sort("MethodDec")),attrs([term(cons("MethodDec"))])),[appl(prod([cf(iter-star(alt(sort("Anno"),sort("MethodMod")))),cf(opt(layout)),cf(opt(sort("TypeParams"))),cf(opt(layout)),cf(sort("ResultType")),cf(opt(layout)),cf(sort("Id")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("FormalParam"),lit(","))),cf(opt(layout)),lit(")"),cf(opt(layout)),cf(opt(sort("Throws")))],cf(sort("MethodDecHead")),attrs([term(cons("MethodDecHead"))])),[appl(prod([cf(iter(alt(sort("Anno"),sort("MethodMod"))))],cf(iter-star(alt(sort("Anno"),sort("MethodMod")))),no-attrs),[appl(prod([cf(alt(sort("Anno"),sort("MethodMod")))],cf(iter(alt(sort("Anno"),sort("MethodMod")))),no-attrs),[appl(prod([cf(so!
 rt("MethodMod"))],cf(alt(sort("Anno"),sort("MethodMod"))),no-attrs),
pl(prod([cf(sort("Private"))],cf(sort("MethodMod")),no-attrs),[appl(prod([lit("private")],cf(sort("Private")),attrs([term(cons("Private"))])),[appl(prod([char-class([112]),char-class([114]),char-class([105]),char-class([118]),char-class([97]),char-class([116]),char-class([101])],lit("private"),no-attrs),[112,114,105,118,97,116,101])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([],cf(opt(sort("TypeParams"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("Type"))],cf(sort("ResultType")),no-attrs),[appl(prod([cf(sort("PrimType"))],cf(sort("Type")),no-attrs),[appl(prod([cf(sort("NumType"))],cf(sort("PrimType")),no-attrs),[appl(prod([cf(sort("IntType"))],cf(sort("NumType")),no-attrs),[appl(prod([lit("int")],cf(sort("IntType")),attrs([term(cons("Int"))])),[appl(prod([char-class([105]),char-class([!
 110]),char-class([116])],lit("int"),no-attrs),[105,110,116])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[101,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-cl!
 ass([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char
ass([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char!
 -class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(!
 char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(i
(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])!
 ,appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[117])]),appl(prod([char!
 -class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(ch
class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[115])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[77])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[104])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48!
 ,57),range(65,90),95,range(97,122)]))),no-attrs),[100])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("FormalParam"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([],cf(opt(sort("Throws"))),no-attrs),[])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("Block"))],cf(sort("MethodBody")),no-attrs),[appl(prod([lit("{"),cf(opt(layout)),cf(iter-star(sort("BlockStm"))),cf(opt(layout)),lit("}")],cf(sort("Block")),attrs([term(cons("Block"))])),[appl(prod([char-class([123])],lit("{"),no-attrs),[123]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layou!
 t),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layou
cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(l!
 eft)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(la!
 yout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(la
t)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),!
 [appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],c!
 f(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],c
ayout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(!
 9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([!
 lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10
ange(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(la!
 yout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),!
 range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(la
t)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),rang!
 e(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layou!
 t)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(1
3),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(!
 layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,1!
 3),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(
out),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),3!
 2])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(la!
 yout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32]
lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([],cf(iter-star(sort("BlockStm"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([125])],lit("}"),no-attrs),[125])])])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(p!
 rod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(sort("ClassBodyDec"))],cf(iter(sort("ClassBodyDec"))),no-attrs),[appl(prod([cf(sort("ClassMemberDec"))],cf(sort("ClassBodyDec")),no-attrs),[appl(prod([cf(sort("MethodDec"))],cf(sort("ClassMemberDec")),no-attrs),[appl(prod([cf(sort("MethodDecHead")),cf(opt(layout)),cf(sort("MethodBody"))],cf(sort("MethodDec")),attrs([term(cons("MethodDec"))])),[appl(prod([cf(iter-star(alt(sort("Anno"),sort("MethodMod")))),cf(opt(layout)),cf(opt(sort("TypeParams"))),cf(opt(layout)),cf(sort("ResultType")),cf(opt(layout)),cf(sort("I!
 d")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort(
rmalParam"),lit(","))),cf(opt(layout)),lit(")"),cf(opt(layout)),cf(opt(sort("Throws")))],cf(sort("MethodDecHead")),attrs([term(cons("MethodDecHead"))])),[appl(prod([cf(iter(alt(sort("Anno"),sort("MethodMod"))))],cf(iter-star(alt(sort("Anno"),sort("MethodMod")))),no-attrs),[appl(prod([cf(alt(sort("Anno"),sort("MethodMod")))],cf(iter(alt(sort("Anno"),sort("MethodMod")))),no-attrs),[appl(prod([cf(sort("MethodMod"))],cf(alt(sort("Anno"),sort("MethodMod"))),no-attrs),[appl(prod([cf(sort("Private"))],cf(sort("MethodMod")),no-attrs),[appl(prod([lit("private")],cf(sort("Private")),attrs([term(cons("Private"))])),[appl(prod([char-class([112]),char-class([114]),char-class([105]),char-class([118]),char-class([97]),char-class([116]),char-class([101])],lit("private"),no-attrs),[112,114,105,118,97,116,101])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[3!
 2])])]),appl(prod([],cf(opt(sort("TypeParams"))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("Type"))],cf(sort("ResultType")),no-attrs),[appl(prod([cf(sort("PrimType"))],cf(sort("Type")),no-attrs),[appl(prod([cf(sort("NumType"))],cf(sort("PrimType")),no-attrs),[appl(prod([cf(sort("IntType"))],cf(sort("NumType")),no-attrs),[appl(prod([lit("int")],cf(sort("IntType")),attrs([term(cons("Int"))])),[appl(prod([char-class([105]),char-class([110]),char-class([116])],lit("int"),no-attrs),[105,110,116])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(so!
 rt("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,
,range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),ran!
 ge(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57)!
 ,range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48
),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48!
 ,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[99])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,9!
 0),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36
nge(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[77])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[116])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[104])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[100])]),appl(prod([char-class([36,range(48,57),range(6!
 5,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[50])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("FormalParam"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([],cf(opt(sort("Throws"))),no-attrs),[])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("Block"))],cf(sort("MethodBody")),no-attrs),[appl(prod([lit("{"),cf(opt(layout)),cf(iter-star(sort("BlockStm"))),cf(opt(layout)),lit("}")],cf(sort("Block")),attrs([term(cons("Block"))])),[appl(prod([char-class([123])],lit("{"),no-attrs),[123]),appl(prod([c!
 f(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layou
,cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(iter(sort("BlockStm")))],cf(iter-star(sort("BlockStm"))),no-attrs),[appl(prod([cf(iter(sort("BlockStm"))),cf(opt(layout)),cf(iter(sort("BlockStm")))],cf(iter(sort("BlockStm"))),attrs([assoc(left)])),[appl(prod([cf(iter(sort("BlockStm"))),cf(opt(layout)),cf(iter(sort("BlockStm")))],cf(iter(sort("BlockStm"))),attrs([assoc(left)])),[appl(prod([cf(iter(sort("BlockStm"))),cf(opt(layout)),cf(iter(sort("BlockStm")))],cf(iter(sort("BlockStm"))),attrs([assoc(left)])),[appl(prod([cf(!
 sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("LocalVarDecStm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([cf(sort("LocalVarDec")),cf(opt(layout)),lit(";")],cf(sort("LocalVarDecStm")),attrs([term(cons("LocalVarDecStm"))])),[appl(prod([cf(iter-star(alt(sort("Anno"),sort("VarMod")))),cf(opt(layout)),cf(sort("Type")),cf(opt(layout)),cf(iter-sep(sort("VarDec"),lit(",")))],cf(sort("LocalVarDec")),attrs([term(cons("LocalVarDec"))])),[appl(prod([],cf(iter-star(alt(sort("Anno"),sort("VarMod")))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("PrimType"))],cf(sort("Type")),no-attrs),[appl(prod([cf(sort("NumType"))],cf(sort("PrimType")),no-attrs),[appl(prod([cf(sort("IntType"))],cf(sort("NumType")),no-attrs),[appl(prod([lit("int")],cf(sort("IntType")),attrs([term(cons("Int"))])),[appl(prod([char-class([105]),char-class([110]),char-class([116])],lit("int"),no-attrs),[105,110,116])])])])]),appl(prod([cf(layout)],cf(opt(layout!
 )),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(pro
char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("VarDec"))],cf(iter-sep(sort("VarDec"),lit(","))),no-attrs),[appl(prod([cf(sort("VarDecId"))],cf(sort("VarDec")),attrs([term(cons("VarDec"))])),[appl(prod([cf(sort("Id"))],cf(sort("VarDecId")),no-attrs),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([!
 assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),att!
 rs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),
ge(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range!
 (97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[76])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[49])])])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[app!
 l(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[app
rod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("Stm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([lit("if"),cf(opt(layout)),lit("("),cf(opt(layout)),cf(sort("Expr")),cf(opt(layout)),lit(")"),cf(opt(layout)),cf(sort("Stm"))],cf(sort("Stm")),attrs([prefer,term(cons("If"))])),[appl(prod([char-class([105]),char-class([102])],lit("if"),no-attrs),[105,102]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([char-class!
 ([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([cf(sort("Literal"))],cf(sort("Expr")),attrs([term(cons("Lit"))])),[appl(prod([cf(sort("BoolLiteral"))],cf(sort("Literal")),no-attrs),[appl(prod([cf(sort("Bool"))],cf(sort("BoolLiteral")),attrs([term(cons("Bool"))])),[appl(prod([lit("true")],cf(sort("Bool")),attrs([term(cons("True"))])),[appl(prod([char-class([116]),char-class([114]),char-class([117]),char-class([101])],lit("true"),no-attrs),[116,114,117,101])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[32])])]),appl(prod([cf(sort("Block"))],cf(sort("Stm")),no-attrs),[appl(prod([lit("{"),cf(opt(layout)),cf(iter-star(sort("BlockStm"))),cf(opt(layout)),lit("}")],cf(sort("Block")),attrs([term(cons("Block"))])),[a!
 ppl(prod([char-class([123])],lit("{"),no-attrs),[123]),appl(prod([cf
yout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(iter(sort("BlockStm")))],cf(iter-star(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("Stm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([cf!
 (sort("ExprStm"))],cf(sort("Stm")),no-attrs),[appl(prod([cf(sort("Expr")),cf(opt(layout)),lit(";")],cf(sort("ExprStm")),attrs([term(cons("ExprStm"))])),[appl(prod([cf(sort("MethodSpec")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("Expr"),lit(","))),cf(opt(layout)),lit(")")],cf(sort("Expr")),attrs([term(cons("Invoke"))])),[appl(prod([cf(sort("MethodName"))],cf(sort("MethodSpec")),attrs([term(cons("Method"))])),[appl(prod([cf(sort("Id"))],cf(sort("MethodName")),attrs([term(cons("MethodName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod!
 ([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)
),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)!
 ]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])])!
 ,appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122
],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[76])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[50])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("!
 ("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("Expr"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([char-class([125])],lit("}"),no-attrs),[125])])])])])])]),app!
 l(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout)
(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("Stm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([cf(sort("ExprStm"))],cf(sort("Stm")),no-attrs),[appl(prod([cf(sort("Expr")),cf(opt(layout)),lit(";")],cf(sort("ExprStm")),attrs([term(cons("ExprStm"))])),[appl(prod([cf(sort("MethodSpec")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("Expr"),lit(","))),cf(opt(layout)),lit(")")],cf(sort("Expr")),attrs([term(cons("Invoke"))!
 ])),[appl(prod([cf(sort("MethodName"))],cf(sort("MethodSpec")),attrs([term(cons("Method"))])),[appl(prod([cf(sort("Id"))],cf(sort("MethodName")),attrs([term(cons("MethodName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-clas!
 s([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-
ss([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-!
 class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[76])]),appl(prod([char!
 -class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(ch
class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[51])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("Expr"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])])])])]),ap!
 pl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([cf(sort("BlockStm"))],cf(iter(sort("BlockStm"))),no-attrs),[appl(prod([cf(sort("Stm"))],cf(sort("BlockStm")),no-attrs),[appl(prod([cf(sort("ExprStm"))],cf(sort("Stm")),no-attrs),[appl(prod([cf(sort("Expr")),cf(opt(layout)),lit(";")],cf(sort("ExprStm")),attrs([term(cons("ExprStm"))])),[appl(prod([cf(sort("MethodSpec")),cf(opt(layout)),lit("("),cf(opt(layout)),cf(iter-star-sep(sort("Expr"),lit(",")!
 )),cf(opt(layout)),lit(")")],cf(sort("Expr")),attrs([term(cons("Invo
))])),[appl(prod([cf(sort("MethodName"))],cf(sort("MethodSpec")),attrs([term(cons("Method"))])),[appl(prod([cf(sort("Id"))],cf(sort("MethodName")),attrs([term(cons("MethodName"))])),[appl(prod([cf(sort("ID"))],cf(sort("Id")),attrs([term(cons("Id"))])),[appl(prod([lex(sort("ID"))],cf(sort("ID")),no-attrs),[appl(prod([char-class([36,range(65,90),95,range(97,122)]),lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(sort("ID")),no-attrs),[99,appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter-star(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-cla!
 ss([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char!
 -class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(
r-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)])))],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),attrs([assoc(left)])),[appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[111]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[114])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[76])]),appl(prod([cha!
 r-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[105])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[110])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[101])]),appl(prod([char-class([36,range(48,57),range(65,90),95,range(97,122)])],lex(iter(char-class([36,range(48,57),range(65,90),95,range(97,122)]))),no-attrs),[52])])])])])])])]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([40])],lit("("),no-attrs),[40]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([],cf(iter-star-sep(sort("Expr"),lit(","))),no-attrs),[]),appl(prod([],cf(opt(layout)),no-attrs),[]),appl(prod([char-class([41])],lit(")"),no-attrs),[41])]),appl(prod([],cf(opt(layout)),no-attr!
 s),[]),appl(prod([char-class([59])],lit(";"),no-attrs),[59])])])])])
),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([cf(layout),cf(layout)],cf(layout),attrs([assoc(left)])),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])]),appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[9])])])]),appl(prod([char-class([125])],lit("}"),no-attrs),[125])])])])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])]),appl(prod([char-class([125])],lit("}"),no-attrs),[125])])])])])]),appl(prod([cf(layout)],cf(opt(layout)),no-attrs),[appl(prod([lex(layout)],cf(layout),no-attrs),[appl(prod([char-class([range(9,10),range(12,13),32])],lex(layout),no-attrs),[10])])])]),0)
\ No newline at end of file

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-18 16:49:39 UTC (rev 20268)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-18 17:25:59 UTC (rev 20269)
@@ -6,6 +6,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.io.PrintStream;
 import java.util.ArrayList;
 
 import org.spoofax.jsglr.InvalidParseTableException;
@@ -14,6 +15,7 @@
 import org.spoofax.jsglr.ParseTableManager;
 import org.spoofax.jsglr.SGLR;
 import org.spoofax.jsglr.SGLRException;
+import org.strategoxt.lang.compat.NativeCallHelper;
 
 import aterm.ATerm;
 
@@ -54,7 +56,7 @@
 
 	private static String writeRecoveredFile(String testFile, String parseTable)
 			throws FileNotFoundException, IOException,
-			InvalidParseTableException, NoRecoveryRulesException, SGLRException {
+			InvalidParseTableException, NoRecoveryRulesException, SGLRException, InterruptedException {
 		String fileName=testFile.substring(testFile.lastIndexOf('/')+1);
 		String recoveredFile=OUTPUT_REGION_SKIP+fileName;
 		String parseTreeFile = OUTPUT_REGION_SKIP+fileName+PARSETREE_EXTENSION;
@@ -105,9 +107,14 @@
 		return result;
 	}
 
-	private static void yieldAsfix(String inputFile, String outputFile) {
-		// TODO Auto-generated method stub
-		
+	private static void yieldAsfix(String inputFile, String outputFile) throws InterruptedException, IOException {
+		NativeCallHelper caller=new NativeCallHelper();
+		String[] commandArgs = {
+				"asfix-yield", "-i", inputFile,
+				"-o", outputFile
+		};
+		PrintStream printOut=new PrintStream(outputFile);
+		caller.call(commandArgs, new String[0], null, System.out, System.err);
 	}
 
 	private static void writeParseTree(String testFile, String parseTable,

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java	2009-11-18 16:49:39 UTC (rev 20268)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java	2009-11-18 17:25:59 UTC (rev 20269)
@@ -175,5 +175,11 @@
 		assertEquals(14, regions.get(0).getStartLine());
 		assertEquals(18, regions.get(0).getEndLine());
 	}
-
+	
+	/*
+	@Test
+	public void yieldAsfix() throws Exception {
+		ErroneousRegion.yieldAsfix("OutputRegionSkip/test1.java.pt", "OutputRegionSkip/test1.result.java");
+	}
+	*/
 }



From m.dejonge at tudelft.nl  Thu Nov 19 14:15:23 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 19 Nov 2009 13:15:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20270 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	OutputRegionSkip TestInput/Common TestInput/Practice
	src/evaluating src/tests
Message-ID: <200911191315.nAJDFNp6000954@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-19 13:15:23 +0000 (Thu, 19 Nov 2009)
New Revision: 20270

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20270&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip/
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test1.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java

Log:


Changes:


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/OutputRegionSkip
___________________________________________________________________
Added: svn:ignore
   + *


Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test1.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test1.str	2009-11-18 17:25:59 UTC (rev 20269)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test1.str	2009-11-19 13:15:23 UTC (rev 20270)
@@ -15,8 +15,7 @@
   where /*|} @START */ 
   {|
        substitute: rules (substitute: name -> <try-eval>(value)); 
-       r:= <try-eval> (body) /* @END */ 
-    
+       r:= <try-eval> (body) /* @END */   
   
    evaluate-exprlist: Expressions(exprlist) -> <map(try-eval)> exprlist  
    try-eval=evaluate <+ all(try-eval)

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test1.java	2009-11-18 17:25:59 UTC (rev 20269)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test1.java	2009-11-19 13:15:23 UTC (rev 20270)
@@ -12,18 +12,17 @@
 	}
 
 	private int erroneousMethod() {
-		corr2();
 		if(true){ //@START
 			foo();
 			bar(); //@END
-		return 5;
 	}
 
 	private int correctMethod2() {
 		int corrLine1;
-		if (true) {
-			corrLine2();
-		}
+		if (true) { //@START
+			corrLine2(); //}
+		else
+			return 4; //@END
 		corrLine3();
 		corrLine4();
 	}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-18 17:25:59 UTC (rev 20269)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-19 13:15:23 UTC (rev 20270)
@@ -13,6 +13,7 @@
 	
 	private ArrayList<String> errorInDataResults;
 	private int numberOfFiles;
+	private int numberOfRegions;
 	
 	public HashMap<Evaluation, String> getOverviewResults(){
 		HashMap<Evaluation, String> overview = new HashMap<Evaluation, String>();
@@ -35,12 +36,16 @@
 		diagnoseFailedResults=new ArrayList<String>();
 		errorInDataResults=new ArrayList<String>();
 		numberOfFiles=0;
+		numberOfRegions=0;
 	}
 	
 	public void processFileResult(Testcase testFile) {
-		Evaluation result=testFile.getResult();
-		String fileName = testFile.getFileName();
-		getResultList(result).add(fileName);
+		for (Evaluation result : testFile.getRegionEvaluations()) {
+			String fileName = testFile.getFileName();
+			getResultList(result).add(fileName);
+			numberOfRegions++;
+			//System.out.println(fileName);
+		}
 		numberOfFiles++;
 	}
 
@@ -97,5 +102,9 @@
 		return numberOfFiles;
 		
 	}
+	
+	public int getNumberOfRegions() {
+		return numberOfRegions;
+	}
 
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-18 17:25:59 UTC (rev 20269)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-19 13:15:23 UTC (rev 20270)
@@ -1,50 +1,60 @@
 package evaluating;
 
+import java.util.ArrayList;
 
+
 public class Testcase {
 
 	private static final int SMALL_REGION_CRITERIA = 6;
-	private Evaluation fileResult;
-	private String fileName;
+	private ArrayList<Evaluation> regionEvaluation;
+	private String filePath;
 	
-	public Testcase(String fileName) {
-		this.fileName=fileName;
+	public Testcase(String filePath) {
+		this.filePath=filePath;
+		regionEvaluation=new ArrayList<Evaluation>();
 	}
 
 	public void processRegionData(int expectedStartLine,
 			int expectedEndLine, int actualStartLine, int actualEndLine) {		
 		if(invalidRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine))
-			fileResult=Evaluation.WRONG_DATA;
+			regionEvaluation.add(Evaluation.WRONG_DATA);
 		else if(actualStartLine < 0 || actualEndLine <0)
-			fileResult=Evaluation.NO_REGION_FOUND;
+			regionEvaluation.add(Evaluation.NO_REGION_FOUND);
 		else if(actualStartLine==expectedStartLine && actualEndLine==expectedEndLine)
-			fileResult=Evaluation.EXACT;
+			regionEvaluation.add(Evaluation.EXACT);
 		else if (expectedStartLine>=actualStartLine && expectedEndLine <= actualEndLine){
 			if(((expectedStartLine-actualStartLine) + (actualEndLine-expectedEndLine))<=SMALL_REGION_CRITERIA){
-				fileResult=Evaluation.GOOD;
+				regionEvaluation.add(Evaluation.GOOD);
 			}
 			else
-				fileResult=Evaluation.POOR;
+				regionEvaluation.add(Evaluation.POOR);
 		}
 		else if(expectedStartLine<=actualStartLine && expectedEndLine >= actualEndLine)
-			fileResult=Evaluation.TOO_SMALL;
+			regionEvaluation.add(Evaluation.TOO_SMALL);
 		else
-			fileResult=Evaluation.MIS_DIAGNOSED;
+			regionEvaluation.add(Evaluation.MIS_DIAGNOSED);
 	}
 
-	
+	public void compareRegions() throws Exception {
+		ArrayList<ErroneousRegion> expectedRegions=ErroneousRegion.collectExpectedRegions(filePath);
+		//ArrayList<ErroneousRegion> skippedRegions=ErroneousRegion.collectSkippedRegions(filePath, getParsetable(extension));
+		for (int j = 0; j < expectedRegions.size(); j++) {
+			ErroneousRegion expected = expectedRegions.get(j);
+			processRegionData(expected.getStartLine(), expected.getEndLine(), 0, 0);
+		}
+	}
 
 	private boolean invalidRegionData(int expectedStartLine,
 			int expectedEndLine, int actualStartLine, int actualEndLine) {
 		return expectedEndLine<expectedStartLine || expectedStartLine<0 || actualEndLine<actualStartLine;
 	}
 
-	public Evaluation getResult() {
-		return fileResult;
+	public ArrayList<Evaluation> getRegionEvaluations() {
+		return regionEvaluation;
 	}
 
 	public String getFileName() {
-		return fileName;
+		return filePath;
 	}
 	
 	

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-18 17:25:59 UTC (rev 20269)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-19 13:15:23 UTC (rev 20270)
@@ -1,11 +1,10 @@
 package evaluating;
 
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.FilenameFilter;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.HashMap;
 
 public class Testsuite {
 	
@@ -22,6 +21,7 @@
 	private boolean useAllDirectories;
 	private String testsuiteName;
 	private Statistics statistics;
+	private HashMap<String, String> parsetableLookUp;
 	
 	public String getTestSuiteName() {
 		return testsuiteName;
@@ -38,6 +38,7 @@
 		useAllExtensions=true;
 		useAllDirectories=true;
 		statistics = new Statistics();
+		parsetableLookUp=new HashMap<String, String>();
 	}
 	
 	public void runTestcases() throws Exception{
@@ -71,18 +72,22 @@
         	String fileName=children[i];
         	String filePath=dir+"/"+fileName;
         	if (!new File(filePath).isDirectory() && (useAllExtensions || fileName.endsWith(extension))){
-				ArrayList<ErroneousRegion> expectedRegions=ErroneousRegion.collectExpectedRegions(filePath);
-				for (int j = 0; j < expectedRegions.size(); j++) {
-					ErroneousRegion expected = expectedRegions.get(j);
-					Testcase file = new Testcase(fileName);
-					file.processRegionData(expected.getStartLine(), expected.getEndLine(), 0, 0);
-					statistics.processFileResult(file);
-				}
+        		Testcase file = new Testcase(filePath);
+        		file.compareRegions();
+				statistics.processFileResult(file);
 				//System.out.println(filePath);
 			}
 		}	
 	}
+	
+	public void addLanguage(String extension, String parseTablePath) {
+		parsetableLookUp.put(extension, parseTablePath);
+	}
 
+	private String getParsetable(String extension) {
+		return parsetableLookUp.get(extension);
+	}
+
 	public Testsuite addDir(String dirName) {
 		useAllDirectories=false;
 		directories.add(dirName);

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java	2009-11-19 13:15:23 UTC (rev 20270)
@@ -0,0 +1,21 @@
+package tests;
+
+import org.junit.Test;
+
+import evaluating.Testsuite;
+
+
+public class Evaluate_TestInput {
+	
+	@Test
+	public void Evaluate() throws Exception{		
+		Testsuite t = new Testsuite("TestInput");
+		t.setRootDir("TestInput");
+		t.addDir("Common")
+		 .addExtension("java")
+		 .addExtension("str");
+		t.runTestcases();
+		t.getStatistics().getOverviewResults().toString();
+	}
+
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-18 17:25:59 UTC (rev 20269)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-19 13:15:23 UTC (rev 20270)
@@ -33,7 +33,7 @@
 		int actualStartLine=5;
 		int actualEndLine=10;
 		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
-		Assert.assertEquals(Evaluation.EXACT, regionSelectionData.getResult());
+		Assert.assertEquals(Evaluation.EXACT, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	@Test
@@ -43,7 +43,7 @@
 		int actualStartLine=4;
 		int actualEndLine=15;		
 		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
-		Assert.assertEquals(Evaluation.GOOD, regionSelectionData.getResult());
+		Assert.assertEquals(Evaluation.GOOD, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	@Test
@@ -53,7 +53,7 @@
 		int actualStartLine=2;
 		int actualEndLine=14;
 		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
-		Assert.assertEquals(Evaluation.POOR, regionSelectionData.getResult());
+		Assert.assertEquals(Evaluation.POOR, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	@Test
@@ -63,7 +63,7 @@
 		int actualStartLine=6;
 		int actualEndLine=8;
 		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
-		Assert.assertEquals(Evaluation.TOO_SMALL, regionSelectionData.getResult());
+		Assert.assertEquals(Evaluation.TOO_SMALL, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	@Test
@@ -73,7 +73,7 @@
 		int actualStartLine=7;
 		int actualEndLine=13;
 		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
-		Assert.assertEquals(Evaluation.MIS_DIAGNOSED, regionSelectionData.getResult());
+		Assert.assertEquals(Evaluation.MIS_DIAGNOSED, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	@Test
@@ -83,7 +83,7 @@
 		int actualStartLine=-1;
 		int actualEndLine=-1;
 		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
-		assertEquals(Evaluation.NO_REGION_FOUND, regionSelectionData.getResult());
+		assertEquals(Evaluation.NO_REGION_FOUND, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	@Test
@@ -91,14 +91,14 @@
 		int expectedStartLine=5;
 		int expectedEndLine=3;
 		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, 10, 12);
-		assertEquals(Evaluation.WRONG_DATA, regionSelectionData.getResult());
+		assertEquals(Evaluation.WRONG_DATA, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	@Test
 	public void testInvalidInput2() throws Exception{
 		int expectedStartLine=-1;
 		regionSelectionData.processRegionData(expectedStartLine, 6, 7, 9);
-		assertEquals(Evaluation.WRONG_DATA, regionSelectionData.getResult());
+		assertEquals(Evaluation.WRONG_DATA, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	@Test
@@ -106,7 +106,7 @@
 		int actualStartLine=5;
 		int actualEndLine=3;
 		regionSelectionData.processRegionData(3, 5, actualStartLine, actualEndLine);
-		assertEquals(Evaluation.WRONG_DATA, regionSelectionData.getResult());
+		assertEquals(Evaluation.WRONG_DATA, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	



From m.dejonge at tudelft.nl  Thu Nov 19 15:13:43 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 19 Nov 2009 14:13:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20271 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: Grammars
	TestInput/Practice src/evaluating src/tests
Message-ID: <200911191413.nAJEDh4d002229@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-19 14:13:43 +0000 (Thu, 19 Nov 2009)
New Revision: 20271

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20271&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Stratego-Java-15.tbl
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Stratego-Sugar.def
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Stratego-Sugar.tbl
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/WebDSL.tbl
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/erroneous.app
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.def
   sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.tbl
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test2.cs
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java

Log:
Find Skipped Regions is implemented
Parsetables are find 
Some refactoring

Changes (first 1000 lines of the diffs):

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Stratego-Java-15.tbl
===================================================================
(Binary files differ)


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Stratego-Java-15.tbl
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Stratego-Sugar.def
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Stratego-Sugar.def	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Stratego-Sugar.def	2009-11-19 14:13:43 UTC (rev 20271)
@@ -0,0 +1,764 @@
+definition
+module Stratego-Sugar-Overlays
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Terms
+
+exports
+  sorts Overlay
+  context-free syntax
+    Id 			 "=" Term 	-> Overlay {cons("OverlayNoArgs")}
+    Id "(" {Id ","}* ")" "=" Term 	-> Overlay {cons("Overlay")}
+
+module Stratego-Sugar-DynamicRules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+
+exports
+ 
+  sorts ScopeLabels
+  context-free syntax
+
+    "{|" ScopeLabels ":" Strategy "|}" -> Strategy {cons("DynRuleScope")}
+
+    {DynRuleScopeId ","}*   -> ScopeLabels
+    "~" Term		    -> ScopeLabels {cons("ScopeLabels")}
+
+  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
+  context-free syntax
+
+    "rules" "(" DynRuleDef* ")" -> Strategy {cons("GenDynRules")}
+
+    Id "+" Term                 -> DynRuleDef {cons("AddScopeLabel")} 
+    DynRuleId ":-"  Term        -> DynRuleDef {cons("UndefineDynRule")}
+    DynRuleId ":"   Rule        -> DynRuleDef {cons("SetDynRule")}
+    DynRuleId ":+"  Rule        -> DynRuleDef {cons("AddDynRule")}
+    DynRuleId ":"   Term        -> DynRuleDef {cons("SetDynRuleMatch")}
+
+    DynRuleId ":="  Term        -> DynRuleDef {cons("DynRuleAssign")}
+    DynRuleId ":+="  Term       -> DynRuleDef {cons("DynRuleAssignAdd")}
+
+    DynRuleId ":"   Rule "depends" "on" Term -> DynRuleDef {cons("SetDynRuleDepends")}
+
+    RuleDec "." Term            -> DynRuleId {cons("LabeledDynRuleId")}
+    RuleDec "+" Term            -> DynRuleId {cons("AddLabelDynRuleId")}
+    RuleDec                     -> DynRuleId {cons("DynRuleId")}
+
+    Id "." Term                 -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
+    Id                          -> DynRuleScopeId {cons("DynRuleScopeId")}
+
+  context-free syntax
+
+    Id                          -> RuleDec {cons("RDecNoArgs")}
+    Id "(" {Typedid ","}* ")"   -> RuleDec {cons("RDec")}
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"   -> RuleDec {cons("RDecT")}
+
+  sorts RuleNames
+  context-free syntax
+    {Id ","}*				  -> RuleNames
+    "~" Term				  -> RuleNames {cons("RuleNames")}
+
+    "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+
+  syntax
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+
+  context-free syntax
+    Strategy "/" RuleNames"\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+    Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+
+    Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+
+  priorities
+    <StrategyAngle-CF> <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("BA")}
+  > {
+
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    }
+  > <Strategy-CF> <LAYOUT?-CF> "=>" <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("AM")}
+
+  context-free priorities
+    StrategyAngle Term 		          -> Strategy {cons("BA")}
+  > "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+  > Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+  > Strategy "/" RuleNames "\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+  > Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+  > Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+
+module Stratego-Sugar-Rules
+imports Stratego-Sugar-Strategies
+exports
+
+  sorts RuleDef
+  context-free syntax
+    Id ":" Rule 				-> RuleDef {cons("RDefNoArgs")}
+    
+    Anno+ RuleDef               -> Def {cons("AnnoDef")}
+
+    Id "(" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDef")}
+
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDefT")}
+
+  sorts Rule RuleCond
+  context-free syntax
+    Term "->" Term           	    -> Rule {cons("RuleNoCond")} %% backward comp.
+    Term "->" Term "where" Strategy -> Rule {cons("Rule")}       %% backward comp.
+    Term "->" Term RuleCond+	    -> Rule {cons("Rule"), avoid}
+
+    "where" Strategy -> RuleCond {cons("WhereClause")}
+    "with"  Strategy -> RuleCond {cons("WithClause")}
+
+module Stratego-Sugar-Strategies
+imports
+  Stratego-Core-Strategies
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Constants
+  Stratego-Sugar-Signatures
+
+exports
+  context-free syntax
+    Id  		      "=" Strategy -> StrategyDef {cons("SDefNoArgs")}
+    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
+
+  context-free syntax
+    ID 				  	  -> Typedid {cons("DefaultVarDec")}
+
+  sorts Rule
+
+  sorts StrategyParen StrategyCurly StrategyAngle
+  context-free syntax
+
+    %% Abstraction
+
+    SVar "(" {Strategy ","}* ")" 	  -> Strategy {cons("Call")}
+
+    %% Match and build
+
+    "{" Strategy "}" 			  -> Strategy {cons("ScopeDefault")}
+
+     %%"<" Strategy ">" Term 		  -> Strategy {cons("BA")}
+     StrategyAngle Term 		  -> Strategy {cons("BA")}
+     "<" Strategy ">"			  -> StrategyAngle {bracket} %% {cons("AngleStrat")}
+
+    %% Combinators
+
+    Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
+
+    "rec" Id "(" Strategy ")" 		  -> Strategy {cons("Rec")}
+
+    "not"   "(" Strategy ")" 		  -> Strategy {cons("Not")}
+    "where" "(" Strategy ")" 		  -> Strategy {cons("Where")}
+    "with"  "(" Strategy ")" 		  -> Strategy {cons("With"), prefer}
+    "test"  "(" Strategy ")" 		  -> Strategy {cons("Test")}
+
+    %% Primitives
+
+    "prim" "(" String ")" 		  -> Strategy {cons("PrimNoArgs")}
+    "prim" "(" String "," {Term ","}* ")" -> Strategy {cons("Prim")}
+
+    %% Congruence operators
+
+    String 				  -> Strategy {cons("StrCong")}
+    Int 				  -> Strategy {cons("IntCong")}
+    Real 				  -> Strategy {cons("RealCong")}
+    Char 			 	  -> Strategy {cons("CharCong")}
+
+    String "(" {Strategy ","}* ")" 	  -> Strategy {cons("CongQ")}
+
+    %%"(" {Strategy ","}* ")" 		  -> Strategy {cons("TupleCong"),avoid}
+
+    Strategy StrategyCurly		  -> Strategy {cons("AnnoCong")}
+    
+    "{" Strategy "}"		  	  -> StrategyCurly {cons("StrategyCurly")}
+
+    "("  ")" 		  		  -> Strategy {cons("EmptyTupleCong")}
+   "(" Strategy  ")" 		          -> Strategy {bracket}
+    "(" Strategy "," {Strategy ","}+ ")"  -> Strategy {cons("TupleCong")}
+
+%%    Mod 	  			  -> Strategy {cons("ModCongNoArgs")}
+%%    Mod "(" {Strategy ","}* ")"	  	  -> Strategy {cons("ModCong")}
+%%    Id "^" Id				  -> Mod {cons("Mod")}
+    "[" {Strategy ","}* "]" 		  -> Strategy {cons("ListCongNoTail")}
+    "[" {Strategy ","}* "|" Strategy "]"  -> Strategy {cons("ListCong")}
+
+%%    Strategy "#" "(" StrategyInj ")" 	  -> Strategy {cons("ExplodeCong")}
+%%    Strategy "#" "(" Strategy ")" 	  -> Strategy {cons("ExplodeCong")}
+    Strategy "#" StrategyParen	  	  -> Strategy {cons("ExplodeCong")}
+
+  %% Syntactic sugar sugar
+
+  sorts SwitchCase
+  context-free syntax
+
+    SVar  		  		  -> Strategy {cons("CallNoArgs")}
+    "\\" Rule "\\" 			  -> Strategy {cons("LRule")}
+    "(" Rule ")" 			  -> Strategy {cons("SRule")}
+    Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
+    Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
+
+    "if" Strategy "then" Strategy 
+                  "else" Strategy "end"   -> Strategy {cons("CondChoice")}
+    "if" Strategy "then" Strategy "end"   -> Strategy {cons("IfThen")}
+
+    "switch" Strategy SwitchCase* "end"   -> Strategy {cons("SwitchChoiceNoOtherwise")}
+    "switch" Strategy SwitchCase*
+         "otherwise" ":" Strategy "end"   -> Strategy {cons("SwitchChoice")}
+
+    "case" Strategy ":" Strategy          -> SwitchCase {cons("SwitchCase")}
+
+    Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+
+    Term ":=" Term			  -> Strategy {cons("Assign")}
+
+  %% Priorities
+
+  context-free priorities
+    { Strategy StrategyCurly		  -> Strategy
+      Strategy "#" StrategyParen          -> Strategy
+    }
+  > { "!" Term 				  -> Strategy
+      "?" Term 				  -> Strategy
+    }
+  > StrategyAngle Term 		          -> Strategy
+  > Strategy "=>" Term 		  	  -> Strategy
+  > Strategy ";" Strategy 		  -> Strategy
+  > {right: 
+     Strategy "+" Strategy 		  -> Strategy
+     Strategy "<+" Strategy 		  -> Strategy
+     Strategy "+>" Strategy 		  -> Strategy
+     
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy
+    }
+
+  context-free priorities
+    Strategy 				  -> StrategyMid
+  > Strategy "+" Strategy 		  -> Strategy
+
+  context-free priorities
+    { Strategy StrategyCurly      -> Strategy
+      Strategy "#" StrategyParen  -> Strategy
+    }
+    .> Term ":=" Term -> Strategy
+
+
+module Stratego-Sugar-Terms
+imports
+  Stratego-Core-Terms
+  Stratego-Sugar-Strategies
+
+exports
+  sorts LID
+  context-free syntax
+    LId 			-> LID  {cons("ListVar")}
+    LID				-> Var  {cons("Var")}
+    LID				-> ID
+
+  context-free syntax
+    "_" PreTerm 		 -> PreTerm {cons("BuildDefaultPT")}
+    "_" Term 			 -> Term {cons("BuildDefault"),prefer}
+
+    Char 			 -> PreTerm {cons("Char")}
+
+    PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+    PreTerm                      -> Term {cons("NoAnnoList")}
+
+    "<" Strategy ">" Term 	 -> PreTerm {cons("App")}
+    "<" Strategy ">" Term 	 -> Term {cons("App"),prefer}
+
+    StrategyAngle		 -> PreTerm {cons("RootApp")}
+    StrategyAngle		 -> Term {cons("RootApp"),prefer}
+
+    "(" {Term ","}* ")" 	 -> PreTerm {cons("Tuple")}
+    "[" {Term ","}* "]" 	 -> PreTerm {cons("List")}
+    "[" {Term ","}* "|" Term "]" -> PreTerm {cons("ListTail")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Sugar-Signatures
+imports
+  Stratego-Core-Signatures
+  Stratego-Sugar-Constants
+
+exports
+
+  sorts Sort
+  context-free syntax
+    "[" {Sort ","}* "]"		 -> Sort {cons("SortList")}
+    "[" {Sort ","}* "|" Sort "]" -> Sort {cons("SortListTl")}
+    "(" {Sort ","}* ")"		 -> Sort {cons("SortTuple")}
+
+  sorts Kind
+  context-free syntax
+    "*" 			-> Kind {cons("Star")}
+    "**" 			-> Kind {cons("StarStar")}
+
+module Stratego-Core-Signatures
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+exports
+  sorts Sdecl
+  context-free syntax
+    "sorts" Sort* 		-> Sdecl {cons("Sorts")}
+    "constructors" Opdecl* 	-> Sdecl {cons("Constructors")}
+
+  sorts Sort
+  context-free syntax
+    LCID 			 -> Sort {cons("SortVar")}
+    UCID 			 -> Sort {cons("SortNoArgs")}
+    Id "(" {Sort ","}* ")" 	 -> Sort {cons("Sort")}
+
+  sorts Opdecl
+  context-free syntax
+    Id     ":" Type 		-> Opdecl {cons("OpDecl")}
+    String ":" Type 		-> Opdecl {cons("OpDeclQ")}
+           ":" Type 		-> Opdecl {cons("OpDeclInj")}
+
+  context-free syntax
+    "external" Id     ":" Type 	-> Opdecl {cons("ExtOpDecl")}
+    "external" String ":" Type 	-> Opdecl {cons("ExtOpDeclQ")}
+    "external"        ":" Type 	-> Opdecl {cons("ExtOpDeclInj")}
+
+  sorts Type ArgType ConstType FunType RetType
+  context-free syntax
+    Sort	                -> ConstType {cons("ConstType")}
+    {ArgType "*"}+ "->" RetType -> FunType {cons("FunType")}
+    "(" Type ")"                -> ArgType {bracket}
+    ConstType			-> ArgType
+    Type	                -> RetType
+    FunType			-> RetType {reject}
+
+    FunType			-> Type
+    ConstType			-> Type
+
+  %%%
+   %% Restriction is required for the Sort* in Sdecl: List(a) is
+   %% ambiguous.
+   %%%
+  context-free restrictions
+    Sort -/- [\(]
+
+module Stratego-Core-Terms
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+
+exports
+  sorts ID Var Wld
+  context-free syntax
+    Id 				-> Var  {cons("Var")}
+    Id				-> ID
+    %% ":" Var                  -> Var  {cons("SeqVar")}
+
+  sorts Term PreTerm
+  context-free syntax
+    Var 			 -> PreTerm 
+    Var 			 -> Term {prefer}
+
+    "_" 			 -> Wld {cons("Wld")}
+    Wld 			 -> PreTerm
+    Wld 			 -> Term {prefer}
+
+    Int 			 -> PreTerm {cons("Int")}
+    Real 			 -> PreTerm {cons("Real")}
+    String 			 -> PreTerm {cons("Str")}
+
+    Id "(" {Term ","}* ")" 	 -> PreTerm {cons("Op")}
+    String "(" {Term ","}* ")" 	 -> PreTerm {cons("OpQ")}
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+
+    PreTerm "{^" PreTerm "}"	 -> Term {cons("Anno")}
+
+    Var "@" Term 		 -> Term {cons("As"),prefer}
+    Var "@" PreTerm 		 -> PreTerm {cons("As")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Core-Strategies
+imports
+  Stratego-Core-Terms
+  Stratego-Core-Constants
+  Stratego-Core-Signatures
+
+exports
+  sorts Def
+  context-free syntax
+    StrategyDef					 -> Def 
+    Id						 -> SVar {cons("SVar")}
+    "let" Def* "in" Strategy "end"		 -> Strategy {cons("Let")}
+    SVar "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallT")}
+
+    "call" "(" Term "|" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallDynamic")}
+
+
+  sorts StrategyDef
+  context-free syntax
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDefT")}
+
+    Anno+ StrategyDef -> Def {cons("AnnoDef")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("ExtSDefInl")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
+
+
+  sorts Anno
+  context-free syntax
+    "extend"      -> Anno {cons("Extend")}
+    "override"    -> Anno {cons("Override")}
+    "internal"    -> Anno {cons("Internal")}
+%%  "sealed"      -> Anno {cons("Sealed")}
+%%  "extensible"  -> Anno {cons("Extensible")}
+%%  "overridable" -> Anno {cons("Overridable")}
+
+  lexical syntax
+    
+    "extend"      -> Keyword
+    "override"    -> Keyword
+    "internal"    -> Keyword
+    "sealed"      -> Keyword
+    "extensible"  -> Keyword
+    "overridable" -> Keyword
+
+  lexical restrictions
+  
+    "extend"
+    "override"
+    "internal"
+    "sealed"
+    "extensible"
+    "overridable" -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Typedid
+  context-free syntax
+    ID ":" Type 			  -> Typedid {cons("VarDec")}
+
+
+  sorts Strategy SVar StrategyParen StrategyMid 
+  context-free syntax
+    "(" Strategy ")"			  -> StrategyParen {cons("ParenStrat")}
+
+    "fail" 				  -> Strategy {cons("Fail")}
+    "id" 				  -> Strategy {cons("Id")}
+    "override" 			  -> Strategy {cons("Override")}
+
+    %% Match and build
+
+    "?" Term 				  -> Strategy {cons("Match")}
+    "!" Term 				  -> Strategy {cons("Build")}
+    "{" {ID ","}* ":" Strategy "}" 	  -> Strategy {cons("Scope")}
+
+    %% Combinators
+
+    Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+    Strategy "<" StrategyMid 
+             "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    Strategy 				  -> StrategyMid
+
+    %% Primitives
+
+    "prim" "(" String "," {Strategy ","}* "|" {Term ","}*")"  -> Strategy {cons("PrimT")}
+
+    %% Traversal
+
+    "some" "(" Strategy ")" 		  -> Strategy {cons("Some")}
+    "one" "(" Strategy ")" 		  -> Strategy {cons("One")}
+    "all" "(" Strategy ")" 		  -> Strategy {cons("All")}
+
+  %% Priorities
+
+  context-free priorities
+    { "!" Term 				  -> Strategy {cons("Build")}
+      "?" Term 				  -> Strategy {cons("Match")}
+    }
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+  > {right: 
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    }
+
+  context-free syntax
+    "import-term" "(" ModName ")" -> Strategy {cons("ImportTerm")}
+
+module Stratego-Core-Modules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Strategies
+  Stratego-Core-Signatures
+
+exports 
+  sorts Module
+  context-free syntax
+    "module" ModName Decl* 	 -> Module {cons("Module")}
+    "specification" Decl*	 -> Module {cons("Specification")}
+
+  sorts Decl 
+  context-free syntax
+    "imports" ImportModName* 	-> Decl {cons("Imports")}
+    "strategies" Def* 		-> Decl {cons("Strategies")}
+    "signature" Sdecl*  	-> Decl {cons("Signature")}
+
+  sorts ImportModName
+  context-free syntax
+    ModName              -> ImportModName {cons("Import")}
+  syntax
+    <ModName-CF> "/" "-" -> <ImportModName-CF> {cons("ImportWildcard")}
+
+module Stratego-Sugar-Modules
+imports
+  Stratego-Core-Modules
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Overlays
+  Stratego-Sugar-Rules
+
+exports 
+
+  sorts Decl Def
+  context-free syntax
+    "rules" Def* 		-> Decl {cons("Rules")}
+    "overlays" Overlay* 	-> Decl {cons("Overlays")}
+
+    RuleDef 			-> Def 
+
+
+module Stratego-Core-Constants
+exports
+  sorts Int Real String StrChar
+  lexical syntax
+    [\-]? [0-9]+ 		-> Int
+    [\-]? [0-9]+ [\.] [0-9]+ 	-> Real
+    "\"" StrChar* "\"" 		-> String
+    ~[\"\\] 			-> StrChar
+    [\\] [\"tnr\\] 		-> StrChar
+
+
+module Stratego-Sugar-Constants
+imports Stratego-Core-Identifiers Stratego-Core-Constants
+exports
+  sorts Char CharChar
+  lexical syntax
+    "'" CharChar "'"		-> Char
+    ~[\']			-> CharChar
+    [\\] [\'ntr\ ]		-> CharChar
+    Char		 	-> Id {reject}
+
+module Stratego-Core-Identifiers
+exports
+  sorts ModName ModNamePart
+  lexical syntax
+    {ModNamePart "/"}+ -> ModName
+    [a-zA-Z\.\_] [a-zA-Z0-9\'\.\-\_]* -> ModNamePart
+  lexical restrictions
+    ModName -/- [a-zA-Z0-9\'\.\-\_]
+  lexical syntax
+    "imports" 		-> ModName {reject}
+    "overlays" 		-> ModName {reject}
+    "rules" 		-> ModName {reject}
+    "signature" 	-> ModName {reject}
+    "strategies" 	-> ModName {reject}
+
+  sorts Id LId LCID UCID Wld
+  lexical syntax
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]*     -> Id
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]* "*" -> LId
+    [\'] [a-z]+                       -> Id
+
+    [a-z] [a-zA-Z0-9\'\-\_]*  -> LCID
+    [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
+
+  lexical restrictions
+    Id   -/- [a-zA-Z0-9\'\-\_\*]
+    LId  -/- [a-zA-Z0-9\'\-\_]
+    LCID -/- [a-zA-Z0-9\'\-\_]
+    UCID -/- [a-zA-Z0-9\'\-\_]
+
+  lexical syntax
+    "_"     -> Id {reject}
+    "'"     -> Id {reject}
+
+    Keyword -> Id   {reject}
+    Keyword -> LId  {reject}
+    Keyword -> LCID {reject}
+    Keyword -> UCID {reject}
+
+  lexical restrictions
+    "all"
+    "case" %% not reserved kw
+    "constructors"
+    "else" %% not reserved kw
+    "end" %% not reserved kw
+    "external" %% not reserved kw
+    "fail"
+    "id"
+    "if" %% not reserved kw
+    "in"
+    "imports" %% not reserved kw
+    "let"
+    "module"
+    "not"
+    "one"
+    "overlays"
+    "otherwise" %% not reserved kw
+    "prim"
+    "rec" %% not reserved kw
+    "rules"
+    "script"
+    "signature"
+    "some"
+    "sorts"
+    "strategies"
+    "stratego"
+    "switch" %% not reserved kw
+    "test"
+    "then" %% not reserved kw
+    "where"
+    "import-term"
+      -/- [a-zA-Z0-9\'\-\_]
+  
+  context-free restrictions
+    Wld -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Keyword
+  lexical syntax
+    "all"               -> Keyword
+    "constructors" 	-> Keyword
+    "fail" 		-> Keyword
+    "id" 		-> Keyword
+    "in" 		-> Keyword
+    "let" 		-> Keyword
+    "module" 		-> Keyword
+    "not" 		-> Keyword
+    "one" 		-> Keyword
+    "overlays" 		-> Keyword
+    "prim" 		-> Keyword
+    "rules" 		-> Keyword
+    "script" 		-> Keyword
+    "signature" 	-> Keyword
+    "some" 		-> Keyword
+    "sorts" 		-> Keyword
+    "strategies" 	-> Keyword
+    "stratego" 		-> Keyword
+    "test" 		-> Keyword
+    "where" 		-> Keyword
+    "import-term"	-> Keyword
+
+
+module Stratego-Core-Layout
+exports
+  sorts Ws ShortCom LongCom CommChar Asterisk Eof 
+  lexical syntax
+    [\t\ \n\r]			-> Ws
+
+    "//" ~[\n]* ([\n] | Eof)	-> ShortCom
+    "/*" CommChar* "*/"	-> LongCom
+				-> Eof  
+
+    ~[\*]     -> CommChar
+
+    "*"       -> Asterisk
+    Asterisk  -> CommChar
+
+  lexical restrictions
+    Asterisk -/- [\/]
+    Eof      -/- ~[]
+
+  lexical syntax
+    ShortCom 	-> LAYOUT
+    LongCom 	-> LAYOUT
+    Ws 		-> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\*]
+    LAYOUT? -/- [\/].[\/]
+
+module Stratego-Sugar-Layout
+imports Stratego-Core-Layout
+%%exports
+%%  sorts VeryLongCom Eof VLCchar Backslash
+%%  lexical syntax
+%%    "\\end{code}" VLCchar* "\\begin{code}" -> VeryLongCom
+%%    "\\begin{code}" 			   -> VeryLongCom
+%%    "\\end{code}" VLCchar* Eof 		   -> VeryLongCom
+%%    "\\literate" VLCchar* "\\begin{code}"  -> VeryLongCom
+%%    ~[\\] 				   -> VLCchar
+%%    Backslash 				   -> VLCchar
+%%    [\\] 				   -> Backslash
+
+%%  lexical restrictions
+%%    Backslash -/- [b].[e].[g].[i].[n].[\{].[c].[o].[d].[e].[\}]
+%%    Eof -/- ~[]
+
+%%  lexical syntax
+%%    VeryLongCom -> LAYOUT
+
+
+
+module Stratego-Sugar
+imports
+  Stratego-Sugar-Layout
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Constants 
+  Stratego-Sugar-Modules
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+  Stratego-Sugar-DynamicRules
+  Stratego-Sugar-Overlays
+
+hiddens
+  context-free start-symbols Module
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Stratego-Sugar.tbl
===================================================================
(Binary files differ)


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/Stratego-Sugar.tbl
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/WebDSL.tbl
===================================================================
(Binary files differ)


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/WebDSL.tbl
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.def
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.def	2009-11-19 13:15:23 UTC (rev 20270)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Grammars/bad-performance-stratego-sugar.def	2009-11-19 14:13:43 UTC (rev 20271)
@@ -1,632 +0,0 @@
-definition
-
-module Stratego-Sugar-Overlays
-imports Stratego-Core-Identifiers Stratego-Sugar-Terms
-
-exports
-  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR
-
-  lexical syntax
-    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover}
-    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
-    ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {recover}
-    WATERTOKEN                     -> WATER               
-    WATERTOKENSEPARATOR            -> WATER               
-
-  lexical restrictions
-    WATERTOKEN -/- [A-Za-z0-9\_]
-
-  context-free syntax
-    WATER -> LAYOUT {cons("WATER")}
-
-  (
-
-  sorts WATEREOF
-
-  lexical restrictions
-    WATEREOF -/- ~[]
-
-  lexical syntax
-    %% Lexical insertion recovery rules                     
-                                        -> "="              {recover, cons("INSERTION")}
-                                        -> "|}"             {recover, cons("INSERTION")}
-                                        -> "("              {recover, cons("INSERTION")}
-                                        -> "|"              {recover, cons("INSERTION")}
-                                        -> ","              {recover, cons("INSERTION")}
-                                        -> ">"              {recover, cons("INSERTION")}
-                                        -> "\\"             {recover, cons("INSERTION")}
-                                        -> "]"              {recover, cons("INSERTION")}
-                                        -> "sorts"          {recover, cons("INSERTION")}
-                                        -> "constructors"   {recover, cons("INSERTION")}
-                                        -> "external"       {recover, cons("INSERTION")}
-                                        -> "end"            {recover, cons("INSERTION")}
-                                        -> ":"              {recover, cons("INSERTION")}
-                                        -> "}"              {recover, cons("INSERTION")}
-                                        -> ")"              {recover, cons("INSERTION")}
-                                        -> "module"         {recover, cons("INSERTION")}
-                                        -> "specification"  {recover, cons("INSERTION")}
-                                        -> "imports"        {recover, cons("INSERTION")}
-                                        -> "strategies"     {recover, cons("INSERTION")}
-                                        -> "signature"      {recover, cons("INSERTION")}
-                                        -> "rules"          {recover, cons("INSERTION")}
-                                        -> "overlays"       {recover, cons("INSERTION")}
-    "\""                                -> INSERTOPENQUOTE0 {recover}
-    INSERTOPENQUOTE0 StrChar* "\n"      -> String           {cons("INSERTEND")}
-    INSERTOPENQUOTE0 StrChar* WATEREOF  -> String           {cons("INSERTEND")}
-    "'"                                 -> INSERTOPENQUOTE1 {recover}
-    INSERTOPENQUOTE1 CharChar "\n"      -> Char             {cons("INSERTEND")}
-    INSERTOPENQUOTE1 CharChar WATEREOF  -> Char             {cons("INSERTEND")}
-    "/*"                                -> INSERTSTART0     {recover}
-    INSERTSTART0 CommChar* WATEREOF     -> LongCom          {cons("INSERTEND")}
-
-  syntax
-    %% Kernel syntax insertion recovery rules   
-
-  )
-
-  (
-
-  sorts Overlay
-
-  context-free syntax
-    Id "=" Term                   -> Overlay {cons("OverlayNoArgs")}
-    Id "(" {Id ","}* ")" "=" Term -> Overlay {cons("Overlay")}
-
-  )
-
-module Stratego-Sugar-DynamicRules
-imports Stratego-Core-Identifiers Stratego-Sugar-Strategies Stratego-Sugar-Rules
-
-exports
-  sorts ScopeLabels
-
-  context-free syntax
-    "{|" ScopeLabels ":" Strategy "|}" -> Strategy    {cons("DynRuleScope")}
-    {DynRuleScopeId ","}*              -> ScopeLabels 
-    "~" Term                           -> ScopeLabels {cons("ScopeLabels")}
-
-  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
-
-  context-free syntax
-    "rules" "(" DynRuleDef* ")"            -> Strategy       {cons("GenDynRules")}
-    Id "+" Term                            -> DynRuleDef     {cons("AddScopeLabel")}
-    DynRuleId ":-" Term                    -> DynRuleDef     {cons("UndefineDynRule")}
-    DynRuleId ":" Rule                     -> DynRuleDef     {cons("SetDynRule")}
-    DynRuleId ":+" Rule                    -> DynRuleDef     {cons("AddDynRule")}
-    DynRuleId ":" Term                     -> DynRuleDef     {cons("SetDynRuleMatch")}
-    DynRuleId ":=" Term                    -> DynRuleDef     {cons("DynRuleAssign")}
-    DynRuleId ":+=" Term                   -> DynRuleDef     {cons("DynRuleAssignAdd")}
-    DynRuleId ":" Rule "depends" "on" Term -> DynRuleDef     {cons("SetDynRuleDepends")}
-    RuleDec "." Term                       -> DynRuleId      {cons("LabeledDynRuleId")}
-    RuleDec "+" Term                       -> DynRuleId      {cons("AddLabelDynRuleId")}
-    RuleDec                                -> DynRuleId      {cons("DynRuleId")}
-    Id "." Term                            -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
-    Id                                     -> DynRuleScopeId {cons("DynRuleScopeId")}
-
-  context-free syntax
-    Id                                           -> RuleDec {cons("RDecNoArgs")}
-    Id "(" {Typedid ","}* ")"                    -> RuleDec {cons("RDec")}
-    Id "(" {Typedid ","}* "|" {Typedid ","}* ")" -> RuleDec {cons("RDecT")}
-
-  sorts RuleNames
-
-  context-free syntax
-    {Id ","}*                    -> RuleNames 
-    "~" Term                     -> RuleNames {cons("RuleNames")}
-    "/" RuleNames "\\*" Strategy -> Strategy  {cons("DynRuleIntersectFix")}
-
-  syntax
-    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>                                               -> <Strategy-CF> {cons("DynRuleUnionFix")}
-    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>                                              -> <Strategy-CF> {cons("DynRuleUnionFix")}
-    "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>  -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
-    "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF> -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
-
-  context-free syntax
-    Strategy "/" RuleNames "\\" Strategy               -> Strategy {cons("DynRuleIntersect"), right}
-    Strategy "\\" RuleNames "/" Strategy               -> Strategy {cons("DynRuleUnion"), right}
-    Strategy "/" RuleNames "\\" RuleNames "/" Strategy -> Strategy {cons("DynRuleIntersectUnion"), right}
-
-  priorities
-    <StrategyAngle-CF> <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("BA")} >
-    { "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF> ->
-      <Strategy-CF> {cons("DynRuleUnionFix")}
-      "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF> ->
-      <Strategy-CF> {cons("DynRuleUnionFix")}
-      
-      "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
-      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
-      
-      "/" <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
-      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")} } >
-    <Strategy-CF> <LAYOUT?-CF> "=>" <LAYOUT?-CF> <Term-CF> -> <Strategy-CF>
-    {cons("AM")}
-
-  context-free priorities
-    StrategyAngle Term -> Strategy {cons("BA")} >
-    "/" RuleNames "\\*" Strategy -> Strategy {cons("DynRuleIntersectFix")} >
-    Strategy "=>" Term -> Strategy {cons("AM")} >
-    Strategy "/" RuleNames "\\" Strategy -> Strategy
-    {cons("DynRuleIntersect"), right} >
-    Strategy "\\" RuleNames "/" Strategy -> Strategy
-    {cons("DynRuleUnion"), right} >
-    Strategy "/" RuleNames "\\" RuleNames "/" Strategy -> Strategy
-    {cons("DynRuleIntersectUnion"), right} >
-    Strategy ";" Strategy -> Strategy {cons("Seq"), right}
-
-module Stratego-Sugar-Rules
-imports Stratego-Sugar-Strategies
-
-exports
-  sorts RuleDef
-
-  context-free syntax
-    Id ":" Rule                                           -> RuleDef {cons("RDefNoArgs")}
-    Anno+ RuleDef                                         -> Def     {cons("AnnoDef")}
-    Id "(" {Typedid ","}* ")" ":" Rule                    -> RuleDef {cons("RDef")}
-    Id "(" {Typedid ","}* "|" {Typedid ","}* ")" ":" Rule -> RuleDef {cons("RDefT")}
-
-  sorts Rule RuleCond
-
-  context-free syntax
-    Term "->" Term                  -> Rule     {cons("RuleNoCond")}
-    Term "->" Term "where" Strategy -> Rule     {cons("Rule")}
-    Term "->" Term RuleCond+        -> Rule     {cons("Rule"), avoid}
-    "where" Strategy                -> RuleCond {cons("WhereClause")}
-    "with" Strategy                 -> RuleCond {cons("WithClause")}
-
-module Stratego-Sugar-Strategies
-imports Stratego-Core-Strategies Stratego-Sugar-Terms Stratego-Sugar-Constants
-        Stratego-Sugar-Signatures
-
-exports
-  context-free syntax
-    Id "=" Strategy                        -> StrategyDef {cons("SDefNoArgs")}
-    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
-
-  context-free syntax
-    ID -> Typedid {cons("DefaultVarDec")}
-
-  sorts Rule
-
-  sorts StrategyParen StrategyCurly StrategyAngle
-
-  context-free syntax
-    SVar "(" {Strategy ","}* ")"          -> Strategy      {cons("Call")}

(628 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Thu Nov 19 15:55:17 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 19 Nov 2009 14:55:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20272 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <200911191455.nAJEtHXZ002592@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-19 14:55:16 +0000 (Thu, 19 Nov 2009)
New Revision: 20272

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20272&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str

Log:
Entities example: allow reporting multiple errors on elements Stratego considers the same term.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-19 14:13:43 UTC (rev 20271)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-19 14:55:16 UTC (rev 20272)
@@ -48,9 +48,9 @@
       alltd(record-entity)
     with
       // Collect all feedback markers
-      errors   := <collect-all(constraint-error)> ast;
-      warnings := <collect-all(constraint-warning)> ast;
-      notes    := <collect-all(constraint-note)> ast
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast;
+      notes    := <collect-all(constraint-note), conc> ast
 
   /**
    * Records the definition of an entity in a dynamic rule GetEntity.



From m.dejonge at tudelft.nl  Thu Nov 19 17:31:15 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 19 Nov 2009 16:31:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20273 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	TestInput/Practice src/evaluating src/tests
Message-ID: <200911191631.nAJGVF5P004139@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-19 16:31:14 +0000 (Thu, 19 Nov 2009)
New Revision: 20273

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20273&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/nearbyRegions.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/twoRegions.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test1.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java

Log:
- compares expected regions with skipped regions
- evaluation results: INTRODUCED_REGION, MERGED_REGION
- refactoring TreeMap instead of separate result lists

Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/nearbyRegions.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/nearbyRegions.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/nearbyRegions.java	2009-11-19 16:31:14 UTC (rev 20273)
@@ -0,0 +1,28 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+
+class X {
+
+	private int correctMethod1() {
+		corr2();
+		return corrInt;
+	}
+
+	private int erroneousMethod() {
+		if(true){ //@START
+			foo();
+			bar(); //@END
+	}
+
+	private int correctMethod2() {
+		if (true) { //@START
+			corrLine2(); //}
+		else
+			return 4; //@END
+		corrLine3();
+		corrLine4();
+	}
+}

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test1.java	2009-11-19 14:55:16 UTC (rev 20272)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test1.java	2009-11-19 16:31:14 UTC (rev 20273)
@@ -1,29 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-
-class X {
-
-	private int correctMethod1() {
-		corr2();
-		return corrInt;
-	}
-
-	private int erroneousMethod() {
-		if(true){ //@START
-			foo();
-			bar(); //@END
-	}
-
-	private int correctMethod2() {
-		int corrLine1;
-		if (true) { //@START
-			corrLine2(); //}
-		else
-			return 4; //@END
-		corrLine3();
-		corrLine4();
-	}
-}

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/twoRegions.java (from rev 20270, sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test1.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/twoRegions.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/twoRegions.java	2009-11-19 16:31:14 UTC (rev 20273)
@@ -0,0 +1,36 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+
+class X {
+
+	private int correctMethod1() {
+		corr2();
+		return corrInt;
+	}
+
+	private int erroneousMethod() {
+		if(true){ //@START
+			foo();
+			bar(); //@END
+	}
+		
+	private int correctMethod1() {
+		corr2();
+		return corrInt;
+	}
+
+	private int correctMethod2() {
+		correct();
+		int i;
+		i=1;
+		if (true) { //@START
+			corrLine2(); //}
+		else
+			return 4; //@END
+		corrLine3();
+		corrLine4();
+	}
+}


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/twoRegions.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java	2009-11-19 14:55:16 UTC (rev 20272)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java	2009-11-19 16:31:14 UTC (rev 20273)
@@ -4,8 +4,10 @@
 	EXACT,
 	GOOD,
 	POOR,
+	TOO_SMALL,
 	MIS_DIAGNOSED,
-	NO_REGION_FOUND, 
-	TOO_SMALL,
+	MERGED_REGION,
+	INTRODUCED_REGION,
+	NO_REGION_FOUND,
 	WRONG_DATA
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-19 14:55:16 UTC (rev 20272)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-19 16:31:14 UTC (rev 20273)
@@ -2,42 +2,39 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.Iterator;
+import java.util.TreeMap;
 
 public class Statistics {
-	private ArrayList<String> exactResults;
-	private ArrayList<String> goodResults;
-	private ArrayList<String> poorResults;
-	private ArrayList<String> tooSmallResults;
-	private ArrayList<String> misDignosedResults;
-	private ArrayList<String> diagnoseFailedResults;
 	
-	private ArrayList<String> errorInDataResults;
 	private int numberOfFiles;
 	private int numberOfRegions;
+	private TreeMap<Evaluation, ArrayList<String>> resultsCategorised;
 	
-	public HashMap<Evaluation, String> getOverviewResults(){
-		HashMap<Evaluation, String> overview = new HashMap<Evaluation, String>();
-		overview.put(Evaluation.EXACT, ""+exactResults.size());
-		overview.put(Evaluation.GOOD, ""+goodResults.size());
-		overview.put(Evaluation.POOR, ""+poorResults.size());
-		overview.put(Evaluation.TOO_SMALL, ""+tooSmallResults.size());
-		overview.put(Evaluation.MIS_DIAGNOSED, ""+misDignosedResults.size());
-		overview.put(Evaluation.NO_REGION_FOUND, ""+diagnoseFailedResults.size());
-		overview.put(Evaluation.WRONG_DATA, ""+errorInDataResults.size());
+	public TreeMap<Evaluation, ArrayList<String>> getResultsCategorised() {
+		return resultsCategorised;
+	}
+	
+	public TreeMap<Evaluation, String> getOverviewResults(){
+		TreeMap<Evaluation, String> overview = new TreeMap<Evaluation, String>();
+		for (Evaluation eval : Evaluation.values()) {
+			overview.put(eval, ""+resultsCategorised.get(eval).size());
+		}
 		return overview;		
 	}
 	
 	public Statistics() {
-		exactResults=new ArrayList<String>();
-		goodResults=new ArrayList<String>();
-		poorResults=new ArrayList<String>();
-		tooSmallResults=new ArrayList<String>();
-		misDignosedResults=new ArrayList<String>();
-		diagnoseFailedResults=new ArrayList<String>();
-		errorInDataResults=new ArrayList<String>();
+		resultsCategorised=new TreeMap<Evaluation, ArrayList<String>>();
+		fillResultMap();
 		numberOfFiles=0;
 		numberOfRegions=0;
 	}
+
+	private void fillResultMap() {
+		for (Evaluation eval : Evaluation.values()){
+			resultsCategorised.put(eval, new ArrayList<String>());
+		}
+	}
 	
 	public void processFileResult(Testcase testFile) {
 		for (Evaluation result : testFile.getRegionEvaluations()) {
@@ -48,56 +45,11 @@
 		}
 		numberOfFiles++;
 	}
-
-	private ArrayList<String> getResultList(Evaluation result) {
-		switch (result) {
-			case EXACT:
-				return exactResults;		
-			case GOOD:
-				return goodResults;				
-			case POOR:
-				return poorResults;				
-			case TOO_SMALL:
-				return tooSmallResults;				
-			case MIS_DIAGNOSED:
-				return misDignosedResults;				
-			case NO_REGION_FOUND:
-				return diagnoseFailedResults;				
-			case WRONG_DATA:
-				return errorInDataResults;				
-			default:
-				return null;
-			}
-	}
 	
-	public ArrayList<String> getExactResults() {
-		return exactResults;
+	public ArrayList<String> getResultList(Evaluation eval) {
+		return resultsCategorised.get(eval);
 	}
 
-	public ArrayList<String> getGoodResults() {
-		return goodResults;
-	}
-
-	public ArrayList<String> getPoorResults() {
-		return poorResults;		
-	}
-
-	public ArrayList<String> getTooSmallResults() {
-		return tooSmallResults;
-	}
-
-	public ArrayList<String> getMisDiagnosedResults() {
-		return misDignosedResults;
-	}
-
-	public ArrayList<String> getDiagnoseFailedResults() {
-		return diagnoseFailedResults;
-	}
-
-	public ArrayList<String> getErrorInDataResults() {
-		return errorInDataResults;
-	}
-
 	public int getNumberOfFiles() {
 		return numberOfFiles;
 		
@@ -106,5 +58,4 @@
 	public int getNumberOfRegions() {
 		return numberOfRegions;
 	}
-
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-19 14:55:16 UTC (rev 20272)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-19 16:31:14 UTC (rev 20273)
@@ -38,9 +38,19 @@
 	public void compareRegions(String parseTable) throws Exception {
 		ArrayList<ErroneousRegion> expectedRegions=ErroneousRegion.collectExpectedRegions(filePath);
 		ArrayList<ErroneousRegion> skippedRegions=ErroneousRegion.collectSkippedRegions(filePath, parseTable);
-		for (int j = 0; j < expectedRegions.size(); j++) {
+		int compareNumber=expectedRegions.size();
+		if(expectedRegions.size()>skippedRegions.size()){
+			regionEvaluation.add(Evaluation.MERGED_REGION);
+			compareNumber=Math.min(1, skippedRegions.size()); //it's not clear how to match the regions (except the first)
+		}
+		if(expectedRegions.size() < skippedRegions.size()){
+			regionEvaluation.add(Evaluation.INTRODUCED_REGION);
+			compareNumber=Math.min(1, expectedRegions.size());  //region matching not clear
+		}		
+		for (int j = 0; j < compareNumber; j++) {
 			ErroneousRegion expected = expectedRegions.get(j);
-			processRegionData(expected.getStartLine(), expected.getEndLine(), 0, 0);
+			ErroneousRegion skipped = skippedRegions.get(j);
+			processRegionData(expected.getStartLine(), expected.getEndLine(), skipped.getStartLine(), skipped.getEndLine());
 		}
 	}
 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java	2009-11-19 14:55:16 UTC (rev 20272)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java	2009-11-19 16:31:14 UTC (rev 20273)
@@ -9,9 +9,10 @@
 	
 	@Test
 	public void Evaluate() throws Exception{		
-		Testsuite t = new Testsuite("TestInput");
+		Testsuite t = new Testsuite("TestInput/Common, Stratego + Java");
 		t.setRootDir("TestInput");
-		t.addDir("Common")
+		//t.addDir("Common")
+		t.addDir("Practice")
 			.addExtension("java")
 			.addExtension("str")
 			.addLanguage("str", "Grammars/Stratego-Sugar.tbl")
@@ -19,7 +20,8 @@
 			.addLanguage("str.java", "Grammars/Stratego-Java-15.tbl")
 			.addLanguage("java", "Grammars/Java-15.tbl");
 		t.runTestcases();
-		t.getStatistics().getOverviewResults().toString();
+		System.out.println(t.getTestSuiteName());
+		System.out.println(t.getStatistics().getOverviewResults().toString());
 	}
 
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java	2009-11-19 14:55:16 UTC (rev 20272)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java	2009-11-19 16:31:14 UTC (rev 20273)
@@ -18,38 +18,40 @@
 	
 	@Test
 	public void testFileLists(){		
-		assertEquals(0, statistics.getExactResults().size());
+		assertEquals(0, statistics.getResultList(Evaluation.EXACT).size());
 		processTestData();
 		assertEquals(9, statistics.getNumberOfFiles());
-		assertEquals(2, statistics.getExactResults().size());
-		assertTrue(statistics.getExactResults().contains("Exact1.java"));
-		assertTrue(statistics.getExactResults().contains("Exact2.java"));
-		assertEquals(1, statistics.getGoodResults().size());
-		assertTrue(statistics.getGoodResults().contains("Good.java"));
-		assertEquals(1, statistics.getPoorResults().size());
-		assertTrue(statistics.getPoorResults().contains("Bad.java"));
-		assertEquals(2, statistics.getErrorInDataResults().size());
-		assertTrue(statistics.getErrorInDataResults().contains("ErrorInData1.java"));
-		assertTrue(statistics.getErrorInDataResults().contains("ErrorInData2.java"));
-		assertEquals(1, statistics.getTooSmallResults().size());
-		assertTrue(statistics.getTooSmallResults().contains("TooSmall.java"));
-		assertEquals(1, statistics.getMisDiagnosedResults().size());
-		assertTrue(statistics.getMisDiagnosedResults().contains("MisDiagnosed.java"));
-		assertEquals(1, statistics.getDiagnoseFailedResults().size());
-		assertTrue(statistics.getDiagnoseFailedResults().contains("Failed.java"));
+		assertEquals(2, statistics.getResultList(Evaluation.EXACT).size());
+		assertTrue(statistics.getResultList(Evaluation.EXACT).contains("Exact1.java"));
+		assertTrue(statistics.getResultList(Evaluation.EXACT).contains("Exact2.java"));
+		assertEquals(1, statistics.getResultList(Evaluation.GOOD).size());
+		assertTrue(statistics.getResultList(Evaluation.GOOD).contains("Good.java"));
+		assertEquals(1, statistics.getResultList(Evaluation.POOR).size());
+		assertTrue(statistics.getResultList(Evaluation.POOR).contains("Bad.java"));
+		assertEquals(2, statistics.getResultList(Evaluation.WRONG_DATA).size());
+		assertTrue(statistics.getResultList(Evaluation.WRONG_DATA).contains("ErrorInData1.java"));
+		assertTrue(statistics.getResultList(Evaluation.WRONG_DATA).contains("ErrorInData2.java"));
+		assertEquals(1, statistics.getResultList(Evaluation.TOO_SMALL).size());
+		assertTrue(statistics.getResultList(Evaluation.TOO_SMALL).contains("TooSmall.java"));
+		assertEquals(1, statistics.getResultList(Evaluation.MIS_DIAGNOSED).size());
+		assertTrue(statistics.getResultList(Evaluation.MIS_DIAGNOSED).contains("MisDiagnosed.java"));
+		assertEquals(1, statistics.getResultList(Evaluation.NO_REGION_FOUND).size());
+		assertTrue(statistics.getResultList(Evaluation.NO_REGION_FOUND).contains("Failed.java"));
 	}
 	
 	@Test
 	public void testResultOverView(){
 		processTestData();
-		assertEquals(7, statistics.getOverviewResults().size());
+		assertEquals(9, statistics.getOverviewResults().size());
 		assertEquals("2", statistics.getOverviewResults().get(Evaluation.EXACT));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.GOOD));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.POOR));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.TOO_SMALL));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.MIS_DIAGNOSED));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.NO_REGION_FOUND));
-		assertEquals("2", statistics.getOverviewResults().get(Evaluation.WRONG_DATA));	
+		assertEquals("2", statistics.getOverviewResults().get(Evaluation.WRONG_DATA));
+		assertEquals("0", statistics.getOverviewResults().get(Evaluation.INTRODUCED_REGION));
+		assertEquals("0", statistics.getOverviewResults().get(Evaluation.MERGED_REGION));
 	}
 	
 	private void processTestData(){

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-19 14:55:16 UTC (rev 20272)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-19 16:31:14 UTC (rev 20273)
@@ -109,5 +109,35 @@
 		assertEquals(Evaluation.WRONG_DATA, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
+	@Test
+	public void testExactRegion() throws Exception{
+		Testcase exactRegion = new Testcase("TestInput/Common/test2.java");
+		exactRegion.compareRegions("Grammars/Java-15.tbl");
+		assertEquals(1, exactRegion.getRegionEvaluations().size());
+		assertEquals(Evaluation.EXACT, exactRegion.getRegionEvaluations().get(0));
+	}
 	
+	@Test
+	public void testTwoRegions() throws Exception{
+		Testcase twoRegions = new Testcase("TestInput/Practice/twoRegions.java");
+		twoRegions.compareRegions("Grammars/Java-15.tbl");
+		assertEquals(2, twoRegions.getRegionEvaluations().size());
+		//assertEquals(Evaluation.EXACT, twoRegions.getRegionEvaluations().get(0));
+	}
+	
+	@Test
+	public void testNearbyRegions() throws Exception{
+		Testcase nearbyRegions = new Testcase("TestInput/Practice/nearbyRegions.java");
+		nearbyRegions.compareRegions("Grammars/Java-15.tbl");
+		assertEquals(2, nearbyRegions.getRegionEvaluations().size());
+		assertEquals(Evaluation.MERGED_REGION, nearbyRegions.getRegionEvaluations().get(0));
+	}
+	
+	@Test
+	public void testNoExpectedRegion() throws Exception{
+		Testcase nearbyRegions = new Testcase("TestInput/Practice/erroneous.app");
+		nearbyRegions.compareRegions("Grammars/WebDSL.tbl");
+		assertEquals(1, nearbyRegions.getRegionEvaluations().size());
+		assertEquals(Evaluation.INTRODUCED_REGION, nearbyRegions.getRegionEvaluations().get(0));
+	}
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-19 14:55:16 UTC (rev 20272)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-19 16:31:14 UTC (rev 20273)
@@ -33,7 +33,7 @@
 	@Test
 	public void test_allDir_allExtensions() throws Exception{
 		myTestcases.runTestcases();
-		Assert.assertEquals(5, myTestcases.getStatistics().getNumberOfFiles());
+		Assert.assertEquals(6, myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
@@ -42,7 +42,7 @@
 					.addDir("Common")
 					.addExtension("java");
 		myTestcases.runTestcases();
-		Assert.assertEquals(3, myTestcases.getStatistics().getNumberOfFiles());
+		Assert.assertEquals(4, myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
@@ -57,7 +57,7 @@
 	@Test
 	public void test_Default_isAll() throws Exception{
 		myTestcases.runTestcases();
-		Assert.assertEquals(5, myTestcases.getStatistics().getNumberOfFiles());
+		Assert.assertEquals(6, myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
@@ -67,7 +67,7 @@
 		myTestcases.setAllExtensions(true);	
 		myTestcases.setAllDirectories(true);
 		myTestcases.runTestcases();
-		Assert.assertEquals(5, myTestcases.getStatistics().getNumberOfFiles());
+		Assert.assertEquals(6, myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
@@ -75,7 +75,7 @@
 		myTestcases.processFiles("Common", "");
 		Assert.assertEquals(3, myTestcases.getStatistics().getNumberOfFiles());	
 		myTestcases.processFiles("Practice", "");
-		Assert.assertEquals(5, myTestcases.getStatistics().getNumberOfFiles());	
+		Assert.assertEquals(6, myTestcases.getStatistics().getNumberOfFiles());	
 	}
 	
 	



From L.C.L.Kats at tudelft.nl  Thu Nov 19 19:54:04 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 19 Nov 2009 18:54:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20274 - LennartKats -
	in spoofax-imp/trunk: . org.strategoxt.imp.editors.aterm
	org.strategoxt.imp.editors.aterm/editor
	org.strategoxt.imp.editors.aterm/syntax
	org.strategoxt.imp.editors.sdf/editor
	org.strategoxt.imp.editors.sdf/trans
	org.strategoxt.imp.generator/lib
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.generator/src/sdf2imp/util
	org.strategoxt.imp.metatooling
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <200911191854.nAJIs4wm005908@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-19 18:54:04 +0000 (Thu, 19 Nov 2009)
New Revision: 20274

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20274&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/JarsAntPropertyProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/SidePaneEditorHelper.java
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/SPIJarsAntPropertyProvider.java
Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/StrategoJarAntPropertyProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/AbstractService.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Log:
- Open builder derived editors side-by-side to the input editor
  (using horrible, unsupported org.eclipse.ui.internal.* API, falling back
   to normal behavior if the API fails)

- Don't download jars from Delft website, copy them from the Eclipse dir instead

- SPI-12: Error markers for ambs didn't show up

- SPI-15: Color editors gray until they are reloaded


Changes:

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/Makefile	2009-11-19 18:54:04 UTC (rev 20274)
@@ -1,15 +1,18 @@
+DEFS=-Declipse.spoofaximp.jars=../org.strategoxt.imp.generator/lib -Declipse.spoofaximp.jars=include/strategoxt.jar
+
 all :
 	$(MAKE) -C org.strategoxt.imp.generator all
-	(cd org.strategoxt.imp.editors.editorservice && ant -Dexternaldef=../org.strategoxt.imp.generator/src/syntax/EditorService.def)
-	(cd org.strategoxt.imp.editors.sdf && ant -Dexternaldef=syntax/SDF.def)
-	(cd org.strategoxt.imp.editors.stratego && ant -Dexternaldef=syntax/Stratego-Sugar.def)
-	(cd org.strategoxt.imp.editors.aterm && ant -Dexternaldef=syntax/ATerm.def)
+	(cd org.strategoxt.imp.editors.editorservice && ant -Dexternaldef=../org.strategoxt.imp.generator/src/syntax/EditorService.def $(DEFS))
+	(cd org.strategoxt.imp.editors.sdf && ant -Dexternaldef=syntax/SDF.def $(DEFS))
+	(cd org.strategoxt.imp.editors.stratego && ant -Dexternaldef=syntax/Stratego-Sugar.def $(DEFS))
+	(cd org.strategoxt.imp.editors.aterm && ant -Dexternaldef=syntax/ATerm.def $(DEFS))
 
 check : all
 	$(MAKE) -C org.strategoxt.imp.generator check
 
 clean :
 	$(MAKE) -C org.strategoxt.imp.generator clean
+	rm -f org.strategoxt.imp.editor/include/*
 
 new-libs :
 	$(MAKE) -C org.strategoxt.imp.generator new-libs

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.classpath
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.classpath	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.classpath	2009-11-19 18:54:04 UTC (rev 20274)
@@ -1,9 +1,7 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-
+<?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="src" path="editor/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="lib" path="utils/strategoxt.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Colorer.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Colorer.esv	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Colorer.esv	2009-11-19 18:54:04 UTC (rev 20274)
@@ -8,4 +8,5 @@
   // See the imported file for a brief introduction and examples.
   
   _.quoted : 0 0 192
+  _.tuple  : 0 128 0 bold
   _.list   : 0 128 0 bold
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Syntax.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Syntax.esv	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/ATerm-Syntax.esv	2009-11-19 18:54:04 UTC (rev 20274)
@@ -1,4 +1,5 @@
 module ATerm-Syntax
 
 language
-  fences : ( ) // [ ] (square brackets were problematic before? IMP issue?)
\ No newline at end of file
+
+  fences : ( ) [ ]
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def	2009-11-19 18:54:04 UTC (rev 20274)
@@ -1,3 +1,9 @@
+%%
+%% Stratego-ATerm syntax
+%%
+%% Makes parentheses after terms optional,
+%% and supports tuples.
+
 definition
 module basic/IdentifierCon
 
@@ -103,7 +109,8 @@
 	IntCon 					-> ATerm {cons("int")}
 	RealCon					-> ATerm {cons("real")}
 	fun:AFun 				-> ATerm {cons("fun")}
-	fun:AFun "(" args:{ATerm ","}* ")" 	-> ATerm {cons("appl")} %% HACK: changed from + to * for Stratego/XT
+	fun:AFun "(" args:{ATerm ","}* ")" 	-> ATerm {cons("appl")}  %% changed from + to *
+	         "(" args:{ATerm ","}* ")" 	-> ATerm {cons("tuple")} %% added for tuple support
 	"<" type:ATerm ">" 			-> ATerm {cons("placeholder")}
 	"[" elems:{ATerm ","}* "]" 		-> ATerm {cons("list")}
 	trm:ATerm Annotation 			-> ATerm {cons("annotated")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Builders.esv	2009-11-19 18:54:04 UTC (rev 20274)
@@ -6,6 +6,8 @@
 builders
   
   provider : include/sdf.ctree
+  
+  observer : editor-analyze
 
   builder : "Show pretty printer rules (for selection)" =
     generate-pp-rules (realtime) (openeditor)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2009-11-19 18:54:04 UTC (rev 20274)
@@ -23,7 +23,8 @@
   editor-analyze:
     (ast, path, project-path) -> (errors, [], [])
     with
-      errors := <alltd(context-free-syntax(collect-all(context-free-syntax-error)))> ast
+      errors := [] // TODO
+      // errors := <alltd(context-free-syntax(collect-all(context-free-syntax-error)))> ast
   
   context-free-syntax-error:
     prod(s*, s, a*) -> (s, "Production should contain a {cons(\"Label\")} attribute used as a label in the abstract syntax")

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-19 18:54:04 UTC (rev 20274)
@@ -80,15 +80,15 @@
     
         <target name="all" depends="stratego.ctree,sdf2table,sdf2imp"/>
 
-        <target name="sdf2imp" depends="sdf2imp.eclipse,sdf2imp.standalone"/>
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
         
-        <target name="sdf2imp.eclipse" depends="sdf2table" if="eclipse.running">
+        <target name="sdf2imp.eclipse" if="eclipse.running">
             <!-- In Eclipse, we trigger the Eclipse builder rather than build it here -->
             <touch file="${include}/${esvmodule}.packed.esv"/>
             <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
-        <target name="sdf2imp.standalone" depends="sdf2table,utils-files" unless="eclipse.running">
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
             <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="utils/sdf2imp.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
@@ -132,16 +132,11 @@
             </java>
         </target>
 
-        <target name="utils-files" unless="utils-files.available">
-            <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
-        	<property name="utils-files.available" value="1"/>
+        <target name="utils-files">
             <mkdir dir="utils"/>
-            <!-- TODO: <copy file="${}" todir="${include}" preservelastmodified="true"/> -->
-            <parallel>
-                <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/sdf2imp.jar" dest="utils/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
-            </parallel>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar"         todir="utils"/>
+            <copy file="${eclipse.spoofaximp.strategojar}"              todir="utils"/>
         </target>
     
         <target name="pack-sdf" unless="externaldef">
@@ -155,7 +150,7 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" depends="utils-files" unless="pack-sdf.available">
+        <target name="pack-sdf.helper" unless="pack-sdf.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
@@ -179,7 +174,7 @@
             <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
-        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled">
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.rtg"/>
                 <targetfileset file="${include}/${sdfmodule}.str"/>
@@ -188,7 +183,7 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" depends="utils-files" unless="rtg2sig.available">
+        <target name="rtg2sig.helper" unless="rtg2sig.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
@@ -201,7 +196,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf,copy-sdf" if="build.stratego.enabled">
+        <target name="sdf2rtg" if="build.stratego.enabled" depends="pack-sdf,copy-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -210,7 +205,7 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" depends="utils-files" unless="sdf2rtg.available">
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>
@@ -226,7 +221,7 @@
             </java>
         </target>
         
-        <target name="ppgen" depends="pack-sdf" if="build.stratego.enabled">
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.pp"/>
@@ -235,7 +230,7 @@
             <antcall target="ppgen.helper"/>
         </target>
     
-        <target name="ppgen.helper" depends="utils-files" unless="ppgen.available">
+        <target name="ppgen.helper" unless="ppgen.available" depends="utils-files">
             <java classname="start" dir="${include}" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-ppgen"/>
@@ -283,7 +278,7 @@
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="utils-files" unless="strc-java.available" if="build.stratego.enabled">
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled" depends="utils-files">
             <java classname="org.strategoxt.strj.Main" classpath="utils/strategoxt.jar:utils/sdf2imp.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/common.str	2009-11-19 18:54:04 UTC (rev 20274)
@@ -8,6 +8,7 @@
 
   // (Used from StrategoObserver.java)
   postprocess-feedback-results =
+    (is-list <+ ![<id>]);
     flatten-list;
     map(
       (is-tuple <+ !(<id>, <id>));

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/plugin.xml	2009-11-19 18:54:04 UTC (rev 20274)
@@ -39,7 +39,7 @@
             name="eclipse.spoofaximp.strategojar">
       </antProperty>
       <antProperty
-            class="org.strategoxt.imp.metatooling.SPIJarsAntPropertyProvider"
+            class="org.strategoxt.imp.metatooling.JarsAntPropertyProvider"
             name="eclipse.spoofaximp.jars">
       </antProperty>
    </extension>

Copied: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/JarsAntPropertyProvider.java (from rev 20258, spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/SPIJarsAntPropertyProvider.java)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/JarsAntPropertyProvider.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/JarsAntPropertyProvider.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -0,0 +1,23 @@
+package org.strategoxt.imp.metatooling;
+
+import java.io.File;
+import java.net.URISyntaxException;
+
+import org.eclipse.ant.core.IAntPropertyValueProvider;
+import org.strategoxt.permissivegrammars.make_permissive;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class JarsAntPropertyProvider implements IAntPropertyValueProvider {
+	
+	public String getAntPropertyValue(String antPropertyName) {
+		String result;
+		try {
+			result = new File(make_permissive.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getParent();
+		} catch (URISyntaxException e) {
+			throw new RuntimeException("Could not locate Spoofax/IMP jar files", e);
+		}
+		return result;
+	}
+}

Deleted: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/SPIJarsAntPropertyProvider.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/SPIJarsAntPropertyProvider.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/SPIJarsAntPropertyProvider.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -1,21 +0,0 @@
-package org.strategoxt.imp.metatooling;
-
-import org.eclipse.ant.core.IAntPropertyValueProvider;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class SPIJarsAntPropertyProvider implements IAntPropertyValueProvider {
-	
-	public String getAntPropertyValue(String antPropertyName) {
-		/* TODO
-		String result = new File(make_permissive.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getParent();
-		if (Platform.getOS().equals(Platform.OS_WIN32)) {
-			// FIXME: proper paths on Windows
-			result = result.substring(1);
-		}
-		return result;
-		*/
-		return "<notimplemented>";
-	}
-}

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/StrategoJarAntPropertyProvider.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/StrategoJarAntPropertyProvider.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/StrategoJarAntPropertyProvider.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -1,5 +1,7 @@
 package org.strategoxt.imp.metatooling;
 
+import java.io.File;
+
 import org.eclipse.ant.core.IAntPropertyValueProvider;
 import org.eclipse.core.runtime.Platform;
 
@@ -14,6 +16,10 @@
 			// FIXME: proper paths on Windows
 			result = result.substring(1);
 		}
+		if (!result.endsWith(".jar")) { // ensure correct jar at development time
+			String result2 = result + "/../strategoxt.jar";
+			if (new File(result2).exists()) return result2;
+		}
 		return result;
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -15,15 +15,16 @@
 import org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.StrategoConsole;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoErrorExit;
 import org.strategoxt.lang.StrategoExit;
+import org.strategoxt.permissivegrammars.make_permissive;
 import org.strategoxt.stratego_lib.dr_scope_all_end_0_0;
 import org.strategoxt.stratego_lib.dr_scope_all_start_0_0;
-import org.strategoxt.permissivegrammars.make_permissive;
 
 /**
  * Runs the project generator on modified editor descriptors.
@@ -61,6 +62,7 @@
 		if (location == null) return;
 		
 		try {
+			System.err.println("Resource changed: " + resource.getName()); // DEBUG
 			if (resource.exists() && isMainFile(resource)) {
 				monitor.beginTask("Building " + resource.getName(), IProgressMonitor.UNKNOWN);
 				buildDescriptor(resource, monitor);
@@ -79,6 +81,10 @@
 	private void buildDescriptor(IResource mainFile, IProgressMonitor monitor) {
 		try {
 			Environment.assertLock();
+			
+			monitor.beginTask("Notifying active editors", IProgressMonitor.UNKNOWN);
+			DescriptorFactory.prepareForReload(getSourceDescriptor(mainFile));
+			
 			messageHandler.clearMarkers(mainFile);
 			monitor.beginTask("Generating service descriptors for " + mainFile.getName(), IProgressMonitor.UNKNOWN);
 			IStrategoTerm result = invokeBuilder(mainFile);

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -150,7 +150,7 @@
 			asyncMessageHandler.clearMarkers(descriptor);
 			
 			IFile file = descriptor.getProject().getFile(descriptor.getProjectRelativePath());
-			Descriptor result = DescriptorFactory.load(file);
+			Descriptor result = DescriptorFactory.load(file, getSourceDescriptor(descriptor));
 			result.setDynamicallyLoaded(true);
 			
 		} catch (BadDescriptorException e) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/AbstractService.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/AbstractService.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/AbstractService.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -83,4 +83,8 @@
 		wrapped = null;
 		language = newDescriptor.getLanguage();
 	}
+	
+	public void prepareForReinitialize() {
+		// By default, does nothing
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.runtime.dynamicloading;
 
+import static org.spoofax.interpreter.core.Tools.*;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.*;
 
 import java.io.BufferedInputStream;
@@ -15,6 +16,7 @@
 import java.util.WeakHashMap;
 
 import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.imp.language.ILanguageService;
 import org.eclipse.imp.language.Language;
@@ -24,13 +26,12 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
-import org.strategoxt.imp.runtime.services.StrategoBuilderListener;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  * 
- * @see DescriptorFactory#load(IFile)
+ * @see DescriptorFactory#load(IFile, IResource)
  */
 public class Descriptor {
 	public static final String ROOT_LANGUAGE = "DynamicRoot";
@@ -85,9 +86,17 @@
 		for (AbstractService service : services.keySet())
 			service.reinitialize(newDescriptor);
 		attachedFiles = null;
-		StrategoBuilderListener.rescheduleAllListeners();
+		// UNDONE: StrategoBuilderListener.rescheduleAllListeners(); // TODO: cleanup
 	}
 	
+	/**
+	 * Prepares editor services for reinitialization with a new descriptor.
+	 */
+	public void prepareForReinitialize() {
+		for (AbstractService service : services.keySet())
+			service.prepareForReinitialize();
+	}
+	
 	// LOADING SERVICES
 	
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -2,15 +2,17 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.Map;
 
 import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.imp.language.Language;
+import org.jboss.util.collection.WeakValueHashMap;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.jsglr.InvalidParseTableException;
 import org.spoofax.jsglr.ParseTable;
-import org.spoofax.jsglr.SGLR;
 import org.spoofax.jsglr.SGLRException;
 import org.strategoxt.imp.generator.sdf2imp;
 import org.strategoxt.imp.runtime.Debug;
@@ -26,10 +28,11 @@
 	
 	private static JSGLRI descriptorParser;
 	
+	private static Map<IResource, Descriptor> asyncOldDescriptors = new WeakValueHashMap<IResource, Descriptor>();
+	
 	private static void init() {
 		if (descriptorParser != null) return;
 		try {
-			SGLR.setWorkAroundMultipleLookahead(true);
 			InputStream stream = sdf2imp.class.getResourceAsStream("/EditorService.tbl");
 			ParseTable table = Environment.registerParseTable(Descriptor.DESCRIPTOR_LANGUAGE, stream);
 			descriptorParser = new JSGLRI(table, "Module");
@@ -39,13 +42,28 @@
 		}
 	}
 	
-	public static Descriptor load(IFile descriptor) throws CoreException, BadDescriptorException, IOException {
+	public static Descriptor load(IFile descriptor, IResource source) throws CoreException, BadDescriptorException, IOException {
 		IPath basePath = descriptor.getLocation();
 		basePath = basePath.removeLastSegments(2); // strip off /include/filename.main.esv
 		Debug.log("Loading editor services for ", descriptor.getName());
-		return load(descriptor.getContents(true), null, basePath);
+		
+		Descriptor result = load(descriptor.getContents(true), null, basePath);
+		synchronized (asyncOldDescriptors) {
+			assert source.getName().endsWith(".main.esv");
+			asyncOldDescriptors.put(source, result);
+		}
+		return result;
 	}
 	
+	public static void prepareForReload(IResource descriptor) {
+		assert descriptor.getName().endsWith(".main.esv");
+		synchronized (asyncOldDescriptors) {
+			Descriptor oldDescriptor = asyncOldDescriptors.get(descriptor);
+			if (oldDescriptor != null)
+				oldDescriptor.prepareForReinitialize();
+		}
+	}
+	
 	/**
 	 * Creates a new {@link Descriptor} instance.
 	 * 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -6,6 +6,7 @@
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.language.LanguageRegistry;
 import org.eclipse.imp.model.ISourceProject;
@@ -15,6 +16,7 @@
 import org.eclipse.imp.services.IAnnotationTypeInfo;
 import org.eclipse.imp.services.ILanguageSyntaxProperties;
 import org.eclipse.jface.text.IRegion;
+import org.eclipse.jface.text.Region;
 import org.strategoxt.imp.runtime.EditorState;
 
 /**
@@ -36,6 +38,8 @@
 	
 	private IMessageHandler handler;
 	
+	private boolean isReinitialized;
+	
 	public DynamicParseController() {
 		super(IParseController.class);
 	}
@@ -83,6 +87,10 @@
 	public ISourceProject getProject() {
 		return getWrapped().getProject();
 	}
+	
+	protected EditorState getLastEditor() {
+		return lastEditor;
+	}
 
 	public ILanguageSyntaxProperties getSyntaxProperties() {
 		return getWrapped().getSyntaxProperties();
@@ -113,12 +121,24 @@
 	@Override
 	public void reinitialize(Descriptor newDescriptor) throws BadDescriptorException {
 		super.reinitialize(newDescriptor);
-		if (lastEditor != null)
+		isReinitialized = true;
+		if (lastEditor != null && !lastEditor.getEditor().getTitleImage().isDisposed()) {
 			lastEditor.getEditor().fParserScheduler.schedule(REINIT_PARSE_DELAY);
+		}
 	}
 
 	public Object parse(String input, boolean scanOnly, IProgressMonitor monitor) {
-		return getWrapped().parse(input, scanOnly, monitor);
+		Object result = getWrapped().parse(input, scanOnly, monitor);
+		if (isReinitialized) {
+			// Update other services
+			// TODO: Trigger colorer update
+			// lastEditor.getEditor().getServiceControllerManager().getPresentationController().damage(new Region(0, input.length()));
+			
+			lastEditor.getEditor().damage(new Region(0, input.length()));
+			lastEditor.getEditor().fParserScheduler.notifyModelListeners(new NullProgressMonitor());
+			isReinitialized = false;
+		}
+		return result;
 	}
 
 	public IResource getResource() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -1,9 +1,15 @@
 package org.strategoxt.imp.runtime.dynamicloading;
 
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.imp.editor.UniversalEditor;
+import org.eclipse.imp.parser.IModelListener;
 import org.eclipse.imp.parser.IParseController;
 import org.eclipse.imp.services.ITokenColorer;
 import org.eclipse.jface.text.IRegion;
+import org.eclipse.jface.text.Region;
 import org.eclipse.jface.text.TextAttribute;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.widgets.Display;
 
 /**
  * Dynamic proxy class to a token colorer.
@@ -13,6 +19,14 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class DynamicTokenColorer extends AbstractService<ITokenColorer> implements ITokenColorer {
+	
+	private static final int GRAY_COMPONENT = 96;
+	
+	private IParseController lastParseController;
+	
+	private Color gray;
+	
+	private volatile boolean isReinitializing;
 
 	public DynamicTokenColorer() {
 		super(ITokenColorer.class);
@@ -26,7 +40,40 @@
 
 	public TextAttribute getColoring(IParseController controller, Object token) {
 		if (!isInitialized()) initialize(controller.getLanguage());
-		
-		return getWrapped().getColoring(controller, token);
+		lastParseController = controller;
+		TextAttribute result = getWrapped().getColoring(controller, token);
+		if (isReinitializing) result = toGray(result);
+		return result;
 	}
+	
+	@Override
+	public void prepareForReinitialize() {
+		isReinitializing = true;
+		UniversalEditor lastEditor = null;
+		if (lastParseController instanceof DynamicParseController)
+			lastEditor = ((DynamicParseController) lastParseController).getLastEditor().getEditor();
+
+		if (lastEditor != null && !lastEditor.getTitleImage().isDisposed()) {
+			lastEditor.damage(new Region(0, lastEditor.getServiceControllerManager().getSourceViewer().getDocument().getLength()));
+			IModelListener presentation = lastEditor.getServiceControllerManager().getPresentationController();
+			presentation.update(lastParseController, new NullProgressMonitor());
+		}
+	}
+	
+	@Override
+	public void reinitialize(Descriptor newDescriptor) throws BadDescriptorException {
+		isReinitializing = false;
+	}
+
+	private TextAttribute toGray(TextAttribute attribute) {
+		return attribute == null
+				? new TextAttribute(getGrayColor())
+				: new TextAttribute(getGrayColor(), attribute.getBackground(), attribute.getStyle(), attribute.getFont());
+	}
+	
+	private Color getGrayColor() {
+		if (gray == null)
+			gray = new Color(Display.getCurrent(), GRAY_COMPONENT, GRAY_COMPONENT, GRAY_COMPONENT);
+		return gray;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.runtime.parser;
 
+import static org.spoofax.interpreter.core.Tools.*;
 import static org.spoofax.jsglr.Term.*;
 
 import java.util.ArrayList;
@@ -9,6 +10,9 @@
 
 import org.eclipse.core.resources.IMarker;
 import org.eclipse.imp.parser.IMessageHandler;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.terms.TermConverter;
 import org.spoofax.jsglr.BadTokenException;
 import org.spoofax.jsglr.ParseTimeoutException;
 import org.spoofax.jsglr.RecoveryConnector;
@@ -18,6 +22,12 @@
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
 import org.strategoxt.imp.runtime.parser.tokens.SGLRTokenizer;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKind;
+import org.strategoxt.lang.Context;
+import org.strategoxt.stratego_aterm.pp_aterm_box_0_0;
+import org.strategoxt.stratego_aterm.stratego_aterm;
+import org.strategoxt.stratego_gpp.box2text_string_0_1;
+import org.strategoxt.stratego_sglr.implode_asfix_0_0;
+import org.strategoxt.stratego_sglr.stratego_sglr;
 
 import aterm.ATerm;
 import aterm.ATermAppl;
@@ -72,6 +82,8 @@
 	private boolean inLexicalContext;
 	
 	private List<Runnable> errorReports = new ArrayList<Runnable>();
+	
+	private Context ambReportingContext;
 
 	public ParseErrorHandler(SGLRParseController source) {
 		this.source = source;
@@ -204,25 +216,25 @@
     }
 	
 	private void reportAmbiguity(SGLRTokenizer tokenizer, ATermAppl amb, int startOffset) {
-		if (!inLexicalContext && hasContextFreeNode(amb)) {
+		if (!inLexicalContext) {
 			IToken token = tokenizer.makeErrorToken(startOffset, offset - 1);
-			reportErrorAtTokens(token, token, "Fragment is ambiguous");
-		}
-	}
-	
-	private static boolean hasContextFreeNode(ATermAppl term) {
-		if ("lit".equals(term.getAFun().getName()))
-			return true;
-		
-		for (int i = 0; i < term.getChildCount(); i++) {
-			ATerm child = termAt(term, i);
-			if (child.getType() == ATerm.AFUN) {
-				boolean success = hasContextFreeNode((ATermAppl) child);
-				if (success) return true;
+			if (ambReportingContext == null) {
+				stratego_sglr.init();
+				ambReportingContext = stratego_aterm.init();
 			}
+			ITermFactory factory = ambReportingContext.getFactory();
+			IStrategoTerm ambTerm;
+			synchronized (Environment.getSyncRoot()) {
+				ambTerm = TermConverter.convert(factory, Environment.getWrappedATermFactory().wrapTerm(amb));
+			}
+			
+			ambTerm = factory.makeAppl(factory.makeConstructor("parsetree", 2), ambTerm, factory.makeInt(2));
+			ambTerm = implode_asfix_0_0.instance.invoke(ambReportingContext, ambTerm);
+			ambTerm = pp_aterm_box_0_0.instance.invoke(ambReportingContext, ambTerm);
+			ambTerm = box2text_string_0_1.instance.invoke(ambReportingContext, ambTerm, factory.makeInt(80));
+			
+			reportWarningAtTokens(token, token, "Fragment is ambiguous: " + asJavaString(ambTerm));
 		}
-		
-		return false;
 	}
 	
 	private void reportSkippedFragments(SGLRTokenizer tokenizer) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -123,7 +123,6 @@
 	// Parsing and initialization
     
     static {
-    	SGLR.setWorkAroundMultipleLookahead(true);
     	if (!Debug.ENABLED)
     		Tools.setTimeout(PARSE_TIMEOUT);
     }

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/SidePaneEditorHelper.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/SidePaneEditorHelper.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/SidePaneEditorHelper.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -0,0 +1,88 @@
+package org.strategoxt.imp.runtime.services;
+
+import org.eclipse.ui.IWorkbenchPage;
+import org.eclipse.ui.PlatformUI;
+import org.eclipse.ui.internal.EditorAreaHelper;
+import org.eclipse.ui.internal.EditorSashContainer;
+import org.eclipse.ui.internal.EditorStack;
+import org.eclipse.ui.internal.WorkbenchPage;
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.Environment;
+
+/**
+ * A helper class for opening editors side-by-side.
+ * 
+ * Uses the org.eclipse.ui.internal.* API, so the class should be used defensively.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+ at SuppressWarnings("restriction")
+class SidePaneEditorHelper {
+	
+	private EditorStack oldStack;
+	
+	private EditorStack newStack;
+	
+	private EditorSashContainer layoutPart;
+	
+	private boolean isEmptyPane;
+	
+	private SidePaneEditorHelper() {
+		// Private
+	}
+	
+	public static SidePaneEditorHelper openSidePane() throws Throwable {
+		SidePaneEditorHelper cookie = new SidePaneEditorHelper();
+		cookie.internalOpenSidePane();
+		return cookie;
+	}
+	
+	public void internalOpenSidePane() throws Throwable {
+		assert EditorState.isUIThread();
+		IWorkbenchPage page =
+			PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
+
+		EditorAreaHelper editorArea = ((WorkbenchPage) page).getEditorPresentation();
+		
+		// Find an existing stack next to the active editor
+		oldStack = editorArea.getActiveWorkbook();
+		newStack = null;
+		for (Object stack : editorArea.getWorkbooks()) {
+			if (stack != oldStack) { // good, other stack
+				newStack = (EditorStack) stack;
+				if (newStack.getParent() == oldStack.getParent())
+					break; // just perfect!
+			}
+		}
+		
+		if (newStack == null) {
+			// Create a new stack
+			layoutPart = (EditorSashContainer) editorArea.getLayoutPart();
+			newStack = EditorStack.newEditorWorkbook(layoutPart, (WorkbenchPage) page);
+			oldStack.copyAppearanceProperties(newStack);
+			layoutPart.add(newStack);
+			isEmptyPane = true;
+		} else {
+			isEmptyPane = false;
+		}
+		
+		newStack.setFocus();
+	}
+	
+	public void restoreFocus() {
+		try {
+			oldStack.setFocus();
+		} catch (Throwable t) {
+			Environment.logException("Could not close side pane", t);			
+		}
+	}
+	
+	public void undoOpenSidePane() {
+		try {
+			if (isEmptyPane)
+				layoutPart.remove(newStack);
+		} catch (Throwable t) {
+			Environment.logException("Could not close side pane", t);			
+		}
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -105,7 +105,7 @@
 			IFile file = createFile(editor, filename, result);
 			// TODO: if not persistent, create IEditorInput from result String
 			if (openEditor) {
-				IEditorPart target = openEditor(file, !realTime);
+				IEditorPart target = openEditor(file, realTime);
 				if (realTime)
 					StrategoBuilderListener.addListener(editor.getEditor(), target, file, getCaption(), node);
 			}
@@ -169,10 +169,32 @@
 	 * Opens or activates an editor.
 	 * (Asynchronous) exceptions are swallowed and logged.
 	 */
-	private static IEditorPart openEditor(IFile file, boolean activate) throws PartInitException {
+	private static IEditorPart openEditor(IFile file, boolean realTime) throws PartInitException {
+		// TODO: WorkBenchPage.openEdiotr with a custom IEditorInput?
 		IWorkbenchPage page =
 			PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
-		return IDE.openEditor(page, file, activate);
+		
+		SidePaneEditorHelper sidePane = null;
+		
+		if (realTime) {
+			try {
+				sidePane = SidePaneEditorHelper.openSidePane();
+			} catch (Throwable t) {
+				// org.eclipse.ui.internal API might have changed
+				Environment.logException("Unable to open side pane", t);
+			}
+		}
+		
+		IEditorPart result = null;
+		try {
+			result = IDE.openEditor(page, file, !realTime);
+		} finally {
+			if (result == null && sidePane != null) sidePane.undoOpenSidePane();
+		}
+		
+		if (sidePane != null) sidePane.restoreFocus();
+		
+		return result;
 	}
 	
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-19 16:31:14 UTC (rev 20273)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-19 18:54:04 UTC (rev 20274)
@@ -37,6 +37,7 @@
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.IncompatibleJarException;
 import org.strategoxt.imp.generator.postprocess_feedback_results_0_0;
+import org.strategoxt.imp.generator.sdf2imp;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
@@ -47,6 +48,7 @@
 import org.strategoxt.imp.runtime.stratego.StrategoTermPath;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 import org.strategoxt.imp.runtime.stratego.adapter.WrappedAstNode;
+import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoException;
 import org.strategoxt.stratego_lib.set_config_0_0;
 
@@ -292,7 +294,9 @@
 	}
 	
 	private final void feedbackToMarkers(IResource resource, IStrategoList feedbacks, int severity) {
-		feedbacks = (IStrategoList) postprocess_feedback_results_0_0.instance.invoke(runtime.getCompiledContext(), feedbacks);
+		Context context = runtime.getCompiledContext();
+		sdf2imp.init(context);
+		feedbacks = (IStrategoList) postprocess_feedback_results_0_0.instance.invoke(context, feedbacks);
 		
 	    for (IStrategoTerm feedback : feedbacks.getAllSubterms()) {
 	        IStrategoTerm term = termAt(feedback, 0);



From L.C.L.Kats at tudelft.nl  Fri Nov 20 10:52:05 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 20 Nov 2009 09:52:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20275 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <200911200952.nAK9q5p3017710@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-20 09:52:04 +0000 (Fri, 20 Nov 2009)
New Revision: 20275

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20275&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-19 18:54:04 UTC (rev 20274)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2009-11-20 09:52:04 UTC (rev 20275)
@@ -50,7 +50,7 @@
       // Collect all feedback markers
       errors   := <collect-all(constraint-error, conc)> ast;
       warnings := <collect-all(constraint-warning, conc)> ast;
-      notes    := <collect-all(constraint-note), conc> ast
+      notes    := <collect-all(constraint-note, conc)> ast
 
   /**
    * Records the definition of an entity in a dynamic rule GetEntity.

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java	2009-11-19 18:54:04 UTC (rev 20274)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java	2009-11-20 09:52:04 UTC (rev 20275)
@@ -38,7 +38,7 @@
 		StringBuffer result = new StringBuffer();
 		addPageProlog(result);
 		result.append("<p>");
-		result.append(convertToHTMLContent(annotations.get(0).getText()));
+		result.append(/*convertToHTMLContent*/(annotations.get(0).getText())); // UNDONE: Moved to StrategoObserver
 		result.append("</p>");
 		addPageEpilog(result);
     	return result.toString();
@@ -50,14 +50,15 @@
 		result.append("Multiple messages:<ul>");
 		for (Annotation annotation : annotations) {
 			result.append("<li> ");
-			result.append(convertToHTMLContent(annotation.getText()));
+			result.append(/*convertToHTMLContent*/(annotation.getText()));
 			result.append("</li>");
 		}
+		result.append("</ul>");
 		addPageEpilog(result);
     	return result.toString();
     }
 	
-	private static String convertToHTMLContent(String content) {
+	public static String convertToHTMLContent(String content) {
 		return HTMLPrinter.convertToHTMLContent(content).replace("\n", "<br />");
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-19 18:54:04 UTC (rev 20274)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-20 09:52:04 UTC (rev 20275)
@@ -300,9 +300,10 @@
 		
 	    for (IStrategoTerm feedback : feedbacks.getAllSubterms()) {
 	        IStrategoTerm term = termAt(feedback, 0);
-			IStrategoString message = termAt(feedback, 1);
-	    	
-			messages.addMarker(resource, term, message.stringValue(), severity);
+			IStrategoString messageTerm = termAt(feedback, 1);
+			String message = AnnotationHover.convertToHTMLContent(messageTerm.stringValue());
+			
+			messages.addMarker(resource, term, message, severity);
 	    }
 	}	
 	



From m.dejonge at tudelft.nl  Fri Nov 20 11:49:56 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 20 Nov 2009 10:49:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20276 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/src: .
	evaluating testruns tests
Message-ID: <200911201049.nAKAnuvN019078@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-20 10:49:55 +0000 (Fri, 20 Nov 2009)
New Revision: 20276

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20276&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/InfraStructure.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/evaluateLanguages.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java

Log:
refactoring: filepaths, language extensions, parsetable lookup

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-20 09:52:04 UTC (rev 20275)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-20 10:49:55 UTC (rev 20276)
@@ -21,9 +21,12 @@
 
 public class ErroneousRegion {
 
+	private static final String EXPECTED_END_SIGN = "@END";
+	private static final String EXPECTED_START_SIGN = "@START";
 	private static final String PARSETREE_EXTENSION = ".pt";
-	private static final String OUTPUT_REGION_SKIP = "OutputRegionSkip/";
+	private static final String OUTPUT_REGION_SKIP = "OutputRegionSkip"+File.separator;
 	private int startLine;
+	
 	public void setStartLine(int startLine) {
 		this.startLine = startLine;
 	}
@@ -46,8 +49,7 @@
 		startLine=-1;
 		endLine=-1;
 	}	
-	
-	//TODO collectSelectedRegions, fileInputStream as interface  
+	 
 	@SuppressWarnings("deprecation")
 	public static ArrayList<ErroneousRegion> collectSkippedRegions(String testFile, String parseTable) throws Exception {
 		String recoveredFile = writeRecoveredFile(testFile, parseTable);		
@@ -57,11 +59,10 @@
 	private static String writeRecoveredFile(String testFile, String parseTable)
 			throws FileNotFoundException, IOException,
 			InvalidParseTableException, NoRecoveryRulesException, SGLRException, InterruptedException {
-		String fileName=testFile.replace(File.separatorChar, '.'); //substring(testFile.lastIndexOf('/')+1);
+		String fileName=testFile.replace(File.separatorChar, '.');
 		String recoveredFile=OUTPUT_REGION_SKIP+fileName;
 		String parseTreeFile = OUTPUT_REGION_SKIP+fileName+PARSETREE_EXTENSION;
-		writeParseTree(testFile, parseTable, parseTreeFile);
-		//yield-asfix		
+		writeParseTree(testFile, parseTable, parseTreeFile);	
 		yieldAsfix(parseTreeFile, recoveredFile);
 		return recoveredFile;
 	}
@@ -113,7 +114,6 @@
 				"asfix-yield", "-i", inputFile,
 				"-o", outputFile
 		};
-		PrintStream printOut=new PrintStream(outputFile);
 		caller.call(commandArgs, new String[0], null, System.out, System.err);
 	}
 
@@ -143,14 +143,14 @@
 		int StartLine=-1;
 	    for (int i = 0; i < lines.length; i++) {
 	    	String aLine = lines[i];
-	    	if(aLine.contains("@START")){
+	    	if(aLine.contains(EXPECTED_START_SIGN)){
 	    		if(StartLine!=-1)
-		    		throw(new Exception("Double //@START in Region Definition"));
+		    		throw(new Exception("Double " +EXPECTED_START_SIGN +" in Region Definition"));
 	    		StartLine=i;
     		}
-	    	if(aLine.contains("@END")){
+	    	if(aLine.contains(EXPECTED_END_SIGN)){
 	    		if(StartLine==-1){
-	    			throw(new Exception("Missing //@START in Region Definition"));
+	    			throw(new Exception("Missing " +EXPECTED_START_SIGN +" in Region Definition"));
 	    		}
 	    		ErroneousRegion detectedRegion = new ErroneousRegion(); 
 	    		detectedRegion.setStartLine(StartLine);
@@ -160,7 +160,7 @@
     		}
 		}
 	    if(StartLine!=-1)
-	    	throw(new Exception("Missing //@END in Region Definition"));
+	    	throw(new Exception("Missing " +EXPECTED_END_SIGN +" in Region Definition"));
 	    return result;
 	}
 	

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/InfraStructure.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/InfraStructure.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/InfraStructure.java	2009-11-20 10:49:55 UTC (rev 20276)
@@ -0,0 +1,53 @@
+package evaluating;
+
+import java.io.File;
+import java.util.HashMap;
+
+public class InfraStructure {
+	
+	//Grammars
+	public static final String JAVA_GRAMMAR = "Grammars" + File.separator +"Java-15.tbl";
+	public static final String STRATEGO_GRAMMAR = "Grammars" + File.separator +"Stratego-Sugar.tbl";
+	public static final String WEBDSL_GRAMMAR = "Grammars" + File.separator +"WebDSL.tbl";
+	public static final String STRATEGO_JAVA_GRAMMAR = "Grammars" + File.separator +"Stratego-Java-15.tbl";
+	
+	//Extensions
+	public static final String JAVA_EXT = "java";
+	public static final String STRATEGO_EXT = "str";
+	public static final String WEBDSL_EXT = "app";
+	public static final String STRATEGO_JAVA_EXT = "strjava";
+	
+	//Directories
+	private static String RoorDir;
+	public static final String DIR_ROOT="Input";
+	public static final String DIR_COMMON = DIR_ROOT +File.separator+"Common";
+	public static final String DIR_MESSY_INDENT=DIR_ROOT +File.separator+"MessyIndent";
+	public static final String DIR_PROBLEM_CASES=DIR_ROOT +File.separator+"ProblemCases";
+	public static final String DIR_SPOOFAX_EXAMPLES=DIR_ROOT +File.separator+"SpoofaxExamples";
+	
+	//Parse table locations
+	private static  HashMap<String, String> parsetableLookUp=new HashMap<String, String>();
+	
+	public static void addLanguage(String extension, String parseTablePath) {
+		parsetableLookUp.put(extension, parseTablePath);
+	}
+
+	public static String getParsetable(String extension) {
+		return parsetableLookUp.get(extension);
+	}
+	
+	public static void addStandardLanguages() {
+		addLanguage(InfraStructure.STRATEGO_EXT, InfraStructure.STRATEGO_GRAMMAR);
+		addLanguage(InfraStructure.WEBDSL_EXT, InfraStructure.WEBDSL_GRAMMAR);
+		addLanguage(InfraStructure.STRATEGO_JAVA_EXT, InfraStructure.STRATEGO_JAVA_GRAMMAR);
+		addLanguage(InfraStructure.JAVA_EXT, InfraStructure.JAVA_GRAMMAR);
+	}
+
+	public static void setRoorDir(String roorDir) {
+		RoorDir = roorDir;
+	}
+
+	public static String getRoorDir() {
+		return RoorDir;
+	}
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-20 09:52:04 UTC (rev 20275)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-20 10:49:55 UTC (rev 20276)
@@ -14,14 +14,12 @@
 	    }
 	}
 	
-	private static String RoorDir;
 	private ArrayList<String> directories;
 	private ArrayList<String> extensions;
 	private boolean useAllExtensions;
 	private boolean useAllDirectories;
 	private String testsuiteName;
 	private Statistics statistics;
-	private HashMap<String, String> parsetableLookUp;
 	
 	public String getTestSuiteName() {
 		return testsuiteName;
@@ -38,14 +36,13 @@
 		useAllExtensions=true;
 		useAllDirectories=true;
 		statistics = new Statistics();
-		parsetableLookUp=new HashMap<String, String>();
 	}
 	
 	public void runTestcases() throws Exception{
 		if(useAllDirectories){
 			directories.clear();
-			for (String subDir : new File(RoorDir).list(new SVNFilter())) {
-				addDir(subDir);
+			for (String subDir : new File(InfraStructure.getRoorDir()).list(new SVNFilter())) {
+				addDir(InfraStructure.getRoorDir() + File.separator + subDir);
 			}
 		}
 		if(useAllExtensions){
@@ -64,7 +61,7 @@
 	}
 
 	public void processFiles(String inputDirectory, String extension) throws Exception{	
-		File dir = new File(RoorDir + File.separator+inputDirectory);
+		File dir = new File(inputDirectory);
         if(!dir.exists())
         	throw new IOException("Directory: "+dir + "does not exist");
         String[] children = dir.list(new SVNFilter());
@@ -74,22 +71,13 @@
         	String filePath=dir+File.separator+fileName;
         	if (!new File(filePath).isDirectory() && (useAllExtensions || fileName.endsWith(extension))){
         		Testcase file = new Testcase(filePath);
-        		file.compareRegions(getParsetable(ext));
+        		file.compareRegions(InfraStructure.getParsetable(ext));
 				statistics.processFileResult(file);
 				//System.out.println(filePath);
 			}
 		}	
 	}
-	
-	public Testsuite addLanguage(String extension, String parseTablePath) {
-		parsetableLookUp.put(extension, parseTablePath);
-		return this;
-	}
 
-	private String getParsetable(String extension) {
-		return parsetableLookUp.get(extension);
-	}
-
 	public Testsuite addDir(String dirName) {
 		useAllDirectories=false;
 		directories.add(dirName);
@@ -110,8 +98,4 @@
 		useAllDirectories=useAll;
 	}
 
-	public void setRootDir(String dir) {
-		RoorDir=dir;		
-	}
-
 }

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/evaluateLanguages.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/evaluateLanguages.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/evaluateLanguages.java	2009-11-20 10:49:55 UTC (rev 20276)
@@ -0,0 +1,20 @@
+package testruns;
+
+import org.junit.Test;
+
+import evaluating.InfraStructure;
+import evaluating.Testsuite;
+
+
+public class evaluateLanguages {
+	
+	@Test
+	public void run() throws Exception{
+		InfraStructure.setRoorDir(InfraStructure.DIR_ROOT);
+		InfraStructure.addStandardLanguages();
+		Testsuite javaLanguage=new Testsuite("All Java files");
+		javaLanguage.setAllDirectories(true);
+		javaLanguage.addExtension(InfraStructure.JAVA_EXT);
+		javaLanguage.runTestcases();
+	}
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java	2009-11-20 09:52:04 UTC (rev 20275)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java	2009-11-20 10:49:55 UTC (rev 20276)
@@ -2,6 +2,7 @@
 
 import org.junit.Test;
 
+import evaluating.InfraStructure;
 import evaluating.Testsuite;
 
 
@@ -10,15 +11,12 @@
 	@Test
 	public void Evaluate() throws Exception{		
 		Testsuite t = new Testsuite("TestInput/Common, Stratego + Java");
-		t.setRootDir("TestInput");
+		InfraStructure.setRoorDir(InfraStructure_Testing.DIR_ROOT_TESTS);
 		//t.addDir("Common")
-		t.addDir("Practice")
-			.addExtension("java")
-			.addExtension("str")
-			.addLanguage("str", "Grammars/Stratego-Sugar.tbl")
-			.addLanguage("app", "Grammars/WebDSL.tbl")
-			.addLanguage("str.java", "Grammars/Stratego-Java-15.tbl")
-			.addLanguage("java", "Grammars/Java-15.tbl");
+		t.addDir(InfraStructure_Testing.DIR_TEST2)
+			.addExtension(InfraStructure.JAVA_EXT)
+			.addExtension(InfraStructure.STRATEGO_EXT);
+		InfraStructure.addStandardLanguages();
 		t.runTestcases();
 		System.out.println(t.getTestSuiteName());
 		System.out.println(t.getStatistics().getOverviewResults().toString());

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java	2009-11-20 10:49:55 UTC (rev 20276)
@@ -0,0 +1,22 @@
+package tests;
+
+import java.io.File;
+
+import evaluating.InfraStructure;
+
+public class InfraStructure_Testing extends InfraStructure{
+				
+	//Directories
+	public static final String DIR_ROOT_TESTS = "TestInput";
+	public static final String DIR_TEST1 = DIR_ROOT_TESTS +File.separator+"TestFiles1";
+	public static final String DIR_TEST2=DIR_ROOT_TESTS +File.separator+"TestFiles2";
+	public static final String DIR_ALLSCENARIOS=DIR_ROOT_TESTS +File.separator+"Scenarios";
+	
+	//TestFiles
+	public static final String TEST1_JAVA = DIR_TEST1 + File.separator +"test1.java";
+	public static final String ERRONEOUS_WEBDSL = DIR_TEST2 + File.separator +"erroneous.app";
+	public static final String NEARBY_REGIONS_JAVA = DIR_TEST2 + File.separator +"nearbyRegions.java";
+	public static final String TWO_REGIONS_JAVA = DIR_TEST2 + File.separator +"twoRegions.java";
+	public static final String TEST2_JAVA = DIR_TEST1 + File.separator +"test2.java";
+
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java	2009-11-20 09:52:04 UTC (rev 20275)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java	2009-11-20 10:49:55 UTC (rev 20276)
@@ -17,6 +17,7 @@
 
 public class Test_ErroneousRegion {
 	
+	
 	ErroneousRegion errorRegion;
 	
 	public Test_ErroneousRegion() {
@@ -35,7 +36,7 @@
 	
 	@Test
 	public void testProcessFile() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString(readFromFile("TestInput/Common/test1.java"));
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString(readFromFile(InfraStructure_Testing.TEST1_JAVA));
 		assertEquals(1, regions.size());
 		assertEquals(15, regions.get(0).getStartLine());
 		assertEquals(17, regions.get(0).getEndLine());
@@ -77,7 +78,7 @@
 	
 	//@Test
 	public void testRegionSkip() throws Exception{
-		ErroneousRegion.collectSkippedRegions("TestInput/Common/test1.java", "Grammars/Java-15.tbl");
+		ErroneousRegion.collectSkippedRegions(InfraStructure_Testing.TEST1_JAVA, InfraStructure_Testing.JAVA_GRAMMAR);
 	}	
 	
 	@Test
@@ -170,7 +171,7 @@
 	
 	@Test
 	public void skippedRegionsFromFile() throws Exception {
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectSkippedRegions("TestInput/Common/test1.java", "Grammars/Java-15.tbl");
+		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectSkippedRegions(InfraStructure_Testing.TEST1_JAVA, InfraStructure_Testing.JAVA_GRAMMAR);
 		assertEquals(1, regions.size());
 		assertEquals(14, regions.get(0).getStartLine());
 		assertEquals(18, regions.get(0).getEndLine());

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-20 09:52:04 UTC (rev 20275)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-20 10:49:55 UTC (rev 20276)
@@ -111,32 +111,32 @@
 	
 	@Test
 	public void testExactRegion() throws Exception{
-		Testcase exactRegion = new Testcase("TestInput/Common/test2.java");
-		exactRegion.compareRegions("Grammars/Java-15.tbl");
+		Testcase exactRegion = new Testcase(InfraStructure_Testing.TEST2_JAVA);
+		exactRegion.compareRegions(InfraStructure_Testing.JAVA_GRAMMAR);
 		assertEquals(1, exactRegion.getRegionEvaluations().size());
 		assertEquals(Evaluation.EXACT, exactRegion.getRegionEvaluations().get(0));
 	}
 	
 	@Test
 	public void testTwoRegions() throws Exception{
-		Testcase twoRegions = new Testcase("TestInput/Practice/twoRegions.java");
-		twoRegions.compareRegions("Grammars/Java-15.tbl");
+		Testcase twoRegions = new Testcase(InfraStructure_Testing.TWO_REGIONS_JAVA);
+		twoRegions.compareRegions(InfraStructure_Testing.JAVA_GRAMMAR);
 		assertEquals(2, twoRegions.getRegionEvaluations().size());
 		//assertEquals(Evaluation.EXACT, twoRegions.getRegionEvaluations().get(0));
 	}
 	
 	@Test
 	public void testNearbyRegions() throws Exception{
-		Testcase nearbyRegions = new Testcase("TestInput/Practice/nearbyRegions.java");
-		nearbyRegions.compareRegions("Grammars/Java-15.tbl");
+		Testcase nearbyRegions = new Testcase(InfraStructure_Testing.NEARBY_REGIONS_JAVA);
+		nearbyRegions.compareRegions(InfraStructure_Testing.JAVA_GRAMMAR);
 		assertEquals(2, nearbyRegions.getRegionEvaluations().size());
 		assertEquals(Evaluation.MERGED_REGION, nearbyRegions.getRegionEvaluations().get(0));
 	}
 	
 	@Test
 	public void testNoExpectedRegion() throws Exception{
-		Testcase nearbyRegions = new Testcase("TestInput/Practice/erroneous.app");
-		nearbyRegions.compareRegions("Grammars/WebDSL.tbl");
+		Testcase nearbyRegions = new Testcase(InfraStructure_Testing.ERRONEOUS_WEBDSL);
+		nearbyRegions.compareRegions(InfraStructure_Testing.WEBDSL_GRAMMAR);
 		assertEquals(1, nearbyRegions.getRegionEvaluations().size());
 		assertEquals(Evaluation.INTRODUCED_REGION, nearbyRegions.getRegionEvaluations().get(0));
 	}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-20 09:52:04 UTC (rev 20275)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-20 10:49:55 UTC (rev 20276)
@@ -17,11 +17,11 @@
 	
 	public Test_Testsuite() {
 		myTestcases=new Testsuite("a testsuite");
-		myTestcases.setRootDir("TestInput");
-		myTestcases.addLanguage("java", "Grammars/Java-15.tbl")
-			.addLanguage("str", "Grammars/Stratego-Sugar.tbl")
-			.addLanguage("app", "Grammars/WebDSL.tbl")
-			.addLanguage("str.java", "Grammars/Stratego-Java-15.tbl");
+		InfraStructure.setRoorDir(InfraStructure_Testing.DIR_ROOT_TESTS);
+		InfraStructure.addLanguage(InfraStructure.JAVA_EXT, InfraStructure_Testing.JAVA_GRAMMAR);
+		InfraStructure.addLanguage(InfraStructure.STRATEGO_EXT, InfraStructure_Testing.STRATEGO_GRAMMAR);
+		InfraStructure.addLanguage(InfraStructure.WEBDSL_EXT, InfraStructure_Testing.WEBDSL_GRAMMAR);
+		InfraStructure.addLanguage(InfraStructure.STRATEGO_JAVA_EXT, InfraStructure_Testing.STRATEGO_JAVA_GRAMMAR);
 	}
 	
 	@Test
@@ -38,18 +38,18 @@
 	
 	@Test
 	public void MoreDirs_OneExtension() throws Exception{
-		myTestcases.addDir("Practice")
-					.addDir("Common")
-					.addExtension("java");
+		myTestcases.addDir(InfraStructure_Testing.DIR_TEST2)
+					.addDir(InfraStructure_Testing.DIR_TEST1)
+					.addExtension(InfraStructure.JAVA_EXT);
 		myTestcases.runTestcases();
 		Assert.assertEquals(4, myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
 	public void OneDir_MoreExtensions() throws Exception{
-		myTestcases.addDir("Common")
-					.addExtension("java")
-					.addExtension("str");
+		myTestcases.addDir(InfraStructure_Testing.DIR_TEST1)
+					.addExtension(InfraStructure.JAVA_EXT)
+					.addExtension(InfraStructure.STRATEGO_EXT);
 		myTestcases.runTestcases();
 		Assert.assertEquals(3, myTestcases.getStatistics().getNumberOfFiles());
 	}
@@ -62,8 +62,8 @@
 	
 	@Test
 	public void test_setAll() throws Exception{
-		myTestcases.addExtension("java");
-		myTestcases.addDir("Common");
+		myTestcases.addExtension(InfraStructure.JAVA_EXT);
+		myTestcases.addDir(InfraStructure_Testing.DIR_TEST1);
 		myTestcases.setAllExtensions(true);	
 		myTestcases.setAllDirectories(true);
 		myTestcases.runTestcases();
@@ -72,9 +72,9 @@
 	
 	@Test
 	public void test_Processing() throws Exception{		
-		myTestcases.processFiles("Common", "");
+		myTestcases.processFiles(InfraStructure_Testing.DIR_TEST1, "");
 		Assert.assertEquals(3, myTestcases.getStatistics().getNumberOfFiles());	
-		myTestcases.processFiles("Practice", "");
+		myTestcases.processFiles(InfraStructure_Testing.DIR_TEST2, "");
 		Assert.assertEquals(6, myTestcases.getStatistics().getNumberOfFiles());	
 	}
 	
@@ -82,14 +82,13 @@
 	@Test
 	public void test_Processing_extension() throws Exception{
 		myTestcases.addExtension("m");
-		myTestcases.processFiles("Common","cs");
+		myTestcases.processFiles(InfraStructure_Testing.DIR_TEST1,"cs");
 		Assert.assertEquals(0, myTestcases.getStatistics().getNumberOfFiles());	
 		Testsuite processing_java=new Testsuite("bla");
-		processing_java.addExtension("m")
-						.addLanguage("java", "Grammars/Java-15.tbl");
-		processing_java.processFiles("Common","java");
+		processing_java.addExtension("m");
+		processing_java.processFiles(InfraStructure_Testing.DIR_TEST1,InfraStructure.JAVA_EXT);
 		Assert.assertEquals(2, processing_java.getStatistics().getNumberOfFiles());	
-		myTestcases.processFiles("Common","str");
+		myTestcases.processFiles(InfraStructure_Testing.DIR_TEST1,InfraStructure.STRATEGO_EXT);
 		Assert.assertEquals(1, myTestcases.getStatistics().getNumberOfFiles());	
 	}
 	



From m.dejonge at tudelft.nl  Fri Nov 20 11:50:16 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 20 Nov 2009 10:50:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20277 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/Input: .
	ProblemCases
Message-ID: <200911201050.nAKAoG85019109@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-20 10:50:16 +0000 (Fri, 20 Nov 2009)
New Revision: 20277

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20277&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/ProblemCases/
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Problematic/

Log:
refactoring: filepaths, language extensions, parsetable lookup

Changes:


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/ProblemCases
___________________________________________________________________
Added: svn:mergeinfo
   + 



From m.dejonge at tudelft.nl  Fri Nov 20 11:50:55 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 20 Nov 2009 10:50:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20278 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput:
	. TestFiles1 TestFiles2
Message-ID: <200911201050.nAKAotFM019123@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-20 10:50:55 +0000 (Fri, 20 Nov 2009)
New Revision: 20278

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20278&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/erroneous.app
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/nearbyRegions.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/twoRegions.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/test1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/test2.cs

Log:


Changes:


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1
___________________________________________________________________
Added: svn:mergeinfo
   + 

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test1.java	2009-11-17 12:57:47 UTC (rev 20253)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.java	2009-11-20 10:50:55 UTC (rev 20278)
@@ -1,30 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-
-class X {
-
-	private int correctMethod1() {
-		corr2();
-		return corrInt;
-	}
-
-	private int erroneousMethod() {
-		corr2();
-		if(true){ //@START
-			foo();
-			bar(); //@END
-		return 5;
-	}
-
-	private int correctMethod2() {
-		int corrLine1;
-		if (true) {
-			corrLine2();
-		}
-		corrLine3();
-		corrLine4();
-	}
-}

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.java (from rev 20268, sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test1.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.java	2009-11-20 10:50:55 UTC (rev 20278)
@@ -0,0 +1,30 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+
+class X {
+
+	private int correctMethod1() {
+		corr2();
+		return corrInt;
+	}
+
+	private int erroneousMethod() {
+		corr2();
+		if(true){ //@START
+			foo();
+			bar();//} //@END
+		return 5;
+	}
+
+	private int correctMethod2() {
+		int corrLine1;
+		if (true) {
+			corrLine2();
+		}
+		corrLine3();
+		corrLine4();
+	}
+}

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test1.str	2009-11-17 12:57:47 UTC (rev 20253)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.str	2009-11-20 10:50:55 UTC (rev 20278)
@@ -1,26 +0,0 @@
-module evaluation
-
-imports
-  libstratego-lib
-
-rules
-  
-  evaluate: mult(ea1, ea2) -> r where  r:= <mulS>(<evaluate> ea1, <evaluate> ea2)
-  evaluate: add(ea1, ea2) -> r where  r:= <addS>(<evaluate> ea1, <evaluate> ea2)
-  evaluate: sub(ea1, ea2) -> r where r:= <subtS>(<evaluate> ea1, <evaluate> ea2)
-  evaluate: div(ea1, ea2) -> r where  r:= <divS>(<evaluate> ea1, <evaluate> ea2)
-  evaluate: num(x) -> x
-  evaluate: ident(x) -> <substitute> x  
-  evaluate: with_expr(name, value, body) -> r  
-  where /*|} @START */ 
-  {|
-       substitute: rules (substitute: name -> <try-eval>(value)); 
-       r:= <try-eval> (body) /* @END */ 
-    
-  
-   evaluate-exprlist: Expressions(exprlist) -> <map(try-eval)> exprlist  
-   try-eval=evaluate <+ all(try-eval)
-   
-strategies
-
-  eval = evaluate-exprlist
\ No newline at end of file

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.str (from rev 20270, sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test1.str)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test1.str	2009-11-20 10:50:55 UTC (rev 20278)
@@ -0,0 +1,25 @@
+module evaluation
+
+imports
+  libstratego-lib
+
+rules
+  
+  evaluate: mult(ea1, ea2) -> r where  r:= <mulS>(<evaluate> ea1, <evaluate> ea2)
+  evaluate: add(ea1, ea2) -> r where  r:= <addS>(<evaluate> ea1, <evaluate> ea2)
+  evaluate: sub(ea1, ea2) -> r where r:= <subtS>(<evaluate> ea1, <evaluate> ea2)
+  evaluate: div(ea1, ea2) -> r where  r:= <divS>(<evaluate> ea1, <evaluate> ea2)
+  evaluate: num(x) -> x
+  evaluate: ident(x) -> <substitute> x  
+  evaluate: with_expr(name, value, body) -> r  
+  where /*|} @START */ 
+  {|
+       substitute: rules (substitute: name -> <try-eval>(value)); 
+       r:= <try-eval> (body) /* @END */   
+  
+   evaluate-exprlist: Expressions(exprlist) -> <map(try-eval)> exprlist  
+   try-eval=evaluate <+ all(try-eval)
+   
+strategies
+
+  eval = evaluate-exprlist
\ No newline at end of file

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test2.java	2009-11-17 12:57:47 UTC (rev 20253)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test2.java	2009-11-20 10:50:55 UTC (rev 20278)
@@ -1,29 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-class X {
-	
-  private int correctMethod1(){
-     corr2();    
-     return corrInt;
-  }
-
-  private int ErrorFragment(){
-      int corrLine1;
-      corrLine2();
-      bla bla bla
-      corrLine3();
-  }      
-  
-  private int correctMethod2(){
-      corr2();
-      corr2();
-      int corrInt=1;
-      return corrInt;
-  }
-  
-
-}
-

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test2.java (from rev 20263, sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Common/test2.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles1/test2.java	2009-11-20 10:50:55 UTC (rev 20278)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      bla bla bla //@START @END
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2
___________________________________________________________________
Added: svn:mergeinfo
   + 

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/erroneous.app (from rev 20271, sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/erroneous.app)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/erroneous.app	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/erroneous.app	2009-11-20 10:50:55 UTC (rev 20278)
@@ -0,0 +1,29 @@
+module notrecoverednicely
+
+ entity PublicationList {
+    publications -> Set<Publication>
+
+    buckets <> Set<PublicationBucket>
+
+    function add(pub : Publication) {
+      publications.add(pub);
+    }
+    function insert(val : String, pub : Publication) {
+      for(b : PublicationBucket in buckets) {
+        if(b.key == val) {
+          b.add(pub);
+          b.size := b.size + 1;
+         return;
+        }
+      }
+      buckets.add(PublicationBucket{ publications := x }
+    }
+
+    publicationKey -> PublicationKey
+
+    function foo() {
+      for(pub : Publication in this.publications) {
+        insert(pub.year, pub);
+      }
+    }
+  }
\ No newline at end of file

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/nearbyRegions.java (from rev 20273, sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/nearbyRegions.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/nearbyRegions.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/nearbyRegions.java	2009-11-20 10:50:55 UTC (rev 20278)
@@ -0,0 +1,28 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+
+class X {
+
+	private int correctMethod1() {
+		corr2();
+		return corrInt;
+	}
+
+	private int erroneousMethod() {
+		if(true){ //@START
+			foo();
+			bar(); //@END
+	}
+
+	private int correctMethod2() {
+		if (true) { //@START
+			corrLine2(); //}
+		else
+			return 4; //@END
+		corrLine3();
+		corrLine4();
+	}
+}

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/test1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test1.java	2009-11-17 12:57:47 UTC (rev 20253)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/test1.java	2009-11-20 10:50:55 UTC (rev 20278)
@@ -1,30 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-
-class X {
-
-	private int correctMethod1() {
-		corr2();
-		return corrInt;
-	}
-
-	private int erroneousMethod() {
-		corr2();
-		if(true){ //@START
-			foo();
-			bar(); //@END
-		return 5;
-	}
-
-	private int correctMethod2() {
-		int corrLine1;
-		if (true) {
-			corrLine2();
-		}
-		corrLine3();
-		corrLine4();
-	}
-}

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/test2.cs
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/test2.cs	2009-11-17 12:57:47 UTC (rev 20253)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/test2.cs	2009-11-20 10:50:55 UTC (rev 20278)
@@ -1,29 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-class X {
-	
-  private int correctMethod1(){
-     corr2();    
-     return corrInt;
-  }
-
-  private int ErrorFragment(){
-      int corrLine1;
-      corrLine2();
-      bla bla bla
-      corrLine3();
-  }      
-  
-  private int correctMethod2(){
-      corr2();
-      corr2();
-      int corrInt=1;
-      return corrInt;
-  }
-  
-
-}
-

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/twoRegions.java (from rev 20273, sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/Practice/twoRegions.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/twoRegions.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/twoRegions.java	2009-11-20 10:50:55 UTC (rev 20278)
@@ -0,0 +1,36 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+
+class X {
+
+	private int correctMethod1() {
+		corr2();
+		return corrInt;
+	}
+
+	private int erroneousMethod() {
+		if(true){ //@START
+			foo();
+			bar(); //@END
+	}
+		
+	private int correctMethod1() {
+		corr2();
+		return corrInt;
+	}
+
+	private int correctMethod2() {
+		correct();
+		int i;
+		i=1;
+		if (true) { //@START
+			corrLine2(); //}
+		else
+			return 4; //@END
+		corrLine3();
+		corrLine4();
+	}
+}



From L.C.L.Kats at tudelft.nl  Fri Nov 20 12:53:50 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 20 Nov 2009 11:53:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20279 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <200911201153.nAKBroiq020040@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-20 11:53:50 +0000 (Fri, 20 Nov 2009)
New Revision: 20279

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20279&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str	2009-11-20 10:50:55 UTC (rev 20278)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str	2009-11-20 11:53:50 UTC (rev 20279)
@@ -55,7 +55,6 @@
   
     [a-zA-Z][a-zA-Z0-9\\_]* -> ID
     \"-\"? [0-9]+            -> INT
-    \"\\\"\" ~[\\\"\\n]* \"\\\"\"     -> STRING
     
     \"\\\"\" StringChar* \"\\\"\" -> STRING
     ~[\\\"\\n]               -> StringChar



From m.dejonge at tudelft.nl  Fri Nov 20 13:04:12 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 20 Nov 2009 12:04:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20280 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/src:
	evaluating testruns tests
Message-ID: <200911201204.nAKC4CXg020332@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-20 12:04:11 +0000 (Fri, 20 Nov 2009)
New Revision: 20280

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20280&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/FilePaths.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/InfraStructure.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/InfraStructure.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/evaluateLanguages.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java

Log:
File locations for testruns and junit tests

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-20 11:53:50 UTC (rev 20279)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-20 12:04:11 UTC (rev 20280)
@@ -24,7 +24,6 @@
 	private static final String EXPECTED_END_SIGN = "@END";
 	private static final String EXPECTED_START_SIGN = "@START";
 	private static final String PARSETREE_EXTENSION = ".pt";
-	private static final String OUTPUT_REGION_SKIP = "OutputRegionSkip"+File.separator;
 	private int startLine;
 	
 	public void setStartLine(int startLine) {
@@ -60,8 +59,8 @@
 			throws FileNotFoundException, IOException,
 			InvalidParseTableException, NoRecoveryRulesException, SGLRException, InterruptedException {
 		String fileName=testFile.replace(File.separatorChar, '.');
-		String recoveredFile=OUTPUT_REGION_SKIP+fileName;
-		String parseTreeFile = OUTPUT_REGION_SKIP+fileName+PARSETREE_EXTENSION;
+		String recoveredFile=FilePaths.OUTPUT_REGION_SKIP+fileName;
+		String parseTreeFile = FilePaths.OUTPUT_REGION_SKIP+fileName+PARSETREE_EXTENSION;
 		writeParseTree(testFile, parseTable, parseTreeFile);	
 		yieldAsfix(parseTreeFile, recoveredFile);
 		return recoveredFile;

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/FilePaths.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/FilePaths.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/FilePaths.java	2009-11-20 12:04:11 UTC (rev 20280)
@@ -0,0 +1,36 @@
+package evaluating;
+
+import java.io.File;
+import java.util.HashMap;
+
+public class FilePaths {
+	
+	//output location for recovered files
+	public static final String OUTPUT_REGION_SKIP = "OutputRegionSkip"+File.separator;
+	
+	//Parse table locations
+	private HashMap<String, String> parsetableLookUp;
+	private String RoorDir;
+	
+	public FilePaths(String rootDirectory){
+		RoorDir=rootDirectory;	
+		parsetableLookUp=new HashMap<String, String>();
+	}
+	
+	public FilePaths addLanguage(String extension, String parseTablePath) {
+		parsetableLookUp.put(extension, parseTablePath);
+		return this;
+	}
+
+	public String getParsetable(String extension) {
+		return parsetableLookUp.get(extension);
+	}
+	
+	public void setRoorDir(String roorDir) {
+		RoorDir = roorDir;
+	}
+
+	public String getRoorDir() {
+		return RoorDir;
+	}
+}

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/InfraStructure.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/InfraStructure.java	2009-11-20 11:53:50 UTC (rev 20279)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/InfraStructure.java	2009-11-20 12:04:11 UTC (rev 20280)
@@ -1,53 +0,0 @@
-package evaluating;
-
-import java.io.File;
-import java.util.HashMap;
-
-public class InfraStructure {
-	
-	//Grammars
-	public static final String JAVA_GRAMMAR = "Grammars" + File.separator +"Java-15.tbl";
-	public static final String STRATEGO_GRAMMAR = "Grammars" + File.separator +"Stratego-Sugar.tbl";
-	public static final String WEBDSL_GRAMMAR = "Grammars" + File.separator +"WebDSL.tbl";
-	public static final String STRATEGO_JAVA_GRAMMAR = "Grammars" + File.separator +"Stratego-Java-15.tbl";
-	
-	//Extensions
-	public static final String JAVA_EXT = "java";
-	public static final String STRATEGO_EXT = "str";
-	public static final String WEBDSL_EXT = "app";
-	public static final String STRATEGO_JAVA_EXT = "strjava";
-	
-	//Directories
-	private static String RoorDir;
-	public static final String DIR_ROOT="Input";
-	public static final String DIR_COMMON = DIR_ROOT +File.separator+"Common";
-	public static final String DIR_MESSY_INDENT=DIR_ROOT +File.separator+"MessyIndent";
-	public static final String DIR_PROBLEM_CASES=DIR_ROOT +File.separator+"ProblemCases";
-	public static final String DIR_SPOOFAX_EXAMPLES=DIR_ROOT +File.separator+"SpoofaxExamples";
-	
-	//Parse table locations
-	private static  HashMap<String, String> parsetableLookUp=new HashMap<String, String>();
-	
-	public static void addLanguage(String extension, String parseTablePath) {
-		parsetableLookUp.put(extension, parseTablePath);
-	}
-
-	public static String getParsetable(String extension) {
-		return parsetableLookUp.get(extension);
-	}
-	
-	public static void addStandardLanguages() {
-		addLanguage(InfraStructure.STRATEGO_EXT, InfraStructure.STRATEGO_GRAMMAR);
-		addLanguage(InfraStructure.WEBDSL_EXT, InfraStructure.WEBDSL_GRAMMAR);
-		addLanguage(InfraStructure.STRATEGO_JAVA_EXT, InfraStructure.STRATEGO_JAVA_GRAMMAR);
-		addLanguage(InfraStructure.JAVA_EXT, InfraStructure.JAVA_GRAMMAR);
-	}
-
-	public static void setRoorDir(String roorDir) {
-		RoorDir = roorDir;
-	}
-
-	public static String getRoorDir() {
-		return RoorDir;
-	}
-}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-20 11:53:50 UTC (rev 20279)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-20 12:04:11 UTC (rev 20280)
@@ -13,7 +13,7 @@
 	        return (!name.endsWith(".svn"));
 	    }
 	}
-	
+	private FilePaths fileLocations;
 	private ArrayList<String> directories;
 	private ArrayList<String> extensions;
 	private boolean useAllExtensions;
@@ -29,20 +29,21 @@
 		testsuiteName=testsuite;
 	}
 	
-	public Testsuite(String suiteName){
+	public Testsuite(String suiteName, FilePaths fileLocations){
 		testsuiteName=suiteName;
 		directories=new ArrayList<String>();
 		extensions=new ArrayList<String>();
 		useAllExtensions=true;
 		useAllDirectories=true;
 		statistics = new Statistics();
+		this.fileLocations=fileLocations;
 	}
 	
 	public void runTestcases() throws Exception{
 		if(useAllDirectories){
 			directories.clear();
-			for (String subDir : new File(InfraStructure.getRoorDir()).list(new SVNFilter())) {
-				addDir(InfraStructure.getRoorDir() + File.separator + subDir);
+			for (String subDir : new File(fileLocations.getRoorDir()).list(new SVNFilter())) {
+				addDir(fileLocations.getRoorDir() + File.separator + subDir);
 			}
 		}
 		if(useAllExtensions){
@@ -71,7 +72,7 @@
         	String filePath=dir+File.separator+fileName;
         	if (!new File(filePath).isDirectory() && (useAllExtensions || fileName.endsWith(extension))){
         		Testcase file = new Testcase(filePath);
-        		file.compareRegions(InfraStructure.getParsetable(ext));
+        		file.compareRegions(fileLocations.getParsetable(ext));
 				statistics.processFileResult(file);
 				//System.out.println(filePath);
 			}

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/InfraStructure.java (from rev 20276, sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/InfraStructure.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/InfraStructure.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/InfraStructure.java	2009-11-20 12:04:11 UTC (rev 20280)
@@ -0,0 +1,39 @@
+package testruns;
+
+import java.io.File;
+import java.util.HashMap;
+
+import evaluating.FilePaths;
+
+public class InfraStructure {
+	
+	//Grammars
+	public static final String JAVA_GRAMMAR = "Grammars" + File.separator +"Java-15.tbl";
+	public static final String STRATEGO_GRAMMAR = "Grammars" + File.separator +"Stratego-Sugar.tbl";
+	public static final String WEBDSL_GRAMMAR = "Grammars" + File.separator +"WebDSL.tbl";
+	public static final String STRATEGO_JAVA_GRAMMAR = "Grammars" + File.separator +"Stratego-Java-15.tbl";
+	
+	//Extensions
+	public static final String JAVA_EXT = "java";
+	public static final String STRATEGO_EXT = "str";
+	public static final String WEBDSL_EXT = "app";
+	public static final String STRATEGO_JAVA_EXT = "strjava";
+	
+	//Directories
+	public static final String DIR_ROOT="Input";
+	public static final String DIR_COMMON = DIR_ROOT +File.separator+"Common";
+	public static final String DIR_MESSY_INDENT=DIR_ROOT +File.separator+"MessyIndent";
+	public static final String DIR_PROBLEM_CASES=DIR_ROOT +File.separator+"ProblemCases";
+	public static final String DIR_SPOOFAX_EXAMPLES=DIR_ROOT +File.separator+"SpoofaxExamples";
+	
+	
+	
+	public static void addStandardLanguages(FilePaths fileLocations) {
+		fileLocations.addLanguage(InfraStructure.STRATEGO_EXT, InfraStructure.STRATEGO_GRAMMAR);
+		fileLocations.addLanguage(InfraStructure.WEBDSL_EXT, InfraStructure.WEBDSL_GRAMMAR);
+		fileLocations.addLanguage(InfraStructure.STRATEGO_JAVA_EXT, InfraStructure.STRATEGO_JAVA_GRAMMAR);
+		fileLocations.addLanguage(InfraStructure.JAVA_EXT, InfraStructure.JAVA_GRAMMAR);
+	}
+
+	
+}


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/InfraStructure.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/evaluateLanguages.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/evaluateLanguages.java	2009-11-20 11:53:50 UTC (rev 20279)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/evaluateLanguages.java	2009-11-20 12:04:11 UTC (rev 20280)
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import evaluating.InfraStructure;
+import evaluating.FilePaths;
 import evaluating.Testsuite;
 
 
@@ -10,9 +10,9 @@
 	
 	@Test
 	public void run() throws Exception{
-		InfraStructure.setRoorDir(InfraStructure.DIR_ROOT);
-		InfraStructure.addStandardLanguages();
-		Testsuite javaLanguage=new Testsuite("All Java files");
+		FilePaths fileLocations=new FilePaths(InfraStructure.DIR_ROOT);
+		InfraStructure.addStandardLanguages(fileLocations);
+		Testsuite javaLanguage=new Testsuite("All Java files", fileLocations);
 		javaLanguage.setAllDirectories(true);
 		javaLanguage.addExtension(InfraStructure.JAVA_EXT);
 		javaLanguage.runTestcases();

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java	2009-11-20 11:53:50 UTC (rev 20279)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java	2009-11-20 12:04:11 UTC (rev 20280)
@@ -2,7 +2,9 @@
 
 import org.junit.Test;
 
-import evaluating.InfraStructure;
+import testruns.InfraStructure;
+
+import evaluating.FilePaths;
 import evaluating.Testsuite;
 
 
@@ -10,13 +12,13 @@
 	
 	@Test
 	public void Evaluate() throws Exception{		
-		Testsuite t = new Testsuite("TestInput/Common, Stratego + Java");
-		InfraStructure.setRoorDir(InfraStructure_Testing.DIR_ROOT_TESTS);
+		FilePaths fileLocations=new FilePaths(InfraStructure_Testing.DIR_ROOT_TESTS);
+		InfraStructure.addStandardLanguages(fileLocations);
+		Testsuite t = new Testsuite("TestInput/Common, Stratego + Java", fileLocations);
 		//t.addDir("Common")
 		t.addDir(InfraStructure_Testing.DIR_TEST2)
 			.addExtension(InfraStructure.JAVA_EXT)
 			.addExtension(InfraStructure.STRATEGO_EXT);
-		InfraStructure.addStandardLanguages();
 		t.runTestcases();
 		System.out.println(t.getTestSuiteName());
 		System.out.println(t.getStatistics().getOverviewResults().toString());

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java	2009-11-20 11:53:50 UTC (rev 20279)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java	2009-11-20 12:04:11 UTC (rev 20280)
@@ -2,8 +2,9 @@
 
 import java.io.File;
 
-import evaluating.InfraStructure;
+import testruns.InfraStructure;
 
+
 public class InfraStructure_Testing extends InfraStructure{
 				
 	//Directories

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-20 11:53:50 UTC (rev 20279)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-20 12:04:11 UTC (rev 20280)
@@ -9,24 +9,24 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import testruns.InfraStructure;
+
 import evaluating.*;
 
 public class Test_Testsuite {
 	
 	private Testsuite myTestcases;
+	private FilePaths fileLocations;
 	
 	public Test_Testsuite() {
-		myTestcases=new Testsuite("a testsuite");
-		InfraStructure.setRoorDir(InfraStructure_Testing.DIR_ROOT_TESTS);
-		InfraStructure.addLanguage(InfraStructure.JAVA_EXT, InfraStructure_Testing.JAVA_GRAMMAR);
-		InfraStructure.addLanguage(InfraStructure.STRATEGO_EXT, InfraStructure_Testing.STRATEGO_GRAMMAR);
-		InfraStructure.addLanguage(InfraStructure.WEBDSL_EXT, InfraStructure_Testing.WEBDSL_GRAMMAR);
-		InfraStructure.addLanguage(InfraStructure.STRATEGO_JAVA_EXT, InfraStructure_Testing.STRATEGO_JAVA_GRAMMAR);
+		fileLocations=new FilePaths(InfraStructure_Testing.DIR_ROOT_TESTS);
+		InfraStructure.addStandardLanguages(fileLocations);
+		myTestcases=new Testsuite("a testsuite", fileLocations);
 	}
 	
 	@Test
 	public void test_Constructor_Defined_Suite(){
-		myTestcases=new Testsuite("MyTestCases");
+		myTestcases=new Testsuite("MyTestCases", null);
 		Assert.assertEquals("MyTestCases", myTestcases.getTestSuiteName());
 	}
 	
@@ -84,7 +84,7 @@
 		myTestcases.addExtension("m");
 		myTestcases.processFiles(InfraStructure_Testing.DIR_TEST1,"cs");
 		Assert.assertEquals(0, myTestcases.getStatistics().getNumberOfFiles());	
-		Testsuite processing_java=new Testsuite("bla");
+		Testsuite processing_java=new Testsuite("bla", fileLocations);
 		processing_java.addExtension("m");
 		processing_java.processFiles(InfraStructure_Testing.DIR_TEST1,InfraStructure.JAVA_EXT);
 		Assert.assertEquals(2, processing_java.getStatistics().getNumberOfFiles());	



From m.dejonge at tudelft.nl  Fri Nov 20 13:58:24 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 20 Nov 2009 12:58:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20281 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	Input/SpoofaxExamples src src/evaluating src/testrun src/tests
Message-ID: <200911201258.nAKCwOGB021054@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-20 12:58:23 +0000 (Fri, 20 Nov 2009)
New Revision: 20281

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20281&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluateRegionRecovery.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/evaluateLanguages.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/erroneous.app
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/javafragment.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/line-before-comment.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with1.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with2.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java

Log:
testrun LanguageEvaluation

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.str	2009-11-20 12:04:11 UTC (rev 20280)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/bad-performance-stratego-sugar.str	2009-11-20 12:58:23 UTC (rev 20281)
@@ -71,5 +71,5 @@
   pp-pp-table =
     <call> ("org.strategoxt.tools.pp-pp-table", [<id>])
   
-  sdf-desugar =
-    <call> ("org.strategoxt.tools.sdf-desugar", [<id>]
+  sdf-desugar = //@START
+    <call> ("org.strategoxt.tools.sdf-desugar", [<id>] //@END

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/erroneous.app
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/erroneous.app	2009-11-20 12:04:11 UTC (rev 20280)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/erroneous.app	2009-11-20 12:58:23 UTC (rev 20281)
@@ -16,10 +16,10 @@
          return;
         }
       }
-      buckets.add(PublicationBucket{ publications := x }
+      buckets.add(PublicationBucket{ publications := x } /*@START @END*/
     }
 
-    publicationKey -> PublicationKey
+    publicationKey -> PublicationKey /*@START @END*/
 
     function foo() {
       for(pub : Publication in this.publications) {

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str	2009-11-20 12:04:11 UTC (rev 20280)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/foo.str	2009-11-20 12:58:23 UTC (rev 20281)
@@ -4,7 +4,7 @@
   libstratego-lib
   foo
 
-strategie\
+strategie\ //@START
 
   main-foo =
     fatal-err(|"No main strategy")
@@ -32,7 +32,7 @@
       target := <GetEntity> type
 
   editor-hover:
-    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term)
+    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term) //@END
 
 rules
 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/javafragment.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/javafragment.java	2009-11-20 12:04:11 UTC (rev 20280)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/javafragment.java	2009-11-20 12:58:23 UTC (rev 20281)
@@ -12,7 +12,7 @@
 		boolean answer=question;
 		if(!answer){
 			answer = !answer;
-			return answerTrue(answer)
+			return answerTrue(answer) //@START @END
 		}
 		else{
 			return answer;

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/line-before-comment.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/line-before-comment.str	2009-11-20 12:04:11 UTC (rev 20280)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/line-before-comment.str	2009-11-20 12:58:23 UTC (rev 20281)
@@ -57,7 +57,7 @@
     Expressions([del-origin'; dec; inc]; del-origin'); del-origin'
   
   del-origin': x#(c*) -> x#(c*)
-  de //errorline
+  de //@START @END
   
   /**
    * Prints the abstract syntax ATerm of a selection.

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with1.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with1.str	2009-11-20 12:04:11 UTC (rev 20280)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with1.str	2009-11-20 12:58:23 UTC (rev 20281)
@@ -2,6 +2,6 @@
 
   rules
  
-    r:
+    r: //@START
       (a b) -> c
-      with d; e
\ No newline at end of file
+      with d; e //@END
\ No newline at end of file

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with2.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with2.str	2009-11-20 12:04:11 UTC (rev 20280)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/SpoofaxExamples/with2.str	2009-11-20 12:58:23 UTC (rev 20281)
@@ -2,7 +2,7 @@
 
   rules
  
-    r:
+    r: //@START
       (a b) -> c
       with d; e; 
-        f
\ No newline at end of file
+        f //@END
\ No newline at end of file

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-20 12:04:11 UTC (rev 20280)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-20 12:58:23 UTC (rev 20281)
@@ -52,7 +52,7 @@
 		}
 		for (String aDir : directories) {
 			for (String anExtension : extensions) {
-				processFiles(aDir, anExtension);
+				runFiles(aDir, anExtension);
 			}			
 		}		
 	}
@@ -61,7 +61,7 @@
 		return statistics;
 	}
 
-	public void processFiles(String inputDirectory, String extension) throws Exception{	
+	public void runFiles(String inputDirectory, String extension) throws Exception{	
 		File dir = new File(inputDirectory);
         if(!dir.exists())
         	throw new IOException("Directory: "+dir + "does not exist");
@@ -71,14 +71,18 @@
         	String ext=fileName.substring(fileName.lastIndexOf('.')+1);
         	String filePath=dir+File.separator+fileName;
         	if (!new File(filePath).isDirectory() && (useAllExtensions || fileName.endsWith(extension))){
-        		Testcase file = new Testcase(filePath);
-        		file.compareRegions(fileLocations.getParsetable(ext));
-				statistics.processFileResult(file);
+        		processFile(ext, filePath);
 				//System.out.println(filePath);
 			}
 		}	
 	}
 
+	public void processFile(String ext, String filePath) throws Exception {
+		Testcase file = new Testcase(filePath);
+		file.compareRegions(fileLocations.getParsetable(ext));
+		statistics.processFileResult(file);
+	}
+
 	public Testsuite addDir(String dirName) {
 		useAllDirectories=false;
 		directories.add(dirName);


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun
___________________________________________________________________
Added: svn:mergeinfo
   + 

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluateRegionRecovery.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluateRegionRecovery.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluateRegionRecovery.java	2009-11-20 12:58:23 UTC (rev 20281)
@@ -0,0 +1,16 @@
+package testrun;
+
+import evaluating.FilePaths;
+import evaluating.Testsuite;
+
+public class EvaluateRegionRecovery {
+
+	/**
+	 * @param args
+	 * @throws Exception 
+	 */
+	public static void main(String[] args) throws Exception {
+		TestRun myTestSuites=new TestRun();
+		myTestSuites.evaluateLanguages();
+	}
+}

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java (from rev 20280, sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/InfraStructure.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java	2009-11-20 12:58:23 UTC (rev 20281)
@@ -0,0 +1,39 @@
+package testrun;
+
+import java.io.File;
+import java.util.HashMap;
+
+import evaluating.FilePaths;
+
+public class InfraStructure {
+	
+	//Grammars
+	public static final String JAVA_GRAMMAR = "Grammars" + File.separator +"Java-15.tbl";
+	public static final String STRATEGO_GRAMMAR = "Grammars" + File.separator +"Stratego-Sugar.tbl";
+	public static final String WEBDSL_GRAMMAR = "Grammars" + File.separator +"WebDSL.tbl";
+	public static final String STRATEGO_JAVA_GRAMMAR = "Grammars" + File.separator +"Stratego-Java-15.tbl";
+	
+	//Extensions
+	public static final String JAVA_EXT = "java";
+	public static final String STRATEGO_EXT = "str";
+	public static final String WEBDSL_EXT = "app";
+	public static final String STRATEGO_JAVA_EXT = "strjava";
+	
+	//Directories
+	public static final String DIR_ROOT="Input";
+	public static final String DIR_COMMON = DIR_ROOT +File.separator+"Common";
+	public static final String DIR_MESSY_INDENT=DIR_ROOT +File.separator+"MessyIndent";
+	public static final String DIR_PROBLEM_CASES=DIR_ROOT +File.separator+"ProblemCases";
+	public static final String DIR_SPOOFAX_EXAMPLES=DIR_ROOT +File.separator+"SpoofaxExamples";
+	
+	
+	
+	public static void addStandardLanguages(FilePaths fileLocations) {
+		fileLocations.addLanguage(InfraStructure.STRATEGO_EXT, InfraStructure.STRATEGO_GRAMMAR);
+		fileLocations.addLanguage(InfraStructure.WEBDSL_EXT, InfraStructure.WEBDSL_GRAMMAR);
+		fileLocations.addLanguage(InfraStructure.STRATEGO_JAVA_EXT, InfraStructure.STRATEGO_JAVA_GRAMMAR);
+		fileLocations.addLanguage(InfraStructure.JAVA_EXT, InfraStructure.JAVA_GRAMMAR);
+	}
+
+	
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java	2009-11-20 12:58:23 UTC (rev 20281)
@@ -0,0 +1,39 @@
+package testrun;
+
+import evaluating.FilePaths;
+import evaluating.Testsuite;
+
+public class TestRun {
+	
+	private FilePaths fileLocations;
+	
+	public TestRun(){
+		fileLocations=new FilePaths(InfraStructure.DIR_ROOT);
+		InfraStructure.addStandardLanguages(fileLocations);
+	}
+	
+	public void evaluateLanguages() throws Exception{
+		evaluateLanguage(new Testsuite("Java", fileLocations), InfraStructure.JAVA_EXT);
+		evaluateLanguage(new Testsuite("WebDSL", fileLocations), InfraStructure.WEBDSL_EXT);
+		//evaluateLanguage(new Testsuite("Stratego", fileLocations), InfraStructure.STRATEGO_EXT);
+		evaluateLanguage(new Testsuite("Stratego-Java", fileLocations), InfraStructure.STRATEGO_JAVA_EXT);
+		//evaluateStrategoFiles();
+	}
+
+	private void evaluateStrategoFiles() throws Exception {
+		Testsuite Stratego=new Testsuite("Stratego_?", fileLocations);
+		Stratego.processFile(InfraStructure.STRATEGO_EXT, "Input/SpoofaxExamples/foo.str");
+		//Stratego.processFile(InfraStructure.STRATEGO_EXT, "Input/SpoofaxExamples/with1.str");
+		//Stratego.processFile(InfraStructure.STRATEGO_EXT, "Input/SpoofaxExamples/with2.str");
+		System.out.println(Stratego.getTestSuiteName());
+		System.out.println(Stratego.getStatistics().getOverviewResults().toString());
+	}
+
+	private void evaluateLanguage(Testsuite testsuite, String ext) throws Exception {
+		testsuite.setAllDirectories(true);
+		testsuite.addExtension(ext);
+		testsuite.runTestcases();
+		System.out.println(testsuite.getTestSuiteName());
+		System.out.println(testsuite.getStatistics().getOverviewResults().toString());
+	}
+}

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/evaluateLanguages.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testruns/evaluateLanguages.java	2009-11-20 10:49:55 UTC (rev 20276)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/evaluateLanguages.java	2009-11-20 12:58:23 UTC (rev 20281)
@@ -1,20 +0,0 @@
-package testruns;
-
-import org.junit.Test;
-
-import evaluating.InfraStructure;
-import evaluating.Testsuite;
-
-
-public class evaluateLanguages {
-	
-	@Test
-	public void run() throws Exception{
-		InfraStructure.setRoorDir(InfraStructure.DIR_ROOT);
-		InfraStructure.addStandardLanguages();
-		Testsuite javaLanguage=new Testsuite("All Java files");
-		javaLanguage.setAllDirectories(true);
-		javaLanguage.addExtension(InfraStructure.JAVA_EXT);
-		javaLanguage.runTestcases();
-	}
-}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java	2009-11-20 12:04:11 UTC (rev 20280)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Evaluate_TestInput.java	2009-11-20 12:58:23 UTC (rev 20281)
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import testruns.InfraStructure;
+import testrun.InfraStructure;
 
 import evaluating.FilePaths;
 import evaluating.Testsuite;

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java	2009-11-20 12:04:11 UTC (rev 20280)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java	2009-11-20 12:58:23 UTC (rev 20281)
@@ -2,7 +2,7 @@
 
 import java.io.File;
 
-import testruns.InfraStructure;
+import testrun.InfraStructure;
 
 
 public class InfraStructure_Testing extends InfraStructure{

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-20 12:04:11 UTC (rev 20280)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-20 12:58:23 UTC (rev 20281)
@@ -9,7 +9,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import testruns.InfraStructure;
+import testrun.InfraStructure;
 
 import evaluating.*;
 
@@ -72,9 +72,9 @@
 	
 	@Test
 	public void test_Processing() throws Exception{		
-		myTestcases.processFiles(InfraStructure_Testing.DIR_TEST1, "");
+		myTestcases.runFiles(InfraStructure_Testing.DIR_TEST1, "");
 		Assert.assertEquals(3, myTestcases.getStatistics().getNumberOfFiles());	
-		myTestcases.processFiles(InfraStructure_Testing.DIR_TEST2, "");
+		myTestcases.runFiles(InfraStructure_Testing.DIR_TEST2, "");
 		Assert.assertEquals(6, myTestcases.getStatistics().getNumberOfFiles());	
 	}
 	
@@ -82,19 +82,19 @@
 	@Test
 	public void test_Processing_extension() throws Exception{
 		myTestcases.addExtension("m");
-		myTestcases.processFiles(InfraStructure_Testing.DIR_TEST1,"cs");
+		myTestcases.runFiles(InfraStructure_Testing.DIR_TEST1,"cs");
 		Assert.assertEquals(0, myTestcases.getStatistics().getNumberOfFiles());	
 		Testsuite processing_java=new Testsuite("bla", fileLocations);
 		processing_java.addExtension("m");
-		processing_java.processFiles(InfraStructure_Testing.DIR_TEST1,InfraStructure.JAVA_EXT);
+		processing_java.runFiles(InfraStructure_Testing.DIR_TEST1,InfraStructure.JAVA_EXT);
 		Assert.assertEquals(2, processing_java.getStatistics().getNumberOfFiles());	
-		myTestcases.processFiles(InfraStructure_Testing.DIR_TEST1,InfraStructure.STRATEGO_EXT);
+		myTestcases.runFiles(InfraStructure_Testing.DIR_TEST1,InfraStructure.STRATEGO_EXT);
 		Assert.assertEquals(1, myTestcases.getStatistics().getNumberOfFiles());	
 	}
 	
 	@Test(expected=IOException.class)
 	public void test_Processing_Dir_not_Exist() throws Exception{		
-		myTestcases.processFiles("Nonsense", "");			
+		myTestcases.runFiles("Nonsense", "");			
 	}
 
 }



From m.dejonge at tudelft.nl  Fri Nov 20 14:49:39 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 20 Nov 2009 13:49:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20282 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: .
	TestScenarios src/evaluating src/tests
Message-ID: <200911201349.nAKDndUq021817@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-20 13:49:39 +0000 (Fri, 20 Nov 2009)
New Revision: 20282

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20282&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/Exact.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/Good.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/IntroducedRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MergedRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MissDiagnosed.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegionFound.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoSkippedRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/Poor.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/TooSmall.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/WrongData.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/SVNFilter.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java

Log:
test scenarios that cover all(?) evaluation cases

Changes:

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/Exact.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/Exact.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/Exact.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      bla bla bla //@START @END
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/Good.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/Good.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/Good.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -0,0 +1,30 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+
+class X {
+
+	private int correctMethod1() {
+		corr2();
+		return corrInt;
+	}
+
+	private int erroneousMethod() {
+		corr2();
+		if(true){ //@START
+			foo();
+			bar();//} //@END
+		return 5;
+	}
+
+	private int correctMethod2() {
+		int corrLine1;
+		if (true) {
+			corrLine2();
+		}
+		corrLine3();
+		corrLine4();
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/IntroducedRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/IntroducedRegion.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/IntroducedRegion.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -0,0 +1,30 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      bla bla bla //@START @END
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      bla bla bla //Introduced
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MergedRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MergedRegion.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MergedRegion.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -0,0 +1,30 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      bla bla bla //@START @END
+      corrLine3();
+      bla bla bla //@START @END
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MissDiagnosed.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MissDiagnosed.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MissDiagnosed.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){ //@START (too force the MIS-DIAGNOSED evaluation)
+     corr2();    
+     return corrInt; //@END
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2(); 
+      bla bla bla 
+      corrLine3();  
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegionFound.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegionFound.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegionFound.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      bla bla bla 
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoSkippedRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoSkippedRegion.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoSkippedRegion.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -0,0 +1,28 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2(); //@START //@END
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/Poor.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/Poor.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/Poor.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -0,0 +1,35 @@
+package test;
+
+public class example {
+	
+	public int i;
+	
+	public example(){
+		i=0;
+	}
+	
+	public boolean answerTrue(boolean question){
+		boolean answer=question;
+		if(!answer){
+			answer = !answer;
+			return answerTrue(answer); //@START @END (too force POOR)
+		//}
+		else{
+			in i;
+			i=1;
+			i+=2;
+			return answer;
+		}
+	}
+	
+	public boolean answerTrue(boolean question){
+		boolean answer=question;
+		if(!answer){
+			answer = !answer;
+			return answerTrue(answer); 
+		}
+		else{
+			return answer;
+		}
+	}
+}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/TooSmall.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/TooSmall.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/TooSmall.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2(); //@START (too force the TOO-SMALL evaluation)
+      bla bla bla 
+      corrLine3();  //@END
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/WrongData.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/WrongData.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/WrongData.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1; //@START
+      corrLine2();
+      bla bla bla //@START @END
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/SVNFilter.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/SVNFilter.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/SVNFilter.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -0,0 +1,10 @@
+package evaluating;
+
+import java.io.File;
+import java.io.FilenameFilter;
+
+public class SVNFilter implements FilenameFilter {
+    public boolean accept(File dir, String name) {
+        return (!name.endsWith(".svn"));
+    }
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-20 12:58:23 UTC (rev 20281)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -8,11 +8,6 @@
 
 public class Testsuite {
 	
-	class SVNFilter implements FilenameFilter {
-	    public boolean accept(File dir, String name) {
-	        return (!name.endsWith(".svn"));
-	    }
-	}
 	private FilePaths fileLocations;
 	private ArrayList<String> directories;
 	private ArrayList<String> extensions;

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-20 12:58:23 UTC (rev 20281)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-20 13:49:39 UTC (rev 20282)
@@ -1,6 +1,7 @@
 package tests;
 
 
+import java.io.File;
 import java.io.IOException;
 
 import junit.framework.Assert;
@@ -12,6 +13,7 @@
 import testrun.InfraStructure;
 
 import evaluating.*;
+import evaluating.SVNFilter;
 
 public class Test_Testsuite {
 	
@@ -33,8 +35,18 @@
 	@Test
 	public void test_allDir_allExtensions() throws Exception{
 		myTestcases.runTestcases();
-		Assert.assertEquals(6, myTestcases.getStatistics().getNumberOfFiles());
+		Assert.assertEquals(countFiles(), myTestcases.getStatistics().getNumberOfFiles());
 	}
+
+	private int countFiles() {
+		int result=0;
+		for (String subDir : new File(fileLocations.getRoorDir()).list(new SVNFilter())) {
+			for (String aFile : new File(fileLocations.getRoorDir() + File.separator + subDir).list(new SVNFilter())) {
+				result++;
+			}
+		}
+		return result;		
+	}
 	
 	@Test
 	public void MoreDirs_OneExtension() throws Exception{
@@ -57,7 +69,7 @@
 	@Test
 	public void test_Default_isAll() throws Exception{
 		myTestcases.runTestcases();
-		Assert.assertEquals(6, myTestcases.getStatistics().getNumberOfFiles());
+		Assert.assertEquals(countFiles(), myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
@@ -67,7 +79,7 @@
 		myTestcases.setAllExtensions(true);	
 		myTestcases.setAllDirectories(true);
 		myTestcases.runTestcases();
-		Assert.assertEquals(6, myTestcases.getStatistics().getNumberOfFiles());
+		Assert.assertEquals(countFiles(), myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test



From L.C.L.Kats at tudelft.nl  Fri Nov 20 15:49:54 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 20 Nov 2009 14:49:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20283 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego
Message-ID: <200911201449.nAKEnsjC023850@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-20 14:49:54 +0000 (Fri, 20 Nov 2009)
New Revision: 20283

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20283&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java

Log:
Ensure chmod of native bundle even if the wizard is never used.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java	2009-11-20 13:49:39 UTC (rev 20282)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java	2009-11-20 14:49:54 UTC (rev 20283)
@@ -1,6 +1,10 @@
 package org.strategoxt.imp.metatooling.stratego;
 
+import java.io.IOException;
+
+import org.eclipse.core.runtime.Platform;
 import org.strategoxt.imp.nativebundle.SDFBundleCommand;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.stratego_xtc.xtc_command_1_0;
 
 /**
@@ -9,6 +13,18 @@
 public class MetaIMPLibrary {
 	public static void init() {
 		// It's a small library, okay?
-		xtc_command_1_0.instance = new SDFBundleCommand();
+		SDFBundleCommand nativeBundle = new SDFBundleCommand();
+		xtc_command_1_0.instance = nativeBundle;
+		
+		try {
+			nativeBundle.init();
+		} catch (IOException e) {
+			Environment.logException("Could not determine the binary path for the native tool bundle (" 
+					+ Platform.getOS() + "/" + Platform.getOSArch()
+					+ ")", e);
+		} catch (RuntimeException e) {
+			Environment.logException("Failed to initialize the native tool bundle (" + Platform.getOS()
+					+ "/" + Platform.getOSArch() + ")", e);
+		}
 	}
 }



From m.dejonge at tudelft.nl  Fri Nov 20 16:30:03 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 20 Nov 2009 15:30:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20284 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: .
	TestInput/TestFiles2 TestScenarios src/evaluating src/testrun
	src/tests
Message-ID: <200911201530.nAKFU3tu024538@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-20 15:30:02 +0000 (Fri, 20 Nov 2009)
New Revision: 20284

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20284&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MisDiagnosed.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoRecovery.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/TwoExactRegions.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MissDiagnosed.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegionFound.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/erroneous.app
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java

Log:
Scenarios unit tested

Changes:


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery
___________________________________________________________________
Modified: svn:ignore
   - BackUp

   + BackUp
Files_That_Cause_Problems


Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/erroneous.app
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/erroneous.app	2009-11-20 14:49:54 UTC (rev 20283)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/erroneous.app	2009-11-20 15:30:02 UTC (rev 20284)
@@ -16,7 +16,7 @@
          return;
         }
       }
-      buckets.add(PublicationBucket{ publications := x }
+      buckets.add(PublicationBucket{ publications := x } 
     }
 
     publicationKey -> PublicationKey

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MisDiagnosed.java (from rev 20282, sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MissDiagnosed.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MisDiagnosed.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MisDiagnosed.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){ //@START (too force the MIS-DIAGNOSED evaluation)
+     corr2();    
+     return corrInt; //@END
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2(); 
+      bla bla bla 
+      corrLine3();  
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MisDiagnosed.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MissDiagnosed.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MissDiagnosed.java	2009-11-20 14:49:54 UTC (rev 20283)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/MissDiagnosed.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -1,29 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-class X {
-	
-  private int correctMethod1(){ //@START (too force the MIS-DIAGNOSED evaluation)
-     corr2();    
-     return corrInt; //@END
-  }
-
-  private int ErrorFragment(){
-      int corrLine1;
-      corrLine2(); 
-      bla bla bla 
-      corrLine3();  
-  }      
-  
-  private int correctMethod2(){
-      corr2();
-      corr2();
-      int corrInt=1;
-      return corrInt;
-  }
-  
-
-}
-

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegion.java (from rev 20282, sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegionFound.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegion.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegion.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      bla bla bla 
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegion.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegionFound.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegionFound.java	2009-11-20 14:49:54 UTC (rev 20283)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoExpectedRegionFound.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -1,29 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-class X {
-	
-  private int correctMethod1(){
-     corr2();    
-     return corrInt;
-  }
-
-  private int ErrorFragment(){
-      int corrLine1;
-      corrLine2();
-      bla bla bla 
-      corrLine3();
-  }      
-  
-  private int correctMethod2(){
-      corr2();
-      corr2();
-      int corrInt=1;
-      return corrInt;
-  }
-  
-
-}
-

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoRecovery.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoRecovery.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/NoRecovery.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -0,0 +1,25 @@
+package test; //@START
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  //} } @END
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/TwoExactRegions.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/TwoExactRegions.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestScenarios/TwoExactRegions.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      bla bla bla //@START @END
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2(); 
+      int corrInt=1 //@START @END
+      return corrInt;
+  }
+  
+
+}
+

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java	2009-11-20 14:49:54 UTC (rev 20283)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -8,6 +8,8 @@
 	MIS_DIAGNOSED,
 	MERGED_REGION,
 	INTRODUCED_REGION,
-	NO_REGION_FOUND,
-	WRONG_DATA
+	WRONG_DATA, 
+	RECOVERY_FAILED,
+	NO_SYNTAX_ERRORS,
+	NO_EXPECTED_REGION
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-20 14:49:54 UTC (rev 20283)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -1,5 +1,6 @@
 package evaluating;
 
+import java.io.FileNotFoundException;
 import java.util.ArrayList;
 
 
@@ -19,7 +20,7 @@
 		if(invalidRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine))
 			regionEvaluation.add(Evaluation.WRONG_DATA);
 		else if(actualStartLine < 0 || actualEndLine <0)
-			regionEvaluation.add(Evaluation.NO_REGION_FOUND);
+			regionEvaluation.add(Evaluation.WRONG_DATA);
 		else if(actualStartLine==expectedStartLine && actualEndLine==expectedEndLine)
 			regionEvaluation.add(Evaluation.EXACT);
 		else if (expectedStartLine>=actualStartLine && expectedEndLine <= actualEndLine){
@@ -35,19 +36,41 @@
 			regionEvaluation.add(Evaluation.MIS_DIAGNOSED);
 	}
 
-	public void compareRegions(String parseTable) throws Exception {
-		ArrayList<ErroneousRegion> expectedRegions=ErroneousRegion.collectExpectedRegions(filePath);
-		ArrayList<ErroneousRegion> skippedRegions=ErroneousRegion.collectSkippedRegions(filePath, parseTable);
-		int compareNumber=expectedRegions.size();
-		if(expectedRegions.size()>skippedRegions.size()){
+	public void compareRegions(String parseTable) throws FileNotFoundException{
+		ArrayList<ErroneousRegion> expectedRegions=null;
+		ArrayList<ErroneousRegion> skippedRegions=null;
+		try {
+			expectedRegions=ErroneousRegion.collectExpectedRegions(filePath);
+		}catch (FileNotFoundException e) {
+			throw(e);
+		}
+		catch (Exception e) {
+			regionEvaluation.add(Evaluation.WRONG_DATA);
+			return;
+		}
+		try {
+			skippedRegions = ErroneousRegion.collectSkippedRegions(filePath, parseTable);
+		} catch (Exception e) {
+			regionEvaluation.add(Evaluation.RECOVERY_FAILED);
+			return;
+		}
+		if(expectedRegions.size()==0){
+			regionEvaluation.add(Evaluation.NO_EXPECTED_REGION);
+			return;
+		}
+		if(skippedRegions.size()==0){
+			regionEvaluation.add(Evaluation.NO_SYNTAX_ERRORS);
+			return;
+		}
+		if(expectedRegions.size()> skippedRegions.size()){
 			regionEvaluation.add(Evaluation.MERGED_REGION);
-			compareNumber=Math.min(1, skippedRegions.size()); //it's not clear how to match the regions (except the first)
+			return;
 		}
 		if(expectedRegions.size() < skippedRegions.size()){
 			regionEvaluation.add(Evaluation.INTRODUCED_REGION);
-			compareNumber=Math.min(1, expectedRegions.size());  //region matching not clear
+			return;
 		}		
-		for (int j = 0; j < compareNumber; j++) {
+		for (int j = 0; j < expectedRegions.size(); j++) {
 			ErroneousRegion expected = expectedRegions.get(j);
 			ErroneousRegion skipped = skippedRegions.get(j);
 			processRegionData(expected.getStartLine(), expected.getEndLine(), skipped.getStartLine(), skipped.getEndLine());

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-20 14:49:54 UTC (rev 20283)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -1,6 +1,7 @@
 package evaluating;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.FilenameFilter;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -37,8 +38,11 @@
 	public void runTestcases() throws Exception{
 		if(useAllDirectories){
 			directories.clear();
+			directories.add(fileLocations.getRoorDir());
 			for (String subDir : new File(fileLocations.getRoorDir()).list(new SVNFilter())) {
-				addDir(fileLocations.getRoorDir() + File.separator + subDir);
+				String subDirPath=fileLocations.getRoorDir() + File.separator + subDir;
+				if(new File(subDirPath).isDirectory())
+					addDir(subDirPath);
 			}
 		}
 		if(useAllExtensions){
@@ -72,7 +76,7 @@
 		}	
 	}
 
-	public void processFile(String ext, String filePath) throws Exception {
+	public void processFile(String ext, String filePath) throws FileNotFoundException {
 		Testcase file = new Testcase(filePath);
 		file.compareRegions(fileLocations.getParsetable(ext));
 		statistics.processFileResult(file);

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java	2009-11-20 14:49:54 UTC (rev 20283)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -1,5 +1,7 @@
 package testrun;
 
+import java.io.FileNotFoundException;
+
 import evaluating.FilePaths;
 import evaluating.Testsuite;
 
@@ -20,7 +22,7 @@
 		//evaluateStrategoFiles();
 	}
 
-	private void evaluateStrategoFiles() throws Exception {
+	private void evaluateStrategoFiles() throws FileNotFoundException{
 		Testsuite Stratego=new Testsuite("Stratego_?", fileLocations);
 		Stratego.processFile(InfraStructure.STRATEGO_EXT, "Input/SpoofaxExamples/foo.str");
 		//Stratego.processFile(InfraStructure.STRATEGO_EXT, "Input/SpoofaxExamples/with1.str");

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java	2009-11-20 14:49:54 UTC (rev 20283)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -11,7 +11,7 @@
 	public static final String DIR_ROOT_TESTS = "TestInput";
 	public static final String DIR_TEST1 = DIR_ROOT_TESTS +File.separator+"TestFiles1";
 	public static final String DIR_TEST2=DIR_ROOT_TESTS +File.separator+"TestFiles2";
-	public static final String DIR_ALLSCENARIOS=DIR_ROOT_TESTS +File.separator+"Scenarios";
+	public static final String DIR_SCENARIOS="TestScenarios";
 	
 	//TestFiles
 	public static final String TEST1_JAVA = DIR_TEST1 + File.separator +"test1.java";

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -0,0 +1,135 @@
+package tests;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.util.ArrayList;
+
+import junit.framework.Assert;
+
+import org.junit.Test;
+
+import testrun.InfraStructure;
+import evaluating.Evaluation;
+import evaluating.FilePaths;
+import evaluating.Testcase;
+import evaluating.Testsuite;
+
+
+public class Test_Scenarios {
+	
+private FilePaths fileLocations;
+private Testsuite testsuite;
+	
+	public Test_Scenarios(){
+		fileLocations=new FilePaths(InfraStructure_Testing.DIR_SCENARIOS);
+		InfraStructure.addStandardLanguages(fileLocations);
+		testsuite=new Testsuite("Scenarios", fileLocations);
+	}
+	
+	@Test
+	public void evaluateScenarios() throws Exception {
+		testsuite.setAllDirectories(true);
+		testsuite.addExtension(InfraStructure_Testing.JAVA_EXT);
+		testsuite.runTestcases();
+		System.out.println(testsuite.getTestSuiteName());
+		System.out.println(testsuite.getStatistics().getOverviewResults().toString());
+		System.out.println(testsuite.getStatistics().getResultsCategorised().toString());
+	}
+	
+	@Test
+	public void testExact() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("Exact.java");
+		Assert.assertEquals(1, evaluations.size());
+		Assert.assertEquals(Evaluation.EXACT, evaluations.get(0));
+	}
+	
+	@Test
+	public void testGood() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("Good.java");
+		Assert.assertEquals(1, evaluations.size());
+		Assert.assertEquals(Evaluation.GOOD, evaluations.get(0));
+	}
+	
+	@Test
+	public void testPoor() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("Poor.java");
+		Assert.assertEquals(1, evaluations.size());
+		Assert.assertEquals(Evaluation.POOR, evaluations.get(0));
+	}
+	
+	@Test
+	public void testIntroduced() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("IntroducedRegion.java");
+		Assert.assertEquals(1, evaluations.size());
+		Assert.assertEquals(Evaluation.INTRODUCED_REGION, evaluations.get(0));
+	}
+	
+	@Test
+	public void testMerged() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("MergedRegion.java");
+		Assert.assertEquals(1, evaluations.size());
+		Assert.assertEquals(Evaluation.MERGED_REGION, evaluations.get(0));
+	}
+	
+	@Test
+	public void testMissDiagnosed() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("MisDiagnosed.java");
+		Assert.assertEquals(1, evaluations.size());
+		Assert.assertEquals(Evaluation.MIS_DIAGNOSED, evaluations.get(0));
+	}
+	
+	@Test
+	public void testNoExpected() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("NoExpectedRegion.java");
+		Assert.assertEquals(1, evaluations.size());
+		Assert.assertEquals(Evaluation.NO_EXPECTED_REGION, evaluations.get(0));
+	}
+	
+	@Test
+	public void testNoRecovery() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("NoRecovery.java");
+		Assert.assertEquals(1, evaluations.size());
+		Assert.assertEquals(Evaluation.RECOVERY_FAILED, evaluations.get(0));
+	}
+	
+	@Test
+	public void testNoSkipped() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("NoSkippedRegion.java");
+		Assert.assertEquals(1, evaluations.size());
+		Assert.assertEquals(Evaluation.NO_SYNTAX_ERRORS, evaluations.get(0));
+	}
+	
+	@Test
+	public void testTooSmall() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("TooSmall.java");
+		Assert.assertEquals(1, evaluations.size());
+		Assert.assertEquals(Evaluation.TOO_SMALL, evaluations.get(0));
+	}
+	
+	@Test
+	public void testWrongData() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("WrongData.java");
+		Assert.assertEquals(1, evaluations.size());
+		Assert.assertEquals(Evaluation.WRONG_DATA, evaluations.get(0));
+	}
+	
+	@Test
+	public void testTwoExact() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("TwoExactRegions.java");
+		Assert.assertEquals(2, evaluations.size());
+		Assert.assertEquals(Evaluation.EXACT, evaluations.get(0));
+		Assert.assertEquals(Evaluation.EXACT, evaluations.get(1));
+	}
+
+	private ArrayList<Evaluation> evaluateFile(String fileName) throws FileNotFoundException {
+		Testcase file = new Testcase(InfraStructure_Testing.DIR_SCENARIOS + File.separator + fileName);
+		file.compareRegions(fileLocations.getParsetable(InfraStructure.JAVA_EXT));
+		return file.getRegionEvaluations();
+	}
+	
+	@Test(expected=FileNotFoundException.class)
+	public void testFileNotFoundException() throws Exception {
+		ArrayList<Evaluation> evaluations = evaluateFile("NotExisting.java");
+	}
+
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java	2009-11-20 14:49:54 UTC (rev 20283)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -28,28 +28,26 @@
 		assertTrue(statistics.getResultList(Evaluation.GOOD).contains("Good.java"));
 		assertEquals(1, statistics.getResultList(Evaluation.POOR).size());
 		assertTrue(statistics.getResultList(Evaluation.POOR).contains("Bad.java"));
-		assertEquals(2, statistics.getResultList(Evaluation.WRONG_DATA).size());
+		assertEquals(3, statistics.getResultList(Evaluation.WRONG_DATA).size());
 		assertTrue(statistics.getResultList(Evaluation.WRONG_DATA).contains("ErrorInData1.java"));
 		assertTrue(statistics.getResultList(Evaluation.WRONG_DATA).contains("ErrorInData2.java"));
 		assertEquals(1, statistics.getResultList(Evaluation.TOO_SMALL).size());
 		assertTrue(statistics.getResultList(Evaluation.TOO_SMALL).contains("TooSmall.java"));
 		assertEquals(1, statistics.getResultList(Evaluation.MIS_DIAGNOSED).size());
 		assertTrue(statistics.getResultList(Evaluation.MIS_DIAGNOSED).contains("MisDiagnosed.java"));
-		assertEquals(1, statistics.getResultList(Evaluation.NO_REGION_FOUND).size());
-		assertTrue(statistics.getResultList(Evaluation.NO_REGION_FOUND).contains("Failed.java"));
+		assertTrue(statistics.getResultList(Evaluation.WRONG_DATA).contains("Failed.java"));
 	}
 	
 	@Test
 	public void testResultOverView(){
 		processTestData();
-		assertEquals(9, statistics.getOverviewResults().size());
+		assertEquals(11, statistics.getOverviewResults().size());
 		assertEquals("2", statistics.getOverviewResults().get(Evaluation.EXACT));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.GOOD));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.POOR));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.TOO_SMALL));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.MIS_DIAGNOSED));
-		assertEquals("1", statistics.getOverviewResults().get(Evaluation.NO_REGION_FOUND));
-		assertEquals("2", statistics.getOverviewResults().get(Evaluation.WRONG_DATA));
+		assertEquals("3", statistics.getOverviewResults().get(Evaluation.WRONG_DATA));
 		assertEquals("0", statistics.getOverviewResults().get(Evaluation.INTRODUCED_REGION));
 		assertEquals("0", statistics.getOverviewResults().get(Evaluation.MERGED_REGION));
 	}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-20 14:49:54 UTC (rev 20283)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-20 15:30:02 UTC (rev 20284)
@@ -2,6 +2,9 @@
 
 
 import static org.junit.Assert.*;
+
+import java.io.FileNotFoundException;
+
 import junit.framework.Assert;
 import org.junit.After;
 import org.junit.Before;
@@ -83,7 +86,7 @@
 		int actualStartLine=-1;
 		int actualEndLine=-1;
 		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
-		assertEquals(Evaluation.NO_REGION_FOUND, regionSelectionData.getRegionEvaluations().get(0));
+		assertEquals(Evaluation.WRONG_DATA, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	@Test
@@ -110,7 +113,7 @@
 	}
 	
 	@Test
-	public void testExactRegion() throws Exception{
+	public void testExactRegion() throws FileNotFoundException {
 		Testcase exactRegion = new Testcase(InfraStructure_Testing.TEST2_JAVA);
 		exactRegion.compareRegions(InfraStructure_Testing.JAVA_GRAMMAR);
 		assertEquals(1, exactRegion.getRegionEvaluations().size());
@@ -118,7 +121,7 @@
 	}
 	
 	@Test
-	public void testTwoRegions() throws Exception{
+	public void testTwoRegions() throws FileNotFoundException {
 		Testcase twoRegions = new Testcase(InfraStructure_Testing.TWO_REGIONS_JAVA);
 		twoRegions.compareRegions(InfraStructure_Testing.JAVA_GRAMMAR);
 		assertEquals(2, twoRegions.getRegionEvaluations().size());
@@ -126,18 +129,18 @@
 	}
 	
 	@Test
-	public void testNearbyRegions() throws Exception{
+	public void testNearbyRegions() throws FileNotFoundException {
 		Testcase nearbyRegions = new Testcase(InfraStructure_Testing.NEARBY_REGIONS_JAVA);
 		nearbyRegions.compareRegions(InfraStructure_Testing.JAVA_GRAMMAR);
-		assertEquals(2, nearbyRegions.getRegionEvaluations().size());
+		assertEquals(1, nearbyRegions.getRegionEvaluations().size());
 		assertEquals(Evaluation.MERGED_REGION, nearbyRegions.getRegionEvaluations().get(0));
 	}
 	
 	@Test
-	public void testNoExpectedRegion() throws Exception{
+	public void testNoExpectedRegion() throws FileNotFoundException {
 		Testcase nearbyRegions = new Testcase(InfraStructure_Testing.ERRONEOUS_WEBDSL);
 		nearbyRegions.compareRegions(InfraStructure_Testing.WEBDSL_GRAMMAR);
 		assertEquals(1, nearbyRegions.getRegionEvaluations().size());
-		assertEquals(Evaluation.INTRODUCED_REGION, nearbyRegions.getRegionEvaluations().get(0));
+		assertEquals(Evaluation.NO_EXPECTED_REGION, nearbyRegions.getRegionEvaluations().get(0));
 	}
 }



From m.dejonge at tudelft.nl  Fri Nov 20 17:30:26 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 20 Nov 2009 16:30:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20285 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/src:
	evaluating testrun tests
Message-ID: <200911201630.nAKGUPfw025389@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-20 16:30:25 +0000 (Fri, 20 Nov 2009)
New Revision: 20285

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20285&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_WriteStatistics.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java

Log:
write statistics to console

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-20 15:30:02 UTC (rev 20284)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-20 16:30:25 UTC (rev 20285)
@@ -15,6 +15,14 @@
 		return resultsCategorised;
 	}
 	
+	public int nrOfNonEvaluatedFiles(){
+		int result=0;
+		result += getResultList(Evaluation.NO_EXPECTED_REGION).size();
+		result += getResultList(Evaluation.NO_SYNTAX_ERRORS).size();
+		result += getResultList(Evaluation.WRONG_DATA).size();
+		return result;
+	}
+	
 	public TreeMap<Evaluation, String> getOverviewResults(){
 		TreeMap<Evaluation, String> overview = new TreeMap<Evaluation, String>();
 		for (Evaluation eval : Evaluation.values()) {
@@ -58,4 +66,16 @@
 	public int getNumberOfRegions() {
 		return numberOfRegions;
 	}
+
+	public double calculateScore() {
+		double result=0;
+		result += 10*(getResultList(Evaluation.EXACT).size());
+		result += 5*(getResultList(Evaluation.GOOD).size());
+		result += 1*(getResultList(Evaluation.POOR).size());
+		result += 1*(getResultList(Evaluation.MERGED_REGION).size());
+		int nrOfEvaluated=numberOfRegions-nrOfNonEvaluatedFiles();
+		if(nrOfEvaluated<=0)
+			return -1;
+		return result/nrOfEvaluated;
+	}
 }

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-20 16:30:25 UTC (rev 20285)
@@ -0,0 +1,42 @@
+package evaluating;
+
+public class WriteStatistics {
+
+	public static void writeConsole(Testsuite testSuite) {
+		Statistics stats = testSuite.getStatistics();
+		writeConsole_Header(testSuite);
+		writeConsole_General(stats);		
+		writeConsole_Overview(stats);
+		writeConsole_Files(stats);
+	}
+
+	public static void writeConsole_Files(Statistics stats) {
+		System.out.println("Files");
+		for (Evaluation eval : Evaluation.values()) {
+			System.out.println("\t" + eval +":" + stats.getResultList(eval));	
+		}
+	}
+
+	public static void writeConsole_Overview(Statistics stats) {
+		System.out.println();
+		System.out.println("Overview");
+		for (Evaluation eval : Evaluation.values()) {
+			System.out.println("\t" + eval +":" + stats.getResultList(eval).size());	
+		}
+	}
+
+	public static void writeConsole_General(Statistics stats) {
+		System.out.println("General");
+		System.out.println("\t" + "Number of files: " + stats.getNumberOfFiles());
+		System.out.println("\t" + "Number of regions: " + stats.getNumberOfRegions());
+		System.out.println("\t" + "Number of non evaluated files: " + stats.nrOfNonEvaluatedFiles());
+		System.out.println("\t" + "Score: " + stats.calculateScore());
+	}
+
+	public static void writeConsole_Header(Testsuite testSuite) {
+		System.out.println("*************************");
+		System.out.println(testSuite.getTestSuiteName());
+		System.out.println("*************************");
+		System.out.println();
+	}
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java	2009-11-20 15:30:02 UTC (rev 20284)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java	2009-11-20 16:30:25 UTC (rev 20285)
@@ -4,6 +4,7 @@
 
 import evaluating.FilePaths;
 import evaluating.Testsuite;
+import evaluating.WriteStatistics;
 
 public class TestRun {
 	
@@ -17,25 +18,14 @@
 	public void evaluateLanguages() throws Exception{
 		evaluateLanguage(new Testsuite("Java", fileLocations), InfraStructure.JAVA_EXT);
 		evaluateLanguage(new Testsuite("WebDSL", fileLocations), InfraStructure.WEBDSL_EXT);
-		//evaluateLanguage(new Testsuite("Stratego", fileLocations), InfraStructure.STRATEGO_EXT);
+		evaluateLanguage(new Testsuite("Stratego", fileLocations), InfraStructure.STRATEGO_EXT);
 		evaluateLanguage(new Testsuite("Stratego-Java", fileLocations), InfraStructure.STRATEGO_JAVA_EXT);
-		//evaluateStrategoFiles();
 	}
 
-	private void evaluateStrategoFiles() throws FileNotFoundException{
-		Testsuite Stratego=new Testsuite("Stratego_?", fileLocations);
-		Stratego.processFile(InfraStructure.STRATEGO_EXT, "Input/SpoofaxExamples/foo.str");
-		//Stratego.processFile(InfraStructure.STRATEGO_EXT, "Input/SpoofaxExamples/with1.str");
-		//Stratego.processFile(InfraStructure.STRATEGO_EXT, "Input/SpoofaxExamples/with2.str");
-		System.out.println(Stratego.getTestSuiteName());
-		System.out.println(Stratego.getStatistics().getOverviewResults().toString());
-	}
-
 	private void evaluateLanguage(Testsuite testsuite, String ext) throws Exception {
 		testsuite.setAllDirectories(true);
 		testsuite.addExtension(ext);
 		testsuite.runTestcases();
-		System.out.println(testsuite.getTestSuiteName());
-		System.out.println(testsuite.getStatistics().getOverviewResults().toString());
+		WriteStatistics.writeConsole(testsuite);
 	}
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java	2009-11-20 15:30:02 UTC (rev 20284)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java	2009-11-20 16:30:25 UTC (rev 20285)
@@ -13,6 +13,7 @@
 import evaluating.FilePaths;
 import evaluating.Testcase;
 import evaluating.Testsuite;
+import evaluating.WriteStatistics;
 
 
 public class Test_Scenarios {
@@ -31,9 +32,7 @@
 		testsuite.setAllDirectories(true);
 		testsuite.addExtension(InfraStructure_Testing.JAVA_EXT);
 		testsuite.runTestcases();
-		System.out.println(testsuite.getTestSuiteName());
-		System.out.println(testsuite.getStatistics().getOverviewResults().toString());
-		System.out.println(testsuite.getStatistics().getResultsCategorised().toString());
+		WriteStatistics.writeConsole(testsuite);
 	}
 	
 	@Test

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_WriteStatistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_WriteStatistics.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_WriteStatistics.java	2009-11-20 16:30:25 UTC (rev 20285)
@@ -0,0 +1,24 @@
+package tests;
+
+import org.junit.Test;
+
+import evaluating.FilePaths;
+import evaluating.Statistics;
+import evaluating.Testsuite;
+import evaluating.WriteStatistics;
+
+
+public class Test_WriteStatistics {
+	private WriteStatistics outputWriter;
+	
+	public Test_WriteStatistics(){
+		outputWriter=new WriteStatistics();
+	}
+	
+	@Test
+	public void writeToConsole(){
+		WriteStatistics.writeConsole(new Testsuite("MyTestCases", new FilePaths("Root")));
+	}
+	
+	
+}



From L.C.L.Kats at tudelft.nl  Sat Nov 21 14:44:35 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 21 Nov 2009 13:44:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20286 - LennartKats -
	in spoofax-imp/trunk: . org.strategoxt.imp.editors.aterm
	org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.editors.sdf org.strategoxt.imp.editors.stratego
	org.strategoxt.imp.editors.stratego/editor
	org.strategoxt.imp.feature org.strategoxt.imp.generator/lib
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	org.strategoxt.imp.runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.updatesite
Message-ID: <200911211344.nALDiZBP013556@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-21 13:44:35 +0000 (Sat, 21 Nov 2009)
New Revision: 20286

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20286&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/MarkerAttributes.java
Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/JarsAntPropertyProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/ProductionAttributeReader.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens/SGLRToken.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens/SGLRTokenIterator.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens/SGLRTokenizer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens/TokenKindManager.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
More persistent coloring and error markers as-you-type and other fixes.

Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/Makefile	2009-11-21 13:44:35 UTC (rev 20286)
@@ -1,4 +1,4 @@
-DEFS=-Declipse.spoofaximp.jars=../org.strategoxt.imp.generator/lib -Declipse.spoofaximp.jars=include/strategoxt.jar
+DEFS=-Declipse.spoofaximp.jars=../org.strategoxt.imp.generator/lib -Declipse.spoofaximp.strategojar=utils/strategoxt.jar
 
 all :
 	$(MAKE) -C org.strategoxt.imp.generator all

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.xml	2009-11-21 13:44:35 UTC (rev 20286)
@@ -35,12 +35,12 @@
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="--library
-        	            -I &quot;${trans}&quot;
+                        -I &quot;${trans}&quot;
                         -I &quot;${basedir}&quot;
                         -la stratego-lib -la stratego-sglr
-        	            -la stratego-gpp -la stratego-xtc
-        	            -la stratego-aterm"/>
-	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
+                        -la stratego-gpp -la stratego-xtc
+                        -la stratego-aterm"/>
+        <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
@@ -63,15 +63,15 @@
     
         <target name="all" depends="stratego.ctree,sdf2table,sdf2imp"/>
 
-        <target name="sdf2imp" depends="sdf2imp.eclipse,sdf2imp.standalone"/>
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
         
-        <target name="sdf2imp.eclipse" depends="sdf2table" if="eclipse.running">
+        <target name="sdf2imp.eclipse" if="eclipse.running">
             <!-- In Eclipse, we trigger the Eclipse builder rather than build it here -->
             <touch file="${include}/${esvmodule}.packed.esv"/>
             <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
-        <target name="sdf2imp.standalone" depends="sdf2table,utils-files" unless="eclipse.running">
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
             <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="utils/sdf2imp.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
@@ -115,16 +115,11 @@
             </java>
         </target>
 
-        <target name="utils-files" unless="utils-files.available">
-            <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
-        	<property name="utils-files.available" value="1"/>
+        <target name="utils-files">
             <mkdir dir="utils"/>
-            <!-- TODO: <copy file="${}" todir="${include}" preservelastmodified="true"/> -->
-            <parallel>
-                <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/sdf2imp.jar" dest="utils/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
-            </parallel>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar"         todir="utils"/>
+            <copy file="${eclipse.spoofaximp.strategojar}"              todir="utils"/>
         </target>
     
         <target name="pack-sdf" unless="externaldef">
@@ -138,7 +133,7 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" depends="utils-files" unless="pack-sdf.available">
+        <target name="pack-sdf.helper" unless="pack-sdf.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
@@ -162,7 +157,7 @@
             <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
-        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled">
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.rtg"/>
                 <targetfileset file="${include}/${sdfmodule}.str"/>
@@ -171,7 +166,7 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" depends="utils-files" unless="rtg2sig.available">
+        <target name="rtg2sig.helper" unless="rtg2sig.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
@@ -184,7 +179,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf,copy-sdf" if="build.stratego.enabled">
+        <target name="sdf2rtg" if="build.stratego.enabled" depends="pack-sdf,copy-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -193,7 +188,7 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" depends="utils-files" unless="sdf2rtg.available">
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>
@@ -209,7 +204,7 @@
             </java>
         </target>
         
-        <target name="ppgen" depends="pack-sdf" if="build.stratego.enabled">
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.pp"/>
@@ -218,7 +213,7 @@
             <antcall target="ppgen.helper"/>
         </target>
     
-        <target name="ppgen.helper" depends="utils-files" unless="ppgen.available">
+        <target name="ppgen.helper" unless="ppgen.available" depends="utils-files">
             <java classname="start" dir="${include}" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-ppgen"/>
@@ -266,7 +261,7 @@
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="utils-files" unless="strc-java.available" if="build.stratego.enabled">
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled" depends="utils-files">
             <java classname="org.strategoxt.strj.Main" classpath="utils/strategoxt.jar:utils/sdf2imp.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.xml	2009-11-21 13:44:35 UTC (rev 20286)
@@ -35,12 +35,12 @@
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="--library
-        	            -I &quot;${trans}&quot;
+                        -I &quot;${trans}&quot;
                         -I &quot;${basedir}&quot;
                         -la stratego-lib -la stratego-sglr
-        	            -la stratego-gpp -la stratego-xtc
-        	            -la stratego-aterm"/>
-	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
+                        -la stratego-gpp -la stratego-xtc
+                        -la stratego-aterm"/>
+        <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
@@ -63,15 +63,15 @@
     
         <target name="all" depends="stratego.ctree,sdf2table,sdf2imp"/>
 
-        <target name="sdf2imp" depends="sdf2imp.eclipse,sdf2imp.standalone"/>
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
         
-        <target name="sdf2imp.eclipse" depends="sdf2table" if="eclipse.running">
+        <target name="sdf2imp.eclipse" if="eclipse.running">
             <!-- In Eclipse, we trigger the Eclipse builder rather than build it here -->
             <touch file="${include}/${esvmodule}.packed.esv"/>
             <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
-        <target name="sdf2imp.standalone" depends="sdf2table,utils-files" unless="eclipse.running">
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
             <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="utils/sdf2imp.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
@@ -115,16 +115,11 @@
             </java>
         </target>
 
-        <target name="utils-files" unless="utils-files.available">
-            <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
-        	<property name="utils-files.available" value="1"/>
+        <target name="utils-files">
             <mkdir dir="utils"/>
-            <!-- TODO: <copy file="${}" todir="${include}" preservelastmodified="true"/> -->
-            <parallel>
-                <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/sdf2imp.jar" dest="utils/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
-            </parallel>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar"         todir="utils"/>
+            <copy file="${eclipse.spoofaximp.strategojar}"              todir="utils"/>
         </target>
     
         <target name="pack-sdf" unless="externaldef">
@@ -138,7 +133,7 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" depends="utils-files" unless="pack-sdf.available">
+        <target name="pack-sdf.helper" unless="pack-sdf.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
@@ -162,7 +157,7 @@
             <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
-        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled">
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.rtg"/>
                 <targetfileset file="${include}/${sdfmodule}.str"/>
@@ -171,7 +166,7 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" depends="utils-files" unless="rtg2sig.available">
+        <target name="rtg2sig.helper" unless="rtg2sig.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
@@ -184,7 +179,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf,copy-sdf" if="build.stratego.enabled">
+        <target name="sdf2rtg" if="build.stratego.enabled" depends="pack-sdf,copy-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -193,7 +188,7 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" depends="utils-files" unless="sdf2rtg.available">
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>
@@ -209,7 +204,7 @@
             </java>
         </target>
         
-        <target name="ppgen" depends="pack-sdf" if="build.stratego.enabled">
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.pp"/>
@@ -218,7 +213,7 @@
             <antcall target="ppgen.helper"/>
         </target>
     
-        <target name="ppgen.helper" depends="utils-files" unless="ppgen.available">
+        <target name="ppgen.helper" unless="ppgen.available" depends="utils-files">
             <java classname="start" dir="${include}" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-ppgen"/>
@@ -266,7 +261,7 @@
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="utils-files" unless="strc-java.available" if="build.stratego.enabled">
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled" depends="utils-files">
             <java classname="org.strategoxt.strj.Main" classpath="utils/strategoxt.jar:utils/sdf2imp.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-11-21 13:44:35 UTC (rev 20286)
@@ -35,12 +35,12 @@
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="--library
-        	            -I &quot;${trans}&quot;
+                        -I &quot;${trans}&quot;
                         -I &quot;${basedir}&quot;
                         -la stratego-lib -la stratego-sglr
-        	            -la stratego-gpp -la stratego-xtc
-        	            -la stratego-aterm"/>
-	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
+                        -la stratego-gpp -la stratego-xtc
+                        -la stratego-aterm"/>
+        <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
@@ -63,15 +63,15 @@
     
         <target name="all" depends="stratego.ctree,sdf2table,sdf2imp"/>
 
-        <target name="sdf2imp" depends="sdf2imp.eclipse,sdf2imp.standalone"/>
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
         
-        <target name="sdf2imp.eclipse" depends="sdf2table" if="eclipse.running">
+        <target name="sdf2imp.eclipse" if="eclipse.running">
             <!-- In Eclipse, we trigger the Eclipse builder rather than build it here -->
             <touch file="${include}/${esvmodule}.packed.esv"/>
             <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
-        <target name="sdf2imp.standalone" depends="sdf2table,utils-files" unless="eclipse.running">
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
             <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="utils/sdf2imp.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
@@ -115,16 +115,11 @@
             </java>
         </target>
 
-        <target name="utils-files" unless="utils-files.available">
-            <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
-        	<property name="utils-files.available" value="1"/>
+        <target name="utils-files">
             <mkdir dir="utils"/>
-            <!-- TODO: <copy file="${}" todir="${include}" preservelastmodified="true"/> -->
-            <parallel>
-                <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/sdf2imp.jar" dest="utils/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
-            </parallel>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar"         todir="utils"/>
+            <copy file="${eclipse.spoofaximp.strategojar}"              todir="utils"/>
         </target>
     
         <target name="pack-sdf" unless="externaldef">
@@ -138,7 +133,7 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" depends="utils-files" unless="pack-sdf.available">
+        <target name="pack-sdf.helper" unless="pack-sdf.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
@@ -162,7 +157,7 @@
             <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
-        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled">
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.rtg"/>
                 <targetfileset file="${include}/${sdfmodule}.str"/>
@@ -171,7 +166,7 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" depends="utils-files" unless="rtg2sig.available">
+        <target name="rtg2sig.helper" unless="rtg2sig.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
@@ -184,7 +179,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf,copy-sdf" if="build.stratego.enabled">
+        <target name="sdf2rtg" if="build.stratego.enabled" depends="pack-sdf,copy-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -193,7 +188,7 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" depends="utils-files" unless="sdf2rtg.available">
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>
@@ -209,7 +204,7 @@
             </java>
         </target>
         
-        <target name="ppgen" depends="pack-sdf" if="build.stratego.enabled">
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.pp"/>
@@ -218,7 +213,7 @@
             <antcall target="ppgen.helper"/>
         </target>
     
-        <target name="ppgen.helper" depends="utils-files" unless="ppgen.available">
+        <target name="ppgen.helper" unless="ppgen.available" depends="utils-files">
             <java classname="start" dir="${include}" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-ppgen"/>
@@ -266,7 +261,7 @@
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="utils-files" unless="strc-java.available" if="build.stratego.enabled">
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled" depends="utils-files">
             <java classname="org.strategoxt.strj.Main" classpath="utils/strategoxt.jar:utils/sdf2imp.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.xml	2009-11-21 13:44:35 UTC (rev 20286)
@@ -35,12 +35,12 @@
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="--library
-        	            -I &quot;${trans}&quot;
+                        -I &quot;${trans}&quot;
                         -I &quot;${basedir}&quot;
                         -la stratego-lib -la stratego-sglr
-        	            -la stratego-gpp -la stratego-xtc
-        	            -la stratego-aterm"/>
-	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
+                        -la stratego-gpp -la stratego-xtc
+                        -la stratego-aterm"/>
+        <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
@@ -63,15 +63,15 @@
     
         <target name="all" depends="stratego.ctree,sdf2table,sdf2imp"/>
 
-        <target name="sdf2imp" depends="sdf2imp.eclipse,sdf2imp.standalone"/>
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
         
-        <target name="sdf2imp.eclipse" depends="sdf2table" if="eclipse.running">
+        <target name="sdf2imp.eclipse" if="eclipse.running">
             <!-- In Eclipse, we trigger the Eclipse builder rather than build it here -->
             <touch file="${include}/${esvmodule}.packed.esv"/>
             <eclipse.refreshLocal resource="${include}/${esvmodule}.packed.esv"/>
         </target>
         
-        <target name="sdf2imp.standalone" depends="sdf2table,utils-files" unless="eclipse.running">
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
             <java classname="org.strategoxt.imp.generator.sdf2imp" classpath="utils/sdf2imp.jar:utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>
@@ -115,16 +115,11 @@
             </java>
         </target>
 
-        <target name="utils-files" unless="utils-files.available">
-            <property name="site" value="http://www.st.ewi.tudelft.nl/~kats/strategoxt/18b"/>
-        	<property name="utils-files.available" value="1"/>
+        <target name="utils-files">
             <mkdir dir="utils"/>
-            <!-- TODO: <copy file="${}" todir="${include}" preservelastmodified="true"/> -->
-            <parallel>
-                <get src="${site}/strategoxt.jar" dest="utils/strategoxt.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/make_permissive.jar" dest="utils/make_permissive.jar" usetimestamp="true" ignoreerrors="true"/>
-                <get src="${site}/sdf2imp.jar" dest="utils/sdf2imp.jar" usetimestamp="true" ignoreerrors="true"/>
-            </parallel>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar"         todir="utils"/>
+            <copy file="${eclipse.spoofaximp.strategojar}"              todir="utils"/>
         </target>
     
         <target name="pack-sdf" unless="externaldef">
@@ -138,7 +133,7 @@
             <antcall target="pack-sdf.helper"/>
         </target>
     
-        <target name="pack-sdf.helper" depends="utils-files" unless="pack-sdf.available">
+        <target name="pack-sdf.helper" unless="pack-sdf.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-pack-sdf"/>
@@ -162,7 +157,7 @@
             <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
         </target>
     
-        <target name="rtg2sig" depends="sdf2rtg" if="build.stratego.enabled">
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.rtg"/>
                 <targetfileset file="${include}/${sdfmodule}.str"/>
@@ -171,7 +166,7 @@
             <antcall target="rtg2sig.helper"/>
         </target>
     
-        <target name="rtg2sig.helper" depends="utils-files" unless="rtg2sig.available">
+        <target name="rtg2sig.helper" unless="rtg2sig.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-rtg2sig"/>
@@ -184,7 +179,7 @@
             </java>
         </target>
         
-        <target name="sdf2rtg" depends="pack-sdf,copy-sdf" if="build.stratego.enabled">
+        <target name="sdf2rtg" if="build.stratego.enabled" depends="pack-sdf,copy-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.rtg"/>
@@ -193,7 +188,7 @@
             <antcall target="sdf2rtg.helper"/>
         </target>
     
-        <target name="sdf2rtg.helper" depends="utils-files" unless="sdf2rtg.available">
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available" depends="utils-files">
             <java classname="start" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-sdf2rtg"/>
@@ -209,7 +204,7 @@
             </java>
         </target>
         
-        <target name="ppgen" depends="pack-sdf" if="build.stratego.enabled">
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
                 <targetfileset file="${include}/${sdfmodule}.pp"/>
@@ -218,7 +213,7 @@
             <antcall target="ppgen.helper"/>
         </target>
     
-        <target name="ppgen.helper" depends="utils-files" unless="ppgen.available">
+        <target name="ppgen.helper" unless="ppgen.available" depends="utils-files">
             <java classname="start" dir="${include}" classpath="utils/strategoxt.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="org.strategoxt.tools.main-ppgen"/>
@@ -266,7 +261,7 @@
             <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
         </target>
             
-        <target name="stratego.jvm.helper" depends="utils-files" unless="strc-java.available" if="build.stratego.enabled">
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled" depends="utils-files">
             <java classname="org.strategoxt.strj.Main" classpath="utils/strategoxt.jar:utils/sdf2imp.jar" failonerror="true" fork="true">
                 <jvmarg line="${build.jvmargs}"/>
                 <arg value="-i"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv	2009-11-21 13:44:35 UTC (rev 20286)
@@ -12,4 +12,3 @@
     0 128 64
     255 255 255
     italic
-

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-21 13:44:35 UTC (rev 20286)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.1.1.4"
+      version="0.1.1.5"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">
@@ -94,28 +94,28 @@
          id="org.eclipse.imp.lpg"
          download-size="0"
          install-size="0"
-         version="0.1.79"
+         version="0.1.79.qualifier"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.lpg.runtime"
          download-size="0"
          install-size="0"
-         version="0.1.79"
+         version="0.1.79.qualifier"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.runtime"
          download-size="0"
          install-size="0"
-         version="0.1.88"
+         version="0.1.88.qualifier"
          unpack="false"/>
 
    <plugin
          id="lpg.runtime"
          download-size="0"
          install-size="0"
-         version="2.0.16"
+         version="2.0.16.qualifier"
          unpack="false"/>
 
    <plugin
@@ -157,21 +157,21 @@
          id="org.eclipse.imp.lpg.metatooling"
          download-size="0"
          install-size="0"
-         version="0.1.79"
+         version="0.1.79.qualifier"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.metatooling"
          download-size="0"
          install-size="0"
-         version="0.1.79"
+         version="0.1.79.qualifier"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.preferences"
          download-size="0"
          install-size="0"
-         version="0.1.79"
+         version="0.1.79.qualifier"
          unpack="false"/>
 
    <plugin
@@ -185,7 +185,7 @@
          id="org.eclipse.imp.presentation"
          download-size="0"
          install-size="0"
-         version="0.1.1"
+         version="0.1.1.qualifier"
          unpack="false"/>
 
    <plugin

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-11-21 13:44:35 UTC (rev 20286)
@@ -52,12 +52,12 @@
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
         <property name="build.sdf.imports" value=""/>
         <property name="build.stratego.args" value="--library
-        	            -I &quot;${trans}&quot;
+                        -I &quot;${trans}&quot;
                         -I &quot;${basedir}&quot;
                         -la stratego-lib -la stratego-sglr
-        	            -la stratego-gpp -la stratego-xtc
-        	            -la stratego-aterm"/>
-	    <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
+                        -la stratego-gpp -la stratego-xtc
+                        -la stratego-aterm"/>
+        <property name="build.jvmargs" value="-client -Xverify:none -Xss4m -Xmx512m"/>
         
         <!-- Initialization -->
         <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/JarsAntPropertyProvider.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/JarsAntPropertyProvider.java	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/JarsAntPropertyProvider.java	2009-11-21 13:44:35 UTC (rev 20286)
@@ -1,10 +1,9 @@
 package org.strategoxt.imp.metatooling;
 
 import java.io.File;
-import java.net.URISyntaxException;
 
 import org.eclipse.ant.core.IAntPropertyValueProvider;
-import org.strategoxt.permissivegrammars.make_permissive;
+import org.strategoxt.imp.generator.sdf2imp;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -13,11 +12,7 @@
 	
 	public String getAntPropertyValue(String antPropertyName) {
 		String result;
-		try {
-			result = new File(make_permissive.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getParent();
-		} catch (URISyntaxException e) {
-			throw new RuntimeException("Could not locate Spoofax/IMP jar files", e);
-		}
+		result = new File(sdf2imp.class.getProtectionDomain().getCodeSource().getLocation().getFile()).getParent();
 		return result;
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-11-21 13:44:35 UTC (rev 20286)
@@ -86,6 +86,7 @@
 			DescriptorFactory.prepareForReload(getSourceDescriptor(mainFile));
 			
 			messageHandler.clearMarkers(mainFile);
+			messageHandler.commitChanges();
 			monitor.beginTask("Generating service descriptors for " + mainFile.getName(), IProgressMonitor.UNKNOWN);
 			IStrategoTerm result = invokeBuilder(mainFile);
 			if (result == null) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-11-21 13:44:35 UTC (rev 20286)
@@ -170,6 +170,8 @@
 			Environment.logException("Unable to load descriptor " + descriptor, e);
 			reportError(source, "Internal error loading descriptor: " + e.getMessage());
 			throw e;
+		} finally {
+			asyncMessageHandler.commitChanges();
 		}
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-21 13:44:35 UTC (rev 20286)
@@ -60,8 +60,6 @@
          name="Parse error"
          point="org.eclipse.core.resources.markers">
     		<persistent value="true" />
-            <super type="org.eclipse.core.resources.problemmarker"/>
-            <super type="org.eclipse.core.resources.textmarker"/>
    </extension>
    
    <extension
@@ -101,58 +99,56 @@
          point="org.eclipse.ui.editors.markerAnnotationSpecification">
       <specification
             annotationType="org.strategoxt.imp.runtime.parseerror"
-            colorPreferenceKey="spiParseAnnotationColor"
-            colorPreferenceValue="255,128,147"
-            contributesToHeader="true"
-            highlightPreferenceKey="parseAnnotationHighlightKey"
+            textPreferenceKey="spiParseErrorAnnotationColor"
+            textPreferenceValue="true"
+            presentationLayer="6"
+            showInNextPrevDropdownToolbarAction="true"
+            label="Spoofax/IMP Parser Annotation"
+            colorPreferenceKey="errorIndicationColor"
+            showInNextPrevDropdownToolbarActionKey="showErrorInNextPrevDropdownToolbarAction"
+            symbolicIcon="error"
+            isGoToNextNavigationTargetKey="isErrorGoToNextNavigationTarget"
+            isGoToPreviousNavigationTargetKey="isErrorGoToPreviousNavigationTarget"
+            isGoToPreviousNavigationTarget="true"
+            highlightPreferenceKey="errorIndicationHighlighting"
             highlightPreferenceValue="false"
-            includeOnPreferencePage="false"
-            isGoToNextNavigationTarget="true"
-            isGoToNextNavigationTargetKey="parseAnnotationIsGotoNextKey"
-            isGoToPreviousNavigationTarget="true"
-            isGoToPreviousNavigationTargetKey="parseAnnotationIsGotoPrevKey"
-            label="Spoofax/IMP Parser Annotation"
-            overviewRulerPreferenceKey="parseAnnotationOverviewKey"
+            textStylePreferenceKey="errorTextStyle"
+			textStylePreferenceValue="SQUIGGLES"             
+            verticalRulerPreferenceKey="errorIndicationInVerticalRuler"
+            verticalRulerPreferenceValue="true"
+            overviewRulerPreferenceKey="errorIndicationInOverviewRuler"
             overviewRulerPreferenceValue="true"
-            presentationLayer="1"
-            showInNextPrevDropdownToolbarAction="true"
-            symbolicIcon="error"
-            textPreferenceKey="parseAnnotationTextKey"
-            textPreferenceValue="true"
-            textStylePreferenceKey="parseAnnotationTextStyleKey"
-            textStylePreferenceValue="SQUIGGLES"
-            verticalRulerPreferenceKey="parseAnnotationVerticalKey"
-            verticalRulerPreferenceValue="true"/>
+            contributesToHeader="true"
+            colorPreferenceValue="255,128,147"/>
    </extension>
 
-   <!-- TODO: proper red and orange colors for errors and warnings --> 
+   <!-- TODO: proper red and orange colors for errors and warnings? -->
    <extension
          id="org.strategoxt.imp.runtime.parsemarkerspec"
          point="org.eclipse.ui.editors.markerAnnotationSpecification">
       <specification
             annotationType="org.strategoxt.imp.runtime.parsewarning"
-            colorPreferenceKey="spiParseAnnotationColor"
-            colorPreferenceValue="255,148,127"
-            contributesToHeader="true"
-            highlightPreferenceKey="parseAnnotationHighlightKey"
+            textPreferenceKey="spiParseErrorAnnotationColor"
+            textPreferenceValue="true"
+            presentationLayer="6"
+            showInNextPrevDropdownToolbarAction="true"
+            label="Spoofax/IMP Parser Warning Annotation"
+            colorPreferenceKey="warningIndicationColor"
+            showInNextPrevDropdownToolbarActionKey="showErrorInNextPrevDropdownToolbarAction"
+            symbolicIcon="warning"
+            isGoToNextNavigationTargetKey="isErrorGoToNextNavigationTarget"
+            isGoToPreviousNavigationTargetKey="isErrorGoToPreviousNavigationTarget"
+            isGoToPreviousNavigationTarget="true"
+            highlightPreferenceKey="warningIndicationHighlighting"
             highlightPreferenceValue="false"
-            includeOnPreferencePage="false"
-            isGoToNextNavigationTarget="true"
-            isGoToNextNavigationTargetKey="parseAnnotationIsGotoNextKey"
-            isGoToPreviousNavigationTarget="true"
-            isGoToPreviousNavigationTargetKey="parseAnnotationIsGotoPrevKey"
-            label="Spoofax/IMP Parser Annotation"
-            overviewRulerPreferenceKey="parseAnnotationOverviewKey"
+            textStylePreferenceKey="warningTextStyle"
+			textStylePreferenceValue="SQUIGGLES"             
+            verticalRulerPreferenceKey="warningIndicationInVerticalRuler"
+            verticalRulerPreferenceValue="true"
+            overviewRulerPreferenceKey="warningIndicationInOverviewRuler"
             overviewRulerPreferenceValue="true"
-            presentationLayer="1"
-            showInNextPrevDropdownToolbarAction="true"
-            symbolicIcon="warning"
-            textPreferenceKey="parseAnnotationTextKey"
-            textPreferenceValue="true"
-            textStylePreferenceKey="parseAnnotationTextStyleKey"
-            textStylePreferenceValue="SQUIGGLES"
-            verticalRulerPreferenceKey="parseAnnotationVerticalKey"
-            verticalRulerPreferenceValue="true"/>
+            contributesToHeader="true"
+            colorPreferenceValue="255,148,127"/>
    </extension>
 
    <extension
@@ -173,7 +169,7 @@
             label="Spoofax/IMP Analysis Annotation"
             overviewRulerPreferenceKey="analysisAnnotationOverviewKey"
             overviewRulerPreferenceValue="true"
-            presentationLayer="1"
+            presentationLayer="5"
             showInNextPrevDropdownToolbarAction="true"
             symbolicIcon="error"
             textPreferenceKey="analysisAnnotationTextKey"
@@ -236,9 +232,13 @@
             schemeId="org.eclipse.ui.defaultAcceleratorConfiguration"
             sequence="CTRL+T">
       </key>
+     <!-- TODO: test control-alt-b binding for build current project?-->
+      <key
+            commandId="org.eclipse.ui.project.buildProject"
+            contextId="org.eclipse.ui.contexts.window"
+            sequence="M1+ALT+B"
+            schemeId="org.eclipse.ui.defaultAcceleratorConfiguration" />
    </extension>
-   
-   <!-- TODO: control-shift-b binding for build current project?-->
 
    <!-- Extension point not implemented?
         manually called from SGLRParseController instead

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-11-20 16:30:25 UTC (rev 20285)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2009-11-21 13:44:35 UTC (rev 20286)
@@ -1,11 +1,6 @@
 package org.strategoxt.imp.runtime.parser;
 
-import static org.spoofax.interpreter.core.Tools.*;
 import static org.spoofax.jsglr.Term.*;
-
-import java.util.ArrayList;
-import java.util.List;
-
 import lpg.runtime.IToken;
 
 import org.eclipse.core.resources.IMarker;
@@ -23,9 +18,7 @@
 import org.strategoxt.imp.runtime.parser.tokens.SGLRTokenizer;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKind;
 import org.strategoxt.lang.Context;
-import org.strategoxt.stratego_aterm.pp_aterm_box_0_0;
 import org.strategoxt.stratego_aterm.stratego_aterm;
-import org.strategoxt.stratego_gpp.box2text_string_0_1;
 import org.strategoxt.stratego_sglr.implode_asfix_0_0;
 import org.strategoxt.stratego_sglr.stratego_sglr;
 
@@ -75,14 +68,12 @@
 	
 	private boolean isRecoveryAvailable = true;
 
-	private IMessageHandler messages;
+	private IMessageHandler messages; // TODO: remove ParseErrorHandler.messages?
 	
 	private int offset;
 	
 	private boolean inLexicalContext;
 	
-	private List<Runnable> errorReports = new ArrayList<Runnable>();
-	
 	private Context ambReportingContext;
 
 	public ParseErrorHandler(SGLRParseController source) {
@@ -114,9 +105,8 @@
 	/**
 	 * Report WATER + INSERT errors from parse tree
 	 */
-	public void gatherNonFatalErrors(SGLRTokenizer tokenizer, ATerm top) {
+	public void reportNonFatalErrors(SGLRTokenizer tokenizer, ATerm top) {
 		try {
-			errorReports.clear();
 			offset = 0;
 			reportSkippedFragments(tokenizer);
 			ATermAppl asfix = termAt(top, 0);
@@ -126,10 +116,8 @@
 		}
 	}
 	
-	public void applyMarkers() {
-		for (Runnable marker : errorReports) {
-			marker.run();
-		}
+	public void commitChanges() {
+		handler.commitChanges();
 	}
 
     /**
@@ -173,11 +161,11 @@
 		//post visit: report error				
 		if (isErrorProduction(attrs, WATER)) {
 			IToken token = tokenizer.makeErrorToken(startOffset, offset - 1);
-			tokenizer.changeTokenKinds(startOffset, offset - 1, TokenKind.TK_ERROR);
+			tokenizer.changeTokenKinds(startOffset, offset - 1, TokenKind.TK_LAYOUT, TokenKind.TK_ERROR);
 			reportErrorAtTokens(token, token, "Syntax error, '" + token + "' not expected here");
 		} else if (isErrorProduction(attrs, INSERT_END)) {
 			IToken token = tokenizer.makeErrorToken(startOffset, offset - 1);
-			tokenizer.changeTokenKinds(startOffset, offset - 1, TokenKind.TK_ERROR);
+			tokenizer.changeTokenKinds(startOffset, offset - 1, TokenKind.TK_LAYOUT, TokenKind.TK_ERROR);
 			reportErrorAtTokens(token, token, "Syntax error, Closing of '" + token + "' is expected here");
 		} else if (isErrorProduction(attrs, INSERT)) {
 			IToken token = tokenizer.makeErrorTokenSkipLayout(startOffset, offset + 1, outerStartOffset2);
@@ -230,10 +218,8 @@
 			
 			ambTerm = factory.makeAppl(factory.makeConstructor("parsetree", 2), ambTerm, factory.makeInt(2));
 			ambTerm = implode_asfix_0_0.instance.invoke(ambReportingContext, ambTerm);
-			ambTerm = pp_aterm_box_0_0.instance.invoke(ambReportingContext, ambTerm);
-			ambTerm = box2text_string_0_1.instance.invoke(ambReportingContext, ambTerm, factory.makeInt(80));
 			
-			reportWarningAtTokens(token, token, "Fragment is ambiguous: " + asJavaString(ambTerm));
+			reportWarningAtTokens(token, token, "Fragment is ambiguous: " + ambTerm.toString());
 		}
 	}
 	
@@ -254,7 +240,7 @@
 						break;
 				}
 				IToken token = tokenizer.makeErrorToken(beginSkipped, endSkipped);
-				tokenizer.changeTokenKinds(beginSkipped, endSkipped, TokenKind.TK_ERROR);
+				tokenizer.changeTokenKinds(beginSkipped, endSkipped, TokenKind.TK_LAYOUT, TokenKind.TK_ERROR);
 				reportErrorAtTokens(token, token, "Could not parse this fragment");
 			} else if (c == UNEXPECTED_EOF_CHAR) {
 				// Recovered using a forced reduction
@@ -269,7 +255,7 @@
 		if (treeEnd < inputChars.length) {
 			IToken token = tokenizer.makeErrorToken(treeEnd + 1, inputChars.length);
 			reportErrorAtTokens(token, token, "Could not parse the remainder of this file");
-			tokenizer.changeTokenKinds(treeEnd + 1, inputChars.length, TokenKind.TK_ERROR);
+			tokenizer.changeTokenKinds(treeEnd + 1, inputChars.length, TokenKind.TK_LAYOUT, TokenKind.TK_ERROR);
 		}
 	}
 	
@@ -304,29 +290,17 @@
 	private void reportErrorAtTokens(final IToken left, final IToken right, String message) {
 		final String message2 = isRecoveryAvailable ? message : message + " (recovery unavailable)";
 		
-		errorReports.add(new Runnable() {
-			public void run() {
-				handler.addMarker(source.getResource(), left, right, message2, IMarker.SEVERITY_ERROR);
-			}
-		});
+		handler.addMarker(source.getResource(), left, right, message2, IMarker.SEVERITY_ERROR);
 	}
 	
 	private void reportWarningAtTokens(final IToken left, final IToken right, final String message) {
-		errorReports.add(new Runnable() {
-			public void run() {
-				handler.addMarker(source.getResource(), left, right, message, IMarker.SEVERITY_WARNING);
-			}
-		});
+		handler.addMarker(source.getResource(), left, right, message, IMarker.SEVERITY_WARNING);
 	}
 	
 	private void reportErrorAtFirstLine(String message) {
 		final String message2 = isRecoveryAvailable ? message : message + " (recovery unavailable)";
 		
-		errorReports.add(new Runnable() {
-			public void run() {
-				handler.addMarkerFirstLine(source.getResource(), message2, IMarker.SEVERITY_ERROR);
-			}
-		});
+		handler.addMarkerFirstLine(source.getResource(), message2, IMarker.SEVERITY_ERROR);
 	}	
 	

(602 diff lines omitted)


From m.dejonge at tudelft.nl  Mon Nov 23 11:34:29 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 23 Nov 2009 10:34:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20287 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: .
	TestInput/TestFiles2 src/evaluating src/tests
Message-ID: <200911231034.nANAYTGP024135@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-23 10:34:28 +0000 (Mon, 23 Nov 2009)
New Revision: 20287

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20287&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/twoExactRegions.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/bin/
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath
   sglr-recovery/trunk/Evaluation_RegionRecovery/.project
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java

Log:
- performance (avoid reloading parse table)
- testcases are stored in testsuite
- statistics is run after collecting all test cases
- RecoveryParse (skippedRegion + execution times) data is stored for each testCase

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath	2009-11-21 13:44:35 UTC (rev 20286)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath	2009-11-23 10:34:28 UTC (rev 20287)
@@ -6,5 +6,6 @@
 	<classpathentry kind="src" path="/org.spoofax.jsglr [spoofax-recovery branch]"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.aterm"/>
 	<classpathentry kind="src" path="/strc-java"/>
+	<classpathentry kind="con" path="org.eclipse.ajdt.core.ASPECTJRT_CONTAINER"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/.project
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/.project	2009-11-21 13:44:35 UTC (rev 20286)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/.project	2009-11-23 10:34:28 UTC (rev 20287)
@@ -6,12 +6,13 @@
 	</projects>
 	<buildSpec>
 		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
+			<name>org.eclipse.ajdt.core.ajbuilder</name>
 			<arguments>
 			</arguments>
 		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>org.eclipse.ajdt.ui.ajnature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
 </projectDescription>

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/twoExactRegions.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/twoExactRegions.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/TestInput/TestFiles2/twoExactRegions.java	2009-11-23 10:34:28 UTC (rev 20287)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      bla bla bla //@START @END
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2(); 
+      int corrInt=1 //@START @END
+      return corrInt;
+  }
+  
+
+}
+

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-21 13:44:35 UTC (rev 20286)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-23 10:34:28 UTC (rev 20287)
@@ -10,6 +10,7 @@
 import java.util.ArrayList;
 
 import org.spoofax.jsglr.InvalidParseTableException;
+import org.spoofax.jsglr.Main;
 import org.spoofax.jsglr.NoRecoveryRulesException;
 import org.spoofax.jsglr.ParseTable;
 import org.spoofax.jsglr.ParseTableManager;
@@ -25,6 +26,9 @@
 	private static final String EXPECTED_START_SIGN = "@START";
 	private static final String PARSETREE_EXTENSION = ".pt";
 	private int startLine;
+	private static String parseTableLocation="";
+	private static ParseTableManager ptm;
+	private static ParseTable pt;
 	
 	public void setStartLine(int startLine) {
 		this.startLine = startLine;
@@ -118,17 +122,21 @@
 
 	private static void writeParseTree(String testFile, String parseTable,
 			String parseTreeFile) throws FileNotFoundException, IOException,
-			InvalidParseTableException, NoRecoveryRulesException, SGLRException {
-		FileInputStream fis=new FileInputStream(testFile);		
-		ParseTableManager ptm = new ParseTableManager();
-		ParseTable pt = ptm.loadFromFile(parseTable);
-        SGLR sglr = new SGLR(ptm.getFactory(),pt); 
+			InvalidParseTableException, NoRecoveryRulesException, SGLRException {	
+		if (!parseTableLocation.equals(parseTable)) {//reusing the parse table for performance
+			ptm = new ParseTableManager();
+			pt = ptm.loadFromFile(parseTable);
+			parseTableLocation=parseTable;
+		}
+		SGLR sglr = new SGLR(ptm.getFactory(),pt); 
         sglr.setUseStructureRecovery(true);
         sglr.getDisambiguator().setFilterAny(false);   
-		ATerm tree = sglr.parse(fis);
-		OutputStream ous = new FileOutputStream(parseTreeFile);
-        if(tree != null)
-            ous.write(tree.toString().getBytes());
+        //FileInputStream fis=new FileInputStream(testFile);	
+		//ATerm tree = sglr.parse(fis);
+        Main.parseFile(testFile, parseTreeFile, sglr);
+        //OutputStream ous = new FileOutputStream(parseTreeFile);
+        //if(tree != null)
+          //  ous.write(tree.toString().getBytes());
 	}
 	
 	public static ArrayList<ErroneousRegion> collectExpectedRegions(String filePath) throws Exception {

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-21 13:44:35 UTC (rev 20286)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-23 10:34:28 UTC (rev 20287)
@@ -78,4 +78,12 @@
 			return -1;
 		return result/nrOfEvaluated;
 	}
+
+	public void reset() {
+		this.numberOfFiles=0;
+		this.numberOfRegions=0;
+		for (Evaluation eval : resultsCategorised.keySet()) {
+			resultsCategorised.get(eval).clear();
+		}
+	}
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-21 13:44:35 UTC (rev 20286)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-23 10:34:28 UTC (rev 20287)
@@ -3,9 +3,23 @@
 import java.io.FileNotFoundException;
 import java.util.ArrayList;
 
+import recovery_logging.FileLog;
+import recovery_logging.RecoveryLogging;
 
 public class Testcase {
 
+	private FileLog recoverLog;
+	
+	
+	public FileLog getRecoverLog() {
+		return recoverLog;
+	}
+
+	private void readRecoveryLog(){
+		recoverLog=RecoveryLogging.aspectOf().getFileLog();
+		//System.out.println("$$$$$$$$$"+recoverLog.getFileName()+"$$$$$$$$$");
+	}
+	
 	private static final int SMALL_REGION_CRITERIA = 6;
 	private ArrayList<Evaluation> regionEvaluation;
 	private String filePath;
@@ -13,6 +27,7 @@
 	public Testcase(String filePath) {
 		this.filePath=filePath;
 		regionEvaluation=new ArrayList<Evaluation>();
+		recoverLog=new FileLog();
 	}
 
 	public void processRegionData(int expectedStartLine,
@@ -75,6 +90,7 @@
 			ErroneousRegion skipped = skippedRegions.get(j);
 			processRegionData(expected.getStartLine(), expected.getEndLine(), skipped.getStartLine(), skipped.getEndLine());
 		}
+		readRecoveryLog();
 	}
 
 	private boolean invalidRegionData(int expectedStartLine,
@@ -89,7 +105,5 @@
 	public String getFileName() {
 		return filePath;
 	}
-	
-	
 
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-21 13:44:35 UTC (rev 20286)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-23 10:34:28 UTC (rev 20287)
@@ -7,6 +7,8 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 
+import org.strategoxt.stratego_lib.new_0_0;
+
 public class Testsuite {
 	
 	private FilePaths fileLocations;
@@ -16,7 +18,12 @@
 	private boolean useAllDirectories;
 	private String testsuiteName;
 	private Statistics statistics;
+	private ArrayList<Testcase> testCases;
 	
+	public ArrayList<Testcase> getTestCases() {
+		return testCases;
+	}
+
 	public String getTestSuiteName() {
 		return testsuiteName;
 	}
@@ -33,9 +40,40 @@
 		useAllDirectories=true;
 		statistics = new Statistics();
 		this.fileLocations=fileLocations;
+		testCases=new ArrayList<Testcase>();
 	}
 	
 	public void runTestcases() throws Exception{
+		testCases.clear();
+		statistics.reset();
+		fillDirectoryList();
+		fillExtensionList();
+		processTestFiles();	
+		calculateStatistics();
+	}
+
+	private void calculateStatistics() {
+		for (Testcase testFile : testCases) {
+			statistics.processFileResult(testFile);
+		}
+	}
+
+	private void processTestFiles() throws Exception {		
+		for (String anExtension : extensions) {
+			for (String aDir : directories) {
+				runFiles(aDir, anExtension);
+			}			
+		}
+	}
+
+	private void fillExtensionList() {
+		if(useAllExtensions){
+			extensions.clear();
+			extensions.add("");
+		}
+	}
+
+	private void fillDirectoryList() {
 		if(useAllDirectories){
 			directories.clear();
 			directories.add(fileLocations.getRoorDir());
@@ -45,22 +83,13 @@
 					addDir(subDirPath);
 			}
 		}
-		if(useAllExtensions){
-			extensions.clear();
-			extensions.add("");
-		}
-		for (String aDir : directories) {
-			for (String anExtension : extensions) {
-				runFiles(aDir, anExtension);
-			}			
-		}		
 	}
 	
 	public Statistics getStatistics() {
 		return statistics;
 	}
 
-	public void runFiles(String inputDirectory, String extension) throws Exception{	
+	private void runFiles(String inputDirectory, String extension) throws Exception{	
 		File dir = new File(inputDirectory);
         if(!dir.exists())
         	throw new IOException("Directory: "+dir + "does not exist");
@@ -70,27 +99,29 @@
         	String ext=fileName.substring(fileName.lastIndexOf('.')+1);
         	String filePath=dir+File.separator+fileName;
         	if (!new File(filePath).isDirectory() && (useAllExtensions || fileName.endsWith(extension))){
-        		processFile(ext, filePath);
+        		runTestFile(ext, filePath);
 				//System.out.println(filePath);
 			}
 		}	
 	}
 
-	public void processFile(String ext, String filePath) throws FileNotFoundException {
+	public void runTestFile(String ext, String filePath) throws FileNotFoundException {
 		Testcase file = new Testcase(filePath);
 		file.compareRegions(fileLocations.getParsetable(ext));
-		statistics.processFileResult(file);
+		testCases.add(file);
 	}
 
 	public Testsuite addDir(String dirName) {
 		useAllDirectories=false;
-		directories.add(dirName);
+		if(!directories.contains(dirName))
+			directories.add(dirName);
 		return this;
 	}
 
 	public Testsuite addExtension(String ext) {
 		useAllExtensions=false;
-		extensions.add(ext);
+		if(!extensions.contains(ext))
+			extensions.add(ext);
 		return this;
 	}
 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java	2009-11-21 13:44:35 UTC (rev 20286)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/InfraStructure_Testing.java	2009-11-23 10:34:28 UTC (rev 20287)
@@ -19,5 +19,6 @@
 	public static final String NEARBY_REGIONS_JAVA = DIR_TEST2 + File.separator +"nearbyRegions.java";
 	public static final String TWO_REGIONS_JAVA = DIR_TEST2 + File.separator +"twoRegions.java";
 	public static final String TEST2_JAVA = DIR_TEST1 + File.separator +"test2.java";
+	public static final String TWO_EXACT_REGIONS_JAVA = DIR_TEST2 + File.separator +"twoExactRegions.java";
 
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-21 13:44:35 UTC (rev 20286)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-23 10:34:28 UTC (rev 20287)
@@ -4,12 +4,15 @@
 import static org.junit.Assert.*;
 
 import java.io.FileNotFoundException;
+import java.util.ArrayList;
 
 import junit.framework.Assert;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
+import recovery_logging.RegionLog;
+
 import evaluating.*;
 
 
@@ -129,6 +132,26 @@
 	}
 	
 	@Test
+	public void testRecoveryLog_Init() throws FileNotFoundException {
+		Testcase twoExactRegions = new Testcase(InfraStructure_Testing.TWO_EXACT_REGIONS_JAVA);
+		assertEquals("",twoExactRegions.getRecoverLog().getFileName());
+		assertEquals(0, twoExactRegions.getRecoverLog().getRegionInfo().size());
+	}
+	
+	@Test
+	public void testRecoveryLog() throws FileNotFoundException {
+		Testcase twoExactRegions = new Testcase(InfraStructure_Testing.TWO_EXACT_REGIONS_JAVA);
+		twoExactRegions.compareRegions(InfraStructure_Testing.JAVA_GRAMMAR);
+		assertEquals(twoExactRegions.getFileName(), twoExactRegions.getRecoverLog().getFileName());
+		ArrayList<RegionLog> regionInfo = twoExactRegions.getRecoverLog().getRegionInfo();
+		assertEquals(2, regionInfo.size());
+		assertEquals(2, regionInfo.get(0).getInspectedFragments().size());
+		assertEquals("bla bla bla //@START @END", regionInfo.get(0).getSkippedFragment().trim());
+		assertEquals("int corrInt=1 //@START @END", regionInfo.get(1).getSkippedFragment().trim());
+		assertTrue(regionInfo.get(0).getRegionSelectionTime()>=0);
+	}
+	
+	@Test
 	public void testNearbyRegions() throws FileNotFoundException {
 		Testcase nearbyRegions = new Testcase(InfraStructure_Testing.NEARBY_REGIONS_JAVA);
 		nearbyRegions.compareRegions(InfraStructure_Testing.JAVA_GRAMMAR);

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-21 13:44:35 UTC (rev 20286)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-23 10:34:28 UTC (rev 20287)
@@ -54,7 +54,7 @@
 					.addDir(InfraStructure_Testing.DIR_TEST1)
 					.addExtension(InfraStructure.JAVA_EXT);
 		myTestcases.runTestcases();
-		Assert.assertEquals(4, myTestcases.getStatistics().getNumberOfFiles());
+		Assert.assertEquals(5, myTestcases.getStatistics().getNumberOfFiles());
 	}
 	
 	@Test
@@ -83,30 +83,36 @@
 	}
 	
 	@Test
-	public void test_Processing() throws Exception{		
-		myTestcases.runFiles(InfraStructure_Testing.DIR_TEST1, "");
+	public void test_Processing() throws Exception{	
+		myTestcases.setAllExtensions(true);	
+		myTestcases.addDir(InfraStructure_Testing.DIR_TEST1);
+		myTestcases.runTestcases();
+		Assert.assertEquals(3, myTestcases.getStatistics().getNumberOfFiles());
+		Assert.assertEquals(3, myTestcases.getTestCases().size());
+		myTestcases.addDir(InfraStructure_Testing.DIR_TEST1);		
+		myTestcases.runTestcases();
 		Assert.assertEquals(3, myTestcases.getStatistics().getNumberOfFiles());	
-		myTestcases.runFiles(InfraStructure_Testing.DIR_TEST2, "");
-		Assert.assertEquals(6, myTestcases.getStatistics().getNumberOfFiles());	
+		Assert.assertEquals(3, myTestcases.getTestCases().size());	
 	}
 	
 	
 	@Test
 	public void test_Processing_extension() throws Exception{
 		myTestcases.addExtension("m");
-		myTestcases.runFiles(InfraStructure_Testing.DIR_TEST1,"cs");
+		myTestcases.addDir(InfraStructure_Testing.DIR_TEST1);
+		myTestcases.runTestcases();
 		Assert.assertEquals(0, myTestcases.getStatistics().getNumberOfFiles());	
 		Testsuite processing_java=new Testsuite("bla", fileLocations);
-		processing_java.addExtension("m");
-		processing_java.runFiles(InfraStructure_Testing.DIR_TEST1,InfraStructure.JAVA_EXT);
+		processing_java.addExtension(InfraStructure.JAVA_EXT);
+		processing_java.addDir(InfraStructure_Testing.DIR_TEST1);
+		processing_java.runTestcases();
 		Assert.assertEquals(2, processing_java.getStatistics().getNumberOfFiles());	
-		myTestcases.runFiles(InfraStructure_Testing.DIR_TEST1,InfraStructure.STRATEGO_EXT);
-		Assert.assertEquals(1, myTestcases.getStatistics().getNumberOfFiles());	
 	}
 	
 	@Test(expected=IOException.class)
 	public void test_Processing_Dir_not_Exist() throws Exception{		
-		myTestcases.runFiles("Nonsense", "");			
+		myTestcases.addDir("Nonsense");
+		myTestcases.runTestcases();
 	}
 
 }



From L.C.L.Kats at tudelft.nl  Mon Nov 23 12:20:11 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 23 Nov 2009 11:20:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20288 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <200911231120.nANBKBQD025481@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-23 11:20:11 +0000 (Mon, 23 Nov 2009)
New Revision: 20288

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20288&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java

Log:
minor optimization

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2009-11-23 10:34:28 UTC (rev 20287)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2009-11-23 11:20:11 UTC (rev 20288)
@@ -450,6 +450,7 @@
 //    }
 
     private RangeList parseRanges(ATermList ranges) throws InvalidParseTableException {
+        // TODO: Optimize - directly create int[] for RangeList, don't bother with intermediate Range objects
         Range[] ret = new Range[ranges.getChildCount()];
 
         for(int i = 0; i < ret.length; i++) {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java	2009-11-23 10:34:28 UTC (rev 20287)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java	2009-11-23 11:20:11 UTC (rev 20288)
@@ -11,13 +11,23 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class RangeList {
+    
+    private static final int NONE = -1;
+    
     private final int[] ranges;
     
+    private final int singularRange;
+    
     public RangeList(Range... ranges) {
         // Assume unsanitized input
         List<Range> sortedRanges = toSortedList(ranges);
         List<Range> sanitizedRanges = mergeOverlap(sortedRanges);
         this.ranges = rangesToArray(sanitizedRanges);
+        if (ranges.length == 1 && ranges[0].low == ranges[0].high) {
+            singularRange = ranges[0].low;
+        } else {
+            singularRange = NONE;
+        }
     }
     
     private static List<Range> mergeOverlap(List<Range> ranges) {
@@ -56,6 +66,7 @@
     }
     
     public boolean within(int c) {
+        if (c == singularRange) return true;
         for (int i = 0; i < ranges.length; i += 2) {
             int low = ranges[i];
             if (low <= c) {
@@ -76,9 +87,7 @@
      * @return  The single range character, or -1 if not applicable.
      */
     public int getSingularRange() {
-        if (ranges.length != 2 || ranges[0] != ranges[1])
-            return -1;
-        return ranges[0];
+        return singularRange;
     }
     
     /*



From L.C.L.Kats at tudelft.nl  Mon Nov 23 12:41:30 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 23 Nov 2009 11:41:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20289 - LennartKats -
	in strc-java/trunk: java java/runtime/org/strategoxt
	java/runtime/org/strategoxt/lang
	java/runtime/org/strategoxt/lang/compat/override
	java/runtime/org/strategoxt/lang/terms trans
Message-ID: <200911231141.nANBfU5F025662@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-23 11:41:30 +0000 (Mon, 23 Nov 2009)
New Revision: 20289

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20289&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_all.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoErrorExit.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/Term.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/TermReference.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoList.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java
   strc-java/trunk/java/spoofax-libs.jar
   strc-java/trunk/trans/s2j.str
   strc-java/trunk/trans/variable-access.str

Log:


Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-11-23 11:20:11 UTC (rev 20288)
+++ strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-11-23 11:41:30 UTC (rev 20289)
@@ -9,7 +9,6 @@
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 
-import org.spoofax.interpreter.adapter.aterm.BAFBasicTermFactory;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterErrorExit;
@@ -29,6 +28,7 @@
 import org.strategoxt.lang.StrategoErrorExit;
 import org.strategoxt.lang.StrategoException;
 import org.strategoxt.lang.StrategoExit;
+import org.strategoxt.lang.terms.TermFactory;
 import org.strategoxt.stratego_lib.stratego_lib;
 
 /**
@@ -57,7 +57,7 @@
 	private boolean loadedJars;
 
 	public HybridInterpreter() {
-		this(new BAFBasicTermFactory());
+		this(new TermFactory());
 	}
 
 	public HybridInterpreter(ITermFactory factory) {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java	2009-11-23 11:20:11 UTC (rev 20288)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java	2009-11-23 11:41:30 UTC (rev 20289)
@@ -3,7 +3,9 @@
 import java.util.Arrays;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.VarScope;
 import org.spoofax.interpreter.stratego.SDefT;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -53,6 +55,10 @@
 			context.setVarScope(defScope);
 			boolean success = definition.evaluate(context);
 			return success ? context.current() : null;
+		} catch (InterpreterErrorExit e) {
+			throw new StrategoErrorExit(e.getMessage(), e.getTerm(), e);
+		} catch (InterpreterExit e) {
+			throw new StrategoExit(e.getValue(), e);
 		} catch (InterpreterException e) {
 			throw new StrategoException("Exception in interpreter: " + e.getMessage(), e);
 		} finally {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_all.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_all.java	2009-11-23 11:20:11 UTC (rev 20288)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_all.java	2009-11-23 11:41:30 UTC (rev 20289)
@@ -69,6 +69,7 @@
 			} else if (tail2 == tail) { // (match() not necessary because of recursion)
 				return list;
 			} else {
+				// TODO: head/tail variation of replaceList?
 				return context.getFactory().makeListCons(head, tail2);
 			}
 		} else {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoErrorExit.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoErrorExit.java	2009-11-23 11:20:11 UTC (rev 20288)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoErrorExit.java	2009-11-23 11:41:30 UTC (rev 20289)
@@ -12,14 +12,18 @@
 	private static final long serialVersionUID = 1718563644820693442L;
 	
 	private final IStrategoTerm term;
+	
+	public StrategoErrorExit(String message, IStrategoTerm term, Throwable cause) {
+		super(1, message, cause);
+		this.term = term;
+	}
 
 	public StrategoErrorExit(String message, IStrategoTerm term) {
-		super(1, message);
-		this.term = term;
+		this(message, term, null);
 	}
 	
 	public StrategoErrorExit(String message) {
-		this(message, null);
+		this(message, null, null);
 	}
 	
 	public IStrategoTerm getTerm() {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java	2009-11-23 11:20:11 UTC (rev 20288)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java	2009-11-23 11:41:30 UTC (rev 20289)
@@ -16,14 +16,17 @@
         this.value = value;
     }
     
-    public StrategoExit(int value, Throwable cause) {
-    	super("Legal exit: return code " + valueToString(value), cause);
+    public StrategoExit(int value, String message, Throwable cause) {
+    	super(message, cause);
     	this.value = value;
     }
     
+    public StrategoExit(int value, Throwable cause) {
+    	this(value, "Legal exit: return code " + valueToString(value), cause);
+    }
+    
     public StrategoExit(int value, String message) {
-    	super(message);
-    	this.value = value;
+    	this(value, message, null);
     }
     
     public StrategoExit(StrategoExit cause) {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/Term.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/Term.java	2009-11-23 11:20:11 UTC (rev 20288)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/Term.java	2009-11-23 11:41:30 UTC (rev 20289)
@@ -1,15 +1,15 @@
 package org.strategoxt.lang;
 
-import org.spoofax.interpreter.terms.BasicTermFactory;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.terms.TermFactory;
 
 public class Term {
 	
 	public static final Strategy[] NO_STRATEGIES = {};
 	
-	public static final IStrategoTerm[] NO_TERMS = BasicTermFactory.EMPTY;
+	public static final IStrategoTerm[] NO_TERMS = TermFactory.EMPTY;
 	
 	private Term() {}
 	

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/TermReference.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/TermReference.java	2009-11-23 11:20:11 UTC (rev 20288)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/TermReference.java	2009-11-23 11:41:30 UTC (rev 20289)
@@ -5,34 +5,41 @@
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class TermReference implements ITermReference {
-	private IStrategoTerm term;
+public final class TermReference implements ITermReference {
 	
+	public IStrategoTerm value;
+	
 	public TermReference(IStrategoTerm term) {
-		this.term = term;
+		this.value = term;
 	}
 	
 	public TermReference() {}
 	
 	public void set(IStrategoTerm term) {
-		this.term = term;
+		this.value = term;
 	}
 	
 	public IStrategoTerm get() {
-		return term;
+		return value;
 	}
 	
+	public boolean match(IStrategoTerm term) {
+		if (this.value == null) {
+			this.value = term;
+			return true;
+		} else {
+			return this.value == term || this.value.match(term);
+		}
+	}
+	
 	@Override
 	public String toString() {
-		return "->" + term;
+		return "->" + value;
 	}
 
 	@Override
 	public int hashCode() {
-		final int prime = 31;
-		int result = 1;
-		result = prime * result + ((term == null) ? 0 : term.hashCode());
-		return result;
+		return value == null ? 0 : value.hashCode();
 	}
 
 	@Override
@@ -42,12 +49,12 @@
 		if (obj == null)
 			return false;
 		if (getClass() != obj.getClass())
-			return term == null ? false : term.equals(obj);
+			return value == null ? false : value.equals(obj);
 		TermReference other = (TermReference) obj;
-		if (term == null) {
-			if (other.term != null)
+		if (value == null) {
+			if (other.value != null)
 				return false;
-		} else if (!term.equals(other.term))
+		} else if (!value.equals(other.value))
 			return false;
 		return true;
 	}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	2009-11-23 11:20:11 UTC (rev 20288)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	2009-11-23 11:41:30 UTC (rev 20289)
@@ -29,6 +29,8 @@
     ?Stream(stream);
     prim("SSL_EXT_read_text_from_stream", stream)
   
+  // TODO: override collect-all (seems to inline crush!)
+  
   override crush(nul, sum) =
     SRTS-EXT-crush(nul, sum, id)
   

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoList.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoList.java	2009-11-23 11:20:11 UTC (rev 20288)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoList.java	2009-11-23 11:41:30 UTC (rev 20289)
@@ -55,7 +55,7 @@
     }
     
     public IStrategoTerm head() {
-        if (isEmpty())
+        if (head == null)
             throw new NoSuchElementException();
         return head;
     }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java	2009-11-23 11:20:11 UTC (rev 20288)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java	2009-11-23 11:41:30 UTC (rev 20289)
@@ -10,6 +10,7 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermPrinter;
+import static org.strategoxt.lang.terms.TermFactory.EMPTY_LIST;;
 
 public abstract class StrategoTerm implements IStrategoTerm, Cloneable {
 	
@@ -89,15 +90,14 @@
     	switch (result) {
     		case MUTABLE_HASH:
     			result = hashFunction();
-    			if (annotations != null && !annotations.isEmpty())
+    			if (annotations != null && annotations != EMPTY_LIST && !annotations.isEmpty())
     				result = result * 2423 + annotations.hashCode();
     			return result;
     		case UNKNOWN_HASH:
     			result = hashFunction();
-    			if (annotations != null && !annotations.isEmpty())
+    			if (annotations != null && annotations != EMPTY_LIST && !annotations.isEmpty())
     				result = result * 2423 + annotations.hashCode();
-    			if (getTermType() != MUTABLE)
-    				hashCode = result;
+   				hashCode = getTermType() == MUTABLE ? MUTABLE_HASH : result;
     			return result;
     		default:
     			return result;
@@ -108,7 +108,7 @@
     	assert getTermType() != MUTABLE; // (avoid this virtual call here)
     	if (hashCode == UNKNOWN_HASH) {
     		int hashCode = hashFunction();
-			this.hashCode = annotations == null || annotations.isEmpty()
+			this.hashCode = annotations == null || annotations == EMPTY_LIST || annotations.isEmpty()
 				? hashCode
 				: hashCode * 2423 + annotations.hashCode();
     	}

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-11-23 11:20:11 UTC (rev 20288)
+++ strc-java/trunk/trans/s2j.str	2009-11-23 11:41:30 UTC (rev 20289)
@@ -578,7 +578,7 @@
     VarDec(x{}, ConstType(_)) -> expr |[ x ]|
 
   translate-arg :
-    VarDec(x{Offset(_), Escapes()}, ConstType(_)) -> expr |[ x.get() ]|
+    VarDec(x{Offset(_), Escapes()}, ConstType(_)) -> expr |[ x.value ]|
   
   translate-arg : 
     VarDec(x, FunType(_, _)) -> expr |[ x ]|

Modified: strc-java/trunk/trans/variable-access.str
===================================================================
--- strc-java/trunk/trans/variable-access.str	2009-11-23 11:20:11 UTC (rev 20288)
+++ strc-java/trunk/trans/variable-access.str	2009-11-23 11:41:30 UTC (rev 20289)
@@ -21,7 +21,7 @@
     (x{Frames([])}, e) -> |[ x = e; ]|
 
   java-VarToWrite : 
-    (x{Offset(i), Frames(_)}, e) -> |[ x.set(e); ]|
+    (x{Offset(i), Frames(_)}, e) -> |[ x.value = e; ]|
 
   java-VarToReadRef : 
     Var(x{}) -> expr |[ x ]|
@@ -30,4 +30,4 @@
     Var(x{Frames([])}) -> expr |[ x ]|
 
   java-VarToReadRef :
-    Var(x{Offset(i), Frames(_)}) -> |[ x.get() ]|
+    Var(x{Offset(i), Frames(_)}) -> |[ x.value ]|



From m.dejonge at tudelft.nl  Mon Nov 23 14:55:52 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 23 Nov 2009 13:55:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20290 - MaartjeDeJonge -
	sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating
Message-ID: <200911231355.nANDtqL0027367@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-23 13:55:52 +0000 (Mon, 23 Nov 2009)
New Revision: 20290

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20290&view=rev

Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java

Log:
performance evaluation added to statistics

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-23 11:41:30 UTC (rev 20289)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-23 13:55:52 UTC (rev 20290)
@@ -5,12 +5,32 @@
 import java.util.Iterator;
 import java.util.TreeMap;
 
+import recovery_logging.RegionLog;
+
 public class Statistics {
 	
 	private int numberOfFiles;
-	private int numberOfRegions;
+	private int numberOfEvaluatedRegions;
 	private TreeMap<Evaluation, ArrayList<String>> resultsCategorised;
+	private int maxRegionSelectionTime;
+	private int sumRegionSelectionTime;
+	private int numberOfSkippedRegionsDuringParsing;
 	
+	public int getMaxRegionSelectionTime() {
+		return maxRegionSelectionTime;
+	}
+
+	public int getAverageRegionSelectionTime() {
+		if(numberOfSkippedRegionsDuringParsing<=0){
+			return -1;
+		}
+		return sumRegionSelectionTime/numberOfSkippedRegionsDuringParsing;
+	}
+
+	public int getNumberOfSkippedRegionsDuringParsing() {
+		return numberOfSkippedRegionsDuringParsing;
+	}
+
 	public TreeMap<Evaluation, ArrayList<String>> getResultsCategorised() {
 		return resultsCategorised;
 	}
@@ -35,7 +55,10 @@
 		resultsCategorised=new TreeMap<Evaluation, ArrayList<String>>();
 		fillResultMap();
 		numberOfFiles=0;
-		numberOfRegions=0;
+		numberOfEvaluatedRegions=0;
+		maxRegionSelectionTime=0;
+		sumRegionSelectionTime=0;
+		numberOfSkippedRegionsDuringParsing=0;
 	}
 
 	private void fillResultMap() {
@@ -48,9 +71,17 @@
 		for (Evaluation result : testFile.getRegionEvaluations()) {
 			String fileName = testFile.getFileName();
 			getResultList(result).add(fileName);
-			numberOfRegions++;
+			numberOfEvaluatedRegions++;
 			//System.out.println(fileName);
 		}
+		
+		for(RegionLog rl: testFile.getRecoverLog().getRegionInfo()){
+			int regionTime=(int)rl.getRegionSelectionTime();
+			sumRegionSelectionTime+=regionTime;
+			numberOfSkippedRegionsDuringParsing++;
+			if(regionTime > maxRegionSelectionTime)
+				maxRegionSelectionTime=regionTime;
+		}
 		numberOfFiles++;
 	}
 	
@@ -63,8 +94,8 @@
 		
 	}
 	
-	public int getNumberOfRegions() {
-		return numberOfRegions;
+	public int getNumberOfEvaluatedRegions() {
+		return numberOfEvaluatedRegions;
 	}
 
 	public double calculateScore() {
@@ -73,7 +104,7 @@
 		result += 5*(getResultList(Evaluation.GOOD).size());
 		result += 1*(getResultList(Evaluation.POOR).size());
 		result += 1*(getResultList(Evaluation.MERGED_REGION).size());
-		int nrOfEvaluated=numberOfRegions-nrOfNonEvaluatedFiles();
+		int nrOfEvaluated=numberOfEvaluatedRegions-nrOfNonEvaluatedFiles();
 		if(nrOfEvaluated<=0)
 			return -1;
 		return result/nrOfEvaluated;
@@ -81,9 +112,12 @@
 
 	public void reset() {
 		this.numberOfFiles=0;
-		this.numberOfRegions=0;
+		this.numberOfEvaluatedRegions=0;
 		for (Evaluation eval : resultsCategorised.keySet()) {
 			resultsCategorised.get(eval).clear();
 		}
+		maxRegionSelectionTime=0;
+		sumRegionSelectionTime=0;
+		numberOfSkippedRegionsDuringParsing=0;
 	}
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-23 11:41:30 UTC (rev 20289)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-23 13:55:52 UTC (rev 20290)
@@ -10,7 +10,11 @@
 
 	private FileLog recoverLog;
 	
-	
+	/**
+	 * Returns a log with information collected during the recovery in JSGLR
+	 * Information includes skipped region and execution times
+	 * @return
+	 */
 	public FileLog getRecoverLog() {
 		return recoverLog;
 	}
@@ -24,12 +28,22 @@
 	private ArrayList<Evaluation> regionEvaluation;
 	private String filePath;
 	
+	/**
+	 * Evaluation data for a test file
+	 */
 	public Testcase(String filePath) {
 		this.filePath=filePath;
 		regionEvaluation=new ArrayList<Evaluation>();
 		recoverLog=new FileLog();
 	}
 
+	/**
+	 * Evaluates by comparing the expected region with the actual region
+	 * @param expectedStartLine
+	 * @param expectedEndLine
+	 * @param actualStartLine
+	 * @param actualEndLine
+	 */
 	public void processRegionData(int expectedStartLine,
 			int expectedEndLine, int actualStartLine, int actualEndLine) {		
 		if(invalidRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine))
@@ -51,24 +65,31 @@
 			regionEvaluation.add(Evaluation.MIS_DIAGNOSED);
 	}
 
+	/**
+	 * Compares expected regions with actual regions
+	 * @param parseTable
+	 * @throws FileNotFoundException
+	 */
 	public void compareRegions(String parseTable) throws FileNotFoundException{
 		ArrayList<ErroneousRegion> expectedRegions=null;
 		ArrayList<ErroneousRegion> skippedRegions=null;
 		try {
-			expectedRegions=ErroneousRegion.collectExpectedRegions(filePath);
+			skippedRegions = ErroneousRegion.collectSkippedRegions(filePath, parseTable);
+			readRecoveryLog();
 		}catch (FileNotFoundException e) {
 			throw(e);
-		}
+		} 
 		catch (Exception e) {
-			regionEvaluation.add(Evaluation.WRONG_DATA);
+			regionEvaluation.add(Evaluation.RECOVERY_FAILED);
 			return;
 		}
 		try {
-			skippedRegions = ErroneousRegion.collectSkippedRegions(filePath, parseTable);
-		} catch (Exception e) {
-			regionEvaluation.add(Evaluation.RECOVERY_FAILED);
+			expectedRegions=ErroneousRegion.collectExpectedRegions(filePath);
+		}
+		catch (Exception e) {
+			regionEvaluation.add(Evaluation.WRONG_DATA);
 			return;
-		}
+		}		
 		if(expectedRegions.size()==0){
 			regionEvaluation.add(Evaluation.NO_EXPECTED_REGION);
 			return;
@@ -90,7 +111,6 @@
 			ErroneousRegion skipped = skippedRegions.get(j);
 			processRegionData(expected.getStartLine(), expected.getEndLine(), skipped.getStartLine(), skipped.getEndLine());
 		}
-		readRecoveryLog();
 	}
 
 	private boolean invalidRegionData(int expectedStartLine,

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-23 11:41:30 UTC (rev 20289)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-23 13:55:52 UTC (rev 20290)
@@ -2,13 +2,9 @@
 
 import java.io.File;
 import java.io.FileNotFoundException;
-import java.io.FilenameFilter;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.HashMap;
 
-import org.strategoxt.stratego_lib.new_0_0;
-
 public class Testsuite {
 	
 	private FilePaths fileLocations;
@@ -20,18 +16,29 @@
 	private Statistics statistics;
 	private ArrayList<Testcase> testCases;
 	
+	/**
+	 * Returns evaluation data for all processed files in test suite
+	 * @return
+	 */
 	public ArrayList<Testcase> getTestCases() {
 		return testCases;
 	}
 
+	/**
+	 * Name of test suite
+	 * @return
+	 */
 	public String getTestSuiteName() {
 		return testsuiteName;
 	}
-
-	public void setTestsuiteName(String testsuite) {
-		testsuiteName=testsuite;
-	}
 	
+	/**
+	 * Creates a testsuite
+	 * @param suiteName
+	 * Name of the testsuite
+	 * @param fileLocations
+	 * locations of parse tables, root dir etc.
+	 */
 	public Testsuite(String suiteName, FilePaths fileLocations){
 		testsuiteName=suiteName;
 		directories=new ArrayList<String>();
@@ -43,6 +50,10 @@
 		testCases=new ArrayList<Testcase>();
 	}
 	
+	/**
+	 * runs the test cases and collects data for evaluation
+	 * @throws Exception
+	 */
 	public void runTestcases() throws Exception{
 		testCases.clear();
 		statistics.reset();
@@ -84,7 +95,11 @@
 			}
 		}
 	}
-	
+
+	/**
+	 * Returns a statistic overview stating evaluation results concerning quality and performance
+	 * @return
+	 */
 	public Statistics getStatistics() {
 		return statistics;
 	}
@@ -105,12 +120,25 @@
 		}	
 	}
 
+	/**
+	 * Evaluates a single file
+	 * @param ext
+	 * extension
+	 * @param filePath
+	 * Information about parsetable locations
+	 * @throws FileNotFoundException
+	 */
 	public void runTestFile(String ext, String filePath) throws FileNotFoundException {
 		Testcase file = new Testcase(filePath);
 		file.compareRegions(fileLocations.getParsetable(ext));
 		testCases.add(file);
 	}
 
+	/**
+	 * Adds a directory that should be processed
+	 * @param dirName
+	 * @return
+	 */
 	public Testsuite addDir(String dirName) {
 		useAllDirectories=false;
 		if(!directories.contains(dirName))
@@ -118,6 +146,9 @@
 		return this;
 	}
 
+	/**
+	 * Adds an extension that should be processed
+	 */
 	public Testsuite addExtension(String ext) {
 		useAllExtensions=false;
 		if(!extensions.contains(ext))
@@ -125,10 +156,18 @@
 		return this;
 	}
 
+	/**
+	 * says that all extensions should be included
+	 * @param useAll
+	 */
 	public void setAllExtensions(boolean useAll) {
 		useAllExtensions=useAll;
 	}
 
+	/**
+	 * Says that all directories (below the root dir) should be included
+	 * @param useAll
+	 */
 	public void setAllDirectories(boolean useAll) {
 		useAllDirectories=useAll;
 	}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-23 11:41:30 UTC (rev 20289)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-23 13:55:52 UTC (rev 20290)
@@ -1,5 +1,9 @@
 package evaluating;
 
+import java.util.ArrayList;
+
+import recovery_logging.RegionLog;
+
 public class WriteStatistics {
 
 	public static void writeConsole(Testsuite testSuite) {
@@ -8,8 +12,31 @@
 		writeConsole_General(stats);		
 		writeConsole_Overview(stats);
 		writeConsole_Files(stats);
+		writeConsole_Details(testSuite);
 	}
 
+	private static void writeConsole_Details(Testsuite testSuite) {
+		System.out.println();
+		System.out.println("Details");
+		for (Testcase aFile : testSuite.getTestCases()) {
+			System.out.println();
+			System.out.println("********************************************");
+			System.out.println("\t Filename: "+aFile.getFileName());
+			System.out.println("\t Evaluations: "+aFile.getRegionEvaluations());
+			System.out.println("\t Recover Log: ");
+			ArrayList<RegionLog> recoverRegions = aFile.getRecoverLog().getRegionInfo();
+			for (int i = 0; i < recoverRegions.size(); i++) {
+				RegionLog aRegion = recoverRegions.get(i);
+				System.out.println("\t \t Region: " + (i+1));
+				System.out.println("\t \t Execution times: " + aRegion.getExecutionTimetable());
+				System.out.println("\t \t Skipped Fragment:");
+				System.out.println(aRegion.getSkippedFragment());
+				//aRegion.getInspectedFragments();
+			}		
+		}
+		
+	}
+
 	public static void writeConsole_Files(Statistics stats) {
 		System.out.println("Files");
 		for (Evaluation eval : Evaluation.values()) {
@@ -28,7 +55,10 @@
 	public static void writeConsole_General(Statistics stats) {
 		System.out.println("General");
 		System.out.println("\t" + "Number of files: " + stats.getNumberOfFiles());
-		System.out.println("\t" + "Number of regions: " + stats.getNumberOfRegions());
+		System.out.println("\t" + "Number of evaluated regions: " + stats.getNumberOfEvaluatedRegions());
+		System.out.println("\t" + "Number of skipped regions during parsing: "+ stats.getNumberOfSkippedRegionsDuringParsing());
+		System.out.println("\t" + "Average region selection time: " + stats.getAverageRegionSelectionTime());
+		System.out.println("\t" + "Maximum region selection time: " + stats.getMaxRegionSelectionTime());
 		System.out.println("\t" + "Number of non evaluated files: " + stats.nrOfNonEvaluatedFiles());
 		System.out.println("\t" + "Score: " + stats.calculateScore());
 	}



From L.C.L.Kats at tudelft.nl  Mon Nov 23 15:52:08 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 23 Nov 2009 14:52:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20291 - LennartKats -
	strategoxt/trunk/strc-core/lib/stratego/strc/front
Message-ID: <200911231452.nANEq8hs027947@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-23 14:52:08 +0000 (Mon, 23 Nov 2009)
New Revision: 20291

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20291&view=rev

Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str

Log:
Using non-string terms in $[ string quotations ] is now a fatal error.

Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-11-23 13:55:52 UTC (rev 20290)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-11-23 14:52:08 UTC (rev 20291)
@@ -144,12 +144,19 @@
   string-escape-padd(|n) :
     StringEscape1(s, t) -> <desugar> Term |[
       <!t
-       ; (map(is-string(|) <+ write-to-string(|)|); concat-strings(|)
-          <+ (is-string(|) <+ write-to-string(|)))
+       ; (   concat-strings(|)
+          <+ is-string(|)
+          <+ { x, y: ?x; prim("SSL_stacktrace_get_all_frame_names",|); ?[ _ | y]; !y; report-failure(|~str:message {^[]}, x) }
+         )
        ; string-replace(|"\n", t_padded)>
     ]|
     with
       t_padded := Anno(Str(<string-as-chars(!['\n' | <drop(!n)>])> s), Op("Nil", []))
+    ; x := <new>
+    ; y := <new>
+    ; (  message := <conc-strings> ("Internal error: escaped term in string quotation is not a string in ", <WithContext>)
+      <+ message := "Internal error: escaped term in string quotation is not a string"
+      )
 
   DesugarQuoted :
     StringEscape2(s, t) -> StringEscape1(s, t)



From L.C.L.Kats at tudelft.nl  Mon Nov 23 16:20:11 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 23 Nov 2009 15:20:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20292 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.editors.aterm/.externalToolBuilders
	org.strategoxt.imp.editors.editorservice/.externalToolBuilders
	org.strategoxt.imp.editors.sdf/.externalToolBuilders
	org.strategoxt.imp.editors.stratego/.externalToolBuilders
Message-ID: <200911231520.nANFKBXa028436@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-23 15:20:11 +0000 (Mon, 23 Nov 2009)
New Revision: 20292

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20292&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch

Log:
Clean build fixes.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch	2009-11-23 14:52:08 UTC (rev 20291)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/.externalToolBuilders/ATerm build.xml.launch	2009-11-23 15:20:11 UTC (rev 20292)
@@ -21,6 +21,8 @@
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
 <mapAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_PROPERTIES">
 <mapEntry key="externaldef" value="syntax/ATerm.def"/>
+<mapEntry key="eclipse.spoofaximp.strategojar" value="${env_var:HOME}/.nix-profile/share/strc-java/strategoxt.jar"/>
+<mapEntry key="eclipse.spoofaximp.jars" value="${workspace_loc:/org.strategoxt.imp.generator/lib/}"/>
 </mapAttribute>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.aterm/build.xml}"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch	2009-11-23 14:52:08 UTC (rev 20291)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.externalToolBuilders/EditorService build.xml.launch	2009-11-23 15:20:11 UTC (rev 20292)
@@ -22,6 +22,8 @@
 <mapAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_PROPERTIES">
 <mapEntry key="eclipse.running" value="true"/>
 <mapEntry key="externaldef" value="${workspace_loc:/org.strategoxt.imp.generator}/src/syntax/EditorService.def"/>
+<mapEntry key="eclipse.spoofaximp.strategojar" value="${env_var:HOME}/.nix-profile/share/strc-java/strategoxt.jar"/>
+<mapEntry key="eclipse.spoofaximp.jars" value="${workspace_loc:/org.strategoxt.imp.generator/lib/}"/>
 </mapAttribute>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.editorservice/build.xml}"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch	2009-11-23 14:52:08 UTC (rev 20291)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/.externalToolBuilders/SDF build.xml.launch	2009-11-23 15:20:11 UTC (rev 20292)
@@ -22,6 +22,8 @@
 <mapAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_PROPERTIES">
 <mapEntry key="eclipse.running" value="true"/>
 <mapEntry key="externaldef" value="syntax/SDF.def"/>
+<mapEntry key="eclipse.spoofaximp.strategojar" value="${env_var:HOME}/.nix-profile/share/strc-java/strategoxt.jar"/>
+<mapEntry key="eclipse.spoofaximp.jars" value="${workspace_loc:/org.strategoxt.imp.generator/lib/}"/>
 </mapAttribute>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.sdf/build.xml}"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch	2009-11-23 14:52:08 UTC (rev 20291)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.xml.launch	2009-11-23 15:20:11 UTC (rev 20292)
@@ -22,6 +22,8 @@
 <mapAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_PROPERTIES">
 <mapEntry key="eclipse.running" value="true"/>
 <mapEntry key="externaldef" value="syntax/Stratego-Sugar.def"/>
+<mapEntry key="eclipse.spoofaximp.strategojar" value="${env_var:HOME}/.nix-profile/share/strc-java/strategoxt.jar"/>
+<mapEntry key="eclipse.spoofaximp.jars" value="${workspace_loc:/org.strategoxt.imp.generator/lib/}"/>
 </mapAttribute>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${project}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.editors.stratego/build.xml}"/>



From L.C.L.Kats at tudelft.nl  Mon Nov 23 16:23:41 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 23 Nov 2009 15:23:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20293 - LennartKats - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	. parser services
Message-ID: <200911231523.nANFNf4g028465@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-23 15:23:41 +0000 (Mon, 23 Nov 2009)
New Revision: 20293

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20293&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Log:
Tricky new synchronization changes (fixes, hopefully)

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-11-23 15:20:11 UTC (rev 20292)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-11-23 15:23:41 UTC (rev 20293)
@@ -106,34 +106,40 @@
 	}
 	
 	// ENVIRONMENT ACCESS AND MANIPULATION
+	
+	public static synchronized HybridInterpreter createInterpreter() {
+		return createInterpreter(false);
+	}
 
-	public static synchronized HybridInterpreter createInterpreter() {
-		HybridInterpreter result = new HybridInterpreter(getTermFactory()) {
-			@Override
-			public boolean invoke(String name) throws InterpreterExit, InterpreterException {
-				assertLock();
-				return super.invoke(name);
-			}
-			
-			@Override
-			public void load(IStrategoTerm program) throws InterpreterException {
-				assertLock();
-				super.load(program);
-			}
-			
-			@Override
-			public IStrategoTerm current() {
-				synchronized (getSyncRoot()) {
-					return super.current();
+	public static synchronized HybridInterpreter createInterpreter(boolean noGlobalLock) {
+		HybridInterpreter result =	noGlobalLock
+			? new HybridInterpreter(getTermFactory())
+			: new HybridInterpreter(getTermFactory()) {
+				@Override
+				public boolean invoke(String name) throws InterpreterExit, InterpreterException {
+					assertLock();
+					return super.invoke(name);
 				}
-			}
-		};
+				
+				@Override
+				public void load(IStrategoTerm program) throws InterpreterException {
+					assertLock();
+					super.load(program);
+				}
+				
+				@Override
+				public IStrategoTerm current() {
+					synchronized (getSyncRoot()) {
+						return super.current();
+					}
+				}
+			};
 		
 		result.getCompiledContext().registerComponent("stratego_sglr"); // ensure op. registry available
 		SGLRCompatLibrary sglrLibrary = (SGLRCompatLibrary) result.getContext().getOperatorRegistry(SGLRCompatLibrary.REGISTRY_NAME);
 		result.addOperatorRegistry(new IMPJSGLRLibrary(sglrLibrary));
 		result.addOperatorRegistry(new IMPLibrary());
-		 result.setIOAgent(new EditorIOAgent());
+		result.setIOAgent(new EditorIOAgent());
 		
 		return result;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-11-23 15:20:11 UTC (rev 20292)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-11-23 15:23:41 UTC (rev 20293)
@@ -176,10 +176,10 @@
 			// while (PlatformUI.getWorkbench().getDisplay().readAndDispatch());
 			
 			// Can't do resource locking when Eclipse is still starting up; causes deadlock
-			parseLock.lock();
 			currentParseStream = null; // avoid twitchy colorer
 			if (isStartupParsed)
 				Job.getJobManager().beginRule(resource, monitor); // enter lock
+			parseLock.lock(); // Parse lock must be locked _after_ resource lock
 			
 			Debug.startTimer();
 			

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-23 15:20:11 UTC (rev 20292)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-23 15:23:41 UTC (rev 20293)
@@ -71,67 +71,78 @@
 		this.openEditor = openEditor;
 	}
 	
-	public void execute(EditorState editor, IStrategoAstNode node) {
-		try {
-			if (node == null) {
-				node = editor.getSelectionAst(true);
-				if (node == null) node = editor.getParseController().getCurrentAst();
-			}
-			if (node == null) {
-				openError(editor, "Editor is still analyzing");
-				return;
-			}
-			
-			IStrategoTerm resultTerm = observer.invoke(builderRule, node);
-			if (resultTerm == null) {
+	public void execute(EditorState editor, IStrategoAstNode node) { // TODO: refactor
+		IStrategoTerm resultTerm = null;
+		String filename = null;
+		
+		synchronized (observer.getSyncRoot()) {
+			try {
+				if (node == null) {
+					node = editor.getSelectionAst(true);
+					if (node == null) node = editor.getParseController().getCurrentAst();
+				}
+				if (node == null) {
+					openError(editor, "Editor is still analyzing");
+					return;
+				}
+				
+				resultTerm = observer.invoke(builderRule, node);
+				if (resultTerm == null) {
+					observer.reportRewritingFailed();
+					Environment.logException("Builder failed:\n" + observer.getLog());
+					if (!observer.isUpdateStarted())
+						observer.asyncUpdate(editor.getParseController());
+					openError(editor, "Builder failed (see error log)");
+					return;
+				}
+		
+				if (isTermAppl(resultTerm) && "None".equals(TermReader.cons(resultTerm))) {
+					return;
+				} else if (!isTermTuple(resultTerm) || !isTermString(termAt(resultTerm, 0))) {
+					Environment.logException("Illegal builder result (must be a filename/string tuple)");
+					openError(editor, "Illegal builder result (must be a filename/string tuple): " + resultTerm);
+				}
+	
+				IStrategoTerm filenameTerm = termAt(resultTerm, 0);
+				filename = asJavaString(filenameTerm);
+				
+				resultTerm = termAt(resultTerm, 1);
+				resultTerm = try_1_0.instance.invoke(observer.getRuntime().getCompiledContext(),
+						resultTerm, concat_strings_0_0.instance);
+			} catch (InterpreterErrorExit e) {
 				observer.reportRewritingFailed();
-				Environment.logException("Builder failed:\n" + observer.getLog());
-				if (!observer.isUpdateStarted())
-					observer.asyncUpdate(editor.getParseController());
-				openError(editor, "Builder failed (see error log)");
-				return;
+				Environment.logException("Builder failed:\n" + observer.getLog(), e);
+				if (editor.getDescriptor().isDynamicallyLoaded()) StrategoConsole.activateConsole();
+				openError(editor, e.getMessage());
+			} catch (UndefinedStrategyException e) {
+				reportException(editor, e);
+			} catch (InterpreterExit e) {
+				reportException(editor, e);
+			} catch (InterpreterException e) {
+				reportException(editor, e);
+			} catch (RuntimeException e) {
+				reportException(editor, e);
 			}
-	
-			if (isTermAppl(resultTerm) && "None".equals(TermReader.cons(resultTerm))) {
-				return;
-			} else if (!isTermTuple(resultTerm) || !isTermString(termAt(resultTerm, 0))) {
-				Environment.logException("Illegal builder result (must be a filename/string tuple)");
-				openError(editor, "Illegal builder result (must be a filename/string tuple): " + resultTerm);
-			}
-
-			IStrategoTerm filenameTerm = termAt(resultTerm, 0);
-			String filename = asJavaString(filenameTerm);
-			
-			resultTerm = termAt(resultTerm, 1);
-			resultTerm = try_1_0.instance.invoke(observer.getRuntime().getCompiledContext(),
-					resultTerm, concat_strings_0_0.instance);
-			String result = isTermString(resultTerm)
+		}
+		
+		if (resultTerm != null && filename != null) {
+			try {
+				String result = isTermString(resultTerm)
 					? asJavaString(resultTerm)
 					: ppATerm(resultTerm);
-			IFile file = createFile(editor, filename, result);
-			// TODO: if not persistent, create IEditorInput from result String
-			if (openEditor) {
-				IEditorPart target = openEditor(file, realTime);
-				if (realTime)
-					StrategoBuilderListener.addListener(editor.getEditor(), target, file, getCaption(), node);
+				IFile file = createFile(editor, filename, result);
+				// TODO: if not persistent, create IEditorInput from result String
+				if (openEditor) {
+					IEditorPart target = openEditor(file, realTime);
+					if (realTime)
+						StrategoBuilderListener.addListener(editor.getEditor(), target, file, getCaption(), node);
+				}
+			} catch (CoreException e) {
+				Environment.logException("Builder failed", e);
+				openError(editor, "Builder failed (see error log)");
 			}
-		} catch (CoreException e) {
-			Environment.logException("Builder failed", e);
-			openError(editor, "Builder failed (see error log)");
-		} catch (InterpreterErrorExit e) {
-			observer.reportRewritingFailed();
-			Environment.logException("Builder failed:\n" + observer.getLog(), e);
-			if (editor.getDescriptor().isDynamicallyLoaded()) StrategoConsole.activateConsole();
-			openError(editor, e.getMessage());
-		} catch (UndefinedStrategyException e) {
-			reportException(editor, e);
-		} catch (InterpreterExit e) {
-			reportException(editor, e);
-		} catch (InterpreterException e) {
-			reportException(editor, e);
-		} catch (RuntimeException e) {
-			reportException(editor, e);
 		}
+
 	}
 
 	private String ppATerm(IStrategoTerm term) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-23 15:20:11 UTC (rev 20292)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-23 15:23:41 UTC (rev 20293)
@@ -67,8 +67,6 @@
 	
 	private final AstMessageHandler messages = new AstMessageHandler(AstMessageHandler.ANALYSIS_MARKER_TYPE);
 	
-	private final Object asyncUpdateSyncRoot = new Object();
-	
 	private HybridInterpreter runtime;
 	
 	private Job asyncLastBuildJob;
@@ -97,6 +95,10 @@
 	public AstMessageHandler getMessages() {
 		return messages;
 	}
+	
+	public Object getSyncRoot() {
+		return Environment.getSyncRoot(); // TODO syncRoot field; ?? deadlocky ??
+	}
 
 	public String getLog() {
 		return ((EditorIOAgent) runtime.getIOAgent()).getLog().trim();
@@ -128,7 +130,7 @@
 	private void initRuntime(IProgressMonitor monitor) {
 		if (runtime == null) {
 			Debug.startTimer();
-			runtime = Environment.createInterpreter();
+			runtime = Environment.createInterpreter(true);
 			runtime.init();
 			Debug.stopTimer("Created new Stratego runtime instance");
 			try {
@@ -172,22 +174,6 @@
 		} catch (IOException e) {
 			Environment.logException("Error loading compiler service providers " + jars, e);
 		}
-		/*
-		try {
-			URL[] classpath = new URL[jars.size()];
-			for (int i = 0; i < classpath.length; i++) {
-				classpath[i] = descriptor.getBasePath().append(jars.get(i)).toFile().toURL();
-			}
-			
-			ClassLoader loader = new URLClassLoader(classpath, libstratego_lib.class.getClassLoader());
-			Class<?> mainClass = loader.loadClass("trans.Main");
-			Method registerer = mainClass.getMethod("registerInterop", IContext.class, Context.class);
-			registerer.invoke(null, runtime.getContext(), runtime.getCompiledContext());
-		
-		} catch (Exception e) {
-			Environment.logException("Error loading compiler service providers " + jars, e);
-		}
-		*/
 	}
 
 	/**
@@ -196,7 +182,7 @@
 	public void asyncUpdate(final IParseController parseController) {
 		isUpdateStarted = true;
 		
-		synchronized (asyncUpdateSyncRoot) {
+		synchronized (getSyncRoot()) {
 			if (asyncLastBuildJob != null)
 				asyncLastBuildJob.cancel();
 			
@@ -222,7 +208,7 @@
 		IStrategoAstNode ast = (IStrategoAstNode) parseController.getCurrentAst();
 		IStrategoTerm feedback = null;
 		
-		synchronized (Environment.getSyncRoot()) {
+		synchronized (getSyncRoot()) {
 			if (runtime == null)
 				init(monitor);
 
@@ -230,24 +216,25 @@
 				return;
 			
 			feedback = invokeSilent(feedbackFunction, ast.getResource(), makeInputTerm(ast, false));
-		}
 
-		if (feedback == null) {
-			reportRewritingFailed();
-			String log = getLog();
-			Environment.logException(log.length() == 0 ? "Analysis failed" : "Analysis failed:\n" + log);
-			messages.clearMarkers(ast.getResource());
-			messages.addMarkerFirstLine(ast.getResource(), "Analysis failed (see error log)", IMarker.SEVERITY_ERROR);
-			messages.commitChanges();
-		} else if (!monitor.isCanceled()) {
-			// TODO: figure out how this was supposed to be synchronized
-			// synchronized (feedback) {
-			presentToUser(ast.getResource(), feedback);
-			// }
+			if (feedback == null) {
+				reportRewritingFailed();
+				String log = getLog();
+				Environment.logException(log.length() == 0 ? "Analysis failed" : "Analysis failed:\n" + log);
+				messages.clearMarkers(ast.getResource());
+				messages.addMarkerFirstLine(ast.getResource(), "Analysis failed (see error log)", IMarker.SEVERITY_ERROR);
+				messages.commitChanges();
+			} else if (!monitor.isCanceled()) {
+				// TODO: figure out how this was supposed to be synchronized
+				// synchronized (feedback) {
+				presentToUser(ast.getResource(), feedback);
+				// }
+			}
 		}
 	}
 
 	public void reportRewritingFailed() {
+		assert Thread.holdsLock(getSyncRoot());
 		StackTracer trace = runtime.getContext().getStackTracer();
 		runtime.getIOAgent().getOutputStream(IOAgent.CONST_STDERR).println(
 				trace.getTraceDepth() != 0 ? "rewriting failed, trace:" : "rewriting failed");
@@ -273,9 +260,11 @@
 	*/
 
 	private void presentToUser(IResource resource, IStrategoTerm feedback) {
+		assert Thread.holdsLock(getSyncRoot());
 		assert feedback != null;
-		// UNDONE: messages.clearAllMarkers();
+
 		// TODO: use tracking io agent to find out what to clear
+		// UNDONE: messages.clearAllMarkers();
 		messages.clearMarkers(resource);
 
 		try {
@@ -300,6 +289,8 @@
 	}
 	
 	private final void feedbackToMarkers(IResource resource, IStrategoList feedbacks, int severity) {
+		assert Thread.holdsLock(getSyncRoot());
+		
 		Context context = runtime.getCompiledContext();
 		sdf2imp.init(context);
 		feedbacks = (IStrategoList) postprocess_feedback_results_0_0.instance.invoke(context, feedbacks);
@@ -356,7 +347,7 @@
 	public IStrategoTerm invoke(String function, IStrategoTerm term, IResource resource)
 			throws UndefinedStrategyException, InterpreterErrorExit, InterpreterExit, InterpreterException {
 		
-		synchronized (Environment.getSyncRoot()) {
+		synchronized (getSyncRoot()) {
 			if (runtime == null) init(new NullProgressMonitor());
 			if (runtime == null) return null;
 			
@@ -366,7 +357,7 @@
 			
 			runtime.setCurrent(term);
 			IPath path = resource.getLocation();
-			initInterpreterPath(path.removeLastSegments(1));
+			initRuntimePath(path.removeLastSegments(1));
 
 			((LoggingIOAgent) runtime.getIOAgent()).clearLog();
 			boolean success = runtime.invoke(function);
@@ -404,11 +395,14 @@
 			Environment.logException("Runtime exited when evaluating strategy " + function, e);
 		} catch (UndefinedStrategyException e) {
 			// Note that this condition may also be reached when the semantic service hasn't been loaded yet
+			runtime.getIOAgent().getOutputStream(IOAgent.CONST_STDERR).println("Internal error: strategy does not exist: " + function);
 			Environment.logException("Strategy does not exist: " + function, e);
 		} catch (InterpreterException e) {
+			runtime.getIOAgent().getOutputStream(IOAgent.CONST_STDERR).println("Internal error evaluating " + function + " (see error log)");
 			Environment.logException("Internal error evaluating strategy " + function, e);
 			if (descriptor.isDynamicallyLoaded()) StrategoConsole.activateConsole();
 		} catch (RuntimeException e) {
+			runtime.getIOAgent().getOutputStream(IOAgent.CONST_STDERR).println("Internal error evaluating " + function + " (see error log)");
 			Environment.logException("Internal error evaluating strategy " + function, e);
 			if (descriptor.isDynamicallyLoaded()) StrategoConsole.activateConsole();
 		}
@@ -427,7 +421,9 @@
 		}
 	}
 	
-	private void initInterpreterPath(IPath workingDir) {
+	private void initRuntimePath(IPath workingDir) {
+		assert Thread.holdsLock(getSyncRoot());
+		
 		try {
 			runtime.getIOAgent().setWorkingDir(workingDir.toOSString());
 			((EditorIOAgent) runtime.getIOAgent()).setDescriptor(descriptor);
@@ -444,6 +440,8 @@
 	}
 	
 	public HybridInterpreter getRuntime() {
+		assert Thread.holdsLock(getSyncRoot());
+		
 		return runtime;
 	}
 



From L.C.L.Kats at tudelft.nl  Mon Nov 23 16:30:20 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 23 Nov 2009 15:30:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20294 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle
	org.strategoxt.imp.runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter
Message-ID: <200911231530.nANFUK7r028529@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-23 15:30:19 +0000 (Mon, 23 Nov 2009)
New Revision: 20294

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20294&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeParent.java
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeAppl.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeInt.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeTuple.java

Log:
Refactored the WrappedAstNode term library for better origin tracking support.
Now also handles origin tracking for child nodes transformed within an 'all.'

Example:

  main = all(R)
  
  R :
    ForElem(x, y, Var(z)) -> ForElem(x, y, Var(z'))
    with
      z' := <R2> z

Previously, origin information was only added to the newly constructed ForElem/4 term. Subterms x and y already had origin information. The new Var/1 term was ignored and lost its origin.

With the new changes, Var(z') now gets the origin of Var(z), as the ForElem/4 parent nodes have the same constructor name and arity.


Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	2009-11-23 15:23:41 UTC (rev 20293)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -135,7 +135,7 @@
 			: null;
 	}
 
-	private boolean invoke(Context context, String command, IStrategoTerm[] argList) throws StrategoException {
+	private boolean invoke(Context context, String command, IStrategoTerm[] argList) {
 		String[] commandArgs = SSL_EXT_call.toCommandArgs(binaryPath + command, argList);
 		IOAgent io = context.getIOAgent();
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch	2009-11-23 15:23:41 UTC (rev 20293)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch	2009-11-23 15:30:19 UTC (rev 20294)
@@ -14,7 +14,7 @@
 <booleanAttribute key="includeOptional" value="true"/>
 <stringAttribute key="location" value="${workspace_loc}/../runtime-spoofax-imp"/>
 <stringAttribute key="org.eclipse.debug.core.source_locator_id" value="org.eclipse.pde.ui.launcher.PDESourceLookupDirector"/>
-<stringAttribute key="org.eclipse.debug.core.source_locator_memento" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;sourceLookupDirector&gt;&#10;&lt;sourceContainers duplicates=&quot;false&quot;&gt;&#10;&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;folder nest=&amp;quot;false&amp;quot; path=&amp;quot;/webdsl/src/bin&amp;quot;/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.debug.core.containerType.folder&quot;/&gt;&#10;&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;default/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.debug.core.containerType.default&quot;/&gt;&#10;&lt;/sourceContainers&gt;&#10;&lt;/sourceLookupDirector&gt;&#10;"/>
+<stringAttribute key="org.eclipse.debug.core.source_locator_memento" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;sourceLookupDirector&gt;&#10;&lt;sourceContainers duplicates=&quot;false&quot;&gt;&#10;&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;folder nest=&amp;quot;false&amp;quot; path=&amp;quot;/webdsl/src/bin&amp;quot;/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.debug.core.containerType.folder&quot;/&gt;&#10;&lt;container memento=&quot;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;folder nest=&amp;quot;false&amp;quot; path=&amp;quot;/nwl/editor/java&amp;quot;/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.debug.core.containerType.folder&quot;/&gt;&#10;&lt;container memento=&quot;&amp;lt;?xml !
 version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&amp;#10;&amp;lt;default/&amp;gt;&amp;#10;&quot; typeId=&quot;org.eclipse.debug.core.containerType.default&quot;/&gt;&#10;&lt;/sourceContainers&gt;&#10;&lt;/sourceLookupDirector&gt;&#10;"/>
 <listAttribute key="org.eclipse.debug.ui.favoriteGroups">
 <listEntry value="org.eclipse.debug.ui.launchGroup.debug"/>
 <listEntry value="org.eclipse.debug.ui.launchGroup.run"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-11-23 15:23:41 UTC (rev 20293)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -9,8 +9,10 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -51,8 +53,10 @@
 
 	private final Set<IMarker> activeMarkers = new HashSet<IMarker>();
 	
-	private final Map<MarkerAttributes, IMarker> markersToDelete = new HashMap<MarkerAttributes, IMarker>();
+	private final Map<MarkerAttributes, IMarker> markersToDeleteOrReuse = new HashMap<MarkerAttributes, IMarker>();
 	
+	private final List<IMarker> markersToDelete = new ArrayList<IMarker>();
+	
 	public AstMessageHandler(String markerType) {
 		this.markerType = markerType;
 	}
@@ -109,7 +113,7 @@
 			
 			MarkerAttributes attributes = new MarkerAttributes(left, right, message, severity, PRIORITY_HIGH, false);
 			
-			IMarker marker = markersToDelete.remove(attributes); // reuse existing
+			IMarker marker = markersToDeleteOrReuse.remove(attributes); // reuse existing
 			if (marker == null)
 				marker = file.createMarker(markerType);
 			marker.setAttributes(attributes.getAttributes(), attributes.getValues());
@@ -200,9 +204,10 @@
 		synchronized (activeMarkers) {
 			for (IMarker marker : activeMarkers) {
 				try {
-					markersToDelete.put(new MarkerAttributes(marker), marker);
+					markersToDeleteOrReuse.put(new MarkerAttributes(marker), marker);
 					for (IMarker otherMarker : marker.getResource().findMarkers(markerType, true, 0)) {
-						markersToDelete.put(new MarkerAttributes(otherMarker), otherMarker);
+						IMarker dupe = markersToDeleteOrReuse.put(new MarkerAttributes(otherMarker), otherMarker);
+						if (dupe != null) markersToDelete.add(dupe);
 					}
 				} catch (CoreException e) {
 					Environment.logException("Unable find related markers: " + marker, e);
@@ -221,7 +226,8 @@
 		try {
 			IMarker[] markers = file.findMarkers(markerType, true, 0);
 			for (IMarker marker : markers) {
-				markersToDelete.put(new MarkerAttributes(marker), marker);
+				IMarker dupe = markersToDeleteOrReuse.put(new MarkerAttributes(marker), marker);
+				if (dupe != null) markersToDelete.add(dupe);
 			}
 		} catch (CoreException e) {
 			Environment.logException("Unable to clear existing markers for file:" + file.getName(), e);
@@ -237,13 +243,21 @@
 	 */
 	public void commitChanges() {
 		try {
-			for (IMarker marker : markersToDelete.values()) {
+			for (IMarker marker : markersToDeleteOrReuse.values()) {
 				try {
 					marker.delete();
 				} catch (CoreException e) {
 					Environment.logException("Unable to clear existing marker", e);
 				}
 			}
+			markersToDeleteOrReuse.clear();
+			for (IMarker marker : markersToDelete) {
+				try {
+					marker.delete();
+				} catch (CoreException e) {
+					Environment.logException("Unable to clear existing marker", e);
+				}
+			}
 			markersToDelete.clear();
 		} catch (RuntimeException e) {
 			Environment.logException("Unable to clear markers", e);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2009-11-23 15:23:41 UTC (rev 20293)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -33,8 +33,10 @@
 	
 	protected final ArrayList<AstNode> children;
 	
-	private final String constructor, sort;
+	private final String sort;
 	
+	private String constructor;
+	
 	private IStrategoTerm term;
 	
 	private IToken leftToken, rightToken;
@@ -50,6 +52,10 @@
 		return constructor;
 	}
 	
+	public void setConstructor(String constructor) {
+		this.constructor = constructor;
+	}
+	
 	public String getSort() {
 		return sort;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	2009-11-23 15:23:41 UTC (rev 20293)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -20,6 +20,8 @@
 	
 	String getConstructor();
 	
+	void setConstructor(String constructor);
+	
 	String getSort();
 	
 	IResource getResource();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNode.java	2009-11-23 15:23:41 UTC (rev 20293)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNode.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -4,25 +4,23 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.InlinePrinter;
 import org.strategoxt.lang.terms.StrategoTerm;
+import org.strategoxt.lang.terms.TermFactory;
 
 public abstract class WrappedAstNode extends StrategoTerm implements IWrappedAstNode, IStrategoTerm, Cloneable {
 	
 	private final IStrategoAstNode node;
 	
-	private final WrappedAstNodeFactory factory;
-	
+	/**
+	 * Gets the node or origin node associated with this term.
+	 */
 	public final IStrategoAstNode getNode() {
 		return node;
 	}
 	
-	public WrappedAstNodeFactory getFactory() {
-		return factory;
-	}
-	
-	protected WrappedAstNode(WrappedAstNodeFactory factory, IStrategoAstNode node) {
+	protected WrappedAstNode(IStrategoAstNode node) {
 		super(null);
-		this.factory = factory;
 		this.node = node;
+		assert node != null;
 	}
 	
 	public final int getStorageType() {
@@ -32,22 +30,18 @@
 	}
 
 	public IStrategoTerm[] getAllSubterms() {
-		IStrategoTerm[] result = new IStrategoTerm[getSubtermCount()];
-		int size = getSubtermCount();
-		
-		for (int i = 0; i < size; i++) {
-			result[i] = getSubterm(i);
-		}
-		
-		return result;
+		assert node.getChildren().size() == 0;
+		return TermFactory.EMPTY;
 	}
 
 	public IStrategoTerm getSubterm(int index) {
-		return factory.wrap((IStrategoAstNode) node.getChildren().get(index));
+		assert node.getChildren().size() == 0;
+        throw new IndexOutOfBoundsException();
 	}
 
 	public int getSubtermCount() {
-		return node.getChildren().size();
+		assert node.getChildren().size() == 0;
+		return 0;
 	}
 	
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeAppl.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeAppl.java	2009-11-23 15:23:41 UTC (rev 20293)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeAppl.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -11,19 +11,20 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  * @author Karl Trygve Kalleberg <karltk add strategoxt.org>
  */
-public class WrappedAstNodeAppl extends WrappedAstNode implements IStrategoAppl {
+public class WrappedAstNodeAppl extends WrappedAstNodeParent implements IStrategoAppl {
     
 	private final IStrategoConstructor constructor;
-
-	public IStrategoConstructor getConstructor() {
-		return constructor;
-	}
 	
 	protected WrappedAstNodeAppl(WrappedAstNodeFactory factory, IStrategoAstNode node) {
-		super(factory, node);
+		super(node);
 		
 		constructor = factory.makeConstructor(node.getConstructor(), node.getChildren().size());
+		node.setConstructor(constructor.getName()); // ensure shared string is used
 	}
+
+	public IStrategoConstructor getConstructor() {
+		return constructor;
+	}
 	
 	public final IStrategoTerm[] getArguments() {
 		return getAllSubterms();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java	2009-11-23 15:23:41 UTC (rev 20293)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -1,5 +1,7 @@
 package org.strategoxt.imp.runtime.stratego.adapter;
 
+import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -21,19 +23,21 @@
 	
 	public IStrategoTerm wrap(IStrategoAstNode node) {
 		if(node instanceof IntAstNode) {
-			return new WrappedAstNodeInt(this, (IntAstNode) node);
-		} else if(node instanceof StringAstNode) {
-			return new WrappedAstNodeString(this, (StringAstNode) node);
+			return new WrappedAstNodeInt(node);
+		} else if (node instanceof StringAstNode) {
+			return new WrappedAstNodeString(node);
 		} else if (node instanceof ListAstNode) {
-			return new WrappedAstNodeList(this, node);
+			return new WrappedAstNodeList(this, node, 0);
 		} else {
+			// TODO: ensure maximal sharing of node constructors
+			//       (term constructors are also maximally shared!)
 			return "()".equals(node.getConstructor())
-				? new WrappedAstNodeTuple(this, node)
+				? new WrappedAstNodeTuple(node)
 				: new WrappedAstNodeAppl(this, node);
 		}
 	}
 	
-	protected WrappedAstNodeList wrapList(IStrategoAstNode node, int offset) {
+	protected IStrategoList wrapList(IStrategoAstNode node, int offset) {
 		return new WrappedAstNodeList(this, node, offset);
 	}
 	
@@ -56,6 +60,8 @@
 	public IStrategoAppl replaceAppl(IStrategoConstructor constructor, IStrategoTerm[] kids,
 			IStrategoAppl oldTerm) {
 		
+		// TODO: Optimize - create a WrappedAstNodeAppl with initialized kids field instead
+		//       (but ensure it maintains hte WrappedAstNodeLink.ensureLinks behavior)
 		IStrategoAppl result = makeAppl(constructor, ensureLinks(kids, oldTerm));
 		
 		return (IStrategoAppl) ensureLink(result, oldTerm);
@@ -63,30 +69,95 @@
 	
 	@Override
 	public IStrategoTuple replaceTuple(IStrategoTerm[] kids, IStrategoTuple old) {
+		// TODO: Optimize - create a WrappedAstNodeTuple with initialized kids field instead
+		//       (but ensure it maintains hte WrappedAstNodeLink.ensureLinks behavior)
 		return (IStrategoTuple) ensureLink(makeTuple(ensureLinks(kids, old)), old);
 	}
 	
 	@Override
-	public IStrategoList replaceList(IStrategoTerm[] kids, IStrategoList old) {
-		return (IStrategoList) ensureLink(makeList(ensureLinks(kids, old)), old);
+	public IStrategoList replaceList(IStrategoTerm[] terms, IStrategoList old) {
+		// TODO: Optimize - create a WrappedAstNodeList with initialized kids field instead
+		//       (but ensure it maintains hte WrappedAstNodeLink.ensureLinks behavior)
+		// return (IStrategoList) ensureLink(makeList(ensureLinks(kids, old)), old);
+		assert terms.length == old.getSubtermCount();
+		return replaceList(terms, 0, old);
 	}
 
-	private IStrategoTerm[] ensureLinks(IStrategoTerm[] kids, IStrategoTerm oldTerm) {
+	/**
+	 * @param origin
+	 *            The origin term. For lists, this must be the exact
+	 *            corresponding term with the same offset. Calling
+	 *            {@link IStrategoAstNode#getTerm()} won't suffice.
+	 */
+	public IStrategoTerm makeLink(IStrategoTerm term, IWrappedAstNode origin) {
+		if (term.getTermType() == LIST && term.getSubtermCount() == origin.getSubtermCount()
+				&& origin.getTermType() == LIST) {
+			return replaceList((IStrategoList) term, (IStrategoList) origin);
+		} else {
+			return new WrappedAstNodeLink(this, term, origin);
+		}
+	}
+	
+	private IStrategoList replaceList(IStrategoTerm[] terms, int index, IStrategoList old) {
+		if (index == terms.length) {
+			assert old.isEmpty();
+			return EMPTY_LIST; // we don't bother linking empty lists	 
+		} else {
+			IStrategoTerm head = ensureLink(terms[index], old.head());
+			IStrategoList tail = replaceList(terms, index + 1, old.tail());
+			if (old instanceof WrappedAstNodeList) {
+				WrappedAstNodeList oldList = (WrappedAstNodeList) old;
+				return new WrappedAstNodeList(oldList.getNode(), oldList.getOffset(), head, tail);
+			} else {
+				assert !(old instanceof IWrappedAstNode);
+				return makeListCons(head, tail);
+			}
+		}
+	}
+	
+	private IStrategoList replaceList(IStrategoList terms, IStrategoList old) {
+		if (terms.isEmpty()) {
+			assert old.isEmpty();
+			return EMPTY_LIST; // we don't bother linking empty lists	 
+		} else {
+			IStrategoTerm head = ensureLink(terms.head(), old.head());
+			IStrategoList tail = replaceList(terms.tail(), old.tail());
+			if (old instanceof WrappedAstNodeList) {
+				WrappedAstNodeList oldList = (WrappedAstNodeList) old;
+				return new WrappedAstNodeList(oldList.getNode(), oldList.getOffset(), head, tail);
+			} else {
+				assert !(old instanceof IWrappedAstNode);
+				return makeListCons(head, tail);
+			}
+		}
+	}
+	
+	protected IStrategoTerm[] ensureLinks(IStrategoTerm[] kids, IStrategoTerm oldTerm) {
+		assert oldTerm.getTermType() != LIST; // has an expensive getAllSubterms()
+		IStrategoTerm[] oldKids = oldTerm.getAllSubterms();
+		if (oldKids == kids) return kids; // no changes; happens with interpreter's all
+		for (int i = 0; i < kids.length; i++) {
+			kids[i] = ensureLink(kids[i], oldTerm.getSubterm(i));
+		}
+		return kids;
+		/* Before opimization (avoid array copy and exit if kids == oldTerm.getAllSubterms())
 		IStrategoTerm[] linkedKids = new IStrategoTerm[kids.length];
 		
 		for (int i = 0; i < kids.length; i++) {
 			linkedKids[i] = ensureLink(kids[i], oldTerm.getSubterm(i));
 		}
 		return linkedKids;
+		*/
 	}
 	
-	private IStrategoTerm ensureLink(IStrategoTerm term, IStrategoTerm oldTerm) {
+	protected IStrategoTerm ensureLink(IStrategoTerm term, IStrategoTerm oldTerm) {
 		if (term instanceof IWrappedAstNode) {
 			return term;
 		} else if (oldTerm instanceof IWrappedAstNode) {
-			return new WrappedAstNodeLink(this, term, ((IWrappedAstNode) oldTerm).getNode());
+			return makeLink(term, (IWrappedAstNode) oldTerm);
 		} else {
 			// TODO: Add a link to the parent node for children that do not have tracking info?
+			//       probably not a good idea
 			return term;
 		}
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeInt.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeInt.java	2009-11-23 15:23:41 UTC (rev 20293)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeInt.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -6,22 +6,16 @@
 import org.strategoxt.imp.runtime.parser.ast.IntAstNode;
 
 public class WrappedAstNodeInt extends WrappedAstNode implements IStrategoInt {
-
-	private final IntAstNode wrappee;
 	
-	protected WrappedAstNodeInt(WrappedAstNodeFactory factory, IntAstNode node) {
-		super(factory, node);
-		this.wrappee = node;
+	protected WrappedAstNodeInt(IStrategoAstNode node) {
+		super(node);
+		assert node instanceof IntAstNode;
 	}
 
 	public int intValue() {
-		return wrappee.getValue();
+		return ((IntAstNode) getNode()).getValue();
 	}
 	
-	public IStrategoTerm[] getArguments() {
-		return getAllSubterms();
-	}
-	
 	@Override
 	protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
 		return second.getTermType() == IStrategoTerm.INT
@@ -30,7 +24,7 @@
 	}
 
     public void prettyPrint(ITermPrinter pp) {
-    	pp.print("" + wrappee.getValue());
+    	pp.print(String.valueOf(intValue()));
     	printAnnotations(pp);
     }
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java	2009-11-23 15:23:41 UTC (rev 20293)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -16,16 +16,28 @@
 /**
  * A wrapper class linking any {@link IStrategoTerm} to an {@link IAst} node.
  * 
+ * @see WrappedAstNodeFactory#makeLink(IStrategoTerm, IWrappedAstNode)
+ * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class WrappedAstNodeLink extends WrappedAstNode implements IWrappedAstNode, IStrategoTerm, IStrategoList, IStrategoAppl, IStrategoTuple, IStrategoInt, IStrategoReal, IStrategoString {
+public class WrappedAstNodeLink extends WrappedAstNodeParent implements IWrappedAstNode, IStrategoTerm, IStrategoList, IStrategoAppl, IStrategoTuple, IStrategoInt, IStrategoReal, IStrategoString {
 	
+	private final WrappedAstNodeFactory factory;
+	
+	private final IWrappedAstNode origin; // = node + offset for lists
+	
 	private final IStrategoTerm wrapped;
 	
-	public WrappedAstNodeLink(WrappedAstNodeFactory factory, IStrategoTerm term, IStrategoAstNode node) {
-		super(factory, node);
+	protected WrappedAstNodeLink(WrappedAstNodeFactory factory, IStrategoTerm term, IWrappedAstNode origin) {
+		super(origin.getNode());
+		this.factory = factory;
 		this.wrapped = term;
-		assert !(wrapped instanceof IWrappedAstNode);
+		this.origin = origin;
+		
+		assert !(wrapped instanceof IWrappedAstNode) : "Already wrapped";
+		assert wrapped.getTermType() != LIST || wrapped.getSubtermCount() == 0
+				|| wrapped.getSubtermCount() != origin.getSubtermCount()
+				: "Track lists using WrappedAstNodeList / WrappedAstNOdeFactory.makeLink()";
 	}
 	
 	public final IStrategoTerm getWrapped() {
@@ -37,8 +49,10 @@
 	@Override
 	protected WrappedAstNodeLink getAnnotatedWith(IStrategoList annotations) {
 		// To get a working equals() and hashCode() impl, we need to annotate the wrapped term
-		IStrategoTerm wrapped = getFactory().annotateTerm(getWrapped(), annotations);
-		return new WrappedAstNodeLink(getFactory(), wrapped, getNode());
+		IStrategoTerm wrapped = factory.annotateTerm(getWrapped(), annotations);
+		WrappedAstNodeLink result = new WrappedAstNodeLink(factory, wrapped, origin);
+		result.subterms = subterms;
+		return result;
 	}
 	
 	// Common accessors
@@ -55,7 +69,7 @@
 		if (annotations.isEmpty()) {
 			return wrapped.match(second);
 		} else {
-			second = getFactory().annotateTerm(second, TermFactory.EMPTY_LIST);
+			second = factory.annotateTerm(second, TermFactory.EMPTY_LIST);
 			return wrapped.match(second);
 		}
 	}
@@ -67,12 +81,69 @@
 
 	@Override
 	public IStrategoTerm[] getAllSubterms() {
-		return wrapped.getAllSubterms();
+		if (subterms == null)
+			subterms = ensureChildLinks(wrapped.getAllSubterms());
+		return subterms;
 	}
 
+	/**
+	 * Ensures (lazy) origin tracking links for subterms.
+	 */
+	private IStrategoTerm[] ensureChildLinks(IStrategoTerm[] kids) {
+		if (!isCorrespondingTerm(kids))
+			return kids;
+		
+		for (int i = 0; i < kids.length; i++) {
+			if (!(kids[i] instanceof IWrappedAstNode)) {
+				IStrategoTerm[] newKids = new IStrategoTerm[kids.length];
+				System.arraycopy(kids, 0, newKids, 0, i);
+				newKids[i] = ensureChildLink(kids[i], i);
+				while (++i < kids.length) {
+					newKids[i] = ensureChildLink(kids[i], i);
+				}
+				return newKids;
+			}
+		}
+		return kids;
+	}
+	
+	private IStrategoTerm ensureChildLink(IStrategoTerm kid, int index) {
+		if (kid instanceof IWrappedAstNode) {
+			return kid;
+		} else {
+			return factory.ensureLink(kid, origin.getSubterm(index));
+		}
+	}
+	
+	/**
+	 * Tests if this node corresponds in shape (constructor/nr of subterms) to its origin node.
+	 */
+	private boolean isCorrespondingTerm(IStrategoTerm[] kids) {
+		int termType = wrapped.getTermType();
+		if (termType == LIST) {
+			// List with inequal amount of kids; other lists are WrappedAstNodeLists not WrappedAstNodeLinks
+			return false;
+		}
+		
+		if (origin.getTermType() != termType || origin.getSubtermCount() != kids.length)
+			return false;
+		
+		if (termType == APPL) {
+			if (((IStrategoAppl) wrapped).getConstructor() != ((IStrategoAppl) origin).getConstructor()) {
+				assert !((IStrategoAppl) wrapped).getConstructor().equals(((IStrategoAppl) origin).getConstructor())
+						: "Maximally shared constructors are assumed";
+				return false;				
+			}
+		} else if (termType != TUPLE) {
+			throw new IllegalStateException("Unexpected type of term with kids: " + this);
+		}
+
+		return true;
+	}
+
 	@Override
 	public IStrategoTerm getSubterm(int index) {
-		return wrapped.getSubterm(index);
+		return getAllSubterms()[index];
 	}
 
 	@Override
@@ -95,7 +166,7 @@
 	}
 
 	public final IStrategoTerm[] getArguments() {
-		return wrapped.getAllSubterms();
+		return getAllSubterms();
 	}
 	
 	// Specialized accessors

Deleted: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java	2009-11-23 15:23:41 UTC (rev 20293)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -1,140 +0,0 @@
-package org.strategoxt.imp.runtime.stratego.adapter;
-
-import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermPrinter;
-import org.strategoxt.imp.runtime.Environment;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- * @author Karl Trygve Kalleberg <karltk add strategoxt.org>
- */
-public class WrappedAstNodeList extends WrappedAstNode implements IStrategoList {
-	
-	private final int offset;
-	
-	private WrappedAstNodeList tail;
-	
-	protected WrappedAstNodeList(WrappedAstNodeFactory factory, IStrategoAstNode node) {
-		this(factory, node, 0);
-	}
-
-	protected WrappedAstNodeList(WrappedAstNodeFactory factory, IStrategoAstNode node, int offset) {
-		super(factory, node);
-		this.offset = offset;
-	}
-
-	@Override
-	protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
-        if(second.getTermType() != IStrategoTerm.LIST)
-            return false;
-        
-        final IStrategoList snd = (IStrategoList) second;
-        if (size() != snd.size())
-            return false;
-        
-        if (!isEmpty()) {
-        	IStrategoTerm head = head();
-        	IStrategoTerm head2 = snd.head();
-        	if (head != head2 && !head.match(head2))
-        		return false;
-        	
-        	IStrategoList tail = tail();
-        	IStrategoList tail2 = snd.tail();
-        
-	        for (IStrategoList cons = tail, cons2 = tail2; !cons.isEmpty(); cons = cons.tail(), cons2 = cons2.tail()) {
-	            IStrategoTerm consHead = cons.head();
-				IStrategoTerm cons2Head = cons2.head();
-				if (consHead != cons2Head && !consHead.match(cons2Head))
-	                return false;
-	        }
-        }
-        
-        IStrategoList annotations = getAnnotations();
-        IStrategoList secondAnnotations = second.getAnnotations();
-        return annotations == secondAnnotations || annotations.match(secondAnnotations);
-	}
-
-	public final IStrategoTerm get(int index) {
-		return getSubterm(index);
-	}
-	
-	@Override
-	public IStrategoTerm getSubterm(int index) {
-		return super.getSubterm(index + offset);
-	}
-
-	public final IStrategoTerm head() {
-		return getSubtermCount() == 0 ? null : get(0);
-	}
-
-	public final boolean isEmpty() {
-		return getSubtermCount() == 0;
-	}
-
-	public final int size() {
-		return getSubtermCount();
-	}
-	
-	@Override
-	public int getSubtermCount() {
-		return super.getSubtermCount() - offset;
-	}
-
-	public IStrategoList tail() {
-		if (tail != null) return tail;
-		if (getSubtermCount() == 0) return null;
-		tail = getFactory().wrapList(getNode(), offset + 1);
-		return tail;
-	}
-
-	public int getTermType() {
-		return LIST;
-	}
-
-	public void prettyPrint(ITermPrinter pp) {
-		int sz = size();
-		if (sz > 0) {
-			pp.println("[");
-			pp.indent(2);
-			get(0).prettyPrint(pp);
-			for (int i = 1; i < sz; i++) {
-				pp.print(",");
-				pp.nextIndentOff();
-				get(i).prettyPrint(pp);
-				pp.println("");
-			}
-			pp.println("");
-			pp.print("]");
-			pp.outdent(2);
-
-		} else {
-			pp.print("[]");
-		}
-		printAnnotations(pp);
-	}
-
-	@Override
-	public int hashFunction() {
-    	/* UNDONE: BasicStrategoTerm hash; should use cons/nil hash instead
-        long hc = 4787;
-        for (IStrategoList cur = this; !cur.isEmpty(); cur = cur.tail()) {
-            hc *= cur.head().hashCode();
-        }
-        return (int)(hc >> 2);
-        */
-		final int prime = 71;
-		int result = 1;
-		IStrategoTerm head = head();
-		result = prime * result + ((head == null) ? 0 : head.hashCode());
-		IStrategoList tail = tail();
-		result = prime * result + ((tail == null) ? 0 : tail.hashCode());
-		return result;
-	}
-
-	@Deprecated
-	public IStrategoList prepend(IStrategoTerm prefix) {
-		return Environment.getTermFactory().makeList(prefix, this);
-	}
-
-}

Copied: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java (from rev 20285, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -0,0 +1,190 @@
+package org.strategoxt.imp.runtime.stratego.adapter;
+
+import java.util.ArrayList;
+import java.util.NoSuchElementException;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Karl Trygve Kalleberg <karltk add strategoxt.org>
+ */
+public class WrappedAstNodeList extends WrappedAstNode implements IStrategoList {
+	
+	private final WrappedAstNodeFactory factory;
+	
+	private final int offset;
+	
+	private IStrategoTerm head;
+	
+	private IStrategoList tail;
+
+	/**
+	 * Creates a new WrappedAstNodeList with lazily initialized subterms.
+	 */
+	protected WrappedAstNodeList(WrappedAstNodeFactory factory, IStrategoAstNode node, int offset) {
+		super(node);
+		this.factory = factory;
+		this.offset = offset;
+	}
+
+	/**
+	 * Creates a new WrappedAstNodeList with the given head and tail.
+	 */
+	protected WrappedAstNodeList(IStrategoAstNode node, int offset, IStrategoTerm head, IStrategoList tail) {
+		super(node);
+		this.factory = null;
+		this.offset = offset;
+		this.head = head;
+		this.tail = tail;
+		assert getSubtermCount() == node.getChildren().size() - offset;
+	}
+
+	public final IStrategoTerm head() {
+		if (head == null) {
+			ArrayList children = getNode().getChildren();
+			head = ((IStrategoAstNode) children.get(offset)).getTerm();
+		}
+		return head;
+	}
+	
+	public IStrategoList tail() {
+		if (tail != null) return tail;
+		if (head != null && getSubtermCount() == 0) throw new NoSuchElementException();
+		tail = factory.wrapList(getNode(), offset + 1);
+		return tail;
+	}
+	
+	protected int getOffset() {
+		return offset;
+	}
+
+	@Override
+	protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        if(second.getTermType() != IStrategoTerm.LIST)
+            return false;
+        
+        final IStrategoList snd = (IStrategoList) second;
+        if (getSubtermCount() != snd.getSubtermCount())
+            return false;
+        
+        if (!isEmpty()) {
+        	IStrategoTerm head = head();
+        	IStrategoTerm head2 = snd.head();
+        	if (head != head2 && !head.match(head2))
+        		return false;
+        	
+        	IStrategoList tail = tail();
+        	IStrategoList tail2 = snd.tail();
+        
+	        for (IStrategoList cons = tail, cons2 = tail2; !cons.isEmpty(); cons = cons.tail(), cons2 = cons2.tail()) {
+	            IStrategoTerm consHead = cons.head();
+				IStrategoTerm cons2Head = cons2.head();
+				if (consHead != cons2Head && !consHead.match(cons2Head))
+	                return false;
+	        }
+        }
+        
+        IStrategoList annotations = getAnnotations();
+        IStrategoList secondAnnotations = second.getAnnotations();
+        return annotations == secondAnnotations || annotations.match(secondAnnotations);
+	}
+	
+	@Override
+	public IStrategoTerm[] getAllSubterms() {
+		if (tail == null) {
+			// Get children from origin node
+			ArrayList children = getNode().getChildren();
+			IStrategoTerm[] results = new IStrategoTerm[children.size() - offset];
+			for (int i = 0; i < results.length; i++) {
+				results[i] = ((IStrategoAstNode) children.get(i + offset)).getTerm();
+			}
+			return results;
+		} else {
+			// Get children from head and tail
+	        int size = size();
+	        IStrategoTerm[] clone = new IStrategoTerm[size];
+	        IStrategoList list = this;
+	        for (int i = 0; i < size; i++) {
+	            clone[i] = list.head();
+	            list = list.tail();
+	        }
+	        return clone;
+		}
+	}
+	
+	@Override
+	public IStrategoTerm getSubterm(int index) {
+		return ((IStrategoAstNode) getNode().getAllChildren().get(index + offset)).getTerm();
+	}
+	
+	@Override
+	public int getSubtermCount() {
+		return getNode().getChildren().size() - offset;
+	}
+
+	public final IStrategoTerm get(int index) {
+		return getSubterm(index);
+	}
+
+	public final boolean isEmpty() {
+		return head == null && getSubtermCount() == 0;
+	}
+
+	public final int size() {
+		return getSubtermCount();
+	}
+
+	public int getTermType() {
+		return LIST;
+	}
+
+	public void prettyPrint(ITermPrinter pp) {
+		if (head != null || getSubtermCount() > 0) {
+			pp.println("[");
+			pp.indent(2);
+			head().prettyPrint(pp);
+            for (IStrategoList cur = tail(); !cur.isEmpty(); cur = cur.tail()) {
+                pp.print(",");
+                pp.nextIndentOff();
+                cur.head().prettyPrint(pp);
+                pp.println("");
+            }
+			pp.println("");
+			pp.print("]");
+			pp.outdent(2);
+
+		} else {
+			pp.print("[]");
+		}
+		printAnnotations(pp);
+	}
+
+	@Override
+	public int hashFunction() {
+		final int prime = 71;
+		int result = 1;
+		IStrategoTerm head = this.head; 
+		if (head == null) {
+			ArrayList children = getNode().getChildren();
+			int size = children.size() - offset;
+			if (size == 0) return prime * prime * result;
+
+			head = ((IStrategoAstNode) children.get(offset)).getTerm();
+			result = prime * result + head.hashCode();
+		} else {
+			result = prime * result + head.hashCode();
+		}
+		IStrategoList tail = this.tail;
+		result = prime * result + (tail == null ? tail() : tail).hashCode();
+		return result;
+	}
+
+	@Deprecated
+	public IStrategoList prepend(IStrategoTerm prefix) {
+		throw new UnsupportedOperationException();
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeParent.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeParent.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeParent.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -0,0 +1,52 @@
+package org.strategoxt.imp.runtime.stratego.adapter;
+
+import java.util.ArrayList;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * A WrappedAstNode with children (more specifically, a tuple, appl, or link term). 
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public abstract class WrappedAstNodeParent extends WrappedAstNode {
+
+	IStrategoTerm[] subterms;
+	
+	protected WrappedAstNodeParent(IStrategoAstNode node) {
+		super( node);
+	}
+
+	@Override
+	public IStrategoTerm[] getAllSubterms() {
+		if (subterms != null) return subterms;
+		
+		IStrategoTerm[] result = new IStrategoTerm[getSubtermCount()];
+		int size = getSubtermCount();
+		ArrayList children = getNode().getChildren();
+		
+		
+		for (int i = 0; i < size; i++) {
+			result[i] = ((IStrategoAstNode) children.get(i)).getTerm();
+		}
+		
+		return subterms = result;
+	}
+
+	@Override
+	public IStrategoTerm getSubterm(int index) {
+		if (subterms == null) {
+			return ((IStrategoAstNode) getNode().getChildren().get(index)).getTerm();
+		} else {
+			if (-1 < index && index < subterms.length)
+				return subterms[index];
+			else
+				throw new IndexOutOfBoundsException("Index " + index + " of " + this);
+		}
+	}
+
+	@Override
+	public int getSubtermCount() {
+		return subterms != null ? subterms.length : getNode().getChildren().size();
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java	2009-11-23 15:23:41 UTC (rev 20293)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java	2009-11-23 15:30:19 UTC (rev 20294)
@@ -6,21 +6,15 @@
 import org.strategoxt.imp.runtime.parser.ast.StringAstNode;
 
 public class WrappedAstNodeString extends WrappedAstNode implements IStrategoString {
-
-	private final StringAstNode wrappee;
 	
-	protected WrappedAstNodeString(WrappedAstNodeFactory factory, StringAstNode node) {
-		super(factory, node);
-		this.wrappee = node;
+	protected WrappedAstNodeString(IStrategoAstNode node) {
+		super(node);

(35 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Mon Nov 23 17:01:00 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 23 Nov 2009 16:01:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20295 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/.settings
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms
	strc-java/trunk/java
Message-ID: <200911231601.nANG10e1029094@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-23 16:01:00 +0000 (Mon, 23 Nov 2009)
New Revision: 20295

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20295&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/.settings/org.eclipse.jdt.core.prefs
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/BindingInfo.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/All.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Build.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/ImportTerm.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/PrimT.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Seq.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/TermConverter.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
Minor interpreter fixes: now runs all STRJ(/STRC) unit tests, failing only at a couple of esoteric tests, but at least reporting an exception in those cases.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/.settings/org.eclipse.jdt.core.prefs
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/.settings/org.eclipse.jdt.core.prefs	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/.settings/org.eclipse.jdt.core.prefs	2009-11-23 16:01:00 UTC (rev 20295)
@@ -1,4 +1,4 @@
-#Thu Dec 11 14:36:48 CET 2008
+#Sat Nov 21 18:39:12 CET 2009
 eclipse.preferences.version=1
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
@@ -45,7 +45,7 @@
 org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
 org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
 org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
-org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
+org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=warning
 org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
 org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
 org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/BindingInfo.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/BindingInfo.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/BindingInfo.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -7,22 +7,19 @@
  */
 package org.spoofax.interpreter.core;
 
-import java.util.ArrayList;
-import java.util.List;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class BindingInfo {
-    List<Pair<VarScope, String>> bindings;
     
-    public BindingInfo() {
-        bindings = new ArrayList<Pair<VarScope,String>>();
-    }
+    final VarScope scope;
     
-    void add(VarScope scope, String varName) {
-        bindings.add(new Pair<VarScope, String>(scope, varName));
+    final String name;
+    
+    IStrategoTerm value;
+    
+    BindingInfo(VarScope scope, String name) {
+        this.scope = scope;
+        this.name = name;
     }
-
-    public List<Pair<VarScope, String>> getBindings() {
-        return bindings;
-    }
     
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -58,11 +58,7 @@
             throws InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
         
         StackTracer stackTracer = getContext().getStackTracer();
-        SDefT def = context.lookupSVar(cify(name) + "_0_0");
-        
-        if (def == null) {
-            def = context.lookupSVar(name);
-        }
+        SDefT def = lookupUncifiedSVar(name);
 
         if (def == null) {
             throw new UndefinedStrategyException("Definition '" + name + "' not found");
@@ -76,6 +72,19 @@
         else stackTracer.popOnFailure();
             
         return success;
+    }
+
+    protected SDefT lookupUncifiedSVar(String name) {
+        try {
+            SDefT def = context.lookupSVar(cify(name) + "_0_0");
+            
+            if (def == null) {
+                def = context.lookupSVar(name);
+            }
+            return def;
+        } catch (InterpreterException e) {
+            return null;
+        }
     }
     
     /**
Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -183,6 +183,11 @@
     public static String javaStringAt(IStrategoList t, int i) {
         return Tools.stringAt(t, i).stringValue();
     }
+    
+    public static int javaIntAt(IStrategoTerm t, int i) {
+        IStrategoInt result = intAt(t, i);
+        return result.intValue();
+    }
 
     public static int javaInt(IStrategoTerm term) {
         return ((IStrategoInt)term).intValue();
Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/VarScope.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -7,6 +7,7 @@
  */
 package org.spoofax.interpreter.core;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -137,36 +138,40 @@
         DebugUtil.debug(s);
     }
     
-    @Deprecated
-    public BindingInfo saveUnboundVars() {
-        return saveUnboundVars(new BindingInfo());
+    public List<BindingInfo> saveUnboundVars() {
+        return saveUnboundVars(new ArrayList<BindingInfo>());
     }
 
-    private BindingInfo saveUnboundVars(BindingInfo bi) {
-        
+    private List<BindingInfo> saveUnboundVars(ArrayList<BindingInfo> results) {
         for (String k : vars.keySet()) {
             if (vars.get(k) == null)
-                bi.add(this, k);
+                results.add(new BindingInfo(this, k));
         }
         
         if (parent != null)
-            return parent.saveUnboundVars(bi);
+            return parent.saveUnboundVars(results);
         
-        return bi;
+        return results;
     }
 
-    @Deprecated
-    public void restoreUnboundVars(BindingInfo bi) {
-        
-        List<Pair<VarScope, String>> bindings = bi.getBindings();
-        
-        for (Pair<VarScope, String> p : bindings) {
-            p.first.resetVar(p.second);
+    public void restoreUnboundVars(List<BindingInfo> bindings) {
+        for (BindingInfo binding : bindings) {
+            binding.value = binding.scope.overrideVar(binding.name, null);
         }
     }
+    
+    public void setBoundVarsAfterBacktracking(List<BindingInfo> bindings) {
+        for (BindingInfo binding : bindings) {
+            String name = binding.name;
+            IStrategoTerm value = binding.value;
+            if (value != null && vars.get(name) == null) {
+                overrideVar(name, value);
+            }
+        }
+    }
 
-    private void resetVar(String name) {
-        vars.put(name, null);
+    private IStrategoTerm overrideVar(String name, IStrategoTerm value) {
+        return vars.put(name, value);
     }
 
     public Collection<SDefT> getStrategyDefinitions() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -36,23 +36,14 @@
         SSLLibrary op = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
         IOAgent agent = op.getIOAgent();
         
+        if (isSameFile(tvars, agent))
+            return true;
+        
         InputStream fis = null;
         OutputStream fos = null;
         
         boolean closeIn = true;
         boolean closeOut = true;
-        
-        if (isTermString(tvars[0]) && isTermString(tvars[1])) {
-            // Avoid a file to itself
-            File file1 = agent.openFile(Tools.javaString(tvars[0]));
-            File file2 = agent.openFile(Tools.javaString(tvars[1]));
-            try {
-                if (file1.exists() && file1.getCanonicalPath().equals(file2.getCanonicalPath()))
-                    return true;
-            } catch (IOException e) {
-                // Ignore: files may not exist yet
-            }
-        }
 
         try {
             if (Tools.isTermString(tvars[0])) {
@@ -88,8 +79,8 @@
 
             if (closeOut) fos.close();
             if (closeIn) fis.close();
-        } catch(IOException e) {
-            agent.getOutputStream(IOAgent.CONST_STDERR).println("SSL_copy: Could not copy file (" + e.getMessage() + ")");
+        } catch (IOException e) {
+            agent.getOutputStream(IOAgent.CONST_STDERR).println("SSL_copy: Could not copy file (" + e.getMessage() + "-" + "attempted to copy to " + tvars[1]);
             return false;
         }
         
@@ -97,4 +88,18 @@
         return true;
     }
 
+    private boolean isSameFile(IStrategoTerm[] tvars, IOAgent agent) {
+        if (isTermString(tvars[0]) && isTermString(tvars[1])) {
+            File file1 = agent.openFile(Tools.javaString(tvars[0]));
+            File file2 = agent.openFile(Tools.javaString(tvars[1]));
+            try {
+                if (file1.exists() && file1.getCanonicalPath().equals(file2.getCanonicalPath()))
+                    return true;
+            } catch (IOException e) {
+                // Ignore: files may not exist yet
+            }
+        }
+        return false;
+    }
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/All.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/All.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/All.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -48,7 +48,7 @@
 
     }
     
-    private IConstruct evalAll(IContext env, final int i, final IStrategoTerm[] list) throws InterpreterException
+    protected IConstruct evalAll(IContext env, final int i, final IStrategoTerm[] list) throws InterpreterException
     {
     	final IStrategoTerm old = env.current();
     	if (i >= old.getSubtermCount()) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Build.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Build.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Build.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -123,7 +123,7 @@
 
     private IStrategoTerm doBuildExplode(ITermFactory factory, IStrategoTerm actualCtor, IStrategoTerm actualArgs) throws InterpreterException {
         if (!(Tools.isTermList(actualArgs))) {
-            throw new InterpreterException("");
+            throw new InterpreterException("Not a list: " + actualArgs);
         }
 
         String n = ((IStrategoString)actualCtor).stringValue();
@@ -175,12 +175,13 @@
         // FIXME memoize constructors
         
         String ctr = Tools.javaStringAt(t, 0);
+        IStrategoList children = (IStrategoList) t.getSubterm(1);
         
-        if(ctr.equals("")) {
+        if(ctr.length() == 0) {
             return buildTuple(env, t);
-        } else if(ctr.equals("Nil")) {
+        } else if(children.getSubtermCount() == 0 && ctr.equals("Nil")) {
             return buildNil(env);
-        } else if(ctr.equals("Cons")) {
+        } else if(children.getSubtermCount() == 2 && ctr.equals("Cons")) {
             return buildCons(env, t, factory);
         } else {
             return buildOp(ctr, env, t, factory);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/GuardedLChoice.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -7,6 +7,8 @@
  */
 package org.spoofax.interpreter.stratego;
 
+import java.util.List;
+
 import org.spoofax.DebugUtil;
 import org.spoofax.interpreter.core.BindingInfo;
 import org.spoofax.interpreter.core.IConstruct;
@@ -38,7 +40,10 @@
     		return s;
     	}
     	else {
-    		//final BindingInfo bi = env.getVarScope().saveUnboundVars();
+    	    // TODO: test variable binding guarded choice
+            //       should succeed: (!1; ?a; fail <+      !2; ?a)
+    	    //       should fail:    (!1; ?a; fail <+ id); !2; ?a
+    		final List<BindingInfo> bi = env.getVarScope().saveUnboundVars();
         	final IStrategoTerm oldCurrent = env.current();
         	final Strategy second = children[n].second;
         	Strategy first = children[n].first;
@@ -49,8 +54,10 @@
     			}
         		public IConstruct onFailure(IContext env) throws InterpreterException {
     	        	env.setCurrent(oldCurrent);
-    	        	//env.getVarScope().restoreUnboundVars(bi);    				
-    				return eval(env, n+1);
+    	        	env.getVarScope().restoreUnboundVars(bi);    				
+    				IConstruct result = eval(env, n+1);
+    				env.getVarScope().setBoundVarsAfterBacktracking(bi);
+                    return result;
     			}
         	});
         	return first;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/ImportTerm.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/ImportTerm.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/ImportTerm.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -29,17 +29,24 @@
 
 	public IConstruct eval(IContext env) throws InterpreterException {
         if (result == null) {
+            InputStream input = null;
             try {
                 SSLLibrary op = (SSLLibrary) env
                         .getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
                 IOAgent io = op.getIOAgent();
 
-                InputStream input = io.openInputStream(path, true);
+                input = io.openInputStream(path, true);
                 result = env.getFactory().parseFromStream(input);
             } catch (IOException e) {
                 throw new InterpreterException("import-term failed", e);
             } catch (RuntimeException e) {
                 throw new InterpreterException("import-term failed", e);
+            } finally {
+                try {
+                    if (input != null) input.close();
+                } catch (IOException e) {
+                    // Silly checked exceptions
+                }
             }
         }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/PrimT.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/PrimT.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/PrimT.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -46,6 +46,7 @@
             // FIXME this cast should be moved out
             IStrategoAppl t = (IStrategoAppl)tvars[i];
             vals[i] = env.lookupVar(Tools.javaStringAt(t, 0));
+            if (vals[i] == null) return getHook().pop().onFailure(env);
         }
 
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Seq.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Seq.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Seq.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -28,7 +28,7 @@
 		return eval(env, 0);
     }
 
-	private IConstruct eval(IContext env, final int n) throws InterpreterException {
+	protected IConstruct eval(IContext env, final int n) throws InterpreterException {
 		if (n == children.length) {
 			return getHook().pop().onSuccess(env);
 		}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoList.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoList.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoList.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -16,7 +16,7 @@
 
     /**
      * @deprecated Use
-     *             {@link IStrategoTermBuilder#makeList(IStrategoTerm, IStrategoList)}
+     *             {@link IStrategoTermBuilder#makeListCons(IStrategoTerm, IStrategoList)}
      *             instead.
      */
     @Deprecated

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/TermConverter.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/TermConverter.java	2009-11-23 15:30:19 UTC (rev 20294)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/TermConverter.java	2009-11-23 16:01:00 UTC (rev 20295)
@@ -12,6 +12,8 @@
  */
 public class TermConverter {
     
+    // TODO: support ATerms, maintaining sharing?
+    
     private final ITermFactory factory;
     
     private final HashMap<IStrategoConstructor, IStrategoConstructor> constructors =

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From m.dejonge at tudelft.nl  Mon Nov 23 22:44:39 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 23 Nov 2009 21:44:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20296 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/src:
	evaluating testrun tests
Message-ID: <200911232144.nANLidu8032630@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-23 21:44:38 +0000 (Mon, 23 Nov 2009)
New Revision: 20296

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20296&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testrun.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluateRegionRecovery.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_WriteStatistics.java

Log:
testrun:
- consist of a set of testsuites
- evaluation output is printed to the console as a table
- add performance statistics

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-23 16:01:00 UTC (rev 20295)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-23 21:44:38 UTC (rev 20296)
@@ -3,10 +3,7 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
 import java.io.IOException;
-import java.io.OutputStream;
-import java.io.PrintStream;
 import java.util.ArrayList;
 
 import org.spoofax.jsglr.InvalidParseTableException;
@@ -18,8 +15,6 @@
 import org.spoofax.jsglr.SGLRException;
 import org.strategoxt.lang.compat.NativeCallHelper;
 
-import aterm.ATerm;
-
 public class ErroneousRegion {
 
 	private static final String EXPECTED_END_SIGN = "@END";

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-23 16:01:00 UTC (rev 20295)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-23 21:44:38 UTC (rev 20296)
@@ -1,21 +1,36 @@
 package evaluating;
 
 import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
 import java.util.TreeMap;
 
 import recovery_logging.RegionLog;
 
 public class Statistics {
 	
+	/**
+	 * Recovery times above this time limit are viewed as performance critical  
+	 */
+	private final static int PERFORMANCE_TIME_LIMIT=100;
+	
 	private int numberOfFiles;
 	private int numberOfEvaluatedRegions;
 	private TreeMap<Evaluation, ArrayList<String>> resultsCategorised;
 	private int maxRegionSelectionTime;
 	private int sumRegionSelectionTime;
 	private int numberOfSkippedRegionsDuringParsing;
+	private int numberOfPerformanceCritical;
 	
+	public int getNumberOfPerformanceCritical() {
+		return numberOfPerformanceCritical;
+	}
+	
+	public int getPercentageOfPerformanceCritical() {
+		if(numberOfSkippedRegionsDuringParsing<=0){
+			return -1;
+		}
+		return 100*numberOfPerformanceCritical/numberOfSkippedRegionsDuringParsing;
+	}
+
 	public int getMaxRegionSelectionTime() {
 		return maxRegionSelectionTime;
 	}
@@ -59,6 +74,7 @@
 		maxRegionSelectionTime=0;
 		sumRegionSelectionTime=0;
 		numberOfSkippedRegionsDuringParsing=0;
+		numberOfPerformanceCritical=0;
 	}
 
 	private void fillResultMap() {
@@ -81,6 +97,8 @@
 			numberOfSkippedRegionsDuringParsing++;
 			if(regionTime > maxRegionSelectionTime)
 				maxRegionSelectionTime=regionTime;
+			if(regionTime>PERFORMANCE_TIME_LIMIT)
+				numberOfPerformanceCritical++;
 		}
 		numberOfFiles++;
 	}
@@ -88,7 +106,12 @@
 	public ArrayList<String> getResultList(Evaluation eval) {
 		return resultsCategorised.get(eval);
 	}
+	
+	public int getResult(Evaluation eval) {
+		return resultsCategorised.get(eval).size();
+	}
 
+
 	public int getNumberOfFiles() {
 		return numberOfFiles;
 		
@@ -100,10 +123,10 @@
 
 	public double calculateScore() {
 		double result=0;
-		result += 10*(getResultList(Evaluation.EXACT).size());
-		result += 5*(getResultList(Evaluation.GOOD).size());
-		result += 1*(getResultList(Evaluation.POOR).size());
-		result += 1*(getResultList(Evaluation.MERGED_REGION).size());
+		result += 10*getResult(Evaluation.EXACT);
+		result += 5*getResult(Evaluation.GOOD);
+		result += 1*getResult(Evaluation.POOR);
+		result += 1*getResult(Evaluation.MERGED_REGION);
 		int nrOfEvaluated=numberOfEvaluatedRegions-nrOfNonEvaluatedFiles();
 		if(nrOfEvaluated<=0)
 			return -1;
@@ -119,5 +142,6 @@
 		maxRegionSelectionTime=0;
 		sumRegionSelectionTime=0;
 		numberOfSkippedRegionsDuringParsing=0;
+		numberOfPerformanceCritical=0;
 	}
 }

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testrun.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testrun.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testrun.java	2009-11-23 21:44:38 UTC (rev 20296)
@@ -0,0 +1,43 @@
+package evaluating;
+
+import java.util.ArrayList;
+
+public class Testrun {
+	private ArrayList<Testsuite> testSuites;
+	private String nameOfTestRun;
+	private String description;
+	
+	
+	public String getDescription() {
+		return description;
+	}
+
+	public void setDescription(String description) {
+		this.description = description;
+	}
+
+	public String getNameOfTestRun() {
+		return nameOfTestRun;
+	}
+
+	public ArrayList<Testsuite> getTestSuites() {
+		return testSuites;
+	}
+
+	public Testrun addTestSuite(Testsuite aTestSuite) {
+		this.testSuites.add(aTestSuite);
+		return this;
+	}
+
+	public Testrun(String name){
+		testSuites=new ArrayList<Testsuite>();
+		nameOfTestRun=name;
+	}
+	
+	public void run() throws Exception{
+		for (Testsuite aSuite : this.testSuites) {
+			aSuite.runTestcases();			
+		}	
+	}
+
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-23 16:01:00 UTC (rev 20295)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-23 21:44:38 UTC (rev 20296)
@@ -6,7 +6,97 @@
 
 public class WriteStatistics {
 
-	public static void writeConsole(Testsuite testSuite) {
+	public static void writeConsole_Testrun(Testrun testrun) {
+		System.out.println("*************************");
+		System.out.println("*************************");
+		System.out.println(testrun.getNameOfTestRun());
+		System.out.println("Description: "+testrun.getDescription());
+		writeConsole_TestrunOverview(testrun);
+		for (Testsuite aSuite : testrun.getTestSuites()) {
+			//writeConsole_TestSuite(aSuite);
+		}
+		System.out.println();
+		System.out.println("*************************");
+		System.out.println("*************************");
+	}
+	
+	public static void writeConsole_TestrunOverview(Testrun testrun) {
+		System.out.println();
+		ArrayList<String> qualityTable = new ArrayList<String>();
+		ArrayList<String> performanceTable = new ArrayList<String>();
+		qualityTable.add(qualityHeaderRow());
+		performanceTable.add(performanceHeaderRow());
+		for (Testsuite suite : testrun.getTestSuites()) {
+			qualityTable.add(toQualityEvalRow(suite));
+			performanceTable.add(toPerformanceEvalRow(suite));
+		}
+		for (String qualData : qualityTable) {
+			System.out.println(qualData);
+		}
+		System.out.println();
+		for (String perfData : performanceTable) {
+			System.out.println(perfData);
+		}
+	}
+	
+	private static String performanceHeaderRow() {
+		String[] columnHeaders = new String[]{"  ", "AVERAGE (ms)", "MAX (ms)", "CRITICAL", "CRITICAL(%)"};
+		String headerRow = toRowString(columnHeaders);
+		return headerRow;
+	}
+	
+	private static String qualityHeaderRow() {
+		String[] columnHeaders = new String[]{"", Evaluation.EXACT.toString(), Evaluation.GOOD.toString(), Evaluation.POOR.toString(), "OTHER", "SCORE"};
+		String headerRow = toRowString(columnHeaders);
+		return headerRow;
+	}
+
+	private static String toQualityEvalRow(Testsuite s) {
+		String[] row1Values=new String[6];
+		row1Values[0] = s.getTestSuiteName();
+		int exactR = s.getStatistics().getResult(Evaluation.EXACT);
+		int goodR = s.getStatistics().getResult(Evaluation.GOOD);
+		int poorR = s.getStatistics().getResult(Evaluation.POOR);
+		int otherR =s.getStatistics().getNumberOfEvaluatedRegions()-exactR-goodR-poorR;
+		double scoreR=s.getStatistics().calculateScore();
+		row1Values[1]=""+exactR;
+		row1Values[2]=""+goodR;
+		row1Values[3]=""+poorR;
+		row1Values[4]=""+otherR;
+		row1Values[5]=""+scoreR;
+		String evalRow=toRowString(row1Values);
+		return evalRow;
+	}
+	
+	private static String toPerformanceEvalRow(Testsuite s) {
+		String[] row1Values=new String[5];
+		row1Values[0] = s.getTestSuiteName();
+		row1Values[1]=""+s.getStatistics().getAverageRegionSelectionTime();
+		row1Values[2]=""+s.getStatistics().getMaxRegionSelectionTime();
+		row1Values[3]=""+s.getStatistics().getNumberOfPerformanceCritical();
+		row1Values[4]=""+s.getStatistics().getPercentageOfPerformanceCritical();
+		String evalRow=toRowString(row1Values);
+		return evalRow;
+	}
+
+	private static String toRowString(String[] columnValues) {
+		String result=toColumnString(columnValues[0], 20);
+		for (int i = 1; i < columnValues.length; i++) {
+			result+=toColumnString(columnValues[i], 15);
+		}
+		return result;
+	}
+
+	
+	private static String toColumnString(String value, int columnLength) {
+		String cuttedString = value.substring(0, Math.min(columnLength-2, value.length()));
+		while(cuttedString.length()<columnLength){
+			cuttedString+=" ";
+		}
+		return cuttedString;
+	}
+
+	public static void writeConsole_TestSuite(Testsuite testSuite) {
 		Statistics stats = testSuite.getStatistics();
 		writeConsole_Header(testSuite);
 		writeConsole_General(stats);		
@@ -19,24 +109,28 @@
 		System.out.println();
 		System.out.println("Details");
 		for (Testcase aFile : testSuite.getTestCases()) {
-			System.out.println();
-			System.out.println("********************************************");
-			System.out.println("\t Filename: "+aFile.getFileName());
-			System.out.println("\t Evaluations: "+aFile.getRegionEvaluations());
-			System.out.println("\t Recover Log: ");
-			ArrayList<RegionLog> recoverRegions = aFile.getRecoverLog().getRegionInfo();
-			for (int i = 0; i < recoverRegions.size(); i++) {
-				RegionLog aRegion = recoverRegions.get(i);
-				System.out.println("\t \t Region: " + (i+1));
-				System.out.println("\t \t Execution times: " + aRegion.getExecutionTimetable());
-				System.out.println("\t \t Skipped Fragment:");
-				System.out.println(aRegion.getSkippedFragment());
-				//aRegion.getInspectedFragments();
-			}		
+			writeConsole_Testcase(aFile);		
 		}
 		
 	}
 
+	public static void writeConsole_Testcase(Testcase aFile) {
+		System.out.println();
+		System.out.println("********************************************");
+		System.out.println("\t Filename: "+aFile.getFileName());
+		System.out.println("\t Evaluations: "+aFile.getRegionEvaluations());
+		System.out.println("\t Recover Log: ");
+		ArrayList<RegionLog> recoverRegions = aFile.getRecoverLog().getRegionInfo();
+		for (int i = 0; i < recoverRegions.size(); i++) {
+			RegionLog aRegion = recoverRegions.get(i);
+			System.out.println("\t \t Region: " + (i+1));
+			System.out.println("\t \t Execution times: " + aRegion.getExecutionTimetable());
+			System.out.println("\t \t Skipped Fragment:");
+			System.out.println(aRegion.getSkippedFragment());
+			//aRegion.getInspectedFragments();
+		}
+	}
+
 	public static void writeConsole_Files(Statistics stats) {
 		System.out.println("Files");
 		for (Evaluation eval : Evaluation.values()) {

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluateRegionRecovery.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluateRegionRecovery.java	2009-11-23 16:01:00 UTC (rev 20295)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluateRegionRecovery.java	2009-11-23 21:44:38 UTC (rev 20296)
@@ -1,7 +1,5 @@
 package testrun;
 
-import evaluating.FilePaths;
-import evaluating.Testsuite;
 
 public class EvaluateRegionRecovery {
 
@@ -11,6 +9,8 @@
 	 */
 	public static void main(String[] args) throws Exception {
 		TestRun myTestSuites=new TestRun();
+		//warm draaien?
 		myTestSuites.evaluateLanguages();
+		myTestSuites.evaluateErrorCategories();
 	}
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java	2009-11-23 16:01:00 UTC (rev 20295)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java	2009-11-23 21:44:38 UTC (rev 20296)
@@ -1,7 +1,6 @@
 package testrun;
 
 import java.io.File;
-import java.util.HashMap;
 
 import evaluating.FilePaths;
 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java	2009-11-23 16:01:00 UTC (rev 20295)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java	2009-11-23 21:44:38 UTC (rev 20296)
@@ -1,8 +1,7 @@
 package testrun;
 
-import java.io.FileNotFoundException;
-
 import evaluating.FilePaths;
+import evaluating.Testrun;
 import evaluating.Testsuite;
 import evaluating.WriteStatistics;
 
@@ -16,16 +15,36 @@
 	}
 	
 	public void evaluateLanguages() throws Exception{
-		evaluateLanguage(new Testsuite("Java", fileLocations), InfraStructure.JAVA_EXT);
-		evaluateLanguage(new Testsuite("WebDSL", fileLocations), InfraStructure.WEBDSL_EXT);
-		evaluateLanguage(new Testsuite("Stratego", fileLocations), InfraStructure.STRATEGO_EXT);
-		evaluateLanguage(new Testsuite("Stratego-Java", fileLocations), InfraStructure.STRATEGO_JAVA_EXT);
+		Testrun languageEvaluation=new Testrun("Languages");
+		languageEvaluation.setDescription("Evaluates the region selection algorithm for different languages");
+		addLanguage(languageEvaluation, new Testsuite("Java", fileLocations), InfraStructure.JAVA_EXT);
+		addLanguage(languageEvaluation, new Testsuite("WebDSL", fileLocations), InfraStructure.WEBDSL_EXT);
+		addLanguage(languageEvaluation, new Testsuite("Stratego", fileLocations), InfraStructure.STRATEGO_EXT);
+		addLanguage(languageEvaluation, new Testsuite("Stratego-Java", fileLocations), InfraStructure.STRATEGO_JAVA_EXT);
+		languageEvaluation.run();
+		WriteStatistics.writeConsole_Testrun(languageEvaluation);
 	}
+	
+	public void evaluateErrorCategories() throws Exception{
+		Testrun errorTypeEvaluation=new Testrun("Error Types");
+		errorTypeEvaluation.setDescription("Evaluates the region selection algorithm for different types of errors");
+		addErrorType(errorTypeEvaluation, new Testsuite("Common", fileLocations), InfraStructure.DIR_COMMON);
+		addErrorType(errorTypeEvaluation, new Testsuite("Messy Indent", fileLocations), InfraStructure.DIR_MESSY_INDENT);
+		addErrorType(errorTypeEvaluation, new Testsuite("Problem Cases", fileLocations), InfraStructure.DIR_PROBLEM_CASES);
+		addErrorType(errorTypeEvaluation, new Testsuite("Spoofax Examples", fileLocations), InfraStructure.DIR_SPOOFAX_EXAMPLES);
+		errorTypeEvaluation.run();
+		WriteStatistics.writeConsole_Testrun(errorTypeEvaluation);
+	}
 
-	private void evaluateLanguage(Testsuite testsuite, String ext) throws Exception {
+	private void addLanguage(Testrun aRun, Testsuite testsuite, String ext) throws Exception {
 		testsuite.setAllDirectories(true);
 		testsuite.addExtension(ext);
-		testsuite.runTestcases();
-		WriteStatistics.writeConsole(testsuite);
+		aRun.addTestSuite(testsuite);
 	}
+	
+	private void addErrorType(Testrun aRun, Testsuite testsuite, String dir) throws Exception {
+		testsuite.setAllExtensions(true);
+		testsuite.addDir(dir);
+		aRun.addTestSuite(testsuite);
+	}
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java	2009-11-23 16:01:00 UTC (rev 20295)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_ErroneousRegion.java	2009-11-23 21:44:38 UTC (rev 20296)
@@ -9,10 +9,8 @@
 import java.util.ArrayList;
 
 import org.junit.Test;
-import org.spoofax.jsglr.InvalidParseTableException;
-import org.spoofax.jsglr.SGLRException;
 
-import evaluating.*;
+import evaluating.ErroneousRegion;
 
 
 public class Test_ErroneousRegion {
@@ -44,12 +42,12 @@
 	
 	@Test(expected=Exception.class)
 	public void testDoubleStart() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString("m @START \n m @START");
+		ErroneousRegion.collectExpectedRegionsFromString("m @START \n m @START");
 	}
 	
 	@Test(expected=Exception.class)
 	public void testMissingStart() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString("m @START \n m @END \n m @END");
+		ErroneousRegion.collectExpectedRegionsFromString("m @START \n m @END \n m @END");
 	}
 	@Test
 	public void testNoRegions() throws Exception{		
@@ -64,7 +62,7 @@
 	
 	@Test(expected=Exception.class)
 	public void testMissingEnd() throws Exception{		
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.collectExpectedRegionsFromString("m @START \n m \n @END \n @START");
+		ErroneousRegion.collectExpectedRegionsFromString("m @START \n m \n @END \n @START");
 	}
 	
 	private String readFromFile(String filePath) throws FileNotFoundException,
@@ -156,17 +154,17 @@
 	
 	@Test(expected=Exception.class)
 	public void sameNumberOfLines1() throws Exception {
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc z y x", "ccc \n \n \n");
+		ErroneousRegion.findSkippedRegions("ccc z y x", "ccc \n \n \n");
 	}
 	
 	@Test(expected=Exception.class)
 	public void sameNumberOfLines2() throws Exception {
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc \n \n c", "ccc \n c c");
+		ErroneousRegion.findSkippedRegions("ccc \n \n c", "ccc \n c c");
 	}
 	
 	@Test(expected=Exception.class)
 	public void sameNumberOfChars() throws Exception {
-		ArrayList<ErroneousRegion> regions = ErroneousRegion.findSkippedRegions("ccc \n ff", "ccc \n     ");
+		ErroneousRegion.findSkippedRegions("ccc \n ff", "ccc \n     ");
 	}
 	
 	@Test

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java	2009-11-23 16:01:00 UTC (rev 20295)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java	2009-11-23 21:44:38 UTC (rev 20296)
@@ -32,7 +32,7 @@
 		testsuite.setAllDirectories(true);
 		testsuite.addExtension(InfraStructure_Testing.JAVA_EXT);
 		testsuite.runTestcases();
-		WriteStatistics.writeConsole(testsuite);
+		WriteStatistics.writeConsole_TestSuite(testsuite);
 	}
 	
 	@Test
@@ -128,7 +128,7 @@
 	
 	@Test(expected=FileNotFoundException.class)
 	public void testFileNotFoundException() throws Exception {
-		ArrayList<Evaluation> evaluations = evaluateFile("NotExisting.java");
+		evaluateFile("NotExisting.java");
 	}
 
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java	2009-11-23 16:01:00 UTC (rev 20295)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java	2009-11-23 21:44:38 UTC (rev 20296)
@@ -2,10 +2,12 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import junit.framework.Assert;
+
 import org.junit.Test;
 
-import evaluating.*;
+import evaluating.Evaluation;
+import evaluating.Statistics;
+import evaluating.Testcase;
 
 
 public class Test_Statistics {

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-23 16:01:00 UTC (rev 20295)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testsuite.java	2009-11-23 21:44:38 UTC (rev 20296)
@@ -6,14 +6,12 @@
 
 import junit.framework.Assert;
 
-import org.junit.After;
-import org.junit.Before;
 import org.junit.Test;
 
 import testrun.InfraStructure;
-
-import evaluating.*;
+import evaluating.FilePaths;
 import evaluating.SVNFilter;
+import evaluating.Testsuite;
 
 public class Test_Testsuite {
 	

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_WriteStatistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_WriteStatistics.java	2009-11-23 16:01:00 UTC (rev 20295)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_WriteStatistics.java	2009-11-23 21:44:38 UTC (rev 20296)
@@ -3,7 +3,6 @@
 import org.junit.Test;
 
 import evaluating.FilePaths;
-import evaluating.Statistics;
 import evaluating.Testsuite;
 import evaluating.WriteStatistics;
 
@@ -17,7 +16,7 @@
 	
 	@Test
 	public void writeToConsole(){
-		WriteStatistics.writeConsole(new Testsuite("MyTestCases", new FilePaths("Root")));
+		WriteStatistics.writeConsole_TestSuite(new Testsuite("MyTestCases", new FilePaths("Root")));
 	}
 	
 	



From m.dejonge at tudelft.nl  Tue Nov 24 17:42:04 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 24 Nov 2009 16:42:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20297 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: . Input
	Input/Common src/evaluating src/testrun
Message-ID: <200911241642.nAOGg4ZJ009648@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-24 16:42:03 +0000 (Tue, 24 Nov 2009)
New Revision: 20297

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20297&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/currentLineError.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/doubleClosed_If.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawedDeclaration.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawedImport.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawedMethodHeader.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawed_IfBlock.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/methodOutsideClass.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/morePartsStructureError.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/multipleErrors.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/multipleErrors2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/previousLineError.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/priorSiblingError.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/sloppyCode.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/testBridgeFG.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/testFile.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/twoSeparatedErrors.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedBlockComment.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedClassBody.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedMethod.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedString.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosed_If.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/
   sglr-recovery/trunk/Evaluation_RegionRecovery/Output/
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluationRuns.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluateRegionRecovery.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java

Log:
Java development files in Common
OutputWriter---toConsole

Changes (first 1000 lines of the diffs):

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/currentLineError.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/currentLineError.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/currentLineError.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,30 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int ErrorFragment()
+  { 
+    int corrLine1;
+    int i); //@START @END
+    corrLine2();
+    corrLine3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/doubleClosed_If.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/doubleClosed_If.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/doubleClosed_If.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,31 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+
+  private int wronglyClosedMethod()
+  { 
+    if(true)/*{*/ //@START
+      i = 5;
+    } //@END
+    bla();
+  }
+
+  private int correctMethod2()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawedDeclaration.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawedDeclaration.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawedDeclaration.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,21 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+class X  
+{ 
+  private int anInt;
+
+  private int errorDeclaration /*;*/ //@START @END
+
+  private String aString;
+
+  private int correctMethod()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawedImport.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawedImport.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawedImport.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,16 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.ErrorImport/*;*/ //@START @END
+import java.io;
+
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawedMethodHeader.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawedMethodHeader.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawedMethodHeader.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,29 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+class X  
+{ 
+  private int Fragment()) //@START
+  { 
+    int i = 1;
+    int i;
+  } //@END
+
+  private int correctMethod1()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+
+  private int correctMethod2()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawed_IfBlock.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawed_IfBlock.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/flawed_IfBlock.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,26 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int ErrorFragment()
+  { 
+    int corrLine1;
+    corrLine2();
+    int i;
+    if(bla())){ //@START
+        i = 0; //@END
+    corrLine3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/methodOutsideClass.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/methodOutsideClass.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/methodOutsideClass.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,22 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int bla()
+  { 
+    bla();
+  }
+}
+
+private int bla() //@START
+{ 
+  bla();
+} //@END

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/morePartsStructureError.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/morePartsStructureError.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/morePartsStructureError.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,32 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int errorFragment()
+  { 
+    int corrLine1;
+    corrLine2();
+    if(bla()) //@START
+    { 
+      int i;
+      return 2; /* }*/
+    else
+      if(true)
+        return 4;
+      else
+        return 5; //@END
+    corrLine3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/multipleErrors.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/multipleErrors.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/multipleErrors.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,28 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int method2()
+  { 
+    corr2();
+    $ corr2()? %% -; //@START 
+    int corrInt = bla((); //@END
+    return corrInt;
+  }
+  
+  private int correctMethod3()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/multipleErrors2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/multipleErrors2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/multipleErrors2.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,34 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int correctMethod2(){
+      int corrLine1;
+      if(true){
+    	  String s = "bla bla bla"//; @START @END
+    	  corrLine2();
+      }
+      else{ //@START
+         corrLine3(); //}     
+      corrLine4( //); //@END
+  }
+      
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+  
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/previousLineError.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/previousLineError.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/previousLineError.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,24 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int ErrorFragment()
+  { 
+    int corrLine1;
+    corrLine2();
+    int i = bla(/*);*/ //@START @END
+    corrLine3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/priorSiblingError.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/priorSiblingError.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/priorSiblingError.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,29 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int errorFragment()
+  { 
+    int i;
+    if(true) //@START 
+      bla();
+      doSomething();
+    } // @END
+    int j;
+    int k;
+    doSomething2();
+    return 5;
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/sloppyCode.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/sloppyCode.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/sloppyCode.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,77 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int ErrorTooMuchClosing()
+  { 
+    if(bla1())
+    { 
+      while(true) //@START
+      { 
+        bla2(); /* }*/
+      stm(); // @END
+    }
+    int i;
+    int j;
+    bla3();
+  }  
+
+  private int ErrorMissingClosing()
+  { 
+    if(bla1())
+    { 
+      bla();
+      while(true) //@START
+      { 
+        bla2();
+        stm(); /* }*/ // @END
+    }
+    int i;
+    int j;
+    bla3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod3()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/testBridgeFG.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/testBridgeFG.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/testBridgeFG.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,34 @@
+class X  
+{ 
+  private int method1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int method2()
+  { 
+    int Line1;
+    if(false){ //@START
+	    if(true)
+	    { 
+	       Line2();
+	       Line3();
+	    Line4();
+	    Line5(); //@END
+    Line6();
+    Line7() //@START @END
+  }
+    
+  private int method1()
+  { 
+     corr2();
+     return corrInt;
+  }
+  
+  private int method1()
+  { 
+     corr2();
+     return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/testFile.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/testFile.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/testFile.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,31 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+
+  private int wronglyClosedMethod()
+  { 
+    if(true) /* { */ //@START
+      i = 5;
+    } //@END
+    bla();
+  }
+
+  private int correctMethod2()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/twoSeparatedErrors.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/twoSeparatedErrors.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/twoSeparatedErrors.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,71 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int ErrorTooMuchClosing()
+  { 
+    if(bla1())
+    { 
+      while(true) //@START
+      { 
+        bla2(); /*  }*/ //@END
+      stm();
+    }
+    int i;
+    int j;
+    bla3();
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+  
+  private int corr(){
+      return 5;
+  }
+
+  private int ErrorMissingClosing()
+  { 
+    if(bla1())
+    { 
+      bla();
+      while(true) //@START
+      { 
+        bla2();
+        stm(); /* } */ //@END
+    }
+    int i;
+    int j;
+    bla3();
+  }
+
+  private int correctMethod3()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int correctMethod4()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedBlockComment.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedBlockComment.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedBlockComment.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,24 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  /* //@START
+  private int correctMethod2(){
+      int corrLine1;
+      if(true){
+    	  String s = "bla bla bla";
+    	  corrLine2();
+      }
+      corrLine3();     
+      corrLine4();
+  }//@END
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedClassBody.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedClassBody.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedClassBody.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,19 @@
+class X  //@START
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    corr2();
+    if(true)
+      return 5;
+    int corrInt = 1;
+    return corrInt;
+  }
+
+  private int bla()
+  { 
+    bla();
+  }
+/*}*/
+  
+//@END

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedMethod.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedMethod.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedMethod.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,24 @@
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    corr2();
+    return corrInt;
+  }
+
+  private int UnclosedMethod()
+  { 
+      if(true){ //@START 
+         int corrLine1;
+         corrLine2(); /*  } */ //@END
+      return 5;
+  }
+
+  private int correctMethod2()
+  { 
+    corr2();
+    corr2();
+    int corrInt = 1;
+    return corrInt;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedString.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedString.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosedString.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,23 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int correctMethod2(){
+      int corrLine1;
+      if(true){
+    	  String s = "bla bla bla //@START @END
+    	  corrLine2();
+      }
+      corrLine3();     
+      corrLine4();
+  }
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosed_If.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosed_If.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Common/unclosed_If.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,30 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+class X  
+{ 
+  private int correctMethod1()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+
+  private int UnclosedIf()
+  { 
+    if(true) { //@START
+       i = 5; //@END
+    return 7;
+  }
+
+  private int correctMethod2()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-23 21:44:38 UTC (rev 20296)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -1,26 +1,38 @@
 package evaluating;
 
+import java.io.FileNotFoundException;
+import java.io.OutputStream;
+import java.io.PrintStream;
 import java.util.ArrayList;
 
+import org.strategoxt.stratego_lib.system_about_0_0;
+
 import recovery_logging.RegionLog;
 
 public class WriteStatistics {
 
-	public static void writeConsole_Testrun(Testrun testrun) {
-		System.out.println("*************************");
-		System.out.println("*************************");
-		System.out.println(testrun.getNameOfTestRun());
-		System.out.println("Description: "+testrun.getDescription());
+	public static void writeConsole_Testrun(Testrun testrun) throws FileNotFoundException {
+		writeOutputLine("*************************");
+		writeOutputLine("*************************");
+		writeOutputLine(testrun.getNameOfTestRun());
+		writeOutputLine("Description: "+testrun.getDescription());
 		writeConsole_TestrunOverview(testrun);
 		for (Testsuite aSuite : testrun.getTestSuites()) {
 			//writeConsole_TestSuite(aSuite);
 		}
-		System.out.println();
-		System.out.println("*************************");
-		System.out.println("*************************");
+		writeOutputLine();
+		writeOutputLine("*************************");
+		writeOutputLine("*************************");
 	}
 	
-	public static void writeConsole_TestrunOverview(Testrun testrun) {
+	protected static void writeOutputLine(String line) throws FileNotFoundException{
+		//PrintStream fileOut=new PrintStream("Output/m.txt");
+		PrintStream consoleOut = System.out;
+		consoleOut.println(line);
+	}
+	protected static void writeOutputLine() throws FileNotFoundException{writeOutputLine("");}
+	
+	public static void writeConsole_TestrunOverview(Testrun testrun) throws FileNotFoundException {
 		System.out.println();
 		ArrayList<String> qualityTable = new ArrayList<String>();
 		ArrayList<String> performanceTable = new ArrayList<String>();
@@ -33,9 +45,9 @@
 		for (String qualData : qualityTable) {
 			System.out.println(qualData);
 		}
-		System.out.println();
+		writeOutputLine();
 		for (String perfData : performanceTable) {
-			System.out.println(perfData);
+			writeOutputLine(perfData);
 		}
 	}
 	
@@ -96,7 +108,7 @@
 		return cuttedString;
 	}
 
-	public static void writeConsole_TestSuite(Testsuite testSuite) {
+	public static void writeConsole_TestSuite(Testsuite testSuite) throws FileNotFoundException {
 		Statistics stats = testSuite.getStatistics();
 		writeConsole_Header(testSuite);
 		writeConsole_General(stats);		
@@ -105,62 +117,62 @@
 		writeConsole_Details(testSuite);
 	}
 
-	private static void writeConsole_Details(Testsuite testSuite) {
-		System.out.println();
-		System.out.println("Details");
+	private static void writeConsole_Details(Testsuite testSuite) throws FileNotFoundException {
+		writeOutputLine();
+		writeOutputLine("Details");
 		for (Testcase aFile : testSuite.getTestCases()) {
 			writeConsole_Testcase(aFile);		
 		}
 		
 	}
 
-	public static void writeConsole_Testcase(Testcase aFile) {
-		System.out.println();
-		System.out.println("********************************************");
-		System.out.println("\t Filename: "+aFile.getFileName());
-		System.out.println("\t Evaluations: "+aFile.getRegionEvaluations());
-		System.out.println("\t Recover Log: ");
+	public static void writeConsole_Testcase(Testcase aFile) throws FileNotFoundException {
+		writeOutputLine();
+		writeOutputLine("********************************************");
+		writeOutputLine("\t Filename: "+aFile.getFileName());
+		writeOutputLine("\t Evaluations: "+aFile.getRegionEvaluations());
+		writeOutputLine("\t Recover Log: ");
 		ArrayList<RegionLog> recoverRegions = aFile.getRecoverLog().getRegionInfo();
 		for (int i = 0; i < recoverRegions.size(); i++) {
 			RegionLog aRegion = recoverRegions.get(i);
-			System.out.println("\t \t Region: " + (i+1));
-			System.out.println("\t \t Execution times: " + aRegion.getExecutionTimetable());
-			System.out.println("\t \t Skipped Fragment:");
-			System.out.println(aRegion.getSkippedFragment());
+			writeOutputLine("\t \t Region: " + (i+1));
+			writeOutputLine("\t \t Execution times: " + aRegion.getExecutionTimetable());
+			writeOutputLine("\t \t Skipped Fragment:");
+			writeOutputLine(aRegion.getSkippedFragment());
 			//aRegion.getInspectedFragments();
 		}
 	}
 
-	public static void writeConsole_Files(Statistics stats) {
-		System.out.println("Files");
+	public static void writeConsole_Files(Statistics stats) throws FileNotFoundException {
+		writeOutputLine("Files");
 		for (Evaluation eval : Evaluation.values()) {
-			System.out.println("\t" + eval +":" + stats.getResultList(eval));	
+			writeOutputLine("\t" + eval +":" + stats.getResultList(eval));	
 		}
 	}
 
-	public static void writeConsole_Overview(Statistics stats) {
-		System.out.println();
-		System.out.println("Overview");
+	public static void writeConsole_Overview(Statistics stats) throws FileNotFoundException {
+		writeOutputLine();
+		writeOutputLine("Overview");
 		for (Evaluation eval : Evaluation.values()) {
-			System.out.println("\t" + eval +":" + stats.getResultList(eval).size());	
+			writeOutputLine("\t" + eval +":" + stats.getResultList(eval).size());	
 		}
 	}
 
-	public static void writeConsole_General(Statistics stats) {
-		System.out.println("General");
-		System.out.println("\t" + "Number of files: " + stats.getNumberOfFiles());
-		System.out.println("\t" + "Number of evaluated regions: " + stats.getNumberOfEvaluatedRegions());
-		System.out.println("\t" + "Number of skipped regions during parsing: "+ stats.getNumberOfSkippedRegionsDuringParsing());
-		System.out.println("\t" + "Average region selection time: " + stats.getAverageRegionSelectionTime());
-		System.out.println("\t" + "Maximum region selection time: " + stats.getMaxRegionSelectionTime());
-		System.out.println("\t" + "Number of non evaluated files: " + stats.nrOfNonEvaluatedFiles());
-		System.out.println("\t" + "Score: " + stats.calculateScore());
+	public static void writeConsole_General(Statistics stats) throws FileNotFoundException {
+		writeOutputLine("General");
+		writeOutputLine("\t" + "Number of files: " + stats.getNumberOfFiles());
+		writeOutputLine("\t" + "Number of evaluated regions: " + stats.getNumberOfEvaluatedRegions());
+		writeOutputLine("\t" + "Number of skipped regions during parsing: "+ stats.getNumberOfSkippedRegionsDuringParsing());
+		writeOutputLine("\t" + "Average region selection time: " + stats.getAverageRegionSelectionTime());
+		writeOutputLine("\t" + "Maximum region selection time: " + stats.getMaxRegionSelectionTime());
+		writeOutputLine("\t" + "Number of non evaluated files: " + stats.nrOfNonEvaluatedFiles());
+		writeOutputLine("\t" + "Score: " + stats.calculateScore());
 	}
 
-	public static void writeConsole_Header(Testsuite testSuite) {
-		System.out.println("*************************");
-		System.out.println(testSuite.getTestSuiteName());
-		System.out.println("*************************");
-		System.out.println();
+	public static void writeConsole_Header(Testsuite testSuite) throws FileNotFoundException {
+		writeOutputLine("*************************");
+		writeOutputLine(testSuite.getTestSuiteName());
+		writeOutputLine("*************************");
+		writeOutputLine();
 	}
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluateRegionRecovery.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluateRegionRecovery.java	2009-11-23 21:44:38 UTC (rev 20296)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluateRegionRecovery.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -8,9 +8,9 @@
 	 * @throws Exception 
 	 */
 	public static void main(String[] args) throws Exception {
-		TestRun myTestSuites=new TestRun();
+		EvaluationRuns myTestSuites=new EvaluationRuns();
 		//warm draaien?
 		myTestSuites.evaluateLanguages();
-		myTestSuites.evaluateErrorCategories();
+		//myTestSuites.evaluateErrorCategories();
 	}
 }

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluationRuns.java (from rev 20296, sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/TestRun.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluationRuns.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluationRuns.java	2009-11-24 16:42:03 UTC (rev 20297)
@@ -0,0 +1,50 @@
+package testrun;
+
+import evaluating.FilePaths;
+import evaluating.Testrun;
+import evaluating.Testsuite;
+import evaluating.WriteStatistics;
+
+public class EvaluationRuns {
+	
+	private FilePaths fileLocations;
+	
+	public EvaluationRuns(){
+		fileLocations=new FilePaths(InfraStructure.DIR_ROOT);
+		InfraStructure.addStandardLanguages(fileLocations);
+	}
+	
+	public void evaluateLanguages() throws Exception{
+		Testrun languageEvaluation=new Testrun("Languages");
+		languageEvaluation.setDescription("Evaluates the region selection algorithm for different languages");
+		addLanguage(languageEvaluation, new Testsuite("Java", fileLocations), InfraStructure.JAVA_EXT);
+		addLanguage(languageEvaluation, new Testsuite("WebDSL", fileLocations), InfraStructure.WEBDSL_EXT);
+		addLanguage(languageEvaluation, new Testsuite("Stratego", fileLocations), InfraStructure.STRATEGO_EXT);
+		addLanguage(languageEvaluation, new Testsuite("Stratego-Java", fileLocations), InfraStructure.STRATEGO_JAVA_EXT);
+		languageEvaluation.run();
+		WriteStatistics.writeConsole_Testrun(languageEvaluation);
+	}

(100 diff lines omitted)


From m.dejonge at tudelft.nl  Tue Nov 24 17:43:48 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 24 Nov 2009 16:43:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20298 - MaartjeDeJonge -
	sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating
Message-ID: <200911241643.nAOGhm8E009667@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-24 16:43:48 +0000 (Tue, 24 Nov 2009)
New Revision: 20298

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20298&view=rev

Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java

Log:


Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-24 16:42:03 UTC (rev 20297)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-24 16:43:48 UTC (rev 20298)
@@ -33,7 +33,7 @@
 	protected static void writeOutputLine() throws FileNotFoundException{writeOutputLine("");}
 	
 	public static void writeConsole_TestrunOverview(Testrun testrun) throws FileNotFoundException {
-		System.out.println();
+		writeOutputLine();
 		ArrayList<String> qualityTable = new ArrayList<String>();
 		ArrayList<String> performanceTable = new ArrayList<String>();
 		qualityTable.add(qualityHeaderRow());
@@ -43,7 +43,7 @@
 			performanceTable.add(toPerformanceEvalRow(suite));
 		}
 		for (String qualData : qualityTable) {
-			System.out.println(qualData);
+			writeOutputLine(qualData);
 		}
 		writeOutputLine();
 		for (String perfData : performanceTable) {



From L.C.L.Kats at tudelft.nl  Wed Nov 25 10:03:17 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 25 Nov 2009 09:03:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20299 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux
Message-ID: <200911250903.nAP93HPB021917@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-25 09:03:16 +0000 (Wed, 25 Nov 2009)
New Revision: 20299

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20299&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/implodePT
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/sdf2table

Log:
New native linux executables by Rob that use /lib/ld-linux.so.2.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/implodePT
===================================================================
(Binary files differ)

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/native/linux/sdf2table
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Wed Nov 25 10:11:48 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 25 Nov 2009 09:11:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20300 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <200911250911.nAP9Bm8l022142@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-25 09:11:48 +0000 (Wed, 25 Nov 2009)
New Revision: 20300

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20300&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileTrackingIOAgent.java
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/FileTrackingIOAgent.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/BuilderButtonDelegate.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml

Log:
Moving some files, why not.

Changes:

Deleted: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/FileTrackingIOAgent.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/FileTrackingIOAgent.java	2009-11-25 09:03:16 UTC (rev 20299)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/FileTrackingIOAgent.java	2009-11-25 09:11:48 UTC (rev 20300)
@@ -1,52 +0,0 @@
-package org.strategoxt.imp.metatooling.building;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.HashSet;
-import java.util.Set;
-
-import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
-
-/**
- * An IOAgent that keeps track of all files accessed.
- * 
- * @author Lennart Kats <lennart add lclnet.nl>
- */
- at Deprecated
-public class FileTrackingIOAgent extends EditorIOAgent {
-	private Set<String> tracked = new HashSet<String>();
-	
-	public Set<String> getTracked() {
-		return tracked;
-	}
-	
-	public void setTracked(Set<String> value) {
-		tracked = value;
-	}
-	
-	protected void track(String fn) {
-		tracked.add(getAbsolutePath(getWorkingDir(), fn));
-	}
-	
-	@Override
-	public File openFile(String fn) {
-		track(fn);
-		return super.openFile(fn);
-	}
-	
-	@Override
-	public InputStream openInputStream(String fn, boolean isDefinitionFile)
-			throws FileNotFoundException {
-		
-		if (!isDefinitionFile) track(fn);
-		return super.openInputStream(fn, isDefinitionFile);
-	}
-	
-	@Override
-	public int openRandomAccessFile(String fn, String mode) throws FileNotFoundException, IOException {
-		track(fn);
-		return super.openRandomAccessFile(fn, mode);
-	}
-}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-25 09:03:16 UTC (rev 20299)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-25 09:11:48 UTC (rev 20300)
@@ -195,7 +195,7 @@
             label="Spoofax"
             visible="true">
          <action
-               class="org.strategoxt.imp.runtime.stratego.BuilderButtonDelegate"
+               class="org.strategoxt.imp.runtime.services.BuilderButtonDelegate"
                definitionId="org.strategoxt.imp.runtime.transformCommand"
                id="org.strategoxt.imp.runtime.stratego.builder"
                label="Apply transformation"
@@ -220,7 +220,7 @@
    <extension
          point="org.eclipse.ui.handlers">
       <handler
-            class="org.strategoxt.imp.runtime.stratego.BuilderButtonDelegate"
+            class="org.strategoxt.imp.runtime.services.BuilderButtonDelegate"
             commandId="org.strategoxt.imp.runtime.transformCommand">
       </handler>
    </extension>
@@ -236,7 +236,7 @@
       <key
             commandId="org.eclipse.ui.project.buildProject"
             contextId="org.eclipse.ui.contexts.window"
-            sequence="M1+ALT+B"
+            sequence="M1+M3+B"
             schemeId="org.eclipse.ui.defaultAcceleratorConfiguration" />
    </extension>
 

Copied: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java (from rev 20285, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/BuilderButtonDelegate.java)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java	2009-11-25 09:11:48 UTC (rev 20300)
@@ -0,0 +1,130 @@
+package org.strategoxt.imp.runtime.services;
+
+import org.eclipse.core.commands.AbstractHandler;
+import org.eclipse.core.commands.ExecutionEvent;
+import org.eclipse.core.commands.ExecutionException;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.jface.action.Action;
+import org.eclipse.jface.action.ActionContributionItem;
+import org.eclipse.jface.action.IAction;
+import org.eclipse.jface.dialogs.ErrorDialog;
+import org.eclipse.jface.viewers.ISelection;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Menu;
+import org.eclipse.swt.widgets.MenuItem;
+import org.eclipse.ui.IWorkbenchWindow;
+import org.eclipse.ui.IWorkbenchWindowPulldownDelegate;
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.RuntimeActivator;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+
+/**
+ * Implements a dropdown button with builder actions.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class BuilderButtonDelegate extends AbstractHandler implements IWorkbenchWindowPulldownDelegate {
+	
+	// TODO: IWorkbenchWindowPulldownDelegate?
+	
+	private static String lastAction;
+	
+	private Menu menu;
+
+	public void init(IWorkbenchWindow window) {
+		// Initialized using getMenu()
+	}
+
+	public void run(IAction action) {
+		EditorState editor = EditorState.getActiveEditor();
+		if (editor == null) {
+			openError("No builders defined for this editor");
+			return;
+		}
+		
+		IBuilderMap builders = getBuilders(editor);
+		IBuilder builder = builders.get(lastAction);
+		if (builder == null && builders.getAll().size() > 0) {
+			builder = builders.getAll().iterator().next();
+		}
+		if (builder == null) {
+			openError("No builders defined for this editor");
+		} else {
+			builder.execute(editor, null);
+		}
+	}
+
+	public Object execute(ExecutionEvent event) throws ExecutionException {
+		run(null);
+		return null;
+	}
+	
+	public void selectionChanged(IAction action, ISelection selection) {
+		// Unused
+	}
+		
+	private void populateMenu(Menu menu) {
+		MenuItem dummy = new MenuItem(menu, SWT.PUSH);
+		dummy.setText("No builders defined for this editor");
+		
+		final EditorState editor = EditorState.getActiveEditor();
+		if (editor == null) return;
+		
+		IBuilderMap builders = getBuilders(editor);
+		if (builders.getAll().size() == 0) return;
+		
+		for (final IBuilder builder : builders.getAll()) {
+			IAction action = new Action(builder.getCaption()) {
+				@Override
+				public void run() {
+					lastAction = builder.getCaption();
+					builder.execute(editor, null);
+				}
+			};
+			ActionContributionItem item = new ActionContributionItem(action);
+			// item.fill(menu, Action.AS_PUSH_BUTTON);
+			item.fill(menu, menu.getItemCount());
+		}
+		
+		dummy.dispose();
+	}
+
+	private IBuilderMap getBuilders(EditorState editor) {
+		IBuilderMap builders;
+		try {
+			builders = editor.getDescriptor().createService(IBuilderMap.class);
+		} catch (BadDescriptorException e) {
+			Environment.logException("Could not load builder", e);
+			openError("Could not load builders");
+			throw new RuntimeException(e);
+		}
+		return builders;
+	}
+
+	private void openError(String message) {
+		Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
+		ErrorDialog.openError(null, "Spoofax/IMP builder", null, status);
+	}
+		
+	@Override
+	public void dispose() {
+		if (menu != null) {
+			menu.dispose();
+			menu = null;
+		}
+		super.dispose();
+	}
+
+	public Menu getMenu(Control parent) {
+		if (menu != null) {
+			menu.dispose();
+		}
+		menu = new Menu(parent);
+		populateMenu(menu);
+		return menu;
+	}
+
+}

Deleted: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/BuilderButtonDelegate.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/BuilderButtonDelegate.java	2009-11-25 09:03:16 UTC (rev 20299)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/BuilderButtonDelegate.java	2009-11-25 09:11:48 UTC (rev 20300)
@@ -1,132 +0,0 @@
-package org.strategoxt.imp.runtime.stratego;
-
-import org.eclipse.core.commands.AbstractHandler;
-import org.eclipse.core.commands.ExecutionEvent;
-import org.eclipse.core.commands.ExecutionException;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.jface.action.Action;
-import org.eclipse.jface.action.ActionContributionItem;
-import org.eclipse.jface.action.IAction;
-import org.eclipse.jface.dialogs.ErrorDialog;
-import org.eclipse.jface.viewers.ISelection;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.widgets.Control;
-import org.eclipse.swt.widgets.Menu;
-import org.eclipse.swt.widgets.MenuItem;
-import org.eclipse.ui.IWorkbenchWindow;
-import org.eclipse.ui.IWorkbenchWindowPulldownDelegate;
-import org.strategoxt.imp.runtime.EditorState;
-import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.RuntimeActivator;
-import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
-import org.strategoxt.imp.runtime.services.IBuilder;
-import org.strategoxt.imp.runtime.services.IBuilderMap;
-
-/**
- * Implements a dropdown button with builder actions.
- * 
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class BuilderButtonDelegate extends AbstractHandler implements IWorkbenchWindowPulldownDelegate {
-	
-	// TODO: IWorkbenchWindowPulldownDelegate?
-	
-	private static String lastAction;
-	
-	private Menu menu;
-
-	public void init(IWorkbenchWindow window) {
-		// Initialized using getMenu()
-	}
-
-	public void run(IAction action) {
-		EditorState editor = EditorState.getActiveEditor();
-		if (editor == null) {
-			openError("No builders defined for this editor");
-			return;
-		}
-		
-		IBuilderMap builders = getBuilders(editor);
-		IBuilder builder = builders.get(lastAction);
-		if (builder == null && builders.getAll().size() > 0) {
-			builder = builders.getAll().iterator().next();
-		}
-		if (builder == null) {
-			openError("No builders defined for this editor");
-		} else {
-			builder.execute(editor, null);
-		}
-	}
-
-	public Object execute(ExecutionEvent event) throws ExecutionException {
-		run(null);
-		return null;
-	}
-	
-	public void selectionChanged(IAction action, ISelection selection) {
-		// Unused
-	}
-		
-	private void populateMenu(Menu menu) {
-		MenuItem dummy = new MenuItem(menu, SWT.PUSH);
-		dummy.setText("No builders defined for this editor");
-		
-		final EditorState editor = EditorState.getActiveEditor();
-		if (editor == null) return;
-		
-		IBuilderMap builders = getBuilders(editor);
-		if (builders.getAll().size() == 0) return;
-		
-		for (final IBuilder builder : builders.getAll()) {
-			IAction action = new Action(builder.getCaption()) {
-				@Override
-				public void run() {
-					lastAction = builder.getCaption();
-					builder.execute(editor, null);
-				}
-			};
-			ActionContributionItem item = new ActionContributionItem(action);
-			// item.fill(menu, Action.AS_PUSH_BUTTON);
-			item.fill(menu, menu.getItemCount());
-		}
-		
-		dummy.dispose();
-	}
-
-	private IBuilderMap getBuilders(EditorState editor) {
-		IBuilderMap builders;
-		try {
-			builders = editor.getDescriptor().createService(IBuilderMap.class);
-		} catch (BadDescriptorException e) {
-			Environment.logException("Could not load builder", e);
-			openError("Could not load builders");
-			throw new RuntimeException(e);
-		}
-		return builders;
-	}
-
-	private void openError(String message) {
-		Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message);
-		ErrorDialog.openError(null, "Spoofax/IMP builder", null, status);
-	}
-		
-	@Override
-	public void dispose() {
-		if (menu != null) {
-			menu.dispose();
-			menu = null;
-		}
-		super.dispose();
-	}
-
-	public Menu getMenu(Control parent) {
-		if (menu != null) {
-			menu.dispose();
-		}
-		menu = new Menu(parent);
-		populateMenu(menu);
-		return menu;
-	}
-
-}

Copied: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileTrackingIOAgent.java (from rev 20285, spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/FileTrackingIOAgent.java)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileTrackingIOAgent.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileTrackingIOAgent.java	2009-11-25 09:11:48 UTC (rev 20300)
@@ -0,0 +1,50 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.HashSet;
+import java.util.Set;
+
+
+/**
+ * An IOAgent that keeps track of all files accessed.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class FileTrackingIOAgent extends EditorIOAgent {
+	private Set<String> tracked = new HashSet<String>();
+	
+	public Set<String> getTracked() {
+		return tracked;
+	}
+	
+	public void setTracked(Set<String> value) {
+		tracked = value;
+	}
+	
+	protected void track(String fn) {
+		tracked.add(getAbsolutePath(getWorkingDir(), fn));
+	}
+	
+	@Override
+	public File openFile(String fn) {
+		track(fn);
+		return super.openFile(fn);
+	}
+	
+	@Override
+	public InputStream openInputStream(String fn, boolean isDefinitionFile)
+			throws FileNotFoundException {
+		
+		if (!isDefinitionFile) track(fn);
+		return super.openInputStream(fn, isDefinitionFile);
+	}
+	
+	@Override
+	public int openRandomAccessFile(String fn, String mode) throws FileNotFoundException, IOException {
+		track(fn);
+		return super.openRandomAccessFile(fn, mode);
+	}
+}



From L.C.L.Kats at tudelft.nl  Wed Nov 25 10:24:17 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 25 Nov 2009 09:24:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20301 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <200911250924.nAP9OHSf022387@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-25 09:24:17 +0000 (Wed, 25 Nov 2009)
New Revision: 20301

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20301&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyTextAttribute.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Log:
Error dialogs when editor loading/building fails.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-11-25 09:11:48 UTC (rev 20300)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-11-25 09:24:17 UTC (rev 20301)
@@ -6,8 +6,13 @@
 import java.io.IOException;
 
 import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.resources.WorkspaceJob;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.generator.sdf2imp;
@@ -70,7 +75,9 @@
 			
 		} catch (RuntimeException e) {
 			Environment.logException("Unable to build descriptor for " + resource, e);
+			reportError(resource, "Unable to build descriptor for " + resource, e);
 		} catch (Error e) { // workspace thread swallows this >:(
+			reportError(resource, "Unable to build descriptor for " + resource, e);
 			Environment.logException("Unable to build descriptor for " + resource, e);
 		}
 	}
@@ -128,15 +135,13 @@
 			//context.getExceptionHandler().setEnabled(true);
 			return sdf2imp_jvm_0_0.instance.invoke(context, input);
 		} catch (StrategoErrorExit e) {
-			Environment.logException("Fatal error exit in dynamic builder, log:\n" + agent.getLog().trim(), e);
-			messageHandler.addMarkerFirstLine(mainFile, "Fatal error building descriptor:" + e.getMessage(), SEVERITY_ERROR);
-			StrategoConsole.activateConsole();
+			Environment.logException("Fatal error in dynamic builder, log:\n" + agent.getLog().trim(), e);
+			reportError(mainFile, "Fatal error in descriptor builder: " + e.getMessage(), e);
 			return null;
 		} catch (StrategoExit e) {
+			context.printStackTrace();
 			Environment.logException("Unexpected exit in dynamic builder, log:\n" + agent.getLog().trim(), e);
-			context.printStackTrace();
-			messageHandler.addMarkerFirstLine(mainFile, "Error building descriptor (see error log)", SEVERITY_ERROR);
-			StrategoConsole.activateConsole();
+			reportError(mainFile, "Unexpected exit in descriptor builder, log:" + agent.getLog().trim(), e);
 			return null;
 		} finally {
 			//context.getExceptionHandler().setEnabled(false);
@@ -145,6 +150,28 @@
 		}
 	}
 	
+	private void reportError(final IResource descriptor, final String message, final Throwable exception) {
+		Environment.assertLock();
+		
+		if (exception != null)
+			Environment.asynOpenErrorDialog("Dynamic editor descriptor loading", message, exception);
+		
+		if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
+			Job job = new WorkspaceJob("Add error marker") {
+				{ setSystem(true); } // don't show to user
+				@Override
+				public IStatus runInWorkspace(IProgressMonitor monitor) {
+					messageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
+					return Status.OK_STATUS;
+				}
+			};
+			job.setRule(descriptor);
+			job.schedule();
+		} else {
+			messageHandler.addMarkerFirstLine(descriptor, message, SEVERITY_ERROR);
+		}
+	}
+	
 	private static boolean isMainFile(IResource file) {
 		// TODO: Determine if a file is the main descriptor file by its contents?
 		// InputStream stream = agent.openInputStream(file);

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-11-25 09:11:48 UTC (rev 20300)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-11-25 09:24:17 UTC (rev 20301)
@@ -155,20 +155,20 @@
 			
 		} catch (BadDescriptorException e) {
 			Environment.logException("Error in descriptor " + descriptor, e);
-			reportError(source, "Error in descriptor: " + e.getMessage());
-			reportError(descriptor, e.getOffendingTerm(), "Error in descriptor: " + e.getMessage());
+			reportError(source, "Error in descriptor: " + e.getMessage(), null);
+			reportError(descriptor, e.getOffendingTerm(), "Error in descriptor: " + e.getMessage(), e);
 		} catch (IOException e) {
 			Environment.logException("Error reading descriptor " + descriptor, e);
-			reportError(source, "Internal error reading descriptor" + e.getMessage());
+			reportError(source, "Internal error reading descriptor" + e.getMessage(), e);
 		} catch (CoreException e) {
 			Environment.logException("Unable to load descriptor " + descriptor, e);
-			reportError(source, "Internal error loading descriptor: " + e.getMessage());
+			reportError(source, "Internal error loading descriptor: " + e.getMessage(), e);
 		} catch (RuntimeException e) {
 			Environment.logException("Unable to load descriptor " + descriptor, e);
-			reportError(source, "Internal error loading descriptor: " + e.getMessage());
+			reportError(source, "Internal error loading descriptor: " + e.getMessage(), e);
 		} catch (Error e) { // workspace thread swallows this >:(
 			Environment.logException("Unable to load descriptor " + descriptor, e);
-			reportError(source, "Internal error loading descriptor: " + e.getMessage());
+			reportError(source, "Internal error loading descriptor: " + e.getMessage(), e);
 			throw e;
 		} finally {
 			asyncMessageHandler.commitChanges();
@@ -189,9 +189,12 @@
 		return result != null ? result : packedDescriptor;
 	}
 	
-	private void reportError(final IResource descriptor, final String message) {
+	private void reportError(final IResource descriptor, final String message, Throwable exception) {
 		Environment.assertLock();
 		
+		if (exception != null)
+			Environment.asynOpenErrorDialog("Dynamic editor descriptor loading", message, exception);
+		
 		if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
 			Job job = new WorkspaceJob("Add error marker") {
 				{ setSystem(true); } // don't show to user
@@ -208,8 +211,11 @@
 		}
 	}
 	
-	private void reportError(final IResource descriptor, final IStrategoTerm offendingTerm, final String message) {
+	private void reportError(final IResource descriptor, final IStrategoTerm offendingTerm, final String message, final Throwable exception) {
 		Environment.assertLock();
+		
+		if (exception != null)
+			Environment.asynOpenErrorDialog("Dynamic editor descriptor loading", message, exception);
 
 		if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
 			Job job = new WorkspaceJob("Add error marker") {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-11-25 09:11:48 UTC (rev 20300)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-11-25 09:24:17 UTC (rev 20301)
@@ -6,8 +6,13 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.runtime.RuntimePlugin;
+import org.eclipse.jface.dialogs.ErrorDialog;
+import org.eclipse.ui.progress.UIJob;
 import org.spoofax.interpreter.adapter.aterm.UnsharedWrappedATermFactory;
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.core.InterpreterException;
@@ -196,4 +201,15 @@
 	public static void logException(Throwable t) {
 		RuntimePlugin.getInstance().logException(null, t);
 	}
+
+	public static void asynOpenErrorDialog(final String caption, final String message, final Throwable exception) {
+		new UIJob("Report error") {
+			@Override
+			public IStatus runInUIThread(IProgressMonitor monitor) {
+				Status status = new Status(IStatus.ERROR, RuntimeActivator.PLUGIN_ID, message, exception);
+				ErrorDialog.openError(null, caption, null, status);
+				return Status.OK_STATUS;
+			}
+		}.schedule();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyTextAttribute.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyTextAttribute.java	2009-11-25 09:11:48 UTC (rev 20300)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyTextAttribute.java	2009-11-25 09:24:17 UTC (rev 20301)
@@ -10,7 +10,12 @@
  * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class LazyTextAttribute extends TextAttribute{
+public class LazyTextAttribute extends TextAttribute {
+    
+    // FIXME: colorer deadlock situation can still occur
+    //        PresentationController.damage() runs in the main thread and wants to acquire
+    //        our fWorkItems lock while we need the main thread to yield for SWT...
+    //        maybe we can preinitialize the colors in the factory using an async call?
 	
 	private final LazyColor foreground;
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-25 09:11:48 UTC (rev 20300)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-25 09:24:17 UTC (rev 20301)
@@ -263,7 +263,7 @@
 		assert Thread.holdsLock(getSyncRoot());
 		assert feedback != null;
 
-		// TODO: use tracking io agent to find out what to clear
+		// TODO: use FileTrackingIOAgent to find out what to clear
 		// UNDONE: messages.clearAllMarkers();
 		messages.clearMarkers(resource);
 



From L.C.L.Kats at tudelft.nl  Wed Nov 25 10:36:14 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 25 Nov 2009 09:36:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20302 - LennartKats -
	in strategoxt/trunk: stratego-front/pp stratego-front/syn
	strc-core/lib/stratego/strc/front
	strc-core/lib/stratego/strc/pp strc-core/tests/test1
Message-ID: <200911250936.nAP9aEKK022533@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-25 09:36:14 +0000 (Wed, 25 Nov 2009)
New Revision: 20302

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20302&view=rev

Modified:
   strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp
   strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp
   strategoxt/trunk/stratego-front/syn/Stratego-Sugar-StringQuotations.sdf
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
   strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str
   strategoxt/trunk/strc-core/tests/test1/test112.str

Log:
- Fixed the string quotation test case after the latest changes
- Added escaping of string quotation operators: $[$ is now an escaped square bracket in a $[ square bracket quotation ]
  (not entirely sure if I like it better than ["["] though, now that I added it).

Changes:

Modified: strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp
===================================================================
--- strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp	2009-11-25 09:24:17 UTC (rev 20301)
+++ strategoxt/trunk/stratego-front/pp/Stratego-Sugar-pretty.pp	2009-11-25 09:36:14 UTC (rev 20302)
@@ -277,6 +277,7 @@
    StringEscape3                                      -- H hs=0 [ KW["("] _2 KW[")"] ],
    StringEscape4                                      -- H hs=0 [ KW["<"] _2 KW[">"] ],
    QStr                                               -- _1,
+   QBr                                                -- H hs=0 [ KW["$"] _1 KW["$"] ],
    ExtSDefInl                                         -- V is=2 [H  [KW["external"] H hs=0 [_1 KW["("] H  [_2]] KW["|"] H hs=0 [H  [_3] KW[")"]] KW["="]] _4],
    ExtSDefInl.2:iter-star-sep                         -- _1 KW[","],
    ExtSDefInl.3:iter-star-sep                         -- _1 KW[","],

Modified: strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp
===================================================================
--- strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp	2009-11-25 09:24:17 UTC (rev 20301)
+++ strategoxt/trunk/stratego-front/pp/Stratego-pretty.pp	2009-11-25 09:36:14 UTC (rev 20302)
@@ -263,6 +263,7 @@
    StringEscape3                                      -- H hs=0 [ KW["("] _2 KW[")"] ],
    StringEscape4                                      -- H hs=0 [ KW["<"] _2 KW[">"] ],
    QStr                                               -- _1,
+   QBr                                                -- H hs=0 [ KW["$"] _1 KW["$"] ],
    ExtSDefInl                                         -- V is=2 [H  [KW["external"] H hs=0 [_1 KW["("] H  [_2]] KW["|"] H hs=0 [H  [_3] KW[")"]] KW["="]] _4],
    ExtSDefInl.2:iter-star-sep                         -- _1 KW[","],
    ExtSDefInl.3:iter-star-sep                         -- _1 KW[","],

Modified: strategoxt/trunk/stratego-front/syn/Stratego-Sugar-StringQuotations.sdf
===================================================================
--- strategoxt/trunk/stratego-front/syn/Stratego-Sugar-StringQuotations.sdf	2009-11-25 09:24:17 UTC (rev 20301)
+++ strategoxt/trunk/stratego-front/syn/Stratego-Sugar-StringQuotations.sdf	2009-11-25 09:36:14 UTC (rev 20302)
@@ -3,10 +3,10 @@
 
   sorts
     StringQuotation
-    StringQuotedPart1 StringQuotedChars1
-    StringQuotedPart2 StringQuotedChars2
-    StringQuotedPart3 StringQuotedChars3
-    StringQuotedPart4 StringQuotedChars4
+    StringQuotedPart1 StringQuotedChars1 DollarOpen1 DollarClose1 QuotedBracket1 Dollar1
+    StringQuotedPart2 StringQuotedChars2 DollarOpen2 DollarClose2 QuotedBracket2 Dollar2
+    StringQuotedPart3 StringQuotedChars3 DollarOpen3 DollarClose3 QuotedBracket3 Dollar3
+    StringQuotedPart4 StringQuotedChars4 DollarOpen4 DollarClose4 QuotedBracket4  Dollar4
     Padding
 
   context-free syntax
@@ -14,30 +14,44 @@
     StringQuotation -> PreTerm
 
   syntax
-  
-    %% TODO: use $[ to escape [ ?
 
     StringQuotation -> <PreTerm-CF>
 
     "$" "[" Padding StringQuotedPart1*               "]"    -> StringQuotation {cons("StringQuotation1") }
      Padding "[" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "]"    -> StringQuotedPart1 {cons("StringEscape1")}
     <StringQuotedChars1-LEX>                                -> StringQuotedPart1 {cons("QStr")}
-    ~[\[\]]+                                                -> <StringQuotedChars1-LEX>
+    <Dollar1-LEX>                                           -> StringQuotedPart1 {cons("QStr")}
+    "$" <QuotedBracket1-LEX> "$"                            -> StringQuotedPart1 {cons("QBr")}
+    ~[\[\]\$]+                                              -> <StringQuotedChars1-LEX>
+    [\[\]]                                                  -> <QuotedBracket1-LEX>
+    "$"                                                     -> <Dollar1-LEX>
 
     "$" "{" Padding StringQuotedPart2*               "}"    -> StringQuotation {cons("StringQuotation2") }
      Padding "{" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "}"    -> StringQuotedPart2 {cons("StringEscape2")}
     <StringQuotedChars2-LEX>                                -> StringQuotedPart2 {cons("QStr")}
-    ~[\{\}]+                                                -> <StringQuotedChars2-LEX>
+    <Dollar2-LEX>                                           -> StringQuotedPart2 {cons("QStr")}
+    "$" <QuotedBracket2-LEX> "$"                            -> StringQuotedPart2 {cons("QBr")}
+    ~[\{\}\$]+                                              -> <StringQuotedChars2-LEX>
+    [\{\}]                                                  -> <QuotedBracket2-LEX>
+    "$"                                                     -> <Dollar2-LEX>
 
     "$" "(" Padding StringQuotedPart3*              ")"     -> StringQuotation {cons("StringQuotation3") }
     Padding "(" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ")"     -> StringQuotedPart3 {cons("StringEscape3")}
     <StringQuotedChars3-LEX>                                -> StringQuotedPart3 {cons("QStr")}
-    ~[\[\]]*                                                -> <StringQuotedChars3-LEX>
+    <Dollar3-LEX>                                           -> StringQuotedPart3 {cons("QStr")}
+    "$" <QuotedBracket3-LEX> "$"                            -> StringQuotedPart3 {cons("QBr")}
+    ~[\(\)\$]+                                              -> <StringQuotedChars3-LEX>
+    [\(\)]                                                  -> <QuotedBracket3-LEX>
+    "$"                                                     -> <Dollar3-LEX>
 
     "$" "<" Padding StringQuotedPart4*               ">"    -> StringQuotation {cons("StringQuotation4") }
     Padding "<"  <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ">"    -> StringQuotedPart4 {cons("StringEscape4")}
-    <StringQuotedChars4-LEX>                                -> StringQuotedChars4 {cons("QStr")}
-    ~[\<\>]+                                                -> <StringQuotedChars4-LEX>
+    <StringQuotedChars4-LEX>                                -> StringQuotedPart4 {cons("QStr")}
+    <Dollar4-LEX>                                           -> StringQuotedPart4 {cons("QStr")}
+    "$" <QuotedBracket4-LEX> "$"                            -> StringQuotedPart4 {cons("QBr")}
+    ~[\<\>\$]+                                              -> <StringQuotedChars4-LEX>
+    [\<\>]                                                  -> <QuotedBracket4-LEX>
+    "$"                                                     -> <Dollar4-LEX>
    
     %% Padding is a dummy lexical that will contain the indentation prefix of every quotation
     <Padding-LEX>                                           -> Padding
@@ -45,7 +59,12 @@
 
   lexical restrictions
 
-    StringQuotedChars1 -/- ~[\[\]]   
-    StringQuotedChars2 -/- ~[\{\}]    
-    StringQuotedChars3 -/- ~[\(\)]    
-    StringQuotedChars4 -/- ~[\<\>]
+    StringQuotedChars1 -/- ~[\[\]\$]   
+    StringQuotedChars2 -/- ~[\{\}\$]    
+    StringQuotedChars3 -/- ~[\(\)\$]    
+    StringQuotedChars4 -/- ~[\<\>\$]
+    Dollar1            -/- [\[\]] . [\$]
+    Dollar2            -/- [\{\}] . [\$]
+    Dollar3            -/- [\(\)] . [\$]
+    Dollar4            -/- [\<\>] . [\$]
+

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-11-25 09:24:17 UTC (rev 20301)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-11-25 09:36:14 UTC (rev 20302)
@@ -24,30 +24,9 @@
       t'*     := <normalize-quoted(|s)> t*
     ; t''*    :=  t'*{"quoted"}
   
-  /*
   normalize-quoted(|padding) =
-    // Add initial padding before each fragment's first newline
-    if ?[QStr(_) | _] then
-      [QStr(<conc-strings> (padding, <id>) => initial) | id]
-    ; where(
-        padding'       := <string-as-chars(get-padding-chars)> initial
-      ; padding-length := <string-length> padding'
-      )
-    ; [id | map(try(QStr(<conc-strings> (padding', <id>))))]
-    else
-      where(
-        padding-length := <string-length> padding
-      )
-    ; map(try(QStr(<conc-strings> (padding, <id>))))
-    end
-  ; map(try(DesugarQuoted))
-  ; string-quotation-padd(|padding-length)
-  ; try(at-last([QStr(string-as-chars(rtrim(' ' + '\t')))]))
-  ; map(try(DesugarQStr))
-  */
-  
-  normalize-quoted(|padding) =
-    if ?[QStr(_) | _] then
+    map(try(DesugarQBr))
+  ; if ?[QStr(_) | _] then
       // Combine padding before the initial string with the padding inside it
       [QStr(<conc-strings> (padding, <id>) => initial) | id]
     ; where(
@@ -170,3 +149,6 @@
   DesugarQStr :
     QStr(s) -> Anno(Str(s), Op("Nil", []))
 
+  DesugarQBr :
+    QBr(s) -> QStr(s)
+

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str	2009-11-25 09:24:17 UTC (rev 20301)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/pp/stratego2abox.str	2009-11-25 09:36:14 UTC (rev 20302)
@@ -356,6 +356,9 @@
   
   stratego-to-abox :
     QStr(i) -> S(i)
+  
+  stratego-to-abox :
+    QBr(i) -> |[ H hs=0 [ "$" ~lit:i "$"] ]|
 
   stratego-to-abox =
     ?Char(i)

Modified: strategoxt/trunk/strc-core/tests/test1/test112.str
===================================================================
--- strategoxt/trunk/strc-core/tests/test1/test112.str	2009-11-25 09:24:17 UTC (rev 20301)
+++ strategoxt/trunk/strc-core/tests/test1/test112.str	2009-11-25 09:36:14 UTC (rev 20302)
@@ -42,6 +42,21 @@
   b
 ";
     !$[ 1
-[2]3]; show(|7) =>
+["2"]3]; show(|7) =>
 "1
-23"
+23";
+
+    z := "z";
+    !$< <z> <z> $<z>$ >; show(|8) =>
+"z z $z$";
+
+    !$<$ $<x>$ <z>$$>$$ >; show(|9) =>
+"$ $1
+   2$ z$>$";
+
+    !$<$ $<x>$ <z>$<">">$ >; show(|10) =>
+"$ $1
+   2$ z$>$";
+
+    !${ block {"{"} foo $}$  }; show(|11) =>
+"block { foo }"



From m.dejonge at tudelft.nl  Wed Nov 25 11:38:09 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 25 Nov 2009 10:38:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20303 - MaartjeDeJonge
	- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope
Message-ID: <200911251038.nAPAc9hC023463@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-25 10:38:09 +0000 (Wed, 25 Nov 2009)
New Revision: 20303

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20303&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA4.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA5.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA6.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB4.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB5.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB6.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC4.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD4.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testE1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testE2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testE3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testF1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testF2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testF3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testFile.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testFile2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testG1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testG2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testG3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH4.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testI1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testI2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testI3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testI4.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testI5.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testI6.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testJ1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testJ2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testK1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testK2.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testK3.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testL1.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testL2.java

Log:
adding bridge-parsing testfiles as scope errors

Changes (first 1000 lines of the diffs):

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA1.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,11 @@
+/* Peak program - Incomplete */
+class C {
+	void m() {
+		if (true) {
+			for (int i; i < 10; i++) { //@START
+				if (true) {
+					if (true) {
+						int a;	/* 	} 	} 	} 	*/ //@END
+		}
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA2.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,10 @@
+/* Peak program - Incomplete */
+class C {  //@START
+	void m() {
+		if (true) {
+			for (int i; i < 10; i++) {
+				if (true) {
+					if (true) {
+						int a;
+					}
+				} 	/* 	}	} 	} }*/ //@END

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA3.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA3.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA3.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,13 @@
+/* Peak program - Incomplete */
+class C {
+	void m() {
+		if (true) { //@START
+			for (int i; i < 10; i++) {
+				if (true) {
+					if (true) {
+						int a;
+					}
+				}
+			}	//} //@END
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA4.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA4.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA4.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,12 @@
+/* Peak program - Incomplete */
+class C {
+	void m() {
+		if (true) {
+			for (int i; i < 10; i++) { //@START
+				if (true) {
+					if (true) {
+						int a;
+					} 	/*	} 	} 	*/ //@END
+		}
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA5.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA5.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA5.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,14 @@
+/* Peak program - Missing start*/
+class C {
+	void m() {
+		if (true) {
+			for (int i; i < 10; i++) {
+				if (true) {
+					if (true)// { //@START
+						int a;
+					} //@END
+				}
+			}
+		}
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA6.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA6.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testA6.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,14 @@
+/* Peak program - Two errors, two missing start braces */
+class C {
+	void m() {
+		if (true) //{ //@START
+			for (int i; i < 10; i++) //{
+				if (true) {
+					if (true) {
+						int a;
+					}
+				}
+			}
+		} //@END
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB1.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,14 @@
+/* Bumpy road - Incomplete */
+class C {
+	void m() { //@START
+		int a;	//} //@END
+	void n() {
+		int b;
+	}
+	void o() {
+		int c;
+	}
+	void p() {
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB2.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,13 @@
+/* Bumpy road - Incomplete */
+class C { //@START
+	void m() {
+		int a;
+	}
+	void n() {
+		int b;
+	}
+	void o() {
+		int c;
+	}
+	void p() {
+		int d; /*	} }*/ //@END

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB3.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB3.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB3.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,15 @@
+/* Bumpy road - Incomplete */
+class C {
+	void m() {
+		int a;
+	}
+	void n() {
+		int b;
+	}
+	void o(/*) { */ //@START
+		int c;
+	} //@END
+	void p() {
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB4.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB4.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB4.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,15 @@
+/* Bumpy road - Incomplete */
+class C {
+	void m() {
+		int a;
+	}
+	void n() {
+		int b;
+	}
+	void o(/*)*/ { //@START
+		int c;
+	} //@END
+	void p() {
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB5.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB5.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB5.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,13 @@
+/* Bumpy road - Incomplete */
+class C {
+	void m() {
+		int a;
+	}
+	void n() {
+		int b;
+	}
+	void o() {
+		int c;
+	}
+	void p() { int d; 	/*}*/ //@START @END
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB6.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB6.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testB6.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,15 @@
+/* Bumpy road - Double error, extra right brace and missing right brace */
+class C {
+	void m() { //@START
+		int a;
+	}} //@END
+	void n() {
+		int b;
+	}
+	void o() { //@START
+		int c;
+	/*}*/ //@END
+	void p() {
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC1.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,39 @@
+/* Rocky mountains - Incomplete */
+class C {
+	int a;
+	void C() {
+		int b;
+	}
+	void m() {
+		if (true) {
+			if (true) {
+				int c;
+				int d;
+			}
+		}
+		if (true) {
+			int e;
+		}
+		int f;
+	}
+	class D {
+		void m() {
+			if (true) { //@START
+				for (int i=0;i<10;i++) {
+					int g;
+					int h;
+					if (true) {	/*	int j;	} }	}*/ //@END
+		}
+		void n() {
+			int k;
+		}
+	}
+	int n() {
+		return 0;
+	}
+}
+class E {
+	void m() {
+		int a;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC2.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,42 @@
+/* Rocky mountains - Incomplete */
+class C {
+	int a;
+	void C() { //@START
+		int b; 	//} //@END
+	void m() {
+		if (true) {
+			if (true) {
+				int c;
+				int d;
+			}
+		}
+		if (true) {
+			int e;
+		}
+		int f;
+	}
+	class D {
+		void m() {
+			if (true) {
+				for (int i=0;i<10;i++) {
+					int g;
+					int h;
+					if (true) {
+						int j;
+					}
+				}
+			}
+		}
+		void n() {
+			int k;
+		}
+	}
+	int n() {
+		return 0;
+	}
+}
+class E {
+	void m() {
+		int a;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC3.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC3.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC3.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,42 @@
+/* Rocky mountains - Incomplete */
+class C { //@START
+	int a;
+	void C() {
+		int b;
+	}
+	void m() {
+		if (true) {
+			if (true) {
+				int c;
+				int d;
+			}
+		}
+		if (true) {
+			int e;
+		}
+		int f;
+	}
+	class D {
+		void m() {
+			if (true) {
+				for (int i=0;i<10;i++) {
+					int g;
+					int h;
+					if (true) {
+						int j;
+					}
+				}
+			}
+		}
+		void n() {
+			int k;
+		}
+	}
+	int n() {
+		return 0; /*	}} */ //@END
+		
+class E {
+	void m() {
+		int a;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC4.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC4.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testC4.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,43 @@
+/* Rocky mountains - Missing start */
+class C {
+	int a;
+	void C() {
+		int b;
+	}
+	void m() {
+		if (true) {
+			if (true/*) { */ //@START
+				int c;
+				int d;
+			} //@END
+		}
+		if (true) {
+			int e;
+		}
+		int f;
+	}
+	class D {
+		void m() {
+			if (true) {
+				for (int i=0;i<10;i++) {
+					int g;
+					int h;
+					if (true) {
+						int j;
+					}
+				}
+			}
+		}
+		void n() {
+			int k;
+		}
+	}
+	int n() {
+		return 0;
+	}
+}
+class E {
+	void m() {
+		int a;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD1.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,29 @@
+/* Misinterpreted statements - if - Incomplete */
+class C {
+	void m() {
+		int a;
+		if (true) {
+			int b;
+		}
+	}
+	void n() {
+		int a;
+		if (true) {
+			int b;
+			if (true) { //@START
+				int c;
+				int d; //} //@END
+		}
+		int c;
+	}
+	void o() {
+		int a;
+		if (true) {
+			int b;
+		}
+		if (true) {
+			int c;
+		}
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD2.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,29 @@
+/* Misinterpreted statements - if - Incomplete */
+class C {
+	void m() {
+		int a;
+		if (true) {
+			int b;
+		}
+	}
+	void n() {
+		int a;
+		if (true) {
+			int b;
+			if (true) {
+				int c;
+				int d;
+			}
+		}
+		int c;
+	}
+	void o() {
+		int a;
+		if (true) { //@START
+			int b;		//} //@END
+		if (true) {
+			int c;
+		}
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD3.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD3.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD3.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,29 @@
+/* Misinterpreted statements - if - Incomplete */
+class C {
+	void m() {
+		int a;
+		if (true) { //@START
+			int b;	//	} //@END
+	}
+	void n() {
+		int a;
+		if (true) {
+			int b;
+			if (true) {
+				int c;
+				int d;
+			}
+		}
+		int c;
+	}
+	void o() {
+		int a;
+		if (true) {
+			int b;
+		}
+		if (true) {
+			int c;
+		}
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD4.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD4.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testD4.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,29 @@
+/* Misinterpreted statements - if - Incomplete */
+class C {
+	void m() {
+		int a;
+		if (true) {
+			int b;
+		}
+	}
+	void n() {
+		int a;
+		if (true) {
+			int b;
+			if (true) {
+				int c;
+				int d;
+			}
+		}
+		int c;
+	}
+	void o() {
+		int a;
+		if (true) {
+			int b;
+		}
+		if (true) { //@START
+			int c;	//	} //@END
+		int d;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testE1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testE1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testE1.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,17 @@
+/* Misinterpreted statements - for - Incomplete */
+class C {
+	void m() {
+		for (int i=0;i<10;i++/*) {*/ //@START
+			int a;
+		} //@END
+	}
+	void n() {
+		for (int i=0;i<10;i++) {
+			for (int j=0;j<10;j++) {
+				int a;
+			}
+			int b;
+		}
+		int c;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testE2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testE2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testE2.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,17 @@
+/* Misinterpreted statements - for - Incomplete */
+class C {
+	void m() {
+		for (int i=0;i<10;i++) {
+			int a;
+		}
+	}
+	void n() {
+		for (int i=0;i<10;i++/*) {*/ //@START
+			for (int j=0;j<10;j++) {
+				int a;
+			}
+			int b;
+		} //@END
+		int c;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testE3.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testE3.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testE3.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,16 @@
+/* Misinterpreted statements - for - Incomplete */
+class C {
+	void m() {
+		for (int i=0;i<10;i++) {
+			int a;
+		}
+	}
+	void n() {
+		for (int i=0;i<10;i++) {
+			for (int j=0;j<10;j++) { //@START
+				int a; //} //@END
+			int b;
+		}
+		int c;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testF1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testF1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testF1.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,24 @@
+/* Several statements in a row - Incomplete */
+class C {
+	int a;
+	int b;
+	public C() {
+		int a;
+	}
+	int c;
+	void m() {
+		int a;
+		if (true) { //@START
+			int a;
+			int b; 	//} @END
+		int b;
+		if (true) {
+			int a;
+		}
+	}
+	int d;
+	void n() {
+		int a;
+	}
+	int e;
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testF2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testF2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testF2.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,24 @@
+/* Several statements in a row - Incomplete */
+class C {
+	int a;
+	int b;
+	public C() {
+		int a;
+	}
+	int c;
+	void m() { //@START
+		int a;
+		if (true) {
+			int a;
+			int b;
+		}
+		int b;
+		if (true) {
+			int a;
+		}	//} //@END
+	int d;
+	void n() {
+		int a;
+	}
+	int e;
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testF3.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testF3.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testF3.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,24 @@
+/* Several statements in a row - Incomplete */
+class C {
+	int a;
+	int b;
+	public C() { //@START
+		int a;	//} @END
+	int c;
+	void m() {
+		int a;
+		if (true) {
+			int a;
+			int b;
+		}
+		int b;
+		if (true) {
+			int a;
+		}
+	}
+	int d;
+	void n() {
+		int a;
+	}
+	int e;
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testFile.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testFile.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testFile.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,41 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+class X  
+{ 
+  private int method1()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+
+  private int method2()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+
+  private int method3()
+  { 
+    bla();
+    if(true) //@START
+    { 
+      bla();
+      int i = 1; /*}*/ //@END
+    return 2;
+  }
+
+  private int method4()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testFile2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testFile2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testFile2.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,34 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+class X  
+{ 
+  
+  private int method2()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+
+  private int method3()
+  { 
+    bla();
+    if(true) //@START
+    { 
+      bla();
+      int i = 1; /*}*/ //@END
+    return 2;
+  }
+
+  private int method4()
+  { 
+    bla();
+    bla();
+    int i = 1;
+    return 2;
+  }
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testG1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testG1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testG1.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,36 @@
+/* Statements with different structure - Incomplete */
+class C {
+	public C() {
+		int a;
+		do {
+			int b;
+			int c;
+		} while (true);
+		int d;
+	}
+	void m() throws Exception {
+		int a;
+		try { //@START
+			int a;
+			int b; 		//} @END
+		catch (Exception e) {
+			throw new Exception();
+		}
+		int b;
+	}
+	void n() {
+		int a;
+		switch(a) {
+			case 0:
+			int b;
+			break;
+			case 3:
+			int s;
+			break;
+		}
+		int b;
+	}
+	void o() {
+		int a = ((3 + 5) > 4) ? n() : m();
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testG2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testG2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testG2.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,36 @@
+/* Statements with different structure - Incomplete */
+class C {
+	public C() {
+		int a;
+		do { //@START
+			int b;
+			int c;
+		} while (true//); @END
+		int d;
+	}
+	void m() throws Exception {
+		int a;
+		try {
+			int a;
+			int b;
+		} catch (Exception e) {
+			throw new Exception();
+		}
+		int b;
+	}
+	void n() {
+		int a;
+		switch(a) {
+			case 0:
+			int b;
+			break;
+			case 3:
+			int s;
+			break;
+		}
+		int b;
+	}
+	void o() {
+		int a = ((3 + 5) > 4) ? n() : m();
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testG3.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testG3.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testG3.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,36 @@
+/* Statements with different structure - Incomplete */
+class C {
+	public C() {
+		int a;
+		do {
+			int b;
+			int c;
+		} while (true);
+		int d;
+	}
+	void m() throws Exception {
+		int a;
+		try {
+			int a;
+			int b;
+		} catch (Exception e) {
+			throw new Exception();
+		}
+		int b;
+	}
+	void n() {
+		int a;
+		switch(a) {
+			case 0:
+			int b;
+			break;
+			case 3:
+			int s;
+			break;
+		}
+		int b;
+	}
+	void o() {
+		int a = ((3 + 5) > 4) ? n(/*)*/ : m()/*;*/ //@START @END
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH1.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH1.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH1.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,19 @@
+/* Method declarations - Incomplete */
+class C {
+	void m(  /*) {*/ //@START
+		int a;
+		int b;
+	} //@END
+	void n(int a) {
+		int b;
+		int c;
+	}
+	void o(int a, int b) {
+		int c;
+		int d;
+	}
+	void p(int a, int b, int c) {
+		int d;
+		int e;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH2.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH2.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH2.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,19 @@
+/* Method declarations - Incomplete */
+class C {
+	void m() {
+		int a;
+		int b;
+	}
+	void n(int a/*) { */ //@START
+		int b;
+		int c;
+	} //@END
+	void o(int a, int b) {
+		int c;
+		int d;
+	}
+	void p(int a, int b, int c) {
+		int d;
+		int e;
+	}
+}

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH3.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH3.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Scope/testH3.java	2009-11-25 10:38:09 UTC (rev 20303)
@@ -0,0 +1,19 @@
+/* Method declarations - Incomplete */
+class C {
+	void m() {
+		int a;
+		int b;
+	}
+	void n(int a) {
+		int b;
+		int c;
+	}
+	void o(int a, int b/*)*/ { //@START
+		int c;
+		int d;

(332 diff lines omitted)


From m.dejonge at tudelft.nl  Wed Nov 25 12:46:14 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 25 Nov 2009 11:46:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20304 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: .
	src/evaluating src/tests
Message-ID: <200911251146.nAPBkEPL024369@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-25 11:46:14 +0000 (Wed, 25 Nov 2009)
New Revision: 20304

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20304&view=rev

Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_WriteStatistics.java

Log:
aspectJ in separate project

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath	2009-11-25 10:38:09 UTC (rev 20303)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/.classpath	2009-11-25 11:46:14 UTC (rev 20304)
@@ -3,8 +3,9 @@
 	<classpathentry excluding="evaluationData/" kind="src" path="src"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
-	<classpathentry kind="src" path="/org.spoofax.jsglr [spoofax-recovery branch]"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/RecoveryLogging"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.aterm"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.jsglr [spoofax-recovery branch]"/>
 	<classpathentry kind="src" path="/strc-java"/>
 	<classpathentry kind="con" path="org.eclipse.ajdt.core.ASPECTJRT_CONTAINER"/>
 	<classpathentry kind="output" path="bin"/>

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-25 10:38:09 UTC (rev 20303)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java	2009-11-25 11:46:14 UTC (rev 20304)
@@ -7,6 +7,8 @@
 import java.util.ArrayList;
 
 import org.spoofax.jsglr.InvalidParseTableException;
+import logging.*;
+//import org.spoofax.jsglr.Main;
 import org.spoofax.jsglr.Main;
 import org.spoofax.jsglr.NoRecoveryRulesException;
 import org.spoofax.jsglr.ParseTable;

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-25 10:38:09 UTC (rev 20303)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-25 11:46:14 UTC (rev 20304)
@@ -2,9 +2,8 @@
 
 import java.util.ArrayList;
 import java.util.TreeMap;
+import logging.*;
 
-import recovery_logging.RegionLog;
-
 public class Statistics {
 	
 	/**

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-25 10:38:09 UTC (rev 20303)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-25 11:46:14 UTC (rev 20304)
@@ -2,10 +2,8 @@
 
 import java.io.FileNotFoundException;
 import java.util.ArrayList;
+import logging.*;
 
-import recovery_logging.FileLog;
-import recovery_logging.RecoveryLogging;
-
 public class Testcase {
 
 	private FileLog recoverLog;

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-25 10:38:09 UTC (rev 20303)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-25 11:46:14 UTC (rev 20304)
@@ -4,11 +4,13 @@
 import java.io.OutputStream;
 import java.io.PrintStream;
 import java.util.ArrayList;
+import logging.RecoveryLogging;
+import logging.*;
 
 import org.strategoxt.stratego_lib.system_about_0_0;
 
-import recovery_logging.RegionLog;
 
+
 public class WriteStatistics {
 
 	public static void writeConsole_Testrun(Testrun testrun) throws FileNotFoundException {

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-25 10:38:09 UTC (rev 20303)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-25 11:46:14 UTC (rev 20304)
@@ -11,7 +11,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import recovery_logging.RegionLog;
+import logging.RegionLog;
 
 import evaluating.*;
 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_WriteStatistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_WriteStatistics.java	2009-11-25 10:38:09 UTC (rev 20303)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_WriteStatistics.java	2009-11-25 11:46:14 UTC (rev 20304)
@@ -1,5 +1,7 @@
 package tests;
 
+import java.io.FileNotFoundException;
+
 import org.junit.Test;
 
 import evaluating.FilePaths;
@@ -15,7 +17,7 @@
 	}
 	
 	@Test
-	public void writeToConsole(){
+	public void writeToConsole() throws FileNotFoundException{
 		WriteStatistics.writeConsole_TestSuite(new Testsuite("MyTestCases", new FilePaths("Root")));
 	}
 	



From m.dejonge at tudelft.nl  Wed Nov 25 12:47:42 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 25 Nov 2009 11:47:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20305 - MaartjeDeJonge
	- sglr-recovery/trunk
Message-ID: <200911251147.nAPBlgr4024374@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-25 11:47:42 +0000 (Wed, 25 Nov 2009)
New Revision: 20305

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20305&view=rev

Added:
   sglr-recovery/trunk/RecoveryLogging/

Log:
Initial import.

Changes:



From m.dejonge at tudelft.nl  Wed Nov 25 12:59:10 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 25 Nov 2009 11:59:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20306 - MaartjeDeJonge
	- in sglr-recovery/trunk/RecoveryLogging: . src src/logging
Message-ID: <200911251159.nAPBxAJ5024530@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-25 11:59:10 +0000 (Wed, 25 Nov 2009)
New Revision: 20306

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20306&view=rev

Added:
   sglr-recovery/trunk/RecoveryLogging/.classpath
   sglr-recovery/trunk/RecoveryLogging/.project
   sglr-recovery/trunk/RecoveryLogging/bin/
   sglr-recovery/trunk/RecoveryLogging/src/
   sglr-recovery/trunk/RecoveryLogging/src/logging/
   sglr-recovery/trunk/RecoveryLogging/src/logging/ConsoleWriter.java
   sglr-recovery/trunk/RecoveryLogging/src/logging/FileLog.java
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
   sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java
   sglr-recovery/trunk/RecoveryLogging/src/logging/TimeMeasuring.aj

Log:
Logging aspects as separate project

Changes:

Added: sglr-recovery/trunk/RecoveryLogging/.classpath
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/.classpath	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/.classpath	2009-11-25 11:59:10 UTC (rev 20306)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry kind="con" path="org.eclipse.ajdt.core.ASPECTJRT_CONTAINER"/>
+	<classpathentry kind="src" path="/org.spoofax.jsglr [spoofax-recovery branch]">
+		<attributes>
+			<attribute name="org.eclipse.ajdt.inpath" value="org.eclipse.ajdt.inpath"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: sglr-recovery/trunk/RecoveryLogging/.project
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/.project	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/.project	2009-11-25 11:59:10 UTC (rev 20306)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>RecoveryLogging</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.ajdt.core.ajbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.ajdt.ui.ajnature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: sglr-recovery/trunk/RecoveryLogging/src/logging/ConsoleWriter.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/ConsoleWriter.java	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/ConsoleWriter.java	2009-11-25 11:59:10 UTC (rev 20306)
@@ -0,0 +1,17 @@
+package logging;
+
+public class ConsoleWriter {
+    
+    public static void writeToConsole(FileLog inputFile){
+        System.out.println(inputFile.getFileName());
+        for (RegionLog region : inputFile.getRegionInfo()) {
+            System.out.println("\t execution times: ");
+            System.out.println(region.getExecutionTimetable());
+            System.out.println("\t skipped fragment: ");
+            System.out.println(region.getSkippedFragment());
+            System.out.println("\t inspected fragments: ");
+            System.out.println(region.getInspectedFragments());
+        }        
+    }
+
+}

Added: sglr-recovery/trunk/RecoveryLogging/src/logging/FileLog.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/FileLog.java	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/FileLog.java	2009-11-25 11:59:10 UTC (rev 20306)
@@ -0,0 +1,27 @@
+package logging;
+
+import java.util.ArrayList;
+import java.util.TreeMap;
+
+public class FileLog {
+    private String fileName; 
+    private ArrayList<RegionLog> regionInfo;
+    
+    public FileLog(){
+        regionInfo=new ArrayList<RegionLog>();
+        fileName="";
+    }
+    public String getFileName() {
+        return fileName;
+    }
+    void setFileName(String fileName) {
+        this.fileName = fileName;
+    }
+    public ArrayList<RegionLog> getRegionInfo() {
+        return regionInfo;
+    }
+    void addRegionInfo(RegionLog region) {
+        regionInfo.add(region);
+    } 
+
+}

Added: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-11-25 11:59:10 UTC (rev 20306)
@@ -0,0 +1,80 @@
+package logging;
+
+import java.util.ArrayList;
+import org.spoofax.jsglr.FineGrainedRepair;
+import org.spoofax.jsglr.IndentInfo;
+import org.spoofax.jsglr.Main;
+import org.spoofax.jsglr.RecoveryConnector;
+import org.spoofax.jsglr.RegionRecovery;
+import org.spoofax.jsglr.SGLR;
+import org.spoofax.jsglr.StructureSkipSuggestion;
+
+public aspect RecoveryLogging extends TimeMeasuring{
+
+    private FileLog currentFile;
+    private RegionLog currentRegion;
+    private ArrayList<FileLog> recoveryInfoOfFiles;
+
+    public FileLog getFileLog() {
+        return currentFile;
+    }
+    
+    public ArrayList<FileLog> getRecoveryInfoOfFiles() {
+        return recoveryInfoOfFiles;
+    }
+
+    public RecoveryLogging(){
+        currentFile=new FileLog();
+        currentRegion=new RegionLog();
+        recoveryInfoOfFiles=new ArrayList<FileLog>();
+    }
+    
+    pointcut parsing(String x, String y, SGLR s): 
+        execution(long Main.parseFile(String, String, SGLR))&& args(x, y, s);
+
+    pointcut recovering():
+        execution(void RecoveryConnector.doRecoverSteps());
+    
+    pointcut timing():
+        execution(boolean RegionRecovery.selectErroneousFragment()) ||
+        execution(void FineGrainedRepair.findRecoverBranch(ArrayList<IndentInfo>, int)) ||
+        execution(void RecoveryConnector.doRecoverSteps());
+    
+    pointcut regionSelection(RegionRecovery rs):
+        execution(boolean RegionRecovery.selectErroneousFragment()) && target(rs);
+    
+    pointcut regionTesting(RegionRecovery rs, StructureSkipSuggestion regionTested):
+        execution(void RegionRecovery.testRegion(StructureSkipSuggestion)) && target(rs) && args(regionTested);
+   
+  
+    before(String x, String y, SGLR s): parsing(x, y, s) {
+        currentFile=new FileLog();
+        currentFile.setFileName(x);
+        //System.err.println(x);
+    }   
+    
+    after(RegionRecovery rs, StructureSkipSuggestion region): regionTesting(rs, region) {
+            currentRegion.addInspectedFragments(rs.getInputFragment(region));
+    }
+    
+    after(RegionRecovery rs): regionSelection(rs) {
+        if(rs.hasFoundErroneousRegion())
+            currentRegion.setSkippedFragment(rs.getErrorFragment());
+    }
+    
+    after(): recovering(){
+        currentFile.addRegionInfo(currentRegion);
+        currentRegion=new RegionLog();
+    }
+    
+    after(String x, String y, SGLR s): parsing(x, y, s) {
+       recoveryInfoOfFiles.add(currentFile);
+       //ConsoleWriter.writeToConsole(currentFile);
+       
+    } 
+    
+    @Override
+    protected void afterMethodExecuted(String methodName, long duration) {
+        currentRegion.addExecutionTime(methodName, duration);
+    }
+}

Added: sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-11-25 11:59:10 UTC (rev 20306)
@@ -0,0 +1,44 @@
+package logging;
+
+import java.util.ArrayList;
+import java.util.TreeMap;
+
+public class RegionLog {
+    private TreeMap<String, Long> executionTimetable;
+    private String skippedFragment;
+    private ArrayList<String> inspectedFragments;
+    
+    public RegionLog(){
+        executionTimetable=new TreeMap<String, Long>();
+        inspectedFragments=new ArrayList<String>();
+    }
+    
+    public TreeMap<String, Long> getExecutionTimetable() {
+        return executionTimetable;
+    }
+    void addExecutionTime(String methodName, long executionTime) {
+        executionTimetable.put(methodName, executionTime);
+    }
+    
+    public String getSkippedFragment() {
+        return skippedFragment;
+    }
+    
+    void setSkippedFragment(String skippedFragment) {
+        this.skippedFragment = skippedFragment;
+    }
+    
+    public ArrayList<String> getInspectedFragments() {
+        return inspectedFragments;
+    }
+    
+    void addInspectedFragments(String inspectedFragment) {
+        inspectedFragments.add(inspectedFragment);
+    }
+    
+    public long getRegionSelectionTime(){
+        if(!executionTimetable.containsKey("selectErroneousFragment"))
+            return -1;
+        return executionTimetable.get("selectErroneousFragment");
+    }
+}

Added: sglr-recovery/trunk/RecoveryLogging/src/logging/TimeMeasuring.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/TimeMeasuring.aj	                        (rev 0)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/TimeMeasuring.aj	2009-11-25 11:59:10 UTC (rev 20306)
@@ -0,0 +1,28 @@
+package logging;
+
+import java.util.TreeMap;
+
+public abstract aspect TimeMeasuring {
+    
+    private TreeMap<String, Long> execTimes;
+    
+    public TimeMeasuring(){
+        execTimes=new TreeMap<String, Long>();
+    }
+    
+    abstract pointcut timing();
+    
+    Object around(): timing() {
+        long beforeTime = System.currentTimeMillis();
+        try {
+            return proceed();
+        } finally {
+            String methodName=thisJoinPoint.getSignature().getName();
+            long duration=System.currentTimeMillis()-beforeTime;
+            execTimes.put(methodName, duration);          
+            afterMethodExecuted(methodName, duration);
+        }
+    }
+
+    protected abstract void afterMethodExecuted(String methodName, long duration);
+}



From m.dejonge at tudelft.nl  Wed Nov 25 13:01:04 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 25 Nov 2009 12:01:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20307 - MaartjeDeJonge
	- in spoofax/trunk/spoofax/org.spoofax.jsglr: . META-INF
	src/org/spoofax/jsglr
Message-ID: <200911251201.nAPC14KR024748@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-25 12:01:04 +0000 (Wed, 25 Nov 2009)
New Revision: 20307

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20307&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/.project
   spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java

Log:
recovery logging removed

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/.project
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/.project	2009-11-25 11:59:10 UTC (rev 20306)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/.project	2009-11-25 12:01:04 UTC (rev 20307)
@@ -11,7 +11,7 @@
 			</arguments>
 		</buildCommand>
 		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
+			<name>org.eclipse.ajdt.core.ajbuilder</name>
 			<arguments>
 			</arguments>
 		</buildCommand>
@@ -27,6 +27,7 @@
 		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>org.eclipse.ajdt.ui.ajnature</nature>
 		<nature>net.sourceforge.texlipse.builder.TexlipseNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 		<nature>org.eclipse.pde.PluginNature</nature>

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF	2009-11-25 11:59:10 UTC (rev 20306)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF	2009-11-25 12:01:04 UTC (rev 20307)
@@ -7,5 +7,6 @@
 Bundle-Vendor: Spoofax.org
 Require-Bundle: org.spoofax.aterm,
  org.junit,
- org.spoofax.interpreter.core
+ org.spoofax.interpreter.core,
+ org.aspectj.runtime
 Bundle-RequiredExecutionEnvironment: J2SE-1.5

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java	2009-11-25 11:59:10 UTC (rev 20306)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java	2009-11-25 12:01:04 UTC (rev 20307)
@@ -77,33 +77,23 @@
         sglr.getDisambiguator().setFilterCycles(detectCycles);
         sglr.getDisambiguator().setFilterAny(filter);
         
+        long parsingTime = parseFile(input, output, sglr);
+        
+        if(waitForProfiler)
+            System.in.read();
+        if(timing) {
+        	System.err.println("Parse table loading time : " + tableLoadingTime + "ms");
+        	System.err.println("Parsing time             : " + parsingTime + "ms");
+        }
+    }
+
+    public static long parseFile(String input, String output, SGLR sglr)
+            throws FileNotFoundException, IOException {
         InputStream fis = null;
         if(input == null)
             fis = System.in;
         else
             fis = new FileInputStream(input);
-        
-        //REMOVE
-        /*
-        for (int j = 0; j < 20; j++) {//MJ: just for performance testing
-            fis = new FileInputStream(input);
-            SGLR sglrNew = new SGLR(ptm.getFactory(), ptm.loadFromFile(parseTable));                     
-            SGLR.forceGC();
-            sglrNew.setCycleDetect(detectCycles);
-            sglrNew.setFilter(filter);
-            try {
-                sglrNew.parse(fis);
-            } catch (SGLRException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
-            }            
-            sglrNew.clear();
-            SGLR.forceGC();
-            sglrNew=null;
-        }
-        
-        */
-        ///*
         OutputStream ous = null;
         if(output != null)
             ous = new FileOutputStream(output);
@@ -123,13 +113,7 @@
             // Detailed message for other exceptions
             System.err.println("Parsing failed : " + e);
         }
-        
-        if(waitForProfiler)
-            System.in.read();
-        if(timing) {
-        	System.err.println("Parse table loading time : " + tableLoadingTime + "ms");
-        	System.err.println("Parsing time             : " + parsingTime + "ms");
-        }//*/
+        return parsingTime;
     }
 
     private static void usage() {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2009-11-25 11:59:10 UTC (rev 20306)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2009-11-25 12:01:04 UTC (rev 20307)
@@ -18,6 +18,14 @@
     private boolean useDebugMode;
     
     /**
+     * Says whether an erroneous region is found
+     * @return
+     */
+    public boolean hasFoundErroneousRegion() {
+        return hasFoundErroneousRegion;
+    }
+    
+    /**
      * Prints information about the selected regions to the console
      */
     public void setUseDebugMode(boolean useDebugMode) {
@@ -146,7 +154,6 @@
         }
     }
 
-    
     private boolean trySetErroneousRegion(ArrayList<StructureSkipSuggestion> regions) throws IOException {
         StructureSkipSuggestion aSkip=new StructureSkipSuggestion();
         int indexSkips=0;
@@ -154,21 +161,7 @@
         myParser.activeStacks.clear(); //undo success
         while (indexSkips < regions.size() && !successCriterion()) {
             aSkip = regions.get(indexSkips);            
-            logRecoverInfoBlock(getHistory().getFragment(aSkip.getStartSkip().getTokensSeen(), aSkip.getEndSkip().getTokensSeen()-1));           
-            IndentInfo endPos=aSkip.getEndSkip();
-            getHistory().setTokenIndex(endPos.getTokensSeen());
-            myParser.activeStacks.clear();
-            myParser.acceptingStack=null;
-            myParser.activeStacks.addAll(endPos.getStackNodes());
-            int nrOfParsedLines=0;
-            logRecoverInfo("CONTINUE PARSING: ");
-            while((myParser.activeStacks.size() > 0 && nrOfParsedLines<NR_OF_LINES_TILL_SUCCESS) || !getHistory().hasFinishedRecoverTokens()) {                       
-                getHistory().readRecoverToken(myParser); 
-                logRecoverInfo((char)myParser.currentToken);            
-                myParser.doParseStep();
-                if(getHistory().getTokenIndex()>errorDetectionLocation && myParser.currentToken=='\n')
-                    nrOfParsedLines++;
-            }
+            testRegion(aSkip);
             indexSkips++;            
         }
         hasFoundErroneousRegion=successCriterion();
@@ -179,6 +172,28 @@
         return hasFoundErroneousRegion;
     }
 
+    private void testRegion(StructureSkipSuggestion aSkip) throws IOException {
+        logRecoverInfoBlock(getInputFragment(aSkip));           
+        IndentInfo endPos=aSkip.getEndSkip();
+        getHistory().setTokenIndex(endPos.getTokensSeen());
+        myParser.activeStacks.clear();
+        myParser.acceptingStack=null;
+        myParser.activeStacks.addAll(endPos.getStackNodes());
+        int nrOfParsedLines=0;
+        logRecoverInfo("CONTINUE PARSING: ");
+        while((myParser.activeStacks.size() > 0 && nrOfParsedLines<NR_OF_LINES_TILL_SUCCESS) || !getHistory().hasFinishedRecoverTokens()) {                       
+            getHistory().readRecoverToken(myParser); 
+            logRecoverInfo((char)myParser.currentToken);            
+            myParser.doParseStep();
+            if(getHistory().getTokenIndex()>errorDetectionLocation && myParser.currentToken=='\n')
+                nrOfParsedLines++;
+        }
+    }
+
+    public String getInputFragment(StructureSkipSuggestion aSkip) {
+        return getHistory().getFragment(aSkip.getStartSkip().getTokensSeen(), aSkip.getEndSkip().getTokensSeen()-1);
+    }
+
     private boolean successCriterion() {
         return myParser.activeStacks.size() > 0 || myParser.acceptingStack!=null;
     }



From m.dejonge at tudelft.nl  Wed Nov 25 15:00:32 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 25 Nov 2009 14:00:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20308 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/Input: . Dryad
Message-ID: <200911251400.nAPE0WPO026668@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-25 14:00:32 +0000 (Wed, 25 Nov 2009)
New Revision: 20308

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20308&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break10.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break11.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break12.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break13.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break14.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break15.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break16.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break17.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break18.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break19.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break2.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break20.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break21.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break22.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break23.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break24.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break25.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break26.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break27.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break28.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break29.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break3.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break30.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break31.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break32.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break33.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break34.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break35.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break4.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break5.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break6.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break7.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break8.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break9.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break1.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break10.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break11.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break12.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break13.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break14.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break15.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break16.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break17.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break18.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break19.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break2.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break20.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break21.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break22.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break23.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break24.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break25.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break26.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break27.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break28.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break29.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break3.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break30.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break31.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break32.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break33.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break34.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break35.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break4.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break5.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break6.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break7.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break8.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break9.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break0.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break1.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break10.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break11.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break12.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break13.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break14.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break15.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break16.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break17.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break18.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break19.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break2.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break20.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break21.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break22.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break23.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break24.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break25.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break26.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break27.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break28.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break29.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break3.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break30.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break31.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break32.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break34.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break35.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break4.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break5.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break6.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break7.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break8.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break9.str.java

Log:
dryad @START @END

Changes (first 1000 lines of the diffs):

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str.java	2009-11-25 14:00:32 UTC (rev 20308)
@@ -0,0 +1,120 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits = //@START
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")      /* ERROR remove )*/    /* ERROR remove ) */ //@END
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str_java	2009-11-25 14:00:32 UTC (rev 20308)
@@ -0,0 +1,120 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits = //@START
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")  /* ERROR remove )*/   /* ERROR remove ) */ //@END
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break10.str.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break10.str.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break10.str.java	2009-11-25 14:00:32 UTC (rev 20308)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {/* ERROR remove } */ /* ERROR remove } */ //@START @END
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break11.str.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break11.str.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break11.str.java	2009-11-25 14:00:32 UTC (rev 20308)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {/* ERROR remove } */ /* ERROR remove } */ //@START @END
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break12.str.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break12.str.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break12.str.java	2009-11-25 14:00:32 UTC (rev 20308)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit /* ERROR remove |[ */ //@START
+         class Foo                 /* ERROR remove { */ void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]| //@END
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break13.str.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break13.str.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break13.str.java	2009-11-25 14:00:32 UTC (rev 20308)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {/* ERROR remove } */ /* ERROR remove } */ //@START @END
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break14.str.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break14.str.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break14.str.java	2009-11-25 14:00:32 UTC (rev 20308)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} } /* ERROR add */ } /* ERROR */ /* ERROR add */ } /* ERROR */ //@START @END
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break15.str.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break15.str.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break15.str.java	2009-11-25 14:00:32 UTC (rev 20308)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {/* ERROR remove } */ ~Semicolon /* ERROR remove } */ //@START @END
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }

(12569 diff lines omitted)


From m.dejonge at tudelft.nl  Wed Nov 25 15:45:23 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 25 Nov 2009 14:45:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20309 - MaartjeDeJonge
	- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad
Message-ID: <200911251445.nAPEjNFp027458@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-25 14:45:22 +0000 (Wed, 25 Nov 2009)
New Revision: 20309

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20309&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break10.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break11.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break12.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break13.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break14.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break15.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break16.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break17.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break18.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break19.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break2.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break20.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break21.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break22.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break23.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break24.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break25.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break26.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break27.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break28.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break29.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break3.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break30.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break31.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break32.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break33.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break34.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break35.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break4.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break5.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break6.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break7.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break8.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break9.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break1.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break10.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break11.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break12.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break13.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break14.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break15.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break16.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break17.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break18.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break19.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break2.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break20.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break21.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break22.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break23.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break24.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break25.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break26.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break27.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break28.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break29.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break3.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break30.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break31.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break32.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break33.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break34.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break35.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break4.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break5.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break6.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break7.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break8.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break9.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break0.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break1.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break10.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break11.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break12.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break13.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break14.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break15.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break16.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break17.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break18.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break19.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break2.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break20.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break21.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break22.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break23.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break24.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break25.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break26.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break27.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break28.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break29.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break3.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break30.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break31.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break32.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break34.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break35.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break4.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break5.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break6.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break7.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break8.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break9.str_java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break10.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break11.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break12.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break13.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break14.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break15.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break16.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break17.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break18.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break19.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break2.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break20.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break21.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break22.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break23.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break24.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break25.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break26.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break27.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break28.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break29.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break3.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break30.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break31.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break32.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break33.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break34.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break35.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break4.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break5.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break6.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break7.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break8.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break9.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break1.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break10.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break11.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break12.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break13.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break14.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break15.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break16.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break17.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break18.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break19.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break2.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break20.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break21.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break22.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break23.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break24.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break25.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break26.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break27.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break28.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break29.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break3.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break30.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break31.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break32.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break33.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break34.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break35.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break4.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break5.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break6.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break7.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break8.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.3.break9.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break0.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break1.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break10.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break11.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break12.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break13.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break14.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break15.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break16.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break17.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break18.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break19.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break2.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break20.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break21.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break22.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break23.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break24.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break25.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break26.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break27.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break28.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break29.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break3.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break30.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break31.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break32.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break34.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break35.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break4.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break5.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break6.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break7.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break8.str.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.break9.str.java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str_java

Log:


Changes (first 1000 lines of the diffs):

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str.java	2009-11-25 14:00:32 UTC (rev 20308)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str.java	2009-11-25 14:45:22 UTC (rev 20309)
@@ -1,120 +0,0 @@
-module test-java-traits
-
-imports
-  libstratego-lib
-  libdryad-compiler
-  java-traits
-
-strategies
-
-  main-test-java-traits = //@START
-    option-wrap(
-      fail-fast-option + test-only-option + general-options
-    , test-suite(
-        !"Java trait tests"
-      , 
-        testsuite-section(java-trait-tests   |"Rewrite to Java");
-        testsuite-section(trait-output-tests |"Rewrite to classes");
-        testsuite-section(class-trait-tests  |"Traits from classfiles");
-        testsuite-section(trait-error-tests  |"Error reporting")      /* ERROR remove )*/    /* ERROR remove ) */ //@END
-
-  test-traits(input, output) =
-    do-test(
-      input
-    , assimilate-java-traits; strip-annos
-    , input
-    , output
-    )
-  
-  /** Unit test: retrieve al error messages; compare. */
-  test-catch-error(input, output) =
-    do-test(
-      input
-    , catch-error
-    , input
-    , output
-    )
-
-  catch-error =
-    let provide-error(catch) =
-      scoped-set-config(!Stage(), !0,
-        assimilate-java-traits
-      );
-      
-      try(dryad-compiler(
-        ?DryadError(_, _); catch; fail // catch & abort at error
-      ))
-    in
-      collect-argument-invokes(provide-error)
-    end
-  
-/** Unit tests. */
-strategies
-
-  java-trait-tests = where(<set-config> (Stage(), 1));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , !compilation-unit |[ 
-         class Foo                 { void bar() {} }
-         abstract class $Trait_Bar { void bar() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 { void baz() {} }
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 {}
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
-    , !compilation-unit |[ 
-         class Foo                 { void required() {} ~Semicolon }
-         abstract class $Trait_Bar { void required(); }
-	   ]|
-	)
-  
-  trait-output-tests = where(<set-config> (Stage(), 4));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
-    )
-  
-  class-trait-tests =
-    where(
-      <set-config> (Stage(), 4);
-      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
-      <set-config> (Stage(), 1)
-    );
-    test-traits(
-      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
-    , ?[ compilation-unit |[ 
-           class Foo { void bar() {} }
-	     ]|
-	   , _ // bar
-	   ]
-    )
-
-  trait-error-tests =
-    test-catch-error(
-      !"class Foo with Undeclared {}"
-    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
-    );
-    test-catch-error(
-      !"class Foo with Bar {} trait Bar { void required(); }"
-    , ?[DryadError("Missing required method", _)]
-    );
-    test-catch-error(
-      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
-    , ?[DryadError("Circular reference from trait","Loop2")
-       ,DryadError("Circular reference from trait","Loop1")]
-    )

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str_java	2009-11-25 14:00:32 UTC (rev 20308)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str_java	2009-11-25 14:45:22 UTC (rev 20309)
@@ -16,7 +16,7 @@
         testsuite-section(java-trait-tests   |"Rewrite to Java");
         testsuite-section(trait-output-tests |"Rewrite to classes");
         testsuite-section(class-trait-tests  |"Traits from classfiles");
-        testsuite-section(trait-error-tests  |"Error reporting")  /* ERROR remove )*/   /* ERROR remove ) */ //@END
+        testsuite-section(trait-error-tests  |"Error reporting")      /* ERROR remove )*/    /* ERROR remove ) */ //@END
 
   test-traits(input, output) =
     do-test(

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str_java.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str_java.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break1.str_java.str_java	2009-11-25 14:45:22 UTC (rev 20309)
@@ -0,0 +1,120 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits = //@START
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")  /* ERROR remove )*/   /* ERROR remove ) */ //@END
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break10.str.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break10.str.java	2009-11-25 14:00:32 UTC (rev 20308)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break10.str.java	2009-11-25 14:45:22 UTC (rev 20309)
@@ -1,122 +0,0 @@
-module test-java-traits
-
-imports
-  libstratego-lib
-  libdryad-compiler
-  java-traits
-
-strategies
-
-  main-test-java-traits =
-    option-wrap(
-      fail-fast-option + test-only-option + general-options
-    , test-suite(
-        !"Java trait tests"
-      , 
-        testsuite-section(java-trait-tests   |"Rewrite to Java");
-        testsuite-section(trait-output-tests |"Rewrite to classes");
-        testsuite-section(class-trait-tests  |"Traits from classfiles");
-        testsuite-section(trait-error-tests  |"Error reporting")
-      )
-    )
-
-  test-traits(input, output) =
-    do-test(
-      input
-    , assimilate-java-traits; strip-annos
-    , input
-    , output
-    )
-  
-  /** Unit test: retrieve al error messages; compare. */
-  test-catch-error(input, output) =
-    do-test(
-      input
-    , catch-error
-    , input
-    , output
-    )
-
-  catch-error =
-    let provide-error(catch) =
-      scoped-set-config(!Stage(), !0,
-        assimilate-java-traits
-      );
-      
-      try(dryad-compiler(
-        ?DryadError(_, _); catch; fail // catch & abort at error
-      ))
-    in
-      collect-argument-invokes(provide-error)
-    end
-  
-/** Unit tests. */
-strategies
-
-  java-trait-tests = where(<set-config> (Stage(), 1));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , !compilation-unit |[ 
-         class Foo                 { void bar() {} }
-         abstract class $Trait_Bar { void bar() {/* ERROR remove } */ /* ERROR remove } */ //@START @END
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 { void baz() {} }
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 {}
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
-    , !compilation-unit |[ 
-         class Foo                 { void required() {} ~Semicolon }
-         abstract class $Trait_Bar { void required(); }
-	   ]|
-	)
-  
-  trait-output-tests = where(<set-config> (Stage(), 4));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
-    )
-  
-  class-trait-tests =
-    where(
-      <set-config> (Stage(), 4);
-      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
-      <set-config> (Stage(), 1)
-    );
-    test-traits(
-      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
-    , ?[ compilation-unit |[ 
-           class Foo { void bar() {} }
-	     ]|
-	   , _ // bar
-	   ]
-    )
-
-  trait-error-tests =
-    test-catch-error(
-      !"class Foo with Undeclared {}"
-    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
-    );
-    test-catch-error(
-      !"class Foo with Bar {} trait Bar { void required(); }"
-    , ?[DryadError("Missing required method", _)]
-    );
-    test-catch-error(
-      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
-    , ?[DryadError("Circular reference from trait","Loop2")
-       ,DryadError("Circular reference from trait","Loop1")]
-    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break10.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break10.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break10.str_java	2009-11-25 14:45:22 UTC (rev 20309)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {/* ERROR remove } */ /* ERROR remove } */ //@START @END
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break11.str.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break11.str.java	2009-11-25 14:00:32 UTC (rev 20308)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break11.str.java	2009-11-25 14:45:22 UTC (rev 20309)
@@ -1,122 +0,0 @@
-module test-java-traits
-
-imports
-  libstratego-lib
-  libdryad-compiler
-  java-traits
-
-strategies
-
-  main-test-java-traits =
-    option-wrap(
-      fail-fast-option + test-only-option + general-options
-    , test-suite(
-        !"Java trait tests"
-      , 
-        testsuite-section(java-trait-tests   |"Rewrite to Java");
-        testsuite-section(trait-output-tests |"Rewrite to classes");
-        testsuite-section(class-trait-tests  |"Traits from classfiles");
-        testsuite-section(trait-error-tests  |"Error reporting")
-      )
-    )
-
-  test-traits(input, output) =
-    do-test(
-      input
-    , assimilate-java-traits; strip-annos
-    , input
-    , output
-    )
-  
-  /** Unit test: retrieve al error messages; compare. */
-  test-catch-error(input, output) =
-    do-test(
-      input
-    , catch-error
-    , input
-    , output
-    )
-
-  catch-error =
-    let provide-error(catch) =
-      scoped-set-config(!Stage(), !0,
-        assimilate-java-traits
-      );
-      
-      try(dryad-compiler(
-        ?DryadError(_, _); catch; fail // catch & abort at error
-      ))
-    in
-      collect-argument-invokes(provide-error)
-    end
-  
-/** Unit tests. */
-strategies
-
-  java-trait-tests = where(<set-config> (Stage(), 1));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , !compilation-unit |[ 
-         class Foo                 { void bar() {/* ERROR remove } */ /* ERROR remove } */ //@START @END
-         abstract class $Trait_Bar { void bar() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 { void baz() {} }
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 {}
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
-    , !compilation-unit |[ 
-         class Foo                 { void required() {} ~Semicolon }
-         abstract class $Trait_Bar { void required(); }
-	   ]|
-	)
-  
-  trait-output-tests = where(<set-config> (Stage(), 4));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
-    )
-  
-  class-trait-tests =
-    where(
-      <set-config> (Stage(), 4);
-      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
-      <set-config> (Stage(), 1)
-    );
-    test-traits(
-      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
-    , ?[ compilation-unit |[ 
-           class Foo { void bar() {} }
-	     ]|
-	   , _ // bar
-	   ]
-    )
-
-  trait-error-tests =
-    test-catch-error(
-      !"class Foo with Undeclared {}"
-    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
-    );
-    test-catch-error(
-      !"class Foo with Bar {} trait Bar { void required(); }"
-    , ?[DryadError("Missing required method", _)]
-    );
-    test-catch-error(
-      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
-    , ?[DryadError("Circular reference from trait","Loop2")
-       ,DryadError("Circular reference from trait","Loop1")]
-    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break11.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break11.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break11.str_java	2009-11-25 14:45:22 UTC (rev 20309)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {/* ERROR remove } */ /* ERROR remove } */ //@START @END
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break12.str.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break12.str.java	2009-11-25 14:00:32 UTC (rev 20308)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break12.str.java	2009-11-25 14:45:22 UTC (rev 20309)
@@ -1,122 +0,0 @@
-module test-java-traits
-
-imports
-  libstratego-lib
-  libdryad-compiler
-  java-traits
-
-strategies
-
-  main-test-java-traits =
-    option-wrap(
-      fail-fast-option + test-only-option + general-options
-    , test-suite(
-        !"Java trait tests"
-      , 
-        testsuite-section(java-trait-tests   |"Rewrite to Java");
-        testsuite-section(trait-output-tests |"Rewrite to classes");
-        testsuite-section(class-trait-tests  |"Traits from classfiles");
-        testsuite-section(trait-error-tests  |"Error reporting")
-      )
-    )
-
-  test-traits(input, output) =
-    do-test(
-      input
-    , assimilate-java-traits; strip-annos
-    , input
-    , output
-    )
-  
-  /** Unit test: retrieve al error messages; compare. */
-  test-catch-error(input, output) =
-    do-test(
-      input
-    , catch-error
-    , input
-    , output
-    )
-
-  catch-error =
-    let provide-error(catch) =
-      scoped-set-config(!Stage(), !0,
-        assimilate-java-traits
-      );
-      
-      try(dryad-compiler(
-        ?DryadError(_, _); catch; fail // catch & abort at error
-      ))
-    in
-      collect-argument-invokes(provide-error)
-    end
-  
-/** Unit tests. */
-strategies
-
-  java-trait-tests = where(<set-config> (Stage(), 1));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , !compilation-unit /* ERROR remove |[ */ //@START
-         class Foo                 /* ERROR remove { */ void bar() {} }
-         abstract class $Trait_Bar { void bar() {} }
-	   ]| //@END
-	);
-    test-traits(
-      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 { void baz() {} }
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 {}
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
-    , !compilation-unit |[ 
-         class Foo                 { void required() {} ~Semicolon }
-         abstract class $Trait_Bar { void required(); }
-	   ]|
-	)
-  
-  trait-output-tests = where(<set-config> (Stage(), 4));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
-    )
-  
-  class-trait-tests =
-    where(
-      <set-config> (Stage(), 4);
-      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
-      <set-config> (Stage(), 1)
-    );
-    test-traits(
-      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
-    , ?[ compilation-unit |[ 
-           class Foo { void bar() {} }
-	     ]|
-	   , _ // bar
-	   ]
-    )
-
-  trait-error-tests =
-    test-catch-error(
-      !"class Foo with Undeclared {}"
-    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
-    );
-    test-catch-error(
-      !"class Foo with Bar {} trait Bar { void required(); }"
-    , ?[DryadError("Missing required method", _)]
-    );
-    test-catch-error(
-      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
-    , ?[DryadError("Circular reference from trait","Loop2")
-       ,DryadError("Circular reference from trait","Loop1")]
-    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break12.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break12.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/Input/Dryad/test-java-traits.2.break12.str_java	2009-11-25 14:45:22 UTC (rev 20309)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit /* ERROR remove |[ */ //@START
+         class Foo                 /* ERROR remove { */ void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]| //@END
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(

(25900 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Wed Nov 25 16:31:51 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 25 Nov 2009 15:31:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20310 - LennartKats -
	in strategoxt/trunk/strc-core: lib/stratego/strc/front tests/test1
Message-ID: <200911251531.nAPFVpEW028289@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-25 15:31:51 +0000 (Wed, 25 Nov 2009)
New Revision: 20310

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20310&view=rev

Added:
   strategoxt/trunk/strc-core/tests/test1/test113.str
Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
   strategoxt/trunk/strc-core/tests/test1/Makefile.am

Log:
STR-783: Support for tab indentation in string templates

Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-11-25 14:45:22 UTC (rev 20309)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-11-25 15:31:51 UTC (rev 20310)
@@ -31,13 +31,13 @@
       [QStr(<conc-strings> (padding, <id>) => initial) | id]
     ; where(
         padding'       := <string-as-chars(get-padding-chars)> initial
-      ; padding-length := <string-length> padding'
+      ; padding-length := <padding-length> padding'
       )
       // Unpadd the initial string
     ; [QStr(string-as-chars(![<id>]; remove-padding(|<string-length> initial, <string-length> initial) => ([<id>], _))) | id]
     else
       where(
-        padding-length := <string-length> padding
+        padding-length := <padding-length> padding
       )
     end
   ; map(try(DesugarQuoted))
@@ -50,6 +50,9 @@
   <+
     ![]
   
+  internal padding-length =
+    string-replace(|"\t", "    "); string-length
+  
   /**
    * Remove balanced padding from quoted strings,
    * and expand anti-quotations with padding.
@@ -97,8 +100,14 @@
     [?[' '  | <id>] | id]
   ; remove-padding(|max, <dec> n)
   <+
-    [?['\t' | <id>] | id]
-  ; remove-padding(|max, <subt> (n, 4))
+    ?[['\t' | _] | _]
+  ; if <lt> (n, 4) then
+      [id | remove-padding(|max, max) => (<id>, max')]
+    ; !(<id>, max')
+    else
+      [?[_ | <id>] | id]
+    ; remove-padding(|max, <subt> (n, 4))
+    end
   <+
     ?[_ | _]
   ; where(max' := <subt> (max, n))

Modified: strategoxt/trunk/strc-core/tests/test1/Makefile.am
===================================================================
--- strategoxt/trunk/strc-core/tests/test1/Makefile.am	2009-11-25 14:45:22 UTC (rev 20309)
+++ strategoxt/trunk/strc-core/tests/test1/Makefile.am	2009-11-25 15:31:51 UTC (rev 20310)
@@ -26,7 +26,7 @@
 		  test84 test85 test86 test87 test88 test89 test90		 \
 		  test91 test92 test93 test94 test95 test96			 \
 		  test97 test98	test99 test100 test101 test102 test103		 \
-		  test104 test105 test106 test107 test108 test109 test110 test111 test112	 \
+		  test104 test105 test106 test107 test108 test109 test110 test111 test112 test113	 \
 		  io-test10 io-test11 io-test1 io-test2 io-test3 io-test4	 \
                   qcons-test01 qcons-test02 qcons-test03 qcons-test04		 \
                   test-chain01 test-chain02 test-chain03			 \
@@ -121,6 +121,7 @@
 test108_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
 test109_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
 test112_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
+test113_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
 
 test_chain01_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
 test_chain02_LDADD = $(STRATEGOLIB) $(STRATEGORUNLIBS)
@@ -252,6 +253,7 @@
 nodist_test110_SOURCES = test110.c
 nodist_test111_SOURCES = test111.c
 nodist_test112_SOURCES = test112.c
+nodist_test113_SOURCES = test113.c
 
 nodist_test_chain01_SOURCES = test-chain01.c
 nodist_test_chain02_SOURCES = test-chain02.c

Added: strategoxt/trunk/strc-core/tests/test1/test113.str
===================================================================
--- strategoxt/trunk/strc-core/tests/test1/test113.str	                        (rev 0)
+++ strategoxt/trunk/strc-core/tests/test1/test113.str	2009-11-25 15:31:51 UTC (rev 20310)
@@ -0,0 +1,40 @@
+/**
+ * Test for $[ string quotation syntax ] in combination with tabs (STR-783.)
+ * Sander likes tabs.
+ */
+module test113
+
+imports
+  libstratego-lib
+
+strategies
+  
+	show(|s) = where(write-to-string; debug(!s)); say(id)
+
+	main =
+		s := $[ Sorry! ];
+		!$[		I like tabs.
+					[s]
+				[s]];
+		show(|1) => x =>
+"I like tabs.
+	Sorry!
+Sorry!";
+        !$[ Sometimes, I like tabs with my spaces.
+            	[x]
+            [s]];
+		show(|2) =>
+"Sometimes, I like tabs with my spaces.
+	I like tabs.
+		Sorry!
+	Sorry!
+Sorry!";
+		!$[ Sometimes, I even like spaces with my tabs.
+			  Makes people angry and confused sometimes.
+		      Again, [s] Shame on me. [s]
+		    [s] [s] ];
+		show(|3) =>
+"Sometimes, I even like spaces with my tabs.
+  Makes people angry and confused sometimes.
+  Again, Sorry! Shame on me. Sorry!
+Sorry! Sorry!"



From m.dejonge at tudelft.nl  Thu Nov 26 09:27:01 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 26 Nov 2009 08:27:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20311 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: . Output
	src/evaluating src/testrun src/tests temp
Message-ID: <200911260827.nAQ8R1BN009693@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-26 08:26:55 +0000 (Thu, 26 Nov 2009)
New Revision: 20311

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20311&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/renameScript.sh
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break1.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break10.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break11.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break12.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break13.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break14.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break15.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break16.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break17.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break18.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break19.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break2.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break20.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break21.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break22.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break23.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break24.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break25.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break26.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break27.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break28.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break29.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break3.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break30.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break31.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break32.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break33.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break34.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break35.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break4.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break5.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break6.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break7.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break8.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break9.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break1.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break10.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break11.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break12.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break13.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break14.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break15.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break16.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break17.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break18.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break19.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break2.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break20.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break21.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break22.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break23.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break24.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break25.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break26.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break27.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break28.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break29.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break3.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break30.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break31.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break32.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break33.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break34.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break35.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break4.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break5.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break6.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break7.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break8.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.3.break9.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break0.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break1.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break10.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break11.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break12.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break13.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break14.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break15.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break16.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break17.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break18.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break19.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break2.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break20.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break21.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break22.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break23.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break24.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break25.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break26.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break27.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break28.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break29.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break3.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break30.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break31.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break32.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break34.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break35.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break4.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break5.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break6.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break7.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break8.str_java.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.break9.str_java.str_java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/Output/
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/FilePaths.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluationRuns.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java

Log:


Changes (first 1000 lines of the diffs):


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/Output
___________________________________________________________________
Added: svn:ignore
   + *


Added: sglr-recovery/trunk/Evaluation_RegionRecovery/renameScript.sh
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/renameScript.sh	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/renameScript.sh	2009-11-26 08:26:55 UTC (rev 20311)
@@ -0,0 +1,15 @@
+#!/bin/bash
+
+#Get all files in current directory
+originalFiles=$(ls Input/Dryad/*.*)
+
+# Loop through all files and do your changes
+for loopFile in $originalFiles
+do
+  replaceName=${loopFile//.str.java/}
+  replaceName=$replaceName".str_java"
+  echo $replaceName
+  
+  # Create your new filename including the extension
+  mv $loopFile $replaceName
+done


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/renameScript.sh
___________________________________________________________________
Added: svn:executable
   + *

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java	2009-11-25 15:31:51 UTC (rev 20310)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -2,8 +2,8 @@
 
 public enum Evaluation {
 	EXACT,
-	GOOD,
-	POOR,
+	SOMEWHAT_TOO_BIG,
+	TOO_BIG,
 	TOO_SMALL,
 	MIS_DIAGNOSED,
 	MERGED_REGION,

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -0,0 +1,220 @@
+package evaluating;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.PrintStream;
+import java.util.ArrayList;
+import logging.RegionLog;
+
+public class EvaluationOutput {
+	
+	private Testrun testrun;
+	private FilePaths myFilePaths;
+	
+	public EvaluationOutput(Testrun testrun, FilePaths paths) {
+		this.testrun=testrun;
+		myFilePaths=paths;
+	}
+	
+	public void writeResultsToFile() throws IOException{
+		String dirName = createOutputDir(pathToTestrunDir());
+		String fileName=dirName+File.separator+"Overview.txt";
+		PrintStream fileOut = getPrintStream(fileName);
+		writeTestrunOverview(fileOut);
+		for (Testsuite aSuite : testrun.getTestSuites()) {
+			String suiteFile=dirName+File.separator+aSuite.getTestSuiteName().replace(' ', '_')+".txt";
+			String detailFile=dirName+File.separator+aSuite.getTestSuiteName().replace(' ', '_')+".details.txt";
+			PrintStream suiteOut = getPrintStream(suiteFile);
+			PrintStream detailOut = getPrintStream(detailFile);
+			write_TestSuite(aSuite, suiteOut);
+			write_Details(aSuite, detailOut);
+		}
+		
+	}
+
+	private PrintStream getPrintStream(String fileName) throws IOException,
+			FileNotFoundException {
+		File overview=new File(fileName);
+		overview.delete();
+		overview.createNewFile();
+		PrintStream fileOut=new PrintStream(overview);
+		return fileOut;
+	}
+
+	private String createOutputDir(String path) {
+		String dirName=path;
+		File dir=new File(dirName); 
+		dir.mkdir();
+		return dirName;
+	}
+
+	private String pathToTestrunDir() {
+		return myFilePaths.getOutPutRootDir() + File.separator+testrun.getNameOfTestRun().replace(' ', '_');
+	}
+
+	public void writeTestrunOverview(PrintStream fileOut) throws FileNotFoundException {
+		writeOutputLine("*************************", fileOut);
+		writeOutputLine("*************************", fileOut);
+		writeOutputLine(testrun.getNameOfTestRun(), fileOut);
+		writeOutputLine("Description: "+testrun.getDescription(), fileOut);
+		write_TestrunOverview(testrun, fileOut);
+		for (Testsuite aSuite : testrun.getTestSuites()) {
+			//write_TestSuite(aSuite);
+		}
+		writeOutputLine(fileOut);
+		writeOutputLine("*************************", fileOut);
+		writeOutputLine("*************************", fileOut);
+	}
+	
+	protected void writeOutputLine(String line, PrintStream fileOut) throws FileNotFoundException{
+		//PrintStream consoleOut = System.out;
+		//consoleOut.println(line);
+		fileOut.println(line);
+	}
+	protected void writeOutputLine(PrintStream fileOut) throws FileNotFoundException{writeOutputLine("", fileOut);}
+	
+	public void write_TestrunOverview(Testrun testrun, PrintStream fileOut) throws FileNotFoundException {
+		writeOutputLine(fileOut);
+		ArrayList<String> qualityTable = new ArrayList<String>();
+		ArrayList<String> performanceTable = new ArrayList<String>();
+		qualityTable.add(qualityHeaderRow());
+		performanceTable.add(performanceHeaderRow());
+		for (Testsuite suite : testrun.getTestSuites()) {
+			qualityTable.add(toQualityEvalRow(suite));
+			performanceTable.add(toPerformanceEvalRow(suite));
+		}
+		for (String qualData : qualityTable) {
+			writeOutputLine(qualData, fileOut);
+		}
+		writeOutputLine(fileOut);
+		for (String perfData : performanceTable) {
+			writeOutputLine(perfData, fileOut);
+		}
+	}
+	
+	private static String performanceHeaderRow() {
+		String[] columnHeaders = new String[]{"  ", "AVERAGE (ms)", "MAX (ms)", "CRITICAL", "CRITICAL(%)"};
+		String headerRow = toRowString(columnHeaders);
+		return headerRow;
+	}
+	
+	private static String qualityHeaderRow() {
+		String[] columnHeaders = new String[]{"", Evaluation.EXACT.toString(), Evaluation.SOMEWHAT_TOO_BIG.toString(), Evaluation.TOO_BIG.toString(), "OTHER", "SCORE"};
+		String headerRow = toRowString(columnHeaders);
+		return headerRow;
+	}
+
+	private static String toQualityEvalRow(Testsuite s) {
+		String[] row1Values=new String[6];
+		row1Values[0] = s.getTestSuiteName();
+		int exactR = s.getStatistics().getResult(Evaluation.EXACT);
+		int goodR = s.getStatistics().getResult(Evaluation.SOMEWHAT_TOO_BIG);
+		int poorR = s.getStatistics().getResult(Evaluation.TOO_BIG);
+		int otherR =s.getStatistics().getNumberOfEvaluatedRegions()-exactR-goodR-poorR;
+		double scoreR=s.getStatistics().calculateScore();
+		row1Values[1]=""+exactR;
+		row1Values[2]=""+goodR;
+		row1Values[3]=""+poorR;
+		row1Values[4]=""+otherR;
+		row1Values[5]=""+scoreR;
+		String evalRow=toRowString(row1Values);
+		return evalRow;
+	}
+	
+	private static String toPerformanceEvalRow(Testsuite s) {
+		String[] row1Values=new String[5];
+		row1Values[0] = s.getTestSuiteName();
+		row1Values[1]=""+s.getStatistics().getAverageRegionSelectionTime();
+		row1Values[2]=""+s.getStatistics().getMaxRegionSelectionTime();
+		row1Values[3]=""+s.getStatistics().getNumberOfPerformanceCritical();
+		row1Values[4]=""+s.getStatistics().getPercentageOfPerformanceCritical();
+		String evalRow=toRowString(row1Values);
+		return evalRow;
+	}
+
+	private static String toRowString(String[] columnValues) {
+		String result=toColumnString(columnValues[0], 20);
+		for (int i = 1; i < columnValues.length; i++) {
+			result+=toColumnString(columnValues[i], 15);
+		}
+		return result;
+	}
+
+	
+	private static String toColumnString(String value, int columnLength) {
+		String cuttedString = value.substring(0, Math.min(columnLength-2, value.length()));
+		while(cuttedString.length()<columnLength){
+			cuttedString+=" ";
+		}
+		return cuttedString;
+	}
+
+	
+	public void write_TestSuite(Testsuite testSuite, PrintStream suiteOut) throws FileNotFoundException {
+		Statistics stats = testSuite.getStatistics();
+		write_Header(testSuite, suiteOut);
+		write_General(stats, suiteOut);		
+		write_Overview(stats, suiteOut);
+		write_Files(stats, suiteOut);		
+	}
+
+	private void write_Details(Testsuite testSuite, PrintStream suiteOut) throws FileNotFoundException {
+		writeOutputLine(suiteOut);
+		writeOutputLine("Details", suiteOut);
+		for (Testcase aFile : testSuite.getTestCases()) {
+			write_Testcase(aFile, suiteOut);		
+		}
+		
+	}
+
+	public void write_Testcase(Testcase aFile, PrintStream suiteOut) throws FileNotFoundException {
+		writeOutputLine(suiteOut);
+		writeOutputLine("********************************************", suiteOut);
+		writeOutputLine("\t Filename: "+aFile.getFileName(), suiteOut);
+		writeOutputLine("\t Evaluations: "+aFile.getRegionEvaluations(), suiteOut);
+		writeOutputLine("\t Recover Log: ", suiteOut);
+		ArrayList<RegionLog> recoverRegions = aFile.getRecoverLog().getRegionInfo();
+		for (int i = 0; i < recoverRegions.size(); i++) {
+			RegionLog aRegion = recoverRegions.get(i);
+			writeOutputLine("\t \t Region: " + (i+1), suiteOut);
+			writeOutputLine("\t \t Execution times: " + aRegion.getExecutionTimetable(), suiteOut);
+			writeOutputLine("\t \t Skipped Fragment:", suiteOut);
+			writeOutputLine(aRegion.getSkippedFragment(), suiteOut);
+			//aRegion.getInspectedFragments();
+		}
+	}
+
+	public void write_Files(Statistics stats, PrintStream suiteOut) throws FileNotFoundException {
+		writeOutputLine("Files", suiteOut);
+		for (Evaluation eval : Evaluation.values()) {
+			writeOutputLine("\t" + eval +":" + stats.getResultList(eval), suiteOut);	
+		}
+	}
+
+	public void write_Overview(Statistics stats, PrintStream suiteOut) throws FileNotFoundException {
+		writeOutputLine(suiteOut);
+		writeOutputLine("Overview", suiteOut);
+		for (Evaluation eval : Evaluation.values()) {
+			writeOutputLine("\t" + eval +":" + stats.getResultList(eval).size(), suiteOut);	
+		}
+	}
+
+	public void write_General(Statistics stats, PrintStream suiteOut) throws FileNotFoundException {
+		writeOutputLine("General", suiteOut);
+		writeOutputLine("\t" + "Number of files: " + stats.getNumberOfFiles(), suiteOut);
+		writeOutputLine("\t" + "Number of evaluated regions: " + stats.getNumberOfEvaluatedRegions(), suiteOut);
+		writeOutputLine("\t" + "Number of skipped regions during parsing: "+ stats.getNumberOfSkippedRegionsDuringParsing(), suiteOut);
+		writeOutputLine("\t" + "Average region selection time: " + stats.getAverageRegionSelectionTime(), suiteOut);
+		writeOutputLine("\t" + "Maximum region selection time: " + stats.getMaxRegionSelectionTime(), suiteOut);
+		writeOutputLine("\t" + "Number of non evaluated files: " + stats.nrOfNonEvaluatedFiles(), suiteOut);
+		writeOutputLine("\t" + "Score: " + stats.calculateScore(), suiteOut);
+	}
+
+	public void write_Header(Testsuite testSuite, PrintStream suiteOut) throws FileNotFoundException {
+		writeOutputLine("*************************", suiteOut);
+		writeOutputLine(testSuite.getTestSuiteName(), suiteOut);
+		writeOutputLine("*************************", suiteOut);
+		writeOutputLine(suiteOut);
+	}
+}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/FilePaths.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/FilePaths.java	2009-11-25 15:31:51 UTC (rev 20310)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/FilePaths.java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -10,13 +10,29 @@
 	
 	//Parse table locations
 	private HashMap<String, String> parsetableLookUp;
-	private String RoorDir;
+	private String inputRootDir;
+	private String outPutRootDir;
 	
+	public String getOutPutRootDir() {
+		return outPutRootDir;
+	}
+
+	public void setOutPutRootDir(String outPutRootDir) {
+		this.outPutRootDir = outPutRootDir;
+	}
+
 	public FilePaths(String rootDirectory){
-		RoorDir=rootDirectory;	
+		inputRootDir=rootDirectory;	
+		outPutRootDir="";
 		parsetableLookUp=new HashMap<String, String>();
 	}
 	
+	public FilePaths(String inputDir, String outputDir){
+		inputRootDir=inputDir;	
+		parsetableLookUp=new HashMap<String, String>();
+		outPutRootDir=outputDir;
+	}
+	
 	public FilePaths addLanguage(String extension, String parseTablePath) {
 		parsetableLookUp.put(extension, parseTablePath);
 		return this;
@@ -26,11 +42,11 @@
 		return parsetableLookUp.get(extension);
 	}
 	
-	public void setRoorDir(String roorDir) {
-		RoorDir = roorDir;
+	public void setRoorDir(String inputRoot) {
+		inputRootDir = inputRoot;
 	}
 
 	public String getRoorDir() {
-		return RoorDir;
+		return inputRootDir;
 	}
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-25 15:31:51 UTC (rev 20310)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -123,8 +123,8 @@
 	public double calculateScore() {
 		double result=0;
 		result += 10*getResult(Evaluation.EXACT);
-		result += 5*getResult(Evaluation.GOOD);
-		result += 1*getResult(Evaluation.POOR);
+		result += 5*getResult(Evaluation.SOMEWHAT_TOO_BIG);
+		result += 1*getResult(Evaluation.TOO_BIG);
 		result += 1*getResult(Evaluation.MERGED_REGION);
 		int nrOfEvaluated=numberOfEvaluatedRegions-nrOfNonEvaluatedFiles();
 		if(nrOfEvaluated<=0)

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-25 15:31:51 UTC (rev 20310)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -52,10 +52,10 @@
 			regionEvaluation.add(Evaluation.EXACT);
 		else if (expectedStartLine>=actualStartLine && expectedEndLine <= actualEndLine){
 			if(((expectedStartLine-actualStartLine) + (actualEndLine-expectedEndLine))<=SMALL_REGION_CRITERIA){
-				regionEvaluation.add(Evaluation.GOOD);
+				regionEvaluation.add(Evaluation.SOMEWHAT_TOO_BIG);
 			}
 			else
-				regionEvaluation.add(Evaluation.POOR);
+				regionEvaluation.add(Evaluation.TOO_BIG);
 		}
 		else if(expectedStartLine<=actualStartLine && expectedEndLine >= actualEndLine)
 			regionEvaluation.add(Evaluation.TOO_SMALL);

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-25 15:31:51 UTC (rev 20310)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testsuite.java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -113,7 +113,7 @@
         	String fileName=children[i];
         	String ext=fileName.substring(fileName.lastIndexOf('.')+1);
         	String filePath=dir+File.separator+fileName;
-        	if (!new File(filePath).isDirectory() && (useAllExtensions || fileName.endsWith(extension))){
+        	if (!new File(filePath).isDirectory() && (useAllExtensions || fileName.endsWith("."+extension))){
         		runTestFile(ext, filePath);
 				//System.out.println(filePath);
 			}

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-25 15:31:51 UTC (rev 20310)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -1,10 +1,10 @@
 package evaluating;
 
+import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.OutputStream;
 import java.io.PrintStream;
 import java.util.ArrayList;
-import logging.RecoveryLogging;
 import logging.*;
 
 import org.strategoxt.stratego_lib.system_about_0_0;
@@ -28,7 +28,9 @@
 	}
 	
 	protected static void writeOutputLine(String line) throws FileNotFoundException{
-		//PrintStream fileOut=new PrintStream("Output/m.txt");
+		File dir=new File(""); dir.mkdir();
+		PrintStream fileOut=new PrintStream("Output/m.txt");
+		
 		PrintStream consoleOut = System.out;
 		consoleOut.println(line);
 	}
@@ -60,7 +62,7 @@
 	}
 	
 	private static String qualityHeaderRow() {
-		String[] columnHeaders = new String[]{"", Evaluation.EXACT.toString(), Evaluation.GOOD.toString(), Evaluation.POOR.toString(), "OTHER", "SCORE"};
+		String[] columnHeaders = new String[]{"", Evaluation.EXACT.toString(), Evaluation.SOMEWHAT_TOO_BIG.toString(), Evaluation.TOO_BIG.toString(), "OTHER", "SCORE"};
 		String headerRow = toRowString(columnHeaders);
 		return headerRow;
 	}
@@ -69,8 +71,8 @@
 		String[] row1Values=new String[6];
 		row1Values[0] = s.getTestSuiteName();
 		int exactR = s.getStatistics().getResult(Evaluation.EXACT);
-		int goodR = s.getStatistics().getResult(Evaluation.GOOD);
-		int poorR = s.getStatistics().getResult(Evaluation.POOR);
+		int goodR = s.getStatistics().getResult(Evaluation.SOMEWHAT_TOO_BIG);
+		int poorR = s.getStatistics().getResult(Evaluation.TOO_BIG);
 		int otherR =s.getStatistics().getNumberOfEvaluatedRegions()-exactR-goodR-poorR;
 		double scoreR=s.getStatistics().calculateScore();
 		row1Values[1]=""+exactR;

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluationRuns.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluationRuns.java	2009-11-25 15:31:51 UTC (rev 20310)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/EvaluationRuns.java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -1,5 +1,6 @@
 package testrun;
 
+import evaluating.EvaluationOutput;
 import evaluating.FilePaths;
 import evaluating.Testrun;
 import evaluating.Testsuite;
@@ -10,7 +11,7 @@
 	private FilePaths fileLocations;
 	
 	public EvaluationRuns(){
-		fileLocations=new FilePaths(InfraStructure.DIR_ROOT);
+		fileLocations=new FilePaths(InfraStructure.DIR_ROOT_INPUT, InfraStructure.DIR_ROOT_OUTPUT);
 		InfraStructure.addStandardLanguages(fileLocations);
 	}
 	
@@ -22,7 +23,9 @@
 		addLanguage(languageEvaluation, new Testsuite("Stratego", fileLocations), InfraStructure.STRATEGO_EXT);
 		addLanguage(languageEvaluation, new Testsuite("Stratego-Java", fileLocations), InfraStructure.STRATEGO_JAVA_EXT);
 		languageEvaluation.run();
-		WriteStatistics.writeConsole_Testrun(languageEvaluation);
+		//WriteStatistics.writeConsole_Testrun(languageEvaluation);
+		EvaluationOutput resultWriter=new EvaluationOutput(languageEvaluation, fileLocations);
+		resultWriter.writeResultsToFile();
 	}
 	
 	public void evaluateErrorCategories() throws Exception{

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java	2009-11-25 15:31:51 UTC (rev 20310)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -16,15 +16,16 @@
 	public static final String JAVA_EXT = "java";
 	public static final String STRATEGO_EXT = "str";
 	public static final String WEBDSL_EXT = "app";
-	public static final String STRATEGO_JAVA_EXT = "strjava";
+	public static final String STRATEGO_JAVA_EXT = "str_java";
 	
 	//Directories
-	public static final String DIR_ROOT="Input";
-	public static final String DIR_COMMON = DIR_ROOT +File.separator+"Common";
-	public static final String DIR_SCOPE = DIR_ROOT +File.separator+"Scope";
-	public static final String DIR_MESSY_INDENT=DIR_ROOT +File.separator+"MessyIndent";
-	public static final String DIR_PROBLEM_CASES=DIR_ROOT +File.separator+"ProblemCases";
-	public static final String DIR_SPOOFAX_EXAMPLES=DIR_ROOT +File.separator+"SpoofaxExamples";
+	public static final String DIR_ROOT_INPUT="Input";
+	public static final String DIR_COMMON = DIR_ROOT_INPUT +File.separator+"Common";
+	public static final String DIR_SCOPE = DIR_ROOT_INPUT +File.separator+"Scope";
+	public static final String DIR_MESSY_INDENT=DIR_ROOT_INPUT +File.separator+"MessyIndent";
+	public static final String DIR_PROBLEM_CASES=DIR_ROOT_INPUT +File.separator+"ProblemCases";
+	public static final String DIR_SPOOFAX_EXAMPLES=DIR_ROOT_INPUT +File.separator+"SpoofaxExamples";
+	public static final String DIR_ROOT_OUTPUT = "Output";
 	
 	
 	

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java	2009-11-25 15:31:51 UTC (rev 20310)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -46,14 +46,14 @@
 	public void testGood() throws Exception {
 		ArrayList<Evaluation> evaluations = evaluateFile("Good.java");
 		Assert.assertEquals(1, evaluations.size());
-		Assert.assertEquals(Evaluation.GOOD, evaluations.get(0));
+		Assert.assertEquals(Evaluation.SOMEWHAT_TOO_BIG, evaluations.get(0));
 	}
 	
 	@Test
 	public void testPoor() throws Exception {
 		ArrayList<Evaluation> evaluations = evaluateFile("Poor.java");
 		Assert.assertEquals(1, evaluations.size());
-		Assert.assertEquals(Evaluation.POOR, evaluations.get(0));
+		Assert.assertEquals(Evaluation.TOO_BIG, evaluations.get(0));
 	}
 	
 	@Test

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java	2009-11-25 15:31:51 UTC (rev 20310)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -26,10 +26,10 @@
 		assertEquals(2, statistics.getResultList(Evaluation.EXACT).size());
 		assertTrue(statistics.getResultList(Evaluation.EXACT).contains("Exact1.java"));
 		assertTrue(statistics.getResultList(Evaluation.EXACT).contains("Exact2.java"));
-		assertEquals(1, statistics.getResultList(Evaluation.GOOD).size());
-		assertTrue(statistics.getResultList(Evaluation.GOOD).contains("Good.java"));
-		assertEquals(1, statistics.getResultList(Evaluation.POOR).size());
-		assertTrue(statistics.getResultList(Evaluation.POOR).contains("Bad.java"));
+		assertEquals(1, statistics.getResultList(Evaluation.SOMEWHAT_TOO_BIG).size());
+		assertTrue(statistics.getResultList(Evaluation.SOMEWHAT_TOO_BIG).contains("Good.java"));
+		assertEquals(1, statistics.getResultList(Evaluation.TOO_BIG).size());
+		assertTrue(statistics.getResultList(Evaluation.TOO_BIG).contains("Bad.java"));
 		assertEquals(3, statistics.getResultList(Evaluation.WRONG_DATA).size());
 		assertTrue(statistics.getResultList(Evaluation.WRONG_DATA).contains("ErrorInData1.java"));
 		assertTrue(statistics.getResultList(Evaluation.WRONG_DATA).contains("ErrorInData2.java"));
@@ -45,8 +45,8 @@
 		processTestData();
 		assertEquals(11, statistics.getOverviewResults().size());
 		assertEquals("2", statistics.getOverviewResults().get(Evaluation.EXACT));
-		assertEquals("1", statistics.getOverviewResults().get(Evaluation.GOOD));
-		assertEquals("1", statistics.getOverviewResults().get(Evaluation.POOR));
+		assertEquals("1", statistics.getOverviewResults().get(Evaluation.SOMEWHAT_TOO_BIG));
+		assertEquals("1", statistics.getOverviewResults().get(Evaluation.TOO_BIG));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.TOO_SMALL));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.MIS_DIAGNOSED));
 		assertEquals("3", statistics.getOverviewResults().get(Evaluation.WRONG_DATA));

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-25 15:31:51 UTC (rev 20310)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -49,7 +49,7 @@
 		int actualStartLine=4;
 		int actualEndLine=15;		
 		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
-		Assert.assertEquals(Evaluation.GOOD, regionSelectionData.getRegionEvaluations().get(0));
+		Assert.assertEquals(Evaluation.SOMEWHAT_TOO_BIG, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	@Test
@@ -59,7 +59,7 @@
 		int actualStartLine=2;
 		int actualEndLine=14;
 		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
-		Assert.assertEquals(Evaluation.POOR, regionSelectionData.getRegionEvaluations().get(0));
+		Assert.assertEquals(Evaluation.TOO_BIG, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	@Test

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break1.str_java.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break1.str_java.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break1.str_java.str_java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -0,0 +1,120 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits = //@START
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")      /* ERROR remove )*/    /* ERROR remove ) */ //@END
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break10.str_java.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break10.str_java.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break10.str_java.str_java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {/* ERROR remove } */ /* ERROR remove } */ //@START @END
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break11.str_java.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break11.str_java.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break11.str_java.str_java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {/* ERROR remove } */ /* ERROR remove } */ //@START @END
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break12.str_java.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break12.str_java.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/temp/test-java-traits.2.break12.str_java.str_java	2009-11-26 08:26:55 UTC (rev 20311)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  

(13004 diff lines omitted)


From m.dejonge at tudelft.nl  Thu Nov 26 09:28:15 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 26 Nov 2009 08:28:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20312 - MaartjeDeJonge
	- sglr-recovery/trunk/Evaluation_RegionRecovery
Message-ID: <200911260828.nAQ8SFVC009698@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-26 08:28:15 +0000 (Thu, 26 Nov 2009)
New Revision: 20312

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20312&view=rev

Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/temp/

Log:


Changes:



From m.dejonge at tudelft.nl  Thu Nov 26 11:57:42 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 26 Nov 2009 10:57:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20313 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery/src:
	evaluating tests
Message-ID: <200911261057.nAQAvgjK011628@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-26 10:57:41 +0000 (Thu, 26 Nov 2009)
New Revision: 20313

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20313&view=rev

Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testrun.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java

Log:
statistics of testrun (sum of testsuites)
file output
time critical files

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java	2009-11-26 08:28:15 UTC (rev 20312)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Evaluation.java	2009-11-26 10:57:41 UTC (rev 20313)
@@ -2,7 +2,7 @@
 
 public enum Evaluation {
 	EXACT,
-	SOMEWHAT_TOO_BIG,
+	NEAR_EXACT,
 	TOO_BIG,
 	TOO_SMALL,
 	MIS_DIAGNOSED,

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java	2009-11-26 08:28:15 UTC (rev 20312)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/EvaluationOutput.java	2009-11-26 10:57:41 UTC (rev 20313)
@@ -18,17 +18,20 @@
 	}
 	
 	public void writeResultsToFile() throws IOException{
-		String dirName = createOutputDir(pathToTestrunDir());
-		String fileName=dirName+File.separator+"Overview.txt";
+		String dirName=pathToTestrunDir();
+		File dir = new File(dirName);
+		if(dir.exists())
+			deleteDir(dir);
+		createOutputDir(dirName);
+		String dirDetails = createOutputDir(pathToTestrunDir()+File.separator+"Details");
+		String fileName=dirName+File.separator+"Statistic_Overview.txt";
 		PrintStream fileOut = getPrintStream(fileName);
 		writeTestrunOverview(fileOut);
 		for (Testsuite aSuite : testrun.getTestSuites()) {
 			String suiteFile=dirName+File.separator+aSuite.getTestSuiteName().replace(' ', '_')+".txt";
-			String detailFile=dirName+File.separator+aSuite.getTestSuiteName().replace(' ', '_')+".details.txt";
-			PrintStream suiteOut = getPrintStream(suiteFile);
-			PrintStream detailOut = getPrintStream(detailFile);
+			PrintStream suiteOut = getPrintStream(suiteFile);			
 			write_TestSuite(aSuite, suiteOut);
-			write_Details(aSuite, detailOut);
+			write_Details(aSuite, dirDetails);
 		}
 		
 	}
@@ -53,26 +56,22 @@
 		return myFilePaths.getOutPutRootDir() + File.separator+testrun.getNameOfTestRun().replace(' ', '_');
 	}
 
-	public void writeTestrunOverview(PrintStream fileOut) throws FileNotFoundException {
-		writeOutputLine("*************************", fileOut);
-		writeOutputLine("*************************", fileOut);
-		writeOutputLine(testrun.getNameOfTestRun(), fileOut);
+	private void writeTestrunOverview(PrintStream fileOut) throws FileNotFoundException {
+		writeOutputLine("Testrun: "+testrun.getNameOfTestRun(), fileOut);
 		writeOutputLine("Description: "+testrun.getDescription(), fileOut);
+		writeOutputLine(fileOut);
+		write_General(testrun.getTotalStats(), fileOut);
 		write_TestrunOverview(testrun, fileOut);
-		for (Testsuite aSuite : testrun.getTestSuites()) {
-			//write_TestSuite(aSuite);
-		}
 		writeOutputLine(fileOut);
-		writeOutputLine("*************************", fileOut);
-		writeOutputLine("*************************", fileOut);
+		//write_Overview(testrun.getTotalStats(), fileOut);
 	}
 	
-	protected void writeOutputLine(String line, PrintStream fileOut) throws FileNotFoundException{
+	private void writeOutputLine(String line, PrintStream fileOut) throws FileNotFoundException{
 		//PrintStream consoleOut = System.out;
 		//consoleOut.println(line);
 		fileOut.println(line);
 	}
-	protected void writeOutputLine(PrintStream fileOut) throws FileNotFoundException{writeOutputLine("", fileOut);}
+	private void writeOutputLine(PrintStream fileOut) throws FileNotFoundException{writeOutputLine("", fileOut);}
 	
 	public void write_TestrunOverview(Testrun testrun, PrintStream fileOut) throws FileNotFoundException {
 		writeOutputLine(fileOut);
@@ -81,9 +80,14 @@
 		qualityTable.add(qualityHeaderRow());
 		performanceTable.add(performanceHeaderRow());
 		for (Testsuite suite : testrun.getTestSuites()) {
-			qualityTable.add(toQualityEvalRow(suite));
-			performanceTable.add(toPerformanceEvalRow(suite));
+			qualityTable.add(toQualityEvalRow(suite.getStatistics(), suite.getTestSuiteName()));
+			performanceTable.add(toPerformanceEvalRow(suite.getStatistics(), suite.getTestSuiteName()));
 		}
+		qualityTable.add(separationRow(6));
+		performanceTable.add(separationRow(5));
+		qualityTable.add(toQualityEvalRow(testrun.getTotalStats(), ""));
+		performanceTable.add(toPerformanceEvalRow(testrun.getTotalStats(), ""));
+		
 		for (String qualData : qualityTable) {
 			writeOutputLine(qualData, fileOut);
 		}
@@ -93,6 +97,16 @@
 		}
 	}
 	
+	private static String separationRow(int nrOfColumns) {
+		String[] columnLines = new String[nrOfColumns];
+		columnLines[0]=" ";
+		for (int i = 1; i < columnLines.length; i++) {
+			columnLines[i]="---------------------------------------------";
+		}
+		String sepRow = toRowString(columnLines);
+		return sepRow;
+	}
+	
 	private static String performanceHeaderRow() {
 		String[] columnHeaders = new String[]{"  ", "AVERAGE (ms)", "MAX (ms)", "CRITICAL", "CRITICAL(%)"};
 		String headerRow = toRowString(columnHeaders);
@@ -100,19 +114,19 @@
 	}
 	
 	private static String qualityHeaderRow() {
-		String[] columnHeaders = new String[]{"", Evaluation.EXACT.toString(), Evaluation.SOMEWHAT_TOO_BIG.toString(), Evaluation.TOO_BIG.toString(), "OTHER", "SCORE"};
+		String[] columnHeaders = new String[]{"", Evaluation.EXACT.toString(), Evaluation.NEAR_EXACT.toString(), Evaluation.TOO_BIG.toString(), "OTHER", "SCORE"};
 		String headerRow = toRowString(columnHeaders);
 		return headerRow;
 	}
 
-	private static String toQualityEvalRow(Testsuite s) {
+	private static String toQualityEvalRow(Statistics s, String name) {
 		String[] row1Values=new String[6];
-		row1Values[0] = s.getTestSuiteName();
-		int exactR = s.getStatistics().getResult(Evaluation.EXACT);
-		int goodR = s.getStatistics().getResult(Evaluation.SOMEWHAT_TOO_BIG);
-		int poorR = s.getStatistics().getResult(Evaluation.TOO_BIG);
-		int otherR =s.getStatistics().getNumberOfEvaluatedRegions()-exactR-goodR-poorR;
-		double scoreR=s.getStatistics().calculateScore();
+		row1Values[0] = name;
+		int exactR = s.getResult(Evaluation.EXACT);
+		int goodR = s.getResult(Evaluation.NEAR_EXACT);
+		int poorR = s.getResult(Evaluation.TOO_BIG);
+		int otherR =s.getNumberOfEvaluatedRegions()-exactR-goodR-poorR;
+		double scoreR=s.calculateScore();
 		row1Values[1]=""+exactR;
 		row1Values[2]=""+goodR;
 		row1Values[3]=""+poorR;
@@ -122,13 +136,13 @@
 		return evalRow;
 	}
 	
-	private static String toPerformanceEvalRow(Testsuite s) {
+	private static String toPerformanceEvalRow(Statistics s, String firstColumn) {
 		String[] row1Values=new String[5];
-		row1Values[0] = s.getTestSuiteName();
-		row1Values[1]=""+s.getStatistics().getAverageRegionSelectionTime();
-		row1Values[2]=""+s.getStatistics().getMaxRegionSelectionTime();
-		row1Values[3]=""+s.getStatistics().getNumberOfPerformanceCritical();
-		row1Values[4]=""+s.getStatistics().getPercentageOfPerformanceCritical();
+		row1Values[0] = firstColumn;
+		row1Values[1]=""+s.getAverageRegionSelectionTime();
+		row1Values[2]=""+s.getMaxRegionSelectionTime();
+		row1Values[3]=""+s.getNumberOfPerformanceCritical();
+		row1Values[4]=""+s.getPercentageOfPerformanceCritical();
 		String evalRow=toRowString(row1Values);
 		return evalRow;
 	}
@@ -159,33 +173,33 @@
 		write_Files(stats, suiteOut);		
 	}
 
-	private void write_Details(Testsuite testSuite, PrintStream suiteOut) throws FileNotFoundException {
-		writeOutputLine(suiteOut);
-		writeOutputLine("Details", suiteOut);
+	private void write_Details(Testsuite testSuite, String dir) throws IOException {
 		for (Testcase aFile : testSuite.getTestCases()) {
-			write_Testcase(aFile, suiteOut);		
-		}
-		
+			String diagnoses="";
+			for (Evaluation eval : aFile.getRegionEvaluations()) {
+				diagnoses+=eval + "_";
+			}			
+			String detailFile=dir+File.separator+diagnoses+aFile.getFileName()+".txt";
+			PrintStream detailOut = getPrintStream(detailFile);
+			write_Testcase(aFile, detailOut);		
+		}		
 	}
 
-	public void write_Testcase(Testcase aFile, PrintStream suiteOut) throws FileNotFoundException {
-		writeOutputLine(suiteOut);
-		writeOutputLine("********************************************", suiteOut);
-		writeOutputLine("\t Filename: "+aFile.getFileName(), suiteOut);
-		writeOutputLine("\t Evaluations: "+aFile.getRegionEvaluations(), suiteOut);
-		writeOutputLine("\t Recover Log: ", suiteOut);
-		ArrayList<RegionLog> recoverRegions = aFile.getRecoverLog().getRegionInfo();
-		for (int i = 0; i < recoverRegions.size(); i++) {
-			RegionLog aRegion = recoverRegions.get(i);
-			writeOutputLine("\t \t Region: " + (i+1), suiteOut);
-			writeOutputLine("\t \t Execution times: " + aRegion.getExecutionTimetable(), suiteOut);
-			writeOutputLine("\t \t Skipped Fragment:", suiteOut);
-			writeOutputLine(aRegion.getSkippedFragment(), suiteOut);
-			//aRegion.getInspectedFragments();
+	public void write_Testcase(Testcase aFile, PrintStream output) throws FileNotFoundException {
+		writeOutputLine("Filename: "+aFile.getFilePath(), output);
+		writeOutputLine("Evaluations: "+aFile.getRegionEvaluations(), output);
+		writeOutputLine("Region selection times (ms): "+aFile.getRecoverLog().getRegionSelectionTimes(), output);
+		writeOutputLine(output);
+		writeOutputLine("Skipped fragments: ", output);
+		ArrayList<String> skippedFragments = aFile.getRecoverLog().getSkippedFragments();
+		for (String fragment : skippedFragments) {
+			writeOutputLine(output);
+			writeOutputLine(fragment, output);
 		}
 	}
 
 	public void write_Files(Statistics stats, PrintStream suiteOut) throws FileNotFoundException {
+		writeOutputLine(suiteOut);
 		writeOutputLine("Files", suiteOut);
 		for (Evaluation eval : Evaluation.values()) {
 			writeOutputLine("\t" + eval +":" + stats.getResultList(eval), suiteOut);	
@@ -203,18 +217,47 @@
 	public void write_General(Statistics stats, PrintStream suiteOut) throws FileNotFoundException {
 		writeOutputLine("General", suiteOut);
 		writeOutputLine("\t" + "Number of files: " + stats.getNumberOfFiles(), suiteOut);
+		writeOutputLine("\t" + "Number of evaluated files: " + (stats.getNumberOfFiles() - stats.nrOfNonEvaluatedFiles()), suiteOut);
 		writeOutputLine("\t" + "Number of evaluated regions: " + stats.getNumberOfEvaluatedRegions(), suiteOut);
-		writeOutputLine("\t" + "Number of skipped regions during parsing: "+ stats.getNumberOfSkippedRegionsDuringParsing(), suiteOut);
+		//writeOutputLine("\t" + "Number of skipped regions during parsing: "+ stats.getNumberOfSkippedRegionsDuringParsing(), suiteOut);
+		writeOutputLine("\t" + "Score: " + stats.calculateScore(), suiteOut);
+		write_Performance(stats, suiteOut);
+		
+	}
+
+	private void write_Performance(Statistics stats, PrintStream suiteOut)
+			throws FileNotFoundException {
+		writeOutputLine(suiteOut);
+		writeOutputLine("Performance", suiteOut);
 		writeOutputLine("\t" + "Average region selection time: " + stats.getAverageRegionSelectionTime(), suiteOut);
 		writeOutputLine("\t" + "Maximum region selection time: " + stats.getMaxRegionSelectionTime(), suiteOut);
-		writeOutputLine("\t" + "Number of non evaluated files: " + stats.nrOfNonEvaluatedFiles(), suiteOut);
-		writeOutputLine("\t" + "Score: " + stats.calculateScore(), suiteOut);
+		writeOutputLine("\t" + "Number of performance critical files: " +stats.getNumberOfPerformanceCritical(), suiteOut);
+		writeOutputLine("\t" + "Percentage of performance critical files: " +stats.getPercentageOfPerformanceCritical(), suiteOut);
+		writeOutputLine("\t" + "Performance Critical: " + stats.getPerformanceCriticalFiles(), suiteOut);
 	}
 
+	
 	public void write_Header(Testsuite testSuite, PrintStream suiteOut) throws FileNotFoundException {
-		writeOutputLine("*************************", suiteOut);
-		writeOutputLine(testSuite.getTestSuiteName(), suiteOut);
-		writeOutputLine("*************************", suiteOut);
+		writeOutputLine("Testsuite: "+testSuite.getTestSuiteName(), suiteOut);
 		writeOutputLine(suiteOut);
 	}
+	
+	 // Deletes all files and subdirectories under dir.
+    // Returns true if all deletions were successful.
+    // If a deletion fails, the method stops attempting to delete and returns false.
+    public static boolean deleteDir(File dir) {
+        if (dir.isDirectory()) {
+            String[] children = dir.list();
+            for (int i=0; i<children.length; i++) {
+                boolean success = deleteDir(new File(dir, children[i]));
+                if (!success) {
+                    return false;
+                }
+            }
+        }
+    
+        // The directory is now empty so delete it
+        return dir.delete();
+    }
+
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-26 08:28:15 UTC (rev 20312)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Statistics.java	2009-11-26 10:57:41 UTC (rev 20313)
@@ -17,17 +17,34 @@
 	private int maxRegionSelectionTime;
 	private int sumRegionSelectionTime;
 	private int numberOfSkippedRegionsDuringParsing;
-	private int numberOfPerformanceCritical;
+	private ArrayList<String> performanceCriticalFiles;
 	
+	public Statistics addStatistics(Statistics moreResults){
+		numberOfFiles+=moreResults.numberOfFiles;
+		numberOfEvaluatedRegions+=moreResults.numberOfEvaluatedRegions;
+		for (Evaluation eval : Evaluation.values()) {
+			resultsCategorised.get(eval).addAll(moreResults.resultsCategorised.get(eval));
+		}		
+		maxRegionSelectionTime=Math.max(maxRegionSelectionTime, moreResults.getMaxRegionSelectionTime());
+		sumRegionSelectionTime += moreResults.sumRegionSelectionTime;
+		numberOfSkippedRegionsDuringParsing+=moreResults.numberOfSkippedRegionsDuringParsing;
+		performanceCriticalFiles.addAll(moreResults.getPerformanceCriticalFiles());
+		return this;
+	}
+	
+	public ArrayList<String> getPerformanceCriticalFiles() {
+		return performanceCriticalFiles;
+	}
+
 	public int getNumberOfPerformanceCritical() {
-		return numberOfPerformanceCritical;
+		return performanceCriticalFiles.size();
 	}
 	
 	public int getPercentageOfPerformanceCritical() {
-		if(numberOfSkippedRegionsDuringParsing<=0){
+		if(numberOfFiles<=0){
 			return -1;
 		}
-		return 100*numberOfPerformanceCritical/numberOfSkippedRegionsDuringParsing;
+		return 100*getNumberOfPerformanceCritical()/numberOfFiles;
 	}
 
 	public int getMaxRegionSelectionTime() {
@@ -73,7 +90,7 @@
 		maxRegionSelectionTime=0;
 		sumRegionSelectionTime=0;
 		numberOfSkippedRegionsDuringParsing=0;
-		numberOfPerformanceCritical=0;
+		performanceCriticalFiles=new ArrayList<String>();
 	}
 
 	private void fillResultMap() {
@@ -84,7 +101,7 @@
 	
 	public void processFileResult(Testcase testFile) {
 		for (Evaluation result : testFile.getRegionEvaluations()) {
-			String fileName = testFile.getFileName();
+			String fileName = testFile.getFilePath();
 			getResultList(result).add(fileName);
 			numberOfEvaluatedRegions++;
 			//System.out.println(fileName);
@@ -96,8 +113,8 @@
 			numberOfSkippedRegionsDuringParsing++;
 			if(regionTime > maxRegionSelectionTime)
 				maxRegionSelectionTime=regionTime;
-			if(regionTime>PERFORMANCE_TIME_LIMIT)
-				numberOfPerformanceCritical++;
+			if(regionTime>PERFORMANCE_TIME_LIMIT && !performanceCriticalFiles.contains(testFile.getFilePath()))
+				performanceCriticalFiles.add(testFile.getFilePath());
 		}
 		numberOfFiles++;
 	}
@@ -123,7 +140,7 @@
 	public double calculateScore() {
 		double result=0;
 		result += 10*getResult(Evaluation.EXACT);
-		result += 5*getResult(Evaluation.SOMEWHAT_TOO_BIG);
+		result += 5*getResult(Evaluation.NEAR_EXACT);
 		result += 1*getResult(Evaluation.TOO_BIG);
 		result += 1*getResult(Evaluation.MERGED_REGION);
 		int nrOfEvaluated=numberOfEvaluatedRegions-nrOfNonEvaluatedFiles();
@@ -141,6 +158,6 @@
 		maxRegionSelectionTime=0;
 		sumRegionSelectionTime=0;
 		numberOfSkippedRegionsDuringParsing=0;
-		numberOfPerformanceCritical=0;
+		performanceCriticalFiles.clear();
 	}
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-26 08:28:15 UTC (rev 20312)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testcase.java	2009-11-26 10:57:41 UTC (rev 20313)
@@ -1,5 +1,6 @@
 package evaluating;
 
+import java.io.File;
 import java.io.FileNotFoundException;
 import java.util.ArrayList;
 import logging.*;
@@ -52,7 +53,7 @@
 			regionEvaluation.add(Evaluation.EXACT);
 		else if (expectedStartLine>=actualStartLine && expectedEndLine <= actualEndLine){
 			if(((expectedStartLine-actualStartLine) + (actualEndLine-expectedEndLine))<=SMALL_REGION_CRITERIA){
-				regionEvaluation.add(Evaluation.SOMEWHAT_TOO_BIG);
+				regionEvaluation.add(Evaluation.NEAR_EXACT);
 			}
 			else
 				regionEvaluation.add(Evaluation.TOO_BIG);
@@ -120,8 +121,12 @@
 		return regionEvaluation;
 	}
 
-	public String getFileName() {
+	public String getFilePath() {
 		return filePath;
 	}
+	
+	public String getFileName() {
+		return filePath.substring(filePath.lastIndexOf(File.separator)+1);
+	}
 
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testrun.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testrun.java	2009-11-26 08:28:15 UTC (rev 20312)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/Testrun.java	2009-11-26 10:57:41 UTC (rev 20313)
@@ -6,8 +6,12 @@
 	private ArrayList<Testsuite> testSuites;
 	private String nameOfTestRun;
 	private String description;
+	private Statistics totalStats;
 	
-	
+	public Statistics getTotalStats() {
+		return totalStats;
+	}
+
 	public String getDescription() {
 		return description;
 	}
@@ -32,12 +36,17 @@
 	public Testrun(String name){
 		testSuites=new ArrayList<Testsuite>();
 		nameOfTestRun=name;
+		totalStats=new Statistics();
 	}
 	
 	public void run() throws Exception{
 		for (Testsuite aSuite : this.testSuites) {
 			aSuite.runTestcases();			
 		}	
+		totalStats.reset();
+		for (Testsuite aSuite : this.testSuites) {
+			totalStats.addStatistics(aSuite.getStatistics());
+		}
 	}
 
 }

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-26 08:28:15 UTC (rev 20312)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/WriteStatistics.java	2009-11-26 10:57:41 UTC (rev 20313)
@@ -62,7 +62,7 @@
 	}
 	
 	private static String qualityHeaderRow() {
-		String[] columnHeaders = new String[]{"", Evaluation.EXACT.toString(), Evaluation.SOMEWHAT_TOO_BIG.toString(), Evaluation.TOO_BIG.toString(), "OTHER", "SCORE"};
+		String[] columnHeaders = new String[]{"", Evaluation.EXACT.toString(), Evaluation.NEAR_EXACT.toString(), Evaluation.TOO_BIG.toString(), "OTHER", "SCORE"};
 		String headerRow = toRowString(columnHeaders);
 		return headerRow;
 	}
@@ -71,7 +71,7 @@
 		String[] row1Values=new String[6];
 		row1Values[0] = s.getTestSuiteName();
 		int exactR = s.getStatistics().getResult(Evaluation.EXACT);
-		int goodR = s.getStatistics().getResult(Evaluation.SOMEWHAT_TOO_BIG);
+		int goodR = s.getStatistics().getResult(Evaluation.NEAR_EXACT);
 		int poorR = s.getStatistics().getResult(Evaluation.TOO_BIG);
 		int otherR =s.getStatistics().getNumberOfEvaluatedRegions()-exactR-goodR-poorR;
 		double scoreR=s.getStatistics().calculateScore();
@@ -133,7 +133,7 @@
 	public static void writeConsole_Testcase(Testcase aFile) throws FileNotFoundException {
 		writeOutputLine();
 		writeOutputLine("********************************************");
-		writeOutputLine("\t Filename: "+aFile.getFileName());
+		writeOutputLine("\t Filename: "+aFile.getFilePath());
 		writeOutputLine("\t Evaluations: "+aFile.getRegionEvaluations());
 		writeOutputLine("\t Recover Log: ");
 		ArrayList<RegionLog> recoverRegions = aFile.getRecoverLog().getRegionInfo();

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java	2009-11-26 08:28:15 UTC (rev 20312)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Scenarios.java	2009-11-26 10:57:41 UTC (rev 20313)
@@ -10,8 +10,10 @@
 
 import testrun.InfraStructure;
 import evaluating.Evaluation;
+import evaluating.EvaluationOutput;
 import evaluating.FilePaths;
 import evaluating.Testcase;
+import evaluating.Testrun;
 import evaluating.Testsuite;
 import evaluating.WriteStatistics;
 
@@ -22,7 +24,7 @@
 private Testsuite testsuite;
 	
 	public Test_Scenarios(){
-		fileLocations=new FilePaths(InfraStructure_Testing.DIR_SCENARIOS);
+		fileLocations=new FilePaths(InfraStructure_Testing.DIR_SCENARIOS, InfraStructure_Testing.DIR_ROOT_OUTPUT);
 		InfraStructure.addStandardLanguages(fileLocations);
 		testsuite=new Testsuite("Scenarios", fileLocations);
 	}
@@ -31,8 +33,11 @@
 	public void evaluateScenarios() throws Exception {
 		testsuite.setAllDirectories(true);
 		testsuite.addExtension(InfraStructure_Testing.JAVA_EXT);
-		testsuite.runTestcases();
-		WriteStatistics.writeConsole_TestSuite(testsuite);
+		Testrun r=new Testrun("Scenarios");
+		r.addTestSuite(testsuite);
+		r.run();
+		EvaluationOutput out=new EvaluationOutput(r, fileLocations);
+		out.writeResultsToFile();
 	}
 	
 	@Test
@@ -46,7 +51,7 @@
 	public void testGood() throws Exception {
 		ArrayList<Evaluation> evaluations = evaluateFile("Good.java");
 		Assert.assertEquals(1, evaluations.size());
-		Assert.assertEquals(Evaluation.SOMEWHAT_TOO_BIG, evaluations.get(0));
+		Assert.assertEquals(Evaluation.NEAR_EXACT, evaluations.get(0));
 	}
 	
 	@Test

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java	2009-11-26 08:28:15 UTC (rev 20312)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Statistics.java	2009-11-26 10:57:41 UTC (rev 20313)
@@ -26,8 +26,8 @@
 		assertEquals(2, statistics.getResultList(Evaluation.EXACT).size());
 		assertTrue(statistics.getResultList(Evaluation.EXACT).contains("Exact1.java"));
 		assertTrue(statistics.getResultList(Evaluation.EXACT).contains("Exact2.java"));
-		assertEquals(1, statistics.getResultList(Evaluation.SOMEWHAT_TOO_BIG).size());
-		assertTrue(statistics.getResultList(Evaluation.SOMEWHAT_TOO_BIG).contains("Good.java"));
+		assertEquals(1, statistics.getResultList(Evaluation.NEAR_EXACT).size());
+		assertTrue(statistics.getResultList(Evaluation.NEAR_EXACT).contains("Good.java"));
 		assertEquals(1, statistics.getResultList(Evaluation.TOO_BIG).size());
 		assertTrue(statistics.getResultList(Evaluation.TOO_BIG).contains("Bad.java"));
 		assertEquals(3, statistics.getResultList(Evaluation.WRONG_DATA).size());
@@ -45,7 +45,7 @@
 		processTestData();
 		assertEquals(11, statistics.getOverviewResults().size());
 		assertEquals("2", statistics.getOverviewResults().get(Evaluation.EXACT));
-		assertEquals("1", statistics.getOverviewResults().get(Evaluation.SOMEWHAT_TOO_BIG));
+		assertEquals("1", statistics.getOverviewResults().get(Evaluation.NEAR_EXACT));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.TOO_BIG));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.TOO_SMALL));
 		assertEquals("1", statistics.getOverviewResults().get(Evaluation.MIS_DIAGNOSED));

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-26 08:28:15 UTC (rev 20312)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/Test_Testcase.java	2009-11-26 10:57:41 UTC (rev 20313)
@@ -49,7 +49,7 @@
 		int actualStartLine=4;
 		int actualEndLine=15;		
 		regionSelectionData.processRegionData(expectedStartLine, expectedEndLine, actualStartLine, actualEndLine);
-		Assert.assertEquals(Evaluation.SOMEWHAT_TOO_BIG, regionSelectionData.getRegionEvaluations().get(0));
+		Assert.assertEquals(Evaluation.NEAR_EXACT, regionSelectionData.getRegionEvaluations().get(0));
 	}
 	
 	@Test
@@ -142,7 +142,7 @@
 	public void testRecoveryLog() throws FileNotFoundException {
 		Testcase twoExactRegions = new Testcase(InfraStructure_Testing.TWO_EXACT_REGIONS_JAVA);
 		twoExactRegions.compareRegions(InfraStructure_Testing.JAVA_GRAMMAR);
-		assertEquals(twoExactRegions.getFileName(), twoExactRegions.getRecoverLog().getFileName());
+		assertEquals(twoExactRegions.getFilePath(), twoExactRegions.getRecoverLog().getFileName());
 		ArrayList<RegionLog> regionInfo = twoExactRegions.getRecoverLog().getRegionInfo();
 		assertEquals(2, regionInfo.size());
 		assertEquals(2, regionInfo.get(0).getInspectedFragments().size());



From m.dejonge at tudelft.nl  Thu Nov 26 11:58:24 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 26 Nov 2009 10:58:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20314 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200911261058.nAQAwOcg011633@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-26 10:58:24 +0000 (Thu, 26 Nov 2009)
New Revision: 20314

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20314&view=rev

Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/FileLog.java

Log:
access to region selection times and skipped fragments

Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/FileLog.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/FileLog.java	2009-11-26 10:57:41 UTC (rev 20313)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/FileLog.java	2009-11-26 10:58:24 UTC (rev 20314)
@@ -23,5 +23,21 @@
     void addRegionInfo(RegionLog region) {
         regionInfo.add(region);
     } 
+    
+    public ArrayList<String> getSkippedFragments(){
+    	ArrayList<String> result=new ArrayList<String>();
+    	for (RegionLog region : getRegionInfo()) {
+			result.add(region.getSkippedFragment());
+		}
+    	return result;
+    }
+    
+    public ArrayList<Long> getRegionSelectionTimes(){
+    	ArrayList<Long> result=new ArrayList<Long>();
+    	for (RegionLog region : getRegionInfo()) {
+			result.add(region.getRegionSelectionTime());
+		}
+    	return result;
+    }
 
 }



From L.C.L.Kats at tudelft.nl  Thu Nov 26 13:46:57 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 26 Nov 2009 12:46:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20315 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.updatesite
Message-ID: <200911261246.nAQCkvOL013354@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-26 12:46:57 +0000 (Thu, 26 Nov 2009)
New Revision: 20315

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20315&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/MarkerAttributes.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
Error popups if jar/ctree cannot be dynamically loaded.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-26 10:58:24 UTC (rev 20314)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-26 12:46:57 UTC (rev 20315)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.1.1.5"
+      version="0.1.2"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-11-26 10:58:24 UTC (rev 20314)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-11-26 12:46:57 UTC (rev 20315)
@@ -129,7 +129,7 @@
 
 	public Object parse(String input, boolean scanOnly, IProgressMonitor monitor) {
 		Object result = getWrapped().parse(input, scanOnly, monitor);
-		if (isReinitialized) {
+		if (isReinitialized && lastEditor != null) {
 			// Update other services
 			// TODO: Trigger colorer update
 			// lastEditor.getEditor().getServiceControllerManager().getPresentationController().damage(new Region(0, input.length()));

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-11-26 10:58:24 UTC (rev 20314)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-11-26 12:46:57 UTC (rev 20315)
@@ -114,7 +114,7 @@
 			MarkerAttributes attributes = new MarkerAttributes(left, right, message, severity, PRIORITY_HIGH, false);
 			
 			IMarker marker = markersToDeleteOrReuse.remove(attributes); // reuse existing
-			if (marker == null)
+			if (marker == null || !marker.exists())
 				marker = file.createMarker(markerType);
 			marker.setAttributes(attributes.getAttributes(), attributes.getValues());
 			synchronized (activeMarkers) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/MarkerAttributes.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/MarkerAttributes.java	2009-11-26 10:58:24 UTC (rev 20314)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/MarkerAttributes.java	2009-11-26 12:46:57 UTC (rev 20315)
@@ -43,6 +43,9 @@
 	
 	@Override
 	public int hashCode() {
+		
+		// TODO: include offset + severity in MarkerAttributes hashCode()/equals()?
+		
 		final int prime = 31;
 		int result = 1;
 		result = prime * result + line;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-26 10:58:24 UTC (rev 20314)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-26 12:46:57 UTC (rev 20315)
@@ -155,8 +155,12 @@
 			Debug.stopTimer("Successfully loaded " +  filename);
 		} catch (InterpreterException e) {
 			Environment.logException(new BadDescriptorException("Error loading compiler service provider " + filename, e));
+			if (descriptor.isDynamicallyLoaded())
+				Environment.asynOpenErrorDialog("Dynamic descriptor loading", "Error loading compiler service provider " + filename, e);
 		} catch (IOException e) {
 			Environment.logException(new BadDescriptorException("Could not load compiler service provider " + filename, e));
+			if (descriptor.isDynamicallyLoaded())
+				Environment.asynOpenErrorDialog("Dynamic descriptor loading", "Error loading compiler service provider " + filename, e);
 		}
 	}
 	
@@ -169,10 +173,16 @@
 			runtime.loadJars(classpath);
 		} catch (SecurityException e) {
 			Environment.logException("Error loading compiler service providers " + jars, e);
+			if (descriptor.isDynamicallyLoaded())
+				Environment.asynOpenErrorDialog("Dynamic descriptor loading", "Error loading compiler service providers " + jars, e);
 		} catch (IncompatibleJarException e) {
 			Environment.logException("Error loading compiler service providers " + jars, e);
+			if (descriptor.isDynamicallyLoaded())
+				Environment.asynOpenErrorDialog("Dynamic descriptor loading", "Error loading compiler service providers " + jars, e);
 		} catch (IOException e) {
 			Environment.logException("Error loading compiler service providers " + jars, e);
+			if (descriptor.isDynamicallyLoaded())
+				Environment.asynOpenErrorDialog("Dynamic descriptor loading", "Error loading compiler service providers " + jars, e);
 		}
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2009-11-26 10:58:24 UTC (rev 20314)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2009-11-26 12:46:57 UTC (rev 20315)
@@ -3,10 +3,10 @@
    <description url="http://www.lclnet.nl/update">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.1.1.4.jar" id="org.strategoxt.imp" version="0.1.1.4">
+   <feature url="features/org.strategoxt.imp_0.1.1.5.jar" id="org.strategoxt.imp" version="0.1.1.5">
       <category name="Spoofax/IMP"/>
    </feature>
-   <feature url="features/org.strategoxt.imp_0.1.1.5.jar" id="org.strategoxt.imp" version="0.1.1.5">
+   <feature url="features/org.strategoxt.imp_0.1.2.jar" id="org.strategoxt.imp" version="0.1.2">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP"/>



From L.C.L.Kats at tudelft.nl  Thu Nov 26 14:39:53 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 26 Nov 2009 13:39:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20316 - LennartKats -
	strategoxt/trunk/strc-core/lib/stratego/strc/front
Message-ID: <200911261339.nAQDdr2H014150@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-26 13:39:52 +0000 (Thu, 26 Nov 2009)
New Revision: 20316

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20316&view=rev

Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str

Log:
Fixed a problem with quotes (") in string quotations, reported by Sander.

Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-11-26 12:46:57 UTC (rev 20315)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-11-26 13:39:52 UTC (rev 20316)
@@ -156,7 +156,9 @@
     StringEscape4(s, t) -> StringEscape1(s, t)
 
   DesugarQStr :
-    QStr(s) -> Anno(Str(s), Op("Nil", []))
+    QStr(s) -> Anno(Str(s'), Op("Nil", []))
+    with
+      s' := <conc-strings> ("\"", s, "\"")
 
   DesugarQBr :
     QBr(s) -> QStr(s)



From L.C.L.Kats at tudelft.nl  Thu Nov 26 17:15:56 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 26 Nov 2009 16:15:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20317 - LennartKats -
	strategoxt/trunk/strc-core/lib/stratego/strc/front
Message-ID: <200911261615.nAQGFuOp016435@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-26 16:15:56 +0000 (Thu, 26 Nov 2009)
New Revision: 20317

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20317&view=rev

Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str

Log:
Fixed another tabs vs. string quotations issue (STR-783).

Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-11-26 13:39:52 UTC (rev 20316)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar-string-quotations.str	2009-11-26 16:15:56 UTC (rev 20317)
@@ -34,7 +34,14 @@
       ; padding-length := <padding-length> padding'
       )
       // Unpadd the initial string
-    ; [QStr(string-as-chars(![<id>]; remove-padding(|<string-length> initial, <string-length> initial) => ([<id>], _))) | id]
+    ; [QStr(
+         string-as-chars(
+           ![<id>]
+         ; remove-padding(|<padding-length> initial, <padding-length> initial) => ([<id>], _)
+         )
+       )
+      | id
+      ]
     else
       where(
         padding-length := <padding-length> padding



From m.dejonge at tudelft.nl  Thu Nov 26 19:02:34 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 26 Nov 2009 18:02:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20318 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery: .
	CriticalScenarios CriticalScenarios/PreviousRegion
Message-ID: <200911261802.nAQI2YA3017728@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-26 18:02:34 +0000 (Thu, 26 Nov 2009)
New Revision: 20318

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20318&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceLessScopeNotation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScopeNotation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScope_OnClosing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/DoubleClosed_Last.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScopeNotation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScope_OnClosing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/NotClosed_Last.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous2.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous3.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous3.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous4.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/SimpleLine.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/SimpleLine.str

Log:
Testfiles for Previous Region

Changes (first 1000 lines of the diffs):

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceLessScopeNotation.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceLessScopeNotation.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceLessScopeNotation.java	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,31 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true) //@START
+    	  int //@END
+      corrLine3();
+      return 5;
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScopeNotation.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScopeNotation.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScopeNotation.java	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,34 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true) //@START
+      {
+    	  int i=1;
+          return 1;  
+      }} //@END
+      corrLine3();
+      return 5;
+  }          
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScope_OnClosing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScope_OnClosing.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScope_OnClosing.java	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,27 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment()//@START
+  {
+      int corrLine1;
+      corrLine2();
+  }}} //@END      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  } 
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/DoubleClosed_Last.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/DoubleClosed_Last.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/DoubleClosed_Last.str_java	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	); //@START
+    test-traits( 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)) //@END
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScopeNotation.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScopeNotation.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScopeNotation.java	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,33 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true)//{ //@START
+    	  int i=1;
+          return 1;  
+      } //@END
+      corrLine3();
+      return 5;
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScope_OnClosing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScope_OnClosing.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScope_OnClosing.java	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,26 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){//@START
+      int corrLine1;
+      corrLine2();
+  }}} //@END      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  } 
+
+}
+

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,69 @@
+module foo
+
+imports
+  libstratego-lib
+  foo
+
+strategies //@START
+
+  main-foo =
+    fatal-err(|"No main strategy")
+        
+  editor-analyze:
+    (ast, path, fullpath) -> (errors, warnings, notes)
+    with
+      // Analysis: scope and record dynamic rules
+      (try(dr-scope-all-end);
+      dr-scope-all-start;
+      alltd(record-entity)
+    with errors   := <collect-all(include-origin(constraint-error))> ast;
+      warnings := <collect-all(include-origin(constraint-warning))> ast;
+      notes    := <collect-all(include-origin(constraint-note))> ast
+   
+  include-origin(s):
+    t -> (t, message)
+    where
+      message := <s; try(all(is-string <+ write-to-string)); try(concat-strings)> t
+  
+  editor-resolve:
+    (Type(type), position, ast, path, fullpath) -> target
+    where
+      target := <GetEntity> type
+
+  editor-hover:
+    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term) //@END
+
+rules
+
+  record-entity:
+    Entity(x_declaration, body) -> Entity(x_declaration, body)
+    with
+      x_reference := x_declaration;
+      rules(
+        GetEntity: x_reference -> x_declaration
+      )
+    
+  constraint-error:
+    Property(x, Type(type)) -> ["Type ", type, " is not defined"]
+    where
+      not(!type => "String");
+      not(!type => "Int");
+      not(<GetEntity> type)
+  
+  constraint-warning:
+    Entity(x, _) -> "Entity names must start with a capital"
+    where
+      not(<explode-string; Hd; is-upper> x)
+  
+  constraint-note:
+    Module("example", _) -> "This is just an example program in the \"entities\" language"
+
+signature constructors
+
+  // These definitions are not strictly necessary,
+  // but they ensure that the build doesn't break if the syntax
+  // is changed and these constructors no longer exist
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/NotClosed_Last.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/NotClosed_Last.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/NotClosed_Last.str_java	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	); //@START
+    test-traits( 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]| //@END
+	
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous2.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous2.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous2.str_java	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input a a a //@START
+    , assimilate-java-traits; strip-annos //@END
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	); 
+    test-traits( 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous3.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous3.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous3.str	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,69 @@
+module foo
+
+imports
+  libstratego-lib
+  foo
+
+strategies //@START
+
+  main-foo =
+    fatal-err(|"No main strategy")
+        
+  editor-analyze:
+    (ast, path, fullpath) -> (errors, warnings, notes)
+    with
+      // Analysis: scope and record dynamic rules
+      try(dr-scope-all-end);
+      dr-scope-all-start;
+      (alltd(record-entity)
+    with errors   := <collect-all(include-origin(constraint-error))> ast;
+      warnings := <collect-all(include-origin(constraint-warning))> ast;
+      notes    := <collect-all(include-origin(constraint-note))> ast
+   
+  include-origin(s):
+    t -> (t, message)
+    where
+      message := <s; try(all(is-string <+ write-to-string)); try(concat-strings)> t
+  
+  editor-resolve:
+    (Type(type), position, ast, path, fullpath) -> target
+    where
+      target := <GetEntity> type
+
+  editor-hover:
+    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term) //@END
+
+rules
+
+  record-entity:
+    Entity(x_declaration, body) -> Entity(x_declaration, body)
+    with
+      x_reference := x_declaration;
+      rules(
+        GetEntity: x_reference -> x_declaration
+      )
+    
+  constraint-error:
+    Property(x, Type(type)) -> ["Type ", type, " is not defined"]
+    where
+      not(!type => "String");
+      not(!type => "Int");
+      not(<GetEntity> type)
+  
+  constraint-warning:
+    Entity(x, _) -> "Entity names must start with a capital"
+    where
+      not(<explode-string; Hd; is-upper> x)
+  
+  constraint-note:
+    Module("example", _) -> "This is just an example program in the \"entities\" language"
+
+signature constructors
+
+  // These definitions are not strictly necessary,
+  // but they ensure that the build doesn't break if the syntax
+  // is changed and these constructors no longer exist
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous3.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous3.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous3.str_java	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos 
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(  //@START
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	)); //@END
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	); 
+    test-traits( 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous4.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous4.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous4.str_java	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos 
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits( 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ //@START
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); } //@END
+	   
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/SimpleLine.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/SimpleLine.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/SimpleLine.java	2009-11-26 18:02:34 UTC (rev 20318)
@@ -0,0 +1,29 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      corrLine( //@START @END
+      corrLine3();
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+

(75 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Fri Nov 27 10:05:46 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 27 Nov 2009 09:05:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20319 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	org.strategoxt.imp.runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <200911270905.nAR95ku2029944@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-27 09:05:46 +0000 (Fri, 27 Nov 2009)
New Revision: 20319

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20319&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Log:
Fixed a race condition and null pointer exception encountered by Danny.


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-11-26 18:02:34 UTC (rev 20318)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-11-27 09:05:46 UTC (rev 20319)
@@ -136,7 +136,7 @@
 			return sdf2imp_jvm_0_0.instance.invoke(context, input);
 		} catch (StrategoErrorExit e) {
 			Environment.logException("Fatal error in dynamic builder, log:\n" + agent.getLog().trim(), e);
-			reportError(mainFile, "Fatal error in descriptor builder: " + e.getMessage(), e);
+			reportError(mainFile, "Fatal error in descriptor " + mainFile + ": " + e.getMessage(), e);
 			return null;
 		} catch (StrategoExit e) {
 			context.printStackTrace();

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-11-26 18:02:34 UTC (rev 20318)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-11-27 09:05:46 UTC (rev 20319)
@@ -156,19 +156,19 @@
 		} catch (BadDescriptorException e) {
 			Environment.logException("Error in descriptor " + descriptor, e);
 			reportError(source, "Error in descriptor: " + e.getMessage(), null);
-			reportError(descriptor, e.getOffendingTerm(), "Error in descriptor: " + e.getMessage(), e);
+			reportError(descriptor, e.getOffendingTerm(), "Error in descriptor " + descriptor + ": " + e.getMessage(), e);
 		} catch (IOException e) {
 			Environment.logException("Error reading descriptor " + descriptor, e);
-			reportError(source, "Internal error reading descriptor" + e.getMessage(), e);
+			reportError(source, "Internal error reading descriptor " + descriptor + ": " + e.getMessage(), e);
 		} catch (CoreException e) {
 			Environment.logException("Unable to load descriptor " + descriptor, e);
-			reportError(source, "Internal error loading descriptor: " + e.getMessage(), e);
+			reportError(source, "Internal error loading descriptor " + descriptor + ": " + e.getMessage(), e);
 		} catch (RuntimeException e) {
 			Environment.logException("Unable to load descriptor " + descriptor, e);
-			reportError(source, "Internal error loading descriptor: " + e.getMessage(), e);
+			reportError(source, "Internal error loading descriptor " + descriptor + ": " + e.getMessage(), e);
 		} catch (Error e) { // workspace thread swallows this >:(
 			Environment.logException("Unable to load descriptor " + descriptor, e);
-			reportError(source, "Internal error loading descriptor: " + e.getMessage(), e);
+			reportError(source, "Internal error loading descriptor " + descriptor + ": " + e.getMessage(), e);
 			throw e;
 		} finally {
 			asyncMessageHandler.commitChanges();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-26 18:02:34 UTC (rev 20318)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-11-27 09:05:46 UTC (rev 20319)
@@ -198,7 +198,7 @@
                class="org.strategoxt.imp.runtime.services.BuilderButtonDelegate"
                definitionId="org.strategoxt.imp.runtime.transformCommand"
                id="org.strategoxt.imp.runtime.stratego.builder"
-               label="Apply transformation"
+               label="Transform"
                style="pulldown"
                toolbarPath="spoofax"
                tooltip="Apply transformation to file in current editor"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-11-26 18:02:34 UTC (rev 20318)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-11-27 09:05:46 UTC (rev 20319)
@@ -111,6 +111,7 @@
 		boolean foundFactory = false;
 		
 		// TODO: caching of builders and reference resolvers?
+		//       (but then they must be immutable; no more IBuilder.setOpenEditorEnabled)
 		
 		try {
 			for (AbstractServiceFactory<T> factory : serviceFactories) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-26 18:02:34 UTC (rev 20318)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-27 09:05:46 UTC (rev 20319)
@@ -71,9 +71,10 @@
 		this.openEditor = openEditor;
 	}
 	
-	public void execute(EditorState editor, IStrategoAstNode node) { // TODO: refactor
-		IStrategoTerm resultTerm = null;
+	public void execute(EditorState editor, IStrategoAstNode node) {
+		// TODO: refactor
 		String filename = null;
+		String result = null;
 		
 		synchronized (observer.getSyncRoot()) {
 			try {
@@ -86,7 +87,7 @@
 					return;
 				}
 				
-				resultTerm = observer.invoke(builderRule, node);
+				IStrategoTerm resultTerm = observer.invoke(builderRule, node);
 				if (resultTerm == null) {
 					observer.reportRewritingFailed();
 					Environment.logException("Builder failed:\n" + observer.getLog());
@@ -109,11 +110,17 @@
 				resultTerm = termAt(resultTerm, 1);
 				resultTerm = try_1_0.instance.invoke(observer.getRuntime().getCompiledContext(),
 						resultTerm, concat_strings_0_0.instance);
+				
+				if (resultTerm != null && filename != null) {
+					result = isTermString(resultTerm)
+						? asJavaString(resultTerm)
+						: ppATerm(resultTerm);
+				}
 			} catch (InterpreterErrorExit e) {
 				observer.reportRewritingFailed();
 				Environment.logException("Builder failed:\n" + observer.getLog(), e);
 				if (editor.getDescriptor().isDynamicallyLoaded()) StrategoConsole.activateConsole();
-				openError(editor, e.getMessage());
+				openError(editor, e.getMessage()); // TODO: show message in editor if st
 			} catch (UndefinedStrategyException e) {
 				reportException(editor, e);
 			} catch (InterpreterExit e) {
@@ -124,13 +131,10 @@
 				reportException(editor, e);
 			}
 		}
-		
-		if (resultTerm != null && filename != null) {
+
+		if (result != null) {
 			try {
-				String result = isTermString(resultTerm)
-					? asJavaString(resultTerm)
-					: ppATerm(resultTerm);
-				IFile file = createFile(editor, filename, result);
+				IFile file = setFileContents(editor, filename, result);
 				// TODO: if not persistent, create IEditorInput from result String
 				if (openEditor) {
 					IEditorPart target = openEditor(file, realTime);
@@ -139,10 +143,9 @@
 				}
 			} catch (CoreException e) {
 				Environment.logException("Builder failed", e);
-				openError(editor, "Builder failed (see error log)");
+				openError(editor, "Failed (see error log): " + e.getMessage());
 			}
 		}
-
 	}
 
 	private String ppATerm(IStrategoTerm term) {
@@ -170,12 +173,36 @@
 				caption, null, status);
 	}
 
-	private IFile createFile(EditorState editor, String filename, String contents) throws CoreException {
-		IFile file = editor.getProject().getRawProject().getFile(filename);
+	private IFile setFileContents(final EditorState editor, String filename, final String contents) throws CoreException {
+		assert !Thread.holdsLock(observer.getSyncRoot()) || Thread.holdsLock(Environment.getSyncRoot())
+			: "Acquiring a resource lock can cause a deadlock";
+
+		final IFile file = editor.getProject().getRawProject().getFile(filename);
 		InputStream resultStream = new ByteArrayInputStream(contents.getBytes());
 		if (file.exists()) {
-			// TODO: editor.getDocument().set(contents);?
 			file.setContents(resultStream, true, true, null);
+			
+			/* TODO: update editor contents instead of file?
+			if (editor.getEditor().getTitleImage().isDisposed()) {
+				InputStream resultStream = new ByteArrayInputStream(contents.getBytes());
+				file.setContents(resultStream, true, true, null);
+				...save...
+			} else {
+				new UIJob("Update derived editor") {
+					@Override
+					public IStatus runInUIThread(IProgressMonitor monitor) {
+						try {
+							editor.getDocument().set(contents);
+							...save...
+			                ...ensure listener knows updated time stamp...
+						} catch (RuntimeException e) {
+							Environment.logException("Could not update derived editor", e);
+						}
+						return Status.OK_STATUS;
+					}
+				}.schedule();
+			}
+			*/
 		} else {
 			file.create(resultStream, true, null);
 		}
@@ -186,7 +213,10 @@
 	 * Opens or activates an editor.
 	 * (Asynchronous) exceptions are swallowed and logged.
 	 */
-	private static IEditorPart openEditor(IFile file, boolean realTime) throws PartInitException {
+	private IEditorPart openEditor(IFile file, boolean realTime) throws PartInitException {
+		assert !Thread.holdsLock(observer.getSyncRoot()) || Thread.holdsLock(Environment.getSyncRoot())
+			: "Opening a new editor and acquiring a resource lock can cause a deadlock";
+		
 		// TODO: WorkBenchPage.openEdiotr with a custom IEditorInput?
 		IWorkbenchPage page =
 			PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2009-11-26 18:02:34 UTC (rev 20318)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2009-11-27 09:05:46 UTC (rev 20319)
@@ -6,18 +6,13 @@
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.editor.UniversalEditor;
 import org.eclipse.imp.parser.IModelListener;
 import org.eclipse.imp.parser.IParseController;
-import org.eclipse.jface.dialogs.ErrorDialog;
 import org.eclipse.ui.IEditorPart;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
-import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
 import org.strategoxt.imp.runtime.stratego.StrategoTermPath;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 
@@ -46,7 +41,7 @@
 	
 	private boolean enabled = true;
 	
-	private  StrategoBuilderListener(UniversalEditor editor, IEditorPart targetEditor, IFile targetFile,
+	private StrategoBuilderListener(UniversalEditor editor, IEditorPart targetEditor, IFile targetFile,
 			String builder, IStrategoAstNode selection) {
 		
 		this.editor = new WeakReference<UniversalEditor>(editor);
@@ -110,12 +105,13 @@
 			} else {
 				builder.execute(editor, editor.getParseController().getCurrentAst());
 			}
-			lastChanged = targetFile.getLocalTimeStamp();
 
 		} catch (BadDescriptorException e) {
 			Environment.logException("Could not update derived editor for " + editor.getResource(), e);
-			ErrorDialog.openError(editor.getEditor().getSite().getShell(),
-					"Spoofax/IMP builder", "Could not update derived editor for " + editor.getResource(), Status.OK_STATUS); 
+		} catch (RuntimeException e) {
+			Environment.logException("Could not update derived editor for " + editor.getResource(), e);
+		} finally {
+			if (targetFile.exists()) lastChanged = targetFile.getLocalTimeStamp();
 		}
 	}
 	
@@ -125,33 +121,4 @@
 		if (newAst == null) return null;
 		return StrategoTermPath.findCorrespondingSubtree(newAst, selection);
 	}
-
-	public static void rescheduleAllListeners() {
-		boolean required = false;
-		synchronized (asyncListeners) {
-			for (StrategoBuilderListener listener : asyncListeners.values()) {
-				if (listener.isEnabled()) {
-					required = true;
-					break;
-				}
-			}
-		}
-		if (required) {
-			new Job("Rebuild derived files") {
-				@Override
-				protected IStatus run(IProgressMonitor monitor) {
-					synchronized (asyncListeners) {
-						for (StrategoBuilderListener listener : asyncListeners.values()) {
-							try {
-								listener.update(monitor);
-							} catch (Exception e) {
-								Environment.logException("Could not update builder", e);
-							}
-						}
-					}
-					return Status.OK_STATUS;
-				}
-			}.schedule(DynamicParseController.REINIT_PARSE_DELAY * 3);
-		}
-	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-26 18:02:34 UTC (rev 20318)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2009-11-27 09:05:46 UTC (rev 20319)
@@ -303,7 +303,7 @@
 		
 		Context context = runtime.getCompiledContext();
 		sdf2imp.init(context);
-		feedbacks = (IStrategoList) postprocess_feedback_results_0_0.instance.invoke(context, feedbacks);
+		feedbacks = postProcessFeedback(feedbacks, context);
 		
 	    for (IStrategoTerm feedback : feedbacks.getAllSubterms()) {
 	        IStrategoTerm term = termAt(feedback, 0);
@@ -312,6 +312,16 @@
 			
 			messages.addMarker(resource, term, message, severity);
 	    }
+	}
+
+	private IStrategoList postProcessFeedback(IStrategoList feedbacks, Context context) {
+		IStrategoList result =
+				(IStrategoList) postprocess_feedback_results_0_0.instance.invoke(context, feedbacks);
+		if (result == null) {
+			// Throw an exception to trigger an Eclipse pop-up  
+			throw new StrategoException("Illegal output from " + feedbackFunction + ": " + feedbacks);
+		}
+		return result;
 	}	
 	
 	/**



From L.C.L.Kats at tudelft.nl  Fri Nov 27 11:17:52 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 27 Nov 2009 10:17:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20320 - LennartKats -
	strategoxt/trunk/strc-core/tools
Message-ID: <200911271017.nARAHqpI030810@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-27 10:17:52 +0000 (Fri, 27 Nov 2009)
New Revision: 20320

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20320&view=rev

Modified:
   strategoxt/trunk/strc-core/tools/str

Log:
'str' fixes

Changes:

Modified: strategoxt/trunk/strc-core/tools/str
===================================================================
--- strategoxt/trunk/strc-core/tools/str	2009-11-27 09:05:46 UTC (rev 20319)
+++ strategoxt/trunk/strc-core/tools/str	2009-11-27 10:17:52 UTC (rev 20320)
@@ -5,10 +5,11 @@
 IOPTION=
 FOPTION=
 COPTION=
+MOPTION=
 GOPTION=
-GOPTION=
 LOPTION=
 LAOPTION=
+INPUTFILE=
 OOPTION="-O 1"
 
 while true; do
@@ -36,6 +37,12 @@
     continue
   fi
   
+  if [ "$1" = "-m" ]; then
+    MOPTION="-m $2"
+    shift; shift
+    continue
+  fi
+  
   if [ "$1" = "-O" ]; then
     OOPTION="-O $2"
     shift; shift
@@ -55,30 +62,34 @@
   fi
   
   if [ "$1" = "-i" ]; then
-    INPUT="$(cat $2)"
+    INPUTFILE=$2
     shift; shift
-    $0 $FOPTION $GOPTION $COPTION $OOPTION $LOPTION $IOPTION $LAOPTION $* $INPUT
-    exit $?
+    continue
   fi
   
   if (echo "$1" | grep -e '^ [^ ]\.' &>/dev/null || [ -f "$1" ]) && [ $# = 1 ]; then
     if [ -f "$1" ]; then
-      $0 $FOPTION $GOPTION $COPTION $OOPTION $LOPTION $IOPTION $LAOPTION "$(cat $1)"
-      exit $?
+      INPUTFILE=$1
     else
       echo Not a Stratego module: $1 >&2
       exit 1
     fi
   fi
   
-  if [ $# = 0 ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
-    echo 'Usage: str [-c | -F [--lib] | -g] [-O N] [-i FILE | INPUT]'
+  if [ "$1" = "--help" ] || [ "$1" = "-h" ] ||
+     ([ $# = 0 ] && [ "$INPUTFILE" = "" ]) ||
+     echo "$1" | grep '^-' &>/dev/null; then
+    echo 'Usage: str [-c | -F | -g] [OPTIONS] [-i FILE | INPUT]'
     echo 'Compile and run Stratego program in FILE or from INPUT.'
     echo
+    echo ' COMMANDS:'
     echo '  -c        Display program output C code instead of running it.'
     echo '  -F        Display program in core format instead of running it.'
     echo '  -g        Run program using gdb and display backtrace.'
-    echo '  --lib     Treat as library, keeping all unused strategies'
+    echo '  -m NAME   Sets the main strategy to use (default main).'
+    echo
+    echo ' OPTIONS:'
+    echo '  --lib     Treat as library, keeping all unused strategies.'
     echo '  -la NAME  Search the libtool library libNAME.la when linking.'
     echo '  -I DIR    Include modules from directory DIR.'
     echo '  -O N      Use optimization level N (default 1).'
@@ -89,28 +100,29 @@
   fi
   break
 done
-  
-if echo "$@" | grep '^module ' >/dev/null; then
-  PROGRAM="$@"
-else
-  PROGRAM="module foo imports libstratego-lib libstratego-xtc libstratego-sglr libstratego-rtg libstrc rules main =
-$@"
-fi
 
 if [ "$TEMP" == "" ]; then
   TEMP=/tmp
 fi
-
+TEMPFILE=$TEMP/str-`date +'%N'`.str
 [ -d $TEMP/.libs ] || (mkdir $TEMP/.libs; chmod 777 $TEMP/.libs)
+  
+if [ "$INPUTFILE" == "" ]; then
+  if echo "$@" | grep '^module ' >/dev/null; then
+    PROGRAM="$@"
+  else
+    PROGRAM="module foo imports libstratego-lib libstratego-xtc libstratego-sglr libstratego-rtg libstrc rules main =
+$@"
+  fi
+  echo "$PROGRAM" |
+    perl -pe 's/\blibstratego-lib\b//; s/module\s+[\w\-'']+\b/$& imports libstratego-lib strategies/' > $TEMPFILE
+  INPUTFILE=$TEMPFILE
+fi
 
-TEMPFILE=$TEMP/str-`date +'%N'`.str
-echo "$PROGRAM" |
-  perl -pe 's/\blibstratego-lib\b//; s/module\s+[\w\-'']+\b/$& imports libstratego-lib strategies/' > $TEMPFILE
-
-(strc $FOPTION $LOPTION $COPTION $OOPTION $IOPTION $LAOPTION --format-check 0 -Xcc -O0 -la stratego-lib -la stratego-xtc -la strc -la stratego-sglr -la stratego-rtg -I . -i $TEMPFILE -o $TEMPFILE.out --statistics 0 || exit 1) 2>&1 | grep -vE '^ *[ig]cc|warning ] Mismatch between basename|info ] Compiling|libtool: '
+(strc $FOPTION $LOPTION $COPTION $MOPTION $OOPTION $IOPTION $LAOPTION --format-check 0 -Xcc -O0 -la stratego-lib -la stratego-xtc -la strc -la stratego-sglr -la stratego-rtg -I . -i $INPUTFILE -o $TEMPFILE.out --statistics 0 || exit 1) 2>&1 | grep -vE '^ *[ig]cc|warning ] Mismatch between basename|info ] Compiling|libtool: '
 RET=$?
 
-rm $TEMPFILE
+rm -f $TEMPFILE
 
 if [ -e $TEMPFILE.out ]; then
   if [ $FOPTION ]; then



From m.dejonge at tudelft.nl  Fri Nov 27 13:21:45 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 27 Nov 2009 12:21:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20321 - MaartjeDeJonge -
	sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion
Message-ID: <200911271221.nARCLjcn032290@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-27 12:21:45 +0000 (Fri, 27 Nov 2009)
New Revision: 20321

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20321&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_BraceLess.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_Double.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceLessScopeNotation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScopeNotation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScope_OnClosing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScopeNotation.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScope_OnClosing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/SimpleLine.java

Log:
renaming

Changes:

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceLessScopeNotation.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceLessScopeNotation.java	2009-11-27 10:17:52 UTC (rev 20320)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceLessScopeNotation.java	2009-11-27 12:21:45 UTC (rev 20321)
@@ -1,31 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-class X {
-	
-  private int correctMethod1(){
-     corr2();    
-     return corrInt;
-  }
-
-  private int ErrorFragment(){
-      int corrLine1;
-      corrLine2();
-      if(true) //@START
-    	  int //@END
-      corrLine3();
-      return 5;
-  }      
-  
-  private int correctMethod2(){
-      corr2();
-      corr2();
-      int corrInt=1;
-      return corrInt;
-  }
-  
-
-}
-

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScopeNotation.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScopeNotation.java	2009-11-27 10:17:52 UTC (rev 20320)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScopeNotation.java	2009-11-27 12:21:45 UTC (rev 20321)
@@ -1,34 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-class X {
-	
-  private int correctMethod1(){
-     corr2();    
-     return corrInt;
-  }
-
-  private int ErrorFragment(){
-      int corrLine1;
-      corrLine2();
-      if(true) //@START
-      {
-    	  int i=1;
-          return 1;  
-      }} //@END
-      corrLine3();
-      return 5;
-  }          
-  
-  private int correctMethod2(){
-      corr2();
-      corr2();
-      int corrInt=1;
-      return corrInt;
-  }
-  
-
-}
-

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScope_OnClosing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScope_OnClosing.java	2009-11-27 10:17:52 UTC (rev 20320)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScope_OnClosing.java	2009-11-27 12:21:45 UTC (rev 20321)
@@ -1,27 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-class X {
-	
-  private int correctMethod1(){
-     corr2();    
-     return corrInt;
-  }
-
-  private int ErrorFragment()//@START
-  {
-      int corrLine1;
-      corrLine2();
-  }}} //@END      
-  
-  private int correctMethod2(){
-      corr2();
-      corr2();
-      int corrInt=1;
-      return corrInt;
-  } 
-
-}
-

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScopeNotation.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScopeNotation.java	2009-11-27 10:17:52 UTC (rev 20320)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScopeNotation.java	2009-11-27 12:21:45 UTC (rev 20321)
@@ -1,33 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-class X {
-	
-  private int correctMethod1(){
-     corr2();    
-     return corrInt;
-  }
-
-  private int ErrorFragment(){
-      int corrLine1;
-      corrLine2();
-      if(true)//{ //@START
-    	  int i=1;
-          return 1;  
-      } //@END
-      corrLine3();
-      return 5;
-  }      
-  
-  private int correctMethod2(){
-      corr2();
-      corr2();
-      int corrInt=1;
-      return corrInt;
-  }
-  
-
-}
-

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScope_OnClosing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScope_OnClosing.java	2009-11-27 10:17:52 UTC (rev 20320)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScope_OnClosing.java	2009-11-27 12:21:45 UTC (rev 20321)
@@ -1,26 +0,0 @@
-package test;
-
-import java.io.IOException;
-import junit.framework.Assert;
-import org.spoofax.jsglr.SGLRException;
-class X {
-	
-  private int correctMethod1(){
-     corr2();    
-     return corrInt;
-  }
-
-  private int ErrorFragment(){//@START
-      int corrLine1;
-      corrLine2();
-  }}} //@END      
-  
-  private int correctMethod2(){
-      corr2();
-      corr2();
-      int corrInt=1;
-      return corrInt;
-  } 
-
-}
-

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str	2009-11-27 10:17:52 UTC (rev 20320)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str	2009-11-27 12:21:45 UTC (rev 20321)
@@ -1,69 +0,0 @@
-module foo
-
-imports
-  libstratego-lib
-  foo
-
-strategies //@START
-
-  main-foo =
-    fatal-err(|"No main strategy")
-        
-  editor-analyze:
-    (ast, path, fullpath) -> (errors, warnings, notes)
-    with
-      // Analysis: scope and record dynamic rules
-      (try(dr-scope-all-end);
-      dr-scope-all-start;
-      alltd(record-entity)
-    with errors   := <collect-all(include-origin(constraint-error))> ast;
-      warnings := <collect-all(include-origin(constraint-warning))> ast;
-      notes    := <collect-all(include-origin(constraint-note))> ast
-   
-  include-origin(s):
-    t -> (t, message)
-    where
-      message := <s; try(all(is-string <+ write-to-string)); try(concat-strings)> t
-  
-  editor-resolve:
-    (Type(type), position, ast, path, fullpath) -> target
-    where
-      target := <GetEntity> type
-
-  editor-hover:
-    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term) //@END
-
-rules
-
-  record-entity:
-    Entity(x_declaration, body) -> Entity(x_declaration, body)
-    with
-      x_reference := x_declaration;
-      rules(
-        GetEntity: x_reference -> x_declaration
-      )
-    
-  constraint-error:
-    Property(x, Type(type)) -> ["Type ", type, " is not defined"]
-    where
-      not(!type => "String");
-      not(!type => "Int");
-      not(<GetEntity> type)
-  
-  constraint-warning:
-    Entity(x, _) -> "Entity names must start with a capital"
-    where
-      not(<explode-string; Hd; is-upper> x)
-  
-  constraint-note:
-    Module("example", _) -> "This is just an example program in the \"entities\" language"
-
-signature constructors
-
-  // These definitions are not strictly necessary,
-  // but they ensure that the build doesn't break if the syntax
-  // is changed and these constructors no longer exist
-  Module   : ID * List(Entity)   -> Module
-  Entity   : ID * List(Property) -> Entity
-  Property : ID * Type           -> Property
-  Type     : ID                  -> Type

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str_java (from rev 20318, sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str_java	2009-11-27 12:21:45 UTC (rev 20321)
@@ -0,0 +1,69 @@
+module foo
+
+imports
+  libstratego-lib
+  foo
+
+strategies //@START
+
+  main-foo =
+    fatal-err(|"No main strategy")
+        
+  editor-analyze:
+    (ast, path, fullpath) -> (errors, warnings, notes)
+    with
+      // Analysis: scope and record dynamic rules
+      (try(dr-scope-all-end);
+      dr-scope-all-start;
+      alltd(record-entity)
+    with errors   := <collect-all(include-origin(constraint-error))> ast;
+      warnings := <collect-all(include-origin(constraint-warning))> ast;
+      notes    := <collect-all(include-origin(constraint-note))> ast
+   
+  include-origin(s):
+    t -> (t, message)
+    where
+      message := <s; try(all(is-string <+ write-to-string)); try(concat-strings)> t
+  
+  editor-resolve:
+    (Type(type), position, ast, path, fullpath) -> target
+    where
+      target := <GetEntity> type
+
+  editor-hover:
+    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term) //@END
+
+rules
+
+  record-entity:
+    Entity(x_declaration, body) -> Entity(x_declaration, body)
+    with
+      x_reference := x_declaration;
+      rules(
+        GetEntity: x_reference -> x_declaration
+      )
+    
+  constraint-error:
+    Property(x, Type(type)) -> ["Type ", type, " is not defined"]
+    where
+      not(!type => "String");
+      not(!type => "Int");
+      not(<GetEntity> type)
+  
+  constraint-warning:
+    Entity(x, _) -> "Entity names must start with a capital"
+    where
+      not(<explode-string; Hd; is-upper> x)
+  
+  constraint-note:
+    Module("example", _) -> "This is just an example program in the \"entities\" language"
+
+signature constructors
+
+  // These definitions are not strictly necessary,
+  // but they ensure that the build doesn't break if the syntax
+  // is changed and these constructors no longer exist
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str_java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java (from rev 20318, sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScope_OnClosing.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java	2009-11-27 12:21:45 UTC (rev 20321)
@@ -0,0 +1,31 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment()//@START
+  {
+      if(true)
+         int corrLine1;
+         if(true)
+             return 5;
+         }
+      }
+  } //@END      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  } 
+
+}
+


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_BraceLess.java (from rev 20318, sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceLessScopeNotation.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_BraceLess.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_BraceLess.java	2009-11-27 12:21:45 UTC (rev 20321)
@@ -0,0 +1,31 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true) //@START
+    	  int //@END
+      corrLine3();
+      return 5;
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_BraceLess.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_Double.java (from rev 20318, sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CSharpScopeNotation.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_Double.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_Double.java	2009-11-27 12:21:45 UTC (rev 20321)
@@ -0,0 +1,34 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true) //@START
+      {
+    	  int i=1;
+          return 1;  
+      }} //@END
+      corrLine3();
+      return 5;
+  }          
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_Double.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java (from rev 20318, sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/JavaScopeNotation.java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java	2009-11-27 12:21:45 UTC (rev 20321)
@@ -0,0 +1,33 @@
+package test;
+
+import java.io.IOException;
+import junit.framework.Assert;
+import org.spoofax.jsglr.SGLRException;
+class X {
+	
+  private int correctMethod1(){
+     corr2();    
+     return corrInt;
+  }
+
+  private int ErrorFragment(){
+      int corrLine1;
+      corrLine2();
+      if(true)//{ //@START
+    	  int i=1;
+          return 1;  
+      } //@END
+      corrLine3();
+      return 5;
+  }      
+  
+  private int correctMethod2(){
+      corr2();
+      corr2();
+      int corrInt=1;
+      return corrInt;
+  }
+  
+
+}
+


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/SimpleLine.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/SimpleLine.java	2009-11-27 10:17:52 UTC (rev 20320)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/SimpleLine.java	2009-11-27 12:21:45 UTC (rev 20321)
@@ -13,7 +13,7 @@
   private int ErrorFragment(){
       int corrLine1;
       corrLine2();
-      corrLine( //@START @END
+      corrLine( //@START @END //@BW_START @BW_END
       corrLine3();
   }      
   



From m.dejonge at tudelft.nl  Fri Nov 27 15:05:09 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 27 Nov 2009 14:05:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20322 - MaartjeDeJonge -
	sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion
Message-ID: <200911271405.nARE59Xn001425@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-27 14:05:09 +0000 (Fri, 27 Nov 2009)
New Revision: 20322

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20322&view=rev

Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_BraceLess.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_Double.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java

Log:
marked with BW

Changes:

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java	2009-11-27 12:21:45 UTC (rev 20321)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeError_OnClosing.java	2009-11-27 14:05:09 UTC (rev 20322)
@@ -10,15 +10,15 @@
      return corrInt;
   }
 
-  private int ErrorFragment()//@START
+  private int ErrorFragment()//@START @BW_START
   {
-      if(true)
-         int corrLine1;
+      if(true){
+         int corrLine1;}
          if(true)
              return 5;
          }
       }
-  } //@END      
+  } //@END  @BW_END    
   
   private int correctMethod2(){
       corr2();

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_BraceLess.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_BraceLess.java	2009-11-27 12:21:45 UTC (rev 20321)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_BraceLess.java	2009-11-27 14:05:09 UTC (rev 20322)
@@ -13,8 +13,8 @@
   private int ErrorFragment(){
       int corrLine1;
       corrLine2();
-      if(true) //@START
-    	  int //@END
+      if(true) //@START @BW_START
+    	  int //@END @BW_END
       corrLine3();
       return 5;
   }      

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_Double.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_Double.java	2009-11-27 12:21:45 UTC (rev 20321)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_Double.java	2009-11-27 14:05:09 UTC (rev 20322)
@@ -13,11 +13,11 @@
   private int ErrorFragment(){
       int corrLine1;
       corrLine2();
-      if(true) //@START
+      if(true) //@START @BW_START
       {
     	  int i=1;
           return 1;  
-      }} //@END
+      }} //@END @BW_END
       corrLine3();
       return 5;
   }          

Modified: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java	2009-11-27 12:21:45 UTC (rev 20321)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ScopeNotation_EndOnly.java	2009-11-27 14:05:09 UTC (rev 20322)
@@ -13,10 +13,10 @@
   private int ErrorFragment(){
       int corrLine1;
       corrLine2();
-      if(true)//{ //@START
-    	  int i=1;
-          return 1;  
-      } //@END
+      while(true){ //@START @BW_START
+          int i;
+          return 1;}  
+      } //@END @BW_END
       corrLine3();
       return 5;
   }      



From L.C.L.Kats at tudelft.nl  Fri Nov 27 15:53:50 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 27 Nov 2009 14:53:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20323 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms
	strc-java/trunk/java strc-java/trunk/test strc-java/trunk/test/basic
Message-ID: <200911271453.nAREro1q001709@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-27 14:53:50 +0000 (Fri, 27 Nov 2009)
New Revision: 20323

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20323&view=rev

Added:
   strc-java/trunk/test/basic/readterm_1.str
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java
   strc-java/trunk/java/spoofax-libs.jar
   strc-java/trunk/test/Makefile.am

Log:
Support annotations when reading terms from a file.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java	2009-11-27 14:05:09 UTC (rev 20322)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java	2009-11-27 14:53:50 UTC (rev 20323)
@@ -55,19 +55,31 @@
         parseSkip(bis);
         final int ch = bis.read();
         switch(ch) {
-        case '[': return parseList(bis);
-        case '(': return parseTuple(bis);
-        case '"': return parseString(bis);
+        case '[': return parseAnno(bis, parseList(bis));
+        case '(': return parseAnno(bis, parseTuple(bis));
+        case '"': return parseAnno(bis, parseString(bis));
         default:
             bis.unread(ch);
-            if(Character.isLetter(ch)) {
-                return parseAppl(bis);
+            if (Character.isLetter(ch)) {
+                return parseAnno(bis, parseAppl(bis));
             }
             else if(Character.isDigit(ch))
-                return parseNumber(bis);
+                return parseAnno(bis, parseNumber(bis));
         }
         throw new ParseError("Invalid term : '" + (char)ch + "'");
     }
+    
+    private IStrategoTerm parseAnno(PushbackInputStream bis, IStrategoTerm term) throws IOException {
+        parseSkip(bis);
+        final int ch = bis.read();
+        if (ch == '{') {
+            List<IStrategoTerm> annos = parseTermSequence(bis, '}');
+            return annotateTerm(term, makeList(annos));
+        } else {
+            bis.unread(ch);
+            return term;
+        }
+    }
 
     private IStrategoTerm parseString(PushbackInputStream bis) throws IOException {
         StringBuilder sb = new StringBuilder();

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)

Modified: strc-java/trunk/test/Makefile.am
===================================================================
--- strc-java/trunk/test/Makefile.am	2009-11-27 14:05:09 UTC (rev 20322)
+++ strc-java/trunk/test/Makefile.am	2009-11-27 14:53:50 UTC (rev 20323)
@@ -61,7 +61,8 @@
            scopes_1 scopes_2 internal_1 internal_2 override_1 extend_1 \
            shared_var_1 shared_var_2 shared_var_3 shared_var_4 shared_var_5 \
            dynrules_1 dynrules_2 dynrules_3 dynrules_4 dynrules_5 iset_1 iset_2 fetch_1 \
-           mapconcat_1 traversal_1 annos_1 annos_2 pp_java5_to_string chars_1
+           mapconcat_1 traversal_1 annos_1 annos_2 pp_java5_to_string chars_1 \
+           readterm_1
 
 BASICTESTFILES=$(addprefix basic/,$(addsuffix .str,$(BASICTESTS)))
 

Added: strc-java/trunk/test/basic/readterm_1.str
===================================================================
--- strc-java/trunk/test/basic/readterm_1.str	                        (rev 0)
+++ strc-java/trunk/test/basic/readterm_1.str	2009-11-27 14:53:50 UTC (rev 20323)
@@ -0,0 +1,12 @@
+module readterm_1
+
+imports
+  libstratego-lib
+
+strategies
+  
+  main =
+    t := Some([1,2{3}]{4}){5};
+    <WriteToTextFile> ("readterm_1.trm", t);
+    <ReadFromFile> "readterm_1.trm" => t
+



From m.dejonge at tudelft.nl  Sun Nov 29 12:10:31 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sun, 29 Nov 2009 11:10:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20324 - MaartjeDeJonge
	- in sglr-recovery/trunk/Evaluation_RegionRecovery:
	CriticalScenarios CriticalScenarios/PreviousRegion
	CriticalScenarios/SeperatorMustBeSkipped src/evaluating
	src/testrun src/tests
Message-ID: <200911291110.nATBAVBY014747@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-29 11:10:31 +0000 (Sun, 29 Nov 2009)
New Revision: 20324

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20324&view=rev

Added:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BigRegion.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceStartingPrevLine.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Comma.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CommaSeparator.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Comma_FirstLine.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava_Comma.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/FirstStrategy.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LastStrategy.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/MidStrategy.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeperatorMustBeSkipped/
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeperatorMustBeSkipped/BraceStartingPrevLine_SemiColumn.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/SeperatorMustBeSkipped/CommaAndSemiColumn.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/CriticalScenarios_Base.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/CriticalScenarios_Java.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/tests/CriticalScenarios_Stratego.java
Removed:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/DoubleClosed_Last.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/LineWithUnclosedBracket.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/NotClosed_Last.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous2.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous3.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous3.str_java
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous4.str_java
Modified:
   sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/SimpleLine.str
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/evaluating/ErroneousRegion.java
   sglr-recovery/trunk/Evaluation_RegionRecovery/src/testrun/InfraStructure.java

Log:
backward-skip:
- seperators like comma on start of line
- opening/closing all notations 

Changes (first 1000 lines of the diffs):

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BigRegion.str_java (from rev 20318, sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/NotClosed_Last.str_java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BigRegion.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BigRegion.str_java	2009-11-29 11:10:31 UTC (rev 20324)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1)); //@BW_START
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	); //@START
+    test-traits( 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]| //@END //@BW_END
+	
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BigRegion.str_java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceStartingPrevLine.str
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceStartingPrevLine.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/BraceStartingPrevLine.str	2009-11-29 11:10:31 UTC (rev 20324)
@@ -0,0 +1,67 @@
+module foo
+
+imports
+  libstratego-lib
+  foo
+
+strategies 
+
+  main-foo =
+    fatal-err(|"No main strategy")
+        
+  editor-analyze:
+    (ast, path, fullpath) -> (errors, warnings, notes)
+    with
+      // Analysis: scope and record dynamic rules
+      (try(dr-scope-all-end /*@START @END @BW_START @BW_END*/
+      alltd(record-entity)  with errors   := <collect-all(include-origin(constraint-error))> ast;
+      warnings := <collect-all(include-origin(constraint-warning))> ast;
+      notes    := <collect-all(include-origin(constraint-note))> ast
+   
+  include-origin(s):
+    t -> (t, message)
+    where
+      message := <s; try(all(is-string <+ write-to-string)); try(concat-strings)> t
+  
+  editor-resolve:
+    (Type(type), position, ast, path, fullpath) -> target
+    where
+      target := <GetEntity> type
+
+  editor-hover:
+    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term) 
+
+rules
+
+  record-entity:
+    Entity(x_declaration, body) -> Entity(x_declaration, body)
+    with
+      x_reference := x_declaration;
+      rules(
+        GetEntity: x_reference -> x_declaration
+      )
+    
+  constraint-error:
+    Property(x, Type(type)) -> ["Type ", type, " is not defined"]
+    where
+      not(!type => "String");
+      not(!type => "Int");
+      not(<GetEntity> type)
+  
+  constraint-warning:
+    Entity(x, _) -> "Entity names must start with a capital"
+    where
+      not(<explode-string; Hd; is-upper> x)
+  
+  constraint-note:
+    Module("example", _) -> "This is just an example program in the \"entities\" language"
+
+signature constructors
+
+  // These definitions are not strictly necessary,
+  // but they ensure that the build doesn't break if the syntax
+  // is changed and these constructors no longer exist
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Comma.str_java (from rev 20318, sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/DoubleClosed_Last.str_java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Comma.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Comma.str_java	2009-11-29 11:10:31 UTC (rev 20324)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+    ); 
+    test-traits( //@START @BW_START 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+    )) //@END @BW_END
+  
+    trait-output-tests = where(<set-config> (Stage(), 4));
+      test-traits(
+        !"class Foo with Bar {} trait Bar { void bar() {} }"
+      , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Comma.str_java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CommaSeparator.str_java (from rev 20318, sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous2.str_java)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CommaSeparator.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CommaSeparator.str_java	2009-11-29 11:10:31 UTC (rev 20324)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos 
+    , input( //@START @END @BW_START @BW_END 
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	); 
+    test-traits( 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )


Property changes on: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/CommaSeparator.str_java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Comma_FirstLine.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Comma_FirstLine.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Comma_FirstLine.str_java	2009-11-29 11:10:31 UTC (rev 20324)
@@ -0,0 +1,121 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input( //@START @BW_START //@END //@BW_END
+    , assimilate-java-traits; strip-annos 
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	); 
+    test-traits( 
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Deleted: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/DoubleClosed_Last.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/DoubleClosed_Last.str_java	2009-11-27 14:53:50 UTC (rev 20323)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/DoubleClosed_Last.str_java	2009-11-29 11:10:31 UTC (rev 20324)
@@ -1,121 +0,0 @@
-module test-java-traits
-
-imports
-  libstratego-lib
-  libdryad-compiler
-  java-traits
-
-strategies
-
-  main-test-java-traits =
-    option-wrap(
-      fail-fast-option + test-only-option + general-options
-    , test-suite(
-        !"Java trait tests"
-      , 
-        testsuite-section(java-trait-tests   |"Rewrite to Java");
-        testsuite-section(trait-output-tests |"Rewrite to classes");
-        testsuite-section(class-trait-tests  |"Traits from classfiles");
-        testsuite-section(trait-error-tests  |"Error reporting")
-      )
-    )
-
-  test-traits(input, output) =
-    do-test(
-      input
-    , assimilate-java-traits; strip-annos
-    , input
-    , output
-    )
-  
-  /** Unit test: retrieve al error messages; compare. */
-  test-catch-error(input, output) =
-    do-test(
-      input
-    , catch-error
-    , input
-    , output
-    )
-
-  catch-error =
-    let provide-error(catch) =
-      scoped-set-config(!Stage(), !0,
-        assimilate-java-traits
-      );
-      
-      try(dryad-compiler(
-        ?DryadError(_, _); catch; fail // catch & abort at error
-      ))
-    in
-      collect-argument-invokes(provide-error)
-    end
-  
-/** Unit tests. */
-strategies
-
-  java-trait-tests = where(<set-config> (Stage(), 1));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , !compilation-unit |[ 
-         class Foo                 { void bar() {} }
-         abstract class $Trait_Bar { void bar() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	);
-    test-traits(
-      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
-    , !compilation-unit |[ 
-         class Foo                 {}
-         abstract class $Trait_Bar { void baz() {} }
-         abstract class $Trait_Baz { void baz() {} }
-	   ]|
-	); //@START
-    test-traits( 
-      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
-    , !compilation-unit |[ 
-         class Foo                 { void required() {} ~Semicolon }
-         abstract class $Trait_Bar { void required(); }
-	   ]|
-	)) //@END
-  
-  trait-output-tests = where(<set-config> (Stage(), 4));
-    test-traits(
-      !"class Foo with Bar {} trait Bar { void bar() {} }"
-    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
-    )
-  
-  class-trait-tests =
-    where(
-      <set-config> (Stage(), 4);
-      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
-      <set-config> (Stage(), 1)
-    );
-    test-traits(
-      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
-    , ?[ compilation-unit |[ 
-           class Foo { void bar() {} }
-	     ]|
-	   , _ // bar
-	   ]
-    )
-
-  trait-error-tests =
-    test-catch-error(
-      !"class Foo with Undeclared {}"
-    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
-    );
-    test-catch-error(
-      !"class Foo with Bar {} trait Bar { void required(); }"
-    , ?[DryadError("Missing required method", _)]
-    );
-    test-catch-error(
-      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
-    , ?[DryadError("Circular reference from trait","Loop2")
-       ,DryadError("Circular reference from trait","Loop1")]
-    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava.str_java	2009-11-29 11:10:31 UTC (rev 20324)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar( //) {} } @START @END @BW_START @BW_END
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava_Comma.str_java
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava_Comma.str_java	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/ErrorInJava_Comma.str_java	2009-11-29 11:10:31 UTC (rev 20324)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ //@BW_START
+         class Foo                 { void bar() {} //} @START @END  
+         abstract class $Trait_Bar { void bar() {} }
+	   ]| //@BW_END
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Copied: sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/FirstStrategy.str (from rev 20318, sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/Previous3.str)
===================================================================
--- sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/FirstStrategy.str	                        (rev 0)
+++ sglr-recovery/trunk/Evaluation_RegionRecovery/CriticalScenarios/PreviousRegion/FirstStrategy.str	2009-11-29 11:10:31 UTC (rev 20324)
@@ -0,0 +1,69 @@
+module foo
+
+imports
+  libstratego-lib
+  foo
+
+strategies 
+
+  main-foo =
+    fatal-err(|"No main strategy")
+        
+  editor-analyze:
+    (ast, path, fullpath) -> (errors, warnings, notes)

(1574 diff lines omitted)


From m.dejonge at tudelft.nl  Sun Nov 29 20:32:35 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sun, 29 Nov 2009 19:32:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20325 - MaartjeDeJonge
	- sglr-recovery/trunk/RecoveryLogging/src/logging
Message-ID: <200911291932.nATJWZww019598@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-11-29 19:32:35 +0000 (Sun, 29 Nov 2009)
New Revision: 20325

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20325&view=rev

Modified:
   sglr-recovery/trunk/RecoveryLogging/src/logging/FileLog.java
   sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
   sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java

Log:
store/print previous-region
print current


Changes:

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/FileLog.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/FileLog.java	2009-11-29 11:10:31 UTC (rev 20324)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/FileLog.java	2009-11-29 19:32:35 UTC (rev 20325)
@@ -39,5 +39,8 @@
 		}
     	return result;
     }
+	public void clear() {
+		regionInfo.clear();
+	}
 
 }

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-11-29 11:10:31 UTC (rev 20324)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RecoveryLogging.aj	2009-11-29 19:32:35 UTC (rev 20325)
@@ -2,6 +2,7 @@
 
 import java.util.ArrayList;
 import org.spoofax.jsglr.FineGrainedRepair;
+import org.spoofax.jsglr.IStructureSkipper;
 import org.spoofax.jsglr.IndentInfo;
 import org.spoofax.jsglr.Main;
 import org.spoofax.jsglr.RecoveryConnector;
@@ -47,10 +48,33 @@
         execution(void RegionRecovery.testRegion(StructureSkipSuggestion)) && target(rs) && args(regionTested);
    
   
+    pointcut prevRegion(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getPreviousSkipSuggestions())&& target(rs);
+    
+    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> prevRegions): prevRegion(rs) {
+	  if (!prevRegions.isEmpty()) {
+		  currentRegion.addPrevRegion(rs.getHistory().getFragment(prevRegions.get(0)));
+		  System.out.println("**************** PREVIOUS REGIONS *************");
+		  System.out.println(rs.getHistory().getFragment(prevRegions.get(0)));
+		  System.out.println("********************************************");
+	  }
+    }
+    
+    pointcut currRegions(IStructureSkipper rs): execution(ArrayList<StructureSkipSuggestion> *.getCurrentSkipSuggestions())&& target(rs);
+
+    after(IStructureSkipper rs) returning (ArrayList<StructureSkipSuggestion> currentRegions): currRegions(rs) {
+  	  if (!currentRegions.isEmpty()) {
+  		  //currentRegion.addPrevRegion(rs.getHistory().getFragment(prevRegions.get(0)));
+  		  System.out.println("****************** CURRENT REGIONS ****************");
+  		  System.out.println(rs.getHistory().getFragment(currentRegions.get(0)));
+  		  System.out.println("********************************************");
+  	  }
+   }
+
+    
     before(String x, String y, SGLR s): parsing(x, y, s) {
         currentFile=new FileLog();
         currentFile.setFileName(x);
-        //System.err.println(x);
+        //System.out.println("KKL"+x);
     }   
     
     after(RegionRecovery rs, StructureSkipSuggestion region): regionTesting(rs, region) {

Modified: sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java
===================================================================
--- sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-11-29 11:10:31 UTC (rev 20324)
+++ sglr-recovery/trunk/RecoveryLogging/src/logging/RegionLog.java	2009-11-29 19:32:35 UTC (rev 20325)
@@ -7,10 +7,21 @@
     private TreeMap<String, Long> executionTimetable;
     private String skippedFragment;
     private ArrayList<String> inspectedFragments;
+    private ArrayList<String> prevRegions;
     
-    public RegionLog(){
+    
+    public ArrayList<String> getPrevRegions() {
+		return prevRegions;
+	}
+
+	public void addPrevRegion(String prevRegion) {
+		this.prevRegions.add(prevRegion);
+	}
+
+	public RegionLog(){
         executionTimetable=new TreeMap<String, Long>();
         inspectedFragments=new ArrayList<String>();
+        prevRegions=new ArrayList<String>();
     }
     
     public TreeMap<String, Long> getExecutionTimetable() {



From L.C.L.Kats at tudelft.nl  Mon Nov 30 12:08:45 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 30 Nov 2009 11:08:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20326 - LennartKats -
	strategoxt/trunk/strc-core/tools
Message-ID: <200911301108.nAUB8j5b004210@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-30 11:08:45 +0000 (Mon, 30 Nov 2009)
New Revision: 20326

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20326&view=rev

Modified:
   strategoxt/trunk/strc-core/tools/str

Log:


Changes:

Modified: strategoxt/trunk/strc-core/tools/str
===================================================================
--- strategoxt/trunk/strc-core/tools/str	2009-11-29 19:32:35 UTC (rev 20325)
+++ strategoxt/trunk/strc-core/tools/str	2009-11-30 11:08:45 UTC (rev 20326)
@@ -82,20 +82,22 @@
     echo 'Usage: str [-c | -F | -g] [OPTIONS] [-i FILE | INPUT]'
     echo 'Compile and run Stratego program in FILE or from INPUT.'
     echo
-    echo ' COMMANDS:'
+    echo 'COMMANDS:'
     echo '  -c        Display program output C code instead of running it.'
     echo '  -F        Display program in core format instead of running it.'
     echo '  -g        Run program using gdb and display backtrace.'
-    echo '  -m NAME   Sets the main strategy to use (default main).'
     echo
-    echo ' OPTIONS:'
+    echo 'OPTIONS:'
     echo '  --lib     Treat as library, keeping all unused strategies.'
     echo '  -la NAME  Search the libtool library libNAME.la when linking.'
+    echo '  -m NAME   Sets the main strategy to use (default main).'
     echo '  -I DIR    Include modules from directory DIR.'
     echo '  -O N      Use optimization level N (default 1).'
+    echo
+    echo 'INPUT:'
     echo '  -i FILE   Read input from FILE.'
-    echo '  INPUT     Use INPUT as the input program (typically specified using single quotes),'
-    echo '            which can be a single strategy or a complete module'
+    echo '  INPUT     Use INPUT as the input program (typically specified using single quotes).'
+    echo '            Can be a single strategy or a complete module'
     exit
   fi
   break



From L.C.L.Kats at tudelft.nl  Mon Nov 30 14:02:26 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 30 Nov 2009 13:02:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20327 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.sdf/trans
	org.strategoxt.imp.feature
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego
	org.strategoxt.imp.nativebundle/META-INF
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
	org.strategoxt.imp.updatesite
Message-ID: <200911301302.nAUD2QA6005933@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-11-30 13:02:25 +0000 (Mon, 30 Nov 2009)
New Revision: 20327

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20327&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaSPILibrary.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/ReportWithFailure.java
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/MetatoolingActivator.java
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2009-11-30 11:08:45 UTC (rev 20326)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str	2009-11-30 13:02:25 UTC (rev 20327)
@@ -26,11 +26,10 @@
       errors := [] // TODO
       // errors := <alltd(context-free-syntax(collect-all(context-free-syntax-error)))> ast
   
-  context-free-syntax-error:
-    prod(s*, s, a*) -> (s, "Production should contain a {cons(\"Label\")} attribute used as a label in the abstract syntax")
+  context-free-syntax-warning:
+    prod(s*, s, a*) -> (s, "Production should contain a {cons(\"Label\")} attribute for the abstract syntax or a {bracket} attribute")
     where
-      <collect(?sort(_) + ?iter-star(_) + ?iter-plus(_) + ?iter-star-sep(_, _) + ?iter-plus-sep(_, _))> s;
-      <not(one(?term(cons(_))))> a*
+      not(!s* => [sort(x)])
 
 rules
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-30 11:08:45 UTC (rev 20326)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-11-30 13:02:25 UTC (rev 20327)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.1.2"
+      version="0.1.2.2"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">
@@ -178,7 +178,7 @@
          id="org.eclipse.imp.prefspecs"
          download-size="0"
          install-size="0"
-         version="0.1.79"
+         version="0.1.79.qualifier"
          unpack="false"/>
 
    <plugin
@@ -225,6 +225,6 @@
          id="org.strategoxt.imp.nativebundle"
          download-size="0"
          install-size="0"
-         version="0.1.1.1"/>
+         version="0.1.1.qualifier"/>
 
 </feature>

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/MetatoolingActivator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/MetatoolingActivator.java	2009-11-30 11:08:45 UTC (rev 20326)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/MetatoolingActivator.java	2009-11-30 13:02:25 UTC (rev 20327)
@@ -8,7 +8,7 @@
 import org.eclipse.core.runtime.FileLocator;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
-import org.strategoxt.imp.metatooling.stratego.MetaIMPLibrary;
+import org.strategoxt.imp.metatooling.stratego.MetaSPILibrary;
 
 public class MetatoolingActivator extends AbstractUIPlugin {
 
@@ -16,7 +16,7 @@
 	
 	public MetatoolingActivator() {
 		instance = this;
-		MetaIMPLibrary.init();
+		MetaSPILibrary.init();
 	}
 
 	public static MetatoolingActivator getDefault() { 

Deleted: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java	2009-11-30 11:08:45 UTC (rev 20326)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java	2009-11-30 13:02:25 UTC (rev 20327)
@@ -1,30 +0,0 @@
-package org.strategoxt.imp.metatooling.stratego;
-
-import java.io.IOException;
-
-import org.eclipse.core.runtime.Platform;
-import org.strategoxt.imp.nativebundle.SDFBundleCommand;
-import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.stratego_xtc.xtc_command_1_0;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class MetaIMPLibrary {
-	public static void init() {
-		// It's a small library, okay?
-		SDFBundleCommand nativeBundle = new SDFBundleCommand();
-		xtc_command_1_0.instance = nativeBundle;
-		
-		try {
-			nativeBundle.init();
-		} catch (IOException e) {
-			Environment.logException("Could not determine the binary path for the native tool bundle (" 
-					+ Platform.getOS() + "/" + Platform.getOSArch()
-					+ ")", e);
-		} catch (RuntimeException e) {
-			Environment.logException("Failed to initialize the native tool bundle (" + Platform.getOS()
-					+ "/" + Platform.getOSArch() + ")", e);
-		}
-	}
-}

Copied: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaSPILibrary.java (from rev 20318, spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaIMPLibrary.java)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaSPILibrary.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/MetaSPILibrary.java	2009-11-30 13:02:25 UTC (rev 20327)
@@ -0,0 +1,30 @@
+package org.strategoxt.imp.metatooling.stratego;
+
+import java.io.IOException;
+
+import org.eclipse.core.runtime.Platform;
+import org.strategoxt.imp.nativebundle.SDFBundleCommand;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.stratego_xtc.xtc_command_1_0;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class MetaSPILibrary {
+	public static void init() {
+		// It's a small library, okay?
+		SDFBundleCommand nativeBundle = new SDFBundleCommand();
+		xtc_command_1_0.instance = nativeBundle;
+		
+		try {
+			nativeBundle.init();
+		} catch (IOException e) {
+			Environment.logException("Could not determine the binary path for the native tool bundle (" 
+					+ Platform.getOS() + "/" + Platform.getOSArch()
+					+ ")", e);
+		} catch (RuntimeException e) {
+			Environment.logException("Failed to initialize the native tool bundle (" + Platform.getOS()
+					+ "/" + Platform.getOSArch() + ")", e);
+		}
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	2009-11-30 11:08:45 UTC (rev 20326)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	2009-11-30 13:02:25 UTC (rev 20327)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: Nativebundle Plug-in
 Bundle-SymbolicName: org.strategoxt.imp.nativebundle
-Bundle-Version: 0.1.1.1
+Bundle-Version: 0.1.1.qualifier
 Bundle-Activator: org.strategoxt.imp.nativebundle.Activator
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-11-30 11:08:45 UTC (rev 20326)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-11-30 13:02:25 UTC (rev 20327)
@@ -111,7 +111,6 @@
 		boolean foundFactory = false;
 		
 		// TODO: caching of builders and reference resolvers?
-		//       (but then they must be immutable; no more IBuilder.setOpenEditorEnabled)
 		
 		try {
 			for (AbstractServiceFactory<T> factory : serviceFactories) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java	2009-11-30 11:08:45 UTC (rev 20326)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java	2009-11-30 13:02:25 UTC (rev 20327)
@@ -53,7 +53,7 @@
 		if (builder == null) {
 			openError("No builders defined for this editor");
 		} else {
-			builder.execute(editor, null);
+			builder.execute(editor, null, null, false);
 		}
 	}
 
@@ -81,7 +81,7 @@
 				@Override
 				public void run() {
 					lastAction = builder.getCaption();
-					builder.execute(editor, null);
+					builder.execute(editor, null, null, false);
 				}
 			};
 			ActionContributionItem item = new ActionContributionItem(action);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java	2009-11-30 11:08:45 UTC (rev 20326)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IBuilder.java	2009-11-30 13:02:25 UTC (rev 20327)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.runtime.services;
 
+import org.eclipse.core.resources.IFile;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 
@@ -10,9 +11,5 @@
 
 	String getCaption();
 	
-	void setOpenEditorEnabled(boolean openEditor);
-	
-	boolean isOpenEditorEnabled();
-	
-	void execute(EditorState editor, IStrategoAstNode ast);
+	void execute(EditorState editor, IStrategoAstNode ast, IFile errorReportFile, boolean isRebuild);
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-30 11:08:45 UTC (rev 20326)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2009-11-30 13:02:25 UTC (rev 20327)
@@ -45,11 +45,11 @@
 	
 	private final boolean realTime;
 	
+	private final boolean openEditor;
+	
 	@SuppressWarnings("unused")
 	private final boolean persistent;
 	
-	private boolean openEditor;
-	
 	public StrategoBuilder(StrategoObserver observer, String caption, String builderRule, boolean openEditor, boolean realTime, boolean persistent) {
 		this.observer = observer;
 		this.caption = caption;
@@ -63,18 +63,11 @@
 		return caption;
 	}
 	
-	public boolean isOpenEditorEnabled() {
-		return openEditor;
-	}
-	
-	public void setOpenEditorEnabled(boolean openEditor) {
-		this.openEditor = openEditor;
-	}
-	
-	public void execute(EditorState editor, IStrategoAstNode node) {
+	public void execute(EditorState editor, IStrategoAstNode node, IFile errorReportFile, boolean isRebuild) {
 		// TODO: refactor
 		String filename = null;
 		String result = null;
+		Exception errorReport = null;
 		
 		synchronized (observer.getSyncRoot()) {
 			try {
@@ -112,7 +105,7 @@
 						resultTerm, concat_strings_0_0.instance);
 				
 				if (resultTerm != null && filename != null) {
-					result = isTermString(resultTerm)
+					result = isTermString(resultTerm) 
 						? asJavaString(resultTerm)
 						: ppATerm(resultTerm);
 				}
@@ -120,7 +113,11 @@
 				observer.reportRewritingFailed();
 				Environment.logException("Builder failed:\n" + observer.getLog(), e);
 				if (editor.getDescriptor().isDynamicallyLoaded()) StrategoConsole.activateConsole();
-				openError(editor, e.getMessage()); // TODO: show message in editor if st
+				if (errorReportFile == null || !openEditor) {
+					openError(editor, e.getMessage());
+				} else {
+					errorReport = e;
+				}
 			} catch (UndefinedStrategyException e) {
 				reportException(editor, e);
 			} catch (InterpreterExit e) {
@@ -132,19 +129,24 @@
 			}
 		}
 
-		if (result != null) {
-			try {
-				IFile file = setFileContents(editor, filename, result);
+		try {
+			if (errorReport != null) {
+				setFileContents(editor, errorReportFile, "ERROR: " + errorReport.getMessage());
+			}
+		
+			if (result != null) {
+				IFile file = editor.getProject().getRawProject().getFile(filename);
+				setFileContents(editor, file, result);
 				// TODO: if not persistent, create IEditorInput from result String
-				if (openEditor) {
+				if (openEditor && !isRebuild) {
 					IEditorPart target = openEditor(file, realTime);
 					if (realTime)
 						StrategoBuilderListener.addListener(editor.getEditor(), target, file, getCaption(), node);
 				}
-			} catch (CoreException e) {
-				Environment.logException("Builder failed", e);
-				openError(editor, "Failed (see error log): " + e.getMessage());
 			}
+		} catch (CoreException e) {
+			Environment.logException("Builder failed", e);
+			openError(editor, "Failed (see error log): " + e.getMessage());
 		}
 	}
 
@@ -173,11 +175,10 @@
 				caption, null, status);
 	}
 
-	private IFile setFileContents(final EditorState editor, String filename, final String contents) throws CoreException {
+	private void setFileContents(final EditorState editor, IFile file, final String contents) throws CoreException {
 		assert !Thread.holdsLock(observer.getSyncRoot()) || Thread.holdsLock(Environment.getSyncRoot())
 			: "Acquiring a resource lock can cause a deadlock";
 
-		final IFile file = editor.getProject().getRawProject().getFile(filename);
 		InputStream resultStream = new ByteArrayInputStream(contents.getBytes());
 		if (file.exists()) {
 			file.setContents(resultStream, true, true, null);
@@ -206,7 +207,6 @@
 		} else {
 			file.create(resultStream, true, null);
 		}
-		return file;
 	}
 
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2009-11-30 11:08:45 UTC (rev 20326)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2009-11-30 13:02:25 UTC (rev 20327)
@@ -97,13 +97,12 @@
 		try {
 			IBuilderMap builders = editor.getDescriptor().createService(IBuilderMap.class);
 			IBuilder builder = builders.get(this.builder);
-			builder.setOpenEditorEnabled(false);
 			
 			IStrategoAstNode newSelection = findNewSelection(editor);
 			if (newSelection != null) {
-				builder.execute(editor, selection = newSelection);
+				builder.execute(editor, selection = newSelection, targetFile, true);
 			} else {
-				builder.execute(editor, editor.getParseController().getCurrentAst());
+				builder.execute(editor, editor.getParseController().getCurrentAst(), targetFile, true);
 			}
 
 		} catch (BadDescriptorException e) {

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/ReportWithFailure.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/ReportWithFailure.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/ReportWithFailure.java	2009-11-30 13:02:25 UTC (rev 20327)
@@ -0,0 +1,84 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import static org.spoofax.interpreter.core.Tools.*;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.StrategoErrorExit;
+import org.strategoxt.lang.StrategoExit;
+import org.strategoxt.lang.Strategy;
+import org.strategoxt.stratego_lib.log_0_3;
+import org.strategoxt.stratego_lib.report_failure_1_0;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ReportWithFailure extends report_failure_1_0 {
+	
+	private static volatile boolean isInited;
+	
+	private report_failure_1_0 proceed = instance;
+	
+	private final LogIntercept logIntercept = new LogIntercept();
+	
+	public static void init() {
+		if (!isInited) {
+			report_failure_1_0.instance = new ReportWithFailure();
+			isInited = true;
+		}
+	}
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+		synchronized (this) {
+			try {
+				logIntercept.enabled = true;
+				logIntercept.lastMessage = null;
+				logIntercept.lastTerm = null;
+				return proceed.invoke(context, current, s);
+			} catch (StrategoExit e) {
+				if (logIntercept.lastMessage != null && isTermString(logIntercept.lastMessage)) {
+					throw new StrategoErrorExit(asJavaString(logIntercept.lastMessage), logIntercept.lastTerm);
+				} else {
+					throw new StrategoExit(e);
+				}
+			} finally {
+				logIntercept.enabled = false;
+			}
+		}
+	}
+	
+	/**
+	 * Intercepts logging messages.
+	 */
+	private class LogIntercept extends log_0_3 {
+		
+		private final log_0_3 proceed = instance;
+		
+		IStrategoTerm lastTerm;
+		
+		IStrategoTerm lastMessage;
+		
+		boolean enabled;
+		
+		@Override
+		public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm level, IStrategoTerm message, IStrategoTerm term) {
+			if (enabled) {
+				synchronized (ReportWithFailure.this) {
+					if (enabled) {
+						lastTerm = term;
+						lastMessage = message;
+					}
+				}
+			}
+			return proceed.invoke(context, current, level, message, term);
+		}
+	}
+}
+
+
+
+
+
+
+

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2009-11-30 11:08:45 UTC (rev 20326)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2009-11-30 13:02:25 UTC (rev 20327)
@@ -3,11 +3,8 @@
    <description url="http://www.lclnet.nl/update">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.1.1.5.jar" id="org.strategoxt.imp" version="0.1.1.5">
+   <feature url="features/org.strategoxt.imp_0.1.2.2.jar" id="org.strategoxt.imp" version="0.1.2.2">
       <category name="Spoofax/IMP"/>
    </feature>
-   <feature url="features/org.strategoxt.imp_0.1.2.jar" id="org.strategoxt.imp" version="0.1.2">
-      <category name="Spoofax/IMP"/>
-   </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP"/>
 </site>



